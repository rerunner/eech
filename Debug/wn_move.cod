; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?draw_weapon_terrain_los_markers@@3HA		; draw_weapon_terrain_los_markers
_BSS	SEGMENT
?draw_weapon_terrain_los_markers@@3HA DD 01H DUP (?)	; draw_weapon_terrain_los_markers
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	?acos@@YGMM@Z					; acos
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan@@YGMM@Z					; atan
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?floor@@YGMM@Z					; floor
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?weapon_movement@@YGXPAUENTITY@@@Z		; weapon_movement
PUBLIC	?generate_ballistics_tables@@YGXXZ		; generate_ballistics_tables
PUBLIC	?delete_ballistics_tables@@YGXXZ		; delete_ballistics_tables
PUBLIC	?get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z	; get_ballistic_pitch_deflection
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	?calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z ; calculate_projectory
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA ; `get_intercept_point'::`1'::__LINE__Var
PUBLIC	??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0O@MLKNJBBI@weapon_entity@		; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@NMPFNFPN@intercept_point@		; `string'
PUBLIC	?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA ; `get_target_position'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA ; `move_guided_weapon'::`1'::__LINE__Var
PUBLIC	??_C@_0N@NCPDDPGK@new_position@			; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE@				; `string'
PUBLIC	??_C@_0EM@NPHPGHAJ@?$CFs?5self?5destructed?5due?5to?5turn?5@ ; `string'
PUBLIC	??_C@_0DG@DPMAFHMC@weapon_database?$FLraw?9?$DOmob?4sub_ty@ ; `string'
PUBLIC	??_C@_0DN@COFLBLK@?$CFs?5self?5destructed?5due?5to?5speed@ ; `string'
PUBLIC	?__LINE__Var@?0??move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z@4JA ; `move_unguided_weapon'::`1'::__LINE__Var
PUBLIC	??_C@_03DGOGAGNC@raw@				; `string'
PUBLIC	??_C@_0CE@KKMMEIBM@new_position?9?$DOy?5?$DO?$DN?5?910000000000@ ; `string'
PUBLIC	?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA ; `check_guidance_source'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@PFLGKOPF@Finding?5parent?8s?5target?5?$CIparent@ ; `string'
PUBLIC	?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA ; `weapon_movement'::`1'::__LINE__Var
PUBLIC	??_C@_0DB@CIDEJCNI@entity_sub_type_weapon_valid?5?$CIr@ ; `string'
PUBLIC	??_C@_0CH@GPKDJBLJ@point_inside_map_volume?$CI?$CGnew_po@ ; `string'
PUBLIC	?__LINE__Var@?0??get_floor_pitch_index@@YGHMPAM@Z@4JA ; `get_floor_pitch_index'::`1'::__LINE__Var
PUBLIC	??_C@_09GINPIOCD@closeness@			; `string'
PUBLIC	?__LINE__Var@?0??calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z@4JA ; `calculate_projectory'::`1'::__LINE__Var
PUBLIC	??_C@_0CD@GMCKHHPN@range?5?5?5?5?5velocity?5?5?5?5time?5?5?5dr@ ; `string'
PUBLIC	??_C@_0DP@ENOCAKPL@get_floor_pitch_index?$CIpitch?5?$CL?5r@ ; `string'
PUBLIC	??_C@_0BJ@EJLJFGBB@stop_index?5?$DO?$DN?5range_mark@ ; `string'
PUBLIC	??_C@_0DB@KOFHGJCE@?$CF5d?5m?5?5?$CF6?41f?5m?1s?5?$CF5?41f?5s?5?$CF6?41f?5@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0BE@PCAMNAHC@ballistics?9data?4txt@	; `string'
PUBLIC	??_C@_0OJ@KEKGJIFA@Note?3?5this?5file?5only?5lists?5ball@ ; `string'
PUBLIC	??_C@_0EA@BKLOADPN@?6?$CFs?5?5?5max_range?3?5?$CF?40f?5m?0?5muzzle@ ; `string'
PUBLIC	?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA ; `get_ballistic_pitch_deflection'::`1'::__LINE__Var
PUBLIC	??_C@_0P@LPGILHMP@time_of_flight@		; `string'
PUBLIC	??_C@_0N@CHFNMJJA@aiming_pitch@			; `string'
PUBLIC	??_C@_0N@NLAIBEJP@range?5?$DO?$DN?50?40@	; `string'
PUBLIC	??_C@_0DG@NIBCJOIC@pitch_index?5?$DO?$DN?50?5?$CG?$CG?5pitch_index@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d23d70a
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f5c987100000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f91df46a0000000
PUBLIC	__real@3fa00000
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fb1eb851eb851ec
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe921fb51000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@40139eb860000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@401e000000000000
PUBLIC	__real@4020000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@402e000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4052c00000000000
PUBLIC	__real@4062c00000000000
PUBLIC	__real@406f400000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@407c200000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@4087700000000000
PUBLIC	__real@4089000000000000
PUBLIC	__real@408c200000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40b7700000000000
PUBLIC	__real@40bd4c0000000000
PUBLIC	__real@411cf5c3
PUBLIC	__real@42652ee0
PUBLIC	__real@bf50624dd2f1a9fc
PUBLIC	__real@bf9eb851eb851eb8
PUBLIC	__real@bfbde44e
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfc999999999999a
PUBLIC	__real@bfd0000000000000
PUBLIC	__real@bfd3333333333333
PUBLIC	__real@bfe199999999999a
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c004000000000000
PUBLIC	__real@c014000000000000
PUBLIC	__real@c01e000000000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c028000000000000
PUBLIC	__real@c079000000000000
PUBLIC	__real@c0a00000
PUBLIC	__real@c1200000
PUBLIC	__real@c1700000
PUBLIC	__real@c1a00000
PUBLIC	__real@c26d1a94a2000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fputs:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_acos:PROC
EXTRN	_asin:PROC
EXTRN	_atan:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU1@1@Z:PROC ; get_3d_vector_cross_product
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?get_identity_matrix3x3@@YGXQAY02M@Z:PROC	; get_identity_matrix3x3
EXTRN	?get_3d_transformation_matrix_from_face_normal_and_heading@@YGXQAY02MPBUVEC3D@@M@Z:PROC ; get_3d_transformation_matrix_from_face_normal_and_heading
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z:PROC ; get_terrain_3d_point_sector_max_elevation
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z:PROC ; get_3d_terrain_face_normal
EXTRN	?bound_position_to_map_volume@@YGHPAUVEC3D@@@Z:PROC ; bound_position_to_map_volume
EXTRN	?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z:PROC ; insert_local_entity_into_parents_child_list
EXTRN	?delete_local_entity_from_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@@Z:PROC ; delete_local_entity_from_parents_child_list
EXTRN	?set_client_server_entity_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z:PROC ; set_client_server_entity_parent
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?create_rotated_debug_3d_object@@YGPAUDEBUG_3D_OBJECT@@PAUVEC3D@@MMMHMM@Z:PROC ; create_rotated_debug_3d_object
EXTRN	?get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z:PROC ; get_ground_impact_point
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z:PROC ; collision_test_weapon_with_given_target
EXTRN	?collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU1@PAUVEC3D@@1@Z:PROC ; collision_test_weapon_with_any_target
EXTRN	?collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z:PROC ; collision_test_weapon_with_trees
EXTRN	?get_smoke_grenade_distract_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_smoke_grenade_distract_position
EXTRN	?get_jammer_distract_position@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_jammer_distract_position
EXTRN	?get_decoy_type_for_weapon@@YGHPAUENTITY@@@Z:PROC ; get_decoy_type_for_weapon
EXTRN	?create_client_server_weapon_killed_explosion_effect@@YGXPAUENTITY@@@Z:PROC ; create_client_server_weapon_killed_explosion_effect
EXTRN	?eo_tracking_point_valid@@YGHPAUVEC3D@@@Z:PROC	; eo_tracking_point_valid
EXTRN	?write_tacview_unit_update@@YGXPAUENTITY@@HHH@Z:PROC ; write_tacview_unit_update
EXTRN	__ftol2_sse:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?entity_type_names@@3PAPBDA:DWORD		; entity_type_names
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_set_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?camera_entity@@3PAUENTITY@@A:DWORD		; camera_entity
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tacview_log_file@@3PAU_iobuf@@A:DWORD		; tacview_log_file
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?ballistics_table@@3PAY0DH@PAUballistics_data@@A DD 07bcH DUP (?) ; ballistics_table
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c26d1a94a2000000
CONST	SEGMENT
__real@c26d1a94a2000000 DQ 0c26d1a94a2000000r	; -1e+12
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1700000
CONST	SEGMENT
__real@c1700000 DD 0c1700000r			; -15
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c079000000000000
CONST	SEGMENT
__real@c079000000000000 DQ 0c079000000000000r	; -400
CONST	ENDS
;	COMDAT __real@c028000000000000
CONST	SEGMENT
__real@c028000000000000 DQ 0c028000000000000r	; -12
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c01e000000000000
CONST	SEGMENT
__real@c01e000000000000 DQ 0c01e000000000000r	; -7.5
CONST	ENDS
;	COMDAT __real@c014000000000000
CONST	SEGMENT
__real@c014000000000000 DQ 0c014000000000000r	; -5
CONST	ENDS
;	COMDAT __real@c004000000000000
CONST	SEGMENT
__real@c004000000000000 DQ 0c004000000000000r	; -2.5
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe199999999999a
CONST	SEGMENT
__real@bfe199999999999a DQ 0bfe199999999999ar	; -0.55
CONST	ENDS
;	COMDAT __real@bfd3333333333333
CONST	SEGMENT
__real@bfd3333333333333 DQ 0bfd3333333333333r	; -0.3
CONST	ENDS
;	COMDAT __real@bfd0000000000000
CONST	SEGMENT
__real@bfd0000000000000 DQ 0bfd0000000000000r	; -0.25
CONST	ENDS
;	COMDAT __real@bfc999999999999a
CONST	SEGMENT
__real@bfc999999999999a DQ 0bfc999999999999ar	; -0.2
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bfbde44e
CONST	SEGMENT
__real@bfbde44e DD 0bfbde44er			; -1.48353
CONST	ENDS
;	COMDAT __real@bf9eb851eb851eb8
CONST	SEGMENT
__real@bf9eb851eb851eb8 DQ 0bf9eb851eb851eb8r	; -0.03
CONST	ENDS
;	COMDAT __real@bf50624dd2f1a9fc
CONST	SEGMENT
__real@bf50624dd2f1a9fc DQ 0bf50624dd2f1a9fcr	; -0.001
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@411cf5c3
CONST	SEGMENT
__real@411cf5c3 DD 0411cf5c3r			; 9.81
CONST	ENDS
;	COMDAT __real@40bd4c0000000000
CONST	SEGMENT
__real@40bd4c0000000000 DQ 040bd4c0000000000r	; 7500
CONST	ENDS
;	COMDAT __real@40b7700000000000
CONST	SEGMENT
__real@40b7700000000000 DQ 040b7700000000000r	; 6000
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@408c200000000000
CONST	SEGMENT
__real@408c200000000000 DQ 0408c200000000000r	; 900
CONST	ENDS
;	COMDAT __real@4089000000000000
CONST	SEGMENT
__real@4089000000000000 DQ 04089000000000000r	; 800
CONST	ENDS
;	COMDAT __real@4087700000000000
CONST	SEGMENT
__real@4087700000000000 DQ 04087700000000000r	; 750
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@407c200000000000
CONST	SEGMENT
__real@407c200000000000 DQ 0407c200000000000r	; 450
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@4062c00000000000
CONST	SEGMENT
__real@4062c00000000000 DQ 04062c00000000000r	; 150
CONST	ENDS
;	COMDAT __real@4052c00000000000
CONST	SEGMENT
__real@4052c00000000000 DQ 04052c00000000000r	; 75
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402e000000000000
CONST	SEGMENT
__real@402e000000000000 DQ 0402e000000000000r	; 15
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@401e000000000000
CONST	SEGMENT
__real@401e000000000000 DQ 0401e000000000000r	; 7.5
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@40139eb860000000
CONST	SEGMENT
__real@40139eb860000000 DQ 040139eb860000000r	; 4.905
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe921fb51000000
CONST	SEGMENT
__real@3fe921fb51000000 DQ 03fe921fb51000000r	; 0.785398
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb1eb851eb851ec
CONST	SEGMENT
__real@3fb1eb851eb851ec DQ 03fb1eb851eb851ecr	; 0.07
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f91df46a0000000
CONST	SEGMENT
__real@3f91df46a0000000 DQ 03f91df46a0000000r	; 0.0174533
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f5c987100000000
CONST	SEGMENT
__real@3f5c987100000000 DQ 03f5c987100000000r	; 0.00174533
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NIBCJOIC@pitch_index?5?$DO?$DN?50?5?$CG?$CG?5pitch_index@
CONST	SEGMENT
??_C@_0DG@NIBCJOIC@pitch_index?5?$DO?$DN?50?5?$CG?$CG?5pitch_index@ DB 'p'
	DB	'itch_index >= 0 && pitch_index < TOTAL_PITCH_INDICES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLAIBEJP@range?5?$DO?$DN?50?40@
CONST	SEGMENT
??_C@_0N@NLAIBEJP@range?5?$DO?$DN?50?40@ DB 'range >= 0.0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHFNMJJA@aiming_pitch@
CONST	SEGMENT
??_C@_0N@CHFNMJJA@aiming_pitch@ DB 'aiming_pitch', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LPGILHMP@time_of_flight@
CONST	SEGMENT
??_C@_0P@LPGILHMP@time_of_flight@ DB 'time_of_flight', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA DD 0708H ; `get_ballistic_pitch_deflection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EA@BKLOADPN@?6?$CFs?5?5?5max_range?3?5?$CF?40f?5m?0?5muzzle@
CONST	SEGMENT
??_C@_0EA@BKLOADPN@?6?$CFs?5?5?5max_range?3?5?$CF?40f?5m?0?5muzzle@ DB 0aH
	DB	'%s   max_range: %.0f m, muzzle velocity: %.0f m/s, drag: %.2f'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0OJ@KEKGJIFA@Note?3?5this?5file?5only?5lists?5ball@
CONST	SEGMENT
??_C@_0OJ@KEKGJIFA@Note?3?5this?5file?5only?5lists?5ball@ DB 'Note: this '
	DB	'file only lists ballistics data generated from the currently '
	DB	'used GWUT File', 0aH, 'Changing the values will have no effec'
	DB	't, change the GWUT file to see change', 0aH, 'This file can b'
	DB	'e used to help getting good values for the GWUT file', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PCAMNAHC@ballistics?9data?4txt@
CONST	SEGMENT
??_C@_0BE@PCAMNAHC@ballistics?9data?4txt@ DB 'ballistics-data.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KOFHGJCE@?$CF5d?5m?5?5?$CF6?41f?5m?1s?5?$CF5?41f?5s?5?$CF6?41f?5@
CONST	SEGMENT
??_C@_0DB@KOFHGJCE@?$CF5d?5m?5?5?$CF6?41f?5m?1s?5?$CF5?41f?5s?5?$CF6?41f?5@ DB '%'
	DB	'5d m  %6.1f m/s %5.1f s %6.1f m (%.1f degrees)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EJLJFGBB@stop_index?5?$DO?$DN?5range_mark@
CONST	SEGMENT
??_C@_0BJ@EJLJFGBB@stop_index?5?$DO?$DN?5range_mark@ DB 'stop_index >= ra'
	DB	'nge_mark', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@ENOCAKPL@get_floor_pitch_index?$CIpitch?5?$CL?5r@
CONST	SEGMENT
??_C@_0DP@ENOCAKPL@get_floor_pitch_index?$CIpitch?5?$CL?5r@ DB 'get_floor'
	DB	'_pitch_index(pitch + rad(0.1), &dummy) == pitch_index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GMCKHHPN@range?5?5?5?5?5velocity?5?5?5?5time?5?5?5dr@
CONST	SEGMENT
??_C@_0CD@GMCKHHPN@range?5?5?5?5?5velocity?5?5?5?5time?5?5?5dr@ DB 'range'
	DB	'     velocity    time   drop', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z@4JA DD 062bH ; `calculate_projectory'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09GINPIOCD@closeness@
CONST	SEGMENT
??_C@_09GINPIOCD@closeness@ DB 'closeness', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_floor_pitch_index@@YGHMPAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_floor_pitch_index@@YGHMPAM@Z@4JA DD 0603H ; `get_floor_pitch_index'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@GPKDJBLJ@point_inside_map_volume?$CI?$CGnew_po@
CONST	SEGMENT
??_C@_0CH@GPKDJBLJ@point_inside_map_volume?$CI?$CGnew_po@ DB 'point_insid'
	DB	'e_map_volume(&new_position)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CIDEJCNI@entity_sub_type_weapon_valid?5?$CIr@
CONST	SEGMENT
??_C@_0DB@CIDEJCNI@entity_sub_type_weapon_valid?5?$CIr@ DB 'entity_sub_ty'
	DB	'pe_weapon_valid (raw->mob.sub_type)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA DD 0391H ; `weapon_movement'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DE@PFLGKOPF@Finding?5parent?8s?5target?5?$CIparent@
CONST	SEGMENT
??_C@_0DE@PFLGKOPF@Finding?5parent?8s?5target?5?$CIparent@ DB 'Finding pa'
	DB	'rent''s target (parent: %p, parent type %s', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA DD 0331H ; `check_guidance_source'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@KKMMEIBM@new_position?9?$DOy?5?$DO?$DN?5?910000000000@
CONST	SEGMENT
??_C@_0CE@KKMMEIBM@new_position?9?$DOy?5?$DO?$DN?5?910000000000@ DB 'new_'
	DB	'position->y >= -1000000000000.0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z@4JA DD 0285H ; `move_unguided_weapon'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DN@COFLBLK@?$CFs?5self?5destructed?5due?5to?5speed@
CONST	SEGMENT
??_C@_0DN@COFLBLK@?$CFs?5self?5destructed?5due?5to?5speed@ DB '%s self de'
	DB	'structed due to speed dropping too low (%0.1f m/s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DPMAFHMC@weapon_database?$FLraw?9?$DOmob?4sub_ty@
CONST	SEGMENT
??_C@_0DG@DPMAFHMC@weapon_database?$FLraw?9?$DOmob?4sub_ty@ DB 'weapon_da'
	DB	'tabase[raw->mob.sub_type].inhibit_time > 0.0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@NPHPGHAJ@?$CFs?5self?5destructed?5due?5to?5turn?5@
CONST	SEGMENT
??_C@_0EM@NPHPGHAJ@?$CFs?5self?5destructed?5due?5to?5turn?5@ DB '%s self '
	DB	'destructed due to turn demand too high (%0.1f degrees). limit'
	DB	': %.2f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE@ DB 'FALSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCPDDPGK@new_position@
CONST	SEGMENT
??_C@_0N@NCPDDPGK@new_position@ DB 'new_position', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA DD 012dH ; `move_guided_weapon'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA DD 0e1H ; `get_target_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@NMPFNFPN@intercept_point@
CONST	SEGMENT
??_C@_0BA@NMPFNFPN@intercept_point@ DB 'intercept_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MLKNJBBI@weapon_entity@
CONST	SEGMENT
??_C@_0O@MLKNJBBI@weapon_entity@ DB 'weapon_entity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move'
	DB	'.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA DD 098H ; `get_intercept_point'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z
_TEXT	SEGMENT
tv445 = -144						; size = 4
$T1 = -140						; size = 4
_expected_height$2 = -72				; size = 4
_drop_angle$3 = -68					; size = 4
_stop_index$4 = -64					; size = 4
_drop$5 = -60						; size = 4
_range_mark$6 = -56					; size = 4
_last_write_range$7 = -52				; size = 4
_delta_time$8 = -48					; size = 4
_max_range$9 = -44					; size = 4
_pitch_ratio$10 = -40					; size = 4
_time$11 = -36						; size = 4
_dummy$12 = -32						; size = 4
_data$ = -28						; size = 4
_pitch$ = -24						; size = 4
_num_range_values$ = -20				; size = 4
_zero_pitch$ = -16					; size = 4
_pitch_index$ = -12					; size = 4
_i$ = -8						; size = 4
_dummy$ = -4						; size = 4
_wpn$ = 8						; size = 4
_output$ = 12						; size = 4
?calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z PROC	; calculate_projectory, COMDAT

; 1579 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1580 : 	float
; 1581 : 		dummy;
; 1582 : 
; 1583 : 	int
; 1584 : 		i,
; 1585 : 		pitch_index = 0,

  0000c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pitch_index$[ebp], 0

; 1586 : 		zero_pitch = get_floor_pitch_index(0, &dummy),

  00013	8d 45 fc	 lea	 eax, DWORD PTR _dummy$[ebp]
  00016	50		 push	 eax
  00017	51		 push	 ecx
  00018	0f 57 c0	 xorps	 xmm0, xmm0
  0001b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00020	e8 00 00 00 00	 call	 ?get_floor_pitch_index@@YGHMPAM@Z ; get_floor_pitch_index
  00025	89 45 f0	 mov	 DWORD PTR _zero_pitch$[ebp], eax

; 1587 : 		num_range_values;
; 1588 : 
; 1589 : 	float
; 1590 : 		pitch;
; 1591 : 
; 1592 : 	ballistics_data** data = ballistics_table[wpn->mob.sub_type];

  00028	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  0002b	69 08 dc 00 00
	00		 imul	 ecx, DWORD PTR [eax], 220
  00031	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ballistics_table@@3PAY0DH@PAUballistics_data@@A
  00037	89 4d e4	 mov	 DWORD PTR _data$[ebp], ecx

; 1593 : 
; 1594 : 	num_range_values = (int)(weapon_database[wpn->mob.sub_type].max_range / RANGE_STEP) + 2;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  0003d	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00043	f3 0f 5a 81 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+144]
  0004b	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4034000000000000
  00053	f2 0f 2c d0	 cvttsd2si edx, xmm0
  00057	83 c2 02	 add	 edx, 2
  0005a	89 55 ec	 mov	 DWORD PTR _num_range_values$[ebp], edx

; 1595 : 
; 1596 : 	// initialize -90 and +90
; 1597 : 	data[0] = (ballistics_data *) safe_malloc(sizeof(ballistics_data) * num_range_values);

  0005d	8b 45 ec	 mov	 eax, DWORD PTR _num_range_values$[ebp]
  00060	c1 e0 03	 shl	 eax, 3
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00069	b9 04 00 00 00	 mov	 ecx, 4
  0006e	6b d1 00	 imul	 edx, ecx, 0
  00071	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp]
  00074	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 1598 : 	data[TOTAL_PITCH_INDICES - 1] = (ballistics_data *) safe_malloc(sizeof(ballistics_data) * num_range_values);

  00077	8b 45 ec	 mov	 eax, DWORD PTR _num_range_values$[ebp]
  0007a	c1 e0 03	 shl	 eax, 3
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00083	b9 04 00 00 00	 mov	 ecx, 4
  00088	6b d1 34	 imul	 edx, ecx, 52
  0008b	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp]
  0008e	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 1599 : 
; 1600 : 	for (i=0; i < num_range_values; i++)

  00091	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00098	eb 09		 jmp	 SHORT $LN4@calculate_
$LN2@calculate_:
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@calculate_:
  000a3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	3b 45 ec	 cmp	 eax, DWORD PTR _num_range_values$[ebp]
  000a9	7d 68		 jge	 SHORT $LN3@calculate_

; 1601 : 	{
; 1602 : 		data[0][i].drop_angle = 0.0;

  000ab	b8 04 00 00 00	 mov	 eax, 4
  000b0	6b c8 00	 imul	 ecx, eax, 0
  000b3	8b 55 e4	 mov	 edx, DWORD PTR _data$[ebp]
  000b6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 04 c8	 movss	 DWORD PTR [eax+ecx*8], xmm0

; 1603 : 		data[0][i].flight_time = 0.0;

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 00	 imul	 ecx, eax, 0
  000cc	8b 55 e4	 mov	 edx, DWORD PTR _data$[ebp]
  000cf	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000d5	0f 57 c0	 xorps	 xmm0, xmm0
  000d8	f3 0f 11 44 c8
	04		 movss	 DWORD PTR [eax+ecx*8+4], xmm0

; 1604 : 		data[TOTAL_PITCH_INDICES-1][i].drop_angle = 0.0;

  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	6b c8 34	 imul	 ecx, eax, 52
  000e6	8b 55 e4	 mov	 edx, DWORD PTR _data$[ebp]
  000e9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000ec	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000ef	0f 57 c0	 xorps	 xmm0, xmm0
  000f2	f3 0f 11 04 c8	 movss	 DWORD PTR [eax+ecx*8], xmm0

; 1605 : 		data[TOTAL_PITCH_INDICES-1][i].flight_time = 0.0;

  000f7	b8 04 00 00 00	 mov	 eax, 4
  000fc	6b c8 34	 imul	 ecx, eax, 52
  000ff	8b 55 e4	 mov	 edx, DWORD PTR _data$[ebp]
  00102	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00105	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00108	0f 57 c0	 xorps	 xmm0, xmm0
  0010b	f3 0f 11 44 c8
	04		 movss	 DWORD PTR [eax+ecx*8+4], xmm0

; 1606 : 	}

  00111	eb 87		 jmp	 SHORT $LN2@calculate_
$LN3@calculate_:

; 1607 : 
; 1608 : 	// write header for ballistics data:
; 1609 : 	if (output)

  00113	83 7d 0c 00	 cmp	 DWORD PTR _output$[ebp], 0
  00117	74 12		 je	 SHORT $LN15@calculate_

; 1610 : 		fputs("range     velocity    time   drop\n", output);

  00119	8b 45 0c	 mov	 eax, DWORD PTR _output$[ebp]
  0011c	50		 push	 eax
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GMCKHHPN@range?5?5?5?5?5velocity?5?5?5?5time?5?5?5dr@
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00128	83 c4 08	 add	 esp, 8
$LN15@calculate_:

; 1611 : 
; 1612 : 	// initialize all the other pitches
; 1613 : 	pitch_index = 1;

  0012b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _pitch_index$[ebp], 1

; 1614 : 	pitch = rad(-90.0 + PITCH_STEP);

  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfbde44e
  0013a	f3 0f 11 45 e8	 movss	 DWORD PTR _pitch$[ebp], xmm0
$LN5@calculate_:

; 1615 : 	while (pitch_index < (TOTAL_PITCH_INDICES - 1))

  0013f	83 7d f4 34	 cmp	 DWORD PTR _pitch_index$[ebp], 52 ; 00000034H
  00143	0f 8d 9b 04 00
	00		 jge	 $LN6@calculate_

; 1616 : 	{
; 1617 : 		float
; 1618 : 			#ifdef DEBUG
; 1619 : 			dummy,
; 1620 : 			#endif
; 1621 : 			time = 0.0,

  00149	0f 57 c0	 xorps	 xmm0, xmm0
  0014c	f3 0f 11 45 dc	 movss	 DWORD PTR _time$11[ebp], xmm0

; 1622 : 			pitch_ratio,
; 1623 : 			max_range,
; 1624 : 			delta_time = 0.02;

  00151	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ca3d70a
  00159	f3 0f 11 45 d0	 movss	 DWORD PTR _delta_time$8[ebp], xmm0

; 1625 : 
; 1626 : 		int
; 1627 : 			last_write_range = 0,

  0015e	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _last_write_range$7[ebp], 0

; 1628 : 			range_mark = 0;

  00165	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _range_mark$6[ebp], 0

; 1629 : 
; 1630 : 
; 1631 : 		ASSERT(get_floor_pitch_index(pitch + rad(0.1), &dummy) == pitch_index);

  0016c	8d 45 e0	 lea	 eax, DWORD PTR _dummy$12[ebp]
  0016f	50		 push	 eax
  00170	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  00175	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f5c987100000000
  0017d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00181	51		 push	 ecx
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	e8 00 00 00 00	 call	 ?get_floor_pitch_index@@YGHMPAM@Z ; get_floor_pitch_index
  0018c	3b 45 f4	 cmp	 eax, DWORD PTR _pitch_index$[ebp]
  0018f	74 18		 je	 SHORT $LN16@calculate_
  00191	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z@4JA
  00196	83 c0 34	 add	 eax, 52			; 00000034H
  00199	50		 push	 eax
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@ENOCAKPL@get_floor_pitch_index?$CIpitch?5?$CL?5r@
  001a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@calculate_:

; 1632 : 
; 1633 : 		data[pitch_index] = (ballistics_data *) safe_malloc(sizeof(ballistics_data) * num_range_values);

  001a9	8b 45 ec	 mov	 eax, DWORD PTR _num_range_values$[ebp]
  001ac	c1 e0 03	 shl	 eax, 3
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  001b5	8b 4d f4	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  001b8	8b 55 e4	 mov	 edx, DWORD PTR _data$[ebp]
  001bb	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1634 : 
; 1635 : 		// initialize weapon for new firing
; 1636 : 		wpn->weapon_lifetime = weapon_database[wpn->mob.sub_type].burn_time;

  001be	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  001c1	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  001c7	8b 55 08	 mov	 edx, DWORD PTR _wpn$[ebp]
  001ca	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+180]
  001d0	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax

; 1637 : 		wpn->mob.velocity = weapon_database[wpn->mob.sub_type].muzzle_velocity;

  001d6	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  001d9	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  001df	8b 55 08	 mov	 edx, DWORD PTR _wpn$[ebp]
  001e2	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+164]
  001e8	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1638 : 
; 1639 : 		wpn->mob.position.x = 0.0;

  001eb	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  001ee	0f 57 c0	 xorps	 xmm0, xmm0
  001f1	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1640 : 		wpn->mob.position.y = 0.0;

  001f6	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  001f9	0f 57 c0	 xorps	 xmm0, xmm0
  001fc	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1641 : 		wpn->mob.position.z = 0.0;

  00201	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  00204	0f 57 c0	 xorps	 xmm0, xmm0
  00207	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1642 : 
; 1643 : 		get_identity_matrix3x3(wpn->mob.attitude);

  0020c	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  0020f	83 c0 10	 add	 eax, 16			; 00000010H
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 ?get_identity_matrix3x3@@YGXQAY02M@Z ; get_identity_matrix3x3

; 1644 : 		get_3d_transformation_matrix(wpn->mob.attitude, 0.0, pitch, 0.0);

  00218	51		 push	 ecx
  00219	0f 57 c0	 xorps	 xmm0, xmm0
  0021c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00221	51		 push	 ecx
  00222	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022c	51		 push	 ecx
  0022d	0f 57 c0	 xorps	 xmm0, xmm0
  00230	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00235	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  00238	83 c0 10	 add	 eax, 16			; 00000010H
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 1645 : 
; 1646 : 		// initialize 0-range:
; 1647 : 		data[pitch_index][range_mark].drop_angle = 0.0;

  00241	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  00244	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp]
  00247	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0024a	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  0024d	0f 57 c0	 xorps	 xmm0, xmm0
  00250	f3 0f 11 04 c2	 movss	 DWORD PTR [edx+eax*8], xmm0

; 1648 : 		data[pitch_index][range_mark].flight_time = 0.0;

  00255	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  00258	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp]
  0025b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0025e	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  00261	0f 57 c0	 xorps	 xmm0, xmm0
  00264	f3 0f 11 44 c2
	04		 movss	 DWORD PTR [edx+eax*8+4], xmm0

; 1649 : 		range_mark++;

  0026a	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  0026d	83 c0 01	 add	 eax, 1
  00270	89 45 c8	 mov	 DWORD PTR _range_mark$6[ebp], eax

; 1650 : 
; 1651 : 		pitch_ratio = tan(pitch);

  00273	51		 push	 ecx
  00274	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027e	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00283	d9 5d d8	 fstp	 DWORD PTR _pitch_ratio$10[ebp]

; 1652 : 
; 1653 : 		// don't calculate out to entire range for very high or low pitch values (takes too long)
; 1654 : 		max_range = min(weapon_database[wpn->mob.sub_type].max_range,

  00286	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  00289	69 30 e0 00 00
	00		 imul	 esi, DWORD PTR [eax], 224
  0028f	51		 push	 ecx
  00290	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00295	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029a	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0029f	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv445[ebp]
  002a5	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv445[ebp]
  002ad	f3 0f 59 86 90
	00 00 00	 mulss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[esi+144]
  002b5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fa00000
  002bd	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  002c5	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  002cb	51		 push	 ecx
  002cc	8b 55 08	 mov	 edx, DWORD PTR _wpn$[ebp]
  002cf	69 02 e0 00 00
	00		 imul	 eax, DWORD PTR [edx], 224
  002d5	05 90 00 00 00	 add	 eax, OFFSET ?weapon_database@@3PAUWEAPON_DATA@@A+144
  002da	50		 push	 eax
  002db	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  002e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002e4	f3 0f 11 45 d4	 movss	 DWORD PTR _max_range$9[ebp], xmm0
$LN7@calculate_:

; 1655 : 			weapon_database[wpn->mob.sub_type].max_range * cos(pitch) * 1.25f);
; 1656 : 
; 1657 : 		while (wpn->mob.position.z < max_range)

  002e9	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  002ec	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _max_range$9[ebp]
  002f1	0f 2f 40 0c	 comiss	 xmm0, DWORD PTR [eax+12]
  002f5	0f 86 55 02 00
	00		 jbe	 $LN8@calculate_

; 1658 : 		{
; 1659 : 			float drop;
; 1660 : 
; 1661 : 			time += delta_time;

  002fb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _time$11[ebp]
  00300	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _delta_time$8[ebp]
  00305	f3 0f 11 45 dc	 movss	 DWORD PTR _time$11[ebp], xmm0

; 1662 : 			wpn->weapon_lifetime -= delta_time;

  0030a	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  0030d	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  00315	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _delta_time$8[ebp]
  0031a	8b 4d 08	 mov	 ecx, DWORD PTR _wpn$[ebp]
  0031d	f3 0f 11 81 80
	00 00 00	 movss	 DWORD PTR [ecx+128], xmm0

; 1663 : 			move_unguided_weapon(wpn, &wpn->mob.position, delta_time, FALSE);

  00325	6a 00		 push	 0
  00327	51		 push	 ecx
  00328	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _delta_time$8[ebp]
  0032d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00332	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  00335	83 c0 04	 add	 eax, 4
  00338	50		 push	 eax
  00339	8b 4d 08	 mov	 ecx, DWORD PTR _wpn$[ebp]
  0033c	51		 push	 ecx
  0033d	e8 00 00 00 00	 call	 ?move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z ; move_unguided_weapon

; 1664 : 
; 1665 : 			// increase delta_time when projectile slows down a lot so as to ease amount of calculations a little
; 1666 : 			if (wpn->mob.velocity < 150.0)

  00342	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  00345	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  0034a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4062c00000000000
  00352	66 0f 2f c8	 comisd	 xmm1, xmm0
  00356	76 4b		 jbe	 SHORT $LN19@calculate_

; 1667 : 			{
; 1668 : 				delta_time = 0.04;

  00358	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00360	f3 0f 11 45 d0	 movss	 DWORD PTR _delta_time$8[ebp], xmm0

; 1669 : 				if (wpn->mob.velocity < 75.0)

  00365	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  00368	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  0036d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4052c00000000000
  00375	66 0f 2f c8	 comisd	 xmm1, xmm0
  00379	76 0d		 jbe	 SHORT $LN18@calculate_

; 1670 : 					delta_time = 0.1;

  0037b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00383	f3 0f 11 45 d0	 movss	 DWORD PTR _delta_time$8[ebp], xmm0
$LN18@calculate_:

; 1671 : 
; 1672 : 				if (wpn->mob.velocity < 20.0)

  00388	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  0038b	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  00390	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4034000000000000
  00398	66 0f 2f c8	 comisd	 xmm1, xmm0
  0039c	76 05		 jbe	 SHORT $LN19@calculate_

; 1673 : 					break;

  0039e	e9 ad 01 00 00	 jmp	 $LN8@calculate_
$LN19@calculate_:

; 1674 : 			}
; 1675 : 
; 1676 : 			if (wpn->mob.position.z > ((range_mark * RANGE_STEP) - 1.0)) // this is a range we want to sample

  003a3	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  003a6	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  003ab	f2 0f 2a 4d c8	 cvtsi2sd xmm1, DWORD PTR _range_mark$6[ebp]
  003b0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4034000000000000
  003b8	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003c0	66 0f 2f c1	 comisd	 xmm0, xmm1
  003c4	0f 86 81 01 00
	00		 jbe	 $LN23@calculate_

; 1677 : 			{
; 1678 : 				int
; 1679 : 					stop_index = (int)((wpn->mob.position.z + 1) / RANGE_STEP);

  003ca	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  003cd	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  003d2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  003da	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003de	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4034000000000000
  003e6	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  003ea	89 4d c0	 mov	 DWORD PTR _stop_index$4[ebp], ecx

; 1680 : 				float
; 1681 : 					drop_angle,
; 1682 : 					expected_height;
; 1683 : 
; 1684 : 				// adjust for expected height if there was no drop, so as to calculate real drop
; 1685 : 				expected_height = pitch_ratio * wpn->mob.position.z;

  003ed	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  003f0	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _pitch_ratio$10[ebp]
  003f5	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  003fa	f3 0f 11 45 b8	 movss	 DWORD PTR _expected_height$2[ebp], xmm0

; 1686 : 				drop = (expected_height - wpn->mob.position.y) / wpn->mob.position.z;

  003ff	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  00402	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _expected_height$2[ebp]
  00407	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0040c	8b 4d 08	 mov	 ecx, DWORD PTR _wpn$[ebp]
  0040f	f3 0f 5e 41 0c	 divss	 xmm0, DWORD PTR [ecx+12]
  00414	f3 0f 11 45 c4	 movss	 DWORD PTR _drop$5[ebp], xmm0

; 1687 : 				drop_angle = atan(drop);

  00419	51		 push	 ecx
  0041a	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _drop$5[ebp]
  0041f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00424	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  00429	d9 5d bc	 fstp	 DWORD PTR _drop_angle$3[ebp]

; 1688 : 
; 1689 : 				ASSERT(stop_index >= range_mark);

  0042c	8b 45 c0	 mov	 eax, DWORD PTR _stop_index$4[ebp]
  0042f	3b 45 c8	 cmp	 eax, DWORD PTR _range_mark$6[ebp]
  00432	7d 18		 jge	 SHORT $LN21@calculate_
  00434	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z@4JA
  00439	83 c0 6e	 add	 eax, 110		; 0000006eH
  0043c	50		 push	 eax
  0043d	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00442	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EJLJFGBB@stop_index?5?$DO?$DN?5range_mark@
  00447	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@calculate_:

; 1690 : 
; 1691 : 				// if the projectile is really fast we might actually have passed several sample values, so set the value for all of them
; 1692 : 				for (; range_mark <= stop_index; range_mark++)

  0044c	eb 09		 jmp	 SHORT $LN11@calculate_
$LN9@calculate_:
  0044e	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  00451	83 c0 01	 add	 eax, 1
  00454	89 45 c8	 mov	 DWORD PTR _range_mark$6[ebp], eax
$LN11@calculate_:
  00457	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  0045a	3b 45 c0	 cmp	 eax, DWORD PTR _stop_index$4[ebp]
  0045d	7f 2f		 jg	 SHORT $LN10@calculate_

; 1693 : 				{
; 1694 : 					data[pitch_index][range_mark].drop_angle = drop_angle;

  0045f	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  00462	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp]
  00465	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00468	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  0046b	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _drop_angle$3[ebp]
  00470	f3 0f 11 04 c2	 movss	 DWORD PTR [edx+eax*8], xmm0

; 1695 : 					data[pitch_index][range_mark].flight_time = time;

  00475	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  00478	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp]
  0047b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0047e	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  00481	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _time$11[ebp]
  00486	f3 0f 11 44 c2
	04		 movss	 DWORD PTR [edx+eax*8+4], xmm0

; 1696 : 				}

  0048c	eb c0		 jmp	 SHORT $LN9@calculate_
$LN10@calculate_:

; 1697 : 
; 1698 : 				// output to file every WRITE_STEP steps
; 1699 : 				if (output && wpn->mob.position.z > (last_write_range + WRITE_STEP - 1) && pitch_index == zero_pitch)

  0048e	83 7d 0c 00	 cmp	 DWORD PTR _output$[ebp], 0
  00492	0f 84 a9 00 00
	00		 je	 $LN22@calculate_
  00498	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  0049b	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004a0	f2 0f 2a 4d cc	 cvtsi2sd xmm1, DWORD PTR _last_write_range$7[ebp]
  004a5	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@406f400000000000
  004ad	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004b5	66 0f 2f c1	 comisd	 xmm0, xmm1
  004b9	0f 86 82 00 00
	00		 jbe	 $LN22@calculate_
  004bf	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  004c2	3b 45 f0	 cmp	 eax, DWORD PTR _zero_pitch$[ebp]
  004c5	75 7a		 jne	 SHORT $LN22@calculate_

; 1700 : 				{
; 1701 : 					last_write_range += WRITE_STEP;

  004c7	f2 0f 2a 45 cc	 cvtsi2sd xmm0, DWORD PTR _last_write_range$7[ebp]
  004cc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@406f400000000000
  004d4	f2 0f 2c c0	 cvttsd2si eax, xmm0
  004d8	89 45 cc	 mov	 DWORD PTR _last_write_range$7[ebp], eax

; 1702 : 					fprintf(output, "%5d m  %6.1f m/s %5.1f s %6.1f m (%.1f degrees)\n",

  004db	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _drop_angle$3[ebp]
  004e0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  004e8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004ec	83 ec 08	 sub	 esp, 8
  004ef	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004f4	8b 45 08	 mov	 eax, DWORD PTR _wpn$[ebp]
  004f7	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00503	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00507	83 ec 08	 sub	 esp, 8
  0050a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0050f	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _time$11[ebp]
  00514	83 ec 08	 sub	 esp, 8
  00517	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0051c	8b 4d 08	 mov	 ecx, DWORD PTR _wpn$[ebp]
  0051f	f3 0f 5a 41 40	 cvtss2sd xmm0, DWORD PTR [ecx+64]
  00524	83 ec 08	 sub	 esp, 8
  00527	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0052c	8b 55 cc	 mov	 edx, DWORD PTR _last_write_range$7[ebp]
  0052f	52		 push	 edx
  00530	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KOFHGJCE@?$CF5d?5m?5?5?$CF6?41f?5m?1s?5?$CF5?41f?5s?5?$CF6?41f?5@
  00535	8b 45 0c	 mov	 eax, DWORD PTR _output$[ebp]
  00538	50		 push	 eax
  00539	e8 00 00 00 00	 call	 _fprintf
  0053e	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN22@calculate_:

; 1703 : 						last_write_range, wpn->mob.velocity, time, -wpn->mob.position.y, deg(drop_angle));
; 1704 : 				}
; 1705 : 
; 1706 : 				if (range_mark == num_range_values)

  00541	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  00544	3b 45 ec	 cmp	 eax, DWORD PTR _num_range_values$[ebp]
  00547	75 02		 jne	 SHORT $LN23@calculate_

; 1707 : 					break;

  00549	eb 05		 jmp	 SHORT $LN8@calculate_
$LN23@calculate_:

; 1708 : 			}
; 1709 : 		}

  0054b	e9 99 fd ff ff	 jmp	 $LN7@calculate_
$LN8@calculate_:

; 1710 : 
; 1711 : 		// if there's any spots left just copy the last to those (it will be wrong, but better than arbitrary values)
; 1712 : 		for (; range_mark < num_range_values; range_mark++)

  00550	eb 09		 jmp	 SHORT $LN14@calculate_
$LN12@calculate_:
  00552	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  00555	83 c0 01	 add	 eax, 1
  00558	89 45 c8	 mov	 DWORD PTR _range_mark$6[ebp], eax
$LN14@calculate_:
  0055b	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  0055e	3b 45 ec	 cmp	 eax, DWORD PTR _num_range_values$[ebp]
  00561	7d 29		 jge	 SHORT $LN13@calculate_

; 1713 : 		{
; 1714 : 			data[pitch_index][range_mark] = data[pitch_index][range_mark-1];

  00563	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  00566	8b 4d e4	 mov	 ecx, DWORD PTR _data$[ebp]
  00569	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0056c	8b 45 c8	 mov	 eax, DWORD PTR _range_mark$6[ebp]
  0056f	8b 4c c2 f8	 mov	 ecx, DWORD PTR [edx+eax*8-8]
  00573	8b 54 c2 fc	 mov	 edx, DWORD PTR [edx+eax*8-4]
  00577	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  0057a	8b 75 e4	 mov	 esi, DWORD PTR _data$[ebp]
  0057d	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00580	8b 75 c8	 mov	 esi, DWORD PTR _range_mark$6[ebp]
  00583	89 0c f0	 mov	 DWORD PTR [eax+esi*8], ecx
  00586	89 54 f0 04	 mov	 DWORD PTR [eax+esi*8+4], edx

; 1715 : 		}

  0058a	eb c6		 jmp	 SHORT $LN12@calculate_
$LN13@calculate_:

; 1716 : 
; 1717 : 		// we have smaller steps around 0 pitch to get a little better accuracy there
; 1718 : 		pitch_index++;

  0058c	8b 45 f4	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  0058f	83 c0 01	 add	 eax, 1
  00592	89 45 f4	 mov	 DWORD PTR _pitch_index$[ebp], eax

; 1719 : 		if (pitch_index <= NUM_NEGATIVE_PITCH_VALUES)

  00595	83 7d f4 10	 cmp	 DWORD PTR _pitch_index$[ebp], 16 ; 00000010H
  00599	7f 14		 jg	 SHORT $LN24@calculate_

; 1720 : 			pitch += rad(PITCH_STEP);

  0059b	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  005a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3db2b8c2
  005a8	f3 0f 11 45 e8	 movss	 DWORD PTR _pitch$[ebp], xmm0
  005ad	eb 30		 jmp	 SHORT $LN27@calculate_
$LN24@calculate_:

; 1721 : 		else if (pitch_index < (NUM_NEGATIVE_PITCH_VALUES + NUM_SINGLE_DEGREE_VALUES))

  005af	83 7d f4 25	 cmp	 DWORD PTR _pitch_index$[ebp], 37 ; 00000025H
  005b3	7d 18		 jge	 SHORT $LN26@calculate_

; 1722 : 			pitch += rad(1.0);

  005b5	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  005ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f91df46a0000000
  005c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c6	f3 0f 11 45 e8	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 1723 : 		else

  005cb	eb 12		 jmp	 SHORT $LN27@calculate_
$LN26@calculate_:

; 1724 : 			pitch += rad(PITCH_STEP);

  005cd	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  005d2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3db2b8c2
  005da	f3 0f 11 45 e8	 movss	 DWORD PTR _pitch$[ebp], xmm0
$LN27@calculate_:

; 1725 : 	}

  005df	e9 5b fb ff ff	 jmp	 $LN5@calculate_
$LN6@calculate_:

; 1726 : }

  005e4	5f		 pop	 edi
  005e5	5e		 pop	 esi
  005e6	5b		 pop	 ebx
  005e7	8b e5		 mov	 esp, ebp
  005e9	5d		 pop	 ebp
  005ea	c2 08 00	 ret	 8
?calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z ENDP	; calculate_projectory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?get_floor_pitch_index@@YGHMPAM@Z
_TEXT	SEGMENT
_int_pitch$ = -8					; size = 4
_deg_pitch$ = -4					; size = 4
_pitch$ = 8						; size = 4
_closeness$ = 12					; size = 4
?get_floor_pitch_index@@YGHMPAM@Z PROC			; get_floor_pitch_index, COMDAT

; 1539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1540 : 	float deg_pitch = deg(pitch);

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0000e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _deg_pitch$[ebp], xmm0

; 1541 : 
; 1542 : 	int
; 1543 : 		int_pitch;
; 1544 : 
; 1545 : 	ASSERT(closeness);

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _closeness$[ebp], 0
  0001f	75 18		 jne	 SHORT $LN2@get_floor_
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_floor_pitch_index@@YGHMPAM@Z@4JA
  00026	83 c0 06	 add	 eax, 6
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_09GINPIOCD@closeness@
  00034	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_floor_:

; 1546 : 
; 1547 : 	if (deg_pitch < -10.0)

  00039	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _deg_pitch$[ebp]
  0003e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  00046	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004a	76 64		 jbe	 SHORT $LN3@get_floor_

; 1548 : 	{
; 1549 : 		int_pitch = (int)(floor(deg_pitch / PITCH_STEP));

  0004c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _deg_pitch$[ebp]
  00051	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  00059	51		 push	 ecx
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  00064	e8 00 00 00 00	 call	 __ftol2_sse
  00069	89 45 f8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 1550 : 
; 1551 : 		*closeness = 1.0 - ((deg_pitch - (int_pitch * PITCH_STEP)) / PITCH_STEP);

  0006c	6b 45 f8 05	 imul	 eax, DWORD PTR _int_pitch$[ebp], 5
  00070	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00074	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _deg_pitch$[ebp]
  00079	f3 0f 5c c8	 subss	 xmm1, xmm0
  0007d	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40a00000
  00085	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00089	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00091	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00095	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00099	8b 4d 0c	 mov	 ecx, DWORD PTR _closeness$[ebp]
  0009c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1552 : 
; 1553 : 		return int_pitch + (10 / PITCH_STEP) + NUM_NEGATIVE_PITCH_VALUES;

  000a0	8b 45 f8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  000a3	83 c0 12	 add	 eax, 18			; 00000012H
  000a6	e9 bd 00 00 00	 jmp	 $LN6@get_floor_
  000ab	e9 b8 00 00 00	 jmp	 $LN6@get_floor_
$LN3@get_floor_:

; 1554 : 	}
; 1555 : 	else if (deg_pitch < (10.0 + PITCH_STEP))

  000b0	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _deg_pitch$[ebp]
  000b5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@402e000000000000
  000bd	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c1	76 4b		 jbe	 SHORT $LN5@get_floor_

; 1556 : 	{
; 1557 : 		int_pitch = (int)(floor(deg_pitch));

  000c3	51		 push	 ecx
  000c4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _deg_pitch$[ebp]
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  000d3	e8 00 00 00 00	 call	 __ftol2_sse
  000d8	89 45 f8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 1558 : 
; 1559 : 		*closeness = 1.0 - (deg_pitch - int_pitch);

  000db	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _int_pitch$[ebp]
  000e0	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _deg_pitch$[ebp]
  000e5	f3 0f 5c c8	 subss	 xmm1, xmm0
  000e9	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  000ed	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000f5	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000f9	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000fd	8b 45 0c	 mov	 eax, DWORD PTR _closeness$[ebp]
  00100	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1560 : 
; 1561 : 		return int_pitch + NUM_NEGATIVE_PITCH_VALUES + 10;

  00104	8b 45 f8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00107	83 c0 1a	 add	 eax, 26			; 0000001aH
  0010a	eb 5c		 jmp	 SHORT $LN6@get_floor_

; 1562 : 	}
; 1563 : 	else

  0010c	eb 5a		 jmp	 SHORT $LN6@get_floor_
$LN5@get_floor_:

; 1564 : 	{
; 1565 : 		int_pitch = (int)(floor(deg_pitch / PITCH_STEP));

  0010e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _deg_pitch$[ebp]
  00113	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  0011b	51		 push	 ecx
  0011c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00121	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  00126	e8 00 00 00 00	 call	 __ftol2_sse
  0012b	89 45 f8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 1566 : 
; 1567 : 		*closeness = 1.0 - ((deg_pitch - (int_pitch * PITCH_STEP)) / PITCH_STEP);

  0012e	6b 45 f8 05	 imul	 eax, DWORD PTR _int_pitch$[ebp], 5
  00132	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00136	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _deg_pitch$[ebp]
  0013b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0013f	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40a00000
  00147	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  0014b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00153	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00157	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0015b	8b 4d 0c	 mov	 ecx, DWORD PTR _closeness$[ebp]
  0015e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1568 : 
; 1569 : 		return int_pitch - (10 / PITCH_STEP) + NUM_NEGATIVE_PITCH_VALUES + NUM_SINGLE_DEGREE_VALUES - 1;

  00162	8b 45 f8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00165	83 c0 22	 add	 eax, 34			; 00000022H
$LN6@get_floor_:

; 1570 : 	}
; 1571 : }

  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 08 00	 ret	 8
?get_floor_pitch_index@@YGHMPAM@Z ENDP			; get_floor_pitch_index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z
_TEXT	SEGMENT
tv219 = -100						; size = 4
tv192 = -100						; size = 4
tv165 = -100						; size = 4
tv129 = -100						; size = 4
tv211 = -96						; size = 4
tv184 = -96						; size = 4
tv158 = -96						; size = 4
tv90 = -96						; size = 4
_weapon_to_target$ = -28				; size = 12
_target_position$ = -16					; size = 4
_theta$ = -12						; size = 4
_target_range$ = -8					; size = 4
_new_target$ = -4					; size = 4
_raw$ = 8						; size = 4
_en$ = 12						; size = 4
_laser_guided$ = 16					; size = 4
?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z PROC ; check_guidance_source, COMDAT

; 817  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 818  : 	entity
; 819  : 		*new_target;
; 820  : 
; 821  : 	float
; 822  : 		target_range,
; 823  : 		theta;
; 824  : 
; 825  : 	vec3d
; 826  : 		*target_position,
; 827  : 		weapon_to_target;
; 828  : 
; 829  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@check_guid
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@check_guid:

; 830  : 
; 831  : 	ASSERT (en);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@check_guid
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA
  00032	83 c0 0e	 add	 eax, 14			; 0000000eH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@check_guid:

; 832  : 
; 833  : 	if (get_comms_model () == COMMS_MODEL_SERVER)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0004c	0f 85 9b 03 00
	00		 jne	 $LN14@check_guid

; 834  : 	{
; 835  : 		new_target = raw->mob.target_link.parent;

  00052	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00055	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00058	89 4d fc	 mov	 DWORD PTR _new_target$[ebp], ecx

; 836  : 
; 837  : 		//
; 838  : 		// check guidance source exists for all weapons
; 839  : 		//
; 840  : 
; 841  : 		if (raw->launched_weapon_link.parent)

  0005b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0005e	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00065	0f 84 61 03 00
	00		 je	 $LN5@check_guid

; 842  : 		{
; 843  : 			//
; 844  : 			// check guidance source has changed target for weapons launched by human pilots only
; 845  : 			//
; 846  : 
; 847  : 			if (get_local_entity_int_value (raw->launched_weapon_link.parent, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  0006b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0006e	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00075	74 10		 je	 SHORT $LN16@check_guid
  00077	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0007a	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	89 45 a0	 mov	 DWORD PTR tv90[ebp], eax
  00085	eb 1d		 jmp	 SHORT $LN17@check_guid
$LN16@check_guid:
  00087	68 4f 03 00 00	 push	 847			; 0000034fH
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN17@check_guid:
  000a4	ba 01 00 00 00	 mov	 edx, 1
  000a9	85 d2		 test	 edx, edx
  000ab	74 09		 je	 SHORT $LN18@check_guid
  000ad	c7 45 9c 9c 00
	00 00		 mov	 DWORD PTR tv129[ebp], 156 ; 0000009cH
  000b4	eb 1c		 jmp	 SHORT $LN19@check_guid
$LN18@check_guid:
  000b6	68 4f 03 00 00	 push	 847			; 0000034fH
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000cb	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN19@check_guid:
  000d2	68 9c 00 00 00	 push	 156			; 0000009cH
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000da	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000e0	52		 push	 edx
  000e1	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv90[ebp], 1116
  000e8	8b 4d 9c	 mov	 ecx, DWORD PTR tv129[ebp]
  000eb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000f2	ff d2		 call	 edx
  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 ce 02 00
	00		 je	 $LN13@check_guid

; 848  : 			{
; 849  : 				#ifdef DEBUG_MODULE
; 850  : 				debug_log("Finding parent's target (parent: %p, parent type %s", raw->launched_weapon_link.parent, entity_type_names[raw->launched_weapon_link.parent->type]);

  000fc	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000ff	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_type_names@@3PAPBDA ; entity_type_names
  0010c	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0010f	51		 push	 ecx
  00110	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00113	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00119	50		 push	 eax
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@PFLGKOPF@Finding?5parent?8s?5target?5?$CIparent@
  0011f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH

; 851  : 				#endif
; 852  : 
; 853  : 				// no target if no laser designation
; 854  : 				if (laser_guided && !get_local_entity_int_value(raw->launched_weapon_link.parent, INT_TYPE_LASER_ON))

  00127	83 7d 10 00	 cmp	 DWORD PTR _laser_guided$[ebp], 0
  0012b	0f 84 96 00 00
	00		 je	 $LN8@check_guid
  00131	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00134	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0013b	74 10		 je	 SHORT $LN20@check_guid
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00140	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00146	8b 02		 mov	 eax, DWORD PTR [edx]
  00148	89 45 a0	 mov	 DWORD PTR tv158[ebp], eax
  0014b	eb 1d		 jmp	 SHORT $LN21@check_guid
$LN20@check_guid:
  0014d	68 56 03 00 00	 push	 854			; 00000356H
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00157	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00163	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN21@check_guid:
  0016a	ba 01 00 00 00	 mov	 edx, 1
  0016f	85 d2		 test	 edx, edx
  00171	74 09		 je	 SHORT $LN22@check_guid
  00173	c7 45 9c 78 00
	00 00		 mov	 DWORD PTR tv165[ebp], 120 ; 00000078H
  0017a	eb 1c		 jmp	 SHORT $LN23@check_guid
$LN22@check_guid:
  0017c	68 56 03 00 00	 push	 854			; 00000356H
  00181	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00191	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN23@check_guid:
  00198	6a 78		 push	 120			; 00000078H
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0019d	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  001a3	52		 push	 edx
  001a4	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv158[ebp], 1116
  001ab	8b 4d 9c	 mov	 ecx, DWORD PTR tv165[ebp]
  001ae	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001b5	ff d2		 call	 edx
  001b7	85 c0		 test	 eax, eax
  001b9	75 0c		 jne	 SHORT $LN8@check_guid

; 855  : 				{
; 856  : 					new_target = NULL;

  001bb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _new_target$[ebp], 0

; 857  : 				}
; 858  : 				else

  001c2	e9 94 00 00 00	 jmp	 $LN9@check_guid
$LN8@check_guid:

; 859  : 					new_target = get_local_entity_parent (raw->launched_weapon_link.parent, LIST_TYPE_TARGET);

  001c7	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001ca	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  001d1	74 10		 je	 SHORT $LN24@check_guid
  001d3	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001d6	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  001dc	8b 02		 mov	 eax, DWORD PTR [edx]
  001de	89 45 a0	 mov	 DWORD PTR tv184[ebp], eax
  001e1	eb 22		 jmp	 SHORT $LN25@check_guid
$LN24@check_guid:
  001e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA
  001e9	83 c1 2a	 add	 ecx, 42			; 0000002aH
  001ec	51		 push	 ecx
  001ed	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f8	52		 push	 edx
  001f9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001fe	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN25@check_guid:
  00205	b8 01 00 00 00	 mov	 eax, 1
  0020a	85 c0		 test	 eax, eax
  0020c	74 09		 je	 SHORT $LN26@check_guid
  0020e	c7 45 9c 26 00
	00 00		 mov	 DWORD PTR tv192[ebp], 38 ; 00000026H
  00215	eb 22		 jmp	 SHORT $LN27@check_guid
$LN26@check_guid:
  00217	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA
  0021d	83 c1 2a	 add	 ecx, 42			; 0000002aH
  00220	51		 push	 ecx
  00221	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00226	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0022c	52		 push	 edx
  0022d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00232	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv192[ebp], 0
$LN27@check_guid:
  00239	6a 26		 push	 38			; 00000026H
  0023b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0023e	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00244	51		 push	 ecx
  00245	69 55 a0 b4 00
	00 00		 imul	 edx, DWORD PTR tv184[ebp], 180
  0024c	8b 45 9c	 mov	 eax, DWORD PTR tv192[ebp]
  0024f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00256	ff d1		 call	 ecx
  00258	89 45 fc	 mov	 DWORD PTR _new_target$[ebp], eax
$LN9@check_guid:

; 860  : 
; 861  : 				//
; 862  : 				// check target is in weapon lock cone
; 863  : 				//
; 864  : 
; 865  : 				if (new_target)

  0025b	83 7d fc 00	 cmp	 DWORD PTR _new_target$[ebp], 0
  0025f	0f 84 65 01 00
	00		 je	 $LN13@check_guid

; 866  : 				{
; 867  : 					if (new_target != raw->mob.target_link.parent)

  00265	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00268	8b 4d fc	 mov	 ecx, DWORD PTR _new_target$[ebp]
  0026b	3b 48 64	 cmp	 ecx, DWORD PTR [eax+100]
  0026e	0f 84 56 01 00
	00		 je	 $LN13@check_guid

; 868  : 					{
; 869  : 						target_position = get_local_entity_vec3d_ptr (new_target, VEC3D_TYPE_POSITION);

  00274	83 7d fc 00	 cmp	 DWORD PTR _new_target$[ebp], 0
  00278	74 0a		 je	 SHORT $LN28@check_guid
  0027a	8b 45 fc	 mov	 eax, DWORD PTR _new_target$[ebp]
  0027d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027f	89 4d a0	 mov	 DWORD PTR tv211[ebp], ecx
  00282	eb 21		 jmp	 SHORT $LN29@check_guid
$LN28@check_guid:
  00284	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA
  0028a	83 c2 34	 add	 edx, 52			; 00000034H
  0028d	52		 push	 edx
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00293	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0029e	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv211[ebp], 0
$LN29@check_guid:
  002a5	b9 01 00 00 00	 mov	 ecx, 1
  002aa	85 c9		 test	 ecx, ecx
  002ac	74 09		 je	 SHORT $LN30@check_guid
  002ae	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv219[ebp], 8
  002b5	eb 21		 jmp	 SHORT $LN31@check_guid
$LN30@check_guid:
  002b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z@4JA
  002bd	83 c2 34	 add	 edx, 52			; 00000034H
  002c0	52		 push	 edx
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv219[ebp], 0
$LN31@check_guid:
  002d8	6a 08		 push	 8
  002da	8b 4d fc	 mov	 ecx, DWORD PTR _new_target$[ebp]
  002dd	51		 push	 ecx
  002de	6b 55 a0 60	 imul	 edx, DWORD PTR tv211[ebp], 96
  002e2	8b 45 9c	 mov	 eax, DWORD PTR tv219[ebp]
  002e5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002ec	ff d1		 call	 ecx
  002ee	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 870  : 
; 871  : 						weapon_to_target.x = target_position->x - raw->mob.position.x;

  002f1	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  002f4	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00300	f3 0f 11 45 e4	 movss	 DWORD PTR _weapon_to_target$[ebp], xmm0

; 872  : 						weapon_to_target.y = target_position->y - raw->mob.position.y;

  00305	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00308	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0030b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00310	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00315	f3 0f 11 45 e8	 movss	 DWORD PTR _weapon_to_target$[ebp+4], xmm0

; 873  : 						weapon_to_target.z = target_position->z - raw->mob.position.z;

  0031a	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0031d	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00320	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00325	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  0032a	f3 0f 11 45 ec	 movss	 DWORD PTR _weapon_to_target$[ebp+8], xmm0

; 874  : 
; 875  : 						target_range = (weapon_to_target.x * weapon_to_target.x) +

  0032f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _weapon_to_target$[ebp]
  00334	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _weapon_to_target$[ebp]
  00339	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _weapon_to_target$[ebp+4]
  0033e	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _weapon_to_target$[ebp+4]
  00343	f3 0f 58 c1	 addss	 xmm0, xmm1
  00347	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _weapon_to_target$[ebp+8]
  0034c	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _weapon_to_target$[ebp+8]
  00351	f3 0f 58 c1	 addss	 xmm0, xmm1
  00355	f3 0f 11 45 f8	 movss	 DWORD PTR _target_range$[ebp], xmm0

; 876  : 											(weapon_to_target.y * weapon_to_target.y) +
; 877  : 											(weapon_to_target.z * weapon_to_target.z);
; 878  : 
; 879  : 						if (target_range > 1.0)

  0035a	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0035f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00367	76 61		 jbe	 SHORT $LN13@check_guid

; 880  : 						{
; 881  : 							target_range = sqrt (target_range);

  00369	51		 push	 ecx
  0036a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00379	d9 5d f8	 fstp	 DWORD PTR _target_range$[ebp]

; 882  : 
; 883  : 							normalise_3d_vector_given_magnitude (&weapon_to_target, target_range);

  0037c	51		 push	 ecx
  0037d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00382	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00387	8d 45 e4	 lea	 eax, DWORD PTR _weapon_to_target$[ebp]
  0038a	50		 push	 eax
  0038b	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 884  : 
; 885  : 							theta = acos (get_3d_unit_vector_dot_product (&raw->mob.zv, &weapon_to_target));

  00390	8d 45 e4	 lea	 eax, DWORD PTR _weapon_to_target$[ebp]
  00393	50		 push	 eax
  00394	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00397	83 c1 28	 add	 ecx, 40			; 00000028H
  0039a	51		 push	 ecx
  0039b	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003a0	51		 push	 ecx
  003a1	d9 1c 24	 fstp	 DWORD PTR [esp]
  003a4	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  003a9	d9 5d f4	 fstp	 DWORD PTR _theta$[ebp]

; 886  : 
; 887  : 							if (theta > weapon_database[raw->mob.sub_type].max_launch_angle_error)

  003ac	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  003af	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  003b5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _theta$[ebp]
  003ba	0f 2f 81 d0 00
	00 00		 comiss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+208]
  003c1	76 07		 jbe	 SHORT $LN13@check_guid

; 888  : 							{
; 889  : 								new_target = NULL;

  003c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _new_target$[ebp], 0
$LN13@check_guid:

; 890  : 							}
; 891  : 						}
; 892  :  					}
; 893  : 				}
; 894  : 			}
; 895  : 		}
; 896  : 		else

  003ca	eb 07		 jmp	 SHORT $LN6@check_guid
$LN5@check_guid:

; 897  : 		{
; 898  : 			new_target = NULL;

  003cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _new_target$[ebp], 0
$LN6@check_guid:

; 899  : 		}
; 900  : 
; 901  : 		if (new_target != raw->mob.target_link.parent)

  003d3	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  003d6	8b 4d fc	 mov	 ecx, DWORD PTR _new_target$[ebp]
  003d9	3b 48 64	 cmp	 ecx, DWORD PTR [eax+100]
  003dc	74 0f		 je	 SHORT $LN14@check_guid

; 902  : 		{
; 903  : 			set_client_server_entity_parent (en, LIST_TYPE_TARGET, new_target);

  003de	8b 45 fc	 mov	 eax, DWORD PTR _new_target$[ebp]
  003e1	50		 push	 eax
  003e2	6a 26		 push	 38			; 00000026H
  003e4	8b 4d 0c	 mov	 ecx, DWORD PTR _en$[ebp]
  003e7	51		 push	 ecx
  003e8	e8 00 00 00 00	 call	 ?set_client_server_entity_parent@@YGXPAUENTITY@@W4LIST_TYPES@@0@Z ; set_client_server_entity_parent
$LN14@check_guid:

; 904  : 		}
; 905  : 	}
; 906  : }

  003ed	5f		 pop	 edi
  003ee	5e		 pop	 esi
  003ef	5b		 pop	 ebx
  003f0	8b e5		 mov	 esp, ebp
  003f2	5d		 pop	 ebp
  003f3	c2 0c 00	 ret	 12			; 0000000cH
?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ENDP ; check_guidance_source
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z
_TEXT	SEGMENT
tv394 = -128						; size = 8
tv383 = -128						; size = 8
tv368 = -128						; size = 8
tv353 = -128						; size = 8
tv141 = -124						; size = 4
tv395 = -120						; size = 8
tv384 = -120						; size = 8
tv369 = -120						; size = 8
tv354 = -120						; size = 8
tv143 = -120						; size = 8
tv554 = -116						; size = 4
tv547 = -116						; size = 4
tv343 = -116						; size = 4
$T1 = -112						; size = 4
$T2 = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
$T5 = -96						; size = 4
_gravity_fall$6 = -28					; size = 4
_adjusted_velocity$7 = -24				; size = 4
_v_vel$ = -20						; size = 4
_h_vel$ = -16						; size = 4
_pitch$ = -12						; size = 4
_heading$ = -8						; size = 4
_acceleration$ = -4					; size = 4
_raw$ = 8						; size = 4
_new_position$ = 12					; size = 4
_delta_time$ = 16					; size = 4
_disperse$ = 20						; size = 4
?move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z PROC ; move_unguided_weapon, COMDAT

; 645  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 646  : 	float
; 647  : 		acceleration,
; 648  : 		heading,
; 649  : 		pitch,
; 650  : 		h_vel,
; 651  : 		v_vel;
; 652  : 
; 653  : 	ASSERT (raw);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@move_ungui
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z@4JA
  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@move_ungui:

; 654  : 	ASSERT (new_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _new_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@move_ungui
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z@4JA
  00035	83 c0 09	 add	 eax, 9
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NCPDDPGK@new_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@move_ungui:

; 655  : 
; 656  : 	if (raw->weapon_lifetime > 0.0)

  00048	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0004b	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00053	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0005b	0f 86 a6 00 00
	00		 jbe	 $LN6@move_ungui

; 657  : 	{
; 658  : 		////////////////////////////////////////
; 659  : 		//
; 660  : 		// move unguided powered weapon (ignore gravity)
; 661  : 		//
; 662  : 		////////////////////////////////////////
; 663  : 
; 664  : 		//
; 665  : 		// acceleration
; 666  : 		//
; 667  : 
; 668  : 		acceleration = weapon_database[raw->mob.sub_type].g_max;

  00061	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00064	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  0006a	f3 0f 10 81 b0
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+176]
  00072	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 669  : 
; 670  : 		//
; 671  : 		// velocity
; 672  : 		//
; 673  : 
; 674  : 		raw->mob.velocity += acceleration * delta_time;

  00077	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  0007c	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  00081	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00084	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0008c	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0

; 675  : 		raw->mob.velocity = bound (raw->mob.velocity, 0.0, weapon_database[raw->mob.sub_type].cruise_velocity);

  00091	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00094	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  00099	0f 57 c9	 xorps	 xmm1, xmm1
  0009c	66 0f 2f c8	 comisd	 xmm1, xmm0
  000a0	76 0a		 jbe	 SHORT $LN22@move_ungui
  000a2	0f 57 c0	 xorps	 xmm0, xmm0
  000a5	f2 0f 11 45 88	 movsd	 QWORD PTR tv143[ebp], xmm0
  000aa	eb 49		 jmp	 SHORT $LN23@move_ungui
$LN22@move_ungui:
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000af	69 11 e0 00 00
	00		 imul	 edx, DWORD PTR [ecx], 224
  000b5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000b8	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  000bd	0f 2f 82 ac 00
	00 00		 comiss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[edx+172]
  000c4	76 18		 jbe	 SHORT $LN20@move_ungui
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c9	69 11 e0 00 00
	00		 imul	 edx, DWORD PTR [ecx], 224
  000cf	f3 0f 10 82 ac
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[edx+172]
  000d7	f3 0f 11 45 84	 movss	 DWORD PTR tv141[ebp], xmm0
  000dc	eb 0d		 jmp	 SHORT $LN21@move_ungui
$LN20@move_ungui:
  000de	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000e1	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  000e6	f3 0f 11 45 84	 movss	 DWORD PTR tv141[ebp], xmm0
$LN21@move_ungui:
  000eb	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR tv141[ebp]
  000f0	f2 0f 11 45 88	 movsd	 QWORD PTR tv143[ebp], xmm0
$LN23@move_ungui:
  000f5	f2 0f 5a 45 88	 cvtsd2ss xmm0, QWORD PTR tv143[ebp]
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000fd	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0
  00102	e9 c3 00 00 00	 jmp	 $LN8@move_ungui
$LN6@move_ungui:

; 676  : 	}
; 677  : 	else if (weapon_database[raw->mob.sub_type].drag_factor > 0.0 &&

  00107	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0010a	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00110	f3 0f 5a 81 d8
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+216]
  00118	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00120	0f 86 a4 00 00
	00		 jbe	 $LN8@move_ungui
  00126	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00129	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  0012f	83 b9 1c 00 00
	00 03		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+28], 3
  00136	0f 85 8e 00 00
	00		 jne	 $LN8@move_ungui

; 678  : 		weapon_database[raw->mob.sub_type].aiming_type == WEAPON_AIMING_TYPE_CALC_LEAD_AND_BALLISTIC)
; 679  : 	{
; 680  : 		// arneh - simulate drag as decelleration
; 681  : 		float
; 682  : 			 // adjust velocity in steps to avoid difference because of different delta times (i.e. different behaviour drag depending on frame rate)
; 683  : 			adjusted_velocity = (int)(raw->mob.velocity * 0.1) * 10;

  0013c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0013f	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  00144	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0014c	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00150	6b d1 0a	 imul	 edx, ecx, 10
  00153	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00157	f3 0f 11 45 e8	 movss	 DWORD PTR _adjusted_velocity$7[ebp], xmm0

; 684  : 
; 685  : 		acceleration = -0.001 * weapon_database[raw->mob.sub_type].drag_factor * adjusted_velocity * adjusted_velocity;

  0015c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0015f	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00165	f3 0f 5a 81 d8
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+216]
  0016d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bf50624dd2f1a9fc
  00175	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _adjusted_velocity$7[ebp]
  0017a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0017e	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _adjusted_velocity$7[ebp]
  00183	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00187	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018b	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 686  : 
; 687  : 		// velocity
; 688  : 
; 689  : 		raw->mob.velocity += acceleration * delta_time;

  00190	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  00195	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  0019a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0019d	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  001a2	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001a5	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0

; 690  : 		raw->mob.velocity = max (raw->mob.velocity, 0.0f);

  001aa	0f 57 c0	 xorps	 xmm0, xmm0
  001ad	f3 0f 11 45 a0	 movss	 DWORD PTR $T5[ebp], xmm0
  001b2	8d 45 a0	 lea	 eax, DWORD PTR $T5[ebp]
  001b5	50		 push	 eax
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001b9	83 c1 40	 add	 ecx, 64			; 00000040H
  001bc	51		 push	 ecx
  001bd	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001c2	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  001c5	8b 00		 mov	 eax, DWORD PTR [eax]
  001c7	89 42 40	 mov	 DWORD PTR [edx+64], eax
$LN8@move_ungui:

; 691  : 	}
; 692  : 
; 693  : 
; 694  : 	if (weapon_database[raw->mob.sub_type].ignore_gravity)

  001ca	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001cd	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  001d3	83 b9 68 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+104], 0
  001da	0f 84 a2 00 00
	00		 je	 $LN9@move_ungui

; 695  : 	{
; 696  : 		////////////////////////////////////////
; 697  : 		//
; 698  : 		// move unguided unpowered weapon (ignore gravity)
; 699  : 		//
; 700  : 		////////////////////////////////////////
; 701  : 
; 702  : 		//
; 703  : 		// motion vector
; 704  : 		//
; 705  : 
; 706  : 		raw->mob.motion_vector.x = raw->mob.zv.x * raw->mob.velocity;

  001e0	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001e6	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  001eb	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  001f0	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  001f3	f3 0f 11 42 34	 movss	 DWORD PTR [edx+52], xmm0

; 707  : 		raw->mob.motion_vector.y = raw->mob.zv.y * raw->mob.velocity;

  001f8	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001fb	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001fe	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00203	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  00208	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  0020b	f3 0f 11 42 38	 movss	 DWORD PTR [edx+56], xmm0

; 708  : 		raw->mob.motion_vector.z = raw->mob.zv.z * raw->mob.velocity;

  00210	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00213	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00216	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0021b	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  00220	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00223	f3 0f 11 42 3c	 movss	 DWORD PTR [edx+60], xmm0

; 709  : 
; 710  : 		//
; 711  : 		// position
; 712  : 		//
; 713  : 
; 714  : 		new_position->x += raw->mob.motion_vector.x * delta_time;

  00228	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0022b	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00230	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  00235	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00238	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0023c	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  0023f	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 715  : 		new_position->y += raw->mob.motion_vector.y * delta_time;

  00243	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00246	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  0024b	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  00250	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00253	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00258	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  0025b	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 716  : 		new_position->z += raw->mob.motion_vector.z * delta_time;

  00260	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00263	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00268	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  0026d	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00270	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00275	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  00278	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 717  : 	}
; 718  : 	else

  0027d	e9 ac 04 00 00	 jmp	 $LN10@move_ungui
$LN9@move_ungui:

; 719  : 	{
; 720  : 		////////////////////////////////////////
; 721  : 		//
; 722  : 		// move unguided unpowered weapon (with gravity)
; 723  : 		//
; 724  : 		////////////////////////////////////////
; 725  : 
; 726  : 		// Workaround for buggy floating point calculations in open watcom 1.7
; 727  : 		// Assign to variable instead of using expression directly in calculation
; 728  : 		float gravity_fall = (0.5 * G * delta_time * delta_time);

  00282	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _delta_time$[ebp]
  00287	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40139eb860000000
  0028f	f3 0f 5a 4d 10	 cvtss2sd xmm1, DWORD PTR _delta_time$[ebp]
  00294	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00298	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029c	f3 0f 11 45 e4	 movss	 DWORD PTR _gravity_fall$6[ebp], xmm0

; 729  : 
; 730  : 		//
; 731  : 		// motion vector
; 732  : 		//
; 733  : 
; 734  : 		raw->mob.motion_vector.x = raw->mob.zv.x * raw->mob.velocity;

  002a1	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002a4	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  002a7	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  002ac	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  002b1	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  002b4	f3 0f 11 42 34	 movss	 DWORD PTR [edx+52], xmm0

; 735  : 		raw->mob.motion_vector.y = raw->mob.zv.y * raw->mob.velocity;

  002b9	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002bc	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  002bf	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  002c4	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  002c9	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  002cc	f3 0f 11 42 38	 movss	 DWORD PTR [edx+56], xmm0

; 736  : 		raw->mob.motion_vector.z = raw->mob.zv.z * raw->mob.velocity;

  002d1	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002d4	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  002d7	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  002dc	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  002e1	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  002e4	f3 0f 11 42 3c	 movss	 DWORD PTR [edx+60], xmm0

; 737  : 
; 738  : 		//
; 739  : 		// position
; 740  : 		//
; 741  : 
; 742  : 		new_position->x += raw->mob.motion_vector.x * delta_time;

  002e9	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002ec	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  002f1	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  002f6	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  002f9	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  002fd	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  00300	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 743  : 		new_position->y += raw->mob.motion_vector.y * delta_time - gravity_fall;

  00304	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00307	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  0030c	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  00311	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _gravity_fall$6[ebp]
  00316	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00319	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0031e	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  00321	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 744  : 		new_position->z += raw->mob.motion_vector.z * delta_time;

  00326	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00329	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  0032e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _delta_time$[ebp]
  00333	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00336	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0033b	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  0033e	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 745  : 
; 746  : 		ASSERT(new_position->y >= -1000000000000.0);  // mostly just tests for -nan and -inf which happens with buggy floating point calculations

  00343	8b 45 0c	 mov	 eax, DWORD PTR _new_position$[ebp]
  00346	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0034b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c26d1a94a2000000
  00353	73 18		 jae	 SHORT $LN11@move_ungui
  00355	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z@4JA
  0035a	83 c0 65	 add	 eax, 101		; 00000065H
  0035d	50		 push	 eax
  0035e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KKMMEIBM@new_position?9?$DOy?5?$DO?$DN?5?910000000000@
  00368	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@move_ungui:

; 747  : 
; 748  : 		//
; 749  : 		// apply gravity (after moving weapon)
; 750  : 		//
; 751  : 
; 752  : 		heading = get_heading_from_attitude_matrix (raw->mob.attitude);

  0036d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00372	d1 e0		 shl	 eax, 1
  00374	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00377	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	d1 e0		 shl	 eax, 1
  00382	51		 push	 ecx
  00383	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00392	d1 e1		 shl	 ecx, 1
  00394	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00397	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  0039b	b9 04 00 00 00	 mov	 ecx, 4
  003a0	6b d1 00	 imul	 edx, ecx, 0
  003a3	51		 push	 ecx
  003a4	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  003a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ae	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003b3	d9 5d f8	 fstp	 DWORD PTR _heading$[ebp]

; 753  : 
; 754  : 		pitch = get_pitch_from_attitude_matrix (raw->mob.attitude);

  003b6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003bb	d1 e0		 shl	 eax, 1
  003bd	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  003c0	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  003c4	b8 04 00 00 00	 mov	 eax, 4
  003c9	c1 e0 00	 shl	 eax, 0
  003cc	51		 push	 ecx
  003cd	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  003d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d7	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  003dc	d9 5d f4	 fstp	 DWORD PTR _pitch$[ebp]

; 755  : 
; 756  : 		h_vel = cos (pitch) * raw->mob.velocity;

  003df	51		 push	 ecx
  003e0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  003e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ea	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  003ef	d9 5d 8c	 fstp	 DWORD PTR tv547[ebp]
  003f2	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv547[ebp]
  003f7	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  003fa	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  003ff	f3 0f 11 45 f0	 movss	 DWORD PTR _h_vel$[ebp], xmm0

; 757  : 
; 758  : 		v_vel = (sin (pitch) * raw->mob.velocity) - (G * delta_time);

  00404	51		 push	 ecx
  00405	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0040a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040f	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00414	d9 5d 8c	 fstp	 DWORD PTR tv554[ebp]
  00417	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv554[ebp]
  0041c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0041f	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  00424	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@411cf5c3
  0042c	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _delta_time$[ebp]
  00431	f3 0f 5c c1	 subss	 xmm0, xmm1
  00435	f3 0f 11 45 ec	 movss	 DWORD PTR _v_vel$[ebp], xmm0

; 759  : 
; 760  : 		////////////////////////////////////////
; 761  : 		//
; 762  : 		// fudge for ejector seat and crates
; 763  : 		//
; 764  : 
; 765  : 		switch (raw->mob.sub_type)

  0043a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0043d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0043f	89 4d 8c	 mov	 DWORD PTR tv343[ebp], ecx
  00442	83 7d 8c 46	 cmp	 DWORD PTR tv343[ebp], 70 ; 00000046H
  00446	0f 84 ef 01 00
	00		 je	 $LN18@move_ungui
  0044c	83 7d 8c 47	 cmp	 DWORD PTR tv343[ebp], 71 ; 00000047H
  00450	0f 8e 66 02 00
	00		 jle	 $LN2@move_ungui
  00456	83 7d 8c 49	 cmp	 DWORD PTR tv343[ebp], 73 ; 00000049H
  0045a	7e 05		 jle	 SHORT $LN12@move_ungui
  0045c	e9 5b 02 00 00	 jmp	 $LN2@move_ungui
$LN12@move_ungui:

; 766  : 		{
; 767  : 			case ENTITY_SUB_TYPE_WEAPON_HOKUM_PILOT:
; 768  : 			case ENTITY_SUB_TYPE_WEAPON_HOKUM_CO_PILOT:
; 769  : 			{
; 770  : 				if (raw->parachute_status == PARACHUTE_STATUS_OPEN1)

  00461	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00464	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0046a	c1 e9 04	 shr	 ecx, 4
  0046d	83 e1 07	 and	 ecx, 7
  00470	83 f9 01	 cmp	 ecx, 1
  00473	0f 85 86 00 00
	00		 jne	 $LN13@move_ungui

; 771  : 				{
; 772  : 					h_vel = bound (h_vel, -7.5, 7.5);

  00479	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  0047e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c01e000000000000
  00486	66 0f 2f c8	 comisd	 xmm1, xmm0
  0048a	76 0f		 jbe	 SHORT $LN26@move_ungui
  0048c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c01e000000000000
  00494	f2 0f 11 45 88	 movsd	 QWORD PTR tv354[ebp], xmm0
  00499	eb 32		 jmp	 SHORT $LN27@move_ungui
$LN26@move_ungui:
  0049b	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  004a0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401e000000000000
  004a8	76 0f		 jbe	 SHORT $LN24@move_ungui
  004aa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401e000000000000
  004b2	f2 0f 11 45 80	 movsd	 QWORD PTR tv353[ebp], xmm0
  004b7	eb 0a		 jmp	 SHORT $LN25@move_ungui
$LN24@move_ungui:
  004b9	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  004be	f2 0f 11 45 80	 movsd	 QWORD PTR tv353[ebp], xmm0
$LN25@move_ungui:
  004c3	f2 0f 10 45 80	 movsd	 xmm0, QWORD PTR tv353[ebp]
  004c8	f2 0f 11 45 88	 movsd	 QWORD PTR tv354[ebp], xmm0
$LN27@move_ungui:
  004cd	f2 0f 5a 45 88	 cvtsd2ss xmm0, QWORD PTR tv354[ebp]
  004d2	f3 0f 11 45 f0	 movss	 DWORD PTR _h_vel$[ebp], xmm0

; 773  : 
; 774  : 					v_vel = max (v_vel, -15.0f);

  004d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1700000
  004df	f3 0f 11 45 9c	 movss	 DWORD PTR $T4[ebp], xmm0
  004e4	8d 45 9c	 lea	 eax, DWORD PTR $T4[ebp]
  004e7	50		 push	 eax
  004e8	8d 4d ec	 lea	 ecx, DWORD PTR _v_vel$[ebp]
  004eb	51		 push	 ecx
  004ec	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  004f1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004f5	f3 0f 11 45 ec	 movss	 DWORD PTR _v_vel$[ebp], xmm0
  004fa	e9 37 01 00 00	 jmp	 $LN17@move_ungui
$LN13@move_ungui:

; 775  : 				}
; 776  : 				else if (raw->parachute_status == PARACHUTE_STATUS_OPEN2)

  004ff	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00502	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00508	c1 e9 04	 shr	 ecx, 4
  0050b	83 e1 07	 and	 ecx, 7
  0050e	83 f9 02	 cmp	 ecx, 2
  00511	0f 85 86 00 00
	00		 jne	 $LN15@move_ungui

; 777  : 				{
; 778  : 					h_vel = bound (h_vel, -5.0, 5.0);

  00517	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  0051c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c014000000000000
  00524	66 0f 2f c8	 comisd	 xmm1, xmm0
  00528	76 0f		 jbe	 SHORT $LN30@move_ungui
  0052a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c014000000000000
  00532	f2 0f 11 45 88	 movsd	 QWORD PTR tv369[ebp], xmm0
  00537	eb 32		 jmp	 SHORT $LN31@move_ungui
$LN30@move_ungui:
  00539	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  0053e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4014000000000000
  00546	76 0f		 jbe	 SHORT $LN28@move_ungui
  00548	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4014000000000000
  00550	f2 0f 11 45 80	 movsd	 QWORD PTR tv368[ebp], xmm0
  00555	eb 0a		 jmp	 SHORT $LN29@move_ungui
$LN28@move_ungui:
  00557	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  0055c	f2 0f 11 45 80	 movsd	 QWORD PTR tv368[ebp], xmm0
$LN29@move_ungui:
  00561	f2 0f 10 45 80	 movsd	 xmm0, QWORD PTR tv368[ebp]
  00566	f2 0f 11 45 88	 movsd	 QWORD PTR tv369[ebp], xmm0
$LN31@move_ungui:
  0056b	f2 0f 5a 45 88	 cvtsd2ss xmm0, QWORD PTR tv369[ebp]
  00570	f3 0f 11 45 f0	 movss	 DWORD PTR _h_vel$[ebp], xmm0

; 779  : 
; 780  : 					v_vel = max (v_vel, -10.0f);

  00575	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1200000
  0057d	f3 0f 11 45 98	 movss	 DWORD PTR $T3[ebp], xmm0
  00582	8d 45 98	 lea	 eax, DWORD PTR $T3[ebp]
  00585	50		 push	 eax
  00586	8d 4d ec	 lea	 ecx, DWORD PTR _v_vel$[ebp]
  00589	51		 push	 ecx
  0058a	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0058f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00593	f3 0f 11 45 ec	 movss	 DWORD PTR _v_vel$[ebp], xmm0
  00598	e9 99 00 00 00	 jmp	 $LN17@move_ungui
$LN15@move_ungui:

; 781  : 				}
; 782  : 				else if (raw->parachute_status == PARACHUTE_STATUS_OPEN3)

  0059d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  005a0	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  005a6	c1 e9 04	 shr	 ecx, 4
  005a9	83 e1 07	 and	 ecx, 7
  005ac	83 f9 03	 cmp	 ecx, 3
  005af	0f 85 81 00 00
	00		 jne	 $LN17@move_ungui

; 783  : 				{
; 784  : 					h_vel = bound (h_vel, -2.5, 2.5);

  005b5	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  005ba	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c004000000000000
  005c2	66 0f 2f c8	 comisd	 xmm1, xmm0
  005c6	76 0f		 jbe	 SHORT $LN34@move_ungui
  005c8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c004000000000000
  005d0	f2 0f 11 45 88	 movsd	 QWORD PTR tv384[ebp], xmm0
  005d5	eb 32		 jmp	 SHORT $LN35@move_ungui
$LN34@move_ungui:
  005d7	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  005dc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4004000000000000
  005e4	76 0f		 jbe	 SHORT $LN32@move_ungui
  005e6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4004000000000000
  005ee	f2 0f 11 45 80	 movsd	 QWORD PTR tv383[ebp], xmm0
  005f3	eb 0a		 jmp	 SHORT $LN33@move_ungui
$LN32@move_ungui:
  005f5	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  005fa	f2 0f 11 45 80	 movsd	 QWORD PTR tv383[ebp], xmm0
$LN33@move_ungui:
  005ff	f2 0f 10 45 80	 movsd	 xmm0, QWORD PTR tv383[ebp]
  00604	f2 0f 11 45 88	 movsd	 QWORD PTR tv384[ebp], xmm0
$LN35@move_ungui:
  00609	f2 0f 5a 45 88	 cvtsd2ss xmm0, QWORD PTR tv384[ebp]
  0060e	f3 0f 11 45 f0	 movss	 DWORD PTR _h_vel$[ebp], xmm0

; 785  : 
; 786  : 					v_vel = max (v_vel, -5.0f);

  00613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0061b	f3 0f 11 45 94	 movss	 DWORD PTR $T2[ebp], xmm0
  00620	8d 45 94	 lea	 eax, DWORD PTR $T2[ebp]
  00623	50		 push	 eax
  00624	8d 4d ec	 lea	 ecx, DWORD PTR _v_vel$[ebp]
  00627	51		 push	 ecx
  00628	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0062d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00631	f3 0f 11 45 ec	 movss	 DWORD PTR _v_vel$[ebp], xmm0
$LN17@move_ungui:

; 787  : 				}
; 788  : 
; 789  : 				break;

  00636	e9 81 00 00 00	 jmp	 $LN2@move_ungui
$LN18@move_ungui:

; 790  : 			}
; 791  : 			case ENTITY_SUB_TYPE_WEAPON_CRATE:
; 792  : 			{
; 793  : 				h_vel = bound (h_vel, -10.0, 10.0);

  0063b	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  00640	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  00648	66 0f 2f c8	 comisd	 xmm1, xmm0
  0064c	76 0f		 jbe	 SHORT $LN38@move_ungui
  0064e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  00656	f2 0f 11 45 88	 movsd	 QWORD PTR tv395[ebp], xmm0
  0065b	eb 32		 jmp	 SHORT $LN39@move_ungui
$LN38@move_ungui:
  0065d	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  00662	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  0066a	76 0f		 jbe	 SHORT $LN36@move_ungui
  0066c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  00674	f2 0f 11 45 80	 movsd	 QWORD PTR tv394[ebp], xmm0
  00679	eb 0a		 jmp	 SHORT $LN37@move_ungui
$LN36@move_ungui:
  0067b	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _h_vel$[ebp]
  00680	f2 0f 11 45 80	 movsd	 QWORD PTR tv394[ebp], xmm0
$LN37@move_ungui:
  00685	f2 0f 10 45 80	 movsd	 xmm0, QWORD PTR tv394[ebp]
  0068a	f2 0f 11 45 88	 movsd	 QWORD PTR tv395[ebp], xmm0
$LN39@move_ungui:
  0068f	f2 0f 5a 45 88	 cvtsd2ss xmm0, QWORD PTR tv395[ebp]
  00694	f3 0f 11 45 f0	 movss	 DWORD PTR _h_vel$[ebp], xmm0

; 794  : 
; 795  : 				v_vel = max (v_vel, -20.0f);

  00699	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1a00000
  006a1	f3 0f 11 45 90	 movss	 DWORD PTR $T1[ebp], xmm0
  006a6	8d 45 90	 lea	 eax, DWORD PTR $T1[ebp]
  006a9	50		 push	 eax
  006aa	8d 4d ec	 lea	 ecx, DWORD PTR _v_vel$[ebp]
  006ad	51		 push	 ecx
  006ae	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  006b3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006b7	f3 0f 11 45 ec	 movss	 DWORD PTR _v_vel$[ebp], xmm0
$LN2@move_ungui:

; 796  : 
; 797  : 				break;
; 798  : 			}
; 799  : 		}
; 800  : 
; 801  : 		//
; 802  : 		////////////////////////////////////////
; 803  : 
; 804  : 		raw->mob.velocity = sqrt ((h_vel * h_vel) + (v_vel * v_vel));

  006bc	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _h_vel$[ebp]
  006c1	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _h_vel$[ebp]
  006c6	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _v_vel$[ebp]
  006cb	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _v_vel$[ebp]
  006d0	f3 0f 58 c1	 addss	 xmm0, xmm1
  006d4	51		 push	 ecx
  006d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006da	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  006df	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  006e2	d9 58 40	 fstp	 DWORD PTR [eax+64]

; 805  : 
; 806  : 		pitch = atan2 (v_vel, h_vel);

  006e5	51		 push	 ecx
  006e6	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _h_vel$[ebp]
  006eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f0	51		 push	 ecx
  006f1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _v_vel$[ebp]
  006f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fb	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00700	d9 5d f4	 fstp	 DWORD PTR _pitch$[ebp]

; 807  : 
; 808  : 		get_3d_transformation_matrix (raw->mob.attitude, heading, pitch, 0.0);

  00703	51		 push	 ecx
  00704	0f 57 c0	 xorps	 xmm0, xmm0
  00707	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070c	51		 push	 ecx
  0070d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00712	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00717	51		 push	 ecx
  00718	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0071d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00722	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00725	83 c0 10	 add	 eax, 16			; 00000010H
  00728	50		 push	 eax
  00729	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix
$LN10@move_ungui:

; 809  : 	}
; 810  : }

  0072e	5f		 pop	 edi
  0072f	5e		 pop	 esi
  00730	5b		 pop	 ebx
  00731	8b e5		 mov	 esp, ebp
  00733	5d		 pop	 ebp
  00734	c2 10 00	 ret	 16			; 00000010H
?move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z ENDP ; move_unguided_weapon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv1039 = -328						; size = 4
tv1000 = -328						; size = 8
tv993 = -328						; size = 8
tv911 = -328						; size = 4
tv482 = -328						; size = 4
tv462 = -328						; size = 4
tv416 = -328						; size = 4
tv137 = -328						; size = 4
tv1060 = -324						; size = 4
tv1052 = -324						; size = 4
tv1026 = -324						; size = 4
tv905 = -324						; size = 4
tv483 = -324						; size = 4
tv463 = -324						; size = 4
tv417 = -324						; size = 4
tv240 = -324						; size = 4
tv158 = -324						; size = 4
tv129 = -324						; size = 4
$T1 = -320						; size = 4
$T2 = -316						; size = 4
_pitch$3 = -248						; size = 4
_heading$4 = -244					; size = 4
_tmp$5 = -240						; size = 36
_spiral_matrix$6 = -204					; size = 36
_new_aim_y$7 = -168					; size = 4
_new_aim_y$8 = -164					; size = 4
_new_aim_y$9 = -160					; size = 4
_new_aim_y$10 = -156					; size = 4
_new_aim_y$11 = -152					; size = 4
_weapon_position$12 = -148				; size = 4
_horizontal_range_point$13 = -144			; size = 12
_dive_ratio$14 = -132					; size = 4
_range$15 = -128					; size = 4
_m2$ = -124						; size = 36
_m1$ = -88						; size = 36
_uvec_intercept_point$ = -52				; size = 12
_acceleration$ = -40					; size = 4
_inhibit_damp_factor$ = -36				; size = 4
_frame_turn_rate$ = -32					; size = 4
_max_frame_turn_rate$ = -28				; size = 4
_turn_rate$ = -24					; size = 4
_max_turn_rate$ = -20					; size = 4
_turn_demand$ = -16					; size = 4
_cos_turn_demand$ = -12					; size = 4
_length$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_new_position$ = 12					; size = 4
_intercept_point$ = 16					; size = 4
?move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC	; move_guided_weapon, COMDAT

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 302  : 	weapon
; 303  : 		*raw;
; 304  : 
; 305  : 	float
; 306  : 		length,
; 307  : 		cos_turn_demand,
; 308  : 		turn_demand,
; 309  : 		max_turn_rate,
; 310  : 		turn_rate,
; 311  : 		max_frame_turn_rate,
; 312  : 		frame_turn_rate,
; 313  : 		inhibit_damp_factor,
; 314  : 		acceleration;
; 315  : 
; 316  : 	vec3d
; 317  : 		uvec_intercept_point;
; 318  : 
; 319  : 	matrix3x3
; 320  : 		m1,
; 321  : 		m2;
; 322  : 
; 323  : 	ASSERT (en);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@move_guide
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@move_guide:

; 324  : 
; 325  : 	ASSERT (new_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _new_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN7@move_guide
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NCPDDPGK@new_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@move_guide:

; 326  : 
; 327  : 	ASSERT (intercept_point);

  00048	83 7d 10 00	 cmp	 DWORD PTR _intercept_point$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN8@move_guide
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00053	83 c0 1a	 add	 eax, 26			; 0000001aH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NMPFNFPN@intercept_point@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@move_guide:

; 328  : 
; 329  : 	raw = (weapon *) get_local_entity_data (en);

  00066	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00069	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006c	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 330  : 
; 331  : 	////////////////////////////////////////
; 332  : 	//
; 333  : 	// move guided powered/guided unpowered weapon (ignore gravity)
; 334  : 	//
; 335  : 	////////////////////////////////////////
; 336  : 
; 337  : 	#if DEBUG_MODULE
; 338  : 
; 339  : 	create_rotated_debug_3d_object (intercept_point, rad (0.0), rad (0.0), rad (0.0), OBJECT_3D_INTERCEPT_POINT_RED, 0.0, DEBUG_3D_OBJECT_SCALE);
; 340  : 
; 341  : 	#endif
; 342  : 
; 343  : 	// adjust for high trajectory
; 344  : 	if (weapon_database[raw->mob.sub_type].hellfire_flight_profile && raw->missile_phase != MISSILE_FINAL_PHASE)

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00072	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00078	83 b9 7c 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+124], 0
  0007f	0f 84 67 05 00
	00		 je	 $LN4@move_guide
  00085	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00088	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0008e	c1 e9 08	 shr	 ecx, 8
  00091	83 e1 07	 and	 ecx, 7
  00094	83 f9 03	 cmp	 ecx, 3
  00097	0f 84 4f 05 00
	00		 je	 $LN4@move_guide

; 345  : 	{
; 346  : 		float range, dive_ratio;
; 347  : 		vec3d
; 348  : 			horizontal_range_point = *intercept_point,

  0009d	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _horizontal_range_point$13[ebp], ecx
  000a8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ab	89 95 74 ff ff
	ff		 mov	 DWORD PTR _horizontal_range_point$13[ebp+4], edx
  000b1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b4	89 85 78 ff ff
	ff		 mov	 DWORD PTR _horizontal_range_point$13[ebp+8], eax

; 349  : 			*weapon_position;
; 350  : 
; 351  : 		weapon_position = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  000ba	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000be	74 0d		 je	 SHORT $LN47@move_guide
  000c0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c5	89 8d bc fe ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
  000cb	eb 24		 jmp	 SHORT $LN48@move_guide
$LN47@move_guide:
  000cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  000d3	83 c2 32	 add	 edx, 50			; 00000032H
  000d6	52		 push	 edx
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e7	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN48@move_guide:
  000f1	b9 01 00 00 00	 mov	 ecx, 1
  000f6	85 c9		 test	 ecx, ecx
  000f8	74 0c		 je	 SHORT $LN49@move_guide
  000fa	c7 85 b8 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv137[ebp], 8
  00104	eb 24		 jmp	 SHORT $LN50@move_guide
$LN49@move_guide:
  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0010c	83 c2 32	 add	 edx, 50			; 00000032H
  0010f	52		 push	 edx
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00120	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN50@move_guide:
  0012a	6a 08		 push	 8
  0012c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0012f	51		 push	 ecx
  00130	6b 95 bc fe ff
	ff 60		 imul	 edx, DWORD PTR tv129[ebp], 96
  00137	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0013d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00144	ff d1		 call	 ecx
  00146	89 85 6c ff ff
	ff		 mov	 DWORD PTR _weapon_position$12[ebp], eax

; 352  : 
; 353  : 		horizontal_range_point.y = weapon_position->y;

  0014c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _weapon_position$12[ebp]
  00152	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00157	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _horizontal_range_point$13[ebp+4], xmm0

; 354  : 		range = get_2d_range (weapon_position, &horizontal_range_point);

  0015f	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _horizontal_range_point$13[ebp]
  00165	50		 push	 eax
  00166	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _weapon_position$12[ebp]
  0016c	51		 push	 ecx
  0016d	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  00172	d9 5d 80	 fstp	 DWORD PTR _range$15[ebp]

; 355  : 
; 356  : 		dive_ratio = (intercept_point->y - weapon_position->y) / range;

  00175	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  00178	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _weapon_position$12[ebp]
  0017e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00183	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00188	f3 0f 5e 45 80	 divss	 xmm0, DWORD PTR _range$15[ebp]
  0018d	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _dive_ratio$14[ebp], xmm0

; 357  : 
; 358  : 		if (raw->loal_mode)

  00195	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00198	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0019e	c1 e9 07	 shr	 ecx, 7
  001a1	83 e1 01	 and	 ecx, 1
  001a4	0f 84 69 02 00
	00		 je	 $LN10@move_guide

; 359  : 		{
; 360  : 				switch (raw->missile_phase)

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001ad	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  001b3	c1 e9 08	 shr	 ecx, 8
  001b6	83 e1 07	 and	 ecx, 7
  001b9	89 8d bc fe ff
	ff		 mov	 DWORD PTR tv158[ebp], ecx
  001bf	74 1f		 je	 SHORT $LN12@move_guide
  001c1	83 bd bc fe ff
	ff 01		 cmp	 DWORD PTR tv158[ebp], 1
  001c8	0f 84 c0 00 00
	00		 je	 $LN16@move_guide
  001ce	83 bd bc fe ff
	ff 02		 cmp	 DWORD PTR tv158[ebp], 2
  001d5	0f 84 63 01 00
	00		 je	 $LN20@move_guide
  001db	e9 0d 02 00 00	 jmp	 $LN24@move_guide
$LN12@move_guide:

; 361  : 				{
; 362  : 				case MISSILE_PHASE1:
; 363  : 					if (raw->weapon_lifetime > HELLFIRE_LOAL_CLIMB1_TIME)

  001e0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001e3	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  001eb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001f3	76 7b		 jbe	 SHORT $LN13@move_guide

; 364  : 					{
; 365  : 						if (range < 10.0)

  001f5	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _range$15[ebp]
  001fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4024000000000000
  00202	66 0f 2f c8	 comisd	 xmm1, xmm0
  00206	76 20		 jbe	 SHORT $LN14@move_guide

; 366  : 							raw->missile_phase = MISSILE_FINAL_PHASE;

  00208	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0020b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00211	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  00217	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  0021d	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00220	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 367  : 						else

  00226	eb 43		 jmp	 SHORT $LN15@move_guide
$LN14@move_guide:

; 368  : 						{
; 369  : 						// initial climb of 30%
; 370  : 							float new_aim_y = weapon_position->y + range * 0.3;

  00228	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _weapon_position$12[ebp]
  0022e	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00233	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _range$15[ebp]
  00238	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd3333333333333
  00240	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00244	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00248	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _new_aim_y$11[ebp], xmm0

; 371  : 							intercept_point->y = max(new_aim_y, intercept_point->y);

  00250	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  00253	83 c0 04	 add	 eax, 4
  00256	50		 push	 eax
  00257	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _new_aim_y$11[ebp]
  0025d	51		 push	 ecx
  0025e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00263	8b 55 10	 mov	 edx, DWORD PTR _intercept_point$[ebp]
  00266	8b 00		 mov	 eax, DWORD PTR [eax]
  00268	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN15@move_guide:

; 372  : 						}
; 373  : 						break;

  0026b	e9 9e 01 00 00	 jmp	 $LN2@move_guide
$LN13@move_guide:

; 374  : 					}
; 375  : 
; 376  : 					raw->missile_phase = MISSILE_PHASE2;

  00270	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00273	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00279	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  0027f	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  00285	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00288	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN16@move_guide:

; 377  : 					// fall through
; 378  : 
; 379  : 				case MISSILE_PHASE2:
; 380  : 					if (range < 800.0)

  0028e	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _range$15[ebp]
  00293	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4089000000000000
  0029b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0029f	76 25		 jbe	 SHORT $LN17@move_guide

; 381  : 					{
; 382  : 						raw->missile_phase = MISSILE_FINAL_PHASE;

  002a1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  002a4	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  002aa	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  002b0	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  002b6	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  002b9	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 383  : 						break;

  002bf	e9 4a 01 00 00	 jmp	 $LN2@move_guide
  002c4	eb 5a		 jmp	 SHORT $LN19@move_guide
$LN17@move_guide:

; 384  : 					}
; 385  : 					else if (dive_ratio > -0.25)

  002c6	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _dive_ratio$14[ebp]
  002ce	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfd0000000000000
  002d6	76 48		 jbe	 SHORT $LN19@move_guide

; 386  : 					{
; 387  : 						// seconds phase climb at 4%
; 388  : 						float new_aim_y = weapon_position->y + range * 0.04;

  002d8	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _weapon_position$12[ebp]
  002de	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  002e3	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _range$15[ebp]
  002e8	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fa47ae147ae147b
  002f0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f8	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _new_aim_y$10[ebp], xmm0

; 389  : 						intercept_point->y = max(new_aim_y, intercept_point->y);

  00300	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  00303	83 c0 04	 add	 eax, 4
  00306	50		 push	 eax
  00307	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _new_aim_y$10[ebp]
  0030d	51		 push	 ecx
  0030e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00313	8b 55 10	 mov	 edx, DWORD PTR _intercept_point$[ebp]
  00316	8b 00		 mov	 eax, DWORD PTR [eax]
  00318	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 390  : 
; 391  : 						break;

  0031b	e9 ee 00 00 00	 jmp	 $LN2@move_guide
$LN19@move_guide:

; 392  : 					}
; 393  : 
; 394  : 					raw->missile_phase = MISSILE_PHASE3;

  00320	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00323	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00329	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  0032f	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00335	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00338	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN20@move_guide:

; 395  : 					// fall through
; 396  : 
; 397  : 				case MISSILE_PHASE3:
; 398  : 					if (range < 500.0)

  0033e	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _range$15[ebp]
  00343	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407f400000000000
  0034b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0034f	76 25		 jbe	 SHORT $LN21@move_guide

; 399  : 					{
; 400  : 						raw->missile_phase = MISSILE_FINAL_PHASE;

  00351	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00354	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0035a	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  00360	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  00366	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00369	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 401  : 						break;

  0036f	e9 9a 00 00 00	 jmp	 $LN2@move_guide
  00374	eb 57		 jmp	 SHORT $LN23@move_guide
$LN21@move_guide:

; 402  : 					}
; 403  : 					else if (dive_ratio > -0.55)

  00376	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _dive_ratio$14[ebp]
  0037e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfe199999999999a
  00386	76 45		 jbe	 SHORT $LN23@move_guide

; 404  : 					{
; 405  : 						// third phase dive at 20%
; 406  : 						float new_aim_y = weapon_position->y + range * -0.2;

  00388	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _weapon_position$12[ebp]
  0038e	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00393	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _range$15[ebp]
  00398	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bfc999999999999a
  003a0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003a4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _new_aim_y$9[ebp], xmm0

; 407  : 						intercept_point->y = max(new_aim_y, intercept_point->y);

  003b0	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  003b3	83 c0 04	 add	 eax, 4
  003b6	50		 push	 eax
  003b7	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _new_aim_y$9[ebp]
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  003c3	8b 55 10	 mov	 edx, DWORD PTR _intercept_point$[ebp]
  003c6	8b 00		 mov	 eax, DWORD PTR [eax]
  003c8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 408  : 
; 409  : 						break;

  003cb	eb 41		 jmp	 SHORT $LN2@move_guide
$LN23@move_guide:

; 410  : 					}
; 411  : 
; 412  : 					// final phase goes straigt for target (in approximate 60% dive)
; 413  : 					raw->missile_phase = MISSILE_FINAL_PHASE;

  003cd	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  003d0	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  003d6	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  003dc	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  003e2	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  003e5	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 414  : 					break;

  003eb	eb 21		 jmp	 SHORT $LN2@move_guide
$LN24@move_guide:

; 415  : 				default:
; 416  : 					ASSERT(FALSE);

  003ed	b8 01 00 00 00	 mov	 eax, 1
  003f2	85 c0		 test	 eax, eax
  003f4	74 18		 je	 SHORT $LN25@move_guide
  003f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  003fb	83 c0 73	 add	 eax, 115		; 00000073H
  003fe	50		 push	 eax
  003ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00404	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  00409	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN25@move_guide:
$LN2@move_guide:

; 417  : 				}
; 418  : 		}
; 419  : 		else  // lobl mode

  0040e	e9 d9 01 00 00	 jmp	 $LN4@move_guide
$LN10@move_guide:

; 420  : 		{
; 421  : 				switch (raw->missile_phase)

  00413	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00416	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0041c	c1 e9 08	 shr	 ecx, 8
  0041f	83 e1 07	 and	 ecx, 7
  00422	89 8d bc fe ff
	ff		 mov	 DWORD PTR tv240[ebp], ecx
  00428	74 12		 je	 SHORT $LN26@move_guide
  0042a	83 bd bc fe ff
	ff 01		 cmp	 DWORD PTR tv240[ebp], 1
  00431	0f 84 cc 00 00
	00		 je	 $LN29@move_guide
  00437	e9 8d 01 00 00	 jmp	 $LN32@move_guide
$LN26@move_guide:

; 422  : 				{
; 423  : 				case MISSILE_PHASE1:
; 424  : 					if (raw->weapon_lifetime < HELLFIRE_MINIMUM_CLIMB_TIME && range < 900.0)

  0043c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0043f	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00447	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  0044f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00453	76 36		 jbe	 SHORT $LN27@move_guide
  00455	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _range$15[ebp]
  0045a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408c200000000000
  00462	66 0f 2f c8	 comisd	 xmm1, xmm0
  00466	76 23		 jbe	 SHORT $LN27@move_guide

; 425  : 					{
; 426  : 						raw->missile_phase = MISSILE_FINAL_PHASE;

  00468	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0046b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00471	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  00477	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  0047d	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00480	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 427  : 						break;

  00486	e9 61 01 00 00	 jmp	 $LN4@move_guide
$LN27@move_guide:

; 428  : 					}
; 429  : 
; 430  : 					if (dive_ratio > -0.15)

  0048b	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _dive_ratio$14[ebp]
  00493	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfc3333333333333
  0049b	76 48		 jbe	 SHORT $LN28@move_guide

; 431  : 					{
; 432  : 						// intial phase climb at 7%
; 433  : 						float new_aim_y = weapon_position->y + range * 0.07;

  0049d	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _weapon_position$12[ebp]
  004a3	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  004a8	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _range$15[ebp]
  004ad	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb1eb851eb851ec
  004b5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004bd	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _new_aim_y$8[ebp], xmm0

; 434  : 						intercept_point->y = max(new_aim_y, intercept_point->y);

  004c5	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  004c8	83 c0 04	 add	 eax, 4
  004cb	50		 push	 eax
  004cc	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _new_aim_y$8[ebp]
  004d2	51		 push	 ecx
  004d3	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  004d8	8b 55 10	 mov	 edx, DWORD PTR _intercept_point$[ebp]
  004db	8b 00		 mov	 eax, DWORD PTR [eax]
  004dd	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 435  : 
; 436  : 						break;

  004e0	e9 07 01 00 00	 jmp	 $LN4@move_guide
$LN28@move_guide:

; 437  : 					}
; 438  : 
; 439  : 					raw->missile_phase = MISSILE_PHASE2;

  004e5	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  004e8	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  004ee	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  004f4	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  004fa	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  004fd	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN29@move_guide:

; 440  : 				case MISSILE_PHASE2:
; 441  : 					if (raw->weapon_lifetime < HELLFIRE_MINIMUM_CLIMB_TIME && range < 750.0)

  00503	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00506	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  0050e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  00516	66 0f 2f c8	 comisd	 xmm1, xmm0
  0051a	76 36		 jbe	 SHORT $LN30@move_guide
  0051c	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _range$15[ebp]
  00521	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4087700000000000
  00529	66 0f 2f c8	 comisd	 xmm1, xmm0
  0052d	76 23		 jbe	 SHORT $LN30@move_guide

; 442  : 					{
; 443  : 						raw->missile_phase = MISSILE_FINAL_PHASE;

  0052f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00532	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00538	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  0053e	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  00544	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00547	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 444  : 						break;

  0054d	e9 9a 00 00 00	 jmp	 $LN4@move_guide
$LN30@move_guide:

; 445  : 					}
; 446  : 
; 447  : 					if (dive_ratio > -0.3)

  00552	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _dive_ratio$14[ebp]
  0055a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfd3333333333333
  00562	76 45		 jbe	 SHORT $LN31@move_guide

; 448  : 					{
; 449  : 						// second phase dive at 3%
; 450  : 						float new_aim_y = weapon_position->y + range * -0.03;

  00564	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _weapon_position$12[ebp]
  0056a	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0056f	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _range$15[ebp]
  00574	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bf9eb851eb851eb8
  0057c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00580	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00584	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _new_aim_y$7[ebp], xmm0

; 451  : 						intercept_point->y = max(new_aim_y, intercept_point->y);

  0058c	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  0058f	83 c0 04	 add	 eax, 4
  00592	50		 push	 eax
  00593	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _new_aim_y$7[ebp]
  00599	51		 push	 ecx
  0059a	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0059f	8b 55 10	 mov	 edx, DWORD PTR _intercept_point$[ebp]
  005a2	8b 00		 mov	 eax, DWORD PTR [eax]
  005a4	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 452  : 
; 453  : 						break;

  005a7	eb 43		 jmp	 SHORT $LN4@move_guide
$LN31@move_guide:

; 454  : 					}
; 455  : 
; 456  : 					raw->missile_phase = MISSILE_FINAL_PHASE;

  005a9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005ac	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  005b2	81 e1 ff f8 ff
	ff		 and	 ecx, -1793		; fffff8ffH
  005b8	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  005be	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  005c1	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 457  : 
; 458  : 					break;

  005c7	eb 23		 jmp	 SHORT $LN4@move_guide
$LN32@move_guide:

; 459  : 				default:
; 460  : 					ASSERT(FALSE);

  005c9	b8 01 00 00 00	 mov	 eax, 1
  005ce	85 c0		 test	 eax, eax
  005d0	74 1a		 je	 SHORT $LN33@move_guide
  005d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  005d7	05 9f 00 00 00	 add	 eax, 159		; 0000009fH
  005dc	50		 push	 eax
  005dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  005e2	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  005e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN33@move_guide:
$LN4@move_guide:

; 461  : 				}
; 462  : 		}
; 463  : 	}
; 464  : 
; 465  : 
; 466  : 	//
; 467  : 	// get unit vector to intercept point
; 468  : 	//
; 469  : 
; 470  : 	uvec_intercept_point.x = intercept_point->x - raw->mob.position.x;

  005ec	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  005ef	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  005f2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005f6	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  005fb	f3 0f 11 45 cc	 movss	 DWORD PTR _uvec_intercept_point$[ebp], xmm0

; 471  : 	uvec_intercept_point.y = intercept_point->y - raw->mob.position.y;

  00600	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  00603	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00606	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0060b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00610	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_intercept_point$[ebp+4], xmm0

; 472  : 	uvec_intercept_point.z = intercept_point->z - raw->mob.position.z;

  00615	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  00618	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0061b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00620	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  00625	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_intercept_point$[ebp+8], xmm0

; 473  : 
; 474  : 	length = get_3d_vector_magnitude (&uvec_intercept_point);

  0062a	8d 45 cc	 lea	 eax, DWORD PTR _uvec_intercept_point$[ebp]
  0062d	50		 push	 eax
  0062e	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00633	d9 5d f8	 fstp	 DWORD PTR _length$[ebp]

; 475  : 
; 476  : 	//
; 477  : 	// guard against divide by zero (weapon must be very close to the intercept point)
; 478  : 	//
; 479  : 
; 480  : 	if (length < 1.0)

  00636	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0063b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00643	66 0f 2f c8	 comisd	 xmm1, xmm0
  00647	76 1d		 jbe	 SHORT $LN34@move_guide

; 481  : 	{
; 482  : 		raw->kill_code = WEAPON_KILL_CODE_HIT_TARGET;

  00649	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0064c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00652	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00655	83 c9 05	 or	 ecx, 5
  00658	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0065b	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 483  : 
; 484  : 		return;

  00661	e9 66 08 00 00	 jmp	 $LN1@move_guide
$LN34@move_guide:

; 485  : 	}
; 486  : 
; 487  : 	normalise_3d_vector_given_magnitude (&uvec_intercept_point, length);

  00666	51		 push	 ecx
  00667	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _length$[ebp]
  0066c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00671	8d 45 cc	 lea	 eax, DWORD PTR _uvec_intercept_point$[ebp]
  00674	50		 push	 eax
  00675	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 488  : 
; 489  : 	//
; 490  : 	// get turn demand
; 491  : 	//
; 492  : 
; 493  : 	cos_turn_demand = get_3d_unit_vector_dot_product (&raw->mob.zv, &uvec_intercept_point);

  0067a	8d 45 cc	 lea	 eax, DWORD PTR _uvec_intercept_point$[ebp]
  0067d	50		 push	 eax
  0067e	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00681	83 c1 28	 add	 ecx, 40			; 00000028H
  00684	51		 push	 ecx
  00685	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  0068a	d9 5d f4	 fstp	 DWORD PTR _cos_turn_demand$[ebp]

; 494  : 
; 495  : 	//
; 496  : 	// check for overshot target (but only when speed is high enough, otherwise intercept point might be
; 497  : 	// unusually much offset
; 498  : 	//
; 499  : 
; 500  : 	if (raw->mob.velocity > 20.0 && cos_turn_demand < weapon_database[raw->mob.sub_type].max_seeker_limit)   // lost guidance

  0068d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00690	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  00695	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4034000000000000
  0069d	0f 86 f7 00 00
	00		 jbe	 $LN36@move_guide
  006a3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006a6	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  006ac	f3 0f 10 81 d4
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+212]
  006b4	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _cos_turn_demand$[ebp]
  006b8	0f 86 dc 00 00
	00		 jbe	 $LN36@move_guide

; 501  : 	{
; 502  : 		if (raw->weapon_lifetime - weapon_database[raw->mob.sub_type].burn_time < -1.0)  // weapon armed after 1 second

  006be	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006c1	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  006c7	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  006ca	f3 0f 10 82 80
	00 00 00	 movss	 xmm0, DWORD PTR [edx+128]
  006d2	f3 0f 5c 81 b4
	00 00 00	 subss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+180]
  006da	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006de	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  006e6	66 0f 2f c8	 comisd	 xmm1, xmm0
  006ea	0f 86 aa 00 00
	00		 jbe	 $LN36@move_guide

; 503  : 		{
; 504  : 			debug_log("%s self destructed due to turn demand too high (%0.1f degrees). limit: %.2f", weapon_database[raw->mob.sub_type].full_name, deg(acos(cos_turn_demand)),

  006f0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  006f3	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  006f9	51		 push	 ecx
  006fa	f3 0f 10 81 d4
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+212]
  00702	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00707	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  0070c	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR tv905[ebp]
  00712	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv905[ebp]
  0071a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00722	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00726	83 ec 08	 sub	 esp, 8
  00729	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0072e	51		 push	 ecx
  0072f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _cos_turn_demand$[ebp]
  00734	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00739	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  0073e	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR tv911[ebp]
  00744	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR tv911[ebp]
  0074c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00754	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00758	83 ec 08	 sub	 esp, 8
  0075b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00760	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00763	69 02 e0 00 00
	00		 imul	 eax, DWORD PTR [edx], 224
  00769	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax]
  0076f	51		 push	 ecx
  00770	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@NPHPGHAJ@?$CFs?5self?5destructed?5due?5to?5turn?5@
  00775	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0077a	83 c4 18	 add	 esp, 24			; 00000018H

; 505  : 				deg(acos(weapon_database[raw->mob.sub_type].max_seeker_limit)));
; 506  : 
; 507  : 			raw->kill_code = WEAPON_KILL_CODE_OVERSHOT_TARGET;

  0077d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00780	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00786	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00789	83 c9 06	 or	 ecx, 6
  0078c	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0078f	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 508  : 
; 509  : 			return;

  00795	e9 32 07 00 00	 jmp	 $LN1@move_guide
$LN36@move_guide:

; 510  : 		}
; 511  : //		else
; 512  : //			set_client_server_entity_parent (en, LIST_TYPE_TARGET, NULL);
; 513  : 	}
; 514  : 
; 515  : 	//
; 516  : 	// get attitude matrix (where y-axis is perpendicular to turn demand plane)
; 517  : 	//
; 518  : 
; 519  : 	get_3d_vector_cross_product (&raw->mob.yv, &raw->mob.zv, &uvec_intercept_point);

  0079a	8d 45 cc	 lea	 eax, DWORD PTR _uvec_intercept_point$[ebp]
  0079d	50		 push	 eax
  0079e	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  007a1	83 c1 28	 add	 ecx, 40			; 00000028H
  007a4	51		 push	 ecx
  007a5	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  007a8	83 c2 1c	 add	 edx, 28			; 0000001cH
  007ab	52		 push	 edx
  007ac	e8 00 00 00 00	 call	 ?get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU1@1@Z ; get_3d_vector_cross_product

; 520  : 
; 521  : 	normalise_3d_vector (&raw->mob.yv);

  007b1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  007b4	83 c0 1c	 add	 eax, 28			; 0000001cH
  007b7	50		 push	 eax
  007b8	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  007bd	dd d8		 fstp	 ST(0)

; 522  : 
; 523  : 	get_3d_vector_cross_product (&raw->mob.xv, &raw->mob.yv, &raw->mob.zv);

  007bf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  007c2	83 c0 28	 add	 eax, 40			; 00000028H
  007c5	50		 push	 eax
  007c6	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  007c9	83 c1 1c	 add	 ecx, 28			; 0000001cH
  007cc	51		 push	 ecx
  007cd	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  007d0	83 c2 10	 add	 edx, 16			; 00000010H
  007d3	52		 push	 edx
  007d4	e8 00 00 00 00	 call	 ?get_3d_vector_cross_product@@YGXPAUVEC3D@@PBU1@1@Z ; get_3d_vector_cross_product

; 524  : 
; 525  : 	normalise_3d_vector (&raw->mob.xv);

  007d9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  007dc	83 c0 10	 add	 eax, 16			; 00000010H
  007df	50		 push	 eax
  007e0	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  007e5	dd d8		 fstp	 ST(0)

; 526  : 
; 527  : 	//
; 528  : 	// close angle (rotate about y-axis)
; 529  : 	//
; 530  : 
; 531  : 	turn_demand = acos (cos_turn_demand);

  007e7	51		 push	 ecx
  007e8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _cos_turn_demand$[ebp]
  007ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f2	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  007f7	d9 5d f0	 fstp	 DWORD PTR _turn_demand$[ebp]

; 532  : 
; 533  : 	max_turn_rate = weapon_database[raw->mob.sub_type].g_max / max (raw->mob.velocity, 1.0f);

  007fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00802	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  0080a	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0080d	69 30 e0 00 00
	00		 imul	 esi, DWORD PTR [eax], 224
  00813	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00819	51		 push	 ecx
  0081a	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0081d	83 c2 40	 add	 edx, 64			; 00000040H
  00820	52		 push	 edx
  00821	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00826	f3 0f 10 86 b0
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[esi+176]
  0082e	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  00832	f3 0f 11 45 ec	 movss	 DWORD PTR _max_turn_rate$[ebp], xmm0

; 534  : 
; 535  : 	turn_rate = bound (turn_demand, -max_turn_rate, max_turn_rate);

  00837	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _max_turn_rate$[ebp]
  0083c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00843	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _turn_demand$[ebp]
  00847	76 16		 jbe	 SHORT $LN53@move_guide
  00849	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _max_turn_rate$[ebp]
  0084e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00855	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv417[ebp], xmm0
  0085d	eb 37		 jmp	 SHORT $LN54@move_guide
$LN53@move_guide:
  0085f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _turn_demand$[ebp]
  00864	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _max_turn_rate$[ebp]
  00868	76 0f		 jbe	 SHORT $LN51@move_guide
  0086a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _max_turn_rate$[ebp]
  0086f	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR tv416[ebp], xmm0
  00877	eb 0d		 jmp	 SHORT $LN52@move_guide
$LN51@move_guide:
  00879	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _turn_demand$[ebp]
  0087e	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR tv416[ebp], xmm0
$LN52@move_guide:
  00886	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR tv416[ebp]
  0088e	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv417[ebp], xmm0
$LN54@move_guide:
  00896	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv417[ebp]
  0089e	f3 0f 11 45 e8	 movss	 DWORD PTR _turn_rate$[ebp], xmm0

; 536  : 
; 537  : 	max_frame_turn_rate = max_turn_rate * get_delta_time ();

  008a3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _max_turn_rate$[ebp]
  008a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  008b0	f3 0f 11 45 e4	 movss	 DWORD PTR _max_frame_turn_rate$[ebp], xmm0

; 538  : 
; 539  : 	//
; 540  : 	// damp turn rate during inhibit period
; 541  : 	//
; 542  : 
; 543  : 	if (raw->weapon_lifetime > (weapon_database[raw->mob.sub_type].burn_time - weapon_database[raw->mob.sub_type].inhibit_time))

  008b5	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  008b8	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  008be	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  008c1	69 02 e0 00 00
	00		 imul	 eax, DWORD PTR [edx], 224
  008c7	f3 0f 10 81 b4
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+180]
  008cf	f3 0f 5c 80 c0
	00 00 00	 subss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+192]
  008d7	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  008da	f3 0f 10 89 80
	00 00 00	 movss	 xmm1, DWORD PTR [ecx+128]
  008e2	0f 2f c8	 comiss	 xmm1, xmm0
  008e5	0f 86 fb 00 00
	00		 jbe	 $LN37@move_guide

; 544  : 	{
; 545  : 		//
; 546  : 		// damp using y = x * x curve
; 547  : 		//
; 548  : 
; 549  : 		ASSERT (weapon_database[raw->mob.sub_type].inhibit_time > 0.0);

  008eb	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  008ee	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  008f4	f3 0f 5a 81 c0
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+192]
  008fc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00904	77 1a		 ja	 SHORT $LN39@move_guide
  00906	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0090b	05 f8 00 00 00	 add	 eax, 248		; 000000f8H
  00910	50		 push	 eax
  00911	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00916	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@DPMAFHMC@weapon_database?$FLraw?9?$DOmob?4sub_ty@
  0091b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN39@move_guide:

; 550  : 
; 551  : 		inhibit_damp_factor = (weapon_database[raw->mob.sub_type].burn_time - raw->weapon_lifetime) / weapon_database[raw->mob.sub_type].inhibit_time;

  00920	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00923	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00929	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0092c	f3 0f 10 81 b4
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+180]
  00934	f3 0f 5c 82 80
	00 00 00	 subss	 xmm0, DWORD PTR [edx+128]
  0093c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0093f	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00945	f3 0f 5e 81 c0
	00 00 00	 divss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+192]
  0094d	f3 0f 11 45 dc	 movss	 DWORD PTR _inhibit_damp_factor$[ebp], xmm0

; 552  : 
; 553  : 		inhibit_damp_factor *= inhibit_damp_factor;

  00952	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _inhibit_damp_factor$[ebp]
  00957	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _inhibit_damp_factor$[ebp]
  0095c	f3 0f 11 45 dc	 movss	 DWORD PTR _inhibit_damp_factor$[ebp], xmm0

; 554  : 
; 555  : 		turn_rate *= inhibit_damp_factor;

  00961	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _turn_rate$[ebp]
  00966	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _inhibit_damp_factor$[ebp]
  0096b	f3 0f 11 45 e8	 movss	 DWORD PTR _turn_rate$[ebp], xmm0

; 556  : 
; 557  : 		frame_turn_rate = inhibit_damp_factor * bound (turn_demand, -max_frame_turn_rate, max_frame_turn_rate);

  00970	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  00975	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0097c	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _turn_demand$[ebp]
  00980	76 16		 jbe	 SHORT $LN57@move_guide
  00982	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  00987	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0098e	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv463[ebp], xmm0
  00996	eb 37		 jmp	 SHORT $LN58@move_guide
$LN57@move_guide:
  00998	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _turn_demand$[ebp]
  0099d	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  009a1	76 0f		 jbe	 SHORT $LN55@move_guide
  009a3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  009a8	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR tv462[ebp], xmm0
  009b0	eb 0d		 jmp	 SHORT $LN56@move_guide
$LN55@move_guide:
  009b2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _turn_demand$[ebp]
  009b7	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR tv462[ebp], xmm0
$LN56@move_guide:
  009bf	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR tv462[ebp]
  009c7	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv463[ebp], xmm0
$LN58@move_guide:
  009cf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _inhibit_damp_factor$[ebp]
  009d4	f3 0f 59 85 bc
	fe ff ff	 mulss	 xmm0, DWORD PTR tv463[ebp]
  009dc	f3 0f 11 45 e0	 movss	 DWORD PTR _frame_turn_rate$[ebp], xmm0

; 558  : 	}
; 559  : 	else

  009e1	e9 a8 00 00 00	 jmp	 $LN38@move_guide
$LN37@move_guide:

; 560  : 	{
; 561  : 		// arneh - limit turn rate in first phases of hellfire trajectory to get a smoother arc
; 562  : 		if (weapon_database[raw->mob.sub_type].hellfire_flight_profile && raw->missile_phase != MISSILE_FINAL_PHASE)

  009e6	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  009e9	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  009ef	83 b9 7c 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+124], 0
  009f6	74 2a		 je	 SHORT $LN40@move_guide
  009f8	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  009fb	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00a01	c1 e9 08	 shr	 ecx, 8
  00a04	83 e1 07	 and	 ecx, 7
  00a07	83 f9 03	 cmp	 ecx, 3
  00a0a	74 16		 je	 SHORT $LN40@move_guide

; 563  : 			max_frame_turn_rate = max_frame_turn_rate * 0.5;

  00a0c	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  00a11	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00a19	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1d	f3 0f 11 45 e4	 movss	 DWORD PTR _max_frame_turn_rate$[ebp], xmm0
$LN40@move_guide:

; 564  : 
; 565  : 		frame_turn_rate = bound (turn_demand, -max_frame_turn_rate, max_frame_turn_rate);

  00a22	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  00a27	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00a2e	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _turn_demand$[ebp]
  00a32	76 16		 jbe	 SHORT $LN61@move_guide
  00a34	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  00a39	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00a40	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv483[ebp], xmm0
  00a48	eb 37		 jmp	 SHORT $LN62@move_guide
$LN61@move_guide:
  00a4a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _turn_demand$[ebp]
  00a4f	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  00a53	76 0f		 jbe	 SHORT $LN59@move_guide
  00a55	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _max_frame_turn_rate$[ebp]
  00a5a	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR tv482[ebp], xmm0
  00a62	eb 0d		 jmp	 SHORT $LN60@move_guide
$LN59@move_guide:
  00a64	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _turn_demand$[ebp]
  00a69	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR tv482[ebp], xmm0
$LN60@move_guide:
  00a71	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR tv482[ebp]
  00a79	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv483[ebp], xmm0
$LN62@move_guide:
  00a81	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv483[ebp]
  00a89	f3 0f 11 45 e0	 movss	 DWORD PTR _frame_turn_rate$[ebp], xmm0
$LN38@move_guide:

; 566  : 	}
; 567  : 
; 568  : 	get_3d_transformation_matrix (m1, frame_turn_rate, 0.0, 0.0);

  00a8e	51		 push	 ecx
  00a8f	0f 57 c0	 xorps	 xmm0, xmm0
  00a92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a97	51		 push	 ecx
  00a98	0f 57 c0	 xorps	 xmm0, xmm0
  00a9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa0	51		 push	 ecx
  00aa1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _frame_turn_rate$[ebp]
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	8d 45 a8	 lea	 eax, DWORD PTR _m1$[ebp]
  00aae	50		 push	 eax
  00aaf	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 569  : 
; 570  : 	// arneh - make vikhrs spiral
; 571  : 	if (weapon_database[raw->mob.sub_type].spiral_flightpath && raw->weapon_lifetime > 0.0
; 572  : 		&& (raw->weapon_lifetime - weapon_database[raw->mob.sub_type].burn_time) < -0.2)

  00ab4	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00ab7	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00abd	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+128], 0
  00ac4	0f 84 6b 01 00
	00		 je	 $LN41@move_guide
  00aca	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00acd	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00ad5	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00add	0f 86 52 01 00
	00		 jbe	 $LN41@move_guide
  00ae3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00ae6	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00aec	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00aef	f3 0f 10 82 80
	00 00 00	 movss	 xmm0, DWORD PTR [edx+128]
  00af7	f3 0f 5c 81 b4
	00 00 00	 subss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+180]
  00aff	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00b03	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfc999999999999a
  00b0b	66 0f 2f c8	 comisd	 xmm1, xmm0
  00b0f	0f 86 20 01 00
	00		 jbe	 $LN41@move_guide

; 573  : 	{
; 574  : 		matrix3x3 spiral_matrix, tmp;
; 575  : 
; 576  : 		float heading = rad(cos(raw->weapon_lifetime * 8.0)) * raw->weapon_lifetime * 0.4;

  00b15	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00b18	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00b20	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4020000000000000
  00b28	83 ec 08	 sub	 esp, 8
  00b2b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b30	e8 00 00 00 00	 call	 _cos
  00b35	83 c4 08	 add	 esp, 8
  00b38	dd 9d b8 fe ff
	ff		 fstp	 QWORD PTR tv993[ebp]
  00b3e	f2 0f 10 85 b8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv993[ebp]
  00b46	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a0000000
  00b4e	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00b51	f3 0f 5a 89 80
	00 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+128]
  00b59	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00b5d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  00b65	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b69	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _heading$4[ebp], xmm0

; 577  : 		float pitch = -rad(sin(raw->weapon_lifetime * 8.0)) * raw->weapon_lifetime * 0.4;

  00b71	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00b74	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00b7c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4020000000000000
  00b84	83 ec 08	 sub	 esp, 8
  00b87	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b8c	e8 00 00 00 00	 call	 _sin
  00b91	83 c4 08	 add	 esp, 8
  00b94	dd 9d b8 fe ff
	ff		 fstp	 QWORD PTR tv1000[ebp]
  00b9a	f2 0f 10 85 b8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1000[ebp]
  00ba2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a0000000
  00baa	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00bb1	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00bb4	f3 0f 5a 89 80
	00 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+128]
  00bbc	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00bc0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  00bc8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00bcc	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _pitch$3[ebp], xmm0

; 578  : 
; 579  : 		get_3d_transformation_matrix (spiral_matrix, heading, pitch, 0.0);

  00bd4	51		 push	 ecx
  00bd5	0f 57 c0	 xorps	 xmm0, xmm0
  00bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bdd	51		 push	 ecx
  00bde	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch$3[ebp]
  00be6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00beb	51		 push	 ecx
  00bec	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _heading$4[ebp]
  00bf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _spiral_matrix$6[ebp]
  00bff	50		 push	 eax
  00c00	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 580  : 
; 581  : 		multiply_matrix3x3_matrix3x3 (tmp, m1, raw->mob.attitude);

  00c05	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00c08	83 c0 10	 add	 eax, 16			; 00000010H
  00c0b	50		 push	 eax
  00c0c	8d 4d a8	 lea	 ecx, DWORD PTR _m1$[ebp]
  00c0f	51		 push	 ecx
  00c10	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _tmp$5[ebp]
  00c16	52		 push	 edx
  00c17	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 582  : 		multiply_matrix3x3_matrix3x3 (m2, tmp, spiral_matrix);

  00c1c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _spiral_matrix$6[ebp]
  00c22	50		 push	 eax
  00c23	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _tmp$5[ebp]
  00c29	51		 push	 ecx
  00c2a	8d 55 84	 lea	 edx, DWORD PTR _m2$[ebp]
  00c2d	52		 push	 edx
  00c2e	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 583  : 	}
; 584  : 	else

  00c33	eb 14		 jmp	 SHORT $LN42@move_guide
$LN41@move_guide:

; 585  : 		multiply_matrix3x3_matrix3x3 (m2, m1, raw->mob.attitude);

  00c35	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00c38	83 c0 10	 add	 eax, 16			; 00000010H
  00c3b	50		 push	 eax
  00c3c	8d 4d a8	 lea	 ecx, DWORD PTR _m1$[ebp]
  00c3f	51		 push	 ecx
  00c40	8d 55 84	 lea	 edx, DWORD PTR _m2$[ebp]
  00c43	52		 push	 edx
  00c44	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3
$LN42@move_guide:

; 586  : 
; 587  : 	//
; 588  : 	// set roll to zero to remove jitter on weapon view
; 589  : 	//
; 590  : 
; 591  : 	get_3d_transformation_matrix (raw->mob.attitude, get_heading_from_attitude_matrix (m2), get_pitch_from_attitude_matrix (m2), 0.0);

  00c49	51		 push	 ecx
  00c4a	0f 57 c0	 xorps	 xmm0, xmm0
  00c4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c52	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c57	d1 e0		 shl	 eax, 1
  00c59	8d 4c 05 84	 lea	 ecx, DWORD PTR _m2$[ebp+eax]
  00c5d	ba 04 00 00 00	 mov	 edx, 4
  00c62	c1 e2 00	 shl	 edx, 0
  00c65	51		 push	 ecx
  00c66	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00c6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c70	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00c75	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR tv1026[ebp]
  00c7b	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv1026[ebp]
  00c83	51		 push	 ecx
  00c84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c89	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c8e	d1 e0		 shl	 eax, 1
  00c90	8d 4c 05 84	 lea	 ecx, DWORD PTR _m2$[ebp+eax]
  00c94	ba 04 00 00 00	 mov	 edx, 4
  00c99	d1 e2		 shl	 edx, 1
  00c9b	51		 push	 ecx
  00c9c	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00ca1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cab	d1 e0		 shl	 eax, 1
  00cad	8d 4c 05 84	 lea	 ecx, DWORD PTR _m2$[ebp+eax]
  00cb1	ba 04 00 00 00	 mov	 edx, 4
  00cb6	6b c2 00	 imul	 eax, edx, 0
  00cb9	51		 push	 ecx
  00cba	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00cbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc4	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00cc9	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR tv1039[ebp]
  00ccf	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR tv1039[ebp]
  00cd7	51		 push	 ecx
  00cd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdd	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00ce0	83 c1 10	 add	 ecx, 16			; 00000010H
  00ce3	51		 push	 ecx
  00ce4	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 592  : 
; 593  : 	//
; 594  : 	// acceleration
; 595  : 	//
; 596  : 
; 597  : 	if (raw->weapon_lifetime > 0.0)

  00ce9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00cec	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00cf4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00cfc	76 42		 jbe	 SHORT $LN43@move_guide

; 598  : 	{
; 599  : 		acceleration = weapon_database[raw->mob.sub_type].g_max - (fabs (turn_rate) * raw->mob.velocity);

  00cfe	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00d01	69 30 e0 00 00
	00		 imul	 esi, DWORD PTR [eax], 224
  00d07	51		 push	 ecx
  00d08	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _turn_rate$[ebp]
  00d0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d12	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00d17	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR tv1052[ebp]
  00d1d	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv1052[ebp]
  00d25	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00d28	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  00d2d	f3 0f 10 8e b0
	00 00 00	 movss	 xmm1, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[esi+176]
  00d35	f3 0f 5c c8	 subss	 xmm1, xmm0
  00d39	f3 0f 11 4d d8	 movss	 DWORD PTR _acceleration$[ebp], xmm1

; 600  : 	}
; 601  : 	else

  00d3e	eb 32		 jmp	 SHORT $LN44@move_guide
$LN43@move_guide:

; 602  : 	{
; 603  : 		acceleration = -(fabs (turn_rate) * raw->mob.velocity);

  00d40	51		 push	 ecx
  00d41	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _turn_rate$[ebp]
  00d46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4b	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00d50	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR tv1060[ebp]
  00d56	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv1060[ebp]
  00d5e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00d61	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  00d66	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d6d	f3 0f 11 45 d8	 movss	 DWORD PTR _acceleration$[ebp], xmm0
$LN44@move_guide:

; 604  : 	}
; 605  : 
; 606  : 	//
; 607  : 	// velocity
; 608  : 	//
; 609  : 
; 610  : 	raw->mob.velocity += acceleration * get_delta_time ();

  00d72	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  00d77	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00d7f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00d82	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  00d87	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00d8a	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0

; 611  : 
; 612  : 	raw->mob.velocity = max (raw->mob.velocity, 0.0f);

  00d8f	0f 57 c0	 xorps	 xmm0, xmm0
  00d92	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00d9a	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00da0	50		 push	 eax
  00da1	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00da4	83 c1 40	 add	 ecx, 64			; 00000040H
  00da7	51		 push	 ecx
  00da8	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00dad	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00db0	8b 00		 mov	 eax, DWORD PTR [eax]
  00db2	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 613  : 
; 614  : 	if (raw->weapon_lifetime < 0.0 && raw->mob.velocity < 20.0)  // self destruct if speed drops too low (after motor has burned out)

  00db5	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00db8	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00dc0	0f 57 c9	 xorps	 xmm1, xmm1
  00dc3	66 0f 2f c8	 comisd	 xmm1, xmm0
  00dc7	76 5d		 jbe	 SHORT $LN45@move_guide
  00dc9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00dcc	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  00dd1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4034000000000000
  00dd9	66 0f 2f c8	 comisd	 xmm1, xmm0
  00ddd	76 47		 jbe	 SHORT $LN45@move_guide

; 615  : 	{
; 616  : 		debug_log("%s self destructed due to speed dropping too low (%0.1f m/s)", weapon_database[raw->mob.sub_type].full_name, raw->mob.velocity);

  00ddf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00de2	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  00de7	83 ec 08	 sub	 esp, 8
  00dea	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00def	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00df2	69 11 e0 00 00
	00		 imul	 edx, DWORD PTR [ecx], 224
  00df8	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[edx]
  00dfe	50		 push	 eax
  00dff	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@COFLBLK@?$CFs?5self?5destructed?5due?5to?5speed@
  00e04	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00e09	83 c4 10	 add	 esp, 16			; 00000010H

; 617  : 
; 618  : 		raw->kill_code = WEAPON_KILL_CODE_SELF_DESTRUCT;

  00e0c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e0f	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00e15	83 c9 07	 or	 ecx, 7
  00e18	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00e1b	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 619  : 
; 620  : 		return;

  00e21	e9 a6 00 00 00	 jmp	 $LN1@move_guide
$LN45@move_guide:

; 621  : 	}
; 622  : 
; 623  : 	//
; 624  : 	// motion vector
; 625  : 	//
; 626  : 
; 627  : 	raw->mob.motion_vector.x = raw->mob.zv.x * raw->mob.velocity;

  00e26	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e29	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00e2c	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  00e31	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  00e36	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00e39	f3 0f 11 42 34	 movss	 DWORD PTR [edx+52], xmm0

; 628  : 	raw->mob.motion_vector.y = raw->mob.zv.y * raw->mob.velocity;

  00e3e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e41	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00e44	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00e49	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  00e4e	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00e51	f3 0f 11 42 38	 movss	 DWORD PTR [edx+56], xmm0

; 629  : 	raw->mob.motion_vector.z = raw->mob.zv.z * raw->mob.velocity;

  00e56	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e59	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00e5c	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00e61	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  00e66	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00e69	f3 0f 11 42 3c	 movss	 DWORD PTR [edx+60], xmm0

; 630  : 
; 631  : 	//
; 632  : 	// position
; 633  : 	//
; 634  : 
; 635  : 	new_position->x += raw->mob.motion_vector.x * get_delta_time ();

  00e6e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e71	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00e76	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00e7e	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00e81	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00e85	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  00e88	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 636  : 	new_position->y += raw->mob.motion_vector.y * get_delta_time ();

  00e8c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e8f	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00e94	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00e9c	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00e9f	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00ea4	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  00ea7	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 637  : 	new_position->z += raw->mob.motion_vector.z * get_delta_time ();

  00eac	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00eaf	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00eb4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00ebc	8b 4d 0c	 mov	 ecx, DWORD PTR _new_position$[ebp]
  00ebf	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00ec4	8b 55 0c	 mov	 edx, DWORD PTR _new_position$[ebp]
  00ec7	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
$LN1@move_guide:

; 638  : }

  00ecc	5f		 pop	 edi
  00ecd	5e		 pop	 esi
  00ece	5b		 pop	 ebx
  00ecf	8b e5		 mov	 esp, ebp
  00ed1	5d		 pop	 ebp
  00ed2	c2 0c 00	 ret	 12			; 0000000cH
?move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP	; move_guided_weapon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z
_TEXT	SEGMENT
tv220 = -88						; size = 4
tv196 = -88						; size = 4
tv174 = -88						; size = 4
tv153 = -88						; size = 4
tv129 = -88						; size = 4
tv213 = -84						; size = 4
tv189 = -84						; size = 4
tv166 = -84						; size = 4
tv146 = -84						; size = 4
tv89 = -84						; size = 4
_weapon_decoy_type$ = -16				; size = 4
_target_position_valid$ = -12				; size = 4
_target$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_position$ = 12						; size = 4
_can_guide_on_ground_lock$ = 16				; size = 4
?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z PROC	; get_target_position, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 226  : 	weapon
; 227  : 		*raw;
; 228  : 
; 229  : 	entity
; 230  : 		*target;
; 231  : 
; 232  : 	int
; 233  : 		target_position_valid = FALSE;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _target_position_valid$[ebp], 0

; 234  : 
; 235  : 	weapon_decoy_types
; 236  : 		weapon_decoy_type;
; 237  : 
; 238  : 	ASSERT (en);

  00010	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00014	75 18		 jne	 SHORT $LN2@get_target
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA
  0001b	83 c0 0d	 add	 eax, 13			; 0000000dH
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00029	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_target:

; 239  : 
; 240  : 	ASSERT (position);

  0002e	83 7d 0c 00	 cmp	 DWORD PTR _position$[ebp], 0
  00032	75 18		 jne	 SHORT $LN3@get_target
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA
  00039	83 c0 0f	 add	 eax, 15			; 0000000fH
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  00047	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_target:

; 241  : 
; 242  : 	raw = (weapon *) get_local_entity_data (en);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00052	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 243  : 
; 244  : 	target = raw->mob.target_link.parent;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00058	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  0005b	89 4d f8	 mov	 DWORD PTR _target$[ebp], ecx

; 245  : 
; 246  : 	if (can_guide_on_ground_lock)

  0005e	83 7d 10 00	 cmp	 DWORD PTR _can_guide_on_ground_lock$[ebp], 0
  00062	0f 84 9e 00 00
	00		 je	 $LN4@get_target

; 247  : 	{
; 248  : 		// track the locked ground point
; 249  : 		get_local_entity_vec3d(raw->launched_weapon_link.parent, VEC3D_TYPE_EO_TRACKING_POINT, position);

  00068	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0006b	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00072	74 10		 je	 SHORT $LN16@get_target
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00077	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0007d	8b 02		 mov	 eax, DWORD PTR [edx]
  0007f	89 45 ac	 mov	 DWORD PTR tv89[ebp], eax
  00082	eb 22		 jmp	 SHORT $LN17@get_target
$LN16@get_target:
  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA
  0008a	83 c1 18	 add	 ecx, 24			; 00000018H
  0008d	51		 push	 ecx
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00093	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN17@get_target:
  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	85 c0		 test	 eax, eax
  000ad	74 09		 je	 SHORT $LN18@get_target
  000af	c7 45 a8 03 00
	00 00		 mov	 DWORD PTR tv129[ebp], 3
  000b6	eb 22		 jmp	 SHORT $LN19@get_target
$LN18@get_target:
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA
  000be	83 c1 18	 add	 ecx, 24			; 00000018H
  000c1	51		 push	 ecx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d3	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN19@get_target:
  000da	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  000dd	50		 push	 eax
  000de	6a 03		 push	 3
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000e3	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000e9	52		 push	 edx
  000ea	6b 45 ac 60	 imul	 eax, DWORD PTR tv89[ebp], 96
  000ee	8b 4d a8	 mov	 ecx, DWORD PTR tv129[ebp]
  000f1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  000f8	ff d2		 call	 edx

; 250  : 
; 251  : 		target_position_valid = eo_tracking_point_valid(position);

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?eo_tracking_point_valid@@YGHPAUVEC3D@@@Z ; eo_tracking_point_valid
  00103	89 45 f4	 mov	 DWORD PTR _target_position_valid$[ebp], eax
$LN4@get_target:

; 252  : 	}
; 253  : 
; 254  : 	if (!target_position_valid && target)

  00106	83 7d f4 00	 cmp	 DWORD PTR _target_position_valid$[ebp], 0
  0010a	0f 85 97 02 00
	00		 jne	 $LN5@get_target
  00110	83 7d f8 00	 cmp	 DWORD PTR _target$[ebp], 0
  00114	0f 84 8d 02 00
	00		 je	 $LN5@get_target

; 255  : 	{
; 256  : 		if (get_local_entity_int_value (target, INT_TYPE_IDENTIFY_MOBILE))

  0011a	83 7d f8 00	 cmp	 DWORD PTR _target$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN20@get_target
  00120	8b 45 f8	 mov	 eax, DWORD PTR _target$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d ac	 mov	 DWORD PTR tv146[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN21@get_target
$LN20@get_target:
  0012a	68 00 01 00 00	 push	 256			; 00000100H
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN21@get_target:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN22@get_target
  00150	c7 45 a8 5d 00
	00 00		 mov	 DWORD PTR tv153[ebp], 93 ; 0000005dH
  00157	eb 1d		 jmp	 SHORT $LN23@get_target
$LN22@get_target:
  00159	68 00 01 00 00	 push	 256			; 00000100H
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN23@get_target:
  00176	6a 5d		 push	 93			; 0000005dH
  00178	8b 55 f8	 mov	 edx, DWORD PTR _target$[ebp]
  0017b	52		 push	 edx
  0017c	69 45 ac 5c 04
	00 00		 imul	 eax, DWORD PTR tv146[ebp], 1116
  00183	8b 4d a8	 mov	 ecx, DWORD PTR tv153[ebp]
  00186	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0018d	ff d2		 call	 edx
  0018f	85 c0		 test	 eax, eax
  00191	0f 84 fc 01 00
	00		 je	 $LN6@get_target

; 257  : 		{
; 258  : 			weapon_decoy_type = (weapon_decoy_types) get_local_entity_int_value (target, INT_TYPE_WEAPON_DECOY_TYPE);

  00197	83 7d f8 00	 cmp	 DWORD PTR _target$[ebp], 0
  0019b	74 0a		 je	 SHORT $LN24@get_target
  0019d	8b 45 f8	 mov	 eax, DWORD PTR _target$[ebp]
  001a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a2	89 4d ac	 mov	 DWORD PTR tv166[ebp], ecx
  001a5	eb 21		 jmp	 SHORT $LN25@get_target
$LN24@get_target:
  001a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA
  001ad	83 c2 21	 add	 edx, 33			; 00000021H
  001b0	52		 push	 edx
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c1	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$LN25@get_target:
  001c8	b9 01 00 00 00	 mov	 ecx, 1
  001cd	85 c9		 test	 ecx, ecx
  001cf	74 09		 je	 SHORT $LN26@get_target
  001d1	c7 45 a8 06 01
	00 00		 mov	 DWORD PTR tv174[ebp], 262 ; 00000106H
  001d8	eb 21		 jmp	 SHORT $LN27@get_target
$LN26@get_target:
  001da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z@4JA
  001e0	83 c2 21	 add	 edx, 33			; 00000021H
  001e3	52		 push	 edx
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f4	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv174[ebp], 0
$LN27@get_target:
  001fb	68 06 01 00 00	 push	 262			; 00000106H
  00200	8b 4d f8	 mov	 ecx, DWORD PTR _target$[ebp]
  00203	51		 push	 ecx
  00204	69 55 ac 5c 04
	00 00		 imul	 edx, DWORD PTR tv166[ebp], 1116
  0020b	8b 45 a8	 mov	 eax, DWORD PTR tv174[ebp]
  0020e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00215	ff d1		 call	 ecx
  00217	89 45 f0	 mov	 DWORD PTR _weapon_decoy_type$[ebp], eax

; 259  : 
; 260  : 			if (weapon_decoy_type == WEAPON_DECOY_TYPE_NONE)

  0021a	83 7d f0 00	 cmp	 DWORD PTR _weapon_decoy_type$[ebp], 0
  0021e	0f 85 43 01 00
	00		 jne	 $LN8@get_target

; 261  : 			{
; 262  : 				get_intercept_point (en, target, position);

  00224	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  00227	50		 push	 eax
  00228	8b 4d f8	 mov	 ecx, DWORD PTR _target$[ebp]
  0022b	51		 push	 ecx
  0022c	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0022f	52		 push	 edx
  00230	e8 00 00 00 00	 call	 ?get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_intercept_point

; 263  : 
; 264  : 				//
; 265  : 				// not a decoy, test for jammers
; 266  : 				//
; 267  : 
; 268  : 				if ((get_local_entity_int_value (target, INT_TYPE_RADAR_JAMMER_ON)) && (get_decoy_type_for_weapon (en) == ENTITY_SUB_TYPE_WEAPON_CHAFF))

  00235	83 7d f8 00	 cmp	 DWORD PTR _target$[ebp], 0
  00239	74 0a		 je	 SHORT $LN28@get_target
  0023b	8b 45 f8	 mov	 eax, DWORD PTR _target$[ebp]
  0023e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00240	89 4d ac	 mov	 DWORD PTR tv189[ebp], ecx
  00243	eb 1d		 jmp	 SHORT $LN29@get_target
$LN28@get_target:
  00245	68 0c 01 00 00	 push	 268			; 0000010cH
  0024a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0024f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00255	52		 push	 edx
  00256	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv189[ebp], 0
$LN29@get_target:
  00262	b8 01 00 00 00	 mov	 eax, 1
  00267	85 c0		 test	 eax, eax
  00269	74 09		 je	 SHORT $LN30@get_target
  0026b	c7 45 a8 a8 00
	00 00		 mov	 DWORD PTR tv196[ebp], 168 ; 000000a8H
  00272	eb 1d		 jmp	 SHORT $LN31@get_target
$LN30@get_target:
  00274	68 0c 01 00 00	 push	 268			; 0000010cH
  00279	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00284	51		 push	 ecx
  00285	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0028a	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv196[ebp], 0
$LN31@get_target:
  00291	68 a8 00 00 00	 push	 168			; 000000a8H
  00296	8b 55 f8	 mov	 edx, DWORD PTR _target$[ebp]
  00299	52		 push	 edx
  0029a	69 45 ac 5c 04
	00 00		 imul	 eax, DWORD PTR tv189[ebp], 1116
  002a1	8b 4d a8	 mov	 ecx, DWORD PTR tv196[ebp]
  002a4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002ab	ff d2		 call	 edx
  002ad	85 c0		 test	 eax, eax
  002af	74 20		 je	 SHORT $LN10@get_target
  002b1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 ?get_decoy_type_for_weapon@@YGHPAUENTITY@@@Z ; get_decoy_type_for_weapon
  002ba	83 f8 43	 cmp	 eax, 67			; 00000043H
  002bd	75 12		 jne	 SHORT $LN10@get_target

; 269  : 				{
; 270  : 					get_jammer_distract_position (en, position);

  002bf	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  002c2	50		 push	 eax
  002c3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002c6	51		 push	 ecx
  002c7	e8 00 00 00 00	 call	 ?get_jammer_distract_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_jammer_distract_position
  002cc	e9 94 00 00 00	 jmp	 $LN11@get_target
$LN10@get_target:

; 271  : 				}
; 272  : 				else if ((get_local_entity_int_value (target, INT_TYPE_INFRA_RED_JAMMER_ON)) && (get_decoy_type_for_weapon (en) == ENTITY_SUB_TYPE_WEAPON_FLARE))

  002d1	83 7d f8 00	 cmp	 DWORD PTR _target$[ebp], 0
  002d5	74 0a		 je	 SHORT $LN32@get_target
  002d7	8b 45 f8	 mov	 eax, DWORD PTR _target$[ebp]
  002da	8b 08		 mov	 ecx, DWORD PTR [eax]
  002dc	89 4d ac	 mov	 DWORD PTR tv213[ebp], ecx
  002df	eb 1d		 jmp	 SHORT $LN33@get_target
$LN32@get_target:
  002e1	68 10 01 00 00	 push	 272			; 00000110H
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  002eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002f1	52		 push	 edx
  002f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f7	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv213[ebp], 0
$LN33@get_target:
  002fe	b8 01 00 00 00	 mov	 eax, 1
  00303	85 c0		 test	 eax, eax
  00305	74 09		 je	 SHORT $LN34@get_target
  00307	c7 45 a8 68 00
	00 00		 mov	 DWORD PTR tv220[ebp], 104 ; 00000068H
  0030e	eb 1d		 jmp	 SHORT $LN35@get_target
$LN34@get_target:
  00310	68 10 01 00 00	 push	 272			; 00000110H
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00320	51		 push	 ecx
  00321	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00326	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv220[ebp], 0
$LN35@get_target:
  0032d	6a 68		 push	 104			; 00000068H
  0032f	8b 55 f8	 mov	 edx, DWORD PTR _target$[ebp]
  00332	52		 push	 edx
  00333	69 45 ac 5c 04
	00 00		 imul	 eax, DWORD PTR tv213[ebp], 1116
  0033a	8b 4d a8	 mov	 ecx, DWORD PTR tv220[ebp]
  0033d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00344	ff d2		 call	 edx
  00346	85 c0		 test	 eax, eax
  00348	74 1b		 je	 SHORT $LN11@get_target
  0034a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0034d	50		 push	 eax
  0034e	e8 00 00 00 00	 call	 ?get_decoy_type_for_weapon@@YGHPAUENTITY@@@Z ; get_decoy_type_for_weapon
  00353	83 f8 44	 cmp	 eax, 68			; 00000044H
  00356	75 0d		 jne	 SHORT $LN11@get_target

; 273  : 				{
; 274  : 					get_jammer_distract_position (en, position);

  00358	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  0035b	50		 push	 eax
  0035c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0035f	51		 push	 ecx
  00360	e8 00 00 00 00	 call	 ?get_jammer_distract_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_jammer_distract_position
$LN11@get_target:

; 275  : 				}
; 276  : 			}

  00365	eb 2a		 jmp	 SHORT $LN9@get_target
$LN8@get_target:

; 277  : 			else if (weapon_decoy_type == WEAPON_DECOY_TYPE_SMOKE_GRENADE)

  00367	83 7d f0 03	 cmp	 DWORD PTR _weapon_decoy_type$[ebp], 3
  0036b	75 13		 jne	 SHORT $LN13@get_target

; 278  : 			{
; 279  : 				get_smoke_grenade_distract_position (en, target, position);

  0036d	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  00370	50		 push	 eax
  00371	8b 4d f8	 mov	 ecx, DWORD PTR _target$[ebp]
  00374	51		 push	 ecx
  00375	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00378	52		 push	 edx
  00379	e8 00 00 00 00	 call	 ?get_smoke_grenade_distract_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_smoke_grenade_distract_position

; 280  : 			}
; 281  : 			else

  0037e	eb 11		 jmp	 SHORT $LN9@get_target
$LN13@get_target:

; 282  : 			{
; 283  : 				get_intercept_point (en, target, position);

  00380	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  00383	50		 push	 eax
  00384	8b 4d f8	 mov	 ecx, DWORD PTR _target$[ebp]
  00387	51		 push	 ecx
  00388	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0038b	52		 push	 edx
  0038c	e8 00 00 00 00	 call	 ?get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_intercept_point
$LN9@get_target:

; 284  : 			}
; 285  : 		}
; 286  : 		else

  00391	eb 0d		 jmp	 SHORT $LN7@get_target
$LN6@get_target:

; 287  : 			get_local_entity_target_point (target, position);

  00393	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  00396	50		 push	 eax
  00397	8b 4d f8	 mov	 ecx, DWORD PTR _target$[ebp]
  0039a	51		 push	 ecx
  0039b	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point
$LN7@get_target:

; 288  : 
; 289  : 		target_position_valid = TRUE;

  003a0	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _target_position_valid$[ebp], 1
$LN5@get_target:

; 290  : 	}
; 291  : 
; 292  : 	return (target_position_valid);

  003a7	8b 45 f4	 mov	 eax, DWORD PTR _target_position_valid$[ebp]

; 293  : }

  003aa	5f		 pop	 edi
  003ab	5e		 pop	 esi
  003ac	5b		 pop	 ebx
  003ad	8b e5		 mov	 esp, ebp
  003af	5d		 pop	 ebp
  003b0	c2 0c 00	 ret	 12			; 0000000cH
?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ENDP	; get_target_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z
_TEXT	SEGMENT
tv177 = -120						; size = 4
tv148 = -120						; size = 4
tv128 = -120						; size = 4
tv293 = -116						; size = 4
tv186 = -116						; size = 4
tv169 = -116						; size = 4
tv140 = -116						; size = 4
tv88 = -116						; size = 4
_target_motion_vector$ = -48				; size = 12
_target_position$ = -36					; size = 12
_weapon_position$ = -24					; size = 4
_target_move_distance$ = -20				; size = 4
_velocity_ratio$ = -16					; size = 4
_target_true_velocity$ = -12				; size = 4
_weapon_velocity$ = -8					; size = 4
_number_of_iterations$ = -4				; size = 4
_weapon_entity$ = 8					; size = 4
_target$ = 12						; size = 4
_intercept_point$ = 16					; size = 4
?get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z PROC	; get_intercept_point, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 153  : 	int
; 154  : 		number_of_iterations;
; 155  : 
; 156  : 	float
; 157  : 		weapon_velocity,
; 158  : 		target_true_velocity,
; 159  : 		velocity_ratio,
; 160  : 		target_move_distance;
; 161  : 
; 162  : 	vec3d
; 163  : 		*weapon_position,
; 164  : 		target_position,
; 165  : 		target_motion_vector;
; 166  : 
; 167  : 	ASSERT (weapon_entity);

  00009	83 7d 08 00	 cmp	 DWORD PTR _weapon_entity$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_interc
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  00014	83 c0 0f	 add	 eax, 15			; 0000000fH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MLKNJBBI@weapon_entity@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_interc:

; 168  : 
; 169  : 	ASSERT (target);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN5@get_interc
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  00032	83 c0 11	 add	 eax, 17			; 00000011H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_interc:

; 170  : 
; 171  : 	ASSERT (intercept_point);

  00045	83 7d 10 00	 cmp	 DWORD PTR _intercept_point$[ebp], 0
  00049	75 18		 jne	 SHORT $LN6@get_interc
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  00050	83 c0 13	 add	 eax, 19			; 00000013H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NMPFNFPN@intercept_point@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_interc:

; 172  : 
; 173  : 	//
; 174  : 	// set intercept point to the targets current position
; 175  : 	//
; 176  : 
; 177  : 	get_local_entity_target_point (target, intercept_point);

  00063	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  00066	50		 push	 eax
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 178  : 
; 179  : 	target_position = *intercept_point;

  00070	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	89 4d dc	 mov	 DWORD PTR _target_position$[ebp], ecx
  00078	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007b	89 55 e0	 mov	 DWORD PTR _target_position$[ebp+4], edx
  0007e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00081	89 45 e4	 mov	 DWORD PTR _target_position$[ebp+8], eax

; 180  : 	weapon_position = get_local_entity_vec3d_ptr (weapon_entity, VEC3D_TYPE_POSITION);

  00084	83 7d 08 00	 cmp	 DWORD PTR _weapon_entity$[ebp], 0
  00088	74 0a		 je	 SHORT $LN10@get_interc
  0008a	8b 45 08	 mov	 eax, DWORD PTR _weapon_entity$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	89 4d 8c	 mov	 DWORD PTR tv88[ebp], ecx
  00092	eb 21		 jmp	 SHORT $LN11@get_interc
$LN10@get_interc:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  0009a	83 c2 1c	 add	 edx, 28			; 0000001cH
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN11@get_interc:
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	85 c9		 test	 ecx, ecx
  000bc	74 09		 je	 SHORT $LN12@get_interc
  000be	c7 45 88 08 00
	00 00		 mov	 DWORD PTR tv128[ebp], 8
  000c5	eb 21		 jmp	 SHORT $LN13@get_interc
$LN12@get_interc:
  000c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  000cd	83 c2 1c	 add	 edx, 28			; 0000001cH
  000d0	52		 push	 edx
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e1	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN13@get_interc:
  000e8	6a 08		 push	 8
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _weapon_entity$[ebp]
  000ed	51		 push	 ecx
  000ee	6b 55 8c 60	 imul	 edx, DWORD PTR tv88[ebp], 96
  000f2	8b 45 88	 mov	 eax, DWORD PTR tv128[ebp]
  000f5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000fc	ff d1		 call	 ecx
  000fe	89 45 e8	 mov	 DWORD PTR _weapon_position$[ebp], eax

; 181  : 
; 182  : 
; 183  : 	//
; 184  : 	// use the weapon's forward velocity not true velocity as it is assumed that the weapon will
; 185  : 	// change course to intercept the target and the current motion vector may not be valid
; 186  : 	//
; 187  : 
; 188  : 	weapon_velocity = get_local_entity_float_value (weapon_entity, FLOAT_TYPE_VELOCITY);

  00101	83 7d 08 00	 cmp	 DWORD PTR _weapon_entity$[ebp], 0
  00105	74 0a		 je	 SHORT $LN14@get_interc
  00107	8b 45 08	 mov	 eax, DWORD PTR _weapon_entity$[ebp]
  0010a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010c	89 4d 8c	 mov	 DWORD PTR tv140[ebp], ecx
  0010f	eb 21		 jmp	 SHORT $LN15@get_interc
$LN14@get_interc:
  00111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  00117	83 c2 24	 add	 edx, 36			; 00000024H
  0011a	52		 push	 edx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012b	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN15@get_interc:
  00132	b9 01 00 00 00	 mov	 ecx, 1
  00137	85 c9		 test	 ecx, ecx
  00139	74 09		 je	 SHORT $LN16@get_interc
  0013b	c7 45 88 93 00
	00 00		 mov	 DWORD PTR tv148[ebp], 147 ; 00000093H
  00142	eb 21		 jmp	 SHORT $LN17@get_interc
$LN16@get_interc:
  00144	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  0014a	83 c2 24	 add	 edx, 36			; 00000024H
  0014d	52		 push	 edx
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015e	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv148[ebp], 0
$LN17@get_interc:
  00165	68 93 00 00 00	 push	 147			; 00000093H
  0016a	8b 4d 08	 mov	 ecx, DWORD PTR _weapon_entity$[ebp]
  0016d	51		 push	 ecx
  0016e	69 55 8c bc 02
	00 00		 imul	 edx, DWORD PTR tv140[ebp], 700
  00175	8b 45 88	 mov	 eax, DWORD PTR tv148[ebp]
  00178	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0017f	ff d1		 call	 ecx
  00181	d9 5d f8	 fstp	 DWORD PTR _weapon_velocity$[ebp]

; 189  : 
; 190  : 	target_true_velocity = get_local_entity_vec3d_magnitude (target, VEC3D_TYPE_MOTION_VECTOR);

  00184	6a 06		 push	 6
  00186	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  0018f	d9 5d f4	 fstp	 DWORD PTR _target_true_velocity$[ebp]

; 191  : 
; 192  : 	//
; 193  : 	// catch possible divide by zero (slow weapon or target)
; 194  : 	//
; 195  : 
; 196  : 	if ((weapon_velocity > 0.001) && (target_true_velocity > 0.001))

  00192	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _weapon_velocity$[ebp]
  00197	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0019f	0f 86 3b 01 00
	00		 jbe	 $LN3@get_interc
  001a5	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _target_true_velocity$[ebp]
  001aa	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001b2	0f 86 28 01 00
	00		 jbe	 $LN3@get_interc

; 197  : 	{
; 198  : 		if (target_true_velocity < weapon_velocity)

  001b8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _weapon_velocity$[ebp]
  001bd	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _target_true_velocity$[ebp]
  001c1	0f 86 19 01 00
	00		 jbe	 $LN3@get_interc

; 199  : 		{
; 200  : 			velocity_ratio = target_true_velocity / weapon_velocity;

  001c7	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _target_true_velocity$[ebp]
  001cc	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _weapon_velocity$[ebp]
  001d1	f3 0f 11 45 f0	 movss	 DWORD PTR _velocity_ratio$[ebp], xmm0

; 201  : 
; 202  : 			get_local_entity_vec3d (target, VEC3D_TYPE_MOTION_VECTOR, &target_motion_vector);

  001d6	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  001da	74 0a		 je	 SHORT $LN18@get_interc
  001dc	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	89 4d 8c	 mov	 DWORD PTR tv169[ebp], ecx
  001e4	eb 21		 jmp	 SHORT $LN19@get_interc
$LN18@get_interc:
  001e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  001ec	83 c2 32	 add	 edx, 50			; 00000032H
  001ef	52		 push	 edx
  001f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00200	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], 0
$LN19@get_interc:
  00207	b9 01 00 00 00	 mov	 ecx, 1
  0020c	85 c9		 test	 ecx, ecx
  0020e	74 09		 je	 SHORT $LN20@get_interc
  00210	c7 45 88 06 00
	00 00		 mov	 DWORD PTR tv177[ebp], 6
  00217	eb 21		 jmp	 SHORT $LN21@get_interc
$LN20@get_interc:
  00219	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z@4JA
  0021f	83 c2 32	 add	 edx, 50			; 00000032H
  00222	52		 push	 edx
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00233	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv177[ebp], 0
$LN21@get_interc:
  0023a	8d 4d d0	 lea	 ecx, DWORD PTR _target_motion_vector$[ebp]
  0023d	51		 push	 ecx
  0023e	6a 06		 push	 6
  00240	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  00243	52		 push	 edx
  00244	6b 45 8c 60	 imul	 eax, DWORD PTR tv169[ebp], 96
  00248	8b 4d 88	 mov	 ecx, DWORD PTR tv177[ebp]
  0024b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00252	ff d2		 call	 edx

; 203  : 
; 204  : 			normalise_3d_vector (&target_motion_vector);

  00254	8d 45 d0	 lea	 eax, DWORD PTR _target_motion_vector$[ebp]
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  0025d	dd d8		 fstp	 ST(0)

; 205  : 
; 206  : 			number_of_iterations = 3;

  0025f	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _number_of_iterations$[ebp], 3
$LN2@get_interc:

; 207  : 
; 208  : 			while (number_of_iterations--)

  00266	8b 45 fc	 mov	 eax, DWORD PTR _number_of_iterations$[ebp]
  00269	89 45 8c	 mov	 DWORD PTR tv186[ebp], eax
  0026c	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_iterations$[ebp]
  0026f	83 e9 01	 sub	 ecx, 1
  00272	89 4d fc	 mov	 DWORD PTR _number_of_iterations$[ebp], ecx
  00275	83 7d 8c 00	 cmp	 DWORD PTR tv186[ebp], 0
  00279	74 65		 je	 SHORT $LN3@get_interc

; 209  : 			{
; 210  : 				target_move_distance = get_3d_range (weapon_position, intercept_point) * velocity_ratio;

  0027b	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  0027e	50		 push	 eax
  0027f	8b 4d e8	 mov	 ecx, DWORD PTR _weapon_position$[ebp]
  00282	51		 push	 ecx
  00283	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00288	d9 5d 8c	 fstp	 DWORD PTR tv293[ebp]
  0028b	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv293[ebp]
  00290	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _velocity_ratio$[ebp]
  00295	f3 0f 11 45 ec	 movss	 DWORD PTR _target_move_distance$[ebp], xmm0

; 211  : 
; 212  : 				intercept_point->x = target_position.x + (target_motion_vector.x * target_move_distance);

  0029a	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _target_motion_vector$[ebp]
  0029f	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _target_move_distance$[ebp]
  002a4	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _target_position$[ebp]
  002a9	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  002ac	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 213  : 				intercept_point->y = target_position.y + (target_motion_vector.y * target_move_distance);

  002b0	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _target_motion_vector$[ebp+4]
  002b5	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _target_move_distance$[ebp]
  002ba	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _target_position$[ebp+4]
  002bf	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  002c2	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 214  : 				intercept_point->z = target_position.z + (target_motion_vector.z * target_move_distance);

  002c7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _target_motion_vector$[ebp+8]
  002cc	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _target_move_distance$[ebp]
  002d1	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _target_position$[ebp+8]
  002d6	8b 45 10	 mov	 eax, DWORD PTR _intercept_point$[ebp]
  002d9	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 215  : 			}

  002de	eb 86		 jmp	 SHORT $LN2@get_interc
$LN3@get_interc:

; 216  : 		}
; 217  : 	}
; 218  : }

  002e0	5f		 pop	 edi
  002e1	5e		 pop	 esi
  002e2	5b		 pop	 ebx
  002e3	8b e5		 mov	 esp, ebp
  002e5	5d		 pop	 ebp
  002e6	c2 0c 00	 ret	 12			; 0000000cH
?get_intercept_point@@YGXPAUENTITY@@0PAUVEC3D@@@Z ENDP	; get_intercept_point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z
_TEXT	SEGMENT
tv141 = -184						; size = 4
tv419 = -180						; size = 4
tv143 = -180						; size = 8
tv69 = -176						; size = 4
$T1 = -172						; size = 4
$T2 = -168						; size = 4
$T3 = -164						; size = 4
$T4 = -160						; size = 4
_next_pitch_index$5 = -92				; size = 4
_compensation_grid$6 = -88				; size = 32
_pitch_compensation$7 = -56				; size = 16
_use_pitch$8 = -40					; size = 4
_range_index$ = -36					; size = 4
_pitch_index$ = -32					; size = 4
_i$ = -28						; size = 4
_iterations$ = -24					; size = 4
_straight_pitch$ = -20					; size = 4
_drop_compensation$ = -16				; size = 4
_range_delta$ = -12					; size = 4
_range_error$ = -8					; size = 4
_pitch_delta$ = -4					; size = 4
_wpn_type$ = 8						; size = 4
_range$ = 12						; size = 4
_height_diff_or_pitch$ = 16				; size = 4
_aiming_pitch$ = 20					; size = 4
_time_of_flight$ = 24					; size = 4
_simplified$ = 28					; size = 4
_fixed_pitch$ = 32					; size = 4
?get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z PROC	; get_ballistic_pitch_deflection, COMDAT

; 1800 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1801 : 	float
; 1802 : 		pitch_delta,
; 1803 : 		range_error,
; 1804 : 		range_delta,
; 1805 : 		drop_compensation = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 f0	 movss	 DWORD PTR _drop_compensation$[ebp], xmm0

; 1806 : 		straight_pitch = fixed_pitch ? height_diff_or_pitch : -atan(height_diff_or_pitch / range);

  00014	83 7d 20 00	 cmp	 DWORD PTR _fixed_pitch$[ebp], 0
  00018	74 0f		 je	 SHORT $LN20@get_ballis
  0001a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _height_diff_or_pitch$[ebp]
  0001f	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv69[ebp], xmm0
  00027	eb 32		 jmp	 SHORT $LN21@get_ballis
$LN20@get_ballis:
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _height_diff_or_pitch$[ebp]
  0002e	f3 0f 5e 45 0c	 divss	 xmm0, DWORD PTR _range$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00039	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  0003e	d9 9d 4c ff ff
	ff		 fstp	 DWORD PTR tv419[ebp]
  00044	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv419[ebp]
  0004c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00053	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv69[ebp], xmm0
$LN21@get_ballis:
  0005b	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv69[ebp]
  00063	f3 0f 11 45 ec	 movss	 DWORD PTR _straight_pitch$[ebp], xmm0

; 1807 : 
; 1808 : 	int
; 1809 : 		iterations,
; 1810 : 		i,
; 1811 : 		pitch_index,
; 1812 : 		range_index;
; 1813 : 
; 1814 : 	ASSERT(time_of_flight);

  00068	83 7d 18 00	 cmp	 DWORD PTR _time_of_flight$[ebp], 0
  0006c	75 18		 jne	 SHORT $LN5@get_ballis
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA
  00073	83 c0 0e	 add	 eax, 14			; 0000000eH
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LPGILHMP@time_of_flight@
  00081	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_ballis:

; 1815 : 	ASSERT(aiming_pitch);

  00086	83 7d 14 00	 cmp	 DWORD PTR _aiming_pitch$[ebp], 0
  0008a	75 18		 jne	 SHORT $LN6@get_ballis
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA
  00091	83 c0 0f	 add	 eax, 15			; 0000000fH
  00094	50		 push	 eax
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CHFNMJJA@aiming_pitch@
  0009f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_ballis:

; 1816 : 
; 1817 : 	if (fixed_pitch)

  000a4	83 7d 20 00	 cmp	 DWORD PTR _fixed_pitch$[ebp], 0
  000a8	74 09		 je	 SHORT $LN7@get_ballis

; 1818 : 		iterations = 1;

  000aa	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _iterations$[ebp], 1
  000b1	eb 16		 jmp	 SHORT $LN10@get_ballis
$LN7@get_ballis:

; 1819 : 	else if (simplified)

  000b3	83 7d 1c 00	 cmp	 DWORD PTR _simplified$[ebp], 0
  000b7	74 09		 je	 SHORT $LN9@get_ballis

; 1820 : 		iterations = 3;

  000b9	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _iterations$[ebp], 3

; 1821 : 	else

  000c0	eb 07		 jmp	 SHORT $LN10@get_ballis
$LN9@get_ballis:

; 1822 : 		iterations = 5;

  000c2	c7 45 e8 05 00
	00 00		 mov	 DWORD PTR _iterations$[ebp], 5
$LN10@get_ballis:

; 1823 : 
; 1824 : 	if (!ballistics_table[wpn_type][0])

  000c9	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  000d0	b9 04 00 00 00	 mov	 ecx, 4
  000d5	6b d1 00	 imul	 edx, ecx, 0
  000d8	83 bc 10 00 00
	00 00 00	 cmp	 DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+edx], 0
  000e0	75 28		 jne	 SHORT $LN11@get_ballis

; 1825 : 	{
; 1826 : 		ASSERT(FALSE);

  000e2	b8 01 00 00 00	 mov	 eax, 1
  000e7	85 c0		 test	 eax, eax
  000e9	74 18		 je	 SHORT $LN12@get_ballis
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA
  000f0	83 c0 1a	 add	 eax, 26			; 0000001aH
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  000fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@get_ballis:

; 1827 : 		return FALSE;

  00103	33 c0		 xor	 eax, eax
  00105	e9 8a 05 00 00	 jmp	 $LN1@get_ballis
$LN11@get_ballis:

; 1828 : 	}
; 1829 : 
; 1830 : 	ASSERT(range >= 0.0);

  0010a	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0010f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00117	73 18		 jae	 SHORT $LN13@get_ballis
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA
  0011e	83 c0 1e	 add	 eax, 30			; 0000001eH
  00121	50		 push	 eax
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NLAIBEJP@range?5?$DO?$DN?50?40@
  0012c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@get_ballis:

; 1831 : 
; 1832 : 	if (range <= 0.1)

  00131	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00136	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  0013e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00142	72 20		 jb	 SHORT $LN14@get_ballis

; 1833 : 	{
; 1834 : 		*aiming_pitch = straight_pitch;

  00144	8b 45 14	 mov	 eax, DWORD PTR _aiming_pitch$[ebp]
  00147	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _straight_pitch$[ebp]
  0014c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1835 : 		*time_of_flight = 0.0;

  00150	8b 45 18	 mov	 eax, DWORD PTR _time_of_flight$[ebp]
  00153	0f 57 c0	 xorps	 xmm0, xmm0
  00156	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1836 : 		return TRUE;

  0015a	b8 01 00 00 00	 mov	 eax, 1
  0015f	e9 30 05 00 00	 jmp	 $LN1@get_ballis
$LN14@get_ballis:

; 1837 : 	}
; 1838 : 
; 1839 : 	range = bound(range, 0.01, weapon_database[wpn_type].max_range);

  00164	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00169	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f847ae147ae147b
  00171	66 0f 2f c8	 comisd	 xmm1, xmm0
  00175	76 12		 jbe	 SHORT $LN24@get_ballis
  00177	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0017f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv143[ebp], xmm0
  00187	eb 4b		 jmp	 SHORT $LN25@get_ballis
$LN24@get_ballis:
  00189	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 224
  00190	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _range$[ebp]
  00195	0f 2f 80 90 00
	00 00		 comiss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+144]
  0019c	76 19		 jbe	 SHORT $LN22@get_ballis
  0019e	69 4d 08 e0 00
	00 00		 imul	 ecx, DWORD PTR _wpn_type$[ebp], 224
  001a5	f3 0f 10 81 90
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+144]
  001ad	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv141[ebp], xmm0
  001b5	eb 0d		 jmp	 SHORT $LN23@get_ballis
$LN22@get_ballis:
  001b7	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _range$[ebp]
  001bc	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv141[ebp], xmm0
$LN23@get_ballis:
  001c4	f3 0f 5a 85 48
	ff ff ff	 cvtss2sd xmm0, DWORD PTR tv141[ebp]
  001cc	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv143[ebp], xmm0
$LN25@get_ballis:
  001d4	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv143[ebp]
  001dc	f3 0f 11 45 0c	 movss	 DWORD PTR _range$[ebp], xmm0

; 1840 : 	range_index = (int)(range / RANGE_STEP);

  001e1	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  001e6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4034000000000000
  001ee	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001f2	89 45 dc	 mov	 DWORD PTR _range_index$[ebp], eax

; 1841 : 	range_error = range - (range_index * RANGE_STEP);

  001f5	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  001fa	f2 0f 2a 4d dc	 cvtsi2sd xmm1, DWORD PTR _range_index$[ebp]
  001ff	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4034000000000000
  00207	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0020b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020f	f3 0f 11 45 f8	 movss	 DWORD PTR _range_error$[ebp], xmm0

; 1842 : 	range_delta = 1.0 - (range_error / RANGE_STEP);   // normalize to [0..1]

  00214	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _range_error$[ebp]
  00219	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4034000000000000
  00221	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00229	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0022d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00231	f3 0f 11 45 f4	 movss	 DWORD PTR _range_delta$[ebp], xmm0

; 1843 : 
; 1844 : 	#if DEBUG_MODULE
; 1845 : 	debug_log("range: %.0f (%.0f) closeness: %.02f, height_difference: %.0f", range, range_index*RANGE_STEP, range_delta, height_diff_or_pitch);
; 1846 : 	#endif
; 1847 : 
; 1848 : 	// refine drop_compensation - do it several times because as we adjust
; 1849 : 	// cannon pitch we have to use a different ballistics table.  Do it a few
; 1850 : 	// times so that it stabalizes somewhat
; 1851 : 	for (i = 0; i < iterations; i++)

  00236	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0023d	eb 09		 jmp	 SHORT $LN4@get_ballis
$LN2@get_ballis:
  0023f	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  00242	83 c0 01	 add	 eax, 1
  00245	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@get_ballis:
  00248	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0024b	3b 45 e8	 cmp	 eax, DWORD PTR _iterations$[ebp]
  0024e	0f 8d cf 00 00
	00		 jge	 $LN3@get_ballis

; 1852 : 	{
; 1853 : 		float use_pitch = min(straight_pitch + drop_compensation, rad(90.0f));

  00254	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0025c	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR $T4[ebp], xmm0
  00264	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _straight_pitch$[ebp]
  00269	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _drop_compensation$[ebp]
  0026e	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  00276	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0027c	50		 push	 eax
  0027d	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00283	51		 push	 ecx
  00284	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00289	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0028d	f3 0f 11 45 d8	 movss	 DWORD PTR _use_pitch$8[ebp], xmm0

; 1854 : 
; 1855 : 		pitch_index = get_floor_pitch_index(use_pitch, &pitch_delta);

  00292	8d 45 fc	 lea	 eax, DWORD PTR _pitch_delta$[ebp]
  00295	50		 push	 eax
  00296	51		 push	 ecx
  00297	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _use_pitch$8[ebp]
  0029c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a1	e8 00 00 00 00	 call	 ?get_floor_pitch_index@@YGHMPAM@Z ; get_floor_pitch_index
  002a6	89 45 e0	 mov	 DWORD PTR _pitch_index$[ebp], eax

; 1856 : 		ASSERT(pitch_index >= 0 && pitch_index < TOTAL_PITCH_INDICES);

  002a9	83 7d e0 00	 cmp	 DWORD PTR _pitch_index$[ebp], 0
  002ad	7c 06		 jl	 SHORT $LN16@get_ballis
  002af	83 7d e0 35	 cmp	 DWORD PTR _pitch_index$[ebp], 53 ; 00000035H
  002b3	7c 18		 jl	 SHORT $LN15@get_ballis
$LN16@get_ballis:
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z@4JA
  002ba	83 c0 38	 add	 eax, 56			; 00000038H
  002bd	50		 push	 eax
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NIBCJOIC@pitch_index?5?$DO?$DN?50?5?$CG?$CG?5pitch_index@
  002c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@get_ballis:

; 1857 : 		drop_compensation = ballistics_table[wpn_type][pitch_index][range_index].drop_angle;

  002cd	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  002d4	8b 4d e0	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  002d7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  002de	8b 45 dc	 mov	 eax, DWORD PTR _range_index$[ebp]
  002e1	f3 0f 10 04 c2	 movss	 xmm0, DWORD PTR [edx+eax*8]
  002e6	f3 0f 11 45 f0	 movss	 DWORD PTR _drop_compensation$[ebp], xmm0

; 1858 : 
; 1859 : 		if (drop_compensation > rad(45.0))

  002eb	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _drop_compensation$[ebp]
  002f0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe921fb51000000
  002f8	76 07		 jbe	 SHORT $LN17@get_ballis

; 1860 : 			return FALSE;

  002fa	33 c0		 xor	 eax, eax
  002fc	e9 93 03 00 00	 jmp	 $LN1@get_ballis
$LN17@get_ballis:

; 1861 : 
; 1862 : 		*time_of_flight = ballistics_table[wpn_type][pitch_index][range_index].flight_time;

  00301	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  00308	8b 4d e0	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  0030b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  00312	8b 45 18	 mov	 eax, DWORD PTR _time_of_flight$[ebp]
  00315	8b 4d dc	 mov	 ecx, DWORD PTR _range_index$[ebp]
  00318	8b 54 ca 04	 mov	 edx, DWORD PTR [edx+ecx*8+4]
  0031c	89 10		 mov	 DWORD PTR [eax], edx

; 1863 : 	}

  0031e	e9 1c ff ff ff	 jmp	 $LN2@get_ballis
$LN3@get_ballis:

; 1864 : 
; 1865 : 	// average between next pitch and range:
; 1866 : 	if (!simplified)

  00323	83 7d 1c 00	 cmp	 DWORD PTR _simplified$[ebp], 0
  00327	0f 85 51 03 00
	00		 jne	 $LN18@get_ballis

; 1867 : 	{
; 1868 : 		ballistics_data
; 1869 : 			pitch_compensation[2],
; 1870 : 			compensation_grid[2][2];
; 1871 : 
; 1872 : 		int next_pitch_index = min(pitch_index + 1, TOTAL_PITCH_INDICES-1);

  0032d	c7 85 58 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR $T2[ebp], 52	; 00000034H
  00337	8b 45 e0	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  0033a	83 c0 01	 add	 eax, 1
  0033d	89 85 54 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00343	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00349	51		 push	 ecx
  0034a	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00350	52		 push	 edx
  00351	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00356	8b 00		 mov	 eax, DWORD PTR [eax]
  00358	89 45 a4	 mov	 DWORD PTR _next_pitch_index$5[ebp], eax

; 1873 : 
; 1874 : 		// first average the next ranges
; 1875 : 		compensation_grid[0][0].drop_angle = drop_compensation;

  0035b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00360	6b c8 00	 imul	 ecx, eax, 0
  00363	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  00367	b8 08 00 00 00	 mov	 eax, 8
  0036c	6b c8 00	 imul	 ecx, eax, 0
  0036f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _drop_compensation$[ebp]
  00374	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 1876 : 		compensation_grid[0][0].flight_time = *time_of_flight;

  00379	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0037e	6b c8 00	 imul	 ecx, eax, 0
  00381	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  00385	b8 08 00 00 00	 mov	 eax, 8
  0038a	6b c8 00	 imul	 ecx, eax, 0
  0038d	8b 45 18	 mov	 eax, DWORD PTR _time_of_flight$[ebp]
  00390	8b 00		 mov	 eax, DWORD PTR [eax]
  00392	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 1877 : 
; 1878 : 		compensation_grid[0][1].drop_angle = ballistics_table[wpn_type][pitch_index][range_index+1].drop_angle;

  00396	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  0039d	8b 4d e0	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  003a0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  003a7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003ac	6b c8 00	 imul	 ecx, eax, 0
  003af	8d 44 0d a8	 lea	 eax, DWORD PTR _compensation_grid$6[ebp+ecx]
  003b3	b9 08 00 00 00	 mov	 ecx, 8
  003b8	c1 e1 00	 shl	 ecx, 0
  003bb	8b 75 dc	 mov	 esi, DWORD PTR _range_index$[ebp]
  003be	8b 54 f2 08	 mov	 edx, DWORD PTR [edx+esi*8+8]
  003c2	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 1879 : 		compensation_grid[0][1].flight_time = ballistics_table[wpn_type][pitch_index][range_index+1].flight_time;

  003c5	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  003cc	8b 4d e0	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  003cf	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  003d6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003db	6b c8 00	 imul	 ecx, eax, 0
  003de	8d 44 0d a8	 lea	 eax, DWORD PTR _compensation_grid$6[ebp+ecx]
  003e2	b9 08 00 00 00	 mov	 ecx, 8
  003e7	c1 e1 00	 shl	 ecx, 0
  003ea	8b 75 dc	 mov	 esi, DWORD PTR _range_index$[ebp]
  003ed	8b 54 f2 0c	 mov	 edx, DWORD PTR [edx+esi*8+12]
  003f1	89 54 08 04	 mov	 DWORD PTR [eax+ecx+4], edx

; 1880 : 
; 1881 : 		compensation_grid[1][0].drop_angle = ballistics_table[wpn_type][next_pitch_index][range_index].drop_angle;

  003f5	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  003fc	8b 4d a4	 mov	 ecx, DWORD PTR _next_pitch_index$5[ebp]
  003ff	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  00406	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0040b	c1 e0 00	 shl	 eax, 0
  0040e	8d 4c 05 a8	 lea	 ecx, DWORD PTR _compensation_grid$6[ebp+eax]
  00412	b8 08 00 00 00	 mov	 eax, 8
  00417	6b c0 00	 imul	 eax, eax, 0
  0041a	8b 75 dc	 mov	 esi, DWORD PTR _range_index$[ebp]
  0041d	8b 14 f2	 mov	 edx, DWORD PTR [edx+esi*8]
  00420	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1882 : 		compensation_grid[1][0].flight_time = ballistics_table[wpn_type][next_pitch_index][range_index].flight_time;

  00423	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  0042a	8b 4d a4	 mov	 ecx, DWORD PTR _next_pitch_index$5[ebp]
  0042d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  00434	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00439	c1 e0 00	 shl	 eax, 0
  0043c	8d 4c 05 a8	 lea	 ecx, DWORD PTR _compensation_grid$6[ebp+eax]
  00440	b8 08 00 00 00	 mov	 eax, 8
  00445	6b c0 00	 imul	 eax, eax, 0
  00448	8b 75 dc	 mov	 esi, DWORD PTR _range_index$[ebp]
  0044b	8b 54 f2 04	 mov	 edx, DWORD PTR [edx+esi*8+4]
  0044f	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1883 : 
; 1884 : 		compensation_grid[1][1].drop_angle = ballistics_table[wpn_type][next_pitch_index][range_index+1].drop_angle;

  00453	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  0045a	8b 4d a4	 mov	 ecx, DWORD PTR _next_pitch_index$5[ebp]
  0045d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  00464	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00469	c1 e0 00	 shl	 eax, 0
  0046c	8d 4c 05 a8	 lea	 ecx, DWORD PTR _compensation_grid$6[ebp+eax]
  00470	b8 08 00 00 00	 mov	 eax, 8
  00475	c1 e0 00	 shl	 eax, 0
  00478	8b 75 dc	 mov	 esi, DWORD PTR _range_index$[ebp]
  0047b	8b 54 f2 08	 mov	 edx, DWORD PTR [edx+esi*8+8]
  0047f	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1885 : 		compensation_grid[1][1].flight_time = ballistics_table[wpn_type][next_pitch_index][range_index+1].flight_time;

  00482	69 45 08 dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  00489	8b 4d a4	 mov	 ecx, DWORD PTR _next_pitch_index$5[ebp]
  0048c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  00493	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00498	c1 e0 00	 shl	 eax, 0
  0049b	8d 4c 05 a8	 lea	 ecx, DWORD PTR _compensation_grid$6[ebp+eax]
  0049f	b8 08 00 00 00	 mov	 eax, 8
  004a4	c1 e0 00	 shl	 eax, 0
  004a7	8b 75 dc	 mov	 esi, DWORD PTR _range_index$[ebp]
  004aa	8b 54 f2 0c	 mov	 edx, DWORD PTR [edx+esi*8+12]
  004ae	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1886 : 
; 1887 : 		// then average oover next pitch
; 1888 : 		pitch_compensation[0].drop_angle = (pitch_delta * compensation_grid[0][0].drop_angle) + ((1 - pitch_delta) * compensation_grid[1][0].drop_angle);

  004b2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004b7	6b c8 00	 imul	 ecx, eax, 0
  004ba	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  004be	b8 08 00 00 00	 mov	 eax, 8
  004c3	6b c8 00	 imul	 ecx, eax, 0
  004c6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch_delta$[ebp]
  004cb	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  004d0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  004d8	f3 0f 5c 4d fc	 subss	 xmm1, DWORD PTR _pitch_delta$[ebp]
  004dd	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  004e2	c1 e2 00	 shl	 edx, 0
  004e5	8d 44 15 a8	 lea	 eax, DWORD PTR _compensation_grid$6[ebp+edx]
  004e9	b9 08 00 00 00	 mov	 ecx, 8
  004ee	6b d1 00	 imul	 edx, ecx, 0
  004f1	f3 0f 59 0c 10	 mulss	 xmm1, DWORD PTR [eax+edx]
  004f6	f3 0f 58 c1	 addss	 xmm0, xmm1
  004fa	b8 08 00 00 00	 mov	 eax, 8
  004ff	6b c8 00	 imul	 ecx, eax, 0
  00502	f3 0f 11 44 0d
	c8		 movss	 DWORD PTR _pitch_compensation$7[ebp+ecx], xmm0

; 1889 : 		pitch_compensation[0].flight_time = (pitch_delta * compensation_grid[0][0].flight_time) + ((1 - pitch_delta) * compensation_grid[1][0].flight_time);

  00508	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0050d	6b c8 00	 imul	 ecx, eax, 0
  00510	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  00514	b8 08 00 00 00	 mov	 eax, 8
  00519	6b c8 00	 imul	 ecx, eax, 0
  0051c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch_delta$[ebp]
  00521	f3 0f 59 44 0a
	04		 mulss	 xmm0, DWORD PTR [edx+ecx+4]
  00527	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0052f	f3 0f 5c 4d fc	 subss	 xmm1, DWORD PTR _pitch_delta$[ebp]
  00534	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00539	c1 e2 00	 shl	 edx, 0
  0053c	8d 44 15 a8	 lea	 eax, DWORD PTR _compensation_grid$6[ebp+edx]
  00540	b9 08 00 00 00	 mov	 ecx, 8
  00545	6b d1 00	 imul	 edx, ecx, 0
  00548	f3 0f 59 4c 10
	04		 mulss	 xmm1, DWORD PTR [eax+edx+4]
  0054e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00552	b8 08 00 00 00	 mov	 eax, 8
  00557	6b c8 00	 imul	 ecx, eax, 0
  0055a	f3 0f 11 44 0d
	cc		 movss	 DWORD PTR _pitch_compensation$7[ebp+ecx+4], xmm0

; 1890 : 
; 1891 : 		pitch_compensation[1].drop_angle = (pitch_delta * compensation_grid[0][1].drop_angle) + ((1 - pitch_delta) * compensation_grid[1][1].drop_angle);

  00560	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00565	6b c8 00	 imul	 ecx, eax, 0
  00568	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  0056c	b8 08 00 00 00	 mov	 eax, 8
  00571	c1 e0 00	 shl	 eax, 0
  00574	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch_delta$[ebp]
  00579	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0057e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00586	f3 0f 5c 4d fc	 subss	 xmm1, DWORD PTR _pitch_delta$[ebp]
  0058b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00590	c1 e1 00	 shl	 ecx, 0
  00593	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  00597	b8 08 00 00 00	 mov	 eax, 8
  0059c	c1 e0 00	 shl	 eax, 0
  0059f	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  005a4	f3 0f 58 c1	 addss	 xmm0, xmm1
  005a8	b9 08 00 00 00	 mov	 ecx, 8
  005ad	c1 e1 00	 shl	 ecx, 0
  005b0	f3 0f 11 44 0d
	c8		 movss	 DWORD PTR _pitch_compensation$7[ebp+ecx], xmm0

; 1892 : 		pitch_compensation[1].flight_time = (pitch_delta * compensation_grid[0][1].flight_time) + ((1 - pitch_delta) * compensation_grid[1][1].flight_time);

  005b6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005bb	6b c8 00	 imul	 ecx, eax, 0
  005be	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  005c2	b8 08 00 00 00	 mov	 eax, 8
  005c7	c1 e0 00	 shl	 eax, 0
  005ca	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch_delta$[ebp]
  005cf	f3 0f 59 44 02
	04		 mulss	 xmm0, DWORD PTR [edx+eax+4]
  005d5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  005dd	f3 0f 5c 4d fc	 subss	 xmm1, DWORD PTR _pitch_delta$[ebp]
  005e2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005e7	c1 e1 00	 shl	 ecx, 0
  005ea	8d 54 0d a8	 lea	 edx, DWORD PTR _compensation_grid$6[ebp+ecx]
  005ee	b8 08 00 00 00	 mov	 eax, 8
  005f3	c1 e0 00	 shl	 eax, 0
  005f6	f3 0f 59 4c 02
	04		 mulss	 xmm1, DWORD PTR [edx+eax+4]
  005fc	f3 0f 58 c1	 addss	 xmm0, xmm1
  00600	b9 08 00 00 00	 mov	 ecx, 8
  00605	c1 e1 00	 shl	 ecx, 0
  00608	f3 0f 11 44 0d
	cc		 movss	 DWORD PTR _pitch_compensation$7[ebp+ecx+4], xmm0

; 1893 : 
; 1894 : 		// and finally get a total
; 1895 : 		drop_compensation = (range_delta * pitch_compensation[0].drop_angle) + ((1 - range_delta) * pitch_compensation[1].drop_angle);

  0060e	b8 08 00 00 00	 mov	 eax, 8
  00613	6b c8 00	 imul	 ecx, eax, 0
  00616	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _range_delta$[ebp]
  0061b	f3 0f 59 44 0d
	c8		 mulss	 xmm0, DWORD PTR _pitch_compensation$7[ebp+ecx]
  00621	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00629	f3 0f 5c 4d f4	 subss	 xmm1, DWORD PTR _range_delta$[ebp]
  0062e	ba 08 00 00 00	 mov	 edx, 8
  00633	c1 e2 00	 shl	 edx, 0
  00636	f3 0f 59 4c 15
	c8		 mulss	 xmm1, DWORD PTR _pitch_compensation$7[ebp+edx]
  0063c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00640	f3 0f 11 45 f0	 movss	 DWORD PTR _drop_compensation$[ebp], xmm0

; 1896 : 		*time_of_flight = (range_delta * pitch_compensation[0].flight_time) + ((1 - range_delta) * pitch_compensation[1].flight_time);

  00645	b8 08 00 00 00	 mov	 eax, 8
  0064a	6b c8 00	 imul	 ecx, eax, 0
  0064d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _range_delta$[ebp]
  00652	f3 0f 59 44 0d
	cc		 mulss	 xmm0, DWORD PTR _pitch_compensation$7[ebp+ecx+4]
  00658	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00660	f3 0f 5c 4d f4	 subss	 xmm1, DWORD PTR _range_delta$[ebp]
  00665	ba 08 00 00 00	 mov	 edx, 8
  0066a	c1 e2 00	 shl	 edx, 0
  0066d	f3 0f 59 4c 15
	cc		 mulss	 xmm1, DWORD PTR _pitch_compensation$7[ebp+edx+4]
  00673	f3 0f 58 c1	 addss	 xmm0, xmm1
  00677	8b 45 18	 mov	 eax, DWORD PTR _time_of_flight$[ebp]
  0067a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN18@get_ballis:

; 1897 : 
; 1898 : 		#if DEBUG_MODULE
; 1899 : 		debug_log("average over drop: (%.3f, %.3f, %.3f, %.3f) result: %.3f",
; 1900 : 			deg(compensation_grid[0][0].drop_angle), deg(compensation_grid[0][1].drop_angle),
; 1901 : 			deg(compensation_grid[1][0].drop_angle), deg(compensation_grid[1][1].drop_angle),
; 1902 : 			deg(drop_compensation));
; 1903 : 		#endif
; 1904 : 	}
; 1905 : 
; 1906 : 	*aiming_pitch = straight_pitch + drop_compensation;

  0067e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _straight_pitch$[ebp]
  00683	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _drop_compensation$[ebp]
  00688	8b 45 14	 mov	 eax, DWORD PTR _aiming_pitch$[ebp]
  0068b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1907 : 
; 1908 : 	return TRUE;

  0068f	b8 01 00 00 00	 mov	 eax, 1
$LN1@get_ballis:

; 1909 : }

  00694	5f		 pop	 edi
  00695	5e		 pop	 esi
  00696	5b		 pop	 ebx
  00697	8b e5		 mov	 esp, ebp
  00699	5d		 pop	 ebp
  0069a	c2 1c 00	 ret	 28			; 0000001cH
?get_ballistic_pitch_deflection@@YGHHMMPAM0HH@Z ENDP	; get_ballistic_pitch_deflection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?delete_ballistics_tables@@YGXXZ
_TEXT	SEGMENT
_pitch_index$ = -8					; size = 4
_wpn_type$ = -4						; size = 4
?delete_ballistics_tables@@YGXXZ PROC			; delete_ballistics_tables, COMDAT

; 1777 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1778 : 	entity_sub_types wpn_type;
; 1779 : 	unsigned pitch_index;
; 1780 : 
; 1781 : 	for (wpn_type = 1; wpn_type <= LAST_WEAPON; wpn_type++)

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _wpn_type$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@delete_bal
$LN2@delete_bal:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _wpn_type$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _wpn_type$[ebp], eax
$LN4@delete_bal:
  0001b	83 7d fc 23	 cmp	 DWORD PTR _wpn_type$[ebp], 35 ; 00000023H
  0001f	7f 6c		 jg	 SHORT $LN1@delete_bal

; 1782 : 		if (weapon_database[wpn_type].aiming_type == WEAPON_AIMING_TYPE_CALC_LEAD_AND_BALLISTIC)

  00021	69 45 fc e0 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 224
  00028	83 b8 1c 00 00
	00 03		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+28], 3
  0002f	75 5a		 jne	 SHORT $LN8@delete_bal

; 1783 : 		{
; 1784 : 			for(pitch_index = 0; pitch_index < TOTAL_PITCH_INDICES; pitch_index++)

  00031	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pitch_index$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN7@delete_bal
$LN5@delete_bal:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _pitch_index$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 f8	 mov	 DWORD PTR _pitch_index$[ebp], eax
$LN7@delete_bal:
  00043	83 7d f8 35	 cmp	 DWORD PTR _pitch_index$[ebp], 53 ; 00000035H
  00047	73 42		 jae	 SHORT $LN8@delete_bal

; 1785 : 			{
; 1786 : 				if (ballistics_table[wpn_type][pitch_index])

  00049	69 45 fc dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  00053	83 bc 88 00 00
	00 00 00	 cmp	 DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4], 0
  0005b	74 17		 je	 SHORT $LN9@delete_bal

; 1787 : 					safe_free(ballistics_table[wpn_type][pitch_index]);

  0005d	69 45 fc dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  00067	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN9@delete_bal:

; 1788 : 				ballistics_table[wpn_type][pitch_index] = NULL;

  00074	69 45 fc dc 00
	00 00		 imul	 eax, DWORD PTR _wpn_type$[ebp], 220
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _pitch_index$[ebp]
  0007e	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?ballistics_table@@3PAY0DH@PAUballistics_data@@A[eax+ecx*4], 0

; 1789 : 			}

  00089	eb af		 jmp	 SHORT $LN5@delete_bal
$LN8@delete_bal:

; 1790 : 		}
; 1791 : }

  0008b	eb 85		 jmp	 SHORT $LN2@delete_bal
$LN1@delete_bal:
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?delete_ballistics_tables@@YGXXZ ENDP			; delete_ballistics_tables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?generate_ballistics_tables@@YGXXZ
_TEXT	SEGMENT
_write_file$ = -176					; size = 4
_wpn_type$ = -172					; size = 4
_wpn$ = -168						; size = 168
?generate_ballistics_tables@@YGXXZ PROC			; generate_ballistics_tables, COMDAT

; 1735 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1736 : 	weapon
; 1737 : 		wpn;
; 1738 : 
; 1739 : 	entity_sub_types
; 1740 : 		wpn_type;
; 1741 : 
; 1742 : 	FILE*
; 1743 : 		write_file = NULL;

  0000c	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _write_file$[ebp], 0

; 1744 : 
; 1745 : 	write_file = fopen("ballistics-data.txt", "w");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PCAMNAHC@ballistics?9data?4txt@
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00026	83 c4 08	 add	 esp, 8
  00029	89 85 50 ff ff
	ff		 mov	 DWORD PTR _write_file$[ebp], eax

; 1746 : 
; 1747 : 	fputs("Note: this file only lists ballistics data generated from the currently used GWUT File\n"

  0002f	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _write_file$[ebp]
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0OJ@KEKGJIFA@Note?3?5this?5file?5only?5lists?5ball@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00041	83 c4 08	 add	 esp, 8

; 1748 : 		  "Changing the values will have no effect, change the GWUT file to see change\n"
; 1749 : 		  "This file can be used to help getting good values for the GWUT file\n\n", write_file);
; 1750 : 
; 1751 : 	for (wpn_type = 1; wpn_type <= LAST_WEAPON; wpn_type++)

  00044	c7 85 54 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _wpn_type$[ebp], 1
  0004e	eb 0f		 jmp	 SHORT $LN4@generate_b
$LN2@generate_b:
  00050	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _wpn_type$[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 85 54 ff ff
	ff		 mov	 DWORD PTR _wpn_type$[ebp], eax
$LN4@generate_b:
  0005f	83 bd 54 ff ff
	ff 23		 cmp	 DWORD PTR _wpn_type$[ebp], 35 ; 00000023H
  00066	0f 8f d0 00 00
	00		 jg	 $LN3@generate_b

; 1752 : 	{
; 1753 : 		if (weapon_database[wpn_type].aiming_type == WEAPON_AIMING_TYPE_CALC_LEAD_AND_BALLISTIC)

  0006c	69 85 54 ff ff
	ff e0 00 00 00	 imul	 eax, DWORD PTR _wpn_type$[ebp], 224
  00076	83 b8 1c 00 00
	00 03		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+28], 3
  0007d	0f 85 9b 00 00
	00		 jne	 $LN5@generate_b

; 1754 : 		{
; 1755 : 			if (write_file)

  00083	83 bd 50 ff ff
	ff 00		 cmp	 DWORD PTR _write_file$[ebp], 0
  0008a	74 73		 je	 SHORT $LN6@generate_b

; 1756 : 			{
; 1757 : 				fprintf(write_file, "\n%s   max_range: %.0f m, muzzle velocity: %.0f m/s, drag: %.2f\n",

  0008c	69 85 54 ff ff
	ff e0 00 00 00	 imul	 eax, DWORD PTR _wpn_type$[ebp], 224
  00096	f3 0f 5a 80 d8
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+216]
  0009e	83 ec 08	 sub	 esp, 8
  000a1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a6	69 8d 54 ff ff
	ff e0 00 00 00	 imul	 ecx, DWORD PTR _wpn_type$[ebp], 224
  000b0	f3 0f 5a 81 a4
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+164]
  000b8	83 ec 08	 sub	 esp, 8
  000bb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000c0	69 95 54 ff ff
	ff e0 00 00 00	 imul	 edx, DWORD PTR _wpn_type$[ebp], 224
  000ca	f3 0f 5a 82 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[edx+144]
  000d2	83 ec 08	 sub	 esp, 8
  000d5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000da	69 85 54 ff ff
	ff e0 00 00 00	 imul	 eax, DWORD PTR _wpn_type$[ebp], 224
  000e4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax]
  000ea	51		 push	 ecx
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BKLOADPN@?6?$CFs?5?5?5max_range?3?5?$CF?40f?5m?0?5muzzle@
  000f0	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _write_file$[ebp]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _fprintf
  000fc	83 c4 24	 add	 esp, 36			; 00000024H
$LN6@generate_b:

; 1758 : 					weapon_database[wpn_type].full_name,
; 1759 : 					weapon_database[wpn_type].max_range,
; 1760 : 					weapon_database[wpn_type].muzzle_velocity,
; 1761 : 					weapon_database[wpn_type].drag_factor);
; 1762 : 			}
; 1763 : 
; 1764 : 			wpn.mob.sub_type = wpn_type;

  000ff	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _wpn_type$[ebp]
  00105	89 85 58 ff ff
	ff		 mov	 DWORD PTR _wpn$[ebp], eax

; 1765 : 			calculate_projectory(&wpn, write_file);

  0010b	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _write_file$[ebp]
  00111	50		 push	 eax
  00112	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _wpn$[ebp]
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 ?calculate_projectory@@YGXPAUWEAPON@@PAU_iobuf@@@Z ; calculate_projectory
$LN5@generate_b:

; 1766 : 		}
; 1767 : 
; 1768 : 		if (write_file)

  0011e	83 bd 50 ff ff
	ff 00		 cmp	 DWORD PTR _write_file$[ebp], 0
  00125	74 10		 je	 SHORT $LN7@generate_b

; 1769 : 			fflush(write_file);

  00127	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _write_file$[ebp]
  0012d	50		 push	 eax
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  00134	83 c4 04	 add	 esp, 4
$LN7@generate_b:

; 1770 : 	}

  00137	e9 14 ff ff ff	 jmp	 $LN2@generate_b
$LN3@generate_b:

; 1771 : 
; 1772 : 	if (write_file)

  0013c	83 bd 50 ff ff
	ff 00		 cmp	 DWORD PTR _write_file$[ebp], 0
  00143	74 10		 je	 SHORT $LN8@generate_b

; 1773 : 		fclose(write_file);

  00145	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _write_file$[ebp]
  0014b	50		 push	 eax
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00152	83 c4 04	 add	 esp, 4
$LN8@generate_b:

; 1774 : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
?generate_ballistics_tables@@YGXXZ ENDP			; generate_ballistics_tables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_move.c
;	COMDAT ?weapon_movement@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv906 = -200						; size = 4
tv759 = -200						; size = 4
tv722 = -200						; size = 4
tv693 = -200						; size = 4
tv605 = -200						; size = 4
tv584 = -200						; size = 4
tv555 = -200						; size = 4
tv407 = -200						; size = 4
tv382 = -200						; size = 4
tv350 = -200						; size = 4
tv325 = -200						; size = 4
tv296 = -200						; size = 4
tv271 = -200						; size = 4
tv243 = -200						; size = 4
tv1411 = -196						; size = 4
tv1403 = -196						; size = 4
tv1378 = -196						; size = 4
tv1370 = -196						; size = 4
tv898 = -196						; size = 4
tv751 = -196						; size = 4
tv714 = -196						; size = 4
tv685 = -196						; size = 4
tv598 = -196						; size = 4
tv577 = -196						; size = 4
tv548 = -196						; size = 4
tv400 = -196						; size = 4
tv375 = -196						; size = 4
tv343 = -196						; size = 4
tv318 = -196						; size = 4
tv289 = -196						; size = 4
tv264 = -196						; size = 4
tv236 = -196						; size = 4
tv177 = -196						; size = 4
$T1 = -192						; size = 4
_weapon$2 = -124					; size = 4
_do_guidance_source_check$3 = -120			; size = 4
_hit_target$ = -116					; size = 4
_test_point$ = -112					; size = 12
_face_normal$ = -100					; size = 12
_intercept_point$ = -88					; size = 12
_new_position$ = -76					; size = 12
_old_position$ = -64					; size = 12
_heading$ = -52						; size = 4
_total_cruise_time$ = -48				; size = 4
_cruise_time_error$ = -44				; size = 4
_dz$ = -40						; size = 4
_dy$ = -36						; size = 4
_dx$ = -32						; size = 4
_terrain_class$ = -28					; size = 4
_hit_ground$ = -24					; size = 4
_high_precision_collision$ = -20			; size = 4
_intercept_point_valid$ = -16				; size = 4
_seed$ = -12						; size = 4
_i$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?weapon_movement@@YGXPAUENTITY@@@Z PROC			; weapon_movement, COMDAT

; 913  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 914  : 	weapon
; 915  : 		*raw;
; 916  : 
; 917  : 	int
; 918  : 		i,
; 919  : 		seed,
; 920  : 		intercept_point_valid,
; 921  : 		high_precision_collision,
; 922  : 		hit_ground;
; 923  : 
; 924  : 	terrain_classes
; 925  : 		terrain_class;
; 926  : 
; 927  : 	float
; 928  : 		dx,
; 929  : 		dy,
; 930  : 		dz,
; 931  : 		cruise_time_error,
; 932  : 		total_cruise_time,
; 933  : 		heading;
; 934  : 
; 935  : 	vec3d
; 936  : 		old_position,
; 937  : 		new_position,
; 938  : 		intercept_point,
; 939  : 		face_normal,
; 940  : 		test_point;
; 941  : 
; 942  : 	entity
; 943  : 		*hit_target;
; 944  : 
; 945  : 	////////////////////////////////////////
; 946  : 	//
; 947  : 	// pre-amble
; 948  : 	//
; 949  : 	////////////////////////////////////////
; 950  : 
; 951  : 	ASSERT (en);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00010	75 18		 jne	 SHORT $LN7@weapon_mov
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00017	83 c0 26	 add	 eax, 38			; 00000026H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@weapon_mov:

; 952  : 
; 953  : 	raw = (weapon *) get_local_entity_data (en);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 954  : 
; 955  : 	ASSERT (entity_sub_type_weapon_valid (raw->mob.sub_type));

  00033	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00036	83 38 00	 cmp	 DWORD PTR [eax], 0
  00039	7c 08		 jl	 SHORT $LN9@weapon_mov
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0003e	83 38 4c	 cmp	 DWORD PTR [eax], 76	; 0000004cH
  00041	7c 18		 jl	 SHORT $LN8@weapon_mov
$LN9@weapon_mov:
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00048	83 c0 2a	 add	 eax, 42			; 0000002aH
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CIDEJCNI@entity_sub_type_weapon_valid?5?$CIr@
  00056	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@weapon_mov:

; 956  : 
; 957  : 	////////////////////////////////////////
; 958  : 	//
; 959  : 	// ensure velocity >= 0.0
; 960  : 	//
; 961  : 	////////////////////////////////////////
; 962  : 
; 963  : 	raw->mob.velocity = max (raw->mob.velocity, 0.0f);

  0005b	0f 57 c0	 xorps	 xmm0, xmm0
  0005e	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00066	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00070	83 c1 40	 add	 ecx, 64			; 00000040H
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00079	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0007c	8b 00		 mov	 eax, DWORD PTR [eax]
  0007e	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 964  : 
; 965  : 	////////////////////////////////////////
; 966  : 	//
; 967  : 	// ensure valid positions
; 968  : 	//
; 969  : 	////////////////////////////////////////
; 970  : 
; 971  : 	old_position = raw->mob.position;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00084	83 c0 04	 add	 eax, 4
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	89 4d c0	 mov	 DWORD PTR _old_position$[ebp], ecx
  0008c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008f	89 55 c4	 mov	 DWORD PTR _old_position$[ebp+4], edx
  00092	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00095	89 45 c8	 mov	 DWORD PTR _old_position$[ebp+8], eax

; 972  : 
; 973  : 	new_position = raw->mob.position;

  00098	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0009b	83 c0 04	 add	 eax, 4
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d b4	 mov	 DWORD PTR _new_position$[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 b8	 mov	 DWORD PTR _new_position$[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 bc	 mov	 DWORD PTR _new_position$[ebp+8], eax

; 974  : 
; 975  : 	////////////////////////////////////////
; 976  : 	//
; 977  : 	// update lifetime
; 978  : 	//
; 979  : 	////////////////////////////////////////
; 980  : 
; 981  : 	raw->weapon_lifetime -= get_delta_time ();

  000af	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b2	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  000ba	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c5	f3 0f 11 81 80
	00 00 00	 movss	 DWORD PTR [ecx+128], xmm0

; 982  : 
; 983  : 	seed = get_client_server_entity_random_number_seed (en);

  000cd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000d0	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  000d6	c1 f8 04	 sar	 eax, 4
  000d9	89 45 f4	 mov	 DWORD PTR _seed$[ebp], eax

; 984  : 
; 985  : 	cruise_time_error = frand1x (&seed) * weapon_database[raw->mob.sub_type].cruise_time_max_error;

  000dc	69 45 f4 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$[ebp], 1103515245
  000e3	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000e8	89 45 f4	 mov	 DWORD PTR _seed$[ebp], eax
  000eb	8b 4d f4	 mov	 ecx, DWORD PTR _seed$[ebp]
  000ee	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000f1	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000f7	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000fb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00103	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00106	69 02 e0 00 00
	00		 imul	 eax, DWORD PTR [edx], 224
  0010c	f3 0f 5a 88 bc
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+188]
  00114	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00118	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011c	f3 0f 11 45 d4	 movss	 DWORD PTR _cruise_time_error$[ebp], xmm0

; 986  : 
; 987  : 	total_cruise_time = weapon_database[raw->mob.sub_type].cruise_time + cruise_time_error;

  00121	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00124	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  0012a	f3 0f 10 81 b8
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+184]
  00132	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _cruise_time_error$[ebp]
  00137	f3 0f 11 45 d0	 movss	 DWORD PTR _total_cruise_time$[ebp], xmm0

; 988  : 
; 989  : 	if (raw->weapon_lifetime < -total_cruise_time)

  0013c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _total_cruise_time$[ebp]
  00141	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00148	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0014b	0f 2f 80 80 00
	00 00		 comiss	 xmm0, DWORD PTR [eax+128]
  00152	76 1d		 jbe	 SHORT $LN10@weapon_mov

; 990  : 	{
; 991  : 		raw->kill_code = WEAPON_KILL_CODE_EXHAUSTED;

  00154	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00157	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0015d	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00160	83 c9 01	 or	 ecx, 1
  00163	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00166	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 992  : 
; 993  : 		return;

  0016c	e9 a0 13 00 00	 jmp	 $LN1@weapon_mov
$LN10@weapon_mov:

; 994  : 	}
; 995  : 
; 996  : 	////////////////////////////////////////
; 997  : 	//
; 998  : 	// do not move weapon on ground
; 999  : 	//
; 1000 : 	////////////////////////////////////////
; 1001 : 
; 1002 : 	if (raw->weapon_on_ground)

  00171	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00174	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0017a	c1 e9 03	 shr	 ecx, 3
  0017d	83 e1 01	 and	 ecx, 1
  00180	74 31		 je	 SHORT $LN11@weapon_mov

; 1003 : 	{
; 1004 : 		raw->mob.velocity = 0.0;

  00182	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00185	0f 57 c0	 xorps	 xmm0, xmm0
  00188	f3 0f 11 40 40	 movss	 DWORD PTR [eax+64], xmm0

; 1005 : 
; 1006 : 		raw->mob.motion_vector.x = 0.0;

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00190	0f 57 c0	 xorps	 xmm0, xmm0
  00193	f3 0f 11 40 34	 movss	 DWORD PTR [eax+52], xmm0

; 1007 : 		raw->mob.motion_vector.y = 0.0;

  00198	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0019b	0f 57 c0	 xorps	 xmm0, xmm0
  0019e	f3 0f 11 40 38	 movss	 DWORD PTR [eax+56], xmm0

; 1008 : 		raw->mob.motion_vector.z = 0.0;

  001a3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001a6	0f 57 c0	 xorps	 xmm0, xmm0
  001a9	f3 0f 11 40 3c	 movss	 DWORD PTR [eax+60], xmm0

; 1009 : 
; 1010 : 		#if DEBUG_MODULE
; 1011 : 
; 1012 : 		create_vectored_debug_3d_object (&new_position, &raw->mob.zv, OBJECT_3D_VECTOR_GREEN, 0.0, DEBUG_3D_OBJECT_SCALE);
; 1013 : 
; 1014 : 		#endif
; 1015 : 
; 1016 : 		return;

  001ae	e9 5e 13 00 00	 jmp	 $LN1@weapon_mov
$LN11@weapon_mov:

; 1017 : 	}
; 1018 : 
; 1019 : 	////////////////////////////////////////
; 1020 : 	//
; 1021 : 	// guidance
; 1022 : 	//
; 1023 : 	////////////////////////////////////////
; 1024 : 
; 1025 : 	switch (weapon_database[raw->mob.sub_type].guidance_type)

  001b3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001b6	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  001bc	8b 91 18 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+24]
  001c2	89 95 3c ff ff
	ff		 mov	 DWORD PTR tv177[ebp], edx
  001c8	83 bd 3c ff ff
	ff 08		 cmp	 DWORD PTR tv177[ebp], 8
  001cf	0f 87 4b 06 00
	00		 ja	 $LN2@weapon_mov
  001d5	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv177[ebp]
  001db	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN149@weapon_mov[eax*4]
$LN12@weapon_mov:

; 1026 : 	{
; 1027 : 		////////////////////////////////////////
; 1028 : 		case WEAPON_GUIDANCE_TYPE_NONE:
; 1029 : 		////////////////////////////////////////
; 1030 : 		{
; 1031 : 			intercept_point_valid = FALSE;

  001e2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _intercept_point_valid$[ebp], 0

; 1032 : 
; 1033 : 			break;

  001e9	e9 32 06 00 00	 jmp	 $LN2@weapon_mov
$LN13@weapon_mov:

; 1034 : 		}
; 1035 : 		////////////////////////////////////////
; 1036 : 		case WEAPON_GUIDANCE_TYPE_PASSIVE_INFRA_RED:
; 1037 : 		////////////////////////////////////////
; 1038 : 		{
; 1039 : 			intercept_point_valid = get_target_position (en, &intercept_point, FALSE);

  001ee	6a 00		 push	 0
  001f0	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  001f3	50		 push	 eax
  001f4	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001f7	51		 push	 ecx
  001f8	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  001fd	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax

; 1040 : 
; 1041 : 			break;

  00200	e9 1b 06 00 00	 jmp	 $LN2@weapon_mov
$LN14@weapon_mov:

; 1042 : 		}
; 1043 : 		////////////////////////////////////////
; 1044 : 		case WEAPON_GUIDANCE_TYPE_SEMI_ACTIVE_RADAR:
; 1045 : 		////////////////////////////////////////
; 1046 : 		{
; 1047 : 			check_guidance_source (raw, en, FALSE);

  00205	6a 00		 push	 0
  00207	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0020a	50		 push	 eax
  0020b	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0020e	51		 push	 ecx
  0020f	e8 00 00 00 00	 call	 ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ; check_guidance_source

; 1048 : 
; 1049 : 			intercept_point_valid = get_target_position (en, &intercept_point, FALSE);

  00214	6a 00		 push	 0
  00216	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  00219	50		 push	 eax
  0021a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0021d	51		 push	 ecx
  0021e	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  00223	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax

; 1050 : 
; 1051 : 			break;

  00226	e9 f5 05 00 00	 jmp	 $LN2@weapon_mov
$LN15@weapon_mov:

; 1052 : 		}
; 1053 : 		////////////////////////////////////////
; 1054 : 		case WEAPON_GUIDANCE_TYPE_ACTIVE_RADAR:
; 1055 : 		////////////////////////////////////////
; 1056 : 		{
; 1057 : 			//
; 1058 : 			// active radar lock on after launch (switch from NULL target to valid target)
; 1059 : 			//
; 1060 : 
; 1061 : 			if (get_comms_model () == COMMS_MODEL_SERVER)

  0022b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00232	75 4f		 jne	 SHORT $LN20@weapon_mov

; 1062 : 			{
; 1063 : 				if (!raw->mob.target_link.parent)  // has no target

  00234	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00237	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  0023b	75 46		 jne	 SHORT $LN20@weapon_mov

; 1064 : 				{
; 1065 : 					if (!weapon_database[raw->mob.sub_type].hellfire_flight_profile)

  0023d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00240	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00246	83 b9 7c 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+124], 0
  0024d	75 11		 jne	 SHORT $LN18@weapon_mov

; 1066 : 					{
; 1067 : 						check_guidance_source (raw, en, FALSE);

  0024f	6a 00		 push	 0
  00251	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00254	50		 push	 eax
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00258	51		 push	 ecx
  00259	e8 00 00 00 00	 call	 ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ; check_guidance_source

; 1068 : 					}
; 1069 : 					else

  0025e	eb 23		 jmp	 SHORT $LN20@weapon_mov
$LN18@weapon_mov:

; 1070 : 					{
; 1071 : 						//HELLFIRE//
; 1072 : 
; 1073 : 						//
; 1074 : 						// Hellfire flight profile only look for a new target after climb
; 1075 : 						//
; 1076 : 
; 1077 : 						if (raw->weapon_lifetime < HELLFIRE_LOAL_CLIMB1_TIME)

  00260	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00263	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  0026b	0f 57 c9	 xorps	 xmm1, xmm1
  0026e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00272	76 0f		 jbe	 SHORT $LN20@weapon_mov

; 1078 : 						{
; 1079 : 							check_guidance_source (raw, en, FALSE);

  00274	6a 00		 push	 0
  00276	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00279	50		 push	 eax
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ; check_guidance_source
$LN20@weapon_mov:

; 1080 : 						}
; 1081 : 
; 1082 : 						//HELLFIRE//
; 1083 : 					}
; 1084 : 				}
; 1085 : 			}
; 1086 : 
; 1087 : 			intercept_point_valid = get_target_position (en, &intercept_point, FALSE);

  00283	6a 00		 push	 0
  00285	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  00288	50		 push	 eax
  00289	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0028c	51		 push	 ecx
  0028d	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  00292	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax

; 1088 : 
; 1089 : 			break;

  00295	e9 86 05 00 00	 jmp	 $LN2@weapon_mov
$LN21@weapon_mov:

; 1090 : 		}
; 1091 : 		////////////////////////////////////////
; 1092 : 		case WEAPON_GUIDANCE_TYPE_SEMI_ACTIVE_LASER:
; 1093 : 		////////////////////////////////////////
; 1094 : 		{
; 1095 : 			int
; 1096 : 				do_guidance_source_check;
; 1097 : 
; 1098 : 			do_guidance_source_check = TRUE;

  0029a	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _do_guidance_source_check$3[ebp], 1

; 1099 : 
; 1100 : 			//HELLFIRE// LOAL for weapons launched by human pilots only
; 1101 : 
; 1102 : 			if (get_comms_model () == COMMS_MODEL_SERVER)

  002a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  002a8	0f 85 3b 02 00
	00		 jne	 $LN29@weapon_mov

; 1103 : 			{
; 1104 : 				if (!raw->mob.target_link.parent)

  002ae	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  002b1	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  002b5	0f 85 2e 02 00
	00		 jne	 $LN29@weapon_mov

; 1105 : 				{
; 1106 : 					if (weapon_database[raw->mob.sub_type].hellfire_flight_profile)

  002bb	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  002be	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  002c4	83 b9 7c 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+124], 0
  002cb	0f 84 18 02 00
	00		 je	 $LN29@weapon_mov

; 1107 : 					{
; 1108 : 						if (raw->launched_weapon_link.parent)

  002d1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  002d4	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  002db	0f 84 08 02 00
	00		 je	 $LN29@weapon_mov

; 1109 : 						{
; 1110 : 							if (get_local_entity_int_value (raw->launched_weapon_link.parent, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  002e1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  002e4	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  002eb	74 13		 je	 SHORT $LN93@weapon_mov
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  002f0	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  002f6	8b 02		 mov	 eax, DWORD PTR [edx]
  002f8	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv236[ebp], eax
  002fe	eb 20		 jmp	 SHORT $LN94@weapon_mov
$LN93@weapon_mov:
  00300	68 56 04 00 00	 push	 1110			; 00000456H
  00305	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0030a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00310	51		 push	 ecx
  00311	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00316	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv236[ebp], 0
$LN94@weapon_mov:
  00320	ba 01 00 00 00	 mov	 edx, 1
  00325	85 d2		 test	 edx, edx
  00327	74 0c		 je	 SHORT $LN95@weapon_mov
  00329	c7 85 38 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR tv243[ebp], 156 ; 0000009cH
  00333	eb 1f		 jmp	 SHORT $LN96@weapon_mov
$LN95@weapon_mov:
  00335	68 56 04 00 00	 push	 1110			; 00000456H
  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0033f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00344	50		 push	 eax
  00345	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0034a	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv243[ebp], 0
$LN96@weapon_mov:
  00354	68 9c 00 00 00	 push	 156			; 0000009cH
  00359	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0035c	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00362	52		 push	 edx
  00363	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv236[ebp], 1116
  0036d	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv243[ebp]
  00373	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0037a	ff d2		 call	 edx
  0037c	85 c0		 test	 eax, eax
  0037e	0f 84 65 01 00
	00		 je	 $LN29@weapon_mov

; 1111 : 							{
; 1112 : 								//
; 1113 : 								// Hellfire flight profile only look for a new target after climb
; 1114 : 								//
; 1115 : 
; 1116 : 								do_guidance_source_check = FALSE;

  00384	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _do_guidance_source_check$3[ebp], 0

; 1117 : 
; 1118 : 								if (raw->weapon_lifetime < HELLFIRE_LOAL_CLIMB1_TIME)

  0038b	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0038e	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00396	0f 57 c9	 xorps	 xmm1, xmm1
  00399	66 0f 2f c8	 comisd	 xmm1, xmm0
  0039d	0f 86 46 01 00
	00		 jbe	 $LN29@weapon_mov

; 1119 : 									if (get_local_entity_int_value (raw->launched_weapon_link.parent, INT_TYPE_LASER_ON))

  003a3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  003a6	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  003ad	74 13		 je	 SHORT $LN97@weapon_mov
  003af	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  003b2	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  003b8	8b 02		 mov	 eax, DWORD PTR [edx]
  003ba	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv264[ebp], eax
  003c0	eb 20		 jmp	 SHORT $LN98@weapon_mov
$LN97@weapon_mov:
  003c2	68 5f 04 00 00	 push	 1119			; 0000045fH
  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  003cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003d2	51		 push	 ecx
  003d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003d8	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv264[ebp], 0
$LN98@weapon_mov:
  003e2	ba 01 00 00 00	 mov	 edx, 1
  003e7	85 d2		 test	 edx, edx
  003e9	74 0c		 je	 SHORT $LN99@weapon_mov
  003eb	c7 85 38 ff ff
	ff 78 00 00 00	 mov	 DWORD PTR tv271[ebp], 120 ; 00000078H
  003f5	eb 1f		 jmp	 SHORT $LN100@weapon_mov
$LN99@weapon_mov:
  003f7	68 5f 04 00 00	 push	 1119			; 0000045fH
  003fc	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00401	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00406	50		 push	 eax
  00407	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0040c	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv271[ebp], 0
$LN100@weapon_mov:
  00416	6a 78		 push	 120			; 00000078H
  00418	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0041b	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00421	52		 push	 edx
  00422	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv264[ebp], 1116
  0042c	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv271[ebp]
  00432	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00439	ff d2		 call	 edx
  0043b	85 c0		 test	 eax, eax
  0043d	0f 84 a6 00 00
	00		 je	 $LN29@weapon_mov

; 1120 : 										if (get_local_entity_int_value (raw->launched_weapon_link.parent, INT_TYPE_LOS_TO_TARGET))

  00443	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00446	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0044d	74 13		 je	 SHORT $LN101@weapon_mov
  0044f	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00452	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00458	8b 02		 mov	 eax, DWORD PTR [edx]
  0045a	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  00460	eb 20		 jmp	 SHORT $LN102@weapon_mov
$LN101@weapon_mov:
  00462	68 60 04 00 00	 push	 1120			; 00000460H
  00467	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0046c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00472	51		 push	 ecx
  00473	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00478	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv289[ebp], 0
$LN102@weapon_mov:
  00482	ba 01 00 00 00	 mov	 edx, 1
  00487	85 d2		 test	 edx, edx
  00489	74 0c		 je	 SHORT $LN103@weapon_mov
  0048b	c7 85 38 ff ff
	ff 80 00 00 00	 mov	 DWORD PTR tv296[ebp], 128 ; 00000080H
  00495	eb 1f		 jmp	 SHORT $LN104@weapon_mov
$LN103@weapon_mov:
  00497	68 60 04 00 00	 push	 1120			; 00000460H
  0049c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ac	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv296[ebp], 0
$LN104@weapon_mov:
  004b6	68 80 00 00 00	 push	 128			; 00000080H
  004bb	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  004be	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  004c4	52		 push	 edx
  004c5	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv289[ebp], 1116
  004cf	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv296[ebp]
  004d5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004dc	ff d2		 call	 edx
  004de	85 c0		 test	 eax, eax
  004e0	74 07		 je	 SHORT $LN29@weapon_mov

; 1121 : 											do_guidance_source_check = TRUE;

  004e2	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _do_guidance_source_check$3[ebp], 1
$LN29@weapon_mov:

; 1122 : 							}
; 1123 : 						}
; 1124 : 					}
; 1125 : 				}
; 1126 : 			}
; 1127 : 
; 1128 : 			//HELLFIRE//
; 1129 : 
; 1130 : 			if (do_guidance_source_check)

  004e9	83 7d 88 00	 cmp	 DWORD PTR _do_guidance_source_check$3[ebp], 0
  004ed	74 0f		 je	 SHORT $LN30@weapon_mov

; 1131 : 			{
; 1132 : 				check_guidance_source (raw, en, TRUE);

  004ef	6a 01		 push	 1
  004f1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004f4	50		 push	 eax
  004f5	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  004f8	51		 push	 ecx
  004f9	e8 00 00 00 00	 call	 ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ; check_guidance_source
$LN30@weapon_mov:

; 1133 : 			}
; 1134 : 
; 1135 : 			if (get_local_entity_int_value (raw->launched_weapon_link.parent, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI
; 1136 : 				&& !get_local_entity_int_value(raw->launched_weapon_link.parent, INT_TYPE_LASER_ON))

  004fe	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00501	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00508	74 13		 je	 SHORT $LN105@weapon_mov
  0050a	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0050d	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00513	8b 02		 mov	 eax, DWORD PTR [edx]
  00515	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv318[ebp], eax
  0051b	eb 20		 jmp	 SHORT $LN106@weapon_mov
$LN105@weapon_mov:
  0051d	68 6f 04 00 00	 push	 1135			; 0000046fH
  00522	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00527	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0052d	51		 push	 ecx
  0052e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00533	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv318[ebp], 0
$LN106@weapon_mov:
  0053d	ba 01 00 00 00	 mov	 edx, 1
  00542	85 d2		 test	 edx, edx
  00544	74 0c		 je	 SHORT $LN107@weapon_mov
  00546	c7 85 38 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR tv325[ebp], 156 ; 0000009cH
  00550	eb 1f		 jmp	 SHORT $LN108@weapon_mov
$LN107@weapon_mov:
  00552	68 6f 04 00 00	 push	 1135			; 0000046fH
  00557	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0055c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00561	50		 push	 eax
  00562	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00567	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv325[ebp], 0
$LN108@weapon_mov:
  00571	68 9c 00 00 00	 push	 156			; 0000009cH
  00576	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00579	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0057f	52		 push	 edx
  00580	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv318[ebp], 1116
  0058a	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv325[ebp]
  00590	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00597	ff d2		 call	 edx
  00599	85 c0		 test	 eax, eax
  0059b	0f 84 a5 00 00
	00		 je	 $LN31@weapon_mov
  005a1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005a4	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  005ab	74 13		 je	 SHORT $LN109@weapon_mov
  005ad	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  005b0	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  005b6	8b 02		 mov	 eax, DWORD PTR [edx]
  005b8	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  005be	eb 20		 jmp	 SHORT $LN110@weapon_mov
$LN109@weapon_mov:
  005c0	68 70 04 00 00	 push	 1136			; 00000470H
  005c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005d0	51		 push	 ecx
  005d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d6	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv343[ebp], 0
$LN110@weapon_mov:
  005e0	ba 01 00 00 00	 mov	 edx, 1
  005e5	85 d2		 test	 edx, edx
  005e7	74 0c		 je	 SHORT $LN111@weapon_mov
  005e9	c7 85 38 ff ff
	ff 78 00 00 00	 mov	 DWORD PTR tv350[ebp], 120 ; 00000078H
  005f3	eb 1f		 jmp	 SHORT $LN112@weapon_mov
$LN111@weapon_mov:
  005f5	68 70 04 00 00	 push	 1136			; 00000470H
  005fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00604	50		 push	 eax
  00605	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0060a	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv350[ebp], 0
$LN112@weapon_mov:
  00614	6a 78		 push	 120			; 00000078H
  00616	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00619	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0061f	52		 push	 edx
  00620	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv343[ebp], 1116
  0062a	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv350[ebp]
  00630	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00637	ff d2		 call	 edx
  00639	85 c0		 test	 eax, eax
  0063b	75 09		 jne	 SHORT $LN31@weapon_mov

; 1137 : 			{
; 1138 : 				intercept_point_valid = FALSE;

  0063d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _intercept_point_valid$[ebp], 0

; 1139 : 			}
; 1140 : 			else

  00644	eb 12		 jmp	 SHORT $LN32@weapon_mov
$LN31@weapon_mov:

; 1141 : 				intercept_point_valid = get_target_position (en, &intercept_point, TRUE);

  00646	6a 01		 push	 1
  00648	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  0064b	50		 push	 eax
  0064c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0064f	51		 push	 ecx
  00650	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  00655	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax
$LN32@weapon_mov:

; 1142 : 
; 1143 : 			break;

  00658	e9 c3 01 00 00	 jmp	 $LN2@weapon_mov
$LN33@weapon_mov:

; 1144 : 		}
; 1145 : 		////////////////////////////////////////
; 1146 : 		case WEAPON_GUIDANCE_TYPE_SEMI_ACTIVE_LASER_BEAM_RIDING:
; 1147 : 		////////////////////////////////////////
; 1148 : 		{
; 1149 : 			check_guidance_source (raw, en, TRUE);

  0065d	6a 01		 push	 1
  0065f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00662	50		 push	 eax
  00663	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00666	51		 push	 ecx
  00667	e8 00 00 00 00	 call	 ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ; check_guidance_source

; 1150 : 
; 1151 : 			if (get_local_entity_int_value (raw->launched_weapon_link.parent, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI
; 1152 : 				&& !get_local_entity_int_value(raw->launched_weapon_link.parent, INT_TYPE_LASER_ON))

  0066c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0066f	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00676	74 13		 je	 SHORT $LN113@weapon_mov
  00678	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0067b	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00681	8b 02		 mov	 eax, DWORD PTR [edx]
  00683	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv375[ebp], eax
  00689	eb 20		 jmp	 SHORT $LN114@weapon_mov
$LN113@weapon_mov:
  0068b	68 7f 04 00 00	 push	 1151			; 0000047fH
  00690	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00695	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0069b	51		 push	 ecx
  0069c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006a1	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv375[ebp], 0
$LN114@weapon_mov:
  006ab	ba 01 00 00 00	 mov	 edx, 1
  006b0	85 d2		 test	 edx, edx
  006b2	74 0c		 je	 SHORT $LN115@weapon_mov
  006b4	c7 85 38 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR tv382[ebp], 156 ; 0000009cH
  006be	eb 1f		 jmp	 SHORT $LN116@weapon_mov
$LN115@weapon_mov:
  006c0	68 7f 04 00 00	 push	 1151			; 0000047fH
  006c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  006cf	50		 push	 eax
  006d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006d5	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv382[ebp], 0
$LN116@weapon_mov:
  006df	68 9c 00 00 00	 push	 156			; 0000009cH
  006e4	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  006e7	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  006ed	52		 push	 edx
  006ee	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv375[ebp], 1116
  006f8	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv382[ebp]
  006fe	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00705	ff d2		 call	 edx
  00707	85 c0		 test	 eax, eax
  00709	0f 84 a5 00 00
	00		 je	 $LN34@weapon_mov
  0070f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00712	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00719	74 13		 je	 SHORT $LN117@weapon_mov
  0071b	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0071e	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00724	8b 02		 mov	 eax, DWORD PTR [edx]
  00726	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv400[ebp], eax
  0072c	eb 20		 jmp	 SHORT $LN118@weapon_mov
$LN117@weapon_mov:
  0072e	68 80 04 00 00	 push	 1152			; 00000480H
  00733	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00738	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0073e	51		 push	 ecx
  0073f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00744	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN118@weapon_mov:
  0074e	ba 01 00 00 00	 mov	 edx, 1
  00753	85 d2		 test	 edx, edx
  00755	74 0c		 je	 SHORT $LN119@weapon_mov
  00757	c7 85 38 ff ff
	ff 78 00 00 00	 mov	 DWORD PTR tv407[ebp], 120 ; 00000078H
  00761	eb 1f		 jmp	 SHORT $LN120@weapon_mov
$LN119@weapon_mov:
  00763	68 80 04 00 00	 push	 1152			; 00000480H
  00768	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0076d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00772	50		 push	 eax
  00773	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00778	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv407[ebp], 0
$LN120@weapon_mov:
  00782	6a 78		 push	 120			; 00000078H
  00784	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00787	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0078d	52		 push	 edx
  0078e	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv400[ebp], 1116
  00798	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv407[ebp]
  0079e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  007a5	ff d2		 call	 edx
  007a7	85 c0		 test	 eax, eax
  007a9	75 09		 jne	 SHORT $LN34@weapon_mov

; 1153 : 			{
; 1154 : 				intercept_point_valid = FALSE;

  007ab	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _intercept_point_valid$[ebp], 0

; 1155 : 			}
; 1156 : 			else

  007b2	eb 12		 jmp	 SHORT $LN35@weapon_mov
$LN34@weapon_mov:

; 1157 : 				intercept_point_valid = get_target_position (en, &intercept_point, TRUE);

  007b4	6a 01		 push	 1
  007b6	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  007b9	50		 push	 eax
  007ba	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  007bd	51		 push	 ecx
  007be	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  007c3	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax
$LN35@weapon_mov:

; 1158 : 
; 1159 : 			break;

  007c6	eb 58		 jmp	 SHORT $LN2@weapon_mov
$LN36@weapon_mov:

; 1160 : 		}
; 1161 : 		////////////////////////////////////////
; 1162 : 		case WEAPON_GUIDANCE_TYPE_ACTIVE_LASER:
; 1163 : 		////////////////////////////////////////
; 1164 : 		{
; 1165 : 			intercept_point_valid = get_target_position (en, &intercept_point, FALSE);

  007c8	6a 00		 push	 0
  007ca	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  007cd	50		 push	 eax
  007ce	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  007d1	51		 push	 ecx
  007d2	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  007d7	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax

; 1166 : 
; 1167 : 			break;

  007da	eb 44		 jmp	 SHORT $LN2@weapon_mov
$LN37@weapon_mov:

; 1168 : 		}
; 1169 : 		////////////////////////////////////////
; 1170 : 		case WEAPON_GUIDANCE_TYPE_RADIO_COMMAND:
; 1171 : 		////////////////////////////////////////
; 1172 : 		{
; 1173 : 			check_guidance_source (raw, en, FALSE);

  007dc	6a 00		 push	 0
  007de	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007e1	50		 push	 eax
  007e2	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  007e5	51		 push	 ecx
  007e6	e8 00 00 00 00	 call	 ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ; check_guidance_source

; 1174 : 
; 1175 : 			intercept_point_valid = get_target_position (en, &intercept_point, TRUE);

  007eb	6a 01		 push	 1
  007ed	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  007f0	50		 push	 eax
  007f1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  007f4	51		 push	 ecx
  007f5	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  007fa	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax

; 1176 : 
; 1177 : 			break;

  007fd	eb 21		 jmp	 SHORT $LN2@weapon_mov
$LN38@weapon_mov:

; 1178 : 		}
; 1179 : 		////////////////////////////////////////
; 1180 : 		case WEAPON_GUIDANCE_TYPE_WIRE_GUIDED:
; 1181 : 		////////////////////////////////////////
; 1182 : 		{
; 1183 : 			check_guidance_source (raw, en, FALSE);

  007ff	6a 00		 push	 0
  00801	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00804	50		 push	 eax
  00805	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00808	51		 push	 ecx
  00809	e8 00 00 00 00	 call	 ?check_guidance_source@@YGXPAUWEAPON@@PAUENTITY@@H@Z ; check_guidance_source

; 1184 : 
; 1185 : 			intercept_point_valid = get_target_position (en, &intercept_point, TRUE);

  0080e	6a 01		 push	 1
  00810	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  00813	50		 push	 eax
  00814	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00817	51		 push	 ecx
  00818	e8 00 00 00 00	 call	 ?get_target_position@@YGHPAUENTITY@@PAUVEC3D@@H@Z ; get_target_position
  0081d	89 45 f0	 mov	 DWORD PTR _intercept_point_valid$[ebp], eax
$LN2@weapon_mov:

; 1186 : 
; 1187 : 			break;
; 1188 : 		}
; 1189 : 	}
; 1190 : 
; 1191 : 	////////////////////////////////////////
; 1192 : 	//
; 1193 : 	// movement
; 1194 : 	//
; 1195 : 	////////////////////////////////////////
; 1196 : 
; 1197 : 	if (intercept_point_valid)

  00820	83 7d f0 00	 cmp	 DWORD PTR _intercept_point_valid$[ebp], 0
  00824	74 16		 je	 SHORT $LN39@weapon_mov

; 1198 : 	{
; 1199 : 		move_guided_weapon (en, &new_position, &intercept_point);

  00826	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  00829	50		 push	 eax
  0082a	8d 4d b4	 lea	 ecx, DWORD PTR _new_position$[ebp]
  0082d	51		 push	 ecx
  0082e	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00831	52		 push	 edx
  00832	e8 00 00 00 00	 call	 ?move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; move_guided_weapon

; 1200 : 	}
; 1201 : 	else

  00837	e9 b7 01 00 00	 jmp	 $LN42@weapon_mov
$LN39@weapon_mov:

; 1202 : 	{
; 1203 : 		// unless missile is a LOAL hellfire in phase 1 or 2, move as an unguided weapon when no target
; 1204 : 		if (!raw->loal_mode || raw->missile_phase > MISSILE_PHASE2)

  0083c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0083f	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00845	c1 e9 07	 shr	 ecx, 7
  00848	83 e1 01	 and	 ecx, 1
  0084b	74 14		 je	 SHORT $LN43@weapon_mov
  0084d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00850	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00856	c1 e9 08	 shr	 ecx, 8
  00859	83 e1 07	 and	 ecx, 7
  0085c	83 f9 01	 cmp	 ecx, 1
  0085f	76 2b		 jbe	 SHORT $LN41@weapon_mov
$LN43@weapon_mov:

; 1205 : 		{
; 1206 : 			weapon* weapon = (struct WEAPON *) get_local_entity_data (en);

  00861	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00864	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00867	89 4d 84	 mov	 DWORD PTR _weapon$2[ebp], ecx

; 1207 : 			move_unguided_weapon (weapon, &new_position, get_delta_time(), TRUE);

  0086a	6a 01		 push	 1
  0086c	51		 push	 ecx
  0086d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  0087d	50		 push	 eax
  0087e	8b 4d 84	 mov	 ecx, DWORD PTR _weapon$2[ebp]
  00881	51		 push	 ecx
  00882	e8 00 00 00 00	 call	 ?move_unguided_weapon@@YGXPAUWEAPON@@PAUVEC3D@@MH@Z ; move_unguided_weapon

; 1208 : 		}
; 1209 : 		else

  00887	e9 67 01 00 00	 jmp	 $LN42@weapon_mov
$LN41@weapon_mov:

; 1210 : 		{
; 1211 : 			//HELLFIRE//
; 1212 : 
; 1213 : 			//
; 1214 : 			// Hellfire flight profile
; 1215 : 			//
; 1216 : 
; 1217 : 			intercept_point = raw->mob.position;

  0088c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0088f	83 c0 04	 add	 eax, 4
  00892	8b 08		 mov	 ecx, DWORD PTR [eax]
  00894	89 4d a8	 mov	 DWORD PTR _intercept_point$[ebp], ecx
  00897	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0089a	89 55 ac	 mov	 DWORD PTR _intercept_point$[ebp+4], edx
  0089d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  008a0	89 45 b0	 mov	 DWORD PTR _intercept_point$[ebp+8], eax

; 1218 : 
; 1219 : 			//
; 1220 : 			// climb or dive
; 1221 : 			//
; 1222 : 
; 1223 : 			if (raw->weapon_lifetime > HELLFIRE_LOAL_CLIMB1_TIME)

  008a3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  008a6	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  008ae	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  008b6	76 5f		 jbe	 SHORT $LN44@weapon_mov

; 1224 : 			{
; 1225 : 				intercept_point.x += HELLFIRE_LOAL_CLIMB1_XZ * raw->mob.zv.x;

  008b8	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  008bb	f3 0f 5a 40 28	 cvtss2sd xmm0, DWORD PTR [eax+40]
  008c0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@408f400000000000
  008c8	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _intercept_point$[ebp]
  008cd	f2 0f 58 c8	 addsd	 xmm1, xmm0
  008d1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  008d5	f3 0f 11 45 a8	 movss	 DWORD PTR _intercept_point$[ebp], xmm0

; 1226 : 				intercept_point.y += HELLFIRE_LOAL_CLIMB1_Y;

  008da	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _intercept_point$[ebp+4]
  008df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4072c00000000000
  008e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008eb	f3 0f 11 45 ac	 movss	 DWORD PTR _intercept_point$[ebp+4], xmm0

; 1227 : 				intercept_point.z += HELLFIRE_LOAL_CLIMB1_XZ * raw->mob.zv.z;

  008f0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  008f3	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  008f8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@408f400000000000
  00900	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _intercept_point$[ebp+8]
  00905	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00909	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0090d	f3 0f 11 45 b0	 movss	 DWORD PTR _intercept_point$[ebp+8], xmm0
  00912	e9 cb 00 00 00	 jmp	 $LN47@weapon_mov
$LN44@weapon_mov:

; 1228 : 			}
; 1229 : 			else if (raw->weapon_lifetime > HELLFIRE_LOAL_CLIMB2_TIME)

  00917	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0091a	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  00922	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c028000000000000
  0092a	76 5c		 jbe	 SHORT $LN46@weapon_mov

; 1230 : 			{
; 1231 : 				intercept_point.x += HELLFIRE_LOAL_CLIMB2_XZ * raw->mob.zv.x;

  0092c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0092f	f3 0f 5a 40 28	 cvtss2sd xmm0, DWORD PTR [eax+40]
  00934	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40b7700000000000
  0093c	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _intercept_point$[ebp]
  00941	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00945	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00949	f3 0f 11 45 a8	 movss	 DWORD PTR _intercept_point$[ebp], xmm0

; 1232 : 				intercept_point.y += HELLFIRE_LOAL_CLIMB2_Y;

  0094e	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _intercept_point$[ebp+4]
  00953	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@407c200000000000
  0095b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0095f	f3 0f 11 45 ac	 movss	 DWORD PTR _intercept_point$[ebp+4], xmm0

; 1233 : 				intercept_point.z += HELLFIRE_LOAL_CLIMB2_XZ * raw->mob.zv.z;

  00964	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00967	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  0096c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40b7700000000000
  00974	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _intercept_point$[ebp+8]
  00979	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0097d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00981	f3 0f 11 45 b0	 movss	 DWORD PTR _intercept_point$[ebp+8], xmm0

; 1234 : 			}
; 1235 : 			else

  00986	eb 5a		 jmp	 SHORT $LN47@weapon_mov
$LN46@weapon_mov:

; 1236 : 			{
; 1237 : 				intercept_point.x += HELLFIRE_LOAL_DIVE_XZ * raw->mob.zv.x;

  00988	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0098b	f3 0f 5a 40 28	 cvtss2sd xmm0, DWORD PTR [eax+40]
  00990	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40bd4c0000000000
  00998	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _intercept_point$[ebp]
  0099d	f2 0f 58 c8	 addsd	 xmm1, xmm0
  009a1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  009a5	f3 0f 11 45 a8	 movss	 DWORD PTR _intercept_point$[ebp], xmm0

; 1238 : 				intercept_point.y += HELLFIRE_LOAL_DIVE_Y;

  009aa	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _intercept_point$[ebp+4]
  009af	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@c079000000000000
  009b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009bb	f3 0f 11 45 ac	 movss	 DWORD PTR _intercept_point$[ebp+4], xmm0

; 1239 : 				intercept_point.z += HELLFIRE_LOAL_DIVE_XZ * raw->mob.zv.z;

  009c0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  009c3	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  009c8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40bd4c0000000000
  009d0	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _intercept_point$[ebp+8]
  009d5	f2 0f 58 c8	 addsd	 xmm1, xmm0
  009d9	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  009dd	f3 0f 11 45 b0	 movss	 DWORD PTR _intercept_point$[ebp+8], xmm0
$LN47@weapon_mov:

; 1240 : 			}
; 1241 : 
; 1242 : 			move_guided_weapon (en, &new_position, &intercept_point);

  009e2	8d 45 a8	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  009e5	50		 push	 eax
  009e6	8d 4d b4	 lea	 ecx, DWORD PTR _new_position$[ebp]
  009e9	51		 push	 ecx
  009ea	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  009ed	52		 push	 edx
  009ee	e8 00 00 00 00	 call	 ?move_guided_weapon@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; move_guided_weapon
$LN42@weapon_mov:

; 1243 : 
; 1244 : 			//HELLFIRE//
; 1245 : 		}
; 1246 : 	}
; 1247 : 
; 1248 : 	// TODO check rotation
; 1249 : 	if (tacview_is_logging())

  009f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tacview_log_file@@3PAU_iobuf@@A, 0 ; tacview_log_file
  009fa	74 0f		 je	 SHORT $LN48@weapon_mov

; 1250 : 		write_tacview_unit_update(en, TRUE, TRUE, FALSE);

  009fc	6a 00		 push	 0
  009fe	6a 01		 push	 1
  00a00	6a 01		 push	 1
  00a02	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a05	50		 push	 eax
  00a06	e8 00 00 00 00	 call	 ?write_tacview_unit_update@@YGXPAUENTITY@@HHH@Z ; write_tacview_unit_update
$LN48@weapon_mov:

; 1251 : 
; 1252 : 	if (raw->kill_code != WEAPON_KILL_CODE_OK)

  00a0b	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00a0e	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00a14	83 e1 07	 and	 ecx, 7
  00a17	74 05		 je	 SHORT $LN49@weapon_mov

; 1253 : 	{
; 1254 : 		return;

  00a19	e9 f3 0a 00 00	 jmp	 $LN1@weapon_mov
$LN49@weapon_mov:

; 1255 : 	}
; 1256 : 
; 1257 : 	////////////////////////////////////////
; 1258 : 	//
; 1259 : 	// collision detection precision
; 1260 : 	//
; 1261 : 	////////////////////////////////////////
; 1262 : 
; 1263 : 	high_precision_collision = FALSE;

  00a1e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _high_precision_collision$[ebp], 0

; 1264 : 
; 1265 : 	if (raw->mob.target_link.parent)

  00a25	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00a28	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  00a2c	0f 84 9d 00 00
	00		 je	 $LN51@weapon_mov

; 1266 : 	{
; 1267 : 		if (get_local_entity_int_value (raw->mob.target_link.parent, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00a32	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00a35	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  00a39	74 10		 je	 SHORT $LN121@weapon_mov
  00a3b	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00a3e	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00a41	8b 02		 mov	 eax, DWORD PTR [edx]
  00a43	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv548[ebp], eax
  00a49	eb 20		 jmp	 SHORT $LN122@weapon_mov
$LN121@weapon_mov:
  00a4b	68 f3 04 00 00	 push	 1267			; 000004f3H
  00a50	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a55	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a5b	51		 push	 ecx
  00a5c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a61	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv548[ebp], 0
$LN122@weapon_mov:
  00a6b	ba 01 00 00 00	 mov	 edx, 1
  00a70	85 d2		 test	 edx, edx
  00a72	74 0c		 je	 SHORT $LN123@weapon_mov
  00a74	c7 85 38 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR tv555[ebp], 156 ; 0000009cH
  00a7e	eb 1f		 jmp	 SHORT $LN124@weapon_mov
$LN123@weapon_mov:
  00a80	68 f3 04 00 00	 push	 1267			; 000004f3H
  00a85	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a8f	50		 push	 eax
  00a90	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a95	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv555[ebp], 0
$LN124@weapon_mov:
  00a9f	68 9c 00 00 00	 push	 156			; 0000009cH
  00aa4	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00aa7	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00aaa	52		 push	 edx
  00aab	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv548[ebp], 1116
  00ab5	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv555[ebp]
  00abb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00ac2	ff d2		 call	 edx
  00ac4	85 c0		 test	 eax, eax
  00ac6	74 07		 je	 SHORT $LN51@weapon_mov

; 1268 : 		{
; 1269 : 			high_precision_collision = TRUE;

  00ac8	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _high_precision_collision$[ebp], 1
$LN51@weapon_mov:

; 1270 : 		}
; 1271 : 	}
; 1272 : 
; 1273 : 	if (raw->launched_weapon_link.parent)

  00acf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00ad2	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00ad9	0f 84 a6 00 00
	00		 je	 $LN53@weapon_mov

; 1274 : 	{
; 1275 : 		if (get_local_entity_int_value (raw->launched_weapon_link.parent, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00adf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00ae2	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00ae9	74 13		 je	 SHORT $LN125@weapon_mov
  00aeb	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00aee	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00af4	8b 02		 mov	 eax, DWORD PTR [edx]
  00af6	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv577[ebp], eax
  00afc	eb 20		 jmp	 SHORT $LN126@weapon_mov
$LN125@weapon_mov:
  00afe	68 fb 04 00 00	 push	 1275			; 000004fbH
  00b03	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b08	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b0e	51		 push	 ecx
  00b0f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b14	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv577[ebp], 0
$LN126@weapon_mov:
  00b1e	ba 01 00 00 00	 mov	 edx, 1
  00b23	85 d2		 test	 edx, edx
  00b25	74 0c		 je	 SHORT $LN127@weapon_mov
  00b27	c7 85 38 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR tv584[ebp], 156 ; 0000009cH
  00b31	eb 1f		 jmp	 SHORT $LN128@weapon_mov
$LN127@weapon_mov:
  00b33	68 fb 04 00 00	 push	 1275			; 000004fbH
  00b38	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b3d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b42	50		 push	 eax
  00b43	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b48	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv584[ebp], 0
$LN128@weapon_mov:
  00b52	68 9c 00 00 00	 push	 156			; 0000009cH
  00b57	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00b5a	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00b60	52		 push	 edx
  00b61	69 85 3c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv577[ebp], 1116
  00b6b	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv584[ebp]
  00b71	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00b78	ff d2		 call	 edx
  00b7a	85 c0		 test	 eax, eax
  00b7c	74 07		 je	 SHORT $LN53@weapon_mov

; 1276 : 		{
; 1277 : 			high_precision_collision = TRUE;

  00b7e	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _high_precision_collision$[ebp], 1
$LN53@weapon_mov:

; 1278 : 		}
; 1279 : 	}
; 1280 : 
; 1281 : 	if (en == get_local_entity_first_child (get_camera_entity (), LIST_TYPE_VIEW_WEAPON))

  00b85	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camera_entity@@3PAUENTITY@@A, 0 ; camera_entity
  00b8c	74 0f		 je	 SHORT $LN129@weapon_mov
  00b8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  00b93	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b95	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv598[ebp], ecx
  00b9b	eb 20		 jmp	 SHORT $LN130@weapon_mov
$LN129@weapon_mov:
  00b9d	68 01 05 00 00	 push	 1281			; 00000501H
  00ba2	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ba7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bad	52		 push	 edx
  00bae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bb3	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv598[ebp], 0
$LN130@weapon_mov:
  00bbd	b8 01 00 00 00	 mov	 eax, 1
  00bc2	85 c0		 test	 eax, eax
  00bc4	74 0c		 je	 SHORT $LN131@weapon_mov
  00bc6	c7 85 38 ff ff
	ff 2b 00 00 00	 mov	 DWORD PTR tv605[ebp], 43 ; 0000002bH
  00bd0	eb 20		 jmp	 SHORT $LN132@weapon_mov
$LN131@weapon_mov:
  00bd2	68 01 05 00 00	 push	 1281			; 00000501H
  00bd7	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bdc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00be2	51		 push	 ecx
  00be3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00be8	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv605[ebp], 0
$LN132@weapon_mov:
  00bf2	6a 2b		 push	 43			; 0000002bH
  00bf4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  00bfa	52		 push	 edx
  00bfb	69 85 3c ff ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv598[ebp], 180
  00c05	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv605[ebp]
  00c0b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  00c12	ff d2		 call	 edx
  00c14	39 45 08	 cmp	 DWORD PTR _en$[ebp], eax
  00c17	75 07		 jne	 SHORT $LN54@weapon_mov

; 1282 : 	{
; 1283 : 		high_precision_collision = TRUE;

  00c19	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _high_precision_collision$[ebp], 1
$LN54@weapon_mov:

; 1284 : 	}
; 1285 : 
; 1286 : 	////////////////////////////////////////
; 1287 : 	//
; 1288 : 	// target collision detection
; 1289 : 	//
; 1290 : 	////////////////////////////////////////
; 1291 : 
; 1292 : 	if (get_comms_model () == COMMS_MODEL_SERVER)

  00c20	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00c27	0f 85 e6 00 00
	00		 jne	 $LN65@weapon_mov

; 1293 : 	{
; 1294 : 		if (weapon_database[raw->mob.sub_type].in_flight_collision_check)

  00c2d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00c30	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00c36	83 b9 70 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+112], 0
  00c3d	0f 84 d0 00 00
	00		 je	 $LN65@weapon_mov

; 1295 : 		{
; 1296 : 			if (high_precision_collision || (!raw->mob.target_link.parent))

  00c43	83 7d ec 00	 cmp	 DWORD PTR _high_precision_collision$[ebp], 0
  00c47	75 0d		 jne	 SHORT $LN59@weapon_mov
  00c49	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00c4c	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  00c50	0f 85 89 00 00
	00		 jne	 $LN57@weapon_mov
$LN59@weapon_mov:

; 1297 : 			{
; 1298 : 				if (hit_target = collision_test_weapon_with_any_target (en, &old_position, &new_position))

  00c56	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  00c59	50		 push	 eax
  00c5a	8d 4d c0	 lea	 ecx, DWORD PTR _old_position$[ebp]
  00c5d	51		 push	 ecx
  00c5e	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00c61	52		 push	 edx
  00c62	e8 00 00 00 00	 call	 ?collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU1@PAUVEC3D@@1@Z ; collision_test_weapon_with_any_target
  00c67	89 45 8c	 mov	 DWORD PTR _hit_target$[ebp], eax
  00c6a	83 7d 8c 00	 cmp	 DWORD PTR _hit_target$[ebp], 0
  00c6e	74 41		 je	 SHORT $LN60@weapon_mov

; 1299 : 				{
; 1300 : 					if (hit_target != raw->mob.target_link.parent)

  00c70	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00c73	8b 4d 8c	 mov	 ecx, DWORD PTR _hit_target$[ebp]
  00c76	3b 48 64	 cmp	 ecx, DWORD PTR [eax+100]
  00c79	74 1c		 je	 SHORT $LN62@weapon_mov

; 1301 : 					{
; 1302 : 						//
; 1303 : 						// switch target parent to new_target (on server only)
; 1304 : 						//
; 1305 : 
; 1306 : 						delete_local_entity_from_parents_child_list (en, LIST_TYPE_TARGET);

  00c7b	6a 26		 push	 38			; 00000026H
  00c7d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c80	50		 push	 eax
  00c81	e8 00 00 00 00	 call	 ?delete_local_entity_from_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@@Z ; delete_local_entity_from_parents_child_list

; 1307 : 
; 1308 : 						insert_local_entity_into_parents_child_list (en, LIST_TYPE_TARGET, hit_target, NULL);

  00c86	6a 00		 push	 0
  00c88	8b 45 8c	 mov	 eax, DWORD PTR _hit_target$[ebp]
  00c8b	50		 push	 eax
  00c8c	6a 26		 push	 38			; 00000026H
  00c8e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00c91	51		 push	 ecx
  00c92	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list
$LN62@weapon_mov:

; 1309 : 					}
; 1310 : 
; 1311 : 					raw->kill_code = WEAPON_KILL_CODE_HIT_TARGET;

  00c97	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00c9a	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00ca0	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00ca3	83 c9 05	 or	 ecx, 5
  00ca6	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00ca9	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
  00caf	eb 2c		 jmp	 SHORT $LN64@weapon_mov
$LN60@weapon_mov:

; 1312 : 				}
; 1313 : 				else if (high_precision_collision)

  00cb1	83 7d ec 00	 cmp	 DWORD PTR _high_precision_collision$[ebp], 0
  00cb5	74 26		 je	 SHORT $LN64@weapon_mov

; 1314 : 				{
; 1315 : 					if (collision_test_weapon_with_trees (&old_position, &new_position))

  00cb7	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  00cba	50		 push	 eax
  00cbb	8d 4d c0	 lea	 ecx, DWORD PTR _old_position$[ebp]
  00cbe	51		 push	 ecx
  00cbf	e8 00 00 00 00	 call	 ?collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z ; collision_test_weapon_with_trees
  00cc4	85 c0		 test	 eax, eax
  00cc6	74 15		 je	 SHORT $LN64@weapon_mov

; 1316 : 					{
; 1317 : 						raw->kill_code = WEAPON_KILL_CODE_SELF_DESTRUCT;

  00cc8	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00ccb	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00cd1	83 c9 07	 or	 ecx, 7
  00cd4	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00cd7	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN64@weapon_mov:

; 1318 : 					}
; 1319 : 				}
; 1320 : 			}
; 1321 : 			else

  00cdd	eb 34		 jmp	 SHORT $LN65@weapon_mov
$LN57@weapon_mov:

; 1322 : 			{
; 1323 : 				if (collision_test_weapon_with_given_target (en, raw->mob.target_link.parent, &old_position, &new_position))

  00cdf	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  00ce2	50		 push	 eax
  00ce3	8d 4d c0	 lea	 ecx, DWORD PTR _old_position$[ebp]
  00ce6	51		 push	 ecx
  00ce7	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00cea	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00ced	50		 push	 eax
  00cee	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00cf1	51		 push	 ecx
  00cf2	e8 00 00 00 00	 call	 ?collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z ; collision_test_weapon_with_given_target
  00cf7	85 c0		 test	 eax, eax
  00cf9	74 18		 je	 SHORT $LN65@weapon_mov

; 1324 : 				{
; 1325 : 					raw->kill_code = WEAPON_KILL_CODE_HIT_TARGET;

  00cfb	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00cfe	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00d04	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00d07	83 c9 05	 or	 ecx, 5
  00d0a	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00d0d	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN65@weapon_mov:

; 1326 : 				}
; 1327 : 			}
; 1328 : 		}
; 1329 : 	}
; 1330 : 
; 1331 : 	////////////////////////////////////////
; 1332 : 	//
; 1333 : 	// terrain collision detection
; 1334 : 	//
; 1335 : 	////////////////////////////////////////
; 1336 : 
; 1337 : 	//
; 1338 : 	// UP TO THIS POINT THE WEAPON HAS NOT BEEN MOVED SO IT IS OK TO RETURN WITHOUT BOUNDS CHECKING THE POSITION
; 1339 : 	//
; 1340 : 
; 1341 : 	//
; 1342 : 	// from now on only overwrite kill_code if kill_code == WEAPON_KILL_CODE_OK
; 1343 : 	//
; 1344 : 
; 1345 : 	//
; 1346 : 	// inside map area
; 1347 : 	//
; 1348 : 
; 1349 : 	if (!point_inside_map_area (&new_position))

  00d13	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  00d18	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  00d1f	72 2e		 jb	 SHORT $LN67@weapon_mov
  00d21	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00d29	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _new_position$[ebp]
  00d2d	72 20		 jb	 SHORT $LN67@weapon_mov
  00d2f	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  00d34	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00d3b	72 12		 jb	 SHORT $LN67@weapon_mov
  00d3d	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00d45	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _new_position$[ebp+8]
  00d49	0f 83 38 01 00
	00		 jae	 $LN66@weapon_mov
$LN67@weapon_mov:

; 1350 : 	{
; 1351 : 		bound_position_to_map_volume (&new_position);

  00d4f	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  00d52	50		 push	 eax
  00d53	e8 00 00 00 00	 call	 ?bound_position_to_map_volume@@YGHPAUVEC3D@@@Z ; bound_position_to_map_volume

; 1352 : 
; 1353 : 		ASSERT(point_inside_map_volume(&new_position));

  00d58	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  00d5d	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  00d64	72 46		 jb	 SHORT $LN69@weapon_mov
  00d66	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00d6e	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _new_position$[ebp]
  00d72	72 38		 jb	 SHORT $LN69@weapon_mov
  00d74	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _new_position$[ebp+4]
  00d79	0f 2f 05 28 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+40
  00d80	72 2a		 jb	 SHORT $LN69@weapon_mov
  00d82	f3 0f 10 05 40
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+64
  00d8a	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _new_position$[ebp+4]
  00d8e	72 1c		 jb	 SHORT $LN69@weapon_mov
  00d90	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  00d95	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00d9c	72 0e		 jb	 SHORT $LN69@weapon_mov
  00d9e	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00da6	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _new_position$[ebp+8]
  00daa	73 1a		 jae	 SHORT $LN68@weapon_mov
$LN69@weapon_mov:
  00dac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00db1	05 b8 01 00 00	 add	 eax, 440		; 000001b8H
  00db6	50		 push	 eax
  00db7	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dbc	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GPKDJBLJ@point_inside_map_volume?$CI?$CGnew_po@
  00dc1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN68@weapon_mov:

; 1354 : 
; 1355 : 		set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &new_position);

  00dc6	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00dca	74 0d		 je	 SHORT $LN133@weapon_mov
  00dcc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00dcf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dd1	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv685[ebp], ecx
  00dd7	eb 27		 jmp	 SHORT $LN134@weapon_mov
$LN133@weapon_mov:
  00dd9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00ddf	81 c2 ba 01 00
	00		 add	 edx, 442		; 000001baH
  00de5	52		 push	 edx
  00de6	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00deb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00df0	50		 push	 eax
  00df1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00df6	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv685[ebp], 0
$LN134@weapon_mov:
  00e00	b9 01 00 00 00	 mov	 ecx, 1
  00e05	85 c9		 test	 ecx, ecx
  00e07	74 0c		 je	 SHORT $LN135@weapon_mov
  00e09	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv693[ebp], 8
  00e13	eb 27		 jmp	 SHORT $LN136@weapon_mov
$LN135@weapon_mov:
  00e15	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00e1b	81 c2 ba 01 00
	00		 add	 edx, 442		; 000001baH
  00e21	52		 push	 edx
  00e22	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00e2c	50		 push	 eax
  00e2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e32	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv693[ebp], 0
$LN136@weapon_mov:
  00e3c	8d 4d b4	 lea	 ecx, DWORD PTR _new_position$[ebp]
  00e3f	51		 push	 ecx
  00e40	6a 08		 push	 8
  00e42	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00e45	52		 push	 edx
  00e46	6b 85 3c ff ff
	ff 60		 imul	 eax, DWORD PTR tv685[ebp], 96
  00e4d	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv693[ebp]
  00e53	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00e5a	ff d2		 call	 edx

; 1356 : 
; 1357 : 		if (raw->kill_code == WEAPON_KILL_CODE_OK)

  00e5c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e5f	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00e65	83 e1 07	 and	 ecx, 7
  00e68	75 18		 jne	 SHORT $LN70@weapon_mov

; 1358 : 		{
; 1359 : 			raw->kill_code = WEAPON_KILL_CODE_OUT_OF_BOUNDS;

  00e6a	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00e6d	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00e73	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00e76	83 c9 02	 or	 ecx, 2
  00e79	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00e7c	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN70@weapon_mov:

; 1360 : 		}
; 1361 : 
; 1362 : 		return;

  00e82	e9 8a 06 00 00	 jmp	 $LN1@weapon_mov
$LN66@weapon_mov:

; 1363 : 	}
; 1364 : 
; 1365 : 	//
; 1366 : 	// below map ceiling
; 1367 : 	//
; 1368 : 
; 1369 : 	if (!point_below_ceiling (&new_position))

  00e87	f3 0f 10 05 40
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+64
  00e8f	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _new_position$[ebp+4]
  00e93	0f 83 ca 00 00
	00		 jae	 $LN71@weapon_mov

; 1370 : 	{
; 1371 : 		bound_position_to_map_volume (&new_position);

  00e99	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  00e9c	50		 push	 eax
  00e9d	e8 00 00 00 00	 call	 ?bound_position_to_map_volume@@YGHPAUVEC3D@@@Z ; bound_position_to_map_volume

; 1372 : 
; 1373 : 		set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &new_position);

  00ea2	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00ea6	74 0d		 je	 SHORT $LN137@weapon_mov
  00ea8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00eab	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ead	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv714[ebp], ecx
  00eb3	eb 27		 jmp	 SHORT $LN138@weapon_mov
$LN137@weapon_mov:
  00eb5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00ebb	81 c2 cc 01 00
	00		 add	 edx, 460		; 000001ccH
  00ec1	52		 push	 edx
  00ec2	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ec7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ecc	50		 push	 eax
  00ecd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ed2	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv714[ebp], 0
$LN138@weapon_mov:
  00edc	b9 01 00 00 00	 mov	 ecx, 1
  00ee1	85 c9		 test	 ecx, ecx
  00ee3	74 0c		 je	 SHORT $LN139@weapon_mov
  00ee5	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv722[ebp], 8
  00eef	eb 27		 jmp	 SHORT $LN140@weapon_mov
$LN139@weapon_mov:
  00ef1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00ef7	81 c2 cc 01 00
	00		 add	 edx, 460		; 000001ccH
  00efd	52		 push	 edx
  00efe	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f03	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00f08	50		 push	 eax
  00f09	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f0e	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv722[ebp], 0
$LN140@weapon_mov:
  00f18	8d 4d b4	 lea	 ecx, DWORD PTR _new_position$[ebp]
  00f1b	51		 push	 ecx
  00f1c	6a 08		 push	 8
  00f1e	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00f21	52		 push	 edx
  00f22	6b 85 3c ff ff
	ff 60		 imul	 eax, DWORD PTR tv714[ebp], 96
  00f29	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv722[ebp]
  00f2f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00f36	ff d2		 call	 edx

; 1374 : 
; 1375 : 		if (raw->kill_code == WEAPON_KILL_CODE_OK)

  00f38	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00f3b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00f41	83 e1 07	 and	 ecx, 7
  00f44	75 18		 jne	 SHORT $LN72@weapon_mov

; 1376 : 		{
; 1377 : 			raw->kill_code = WEAPON_KILL_CODE_OUT_OF_BOUNDS;

  00f46	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00f49	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00f4f	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00f52	83 c9 02	 or	 ecx, 2
  00f55	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00f58	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN72@weapon_mov:

; 1378 : 		}
; 1379 : 
; 1380 : 		return;

  00f5e	e9 ae 05 00 00	 jmp	 $LN1@weapon_mov
$LN71@weapon_mov:

; 1381 : 	}
; 1382 : 
; 1383 : 	ASSERT(point_inside_map_volume(&new_position));

  00f63	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  00f68	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  00f6f	72 46		 jb	 SHORT $LN74@weapon_mov
  00f71	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00f79	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _new_position$[ebp]
  00f7d	72 38		 jb	 SHORT $LN74@weapon_mov
  00f7f	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _new_position$[ebp+4]
  00f84	0f 2f 05 28 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+40
  00f8b	72 2a		 jb	 SHORT $LN74@weapon_mov
  00f8d	f3 0f 10 05 40
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+64
  00f95	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _new_position$[ebp+4]
  00f99	72 1c		 jb	 SHORT $LN74@weapon_mov
  00f9b	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  00fa0	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00fa7	72 0e		 jb	 SHORT $LN74@weapon_mov
  00fa9	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00fb1	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _new_position$[ebp+8]
  00fb5	73 1a		 jae	 SHORT $LN73@weapon_mov
$LN74@weapon_mov:
  00fb7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00fbc	05 d6 01 00 00	 add	 eax, 470		; 000001d6H
  00fc1	50		 push	 eax
  00fc2	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fc7	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GPKDJBLJ@point_inside_map_volume?$CI?$CGnew_po@
  00fcc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN73@weapon_mov:

; 1384 : 
; 1385 : 	//
; 1386 : 	// set weapon position (set again if new_position changes)
; 1387 : 	//
; 1388 : 
; 1389 : 	set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &new_position);

  00fd1	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00fd5	74 0d		 je	 SHORT $LN141@weapon_mov
  00fd7	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00fda	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fdc	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv751[ebp], ecx
  00fe2	eb 27		 jmp	 SHORT $LN142@weapon_mov
$LN141@weapon_mov:
  00fe4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  00fea	81 c2 dc 01 00
	00		 add	 edx, 476		; 000001dcH
  00ff0	52		 push	 edx
  00ff1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ff6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ffb	50		 push	 eax
  00ffc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01001	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv751[ebp], 0
$LN142@weapon_mov:
  0100b	b9 01 00 00 00	 mov	 ecx, 1
  01010	85 c9		 test	 ecx, ecx
  01012	74 0c		 je	 SHORT $LN143@weapon_mov
  01014	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv759[ebp], 8
  0101e	eb 27		 jmp	 SHORT $LN144@weapon_mov
$LN143@weapon_mov:
  01020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  01026	81 c2 dc 01 00
	00		 add	 edx, 476		; 000001dcH
  0102c	52		 push	 edx
  0102d	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  01032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01037	50		 push	 eax
  01038	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0103d	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv759[ebp], 0
$LN144@weapon_mov:
  01047	8d 4d b4	 lea	 ecx, DWORD PTR _new_position$[ebp]
  0104a	51		 push	 ecx
  0104b	6a 08		 push	 8
  0104d	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  01050	52		 push	 edx
  01051	6b 85 3c ff ff
	ff 60		 imul	 eax, DWORD PTR tv751[ebp], 96
  01058	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv759[ebp]
  0105e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  01065	ff d2		 call	 edx

; 1390 : 
; 1391 : 	//
; 1392 : 	// terrain collision
; 1393 : 	//
; 1394 : 
; 1395 : 	hit_ground = FALSE;

  01067	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _hit_ground$[ebp], 0

; 1396 : 
; 1397 : 	if (point_below_ground (&new_position))

  0106e	51		 push	 ecx
  0106f	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  01074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01079	51		 push	 ecx
  0107a	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  0107f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01084	e8 00 00 00 00	 call	 ?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_max_elevation
  01089	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv1370[ebp]
  0108f	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv1370[ebp]
  01097	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _new_position$[ebp+4]
  0109b	76 3d		 jbe	 SHORT $LN75@weapon_mov
  0109d	6a 00		 push	 0
  0109f	51		 push	 ecx
  010a0	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  010a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010aa	51		 push	 ecx
  010ab	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  010b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b5	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  010ba	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv1378[ebp]
  010c0	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv1378[ebp]
  010c8	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _new_position$[ebp+4]
  010cc	76 0c		 jbe	 SHORT $LN75@weapon_mov

; 1398 : 	{
; 1399 : 		hit_ground = TRUE;

  010ce	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _hit_ground$[ebp], 1

; 1400 : 	}
; 1401 : 	else

  010d5	e9 de 01 00 00	 jmp	 $LN5@weapon_mov
$LN75@weapon_mov:

; 1402 : 	{
; 1403 : 		if (high_precision_collision)

  010da	83 7d ec 00	 cmp	 DWORD PTR _high_precision_collision$[ebp], 0
  010de	0f 84 d4 01 00
	00		 je	 $LN5@weapon_mov

; 1404 : 		{
; 1405 : 			dx = (new_position.x - old_position.x) * 0.1;

  010e4	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  010e9	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _old_position$[ebp]
  010ee	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  010f2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  010fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010fe	f3 0f 11 45 e0	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1406 : 			dy = (new_position.y - old_position.y) * 0.1;

  01103	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _new_position$[ebp+4]
  01108	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _old_position$[ebp+4]
  0110d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01111	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  01119	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0111d	f3 0f 11 45 dc	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1407 : 			dz = (new_position.z - old_position.z) * 0.1;

  01122	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  01127	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _old_position$[ebp+8]
  0112c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01130	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  01138	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0113c	f3 0f 11 45 d8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 1408 : 
; 1409 : 			test_point = old_position;

  01141	8b 45 c0	 mov	 eax, DWORD PTR _old_position$[ebp]
  01144	89 45 90	 mov	 DWORD PTR _test_point$[ebp], eax
  01147	8b 4d c4	 mov	 ecx, DWORD PTR _old_position$[ebp+4]
  0114a	89 4d 94	 mov	 DWORD PTR _test_point$[ebp+4], ecx
  0114d	8b 55 c8	 mov	 edx, DWORD PTR _old_position$[ebp+8]
  01150	89 55 98	 mov	 DWORD PTR _test_point$[ebp+8], edx

; 1410 : 
; 1411 : 			//
; 1412 : 			// new_position has already been tested so there is no need to test again (also the interpolated new_position
; 1413 : 			// would be inaccurate and may be tested as above ground when it is below)
; 1414 : 			//
; 1415 : 
; 1416 : 			for (i = 0; i < 9; i++)

  01153	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0115a	eb 09		 jmp	 SHORT $LN6@weapon_mov
$LN4@weapon_mov:
  0115c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0115f	83 c0 01	 add	 eax, 1
  01162	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN6@weapon_mov:
  01165	83 7d f8 09	 cmp	 DWORD PTR _i$[ebp], 9
  01169	0f 8d 49 01 00
	00		 jge	 $LN5@weapon_mov

; 1417 : 			{
; 1418 : 				test_point.x += dx;

  0116f	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _test_point$[ebp]
  01174	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _dx$[ebp]
  01179	f3 0f 11 45 90	 movss	 DWORD PTR _test_point$[ebp], xmm0

; 1419 : 				test_point.y += dy;

  0117e	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _test_point$[ebp+4]
  01183	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _dy$[ebp]
  01188	f3 0f 11 45 94	 movss	 DWORD PTR _test_point$[ebp+4], xmm0

; 1420 : 				test_point.z += dz;

  0118d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _test_point$[ebp+8]
  01192	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _dz$[ebp]
  01197	f3 0f 11 45 98	 movss	 DWORD PTR _test_point$[ebp+8], xmm0

; 1421 : 
; 1422 : 				if (point_inside_map_area (&test_point))

  0119c	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _test_point$[ebp]
  011a1	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  011a8	0f 82 05 01 00
	00		 jb	 $LN81@weapon_mov
  011ae	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  011b6	0f 2f 45 90	 comiss	 xmm0, DWORD PTR _test_point$[ebp]
  011ba	0f 82 f3 00 00
	00		 jb	 $LN81@weapon_mov
  011c0	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _test_point$[ebp+8]
  011c5	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  011cc	0f 82 e1 00 00
	00		 jb	 $LN81@weapon_mov
  011d2	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  011da	0f 2f 45 98	 comiss	 xmm0, DWORD PTR _test_point$[ebp+8]
  011de	0f 82 cf 00 00
	00		 jb	 $LN81@weapon_mov

; 1423 : 				{
; 1424 : 					if (point_below_ground (&test_point))

  011e4	51		 push	 ecx
  011e5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _test_point$[ebp+8]
  011ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ef	51		 push	 ecx
  011f0	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _test_point$[ebp]
  011f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011fa	e8 00 00 00 00	 call	 ?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_max_elevation
  011ff	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv1403[ebp]
  01205	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv1403[ebp]
  0120d	0f 2f 45 94	 comiss	 xmm0, DWORD PTR _test_point$[ebp+4]
  01211	76 4e		 jbe	 SHORT $LN79@weapon_mov
  01213	6a 00		 push	 0
  01215	51		 push	 ecx
  01216	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _test_point$[ebp+8]
  0121b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01220	51		 push	 ecx
  01221	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _test_point$[ebp]
  01226	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122b	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  01230	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv1411[ebp]
  01236	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv1411[ebp]
  0123e	0f 2f 45 94	 comiss	 xmm0, DWORD PTR _test_point$[ebp+4]
  01242	76 1d		 jbe	 SHORT $LN79@weapon_mov

; 1425 : 					{
; 1426 : 						hit_ground = TRUE;

  01244	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _hit_ground$[ebp], 1

; 1427 : 
; 1428 : 						new_position = test_point;

  0124b	8b 45 90	 mov	 eax, DWORD PTR _test_point$[ebp]
  0124e	89 45 b4	 mov	 DWORD PTR _new_position$[ebp], eax
  01251	8b 4d 94	 mov	 ecx, DWORD PTR _test_point$[ebp+4]
  01254	89 4d b8	 mov	 DWORD PTR _new_position$[ebp+4], ecx
  01257	8b 55 98	 mov	 edx, DWORD PTR _test_point$[ebp+8]
  0125a	89 55 bc	 mov	 DWORD PTR _new_position$[ebp+8], edx

; 1429 : 
; 1430 : 						break;

  0125d	eb 59		 jmp	 SHORT $LN5@weapon_mov

; 1431 : 					}
; 1432 : 					else

  0125f	eb 52		 jmp	 SHORT $LN81@weapon_mov
$LN79@weapon_mov:

; 1433 : 					{
; 1434 : 						if (draw_weapon_terrain_los_markers && (get_view_mode () == VIEW_MODE_EXTERNAL))

  01261	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_weapon_terrain_los_markers@@3HA, 0 ; draw_weapon_terrain_los_markers
  01268	74 49		 je	 SHORT $LN81@weapon_mov
  0126a	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  01271	75 40		 jne	 SHORT $LN81@weapon_mov

; 1435 : 						{
; 1436 : 							create_rotated_debug_3d_object (&test_point, 0.0, 0.0, 0.0, OBJECT_3D_INTERCEPT_POINT_WHITE, 0.0, 0.25);

  01273	51		 push	 ecx
  01274	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0127c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01281	51		 push	 ecx
  01282	0f 57 c0	 xorps	 xmm0, xmm0
  01285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0128a	68 5f 0a 00 00	 push	 2655			; 00000a5fH
  0128f	51		 push	 ecx
  01290	0f 57 c0	 xorps	 xmm0, xmm0
  01293	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01298	51		 push	 ecx
  01299	0f 57 c0	 xorps	 xmm0, xmm0
  0129c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a1	51		 push	 ecx
  012a2	0f 57 c0	 xorps	 xmm0, xmm0
  012a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012aa	8d 45 90	 lea	 eax, DWORD PTR _test_point$[ebp]
  012ad	50		 push	 eax
  012ae	e8 00 00 00 00	 call	 ?create_rotated_debug_3d_object@@YGPAUDEBUG_3D_OBJECT@@PAUVEC3D@@MMMHMM@Z ; create_rotated_debug_3d_object
$LN81@weapon_mov:

; 1437 : 						}
; 1438 : 					}
; 1439 : 				}
; 1440 : 			}

  012b3	e9 a4 fe ff ff	 jmp	 $LN4@weapon_mov
$LN5@weapon_mov:

; 1441 : 		}
; 1442 : 	}
; 1443 : 
; 1444 : 	if (hit_ground)

  012b8	83 7d e8 00	 cmp	 DWORD PTR _hit_ground$[ebp], 0
  012bc	0f 84 4f 02 00
	00		 je	 $LN91@weapon_mov

; 1445 : 	{
; 1446 : 		terrain_class = get_ground_impact_point (&old_position, &new_position, &new_position);

  012c2	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  012c5	50		 push	 eax
  012c6	8d 4d b4	 lea	 ecx, DWORD PTR _new_position$[ebp]
  012c9	51		 push	 ecx
  012ca	8d 55 c0	 lea	 edx, DWORD PTR _old_position$[ebp]
  012cd	52		 push	 edx
  012ce	e8 00 00 00 00	 call	 ?get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z ; get_ground_impact_point
  012d3	89 45 e4	 mov	 DWORD PTR _terrain_class$[ebp], eax

; 1447 : 
; 1448 : 		if (draw_weapon_terrain_los_markers && (get_view_mode () == VIEW_MODE_EXTERNAL))

  012d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_weapon_terrain_los_markers@@3HA, 0 ; draw_weapon_terrain_los_markers
  012dd	74 4e		 je	 SHORT $LN83@weapon_mov
  012df	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  012e6	75 45		 jne	 SHORT $LN83@weapon_mov

; 1449 : 		{
; 1450 : 			create_rotated_debug_3d_object (&new_position, 0.0, 0.0, 0.0, OBJECT_3D_INTERCEPT_POINT_RED, 3.0, 0.25);

  012e8	51		 push	 ecx
  012e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  012f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f6	51		 push	 ecx
  012f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  012ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01304	68 5e 0a 00 00	 push	 2654			; 00000a5eH
  01309	51		 push	 ecx
  0130a	0f 57 c0	 xorps	 xmm0, xmm0
  0130d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01312	51		 push	 ecx
  01313	0f 57 c0	 xorps	 xmm0, xmm0
  01316	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0131b	51		 push	 ecx
  0131c	0f 57 c0	 xorps	 xmm0, xmm0
  0131f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01324	8d 45 b4	 lea	 eax, DWORD PTR _new_position$[ebp]
  01327	50		 push	 eax
  01328	e8 00 00 00 00	 call	 ?create_rotated_debug_3d_object@@YGPAUDEBUG_3D_OBJECT@@PAUVEC3D@@MMMHMM@Z ; create_rotated_debug_3d_object
$LN83@weapon_mov:

; 1451 : 		}
; 1452 : 
; 1453 : 		set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &new_position);

  0132d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  01331	74 0d		 je	 SHORT $LN145@weapon_mov
  01333	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  01336	8b 08		 mov	 ecx, DWORD PTR [eax]
  01338	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv898[ebp], ecx
  0133e	eb 27		 jmp	 SHORT $LN146@weapon_mov
$LN145@weapon_mov:
  01340	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  01346	81 c2 1c 02 00
	00		 add	 edx, 540		; 0000021cH
  0134c	52		 push	 edx
  0134d	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  01352	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01357	50		 push	 eax
  01358	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0135d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv898[ebp], 0
$LN146@weapon_mov:
  01367	b9 01 00 00 00	 mov	 ecx, 1
  0136c	85 c9		 test	 ecx, ecx
  0136e	74 0c		 je	 SHORT $LN147@weapon_mov
  01370	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv906[ebp], 8
  0137a	eb 27		 jmp	 SHORT $LN148@weapon_mov
$LN147@weapon_mov:
  0137c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_movement@@YGXPAUENTITY@@@Z@4JA
  01382	81 c2 1c 02 00
	00		 add	 edx, 540		; 0000021cH
  01388	52		 push	 edx
  01389	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IDALOIKN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0138e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01393	50		 push	 eax
  01394	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01399	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv906[ebp], 0
$LN148@weapon_mov:
  013a3	8d 4d b4	 lea	 ecx, DWORD PTR _new_position$[ebp]
  013a6	51		 push	 ecx
  013a7	6a 08		 push	 8
  013a9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  013ac	52		 push	 edx
  013ad	6b 85 3c ff ff
	ff 60		 imul	 eax, DWORD PTR tv898[ebp], 96
  013b4	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv906[ebp]
  013ba	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  013c1	ff d2		 call	 edx

; 1454 : 
; 1455 : 		if (terrain_class == TERRAIN_CLASS_WATER)

  013c3	83 7d e4 01	 cmp	 DWORD PTR _terrain_class$[ebp], 1
  013c7	75 2b		 jne	 SHORT $LN84@weapon_mov

; 1456 : 		{
; 1457 : 			if (raw->kill_code == WEAPON_KILL_CODE_OK)

  013c9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  013cc	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  013d2	83 e1 07	 and	 ecx, 7
  013d5	75 18		 jne	 SHORT $LN86@weapon_mov

; 1458 : 			{
; 1459 : 				raw->kill_code = WEAPON_KILL_CODE_HIT_WATER;

  013d7	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  013da	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  013e0	83 e1 f8	 and	 ecx, -8			; fffffff8H
  013e3	83 c9 04	 or	 ecx, 4
  013e6	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  013e9	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN86@weapon_mov:

; 1460 : 			}
; 1461 : 		}
; 1462 : 		else

  013ef	e9 1d 01 00 00	 jmp	 $LN91@weapon_mov
$LN84@weapon_mov:

; 1463 : 		{
; 1464 : 			if (weapon_database[raw->mob.sub_type].survive_ground_impact)

  013f4	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  013f7	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  013fd	83 b9 6c 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+108], 0
  01404	0f 84 e1 00 00
	00		 je	 $LN87@weapon_mov

; 1465 : 			{
; 1466 : 				//
; 1467 : 				// align weapon with terrain
; 1468 : 				//
; 1469 : 
; 1470 : 				heading = get_heading_from_attitude_matrix (raw->mob.attitude);

  0140a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0140f	d1 e0		 shl	 eax, 1
  01411	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  01414	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  01418	b8 04 00 00 00	 mov	 eax, 4
  0141d	d1 e0		 shl	 eax, 1
  0141f	51		 push	 ecx
  01420	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  01425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0142f	d1 e1		 shl	 ecx, 1
  01431	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  01434	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  01438	b9 04 00 00 00	 mov	 ecx, 4
  0143d	6b d1 00	 imul	 edx, ecx, 0
  01440	51		 push	 ecx
  01441	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  01446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0144b	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  01450	d9 5d cc	 fstp	 DWORD PTR _heading$[ebp]

; 1471 : 
; 1472 : 				get_3d_terrain_face_normal (&face_normal, new_position.x, new_position.z);

  01453	51		 push	 ecx
  01454	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _new_position$[ebp+8]
  01459	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0145e	51		 push	 ecx
  0145f	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _new_position$[ebp]
  01464	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01469	8d 45 9c	 lea	 eax, DWORD PTR _face_normal$[ebp]
  0146c	50		 push	 eax
  0146d	e8 00 00 00 00	 call	 ?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z ; get_3d_terrain_face_normal

; 1473 : 
; 1474 : 				get_3d_transformation_matrix_from_face_normal_and_heading (raw->mob.attitude, &face_normal, heading);

  01472	51		 push	 ecx
  01473	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  01478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0147d	8d 45 9c	 lea	 eax, DWORD PTR _face_normal$[ebp]
  01480	50		 push	 eax
  01481	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  01484	83 c1 10	 add	 ecx, 16			; 00000010H
  01487	51		 push	 ecx
  01488	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix_from_face_normal_and_heading@@YGXQAY02MPBUVEC3D@@M@Z ; get_3d_transformation_matrix_from_face_normal_and_heading

; 1475 : 
; 1476 : 				//
; 1477 : 				// smoke grenade effect
; 1478 : 				//
; 1479 : 
; 1480 : 				if (raw->mob.sub_type == ENTITY_SUB_TYPE_WEAPON_SMOKE_GRENADE)

  0148d	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  01490	83 38 45	 cmp	 DWORD PTR [eax], 69	; 00000045H
  01493	75 3f		 jne	 SHORT $LN90@weapon_mov

; 1481 : 				{
; 1482 : 					if (get_comms_model () == COMMS_MODEL_SERVER)

  01495	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0149c	75 36		 jne	 SHORT $LN90@weapon_mov

; 1483 : 					{
; 1484 : 						raw->kill_code = WEAPON_KILL_CODE_HIT_LAND;

  0149e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  014a1	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  014a7	83 e1 f8	 and	 ecx, -8			; fffffff8H
  014aa	83 c9 03	 or	 ecx, 3
  014ad	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  014b0	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 1485 : 
; 1486 : 						create_client_server_weapon_killed_explosion_effect (en);

  014b6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  014b9	50		 push	 eax
  014ba	e8 00 00 00 00	 call	 ?create_client_server_weapon_killed_explosion_effect@@YGXPAUENTITY@@@Z ; create_client_server_weapon_killed_explosion_effect

; 1487 : 
; 1488 : 						raw->kill_code = WEAPON_KILL_CODE_OK;

  014bf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  014c2	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  014c8	83 e1 f8	 and	 ecx, -8			; fffffff8H
  014cb	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  014ce	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN90@weapon_mov:

; 1489 : 					}
; 1490 : 				}
; 1491 : 
; 1492 : 				raw->weapon_on_ground = TRUE;

  014d4	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  014d7	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  014dd	83 c9 08	 or	 ecx, 8
  014e0	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  014e3	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 1493 : 			}
; 1494 : 			else

  014e9	eb 26		 jmp	 SHORT $LN91@weapon_mov
$LN87@weapon_mov:

; 1495 : 			{
; 1496 : 				if (raw->kill_code == WEAPON_KILL_CODE_OK)

  014eb	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  014ee	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  014f4	83 e1 07	 and	 ecx, 7
  014f7	75 18		 jne	 SHORT $LN91@weapon_mov

; 1497 : 				{
; 1498 : 					raw->kill_code = WEAPON_KILL_CODE_HIT_LAND;

  014f9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  014fc	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01502	83 e1 f8	 and	 ecx, -8			; fffffff8H
  01505	83 c9 03	 or	 ecx, 3
  01508	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0150b	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN91@weapon_mov:
$LN1@weapon_mov:

; 1499 : 				}
; 1500 : 			}
; 1501 : 		}
; 1502 : 	}
; 1503 : 
; 1504 : 	////////////////////////////////////////
; 1505 : 	//
; 1506 : 	// draw debug trail
; 1507 : 	//
; 1508 : 	////////////////////////////////////////
; 1509 : 
; 1510 : 	#if DEBUG_MODULE
; 1511 : 
; 1512 : 	if (raw->weapon_lifetime > 0.0)
; 1513 : 	{
; 1514 : 		create_debug_3d_line (&old_position, &new_position, sys_col_red, 30.0);
; 1515 : 	}
; 1516 : 	else
; 1517 : 	{
; 1518 : 		create_debug_3d_line (&old_position, &new_position, sys_col_yellow, 30.0);
; 1519 : 	}
; 1520 : 
; 1521 : 	create_vectored_debug_3d_object (&new_position, &raw->mob.zv, OBJECT_3D_VECTOR_GREEN, 0.0, DEBUG_3D_OBJECT_SCALE);
; 1522 : 
; 1523 : 	#endif
; 1524 : }

  01511	5f		 pop	 edi
  01512	5e		 pop	 esi
  01513	5b		 pop	 ebx
  01514	8b e5		 mov	 esp, ebp
  01516	5d		 pop	 ebp
  01517	c2 04 00	 ret	 4
  0151a	66 90		 npad	 2
$LN149@weapon_mov:
  0151c	00 00 00 00	 DD	 $LN12@weapon_mov
  01520	00 00 00 00	 DD	 $LN13@weapon_mov
  01524	00 00 00 00	 DD	 $LN14@weapon_mov
  01528	00 00 00 00	 DD	 $LN15@weapon_mov
  0152c	00 00 00 00	 DD	 $LN21@weapon_mov
  01530	00 00 00 00	 DD	 $LN33@weapon_mov
  01534	00 00 00 00	 DD	 $LN36@weapon_mov
  01538	00 00 00 00	 DD	 $LN37@weapon_mov
  0153c	00 00 00 00	 DD	 $LN38@weapon_mov
?weapon_movement@@YGXPAUENTITY@@@Z ENDP			; weapon_movement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?floor@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?floor@@YGMM@Z PROC					; floor, COMDAT

; 122  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 123  : 	return (_CSTD floorf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _floorf
  00019	83 c4 04	 add	 esp, 4

; 124  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?floor@@YGMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?atan@@YGMM@Z PROC					; atan, COMDAT

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 47   : 	return (_CSTD atanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _atanf
  00019	83 c4 04	 add	 esp, 4

; 48   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?atan@@YGMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?acos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?acos@@YGMM@Z PROC					; acos, COMDAT

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : 	return (_CSTD acosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _acosf
  00019	83 c4 04	 add	 esp, 4

; 28   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?acos@@YGMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 685  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 686  :             return (float)floor(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  0001c	83 c4 08	 add	 esp, 8
  0001f	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00022	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 687  :         }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 638  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  :             return (float)atan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _atan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 640  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 624  :             return (float)acos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _acos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 625  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
