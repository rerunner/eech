; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_paint.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?reset_ui_repaint_area@@YGXXZ			; reset_ui_repaint_area
PUBLIC	?set_ui_repaint_area@@YGXHHHH@Z			; set_ui_repaint_area
PUBLIC	?get_ui_repaint_area@@YGXPAH000@Z		; get_ui_repaint_area
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?get_screen_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_width
EXTRN	?get_screen_height@@YGHPAUSCREEN@@@Z:PROC	; get_screen_height
EXTRN	?set_ui_redraw@@YGXH@Z:PROC			; set_ui_redraw
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
_BSS	SEGMENT
?repaint_x_min@@3HA DD 01H DUP (?)			; repaint_x_min
?repaint_y_min@@3HA DD 01H DUP (?)			; repaint_y_min
?repaint_x_max@@3HA DD 01H DUP (?)			; repaint_x_max
?repaint_y_max@@3HA DD 01H DUP (?)			; repaint_y_max
_BSS	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?no_area_defined@@3HA DD 01H				; no_area_defined
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_paint.c
;	COMDAT ?get_ui_repaint_area@@YGXPAH000@Z
_TEXT	SEGMENT
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?get_ui_repaint_area@@YGXPAH000@Z PROC			; get_ui_repaint_area, COMDAT

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 149  : 
; 150  : 	*x_min = repaint_x_min;

  00009	8b 45 08	 mov	 eax, DWORD PTR _x_min$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?repaint_x_min@@3HA
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 151  : 
; 152  : 	*y_min = repaint_y_min;

  00014	8b 45 0c	 mov	 eax, DWORD PTR _y_min$[ebp]
  00017	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?repaint_y_min@@3HA
  0001d	89 08		 mov	 DWORD PTR [eax], ecx

; 153  : 
; 154  : 	*x_max = repaint_x_max;

  0001f	8b 45 10	 mov	 eax, DWORD PTR _x_max$[ebp]
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?repaint_x_max@@3HA
  00028	89 08		 mov	 DWORD PTR [eax], ecx

; 155  : 
; 156  : 	*y_max = repaint_y_max;

  0002a	8b 45 14	 mov	 eax, DWORD PTR _y_max$[ebp]
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?repaint_y_max@@3HA
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 157  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 10 00	 ret	 16			; 00000010H
?get_ui_repaint_area@@YGXPAH000@Z ENDP			; get_ui_repaint_area
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_paint.c
;	COMDAT ?set_ui_repaint_area@@YGXHHHH@Z
_TEXT	SEGMENT
tv95 = -80						; size = 4
tv91 = -80						; size = 4
tv87 = -80						; size = 4
tv83 = -80						; size = 4
tv128 = -76						; size = 4
tv92 = -76						; size = 4
tv88 = -76						; size = 4
tv84 = -76						; size = 4
_screen_height$ = -8					; size = 4
_screen_width$ = -4					; size = 4
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?set_ui_repaint_area@@YGXHHHH@Z PROC			; set_ui_repaint_area, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 
; 99   : 	int
; 100  : 		screen_width,
; 101  : 		screen_height;
; 102  : 
; 103  : 	if (no_area_defined)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?no_area_defined@@3HA, 0
  00010	74 2c		 je	 SHORT $LN2@set_ui_rep

; 104  : 	{
; 105  : 	
; 106  : 		repaint_x_min = x_min;

  00012	8b 45 08	 mov	 eax, DWORD PTR _x_min$[ebp]
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?repaint_x_min@@3HA, eax

; 107  : 	
; 108  : 		repaint_y_min = y_min;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _y_min$[ebp]
  0001d	a3 00 00 00 00	 mov	 DWORD PTR ?repaint_y_min@@3HA, eax

; 109  : 	
; 110  : 		repaint_x_max = x_max;

  00022	8b 45 10	 mov	 eax, DWORD PTR _x_max$[ebp]
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?repaint_x_max@@3HA, eax

; 111  : 	
; 112  : 		repaint_y_max = y_max;

  0002a	8b 45 14	 mov	 eax, DWORD PTR _y_max$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR ?repaint_y_max@@3HA, eax

; 113  : 
; 114  : 		no_area_defined = FALSE;

  00032	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?no_area_defined@@3HA, 0

; 115  : 	}
; 116  : 	else

  0003c	eb 58		 jmp	 SHORT $LN3@set_ui_rep
$LN2@set_ui_rep:

; 117  : 	{
; 118  : 	
; 119  : 		repaint_x_min = min (repaint_x_min, x_min);

  0003e	8d 45 08	 lea	 eax, DWORD PTR _x_min$[ebp]
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ?repaint_x_min@@3HA
  00047	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_x_min@@3HA, ecx

; 120  : 	
; 121  : 		repaint_y_min = min (repaint_y_min, y_min);

  00054	8d 45 0c	 lea	 eax, DWORD PTR _y_min$[ebp]
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ?repaint_y_min@@3HA
  0005d	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_y_min@@3HA, ecx

; 122  : 	
; 123  : 		repaint_x_max = max (repaint_x_max, x_max);

  0006a	8d 45 10	 lea	 eax, DWORD PTR _x_max$[ebp]
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ?repaint_x_max@@3HA
  00073	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_x_max@@3HA, ecx

; 124  : 	
; 125  : 		repaint_y_max = max (repaint_y_max, y_max);

  00080	8d 45 14	 lea	 eax, DWORD PTR _y_max$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ?repaint_y_max@@3HA
  00089	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_y_max@@3HA, ecx
$LN3@set_ui_rep:

; 126  : 	}
; 127  : 
; 128  : 	screen_width = get_screen_width (active_screen);

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  000a1	89 45 fc	 mov	 DWORD PTR _screen_width$[ebp], eax

; 129  : 
; 130  : 	screen_height = get_screen_height (active_screen);

  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  000af	89 45 f8	 mov	 DWORD PTR _screen_height$[ebp], eax

; 131  : 
; 132  : 	repaint_x_min = bound (repaint_x_min, 0, screen_width);

  000b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?repaint_x_min@@3HA, 0
  000b9	7d 09		 jge	 SHORT $LN7@set_ui_rep
  000bb	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
  000c2	eb 21		 jmp	 SHORT $LN8@set_ui_rep
$LN7@set_ui_rep:
  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?repaint_x_min@@3HA
  000c9	3b 45 fc	 cmp	 eax, DWORD PTR _screen_width$[ebp]
  000cc	7e 08		 jle	 SHORT $LN5@set_ui_rep
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _screen_width$[ebp]
  000d1	89 4d b0	 mov	 DWORD PTR tv83[ebp], ecx
  000d4	eb 09		 jmp	 SHORT $LN6@set_ui_rep
$LN5@set_ui_rep:
  000d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?repaint_x_min@@3HA
  000dc	89 55 b0	 mov	 DWORD PTR tv83[ebp], edx
$LN6@set_ui_rep:
  000df	8b 45 b0	 mov	 eax, DWORD PTR tv83[ebp]
  000e2	89 45 b4	 mov	 DWORD PTR tv84[ebp], eax
$LN8@set_ui_rep:
  000e5	8b 4d b4	 mov	 ecx, DWORD PTR tv84[ebp]
  000e8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_x_min@@3HA, ecx

; 133  : 
; 134  : 	repaint_y_min = bound (repaint_y_min, 0, screen_height);

  000ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?repaint_y_min@@3HA, 0
  000f5	7d 09		 jge	 SHORT $LN11@set_ui_rep
  000f7	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
  000fe	eb 21		 jmp	 SHORT $LN12@set_ui_rep
$LN11@set_ui_rep:
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?repaint_y_min@@3HA
  00105	3b 45 f8	 cmp	 eax, DWORD PTR _screen_height$[ebp]
  00108	7e 08		 jle	 SHORT $LN9@set_ui_rep
  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _screen_height$[ebp]
  0010d	89 4d b0	 mov	 DWORD PTR tv87[ebp], ecx
  00110	eb 09		 jmp	 SHORT $LN10@set_ui_rep
$LN9@set_ui_rep:
  00112	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?repaint_y_min@@3HA
  00118	89 55 b0	 mov	 DWORD PTR tv87[ebp], edx
$LN10@set_ui_rep:
  0011b	8b 45 b0	 mov	 eax, DWORD PTR tv87[ebp]
  0011e	89 45 b4	 mov	 DWORD PTR tv88[ebp], eax
$LN12@set_ui_rep:
  00121	8b 4d b4	 mov	 ecx, DWORD PTR tv88[ebp]
  00124	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_y_min@@3HA, ecx

; 135  : 
; 136  : 	repaint_x_max = bound (repaint_x_max, 0, screen_width);

  0012a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?repaint_x_max@@3HA, 0
  00131	7d 09		 jge	 SHORT $LN15@set_ui_rep
  00133	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
  0013a	eb 21		 jmp	 SHORT $LN16@set_ui_rep
$LN15@set_ui_rep:
  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?repaint_x_max@@3HA
  00141	3b 45 fc	 cmp	 eax, DWORD PTR _screen_width$[ebp]
  00144	7e 08		 jle	 SHORT $LN13@set_ui_rep
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _screen_width$[ebp]
  00149	89 4d b0	 mov	 DWORD PTR tv91[ebp], ecx
  0014c	eb 09		 jmp	 SHORT $LN14@set_ui_rep
$LN13@set_ui_rep:
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?repaint_x_max@@3HA
  00154	89 55 b0	 mov	 DWORD PTR tv91[ebp], edx
$LN14@set_ui_rep:
  00157	8b 45 b0	 mov	 eax, DWORD PTR tv91[ebp]
  0015a	89 45 b4	 mov	 DWORD PTR tv92[ebp], eax
$LN16@set_ui_rep:
  0015d	8b 4d b4	 mov	 ecx, DWORD PTR tv92[ebp]
  00160	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_x_max@@3HA, ecx

; 137  : 
; 138  : 	repaint_y_max = bound (repaint_y_max, 0, screen_height);

  00166	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?repaint_y_max@@3HA, 0
  0016d	7d 09		 jge	 SHORT $LN19@set_ui_rep
  0016f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
  00176	eb 21		 jmp	 SHORT $LN20@set_ui_rep
$LN19@set_ui_rep:
  00178	a1 00 00 00 00	 mov	 eax, DWORD PTR ?repaint_y_max@@3HA
  0017d	3b 45 f8	 cmp	 eax, DWORD PTR _screen_height$[ebp]
  00180	7e 08		 jle	 SHORT $LN17@set_ui_rep
  00182	8b 4d f8	 mov	 ecx, DWORD PTR _screen_height$[ebp]
  00185	89 4d b0	 mov	 DWORD PTR tv95[ebp], ecx
  00188	eb 09		 jmp	 SHORT $LN18@set_ui_rep
$LN17@set_ui_rep:
  0018a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?repaint_y_max@@3HA
  00190	89 55 b0	 mov	 DWORD PTR tv95[ebp], edx
$LN18@set_ui_rep:
  00193	8b 45 b0	 mov	 eax, DWORD PTR tv95[ebp]
  00196	89 45 b4	 mov	 DWORD PTR tv128[ebp], eax
$LN20@set_ui_rep:
  00199	8b 4d b4	 mov	 ecx, DWORD PTR tv128[ebp]
  0019c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?repaint_y_max@@3HA, ecx

; 139  : 
; 140  : 	set_ui_redraw (TRUE);

  001a2	6a 01		 push	 1
  001a4	e8 00 00 00 00	 call	 ?set_ui_redraw@@YGXH@Z	; set_ui_redraw

; 141  : }

  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi
  001ab	5b		 pop	 ebx
  001ac	8b e5		 mov	 esp, ebp
  001ae	5d		 pop	 ebp
  001af	c2 10 00	 ret	 16			; 00000010H
?set_ui_repaint_area@@YGXHHHH@Z ENDP			; set_ui_repaint_area
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_paint.c
;	COMDAT ?reset_ui_repaint_area@@YGXXZ
_TEXT	SEGMENT
?reset_ui_repaint_area@@YGXXZ PROC			; reset_ui_repaint_area, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 88   : 
; 89   : 	no_area_defined = TRUE;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?no_area_defined@@3HA, 1

; 90   : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?reset_ui_repaint_area@@YGXXZ ENDP			; reset_ui_repaint_area
_TEXT	ENDS
END
