; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfscanf_l
PUBLIC	_fscanf
PUBLIC	_floorf
PUBLIC	?floor@@YGMM@Z					; floor
PUBLIC	?get_crew_role@@YG?AW4CREW_ROLES@@XZ		; get_crew_role
PUBLIC	?read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z	; read_motion_values
PUBLIC	?interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z ; interpolate_motion_values
PUBLIC	?initialise_common_virtual_cockpit_cameras@@YGXXZ ; initialise_common_virtual_cockpit_cameras
PUBLIC	?deinitialise_common_virtual_cockpit_cameras@@YGXXZ ; deinitialise_common_virtual_cockpit_cameras
PUBLIC	?get_num_virtual_cockpit_cameras@@YGHW4CREW_ROLES@@@Z ; get_num_virtual_cockpit_cameras
PUBLIC	?get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z ; get_current_virtual_cockpit_camera
PUBLIC	?select_next_current_virtual_cockpit_camera@@YGXW4CREW_ROLES@@@Z ; select_next_current_virtual_cockpit_camera
PUBLIC	?get_crew_camera_index@@YGHW4CREW_ROLES@@@Z	; get_crew_camera_index
PUBLIC	?initialise_common_crew_skins@@YGXXZ		; initialise_common_crew_skins
PUBLIC	?deinitialise_common_crew_skins@@YGXXZ		; deinitialise_common_crew_skins
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??get_crew_role@@YG?AW4CREW_ROLES@@XZ@4JA ; `get_crew_role'::`1'::__LINE__Var
PUBLIC	??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	?__LINE__Var@?0??read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z@4JA ; `read_motion_values'::`1'::__LINE__Var
PUBLIC	??_C@_08DIIFBLLL@filespec@			; `string'
PUBLIC	??_C@_0P@MGLAOGAA@num_frames?5?$DO?50@		; `string'
PUBLIC	??_C@_05HIFJDKLD@array@				; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_04PNKHMHOI@LWMO@				; `string'
PUBLIC	??_C@_0CC@CHNKGIAM@?$CFs?5is?5not?5a?5Lightwave?5motion?5fi@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0EK@KCDEFANI@Incorrect?5number?5of?5frames?5in?5m@ ; `string'
PUBLIC	??_C@_0BL@PNBJJOIP@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf@ ; `string'
PUBLIC	??_C@_0P@GNCPONOH@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z@4JA ; `interpolate_motion_values'::`1'::__LINE__Var
PUBLIC	??_C@_0BA@NKDMILOA@array_width?5?$DO?50@	; `string'
PUBLIC	??_C@_06KJFADLGN@result@			; `string'
PUBLIC	?__LINE__Var@?0??get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z@4JA ; `get_current_virtual_cockpit_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0GH@HMPHAHEP@get_number_of_3d_object_cameras@ ; `string'
PUBLIC	??_C@_0GF@HPPDOBPA@get_number_of_3d_object_cameras@ ; `string'
PUBLIC	??_C@_0CF@OAGBPBAE@GRAPHICS?2SKINS?2USA?2PILOT?2HI_FAC@ ; `string'
PUBLIC	??_C@_0CG@MEDCGGID@GRAPHICS?2SKINS?2USA?2PILOT?2LOW_FA@ ; `string'
PUBLIC	??_C@_0CC@HEFDNBHB@GRAPHICS?2SKINS?2USA?2PILOT?2NECK?4B@ ; `string'
PUBLIC	??_C@_0CD@HJBKPHK@GRAPHICS?2SKINS?2USA?2PILOT?2HANDS?4@ ; `string'
PUBLIC	??_C@_0CD@CDDKOMH@GRAPHICS?2SKINS?2USA?2CPG?2HI_FACE?4@ ; `string'
PUBLIC	??_C@_0CE@MGLNKHNG@GRAPHICS?2SKINS?2USA?2CPG?2LOW_FACE@ ; `string'
PUBLIC	??_C@_0CA@OLDABBOB@GRAPHICS?2SKINS?2USA?2CPG?2NECK?4BMP@ ; `string'
PUBLIC	??_C@_0CB@PHABFPPO@GRAPHICS?2SKINS?2USA?2CPG?2HANDS?4BM@ ; `string'
PUBLIC	??_C@_0CJ@KLAHLPFF@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HI@ ; `string'
PUBLIC	??_C@_0CK@NIBFGBKP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2LO@ ; `string'
PUBLIC	??_C@_0CG@MNGGPCJP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2NE@ ; `string'
PUBLIC	??_C@_0CH@EAJKFFCG@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HA@ ; `string'
PUBLIC	??_C@_0CH@EFDIFEJL@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HI_F@ ; `string'
PUBLIC	??_C@_0CI@KECHLBPD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2LOW_@ ; `string'
PUBLIC	??_C@_0CE@KPEEFHBD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2NECK@ ; `string'
PUBLIC	??_C@_0CF@KEPGLIII@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HAND@ ; `string'
PUBLIC	__real@3c8efa35
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z:PROC	; load_bmp_file_screen
EXTRN	?get_number_of_3d_object_cameras@@YGHPAUOBJECT_3D_INSTANCE@@H@Z:PROC ; get_number_of_3d_object_cameras
EXTRN	__ftol2_sse:PROC
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?pilot_entity@@3PAUENTITY@@A:DWORD		; pilot_entity
EXTRN	?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A:DWORD ; virtual_cockpit_inst3d
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?num_pilot_virtual_cockpit_cameras@@3HA DD 01H DUP (?)	; num_pilot_virtual_cockpit_cameras
?current_pilot_virtual_cockpit_camera@@3HA DD 01H DUP (?) ; current_pilot_virtual_cockpit_camera
?num_co_pilot_virtual_cockpit_cameras@@3HA DD 01H DUP (?) ; num_co_pilot_virtual_cockpit_cameras
?current_co_pilot_virtual_cockpit_camera@@3HA DD 01H DUP (?) ; current_co_pilot_virtual_cockpit_camera
?pilot_crew_camera_index@@3HA DD 01H DUP (?)		; pilot_crew_camera_index
?co_pilot_crew_camera_index@@3HA DD 01H DUP (?)		; co_pilot_crew_camera_index
?us_pilot_high_detail_face@@3PAUSCREEN@@A DD 01H DUP (?) ; us_pilot_high_detail_face
?us_pilot_low_detail_face@@3PAUSCREEN@@A DD 01H DUP (?)	; us_pilot_low_detail_face
?us_pilot_neck@@3PAUSCREEN@@A DD 01H DUP (?)		; us_pilot_neck
?us_pilot_hands@@3PAUSCREEN@@A DD 01H DUP (?)		; us_pilot_hands
?us_co_pilot_high_detail_face@@3PAUSCREEN@@A DD 01H DUP (?) ; us_co_pilot_high_detail_face
?us_co_pilot_low_detail_face@@3PAUSCREEN@@A DD 01H DUP (?) ; us_co_pilot_low_detail_face
?us_co_pilot_neck@@3PAUSCREEN@@A DD 01H DUP (?)		; us_co_pilot_neck
?us_co_pilot_hands@@3PAUSCREEN@@A DD 01H DUP (?)	; us_co_pilot_hands
?russian_pilot_high_detail_face@@3PAUSCREEN@@A DD 01H DUP (?) ; russian_pilot_high_detail_face
?russian_pilot_low_detail_face@@3PAUSCREEN@@A DD 01H DUP (?) ; russian_pilot_low_detail_face
?russian_pilot_neck@@3PAUSCREEN@@A DD 01H DUP (?)	; russian_pilot_neck
?russian_pilot_hands@@3PAUSCREEN@@A DD 01H DUP (?)	; russian_pilot_hands
?russian_co_pilot_high_detail_face@@3PAUSCREEN@@A DD 01H DUP (?) ; russian_co_pilot_high_detail_face
?russian_co_pilot_low_detail_face@@3PAUSCREEN@@A DD 01H DUP (?) ; russian_co_pilot_low_detail_face
?russian_co_pilot_neck@@3PAUSCREEN@@A DD 01H DUP (?)	; russian_co_pilot_neck
?russian_co_pilot_hands@@3PAUSCREEN@@A DD 01H DUP (?)	; russian_co_pilot_hands
_BSS	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_0CF@KEPGLIII@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HAND@
CONST	SEGMENT
??_C@_0CF@KEPGLIII@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HAND@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\CPG\HANDS.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KPEEFHBD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2NECK@
CONST	SEGMENT
??_C@_0CE@KPEEFHBD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2NECK@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\CPG\NECK.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KECHLBPD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2LOW_@
CONST	SEGMENT
??_C@_0CI@KECHLBPD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2LOW_@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\CPG\LOW_FACE.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EFDIFEJL@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HI_F@
CONST	SEGMENT
??_C@_0CH@EFDIFEJL@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HI_F@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\CPG\HI_FACE.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EAJKFFCG@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HA@
CONST	SEGMENT
??_C@_0CH@EAJKFFCG@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HA@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\PILOT\HANDS.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MNGGPCJP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2NE@
CONST	SEGMENT
??_C@_0CG@MNGGPCJP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2NE@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\PILOT\NECK.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NIBFGBKP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2LO@
CONST	SEGMENT
??_C@_0CK@NIBFGBKP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2LO@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\PILOT\LOW_FACE.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KLAHLPFF@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HI@
CONST	SEGMENT
??_C@_0CJ@KLAHLPFF@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HI@ DB 'GRAPHICS\SKIN'
	DB	'S\RUSSIAN\PILOT\HI_FACE.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PHABFPPO@GRAPHICS?2SKINS?2USA?2CPG?2HANDS?4BM@
CONST	SEGMENT
??_C@_0CB@PHABFPPO@GRAPHICS?2SKINS?2USA?2CPG?2HANDS?4BM@ DB 'GRAPHICS\SKI'
	DB	'NS\USA\CPG\HANDS.BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OLDABBOB@GRAPHICS?2SKINS?2USA?2CPG?2NECK?4BMP@
CONST	SEGMENT
??_C@_0CA@OLDABBOB@GRAPHICS?2SKINS?2USA?2CPG?2NECK?4BMP@ DB 'GRAPHICS\SKI'
	DB	'NS\USA\CPG\NECK.BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MGLNKHNG@GRAPHICS?2SKINS?2USA?2CPG?2LOW_FACE@
CONST	SEGMENT
??_C@_0CE@MGLNKHNG@GRAPHICS?2SKINS?2USA?2CPG?2LOW_FACE@ DB 'GRAPHICS\SKIN'
	DB	'S\USA\CPG\LOW_FACE.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CDDKOMH@GRAPHICS?2SKINS?2USA?2CPG?2HI_FACE?4@
CONST	SEGMENT
??_C@_0CD@CDDKOMH@GRAPHICS?2SKINS?2USA?2CPG?2HI_FACE?4@ DB 'GRAPHICS\SKIN'
	DB	'S\USA\CPG\HI_FACE.BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HJBKPHK@GRAPHICS?2SKINS?2USA?2PILOT?2HANDS?4@
CONST	SEGMENT
??_C@_0CD@HJBKPHK@GRAPHICS?2SKINS?2USA?2PILOT?2HANDS?4@ DB 'GRAPHICS\SKIN'
	DB	'S\USA\PILOT\HANDS.BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HEFDNBHB@GRAPHICS?2SKINS?2USA?2PILOT?2NECK?4B@
CONST	SEGMENT
??_C@_0CC@HEFDNBHB@GRAPHICS?2SKINS?2USA?2PILOT?2NECK?4B@ DB 'GRAPHICS\SKI'
	DB	'NS\USA\PILOT\NECK.BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MEDCGGID@GRAPHICS?2SKINS?2USA?2PILOT?2LOW_FA@
CONST	SEGMENT
??_C@_0CG@MEDCGGID@GRAPHICS?2SKINS?2USA?2PILOT?2LOW_FA@ DB 'GRAPHICS\SKIN'
	DB	'S\USA\PILOT\LOW_FACE.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OAGBPBAE@GRAPHICS?2SKINS?2USA?2PILOT?2HI_FAC@
CONST	SEGMENT
??_C@_0CF@OAGBPBAE@GRAPHICS?2SKINS?2USA?2PILOT?2HI_FAC@ DB 'GRAPHICS\SKIN'
	DB	'S\USA\PILOT\HI_FACE.BMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@HPPDOBPA@get_number_of_3d_object_cameras@
CONST	SEGMENT
??_C@_0GF@HPPDOBPA@get_number_of_3d_object_cameras@ DB 'get_number_of_3d_'
	DB	'object_cameras (virtual_cockpit_inst3d, OBJECT_3D_CAMERA_VIEW'
	DB	'_STATIC_WSO_EJECT) > 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@HMPHAHEP@get_number_of_3d_object_cameras@
CONST	SEGMENT
??_C@_0GH@HMPHAHEP@get_number_of_3d_object_cameras@ DB 'get_number_of_3d_'
	DB	'object_cameras (virtual_cockpit_inst3d, OBJECT_3D_CAMERA_VIEW'
	DB	'_STATIC_PILOT_EJECT) > 0', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z@4JA DD 0185H ; `get_current_virtual_cockpit_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06KJFADLGN@result@
CONST	SEGMENT
??_C@_06KJFADLGN@result@ DB 'result', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NKDMILOA@array_width?5?$DO?50@
CONST	SEGMENT
??_C@_0BA@NKDMILOA@array_width?5?$DO?50@ DB 'array_width > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z@4JA DD 0ccH ; `interpolate_motion_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0P@GNCPONOH@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0P@GNCPONOH@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ DB '%d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PNBJJOIP@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf@
CONST	SEGMENT
??_C@_0BL@PNBJJOIP@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf@ DB '%'
	DB	'f %f %f %f %f %f %f %f %f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@KCDEFANI@Incorrect?5number?5of?5frames?5in?5m@
CONST	SEGMENT
??_C@_0EK@KCDEFANI@Incorrect?5number?5of?5frames?5in?5m@ DB 'Incorrect nu'
	DB	'mber of frames in motion file %s (expected = %d, actual = %d)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CHNKGIAM@?$CFs?5is?5not?5a?5Lightwave?5motion?5fi@
CONST	SEGMENT
??_C@_0CC@CHNKGIAM@?$CFs?5is?5not?5a?5Lightwave?5motion?5fi@ DB '%s is no'
	DB	't a Lightwave motion file', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNKHMHOI@LWMO@
CONST	SEGMENT
??_C@_04PNKHMHOI@LWMO@ DB 'LWMO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIFJDKLD@array@
CONST	SEGMENT
??_C@_05HIFJDKLD@array@ DB 'array', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MGLAOGAA@num_frames?5?$DO?50@
CONST	SEGMENT
??_C@_0P@MGLAOGAA@num_frames?5?$DO?50@ DB 'num_frames > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DIIFBLLL@filespec@
CONST	SEGMENT
??_C@_08DIIFBLLL@filespec@ DB 'filespec', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z@4JA DD 07cH ; `read_motion_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\cockpits\common\co_'
	DB	'crew.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_crew_role@@YG?AW4CREW_ROLES@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_crew_role@@YG?AW4CREW_ROLES@@XZ@4JA DD 066H ; `get_crew_role'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?deinitialise_common_crew_skins@@YGXXZ
_TEXT	SEGMENT
?deinitialise_common_crew_skins@@YGXXZ PROC		; deinitialise_common_crew_skins, COMDAT

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 569  : 	destroy_screen (us_pilot_high_detail_face);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_high_detail_face@@3PAUSCREEN@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 570  : 	destroy_screen (us_pilot_low_detail_face);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_low_detail_face@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 571  : 	destroy_screen (us_pilot_neck);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_neck@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 572  : 	destroy_screen (us_pilot_hands);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_hands@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 573  : 	destroy_screen (us_co_pilot_high_detail_face);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_high_detail_face@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 574  : 	destroy_screen (us_co_pilot_low_detail_face);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_low_detail_face@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 575  : 	destroy_screen (us_co_pilot_neck);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_neck@@3PAUSCREEN@@A
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 576  : 	destroy_screen (us_co_pilot_hands);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_hands@@3PAUSCREEN@@A
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 577  : 
; 578  : 	destroy_screen (russian_pilot_high_detail_face);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_high_detail_face@@3PAUSCREEN@@A
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 579  : 	destroy_screen (russian_pilot_low_detail_face);

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_low_detail_face@@3PAUSCREEN@@A
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 580  : 	destroy_screen (russian_pilot_neck);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_neck@@3PAUSCREEN@@A
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 581  : 	destroy_screen (russian_pilot_hands);

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_hands@@3PAUSCREEN@@A
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 582  : 	destroy_screen (russian_co_pilot_high_detail_face);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_high_detail_face@@3PAUSCREEN@@A
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 583  : 	destroy_screen (russian_co_pilot_low_detail_face);

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_low_detail_face@@3PAUSCREEN@@A
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 584  : 	destroy_screen (russian_co_pilot_neck);

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_neck@@3PAUSCREEN@@A
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 585  : 	destroy_screen (russian_co_pilot_hands);

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_hands@@3PAUSCREEN@@A
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 586  : }

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
?deinitialise_common_crew_skins@@YGXXZ ENDP		; deinitialise_common_crew_skins
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?initialise_common_crew_skins@@YGXXZ
_TEXT	SEGMENT
?initialise_common_crew_skins@@YGXXZ PROC		; initialise_common_crew_skins, COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 518  : 	//
; 519  : 	// load BMPs
; 520  : 	//
; 521  : 
; 522  : 	us_pilot_high_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\PILOT\\HI_FACE.BMP");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OAGBPBAE@GRAPHICS?2SKINS?2USA?2PILOT?2HI_FAC@
  0000e	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  00013	a3 00 00 00 00	 mov	 DWORD PTR ?us_pilot_high_detail_face@@3PAUSCREEN@@A, eax

; 523  : 	us_pilot_low_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\PILOT\\LOW_FACE.BMP");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MEDCGGID@GRAPHICS?2SKINS?2USA?2PILOT?2LOW_FA@
  0001d	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?us_pilot_low_detail_face@@3PAUSCREEN@@A, eax

; 524  : 	us_pilot_neck = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\PILOT\\NECK.BMP");

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@HEFDNBHB@GRAPHICS?2SKINS?2USA?2PILOT?2NECK?4B@
  0002c	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?us_pilot_neck@@3PAUSCREEN@@A, eax

; 525  : 	us_pilot_hands = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\PILOT\\HANDS.BMP");

  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HJBKPHK@GRAPHICS?2SKINS?2USA?2PILOT?2HANDS?4@
  0003b	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?us_pilot_hands@@3PAUSCREEN@@A, eax

; 526  : 	us_co_pilot_high_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\CPG\\HI_FACE.BMP");

  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CDDKOMH@GRAPHICS?2SKINS?2USA?2CPG?2HI_FACE?4@
  0004a	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  0004f	a3 00 00 00 00	 mov	 DWORD PTR ?us_co_pilot_high_detail_face@@3PAUSCREEN@@A, eax

; 527  : 	us_co_pilot_low_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\CPG\\LOW_FACE.BMP");

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MGLNKHNG@GRAPHICS?2SKINS?2USA?2CPG?2LOW_FACE@
  00059	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  0005e	a3 00 00 00 00	 mov	 DWORD PTR ?us_co_pilot_low_detail_face@@3PAUSCREEN@@A, eax

; 528  : 	us_co_pilot_neck = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\CPG\\NECK.BMP");

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OLDABBOB@GRAPHICS?2SKINS?2USA?2CPG?2NECK?4BMP@
  00068	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?us_co_pilot_neck@@3PAUSCREEN@@A, eax

; 529  : 	us_co_pilot_hands = load_bmp_file_screen ("GRAPHICS\\SKINS\\USA\\CPG\\HANDS.BMP");

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PHABFPPO@GRAPHICS?2SKINS?2USA?2CPG?2HANDS?4BM@
  00077	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  0007c	a3 00 00 00 00	 mov	 DWORD PTR ?us_co_pilot_hands@@3PAUSCREEN@@A, eax

; 530  : 
; 531  : 	russian_pilot_high_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\PILOT\\HI_FACE.BMP");

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@KLAHLPFF@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HI@
  00086	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  0008b	a3 00 00 00 00	 mov	 DWORD PTR ?russian_pilot_high_detail_face@@3PAUSCREEN@@A, eax

; 532  : 	russian_pilot_low_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\PILOT\\LOW_FACE.BMP");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NIBFGBKP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2LO@
  00095	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  0009a	a3 00 00 00 00	 mov	 DWORD PTR ?russian_pilot_low_detail_face@@3PAUSCREEN@@A, eax

; 533  : 	russian_pilot_neck = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\PILOT\\NECK.BMP");

  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MNGGPCJP@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2NE@
  000a4	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  000a9	a3 00 00 00 00	 mov	 DWORD PTR ?russian_pilot_neck@@3PAUSCREEN@@A, eax

; 534  : 	russian_pilot_hands = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\PILOT\\HANDS.BMP");

  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EAJKFFCG@GRAPHICS?2SKINS?2RUSSIAN?2PILOT?2HA@
  000b3	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  000b8	a3 00 00 00 00	 mov	 DWORD PTR ?russian_pilot_hands@@3PAUSCREEN@@A, eax

; 535  : 	russian_co_pilot_high_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\CPG\\HI_FACE.BMP");

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EFDIFEJL@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HI_F@
  000c2	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  000c7	a3 00 00 00 00	 mov	 DWORD PTR ?russian_co_pilot_high_detail_face@@3PAUSCREEN@@A, eax

; 536  : 	russian_co_pilot_low_detail_face = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\CPG\\LOW_FACE.BMP");

  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KECHLBPD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2LOW_@
  000d1	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  000d6	a3 00 00 00 00	 mov	 DWORD PTR ?russian_co_pilot_low_detail_face@@3PAUSCREEN@@A, eax

; 537  : 	russian_co_pilot_neck = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\CPG\\NECK.BMP");

  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KPEEFHBD@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2NECK@
  000e0	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  000e5	a3 00 00 00 00	 mov	 DWORD PTR ?russian_co_pilot_neck@@3PAUSCREEN@@A, eax

; 538  : 	russian_co_pilot_hands = load_bmp_file_screen ("GRAPHICS\\SKINS\\RUSSIAN\\CPG\\HANDS.BMP");

  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KEPGLIII@GRAPHICS?2SKINS?2RUSSIAN?2CPG?2HAND@
  000ef	e8 00 00 00 00	 call	 ?load_bmp_file_screen@@YGPAUSCREEN@@PBD@Z ; load_bmp_file_screen
  000f4	a3 00 00 00 00	 mov	 DWORD PTR ?russian_co_pilot_hands@@3PAUSCREEN@@A, eax

; 539  : 
; 540  : 	//
; 541  : 	// set texture screens
; 542  : 	//
; 543  : 
; 544  : 	set_system_texture_screen (us_pilot_high_detail_face, TEXTURE_INDEX_US_PILOT_FACE_01);

  000f9	68 96 05 00 00	 push	 1430			; 00000596H
  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_high_detail_face@@3PAUSCREEN@@A
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 545  : 	set_system_texture_screen (us_pilot_low_detail_face, TEXTURE_INDEX_US_PILOT_FACE_01_LOW_RES);

  00109	68 97 05 00 00	 push	 1431			; 00000597H
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_low_detail_face@@3PAUSCREEN@@A
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 546  : 	set_system_texture_screen (us_pilot_neck, TEXTURE_INDEX_US_PILOT_NECK_01);

  00119	68 9c 05 00 00	 push	 1436			; 0000059cH
  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_neck@@3PAUSCREEN@@A
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 547  : 	set_system_texture_screen (us_pilot_hands, TEXTURE_INDEX_US_PILOT_SKIN);

  00129	68 9d 05 00 00	 push	 1437			; 0000059dH
  0012e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_pilot_hands@@3PAUSCREEN@@A
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 548  : 	set_system_texture_screen (us_co_pilot_high_detail_face, TEXTURE_INDEX_US_WSO_FACE_01);

  00139	68 ba 05 00 00	 push	 1466			; 000005baH
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_high_detail_face@@3PAUSCREEN@@A
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 549  : 	set_system_texture_screen (us_co_pilot_low_detail_face, TEXTURE_INDEX_US_WSO_FACE_01_LOW_RES);

  00149	68 bb 05 00 00	 push	 1467			; 000005bbH
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_low_detail_face@@3PAUSCREEN@@A
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 550  : 	set_system_texture_screen (us_co_pilot_neck, TEXTURE_INDEX_US_WSO_NECK_01);

  00159	68 bc 05 00 00	 push	 1468			; 000005bcH
  0015e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_neck@@3PAUSCREEN@@A
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 551  : 	set_system_texture_screen (us_co_pilot_hands, TEXTURE_INDEX_US_WSO_SKIN);

  00169	68 bd 05 00 00	 push	 1469			; 000005bdH
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?us_co_pilot_hands@@3PAUSCREEN@@A
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 552  : 
; 553  : 	set_system_texture_screen (russian_pilot_high_detail_face, TEXTURE_INDEX_RUSSIAN_PILOT_FACE_01);

  00179	68 6b 05 00 00	 push	 1387			; 0000056bH
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_high_detail_face@@3PAUSCREEN@@A
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 554  : 	set_system_texture_screen (russian_pilot_low_detail_face, TEXTURE_INDEX_RUSSIAN_PILOT_FACE_LOW_RES);

  00189	68 6c 05 00 00	 push	 1388			; 0000056cH
  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_low_detail_face@@3PAUSCREEN@@A
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 555  : 	set_system_texture_screen (russian_pilot_neck, TEXTURE_INDEX_RUSSIAN_PILOT_NECK_01);

  00199	68 74 05 00 00	 push	 1396			; 00000574H
  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_neck@@3PAUSCREEN@@A
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 556  : 	set_system_texture_screen (russian_pilot_hands, TEXTURE_INDEX_RUSSIAN_PILOT_SKIN);

  001a9	68 76 05 00 00	 push	 1398			; 00000576H
  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_pilot_hands@@3PAUSCREEN@@A
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 557  : 	set_system_texture_screen (russian_co_pilot_high_detail_face, TEXTURE_INDEX_RUSSIAN_WSO_FACE_01);

  001b9	68 91 05 00 00	 push	 1425			; 00000591H
  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_high_detail_face@@3PAUSCREEN@@A
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 558  : 	set_system_texture_screen (russian_co_pilot_low_detail_face, TEXTURE_INDEX_RUSSIAN_WSO_FACE_LOW_RES);

  001c9	68 92 05 00 00	 push	 1426			; 00000592H
  001ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_low_detail_face@@3PAUSCREEN@@A
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 559  : 	set_system_texture_screen (russian_co_pilot_neck, TEXTURE_INDEX_RUSSIAN_WSO_NECK_01);

  001d9	68 93 05 00 00	 push	 1427			; 00000593H
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_neck@@3PAUSCREEN@@A
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 560  : 	set_system_texture_screen (russian_co_pilot_hands, TEXTURE_INDEX_RUSSIAN_WSO_SKIN);

  001e9	68 94 05 00 00	 push	 1428			; 00000594H
  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?russian_co_pilot_hands@@3PAUSCREEN@@A
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 561  : }

  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c3		 ret	 0
?initialise_common_crew_skins@@YGXXZ ENDP		; initialise_common_crew_skins
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?get_crew_camera_index@@YGHW4CREW_ROLES@@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv69 = -72						; size = 4
_crew_camera_index$ = -4				; size = 4
_role$ = 8						; size = 4
?get_crew_camera_index@@YGHW4CREW_ROLES@@@Z PROC	; get_crew_camera_index, COMDAT

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 455  : 	object_3d_camera_index_numbers
; 456  : 		crew_camera_index;
; 457  : 
; 458  : 	if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_EJECTED))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN9@get_crew_c
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN10@get_crew_c
$LN9@get_crew_c:
  0001e	68 ca 01 00 00	 push	 458			; 000001caH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN10@get_crew_c:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN11@get_crew_c
  00044	c7 45 b4 31 00
	00 00		 mov	 DWORD PTR tv76[ebp], 49	; 00000031H
  0004b	eb 1d		 jmp	 SHORT $LN12@get_crew_c
$LN11@get_crew_c:
  0004d	68 ca 01 00 00	 push	 458			; 000001caH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN12@get_crew_c:
  0006a	6a 31		 push	 49			; 00000031H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00072	52		 push	 edx
  00073	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	74 18		 je	 SHORT $LN2@get_crew_c

; 459  : 	{
; 460  : 		if (role == CREW_ROLE_PILOT)

  0008a	83 7d 08 00	 cmp	 DWORD PTR _role$[ebp], 0
  0008e	75 09		 jne	 SHORT $LN4@get_crew_c

; 461  : 		{
; 462  : 			crew_camera_index = OBJECT_3D_CAMERA_VIEW_STATIC_PILOT_EJECT;

  00090	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _crew_camera_index$[ebp], 9

; 463  : 		}
; 464  : 		else

  00097	eb 07		 jmp	 SHORT $LN5@get_crew_c
$LN4@get_crew_c:

; 465  : 		{
; 466  : 			crew_camera_index = OBJECT_3D_CAMERA_VIEW_STATIC_WSO_EJECT;

  00099	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _crew_camera_index$[ebp], 10 ; 0000000aH
$LN5@get_crew_c:

; 467  : 		}
; 468  : 	}
; 469  : 	else

  000a0	eb 16		 jmp	 SHORT $LN3@get_crew_c
$LN2@get_crew_c:

; 470  : 	{
; 471  : 		if (role == CREW_ROLE_PILOT)

  000a2	83 7d 08 00	 cmp	 DWORD PTR _role$[ebp], 0
  000a6	75 09		 jne	 SHORT $LN6@get_crew_c

; 472  : 		{
; 473  : 			crew_camera_index = OBJECT_3D_CAMERA_VIEW_STATIC_PILOT;

  000a8	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _crew_camera_index$[ebp], 7

; 474  : 		}
; 475  : 		else

  000af	eb 07		 jmp	 SHORT $LN3@get_crew_c
$LN6@get_crew_c:

; 476  : 		{
; 477  : 			crew_camera_index = OBJECT_3D_CAMERA_VIEW_STATIC_WSO;

  000b1	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _crew_camera_index$[ebp], 8
$LN3@get_crew_c:

; 478  : 		}
; 479  : 	}
; 480  : 
; 481  : 	return (crew_camera_index);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _crew_camera_index$[ebp]

; 482  : }

  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
?get_crew_camera_index@@YGHW4CREW_ROLES@@@Z ENDP	; get_crew_camera_index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?select_next_current_virtual_cockpit_camera@@YGXW4CREW_ROLES@@@Z
_TEXT	SEGMENT
_role$ = 8						; size = 4
?select_next_current_virtual_cockpit_camera@@YGXW4CREW_ROLES@@@Z PROC ; select_next_current_virtual_cockpit_camera, COMDAT

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 429  : 	if (role == CREW_ROLE_PILOT)

  00009	83 7d 08 00	 cmp	 DWORD PTR _role$[ebp], 0
  0000d	75 2a		 jne	 SHORT $LN2@select_nex

; 430  : 	{
; 431  : 		if (num_pilot_virtual_cockpit_cameras > 0)

  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_pilot_virtual_cockpit_cameras@@3HA, 0
  00016	7e 1f		 jle	 SHORT $LN4@select_nex

; 432  : 		{
; 433  : 			current_pilot_virtual_cockpit_camera++;

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA
  0001d	83 c0 01	 add	 eax, 1
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA, eax

; 434  : 
; 435  : 			current_pilot_virtual_cockpit_camera %= num_pilot_virtual_cockpit_cameras;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA
  0002a	99		 cdq
  0002b	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?num_pilot_virtual_cockpit_cameras@@3HA
  00031	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA, edx
$LN4@select_nex:

; 436  : 		}
; 437  : 	}
; 438  : 	else

  00037	eb 28		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 439  : 	{
; 440  : 		if (num_co_pilot_virtual_cockpit_cameras > 0)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_co_pilot_virtual_cockpit_cameras@@3HA, 0
  00040	7e 1f		 jle	 SHORT $LN1@select_nex

; 441  : 		{
; 442  : 			current_co_pilot_virtual_cockpit_camera++;

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA
  00047	83 c0 01	 add	 eax, 1
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA, eax

; 443  : 
; 444  : 			current_co_pilot_virtual_cockpit_camera %= num_co_pilot_virtual_cockpit_cameras;

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA
  00054	99		 cdq
  00055	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?num_co_pilot_virtual_cockpit_cameras@@3HA
  0005b	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA, edx
$LN1@select_nex:

; 445  : 		}
; 446  : 	}
; 447  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?select_next_current_virtual_cockpit_camera@@YGXW4CREW_ROLES@@@Z ENDP ; select_next_current_virtual_cockpit_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv69 = -72						; size = 4
_current_virtual_cockpit_camera$ = -4			; size = 4
_role$ = 8						; size = 4
?get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z PROC ; get_current_virtual_cockpit_camera, COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 390  : 	int
; 391  : 		current_virtual_cockpit_camera;
; 392  : 
; 393  : 	if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_EJECTED))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN11@get_curren
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN12@get_curren
$LN11@get_curren:
  0001e	68 89 01 00 00	 push	 393			; 00000189H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN12@get_curren:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN13@get_curren
  00044	c7 45 b4 31 00
	00 00		 mov	 DWORD PTR tv76[ebp], 49	; 00000031H
  0004b	eb 1d		 jmp	 SHORT $LN14@get_curren
$LN13@get_curren:
  0004d	68 89 01 00 00	 push	 393			; 00000189H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN14@get_curren:
  0006a	6a 31		 push	 49			; 00000031H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00072	52		 push	 edx
  00073	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	74 6a		 je	 SHORT $LN2@get_curren

; 394  : 	{
; 395  : 		if (role == CREW_ROLE_PILOT)

  0008a	83 7d 08 00	 cmp	 DWORD PTR _role$[ebp], 0
  0008e	75 32		 jne	 SHORT $LN4@get_curren

; 396  : 		{
; 397  : 			ASSERT (get_number_of_3d_object_cameras (virtual_cockpit_inst3d, OBJECT_3D_CAMERA_VIEW_STATIC_PILOT_EJECT) > 0);

  00090	6a 09		 push	 9
  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?get_number_of_3d_object_cameras@@YGHPAUOBJECT_3D_INSTANCE@@H@Z ; get_number_of_3d_object_cameras
  0009d	85 c0		 test	 eax, eax
  0009f	7f 18		 jg	 SHORT $LN6@get_curren
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z@4JA
  000a6	83 c0 08	 add	 eax, 8
  000a9	50		 push	 eax
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@HMPHAHEP@get_number_of_3d_object_cameras@
  000b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_curren:

; 398  : 
; 399  : 			current_virtual_cockpit_camera = 0;

  000b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _current_virtual_cockpit_camera$[ebp], 0

; 400  : 		}
; 401  : 		else

  000c0	eb 30		 jmp	 SHORT $LN5@get_curren
$LN4@get_curren:

; 402  : 		{
; 403  : 			ASSERT (get_number_of_3d_object_cameras (virtual_cockpit_inst3d, OBJECT_3D_CAMERA_VIEW_STATIC_WSO_EJECT) > 0);

  000c2	6a 0a		 push	 10			; 0000000aH
  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?get_number_of_3d_object_cameras@@YGHPAUOBJECT_3D_INSTANCE@@H@Z ; get_number_of_3d_object_cameras
  000cf	85 c0		 test	 eax, eax
  000d1	7f 18		 jg	 SHORT $LN7@get_curren
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z@4JA
  000d8	83 c0 0e	 add	 eax, 14			; 0000000eH
  000db	50		 push	 eax
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@HPPDOBPA@get_number_of_3d_object_cameras@
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_curren:

; 404  : 
; 405  : 			current_virtual_cockpit_camera = 0;

  000eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _current_virtual_cockpit_camera$[ebp], 0
$LN5@get_curren:

; 406  : 		}
; 407  : 	}
; 408  : 	else

  000f2	eb 18		 jmp	 SHORT $LN3@get_curren
$LN2@get_curren:

; 409  : 	{
; 410  : 		if (role == CREW_ROLE_PILOT)

  000f4	83 7d 08 00	 cmp	 DWORD PTR _role$[ebp], 0
  000f8	75 0a		 jne	 SHORT $LN8@get_curren

; 411  : 		{
; 412  : 			current_virtual_cockpit_camera = current_pilot_virtual_cockpit_camera;

  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA
  000ff	89 45 fc	 mov	 DWORD PTR _current_virtual_cockpit_camera$[ebp], eax

; 413  : 		}
; 414  : 		else

  00102	eb 08		 jmp	 SHORT $LN3@get_curren
$LN8@get_curren:

; 415  : 		{
; 416  : 			current_virtual_cockpit_camera = current_co_pilot_virtual_cockpit_camera;

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA
  00109	89 45 fc	 mov	 DWORD PTR _current_virtual_cockpit_camera$[ebp], eax
$LN3@get_curren:

; 417  : 		}
; 418  : 	}
; 419  : 
; 420  : 	return (current_virtual_cockpit_camera);

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _current_virtual_cockpit_camera$[ebp]

; 421  : }

  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 04 00	 ret	 4
?get_current_virtual_cockpit_camera@@YGHW4CREW_ROLES@@@Z ENDP ; get_current_virtual_cockpit_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?get_num_virtual_cockpit_cameras@@YGHW4CREW_ROLES@@@Z
_TEXT	SEGMENT
_num_virtual_cockpit_cameras$ = -4			; size = 4
_role$ = 8						; size = 4
?get_num_virtual_cockpit_cameras@@YGHW4CREW_ROLES@@@Z PROC ; get_num_virtual_cockpit_cameras, COMDAT

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 369  : 	int
; 370  : 		num_virtual_cockpit_cameras;
; 371  : 
; 372  : 	if (role == CREW_ROLE_PILOT)

  00009	83 7d 08 00	 cmp	 DWORD PTR _role$[ebp], 0
  0000d	75 0a		 jne	 SHORT $LN2@get_num_vi

; 373  : 	{
; 374  : 		num_virtual_cockpit_cameras = num_pilot_virtual_cockpit_cameras;

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_pilot_virtual_cockpit_cameras@@3HA
  00014	89 45 fc	 mov	 DWORD PTR _num_virtual_cockpit_cameras$[ebp], eax

; 375  : 	}
; 376  : 	else

  00017	eb 08		 jmp	 SHORT $LN3@get_num_vi
$LN2@get_num_vi:

; 377  : 	{
; 378  : 		num_virtual_cockpit_cameras = num_co_pilot_virtual_cockpit_cameras;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_co_pilot_virtual_cockpit_cameras@@3HA
  0001e	89 45 fc	 mov	 DWORD PTR _num_virtual_cockpit_cameras$[ebp], eax
$LN3@get_num_vi:

; 379  : 	}
; 380  : 
; 381  : 	return (num_virtual_cockpit_cameras);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _num_virtual_cockpit_cameras$[ebp]

; 382  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?get_num_virtual_cockpit_cameras@@YGHW4CREW_ROLES@@@Z ENDP ; get_num_virtual_cockpit_cameras
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?deinitialise_common_virtual_cockpit_cameras@@YGXXZ
_TEXT	SEGMENT
?deinitialise_common_virtual_cockpit_cameras@@YGXXZ PROC ; deinitialise_common_virtual_cockpit_cameras, COMDAT

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 350  : 	pilot_crew_camera_index = OBJECT_3D_INVALID_CAMERA_INDEX;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_crew_camera_index@@3HA, 0

; 351  : 
; 352  : 	num_pilot_virtual_cockpit_cameras = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_pilot_virtual_cockpit_cameras@@3HA, 0

; 353  : 
; 354  : 	current_pilot_virtual_cockpit_camera = INVALID_VIRTUAL_COCKPIT_CAMERA;

  0001d	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA, -1

; 355  : 
; 356  : 	co_pilot_crew_camera_index = OBJECT_3D_INVALID_CAMERA_INDEX;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_crew_camera_index@@3HA, 0

; 357  : 
; 358  : 	num_co_pilot_virtual_cockpit_cameras = 0;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_co_pilot_virtual_cockpit_cameras@@3HA, 0

; 359  : 
; 360  : 	current_co_pilot_virtual_cockpit_camera = INVALID_VIRTUAL_COCKPIT_CAMERA;

  0003b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA, -1

; 361  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?deinitialise_common_virtual_cockpit_cameras@@YGXXZ ENDP ; deinitialise_common_virtual_cockpit_cameras
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?initialise_common_virtual_cockpit_cameras@@YGXXZ
_TEXT	SEGMENT
?initialise_common_virtual_cockpit_cameras@@YGXXZ PROC	; initialise_common_virtual_cockpit_cameras, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  : 	#if DEBUG_MODULE_CREW_CAMERAS
; 276  : 
; 277  : 	debug_colour_watch (DEBUG_COLOUR_AMBER, "pilot_crew_camera_index = %d", MT_INT, &pilot_crew_camera_index);
; 278  : 	debug_colour_watch (DEBUG_COLOUR_AMBER, "num_pilot_virtual_cockpit_cameras = %d", MT_INT, &num_pilot_virtual_cockpit_cameras);
; 279  : 	debug_colour_watch (DEBUG_COLOUR_AMBER, "current_pilot_virtual_cockpit_camera = %d", MT_INT, &current_pilot_virtual_cockpit_camera);
; 280  : 
; 281  : 	debug_colour_watch (DEBUG_COLOUR_MAGENTA, "co_pilot_crew_camera_index = %d", MT_INT, &co_pilot_crew_camera_index);
; 282  : 	debug_colour_watch (DEBUG_COLOUR_MAGENTA, "num_co_pilot_virtual_cockpit_cameras = %d", MT_INT, &num_co_pilot_virtual_cockpit_cameras);
; 283  : 	debug_colour_watch (DEBUG_COLOUR_MAGENTA, "current_co_pilot_virtual_cockpit_camera = %d", MT_INT, &current_co_pilot_virtual_cockpit_camera);
; 284  : 
; 285  : 	#endif
; 286  : 
; 287  : 	////////////////////////////////////////
; 288  : 	//
; 289  : 	// pilot
; 290  : 	//
; 291  : 	////////////////////////////////////////
; 292  : 
; 293  : 	if (virtual_cockpit_inst3d)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; virtual_cockpit_inst3d
  00010	74 14		 je	 SHORT $LN2@initialise

; 294  : 	{
; 295  : 		num_pilot_virtual_cockpit_cameras = get_number_of_3d_object_cameras (virtual_cockpit_inst3d, OBJECT_3D_CAMERA_VIEW_STATIC_PILOT);

  00012	6a 07		 push	 7
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?get_number_of_3d_object_cameras@@YGHPAUOBJECT_3D_INSTANCE@@H@Z ; get_number_of_3d_object_cameras
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?num_pilot_virtual_cockpit_cameras@@3HA, eax

; 296  : 	}
; 297  : 	else

  00024	eb 0a		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 298  : 	{
; 299  : 		num_pilot_virtual_cockpit_cameras = 0;

  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_pilot_virtual_cockpit_cameras@@3HA, 0
$LN3@initialise:

; 300  : 	}
; 301  : 
; 302  : 	if (num_pilot_virtual_cockpit_cameras > 0)

  00030	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_pilot_virtual_cockpit_cameras@@3HA, 0
  00037	7e 16		 jle	 SHORT $LN4@initialise

; 303  : 	{
; 304  : 		current_pilot_virtual_cockpit_camera = 0;

  00039	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA, 0

; 305  : 
; 306  : 		pilot_crew_camera_index = OBJECT_3D_CAMERA_VIEW_STATIC_PILOT;

  00043	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?pilot_crew_camera_index@@3HA, 7

; 307  : 	}
; 308  : 	else

  0004d	eb 14		 jmp	 SHORT $LN5@initialise
$LN4@initialise:

; 309  : 	{
; 310  : 		current_pilot_virtual_cockpit_camera = INVALID_VIRTUAL_COCKPIT_CAMERA;

  0004f	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_pilot_virtual_cockpit_camera@@3HA, -1

; 311  : 
; 312  : 		pilot_crew_camera_index = OBJECT_3D_INVALID_CAMERA_INDEX;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_crew_camera_index@@3HA, 0
$LN5@initialise:

; 313  : 	}
; 314  : 
; 315  : 	////////////////////////////////////////
; 316  : 	//
; 317  : 	// co-pilot
; 318  : 	//
; 319  : 	////////////////////////////////////////
; 320  : 
; 321  : 	if (virtual_cockpit_inst3d)

  00063	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; virtual_cockpit_inst3d
  0006a	74 14		 je	 SHORT $LN6@initialise

; 322  : 	{
; 323  : 		num_co_pilot_virtual_cockpit_cameras = get_number_of_3d_object_cameras (virtual_cockpit_inst3d, OBJECT_3D_CAMERA_VIEW_STATIC_WSO);

  0006c	6a 08		 push	 8
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?get_number_of_3d_object_cameras@@YGHPAUOBJECT_3D_INSTANCE@@H@Z ; get_number_of_3d_object_cameras
  00079	a3 00 00 00 00	 mov	 DWORD PTR ?num_co_pilot_virtual_cockpit_cameras@@3HA, eax

; 324  : 	}
; 325  : 	else

  0007e	eb 0a		 jmp	 SHORT $LN7@initialise
$LN6@initialise:

; 326  : 	{
; 327  : 		num_co_pilot_virtual_cockpit_cameras = 0;

  00080	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_co_pilot_virtual_cockpit_cameras@@3HA, 0
$LN7@initialise:

; 328  : 	}
; 329  : 
; 330  : 	if (num_co_pilot_virtual_cockpit_cameras > 0)

  0008a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_co_pilot_virtual_cockpit_cameras@@3HA, 0
  00091	7e 16		 jle	 SHORT $LN8@initialise

; 331  : 	{
; 332  : 		current_co_pilot_virtual_cockpit_camera = 0;

  00093	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA, 0

; 333  : 
; 334  : 		co_pilot_crew_camera_index = OBJECT_3D_CAMERA_VIEW_STATIC_WSO;

  0009d	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?co_pilot_crew_camera_index@@3HA, 8

; 335  : 	}
; 336  : 	else

  000a7	eb 14		 jmp	 SHORT $LN1@initialise
$LN8@initialise:

; 337  : 	{
; 338  : 		current_co_pilot_virtual_cockpit_camera = INVALID_VIRTUAL_COCKPIT_CAMERA;

  000a9	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_co_pilot_virtual_cockpit_camera@@3HA, -1

; 339  : 
; 340  : 		co_pilot_crew_camera_index = OBJECT_3D_INVALID_CAMERA_INDEX;

  000b3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_crew_camera_index@@3HA, 0
$LN1@initialise:

; 341  : 	}
; 342  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
?initialise_common_virtual_cockpit_cameras@@YGXXZ ENDP	; initialise_common_virtual_cockpit_cameras
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z
_TEXT	SEGMENT
_y2$ = -72						; size = 24
_y1$ = -48						; size = 24
_y_fractional$ = -24					; size = 4
_x_fractional$ = -20					; size = 4
_i2$ = -16						; size = 4
_i1$ = -12						; size = 4
_y_whole$ = -8						; size = 4
_x_whole$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_array$ = 16						; size = 4
_array_width$ = 20					; size = 4
_result$ = 24						; size = 4
?interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z PROC ; interpolate_motion_values, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 205  : 	int
; 206  : 		x_whole,
; 207  : 		y_whole,
; 208  : 		i1,
; 209  : 		i2;
; 210  : 
; 211  : 	float
; 212  : 		x_fractional,
; 213  : 		y_fractional;
; 214  : 
; 215  : 	motion_data
; 216  : 		y1,
; 217  : 		y2;
; 218  : 
; 219  : 	ASSERT (array);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _array$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@interpolat
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05HIFJDKLD@array@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@interpolat:

; 220  : 
; 221  : 	ASSERT (array_width > 0);

  0002a	83 7d 14 00	 cmp	 DWORD PTR _array_width$[ebp], 0
  0002e	7f 18		 jg	 SHORT $LN3@interpolat
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NKDMILOA@array_width?5?$DO?50@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@interpolat:

; 222  : 
; 223  : 	ASSERT (result);

  00048	83 7d 18 00	 cmp	 DWORD PTR _result$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@interpolat
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z@4JA
  00053	83 c0 13	 add	 eax, 19			; 00000013H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_06KJFADLGN@result@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@interpolat:

; 224  : 
; 225  : 	x_whole = floor (x);

  00066	51		 push	 ecx
  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  00076	e8 00 00 00 00	 call	 __ftol2_sse
  0007b	89 45 fc	 mov	 DWORD PTR _x_whole$[ebp], eax

; 226  : 
; 227  : 	x_fractional = x - x_whole;

  0007e	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x_whole$[ebp]
  00083	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _x$[ebp]
  00088	f3 0f 5c c8	 subss	 xmm1, xmm0
  0008c	f3 0f 11 4d ec	 movss	 DWORD PTR _x_fractional$[ebp], xmm1

; 228  : 
; 229  : 	y_whole = floor (y);

  00091	51		 push	 ecx
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  000a1	e8 00 00 00 00	 call	 __ftol2_sse
  000a6	89 45 f8	 mov	 DWORD PTR _y_whole$[ebp], eax

; 230  : 
; 231  : 	y_fractional = y - y_whole;

  000a9	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _y_whole$[ebp]
  000ae	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  000b3	f3 0f 5c c8	 subss	 xmm1, xmm0
  000b7	f3 0f 11 4d e8	 movss	 DWORD PTR _y_fractional$[ebp], xmm1

; 232  : 
; 233  : 	i1 = (y_whole * array_width) + x_whole;

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _y_whole$[ebp]
  000bf	0f af 45 14	 imul	 eax, DWORD PTR _array_width$[ebp]
  000c3	03 45 fc	 add	 eax, DWORD PTR _x_whole$[ebp]
  000c6	89 45 f4	 mov	 DWORD PTR _i1$[ebp], eax

; 234  : 
; 235  : 	i2 = i1 + array_width;

  000c9	8b 45 f4	 mov	 eax, DWORD PTR _i1$[ebp]
  000cc	03 45 14	 add	 eax, DWORD PTR _array_width$[ebp]
  000cf	89 45 f0	 mov	 DWORD PTR _i2$[ebp], eax

; 236  : 
; 237  : 	y1.x = array[i1].x + ((array[i2].x - array[i1].x) * y_fractional);

  000d2	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  000d6	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  000da	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  000de	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  000e1	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  000e4	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000e9	f3 0f 5c 04 17	 subss	 xmm0, DWORD PTR [edi+edx]
  000ee	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  000f3	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  000f6	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  000fb	f3 0f 11 45 d0	 movss	 DWORD PTR _y1$[ebp], xmm0

; 238  : 	y1.y = array[i1].y + ((array[i2].y - array[i1].y) * y_fractional);

  00100	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  00104	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  00108	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  0010c	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  0010f	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  00112	f3 0f 10 44 0e
	04		 movss	 xmm0, DWORD PTR [esi+ecx+4]
  00118	f3 0f 5c 44 17
	04		 subss	 xmm0, DWORD PTR [edi+edx+4]
  0011e	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  00123	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  00126	f3 0f 58 44 01
	04		 addss	 xmm0, DWORD PTR [ecx+eax+4]
  0012c	f3 0f 11 45 d4	 movss	 DWORD PTR _y1$[ebp+4], xmm0

; 239  : 	y1.z = array[i1].z + ((array[i2].z - array[i1].z) * y_fractional);

  00131	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  00135	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  00139	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  0013d	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  00140	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  00143	f3 0f 10 44 0e
	08		 movss	 xmm0, DWORD PTR [esi+ecx+8]
  00149	f3 0f 5c 44 17
	08		 subss	 xmm0, DWORD PTR [edi+edx+8]
  0014f	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  00154	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  00157	f3 0f 58 44 01
	08		 addss	 xmm0, DWORD PTR [ecx+eax+8]
  0015d	f3 0f 11 45 d8	 movss	 DWORD PTR _y1$[ebp+8], xmm0

; 240  : 	y1.heading = array[i1].heading + ((array[i2].heading - array[i1].heading) * y_fractional);

  00162	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  00166	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  0016a	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  0016e	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  00171	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  00174	f3 0f 10 44 0e
	0c		 movss	 xmm0, DWORD PTR [esi+ecx+12]
  0017a	f3 0f 5c 44 17
	0c		 subss	 xmm0, DWORD PTR [edi+edx+12]
  00180	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  00185	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  00188	f3 0f 58 44 01
	0c		 addss	 xmm0, DWORD PTR [ecx+eax+12]
  0018e	f3 0f 11 45 dc	 movss	 DWORD PTR _y1$[ebp+12], xmm0

; 241  : 	y1.pitch = array[i1].pitch + ((array[i2].pitch - array[i1].pitch) * y_fractional);

  00193	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  00197	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  0019b	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  0019f	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  001a2	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  001a5	f3 0f 10 44 0e
	10		 movss	 xmm0, DWORD PTR [esi+ecx+16]
  001ab	f3 0f 5c 44 17
	10		 subss	 xmm0, DWORD PTR [edi+edx+16]
  001b1	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  001b6	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  001b9	f3 0f 58 44 01
	10		 addss	 xmm0, DWORD PTR [ecx+eax+16]
  001bf	f3 0f 11 45 e0	 movss	 DWORD PTR _y1$[ebp+16], xmm0

; 242  : 	y1.roll = array[i1].roll + ((array[i2].roll - array[i1].roll) * y_fractional);

  001c4	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  001c8	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  001cc	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  001d0	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  001d3	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  001d6	f3 0f 10 44 0e
	14		 movss	 xmm0, DWORD PTR [esi+ecx+20]
  001dc	f3 0f 5c 44 17
	14		 subss	 xmm0, DWORD PTR [edi+edx+20]
  001e2	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  001e7	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  001ea	f3 0f 58 44 01
	14		 addss	 xmm0, DWORD PTR [ecx+eax+20]
  001f0	f3 0f 11 45 e4	 movss	 DWORD PTR _y1$[ebp+20], xmm0

; 243  : 
; 244  : 	i1++;

  001f5	8b 45 f4	 mov	 eax, DWORD PTR _i1$[ebp]
  001f8	83 c0 01	 add	 eax, 1
  001fb	89 45 f4	 mov	 DWORD PTR _i1$[ebp], eax

; 245  : 
; 246  : 	i2++;

  001fe	8b 45 f0	 mov	 eax, DWORD PTR _i2$[ebp]
  00201	83 c0 01	 add	 eax, 1
  00204	89 45 f0	 mov	 DWORD PTR _i2$[ebp], eax

; 247  : 
; 248  : 	y2.x = array[i1].x + ((array[i2].x - array[i1].x) * y_fractional);

  00207	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  0020b	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  0020f	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  00213	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  00216	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  00219	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0021e	f3 0f 5c 04 17	 subss	 xmm0, DWORD PTR [edi+edx]
  00223	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  0022b	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00230	f3 0f 11 45 b8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 249  : 	y2.y = array[i1].y + ((array[i2].y - array[i1].y) * y_fractional);

  00235	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  00239	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  0023d	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  00241	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  00244	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  00247	f3 0f 10 44 0e
	04		 movss	 xmm0, DWORD PTR [esi+ecx+4]
  0024d	f3 0f 5c 44 17
	04		 subss	 xmm0, DWORD PTR [edi+edx+4]
  00253	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  00258	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  0025b	f3 0f 58 44 01
	04		 addss	 xmm0, DWORD PTR [ecx+eax+4]
  00261	f3 0f 11 45 bc	 movss	 DWORD PTR _y2$[ebp+4], xmm0

; 250  : 	y2.z = array[i1].z + ((array[i2].z - array[i1].z) * y_fractional);

  00266	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  0026a	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  0026e	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  00272	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  00275	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  00278	f3 0f 10 44 0e
	08		 movss	 xmm0, DWORD PTR [esi+ecx+8]
  0027e	f3 0f 5c 44 17
	08		 subss	 xmm0, DWORD PTR [edi+edx+8]
  00284	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  00289	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  0028c	f3 0f 58 44 01
	08		 addss	 xmm0, DWORD PTR [ecx+eax+8]
  00292	f3 0f 11 45 c0	 movss	 DWORD PTR _y2$[ebp+8], xmm0

; 251  : 	y2.heading = array[i1].heading + ((array[i2].heading - array[i1].heading) * y_fractional);

  00297	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  0029b	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  0029f	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  002a3	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  002a6	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  002a9	f3 0f 10 44 0e
	0c		 movss	 xmm0, DWORD PTR [esi+ecx+12]
  002af	f3 0f 5c 44 17
	0c		 subss	 xmm0, DWORD PTR [edi+edx+12]
  002b5	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  002ba	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  002bd	f3 0f 58 44 01
	0c		 addss	 xmm0, DWORD PTR [ecx+eax+12]
  002c3	f3 0f 11 45 c4	 movss	 DWORD PTR _y2$[ebp+12], xmm0

; 252  : 	y2.pitch = array[i1].pitch + ((array[i2].pitch - array[i1].pitch) * y_fractional);

  002c8	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  002cc	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  002d0	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  002d4	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  002d7	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  002da	f3 0f 10 44 0e
	10		 movss	 xmm0, DWORD PTR [esi+ecx+16]
  002e0	f3 0f 5c 44 17
	10		 subss	 xmm0, DWORD PTR [edi+edx+16]
  002e6	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  002eb	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  002ee	f3 0f 58 44 01
	10		 addss	 xmm0, DWORD PTR [ecx+eax+16]
  002f4	f3 0f 11 45 c8	 movss	 DWORD PTR _y2$[ebp+16], xmm0

; 253  : 	y2.roll = array[i1].roll + ((array[i2].roll - array[i1].roll) * y_fractional);

  002f9	6b 45 f4 18	 imul	 eax, DWORD PTR _i1$[ebp], 24
  002fd	6b 4d f0 18	 imul	 ecx, DWORD PTR _i2$[ebp], 24
  00301	6b 55 f4 18	 imul	 edx, DWORD PTR _i1$[ebp], 24
  00305	8b 75 10	 mov	 esi, DWORD PTR _array$[ebp]
  00308	8b 7d 10	 mov	 edi, DWORD PTR _array$[ebp]
  0030b	f3 0f 10 44 0e
	14		 movss	 xmm0, DWORD PTR [esi+ecx+20]
  00311	f3 0f 5c 44 17
	14		 subss	 xmm0, DWORD PTR [edi+edx+20]
  00317	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _y_fractional$[ebp]
  0031c	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  0031f	f3 0f 58 44 01
	14		 addss	 xmm0, DWORD PTR [ecx+eax+20]
  00325	f3 0f 11 45 cc	 movss	 DWORD PTR _y2$[ebp+20], xmm0

; 254  : 
; 255  : 	result->x = y1.x + ((y2.x - y1.x) * x_fractional);

  0032a	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0032f	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _y1$[ebp]
  00334	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _x_fractional$[ebp]
  00339	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _y1$[ebp]
  0033e	8b 45 18	 mov	 eax, DWORD PTR _result$[ebp]
  00341	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 256  : 	result->y = y1.y + ((y2.y - y1.y) * x_fractional);

  00345	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _y2$[ebp+4]
  0034a	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _y1$[ebp+4]
  0034f	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _x_fractional$[ebp]
  00354	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _y1$[ebp+4]
  00359	8b 45 18	 mov	 eax, DWORD PTR _result$[ebp]
  0035c	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 257  : 	result->z = y1.z + ((y2.z - y1.z) * x_fractional);

  00361	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y2$[ebp+8]
  00366	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _y1$[ebp+8]
  0036b	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _x_fractional$[ebp]
  00370	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _y1$[ebp+8]
  00375	8b 45 18	 mov	 eax, DWORD PTR _result$[ebp]
  00378	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 258  : 	result->heading = y1.heading + ((y2.heading - y1.heading) * x_fractional);

  0037d	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y2$[ebp+12]
  00382	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _y1$[ebp+12]
  00387	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _x_fractional$[ebp]
  0038c	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _y1$[ebp+12]
  00391	8b 45 18	 mov	 eax, DWORD PTR _result$[ebp]
  00394	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 259  : 	result->pitch = y1.pitch + ((y2.pitch - y1.pitch) * x_fractional);

  00399	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y2$[ebp+16]
  0039e	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _y1$[ebp+16]
  003a3	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _x_fractional$[ebp]
  003a8	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _y1$[ebp+16]
  003ad	8b 45 18	 mov	 eax, DWORD PTR _result$[ebp]
  003b0	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 260  : 	result->roll = y1.roll + ((y2.roll - y1.roll) * x_fractional);

  003b5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _y2$[ebp+20]
  003ba	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _y1$[ebp+20]
  003bf	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _x_fractional$[ebp]
  003c4	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _y1$[ebp+20]
  003c9	8b 45 18	 mov	 eax, DWORD PTR _result$[ebp]
  003cc	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 261  : }

  003d1	5f		 pop	 edi
  003d2	5e		 pop	 esi
  003d3	5b		 pop	 ebx
  003d4	8b e5		 mov	 esp, ebp
  003d6	5d		 pop	 ebp
  003d7	c2 14 00	 ret	 20			; 00000014H
?interpolate_motion_values@@YGXMMPAUMOTION_DATA@@H0@Z ENDP ; interpolate_motion_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z
_TEXT	SEGMENT
_f_value$ = -220					; size = 4
_i_value$ = -216					; size = 4
_frame$ = -212						; size = 4
_num_frames_in_file$ = -208				; size = 4
_s$ = -204						; size = 200
_fp$ = -4						; size = 4
_filespec$ = 8						; size = 4
_num_frames$ = 12					; size = 4
_array$ = 16						; size = 4
?read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z PROC	; read_motion_values, COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 125  : 	FILE
; 126  : 		*fp;
; 127  : 
; 128  : 	char
; 129  : 		s[200];
; 130  : 
; 131  : 	int
; 132  : 		num_frames_in_file,
; 133  : 		frame,
; 134  : 		i_value;
; 135  : 
; 136  : 	float
; 137  : 		f_value;
; 138  : 
; 139  : 	ASSERT (filespec);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _filespec$[ebp], 0
  00010	75 18		 jne	 SHORT $LN5@read_motio
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_08DIIFBLLL@filespec@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@read_motio:

; 140  : 
; 141  : 	ASSERT (num_frames > 0);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _num_frames$[ebp], 0
  0002e	7f 18		 jg	 SHORT $LN6@read_motio
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MGLAOGAA@num_frames?5?$DO?50@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@read_motio:

; 142  : 
; 143  : 	ASSERT (array);

  00048	83 7d 10 00	 cmp	 DWORD PTR _array$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN7@read_motio
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z@4JA
  00053	83 c0 13	 add	 eax, 19			; 00000013H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_05HIFJDKLD@array@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@read_motio:

; 144  : 
; 145  : 	fp = safe_fopen (filespec, "r");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  0006b	8b 45 08	 mov	 eax, DWORD PTR _filespec$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00074	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 146  : 
; 147  : 	//
; 148  : 	// check for 'LWMO' file
; 149  : 	//
; 150  : 
; 151  : 	fscanf (fp, "%s", s);

  00077	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _fscanf
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 152  : 
; 153  : 	if (strcmp (s, "LWMO") != 0)

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_04PNKHMHOI@LWMO@
  00094	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _strcmp
  000a0	83 c4 08	 add	 esp, 8
  000a3	85 c0		 test	 eax, eax
  000a5	74 11		 je	 SHORT $LN8@read_motio

; 154  : 	{
; 155  : 		debug_fatal ("%s is not a Lightwave motion file", filespec);

  000a7	8b 45 08	 mov	 eax, DWORD PTR _filespec$[ebp]
  000aa	50		 push	 eax
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@CHNKGIAM@?$CFs?5is?5not?5a?5Lightwave?5motion?5fi@
  000b0	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000b5	83 c4 08	 add	 esp, 8
$LN8@read_motio:

; 156  : 	}
; 157  : 
; 158  : 	//
; 159  : 	// read off unwanted values
; 160  : 	//
; 161  : 
; 162  : 	fscanf (fp, "%d", &i_value);

  000b8	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _i_value$[ebp]
  000be	50		 push	 eax
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _fscanf
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 163  : 
; 164  : 	fscanf (fp, "%d", &i_value);

  000d0	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _i_value$[ebp]
  000d6	50		 push	 eax
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 _fscanf
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 165  : 
; 166  : 	//
; 167  : 	// check number of frames
; 168  : 	//
; 169  : 
; 170  : 	fscanf (fp, "%d", &num_frames_in_file);

  000e8	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _num_frames_in_file$[ebp]
  000ee	50		 push	 eax
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _fscanf
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 
; 172  : 	if (num_frames_in_file != num_frames)

  00100	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _num_frames_in_file$[ebp]
  00106	3b 45 0c	 cmp	 eax, DWORD PTR _num_frames$[ebp]
  00109	74 18		 je	 SHORT $LN9@read_motio

; 173  : 	{
; 174  : 		debug_fatal ("Incorrect number of frames in motion file %s (expected = %d, actual = %d)", num_frames, num_frames_in_file);

  0010b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _num_frames_in_file$[ebp]
  00111	50		 push	 eax
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _num_frames$[ebp]
  00115	51		 push	 ecx
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KCDEFANI@Incorrect?5number?5of?5frames?5in?5m@
  0011b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@read_motio:

; 175  : 	}
; 176  : 
; 177  : 	//
; 178  : 	// read motion values
; 179  : 	//
; 180  : 
; 181  : 	for (frame = 0; frame < num_frames; frame++)

  00123	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _frame$[ebp], 0
  0012d	eb 0f		 jmp	 SHORT $LN4@read_motio
$LN2@read_motio:
  0012f	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _frame$[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 85 2c ff ff
	ff		 mov	 DWORD PTR _frame$[ebp], eax
$LN4@read_motio:
  0013e	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _frame$[ebp]
  00144	3b 45 0c	 cmp	 eax, DWORD PTR _num_frames$[ebp]
  00147	0f 8d d7 00 00
	00		 jge	 $LN3@read_motio

; 182  : 	{
; 183  : 		fscanf (fp, "%f %f %f %f %f %f %f %f %f", &array->x, &array->y, &array->z, &array->heading, &array->pitch, &array->roll, &f_value, &f_value, &f_value);

  0014d	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _f_value$[ebp]
  00153	50		 push	 eax
  00154	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _f_value$[ebp]
  0015a	51		 push	 ecx
  0015b	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR _f_value$[ebp]
  00161	52		 push	 edx
  00162	8b 45 10	 mov	 eax, DWORD PTR _array$[ebp]
  00165	83 c0 14	 add	 eax, 20			; 00000014H
  00168	50		 push	 eax
  00169	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  0016c	83 c1 10	 add	 ecx, 16			; 00000010H
  0016f	51		 push	 ecx
  00170	8b 55 10	 mov	 edx, DWORD PTR _array$[ebp]
  00173	83 c2 0c	 add	 edx, 12			; 0000000cH
  00176	52		 push	 edx
  00177	8b 45 10	 mov	 eax, DWORD PTR _array$[ebp]
  0017a	83 c0 08	 add	 eax, 8
  0017d	50		 push	 eax
  0017e	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  00181	83 c1 04	 add	 ecx, 4
  00184	51		 push	 ecx
  00185	8b 55 10	 mov	 edx, DWORD PTR _array$[ebp]
  00188	52		 push	 edx
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PNBJJOIP@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf@
  0018e	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _fscanf
  00197	83 c4 2c	 add	 esp, 44			; 0000002cH

; 184  : 
; 185  : 		array->heading = rad (array->heading);

  0019a	8b 45 10	 mov	 eax, DWORD PTR _array$[ebp]
  0019d	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  001a2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  001aa	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  001ad	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 186  : 
; 187  : 		array->pitch = rad (array->pitch);

  001b2	8b 45 10	 mov	 eax, DWORD PTR _array$[ebp]
  001b5	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  001ba	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  001c2	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  001c5	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 188  : 
; 189  : 		array->roll = rad (array->roll);

  001ca	8b 45 10	 mov	 eax, DWORD PTR _array$[ebp]
  001cd	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  001d2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  001da	8b 4d 10	 mov	 ecx, DWORD PTR _array$[ebp]
  001dd	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 190  : 
; 191  : 		fscanf (fp, "%d %d %d %d %d", &i_value, &i_value, &i_value, &i_value, &i_value);

  001e2	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _i_value$[ebp]
  001e8	50		 push	 eax
  001e9	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _i_value$[ebp]
  001ef	51		 push	 ecx
  001f0	8d 95 28 ff ff
	ff		 lea	 edx, DWORD PTR _i_value$[ebp]
  001f6	52		 push	 edx
  001f7	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _i_value$[ebp]
  001fd	50		 push	 eax
  001fe	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _i_value$[ebp]
  00204	51		 push	 ecx
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GNCPONOH@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
  0020a	8b 55 fc	 mov	 edx, DWORD PTR _fp$[ebp]
  0020d	52		 push	 edx
  0020e	e8 00 00 00 00	 call	 _fscanf
  00213	83 c4 1c	 add	 esp, 28			; 0000001cH

; 192  : 
; 193  : 		array++;

  00216	8b 45 10	 mov	 eax, DWORD PTR _array$[ebp]
  00219	83 c0 18	 add	 eax, 24			; 00000018H
  0021c	89 45 10	 mov	 DWORD PTR _array$[ebp], eax

; 194  : 	}

  0021f	e9 0b ff ff ff	 jmp	 $LN2@read_motio
$LN3@read_motio:

; 195  : 
; 196  : 	safe_fclose (fp);

  00224	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 197  : }

  0022d	5f		 pop	 edi
  0022e	5e		 pop	 esi
  0022f	5b		 pop	 ebx
  00230	8b e5		 mov	 esp, ebp
  00232	5d		 pop	 ebp
  00233	c2 0c 00	 ret	 12			; 0000000cH
?read_motion_values@@YGXPBDHPAUMOTION_DATA@@@Z ENDP	; read_motion_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\common\co_crew.c
;	COMDAT ?get_crew_role@@YG?AW4CREW_ROLES@@XZ
_TEXT	SEGMENT
tv83 = -76						; size = 4
tv75 = -72						; size = 4
_en$ = -4						; size = 4
?get_crew_role@@YG?AW4CREW_ROLES@@XZ PROC		; get_crew_role, COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 103  : 	entity
; 104  : 		*en;
; 105  : 
; 106  : 	en = get_pilot_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  0000e	89 45 fc	 mov	 DWORD PTR _en$[ebp], eax

; 107  : 
; 108  : 	ASSERT (en);

  00011	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00015	75 18		 jne	 SHORT $LN2@get_crew_r
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_crew_role@@YG?AW4CREW_ROLES@@XZ@4JA
  0001c	83 c0 06	 add	 eax, 6
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  0002a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_crew_r:

; 109  : 
; 110  : 	return (crew_roles) get_local_entity_int_value (en, INT_TYPE_CREW_ROLE);

  0002f	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00033	74 0a		 je	 SHORT $LN4@get_crew_r
  00035	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 4d b8	 mov	 DWORD PTR tv75[ebp], ecx
  0003d	eb 21		 jmp	 SHORT $LN5@get_crew_r
$LN4@get_crew_r:
  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_crew_role@@YG?AW4CREW_ROLES@@XZ@4JA
  00045	83 c2 08	 add	 edx, 8
  00048	52		 push	 edx
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00059	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN5@get_crew_r:
  00060	b9 01 00 00 00	 mov	 ecx, 1
  00065	85 c9		 test	 ecx, ecx
  00067	74 09		 je	 SHORT $LN6@get_crew_r
  00069	c7 45 b4 23 00
	00 00		 mov	 DWORD PTR tv83[ebp], 35	; 00000023H
  00070	eb 21		 jmp	 SHORT $LN7@get_crew_r
$LN6@get_crew_r:
  00072	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_crew_role@@YG?AW4CREW_ROLES@@XZ@4JA
  00078	83 c2 08	 add	 edx, 8
  0007b	52		 push	 edx
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HALJKBGE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0008c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN7@get_crew_r:
  00093	6a 23		 push	 35			; 00000023H
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00098	51		 push	 ecx
  00099	69 55 b8 5c 04
	00 00		 imul	 edx, DWORD PTR tv75[ebp], 1116
  000a0	8b 45 b4	 mov	 eax, DWORD PTR tv83[ebp]
  000a3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000aa	ff d1		 call	 ecx

; 111  : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
?get_crew_role@@YG?AW4CREW_ROLES@@XZ ENDP		; get_crew_role
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?floor@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?floor@@YGMM@Z PROC					; floor, COMDAT

; 122  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 123  : 	return (_CSTD floorf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _floorf
  00019	83 c4 04	 add	 esp, 4

; 124  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?floor@@YGMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 685  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 686  :             return (float)floor(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  0001c	83 c4 08	 add	 esp, 8
  0001f	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00022	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 687  :         }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fscanf	PROC						; COMDAT

; 1204 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1205 :         int _Result;
; 1206 :         va_list _ArgList;
; 1207 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1208 :         _Result = _vfscanf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1209 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1210 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1211 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1062 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1063 :         return __stdio_common_vfscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfscanf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
END
