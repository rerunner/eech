; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\weapon\wn_cllsn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_acosf
PUBLIC	?acos@@YGMM@Z					; acos
PUBLIC	?collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z ; collision_test_weapon_with_given_target
PUBLIC	?collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU1@PAUVEC3D@@1@Z ; collision_test_weapon_with_any_target
PUBLIC	?collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z ; collision_test_weapon_with_trees
PUBLIC	?get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z ; get_local_entity_armour_thickness
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA ; `collision_test_weapon_with_given_target'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_06GEPNGEJI@weapon@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BE@NLKNDBBE@weapon_old_position@		; `string'
PUBLIC	??_C@_0BE@KMIGHAMK@weapon_new_position@		; `string'
PUBLIC	??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA ; `collision_test_weapon_with_any_target'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z@4JA ; `collision_test_weapon_with_trees'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA ; `get_local_entity_armour_thickness'::`1'::__LINE__Var
PUBLIC	??_C@_0DO@IPFEOOIL@get_local_entity_int_value?5?$CIwea@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe921fb51000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4002d97c7cc00000
PUBLIC	__real@4014000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_acos:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU1@@Z:PROC ; get_3d_perp_dist_of_point_from_line
EXTRN	?line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU2@1@Z:PROC ; line_line_3d_intercept
EXTRN	?get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z:PROC ; get_3d_vector_cube_cube_intersect
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?get_approx_3d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_approx_3d_range
EXTRN	?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z:PROC ; get_line_of_sight_collision_entity
EXTRN	?get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z:PROC ; get_line_of_sight_collision_tree
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?vehicle_database@@3PAUVEHICLE_DATA@@A:BYTE	; vehicle_database
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4002d97c7cc00000
CONST	SEGMENT
__real@4002d97c7cc00000 DQ 04002d97c7cc00000r	; 2.35619
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe921fb51000000
CONST	SEGMENT
__real@3fe921fb51000000 DQ 03fe921fb51000000r	; 0.785398
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IPFEOOIL@get_local_entity_int_value?5?$CIwea@
CONST	SEGMENT
??_C@_0DO@IPFEOOIL@get_local_entity_int_value?5?$CIwea@ DB 'get_local_ent'
	DB	'ity_int_value (weapon, INT_TYPE_IDENTIFY_WEAPON)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA DD 012fH ; `get_local_entity_armour_thickness'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z@4JA DD 0112H ; `collision_test_weapon_with_trees'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA DD 0f0H ; `collision_test_weapon_with_any_target'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_SERVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KMIGHAMK@weapon_new_position@
CONST	SEGMENT
??_C@_0BE@KMIGHAMK@weapon_new_position@ DB 'weapon_new_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLKNDBBE@weapon_old_position@
CONST	SEGMENT
??_C@_0BE@NLKNDBBE@weapon_old_position@ DB 'weapon_old_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEPNGEJI@weapon@
CONST	SEGMENT
??_C@_06GEPNGEJI@weapon@ DB 'weapon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_clls'
	DB	'n.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA DD 056H ; `collision_test_weapon_with_given_target'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_cllsn.c
;	COMDAT ?get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z
_TEXT	SEGMENT
tv322 = -136						; size = 8
tv323 = -128						; size = 8
tv267 = -128						; size = 4
tv246 = -128						; size = 4
tv225 = -128						; size = 4
tv206 = -128						; size = 4
tv169 = -128						; size = 4
tv148 = -128						; size = 4
tv88 = -128						; size = 4
tv291 = -124						; size = 4
tv280 = -124						; size = 4
tv259 = -124						; size = 4
tv238 = -124						; size = 4
tv218 = -124						; size = 4
tv198 = -124						; size = 4
tv190 = -124						; size = 4
tv161 = -124						; size = 4
tv141 = -124						; size = 4
tv80 = -124						; size = 4
_weapon_attitude$1 = -56				; size = 4
_target_attitude$2 = -52				; size = 4
_theta$3 = -48						; size = 4
_cos_theta$4 = -44					; size = 4
_weapon_zvz$5 = -40					; size = 4
_weapon_zvx$6 = -36					; size = 4
_target_zvz$7 = -32					; size = 4
_target_zvx$8 = -28					; size = 4
_pilot$9 = -24						; size = 4
_launcher$10 = -20					; size = 4
_difficulty$11 = -16					; size = 4
_armoured$12 = -12					; size = 4
_sub_type$ = -8						; size = 4
_armour_thickness$ = -4					; size = 4
_target$ = 8						; size = 4
_weapon$ = 12						; size = 4
?get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z PROC ; get_local_entity_armour_thickness, COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 304  : 	float
; 305  : 		armour_thickness;
; 306  : 
; 307  : 	entity_sub_types
; 308  : 		sub_type;
; 309  : 
; 310  : 	ASSERT (target);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@get_local_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_local_:

; 311  : 
; 312  : 	ASSERT (weapon);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@get_local_
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  00035	83 c0 09	 add	 eax, 9
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06GEPNGEJI@weapon@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_local_:

; 313  : 
; 314  : 	ASSERT (get_local_entity_int_value (weapon, INT_TYPE_IDENTIFY_WEAPON));

  00048	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  0004c	74 0a		 je	 SHORT $LN17@get_local_
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 4d 84	 mov	 DWORD PTR tv80[ebp], ecx
  00056	eb 21		 jmp	 SHORT $LN18@get_local_
$LN17@get_local_:
  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  0005e	83 c2 0b	 add	 edx, 11			; 0000000bH
  00061	52		 push	 edx
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00072	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN18@get_local_:
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	85 c9		 test	 ecx, ecx
  00080	74 09		 je	 SHORT $LN19@get_local_
  00082	c7 45 80 62 00
	00 00		 mov	 DWORD PTR tv88[ebp], 98	; 00000062H
  00089	eb 21		 jmp	 SHORT $LN20@get_local_
$LN19@get_local_:
  0008b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  00091	83 c2 0b	 add	 edx, 11			; 0000000bH
  00094	52		 push	 edx
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a5	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN20@get_local_:
  000ac	6a 62		 push	 98			; 00000062H
  000ae	8b 4d 0c	 mov	 ecx, DWORD PTR _weapon$[ebp]
  000b1	51		 push	 ecx
  000b2	69 55 84 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b9	8b 45 80	 mov	 eax, DWORD PTR tv88[ebp]
  000bc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c3	ff d1		 call	 ecx
  000c5	85 c0		 test	 eax, eax
  000c7	75 18		 jne	 SHORT $LN4@get_local_
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  000ce	83 c0 0b	 add	 eax, 11			; 0000000bH
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@IPFEOOIL@get_local_entity_int_value?5?$CIwea@
  000dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_local_:

; 315  : 
; 316  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  000e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  000e8	74 18		 je	 SHORT $LN5@get_local_
  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  000ef	83 c0 0d	 add	 eax, 13			; 0000000dH
  000f2	50		 push	 eax
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  000fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_local_:

; 317  : 
; 318  : 	armour_thickness = 0.0;

  00102	0f 57 c0	 xorps	 xmm0, xmm0
  00105	f3 0f 11 45 fc	 movss	 DWORD PTR _armour_thickness$[ebp], xmm0

; 319  : 
; 320  : 	////////////////////////////////////////
; 321  : 	//
; 322  : 	// only vehicles are armoured
; 323  : 	//
; 324  : 	////////////////////////////////////////
; 325  : 
; 326  : 	if (!get_local_entity_int_value (target, INT_TYPE_IDENTIFY_VEHICLE))

  0010a	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0010e	74 0a		 je	 SHORT $LN21@get_local_
  00110	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00113	8b 08		 mov	 ecx, DWORD PTR [eax]
  00115	89 4d 84	 mov	 DWORD PTR tv141[ebp], ecx
  00118	eb 1d		 jmp	 SHORT $LN22@get_local_
$LN21@get_local_:
  0011a	68 46 01 00 00	 push	 326			; 00000146H
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00124	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0012a	52		 push	 edx
  0012b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00130	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$LN22@get_local_:
  00137	b8 01 00 00 00	 mov	 eax, 1
  0013c	85 c0		 test	 eax, eax
  0013e	74 09		 je	 SHORT $LN23@get_local_
  00140	c7 45 80 60 00
	00 00		 mov	 DWORD PTR tv148[ebp], 96 ; 00000060H
  00147	eb 1d		 jmp	 SHORT $LN24@get_local_
$LN23@get_local_:
  00149	68 46 01 00 00	 push	 326			; 00000146H
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00153	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv148[ebp], 0
$LN24@get_local_:
  00166	6a 60		 push	 96			; 00000060H
  00168	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0016b	52		 push	 edx
  0016c	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv141[ebp], 1116
  00173	8b 4d 80	 mov	 ecx, DWORD PTR tv148[ebp]
  00176	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0017d	ff d2		 call	 edx
  0017f	85 c0		 test	 eax, eax
  00181	75 08		 jne	 SHORT $LN6@get_local_

; 327  : 	{
; 328  : 		return (armour_thickness);

  00183	d9 45 fc	 fld	 DWORD PTR _armour_thickness$[ebp]
  00186	e9 1d 05 00 00	 jmp	 $LN1@get_local_
$LN6@get_local_:

; 329  : 	}
; 330  : 
; 331  : 	sub_type = get_local_entity_int_value (target, INT_TYPE_ENTITY_SUB_TYPE);

  0018b	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0018f	74 0a		 je	 SHORT $LN25@get_local_
  00191	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	89 4d 84	 mov	 DWORD PTR tv161[ebp], ecx
  00199	eb 21		 jmp	 SHORT $LN26@get_local_
$LN25@get_local_:
  0019b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  001a1	83 c2 1c	 add	 edx, 28			; 0000001cH
  001a4	52		 push	 edx
  001a5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN26@get_local_:
  001bc	b9 01 00 00 00	 mov	 ecx, 1
  001c1	85 c9		 test	 ecx, ecx
  001c3	74 09		 je	 SHORT $LN27@get_local_
  001c5	c7 45 80 34 00
	00 00		 mov	 DWORD PTR tv169[ebp], 52 ; 00000034H
  001cc	eb 21		 jmp	 SHORT $LN28@get_local_
$LN27@get_local_:
  001ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  001d4	83 c2 1c	 add	 edx, 28			; 0000001cH
  001d7	52		 push	 edx
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  001dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], 0
$LN28@get_local_:
  001ef	6a 34		 push	 52			; 00000034H
  001f1	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001f4	51		 push	 ecx
  001f5	69 55 84 5c 04
	00 00		 imul	 edx, DWORD PTR tv161[ebp], 1116
  001fc	8b 45 80	 mov	 eax, DWORD PTR tv169[ebp]
  001ff	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00206	ff d1		 call	 ecx
  00208	89 45 f8	 mov	 DWORD PTR _sub_type$[ebp], eax

; 332  : 
; 333  : 	////////////////////////////////////////
; 334  : 	//
; 335  : 	// only some vehicles are armoured
; 336  : 	//
; 337  : 	////////////////////////////////////////
; 338  : 	{
; 339  : 		int
; 340  : 			armoured;
; 341  : 
; 342  : 		armoured =

  0020b	69 45 f8 bc 00
	00 00		 imul	 eax, DWORD PTR _sub_type$[ebp], 188
  00212	f3 0f 5a 80 9c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[eax+156]
  0021a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00222	77 3b		 ja	 SHORT $LN29@get_local_
  00224	69 4d f8 bc 00
	00 00		 imul	 ecx, DWORD PTR _sub_type$[ebp], 188
  0022b	f3 0f 5a 81 a0
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[ecx+160]
  00233	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0023b	77 22		 ja	 SHORT $LN29@get_local_
  0023d	69 55 f8 bc 00
	00 00		 imul	 edx, DWORD PTR _sub_type$[ebp], 188
  00244	f3 0f 5a 82 a4
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[edx+164]
  0024c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00254	77 09		 ja	 SHORT $LN29@get_local_
  00256	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
  0025d	eb 07		 jmp	 SHORT $LN30@get_local_
$LN29@get_local_:
  0025f	c7 45 84 01 00
	00 00		 mov	 DWORD PTR tv190[ebp], 1
$LN30@get_local_:
  00266	8b 45 84	 mov	 eax, DWORD PTR tv190[ebp]
  00269	89 45 f4	 mov	 DWORD PTR _armoured$12[ebp], eax

; 343  : 		(
; 344  : 			(vehicle_database[sub_type].armour_front > 0.0) ||
; 345  : 			(vehicle_database[sub_type].armour_side > 0.0) ||
; 346  : 			(vehicle_database[sub_type].armour_rear > 0.0)
; 347  : 		);
; 348  : 
; 349  : 		if (!armoured)

  0026c	83 7d f4 00	 cmp	 DWORD PTR _armoured$12[ebp], 0
  00270	75 08		 jne	 SHORT $LN7@get_local_

; 350  : 		{
; 351  : 			return (armour_thickness);

  00272	d9 45 fc	 fld	 DWORD PTR _armour_thickness$[ebp]
  00275	e9 2e 04 00 00	 jmp	 $LN1@get_local_
$LN7@get_local_:

; 352  : 		}
; 353  : 	}
; 354  : 
; 355  : 	////////////////////////////////////////
; 356  : 	//
; 357  : 	// get game difficulty level (use player's own level)
; 358  : 	//
; 359  : 	////////////////////////////////////////
; 360  : 	{
; 361  : 		game_difficulty_settings
; 362  : 			difficulty;
; 363  : 
; 364  : 		entity
; 365  : 			*launcher,
; 366  : 			*pilot;
; 367  : 
; 368  : 		difficulty = get_global_difficulty_level ();

  0027a	a1 ac 01 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+428
  0027f	89 45 f0	 mov	 DWORD PTR _difficulty$11[ebp], eax

; 369  : 
; 370  : 		launcher = get_local_entity_parent (weapon, LIST_TYPE_LAUNCHED_WEAPON);

  00282	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  00286	74 0a		 je	 SHORT $LN31@get_local_
  00288	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  0028b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028d	89 4d 84	 mov	 DWORD PTR tv198[ebp], ecx
  00290	eb 21		 jmp	 SHORT $LN32@get_local_
$LN31@get_local_:
  00292	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  00298	83 c2 43	 add	 edx, 67			; 00000043H
  0029b	52		 push	 edx
  0029c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ac	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv198[ebp], 0
$LN32@get_local_:
  002b3	b9 01 00 00 00	 mov	 ecx, 1
  002b8	85 c9		 test	 ecx, ecx
  002ba	74 09		 je	 SHORT $LN33@get_local_
  002bc	c7 45 80 18 00
	00 00		 mov	 DWORD PTR tv206[ebp], 24 ; 00000018H
  002c3	eb 21		 jmp	 SHORT $LN34@get_local_
$LN33@get_local_:
  002c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  002cb	83 c2 43	 add	 edx, 67			; 00000043H
  002ce	52		 push	 edx
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  002d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002df	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv206[ebp], 0
$LN34@get_local_:
  002e6	6a 18		 push	 24			; 00000018H
  002e8	8b 4d 0c	 mov	 ecx, DWORD PTR _weapon$[ebp]
  002eb	51		 push	 ecx
  002ec	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv198[ebp], 180
  002f3	8b 45 80	 mov	 eax, DWORD PTR tv206[ebp]
  002f6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002fd	ff d1		 call	 ecx
  002ff	89 45 ec	 mov	 DWORD PTR _launcher$10[ebp], eax

; 371  : 
; 372  : 		if (launcher)

  00302	83 7d ec 00	 cmp	 DWORD PTR _launcher$10[ebp], 0
  00306	0f 84 8a 01 00
	00		 je	 $LN10@get_local_

; 373  : 		{
; 374  : 			if (get_local_entity_int_value (launcher, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  0030c	83 7d ec 00	 cmp	 DWORD PTR _launcher$10[ebp], 0
  00310	74 0a		 je	 SHORT $LN35@get_local_
  00312	8b 45 ec	 mov	 eax, DWORD PTR _launcher$10[ebp]
  00315	8b 08		 mov	 ecx, DWORD PTR [eax]
  00317	89 4d 84	 mov	 DWORD PTR tv218[ebp], ecx
  0031a	eb 1d		 jmp	 SHORT $LN36@get_local_
$LN35@get_local_:
  0031c	68 76 01 00 00	 push	 374			; 00000176H
  00321	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00326	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0032c	52		 push	 edx
  0032d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00332	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
$LN36@get_local_:
  00339	b8 01 00 00 00	 mov	 eax, 1
  0033e	85 c0		 test	 eax, eax
  00340	74 09		 je	 SHORT $LN37@get_local_
  00342	c7 45 80 9c 00
	00 00		 mov	 DWORD PTR tv225[ebp], 156 ; 0000009cH
  00349	eb 1d		 jmp	 SHORT $LN38@get_local_
$LN37@get_local_:
  0034b	68 76 01 00 00	 push	 374			; 00000176H
  00350	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00355	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0035b	51		 push	 ecx
  0035c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00361	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv225[ebp], 0
$LN38@get_local_:
  00368	68 9c 00 00 00	 push	 156			; 0000009cH
  0036d	8b 55 ec	 mov	 edx, DWORD PTR _launcher$10[ebp]
  00370	52		 push	 edx
  00371	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv218[ebp], 1116
  00378	8b 4d 80	 mov	 ecx, DWORD PTR tv225[ebp]
  0037b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00382	ff d2		 call	 edx
  00384	85 c0		 test	 eax, eax
  00386	0f 84 0a 01 00
	00		 je	 $LN10@get_local_

; 375  : 			{
; 376  : 				pilot = get_local_entity_first_child (launcher, LIST_TYPE_AIRCREW);

  0038c	83 7d ec 00	 cmp	 DWORD PTR _launcher$10[ebp], 0
  00390	74 0a		 je	 SHORT $LN39@get_local_
  00392	8b 45 ec	 mov	 eax, DWORD PTR _launcher$10[ebp]
  00395	8b 08		 mov	 ecx, DWORD PTR [eax]
  00397	89 4d 84	 mov	 DWORD PTR tv238[ebp], ecx
  0039a	eb 21		 jmp	 SHORT $LN40@get_local_
$LN39@get_local_:
  0039c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  003a2	83 c2 49	 add	 edx, 73			; 00000049H
  003a5	52		 push	 edx
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003b0	50		 push	 eax
  003b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003b6	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv238[ebp], 0
$LN40@get_local_:
  003bd	b9 01 00 00 00	 mov	 ecx, 1
  003c2	85 c9		 test	 ecx, ecx
  003c4	74 09		 je	 SHORT $LN41@get_local_
  003c6	c7 45 80 01 00
	00 00		 mov	 DWORD PTR tv246[ebp], 1
  003cd	eb 21		 jmp	 SHORT $LN42@get_local_
$LN41@get_local_:
  003cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  003d5	83 c2 49	 add	 edx, 73			; 00000049H
  003d8	52		 push	 edx
  003d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  003de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  003e3	50		 push	 eax
  003e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e9	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv246[ebp], 0
$LN42@get_local_:
  003f0	6a 01		 push	 1
  003f2	8b 4d ec	 mov	 ecx, DWORD PTR _launcher$10[ebp]
  003f5	51		 push	 ecx
  003f6	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv238[ebp], 180
  003fd	8b 45 80	 mov	 eax, DWORD PTR tv246[ebp]
  00400	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00407	ff d1		 call	 ecx
  00409	89 45 e8	 mov	 DWORD PTR _pilot$9[ebp], eax

; 377  : 
; 378  : 				if (pilot)

  0040c	83 7d e8 00	 cmp	 DWORD PTR _pilot$9[ebp], 0
  00410	0f 84 80 00 00
	00		 je	 $LN10@get_local_

; 379  : 				{
; 380  : 					difficulty = (game_difficulty_settings) get_local_entity_int_value (pilot, INT_TYPE_DIFFICULTY_LEVEL);

  00416	83 7d e8 00	 cmp	 DWORD PTR _pilot$9[ebp], 0
  0041a	74 0a		 je	 SHORT $LN43@get_local_
  0041c	8b 45 e8	 mov	 eax, DWORD PTR _pilot$9[ebp]
  0041f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00421	89 4d 84	 mov	 DWORD PTR tv259[ebp], ecx
  00424	eb 21		 jmp	 SHORT $LN44@get_local_
$LN43@get_local_:
  00426	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  0042c	83 c2 4d	 add	 edx, 77			; 0000004dH
  0042f	52		 push	 edx
  00430	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00435	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0043a	50		 push	 eax
  0043b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00440	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv259[ebp], 0
$LN44@get_local_:
  00447	b9 01 00 00 00	 mov	 ecx, 1
  0044c	85 c9		 test	 ecx, ecx
  0044e	74 09		 je	 SHORT $LN45@get_local_
  00450	c7 45 80 2f 00
	00 00		 mov	 DWORD PTR tv267[ebp], 47 ; 0000002fH
  00457	eb 21		 jmp	 SHORT $LN46@get_local_
$LN45@get_local_:
  00459	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  0045f	83 c2 4d	 add	 edx, 77			; 0000004dH
  00462	52		 push	 edx
  00463	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00468	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0046d	50		 push	 eax
  0046e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00473	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv267[ebp], 0
$LN46@get_local_:
  0047a	6a 2f		 push	 47			; 0000002fH
  0047c	8b 4d e8	 mov	 ecx, DWORD PTR _pilot$9[ebp]
  0047f	51		 push	 ecx
  00480	69 55 84 5c 04
	00 00		 imul	 edx, DWORD PTR tv259[ebp], 1116
  00487	8b 45 80	 mov	 eax, DWORD PTR tv267[ebp]
  0048a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00491	ff d1		 call	 ecx
  00493	89 45 f0	 mov	 DWORD PTR _difficulty$11[ebp], eax
$LN10@get_local_:

; 381  : 				}
; 382  : 			}
; 383  : 		}
; 384  : 
; 385  : 		if (difficulty == GAME_DIFFICULTY_EASY)

  00496	83 7d f0 03	 cmp	 DWORD PTR _difficulty$11[ebp], 3
  0049a	75 08		 jne	 SHORT $LN11@get_local_

; 386  : 		{
; 387  : 			return (armour_thickness);

  0049c	d9 45 fc	 fld	 DWORD PTR _armour_thickness$[ebp]
  0049f	e9 04 02 00 00	 jmp	 $LN1@get_local_
$LN11@get_local_:

; 388  : 		}
; 389  : 	}
; 390  : 
; 391  : 	////////////////////////////////////////
; 392  : 	//
; 393  : 	// get armour thickness
; 394  : 	//
; 395  : 	////////////////////////////////////////
; 396  : 	{
; 397  : 		float
; 398  : 			target_zvx,
; 399  : 			target_zvz,
; 400  : 			weapon_zvx,
; 401  : 			weapon_zvz,
; 402  : 			cos_theta,
; 403  : 			theta;
; 404  : 
; 405  : 		matrix3x3
; 406  : 			*target_attitude,
; 407  : 			*weapon_attitude;
; 408  : 
; 409  : 		target_attitude = get_local_entity_attitude_matrix_ptr (target);

  004a4	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004a8	74 0a		 je	 SHORT $LN47@get_local_
  004aa	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  004af	89 4d 84	 mov	 DWORD PTR tv280[ebp], ecx
  004b2	eb 21		 jmp	 SHORT $LN48@get_local_
$LN47@get_local_:
  004b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  004ba	83 c2 6a	 add	 edx, 106		; 0000006aH
  004bd	52		 push	 edx
  004be	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  004c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ce	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv280[ebp], 0
$LN48@get_local_:
  004d5	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  004d8	51		 push	 ecx
  004d9	8b 55 84	 mov	 edx, DWORD PTR tv280[ebp]
  004dc	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  004e3	ff d0		 call	 eax
  004e5	89 45 cc	 mov	 DWORD PTR _target_attitude$2[ebp], eax

; 410  : 		weapon_attitude = get_local_entity_attitude_matrix_ptr (weapon);

  004e8	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  004ec	74 0a		 je	 SHORT $LN49@get_local_
  004ee	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  004f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004f3	89 4d 84	 mov	 DWORD PTR tv291[ebp], ecx
  004f6	eb 21		 jmp	 SHORT $LN50@get_local_
$LN49@get_local_:
  004f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z@4JA
  004fe	83 c2 6b	 add	 edx, 107		; 0000006bH
  00501	52		 push	 edx
  00502	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00507	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0050c	50		 push	 eax
  0050d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00512	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv291[ebp], 0
$LN50@get_local_:
  00519	8b 4d 0c	 mov	 ecx, DWORD PTR _weapon$[ebp]
  0051c	51		 push	 ecx
  0051d	8b 55 84	 mov	 edx, DWORD PTR tv291[ebp]
  00520	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  00527	ff d0		 call	 eax
  00529	89 45 c8	 mov	 DWORD PTR _weapon_attitude$1[ebp], eax

; 411  : 
; 412  : 		target_zvx = (*target_attitude)[2][0];

  0052c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00531	d1 e0		 shl	 eax, 1
  00533	03 45 cc	 add	 eax, DWORD PTR _target_attitude$2[ebp]
  00536	b9 04 00 00 00	 mov	 ecx, 4
  0053b	6b d1 00	 imul	 edx, ecx, 0
  0053e	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00543	f3 0f 11 45 e4	 movss	 DWORD PTR _target_zvx$8[ebp], xmm0

; 413  : 		target_zvz = (*target_attitude)[2][2];

  00548	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0054d	d1 e0		 shl	 eax, 1
  0054f	03 45 cc	 add	 eax, DWORD PTR _target_attitude$2[ebp]
  00552	b9 04 00 00 00	 mov	 ecx, 4
  00557	d1 e1		 shl	 ecx, 1
  00559	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0055e	f3 0f 11 45 e0	 movss	 DWORD PTR _target_zvz$7[ebp], xmm0

; 414  : 		weapon_zvx = -(*weapon_attitude)[2][0];

  00563	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00568	d1 e0		 shl	 eax, 1
  0056a	03 45 c8	 add	 eax, DWORD PTR _weapon_attitude$1[ebp]
  0056d	b9 04 00 00 00	 mov	 ecx, 4
  00572	6b d1 00	 imul	 edx, ecx, 0
  00575	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0057a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00581	f3 0f 11 45 dc	 movss	 DWORD PTR _weapon_zvx$6[ebp], xmm0

; 415  : 		weapon_zvz = -(*weapon_attitude)[2][2];

  00586	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0058b	d1 e0		 shl	 eax, 1
  0058d	03 45 c8	 add	 eax, DWORD PTR _weapon_attitude$1[ebp]
  00590	b9 04 00 00 00	 mov	 ecx, 4
  00595	d1 e1		 shl	 ecx, 1
  00597	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0059c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005a3	f3 0f 11 45 d8	 movss	 DWORD PTR _weapon_zvz$5[ebp], xmm0

; 416  : 
; 417  : 		cos_theta = (target_zvx * weapon_zvx) + (target_zvz * weapon_zvz);

  005a8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _target_zvx$8[ebp]
  005ad	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _weapon_zvx$6[ebp]
  005b2	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _target_zvz$7[ebp]
  005b7	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _weapon_zvz$5[ebp]
  005bc	f3 0f 58 c1	 addss	 xmm0, xmm1
  005c0	f3 0f 11 45 d4	 movss	 DWORD PTR _cos_theta$4[ebp], xmm0

; 418  : 
; 419  : 		cos_theta = bound (cos_theta, -1.0, 1.0);

  005c5	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cos_theta$4[ebp]
  005ca	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  005d2	66 0f 2f c8	 comisd	 xmm1, xmm0
  005d6	76 0f		 jbe	 SHORT $LN53@get_local_
  005d8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  005e0	f2 0f 11 45 80	 movsd	 QWORD PTR tv323[ebp], xmm0
  005e5	eb 3b		 jmp	 SHORT $LN54@get_local_
$LN53@get_local_:
  005e7	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cos_theta$4[ebp]
  005ec	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  005f4	76 12		 jbe	 SHORT $LN51@get_local_
  005f6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005fe	f2 0f 11 85 78
	ff ff ff	 movsd	 QWORD PTR tv322[ebp], xmm0
  00606	eb 0d		 jmp	 SHORT $LN52@get_local_
$LN51@get_local_:
  00608	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cos_theta$4[ebp]
  0060d	f2 0f 11 85 78
	ff ff ff	 movsd	 QWORD PTR tv322[ebp], xmm0
$LN52@get_local_:
  00615	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR tv322[ebp]
  0061d	f2 0f 11 45 80	 movsd	 QWORD PTR tv323[ebp], xmm0
$LN54@get_local_:
  00622	f2 0f 5a 45 80	 cvtsd2ss xmm0, QWORD PTR tv323[ebp]
  00627	f3 0f 11 45 d4	 movss	 DWORD PTR _cos_theta$4[ebp], xmm0

; 420  : 
; 421  : 		theta = acos (cos_theta);

  0062c	51		 push	 ecx
  0062d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _cos_theta$4[ebp]
  00632	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00637	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  0063c	d9 5d d0	 fstp	 DWORD PTR _theta$3[ebp]

; 422  : 
; 423  : 		if (theta <= rad (45.0))

  0063f	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _theta$3[ebp]
  00644	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe921fb51000000
  0064c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00650	72 16		 jb	 SHORT $LN12@get_local_

; 424  : 		{
; 425  : 			armour_thickness = vehicle_database[sub_type].armour_front;

  00652	69 45 f8 bc 00
	00 00		 imul	 eax, DWORD PTR _sub_type$[ebp], 188
  00659	f3 0f 10 80 9c
	00 00 00	 movss	 xmm0, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[eax+156]
  00661	f3 0f 11 45 fc	 movss	 DWORD PTR _armour_thickness$[ebp], xmm0
  00666	eb 3d		 jmp	 SHORT $LN15@get_local_
$LN12@get_local_:

; 426  : 		}
; 427  : 		else if (theta <= rad (135.0))

  00668	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _theta$3[ebp]
  0066d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4002d97c7cc00000
  00675	66 0f 2f c8	 comisd	 xmm1, xmm0
  00679	72 16		 jb	 SHORT $LN14@get_local_

; 428  : 		{
; 429  : 			armour_thickness = vehicle_database[sub_type].armour_side;

  0067b	69 45 f8 bc 00
	00 00		 imul	 eax, DWORD PTR _sub_type$[ebp], 188
  00682	f3 0f 10 80 a0
	00 00 00	 movss	 xmm0, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[eax+160]
  0068a	f3 0f 11 45 fc	 movss	 DWORD PTR _armour_thickness$[ebp], xmm0

; 430  : 		}
; 431  : 		else

  0068f	eb 14		 jmp	 SHORT $LN15@get_local_
$LN14@get_local_:

; 432  : 		{
; 433  : 			armour_thickness = vehicle_database[sub_type].armour_rear;

  00691	69 45 f8 bc 00
	00 00		 imul	 eax, DWORD PTR _sub_type$[ebp], 188
  00698	f3 0f 10 80 a4
	00 00 00	 movss	 xmm0, DWORD PTR ?vehicle_database@@3PAUVEHICLE_DATA@@A[eax+164]
  006a0	f3 0f 11 45 fc	 movss	 DWORD PTR _armour_thickness$[ebp], xmm0
$LN15@get_local_:

; 434  : 		}
; 435  : 	}
; 436  : 
; 437  : 	return (armour_thickness);

  006a5	d9 45 fc	 fld	 DWORD PTR _armour_thickness$[ebp]
$LN1@get_local_:

; 438  : }

  006a8	5f		 pop	 edi
  006a9	5e		 pop	 esi
  006aa	5b		 pop	 ebx
  006ab	8b e5		 mov	 esp, ebp
  006ad	5d		 pop	 ebp
  006ae	c2 08 00	 ret	 8
?get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z ENDP ; get_local_entity_armour_thickness
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_cllsn.c
;	COMDAT ?collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z
_TEXT	SEGMENT
_face_normal$ = -28					; size = 12
_intercept_point$ = -16					; size = 12
_hit_tree$ = -4						; size = 4
_weapon_old_position$ = 8				; size = 4
_weapon_new_position$ = 12				; size = 4
?collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z PROC ; collision_test_weapon_with_trees, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  : 	int
; 276  : 		hit_tree;
; 277  : 
; 278  : 	vec3d
; 279  : 		intercept_point,
; 280  : 		face_normal;
; 281  : 
; 282  : 	ASSERT (weapon_old_position);

  00009	83 7d 08 00	 cmp	 DWORD PTR _weapon_old_position$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@collision_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLKNDBBE@weapon_old_position@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@collision_:

; 283  : 
; 284  : 	ASSERT (weapon_new_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _weapon_new_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@collision_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z@4JA
  00032	83 c0 0a	 add	 eax, 10			; 0000000aH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KMIGHAMK@weapon_new_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@collision_:

; 285  : 
; 286  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0004c	74 18		 je	 SHORT $LN4@collision_
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z@4JA
  00053	83 c0 0c	 add	 eax, 12			; 0000000cH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@collision_:

; 287  : 
; 288  : 	hit_tree = get_line_of_sight_collision_tree (weapon_old_position, weapon_new_position, &intercept_point, &face_normal, FALSE, TRUE);

  00066	6a 01		 push	 1
  00068	6a 00		 push	 0
  0006a	8d 45 e4	 lea	 eax, DWORD PTR _face_normal$[ebp]
  0006d	50		 push	 eax
  0006e	8d 4d f0	 lea	 ecx, DWORD PTR _intercept_point$[ebp]
  00071	51		 push	 ecx
  00072	8b 55 0c	 mov	 edx, DWORD PTR _weapon_new_position$[ebp]
  00075	52		 push	 edx
  00076	8b 45 08	 mov	 eax, DWORD PTR _weapon_old_position$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z ; get_line_of_sight_collision_tree
  0007f	89 45 fc	 mov	 DWORD PTR _hit_tree$[ebp], eax

; 289  : 
; 290  : 	if (hit_tree)

  00082	83 7d fc 00	 cmp	 DWORD PTR _hit_tree$[ebp], 0
  00086	74 14		 je	 SHORT $LN5@collision_

; 291  : 	{
; 292  : 		*weapon_new_position = intercept_point;

  00088	8b 45 0c	 mov	 eax, DWORD PTR _weapon_new_position$[ebp]
  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _intercept_point$[ebp]
  0008e	89 08		 mov	 DWORD PTR [eax], ecx
  00090	8b 55 f4	 mov	 edx, DWORD PTR _intercept_point$[ebp+4]
  00093	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _intercept_point$[ebp+8]
  00099	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN5@collision_:

; 293  : 	}
; 294  : 
; 295  : 	return (hit_tree);

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _hit_tree$[ebp]

; 296  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 08 00	 ret	 8
?collision_test_weapon_with_trees@@YGHPAUVEC3D@@0@Z ENDP ; collision_test_weapon_with_trees
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_cllsn.c
;	COMDAT ?collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU1@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv130 = -104						; size = 4
tv90 = -100						; size = 4
_face_normal$ = -32					; size = 12
_weapon_intercept_point$ = -20				; size = 12
_collision_entity$ = -8					; size = 4
_launcher$ = -4						; size = 4
_weapon$ = 8						; size = 4
_weapon_old_position$ = 12				; size = 4
_weapon_new_position$ = 16				; size = 4
?collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU1@PAUVEC3D@@1@Z PROC ; collision_test_weapon_with_any_target, COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 241  : 	entity
; 242  : 		*launcher,
; 243  : 		*collision_entity;
; 244  : 
; 245  : 	vec3d
; 246  : 		weapon_intercept_point,
; 247  : 		face_normal;
; 248  : 
; 249  : 	ASSERT (weapon);

  00009	83 7d 08 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@collision_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA
  00014	83 c0 09	 add	 eax, 9
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06GEPNGEJI@weapon@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@collision_:

; 250  : 
; 251  : 	ASSERT (weapon_old_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _weapon_old_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@collision_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA
  00032	83 c0 0b	 add	 eax, 11			; 0000000bH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLKNDBBE@weapon_old_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@collision_:

; 252  : 
; 253  : 	ASSERT (weapon_new_position);

  00045	83 7d 10 00	 cmp	 DWORD PTR _weapon_new_position$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@collision_
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA
  00050	83 c0 0d	 add	 eax, 13			; 0000000dH
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KMIGHAMK@weapon_new_position@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@collision_:

; 254  : 
; 255  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00063	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0006a	74 18		 je	 SHORT $LN5@collision_
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA
  00071	83 c0 0f	 add	 eax, 15			; 0000000fH
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@collision_:

; 256  : 
; 257  : 	launcher = get_local_entity_parent (weapon, LIST_TYPE_LAUNCHED_WEAPON);

  00084	83 7d 08 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  00088	74 0a		 je	 SHORT $LN8@collision_
  0008a	8b 45 08	 mov	 eax, DWORD PTR _weapon$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	89 4d 9c	 mov	 DWORD PTR tv90[ebp], ecx
  00092	eb 21		 jmp	 SHORT $LN9@collision_
$LN8@collision_:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA
  0009a	83 c2 11	 add	 edx, 17			; 00000011H
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN9@collision_:
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	85 c9		 test	 ecx, ecx
  000bc	74 09		 je	 SHORT $LN10@collision_
  000be	c7 45 98 18 00
	00 00		 mov	 DWORD PTR tv130[ebp], 24 ; 00000018H
  000c5	eb 21		 jmp	 SHORT $LN11@collision_
$LN10@collision_:
  000c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU2@PAUVEC3D@@1@Z@4JA
  000cd	83 c2 11	 add	 edx, 17			; 00000011H
  000d0	52		 push	 edx
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e1	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN11@collision_:
  000e8	6a 18		 push	 24			; 00000018H
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _weapon$[ebp]
  000ed	51		 push	 ecx
  000ee	69 55 9c b4 00
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 180
  000f5	8b 45 98	 mov	 eax, DWORD PTR tv130[ebp]
  000f8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000ff	ff d1		 call	 ecx
  00101	89 45 fc	 mov	 DWORD PTR _launcher$[ebp], eax

; 258  : 
; 259  : 	collision_entity = get_line_of_sight_collision_entity (launcher, NULL, weapon_old_position, weapon_new_position, &weapon_intercept_point, &face_normal);

  00104	8d 45 e0	 lea	 eax, DWORD PTR _face_normal$[ebp]
  00107	50		 push	 eax
  00108	8d 4d ec	 lea	 ecx, DWORD PTR _weapon_intercept_point$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 10	 mov	 edx, DWORD PTR _weapon_new_position$[ebp]
  0010f	52		 push	 edx
  00110	8b 45 0c	 mov	 eax, DWORD PTR _weapon_old_position$[ebp]
  00113	50		 push	 eax
  00114	6a 00		 push	 0
  00116	8b 4d fc	 mov	 ecx, DWORD PTR _launcher$[ebp]
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 ?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z ; get_line_of_sight_collision_entity
  0011f	89 45 f8	 mov	 DWORD PTR _collision_entity$[ebp], eax

; 260  : 
; 261  : 	if (collision_entity)

  00122	83 7d f8 00	 cmp	 DWORD PTR _collision_entity$[ebp], 0
  00126	74 14		 je	 SHORT $LN6@collision_

; 262  : 	{
; 263  : 		*weapon_new_position = weapon_intercept_point;

  00128	8b 45 10	 mov	 eax, DWORD PTR _weapon_new_position$[ebp]
  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp]
  0012e	89 08		 mov	 DWORD PTR [eax], ecx
  00130	8b 55 f0	 mov	 edx, DWORD PTR _weapon_intercept_point$[ebp+4]
  00133	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00136	8b 4d f4	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp+8]
  00139	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN6@collision_:

; 264  : 	}
; 265  : 
; 266  : 	return (collision_entity);

  0013c	8b 45 f8	 mov	 eax, DWORD PTR _collision_entity$[ebp]

; 267  : }

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 0c 00	 ret	 12			; 0000000cH
?collision_test_weapon_with_any_target@@YGPAUENTITY@@PAU1@PAUVEC3D@@1@Z ENDP ; collision_test_weapon_with_any_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_cllsn.c
;	COMDAT ?collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv301 = -148						; size = 4
tv234 = -148						; size = 4
tv203 = -148						; size = 4
tv182 = -148						; size = 4
tv158 = -148						; size = 4
tv135 = -148						; size = 4
tv294 = -144						; size = 4
tv227 = -144						; size = 4
tv195 = -144						; size = 4
tv175 = -144						; size = 4
tv150 = -144						; size = 4
tv95 = -144						; size = 4
$T1 = -140						; size = 4
_target_intercept_point$ = -72				; size = 12
_weapon_intercept_point$ = -60				; size = 12
_target_new_position$ = -48				; size = 12
_target_old_position$ = -36				; size = 12
_target_motion_vector$ = -24				; size = 4
_target_position$ = -20					; size = 4
_sqr_velocity$ = -16					; size = 4
_time_to_impact$ = -12					; size = 4
_weapon_velocity$ = -8					; size = 4
_range$ = -4						; size = 4
_weapon$ = 8						; size = 4
_target$ = 12						; size = 4
_weapon_old_position$ = 16				; size = 4
_weapon_new_position$ = 20				; size = 4
?collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z PROC ; collision_test_weapon_with_given_target, COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 87   : 	float
; 88   : 		range,
; 89   : 		weapon_velocity,
; 90   : 		time_to_impact,
; 91   : 		sqr_velocity;
; 92   : 
; 93   : 	vec3d
; 94   : 		*target_position,
; 95   : 		*target_motion_vector,
; 96   : 		target_old_position,
; 97   : 		target_new_position,
; 98   : 		weapon_intercept_point,
; 99   : 		target_intercept_point;
; 100  : 
; 101  : 	ASSERT (weapon);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@collision_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06GEPNGEJI@weapon@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@collision_:

; 102  : 
; 103  : 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@collision_
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@collision_:

; 104  : 
; 105  : 	ASSERT (weapon_old_position);

  00048	83 7d 10 00	 cmp	 DWORD PTR _weapon_old_position$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@collision_
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  00053	83 c0 13	 add	 eax, 19			; 00000013H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLKNDBBE@weapon_old_position@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@collision_:

; 106  : 
; 107  : 	ASSERT (weapon_new_position);

  00066	83 7d 14 00	 cmp	 DWORD PTR _weapon_new_position$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN5@collision_
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  00071	83 c0 15	 add	 eax, 21			; 00000015H
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KMIGHAMK@weapon_new_position@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@collision_:

; 108  : 
; 109  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0008b	74 18		 je	 SHORT $LN6@collision_
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  00092	83 c0 17	 add	 eax, 23			; 00000017H
  00095	50		 push	 eax
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  000a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@collision_:

; 110  : 
; 111  : 	//
; 112  : 	// approximate time to impact (uses the target position rather than the intercept point)
; 113  : 	//
; 114  : 
; 115  : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  000a5	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  000a9	74 0d		 je	 SHORT $LN20@collision_
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv95[ebp], ecx
  000b6	eb 24		 jmp	 SHORT $LN21@collision_
$LN20@collision_:
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  000be	83 c2 1d	 add	 edx, 29			; 0000001dH
  000c1	52		 push	 edx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d2	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv95[ebp], 0
$LN21@collision_:
  000dc	b9 01 00 00 00	 mov	 ecx, 1
  000e1	85 c9		 test	 ecx, ecx
  000e3	74 0c		 je	 SHORT $LN22@collision_
  000e5	c7 85 6c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv135[ebp], 8
  000ef	eb 24		 jmp	 SHORT $LN23@collision_
$LN22@collision_:
  000f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  000f7	83 c2 1d	 add	 edx, 29			; 0000001dH
  000fa	52		 push	 edx
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010b	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN23@collision_:
  00115	6a 08		 push	 8
  00117	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0011a	51		 push	 ecx
  0011b	6b 95 70 ff ff
	ff 60		 imul	 edx, DWORD PTR tv95[ebp], 96
  00122	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  00128	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0012f	ff d1		 call	 ecx
  00131	89 45 ec	 mov	 DWORD PTR _target_position$[ebp], eax

; 116  : 
; 117  : 	range = get_approx_3d_range (target_position, weapon_new_position);

  00134	8b 45 14	 mov	 eax, DWORD PTR _weapon_new_position$[ebp]
  00137	50		 push	 eax
  00138	8b 4d ec	 mov	 ecx, DWORD PTR _target_position$[ebp]
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ?get_approx_3d_range@@YGMPBUVEC3D@@0@Z ; get_approx_3d_range
  00141	d9 5d fc	 fstp	 DWORD PTR _range$[ebp]

; 118  : 
; 119  : 	weapon_velocity = get_local_entity_float_value (weapon, FLOAT_TYPE_VELOCITY);

  00144	83 7d 08 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  00148	74 0d		 je	 SHORT $LN24@collision_
  0014a	8b 45 08	 mov	 eax, DWORD PTR _weapon$[ebp]
  0014d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014f	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  00155	eb 24		 jmp	 SHORT $LN25@collision_
$LN24@collision_:
  00157	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  0015d	83 c2 21	 add	 edx, 33			; 00000021H
  00160	52		 push	 edx
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00166	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00171	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN25@collision_:
  0017b	b9 01 00 00 00	 mov	 ecx, 1
  00180	85 c9		 test	 ecx, ecx
  00182	74 0c		 je	 SHORT $LN26@collision_
  00184	c7 85 6c ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv158[ebp], 147 ; 00000093H
  0018e	eb 24		 jmp	 SHORT $LN27@collision_
$LN26@collision_:
  00190	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  00196	83 c2 21	 add	 edx, 33			; 00000021H
  00199	52		 push	 edx
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001aa	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN27@collision_:
  001b4	68 93 00 00 00	 push	 147			; 00000093H
  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _weapon$[ebp]
  001bc	51		 push	 ecx
  001bd	69 95 70 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv150[ebp], 700
  001c7	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  001cd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001d4	ff d1		 call	 ecx
  001d6	d9 5d f8	 fstp	 DWORD PTR _weapon_velocity$[ebp]

; 120  : 
; 121  : 	time_to_impact = range / max (weapon_velocity, 1.0f);

  001d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001e1	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  001e9	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  001ef	50		 push	 eax
  001f0	8d 4d f8	 lea	 ecx, DWORD PTR _weapon_velocity$[ebp]
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001f9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _range$[ebp]
  001fe	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  00202	f3 0f 11 45 f4	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 122  : 
; 123  : 	//
; 124  : 	// only proceed if close to impact
; 125  : 	//
; 126  : 
; 127  : 	if (time_to_impact > 0.5)

  00207	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  0020c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0000000000000
  00214	76 07		 jbe	 SHORT $LN7@collision_

; 128  : 	{
; 129  : 		return (FALSE);

  00216	33 c0		 xor	 eax, eax
  00218	e9 70 04 00 00	 jmp	 $LN1@collision_
$LN7@collision_:

; 130  : 	}
; 131  : 
; 132  : 	if (get_local_entity_int_value (target, INT_TYPE_COLLISION_TEST_MOBILE))

  0021d	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  00221	74 0d		 je	 SHORT $LN28@collision_
  00223	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00226	8b 08		 mov	 ecx, DWORD PTR [eax]
  00228	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv175[ebp], ecx
  0022e	eb 20		 jmp	 SHORT $LN29@collision_
$LN28@collision_:
  00230	68 84 00 00 00	 push	 132			; 00000084H
  00235	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00240	52		 push	 edx
  00241	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00246	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv175[ebp], 0
$LN29@collision_:
  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	85 c0		 test	 eax, eax
  00257	74 0c		 je	 SHORT $LN30@collision_
  00259	c7 85 6c ff ff
	ff 1b 00 00 00	 mov	 DWORD PTR tv182[ebp], 27 ; 0000001bH
  00263	eb 20		 jmp	 SHORT $LN31@collision_
$LN30@collision_:
  00265	68 84 00 00 00	 push	 132			; 00000084H
  0026a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00275	51		 push	 ecx
  00276	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0027b	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv182[ebp], 0
$LN31@collision_:
  00285	6a 1b		 push	 27			; 0000001bH
  00287	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  0028a	52		 push	 edx
  0028b	69 85 70 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv175[ebp], 1116
  00295	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv182[ebp]
  0029b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002a2	ff d2		 call	 edx
  002a4	85 c0		 test	 eax, eax
  002a6	0f 84 01 03 00
	00		 je	 $LN8@collision_

; 133  : 	{
; 134  : 		////////////////////////////////////////
; 135  : 		//
; 136  : 		// MOBILE TARGET
; 137  : 		//
; 138  : 		////////////////////////////////////////
; 139  : 
; 140  : 		target_motion_vector = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_MOTION_VECTOR);

  002ac	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  002b0	74 0d		 je	 SHORT $LN32@collision_
  002b2	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  002b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b7	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv195[ebp], ecx
  002bd	eb 24		 jmp	 SHORT $LN33@collision_
$LN32@collision_:
  002bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  002c5	83 c2 36	 add	 edx, 54			; 00000036H
  002c8	52		 push	 edx
  002c9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d9	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv195[ebp], 0
$LN33@collision_:
  002e3	b9 01 00 00 00	 mov	 ecx, 1
  002e8	85 c9		 test	 ecx, ecx
  002ea	74 0c		 je	 SHORT $LN34@collision_
  002ec	c7 85 6c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv203[ebp], 6
  002f6	eb 24		 jmp	 SHORT $LN35@collision_
$LN34@collision_:
  002f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z@4JA
  002fe	83 c2 36	 add	 edx, 54			; 00000036H
  00301	52		 push	 edx
  00302	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  00307	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00312	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv203[ebp], 0
$LN35@collision_:
  0031c	6a 06		 push	 6
  0031e	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00321	51		 push	 ecx
  00322	6b 95 70 ff ff
	ff 60		 imul	 edx, DWORD PTR tv195[ebp], 96
  00329	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv203[ebp]
  0032f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00336	ff d1		 call	 ecx
  00338	89 45 e8	 mov	 DWORD PTR _target_motion_vector$[ebp], eax

; 141  : 
; 142  : 		sqr_velocity =

  0033b	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  0033e	8b 4d e8	 mov	 ecx, DWORD PTR _target_motion_vector$[ebp]
  00341	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00345	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00349	8b 55 e8	 mov	 edx, DWORD PTR _target_motion_vector$[ebp]
  0034c	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  0034f	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00354	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  00359	f3 0f 58 c1	 addss	 xmm0, xmm1
  0035d	8b 4d e8	 mov	 ecx, DWORD PTR _target_motion_vector$[ebp]
  00360	8b 55 e8	 mov	 edx, DWORD PTR _target_motion_vector$[ebp]
  00363	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00368	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  0036d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00371	f3 0f 11 45 f0	 movss	 DWORD PTR _sqr_velocity$[ebp], xmm0

; 143  : 		(
; 144  : 			target_motion_vector->x * target_motion_vector->x +
; 145  : 			target_motion_vector->y * target_motion_vector->y +
; 146  : 			target_motion_vector->z * target_motion_vector->z
; 147  : 		);
; 148  : 
; 149  : 		if (sqr_velocity > 1.0)

  00376	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _sqr_velocity$[ebp]
  0037b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00383	0f 86 c9 01 00
	00		 jbe	 $LN10@collision_

; 150  : 		{
; 151  : 			//
; 152  : 			// moving mobile
; 153  : 			//
; 154  : 
; 155  : 			if (get_local_entity_int_value (target, INT_TYPE_UPDATED))

  00389	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0038d	74 0d		 je	 SHORT $LN36@collision_
  0038f	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00392	8b 08		 mov	 ecx, DWORD PTR [eax]
  00394	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv227[ebp], ecx
  0039a	eb 20		 jmp	 SHORT $LN37@collision_
$LN36@collision_:
  0039c	68 9b 00 00 00	 push	 155			; 0000009bH
  003a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  003a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ac	52		 push	 edx
  003ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003b2	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv227[ebp], 0
$LN37@collision_:
  003bc	b8 01 00 00 00	 mov	 eax, 1
  003c1	85 c0		 test	 eax, eax
  003c3	74 0c		 je	 SHORT $LN38@collision_
  003c5	c7 85 6c ff ff
	ff ee 00 00 00	 mov	 DWORD PTR tv234[ebp], 238 ; 000000eeH
  003cf	eb 20		 jmp	 SHORT $LN39@collision_
$LN38@collision_:
  003d1	68 9b 00 00 00	 push	 155			; 0000009bH
  003d6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  003db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  003e1	51		 push	 ecx
  003e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e7	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN39@collision_:
  003f1	68 ee 00 00 00	 push	 238			; 000000eeH
  003f6	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  003f9	52		 push	 edx
  003fa	69 85 70 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv227[ebp], 1116
  00404	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv234[ebp]
  0040a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00411	ff d2		 call	 edx
  00413	85 c0		 test	 eax, eax
  00415	74 68		 je	 SHORT $LN12@collision_

; 156  : 			{
; 157  : 				get_local_entity_target_point (target, &target_new_position);

  00417	8d 45 d0	 lea	 eax, DWORD PTR _target_new_position$[ebp]
  0041a	50		 push	 eax
  0041b	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0041e	51		 push	 ecx
  0041f	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 158  : 
; 159  : 				target_old_position.x = target_new_position.x - target_motion_vector->x * get_delta_time ();

  00424	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00427	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0042b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00433	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _target_new_position$[ebp]
  00438	f3 0f 5c c8	 subss	 xmm1, xmm0
  0043c	f3 0f 11 4d dc	 movss	 DWORD PTR _target_old_position$[ebp], xmm1

; 160  : 				target_old_position.y = target_new_position.y - target_motion_vector->y * get_delta_time ();

  00441	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00444	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00449	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00451	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _target_new_position$[ebp+4]
  00456	f3 0f 5c c8	 subss	 xmm1, xmm0
  0045a	f3 0f 11 4d e0	 movss	 DWORD PTR _target_old_position$[ebp+4], xmm1

; 161  : 				target_old_position.z = target_new_position.z - target_motion_vector->z * get_delta_time ();

  0045f	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00462	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00467	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0046f	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _target_new_position$[ebp+8]
  00474	f3 0f 5c c8	 subss	 xmm1, xmm0
  00478	f3 0f 11 4d e4	 movss	 DWORD PTR _target_old_position$[ebp+8], xmm1

; 162  : 			}
; 163  : 			else

  0047d	eb 5a		 jmp	 SHORT $LN13@collision_
$LN12@collision_:

; 164  : 			{
; 165  : 				get_local_entity_target_point (target, &target_old_position);

  0047f	8d 45 dc	 lea	 eax, DWORD PTR _target_old_position$[ebp]
  00482	50		 push	 eax
  00483	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00486	51		 push	 ecx
  00487	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 166  : 
; 167  : 				target_new_position.x = target_old_position.x + target_motion_vector->x * get_delta_time ();

  0048c	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  0048f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00493	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0049b	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _target_old_position$[ebp]
  004a0	f3 0f 11 45 d0	 movss	 DWORD PTR _target_new_position$[ebp], xmm0

; 168  : 				target_new_position.y = target_old_position.y + target_motion_vector->y * get_delta_time ();

  004a5	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  004a8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004ad	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  004b5	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _target_old_position$[ebp+4]
  004ba	f3 0f 11 45 d4	 movss	 DWORD PTR _target_new_position$[ebp+4], xmm0

; 169  : 				target_new_position.z = target_old_position.z + target_motion_vector->z * get_delta_time ();

  004bf	8b 45 e8	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  004c2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  004cf	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _target_old_position$[ebp+8]
  004d4	f3 0f 11 45 d8	 movss	 DWORD PTR _target_new_position$[ebp+8], xmm0
$LN13@collision_:

; 170  : 			}
; 171  : 
; 172  : 			if (get_3d_vector_cube_cube_intersect (weapon_old_position, weapon_new_position, &target_old_position, &target_new_position))

  004d9	8d 45 d0	 lea	 eax, DWORD PTR _target_new_position$[ebp]
  004dc	50		 push	 eax
  004dd	8d 4d dc	 lea	 ecx, DWORD PTR _target_old_position$[ebp]
  004e0	51		 push	 ecx
  004e1	8b 55 14	 mov	 edx, DWORD PTR _weapon_new_position$[ebp]
  004e4	52		 push	 edx
  004e5	8b 45 10	 mov	 eax, DWORD PTR _weapon_old_position$[ebp]
  004e8	50		 push	 eax
  004e9	e8 00 00 00 00	 call	 ?get_3d_vector_cube_cube_intersect@@YGHPBUVEC3D@@000@Z ; get_3d_vector_cube_cube_intersect
  004ee	85 c0		 test	 eax, eax
  004f0	74 5e		 je	 SHORT $LN15@collision_

; 173  : 			{
; 174  : 				line_line_3d_intercept

  004f2	8d 45 b8	 lea	 eax, DWORD PTR _target_intercept_point$[ebp]
  004f5	50		 push	 eax
  004f6	8d 4d c4	 lea	 ecx, DWORD PTR _weapon_intercept_point$[ebp]
  004f9	51		 push	 ecx
  004fa	8d 55 d0	 lea	 edx, DWORD PTR _target_new_position$[ebp]
  004fd	52		 push	 edx
  004fe	8d 45 dc	 lea	 eax, DWORD PTR _target_old_position$[ebp]
  00501	50		 push	 eax
  00502	8b 4d 14	 mov	 ecx, DWORD PTR _weapon_new_position$[ebp]
  00505	51		 push	 ecx
  00506	8b 55 10	 mov	 edx, DWORD PTR _weapon_old_position$[ebp]
  00509	52		 push	 edx
  0050a	e8 00 00 00 00	 call	 ?line_line_3d_intercept@@YG?AW4LINE_LINE_INTERCEPT_RESULT_TYPES@@PBUVEC3D@@000PAU2@1@Z ; line_line_3d_intercept

; 175  : 				(
; 176  : 					weapon_old_position,
; 177  : 					weapon_new_position,
; 178  : 					&target_old_position,
; 179  : 					&target_new_position,
; 180  : 					&weapon_intercept_point,
; 181  : 					&target_intercept_point
; 182  : 				);
; 183  : 
; 184  : 				range = get_3d_range (&weapon_intercept_point, &target_intercept_point);

  0050f	8d 45 b8	 lea	 eax, DWORD PTR _target_intercept_point$[ebp]
  00512	50		 push	 eax
  00513	8d 4d c4	 lea	 ecx, DWORD PTR _weapon_intercept_point$[ebp]
  00516	51		 push	 ecx
  00517	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  0051c	d9 5d fc	 fstp	 DWORD PTR _range$[ebp]

; 185  : 
; 186  : 				if (range < COLLISION_THRESHOLD)

  0051f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00524	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  0052c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00530	76 1e		 jbe	 SHORT $LN15@collision_

; 187  : 				{
; 188  : 					*weapon_new_position = weapon_intercept_point;

  00532	8b 45 14	 mov	 eax, DWORD PTR _weapon_new_position$[ebp]
  00535	8b 4d c4	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp]
  00538	89 08		 mov	 DWORD PTR [eax], ecx
  0053a	8b 55 c8	 mov	 edx, DWORD PTR _weapon_intercept_point$[ebp+4]
  0053d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00540	8b 4d cc	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp+8]
  00543	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 189  : 
; 190  : 					return (TRUE);

  00546	b8 01 00 00 00	 mov	 eax, 1
  0054b	e9 3d 01 00 00	 jmp	 $LN1@collision_
$LN15@collision_:

; 191  : 				}
; 192  : 			}
; 193  : 		}
; 194  : 		else

  00550	eb 56		 jmp	 SHORT $LN16@collision_
$LN10@collision_:

; 195  : 		{
; 196  : 			//
; 197  : 			// stationary mobile
; 198  : 			//
; 199  : 
; 200  : 			get_local_entity_target_point (target, &target_new_position);

  00552	8d 45 d0	 lea	 eax, DWORD PTR _target_new_position$[ebp]
  00555	50		 push	 eax
  00556	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00559	51		 push	 ecx
  0055a	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 201  : 
; 202  : 			range = get_3d_perp_dist_of_point_from_line (weapon_old_position, weapon_new_position, &target_new_position, &weapon_intercept_point);

  0055f	8d 45 c4	 lea	 eax, DWORD PTR _weapon_intercept_point$[ebp]
  00562	50		 push	 eax
  00563	8d 4d d0	 lea	 ecx, DWORD PTR _target_new_position$[ebp]
  00566	51		 push	 ecx
  00567	8b 55 14	 mov	 edx, DWORD PTR _weapon_new_position$[ebp]
  0056a	52		 push	 edx
  0056b	8b 45 10	 mov	 eax, DWORD PTR _weapon_old_position$[ebp]
  0056e	50		 push	 eax
  0056f	e8 00 00 00 00	 call	 ?get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU1@@Z ; get_3d_perp_dist_of_point_from_line
  00574	d9 5d fc	 fstp	 DWORD PTR _range$[ebp]

; 203  : 
; 204  : 			if (range < COLLISION_THRESHOLD)

  00577	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0057c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  00584	66 0f 2f c8	 comisd	 xmm1, xmm0
  00588	76 1e		 jbe	 SHORT $LN16@collision_

; 205  : 			{
; 206  : 				*weapon_new_position = weapon_intercept_point;

  0058a	8b 45 14	 mov	 eax, DWORD PTR _weapon_new_position$[ebp]
  0058d	8b 4d c4	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp]
  00590	89 08		 mov	 DWORD PTR [eax], ecx
  00592	8b 55 c8	 mov	 edx, DWORD PTR _weapon_intercept_point$[ebp+4]
  00595	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00598	8b 4d cc	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp+8]
  0059b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 207  : 
; 208  : 				return (TRUE);

  0059e	b8 01 00 00 00	 mov	 eax, 1
  005a3	e9 e5 00 00 00	 jmp	 $LN1@collision_
$LN16@collision_:

; 209  : 			}
; 210  : 		}

  005a8	e9 de 00 00 00	 jmp	 $LN18@collision_
$LN8@collision_:

; 211  : 	}
; 212  : 	else if (get_local_entity_int_value (target, INT_TYPE_COLLISION_TEST_FIXED))

  005ad	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  005b1	74 0d		 je	 SHORT $LN40@collision_
  005b3	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  005b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b8	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv294[ebp], ecx
  005be	eb 20		 jmp	 SHORT $LN41@collision_
$LN40@collision_:
  005c0	68 d4 00 00 00	 push	 212			; 000000d4H
  005c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005d0	52		 push	 edx
  005d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d6	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv294[ebp], 0
$LN41@collision_:
  005e0	b8 01 00 00 00	 mov	 eax, 1
  005e5	85 c0		 test	 eax, eax
  005e7	74 0c		 je	 SHORT $LN42@collision_
  005e9	c7 85 6c ff ff
	ff 1a 00 00 00	 mov	 DWORD PTR tv301[ebp], 26 ; 0000001aH
  005f3	eb 20		 jmp	 SHORT $LN43@collision_
$LN42@collision_:
  005f5	68 d4 00 00 00	 push	 212			; 000000d4H
  005fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GMONOBAH@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00605	51		 push	 ecx
  00606	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0060b	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv301[ebp], 0
$LN43@collision_:
  00615	6a 1a		 push	 26			; 0000001aH
  00617	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  0061a	52		 push	 edx
  0061b	69 85 70 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv294[ebp], 1116
  00625	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv301[ebp]
  0062b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00632	ff d2		 call	 edx
  00634	85 c0		 test	 eax, eax
  00636	74 53		 je	 SHORT $LN18@collision_

; 213  : 	{
; 214  : 		////////////////////////////////////////
; 215  : 		//
; 216  : 		// FIXED TARGET
; 217  : 		//
; 218  : 		////////////////////////////////////////
; 219  : 
; 220  : 		get_local_entity_target_point (target, &target_new_position);

  00638	8d 45 d0	 lea	 eax, DWORD PTR _target_new_position$[ebp]
  0063b	50		 push	 eax
  0063c	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0063f	51		 push	 ecx
  00640	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 221  : 
; 222  : 		range = get_3d_perp_dist_of_point_from_line (weapon_old_position, weapon_new_position, &target_new_position, &weapon_intercept_point);

  00645	8d 45 c4	 lea	 eax, DWORD PTR _weapon_intercept_point$[ebp]
  00648	50		 push	 eax
  00649	8d 4d d0	 lea	 ecx, DWORD PTR _target_new_position$[ebp]
  0064c	51		 push	 ecx
  0064d	8b 55 14	 mov	 edx, DWORD PTR _weapon_new_position$[ebp]
  00650	52		 push	 edx
  00651	8b 45 10	 mov	 eax, DWORD PTR _weapon_old_position$[ebp]
  00654	50		 push	 eax
  00655	e8 00 00 00 00	 call	 ?get_3d_perp_dist_of_point_from_line@@YGMPBUVEC3D@@00PAU1@@Z ; get_3d_perp_dist_of_point_from_line
  0065a	d9 5d fc	 fstp	 DWORD PTR _range$[ebp]

; 223  : 
; 224  : 		if (range < COLLISION_THRESHOLD)

  0065d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00662	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  0066a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0066e	76 1b		 jbe	 SHORT $LN18@collision_

; 225  : 		{
; 226  : 			*weapon_new_position = weapon_intercept_point;

  00670	8b 45 14	 mov	 eax, DWORD PTR _weapon_new_position$[ebp]
  00673	8b 4d c4	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp]
  00676	89 08		 mov	 DWORD PTR [eax], ecx
  00678	8b 55 c8	 mov	 edx, DWORD PTR _weapon_intercept_point$[ebp+4]
  0067b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0067e	8b 4d cc	 mov	 ecx, DWORD PTR _weapon_intercept_point$[ebp+8]
  00681	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 227  : 
; 228  : 			return (TRUE);

  00684	b8 01 00 00 00	 mov	 eax, 1
  00689	eb 02		 jmp	 SHORT $LN1@collision_
$LN18@collision_:

; 229  : 		}
; 230  : 	}
; 231  : 
; 232  : 	return (FALSE);

  0068b	33 c0		 xor	 eax, eax
$LN1@collision_:

; 233  : }

  0068d	5f		 pop	 edi
  0068e	5e		 pop	 esi
  0068f	5b		 pop	 ebx
  00690	8b e5		 mov	 esp, ebp
  00692	5d		 pop	 ebp
  00693	c2 10 00	 ret	 16			; 00000010H
?collision_test_weapon_with_given_target@@YGHPAUENTITY@@0PAUVEC3D@@1@Z ENDP ; collision_test_weapon_with_given_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?acos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?acos@@YGMM@Z PROC					; acos, COMDAT

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : 	return (_CSTD acosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _acosf
  00019	83 c4 04	 add	 esp, 4

; 28   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?acos@@YGMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 624  :             return (float)acos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _acos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 625  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
END
