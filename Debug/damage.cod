; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?warhead_damage_database@@3QBUWARHEAD_DAMAGE_DATA@@B DD 00H ; warhead_damage_database
	DD	08fH
	DD	01ffH
	DD	0377H
	DD	03fffH
	DD	00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?damage_client_server_entity@@YGHPAUENTITY@@0M@Z ; damage_client_server_entity
PUBLIC	?assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z ; assess_effectiveness_of_all_weapons_on_entity
PUBLIC	?display_debug_kill_info@@YGXPAUENTITY@@0@Z	; display_debug_kill_info
PUBLIC	?weapon_is_capable_of_damage@@YGHH@Z		; weapon_is_capable_of_damage
PUBLIC	?weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z ; weapon_is_suitable_for_damaging_target
PUBLIC	?initialise_destroyed_object_database@@YGXXZ	; initialise_destroyed_object_database
PUBLIC	?deinitialise_destroyed_object_database@@YGXXZ	; deinitialise_destroyed_object_database
PUBLIC	?get_3d_object_destroyed_object_index@@YGHH@Z	; get_3d_object_destroyed_object_index
PUBLIC	?get_3d_object_restored_object_index@@YGHH@Z	; get_3d_object_restored_object_index
PUBLIC	?get_damage_debug_invulnerable_flag@@YGHXZ	; get_damage_debug_invulnerable_flag
PUBLIC	?toggle_damage_debug_invulnerable_flag@@YGHXZ	; toggle_damage_debug_invulnerable_flag
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	?warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z ; warhead_is_capable_of_damage
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA ; `damage_client_server_entity'::`1'::__LINE__Var
PUBLIC	??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	??_C@_0DF@LECALMNG@?$CIdamage_modifier?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIda@ ; `string'
PUBLIC	??_C@_0FI@DPGILPCE@?$CIwarhead_type?5?$DO?$DN?5WEAPON_WARHEAD@ ; `string'
PUBLIC	?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA ; `assess_effectiveness_of_all_weapons_on_entity'::`1'::__LINE__Var
PUBLIC	??_C@_0CM@LHMHMKAH@Testing?5weapon?5effectiveness?5on@ ; `string'
PUBLIC	??_C@_06NCKGBNPH@?$CFs?4dmg@			; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0N@FMAAMICB@OBJECT?5?3?5?$CFs?6@		; `string'
PUBLIC	??_C@_02PHMGELLB@?6?6@				; `string'
PUBLIC	??_C@_0BI@CMBMMNOO@Current?5Damage?5?3?9?5?$CF4d?6?6@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6@			; `string'
PUBLIC	??_C@_0CO@NBFEALOP@?6?5?5?5?5Rounds?5Needed?5To?5Destroy?5T@ ; `string'
PUBLIC	??_C@_0CO@EALDCPNM@?6?5?5?5?5ROUNDS?5NEEDED?5TO?5DESTROY?5T@ ; `string'
PUBLIC	?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA ; `display_debug_kill_info'::`1'::__LINE__Var
PUBLIC	??_C@_0M@FDGLIMNF@victim_desc@			; `string'
PUBLIC	??_C@_0P@IDBCIOIA@aggressor_desc@		; `string'
PUBLIC	??_C@_0DG@BODPDEIC@DAMAGE?3?5?$CFs?5?$CI?$CFd?$CJ?5doing?5?$CFs?5?9?5kill@ ; `string'
PUBLIC	??_C@_0CL@IHNDDBCH@?$CIKILL?$CJ?5?$CFs?5doing?5?$CFs?5?9?5killed?5by?5@ ; `string'
PUBLIC	?__LINE__Var@?0??warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z@4JA ; `warhead_is_capable_of_damage'::`1'::__LINE__Var
PUBLIC	??_C@_0EI@LEMIELCE@?$CItype?5?$DO?$DN?5WEAPON_WARHEAD_TYPE_NO@ ; `string'
PUBLIC	?__LINE__Var@?0??weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z@4JA ; `weapon_is_suitable_for_damaging_target'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	?__LINE__Var@?0??weapon_damage_capability@@YGHHPAUENTITY@@H@Z@4JA ; `weapon_damage_capability'::`1'::__LINE__Var
PUBLIC	??_C@_0L@LPPNFMIE@_DESTROYED@			; `string'
PUBLIC	?__LINE__Var@?0??get_3d_object_destroyed_object_index@@YGHH@Z@4JA ; `get_3d_object_destroyed_object_index'::`1'::__LINE__Var
PUBLIC	??_C@_0CJ@OGCJEGBO@?$CIindex?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIindex?5?$DM?5OBJECT@ ; `string'
PUBLIC	?__LINE__Var@?0??get_3d_object_restored_object_index@@YGHH@Z@4JA ; `get_3d_object_restored_object_index'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA ; `get_player_damage_modifier'::`1'::__LINE__Var
PUBLIC	??_C@_0DK@OIMKKELF@DAMAGE?3?5No?5player?5damage?5modifi@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fputc:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z:PROC ; get_local_entity_armour_thickness
EXTRN	?create_client_server_sound_effect_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMHHHPAH@Z:PROC ; create_client_server_sound_effect_entity
EXTRN	?get_local_entity_primary_task@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_primary_task
EXTRN	?ai_log@@YAXPBDZZ:PROC				; ai_log
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A:DWORD ; object_3d_information_database
EXTRN	?entity_sub_type_aircraft_names@@3PAPBDA:BYTE	; entity_sub_type_aircraft_names
EXTRN	?entity_sub_type_vehicle_names@@3PAPBDA:BYTE	; entity_sub_type_vehicle_names
EXTRN	?entity_sub_type_weapon_names@@3PAPBDA:BYTE	; entity_sub_type_weapon_names
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?entity_type_names@@3PAPBDA:DWORD		; entity_type_names
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_set_client_server_entity_int_value@@3PAY1BBH@1P6GXPAUENTITY@@W4INT_TYPES@@H@ZA:BYTE ; fn_set_client_server_entity_int_value
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?task_database@@3PAUTASK_DATA@@A:BYTE		; task_database
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?destroyed_object_table@@3PAHA DD 01H DUP (?)		; destroyed_object_table
?restored_object_table@@3PAHA DD 01H DUP (?)		; restored_object_table
?damage_debug_invulnerable_flag@@3HA DD 01H DUP (?)	; damage_debug_invulnerable_flag
_BSS	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@OIMKKELF@DAMAGE?3?5No?5player?5damage?5modifi@
CONST	SEGMENT
??_C@_0DK@OIMKKELF@DAMAGE?3?5No?5player?5damage?5modifi@ DB 'DAMAGE: No p'
	DB	'layer damage modifier for difficulty level %d', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA DD 0365H ; `get_player_damage_modifier'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?player_damage_modifier_table@@3PAUPLAYER_DAMAGE_MODIFIER_TABLE@@A DD 03H ; player_damage_modifier_table
	DD	03f000000r			; 0.5
	DD	02H
	DD	03f400000r			; 0.75
	DD	01H
	DD	03f800000r			; 1
	DD	0ffffffffH
	ORG $+4
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_object_restored_object_index@@YGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_object_restored_object_index@@YGHH@Z@4JA DD 034aH ; `get_3d_object_restored_object_index'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@OGCJEGBO@?$CIindex?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIindex?5?$DM?5OBJECT@
CONST	SEGMENT
??_C@_0CJ@OGCJEGBO@?$CIindex?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIindex?5?$DM?5OBJECT@ DB '('
	DB	'index >= 0) && (index < OBJECT_3D_LAST)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_object_destroyed_object_index@@YGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_object_destroyed_object_index@@YGHH@Z@4JA DD 033fH ; `get_3d_object_destroyed_object_index'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@LPPNFMIE@_DESTROYED@
CONST	SEGMENT
??_C@_0L@LPPNFMIE@_DESTROYED@ DB '_DESTROYED', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??weapon_damage_capability@@YGHHPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??weapon_damage_capability@@YGHHPAUENTITY@@H@Z@4JA DD 02adH ; `weapon_damage_capability'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z@4JA DD 027eH ; `weapon_is_suitable_for_damaging_target'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EI@LEMIELCE@?$CItype?5?$DO?$DN?5WEAPON_WARHEAD_TYPE_NO@
CONST	SEGMENT
??_C@_0EI@LEMIELCE@?$CItype?5?$DO?$DN?5WEAPON_WARHEAD_TYPE_NO@ DB '(type '
	DB	'>= WEAPON_WARHEAD_TYPE_NONE) && (type < NUM_WEAPON_WARHEAD_TY'
	DB	'PES)', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z@4JA DD 026aH ; `warhead_is_capable_of_damage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CL@IHNDDBCH@?$CIKILL?$CJ?5?$CFs?5doing?5?$CFs?5?9?5killed?5by?5@
CONST	SEGMENT
??_C@_0CL@IHNDDBCH@?$CIKILL?$CJ?5?$CFs?5doing?5?$CFs?5?9?5killed?5by?5@ DB '('
	DB	'KILL) %s doing %s - killed by %s doing %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BODPDEIC@DAMAGE?3?5?$CFs?5?$CI?$CFd?$CJ?5doing?5?$CFs?5?9?5kill@
CONST	SEGMENT
??_C@_0DG@BODPDEIC@DAMAGE?3?5?$CFs?5?$CI?$CFd?$CJ?5doing?5?$CFs?5?9?5kill@ DB 'D'
	DB	'AMAGE: %s (%d) doing %s - killed by %s (%d) doing %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDBCIOIA@aggressor_desc@
CONST	SEGMENT
??_C@_0P@IDBCIOIA@aggressor_desc@ DB 'aggressor_desc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FDGLIMNF@victim_desc@
CONST	SEGMENT
??_C@_0M@FDGLIMNF@victim_desc@ DB 'victim_desc', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA DD 0210H ; `display_debug_kill_info'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CO@EALDCPNM@?6?5?5?5?5ROUNDS?5NEEDED?5TO?5DESTROY?5T@
CONST	SEGMENT
??_C@_0CO@EALDCPNM@?6?5?5?5?5ROUNDS?5NEEDED?5TO?5DESTROY?5T@ DB 0aH, '   '
	DB	' ROUNDS NEEDED TO DESTROY TARGET : %4d.', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NBFEALOP@?6?5?5?5?5Rounds?5Needed?5To?5Destroy?5T@
CONST	SEGMENT
??_C@_0CO@NBFEALOP@?6?5?5?5?5Rounds?5Needed?5To?5Destroy?5T@ DB 0aH, '   '
	DB	' Rounds Needed To Destroy Target : ----', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CMBMMNOO@Current?5Damage?5?3?9?5?$CF4d?6?6@
CONST	SEGMENT
??_C@_0BI@CMBMMNOO@Current?5Damage?5?3?9?5?$CF4d?6?6@ DB 'Current Damage '
	DB	':- %4d', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PHMGELLB@?6?6@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6@ DB 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FMAAMICB@OBJECT?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0N@FMAAMICB@OBJECT?5?3?5?$CFs?6@ DB 'OBJECT : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCKGBNPH@?$CFs?4dmg@
CONST	SEGMENT
??_C@_06NCKGBNPH@?$CFs?4dmg@ DB '%s.dmg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LHMHMKAH@Testing?5weapon?5effectiveness?5on@
CONST	SEGMENT
??_C@_0CM@LHMHMKAH@Testing?5weapon?5effectiveness?5on@ DB 'Testing weapon'
	DB	' effectiveness on entity : %s', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA DD 018bH ; `assess_effectiveness_of_all_weapons_on_entity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FI@DPGILPCE@?$CIwarhead_type?5?$DO?$DN?5WEAPON_WARHEAD@
CONST	SEGMENT
??_C@_0FI@DPGILPCE@?$CIwarhead_type?5?$DO?$DN?5WEAPON_WARHEAD@ DB '(warhe'
	DB	'ad_type >= WEAPON_WARHEAD_TYPE_NONE) && (warhead_type < NUM_W'
	DB	'EAPON_WARHEAD_TYPES)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LECALMNG@?$CIdamage_modifier?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIda@
CONST	SEGMENT
??_C@_0DF@LECALMNG@?$CIdamage_modifier?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIda@ DB '('
	DB	'damage_modifier >= 0.0) && (damage_modifier <= 1.0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_SERVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.'
	DB	'c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA DD 0c3H ; `damage_client_server_entity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z PROC ; warhead_is_capable_of_damage, COMDAT

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 619  : 	ASSERT ((type >= WEAPON_WARHEAD_TYPE_NONE) && (type < NUM_WEAPON_WARHEAD_TYPES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@warhead_is
  0000f	83 7d 08 06	 cmp	 DWORD PTR _type$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN2@warhead_is
$LN3@warhead_is:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LEMIELCE@?$CItype?5?$DO?$DN?5WEAPON_WARHEAD_TYPE_NO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@warhead_is:

; 620  : 
; 621  : 	return (warhead_damage_database [type].effective_targets);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00030	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?warhead_damage_database@@3QBUWARHEAD_DAMAGE_DATA@@B[eax*4]

; 622  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z ENDP ; warhead_is_capable_of_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?get_player_damage_modifier@@YGMPAUENTITY@@@Z
_TEXT	SEGMENT
tv136 = -84						; size = 4
tv83 = -84						; size = 4
tv128 = -80						; size = 4
tv75 = -80						; size = 4
_difficulty$ = -12					; size = 4
_pilot_en$ = -8						; size = 4
_loop$ = -4						; size = 4
_en$ = 8						; size = 4
?get_player_damage_modifier@@YGMPAUENTITY@@@Z PROC	; get_player_damage_modifier, COMDAT

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 870  : 	int
; 871  : 		loop;
; 872  : 
; 873  : 	entity
; 874  : 		*pilot_en;
; 875  : 
; 876  : 	game_difficulty_settings
; 877  : 		difficulty;
; 878  : 
; 879  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_player
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA
  00014	83 c0 0a	 add	 eax, 10			; 0000000aH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_player:

; 880  : 
; 881  : 	pilot_en = get_local_entity_first_child (en, LIST_TYPE_AIRCREW);

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN8@get_player
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d b0	 mov	 DWORD PTR tv75[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN9@get_player
$LN8@get_player:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA
  0003d	83 c2 0c	 add	 edx, 12			; 0000000cH
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN9@get_player:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN10@get_player
  00061	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  00068	eb 21		 jmp	 SHORT $LN11@get_player
$LN10@get_player:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA
  00070	83 c2 0c	 add	 edx, 12			; 0000000cH
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN11@get_player:
  0008b	6a 01		 push	 1
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00090	51		 push	 ecx
  00091	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv75[ebp], 180
  00098	8b 45 ac	 mov	 eax, DWORD PTR tv83[ebp]
  0009b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000a2	ff d1		 call	 ecx
  000a4	89 45 f8	 mov	 DWORD PTR _pilot_en$[ebp], eax

; 882  : 
; 883  : 	if (pilot_en)

  000a7	83 7d f8 00	 cmp	 DWORD PTR _pilot_en$[ebp], 0
  000ab	0f 84 cb 00 00
	00		 je	 $LN5@get_player

; 884  : 	{
; 885  : 		difficulty = (game_difficulty_settings) get_local_entity_int_value (pilot_en, INT_TYPE_DIFFICULTY_LEVEL);

  000b1	83 7d f8 00	 cmp	 DWORD PTR _pilot_en$[ebp], 0
  000b5	74 0a		 je	 SHORT $LN12@get_player
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _pilot_en$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	89 4d b0	 mov	 DWORD PTR tv128[ebp], ecx
  000bf	eb 21		 jmp	 SHORT $LN13@get_player
$LN12@get_player:
  000c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA
  000c7	83 c2 10	 add	 edx, 16			; 00000010H
  000ca	52		 push	 edx
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000db	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN13@get_player:
  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	85 c9		 test	 ecx, ecx
  000e9	74 09		 je	 SHORT $LN14@get_player
  000eb	c7 45 ac 2f 00
	00 00		 mov	 DWORD PTR tv136[ebp], 47 ; 0000002fH
  000f2	eb 21		 jmp	 SHORT $LN15@get_player
$LN14@get_player:
  000f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_damage_modifier@@YGMPAUENTITY@@@Z@4JA
  000fa	83 c2 10	 add	 edx, 16			; 00000010H
  000fd	52		 push	 edx
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010e	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$LN15@get_player:
  00115	6a 2f		 push	 47			; 0000002fH
  00117	8b 4d f8	 mov	 ecx, DWORD PTR _pilot_en$[ebp]
  0011a	51		 push	 ecx
  0011b	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv128[ebp], 1116
  00122	8b 45 ac	 mov	 eax, DWORD PTR tv136[ebp]
  00125	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0012c	ff d1		 call	 ecx
  0012e	89 45 f4	 mov	 DWORD PTR _difficulty$[ebp], eax

; 886  : 	
; 887  : 		loop = 0;

  00131	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
$LN2@get_player:

; 888  : 	
; 889  : 		while (player_damage_modifier_table [loop].difficulty >= 0)

  00138	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0013b	83 3c c5 00 00
	00 00 00	 cmp	 DWORD PTR ?player_damage_modifier_table@@3PAUPLAYER_DAMAGE_MODIFIER_TABLE@@A[eax*8], 0
  00143	7c 26		 jl	 SHORT $LN3@get_player

; 890  : 		{
; 891  : 			if (player_damage_modifier_table [loop].difficulty == difficulty)

  00145	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00148	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?player_damage_modifier_table@@3PAUPLAYER_DAMAGE_MODIFIER_TABLE@@A[eax*8]
  0014f	3b 4d f4	 cmp	 ecx, DWORD PTR _difficulty$[ebp]
  00152	75 0c		 jne	 SHORT $LN6@get_player

; 892  : 			{
; 893  : 				return player_damage_modifier_table [loop].damage_modifier;

  00154	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00157	d9 04 c5 04 00
	00 00		 fld	 DWORD PTR ?player_damage_modifier_table@@3PAUPLAYER_DAMAGE_MODIFIER_TABLE@@A[eax*8+4]
  0015e	eb 1e		 jmp	 SHORT $LN1@get_player
$LN6@get_player:

; 894  : 			}
; 895  : 	
; 896  : 			loop ++;

  00160	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00163	83 c0 01	 add	 eax, 1
  00166	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax

; 897  : 		}

  00169	eb cd		 jmp	 SHORT $LN2@get_player
$LN3@get_player:

; 898  : 	
; 899  : 		debug_fatal ("DAMAGE: No player damage modifier for difficulty level %d", difficulty);

  0016b	8b 45 f4	 mov	 eax, DWORD PTR _difficulty$[ebp]
  0016e	50		 push	 eax
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@OIMKKELF@DAMAGE?3?5No?5player?5damage?5modifi@
  00174	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00179	83 c4 08	 add	 esp, 8
$LN5@get_player:

; 900  : 	}
; 901  : 	
; 902  : 	return 1.0;

  0017c	d9 e8		 fld1
$LN1@get_player:

; 903  : }

  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 04 00	 ret	 4
?get_player_damage_modifier@@YGMPAUENTITY@@@Z ENDP	; get_player_damage_modifier
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?weapon_damage_capability@@YGHHPAUENTITY@@H@Z
_TEXT	SEGMENT
tv149 = -80						; size = 4
tv83 = -80						; size = 4
tv189 = -76						; size = 4
tv142 = -76						; size = 4
tv75 = -76						; size = 4
_warhead_target_class$ = -8				; size = 4
_result$ = -4						; size = 4
_weapon_type$ = 8					; size = 4
_target$ = 12						; size = 4
_direct_hit$ = 16					; size = 4
?weapon_damage_capability@@YGHHPAUENTITY@@H@Z PROC	; weapon_damage_capability, COMDAT

; 685  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 686  : 	int
; 687  : 		result,
; 688  : 		warhead_target_class;
; 689  : 
; 690  : 	ASSERT (target);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@weapon_dam
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??weapon_damage_capability@@YGHHPAUENTITY@@H@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@weapon_dam:

; 691  : 
; 692  : 	result = 0;

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 693  : 
; 694  : 	warhead_target_class = get_local_entity_int_value (target, INT_TYPE_WARHEAD_EFFECTIVE_CLASS);

  0002e	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  00032	74 0a		 je	 SHORT $LN9@weapon_dam
  00034	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d b4	 mov	 DWORD PTR tv75[ebp], ecx
  0003c	eb 21		 jmp	 SHORT $LN10@weapon_dam
$LN9@weapon_dam:
  0003e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_damage_capability@@YGHHPAUENTITY@@H@Z@4JA
  00044	83 c2 09	 add	 edx, 9
  00047	52		 push	 edx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00058	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN10@weapon_dam:
  0005f	b9 01 00 00 00	 mov	 ecx, 1
  00064	85 c9		 test	 ecx, ecx
  00066	74 09		 je	 SHORT $LN11@weapon_dam
  00068	c7 45 b0 fc 00
	00 00		 mov	 DWORD PTR tv83[ebp], 252 ; 000000fcH
  0006f	eb 21		 jmp	 SHORT $LN12@weapon_dam
$LN11@weapon_dam:
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_damage_capability@@YGHHPAUENTITY@@H@Z@4JA
  00077	83 c2 09	 add	 edx, 9
  0007a	52		 push	 edx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0008b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN12@weapon_dam:
  00092	68 fc 00 00 00	 push	 252			; 000000fcH
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0009a	51		 push	 ecx
  0009b	69 55 b4 5c 04
	00 00		 imul	 edx, DWORD PTR tv75[ebp], 1116
  000a2	8b 45 b0	 mov	 eax, DWORD PTR tv83[ebp]
  000a5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000ac	ff d1		 call	 ecx
  000ae	89 45 f8	 mov	 DWORD PTR _warhead_target_class$[ebp], eax

; 695  : 
; 696  : 	if (warhead_target_class < WARHEAD_EFFECTIVE_HARD_TARGETS)

  000b1	81 7d f8 00 02
	00 00		 cmp	 DWORD PTR _warhead_target_class$[ebp], 512 ; 00000200H
  000b8	7d 12		 jge	 SHORT $LN3@weapon_dam

; 697  : 	{
; 698  : 		result = weapon_database [weapon_type].soft_damage_capability;

  000ba	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  000c1	8b 88 58 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+88]
  000c7	89 4d fc	 mov	 DWORD PTR _result$[ebp], ecx

; 699  : 	}
; 700  : 	else

  000ca	eb 3b		 jmp	 SHORT $LN6@weapon_dam
$LN3@weapon_dam:

; 701  : 	{
; 702  : 		if ((weapon_database [weapon_type].warhead_type == WEAPON_WARHEAD_TYPE_HIGH_EXPLOSIVE_ANTI_TANK) && (!direct_hit))

  000cc	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  000d3	83 b8 24 00 00
	00 04		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+36], 4
  000da	75 1b		 jne	 SHORT $LN5@weapon_dam
  000dc	83 7d 10 00	 cmp	 DWORD PTR _direct_hit$[ebp], 0
  000e0	75 15		 jne	 SHORT $LN5@weapon_dam

; 703  : 		{
; 704  : 			//
; 705  : 			// reduce effectiveness of HEAT missiles if hit is not direct
; 706  : 			//
; 707  : 
; 708  : 			result = (weapon_database [weapon_type].hard_damage_capability >> 3);

  000e2	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  000e9	8b 88 5c 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+92]
  000ef	c1 f9 03	 sar	 ecx, 3
  000f2	89 4d fc	 mov	 DWORD PTR _result$[ebp], ecx

; 709  : 		}
; 710  : 		else

  000f5	eb 10		 jmp	 SHORT $LN6@weapon_dam
$LN5@weapon_dam:

; 711  : 		{
; 712  : 			result = weapon_database [weapon_type].hard_damage_capability;

  000f7	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  000fe	8b 88 5c 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+92]
  00104	89 4d fc	 mov	 DWORD PTR _result$[ebp], ecx
$LN6@weapon_dam:

; 713  : 		}
; 714  : 	}
; 715  : 
; 716  : 	if (get_local_entity_int_value (target, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00107	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0010b	74 0a		 je	 SHORT $LN13@weapon_dam
  0010d	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	89 4d b4	 mov	 DWORD PTR tv142[ebp], ecx
  00115	eb 1d		 jmp	 SHORT $LN14@weapon_dam
$LN13@weapon_dam:
  00117	68 cc 02 00 00	 push	 716			; 000002ccH
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN14@weapon_dam:
  00134	b8 01 00 00 00	 mov	 eax, 1
  00139	85 c0		 test	 eax, eax
  0013b	74 09		 je	 SHORT $LN15@weapon_dam
  0013d	c7 45 b0 9c 00
	00 00		 mov	 DWORD PTR tv149[ebp], 156 ; 0000009cH
  00144	eb 1d		 jmp	 SHORT $LN16@weapon_dam
$LN15@weapon_dam:
  00146	68 cc 02 00 00	 push	 716			; 000002ccH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00150	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00156	51		 push	 ecx
  00157	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN16@weapon_dam:
  00163	68 9c 00 00 00	 push	 156			; 0000009cH
  00168	8b 55 0c	 mov	 edx, DWORD PTR _target$[ebp]
  0016b	52		 push	 edx
  0016c	69 45 b4 5c 04
	00 00		 imul	 eax, DWORD PTR tv142[ebp], 1116
  00173	8b 4d b0	 mov	 ecx, DWORD PTR tv149[ebp]
  00176	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0017d	ff d2		 call	 edx
  0017f	85 c0		 test	 eax, eax
  00181	74 1d		 je	 SHORT $LN7@weapon_dam

; 717  : 	{
; 718  : 		result *= get_player_damage_modifier (target);

  00183	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?get_player_damage_modifier@@YGMPAUENTITY@@@Z ; get_player_damage_modifier
  0018c	d9 5d b4	 fstp	 DWORD PTR tv189[ebp]
  0018f	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _result$[ebp]
  00194	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR tv189[ebp]
  00199	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0019d	89 4d fc	 mov	 DWORD PTR _result$[ebp], ecx
$LN7@weapon_dam:

; 719  : 	}
; 720  : 
; 721  : 	return result;

  001a0	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 722  : }

  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c2 0c 00	 ret	 12			; 0000000cH
?weapon_damage_capability@@YGHHPAUENTITY@@H@Z ENDP	; weapon_damage_capability
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?toggle_damage_debug_invulnerable_flag@@YGHXZ
_TEXT	SEGMENT
tv65 = -68						; size = 4
?toggle_damage_debug_invulnerable_flag@@YGHXZ PROC	; toggle_damage_debug_invulnerable_flag, COMDAT

; 919  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 920  : 	damage_debug_invulnerable_flag = !damage_debug_invulnerable_flag;

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?damage_debug_invulnerable_flag@@3HA, 0
  00010	75 09		 jne	 SHORT $LN3@toggle_dam
  00012	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@toggle_dam
$LN3@toggle_dam:
  0001b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@toggle_dam:
  00022	8b 45 bc	 mov	 eax, DWORD PTR tv65[ebp]
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?damage_debug_invulnerable_flag@@3HA, eax

; 921  : 
; 922  : 	return damage_debug_invulnerable_flag;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?damage_debug_invulnerable_flag@@3HA

; 923  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?toggle_damage_debug_invulnerable_flag@@YGHXZ ENDP	; toggle_damage_debug_invulnerable_flag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?get_damage_debug_invulnerable_flag@@YGHXZ
_TEXT	SEGMENT
?get_damage_debug_invulnerable_flag@@YGHXZ PROC		; get_damage_debug_invulnerable_flag, COMDAT

; 910  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 911  : 	return damage_debug_invulnerable_flag;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?damage_debug_invulnerable_flag@@3HA

; 912  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_damage_debug_invulnerable_flag@@YGHXZ ENDP		; get_damage_debug_invulnerable_flag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?get_3d_object_restored_object_index@@YGHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?get_3d_object_restored_object_index@@YGHH@Z PROC	; get_3d_object_restored_object_index, COMDAT

; 842  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 843  : 	ASSERT ((index >= 0) && (index < OBJECT_3D_LAST));

  00009	83 7d 08 00	 cmp	 DWORD PTR _index$[ebp], 0
  0000d	7c 09		 jl	 SHORT $LN3@get_3d_obj
  0000f	81 7d 08 e4 0a
	00 00		 cmp	 DWORD PTR _index$[ebp], 2788 ; 00000ae4H
  00016	7c 18		 jl	 SHORT $LN2@get_3d_obj
$LN3@get_3d_obj:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_object_restored_object_index@@YGHH@Z@4JA
  0001d	83 c0 01	 add	 eax, 1
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OGCJEGBO@?$CIindex?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIindex?5?$DM?5OBJECT@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_obj:

; 844  : 
; 845  : 	return restored_object_table [index];

  00030	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?restored_object_table@@3PAHA
  00039	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 846  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?get_3d_object_restored_object_index@@YGHH@Z ENDP	; get_3d_object_restored_object_index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?get_3d_object_destroyed_object_index@@YGHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?get_3d_object_destroyed_object_index@@YGHH@Z PROC	; get_3d_object_destroyed_object_index, COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 832  : 	ASSERT ((index >= 0) && (index < OBJECT_3D_LAST));

  00009	83 7d 08 00	 cmp	 DWORD PTR _index$[ebp], 0
  0000d	7c 09		 jl	 SHORT $LN3@get_3d_obj
  0000f	81 7d 08 e4 0a
	00 00		 cmp	 DWORD PTR _index$[ebp], 2788 ; 00000ae4H
  00016	7c 18		 jl	 SHORT $LN2@get_3d_obj
$LN3@get_3d_obj:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_object_destroyed_object_index@@YGHH@Z@4JA
  0001d	83 c0 01	 add	 eax, 1
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OGCJEGBO@?$CIindex?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIindex?5?$DM?5OBJECT@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_obj:

; 833  : 
; 834  : 	return destroyed_object_table [index];

  00030	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?destroyed_object_table@@3PAHA
  00039	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 835  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?get_3d_object_destroyed_object_index@@YGHH@Z ENDP	; get_3d_object_destroyed_object_index
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?deinitialise_destroyed_object_database@@YGXXZ
_TEXT	SEGMENT
?deinitialise_destroyed_object_database@@YGXXZ PROC	; deinitialise_destroyed_object_database, COMDAT

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 821  : 	safe_free (destroyed_object_table);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?destroyed_object_table@@3PAHA
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 822  : 
; 823  : 	safe_free (restored_object_table);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?restored_object_table@@3PAHA
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 824  : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?deinitialise_destroyed_object_database@@YGXXZ ENDP	; deinitialise_destroyed_object_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?initialise_destroyed_object_database@@YGXXZ
_TEXT	SEGMENT
_keyword_length$ = -24					; size = 4
_found_flag$ = -20					; size = 4
_destroyed_object_string$ = -16				; size = 4
_normal_object_string$ = -12				; size = 4
_destroyed_object$ = -8					; size = 4
_normal_object$ = -4					; size = 4
?initialise_destroyed_object_database@@YGXXZ PROC	; initialise_destroyed_object_database, COMDAT

; 733  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 734  : 	object_3d_index_numbers
; 735  : 		normal_object,
; 736  : 		destroyed_object;
; 737  : 
; 738  : 	const char
; 739  : 		*normal_object_string;
; 740  : 	char
; 741  : 		*destroyed_object_string;
; 742  : 
; 743  : 	int
; 744  : 		found_flag,
; 745  : 		keyword_length;
; 746  : 
; 747  : 	keyword_length = strlen (DESTROYED_OBJECT_KEYWORD);

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LPPNFMIE@_DESTROYED@
  0000e	e8 00 00 00 00	 call	 _strlen
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 e8	 mov	 DWORD PTR _keyword_length$[ebp], eax

; 748  : 
; 749  : 	destroyed_object_table = (object_3d_index_numbers *) safe_malloc (sizeof (object_3d_index_numbers) * OBJECT_3D_LAST);

  00019	68 90 2b 00 00	 push	 11152			; 00002b90H
  0001e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00023	a3 00 00 00 00	 mov	 DWORD PTR ?destroyed_object_table@@3PAHA, eax

; 750  : 
; 751  : 	restored_object_table = (object_3d_index_numbers *) safe_malloc (sizeof (object_3d_index_numbers) * OBJECT_3D_LAST);

  00028	68 90 2b 00 00	 push	 11152			; 00002b90H
  0002d	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00032	a3 00 00 00 00	 mov	 DWORD PTR ?restored_object_table@@3PAHA, eax

; 752  : 
; 753  : 	//
; 754  : 	// set defaults
; 755  : 	//
; 756  : 
; 757  : 	for (normal_object = 0; normal_object < OBJECT_3D_LAST; normal_object ++)

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _normal_object$[ebp], 0
  0003e	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _normal_object$[ebp]
  00043	83 c0 01	 add	 eax, 1
  00046	89 45 fc	 mov	 DWORD PTR _normal_object$[ebp], eax
$LN4@initialise:
  00049	81 7d fc e4 0a
	00 00		 cmp	 DWORD PTR _normal_object$[ebp], 2788 ; 00000ae4H
  00050	7d 20		 jge	 SHORT $LN3@initialise

; 758  : 	{
; 759  : 		destroyed_object_table [normal_object] = normal_object;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _normal_object$[ebp]
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?destroyed_object_table@@3PAHA
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _normal_object$[ebp]
  0005e	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 760  : 
; 761  : 		restored_object_table [normal_object] = normal_object;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _normal_object$[ebp]
  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?restored_object_table@@3PAHA
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _normal_object$[ebp]
  0006d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 762  : 	}

  00070	eb ce		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 763  : 
; 764  : 	//
; 765  : 	// search every 3d object for a destroyed counterpart
; 766  : 	//
; 767  : 
; 768  : 	for (normal_object = 0; normal_object < OBJECT_3D_LAST; normal_object ++)

  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _normal_object$[ebp], 0
  00079	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _normal_object$[ebp]
  0007e	83 c0 01	 add	 eax, 1
  00081	89 45 fc	 mov	 DWORD PTR _normal_object$[ebp], eax
$LN7@initialise:
  00084	81 7d fc e4 0a
	00 00		 cmp	 DWORD PTR _normal_object$[ebp], 2788 ; 00000ae4H
  0008b	0f 8d c2 00 00
	00		 jge	 $LN1@initialise

; 769  : 	{
; 770  : 		//
; 771  : 		// construct search string
; 772  : 		//
; 773  : 
; 774  : 		normal_object_string = object_3d_information_database [normal_object].name;

  00091	8b 45 fc	 mov	 eax, DWORD PTR _normal_object$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
  0009a	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  0009d	89 55 f4	 mov	 DWORD PTR _normal_object_string$[ebp], edx

; 775  : 
; 776  : 		destroyed_object_string = (char *) malloc_fast_mem (strlen (normal_object_string) + keyword_length + 4);

  000a0	8b 45 f4	 mov	 eax, DWORD PTR _normal_object_string$[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _strlen
  000a9	83 c4 04	 add	 esp, 4
  000ac	8b 4d e8	 mov	 ecx, DWORD PTR _keyword_length$[ebp]
  000af	8d 54 08 04	 lea	 edx, DWORD PTR [eax+ecx+4]
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  000b9	89 45 f0	 mov	 DWORD PTR _destroyed_object_string$[ebp], eax

; 777  : 
; 778  : 		strcpy (destroyed_object_string, normal_object_string);

  000bc	8b 45 f4	 mov	 eax, DWORD PTR _normal_object_string$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR _destroyed_object_string$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 _strcpy
  000c9	83 c4 08	 add	 esp, 8

; 779  : 
; 780  : 		strcat (destroyed_object_string, DESTROYED_OBJECT_KEYWORD);

  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LPPNFMIE@_DESTROYED@
  000d1	8b 45 f0	 mov	 eax, DWORD PTR _destroyed_object_string$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _strcat
  000da	83 c4 08	 add	 esp, 8

; 781  : 
; 782  : 		//
; 783  : 		// search database for new string
; 784  : 		//
; 785  : 
; 786  : 		found_flag = FALSE;

  000dd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _found_flag$[ebp], 0

; 787  : 
; 788  : 		for (destroyed_object = 0; destroyed_object < OBJECT_3D_LAST; destroyed_object ++)

  000e4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _destroyed_object$[ebp], 0
  000eb	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  000ed	8b 45 f8	 mov	 eax, DWORD PTR _destroyed_object$[ebp]
  000f0	83 c0 01	 add	 eax, 1
  000f3	89 45 f8	 mov	 DWORD PTR _destroyed_object$[ebp], eax
$LN10@initialise:
  000f6	81 7d f8 e4 0a
	00 00		 cmp	 DWORD PTR _destroyed_object$[ebp], 2788 ; 00000ae4H
  000fd	7d 46		 jge	 SHORT $LN9@initialise

; 789  : 		{
; 790  : 			if (strcmp (destroyed_object_string, object_3d_information_database [destroyed_object].name) == 0)

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _destroyed_object$[ebp]
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_information_database@@3PAUOBJECT_3D_INFORMATION@@A ; object_3d_information_database
  00108	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  0010b	52		 push	 edx
  0010c	8b 45 f0	 mov	 eax, DWORD PTR _destroyed_object_string$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _strcmp
  00115	83 c4 08	 add	 esp, 8
  00118	85 c0		 test	 eax, eax
  0011a	75 27		 jne	 SHORT $LN11@initialise

; 791  : 			{
; 792  : 				destroyed_object_table [normal_object] = destroyed_object;

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _normal_object$[ebp]
  0011f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?destroyed_object_table@@3PAHA
  00125	8b 55 f8	 mov	 edx, DWORD PTR _destroyed_object$[ebp]
  00128	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 793  : 
; 794  : 				restored_object_table [destroyed_object] = normal_object;

  0012b	8b 45 f8	 mov	 eax, DWORD PTR _destroyed_object$[ebp]
  0012e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?restored_object_table@@3PAHA
  00134	8b 55 fc	 mov	 edx, DWORD PTR _normal_object$[ebp]
  00137	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 795  : 
; 796  : 				found_flag = TRUE;

  0013a	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _found_flag$[ebp], 1

; 797  : 
; 798  : 				break;

  00141	eb 02		 jmp	 SHORT $LN9@initialise
$LN11@initialise:

; 799  : 			}
; 800  : 		}

  00143	eb a8		 jmp	 SHORT $LN8@initialise
$LN9@initialise:

; 801  : 
; 802  : 		#if DEBUG_NON_ENTRIES
; 803  : 
; 804  : 		if ((!found_flag) && (!strstr (normal_object_string, DESTROYED_OBJECT_KEYWORD)))
; 805  : 		{
; 806  : 			debug_log ("DAMAGE : No entry found for %s", normal_object_string);
; 807  : 		}
; 808  : 
; 809  : 		#endif
; 810  : 
; 811  : 		free_mem (destroyed_object_string);

  00145	8b 45 f0	 mov	 eax, DWORD PTR _destroyed_object_string$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 812  : 	}

  0014e	e9 28 ff ff ff	 jmp	 $LN5@initialise
$LN1@initialise:

; 813  : }

  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
?initialise_destroyed_object_database@@YGXXZ ENDP	; initialise_destroyed_object_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z
_TEXT	SEGMENT
tv132 = -84						; size = 4
tv92 = -80						; size = 4
_warhead_target_class$ = -12				; size = 4
_warhead_effective_mask$ = -8				; size = 4
_warhead_type$ = -4					; size = 4
_weapon_type$ = 8					; size = 4
_target$ = 12						; size = 4
_direct_hit$ = 16					; size = 4
?weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z PROC ; weapon_is_suitable_for_damaging_target, COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  : 	weapon_warhead_types
; 640  : 		warhead_type;
; 641  : 
; 642  : 	int
; 643  : 		warhead_effective_mask,
; 644  : 		warhead_target_class;
; 645  : 
; 646  : 	warhead_type = weapon_database [weapon_type].warhead_type;

  00009	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  00010	8b 88 24 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+36]
  00016	89 4d fc	 mov	 DWORD PTR _warhead_type$[ebp], ecx

; 647  : 
; 648  : 	ASSERT ((warhead_type >= WEAPON_WARHEAD_TYPE_NONE) && (warhead_type < NUM_WEAPON_WARHEAD_TYPES));

  00019	83 7d fc 00	 cmp	 DWORD PTR _warhead_type$[ebp], 0
  0001d	7c 06		 jl	 SHORT $LN3@weapon_is_
  0001f	83 7d fc 06	 cmp	 DWORD PTR _warhead_type$[ebp], 6
  00023	7c 18		 jl	 SHORT $LN2@weapon_is_
$LN3@weapon_is_:
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z@4JA
  0002a	83 c0 0a	 add	 eax, 10			; 0000000aH
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@DPGILPCE@?$CIwarhead_type?5?$DO?$DN?5WEAPON_WARHEAD@
  00038	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@weapon_is_:

; 649  : 
; 650  : 	ASSERT (target);

  0003d	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  00041	75 18		 jne	 SHORT $LN4@weapon_is_
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z@4JA
  00048	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00056	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@weapon_is_:

; 651  : 
; 652  : 	if ((warhead_type == WEAPON_WARHEAD_TYPE_HIGH_EXPLOSIVE_ANTI_TANK) && (!direct_hit))

  0005b	83 7d fc 04	 cmp	 DWORD PTR _warhead_type$[ebp], 4
  0005f	75 18		 jne	 SHORT $LN5@weapon_is_
  00061	83 7d 10 00	 cmp	 DWORD PTR _direct_hit$[ebp], 0
  00065	75 12		 jne	 SHORT $LN5@weapon_is_

; 653  : 	{
; 654  : 		warhead_effective_mask = warhead_damage_database [WEAPON_WARHEAD_TYPE_HIGH_EXPLOSIVE].effective_targets;

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	d1 e0		 shl	 eax, 1
  0006e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?warhead_damage_database@@3QBUWARHEAD_DAMAGE_DATA@@B[eax]
  00074	89 4d f8	 mov	 DWORD PTR _warhead_effective_mask$[ebp], ecx

; 655  : 	}
; 656  : 	else

  00077	eb 0d		 jmp	 SHORT $LN6@weapon_is_
$LN5@weapon_is_:

; 657  : 	{
; 658  : 		warhead_effective_mask = warhead_damage_database [warhead_type].effective_targets;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _warhead_type$[ebp]
  0007c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?warhead_damage_database@@3QBUWARHEAD_DAMAGE_DATA@@B[eax*4]
  00083	89 4d f8	 mov	 DWORD PTR _warhead_effective_mask$[ebp], ecx
$LN6@weapon_is_:

; 659  : 	}
; 660  : 
; 661  : 	warhead_target_class = get_local_entity_int_value (target, INT_TYPE_WARHEAD_EFFECTIVE_CLASS);

  00086	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0008a	74 0a		 je	 SHORT $LN12@weapon_is_
  0008c	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	89 4d b0	 mov	 DWORD PTR tv92[ebp], ecx
  00094	eb 21		 jmp	 SHORT $LN13@weapon_is_
$LN12@weapon_is_:
  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z@4JA
  0009c	83 c2 17	 add	 edx, 23			; 00000017H
  0009f	52		 push	 edx
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b0	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN13@weapon_is_:
  000b7	b9 01 00 00 00	 mov	 ecx, 1
  000bc	85 c9		 test	 ecx, ecx
  000be	74 09		 je	 SHORT $LN14@weapon_is_
  000c0	c7 45 ac fc 00
	00 00		 mov	 DWORD PTR tv132[ebp], 252 ; 000000fcH
  000c7	eb 21		 jmp	 SHORT $LN15@weapon_is_
$LN14@weapon_is_:
  000c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z@4JA
  000cf	83 c2 17	 add	 edx, 23			; 00000017H
  000d2	52		 push	 edx
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e3	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN15@weapon_is_:
  000ea	68 fc 00 00 00	 push	 252			; 000000fcH
  000ef	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  000f2	51		 push	 ecx
  000f3	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv92[ebp], 1116
  000fa	8b 45 ac	 mov	 eax, DWORD PTR tv132[ebp]
  000fd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00104	ff d1		 call	 ecx
  00106	89 45 f4	 mov	 DWORD PTR _warhead_target_class$[ebp], eax

; 662  : 
; 663  : 	if (warhead_effective_mask & warhead_target_class)

  00109	8b 45 f8	 mov	 eax, DWORD PTR _warhead_effective_mask$[ebp]
  0010c	23 45 f4	 and	 eax, DWORD PTR _warhead_target_class$[ebp]
  0010f	74 2b		 je	 SHORT $LN7@weapon_is_

; 664  : 	{
; 665  : 		if (warhead_target_class < WARHEAD_EFFECTIVE_HARD_TARGETS)

  00111	81 7d f4 00 02
	00 00		 cmp	 DWORD PTR _warhead_target_class$[ebp], 512 ; 00000200H
  00118	7d 11		 jge	 SHORT $LN9@weapon_is_

; 666  : 		{
; 667  : 			return weapon_database [weapon_type].soft_damage_capability;

  0011a	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  00121	8b 80 58 00 00
	00		 mov	 eax, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+88]
  00127	eb 15		 jmp	 SHORT $LN1@weapon_is_

; 668  : 		}
; 669  : 		else

  00129	eb 0f		 jmp	 SHORT $LN10@weapon_is_
$LN9@weapon_is_:

; 670  : 		{
; 671  : 			return weapon_database [weapon_type].hard_damage_capability;

  0012b	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  00132	8b 80 5c 00 00
	00		 mov	 eax, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+92]
  00138	eb 04		 jmp	 SHORT $LN1@weapon_is_
$LN10@weapon_is_:

; 672  : 		}
; 673  : 	}
; 674  : 	else

  0013a	eb 02		 jmp	 SHORT $LN1@weapon_is_
$LN7@weapon_is_:

; 675  : 	{
; 676  : 		return 0;

  0013c	33 c0		 xor	 eax, eax
$LN1@weapon_is_:

; 677  : 	}
; 678  : }

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 0c 00	 ret	 12			; 0000000cH
?weapon_is_suitable_for_damaging_target@@YGHHPAUENTITY@@H@Z ENDP ; weapon_is_suitable_for_damaging_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?weapon_is_capable_of_damage@@YGHH@Z
_TEXT	SEGMENT
_weapon_type$ = 8					; size = 4
?weapon_is_capable_of_damage@@YGHH@Z PROC		; weapon_is_capable_of_damage, COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 630  : 	return (warhead_is_capable_of_damage (weapon_database [weapon_type].warhead_type));

  00009	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_type$[ebp], 224
  00010	8b 88 24 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+36]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?warhead_is_capable_of_damage@@YGHW4WEAPON_WARHEAD_TYPES@@@Z ; warhead_is_capable_of_damage

; 631  : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?weapon_is_capable_of_damage@@YGHH@Z ENDP		; weapon_is_capable_of_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?display_debug_kill_info@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv215 = -100						; size = 4
tv192 = -100						; size = 4
tv167 = -100						; size = 4
tv144 = -100						; size = 4
tv86 = -100						; size = 4
tv208 = -96						; size = 4
tv184 = -96						; size = 4
tv159 = -96						; size = 4
tv136 = -96						; size = 4
tv78 = -96						; size = 4
_col$ = -28						; size = 4
_aggressor_desc$ = -24					; size = 4
_victim_desc$ = -20					; size = 4
_desc2$ = -16						; size = 4
_desc1$ = -12						; size = 4
_aggressor_task$ = -8					; size = 4
_victim_task$ = -4					; size = 4
_victim$ = 8						; size = 4
_aggressor$ = 12					; size = 4
?display_debug_kill_info@@YGXPAUENTITY@@0@Z PROC	; display_debug_kill_info, COMDAT

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 529  : 
; 530  : 	entity
; 531  : 		*victim_task,
; 532  : 		*aggressor_task;
; 533  : 
; 534  : 	const char
; 535  : 		*desc1,
; 536  : 		*desc2,
; 537  : 		*victim_desc,
; 538  : 		*aggressor_desc;
; 539  : 
; 540  : 	debug_colours
; 541  : 		col;
; 542  : 
; 543  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN2@display_de
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@display_de:

; 544  : 
; 545  : 	//
; 546  : 	// get task descriptions
; 547  : 	//
; 548  : 
; 549  : 	// victim
; 550  : 
; 551  : 	victim_task = get_local_entity_primary_task (victim);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _victim$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?get_local_entity_primary_task@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_primary_task
  00033	89 45 fc	 mov	 DWORD PTR _victim_task$[ebp], eax

; 552  : 
; 553  : 	if (victim_task)

  00036	83 7d fc 00	 cmp	 DWORD PTR _victim_task$[ebp], 0
  0003a	74 7f		 je	 SHORT $LN3@display_de

; 554  : 	{
; 555  : 		desc1 = get_local_entity_string (victim_task, STRING_TYPE_FULL_NAME);

  0003c	83 7d fc 00	 cmp	 DWORD PTR _victim_task$[ebp], 0
  00040	74 0a		 je	 SHORT $LN12@display_de
  00042	8b 45 fc	 mov	 eax, DWORD PTR _victim_task$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 4d a0	 mov	 DWORD PTR tv78[ebp], ecx
  0004a	eb 21		 jmp	 SHORT $LN13@display_de
$LN12@display_de:
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  00052	83 c2 1b	 add	 edx, 27			; 0000001bH
  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00066	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN13@display_de:
  0006d	b9 01 00 00 00	 mov	 ecx, 1
  00072	85 c9		 test	 ecx, ecx
  00074	74 09		 je	 SHORT $LN14@display_de
  00076	c7 45 9c 03 00
	00 00		 mov	 DWORD PTR tv86[ebp], 3
  0007d	eb 21		 jmp	 SHORT $LN15@display_de
$LN14@display_de:
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  00085	83 c2 1b	 add	 edx, 27			; 0000001bH
  00088	52		 push	 edx
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00099	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN15@display_de:
  000a0	6a 03		 push	 3
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _victim_task$[ebp]
  000a5	51		 push	 ecx
  000a6	6b 55 a0 34	 imul	 edx, DWORD PTR tv78[ebp], 52
  000aa	8b 45 9c	 mov	 eax, DWORD PTR tv86[ebp]
  000ad	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  000b4	ff d1		 call	 ecx
  000b6	89 45 f4	 mov	 DWORD PTR _desc1$[ebp], eax

; 556  : 	}
; 557  : 	else

  000b9	eb 11		 jmp	 SHORT $LN4@display_de
$LN3@display_de:

; 558  : 	{
; 559  : 		desc1 = task_database [ENTITY_SUB_TYPE_TASK_NOTHING].full_name;

  000bb	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  000c0	6b c8 00	 imul	 ecx, eax, 0
  000c3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?task_database@@3PAUTASK_DATA@@A[ecx]
  000c9	89 55 f4	 mov	 DWORD PTR _desc1$[ebp], edx
$LN4@display_de:

; 560  : 	}
; 561  : 
; 562  : 	// aggressor
; 563  : 
; 564  : 	aggressor_task = get_local_entity_primary_task (aggressor);

  000cc	8b 45 0c	 mov	 eax, DWORD PTR _aggressor$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?get_local_entity_primary_task@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_primary_task
  000d5	89 45 f8	 mov	 DWORD PTR _aggressor_task$[ebp], eax

; 565  : 
; 566  : 	if (aggressor_task)

  000d8	83 7d f8 00	 cmp	 DWORD PTR _aggressor_task$[ebp], 0
  000dc	74 7f		 je	 SHORT $LN5@display_de

; 567  : 	{
; 568  : 		desc2 = get_local_entity_string (aggressor_task, STRING_TYPE_FULL_NAME);

  000de	83 7d f8 00	 cmp	 DWORD PTR _aggressor_task$[ebp], 0
  000e2	74 0a		 je	 SHORT $LN16@display_de
  000e4	8b 45 f8	 mov	 eax, DWORD PTR _aggressor_task$[ebp]
  000e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e9	89 4d a0	 mov	 DWORD PTR tv136[ebp], ecx
  000ec	eb 21		 jmp	 SHORT $LN17@display_de
$LN16@display_de:
  000ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  000f4	83 c2 28	 add	 edx, 40			; 00000028H
  000f7	52		 push	 edx
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00108	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$LN17@display_de:
  0010f	b9 01 00 00 00	 mov	 ecx, 1
  00114	85 c9		 test	 ecx, ecx
  00116	74 09		 je	 SHORT $LN18@display_de
  00118	c7 45 9c 03 00
	00 00		 mov	 DWORD PTR tv144[ebp], 3
  0011f	eb 21		 jmp	 SHORT $LN19@display_de
$LN18@display_de:
  00121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  00127	83 c2 28	 add	 edx, 40			; 00000028H
  0012a	52		 push	 edx
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0013b	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv144[ebp], 0
$LN19@display_de:
  00142	6a 03		 push	 3
  00144	8b 4d f8	 mov	 ecx, DWORD PTR _aggressor_task$[ebp]
  00147	51		 push	 ecx
  00148	6b 55 a0 34	 imul	 edx, DWORD PTR tv136[ebp], 52
  0014c	8b 45 9c	 mov	 eax, DWORD PTR tv144[ebp]
  0014f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00156	ff d1		 call	 ecx
  00158	89 45 f0	 mov	 DWORD PTR _desc2$[ebp], eax

; 569  : 	}
; 570  : 	else

  0015b	eb 11		 jmp	 SHORT $LN6@display_de
$LN5@display_de:

; 571  : 	{
; 572  : 		desc2 = task_database [ENTITY_SUB_TYPE_TASK_NOTHING].full_name;

  0015d	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  00162	6b c8 00	 imul	 ecx, eax, 0
  00165	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?task_database@@3PAUTASK_DATA@@A[ecx]
  0016b	89 55 f0	 mov	 DWORD PTR _desc2$[ebp], edx
$LN6@display_de:

; 573  : 	}
; 574  : 
; 575  : 	//
; 576  : 	// get mobile descriptions
; 577  : 	//
; 578  : 
; 579  : 	// victim
; 580  : 
; 581  : 	victim_desc = get_local_entity_string (victim, STRING_TYPE_FULL_NAME);

  0016e	83 7d 08 00	 cmp	 DWORD PTR _victim$[ebp], 0
  00172	74 0a		 je	 SHORT $LN20@display_de
  00174	8b 45 08	 mov	 eax, DWORD PTR _victim$[ebp]
  00177	8b 08		 mov	 ecx, DWORD PTR [eax]
  00179	89 4d a0	 mov	 DWORD PTR tv159[ebp], ecx
  0017c	eb 21		 jmp	 SHORT $LN21@display_de
$LN20@display_de:
  0017e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  00184	83 c2 35	 add	 edx, 53			; 00000035H
  00187	52		 push	 edx
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00198	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN21@display_de:
  0019f	b9 01 00 00 00	 mov	 ecx, 1
  001a4	85 c9		 test	 ecx, ecx
  001a6	74 09		 je	 SHORT $LN22@display_de
  001a8	c7 45 9c 03 00
	00 00		 mov	 DWORD PTR tv167[ebp], 3
  001af	eb 21		 jmp	 SHORT $LN23@display_de
$LN22@display_de:
  001b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  001b7	83 c2 35	 add	 edx, 53			; 00000035H
  001ba	52		 push	 edx
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001cb	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN23@display_de:
  001d2	6a 03		 push	 3
  001d4	8b 4d 08	 mov	 ecx, DWORD PTR _victim$[ebp]
  001d7	51		 push	 ecx
  001d8	6b 55 a0 34	 imul	 edx, DWORD PTR tv159[ebp], 52
  001dc	8b 45 9c	 mov	 eax, DWORD PTR tv167[ebp]
  001df	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  001e6	ff d1		 call	 ecx
  001e8	89 45 ec	 mov	 DWORD PTR _victim_desc$[ebp], eax

; 582  : 
; 583  : 	ASSERT (victim_desc);

  001eb	83 7d ec 00	 cmp	 DWORD PTR _victim_desc$[ebp], 0
  001ef	75 18		 jne	 SHORT $LN7@display_de
  001f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  001f6	83 c0 37	 add	 eax, 55			; 00000037H
  001f9	50		 push	 eax
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FDGLIMNF@victim_desc@
  00204	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@display_de:

; 584  : 
; 585  : 	// aggressor
; 586  : 
; 587  : 	aggressor_desc = get_local_entity_string (aggressor, STRING_TYPE_FULL_NAME);

  00209	83 7d 0c 00	 cmp	 DWORD PTR _aggressor$[ebp], 0
  0020d	74 0a		 je	 SHORT $LN24@display_de
  0020f	8b 45 0c	 mov	 eax, DWORD PTR _aggressor$[ebp]
  00212	8b 08		 mov	 ecx, DWORD PTR [eax]
  00214	89 4d a0	 mov	 DWORD PTR tv184[ebp], ecx
  00217	eb 21		 jmp	 SHORT $LN25@display_de
$LN24@display_de:
  00219	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  0021f	83 c2 3b	 add	 edx, 59			; 0000003bH
  00222	52		 push	 edx
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00233	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN25@display_de:
  0023a	b9 01 00 00 00	 mov	 ecx, 1
  0023f	85 c9		 test	 ecx, ecx
  00241	74 09		 je	 SHORT $LN26@display_de
  00243	c7 45 9c 03 00
	00 00		 mov	 DWORD PTR tv192[ebp], 3
  0024a	eb 21		 jmp	 SHORT $LN27@display_de
$LN26@display_de:
  0024c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  00252	83 c2 3b	 add	 edx, 59			; 0000003bH
  00255	52		 push	 edx
  00256	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00266	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv192[ebp], 0
$LN27@display_de:
  0026d	6a 03		 push	 3
  0026f	8b 4d 0c	 mov	 ecx, DWORD PTR _aggressor$[ebp]
  00272	51		 push	 ecx
  00273	6b 55 a0 34	 imul	 edx, DWORD PTR tv184[ebp], 52
  00277	8b 45 9c	 mov	 eax, DWORD PTR tv192[ebp]
  0027a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00281	ff d1		 call	 ecx
  00283	89 45 e8	 mov	 DWORD PTR _aggressor_desc$[ebp], eax

; 588  : 
; 589  : 	ASSERT (aggressor_desc);

  00286	83 7d e8 00	 cmp	 DWORD PTR _aggressor_desc$[ebp], 0
  0028a	75 18		 jne	 SHORT $LN8@display_de
  0028c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_debug_kill_info@@YGXPAUENTITY@@0@Z@4JA
  00291	83 c0 3d	 add	 eax, 61			; 0000003dH
  00294	50		 push	 eax
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IDBCIOIA@aggressor_desc@
  0029f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@display_de:

; 590  : 
; 591  : 	//
; 592  : 
; 593  : 	if (get_local_entity_int_value (aggressor, INT_TYPE_SIDE) == ENTITY_SIDE_BLUE_FORCE)

  002a4	83 7d 0c 00	 cmp	 DWORD PTR _aggressor$[ebp], 0
  002a8	74 0a		 je	 SHORT $LN28@display_de
  002aa	8b 45 0c	 mov	 eax, DWORD PTR _aggressor$[ebp]
  002ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  002af	89 4d a0	 mov	 DWORD PTR tv208[ebp], ecx
  002b2	eb 1d		 jmp	 SHORT $LN29@display_de
$LN28@display_de:
  002b4	68 51 02 00 00	 push	 593			; 00000251H
  002b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002c4	52		 push	 edx
  002c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ca	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv208[ebp], 0
$LN29@display_de:
  002d1	b8 01 00 00 00	 mov	 eax, 1
  002d6	85 c0		 test	 eax, eax
  002d8	74 09		 je	 SHORT $LN30@display_de
  002da	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv215[ebp], 187 ; 000000bbH
  002e1	eb 1d		 jmp	 SHORT $LN31@display_de
$LN30@display_de:
  002e3	68 51 02 00 00	 push	 593			; 00000251H
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002f3	51		 push	 ecx
  002f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f9	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$LN31@display_de:
  00300	68 bb 00 00 00	 push	 187			; 000000bbH
  00305	8b 55 0c	 mov	 edx, DWORD PTR _aggressor$[ebp]
  00308	52		 push	 edx
  00309	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv208[ebp], 1116
  00310	8b 4d 9c	 mov	 ecx, DWORD PTR tv215[ebp]
  00313	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0031a	ff d2		 call	 edx
  0031c	83 f8 01	 cmp	 eax, 1
  0031f	75 09		 jne	 SHORT $LN9@display_de

; 594  : 	{
; 595  : 		col = DEBUG_COLOUR_BLUE;

  00321	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _col$[ebp], 1

; 596  : 	}
; 597  : 	else

  00328	eb 07		 jmp	 SHORT $LN10@display_de
$LN9@display_de:

; 598  : 	{
; 599  : 		col = DEBUG_COLOUR_RED;

  0032a	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _col$[ebp], 4
$LN10@display_de:

; 600  : 	}
; 601  : 
; 602  : 	debug_colour_log (col, "DAMAGE: %s (%d) doing %s - killed by %s (%d) doing %s",

  00331	8b 45 f0	 mov	 eax, DWORD PTR _desc2$[ebp]
  00334	50		 push	 eax
  00335	8b 4d 0c	 mov	 ecx, DWORD PTR _aggressor$[ebp]
  00338	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  0033e	c1 f9 04	 sar	 ecx, 4
  00341	51		 push	 ecx
  00342	8b 55 e8	 mov	 edx, DWORD PTR _aggressor_desc$[ebp]
  00345	52		 push	 edx
  00346	8b 45 f4	 mov	 eax, DWORD PTR _desc1$[ebp]
  00349	50		 push	 eax
  0034a	8b 4d 08	 mov	 ecx, DWORD PTR _victim$[ebp]
  0034d	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00353	c1 f9 04	 sar	 ecx, 4
  00356	51		 push	 ecx
  00357	8b 55 ec	 mov	 edx, DWORD PTR _victim_desc$[ebp]
  0035a	52		 push	 edx
  0035b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@BODPDEIC@DAMAGE?3?5?$CFs?5?$CI?$CFd?$CJ?5doing?5?$CFs?5?9?5kill@
  00360	8b 45 e4	 mov	 eax, DWORD PTR _col$[ebp]
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00369	83 c4 20	 add	 esp, 32			; 00000020H

; 603  : 								victim_desc,
; 604  : 								get_local_entity_index (victim),
; 605  : 								desc1,
; 606  : 								aggressor_desc,
; 607  : 								get_local_entity_index (aggressor),
; 608  : 								desc2);
; 609  : 
; 610  : 	ai_log ("(KILL) %s doing %s - killed by %s doing %s", victim_desc, desc1, aggressor_desc, desc2);

  0036c	8b 45 f0	 mov	 eax, DWORD PTR _desc2$[ebp]
  0036f	50		 push	 eax
  00370	8b 4d e8	 mov	 ecx, DWORD PTR _aggressor_desc$[ebp]
  00373	51		 push	 ecx
  00374	8b 55 f4	 mov	 edx, DWORD PTR _desc1$[ebp]
  00377	52		 push	 edx
  00378	8b 45 ec	 mov	 eax, DWORD PTR _victim_desc$[ebp]
  0037b	50		 push	 eax
  0037c	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IHNDDBCH@?$CIKILL?$CJ?5?$CFs?5doing?5?$CFs?5?9?5killed?5by?5@
  00381	e8 00 00 00 00	 call	 ?ai_log@@YAXPBDZZ	; ai_log
  00386	83 c4 14	 add	 esp, 20			; 00000014H

; 611  : }

  00389	5f		 pop	 edi
  0038a	5e		 pop	 esi
  0038b	5b		 pop	 ebx
  0038c	8b e5		 mov	 esp, ebp
  0038e	5d		 pop	 ebp
  0038f	c2 08 00	 ret	 8
?display_debug_kill_info@@YGXPAUENTITY@@0@Z ENDP	; display_debug_kill_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv226 = -108						; size = 4
tv175 = -108						; size = 4
tv154 = -108						; size = 4
tv134 = -108						; size = 4
tv81 = -108						; size = 4
tv218 = -104						; size = 4
tv167 = -104						; size = 4
tv147 = -104						; size = 4
tv94 = -104						; size = 4
tv74 = -104						; size = 4
_rounds_needed$1 = -36					; size = 4
_weapon_power$2 = -32					; size = 4
_weapon_type$ = -28					; size = 4
_damage_level$ = -24					; size = 4
_count$ = -20						; size = 4
_loop$ = -16						; size = 4
_fp$ = -12						; size = 4
_filename$ = -8						; size = 4
_target_name$ = -4					; size = 4
_en$ = 8						; size = 4
?assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z PROC ; assess_effectiveness_of_all_weapons_on_entity, COMDAT

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 396  : 	const char
; 397  : 		*target_name;
; 398  : 	char
; 399  : 		*filename;
; 400  : 
; 401  : 	FILE
; 402  : 		*fp;
; 403  : 
; 404  : 	int
; 405  : 		loop,
; 406  : 		count,
; 407  : 		damage_level;
; 408  : 
; 409  : 	entity_sub_types
; 410  : 		weapon_type;
; 411  : 
; 412  : 	//
; 413  : 	// output :
; 414  : 	// target name,
; 415  : 	// current damage,
; 416  : 	//
; 417  : 	// for each weapon
; 418  : 	//		weapon name,
; 419  : 	//		number of rounds needed to destroy using weapon
; 420  : 
; 421  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN11@assess_eff
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 1a	 add	 eax, 26			; 0000001aH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@assess_eff:

; 422  : 
; 423  : 	if (get_local_entity_int_value (en, INT_TYPE_IDENTIFY_AIRCRAFT))

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN21@assess_eff
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d 98	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 1d		 jmp	 SHORT $LN22@assess_eff
$LN21@assess_eff:
  00037	68 a7 01 00 00	 push	 423			; 000001a7H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004d	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN22@assess_eff:
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN23@assess_eff
  0005d	c7 45 94 57 00
	00 00		 mov	 DWORD PTR tv81[ebp], 87	; 00000057H
  00064	eb 1d		 jmp	 SHORT $LN24@assess_eff
$LN23@assess_eff:
  00066	68 a7 01 00 00	 push	 423			; 000001a7H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN24@assess_eff:
  00083	6a 57		 push	 87			; 00000057H
  00085	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00088	52		 push	 edx
  00089	69 45 98 5c 04
	00 00		 imul	 eax, DWORD PTR tv74[ebp], 1116
  00090	8b 4d 94	 mov	 ecx, DWORD PTR tv81[ebp]
  00093	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009a	ff d2		 call	 edx
  0009c	85 c0		 test	 eax, eax
  0009e	0f 84 8c 00 00
	00		 je	 $LN12@assess_eff

; 424  : 	{
; 425  : 		target_name = entity_sub_type_aircraft_names [get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE)];

  000a4	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000a8	74 0a		 je	 SHORT $LN25@assess_eff
  000aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	89 4d 98	 mov	 DWORD PTR tv94[ebp], ecx
  000b2	eb 21		 jmp	 SHORT $LN26@assess_eff
$LN25@assess_eff:
  000b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
  000ba	83 c2 1e	 add	 edx, 30			; 0000001eH
  000bd	52		 push	 edx
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ce	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$LN26@assess_eff:
  000d5	b9 01 00 00 00	 mov	 ecx, 1
  000da	85 c9		 test	 ecx, ecx
  000dc	74 09		 je	 SHORT $LN27@assess_eff
  000de	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv134[ebp], 52 ; 00000034H
  000e5	eb 21		 jmp	 SHORT $LN28@assess_eff
$LN27@assess_eff:
  000e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
  000ed	83 c2 1e	 add	 edx, 30			; 0000001eH
  000f0	52		 push	 edx
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00101	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$LN28@assess_eff:
  00108	6a 34		 push	 52			; 00000034H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0010d	51		 push	 ecx
  0010e	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv94[ebp], 1116
  00115	8b 45 94	 mov	 eax, DWORD PTR tv134[ebp]
  00118	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0011f	ff d1		 call	 ecx
  00121	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?entity_sub_type_aircraft_names@@3PAPBDA[eax*4]
  00128	89 55 fc	 mov	 DWORD PTR _target_name$[ebp], edx
  0012b	e9 17 01 00 00	 jmp	 $LN13@assess_eff
$LN12@assess_eff:

; 426  : 	}
; 427  : 	else if (get_local_entity_int_value (en, INT_TYPE_IDENTIFY_VEHICLE))

  00130	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00134	74 0a		 je	 SHORT $LN29@assess_eff
  00136	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00139	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013b	89 4d 98	 mov	 DWORD PTR tv147[ebp], ecx
  0013e	eb 1d		 jmp	 SHORT $LN30@assess_eff
$LN29@assess_eff:
  00140	68 ab 01 00 00	 push	 427			; 000001abH
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0014a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00156	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
$LN30@assess_eff:
  0015d	b8 01 00 00 00	 mov	 eax, 1
  00162	85 c0		 test	 eax, eax
  00164	74 09		 je	 SHORT $LN31@assess_eff
  00166	c7 45 94 60 00
	00 00		 mov	 DWORD PTR tv154[ebp], 96 ; 00000060H
  0016d	eb 1d		 jmp	 SHORT $LN32@assess_eff
$LN31@assess_eff:
  0016f	68 ab 01 00 00	 push	 427			; 000001abH
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00179	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0017f	51		 push	 ecx
  00180	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00185	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
$LN32@assess_eff:
  0018c	6a 60		 push	 96			; 00000060H
  0018e	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00191	52		 push	 edx
  00192	69 45 98 5c 04
	00 00		 imul	 eax, DWORD PTR tv147[ebp], 1116
  00199	8b 4d 94	 mov	 ecx, DWORD PTR tv154[ebp]
  0019c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001a3	ff d2		 call	 edx
  001a5	85 c0		 test	 eax, eax
  001a7	0f 84 89 00 00
	00		 je	 $LN14@assess_eff

; 428  : 	{
; 429  : 		target_name = entity_sub_type_vehicle_names [get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE)];

  001ad	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  001b1	74 0a		 je	 SHORT $LN33@assess_eff
  001b3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b8	89 4d 98	 mov	 DWORD PTR tv167[ebp], ecx
  001bb	eb 21		 jmp	 SHORT $LN34@assess_eff
$LN33@assess_eff:
  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
  001c3	83 c2 22	 add	 edx, 34			; 00000022H
  001c6	52		 push	 edx
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001d7	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN34@assess_eff:
  001de	b9 01 00 00 00	 mov	 ecx, 1
  001e3	85 c9		 test	 ecx, ecx
  001e5	74 09		 je	 SHORT $LN35@assess_eff
  001e7	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv175[ebp], 52 ; 00000034H
  001ee	eb 21		 jmp	 SHORT $LN36@assess_eff
$LN35@assess_eff:
  001f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
  001f6	83 c2 22	 add	 edx, 34			; 00000022H
  001f9	52		 push	 edx
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv175[ebp], 0
$LN36@assess_eff:
  00211	6a 34		 push	 52			; 00000034H
  00213	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00216	51		 push	 ecx
  00217	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv167[ebp], 1116
  0021e	8b 45 94	 mov	 eax, DWORD PTR tv175[ebp]
  00221	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00228	ff d1		 call	 ecx
  0022a	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?entity_sub_type_vehicle_names@@3PAPBDA[eax*4]
  00231	89 55 fc	 mov	 DWORD PTR _target_name$[ebp], edx

; 430  : 	}
; 431  : 	else

  00234	eb 11		 jmp	 SHORT $LN13@assess_eff
$LN14@assess_eff:

; 432  : 	{
; 433  : 		target_name = entity_type_names [en->type];

  00236	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00239	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?entity_type_names@@3PAPBDA ; entity_type_names
  00241	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00244	89 45 fc	 mov	 DWORD PTR _target_name$[ebp], eax
$LN13@assess_eff:

; 434  : 	}
; 435  : 
; 436  : 	debug_colour_log (DEBUG_COLOUR_RED, "Testing weapon effectiveness on entity : %s", target_name);

  00247	8b 45 fc	 mov	 eax, DWORD PTR _target_name$[ebp]
  0024a	50		 push	 eax
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LHMHMKAH@Testing?5weapon?5effectiveness?5on@
  00250	6a 04		 push	 4
  00252	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00257	83 c4 0c	 add	 esp, 12			; 0000000cH

; 437  : 
; 438  : 	//
; 439  : 	// open file
; 440  : 	//
; 441  : 
; 442  : 	filename = (char *) malloc_fast_mem (strlen (target_name) + 6);

  0025a	8b 45 fc	 mov	 eax, DWORD PTR _target_name$[ebp]
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 _strlen
  00263	83 c4 04	 add	 esp, 4
  00266	83 c0 06	 add	 eax, 6
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0026f	89 45 f8	 mov	 DWORD PTR _filename$[ebp], eax

; 443  : 
; 444  : 	sprintf (filename, "%s.dmg", target_name);

  00272	8b 45 fc	 mov	 eax, DWORD PTR _target_name$[ebp]
  00275	50		 push	 eax
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_06NCKGBNPH@?$CFs?4dmg@
  0027b	8b 4d f8	 mov	 ecx, DWORD PTR _filename$[ebp]
  0027e	51		 push	 ecx
  0027f	e8 00 00 00 00	 call	 _sprintf
  00284	83 c4 0c	 add	 esp, 12			; 0000000cH

; 445  : 
; 446  : 	fp = safe_fopen (filename, "w");

  00287	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  0028c	8b 45 f8	 mov	 eax, DWORD PTR _filename$[ebp]
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00295	89 45 f4	 mov	 DWORD PTR _fp$[ebp], eax

; 447  : 
; 448  :     safe_free (filename);

  00298	8b 45 f8	 mov	 eax, DWORD PTR _filename$[ebp]
  0029b	50		 push	 eax
  0029c	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 449  : 
; 450  : 	//
; 451  : 	// output target name
; 452  : 	//
; 453  : 
; 454  : 	count = fprintf (fp, "OBJECT : %s\n", target_name);

  002a1	8b 45 fc	 mov	 eax, DWORD PTR _target_name$[ebp]
  002a4	50		 push	 eax
  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FMAAMICB@OBJECT?5?3?5?$CFs?6@
  002aa	8b 4d f4	 mov	 ecx, DWORD PTR _fp$[ebp]
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 _fprintf
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b6	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 455  : 
; 456  : 	for (loop = 0; loop < count - 1; loop ++)

  002b9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  002c0	eb 09		 jmp	 SHORT $LN4@assess_eff
$LN2@assess_eff:
  002c2	8b 45 f0	 mov	 eax, DWORD PTR _loop$[ebp]
  002c5	83 c0 01	 add	 eax, 1
  002c8	89 45 f0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@assess_eff:
  002cb	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  002ce	83 e8 01	 sub	 eax, 1
  002d1	39 45 f0	 cmp	 DWORD PTR _loop$[ebp], eax
  002d4	7d 11		 jge	 SHORT $LN3@assess_eff

; 457  : 	{
; 458  : 		fputc ('=', fp);

  002d6	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  002d9	50		 push	 eax
  002da	6a 3d		 push	 61			; 0000003dH
  002dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  002e2	83 c4 08	 add	 esp, 8

; 459  : 	}

  002e5	eb db		 jmp	 SHORT $LN2@assess_eff
$LN3@assess_eff:

; 460  : 
; 461  : 	fprintf (fp, "\n\n");

  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_02PHMGELLB@?6?6@
  002ec	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 _fprintf
  002f5	83 c4 08	 add	 esp, 8

; 462  : 
; 463  : 	//
; 464  : 	// output current damage levels
; 465  : 	//
; 466  : 
; 467  : 	damage_level = get_local_entity_int_value (en, INT_TYPE_DAMAGE_LEVEL);

  002f8	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  002fc	74 0a		 je	 SHORT $LN37@assess_eff
  002fe	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00301	8b 08		 mov	 ecx, DWORD PTR [eax]
  00303	89 4d 98	 mov	 DWORD PTR tv218[ebp], ecx
  00306	eb 21		 jmp	 SHORT $LN38@assess_eff
$LN37@assess_eff:
  00308	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
  0030e	83 c2 48	 add	 edx, 72			; 00000048H
  00311	52		 push	 edx
  00312	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00317	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0031c	50		 push	 eax
  0031d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00322	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
$LN38@assess_eff:
  00329	b9 01 00 00 00	 mov	 ecx, 1
  0032e	85 c9		 test	 ecx, ecx
  00330	74 09		 je	 SHORT $LN39@assess_eff
  00332	c7 45 94 25 00
	00 00		 mov	 DWORD PTR tv226[ebp], 37 ; 00000025H
  00339	eb 21		 jmp	 SHORT $LN40@assess_eff
$LN39@assess_eff:
  0033b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z@4JA
  00341	83 c2 48	 add	 edx, 72			; 00000048H
  00344	52		 push	 edx
  00345	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00355	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$LN40@assess_eff:
  0035c	6a 25		 push	 37			; 00000025H
  0035e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00361	51		 push	 ecx
  00362	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv218[ebp], 1116
  00369	8b 45 94	 mov	 eax, DWORD PTR tv226[ebp]
  0036c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00373	ff d1		 call	 ecx
  00375	89 45 e8	 mov	 DWORD PTR _damage_level$[ebp], eax

; 468  : 
; 469  : 	fprintf (fp, "Current Damage :- %4d\n\n", damage_level);

  00378	8b 45 e8	 mov	 eax, DWORD PTR _damage_level$[ebp]
  0037b	50		 push	 eax
  0037c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CMBMMNOO@Current?5Damage?5?3?9?5?$CF4d?6?6@
  00381	8b 4d f4	 mov	 ecx, DWORD PTR _fp$[ebp]
  00384	51		 push	 ecx
  00385	e8 00 00 00 00	 call	 _fprintf
  0038a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 470  : 
; 471  : 	if (damage_level > 0)

  0038d	83 7d e8 00	 cmp	 DWORD PTR _damage_level$[ebp], 0
  00391	0f 8e ce 00 00
	00		 jle	 $LN16@assess_eff

; 472  : 	{
; 473  : 		//
; 474  : 		// cycle through each weapon
; 475  : 		//
; 476  : 
; 477  : 		for (weapon_type = ENTITY_SUB_TYPE_WEAPON_NO_WEAPON + 1; weapon_type < NUM_ENTITY_SUB_TYPE_WEAPONS; weapon_type ++ )

  00397	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _weapon_type$[ebp], 1
  0039e	eb 09		 jmp	 SHORT $LN7@assess_eff
$LN5@assess_eff:
  003a0	8b 45 e4	 mov	 eax, DWORD PTR _weapon_type$[ebp]
  003a3	83 c0 01	 add	 eax, 1
  003a6	89 45 e4	 mov	 DWORD PTR _weapon_type$[ebp], eax
$LN7@assess_eff:
  003a9	83 7d e4 4c	 cmp	 DWORD PTR _weapon_type$[ebp], 76 ; 0000004cH
  003ad	0f 8d b2 00 00
	00		 jge	 $LN16@assess_eff

; 478  : 		{
; 479  : 			int
; 480  : 				weapon_power,
; 481  : 				rounds_needed;
; 482  : 
; 483  : 			//
; 484  : 			// output weapon name
; 485  : 			//
; 486  : 
; 487  : 			count = fprintf (fp, "%s\n", entity_sub_type_weapon_names [weapon_type]);

  003b3	8b 45 e4	 mov	 eax, DWORD PTR _weapon_type$[ebp]
  003b6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?entity_sub_type_weapon_names@@3PAPBDA[eax*4]
  003bd	51		 push	 ecx
  003be	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6@
  003c3	8b 55 f4	 mov	 edx, DWORD PTR _fp$[ebp]
  003c6	52		 push	 edx
  003c7	e8 00 00 00 00	 call	 _fprintf
  003cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  003cf	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax

; 488  : 
; 489  : 			for (loop = 0; loop < count - 1; loop ++)

  003d2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  003d9	eb 09		 jmp	 SHORT $LN10@assess_eff
$LN8@assess_eff:
  003db	8b 45 f0	 mov	 eax, DWORD PTR _loop$[ebp]
  003de	83 c0 01	 add	 eax, 1
  003e1	89 45 f0	 mov	 DWORD PTR _loop$[ebp], eax
$LN10@assess_eff:
  003e4	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  003e7	83 e8 01	 sub	 eax, 1
  003ea	39 45 f0	 cmp	 DWORD PTR _loop$[ebp], eax
  003ed	7d 11		 jge	 SHORT $LN9@assess_eff

; 490  : 			{
; 491  : 				fputc ('-', fp);

  003ef	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  003f2	50		 push	 eax
  003f3	6a 2d		 push	 45			; 0000002dH
  003f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  003fb	83 c4 08	 add	 esp, 8

; 492  : 			}

  003fe	eb db		 jmp	 SHORT $LN8@assess_eff
$LN9@assess_eff:

; 493  : 
; 494  : 			weapon_power = weapon_damage_capability (weapon_type, en, TRUE);

  00400	6a 01		 push	 1
  00402	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00405	50		 push	 eax
  00406	8b 4d e4	 mov	 ecx, DWORD PTR _weapon_type$[ebp]
  00409	51		 push	 ecx
  0040a	e8 00 00 00 00	 call	 ?weapon_damage_capability@@YGHHPAUENTITY@@H@Z ; weapon_damage_capability
  0040f	89 45 e0	 mov	 DWORD PTR _weapon_power$2[ebp], eax

; 495  : 
; 496  : 			rounds_needed = -1;

  00412	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _rounds_needed$1[ebp], -1

; 497  : 
; 498  : 			if (weapon_power > 0)

  00419	83 7d e0 00	 cmp	 DWORD PTR _weapon_power$2[ebp], 0
  0041d	7e 13		 jle	 SHORT $LN17@assess_eff

; 499  : 			{
; 500  : 				rounds_needed = damage_level / weapon_power;

  0041f	8b 45 e8	 mov	 eax, DWORD PTR _damage_level$[ebp]
  00422	99		 cdq
  00423	f7 7d e0	 idiv	 DWORD PTR _weapon_power$2[ebp]
  00426	89 45 dc	 mov	 DWORD PTR _rounds_needed$1[ebp], eax

; 501  : 
; 502  : 				rounds_needed += 1;

  00429	8b 45 dc	 mov	 eax, DWORD PTR _rounds_needed$1[ebp]
  0042c	83 c0 01	 add	 eax, 1
  0042f	89 45 dc	 mov	 DWORD PTR _rounds_needed$1[ebp], eax
$LN17@assess_eff:

; 503  : 			}
; 504  : 
; 505  : 			//
; 506  : 			//	output number of rounds needed to destroy / maximum damage possible using weapon
; 507  : 			//
; 508  : 
; 509  : 			if (rounds_needed == -1)

  00432	83 7d dc ff	 cmp	 DWORD PTR _rounds_needed$1[ebp], -1
  00436	75 13		 jne	 SHORT $LN18@assess_eff

; 510  : 			{
; 511  : 				fprintf (fp, "\n    Rounds Needed To Destroy Target : ----\n\n");

  00438	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@NBFEALOP@?6?5?5?5?5Rounds?5Needed?5To?5Destroy?5T@
  0043d	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00440	50		 push	 eax
  00441	e8 00 00 00 00	 call	 _fprintf
  00446	83 c4 08	 add	 esp, 8

; 512  : 			}
; 513  : 			else

  00449	eb 15		 jmp	 SHORT $LN19@assess_eff
$LN18@assess_eff:

; 514  : 			{
; 515  : 				fprintf (fp, "\n    ROUNDS NEEDED TO DESTROY TARGET : %4d.\n\n", rounds_needed);

  0044b	8b 45 dc	 mov	 eax, DWORD PTR _rounds_needed$1[ebp]
  0044e	50		 push	 eax
  0044f	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@EALDCPNM@?6?5?5?5?5ROUNDS?5NEEDED?5TO?5DESTROY?5T@
  00454	8b 4d f4	 mov	 ecx, DWORD PTR _fp$[ebp]
  00457	51		 push	 ecx
  00458	e8 00 00 00 00	 call	 _fprintf
  0045d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@assess_eff:

; 516  : 			}
; 517  : 		}

  00460	e9 3b ff ff ff	 jmp	 $LN5@assess_eff
$LN16@assess_eff:

; 518  : 	}
; 519  : 
; 520  : 	fclose (fp);

  00465	8b 45 f4	 mov	 eax, DWORD PTR _fp$[ebp]
  00468	50		 push	 eax
  00469	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0046f	83 c4 04	 add	 esp, 4

; 521  : }

  00472	5f		 pop	 edi
  00473	5e		 pop	 esi
  00474	5b		 pop	 ebx
  00475	8b e5		 mov	 esp, ebp
  00477	5d		 pop	 ebp
  00478	c2 04 00	 ret	 4
?assess_effectiveness_of_all_weapons_on_entity@@YGXPAUENTITY@@@Z ENDP ; assess_effectiveness_of_all_weapons_on_entity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\damage.c
;	COMDAT ?damage_client_server_entity@@YGHPAUENTITY@@0M@Z
_TEXT	SEGMENT
tv257 = -108						; size = 4
tv333 = -104						; size = 4
tv305 = -104						; size = 4
tv249 = -104						; size = 4
tv231 = -104						; size = 4
tv209 = -104						; size = 4
tv153 = -104						; size = 4
tv129 = -104						; size = 4
tv325 = -100						; size = 4
tv297 = -100						; size = 4
tv240 = -100						; size = 4
tv223 = -100						; size = 4
tv202 = -100						; size = 4
tv160 = -100						; size = 4
tv146 = -100						; size = 4
tv89 = -100						; size = 4
$T1 = -96						; size = 4
_ext_sound$2 = -28					; size = 4
_int_sound$3 = -24					; size = 4
_armour_thickness$ = -20				; size = 4
_temp_damage$ = -16					; size = 4
_warhead_type$ = -12					; size = 4
_damage_level$ = -8					; size = 4
_damage_capability$ = -4				; size = 4
_en$ = 8						; size = 4
_weapon$ = 12						; size = 4
_damage_modifier$ = 16					; size = 4
?damage_client_server_entity@@YGHPAUENTITY@@0M@Z PROC	; damage_client_server_entity, COMDAT

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 196  : 	int
; 197  : 		damage_capability,
; 198  : 		damage_level;
; 199  : 
; 200  : 	weapon_warhead_types
; 201  : 		warhead_type;
; 202  : 
; 203  : 	float
; 204  : 		temp_damage,
; 205  : 		armour_thickness;
; 206  : 
; 207  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@damage_cli
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@damage_cli:

; 208  : 
; 209  : 	if (!weapon)

  00027	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  0002b	75 07		 jne	 SHORT $LN5@damage_cli

; 210  : 	{
; 211  : 		return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 7f 06 00 00	 jmp	 $LN1@damage_cli
$LN5@damage_cli:

; 212  : 	}
; 213  : 
; 214  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0003b	74 18		 je	 SHORT $LN6@damage_cli
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  00042	83 c0 13	 add	 eax, 19			; 00000013H
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00050	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@damage_cli:

; 215  : 
; 216  : 	ASSERT ((damage_modifier >= 0.0) && (damage_modifier <= 1.0));

  00055	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _damage_modifier$[ebp]
  0005a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00062	72 13		 jb	 SHORT $LN8@damage_cli
  00064	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _damage_modifier$[ebp]
  00069	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00071	66 0f 2f c8	 comisd	 xmm1, xmm0
  00075	73 18		 jae	 SHORT $LN7@damage_cli
$LN8@damage_cli:
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  0007c	83 c0 15	 add	 eax, 21			; 00000015H
  0007f	50		 push	 eax
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LECALMNG@?$CIdamage_modifier?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIda@
  0008a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@damage_cli:

; 217  : 
; 218  : 	warhead_type = (weapon_warhead_types) get_local_entity_int_value (weapon, INT_TYPE_WEAPON_WARHEAD_TYPE);

  0008f	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  00093	74 0a		 je	 SHORT $LN26@damage_cli
  00095	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  00098	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009a	89 4d 9c	 mov	 DWORD PTR tv89[ebp], ecx
  0009d	eb 21		 jmp	 SHORT $LN27@damage_cli
$LN26@damage_cli:
  0009f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  000a5	83 c2 17	 add	 edx, 23			; 00000017H
  000a8	52		 push	 edx
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b9	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN27@damage_cli:
  000c0	b9 01 00 00 00	 mov	 ecx, 1
  000c5	85 c9		 test	 ecx, ecx
  000c7	74 09		 je	 SHORT $LN28@damage_cli
  000c9	c7 45 98 10 01
	00 00		 mov	 DWORD PTR tv129[ebp], 272 ; 00000110H
  000d0	eb 21		 jmp	 SHORT $LN29@damage_cli
$LN28@damage_cli:
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  000d8	83 c2 17	 add	 edx, 23			; 00000017H
  000db	52		 push	 edx
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ec	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN29@damage_cli:
  000f3	68 10 01 00 00	 push	 272			; 00000110H
  000f8	8b 4d 0c	 mov	 ecx, DWORD PTR _weapon$[ebp]
  000fb	51		 push	 ecx
  000fc	69 55 9c 5c 04
	00 00		 imul	 edx, DWORD PTR tv89[ebp], 1116
  00103	8b 45 98	 mov	 eax, DWORD PTR tv129[ebp]
  00106	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0010d	ff d1		 call	 ecx
  0010f	89 45 f4	 mov	 DWORD PTR _warhead_type$[ebp], eax

; 219  : 
; 220  : 	ASSERT ((warhead_type >= WEAPON_WARHEAD_TYPE_NONE) && (warhead_type < NUM_WEAPON_WARHEAD_TYPES));

  00112	83 7d f4 00	 cmp	 DWORD PTR _warhead_type$[ebp], 0
  00116	7c 06		 jl	 SHORT $LN10@damage_cli
  00118	83 7d f4 06	 cmp	 DWORD PTR _warhead_type$[ebp], 6
  0011c	7c 18		 jl	 SHORT $LN9@damage_cli
$LN10@damage_cli:
  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  00123	83 c0 19	 add	 eax, 25			; 00000019H
  00126	50		 push	 eax
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@DPGILPCE@?$CIwarhead_type?5?$DO?$DN?5WEAPON_WARHEAD@
  00131	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@damage_cli:

; 221  : 
; 222  : 	if (get_local_entity_int_value (en, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00136	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0013a	74 0a		 je	 SHORT $LN30@damage_cli
  0013c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0013f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00141	89 4d 9c	 mov	 DWORD PTR tv146[ebp], ecx
  00144	eb 1d		 jmp	 SHORT $LN31@damage_cli
$LN30@damage_cli:
  00146	68 de 00 00 00	 push	 222			; 000000deH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00150	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00156	52		 push	 edx
  00157	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN31@damage_cli:
  00163	b8 01 00 00 00	 mov	 eax, 1
  00168	85 c0		 test	 eax, eax
  0016a	74 09		 je	 SHORT $LN32@damage_cli
  0016c	c7 45 98 9c 00
	00 00		 mov	 DWORD PTR tv153[ebp], 156 ; 0000009cH
  00173	eb 1d		 jmp	 SHORT $LN33@damage_cli
$LN32@damage_cli:
  00175	68 de 00 00 00	 push	 222			; 000000deH
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00185	51		 push	 ecx
  00186	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0018b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN33@damage_cli:
  00192	68 9c 00 00 00	 push	 156			; 0000009cH
  00197	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0019a	52		 push	 edx
  0019b	69 45 9c 5c 04
	00 00		 imul	 eax, DWORD PTR tv146[ebp], 1116
  001a2	8b 4d 98	 mov	 ecx, DWORD PTR tv153[ebp]
  001a5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001ac	ff d2		 call	 edx
  001ae	85 c0		 test	 eax, eax
  001b0	0f 84 87 01 00
	00		 je	 $LN11@damage_cli

; 223  : 	{
; 224  : 		sound_sample_indices
; 225  : 			int_sound,
; 226  : 			ext_sound;
; 227  : 
; 228  : 		//
; 229  : 		// damage sound effects
; 230  : 		//
; 231  : 
; 232  : 		int_sound = SOUND_SAMPLE_INDEX_NONE;

  001b6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _int_sound$3[ebp], 0

; 233  : 		ext_sound = SOUND_SAMPLE_INDEX_NONE;

  001bd	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ext_sound$2[ebp], 0

; 234  : 
; 235  : 		switch (warhead_type)

  001c4	8b 45 f4	 mov	 eax, DWORD PTR _warhead_type$[ebp]
  001c7	89 45 9c	 mov	 DWORD PTR tv160[ebp], eax
  001ca	8b 4d 9c	 mov	 ecx, DWORD PTR tv160[ebp]
  001cd	83 e9 01	 sub	 ecx, 1
  001d0	89 4d 9c	 mov	 DWORD PTR tv160[ebp], ecx
  001d3	83 7d 9c 03	 cmp	 DWORD PTR tv160[ebp], 3
  001d7	77 6a		 ja	 SHORT $LN2@damage_cli
  001d9	8b 55 9c	 mov	 edx, DWORD PTR tv160[ebp]
  001dc	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN56@damage_cli[edx*4]
$LN13@damage_cli:

; 236  : 		{
; 237  : 			case WEAPON_WARHEAD_TYPE_BALL:
; 238  : 			case WEAPON_WARHEAD_TYPE_ARMOUR_PIERCING:
; 239  : 			{
; 240  : 				if (get_local_entity_index (weapon) & 1)

  001e3	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  001e6	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  001ec	c1 f8 04	 sar	 eax, 4
  001ef	83 e0 01	 and	 eax, 1
  001f2	74 10		 je	 SHORT $LN14@damage_cli

; 241  : 				{
; 242  : 					int_sound = SOUND_SAMPLE_INDEX_INTERIOR_LIGHT_DAMAGE2;

  001f4	c7 45 e8 1d 00
	00 00		 mov	 DWORD PTR _int_sound$3[ebp], 29 ; 0000001dH

; 243  : 					ext_sound = SOUND_SAMPLE_INDEX_EXTERIOR_LIGHT_DAMAGE2;

  001fb	c7 45 e4 12 00
	00 00		 mov	 DWORD PTR _ext_sound$2[ebp], 18 ; 00000012H

; 244  : 				}
; 245  : 				else

  00202	eb 0e		 jmp	 SHORT $LN15@damage_cli
$LN14@damage_cli:

; 246  : 				{
; 247  : 					int_sound = SOUND_SAMPLE_INDEX_INTERIOR_LIGHT_DAMAGE1;

  00204	c7 45 e8 1c 00
	00 00		 mov	 DWORD PTR _int_sound$3[ebp], 28 ; 0000001cH

; 248  : 					ext_sound = SOUND_SAMPLE_INDEX_EXTERIOR_LIGHT_DAMAGE1;

  0020b	c7 45 e4 11 00
	00 00		 mov	 DWORD PTR _ext_sound$2[ebp], 17 ; 00000011H
$LN15@damage_cli:

; 249  : 				}
; 250  : 
; 251  : 				break;

  00212	eb 2f		 jmp	 SHORT $LN2@damage_cli
$LN16@damage_cli:

; 252  : 			}
; 253  : 			case WEAPON_WARHEAD_TYPE_HIGH_EXPLOSIVE:
; 254  : 			case WEAPON_WARHEAD_TYPE_HIGH_EXPLOSIVE_ANTI_TANK:
; 255  : 			{
; 256  : 				if (get_local_entity_index (weapon) & 1)

  00214	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  00217	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  0021d	c1 f8 04	 sar	 eax, 4
  00220	83 e0 01	 and	 eax, 1
  00223	74 10		 je	 SHORT $LN17@damage_cli

; 257  : 				{
; 258  : 					int_sound = SOUND_SAMPLE_INDEX_INTERIOR_HEAVY_DAMAGE2;

  00225	c7 45 e8 1f 00
	00 00		 mov	 DWORD PTR _int_sound$3[ebp], 31 ; 0000001fH

; 259  : 					ext_sound = SOUND_SAMPLE_INDEX_EXTERIOR_HEAVY_DAMAGE2;

  0022c	c7 45 e4 14 00
	00 00		 mov	 DWORD PTR _ext_sound$2[ebp], 20 ; 00000014H

; 260  : 				}
; 261  : 				else

  00233	eb 0e		 jmp	 SHORT $LN18@damage_cli
$LN17@damage_cli:

; 262  : 				{
; 263  : 					int_sound = SOUND_SAMPLE_INDEX_INTERIOR_HEAVY_DAMAGE1;

  00235	c7 45 e8 1e 00
	00 00		 mov	 DWORD PTR _int_sound$3[ebp], 30 ; 0000001eH

; 264  : 					ext_sound = SOUND_SAMPLE_INDEX_EXTERIOR_HEAVY_DAMAGE1;

  0023c	c7 45 e4 13 00
	00 00		 mov	 DWORD PTR _ext_sound$2[ebp], 19 ; 00000013H
$LN18@damage_cli:
$LN2@damage_cli:

; 265  : 				}
; 266  : 
; 267  : 				break;
; 268  : 			}
; 269  : 		}
; 270  : 
; 271  : 		if (int_sound != SOUND_SAMPLE_INDEX_NONE)

  00243	83 7d e8 00	 cmp	 DWORD PTR _int_sound$3[ebp], 0
  00247	74 36		 je	 SHORT $LN19@damage_cli

; 272  : 		{
; 273  : 			create_client_server_sound_effect_entity

  00249	8d 45 e8	 lea	 eax, DWORD PTR _int_sound$3[ebp]
  0024c	50		 push	 eax
  0024d	6a 01		 push	 1
  0024f	6a 00		 push	 0
  00251	6a 01		 push	 1
  00253	51		 push	 ecx
  00254	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0025c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00261	51		 push	 ecx
  00262	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _damage_modifier$[ebp]
  00267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026c	6a 00		 push	 0
  0026e	6a 01		 push	 1
  00270	6a 00		 push	 0
  00272	6a 1a		 push	 26			; 0000001aH
  00274	6a 00		 push	 0
  00276	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00279	51		 push	 ecx
  0027a	e8 00 00 00 00	 call	 ?create_client_server_sound_effect_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMHHHPAH@Z ; create_client_server_sound_effect_entity
$LN19@damage_cli:

; 274  : 			(
; 275  : 				en,
; 276  : 				ENTITY_SIDE_NEUTRAL,
; 277  : 				ENTITY_SUB_TYPE_EFFECT_SOUND_MISC,
; 278  : 				SOUND_CHANNEL_SOUND_EFFECT,
; 279  : 				SOUND_LOCALITY_INTERIOR,
; 280  : 				NULL,												// position
; 281  : 				damage_modifier,								// amplification
; 282  : 				1.0,												// Werewolf pitch
; 283  : 				TRUE,												// valid sound effect
; 284  : 				FALSE,											// looping
; 285  : 				1,													// sample count
; 286  : 				&int_sound										// sample index list
; 287  : 			);
; 288  : 		}
; 289  : 
; 290  : 		if (ext_sound != SOUND_SAMPLE_INDEX_NONE)

  0027f	83 7d e4 00	 cmp	 DWORD PTR _ext_sound$2[ebp], 0
  00283	74 36		 je	 SHORT $LN20@damage_cli

; 291  : 		{
; 292  : 			create_client_server_sound_effect_entity

  00285	8d 45 e4	 lea	 eax, DWORD PTR _ext_sound$2[ebp]
  00288	50		 push	 eax
  00289	6a 01		 push	 1
  0028b	6a 00		 push	 0
  0028d	6a 01		 push	 1
  0028f	51		 push	 ecx
  00290	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	51		 push	 ecx
  0029e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _damage_modifier$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	6a 00		 push	 0
  002aa	6a 02		 push	 2
  002ac	6a 00		 push	 0
  002ae	6a 1a		 push	 26			; 0000001aH
  002b0	6a 00		 push	 0
  002b2	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002b5	51		 push	 ecx
  002b6	e8 00 00 00 00	 call	 ?create_client_server_sound_effect_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMHHHPAH@Z ; create_client_server_sound_effect_entity
$LN20@damage_cli:

; 293  : 			(
; 294  : 				en,
; 295  : 				ENTITY_SIDE_NEUTRAL,
; 296  : 				ENTITY_SUB_TYPE_EFFECT_SOUND_MISC,
; 297  : 				SOUND_CHANNEL_SOUND_EFFECT,
; 298  : 				SOUND_LOCALITY_EXTERIOR,
; 299  : 				NULL,												// position
; 300  : 				damage_modifier,								// amplification
; 301  : 				1.0,												// Werewolf pitch
; 302  : 				TRUE,												// valid sound effect
; 303  : 				FALSE,											// looping
; 304  : 				1,													// sample count
; 305  : 				&ext_sound										// sample index list
; 306  : 			);
; 307  : 		}
; 308  : 
; 309  : 		//
; 310  : 		// invulnerability option for players
; 311  : 		//
; 312  : 
; 313  : 		if (get_local_entity_int_value (en, INT_TYPE_INVULNERABLE_FROM_WEAPONS))

  002bb	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  002bf	74 0a		 je	 SHORT $LN34@damage_cli
  002c1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c6	89 4d 9c	 mov	 DWORD PTR tv202[ebp], ecx
  002c9	eb 1d		 jmp	 SHORT $LN35@damage_cli
$LN34@damage_cli:
  002cb	68 39 01 00 00	 push	 313			; 00000139H
  002d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002db	52		 push	 edx
  002dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv202[ebp], 0
$LN35@damage_cli:
  002e8	b8 01 00 00 00	 mov	 eax, 1
  002ed	85 c0		 test	 eax, eax
  002ef	74 09		 je	 SHORT $LN36@damage_cli
  002f1	c7 45 98 6c 00
	00 00		 mov	 DWORD PTR tv209[ebp], 108 ; 0000006cH
  002f8	eb 1d		 jmp	 SHORT $LN37@damage_cli
$LN36@damage_cli:
  002fa	68 39 01 00 00	 push	 313			; 00000139H
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0030a	51		 push	 ecx
  0030b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00310	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv209[ebp], 0
$LN37@damage_cli:
  00317	6a 6c		 push	 108			; 0000006cH
  00319	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0031c	52		 push	 edx
  0031d	69 45 9c 5c 04
	00 00		 imul	 eax, DWORD PTR tv202[ebp], 1116
  00324	8b 4d 98	 mov	 ecx, DWORD PTR tv209[ebp]
  00327	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0032e	ff d2		 call	 edx
  00330	85 c0		 test	 eax, eax
  00332	74 07		 je	 SHORT $LN21@damage_cli

; 314  : 		{
; 315  : 			return 0;

  00334	33 c0		 xor	 eax, eax
  00336	e9 78 03 00 00	 jmp	 $LN1@damage_cli
$LN21@damage_cli:

; 316  : 		}
; 317  : 	}
; 318  : 	else

  0033b	eb 10		 jmp	 SHORT $LN22@damage_cli
$LN11@damage_cli:

; 319  : 	{
; 320  : 		//
; 321  : 		// invulnerability option for AI
; 322  : 		//
; 323  : 
; 324  : 		if (damage_debug_invulnerable_flag)

  0033d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?damage_debug_invulnerable_flag@@3HA, 0
  00344	74 07		 je	 SHORT $LN22@damage_cli

; 325  : 		{
; 326  : 			return 0;

  00346	33 c0		 xor	 eax, eax
  00348	e9 66 03 00 00	 jmp	 $LN1@damage_cli
$LN22@damage_cli:

; 327  : 		}
; 328  : 	}
; 329  : 
; 330  : 	damage_level = get_local_entity_int_value (en, INT_TYPE_DAMAGE_LEVEL);

  0034d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00351	74 0a		 je	 SHORT $LN38@damage_cli
  00353	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00356	8b 08		 mov	 ecx, DWORD PTR [eax]
  00358	89 4d 9c	 mov	 DWORD PTR tv223[ebp], ecx
  0035b	eb 24		 jmp	 SHORT $LN39@damage_cli
$LN38@damage_cli:
  0035d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  00363	81 c2 87 00 00
	00		 add	 edx, 135		; 00000087H
  00369	52		 push	 edx
  0036a	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0037a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN39@damage_cli:
  00381	b9 01 00 00 00	 mov	 ecx, 1
  00386	85 c9		 test	 ecx, ecx
  00388	74 09		 je	 SHORT $LN40@damage_cli
  0038a	c7 45 98 25 00
	00 00		 mov	 DWORD PTR tv231[ebp], 37 ; 00000025H
  00391	eb 24		 jmp	 SHORT $LN41@damage_cli
$LN40@damage_cli:
  00393	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  00399	81 c2 87 00 00
	00		 add	 edx, 135		; 00000087H
  0039f	52		 push	 edx
  003a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  003aa	50		 push	 eax
  003ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003b0	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv231[ebp], 0
$LN41@damage_cli:
  003b7	6a 25		 push	 37			; 00000025H
  003b9	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003bc	51		 push	 ecx
  003bd	69 55 9c 5c 04
	00 00		 imul	 edx, DWORD PTR tv223[ebp], 1116
  003c4	8b 45 98	 mov	 eax, DWORD PTR tv231[ebp]
  003c7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  003ce	ff d1		 call	 ecx
  003d0	89 45 f8	 mov	 DWORD PTR _damage_level$[ebp], eax

; 331  : 
; 332  : 	damage_capability = weapon_damage_capability (get_local_entity_int_value (weapon, INT_TYPE_ENTITY_SUB_TYPE), en, (damage_modifier == 1.0));

  003d3	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _damage_modifier$[ebp]
  003d8	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  003e0	9f		 lahf
  003e1	f6 c4 44	 test	 ah, 68			; 00000044H
  003e4	7a 09		 jp	 SHORT $LN42@damage_cli
  003e6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv240[ebp], 1
  003ed	eb 07		 jmp	 SHORT $LN43@damage_cli
$LN42@damage_cli:
  003ef	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv240[ebp], 0
$LN43@damage_cli:
  003f6	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  003fa	74 0a		 je	 SHORT $LN44@damage_cli
  003fc	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  003ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00401	89 4d 98	 mov	 DWORD PTR tv249[ebp], ecx
  00404	eb 24		 jmp	 SHORT $LN45@damage_cli
$LN44@damage_cli:
  00406	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  0040c	81 c2 89 00 00
	00		 add	 edx, 137		; 00000089H
  00412	52		 push	 edx
  00413	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00423	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN45@damage_cli:
  0042a	b9 01 00 00 00	 mov	 ecx, 1
  0042f	85 c9		 test	 ecx, ecx
  00431	74 09		 je	 SHORT $LN46@damage_cli
  00433	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv257[ebp], 52 ; 00000034H
  0043a	eb 24		 jmp	 SHORT $LN47@damage_cli
$LN46@damage_cli:
  0043c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  00442	81 c2 89 00 00
	00		 add	 edx, 137		; 00000089H
  00448	52		 push	 edx
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00459	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv257[ebp], 0
$LN47@damage_cli:
  00460	8b 4d 9c	 mov	 ecx, DWORD PTR tv240[ebp]
  00463	51		 push	 ecx
  00464	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00467	52		 push	 edx
  00468	6a 34		 push	 52			; 00000034H
  0046a	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  0046d	50		 push	 eax
  0046e	69 4d 98 5c 04
	00 00		 imul	 ecx, DWORD PTR tv249[ebp], 1116
  00475	8b 55 94	 mov	 edx, DWORD PTR tv257[ebp]
  00478	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  0047f	ff d0		 call	 eax
  00481	50		 push	 eax
  00482	e8 00 00 00 00	 call	 ?weapon_damage_capability@@YGHHPAUENTITY@@H@Z ; weapon_damage_capability
  00487	89 45 fc	 mov	 DWORD PTR _damage_capability$[ebp], eax

; 333  : 
; 334  : 	if (damage_capability > 0)

  0048a	83 7d fc 00	 cmp	 DWORD PTR _damage_capability$[ebp], 0
  0048e	0f 8e 1c 02 00
	00		 jle	 $LN23@damage_cli

; 335  : 	{
; 336  : 		//
; 337  : 		// weapon is capable of doing damage
; 338  : 		//
; 339  : 
; 340  : 		temp_damage = (float)damage_capability;

  00494	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _damage_capability$[ebp]
  00499	f3 0f 11 45 f0	 movss	 DWORD PTR _temp_damage$[ebp], xmm0

; 341  : 
; 342  : 		temp_damage *= damage_modifier;

  0049e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _temp_damage$[ebp]
  004a3	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _damage_modifier$[ebp]
  004a8	f3 0f 11 45 f0	 movss	 DWORD PTR _temp_damage$[ebp], xmm0

; 343  : 
; 344  : 		if (damage_modifier == (float) 1.0)

  004ad	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _damage_modifier$[ebp]
  004b2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  004b9	9f		 lahf
  004ba	f6 c4 44	 test	 ah, 68			; 00000044H
  004bd	7a 40		 jp	 SHORT $LN24@damage_cli

; 345  : 		{
; 346  : 			//
; 347  : 			// direct hit - compensate for armour thickness
; 348  : 			//
; 349  : 
; 350  : 			armour_thickness = get_local_entity_armour_thickness (en, weapon);

  004bf	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  004c2	50		 push	 eax
  004c3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  004c6	51		 push	 ecx
  004c7	e8 00 00 00 00	 call	 ?get_local_entity_armour_thickness@@YGMPAUENTITY@@0@Z ; get_local_entity_armour_thickness
  004cc	d9 5d ec	 fstp	 DWORD PTR _armour_thickness$[ebp]

; 351  : 
; 352  : 			temp_damage -= temp_damage * armour_thickness * 2.0 / 3.0;

  004cf	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _temp_damage$[ebp]
  004d4	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _armour_thickness$[ebp]
  004d9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004dd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  004e5	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4008000000000000
  004ed	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _temp_damage$[ebp]
  004f2	f2 0f 5c c8	 subsd	 xmm1, xmm0
  004f6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004fa	f3 0f 11 45 f0	 movss	 DWORD PTR _temp_damage$[ebp], xmm0
$LN24@damage_cli:

; 353  : 		}
; 354  : 
; 355  : 		//
; 356  : 		// add +/- 10% random tolerance
; 357  : 		//
; 358  : 
; 359  : 		temp_damage += (temp_damage * 0.1 * sfrand1 ());

  004ff	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00509	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0050e	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00513	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00519	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0051c	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00522	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00528	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0052c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00534	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _temp_damage$[ebp]
  00539	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb999999999999a
  00541	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00545	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _temp_damage$[ebp]
  0054a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0054e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00552	f3 0f 11 45 f0	 movss	 DWORD PTR _temp_damage$[ebp], xmm0

; 360  : 
; 361  : 		// adjust for burst size
; 362  : 		temp_damage *= get_local_entity_int_value(weapon, INT_TYPE_WEAPON_BURST_SIZE);

  00557	83 7d 0c 00	 cmp	 DWORD PTR _weapon$[ebp], 0
  0055b	74 0a		 je	 SHORT $LN48@damage_cli
  0055d	8b 45 0c	 mov	 eax, DWORD PTR _weapon$[ebp]
  00560	8b 08		 mov	 ecx, DWORD PTR [eax]
  00562	89 4d 9c	 mov	 DWORD PTR tv297[ebp], ecx
  00565	eb 24		 jmp	 SHORT $LN49@damage_cli
$LN48@damage_cli:
  00567	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  0056d	81 c2 a7 00 00
	00		 add	 edx, 167		; 000000a7H
  00573	52		 push	 edx
  00574	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00579	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0057e	50		 push	 eax
  0057f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00584	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv297[ebp], 0
$LN49@damage_cli:
  0058b	b9 01 00 00 00	 mov	 ecx, 1
  00590	85 c9		 test	 ecx, ecx
  00592	74 09		 je	 SHORT $LN50@damage_cli
  00594	c7 45 98 03 01
	00 00		 mov	 DWORD PTR tv305[ebp], 259 ; 00000103H
  0059b	eb 24		 jmp	 SHORT $LN51@damage_cli
$LN50@damage_cli:
  0059d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  005a3	81 c2 a7 00 00
	00		 add	 edx, 167		; 000000a7H
  005a9	52		 push	 edx
  005aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  005af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005ba	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv305[ebp], 0
$LN51@damage_cli:
  005c1	68 03 01 00 00	 push	 259			; 00000103H
  005c6	8b 4d 0c	 mov	 ecx, DWORD PTR _weapon$[ebp]
  005c9	51		 push	 ecx
  005ca	69 55 9c 5c 04
	00 00		 imul	 edx, DWORD PTR tv297[ebp], 1116
  005d1	8b 45 98	 mov	 eax, DWORD PTR tv305[ebp]
  005d4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  005db	ff d1		 call	 ecx
  005dd	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005e1	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _temp_damage$[ebp]
  005e6	f3 0f 11 45 f0	 movss	 DWORD PTR _temp_damage$[ebp], xmm0

; 363  : 		
; 364  : 		//
; 365  : 		// subtract from entities damage level
; 366  : 		//
; 367  : 
; 368  : 		convert_float_to_int (temp_damage, &damage_capability);

  005eb	8d 45 fc	 lea	 eax, DWORD PTR _damage_capability$[ebp]
  005ee	50		 push	 eax
  005ef	51		 push	 ecx
  005f0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _temp_damage$[ebp]
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 369  : 
; 370  : 		damage_level -= damage_capability;

  005ff	8b 45 f8	 mov	 eax, DWORD PTR _damage_level$[ebp]
  00602	2b 45 fc	 sub	 eax, DWORD PTR _damage_capability$[ebp]
  00605	89 45 f8	 mov	 DWORD PTR _damage_level$[ebp], eax

; 371  : 
; 372  : 		damage_level = max (damage_level, 0);

  00608	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0060f	8d 45 a0	 lea	 eax, DWORD PTR $T1[ebp]
  00612	50		 push	 eax
  00613	8d 4d f8	 lea	 ecx, DWORD PTR _damage_level$[ebp]
  00616	51		 push	 ecx
  00617	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  0061c	8b 10		 mov	 edx, DWORD PTR [eax]
  0061e	89 55 f8	 mov	 DWORD PTR _damage_level$[ebp], edx

; 373  : 
; 374  : 		set_client_server_entity_int_value (en, INT_TYPE_DAMAGE_LEVEL, damage_level);

  00621	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00625	74 0a		 je	 SHORT $LN52@damage_cli
  00627	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0062a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0062c	89 4d 9c	 mov	 DWORD PTR tv325[ebp], ecx
  0062f	eb 24		 jmp	 SHORT $LN53@damage_cli
$LN52@damage_cli:
  00631	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  00637	81 c2 b3 00 00
	00		 add	 edx, 179		; 000000b3H
  0063d	52		 push	 edx
  0063e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00643	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00648	50		 push	 eax
  00649	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0064e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv325[ebp], 0
$LN53@damage_cli:
  00655	b9 01 00 00 00	 mov	 ecx, 1
  0065a	85 c9		 test	 ecx, ecx
  0065c	74 09		 je	 SHORT $LN54@damage_cli
  0065e	c7 45 98 25 00
	00 00		 mov	 DWORD PTR tv333[ebp], 37 ; 00000025H
  00665	eb 24		 jmp	 SHORT $LN55@damage_cli
$LN54@damage_cli:
  00667	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_client_server_entity@@YGHPAUENTITY@@0M@Z@4JA
  0066d	81 c2 b3 00 00
	00		 add	 edx, 179		; 000000b3H
  00673	52		 push	 edx
  00674	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@EDEBKCDE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00679	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0067e	50		 push	 eax
  0067f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00684	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv333[ebp], 0
$LN55@damage_cli:
  0068b	8b 4d f8	 mov	 ecx, DWORD PTR _damage_level$[ebp]
  0068e	51		 push	 ecx
  0068f	6a 25		 push	 37			; 00000025H
  00691	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00694	52		 push	 edx
  00695	69 45 9c b8 08
	00 00		 imul	 eax, DWORD PTR tv325[ebp], 2232
  0069c	8b 4d 98	 mov	 ecx, DWORD PTR tv333[ebp]
  0069f	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_int_value@@3PAY1BBH@1P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[eax+ecx*8]
  006a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  006ab	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  006ae	ff d1		 call	 ecx
$LN23@damage_cli:

; 375  : 
; 376  : 		#if DEBUG_MODULE
; 377  : 
; 378  : 		debug_log ("DAMAGE: %s hit : new damage = %d", get_local_entity_string (en, STRING_TYPE_FULL_NAME), damage_level);
; 379  : 
; 380  : 		#endif
; 381  : 	}
; 382  : 
; 383  : 	return damage_capability;

  006b0	8b 45 fc	 mov	 eax, DWORD PTR _damage_capability$[ebp]
$LN1@damage_cli:

; 384  : }

  006b3	5f		 pop	 edi
  006b4	5e		 pop	 esi
  006b5	5b		 pop	 ebx
  006b6	8b e5		 mov	 esp, ebp
  006b8	5d		 pop	 ebp
  006b9	c2 0c 00	 ret	 12			; 0000000cH
$LN56@damage_cli:
  006bc	00 00 00 00	 DD	 $LN13@damage_cli
  006c0	00 00 00 00	 DD	 $LN16@damage_cli
  006c4	00 00 00 00	 DD	 $LN13@damage_cli
  006c8	00 00 00 00	 DD	 $LN16@damage_cli
?damage_client_server_entity@@YGHPAUENTITY@@0M@Z ENDP	; damage_client_server_entity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
