; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_obj\input\input.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?input_object@@3PAUUI_OBJECT@@A			; input_object
_BSS	SEGMENT
?input_object@@3PAUUI_OBJECT@@A DD 01H DUP (?)		; input_object
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?input_entry@@YGXH@Z				; input_entry
PUBLIC	?input_end@@YGXH@Z				; input_end
PUBLIC	?input_abort@@YGXH@Z				; input_abort
PUBLIC	?set_input_events@@YGXXZ			; set_input_events
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?set_alpha_events@@YGXXZ:PROC			; set_alpha_events
EXTRN	?dinput_to_ascii@@YGDH@Z:PROC			; dinput_to_ascii
EXTRN	?ui_get_string_length@@YGMPBD@Z:PROC		; ui_get_string_length
EXTRN	?set_ui_font_type@@YGXW4FONT_TYPES@@@Z:PROC	; set_ui_font_type
EXTRN	?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ:PROC	; get_ui_font_type
EXTRN	__ftol2_sse:PROC
EXTRN	?current_font@@3PAUUI_FONT_TYPE@@A:DWORD	; current_font
EXTRN	?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_size
EXTRN	?fn_set_ui_object_x_origin@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_x_origin
EXTRN	?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_state
EXTRN	?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_parent
EXTRN	?fn_get_ui_object_function@@3PAP6GP6GXPAUUI_OBJECT@@PAX@Z0@ZA:BYTE ; fn_get_ui_object_function
EXTRN	?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA:BYTE ; fn_set_ui_object_text
EXTRN	?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_text
EXTRN	?fn_set_ui_object_add_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA:BYTE ; fn_set_ui_object_add_text
EXTRN	?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_font_type
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\input\input.c
;	COMDAT ?set_input_events@@YGXXZ
_TEXT	SEGMENT
?set_input_events@@YGXXZ PROC				; set_input_events, COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 273  : 
; 274  : 	set_alpha_events ();

  00009	e8 00 00 00 00	 call	 ?set_alpha_events@@YGXXZ ; set_alpha_events

; 275  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?set_input_events@@YGXXZ ENDP				; set_input_events
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\input\input.c
;	COMDAT ?input_abort@@YGXH@Z
_TEXT	SEGMENT
_function$ = -4						; size = 4
_key_code$ = 8						; size = 4
?input_abort@@YGXH@Z PROC				; input_abort, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 250  : 
; 251  : 	void
; 252  : 		((*function) (ui_object *obj, void *arg));
; 253  : 
; 254  : 	set_ui_object_text (input_object, NULL);

  00009	6a 00		 push	 0
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00010	50		 push	 eax
  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  00020	ff d0		 call	 eax

; 255  : 
; 256  : 	set_ui_object_state (input_object, UI_OBJECT_STATE_OFF);

  00022	6a 00		 push	 0
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00029	50		 push	 eax
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00039	ff d0		 call	 eax

; 257  : 
; 258  : 	function = get_ui_object_function (input_object);

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00040	50		 push	 eax
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_function@@3PAP6GP6GXPAUUI_OBJECT@@PAX@Z0@ZA[edx*4]
  00050	ff d0		 call	 eax
  00052	89 45 fc	 mov	 DWORD PTR _function$[ebp], eax

; 259  : 
; 260  : 	if (function)

  00055	83 7d fc 00	 cmp	 DWORD PTR _function$[ebp], 0
  00059	74 0b		 je	 SHORT $LN1@input_abor

; 261  : 	{
; 262  : 
; 263  : 		function (input_object, NULL);

  0005b	6a 00		 push	 0
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00062	50		 push	 eax
  00063	ff 55 fc	 call	 DWORD PTR _function$[ebp]
$LN1@input_abor:

; 264  : 	}
; 265  : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?input_abort@@YGXH@Z ENDP				; input_abort
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\input\input.c
;	COMDAT ?input_end@@YGXH@Z
_TEXT	SEGMENT
_function$ = -4						; size = 4
_key_code$ = 8						; size = 4
?input_end@@YGXH@Z PROC					; input_end, COMDAT

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 229  : 
; 230  : 	FUNCTION
; 231  : 		function;
; 232  : 
; 233  : 	function = get_ui_object_function (input_object);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0000e	50		 push	 eax
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_function@@3PAP6GP6GXPAUUI_OBJECT@@PAX@Z0@ZA[edx*4]
  0001e	ff d0		 call	 eax
  00020	89 45 fc	 mov	 DWORD PTR _function$[ebp], eax

; 234  : 
; 235  : 	if (function)

  00023	83 7d fc 00	 cmp	 DWORD PTR _function$[ebp], 0
  00027	74 0b		 je	 SHORT $LN2@input_end

; 236  : 	{
; 237  : 
; 238  : 		function (input_object, NULL);

  00029	6a 00		 push	 0
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00030	50		 push	 eax
  00031	ff 55 fc	 call	 DWORD PTR _function$[ebp]
$LN2@input_end:

; 239  : 	}
; 240  : 
; 241  : 	set_ui_object_state (input_object, UI_OBJECT_STATE_OFF);

  00034	6a 00		 push	 0
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0003b	50		 push	 eax
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  0004b	ff d0		 call	 eax

; 242  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?input_end@@YGXH@Z ENDP					; input_end
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\input\input.c
;	COMDAT ?input_entry@@YGXH@Z
_TEXT	SEGMENT
tv353 = -240						; size = 8
tv312 = -240						; size = 8
tv83 = -240						; size = 4
tv410 = -236						; size = 4
tv379 = -236						; size = 4
tv329 = -236						; size = 4
tv84 = -236						; size = 4
$T1 = -232						; size = 4
$T2 = -228						; size = 4
_font$3 = -160						; size = 4
_font$4 = -156						; size = 4
_parent$5 = -152					; size = 4
_len$ = -148						; size = 4
_input_size$ = -144					; size = 4
_overflow$ = -140					; size = 4
_c$ = -136						; size = 2
_text$ = -132						; size = 128
_input_text$ = -4					; size = 4
_key_code$ = 8						; size = 4
?input_entry@@YGXH@Z PROC				; input_entry, COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 94   : 
; 95   : 	const char
; 96   : 		*input_text;
; 97   : 	char
; 98   : 		text [128],
; 99   : 		c [2];
; 100  : 
; 101  : 	float
; 102  : 		overflow;
; 103  : 
; 104  : 	int
; 105  : 		input_size,
; 106  : 		len;
; 107  : 
; 108  : 	if (key_code == dinput_to_ascii (DIK_BACK))

  0000c	6a 0e		 push	 14			; 0000000eH
  0000e	e8 00 00 00 00	 call	 ?dinput_to_ascii@@YGDH@Z ; dinput_to_ascii
  00013	0f b6 c0	 movzx	 eax, al
  00016	39 45 08	 cmp	 DWORD PTR _key_code$[ebp], eax
  00019	0f 85 dd 01 00
	00		 jne	 $LN2@input_entr

; 109  : 	{
; 110  : 
; 111  : 		if (get_ui_object_text (input_object))

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00024	50		 push	 eax
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  00034	ff d0		 call	 eax
  00036	85 c0		 test	 eax, eax
  00038	0f 84 b9 01 00
	00		 je	 $LN5@input_entr

; 112  : 		{
; 113  : 
; 114  : 			input_text = get_ui_object_text (input_object);

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00043	50		 push	 eax
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  00053	ff d0		 call	 eax
  00055	89 45 fc	 mov	 DWORD PTR _input_text$[ebp], eax

; 115  : 
; 116  : 			len = strlen (input_text);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _input_text$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _strlen
  00061	83 c4 04	 add	 esp, 4
  00064	89 85 6c ff ff
	ff		 mov	 DWORD PTR _len$[ebp], eax

; 117  : 		
; 118  : 			len = bound (len, 1, 127);

  0006a	83 bd 6c ff ff
	ff 01		 cmp	 DWORD PTR _len$[ebp], 1
  00071	7d 0c		 jge	 SHORT $LN15@input_entr
  00073	c7 85 14 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv84[ebp], 1
  0007d	eb 2d		 jmp	 SHORT $LN16@input_entr
$LN15@input_entr:
  0007f	83 bd 6c ff ff
	ff 7f		 cmp	 DWORD PTR _len$[ebp], 127 ; 0000007fH
  00086	7e 0c		 jle	 SHORT $LN13@input_entr
  00088	c7 85 10 ff ff
	ff 7f 00 00 00	 mov	 DWORD PTR tv83[ebp], 127 ; 0000007fH
  00092	eb 0c		 jmp	 SHORT $LN14@input_entr
$LN13@input_entr:
  00094	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _len$[ebp]
  0009a	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv83[ebp], eax
$LN14@input_entr:
  000a0	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR tv83[ebp]
  000a6	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], ecx
$LN16@input_entr:
  000ac	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv84[ebp]
  000b2	89 95 6c ff ff
	ff		 mov	 DWORD PTR _len$[ebp], edx

; 119  : 	
; 120  : 			sprintf (text, "%s", input_text);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _input_text$[ebp]
  000bb	50		 push	 eax
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c1	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _text$[ebp]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _sprintf
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 121  : 	
; 122  : 			text [len - 1] = '\0';

  000d0	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _len$[ebp]
  000d6	c6 84 05 7b ff
	ff ff 00	 mov	 BYTE PTR _text$[ebp+eax-1], 0

; 123  : 	
; 124  : 			set_ui_object_text (input_object, text);

  000de	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  000e4	50		 push	 eax
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  000eb	51		 push	 ecx
  000ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  000f2	8b 02		 mov	 eax, DWORD PTR [edx]
  000f4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  000fb	ff d1		 call	 ecx

; 125  : 
; 126  : 			//
; 127  : 			// Reposition text origin if deleting
; 128  : 			//
; 129  : 
; 130  : 			if ((get_ui_object_x_size (input_object) != 0.0) && (!get_limit_input_length (input_object)))

  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00102	50		 push	 eax
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00109	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010b	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00112	ff d0		 call	 eax
  00114	dd 9d 10 ff ff
	ff		 fstp	 QWORD PTR tv312[ebp]
  0011a	f2 0f 10 85 10
	ff ff ff	 movsd	 xmm0, QWORD PTR tv312[ebp]
  00122	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0012a	9f		 lahf
  0012b	f6 c4 44	 test	 ah, 68			; 00000044H
  0012e	0f 8b c3 00 00
	00		 jnp	 $LN5@input_entr
  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00139	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0013c	83 b9 e4 00 00
	00 00		 cmp	 DWORD PTR [ecx+228], 0
  00143	0f 85 ae 00 00
	00		 jne	 $LN5@input_entr

; 131  : 			{
; 132  : 
; 133  : 				input_size = get_ui_object_x_size (input_object);

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0014e	50		 push	 eax
  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00155	8b 11		 mov	 edx, DWORD PTR [ecx]
  00157	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0015e	ff d0		 call	 eax
  00160	e8 00 00 00 00	 call	 __ftol2_sse
  00165	89 85 70 ff ff
	ff		 mov	 DWORD PTR _input_size$[ebp], eax

; 134  : 
; 135  : 				overflow = ui_get_string_length (input_text) - (input_size - ui_get_font_width ());

  0016b	8b 45 fc	 mov	 eax, DWORD PTR _input_text$[ebp]
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  00174	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR tv329[ebp]
  0017a	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR tv329[ebp]
  00182	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  00188	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _input_size$[ebp]
  0018e	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00191	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  00195	f3 0f 5c c1	 subss	 xmm0, xmm1
  00199	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _overflow$[ebp], xmm0

; 136  : 
; 137  : 				overflow = max (0.0f, overflow);

  001a1	0f 57 c0	 xorps	 xmm0, xmm0
  001a4	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  001ac	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _overflow$[ebp]
  001b2	50		 push	 eax
  001b3	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001b9	51		 push	 ecx
  001ba	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001bf	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001c3	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _overflow$[ebp], xmm0

; 138  : 
; 139  : 				set_ui_object_x_origin (input_object, -overflow);

  001cb	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _overflow$[ebp]
  001d3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001da	51		 push	 ecx
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  001e5	50		 push	 eax
  001e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  001ec	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ee	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_origin@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  001f5	ff d0		 call	 eax
$LN5@input_entr:

; 140  : 			}
; 141  : 		}
; 142  : 	}
; 143  : 	else

  001f7	e9 be 02 00 00	 jmp	 $LN7@input_entr
$LN2@input_entr:

; 144  : 	{
; 145  : 
; 146  : 		ui_object
; 147  : 			*parent;
; 148  : 
; 149  : 		parent = get_ui_object_parent ( input_object );

  001fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00201	50		 push	 eax
  00202	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00208	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00211	ff d0		 call	 eax
  00213	89 85 68 ff ff
	ff		 mov	 DWORD PTR _parent$5[ebp], eax

; 150  : 
; 151  : 		if (get_ui_object_x_size (input_object) != 0.0)

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0021e	50		 push	 eax
  0021f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00225	8b 11		 mov	 edx, DWORD PTR [ecx]
  00227	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0022e	ff d0		 call	 eax
  00230	dd 9d 10 ff ff
	ff		 fstp	 QWORD PTR tv353[ebp]
  00236	f2 0f 10 85 10
	ff ff ff	 movsd	 xmm0, QWORD PTR tv353[ebp]
  0023e	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00246	9f		 lahf
  00247	f6 c4 44	 test	 ah, 68			; 00000044H
  0024a	0f 8b 33 02 00
	00		 jnp	 $LN6@input_entr

; 152  : 		{
; 153  : 	
; 154  : 			if ((parent) && (get_limit_input_length (input_object)))

  00250	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _parent$5[ebp], 0
  00257	0f 84 f0 00 00
	00		 je	 $LN8@input_entr
  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00262	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00265	83 b9 e4 00 00
	00 00		 cmp	 DWORD PTR [ecx+228], 0
  0026c	0f 84 db 00 00
	00		 je	 $LN8@input_entr

; 155  : 			{
; 156  : 	
; 157  : 				font_types
; 158  : 					font;
; 159  : 	
; 160  : 				font = get_ui_font_type ();

  00272	e8 00 00 00 00	 call	 ?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ ; get_ui_font_type
  00277	89 85 64 ff ff
	ff		 mov	 DWORD PTR _font$4[ebp], eax

; 161  : 
; 162  : 				set_ui_font_type ( get_ui_object_font_type ( parent ) );

  0027d	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _parent$5[ebp]
  00283	50		 push	 eax
  00284	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _parent$5[ebp]
  0028a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0028c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  00293	ff d0		 call	 eax
  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 163  : 	
; 164  : 				input_text = get_ui_object_text (input_object);

  0029b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  002a0	50		 push	 eax
  002a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  002a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a9	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  002b0	ff d0		 call	 eax
  002b2	89 45 fc	 mov	 DWORD PTR _input_text$[ebp], eax

; 165  : 		
; 166  : 				input_size = get_ui_object_x_size (input_object);

  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  002ba	50		 push	 eax
  002bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  002c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c3	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  002ca	ff d0		 call	 eax
  002cc	e8 00 00 00 00	 call	 __ftol2_sse
  002d1	89 85 70 ff ff
	ff		 mov	 DWORD PTR _input_size$[ebp], eax

; 167  : 	
; 168  : 				//
; 169  : 				// limit text input to size of input object
; 170  : 				//
; 171  : 	
; 172  : 				if ((input_size == 0) || (ui_get_string_length (input_text) < (input_size - 10)))

  002d7	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _input_size$[ebp], 0
  002de	74 25		 je	 SHORT $LN11@input_entr
  002e0	8b 45 fc	 mov	 eax, DWORD PTR _input_text$[ebp]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  002e9	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR tv379[ebp]
  002ef	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _input_size$[ebp]
  002f5	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  002f8	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002fc	0f 2f 85 14 ff
	ff ff		 comiss	 xmm0, DWORD PTR tv379[ebp]
  00303	76 37		 jbe	 SHORT $LN10@input_entr
$LN11@input_entr:

; 173  : 				{
; 174  : 		
; 175  : 					sprintf (c, "%c", key_code);

  00305	8b 45 08	 mov	 eax, DWORD PTR _key_code$[ebp]
  00308	50		 push	 eax
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  0030e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _c$[ebp]
  00314	51		 push	 ecx
  00315	e8 00 00 00 00	 call	 _sprintf
  0031a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 		
; 177  : 					set_ui_object_add_text (input_object, c);

  0031d	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _c$[ebp]
  00323	50		 push	 eax
  00324	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0032a	51		 push	 ecx
  0032b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00331	8b 02		 mov	 eax, DWORD PTR [edx]
  00333	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_add_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  0033a	ff d1		 call	 ecx
$LN10@input_entr:

; 178  : 				}
; 179  : 
; 180  : 				set_ui_font_type ( font );

  0033c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _font$4[ebp]
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 181  : 			}
; 182  : 			else

  00348	e9 34 01 00 00	 jmp	 $LN9@input_entr
$LN8@input_entr:

; 183  : 			{
; 184  : 	
; 185  : 				font_types
; 186  : 					font;
; 187  : 	
; 188  : 				//
; 189  : 				// slide origin to keep text_cursor in box
; 190  : 				//
; 191  : 	
; 192  : 				font = get_ui_font_type ();

  0034d	e8 00 00 00 00	 call	 ?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ ; get_ui_font_type
  00352	89 85 60 ff ff
	ff		 mov	 DWORD PTR _font$3[ebp], eax

; 193  : 
; 194  : 				set_ui_font_type ( get_ui_object_font_type ( parent ) );

  00358	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _parent$5[ebp]
  0035e	50		 push	 eax
  0035f	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _parent$5[ebp]
  00365	8b 11		 mov	 edx, DWORD PTR [ecx]
  00367	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  0036e	ff d0		 call	 eax
  00370	50		 push	 eax
  00371	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 195  : 	
; 196  : 				input_text = get_ui_object_text (input_object);

  00376	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0037b	50		 push	 eax
  0037c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00382	8b 11		 mov	 edx, DWORD PTR [ecx]
  00384	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  0038b	ff d0		 call	 eax
  0038d	89 45 fc	 mov	 DWORD PTR _input_text$[ebp], eax

; 197  : 		
; 198  : 				input_size = get_ui_object_x_size (input_object);

  00390	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00395	50		 push	 eax
  00396	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0039c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0039e	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  003a5	ff d0		 call	 eax
  003a7	e8 00 00 00 00	 call	 __ftol2_sse
  003ac	89 85 70 ff ff
	ff		 mov	 DWORD PTR _input_size$[ebp], eax

; 199  : 	
; 200  : 				overflow = ui_get_string_length (input_text) - (input_size - ui_get_font_width ());

  003b2	8b 45 fc	 mov	 eax, DWORD PTR _input_text$[ebp]
  003b5	50		 push	 eax
  003b6	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  003bb	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR tv410[ebp]
  003c1	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR tv410[ebp]
  003c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  003cf	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _input_size$[ebp]
  003d5	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  003d8	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  003dc	f3 0f 5c c1	 subss	 xmm0, xmm1
  003e0	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _overflow$[ebp], xmm0

; 201  : 	
; 202  : 				overflow = max (0.0f, overflow);

  003e8	0f 57 c0	 xorps	 xmm0, xmm0
  003eb	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  003f3	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _overflow$[ebp]
  003f9	50		 push	 eax
  003fa	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00400	51		 push	 ecx
  00401	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00406	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0040a	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _overflow$[ebp], xmm0

; 203  : 	
; 204  : 				set_ui_object_x_origin (input_object, -overflow);

  00412	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _overflow$[ebp]
  0041a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00421	51		 push	 ecx
  00422	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0042c	50		 push	 eax
  0042d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00433	8b 11		 mov	 edx, DWORD PTR [ecx]
  00435	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_origin@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  0043c	ff d0		 call	 eax

; 205  : 		
; 206  : 				sprintf (c, "%c", key_code);

  0043e	8b 45 08	 mov	 eax, DWORD PTR _key_code$[ebp]
  00441	50		 push	 eax
  00442	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  00447	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _c$[ebp]
  0044d	51		 push	 ecx
  0044e	e8 00 00 00 00	 call	 _sprintf
  00453	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : 		
; 208  : 				set_ui_object_add_text (input_object, c);

  00456	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _c$[ebp]
  0045c	50		 push	 eax
  0045d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  00463	51		 push	 ecx
  00464	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  0046a	8b 02		 mov	 eax, DWORD PTR [edx]
  0046c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_add_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  00473	ff d1		 call	 ecx

; 209  : 
; 210  : 				set_ui_font_type ( font );

  00475	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _font$3[ebp]
  0047b	50		 push	 eax
  0047c	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type
$LN9@input_entr:

; 211  : 			}
; 212  : 		}
; 213  : 		else

  00481	eb 37		 jmp	 SHORT $LN7@input_entr
$LN6@input_entr:

; 214  : 		{
; 215  : 
; 216  : 			sprintf (c, "%c", key_code);

  00483	8b 45 08	 mov	 eax, DWORD PTR _key_code$[ebp]
  00486	50		 push	 eax
  00487	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  0048c	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _c$[ebp]
  00492	51		 push	 ecx
  00493	e8 00 00 00 00	 call	 _sprintf
  00498	83 c4 0c	 add	 esp, 12			; 0000000cH

; 217  : 
; 218  : 			set_ui_object_add_text (input_object, c);

  0049b	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _c$[ebp]
  004a1	50		 push	 eax
  004a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  004a8	51		 push	 ecx
  004a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?input_object@@3PAUUI_OBJECT@@A ; input_object
  004af	8b 02		 mov	 eax, DWORD PTR [edx]
  004b1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_add_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[eax*4]
  004b8	ff d1		 call	 ecx
$LN7@input_entr:

; 219  : 		}
; 220  : 	}
; 221  : }

  004ba	5f		 pop	 edi
  004bb	5e		 pop	 esi
  004bc	5b		 pop	 ebx
  004bd	8b e5		 mov	 esp, ebp
  004bf	5d		 pop	 ebp
  004c0	c2 04 00	 ret	 4
?input_entry@@YGXH@Z ENDP				; input_entry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
