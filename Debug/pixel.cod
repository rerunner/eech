; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\pixel.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?pixel_width@@3HA				; pixel_width
_BSS	SEGMENT
?pixel_width@@3HA DD 01H DUP (?)			; pixel_width
_BSS	ENDS
PUBLIC	?set_pixel@@YGXHHUREAL_COLOUR@@@Z		; set_pixel
PUBLIC	?set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z	; set_clipped_pixel
PUBLIC	?get_pixel@@YGXHHPAUREAL_COLOUR@@@Z		; get_pixel
PUBLIC	?get_packed_pixel@@YGGHH@Z			; get_packed_pixel
PUBLIC	?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z	; get_rgb_colour_value
PUBLIC	?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z ; get_general_colour_value
PUBLIC	?get_user_rgb_colour_value@@YG?AUREAL_COLOUR@@G@Z ; get_user_rgb_colour_value
PUBLIC	?set_pixel_format@@YGXXZ			; set_pixel_format
PUBLIC	?set_surface_shift_and_mask@@YGXHPAH0@Z		; set_surface_shift_and_mask
PUBLIC	?__LINE__Var@?0??set_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA ; `set_pixel'::`1'::__LINE__Var
PUBLIC	??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	?__LINE__Var@?0??set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA ; `set_clipped_pixel'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_pixel@@YGXHHPAUREAL_COLOUR@@@Z@4JA ; `get_pixel'::`1'::__LINE__Var
PUBLIC	??_C@_06FBNLAHKA@colour@			; `string'
PUBLIC	?__LINE__Var@?0??get_packed_pixel@@YGGHH@Z@4JA	; `get_packed_pixel'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@ ; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_locked@@YGHPAUSCREEN@@@Z:PROC	; get_screen_locked
EXTRN	?f3d_pixel_size@@YGIXZ:PROC			; f3d_pixel_size
EXTRN	?active_int_viewport@@3UINT_VIEWPORT@@A:BYTE	; active_int_viewport
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	?user_screen_red_mask@@3HA:DWORD		; user_screen_red_mask
EXTRN	?user_screen_red_shift@@3HA:DWORD		; user_screen_red_shift
EXTRN	?user_screen_green_mask@@3HA:DWORD		; user_screen_green_mask
EXTRN	?user_screen_green_shift@@3HA:DWORD		; user_screen_green_shift
EXTRN	?user_screen_blue_mask@@3HA:DWORD		; user_screen_blue_mask
EXTRN	?user_screen_blue_shift@@3HA:DWORD		; user_screen_blue_shift
EXTRN	?user_screen_alpha_mask@@3HA:DWORD		; user_screen_alpha_mask
EXTRN	?user_screen_alpha_shift@@3HA:DWORD		; user_screen_alpha_shift
;	COMDAT ??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@
CONST	SEGMENT
??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@ DB 'activ'
	DB	'e_screen->pixel_length <= 16', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_packed_pixel@@YGGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_packed_pixel@@YGGHH@Z@4JA DD 0a9H	; `get_packed_pixel'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06FBNLAHKA@colour@
CONST	SEGMENT
??_C@_06FBNLAHKA@colour@ DB 'colour', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_pixel@@YGXHHPAUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_pixel@@YGXHHPAUREAL_COLOUR@@@Z@4JA DD 088H ; `get_pixel'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA DD 075H ; `set_clipped_pixel'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\pixel.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA DD 052H ; `set_pixel'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?set_surface_shift_and_mask@@YGXHPAH0@Z
_TEXT	SEGMENT
_shiftcount$ = -4					; size = 4
_source_mask$ = 8					; size = 4
_mask$ = 12						; size = 4
_shift$ = 16						; size = 4
?set_surface_shift_and_mask@@YGXHPAH0@Z PROC		; set_surface_shift_and_mask, COMDAT

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 284  : 
; 285  : 	int
; 286  : 		shiftcount;
; 287  : 
; 288  : 	shiftcount = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _shiftcount$[ebp], 0

; 289  : 
; 290  : 	if ( source_mask )

  00010	83 7d 08 00	 cmp	 DWORD PTR _source_mask$[ebp], 0
  00014	74 26		 je	 SHORT $LN5@set_surfac

; 291  : 	{
; 292  : 
; 293  : 		for ( shiftcount = 0; !( source_mask & 0x80000000 ); shiftcount++ )

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _shiftcount$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@set_surfac
$LN2@set_surfac:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _shiftcount$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _shiftcount$[ebp], eax
$LN4@set_surfac:
  00028	8b 45 08	 mov	 eax, DWORD PTR _source_mask$[ebp]
  0002b	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00030	75 0a		 jne	 SHORT $LN5@set_surfac

; 294  : 		{
; 295  : 
; 296  : 			source_mask <<= 1;

  00032	8b 45 08	 mov	 eax, DWORD PTR _source_mask$[ebp]
  00035	d1 e0		 shl	 eax, 1
  00037	89 45 08	 mov	 DWORD PTR _source_mask$[ebp], eax

; 297  : 		}

  0003a	eb e3		 jmp	 SHORT $LN2@set_surfac
$LN5@set_surfac:

; 298  : 	}
; 299  : 
; 300  : 	*shift = shiftcount;

  0003c	8b 45 10	 mov	 eax, DWORD PTR _shift$[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _shiftcount$[ebp]
  00042	89 08		 mov	 DWORD PTR [eax], ecx

; 301  : 
; 302  : 	*mask = source_mask;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _source_mask$[ebp]
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 303  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
?set_surface_shift_and_mask@@YGXHPAH0@Z ENDP		; set_surface_shift_and_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?set_pixel_format@@YGXXZ
_TEXT	SEGMENT
?set_pixel_format@@YGXXZ PROC				; set_pixel_format, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  : 	pixel_width = f3d_pixel_size();

  00009	e8 00 00 00 00	 call	 ?f3d_pixel_size@@YGIXZ	; f3d_pixel_size
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?pixel_width@@3HA, eax ; pixel_width

; 276  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?set_pixel_format@@YGXXZ ENDP				; set_pixel_format
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?get_user_rgb_colour_value@@YG?AUREAL_COLOUR@@G@Z
_TEXT	SEGMENT
_colour_value$ = -20					; size = 4
_alpha$ = -16						; size = 4
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 2
?get_user_rgb_colour_value@@YG?AUREAL_COLOUR@@G@Z PROC	; get_user_rgb_colour_value, COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 239  : 
; 240  : 	unsigned int
; 241  : 		red,
; 242  : 		green,
; 243  : 		blue,
; 244  : 		alpha;
; 245  : 
; 246  : 	rgb_colour
; 247  : 		colour_value;
; 248  : 
; 249  : //	ASSERT ( pixel_width == 16 );
; 250  : 
; 251  : 	red = colour << user_screen_red_shift;

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _colour$[ebp]
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?user_screen_red_shift@@3HA ; user_screen_red_shift
  00013	d3 e0		 shl	 eax, cl
  00015	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 252  : 	green = colour << user_screen_green_shift;

  00018	0f b7 45 08	 movzx	 eax, WORD PTR _colour$[ebp]
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?user_screen_green_shift@@3HA ; user_screen_green_shift
  00022	d3 e0		 shl	 eax, cl
  00024	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 253  : 	blue = colour << user_screen_blue_shift;

  00027	0f b7 45 08	 movzx	 eax, WORD PTR _colour$[ebp]
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?user_screen_blue_shift@@3HA ; user_screen_blue_shift
  00031	d3 e0		 shl	 eax, cl
  00033	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 254  : 	alpha = colour << user_screen_alpha_shift;

  00036	0f b7 45 08	 movzx	 eax, WORD PTR _colour$[ebp]
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?user_screen_alpha_shift@@3HA ; user_screen_alpha_shift
  00040	d3 e0		 shl	 eax, cl
  00042	89 45 f0	 mov	 DWORD PTR _alpha$[ebp], eax

; 255  : 
; 256  : 	red &= user_screen_red_mask;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00048	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?user_screen_red_mask@@3HA ; user_screen_red_mask
  0004e	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 257  : 	green &= user_screen_green_mask;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00054	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?user_screen_green_mask@@3HA ; user_screen_green_mask
  0005a	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 258  : 	blue &= user_screen_blue_mask;

  0005d	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00060	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?user_screen_blue_mask@@3HA ; user_screen_blue_mask
  00066	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 259  : 	alpha &= user_screen_alpha_mask;

  00069	8b 45 f0	 mov	 eax, DWORD PTR _alpha$[ebp]
  0006c	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?user_screen_alpha_mask@@3HA ; user_screen_alpha_mask
  00072	89 45 f0	 mov	 DWORD PTR _alpha$[ebp], eax

; 260  : 
; 261  : 	colour_value.r = red >> 24;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00078	c1 e8 18	 shr	 eax, 24			; 00000018H
  0007b	88 45 ee	 mov	 BYTE PTR _colour_value$[ebp+2], al

; 262  : 	colour_value.g = green >> 24;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00081	c1 e8 18	 shr	 eax, 24			; 00000018H
  00084	88 45 ed	 mov	 BYTE PTR _colour_value$[ebp+1], al

; 263  : 	colour_value.b = blue >> 24;

  00087	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0008a	c1 e8 18	 shr	 eax, 24			; 00000018H
  0008d	88 45 ec	 mov	 BYTE PTR _colour_value$[ebp], al

; 264  : 	colour_value.a = alpha >> 24;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00093	c1 e8 18	 shr	 eax, 24			; 00000018H
  00096	88 45 ef	 mov	 BYTE PTR _colour_value$[ebp+3], al

; 265  : 
; 266  : 	return ( colour_value );

  00099	8b 45 ec	 mov	 eax, DWORD PTR _colour_value$[ebp]

; 267  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
?get_user_rgb_colour_value@@YG?AUREAL_COLOUR@@G@Z ENDP	; get_user_rgb_colour_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z
_TEXT	SEGMENT
_colour_value$ = -4					; size = 4
_colour$ = 8						; size = 2
?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z PROC	; get_general_colour_value, COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 222  : 	rgb_colour
; 223  : 		colour_value;
; 224  : 
; 225  : 	colour_value.r = (colour & 0xF800) >> 8;

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _colour$[ebp]
  0000d	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00012	c1 f8 08	 sar	 eax, 8
  00015	88 45 fe	 mov	 BYTE PTR _colour_value$[ebp+2], al

; 226  : 	colour_value.g = (colour & 0x07E0) >> 3;

  00018	0f b7 45 08	 movzx	 eax, WORD PTR _colour$[ebp]
  0001c	25 e0 07 00 00	 and	 eax, 2016		; 000007e0H
  00021	c1 f8 03	 sar	 eax, 3
  00024	88 45 fd	 mov	 BYTE PTR _colour_value$[ebp+1], al

; 227  : 	colour_value.b = (colour & 0x001F) << 3;

  00027	0f b7 45 08	 movzx	 eax, WORD PTR _colour$[ebp]
  0002b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0002e	c1 e0 03	 shl	 eax, 3
  00031	88 45 fc	 mov	 BYTE PTR _colour_value$[ebp], al

; 228  : 	colour_value.a = 0;

  00034	c6 45 ff 00	 mov	 BYTE PTR _colour_value$[ebp+3], 0

; 229  : 
; 230  : 	return colour_value;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _colour_value$[ebp]

; 231  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z ENDP	; get_general_colour_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z
_TEXT	SEGMENT
_colour_value$ = -20					; size = 4
_alpha$ = -16						; size = 4
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z PROC	; get_rgb_colour_value, COMDAT

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 188  : 	unsigned int
; 189  : 		red,
; 190  : 		green,
; 191  : 		blue,
; 192  : 		alpha;
; 193  : 
; 194  : 	rgb_colour
; 195  : 		colour_value;
; 196  : 
; 197  : 	red = colour << active_screen_red_shift;

  00009	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00012	d3 e0		 shl	 eax, cl
  00014	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 198  : 	green = colour << active_screen_green_shift;

  00017	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00020	d3 e0		 shl	 eax, cl
  00022	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 199  : 	blue = colour << active_screen_blue_shift;

  00025	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0002e	d3 e0		 shl	 eax, cl
  00030	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 200  : 	alpha = colour << active_screen_alpha_shift;

  00033	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  0003c	d3 e0		 shl	 eax, cl
  0003e	89 45 f0	 mov	 DWORD PTR _alpha$[ebp], eax

; 201  : 
; 202  : 	red &= active_screen_red_mask;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00044	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0004a	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 203  : 	green &= active_screen_green_mask;

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00050	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00056	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 204  : 	blue &= active_screen_blue_mask;

  00059	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0005c	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00062	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 205  : 	alpha &= active_screen_alpha_mask;

  00065	8b 45 f0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00068	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  0006e	89 45 f0	 mov	 DWORD PTR _alpha$[ebp], eax

; 206  : 
; 207  : 	colour_value.r = red >> 24;

  00071	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00074	c1 e8 18	 shr	 eax, 24			; 00000018H
  00077	88 45 ee	 mov	 BYTE PTR _colour_value$[ebp+2], al

; 208  : 	colour_value.g = green >> 24;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  0007d	c1 e8 18	 shr	 eax, 24			; 00000018H
  00080	88 45 ed	 mov	 BYTE PTR _colour_value$[ebp+1], al

; 209  : 	colour_value.b = blue >> 24;

  00083	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00086	c1 e8 18	 shr	 eax, 24			; 00000018H
  00089	88 45 ec	 mov	 BYTE PTR _colour_value$[ebp], al

; 210  : 	colour_value.a = alpha >> 24;

  0008c	8b 45 f0	 mov	 eax, DWORD PTR _alpha$[ebp]
  0008f	c1 e8 18	 shr	 eax, 24			; 00000018H
  00092	88 45 ef	 mov	 BYTE PTR _colour_value$[ebp+3], al

; 211  : 
; 212  : 	return ( colour_value );

  00095	8b 45 ec	 mov	 eax, DWORD PTR _colour_value$[ebp]

; 213  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z ENDP	; get_rgb_colour_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?get_packed_pixel@@YGGHH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?get_packed_pixel@@YGGHH@Z PROC				; get_packed_pixel, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 170  : 
; 171  : 	unsigned short int
; 172  : 		value;
; 173  : 
; 174  : 	ASSERT ( active_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00010	75 18		 jne	 SHORT $LN2@get_packed
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_packed_pixel@@YGGHH@Z@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_packed:

; 175  : 	ASSERT ( active_screen->pixel_length <= 16 );

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002f	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00033	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00036	7e 18		 jle	 SHORT $LN3@get_packed
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_packed_pixel@@YGGHH@Z@4JA
  0003d	83 c0 06	 add	 eax, 6
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OOGLEADN@active_screen?9?$DOpixel_length?5?$DM?$DN?5@
  0004b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_packed:

; 176  : 
; 177  : 	value = * ( ( short int *) ( get_screen_data ( active_screen ) + y * get_screen_pitch ( active_screen ) ) + x );

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0005b	8b f0		 mov	 esi, eax
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00069	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  0006d	03 f0		 add	 esi, eax
  0006f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00072	66 8b 04 56	 mov	 ax, WORD PTR [esi+edx*2]
  00076	66 89 45 fc	 mov	 WORD PTR _value$[ebp], ax

; 178  : 
; 179  : 	return ( ( rgb_packed ) value );

  0007a	66 8b 45 fc	 mov	 ax, WORD PTR _value$[ebp]

; 180  : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?get_packed_pixel@@YGGHH@Z ENDP				; get_packed_pixel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?get_pixel@@YGXHHPAUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_alpha$ = -20						; size = 4
_blue$ = -16						; size = 4
_green$ = -12						; size = 4
_red$ = -8						; size = 4
_value$ = -4						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_colour$ = 16						; size = 4
?get_pixel@@YGXHHPAUREAL_COLOUR@@@Z PROC		; get_pixel, COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 137  : 
; 138  : 	unsigned short int
; 139  : 		value;
; 140  : 
; 141  : 	unsigned int
; 142  : 		red,
; 143  : 		green,
; 144  : 		blue,
; 145  : 		alpha;
; 146  : 
; 147  : 	ASSERT ( active_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00010	75 18		 jne	 SHORT $LN2@get_pixel
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_pixel@@YGXHHPAUREAL_COLOUR@@@Z@4JA
  00017	83 c0 0b	 add	 eax, 11			; 0000000bH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_pixel:

; 148  : 	ASSERT ( colour );

  0002a	83 7d 10 00	 cmp	 DWORD PTR _colour$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@get_pixel
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_pixel@@YGXHHPAUREAL_COLOUR@@@Z@4JA
  00035	83 c0 0c	 add	 eax, 12			; 0000000cH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06FBNLAHKA@colour@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_pixel:

; 149  : 
; 150  : 	value = * ( ( short int *) ( get_screen_data ( active_screen ) + y * get_screen_pitch ( active_screen ) ) + x );

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00053	8b f0		 mov	 esi, eax
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00061	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  00065	03 f0		 add	 esi, eax
  00067	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0006a	66 8b 04 56	 mov	 ax, WORD PTR [esi+edx*2]
  0006e	66 89 45 fc	 mov	 WORD PTR _value$[ebp], ax

; 151  : 
; 152  : 	red = value << active_screen_red_shift;

  00072	0f b7 45 fc	 movzx	 eax, WORD PTR _value$[ebp]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  0007c	d3 e0		 shl	 eax, cl
  0007e	89 45 f8	 mov	 DWORD PTR _red$[ebp], eax

; 153  : 	green = value << active_screen_green_shift;

  00081	0f b7 45 fc	 movzx	 eax, WORD PTR _value$[ebp]
  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0008b	d3 e0		 shl	 eax, cl
  0008d	89 45 f4	 mov	 DWORD PTR _green$[ebp], eax

; 154  : 	blue = value << active_screen_blue_shift;

  00090	0f b7 45 fc	 movzx	 eax, WORD PTR _value$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0009a	d3 e0		 shl	 eax, cl
  0009c	89 45 f0	 mov	 DWORD PTR _blue$[ebp], eax

; 155  : 	alpha = value << active_screen_alpha_shift;

  0009f	0f b7 45 fc	 movzx	 eax, WORD PTR _value$[ebp]
  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  000a9	d3 e0		 shl	 eax, cl
  000ab	89 45 ec	 mov	 DWORD PTR _alpha$[ebp], eax

; 156  : 
; 157  : 	red &= active_screen_red_mask;

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _red$[ebp]
  000b1	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  000b7	89 45 f8	 mov	 DWORD PTR _red$[ebp], eax

; 158  : 	green &= active_screen_green_mask;

  000ba	8b 45 f4	 mov	 eax, DWORD PTR _green$[ebp]
  000bd	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  000c3	89 45 f4	 mov	 DWORD PTR _green$[ebp], eax

; 159  : 	blue &= active_screen_blue_mask;

  000c6	8b 45 f0	 mov	 eax, DWORD PTR _blue$[ebp]
  000c9	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  000cf	89 45 f0	 mov	 DWORD PTR _blue$[ebp], eax

; 160  : 	alpha &= active_screen_alpha_mask;

  000d2	8b 45 ec	 mov	 eax, DWORD PTR _alpha$[ebp]
  000d5	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  000db	89 45 ec	 mov	 DWORD PTR _alpha$[ebp], eax

; 161  : 
; 162  : 	colour->r = red >> 24;

  000de	8b 45 f8	 mov	 eax, DWORD PTR _red$[ebp]
  000e1	c1 e8 18	 shr	 eax, 24			; 00000018H
  000e4	8b 4d 10	 mov	 ecx, DWORD PTR _colour$[ebp]
  000e7	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 163  : 	colour->g = green >> 24;

  000ea	8b 45 f4	 mov	 eax, DWORD PTR _green$[ebp]
  000ed	c1 e8 18	 shr	 eax, 24			; 00000018H
  000f0	8b 4d 10	 mov	 ecx, DWORD PTR _colour$[ebp]
  000f3	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 164  : 	colour->b = blue >> 24;

  000f6	8b 45 f0	 mov	 eax, DWORD PTR _blue$[ebp]
  000f9	c1 e8 18	 shr	 eax, 24			; 00000018H
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _colour$[ebp]
  000ff	88 01		 mov	 BYTE PTR [ecx], al

; 165  : 	colour->a = alpha >> 24;

  00101	8b 45 ec	 mov	 eax, DWORD PTR _alpha$[ebp]
  00104	c1 e8 18	 shr	 eax, 24			; 00000018H
  00107	8b 4d 10	 mov	 ecx, DWORD PTR _colour$[ebp]
  0010a	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 166  : }

  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 0c 00	 ret	 12			; 0000000cH
?get_pixel@@YGXHHPAUREAL_COLOUR@@@Z ENDP		; get_pixel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_colour$ = 16						; size = 4
?set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z PROC		; set_clipped_pixel, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 118  : 
; 119  : 	ASSERT ( active_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00010	75 18		 jne	 SHORT $LN2@set_clippe
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_clippe:

; 120  : 
; 121  : 	if ( ( x >= active_int_viewport.x_min ) &&
; 122  : 			( x <= active_int_viewport.x_max ) &&
; 123  : 			( y >= active_int_viewport.y_min ) &&

  0002a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00033	7c 32		 jl	 SHORT $LN1@set_clippe
  00035	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00038	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0003e	7f 27		 jg	 SHORT $LN1@set_clippe
  00040	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00043	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00049	7c 1c		 jl	 SHORT $LN1@set_clippe
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0004e	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00054	7f 11		 jg	 SHORT $LN1@set_clippe

; 124  : 			( y <= active_int_viewport.y_max ) )
; 125  : 	{
; 126  : 
; 127  : 		set_pixel ( x, y, colour );

  00056	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0005d	51		 push	 ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 ?set_pixel@@YGXHHUREAL_COLOUR@@@Z ; set_pixel
$LN1@set_clippe:

; 128  : 	}
; 129  : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
?set_clipped_pixel@@YGXHHUREAL_COLOUR@@@Z ENDP		; set_clipped_pixel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixel.c
;	COMDAT ?set_pixel@@YGXHHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_value$1 = -8						; size = 4
_value$2 = -4						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_colour$ = 16						; size = 4
?set_pixel@@YGXHHUREAL_COLOUR@@@Z PROC			; set_pixel, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 83   : 	ASSERT ( active_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00010	75 18		 jne	 SHORT $LN2@set_pixel
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_pixel@@YGXHHUREAL_COLOUR@@@Z@4JA
  00017	83 c0 01	 add	 eax, 1
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MFOPDKLC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_pixel:

; 84   : 
; 85   : 	if ( get_screen_locked ( active_screen ) )

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00035	85 c0		 test	 eax, eax
  00037	0f 84 ca 00 00
	00		 je	 $LN1@set_pixel

; 86   : 	{
; 87   : 		if ( active_screen->pixel_length <= 16 )

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00042	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00046	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00049	0f 8f 8a 00 00
	00		 jg	 $LN4@set_pixel

; 88   : 		{
; 89   : 			unsigned short int
; 90   : 				value;
; 91   : 
; 92   : 			value = get_packed_colour ( colour );

  0004f	0f b6 45 12	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00053	c1 e0 18	 shl	 eax, 24			; 00000018H
  00056	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00062	d3 e8		 shr	 eax, cl
  00064	0f b6 55 11	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  00068	c1 e2 18	 shl	 edx, 24			; 00000018H
  0006b	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00071	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00077	d3 ea		 shr	 edx, cl
  00079	0b c2		 or	 eax, edx
  0007b	0f b6 55 10	 movzx	 edx, BYTE PTR _colour$[ebp]
  0007f	c1 e2 18	 shl	 edx, 24			; 00000018H
  00082	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00088	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0008e	d3 ea		 shr	 edx, cl
  00090	0b c2		 or	 eax, edx
  00092	0f b6 55 13	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  00096	c1 e2 18	 shl	 edx, 24			; 00000018H
  00099	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  000a5	d3 ea		 shr	 edx, cl
  000a7	0b c2		 or	 eax, edx
  000a9	66 89 45 fc	 mov	 WORD PTR _value$2[ebp], ax

; 93   : 
; 94   : 			* ( (USHORT *) ( get_screen_data ( active_screen ) + y * get_screen_pitch ( active_screen ) ) + x ) = value;

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000b8	8b f0		 mov	 esi, eax
  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000c6	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  000ca	03 f0		 add	 esi, eax
  000cc	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000cf	66 8b 45 fc	 mov	 ax, WORD PTR _value$2[ebp]
  000d3	66 89 04 56	 mov	 WORD PTR [esi+edx*2], ax

; 95   : 		}
; 96   : 		else

  000d7	eb 2e		 jmp	 SHORT $LN1@set_pixel
$LN4@set_pixel:

; 97   : 		{
; 98   : 			unsigned int
; 99   : 				value;
; 100  : 
; 101  : 			//
; 102  : 			// Assume 4 bytes per pixel
; 103  : 			//
; 104  : 
; 105  : 			value = colour.colour;

  000d9	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  000dc	89 45 f8	 mov	 DWORD PTR _value$1[ebp], eax

; 106  : 
; 107  : 			* ( (ULONG *) ( get_screen_data ( active_screen ) + y * get_screen_pitch ( active_screen ) ) + x ) = value;

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000ea	8b f0		 mov	 esi, eax
  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000f2	51		 push	 ecx
  000f3	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000f8	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  000fc	03 f0		 add	 esi, eax
  000fe	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00101	8b 45 f8	 mov	 eax, DWORD PTR _value$1[ebp]
  00104	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax
$LN1@set_pixel:

; 108  : 		}
; 109  : 	}
; 110  : }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 0c 00	 ret	 12			; 0000000cH
?set_pixel@@YGXHHUREAL_COLOUR@@@Z ENDP			; set_pixel
_TEXT	ENDS
END
