; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\aircraft\ac_pack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ; pack_aircraft_data
PUBLIC	?unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ; unpack_aircraft_data
PUBLIC	?__LINE__Var@?0??pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA ; `pack_aircraft_data'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@KCNNHCCD@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA ; `unpack_aircraft_data'::`1'::__LINE__Var
PUBLIC	__real@3f800000
PUBLIC	__real@49742400
PUBLIC	__real@bf800000
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z:PROC ; construct_3d_object
EXTRN	?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z:PROC ; pack_list_root
EXTRN	?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z:PROC ; unpack_list_root
EXTRN	?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z:PROC ; pack_list_link
EXTRN	?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z:PROC ; unpack_list_link
EXTRN	?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z:PROC ; pack_float_value
EXTRN	?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z:PROC ; unpack_float_value
EXTRN	?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z:PROC ; pack_int_value
EXTRN	?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z:PROC ; unpack_int_value
EXTRN	?pack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z:PROC ; pack_mobile_data
EXTRN	?unpack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z:PROC ; unpack_mobile_data
EXTRN	?reset_entity_weapon_config_animation@@YGXPAUENTITY@@@Z:PROC ; reset_entity_weapon_config_animation
EXTRN	?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A:BYTE ; weapon_config_database
EXTRN	__fltused:DWORD
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA DD 013fH ; `unpack_aircraft_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
CONST	SEGMENT
??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ DB '('
	DB	'mode >= 0) && (mode < NUM_PACK_MODES)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@KCNNHCCD@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@KCNNHCCD@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\aircraft\ac_pa'
	DB	'ck.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA DD 04aH ; `pack_aircraft_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\ac_pack.c
;	COMDAT ?unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv316 = -72						; size = 4
tv306 = -72						; size = 4
tv296 = -72						; size = 4
tv286 = -72						; size = 4
tv174 = -72						; size = 4
tv70 = -72						; size = 4
_package$ = -4						; size = 4
_en$ = 8						; size = 4
_raw$ = 12						; size = 4
_mode$ = 16						; size = 4
?unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z PROC ; unpack_aircraft_data, COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 320  : 
; 321  : 	int
; 322  : 		package;
; 323  : 
; 324  : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN8@unpack_air
  0000f	83 7d 10 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN7@unpack_air
$LN8@unpack_air:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KCNNHCCD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@unpack_air:

; 325  : 
; 326  : 	switch (mode)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	0f 8c e3 04 00
	00		 jl	 $LN2@unpack_air
  0003d	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  00041	7e 05		 jle	 SHORT $LN9@unpack_air
  00043	e9 d8 04 00 00	 jmp	 $LN2@unpack_air
$LN9@unpack_air:

; 327  : 	{
; 328  : 		////////////////////////////////////////
; 329  : 		case PACK_MODE_SERVER_SESSION:
; 330  : 		case PACK_MODE_CLIENT_SESSION:
; 331  : 		////////////////////////////////////////
; 332  : 		{
; 333  : 			//
; 334  : 			// unpack mobile data
; 335  : 			//
; 336  : 
; 337  : 			unpack_mobile_data (en, &raw->mob, mode);

  00048	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?unpack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z ; unpack_mobile_data

; 338  : 
; 339  : 			//
; 340  : 			// unpack aircraft data
; 341  : 			//
; 342  : 
; 343  : 			raw->object_3d_shape = unpack_int_value (en, INT_TYPE_OBJECT_3D_SHAPE);

  00059	68 92 00 00 00	 push	 146			; 00000092H
  0005e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0006a	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 344  : 
; 345  : 			raw->inst3d = construct_3d_object (raw->object_3d_shape);

  00070	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00073	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z ; construct_3d_object
  0007f	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00082	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 346  : 
; 347  : 			/////////////////////////////////////////////////////////////////
; 348  : 			if (mode == PACK_MODE_CLIENT_SESSION)

  00088	83 7d 10 01	 cmp	 DWORD PTR _mode$[ebp], 1
  0008c	75 26		 jne	 SHORT $LN11@unpack_air

; 349  : 			{
; 350  : 				if (unpack_int_value (en, INT_TYPE_VALID))

  0008e	68 ef 00 00 00	 push	 239			; 000000efH
  00093	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0009c	85 c0		 test	 eax, eax
  0009e	74 14		 je	 SHORT $LN11@unpack_air

; 351  : 				{
; 352  : 					unpack_list_root (en, LIST_TYPE_AIRCREW, &raw->aircrew_root);

  000a0	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000a3	05 88 00 00 00	 add	 eax, 136		; 00000088H
  000a8	50		 push	 eax
  000a9	6a 01		 push	 1
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN11@unpack_air:

; 353  : 				}
; 354  : 			}
; 355  : 			/////////////////////////////////////////////////////////////////
; 356  : 
; 357  : 			/////////////////////////////////////////////////////////////////
; 358  : 			if (mode == PACK_MODE_SERVER_SESSION)

  000b4	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  000b8	75 26		 jne	 SHORT $LN13@unpack_air

; 359  : 			{
; 360  : 				if (unpack_int_value (en, INT_TYPE_VALID))

  000ba	68 ef 00 00 00	 push	 239			; 000000efH
  000bf	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000c8	85 c0		 test	 eax, eax
  000ca	74 14		 je	 SHORT $LN13@unpack_air

; 361  : 				{
; 362  : 					unpack_list_root (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_root);

  000cc	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000cf	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  000d4	50		 push	 eax
  000d5	6a 27		 push	 39			; 00000027H
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN13@unpack_air:

; 363  : 				}
; 364  : 			}
; 365  : 			/////////////////////////////////////////////////////////////////
; 366  : 
; 367  : 			/////////////////////////////////////////////////////////////////
; 368  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  000e0	68 ef 00 00 00	 push	 239			; 000000efH
  000e5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000ee	85 c0		 test	 eax, eax
  000f0	74 14		 je	 SHORT $LN14@unpack_air

; 369  : 			{
; 370  : 
; 371  : 				unpack_list_root (en, LIST_TYPE_LAUNCHED_WEAPON, &raw->launched_weapon_root);

  000f2	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000f5	05 90 00 00 00	 add	 eax, 144		; 00000090H
  000fa	50		 push	 eax
  000fb	6a 18		 push	 24			; 00000018H
  000fd	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN14@unpack_air:

; 372  : 			}
; 373  : 			/////////////////////////////////////////////////////////////////
; 374  : 
; 375  : 			/////////////////////////////////////////////////////////////////
; 376  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00106	68 ef 00 00 00	 push	 239			; 000000efH
  0010b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00114	85 c0		 test	 eax, eax
  00116	74 14		 je	 SHORT $LN15@unpack_air

; 377  : 			{
; 378  : 
; 379  : 				unpack_list_root (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_root);

  00118	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0011b	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00120	50		 push	 eax
  00121	6a 1a		 push	 26			; 0000001aH
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN15@unpack_air:

; 380  : 			}
; 381  : 			/////////////////////////////////////////////////////////////////
; 382  : 
; 383  : 			unpack_list_link (en, LIST_TYPE_FOLLOWER, &raw->follower_link);

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0012f	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  00134	50		 push	 eax
  00135	6a 0d		 push	 13			; 0000000dH
  00137	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link

; 384  : 
; 385  : 			// gunship_target_link
; 386  : 
; 387  : 			unpack_list_link (en, LIST_TYPE_MEMBER, &raw->member_link);

  00140	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00143	05 bc 00 00 00	 add	 eax, 188		; 000000bcH
  00148	50		 push	 eax
  00149	6a 19		 push	 25			; 00000019H
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0014e	51		 push	 ecx
  0014f	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link

; 388  : 
; 389  : 			// view_link
; 390  : 
; 391  : 			if (mode == PACK_MODE_SERVER_SESSION)

  00154	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00158	75 14		 jne	 SHORT $LN16@unpack_air

; 392  : 			{
; 393  : 
; 394  : 				unpack_list_link (en, LIST_TYPE_TAKEOFF_QUEUE, &raw->takeoff_queue_link);

  0015a	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0015d	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  00162	50		 push	 eax
  00163	6a 25		 push	 37			; 00000025H
  00165	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00168	51		 push	 ecx
  00169	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link
$LN16@unpack_air:

; 395  : 			}
; 396  : 
; 397  : 			/////////////////////////////////////////////////////////////////
; 398  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  0016e	68 ef 00 00 00	 push	 239			; 000000efH
  00173	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0017c	85 c0		 test	 eax, eax
  0017e	74 14		 je	 SHORT $LN17@unpack_air

; 399  : 			{
; 400  : 
; 401  : 				unpack_list_link (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_link);

  00180	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00183	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
  00188	50		 push	 eax
  00189	6a 1a		 push	 26			; 0000001aH
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0018e	51		 push	 ecx
  0018f	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link
$LN17@unpack_air:

; 402  : 			}
; 403  : 
; 404  : 			raw->operational_state = unpack_int_value (en, INT_TYPE_OPERATIONAL_STATE);

  00194	68 97 00 00 00	 push	 151			; 00000097H
  00199	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  001a2	89 45 b8	 mov	 DWORD PTR tv174[ebp], eax
  001a5	8b 4d b8	 mov	 ecx, DWORD PTR tv174[ebp]
  001a8	83 e1 1f	 and	 ecx, 31			; 0000001fH
  001ab	c1 e1 05	 shl	 ecx, 5
  001ae	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  001b1	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  001b7	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  001bc	0b c1		 or	 eax, ecx
  001be	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  001c1	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 405  : 
; 406  : 			if (mode == PACK_MODE_SERVER_SESSION)

  001c7	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  001cb	75 14		 jne	 SHORT $LN18@unpack_air

; 407  : 			{
; 408  : 				raw->distance = unpack_float_value (en, FLOAT_TYPE_DISTANCE);	// only needed by server?

  001cd	6a 1f		 push	 31			; 0000001fH
  001cf	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001d8	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  001db	d9 99 ec 00 00
	00		 fstp	 DWORD PTR [ecx+236]
$LN18@unpack_air:

; 409  : 			}
; 410  : 
; 411  : 			if (raw->operational_state == OPERATIONAL_STATE_LANDED)

  001e1	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001e4	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  001ea	c1 e9 05	 shr	 ecx, 5
  001ed	83 e1 1f	 and	 ecx, 31			; 0000001fH
  001f0	83 f9 04	 cmp	 ecx, 4
  001f3	75 14		 jne	 SHORT $LN19@unpack_air

; 412  : 			{
; 413  : 
; 414  : 				raw->loading_door_state = unpack_float_value (en, FLOAT_TYPE_LOADING_DOOR_STATE);

  001f5	6a 3f		 push	 63			; 0000003fH
  001f7	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00200	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00203	d9 99 f4 00 00
	00		 fstp	 DWORD PTR [ecx+244]
$LN19@unpack_air:

; 415  : 			}
; 416  : 
; 417  : 			raw->cargo_door_state = unpack_float_value (en, FLOAT_TYPE_CARGO_DOOR_STATE);

  00209	6a 11		 push	 17			; 00000011H
  0020b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00214	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00217	d9 99 f0 00 00
	00		 fstp	 DWORD PTR [ecx+240]

; 418  : 
; 419  : 			if (mode == PACK_MODE_SERVER_SESSION)

  0021d	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00221	75 2b		 jne	 SHORT $LN20@unpack_air

; 420  : 			{
; 421  : 				raw->death_timer = unpack_float_value (en, FLOAT_TYPE_DEATH_TIMER);

  00223	6a 1b		 push	 27			; 0000001bH
  00225	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0022e	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00231	d9 99 10 01 00
	00		 fstp	 DWORD PTR [ecx+272]

; 422  : 
; 423  : 				raw->target_scan_timer = unpack_float_value (en, FLOAT_TYPE_TARGET_SCAN_TIMER);

  00237	68 87 00 00 00	 push	 135			; 00000087H
  0023c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00245	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00248	d9 99 f8 00 00
	00		 fstp	 DWORD PTR [ecx+248]
$LN20@unpack_air:

; 424  : 			}
; 425  : 
; 426  : 			raw->undercarriage_state = unpack_float_value (en, FLOAT_TYPE_UNDERCARRIAGE_STATE);

  0024e	68 90 00 00 00	 push	 144			; 00000090H
  00253	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0025c	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0025f	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]

; 427  : 
; 428  : 			// view_interest_level
; 429  : 
; 430  : 			// weapon_burst_timer
; 431  : 
; 432  : 			raw->weapon_system_ready_state = unpack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_READY_STATE);

  00265	68 9a 00 00 00	 push	 154			; 0000009aH
  0026a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00273	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00276	d9 99 08 01 00
	00		 fstp	 DWORD PTR [ecx+264]

; 433  : 
; 434  : 			if (mode == PACK_MODE_SERVER_SESSION)

  0027c	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00280	75 14		 jne	 SHORT $LN21@unpack_air

; 435  : 			{
; 436  : 				raw->decoy_release_timer = unpack_float_value (en, FLOAT_TYPE_DECOY_RELEASE_TIMER);

  00282	6a 1c		 push	 28			; 0000001cH
  00284	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0028d	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00290	d9 99 0c 01 00
	00		 fstp	 DWORD PTR [ecx+268]
$LN21@unpack_air:

; 437  : 			}
; 438  : 
; 439  : 			raw->air_radar_contact_timeout = AIR_RADAR_CONTACT_TIMEOUT_INVALID;

  00296	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00299	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  002a1	f3 0f 11 80 14
	01 00 00	 movss	 DWORD PTR [eax+276], xmm0

; 440  : 
; 441  : 			////////////////////////////////////////
; 442  : 
; 443  : 			raw->weapon_config_type = (weapon_config_types) unpack_int_value (en, INT_TYPE_WEAPON_CONFIG_TYPE);

  002a9	68 05 01 00 00	 push	 261			; 00000105H
  002ae	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002b1	50		 push	 eax
  002b2	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  002b7	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  002ba	89 81 1c 01 00
	00		 mov	 DWORD PTR [ecx+284], eax

; 444  : 
; 445  : 			raw->weapon_package_status_array = (weapon_package_status *) malloc_fast_mem (SIZE_WEAPON_PACKAGE_STATUS_ARRAY);

  002c0	68 00 02 00 00	 push	 512			; 00000200H
  002c5	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  002ca	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  002cd	89 81 20 01 00
	00		 mov	 DWORD PTR [ecx+288], eax

; 446  : 
; 447  : 			memset (raw->weapon_package_status_array, 0, SIZE_WEAPON_PACKAGE_STATUS_ARRAY);

  002d3	68 00 02 00 00	 push	 512			; 00000200H
  002d8	6a 00		 push	 0
  002da	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002dd	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  002e3	51		 push	 ecx
  002e4	e8 00 00 00 00	 call	 _memset
  002e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 448  : 
; 449  : 			for (package = 0; package < NUM_WEAPON_PACKAGES; package++)

  002ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _package$[ebp], 0
  002f3	eb 09		 jmp	 SHORT $LN6@unpack_air
$LN4@unpack_air:
  002f5	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  002f8	83 c0 01	 add	 eax, 1
  002fb	89 45 fc	 mov	 DWORD PTR _package$[ebp], eax
$LN6@unpack_air:
  002fe	83 7d fc 20	 cmp	 DWORD PTR _package$[ebp], 32 ; 00000020H
  00302	0f 8d c5 00 00
	00		 jge	 $LN5@unpack_air

; 450  : 			{
; 451  : 				if (weapon_config_database[raw->weapon_config_type][package].sub_type == ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00308	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0030b	69 88 1c 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+284], 2432
  00315	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  00319	83 bc 11 00 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx], 0
  00321	75 05		 jne	 SHORT $LN22@unpack_air

; 452  : 				{
; 453  : 					break;

  00323	e9 a5 00 00 00	 jmp	 $LN5@unpack_air
$LN22@unpack_air:

; 454  : 				}
; 455  : 
; 456  : 				raw->weapon_package_status_array[package].number = unpack_int_value (en, INT_TYPE_WEAPON_PACKAGE_NUMBER);

  00328	68 0d 01 00 00	 push	 269			; 0000010dH
  0032d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00336	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  00339	c1 e1 04	 shl	 ecx, 4
  0033c	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  0033f	8b 92 20 01 00
	00		 mov	 edx, DWORD PTR [edx+288]
  00345	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 457  : 
; 458  : 				raw->weapon_package_status_array[package].damaged = unpack_int_value (en, INT_TYPE_WEAPON_PACKAGE_DAMAGED);

  00349	68 0b 01 00 00	 push	 267			; 0000010bH
  0034e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00351	50		 push	 eax
  00352	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00357	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  0035a	c1 e1 04	 shl	 ecx, 4
  0035d	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00360	8b 92 20 01 00
	00		 mov	 edx, DWORD PTR [edx+288]
  00366	66 89 44 0a 02	 mov	 WORD PTR [edx+ecx+2], ax

; 459  : 
; 460  : 				if (weapon_config_database[raw->weapon_config_type][package].rotate)

  0036b	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0036e	69 88 1c 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+284], 2432
  00378	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  0037c	83 bc 11 18 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx+24], 0
  00384	74 42		 je	 SHORT $LN23@unpack_air

; 461  : 				{
; 462  : 					raw->weapon_package_status_array[package].weapon_system_heading = unpack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_HEADING);

  00386	68 98 00 00 00	 push	 152			; 00000098H
  0038b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0038e	50		 push	 eax
  0038f	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00394	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  00397	c1 e1 04	 shl	 ecx, 4
  0039a	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  0039d	8b 82 20 01 00
	00		 mov	 eax, DWORD PTR [edx+288]
  003a3	d9 5c 08 04	 fstp	 DWORD PTR [eax+ecx+4]

; 463  : 
; 464  : 					raw->weapon_package_status_array[package].weapon_system_pitch = unpack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_PITCH);

  003a7	68 99 00 00 00	 push	 153			; 00000099H
  003ac	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003af	50		 push	 eax
  003b0	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  003b5	8b 4d fc	 mov	 ecx, DWORD PTR _package$[ebp]
  003b8	c1 e1 04	 shl	 ecx, 4
  003bb	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  003be	8b 82 20 01 00
	00		 mov	 eax, DWORD PTR [edx+288]
  003c4	d9 5c 08 08	 fstp	 DWORD PTR [eax+ecx+8]
$LN23@unpack_air:

; 465  : 				}
; 466  : 
; 467  : 				// muzzle_flash_timer
; 468  : 			}

  003c8	e9 28 ff ff ff	 jmp	 $LN4@unpack_air
$LN5@unpack_air:

; 469  : 
; 470  : 			reset_entity_weapon_config_animation (en);

  003cd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003d0	50		 push	 eax
  003d1	e8 00 00 00 00	 call	 ?reset_entity_weapon_config_animation@@YGXPAUENTITY@@@Z ; reset_entity_weapon_config_animation

; 471  : 
; 472  : 			raw->selected_weapon = unpack_int_value (en, INT_TYPE_SELECTED_WEAPON);

  003d6	68 b8 00 00 00	 push	 184			; 000000b8H
  003db	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003de	50		 push	 eax
  003df	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  003e4	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  003e7	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 473  : 
; 474  : 			////////////////////////////////////////
; 475  : 
; 476  : 			// sound_effect_data
; 477  : 
; 478  : 			raw->formation_position = unpack_int_value (en, INT_TYPE_FORMATION_POSITION);

  003ed	6a 3e		 push	 62			; 0000003eH
  003ef	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  003f8	89 45 b8	 mov	 DWORD PTR tv286[ebp], eax
  003fb	8b 4d b8	 mov	 ecx, DWORD PTR tv286[ebp]
  003fe	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00401	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00404	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  0040a	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0040d	0b c1		 or	 eax, ecx
  0040f	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00412	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 479  : 
; 480  : 			// valid_sound_effect
; 481  : 
; 482  : 			// selected_weapon_system_ready
; 483  : 
; 484  : 			// weapon_and_target_vectors_valid
; 485  : 
; 486  : 			// gunship_radar_los_clear
; 487  : 
; 488  : 			if (mode == PACK_MODE_CLIENT_SESSION)

  00418	83 7d 10 01	 cmp	 DWORD PTR _mode$[ebp], 1
  0041c	75 30		 jne	 SHORT $LN24@unpack_air

; 489  : 			{
; 490  : 				raw->lights_on = unpack_int_value (en, INT_TYPE_LIGHTS_ON);

  0041e	6a 7a		 push	 122			; 0000007aH
  00420	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00423	50		 push	 eax
  00424	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00429	89 45 b8	 mov	 DWORD PTR tv296[ebp], eax
  0042c	8b 4d b8	 mov	 ecx, DWORD PTR tv296[ebp]
  0042f	83 e1 01	 and	 ecx, 1
  00432	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00435	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00438	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  0043e	25 ff bf ff ff	 and	 eax, -16385		; ffffbfffH
  00443	0b c1		 or	 eax, ecx
  00445	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00448	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax
$LN24@unpack_air:

; 491  : 			}
; 492  : 
; 493  : 			// cpg_identified
; 494  : 
; 495  : 			raw->group_member_number = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  0044e	6a 4b		 push	 75			; 0000004bH
  00450	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00459	89 45 b8	 mov	 DWORD PTR tv306[ebp], eax
  0045c	8b 4d b8	 mov	 ecx, DWORD PTR tv306[ebp]
  0045f	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00462	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00465	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00468	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  0046e	25 ff ff e0 ff	 and	 eax, -2031617		; ffe0ffffH
  00473	0b c1		 or	 eax, ecx
  00475	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00478	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 496  : 
; 497  : 			// id_number_significant_digits
; 498  : 
; 499  : 			raw->ejected = unpack_int_value (en, INT_TYPE_EJECTED);

  0047e	6a 31		 push	 49			; 00000031H
  00480	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00483	50		 push	 eax
  00484	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00489	89 45 b8	 mov	 DWORD PTR tv316[ebp], eax
  0048c	8b 4d b8	 mov	 ecx, DWORD PTR tv316[ebp]
  0048f	83 e1 01	 and	 ecx, 1
  00492	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00495	8b 55 0c	 mov	 edx, DWORD PTR _raw$[ebp]
  00498	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  0049e	25 ff ff ff fe	 and	 eax, -16777217		; feffffffH
  004a3	0b c1		 or	 eax, ecx
  004a5	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  004a8	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 500  : 
; 501  : 			raw->damage_level = unpack_int_value (en, INT_TYPE_DAMAGE_LEVEL);

  004ae	6a 25		 push	 37			; 00000025H
  004b0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004b3	50		 push	 eax
  004b4	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  004b9	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  004bc	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 502  : 
; 503  : 			// id_number
; 504  : 
; 505  : 			raw->weapon_vector.x = 0.0;

  004c2	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  004c5	0f 57 c0	 xorps	 xmm0, xmm0
  004c8	f3 0f 11 80 3c
	01 00 00	 movss	 DWORD PTR [eax+316], xmm0

; 506  : 			raw->weapon_vector.y = 0.0;

  004d0	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  004d3	0f 57 c0	 xorps	 xmm0, xmm0
  004d6	f3 0f 11 80 40
	01 00 00	 movss	 DWORD PTR [eax+320], xmm0

; 507  : 			raw->weapon_vector.z = 1.0;

  004de	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  004e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004e9	f3 0f 11 80 44
	01 00 00	 movss	 DWORD PTR [eax+324], xmm0

; 508  : 
; 509  : 			raw->weapon_to_target_vector.x = 0.0;

  004f1	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  004f4	0f 57 c0	 xorps	 xmm0, xmm0
  004f7	f3 0f 11 80 48
	01 00 00	 movss	 DWORD PTR [eax+328], xmm0

; 510  : 			raw->weapon_to_target_vector.y = 0.0;

  004ff	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00502	0f 57 c0	 xorps	 xmm0, xmm0
  00505	f3 0f 11 80 4c
	01 00 00	 movss	 DWORD PTR [eax+332], xmm0

; 511  : 			raw->weapon_to_target_vector.z = -1.0;

  0050d	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00510	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00518	f3 0f 11 80 50
	01 00 00	 movss	 DWORD PTR [eax+336], xmm0
$LN2@unpack_air:

; 512  : 
; 513  : 			// terrain_info
; 514  : 
; 515  : 			break;
; 516  : 		}
; 517  : 		////////////////////////////////////////
; 518  : 		case PACK_MODE_BROWSE_SESSION:
; 519  : 		////////////////////////////////////////
; 520  : 		{
; 521  : 			break;
; 522  : 		}
; 523  : 		////////////////////////////////////////
; 524  : 		case PACK_MODE_UPDATE_ENTITY:
; 525  : 		////////////////////////////////////////
; 526  : 		{
; 527  : 			//
; 528  : 			// cannot update entity at this level as the update may not apply to all entity types below
; 529  : 			//
; 530  : 
; 531  : 			break;
; 532  : 		}
; 533  : 	}
; 534  : }

  00520	5f		 pop	 edi
  00521	5e		 pop	 esi
  00522	5b		 pop	 ebx
  00523	8b e5		 mov	 esp, ebp
  00525	5d		 pop	 ebp
  00526	c2 0c 00	 ret	 12			; 0000000cH
?unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ENDP ; unpack_aircraft_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\ac_pack.c
;	COMDAT ?pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_package$ = -4						; size = 4
_en$ = 8						; size = 4
_raw$ = 12						; size = 4
_mode$ = 16						; size = 4
?pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z PROC ; pack_aircraft_data, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 	int
; 76   : 		package;
; 77   : 
; 78   : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN8@pack_aircr
  0000f	83 7d 10 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN7@pack_aircr
$LN8@pack_aircr:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KCNNHCCD@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@pack_aircr:

; 79   : 
; 80   : 	switch (mode)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	0f 8c a0 04 00
	00		 jl	 $LN2@pack_aircr
  0003d	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  00041	7e 05		 jle	 SHORT $LN9@pack_aircr
  00043	e9 95 04 00 00	 jmp	 $LN2@pack_aircr
$LN9@pack_aircr:

; 81   : 	{
; 82   : 		////////////////////////////////////////
; 83   : 		case PACK_MODE_SERVER_SESSION:
; 84   : 		case PACK_MODE_CLIENT_SESSION:
; 85   : 		////////////////////////////////////////
; 86   : 		{
; 87   : 			//
; 88   : 			// pack mobile data
; 89   : 			//
; 90   : 
; 91   : 			pack_mobile_data (en, &raw->mob, mode);

  00048	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?pack_mobile_data@@YGXPAUENTITY@@PAUMOBILE@@W4PACK_MODES@@@Z ; pack_mobile_data

; 92   : 
; 93   : 			//
; 94   : 			// pack aircraft data
; 95   : 			//
; 96   : 
; 97   : 			pack_int_value (en, INT_TYPE_OBJECT_3D_SHAPE, raw->object_3d_shape);

  00059	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0005c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00062	51		 push	 ecx
  00063	68 92 00 00 00	 push	 146			; 00000092H
  00068	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 98   : 
; 99   : 			// inst3d
; 100  : 
; 101  : 			/////////////////////////////////////////////////////////////////
; 102  : 			if (mode == PACK_MODE_CLIENT_SESSION)

  00071	83 7d 10 01	 cmp	 DWORD PTR _mode$[ebp], 1
  00075	75 42		 jne	 SHORT $LN12@pack_aircr

; 103  : 			{
; 104  : 				if (raw->aircrew_root.first_child)

  00077	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0007a	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  00081	74 26		 je	 SHORT $LN11@pack_aircr

; 105  : 				{
; 106  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  00083	6a 01		 push	 1
  00085	68 ef 00 00 00	 push	 239			; 000000efH
  0008a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 107  : 	
; 108  : 					pack_list_root (en, LIST_TYPE_AIRCREW, &raw->aircrew_root);

  00093	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00096	05 88 00 00 00	 add	 eax, 136		; 00000088H
  0009b	50		 push	 eax
  0009c	6a 01		 push	 1
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 109  : 				}
; 110  : 				else

  000a7	eb 10		 jmp	 SHORT $LN12@pack_aircr
$LN11@pack_aircr:

; 111  : 				{
; 112  : 					pack_int_value (en, INT_TYPE_VALID, FALSE);

  000a9	6a 00		 push	 0
  000ab	68 ef 00 00 00	 push	 239			; 000000efH
  000b0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN12@pack_aircr:

; 113  : 				}
; 114  : 			}
; 115  : 			/////////////////////////////////////////////////////////////////
; 116  : 
; 117  : 			/////////////////////////////////////////////////////////////////
; 118  : 			if (mode == PACK_MODE_SERVER_SESSION)

  000b9	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  000bd	75 42		 jne	 SHORT $LN15@pack_aircr

; 119  : 			{
; 120  : 				if (raw->task_dependent_root.first_child)

  000bf	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000c2	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  000c9	74 26		 je	 SHORT $LN14@pack_aircr

; 121  : 				{
; 122  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  000cb	6a 01		 push	 1
  000cd	68 ef 00 00 00	 push	 239			; 000000efH
  000d2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 123  : 
; 124  : 					pack_list_root (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_root);

  000db	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  000de	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  000e3	50		 push	 eax
  000e4	6a 27		 push	 39			; 00000027H
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 125  : 				}
; 126  : 				else

  000ef	eb 10		 jmp	 SHORT $LN15@pack_aircr
$LN14@pack_aircr:

; 127  : 				{
; 128  : 					pack_int_value (en, INT_TYPE_VALID, FALSE);

  000f1	6a 00		 push	 0
  000f3	68 ef 00 00 00	 push	 239			; 000000efH
  000f8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN15@pack_aircr:

; 129  : 				}
; 130  : 			}
; 131  : 			/////////////////////////////////////////////////////////////////
; 132  : 
; 133  : 			/////////////////////////////////////////////////////////////////
; 134  : 			if (raw->launched_weapon_root.first_child)

  00101	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00104	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0010b	74 26		 je	 SHORT $LN16@pack_aircr

; 135  : 			{
; 136  : 
; 137  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  0010d	6a 01		 push	 1
  0010f	68 ef 00 00 00	 push	 239			; 000000efH
  00114	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 138  : 
; 139  : 				pack_list_root (en, LIST_TYPE_LAUNCHED_WEAPON, &raw->launched_weapon_root);

  0011d	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00120	05 90 00 00 00	 add	 eax, 144		; 00000090H
  00125	50		 push	 eax
  00126	6a 18		 push	 24			; 00000018H
  00128	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0012b	51		 push	 ecx
  0012c	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 140  : 			}
; 141  : 			else

  00131	eb 10		 jmp	 SHORT $LN17@pack_aircr
$LN16@pack_aircr:

; 142  : 			{
; 143  : 
; 144  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00133	6a 00		 push	 0
  00135	68 ef 00 00 00	 push	 239			; 000000efH
  0013a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN17@pack_aircr:

; 145  : 			}
; 146  : 			/////////////////////////////////////////////////////////////////
; 147  : 
; 148  : 			/////////////////////////////////////////////////////////////////
; 149  : 			if (raw->movement_dependent_root.first_child)

  00143	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00146	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  0014d	74 26		 je	 SHORT $LN18@pack_aircr

; 150  : 			{
; 151  : 
; 152  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  0014f	6a 01		 push	 1
  00151	68 ef 00 00 00	 push	 239			; 000000efH
  00156	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 153  : 
; 154  : 				pack_list_root (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_root);

  0015f	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00162	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00167	50		 push	 eax
  00168	6a 1a		 push	 26			; 0000001aH
  0016a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0016d	51		 push	 ecx
  0016e	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 155  : 			}
; 156  : 			else

  00173	eb 10		 jmp	 SHORT $LN19@pack_aircr
$LN18@pack_aircr:

; 157  : 			{
; 158  : 
; 159  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00175	6a 00		 push	 0
  00177	68 ef 00 00 00	 push	 239			; 000000efH
  0017c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN19@pack_aircr:

; 160  : 			}
; 161  : 			/////////////////////////////////////////////////////////////////
; 162  : 
; 163  : 			pack_list_link (en, LIST_TYPE_FOLLOWER, &raw->follower_link);

  00185	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00188	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  0018d	50		 push	 eax
  0018e	6a 0d		 push	 13			; 0000000dH
  00190	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00193	51		 push	 ecx
  00194	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 164  : 
; 165  : 			// gunship_target_link
; 166  : 
; 167  : 			pack_list_link (en, LIST_TYPE_MEMBER, &raw->member_link);

  00199	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0019c	05 bc 00 00 00	 add	 eax, 188		; 000000bcH
  001a1	50		 push	 eax
  001a2	6a 19		 push	 25			; 00000019H
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001a7	51		 push	 ecx
  001a8	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 168  : 
; 169  : 			// view_link
; 170  : 
; 171  : 			if (mode == PACK_MODE_SERVER_SESSION)

  001ad	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  001b1	75 14		 jne	 SHORT $LN20@pack_aircr

; 172  : 			{
; 173  : 
; 174  : 				pack_list_link (en, LIST_TYPE_TAKEOFF_QUEUE, &raw->takeoff_queue_link);

  001b3	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001b6	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  001bb	50		 push	 eax
  001bc	6a 25		 push	 37			; 00000025H
  001be	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001c1	51		 push	 ecx
  001c2	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link
$LN20@pack_aircr:

; 175  : 			}
; 176  : 
; 177  : 			/////////////////////////////////////////////////////////////////
; 178  : 			if (raw->movement_dependent_link.parent)

  001c7	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001ca	83 b8 e0 00 00
	00 00		 cmp	 DWORD PTR [eax+224], 0
  001d1	74 26		 je	 SHORT $LN21@pack_aircr

; 179  : 			{
; 180  : 
; 181  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  001d3	6a 01		 push	 1
  001d5	68 ef 00 00 00	 push	 239			; 000000efH
  001da	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 182  : 
; 183  : 				pack_list_link (en, LIST_TYPE_MOVEMENT_DEPENDENT, &raw->movement_dependent_link);

  001e3	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  001e6	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
  001eb	50		 push	 eax
  001ec	6a 1a		 push	 26			; 0000001aH
  001ee	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 184  : 			}
; 185  : 			else

  001f7	eb 10		 jmp	 SHORT $LN22@pack_aircr
$LN21@pack_aircr:

; 186  : 			{
; 187  : 
; 188  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  001f9	6a 00		 push	 0
  001fb	68 ef 00 00 00	 push	 239			; 000000efH
  00200	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN22@pack_aircr:

; 189  : 			}
; 190  : 			/////////////////////////////////////////////////////////////////
; 191  : 
; 192  : 			pack_int_value (en, INT_TYPE_OPERATIONAL_STATE, raw->operational_state);

  00209	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0020c	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  00212	c1 e9 05	 shr	 ecx, 5
  00215	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00218	51		 push	 ecx
  00219	68 97 00 00 00	 push	 151			; 00000097H
  0021e	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00221	52		 push	 edx
  00222	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 193  : 
; 194  : 			if (mode == PACK_MODE_SERVER_SESSION)

  00227	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0022b	75 1c		 jne	 SHORT $LN23@pack_aircr

; 195  : 			{
; 196  : 				pack_float_value (en, FLOAT_TYPE_DISTANCE, raw->distance);	// only needed by server?

  0022d	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00230	51		 push	 ecx
  00231	f3 0f 10 80 ec
	00 00 00	 movss	 xmm0, DWORD PTR [eax+236]
  00239	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023e	6a 1f		 push	 31			; 0000001fH
  00240	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00243	51		 push	 ecx
  00244	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN23@pack_aircr:

; 197  : 			}
; 198  : 
; 199  : 			if (raw->operational_state == OPERATIONAL_STATE_LANDED)

  00249	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0024c	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  00252	c1 e9 05	 shr	 ecx, 5
  00255	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00258	83 f9 04	 cmp	 ecx, 4
  0025b	75 1c		 jne	 SHORT $LN24@pack_aircr

; 200  : 			{
; 201  : 
; 202  : 				pack_float_value (en, FLOAT_TYPE_LOADING_DOOR_STATE, raw->loading_door_state);

  0025d	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00260	51		 push	 ecx
  00261	f3 0f 10 80 f4
	00 00 00	 movss	 xmm0, DWORD PTR [eax+244]
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	6a 3f		 push	 63			; 0000003fH
  00270	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN24@pack_aircr:

; 203  : 			}
; 204  : 
; 205  : 			pack_float_value (en, FLOAT_TYPE_CARGO_DOOR_STATE, raw->cargo_door_state);

  00279	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0027c	51		 push	 ecx
  0027d	f3 0f 10 80 f0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+240]
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	6a 11		 push	 17			; 00000011H
  0028c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0028f	51		 push	 ecx
  00290	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 206  : 
; 207  : 			if (mode == PACK_MODE_SERVER_SESSION)

  00295	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00299	75 3b		 jne	 SHORT $LN25@pack_aircr

; 208  : 			{
; 209  : 				pack_float_value (en, FLOAT_TYPE_DEATH_TIMER, raw->death_timer);

  0029b	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0029e	51		 push	 ecx
  0029f	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  002a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ac	6a 1b		 push	 27			; 0000001bH
  002ae	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002b1	51		 push	 ecx
  002b2	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 210  : 
; 211  : 				pack_float_value (en, FLOAT_TYPE_TARGET_SCAN_TIMER, raw->target_scan_timer);

  002b7	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002ba	51		 push	 ecx
  002bb	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  002c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c8	68 87 00 00 00	 push	 135			; 00000087H
  002cd	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002d0	51		 push	 ecx
  002d1	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN25@pack_aircr:

; 212  : 			}
; 213  : 
; 214  : 			pack_float_value (en, FLOAT_TYPE_UNDERCARRIAGE_STATE, raw->undercarriage_state);

  002d6	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002d9	51		 push	 ecx
  002da	f3 0f 10 80 fc
	00 00 00	 movss	 xmm0, DWORD PTR [eax+252]
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	68 90 00 00 00	 push	 144			; 00000090H
  002ec	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 215  : 
; 216  : 			// view_interest_level
; 217  : 
; 218  : 			// weapon_burst_timer
; 219  : 
; 220  : 			pack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_READY_STATE, raw->weapon_system_ready_state);

  002f5	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  002f8	51		 push	 ecx
  002f9	f3 0f 10 80 08
	01 00 00	 movss	 xmm0, DWORD PTR [eax+264]
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	68 9a 00 00 00	 push	 154			; 0000009aH
  0030b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0030e	51		 push	 ecx
  0030f	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 221  : 
; 222  : 			if (mode == PACK_MODE_SERVER_SESSION)

  00314	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00318	75 1c		 jne	 SHORT $LN26@pack_aircr

; 223  : 			{
; 224  : 				pack_float_value (en, FLOAT_TYPE_DECOY_RELEASE_TIMER, raw->decoy_release_timer);

  0031a	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0031d	51		 push	 ecx
  0031e	f3 0f 10 80 0c
	01 00 00	 movss	 xmm0, DWORD PTR [eax+268]
  00326	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032b	6a 1c		 push	 28			; 0000001cH
  0032d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00330	51		 push	 ecx
  00331	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN26@pack_aircr:

; 225  : 			}
; 226  : 
; 227  : 			// air_radar_contact_timeout
; 228  : 
; 229  : 			////////////////////////////////////////
; 230  : 
; 231  : 			pack_int_value (en, INT_TYPE_WEAPON_CONFIG_TYPE, raw->weapon_config_type);

  00336	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00339	8b 88 1c 01 00
	00		 mov	 ecx, DWORD PTR [eax+284]
  0033f	51		 push	 ecx
  00340	68 05 01 00 00	 push	 261			; 00000105H
  00345	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00348	52		 push	 edx
  00349	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 232  : 
; 233  : 			for (package = 0; package < NUM_WEAPON_PACKAGES; package++)

  0034e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _package$[ebp], 0
  00355	eb 09		 jmp	 SHORT $LN6@pack_aircr
$LN4@pack_aircr:
  00357	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  0035a	83 c0 01	 add	 eax, 1
  0035d	89 45 fc	 mov	 DWORD PTR _package$[ebp], eax
$LN6@pack_aircr:
  00360	83 7d fc 20	 cmp	 DWORD PTR _package$[ebp], 32 ; 00000020H
  00364	0f 8d d7 00 00
	00		 jge	 $LN5@pack_aircr

; 234  : 			{
; 235  : 				if (weapon_config_database[raw->weapon_config_type][package].sub_type == ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  0036a	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0036d	69 88 1c 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+284], 2432
  00377	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  0037b	83 bc 11 00 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx], 0
  00383	75 05		 jne	 SHORT $LN27@pack_aircr

; 236  : 				{
; 237  : 					break;

  00385	e9 b7 00 00 00	 jmp	 $LN5@pack_aircr
$LN27@pack_aircr:

; 238  : 				}
; 239  : 
; 240  : 				pack_int_value (en, INT_TYPE_WEAPON_PACKAGE_NUMBER, raw->weapon_package_status_array[package].number);

  0038a	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  0038d	c1 e0 04	 shl	 eax, 4
  00390	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  00393	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00399	0f b7 04 02	 movzx	 eax, WORD PTR [edx+eax]
  0039d	50		 push	 eax
  0039e	68 0d 01 00 00	 push	 269			; 0000010dH
  003a3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003a6	51		 push	 ecx
  003a7	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 241  : 
; 242  : 				pack_int_value (en, INT_TYPE_WEAPON_PACKAGE_DAMAGED, raw->weapon_package_status_array[package].damaged);

  003ac	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  003af	c1 e0 04	 shl	 eax, 4
  003b2	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  003b5	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  003bb	0f b7 44 02 02	 movzx	 eax, WORD PTR [edx+eax+2]
  003c0	50		 push	 eax
  003c1	68 0b 01 00 00	 push	 267			; 0000010bH
  003c6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003c9	51		 push	 ecx
  003ca	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 243  : 
; 244  : 				if (weapon_config_database[raw->weapon_config_type][package].rotate)

  003cf	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  003d2	69 88 1c 01 00
	00 80 09 00 00	 imul	 ecx, DWORD PTR [eax+284], 2432
  003dc	6b 55 fc 4c	 imul	 edx, DWORD PTR _package$[ebp], 76
  003e0	83 bc 11 18 00
	00 00 00	 cmp	 DWORD PTR ?weapon_config_database@@3PAY0CA@UWEAPON_PACKAGE@@A[ecx+edx+24], 0
  003e8	74 52		 je	 SHORT $LN28@pack_aircr

; 245  : 				{
; 246  : 					pack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_HEADING, raw->weapon_package_status_array[package].weapon_system_heading);

  003ea	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  003ed	c1 e0 04	 shl	 eax, 4
  003f0	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  003f3	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  003f9	51		 push	 ecx
  003fa	f3 0f 10 44 02
	04		 movss	 xmm0, DWORD PTR [edx+eax+4]
  00400	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00405	68 98 00 00 00	 push	 152			; 00000098H
  0040a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0040d	50		 push	 eax
  0040e	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 247  : 
; 248  : 					pack_float_value (en, FLOAT_TYPE_WEAPON_SYSTEM_PITCH, raw->weapon_package_status_array[package].weapon_system_pitch);

  00413	8b 45 fc	 mov	 eax, DWORD PTR _package$[ebp]
  00416	c1 e0 04	 shl	 eax, 4
  00419	8b 4d 0c	 mov	 ecx, DWORD PTR _raw$[ebp]
  0041c	8b 91 20 01 00
	00		 mov	 edx, DWORD PTR [ecx+288]
  00422	51		 push	 ecx
  00423	f3 0f 10 44 02
	08		 movss	 xmm0, DWORD PTR [edx+eax+8]
  00429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042e	68 99 00 00 00	 push	 153			; 00000099H
  00433	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN28@pack_aircr:

; 249  : 				}
; 250  : 
; 251  : 				// muzzle_flash_timer
; 252  : 			}

  0043c	e9 16 ff ff ff	 jmp	 $LN4@pack_aircr
$LN5@pack_aircr:

; 253  : 
; 254  : 			pack_int_value (en, INT_TYPE_SELECTED_WEAPON, raw->selected_weapon);

  00441	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00444	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  0044a	51		 push	 ecx
  0044b	68 b8 00 00 00	 push	 184			; 000000b8H
  00450	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00453	52		 push	 edx
  00454	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 255  : 
; 256  : 			////////////////////////////////////////
; 257  : 
; 258  : 			// sound_effect_data
; 259  : 
; 260  : 			pack_int_value (en, INT_TYPE_FORMATION_POSITION, raw->formation_position);

  00459	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0045c	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  00462	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00465	51		 push	 ecx
  00466	6a 3e		 push	 62			; 0000003eH
  00468	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0046b	52		 push	 edx
  0046c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 261  : 
; 262  : 			// valid_sound_effect
; 263  : 
; 264  : 			// selected_weapon_system_ready
; 265  : 
; 266  : 			// weapon_and_target_vectors_valid
; 267  : 
; 268  : 			// gunship_radar_los_clear
; 269  : 
; 270  : 			if (mode == PACK_MODE_CLIENT_SESSION)

  00471	83 7d 10 01	 cmp	 DWORD PTR _mode$[ebp], 1
  00475	75 1b		 jne	 SHORT $LN29@pack_aircr

; 271  : 			{
; 272  : 				pack_int_value (en, INT_TYPE_LIGHTS_ON, raw->lights_on);

  00477	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  0047a	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  00480	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  00483	83 e1 01	 and	 ecx, 1
  00486	51		 push	 ecx
  00487	6a 7a		 push	 122			; 0000007aH
  00489	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0048c	52		 push	 edx
  0048d	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN29@pack_aircr:

; 273  : 			}
; 274  : 
; 275  : 			// cpg_identified
; 276  : 
; 277  : 			pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, raw->group_member_number);

  00492	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  00495	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  0049b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0049e	83 e1 1f	 and	 ecx, 31			; 0000001fH
  004a1	51		 push	 ecx
  004a2	6a 4b		 push	 75			; 0000004bH
  004a4	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004a7	52		 push	 edx
  004a8	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 278  : 
; 279  : 			// id_number_significant_digits
; 280  : 
; 281  : 			pack_int_value (en, INT_TYPE_EJECTED, raw->ejected);

  004ad	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  004b0	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  004b6	c1 e9 18	 shr	 ecx, 24			; 00000018H
  004b9	83 e1 01	 and	 ecx, 1
  004bc	51		 push	 ecx
  004bd	6a 31		 push	 49			; 00000031H
  004bf	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004c2	52		 push	 edx
  004c3	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 282  : 
; 283  : 			pack_int_value (en, INT_TYPE_DAMAGE_LEVEL, raw->damage_level);

  004c8	8b 45 0c	 mov	 eax, DWORD PTR _raw$[ebp]
  004cb	8b 88 34 01 00
	00		 mov	 ecx, DWORD PTR [eax+308]
  004d1	51		 push	 ecx
  004d2	6a 25		 push	 37			; 00000025H
  004d4	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004d7	52		 push	 edx
  004d8	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN2@pack_aircr:

; 284  : 
; 285  : 			// id_number
; 286  : 
; 287  : 			// weapon_vector
; 288  : 
; 289  : 			// weapon_to_target_vector
; 290  : 
; 291  : 			// terrain_info
; 292  : 
; 293  : 			break;
; 294  : 		}
; 295  : 		////////////////////////////////////////
; 296  : 		case PACK_MODE_BROWSE_SESSION:
; 297  : 		////////////////////////////////////////
; 298  : 		{
; 299  : 			break;
; 300  : 		}
; 301  : 		////////////////////////////////////////
; 302  : 		case PACK_MODE_UPDATE_ENTITY:
; 303  : 		////////////////////////////////////////
; 304  : 		{
; 305  : 			//
; 306  : 			// cannot update entity at this level as the update may not apply to all entity types below
; 307  : 			//
; 308  : 
; 309  : 			break;
; 310  : 		}
; 311  : 	}
; 312  : }

  004dd	5f		 pop	 edi
  004de	5e		 pop	 esi
  004df	5b		 pop	 ebx
  004e0	8b e5		 mov	 esp, ebp
  004e2	5d		 pop	 ebp
  004e3	c2 0c 00	 ret	 12			; 0000000cH
?pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ENDP ; pack_aircraft_data
_TEXT	ENDS
END
