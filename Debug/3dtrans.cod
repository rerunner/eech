; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dtrans.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?rotation_3d@@3PAY02MA				; rotation_3d
PUBLIC	?scaled_rotation@@3PAY02MA			; scaled_rotation
PUBLIC	?transformed_3d_points@@3PAUVERTEX@@A		; transformed_3d_points
PUBLIC	?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; transformed_3d_normals
PUBLIC	?transformed_3d_normal_factors@@3PAMA		; transformed_3d_normal_factors
PUBLIC	?transformed_3d_normal_visibilities@@3PAEA	; transformed_3d_normal_visibilities
PUBLIC	?transformed_3d_point_outcodes@@3PAEA		; transformed_3d_point_outcodes
PUBLIC	?transformed_3d_points_needed@@3PAEA		; transformed_3d_points_needed
PUBLIC	?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A ; transformed_3d_3d_points
PUBLIC	?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points
PUBLIC	?total_number_of_3d_points_transformed@@3HA	; total_number_of_3d_points_transformed
PUBLIC	?current_number_of_3d_points_transformed@@3HA	; current_number_of_3d_points_transformed
PUBLIC	?int_light_bounds@@3PAHA			; int_light_bounds
PUBLIC	?float_light_bounds@@3PAMA			; float_light_bounds
_BSS	SEGMENT
?rotation_3d@@3PAY02MA DD 09H DUP (?)			; rotation_3d
?scaled_rotation@@3PAY02MA DD 09H DUP (?)		; scaled_rotation
?transformed_3d_points@@3PAUVERTEX@@A DB 0400000H DUP (?) ; transformed_3d_points
?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A DQ 010004H DUP (?) ; transformed_3d_normals
?transformed_3d_normal_factors@@3PAMA DD 010008H DUP (?) ; transformed_3d_normal_factors
?transformed_3d_normal_visibilities@@3PAEA DB 010020H DUP (?) ; transformed_3d_normal_visibilities
?transformed_3d_point_outcodes@@3PAEA DB 010020H DUP (?) ; transformed_3d_point_outcodes
?transformed_3d_points_needed@@3PAEA DB 010020H DUP (?)	; transformed_3d_points_needed
?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A DQ 010004H DUP (?) ; transformed_3d_3d_points
?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A DB 0100020H DUP (?) ; transformed_3d_2d_points
?total_number_of_3d_points_transformed@@3HA DD 01H DUP (?) ; total_number_of_3d_points_transformed
?current_number_of_3d_points_transformed@@3HA DD 01H DUP (?) ; current_number_of_3d_points_transformed
_BSS	ENDS
_DATA	SEGMENT
?int_light_bounds@@3PAHA DD 00H				; int_light_bounds
	DD	0ffH
	DD	00H
	DD	0ffH
	DD	00H
	DD	0ffH
?float_light_bounds@@3PAMA DD 000000000r	; 0	; float_light_bounds
	DD	03f800000r			; 1
_DATA	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?initialise_3d_transformation_arrays@@YGXXZ	; initialise_3d_transformation_arrays
PUBLIC	?initialise_3d_transformation_stats@@YGXXZ	; initialise_3d_transformation_stats
PUBLIC	?reset_3d_transformation_stats@@YGXXZ		; reset_3d_transformation_stats
PUBLIC	?illuminate_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; illuminate_3d_object
PUBLIC	?illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z ; illuminate_object_point_normals
PUBLIC	?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_3d_object
PUBLIC	?transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_flat_3d_object
PUBLIC	?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_3d_object
PUBLIC	?transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_flat_3d_object
PUBLIC	?illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; illuminate_3d_object_surface
PUBLIC	?transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_3d_object_surface
PUBLIC	?transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_3d_object_surface
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0CL@NHHJFLJF@Number?5of?53D?5Object?5points?5tran@ ; `string'
PUBLIC	?__LINE__Var@?0??illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z@4JA ; `illuminate_object_point_normals'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0DB@CBMNNJN@?$CI?5number_of_normals?5?$CL?5points_ba@ ; `string'
PUBLIC	?__LINE__Var@?0??transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA ; `transform_3d_object'::`1'::__LINE__Var
PUBLIC	??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@ ; `string'
PUBLIC	?__LINE__Var@?0??transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA ; `transform_flat_3d_object'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA ; `transform_unclipped_3d_object'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA ; `transform_unclipped_flat_3d_object'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA ; `illuminate_3d_object_surface'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@ ; `string'
PUBLIC	?__LINE__Var@?0??transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA ; `transform_3d_object_surface'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA ; `transform_unclipped_3d_object_surface'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40dfffc000000000
PUBLIC	__real@437f0000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fabs:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?set_fpu_precision_mode_single@@YGXXZ:PROC	; set_fpu_precision_mode_single
EXTRN	?set_fpu_precision_mode_double@@YGXXZ:PROC	; set_fpu_precision_mode_double
EXTRN	?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z:PROC ; debug_colour_watch
EXTRN	?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z:PROC ; generate_object_3d_point_normal
EXTRN	?float_value_zero@@3MB:DWORD			; float_value_zero
EXTRN	?float_value_one@@3MB:DWORD			; float_value_one
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A:BYTE	; ambient_3d_light
EXTRN	?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A:DWORD ; current_object_3d_surface
EXTRN	?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_face_normal_list
EXTRN	?current_object_3d_dissolve_value@@3EA:BYTE	; current_object_3d_dissolve_value
EXTRN	?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_list
EXTRN	?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_normal_list
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?environment_x_origin@@3MA DD 01H DUP (?)		; environment_x_origin
?environment_y_origin@@3MA DD 01H DUP (?)		; environment_y_origin
_BSS	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA DD 076fH ; `transform_unclipped_3d_object_surface'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA DD 06adH ; `transform_3d_object_surface'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@
CONST	SEGMENT
??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@ DB 'current_objec'
	DB	't_3d_surface->polygons', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA DD 049cH ; `illuminate_3d_object_surface'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA DD 043bH ; `transform_unclipped_flat_3d_object'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA DD 03c9H ; `transform_unclipped_3d_object'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA DD 0317H ; `transform_flat_3d_object'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
CONST	SEGMENT
??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@ DB '( number'
	DB	'_of_points + points_base ) < MAX_POINTS', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA DD 024fH ; `transform_3d_object'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DB@CBMNNJN@?$CI?5number_of_normals?5?$CL?5points_ba@
CONST	SEGMENT
??_C@_0DB@CBMNNJN@?$CI?5number_of_normals?5?$CL?5points_ba@ DB '( number_'
	DB	'of_normals + points_base ) < MAX_POINTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dtrans.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z@4JA DD 0b7H ; `illuminate_object_point_normals'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CL@NHHJFLJF@Number?5of?53D?5Object?5points?5tran@
CONST	SEGMENT
??_C@_0CL@NHHJFLJF@Number?5of?53D?5Object?5points?5tran@ DB 'Number of 3D'
	DB	' Object points transformed: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
$T1 = -176						; size = 4
$T2 = -172						; size = 4
$T3 = -168						; size = 4
$T4 = -164						; size = 4
$T5 = -160						; size = 4
$T6 = -156						; size = 4
_point_index$7 = -88					; size = 4
_j$8 = -84						; size = 4
_i$9 = -80						; size = 4
_q$10 = -76						; size = 4
_z$11 = -72						; size = 4
_y$12 = -68						; size = 4
_x$13 = -64						; size = 4
_point_z$14 = -60					; size = 4
_point_y$15 = -56					; size = 4
_point_x$16 = -52					; size = 4
_point_list$ = -48					; size = 4
_zmax$ = -44						; size = 4
_ymax$ = -40						; size = 4
_xmax$ = -36						; size = 4
_pos_z$ = -32						; size = 4
_pos_y$ = -28						; size = 4
_pos_x$ = -24						; size = 4
_result_2d_points$ = -20				; size = 4
_result_3d_points$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; transform_unclipped_3d_object_surface, COMDAT

; 1903 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1904 : 
; 1905 : 	int
; 1906 : 		count,
; 1907 : 		number_of_points;
; 1908 : 
; 1909 : 	object_short_3d_point
; 1910 : 		*points;
; 1911 : 
; 1912 : 	object_transformed_3d_point
; 1913 : 		*result_3d_points;
; 1914 : 
; 1915 : 	object_transformed_2d_point
; 1916 : 		*result_2d_points;
; 1917 : 
; 1918 : 	float
; 1919 : 		pos_x,
; 1920 : 		pos_y,
; 1921 : 		pos_z,
; 1922 : 		xmax,
; 1923 : 		ymax,
; 1924 : 		zmax;
; 1925 : 
; 1926 : 	point_3d_plain_reference
; 1927 : 		*point_list;
; 1928 : 
; 1929 : 	point_list = current_object_3d_surface_point_list;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00011	89 45 d0	 mov	 DWORD PTR _point_list$[ebp], eax

; 1930 : 
; 1931 : 	number_of_points = current_object_3d_surface->number_of_points;

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00019	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0001d	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 1932 : 
; 1933 : 	if ( number_of_points == 0 )

  00020	83 7d f8 00	 cmp	 DWORD PTR _number_of_points$[ebp], 0
  00024	75 07		 jne	 SHORT $LN5@transform_

; 1934 : 	{
; 1935 : 
; 1936 : 		number_of_points = 256;

  00026	c7 45 f8 00 01
	00 00		 mov	 DWORD PTR _number_of_points$[ebp], 256 ; 00000100H
$LN5@transform_:

; 1937 : 	}
; 1938 : 
; 1939 : 	ASSERT ( ( number_of_points + points_base ) < MAX_POINTS );

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00030	03 45 18	 add	 eax, DWORD PTR _points_base$[ebp]
  00033	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00038	7c 18		 jl	 SHORT $LN6@transform_
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  0003f	83 c0 24	 add	 eax, 36			; 00000024H
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
  0004d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@transform_:

; 1940 : 
; 1941 : 	points = object->points;

  00052	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00055	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00058	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 1942 : 
; 1943 : 	result_3d_points = &transformed_3d_3d_points[points_base];

  0005b	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0005e	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A[eax*8]
  00065	89 4d f0	 mov	 DWORD PTR _result_3d_points$[ebp], ecx

; 1944 : 
; 1945 : 	result_2d_points = &transformed_3d_2d_points[points_base];

  00068	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0006b	c1 e0 04	 shl	 eax, 4
  0006e	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points
  00073	89 45 ec	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 1946 : 
; 1947 : 	environment_x_origin = active_3d_environment->x_origin;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0007b	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00080	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_x_origin@@3MA, xmm0

; 1948 : 	environment_y_origin = active_3d_environment->y_origin;

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0008d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00092	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_y_origin@@3MA, xmm0

; 1949 : 
; 1950 : 	pos_x = pos->x * active_3d_environment->screen_i_scale;

  0009a	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000a3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a7	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  000ab	f3 0f 11 45 e8	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 1951 : 	pos_y = pos->y * active_3d_environment->screen_j_scale;

  000b0	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000b9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000be	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000c3	f3 0f 11 45 e4	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 1952 : 	pos_z = pos->z;

  000c8	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000cb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000d0	f3 0f 11 45 e0	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 1953 : 
; 1954 : 	xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  000d5	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000d8	51		 push	 ecx
  000d9	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000e8	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000f1	51		 push	 ecx
  000f2	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00101	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  00107	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0010d	52		 push	 edx
  0010e	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0011a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011e	f3 0f 11 45 dc	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 1955 : 	ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  00123	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00126	51		 push	 ecx
  00127	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0012c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00131	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00136	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0013f	51		 push	 ecx
  00140	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0014f	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  00155	8d 95 5c ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0015b	52		 push	 edx
  0015c	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00168	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0016c	f3 0f 11 45 d8	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 1956 : 	zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  00171	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00174	51		 push	 ecx
  00175	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00184	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0018d	51		 push	 ecx
  0018e	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0019d	d9 9d 50 ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  001a3	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  001a9	52		 push	 edx
  001aa	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001b6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001ba	f3 0f 11 45 d4	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 1957 : 
; 1958 : 	scaled_rotation[0][0] = rotation_3d[0][0] * active_3d_environment->screen_i_scale * ( xmax / 32767.0 );

  001bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001c4	6b c8 00	 imul	 ecx, eax, 0
  001c7	ba 04 00 00 00	 mov	 edx, 4
  001cc	6b c2 00	 imul	 eax, edx, 0
  001cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001d5	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  001de	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  001e2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e6	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  001eb	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  001f3	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00200	6b c8 00	 imul	 ecx, eax, 0
  00203	ba 04 00 00 00	 mov	 edx, 4
  00208	6b c2 00	 imul	 eax, edx, 0
  0020b	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax], xmm0

; 1959 : 	scaled_rotation[0][1] = rotation_3d[0][1] * active_3d_environment->screen_j_scale * ( xmax / 32767.0 );

  00214	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00219	6b c8 00	 imul	 ecx, eax, 0
  0021c	ba 04 00 00 00	 mov	 edx, 4
  00221	c1 e2 00	 shl	 edx, 0
  00224	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00229	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00232	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  00237	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0023b	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  00240	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00248	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0024c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00250	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00255	6b d1 00	 imul	 edx, ecx, 0
  00258	b8 04 00 00 00	 mov	 eax, 4
  0025d	c1 e0 00	 shl	 eax, 0
  00260	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1960 : 	scaled_rotation[0][2] = rotation_3d[0][2] * ( xmax / 32767.0 );

  00269	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0026e	6b c8 00	 imul	 ecx, eax, 0
  00271	ba 04 00 00 00	 mov	 edx, 4
  00276	d1 e2		 shl	 edx, 1
  00278	f3 0f 5a 84 11
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00281	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  00286	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0028e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00292	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00296	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0029b	6b c8 00	 imul	 ecx, eax, 0
  0029e	ba 04 00 00 00	 mov	 edx, 4
  002a3	d1 e2		 shl	 edx, 1
  002a5	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx], xmm0

; 1961 : 
; 1962 : 	scaled_rotation[1][0] = rotation_3d[1][0] * active_3d_environment->screen_i_scale * ( ymax / 32767.0 );

  002ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b3	c1 e0 00	 shl	 eax, 0
  002b6	b9 04 00 00 00	 mov	 ecx, 4
  002bb	6b d1 00	 imul	 edx, ecx, 0
  002be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002c4	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  002cd	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  002d1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002d5	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  002da	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  002e2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ea	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002ef	c1 e2 00	 shl	 edx, 0
  002f2	b8 04 00 00 00	 mov	 eax, 4
  002f7	6b c8 00	 imul	 ecx, eax, 0
  002fa	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1963 : 	scaled_rotation[1][1] = rotation_3d[1][1] * active_3d_environment->screen_j_scale * ( ymax / 32767.0 );

  00303	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00308	c1 e0 00	 shl	 eax, 0
  0030b	b9 04 00 00 00	 mov	 ecx, 4
  00310	c1 e1 00	 shl	 ecx, 0
  00313	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00319	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00322	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00327	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0032b	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00330	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00338	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0033c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00340	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00345	c1 e0 00	 shl	 eax, 0
  00348	b9 04 00 00 00	 mov	 ecx, 4
  0034d	c1 e1 00	 shl	 ecx, 0
  00350	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1964 : 	scaled_rotation[1][2] = rotation_3d[1][2] * ( ymax / 32767.0 );

  00359	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0035e	c1 e0 00	 shl	 eax, 0
  00361	b9 04 00 00 00	 mov	 ecx, 4
  00366	d1 e1		 shl	 ecx, 1
  00368	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00371	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00376	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0037e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00382	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00386	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0038b	c1 e2 00	 shl	 edx, 0
  0038e	b8 04 00 00 00	 mov	 eax, 4
  00393	d1 e0		 shl	 eax, 1
  00395	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1965 : 
; 1966 : 	scaled_rotation[2][0] = rotation_3d[2][0] * active_3d_environment->screen_i_scale * ( zmax / 32767.0 );

  0039e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003a3	d1 e0		 shl	 eax, 1
  003a5	b9 04 00 00 00	 mov	 ecx, 4
  003aa	6b d1 00	 imul	 edx, ecx, 0
  003ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  003b3	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  003bc	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  003c0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003c4	f3 0f 5a 4d d4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  003c9	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  003d1	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003d9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003de	d1 e2		 shl	 edx, 1
  003e0	b8 04 00 00 00	 mov	 eax, 4
  003e5	6b c8 00	 imul	 ecx, eax, 0
  003e8	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1967 : 	scaled_rotation[2][1] = rotation_3d[2][1] * active_3d_environment->screen_j_scale * ( zmax / 32767.0 );

  003f1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003f6	d1 e0		 shl	 eax, 1
  003f8	b9 04 00 00 00	 mov	 ecx, 4
  003fd	c1 e1 00	 shl	 ecx, 0
  00400	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00406	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0040f	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00414	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00418	f3 0f 5a 4d d4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  0041d	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00425	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00429	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0042d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00432	d1 e0		 shl	 eax, 1
  00434	b9 04 00 00 00	 mov	 ecx, 4
  00439	c1 e1 00	 shl	 ecx, 0
  0043c	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1968 : 	scaled_rotation[2][2] = rotation_3d[2][2] * ( zmax / 32767.0 );

  00445	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0044a	d1 e0		 shl	 eax, 1
  0044c	b9 04 00 00 00	 mov	 ecx, 4
  00451	d1 e1		 shl	 ecx, 1
  00453	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0045c	f3 0f 5a 4d d4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  00461	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00469	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0046d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00471	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00476	d1 e2		 shl	 edx, 1
  00478	b8 04 00 00 00	 mov	 eax, 4
  0047d	d1 e0		 shl	 eax, 1
  0047f	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1969 : 
; 1970 : 	for ( count = number_of_points; count > 0; count-- )

  00488	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0048b	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  0048e	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  00490	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00493	83 e8 01	 sub	 eax, 1
  00496	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  00499	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  0049d	0f 8e 58 02 00
	00		 jle	 $LN3@transform_

; 1971 : 	{
; 1972 : 
; 1973 : 		float
; 1974 : 			point_x,
; 1975 : 			point_y,
; 1976 : 			point_z,
; 1977 : 			x,
; 1978 : 			y,
; 1979 : 			z,
; 1980 : 			q,
; 1981 : 			i,
; 1982 : 			j;
; 1983 : 
; 1984 : 		int
; 1985 : 			point_index;
; 1986 : 
; 1987 : 		point_index = point_list->point;

  004a3	8b 45 d0	 mov	 eax, DWORD PTR _point_list$[ebp]
  004a6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  004a9	89 4d a8	 mov	 DWORD PTR _point_index$7[ebp], ecx

; 1988 : 		point_x = points[point_index].x;

  004ac	6b 45 a8 06	 imul	 eax, DWORD PTR _point_index$7[ebp], 6
  004b0	8b 4d f4	 mov	 ecx, DWORD PTR _points$[ebp]
  004b3	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  004b7	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004bb	f3 0f 11 45 cc	 movss	 DWORD PTR _point_x$16[ebp], xmm0

; 1989 : 		point_y = points[point_index].y;

  004c0	6b 45 a8 06	 imul	 eax, DWORD PTR _point_index$7[ebp], 6
  004c4	8b 4d f4	 mov	 ecx, DWORD PTR _points$[ebp]
  004c7	0f bf 54 01 02	 movsx	 edx, WORD PTR [ecx+eax+2]
  004cc	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004d0	f3 0f 11 45 c8	 movss	 DWORD PTR _point_y$15[ebp], xmm0

; 1990 : 		point_z = points[point_index].z;

  004d5	6b 45 a8 06	 imul	 eax, DWORD PTR _point_index$7[ebp], 6
  004d9	8b 4d f4	 mov	 ecx, DWORD PTR _points$[ebp]
  004dc	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  004e1	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004e5	f3 0f 11 45 c4	 movss	 DWORD PTR _point_z$14[ebp], xmm0

; 1991 : 
; 1992 : 		x = pos_x + point_x * scaled_rotation[0][0] + point_y * scaled_rotation[1][0] + point_z * scaled_rotation[2][0];

  004ea	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004ef	6b c8 00	 imul	 ecx, eax, 0
  004f2	ba 04 00 00 00	 mov	 edx, 4
  004f7	6b c2 00	 imul	 eax, edx, 0
  004fa	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point_x$16[ebp]
  004ff	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  00508	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  0050d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00512	c1 e1 00	 shl	 ecx, 0
  00515	ba 04 00 00 00	 mov	 edx, 4
  0051a	6b c2 00	 imul	 eax, edx, 0
  0051d	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _point_y$15[ebp]
  00522	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  0052b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0052f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00534	d1 e1		 shl	 ecx, 1
  00536	ba 04 00 00 00	 mov	 edx, 4
  0053b	6b c2 00	 imul	 eax, edx, 0
  0053e	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _point_z$14[ebp]
  00543	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  0054c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00550	f3 0f 11 45 c0	 movss	 DWORD PTR _x$13[ebp], xmm0

; 1993 : 		y = pos_y + point_x * scaled_rotation[0][1] + point_y * scaled_rotation[1][1] + point_z * scaled_rotation[2][1];

  00555	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0055a	6b c8 00	 imul	 ecx, eax, 0
  0055d	ba 04 00 00 00	 mov	 edx, 4
  00562	c1 e2 00	 shl	 edx, 0
  00565	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point_x$16[ebp]
  0056a	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  00573	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  00578	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0057d	c1 e0 00	 shl	 eax, 0
  00580	b9 04 00 00 00	 mov	 ecx, 4
  00585	c1 e1 00	 shl	 ecx, 0
  00588	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _point_y$15[ebp]
  0058d	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  00596	f3 0f 58 c1	 addss	 xmm0, xmm1
  0059a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0059f	d1 e2		 shl	 edx, 1
  005a1	b8 04 00 00 00	 mov	 eax, 4
  005a6	c1 e0 00	 shl	 eax, 0
  005a9	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _point_z$14[ebp]
  005ae	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  005b7	f3 0f 58 c1	 addss	 xmm0, xmm1
  005bb	f3 0f 11 45 bc	 movss	 DWORD PTR _y$12[ebp], xmm0

; 1994 : 		z = pos_z + point_x * scaled_rotation[0][2] + point_y * scaled_rotation[1][2] + point_z * scaled_rotation[2][2];

  005c0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005c5	6b c8 00	 imul	 ecx, eax, 0
  005c8	ba 04 00 00 00	 mov	 edx, 4
  005cd	d1 e2		 shl	 edx, 1
  005cf	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point_x$16[ebp]
  005d4	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  005dd	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  005e2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005e7	c1 e0 00	 shl	 eax, 0
  005ea	b9 04 00 00 00	 mov	 ecx, 4
  005ef	d1 e1		 shl	 ecx, 1
  005f1	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _point_y$15[ebp]
  005f6	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  005ff	f3 0f 58 c1	 addss	 xmm0, xmm1
  00603	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00608	d1 e2		 shl	 edx, 1
  0060a	b8 04 00 00 00	 mov	 eax, 4
  0060f	d1 e0		 shl	 eax, 1
  00611	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _point_z$14[ebp]
  00616	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  0061f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00623	f3 0f 11 45 b8	 movss	 DWORD PTR _z$11[ebp], xmm0

; 1995 : 
; 1996 : 		q = 1.0 / z;

  00628	f3 0f 5a 45 b8	 cvtss2sd xmm0, DWORD PTR _z$11[ebp]
  0062d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00635	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00639	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0063d	f3 0f 11 45 b4	 movss	 DWORD PTR _q$10[ebp], xmm0

; 1997 : 
; 1998 : 		result_3d_points[point_index].x = x;

  00642	8b 45 a8	 mov	 eax, DWORD PTR _point_index$7[ebp]
  00645	8b 4d f0	 mov	 ecx, DWORD PTR _result_3d_points$[ebp]
  00648	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$13[ebp]
  0064d	f3 0f 11 04 c1	 movss	 DWORD PTR [ecx+eax*8], xmm0

; 1999 : 		result_3d_points[point_index].y = y;

  00652	8b 45 a8	 mov	 eax, DWORD PTR _point_index$7[ebp]
  00655	8b 4d f0	 mov	 ecx, DWORD PTR _result_3d_points$[ebp]
  00658	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _y$12[ebp]
  0065d	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 2000 : 		result_2d_points[point_index].z = z;

  00663	8b 45 a8	 mov	 eax, DWORD PTR _point_index$7[ebp]
  00666	c1 e0 04	 shl	 eax, 4
  00669	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  0066c	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _z$11[ebp]
  00671	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 2001 : 
; 2002 : 		i = ( x * q );

  00677	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$13[ebp]
  0067c	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _q$10[ebp]
  00681	f3 0f 11 45 b0	 movss	 DWORD PTR _i$9[ebp], xmm0

; 2003 : 		j = ( y * q );

  00686	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _y$12[ebp]
  0068b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _q$10[ebp]
  00690	f3 0f 11 45 ac	 movss	 DWORD PTR _j$8[ebp], xmm0

; 2004 : 
; 2005 : 		result_2d_points[point_index].q = q;

  00695	8b 45 a8	 mov	 eax, DWORD PTR _point_index$7[ebp]
  00698	c1 e0 04	 shl	 eax, 4
  0069b	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  0069e	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _q$10[ebp]
  006a3	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 2006 : 		result_2d_points[point_index].j = environment_y_origin - j;

  006a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_y_origin@@3MA
  006b1	f3 0f 5c 45 ac	 subss	 xmm0, DWORD PTR _j$8[ebp]
  006b6	8b 45 a8	 mov	 eax, DWORD PTR _point_index$7[ebp]
  006b9	c1 e0 04	 shl	 eax, 4
  006bc	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  006bf	f3 0f 11 44 01
	04		 movss	 DWORD PTR [ecx+eax+4], xmm0

; 2007 : 		result_2d_points[point_index].i = environment_x_origin + i;

  006c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_x_origin@@3MA
  006cd	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _i$9[ebp]
  006d2	8b 45 a8	 mov	 eax, DWORD PTR _point_index$7[ebp]
  006d5	c1 e0 04	 shl	 eax, 4
  006d8	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  006db	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 2008 : 
; 2009 : #if DEBUG_STATS
; 2010 : 		current_number_of_3d_points_transformed++;

  006e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_number_of_3d_points_transformed@@3HA ; current_number_of_3d_points_transformed
  006e5	83 c0 01	 add	 eax, 1
  006e8	a3 00 00 00 00	 mov	 DWORD PTR ?current_number_of_3d_points_transformed@@3HA, eax ; current_number_of_3d_points_transformed

; 2011 : #endif
; 2012 : 
; 2013 : 		point_list++;

  006ed	8b 45 d0	 mov	 eax, DWORD PTR _point_list$[ebp]
  006f0	83 c0 02	 add	 eax, 2
  006f3	89 45 d0	 mov	 DWORD PTR _point_list$[ebp], eax

; 2014 : 	}

  006f6	e9 95 fd ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 2015 : }

  006fb	5f		 pop	 edi
  006fc	5e		 pop	 esi
  006fd	5b		 pop	 ebx
  006fe	8b e5		 mov	 esp, ebp
  00700	5d		 pop	 ebp
  00701	c2 14 00	 ret	 20			; 00000014H
?transform_unclipped_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; transform_unclipped_3d_object_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
$T1 = -240						; size = 4
$T2 = -236						; size = 4
$T3 = -232						; size = 4
$T4 = -228						; size = 4
$T5 = -224						; size = 4
$T6 = -220						; size = 4
_j$7 = -152						; size = 4
_i$8 = -148						; size = 4
_q$9 = -144						; size = 4
_point_index$10 = -140					; size = 4
_z$11 = -136						; size = 4
_y$12 = -132						; size = 4
_x$13 = -128						; size = 4
_point_z$14 = -124					; size = 4
_point_y$15 = -120					; size = 4
_point_x$16 = -116					; size = 4
_point_list$ = -112					; size = 4
_iymin$ = -108						; size = 4
_iymax$ = -104						; size = 4
_ixmin$ = -100						; size = 4
_ixmax$ = -96						; size = 4
_oymin$ = -92						; size = 4
_oymax$ = -88						; size = 4
_oxmin$ = -84						; size = 4
_oxmax$ = -80						; size = 4
_zmax$ = -76						; size = 4
_ymax$ = -72						; size = 4
_xmax$ = -68						; size = 4
_pos_z$ = -64						; size = 4
_pos_y$ = -60						; size = 4
_pos_x$ = -56						; size = 4
_temp_last_transformed_point_outcode$ = -49		; size = 1
_last_transformed_point_outcode$ = -48			; size = 4
_result_outcode$ = -44					; size = 4
_temp_last_transformed_point$ = -40			; size = 16
_last_transformed_point$ = -24				; size = 4
_result_2d_points$ = -20				; size = 4
_result_3d_points$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; transform_3d_object_surface, COMDAT

; 1709 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1710 : 
; 1711 : 	int
; 1712 : 		count,
; 1713 : 		number_of_points;
; 1714 : 
; 1715 : 	object_short_3d_point
; 1716 : 		*points;
; 1717 : 
; 1718 : 	object_transformed_3d_point
; 1719 : 		*result_3d_points;
; 1720 : 
; 1721 : 	object_transformed_2d_point
; 1722 : 		*result_2d_points,
; 1723 : 		*last_transformed_point,
; 1724 : 		temp_last_transformed_point;
; 1725 : 
; 1726 : 	unsigned char
; 1727 : 		*result_outcode,
; 1728 : 		*last_transformed_point_outcode,
; 1729 : 		temp_last_transformed_point_outcode;
; 1730 : 
; 1731 : 	float
; 1732 : 		pos_x,
; 1733 : 		pos_y,
; 1734 : 		pos_z,
; 1735 : 		xmax,
; 1736 : 		ymax,
; 1737 : 		zmax,
; 1738 : 		oxmax,
; 1739 : 		oxmin,
; 1740 : 		oymax,
; 1741 : 		oymin;
; 1742 : 
; 1743 : 	unsigned int
; 1744 : 		ixmax,
; 1745 : 		ixmin,
; 1746 : 		iymax,
; 1747 : 		iymin;
; 1748 : 
; 1749 : 	point_3d_plain_reference
; 1750 : 		*point_list;
; 1751 : 
; 1752 : 	point_list = current_object_3d_surface_point_list;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00011	89 45 90	 mov	 DWORD PTR _point_list$[ebp], eax

; 1753 : 
; 1754 : 	number_of_points = current_object_3d_surface->number_of_points;

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00019	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0001d	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 1755 : 
; 1756 : 	if ( number_of_points == 0 )

  00020	83 7d f8 00	 cmp	 DWORD PTR _number_of_points$[ebp], 0
  00024	75 07		 jne	 SHORT $LN5@transform_

; 1757 : 	{
; 1758 : 
; 1759 : 		number_of_points = 256;

  00026	c7 45 f8 00 01
	00 00		 mov	 DWORD PTR _number_of_points$[ebp], 256 ; 00000100H
$LN5@transform_:

; 1760 : 	}
; 1761 : 
; 1762 : 	ASSERT ( ( number_of_points + points_base ) < MAX_POINTS );

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00030	03 45 18	 add	 eax, DWORD PTR _points_base$[ebp]
  00033	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00038	7c 18		 jl	 SHORT $LN6@transform_
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  0003f	83 c0 35	 add	 eax, 53			; 00000035H
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
  0004d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@transform_:

; 1763 : 
; 1764 : 	points = object->points;

  00052	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00055	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00058	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 1765 : 
; 1766 : 	result_3d_points = &transformed_3d_3d_points[points_base];

  0005b	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0005e	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A[eax*8]
  00065	89 4d f0	 mov	 DWORD PTR _result_3d_points$[ebp], ecx

; 1767 : 
; 1768 : 	result_2d_points = &transformed_3d_2d_points[points_base];

  00068	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0006b	c1 e0 04	 shl	 eax, 4
  0006e	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points
  00073	89 45 ec	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 1769 : 
; 1770 : 	result_outcode = &transformed_3d_point_outcodes[points_base];

  00076	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  00079	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_point_outcodes@@3PAEA ; transformed_3d_point_outcodes
  0007e	89 45 d4	 mov	 DWORD PTR _result_outcode$[ebp], eax

; 1771 : 
; 1772 : 	last_transformed_point = &temp_last_transformed_point;

  00081	8d 45 d8	 lea	 eax, DWORD PTR _temp_last_transformed_point$[ebp]
  00084	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 1773 : 
; 1774 : 	last_transformed_point_outcode = &temp_last_transformed_point_outcode;

  00087	8d 45 cf	 lea	 eax, DWORD PTR _temp_last_transformed_point_outcode$[ebp]
  0008a	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 1775 : 
; 1776 : 	environment_x_origin = active_3d_environment->x_origin;

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00092	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00097	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_x_origin@@3MA, xmm0

; 1777 : 	environment_y_origin = active_3d_environment->y_origin;

  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000a4	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000a9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_y_origin@@3MA, xmm0

; 1778 : 
; 1779 : 	pos_x = pos->x * active_3d_environment->screen_i_scale;

  000b1	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000ba	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000be	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  000c2	f3 0f 11 45 c8	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 1780 : 	pos_y = pos->y * active_3d_environment->screen_j_scale;

  000c7	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000d0	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000d5	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000da	f3 0f 11 45 c4	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 1781 : 	pos_z = pos->z;

  000df	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000e2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000e7	f3 0f 11 45 c0	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 1782 : 
; 1783 : 	xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  000ec	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ef	51		 push	 ecx
  000f0	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000ff	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  00105	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00108	51		 push	 ecx
  00109	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00118	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  0011e	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00124	52		 push	 edx
  00125	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00131	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00135	f3 0f 11 45 bc	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 1784 : 	ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  0013a	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0013d	51		 push	 ecx
  0013e	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0014d	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  00153	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00156	51		 push	 ecx
  00157	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00166	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  0016c	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00172	52		 push	 edx
  00173	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0017f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00183	f3 0f 11 45 b8	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 1785 : 	zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  00188	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0018b	51		 push	 ecx
  0018c	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0019b	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  001a1	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  001a4	51		 push	 ecx
  001a5	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  001b4	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  001ba	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  001c0	52		 push	 edx
  001c1	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001cd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001d1	f3 0f 11 45 b4	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 1786 : 
; 1787 : 	scaled_rotation[0][0] = rotation_3d[0][0] * active_3d_environment->screen_i_scale * ( xmax / 32767.0 );

  001d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001db	6b c8 00	 imul	 ecx, eax, 0
  001de	ba 04 00 00 00	 mov	 edx, 4
  001e3	6b c2 00	 imul	 eax, edx, 0
  001e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001ec	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  001f5	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  001f9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001fd	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  00202	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0020a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0020e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00212	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00217	6b c8 00	 imul	 ecx, eax, 0
  0021a	ba 04 00 00 00	 mov	 edx, 4
  0021f	6b c2 00	 imul	 eax, edx, 0
  00222	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax], xmm0

; 1788 : 	scaled_rotation[0][1] = rotation_3d[0][1] * active_3d_environment->screen_j_scale * ( xmax / 32767.0 );

  0022b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00230	6b c8 00	 imul	 ecx, eax, 0
  00233	ba 04 00 00 00	 mov	 edx, 4
  00238	c1 e2 00	 shl	 edx, 0
  0023b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00240	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00249	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0024e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00252	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  00257	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0025f	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00263	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00267	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0026c	6b d1 00	 imul	 edx, ecx, 0
  0026f	b8 04 00 00 00	 mov	 eax, 4
  00274	c1 e0 00	 shl	 eax, 0
  00277	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1789 : 	scaled_rotation[0][2] = rotation_3d[0][2] * ( xmax / 32767.0 );

  00280	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00285	6b c8 00	 imul	 ecx, eax, 0
  00288	ba 04 00 00 00	 mov	 edx, 4
  0028d	d1 e2		 shl	 edx, 1
  0028f	f3 0f 5a 84 11
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00298	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  0029d	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  002a5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b2	6b c8 00	 imul	 ecx, eax, 0
  002b5	ba 04 00 00 00	 mov	 edx, 4
  002ba	d1 e2		 shl	 edx, 1
  002bc	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx], xmm0

; 1790 : 
; 1791 : 	scaled_rotation[1][0] = rotation_3d[1][0] * active_3d_environment->screen_i_scale * ( ymax / 32767.0 );

  002c5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002ca	c1 e0 00	 shl	 eax, 0
  002cd	b9 04 00 00 00	 mov	 ecx, 4
  002d2	6b d1 00	 imul	 edx, ecx, 0
  002d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002db	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  002e4	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  002e8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ec	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  002f1	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  002f9	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00301	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00306	c1 e2 00	 shl	 edx, 0
  00309	b8 04 00 00 00	 mov	 eax, 4
  0030e	6b c8 00	 imul	 ecx, eax, 0
  00311	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1792 : 	scaled_rotation[1][1] = rotation_3d[1][1] * active_3d_environment->screen_j_scale * ( ymax / 32767.0 );

  0031a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0031f	c1 e0 00	 shl	 eax, 0
  00322	b9 04 00 00 00	 mov	 ecx, 4
  00327	c1 e1 00	 shl	 ecx, 0
  0032a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00330	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00339	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0033e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00342	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00347	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0034f	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00353	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00357	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0035c	c1 e0 00	 shl	 eax, 0
  0035f	b9 04 00 00 00	 mov	 ecx, 4
  00364	c1 e1 00	 shl	 ecx, 0
  00367	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1793 : 	scaled_rotation[1][2] = rotation_3d[1][2] * ( ymax / 32767.0 );

  00370	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00375	c1 e0 00	 shl	 eax, 0
  00378	b9 04 00 00 00	 mov	 ecx, 4
  0037d	d1 e1		 shl	 ecx, 1
  0037f	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00388	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  0038d	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00395	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00399	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0039d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003a2	c1 e2 00	 shl	 edx, 0
  003a5	b8 04 00 00 00	 mov	 eax, 4
  003aa	d1 e0		 shl	 eax, 1
  003ac	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1794 : 
; 1795 : 	scaled_rotation[2][0] = rotation_3d[2][0] * active_3d_environment->screen_i_scale * ( zmax / 32767.0 );

  003b5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003ba	d1 e0		 shl	 eax, 1
  003bc	b9 04 00 00 00	 mov	 ecx, 4
  003c1	6b d1 00	 imul	 edx, ecx, 0
  003c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  003ca	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  003d3	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  003d7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003db	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  003e0	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  003e8	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f0	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003f5	d1 e2		 shl	 edx, 1
  003f7	b8 04 00 00 00	 mov	 eax, 4
  003fc	6b c8 00	 imul	 ecx, eax, 0
  003ff	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1796 : 	scaled_rotation[2][1] = rotation_3d[2][1] * active_3d_environment->screen_j_scale * ( zmax / 32767.0 );

  00408	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0040d	d1 e0		 shl	 eax, 1
  0040f	b9 04 00 00 00	 mov	 ecx, 4
  00414	c1 e1 00	 shl	 ecx, 0
  00417	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0041d	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00426	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0042b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0042f	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  00434	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0043c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00440	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00444	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00449	d1 e0		 shl	 eax, 1
  0044b	b9 04 00 00 00	 mov	 ecx, 4
  00450	c1 e1 00	 shl	 ecx, 0
  00453	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1797 : 	scaled_rotation[2][2] = rotation_3d[2][2] * ( zmax / 32767.0 );

  0045c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00461	d1 e0		 shl	 eax, 1
  00463	b9 04 00 00 00	 mov	 ecx, 4
  00468	d1 e1		 shl	 ecx, 1
  0046a	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00473	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  00478	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00480	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00484	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00488	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0048d	d1 e2		 shl	 edx, 1
  0048f	b8 04 00 00 00	 mov	 eax, 4
  00494	d1 e0		 shl	 eax, 1
  00496	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1798 : 
; 1799 : 	for ( count = number_of_points; count > 0; count-- )

  0049f	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  004a2	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  004a5	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  004a7	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004aa	83 e8 01	 sub	 eax, 1
  004ad	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  004b0	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  004b4	0f 8e d2 03 00
	00		 jle	 $LN3@transform_

; 1800 : 	{
; 1801 : 
; 1802 : 		{
; 1803 : 
; 1804 : 			float
; 1805 : 				point_x,
; 1806 : 				point_y,
; 1807 : 				point_z,
; 1808 : 				x,
; 1809 : 				y,
; 1810 : 				z;
; 1811 : 
; 1812 : 			int
; 1813 : 				point_index;
; 1814 : 
; 1815 : 			point_index = point_list->point;

  004ba	8b 45 90	 mov	 eax, DWORD PTR _point_list$[ebp]
  004bd	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  004c0	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _point_index$10[ebp], ecx

; 1816 : 			point_x = points[point_index].x;

  004c6	6b 85 74 ff ff
	ff 06		 imul	 eax, DWORD PTR _point_index$10[ebp], 6
  004cd	8b 4d f4	 mov	 ecx, DWORD PTR _points$[ebp]
  004d0	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  004d4	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004d8	f3 0f 11 45 8c	 movss	 DWORD PTR _point_x$16[ebp], xmm0

; 1817 : 			point_y = points[point_index].y;

  004dd	6b 85 74 ff ff
	ff 06		 imul	 eax, DWORD PTR _point_index$10[ebp], 6
  004e4	8b 4d f4	 mov	 ecx, DWORD PTR _points$[ebp]
  004e7	0f bf 54 01 02	 movsx	 edx, WORD PTR [ecx+eax+2]
  004ec	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004f0	f3 0f 11 45 88	 movss	 DWORD PTR _point_y$15[ebp], xmm0

; 1818 : 			point_z = points[point_index].z;

  004f5	6b 85 74 ff ff
	ff 06		 imul	 eax, DWORD PTR _point_index$10[ebp], 6
  004fc	8b 4d f4	 mov	 ecx, DWORD PTR _points$[ebp]
  004ff	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  00504	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00508	f3 0f 11 45 84	 movss	 DWORD PTR _point_z$14[ebp], xmm0

; 1819 : 
; 1820 : 			x = pos_x + point_x * scaled_rotation[0][0] + point_y * scaled_rotation[1][0] + point_z * scaled_rotation[2][0];

  0050d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00512	6b c8 00	 imul	 ecx, eax, 0
  00515	ba 04 00 00 00	 mov	 edx, 4
  0051a	6b c2 00	 imul	 eax, edx, 0
  0051d	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _point_x$16[ebp]
  00522	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  0052b	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  00530	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00535	c1 e1 00	 shl	 ecx, 0
  00538	ba 04 00 00 00	 mov	 edx, 4
  0053d	6b c2 00	 imul	 eax, edx, 0
  00540	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _point_y$15[ebp]
  00545	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  0054e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00552	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00557	d1 e1		 shl	 ecx, 1
  00559	ba 04 00 00 00	 mov	 edx, 4
  0055e	6b c2 00	 imul	 eax, edx, 0
  00561	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _point_z$14[ebp]
  00566	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  0056f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00573	f3 0f 11 45 80	 movss	 DWORD PTR _x$13[ebp], xmm0

; 1821 : 			y = pos_y + point_x * scaled_rotation[0][1] + point_y * scaled_rotation[1][1] + point_z * scaled_rotation[2][1];

  00578	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0057d	6b c8 00	 imul	 ecx, eax, 0
  00580	ba 04 00 00 00	 mov	 edx, 4
  00585	c1 e2 00	 shl	 edx, 0
  00588	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _point_x$16[ebp]
  0058d	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  00596	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  0059b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005a0	c1 e0 00	 shl	 eax, 0
  005a3	b9 04 00 00 00	 mov	 ecx, 4
  005a8	c1 e1 00	 shl	 ecx, 0
  005ab	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _point_y$15[ebp]
  005b0	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  005b9	f3 0f 58 c1	 addss	 xmm0, xmm1
  005bd	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005c2	d1 e2		 shl	 edx, 1
  005c4	b8 04 00 00 00	 mov	 eax, 4
  005c9	c1 e0 00	 shl	 eax, 0
  005cc	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _point_z$14[ebp]
  005d1	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  005da	f3 0f 58 c1	 addss	 xmm0, xmm1
  005de	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y$12[ebp], xmm0

; 1822 : 			z = pos_z + point_x * scaled_rotation[0][2] + point_y * scaled_rotation[1][2] + point_z * scaled_rotation[2][2];

  005e6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005eb	6b c8 00	 imul	 ecx, eax, 0
  005ee	ba 04 00 00 00	 mov	 edx, 4
  005f3	d1 e2		 shl	 edx, 1
  005f5	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _point_x$16[ebp]
  005fa	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  00603	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  00608	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0060d	c1 e0 00	 shl	 eax, 0
  00610	b9 04 00 00 00	 mov	 ecx, 4
  00615	d1 e1		 shl	 ecx, 1
  00617	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _point_y$15[ebp]
  0061c	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  00625	f3 0f 58 c1	 addss	 xmm0, xmm1
  00629	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0062e	d1 e2		 shl	 edx, 1
  00630	b8 04 00 00 00	 mov	 eax, 4
  00635	d1 e0		 shl	 eax, 1
  00637	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _point_z$14[ebp]
  0063c	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  00645	f3 0f 58 c1	 addss	 xmm0, xmm1
  00649	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _z$11[ebp], xmm0

; 1823 : 
; 1824 : 			result_3d_points[point_index].x = x;

  00651	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  00657	8b 4d f0	 mov	 ecx, DWORD PTR _result_3d_points$[ebp]
  0065a	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _x$13[ebp]
  0065f	f3 0f 11 04 c1	 movss	 DWORD PTR [ecx+eax*8], xmm0

; 1825 : 			result_3d_points[point_index].y = y;

  00664	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  0066a	8b 4d f0	 mov	 ecx, DWORD PTR _result_3d_points$[ebp]
  0066d	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$12[ebp]
  00675	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 1826 : 			result_2d_points[point_index].z = z;

  0067b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  00681	c1 e0 04	 shl	 eax, 4
  00684	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00687	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _z$11[ebp]
  0068f	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 1827 : 
; 1828 : 			if ( *( ( int * ) &result_2d_points[point_index].z ) >= *( ( int * ) &clip_hither ) )

  00695	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  0069b	c1 e0 04	 shl	 eax, 4
  0069e	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  006a1	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  006a5	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?clip_hither@@3MA
  006ab	0f 8c c1 01 00
	00		 jl	 $LN7@transform_

; 1829 : 			{
; 1830 : 
; 1831 : 				float
; 1832 : 					q,
; 1833 : 					i,
; 1834 : 					j;
; 1835 : 
; 1836 : 				oxmax = active_viewport.x_max - last_transformed_point->i;

  006b1	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006b4	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  006bc	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  006c0	f3 0f 11 45 b0	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1837 : 				oxmin = last_transformed_point->i - active_viewport.x_min;

  006c5	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006c8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006cc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  006d4	f3 0f 11 45 ac	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1838 : 				oymax = active_viewport.y_max - last_transformed_point->j;

  006d9	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006dc	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  006e4	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  006e9	f3 0f 11 45 a8	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1839 : 				oymin = last_transformed_point->j - active_viewport.y_min;

  006ee	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006f1	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006f6	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  006fe	f3 0f 11 45 a4	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1840 : 
; 1841 : 				ixmax = *( ( unsigned int * ) &oxmax );

  00703	8b 45 b0	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00706	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1842 : 				ixmin = *( ( unsigned int * ) &oxmin );

  00709	8b 45 ac	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0070c	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1843 : 				iymax = *( ( unsigned int * ) &oymax );

  0070f	8b 45 a8	 mov	 eax, DWORD PTR _oymax$[ebp]
  00712	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 1844 : 				iymin = *( ( unsigned int * ) &oymin );

  00715	8b 45 a4	 mov	 eax, DWORD PTR _oymin$[ebp]
  00718	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 1845 : 
; 1846 : 				q = 1.0 / result_2d_points[point_index].z;

  0071b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  00721	c1 e0 04	 shl	 eax, 4
  00724	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00727	f3 0f 5a 44 01
	0c		 cvtss2sd xmm0, DWORD PTR [ecx+eax+12]
  0072d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00735	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00739	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0073d	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _q$9[ebp], xmm0

; 1847 : 
; 1848 : 				ixmin >>= 31;

  00745	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00748	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0074b	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1849 : 				iymin &= 0x80000000;

  0074e	8b 45 94	 mov	 eax, DWORD PTR _iymin$[ebp]
  00751	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00756	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 1850 : 				ixmax >>= 29;

  00759	8b 45 a0	 mov	 eax, DWORD PTR _ixmax$[ebp]
  0075c	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  0075f	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1851 : 				iymax &= 0x80000000;

  00762	8b 45 98	 mov	 eax, DWORD PTR _iymax$[ebp]
  00765	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0076a	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 1852 : 				iymin >>= 30;

  0076d	8b 45 94	 mov	 eax, DWORD PTR _iymin$[ebp]
  00770	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  00773	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 1853 : 				ixmin &= 0x00000001;

  00776	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00779	83 e0 01	 and	 eax, 1
  0077c	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1854 : 				iymax >>= 28;

  0077f	8b 45 98	 mov	 eax, DWORD PTR _iymax$[ebp]
  00782	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  00785	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 1855 : 				ixmax &= 0x00000004;

  00788	8b 45 a0	 mov	 eax, DWORD PTR _ixmax$[ebp]
  0078b	83 e0 04	 and	 eax, 4
  0078e	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1856 : 				ixmin |= iymin;

  00791	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00794	0b 45 94	 or	 eax, DWORD PTR _iymin$[ebp]
  00797	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1857 : 				ixmax |= iymax;

  0079a	8b 45 a0	 mov	 eax, DWORD PTR _ixmax$[ebp]
  0079d	0b 45 98	 or	 eax, DWORD PTR _iymax$[ebp]
  007a0	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1858 : 				*last_transformed_point_outcode = ( ixmin | ixmax );

  007a3	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  007a6	0b 45 a0	 or	 eax, DWORD PTR _ixmax$[ebp]
  007a9	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  007ac	88 01		 mov	 BYTE PTR [ecx], al

; 1859 : 
; 1860 : 				last_transformed_point = &result_2d_points[point_index];

  007ae	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  007b4	c1 e0 04	 shl	 eax, 4
  007b7	03 45 ec	 add	 eax, DWORD PTR _result_2d_points$[ebp]
  007ba	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 1861 : 
; 1862 : 				last_transformed_point_outcode = &result_outcode[point_index];

  007bd	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  007c0	03 85 74 ff ff
	ff		 add	 eax, DWORD PTR _point_index$10[ebp]
  007c6	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 1863 : 
; 1864 : 				i = ( result_3d_points[point_index].x * q );

  007c9	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  007cf	8b 4d f0	 mov	 ecx, DWORD PTR _result_3d_points$[ebp]
  007d2	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [ecx+eax*8]
  007d7	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  007df	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _i$8[ebp], xmm0

; 1865 : 				j = ( result_3d_points[point_index].y * q );

  007e7	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  007ed	8b 4d f0	 mov	 ecx, DWORD PTR _result_3d_points$[ebp]
  007f0	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [ecx+eax*8+4]
  007f6	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  007fe	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _j$7[ebp], xmm0

; 1866 : 
; 1867 : 				result_2d_points[point_index].q = q;

  00806	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  0080c	c1 e0 04	 shl	 eax, 4
  0080f	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00812	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _q$9[ebp]
  0081a	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1868 : 				result_2d_points[point_index].j = environment_y_origin - j;

  00820	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_y_origin@@3MA
  00828	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _j$7[ebp]
  00830	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  00836	c1 e0 04	 shl	 eax, 4
  00839	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  0083c	f3 0f 11 44 01
	04		 movss	 DWORD PTR [ecx+eax+4], xmm0

; 1869 : 				result_2d_points[point_index].i = environment_x_origin + i;

  00842	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_x_origin@@3MA
  0084a	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _i$8[ebp]
  00852	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$10[ebp]
  00858	c1 e0 04	 shl	 eax, 4
  0085b	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  0085e	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1870 : 
; 1871 : #if DEBUG_STATS
; 1872 : 				current_number_of_3d_points_transformed++;

  00863	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_number_of_3d_points_transformed@@3HA ; current_number_of_3d_points_transformed
  00868	83 c0 01	 add	 eax, 1
  0086b	a3 00 00 00 00	 mov	 DWORD PTR ?current_number_of_3d_points_transformed@@3HA, eax ; current_number_of_3d_points_transformed

; 1873 : #endif
; 1874 : 			}
; 1875 : 			else

  00870	eb 0c		 jmp	 SHORT $LN8@transform_
$LN7@transform_:

; 1876 : 			{
; 1877 : 
; 1878 : 				result_outcode[point_index] = CLIP_HITHER;

  00872	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  00875	03 85 74 ff ff
	ff		 add	 eax, DWORD PTR _point_index$10[ebp]
  0087b	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN8@transform_:

; 1879 : 			}
; 1880 : 		}
; 1881 : 
; 1882 : 		point_list++;

  0087e	8b 45 90	 mov	 eax, DWORD PTR _point_list$[ebp]
  00881	83 c0 02	 add	 eax, 2
  00884	89 45 90	 mov	 DWORD PTR _point_list$[ebp], eax

; 1883 : 	}

  00887	e9 1b fc ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 1884 : 
; 1885 : 	oxmax = active_viewport.x_max - last_transformed_point->i;

  0088c	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0088f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00897	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0089b	f3 0f 11 45 b0	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1886 : 	oxmin = last_transformed_point->i - active_viewport.x_min;

  008a0	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  008a3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  008a7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  008af	f3 0f 11 45 ac	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1887 : 	oymax = active_viewport.y_max - last_transformed_point->j;

  008b4	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  008b7	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  008bf	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  008c4	f3 0f 11 45 a8	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1888 : 	oymin = last_transformed_point->j - active_viewport.y_min;

  008c9	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  008cc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  008d1	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  008d9	f3 0f 11 45 a4	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1889 : 
; 1890 : 	ixmax = *( ( int * ) &oxmax );

  008de	8b 45 b0	 mov	 eax, DWORD PTR _oxmax$[ebp]
  008e1	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1891 : 	ixmin = *( ( int * ) &oxmin );

  008e4	8b 45 ac	 mov	 eax, DWORD PTR _oxmin$[ebp]
  008e7	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1892 : 	iymax = *( ( int * ) &oymax );

  008ea	8b 45 a8	 mov	 eax, DWORD PTR _oymax$[ebp]
  008ed	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 1893 : 	iymin = *( ( int * ) &oymin );

  008f0	8b 45 a4	 mov	 eax, DWORD PTR _oymin$[ebp]
  008f3	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 1894 : 
; 1895 : 	*last_transformed_point_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  008f6	8b 45 98	 mov	 eax, DWORD PTR _iymax$[ebp]
  008f9	50		 push	 eax
  008fa	8b 4d a0	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  008fd	51		 push	 ecx
  008fe	8b 55 94	 mov	 edx, DWORD PTR _iymin$[ebp]
  00901	52		 push	 edx
  00902	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00905	50		 push	 eax
  00906	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  0090b	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  0090e	88 01		 mov	 BYTE PTR [ecx], al

; 1896 : }

  00910	5f		 pop	 edi
  00911	5e		 pop	 esi
  00912	5b		 pop	 ebx
  00913	8b e5		 mov	 esp, ebp
  00915	5d		 pop	 ebp
  00916	c2 14 00	 ret	 20			; 00000014H
?transform_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; transform_3d_object_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
_temp_intensity$1 = -260				; size = 4
_this_light$2 = -256					; size = 4
_ib$3 = -252						; size = 4
_ig$4 = -248						; size = 4
_ir$5 = -244						; size = 4
_specular$6 = -240					; size = 4
_b$7 = -236						; size = 4
_g$8 = -232						; size = 4
_r$9 = -228						; size = 4
_ib$10 = -224						; size = 4
_ig$11 = -220						; size = 4
_ir$12 = -216						; size = 4
_s_intensity$13 = -212					; size = 4
_d_intensity$14 = -208					; size = 4
_s$15 = -204						; size = 4
_b$16 = -200						; size = 4
_g$17 = -196						; size = 4
_r$18 = -192						; size = 4
_highlight_vector$19 = -188				; size = 12
_light_vector$20 = -176					; size = 12
_normal_colour$21 = -164				; size = 4
_ib$22 = -160						; size = 4
_ig$23 = -156						; size = 4
_ir$24 = -152						; size = 4
_temp_intensity$25 = -148				; size = 4
_this_light$26 = -144					; size = 4
_ib$27 = -140						; size = 4
_ig$28 = -136						; size = 4
_ir$29 = -132						; size = 4
_specular$30 = -128					; size = 4
_b$31 = -124						; size = 4
_g$32 = -120						; size = 4
_r$33 = -116						; size = 4
_ib$34 = -112						; size = 4
_ig$35 = -108						; size = 4
_ir$36 = -104						; size = 4
_s_intensity$37 = -100					; size = 4
_d_intensity$38 = -96					; size = 4
_s$39 = -92						; size = 4
_b$40 = -88						; size = 4
_g$41 = -84						; size = 4
_r$42 = -80						; size = 4
_highlight_vector$43 = -76				; size = 12
_light_vector$44 = -64					; size = 12
_normal_colour$45 = -52					; size = 4
_ib$46 = -48						; size = 4
_ig$47 = -44						; size = 4
_ir$48 = -40						; size = 4
_normal$ = -36						; size = 12
_normals$ = -24						; size = 4
_point_list$ = -20					; size = 4
_result_normals$ = -16					; size = 4
_count$ = -12						; size = 4
_point_index$ = -8					; size = 4
_number_of_points$ = -4					; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; illuminate_3d_object_surface, COMDAT

; 1180 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1181 : 
; 1182 : 	int
; 1183 : 		number_of_points,
; 1184 : 		point_index,
; 1185 : 		count;
; 1186 : 
; 1187 : 	object_3d_transformed_point_normal
; 1188 : 		*result_normals;
; 1189 : 
; 1190 : 	point_3d_plain_reference
; 1191 : 		*point_list;
; 1192 : 
; 1193 : 	object_3d_heading_pitch_normal
; 1194 : 		*normals;
; 1195 : 
; 1196 : 	vec3d
; 1197 : 		normal;
; 1198 : 
; 1199 : 	if ( !object->number_of_lighting_normals )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0000f	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00013	85 c9		 test	 ecx, ecx
  00015	75 05		 jne	 SHORT $LN24@illuminate

; 1200 : 	{
; 1201 : 
; 1202 : 		return;

  00017	e9 1e 10 00 00	 jmp	 $LN1@illuminate
$LN24@illuminate:

; 1203 : 	}
; 1204 : 
; 1205 : 	result_normals = &transformed_3d_normals[points_base];

  0001c	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0001f	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A[eax*8]
  00026	89 4d f0	 mov	 DWORD PTR _result_normals$[ebp], ecx

; 1206 : 
; 1207 : 	normals = object->point_normals;

  00029	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0002c	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0002f	89 4d e8	 mov	 DWORD PTR _normals$[ebp], ecx

; 1208 : 
; 1209 : 	if ( current_object_3d_surface->smoothed )

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00037	66 8b 08	 mov	 cx, WORD PTR [eax]
  0003a	66 c1 e9 02	 shr	 cx, 2
  0003e	66 83 e1 01	 and	 cx, 1
  00042	0f b7 d1	 movzx	 edx, cx
  00045	85 d2		 test	 edx, edx
  00047	0f 84 66 07 00
	00		 je	 $LN25@illuminate

; 1210 : 	{
; 1211 : 
; 1212 : 		point_list = current_object_3d_surface_point_normal_list;

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
  00052	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1213 : 
; 1214 : 		number_of_points = current_object_3d_surface->number_of_points;

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0005a	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0005e	89 4d fc	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 1215 : 
; 1216 : 		if ( number_of_points == 0 )

  00061	83 7d fc 00	 cmp	 DWORD PTR _number_of_points$[ebp], 0
  00065	75 07		 jne	 SHORT $LN27@illuminate

; 1217 : 		{
; 1218 : 
; 1219 : 			number_of_points = 256;

  00067	c7 45 fc 00 01
	00 00		 mov	 DWORD PTR _number_of_points$[ebp], 256 ; 00000100H
$LN27@illuminate:

; 1220 : 		}
; 1221 : 
; 1222 : 		ASSERT ( ( number_of_points + points_base ) < MAX_POINTS );

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00071	03 45 18	 add	 eax, DWORD PTR _points_base$[ebp]
  00074	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00079	7c 18		 jl	 SHORT $LN28@illuminate
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  00080	83 c0 2a	 add	 eax, 42			; 0000002aH
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
  0008e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN28@illuminate:

; 1223 : 
; 1224 : 		if ( !lights )

  00093	83 7d 10 00	 cmp	 DWORD PTR _lights$[ebp], 0
  00097	0f 85 c2 00 00
	00		 jne	 $LN29@illuminate

; 1225 : 		{
; 1226 : 
; 1227 : 			int
; 1228 : 				ir,
; 1229 : 				ig,
; 1230 : 				ib;
; 1231 : 
; 1232 : 			real_colour
; 1233 : 				normal_colour;
; 1234 : 
; 1235 : 			asm_convert_float_to_int (  ( ambient_3d_light.colour.red * 255 ), &ir );

  0009d	8d 45 d8	 lea	 eax, DWORD PTR _ir$48[ebp]
  000a0	50		 push	 eax
  000a1	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  000a9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b1	51		 push	 ecx
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1236 : 			asm_convert_float_to_int (  ( ambient_3d_light.colour.green * 255 ), &ig );

  000bc	8d 45 d4	 lea	 eax, DWORD PTR _ig$47[ebp]
  000bf	50		 push	 eax
  000c0	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  000c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000d0	51		 push	 ecx
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1237 : 			asm_convert_float_to_int (  ( ambient_3d_light.colour.blue * 255 ), &ib );

  000db	8d 45 d0	 lea	 eax, DWORD PTR _ib$46[ebp]
  000de	50		 push	 eax
  000df	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  000e7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000ef	51		 push	 ecx
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1238 : 
; 1239 : 			normal_colour.red = ir;

  000fa	8a 45 d8	 mov	 al, BYTE PTR _ir$48[ebp]
  000fd	88 45 ce	 mov	 BYTE PTR _normal_colour$45[ebp+2], al

; 1240 : 			normal_colour.green = ig;

  00100	8a 45 d4	 mov	 al, BYTE PTR _ig$47[ebp]
  00103	88 45 cd	 mov	 BYTE PTR _normal_colour$45[ebp+1], al

; 1241 : 			normal_colour.blue = ib;

  00106	8a 45 d0	 mov	 al, BYTE PTR _ib$46[ebp]
  00109	88 45 cc	 mov	 BYTE PTR _normal_colour$45[ebp], al

; 1242 : 			normal_colour.alpha = current_object_3d_dissolve_value;

  0010c	a0 00 00 00 00	 mov	 al, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  00111	88 45 cf	 mov	 BYTE PTR _normal_colour$45[ebp+3], al

; 1243 : 
; 1244 : 			for ( count = number_of_points; count > 0; count-- )

  00114	8b 45 fc	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00117	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
  0011a	eb 09		 jmp	 SHORT $LN4@illuminate
$LN2@illuminate:
  0011c	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0011f	83 e8 01	 sub	 eax, 1
  00122	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN4@illuminate:
  00125	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00129	7e 2f		 jle	 SHORT $LN3@illuminate

; 1245 : 			{
; 1246 : 
; 1247 : 				point_index = point_list->point;

  0012b	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  0012e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00131	89 4d f8	 mov	 DWORD PTR _point_index$[ebp], ecx

; 1248 : 
; 1249 : 				result_normals[point_index].colour = normal_colour.colour;

  00134	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00137	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  0013a	8b 55 cc	 mov	 edx, DWORD PTR _normal_colour$45[ebp]
  0013d	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx

; 1250 : 				result_normals[point_index].specular = 0;

  00140	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00143	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00146	0f 57 c0	 xorps	 xmm0, xmm0
  00149	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 1251 : 
; 1252 : 				point_list++;

  0014f	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  00152	83 c0 02	 add	 eax, 2
  00155	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1253 : 			}

  00158	eb c2		 jmp	 SHORT $LN2@illuminate
$LN3@illuminate:

; 1254 : 		}
; 1255 : 		else if ( !lights->succ )

  0015a	e9 4f 06 00 00	 jmp	 $LN9@illuminate
$LN29@illuminate:
  0015f	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00162	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00166	0f 85 f4 02 00
	00		 jne	 $LN31@illuminate

; 1256 : 		{
; 1257 : 
; 1258 : 			vec3d
; 1259 : 				light_vector,
; 1260 : 				highlight_vector;
; 1261 : 
; 1262 : 			light_vector.x = lights->lx;

  0016c	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0016f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00173	f3 0f 11 45 c0	 movss	 DWORD PTR _light_vector$44[ebp], xmm0

; 1263 : 			light_vector.y = lights->ly;

  00178	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0017b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00180	f3 0f 11 45 c4	 movss	 DWORD PTR _light_vector$44[ebp+4], xmm0

; 1264 : 			light_vector.z = lights->lz;

  00185	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00188	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0018d	f3 0f 11 45 c8	 movss	 DWORD PTR _light_vector$44[ebp+8], xmm0

; 1265 : 
; 1266 : 			highlight_vector.x = lights->highlight_vector.x;

  00192	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00195	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0019a	f3 0f 11 45 b4	 movss	 DWORD PTR _highlight_vector$43[ebp], xmm0

; 1267 : 			highlight_vector.y = lights->highlight_vector.y;

  0019f	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  001a2	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  001a7	f3 0f 11 45 b8	 movss	 DWORD PTR _highlight_vector$43[ebp+4], xmm0

; 1268 : 			highlight_vector.z = lights->highlight_vector.z;

  001ac	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  001af	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  001b4	f3 0f 11 45 bc	 movss	 DWORD PTR _highlight_vector$43[ebp+8], xmm0

; 1269 : 
; 1270 : 			for ( count = number_of_points; count > 0; count-- )

  001b9	8b 45 fc	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  001bc	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
  001bf	eb 09		 jmp	 SHORT $LN7@illuminate
$LN5@illuminate:
  001c1	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001c4	83 e8 01	 sub	 eax, 1
  001c7	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN7@illuminate:
  001ca	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  001ce	0f 8e 87 02 00
	00		 jle	 $LN6@illuminate

; 1271 : 			{
; 1272 : 
; 1273 : 				float
; 1274 : 					r,
; 1275 : 					g,
; 1276 : 					b,
; 1277 : 					s,
; 1278 : 					d_intensity,
; 1279 : 					s_intensity;
; 1280 : 
; 1281 : 				int
; 1282 : 					ir,
; 1283 : 					ig,
; 1284 : 					ib;
; 1285 : 
; 1286 : 				//
; 1287 : 				// Set the light levels
; 1288 : 				//
; 1289 : 
; 1290 : 				r = ambient_3d_light.colour.red;

  001d4	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  001dc	f3 0f 11 45 b0	 movss	 DWORD PTR _r$42[ebp], xmm0

; 1291 : 				g = ambient_3d_light.colour.green;

  001e1	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  001e9	f3 0f 11 45 ac	 movss	 DWORD PTR _g$41[ebp], xmm0

; 1292 : 				b = ambient_3d_light.colour.blue;

  001ee	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  001f6	f3 0f 11 45 a8	 movss	 DWORD PTR _b$40[ebp], xmm0

; 1293 : 
; 1294 : 				s = 0;

  001fb	0f 57 c0	 xorps	 xmm0, xmm0
  001fe	f3 0f 11 45 a4	 movss	 DWORD PTR _s$39[ebp], xmm0

; 1295 : 
; 1296 : 				point_index = point_list->point;

  00203	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  00206	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00209	89 4d f8	 mov	 DWORD PTR _point_index$[ebp], ecx

; 1297 : 
; 1298 : 				generate_object_3d_point_normal ( &normals[point_index], &normal );

  0020c	8d 45 dc	 lea	 eax, DWORD PTR _normal$[ebp]
  0020f	50		 push	 eax
  00210	8b 4d f8	 mov	 ecx, DWORD PTR _point_index$[ebp]
  00213	8b 55 e8	 mov	 edx, DWORD PTR _normals$[ebp]
  00216	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1299 : 
; 1300 : 				//
; 1301 : 				// Calculate diffuse colour intensities
; 1302 : 				//
; 1303 : 
; 1304 : 				d_intensity = normal.x * lights->lx + normal.y * lights->ly + normal.z * lights->lz;

  0021f	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00222	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  00227	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0022b	8b 4d 10	 mov	 ecx, DWORD PTR _lights$[ebp]
  0022e	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  00233	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  00238	f3 0f 58 c1	 addss	 xmm0, xmm1
  0023c	8b 55 10	 mov	 edx, DWORD PTR _lights$[ebp]
  0023f	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  00244	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00249	f3 0f 58 c1	 addss	 xmm0, xmm1
  0024d	f3 0f 11 45 a0	 movss	 DWORD PTR _d_intensity$38[ebp], xmm0

; 1305 : 				s_intensity =	normal.x * lights->highlight_vector.x +

  00252	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00255	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  0025a	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  0025f	8b 4d 10	 mov	 ecx, DWORD PTR _lights$[ebp]
  00262	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  00267	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  0026c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00270	8b 55 10	 mov	 edx, DWORD PTR _lights$[ebp]
  00273	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  00278	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  0027d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00281	f3 0f 11 45 9c	 movss	 DWORD PTR _s_intensity$37[ebp], xmm0

; 1306 : 									normal.y * lights->highlight_vector.y +
; 1307 : 									normal.z * lights->highlight_vector.z;
; 1308 : 
; 1309 : //				d_intensity *= 1.0 / 32767.0;
; 1310 : //				s_intensity *= 1.0 / 32767.0;
; 1311 : 
; 1312 : 				if ( *( ( int *) &d_intensity ) > *( ( int *) &float_value_zero ) )

  00286	8b 45 a0	 mov	 eax, DWORD PTR _d_intensity$38[ebp]
  00289	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  0028f	7e 54		 jle	 SHORT $LN33@illuminate

; 1313 : 				{
; 1314 : 
; 1315 : 					d_intensity *= d_intensity;

  00291	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _d_intensity$38[ebp]
  00296	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _d_intensity$38[ebp]
  0029b	f3 0f 11 45 a0	 movss	 DWORD PTR _d_intensity$38[ebp], xmm0

; 1316 : 
; 1317 : 					r += d_intensity * lights->colour.red;

  002a0	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  002a3	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _d_intensity$38[ebp]
  002a8	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  002ad	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _r$42[ebp]
  002b2	f3 0f 11 45 b0	 movss	 DWORD PTR _r$42[ebp], xmm0

; 1318 : 					g += d_intensity * lights->colour.green;

  002b7	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  002ba	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _d_intensity$38[ebp]
  002bf	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  002c4	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _g$41[ebp]
  002c9	f3 0f 11 45 ac	 movss	 DWORD PTR _g$41[ebp], xmm0

; 1319 : 					b += d_intensity * lights->colour.blue;

  002ce	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  002d1	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _d_intensity$38[ebp]
  002d6	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  002db	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _b$40[ebp]
  002e0	f3 0f 11 45 a8	 movss	 DWORD PTR _b$40[ebp], xmm0
$LN33@illuminate:

; 1320 : 				}
; 1321 : 
; 1322 : 				//
; 1323 : 				// Calculate specular colour intensities
; 1324 : 				//
; 1325 : 
; 1326 : 				if ( *( ( int *) &s_intensity ) > *( ( int *) &float_value_zero ) )

  002e5	8b 45 9c	 mov	 eax, DWORD PTR _s_intensity$37[ebp]
  002e8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  002ee	7e 62		 jle	 SHORT $LN34@illuminate

; 1327 : 				{
; 1328 : 
; 1329 : 					s_intensity *= s_intensity;

  002f0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  002f5	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  002fa	f3 0f 11 45 9c	 movss	 DWORD PTR _s_intensity$37[ebp], xmm0

; 1330 : 					s_intensity *= s_intensity;

  002ff	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00304	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00309	f3 0f 11 45 9c	 movss	 DWORD PTR _s_intensity$37[ebp], xmm0

; 1331 : 					s_intensity *= s_intensity;

  0030e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00313	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00318	f3 0f 11 45 9c	 movss	 DWORD PTR _s_intensity$37[ebp], xmm0

; 1332 : 					s_intensity *= s_intensity;

  0031d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00322	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00327	f3 0f 11 45 9c	 movss	 DWORD PTR _s_intensity$37[ebp], xmm0

; 1333 : 					s_intensity *= s_intensity;

  0032c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00331	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00336	f3 0f 11 45 9c	 movss	 DWORD PTR _s_intensity$37[ebp], xmm0

; 1334 : 
; 1335 : 					s += s_intensity * lights->intensity;

  0033b	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0033e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _s_intensity$37[ebp]
  00343	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  00348	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _s$39[ebp]
  0034d	f3 0f 11 45 a4	 movss	 DWORD PTR _s$39[ebp], xmm0
$LN34@illuminate:

; 1336 : 				}
; 1337 : 
; 1338 : 				if ( *( ( int *) &r ) > *( ( int *) &float_value_one ) )	{ r = 1.0; }

  00352	8b 45 b0	 mov	 eax, DWORD PTR _r$42[ebp]
  00355	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  0035b	7e 0d		 jle	 SHORT $LN35@illuminate
  0035d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00365	f3 0f 11 45 b0	 movss	 DWORD PTR _r$42[ebp], xmm0
$LN35@illuminate:

; 1339 : 				if ( *( ( int *) &g ) > *( ( int *) &float_value_one ) )	{ g = 1.0; }

  0036a	8b 45 ac	 mov	 eax, DWORD PTR _g$41[ebp]
  0036d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00373	7e 0d		 jle	 SHORT $LN36@illuminate
  00375	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0037d	f3 0f 11 45 ac	 movss	 DWORD PTR _g$41[ebp], xmm0
$LN36@illuminate:

; 1340 : 				if ( *( ( int *) &b ) > *( ( int *) &float_value_one ) )	{ b = 1.0; }

  00382	8b 45 a8	 mov	 eax, DWORD PTR _b$40[ebp]
  00385	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  0038b	7e 0d		 jle	 SHORT $LN37@illuminate
  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00395	f3 0f 11 45 a8	 movss	 DWORD PTR _b$40[ebp], xmm0
$LN37@illuminate:

; 1341 : 				if ( *( ( int *) &s ) > *( ( int *) &float_value_one ) )	{ s = 1.0; }

  0039a	8b 45 a4	 mov	 eax, DWORD PTR _s$39[ebp]
  0039d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  003a3	7e 0d		 jle	 SHORT $LN38@illuminate
  003a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ad	f3 0f 11 45 a4	 movss	 DWORD PTR _s$39[ebp], xmm0
$LN38@illuminate:

; 1342 : 
; 1343 : 				asm_convert_float_to_int ( ( r * 255 ), &ir );

  003b2	8d 45 98	 lea	 eax, DWORD PTR _ir$36[ebp]
  003b5	50		 push	 eax
  003b6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _r$42[ebp]
  003bb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003c3	51		 push	 ecx
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1344 : 				asm_convert_float_to_int ( ( g * 255 ), &ig );

  003ce	8d 45 94	 lea	 eax, DWORD PTR _ig$35[ebp]
  003d1	50		 push	 eax
  003d2	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _g$41[ebp]
  003d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003df	51		 push	 ecx
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1345 : 				asm_convert_float_to_int ( ( b * 255 ), &ib );

  003ea	8d 45 90	 lea	 eax, DWORD PTR _ib$34[ebp]
  003ed	50		 push	 eax
  003ee	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _b$40[ebp]
  003f3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003fb	51		 push	 ecx
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1346 : 
; 1347 : 				result_normals[point_index].r = ir;

  00406	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00409	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  0040c	8a 55 98	 mov	 dl, BYTE PTR _ir$36[ebp]
  0040f	88 54 c1 02	 mov	 BYTE PTR [ecx+eax*8+2], dl

; 1348 : 				result_normals[point_index].g = ig;

  00413	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00416	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00419	8a 55 94	 mov	 dl, BYTE PTR _ig$35[ebp]
  0041c	88 54 c1 01	 mov	 BYTE PTR [ecx+eax*8+1], dl

; 1349 : 				result_normals[point_index].b = ib;

  00420	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00423	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00426	8a 55 90	 mov	 dl, BYTE PTR _ib$34[ebp]
  00429	88 14 c1	 mov	 BYTE PTR [ecx+eax*8], dl

; 1350 : 				result_normals[point_index].alpha = current_object_3d_dissolve_value;

  0042c	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  0042f	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00432	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  00438	88 54 c1 03	 mov	 BYTE PTR [ecx+eax*8+3], dl

; 1351 : 				result_normals[point_index].specular = s;

  0043c	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  0043f	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00442	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _s$39[ebp]
  00447	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 1352 : 
; 1353 : 				point_list++;

  0044d	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  00450	83 c0 02	 add	 eax, 2
  00453	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1354 : 			}

  00456	e9 66 fd ff ff	 jmp	 $LN5@illuminate
$LN6@illuminate:

; 1355 : 		}
; 1356 : 		else

  0045b	e9 4e 03 00 00	 jmp	 $LN9@illuminate
$LN31@illuminate:

; 1357 : 		{
; 1358 : 
; 1359 : 			for ( count = number_of_points; count > 0; count-- )

  00460	8b 45 fc	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00463	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
  00466	eb 09		 jmp	 SHORT $LN10@illuminate
$LN8@illuminate:
  00468	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0046b	83 e8 01	 sub	 eax, 1
  0046e	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN10@illuminate:
  00471	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00475	0f 8e 33 03 00
	00		 jle	 $LN9@illuminate

; 1360 : 			{
; 1361 : 
; 1362 : 				float
; 1363 : 					r,
; 1364 : 					g,
; 1365 : 					b,
; 1366 : 					specular;
; 1367 : 
; 1368 : 				int
; 1369 : 					ir,
; 1370 : 					ig,
; 1371 : 					ib;
; 1372 : 
; 1373 : 				light_3d_source
; 1374 : 					*this_light;
; 1375 : 
; 1376 : 				//
; 1377 : 				// Set the light levels
; 1378 : 				//
; 1379 : 
; 1380 : 				r = ambient_3d_light.colour.red;

  0047b	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  00483	f3 0f 11 45 8c	 movss	 DWORD PTR _r$33[ebp], xmm0

; 1381 : 				g = ambient_3d_light.colour.green;

  00488	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  00490	f3 0f 11 45 88	 movss	 DWORD PTR _g$32[ebp], xmm0

; 1382 : 				b = ambient_3d_light.colour.blue;

  00495	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  0049d	f3 0f 11 45 84	 movss	 DWORD PTR _b$31[ebp], xmm0

; 1383 : 
; 1384 : 				specular = 0;

  004a2	0f 57 c0	 xorps	 xmm0, xmm0
  004a5	f3 0f 11 45 80	 movss	 DWORD PTR _specular$30[ebp], xmm0

; 1385 : 
; 1386 : 				point_index = point_list->point;

  004aa	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  004ad	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  004b0	89 4d f8	 mov	 DWORD PTR _point_index$[ebp], ecx

; 1387 : 
; 1388 : 				generate_object_3d_point_normal ( &normals[point_index], &normal );

  004b3	8d 45 dc	 lea	 eax, DWORD PTR _normal$[ebp]
  004b6	50		 push	 eax
  004b7	8b 4d f8	 mov	 ecx, DWORD PTR _point_index$[ebp]
  004ba	8b 55 e8	 mov	 edx, DWORD PTR _normals$[ebp]
  004bd	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  004c0	50		 push	 eax
  004c1	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1389 : 
; 1390 : 				this_light = lights;

  004c6	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  004c9	89 85 70 ff ff
	ff		 mov	 DWORD PTR _this_light$26[ebp], eax
$LN11@illuminate:

; 1391 : 
; 1392 : 				while ( this_light )

  004cf	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _this_light$26[ebp], 0
  004d6	0f 84 b7 01 00
	00		 je	 $LN12@illuminate

; 1393 : 				{
; 1394 : 
; 1395 : 					float
; 1396 : 						temp_intensity;
; 1397 : 
; 1398 : 					//
; 1399 : 					// Calculate diffuse colour intensities
; 1400 : 					//
; 1401 : 
; 1402 : 					temp_intensity = normal.x * this_light->lx + normal.y * this_light->ly + normal.z * this_light->lz;

  004dc	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$26[ebp]
  004e2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  004e7	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  004eb	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$26[ebp]
  004f1	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  004f6	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  004fb	f3 0f 58 c1	 addss	 xmm0, xmm1
  004ff	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this_light$26[ebp]
  00505	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  0050a	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  0050f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00513	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1403 : //					temp_intensity *= 1.0 / 32767.0;
; 1404 : 
; 1405 : 					if ( *( ( int *) &temp_intensity ) > *( ( int *) &float_value_zero ) )

  0051b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _temp_intensity$25[ebp]
  00521	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  00527	7e 6f		 jle	 SHORT $LN39@illuminate

; 1406 : 					{
; 1407 : 
; 1408 : 						temp_intensity *= temp_intensity;

  00529	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00531	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00539	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1409 : 
; 1410 : 						r += temp_intensity * this_light->colour.red;

  00541	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$26[ebp]
  00547	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  0054f	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00554	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _r$33[ebp]
  00559	f3 0f 11 45 8c	 movss	 DWORD PTR _r$33[ebp], xmm0

; 1411 : 						g += temp_intensity * this_light->colour.green;

  0055e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$26[ebp]
  00564	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  0056c	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  00571	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _g$32[ebp]
  00576	f3 0f 11 45 88	 movss	 DWORD PTR _g$32[ebp], xmm0

; 1412 : 						b += temp_intensity * this_light->colour.blue;

  0057b	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$26[ebp]
  00581	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00589	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  0058e	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _b$31[ebp]
  00593	f3 0f 11 45 84	 movss	 DWORD PTR _b$31[ebp], xmm0
$LN39@illuminate:

; 1413 : 					}
; 1414 : 
; 1415 : 					//
; 1416 : 					// Calculate specular colour intensities
; 1417 : 					//
; 1418 : 
; 1419 : 					temp_intensity = normal.x * this_light->highlight_vector.x +

  00598	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$26[ebp]
  0059e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  005a3	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  005a8	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$26[ebp]
  005ae	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  005b3	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  005b8	f3 0f 58 c1	 addss	 xmm0, xmm1
  005bc	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this_light$26[ebp]
  005c2	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  005c7	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  005cc	f3 0f 58 c1	 addss	 xmm0, xmm1
  005d0	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1420 : 											normal.y * this_light->highlight_vector.y +
; 1421 : 											normal.z * this_light->highlight_vector.z;
; 1422 : 
; 1423 : //					temp_intensity *= 1.0 / 32767.0;
; 1424 : 
; 1425 : 					if ( *( ( int *) &temp_intensity ) > *( ( int *) &float_value_zero ) )

  005d8	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _temp_intensity$25[ebp]
  005de	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  005e4	0f 8e 95 00 00
	00		 jle	 $LN40@illuminate

; 1426 : 					{
; 1427 : 
; 1428 : 						temp_intensity *= temp_intensity;

  005ea	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  005f2	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  005fa	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1429 : 						temp_intensity *= temp_intensity;

  00602	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  0060a	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00612	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1430 : 						temp_intensity *= temp_intensity;

  0061a	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00622	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  0062a	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1431 : 						temp_intensity *= temp_intensity;

  00632	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  0063a	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00642	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1432 : 						temp_intensity *= temp_intensity;

  0064a	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00652	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  0065a	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _temp_intensity$25[ebp], xmm0

; 1433 : 
; 1434 : 						specular += temp_intensity * this_light->intensity;

  00662	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$26[ebp]
  00668	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$25[ebp]
  00670	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  00675	f3 0f 58 45 80	 addss	 xmm0, DWORD PTR _specular$30[ebp]
  0067a	f3 0f 11 45 80	 movss	 DWORD PTR _specular$30[ebp], xmm0
$LN40@illuminate:

; 1435 : 					}
; 1436 : 
; 1437 : 					this_light = this_light->succ;

  0067f	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$26[ebp]
  00685	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00688	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _this_light$26[ebp], ecx

; 1438 : 				}

  0068e	e9 3c fe ff ff	 jmp	 $LN11@illuminate
$LN12@illuminate:

; 1439 : 
; 1440 : 				if ( *( ( int *) &r ) > *( ( int *) &float_value_one ) )	{ r = 1.0; }

  00693	8b 45 8c	 mov	 eax, DWORD PTR _r$33[ebp]
  00696	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  0069c	7e 0d		 jle	 SHORT $LN41@illuminate
  0069e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006a6	f3 0f 11 45 8c	 movss	 DWORD PTR _r$33[ebp], xmm0
$LN41@illuminate:

; 1441 : 				if ( *( ( int *) &g ) > *( ( int *) &float_value_one ) )	{ g = 1.0; }

  006ab	8b 45 88	 mov	 eax, DWORD PTR _g$32[ebp]
  006ae	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  006b4	7e 0d		 jle	 SHORT $LN42@illuminate
  006b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006be	f3 0f 11 45 88	 movss	 DWORD PTR _g$32[ebp], xmm0
$LN42@illuminate:

; 1442 : 				if ( *( ( int *) &b ) > *( ( int *) &float_value_one ) )	{ b = 1.0; }

  006c3	8b 45 84	 mov	 eax, DWORD PTR _b$31[ebp]
  006c6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  006cc	7e 0d		 jle	 SHORT $LN43@illuminate
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006d6	f3 0f 11 45 84	 movss	 DWORD PTR _b$31[ebp], xmm0
$LN43@illuminate:

; 1443 : 				if ( *( ( int *) &specular ) > *( ( int *) &float_value_one ) )	{ specular = 1.0; }

  006db	8b 45 80	 mov	 eax, DWORD PTR _specular$30[ebp]
  006de	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  006e4	7e 0d		 jle	 SHORT $LN44@illuminate
  006e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006ee	f3 0f 11 45 80	 movss	 DWORD PTR _specular$30[ebp], xmm0
$LN44@illuminate:

; 1444 : 
; 1445 : 				asm_convert_float_to_int ( ( r * 255 ), &ir );

  006f3	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _ir$29[ebp]
  006f9	50		 push	 eax
  006fa	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _r$33[ebp]
  006ff	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00707	51		 push	 ecx
  00708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070d	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1446 : 				asm_convert_float_to_int ( ( g * 255 ), &ig );

  00712	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _ig$28[ebp]
  00718	50		 push	 eax
  00719	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _g$32[ebp]
  0071e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00726	51		 push	 ecx
  00727	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072c	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1447 : 				asm_convert_float_to_int ( ( b * 255 ), &ib );

  00731	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ib$27[ebp]
  00737	50		 push	 eax
  00738	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _b$31[ebp]
  0073d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00745	51		 push	 ecx
  00746	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074b	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1448 : 
; 1449 : 				result_normals[point_index].r = ir;

  00750	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00753	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00756	8a 95 7c ff ff
	ff		 mov	 dl, BYTE PTR _ir$29[ebp]
  0075c	88 54 c1 02	 mov	 BYTE PTR [ecx+eax*8+2], dl

; 1450 : 				result_normals[point_index].g = ig;

  00760	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00763	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00766	8a 95 78 ff ff
	ff		 mov	 dl, BYTE PTR _ig$28[ebp]
  0076c	88 54 c1 01	 mov	 BYTE PTR [ecx+eax*8+1], dl

; 1451 : 				result_normals[point_index].b = ib;

  00770	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00773	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00776	8a 95 74 ff ff
	ff		 mov	 dl, BYTE PTR _ib$27[ebp]
  0077c	88 14 c1	 mov	 BYTE PTR [ecx+eax*8], dl

; 1452 : 				result_normals[point_index].alpha = current_object_3d_dissolve_value;

  0077f	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00782	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00785	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  0078b	88 54 c1 03	 mov	 BYTE PTR [ecx+eax*8+3], dl

; 1453 : 				result_normals[point_index].specular = specular;

  0078f	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00792	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00795	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _specular$30[ebp]
  0079a	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 1454 : 
; 1455 : 				point_list++;

  007a0	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  007a3	83 c0 02	 add	 eax, 2
  007a6	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1456 : 			}

  007a9	e9 ba fc ff ff	 jmp	 $LN8@illuminate
$LN9@illuminate:

; 1457 : 		}
; 1458 : 	}
; 1459 : 	else

  007ae	e9 87 08 00 00	 jmp	 $LN20@illuminate
$LN25@illuminate:

; 1460 : 	{
; 1461 : 		ASSERT ( current_object_3d_surface->polygons );

  007b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  007b8	66 8b 08	 mov	 cx, WORD PTR [eax]
  007bb	66 83 e1 01	 and	 cx, 1
  007bf	0f b7 d1	 movzx	 edx, cx
  007c2	85 d2		 test	 edx, edx
  007c4	75 1a		 jne	 SHORT $LN45@illuminate
  007c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  007cb	05 19 01 00 00	 add	 eax, 281		; 00000119H
  007d0	50		 push	 eax
  007d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  007d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@
  007db	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN45@illuminate:

; 1462 : 
; 1463 : 		point_list = current_object_3d_face_normal_list;

  007e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  007e5	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1464 : 
; 1465 : 		number_of_points = current_object_3d_surface->number_of_faces;

  007e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  007ed	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007f1	89 4d fc	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 1466 : 
; 1467 : 		if ( !lights )

  007f4	83 7d 10 00	 cmp	 DWORD PTR _lights$[ebp], 0
  007f8	0f 85 e3 00 00
	00		 jne	 $LN46@illuminate

; 1468 : 		{
; 1469 : 
; 1470 : 			int
; 1471 : 				ir,
; 1472 : 				ig,
; 1473 : 				ib;
; 1474 : 
; 1475 : 			real_colour
; 1476 : 				normal_colour;
; 1477 : 
; 1478 : 			asm_convert_float_to_int (  ( ambient_3d_light.colour.red * 255 ), &ir );

  007fe	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _ir$24[ebp]
  00804	50		 push	 eax
  00805	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  0080d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00815	51		 push	 ecx
  00816	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081b	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1479 : 			asm_convert_float_to_int (  ( ambient_3d_light.colour.green * 255 ), &ig );

  00820	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ig$23[ebp]
  00826	50		 push	 eax
  00827	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  0082f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00837	51		 push	 ecx
  00838	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083d	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1480 : 			asm_convert_float_to_int (  ( ambient_3d_light.colour.blue * 255 ), &ib );

  00842	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ib$22[ebp]
  00848	50		 push	 eax
  00849	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  00851	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00859	51		 push	 ecx
  0085a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085f	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1481 : 
; 1482 : 			normal_colour.red = ir;

  00864	8a 85 68 ff ff
	ff		 mov	 al, BYTE PTR _ir$24[ebp]
  0086a	88 85 5e ff ff
	ff		 mov	 BYTE PTR _normal_colour$21[ebp+2], al

; 1483 : 			normal_colour.green = ig;

  00870	8a 85 64 ff ff
	ff		 mov	 al, BYTE PTR _ig$23[ebp]
  00876	88 85 5d ff ff
	ff		 mov	 BYTE PTR _normal_colour$21[ebp+1], al

; 1484 : 			normal_colour.blue = ib;

  0087c	8a 85 60 ff ff
	ff		 mov	 al, BYTE PTR _ib$22[ebp]
  00882	88 85 5c ff ff
	ff		 mov	 BYTE PTR _normal_colour$21[ebp], al

; 1485 : 			normal_colour.alpha = current_object_3d_dissolve_value;

  00888	a0 00 00 00 00	 mov	 al, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  0088d	88 85 5f ff ff
	ff		 mov	 BYTE PTR _normal_colour$21[ebp+3], al

; 1486 : 
; 1487 : 			for ( count = number_of_points; count > 0; count-- )

  00893	8b 45 fc	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00896	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
  00899	eb 09		 jmp	 SHORT $LN15@illuminate
$LN13@illuminate:
  0089b	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0089e	83 e8 01	 sub	 eax, 1
  008a1	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN15@illuminate:
  008a4	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  008a8	7e 32		 jle	 SHORT $LN14@illuminate

; 1488 : 			{
; 1489 : 
; 1490 : 				point_index = point_list->point;

  008aa	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  008ad	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  008b0	89 4d f8	 mov	 DWORD PTR _point_index$[ebp], ecx

; 1491 : 
; 1492 : 				result_normals[point_index].colour = normal_colour.colour;

  008b3	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  008b6	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  008b9	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _normal_colour$21[ebp]
  008bf	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx

; 1493 : 				result_normals[point_index].specular = 0;

  008c2	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  008c5	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  008c8	0f 57 c0	 xorps	 xmm0, xmm0
  008cb	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 1494 : 
; 1495 : 				point_list++;

  008d1	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  008d4	83 c0 02	 add	 eax, 2
  008d7	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1496 : 			}

  008da	eb bf		 jmp	 SHORT $LN13@illuminate
$LN14@illuminate:

; 1497 : 		}
; 1498 : 		else if ( !lights->succ )

  008dc	e9 59 07 00 00	 jmp	 $LN20@illuminate
$LN46@illuminate:
  008e1	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  008e4	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  008e8	0f 85 b2 03 00
	00		 jne	 $LN48@illuminate

; 1499 : 		{
; 1500 : 
; 1501 : 			vec3d
; 1502 : 				light_vector,
; 1503 : 				highlight_vector;
; 1504 : 
; 1505 : 			light_vector.x = lights->lx;

  008ee	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  008f1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  008f5	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _light_vector$20[ebp], xmm0

; 1506 : 			light_vector.y = lights->ly;

  008fd	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00900	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00905	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _light_vector$20[ebp+4], xmm0

; 1507 : 			light_vector.z = lights->lz;

  0090d	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00910	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00915	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _light_vector$20[ebp+8], xmm0

; 1508 : 
; 1509 : 			highlight_vector.x = lights->highlight_vector.x;

  0091d	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00920	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00925	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _highlight_vector$19[ebp], xmm0

; 1510 : 			highlight_vector.y = lights->highlight_vector.y;

  0092d	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00930	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00935	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _highlight_vector$19[ebp+4], xmm0

; 1511 : 			highlight_vector.z = lights->highlight_vector.z;

  0093d	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00940	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00945	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _highlight_vector$19[ebp+8], xmm0

; 1512 : 
; 1513 : 			for ( count = number_of_points; count > 0; count-- )

  0094d	8b 45 fc	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00950	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
  00953	eb 09		 jmp	 SHORT $LN18@illuminate
$LN16@illuminate:
  00955	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  00958	83 e8 01	 sub	 eax, 1
  0095b	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN18@illuminate:
  0095e	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00962	0f 8e 33 03 00
	00		 jle	 $LN17@illuminate

; 1514 : 			{
; 1515 : 
; 1516 : 				float
; 1517 : 					r,
; 1518 : 					g,
; 1519 : 					b,
; 1520 : 					s,
; 1521 : 					d_intensity,
; 1522 : 					s_intensity;
; 1523 : 
; 1524 : 				int
; 1525 : 					ir,
; 1526 : 					ig,
; 1527 : 					ib;
; 1528 : 
; 1529 : 				//
; 1530 : 				// Set the light levels
; 1531 : 				//
; 1532 : 
; 1533 : 				r = ambient_3d_light.colour.red;

  00968	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  00970	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _r$18[ebp], xmm0

; 1534 : 				g = ambient_3d_light.colour.green;

  00978	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  00980	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _g$17[ebp], xmm0

; 1535 : 				b = ambient_3d_light.colour.blue;

  00988	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  00990	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _b$16[ebp], xmm0

; 1536 : 
; 1537 : 				s = 0;

  00998	0f 57 c0	 xorps	 xmm0, xmm0
  0099b	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _s$15[ebp], xmm0

; 1538 : 
; 1539 : 				point_index = point_list->point;

  009a3	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  009a6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  009a9	89 4d f8	 mov	 DWORD PTR _point_index$[ebp], ecx

; 1540 : 
; 1541 : 				generate_object_3d_point_normal ( &normals[point_index], &normal );

  009ac	8d 45 dc	 lea	 eax, DWORD PTR _normal$[ebp]
  009af	50		 push	 eax
  009b0	8b 4d f8	 mov	 ecx, DWORD PTR _point_index$[ebp]
  009b3	8b 55 e8	 mov	 edx, DWORD PTR _normals$[ebp]
  009b6	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  009b9	50		 push	 eax
  009ba	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1542 : 
; 1543 : 				//
; 1544 : 				// Calculate diffuse colour intensities
; 1545 : 				//
; 1546 : 
; 1547 : 				d_intensity = normal.x * lights->lx + normal.y * lights->ly + normal.z * lights->lz;

  009bf	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  009c2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  009c7	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  009cb	8b 4d 10	 mov	 ecx, DWORD PTR _lights$[ebp]
  009ce	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  009d3	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  009d8	f3 0f 58 c1	 addss	 xmm0, xmm1
  009dc	8b 55 10	 mov	 edx, DWORD PTR _lights$[ebp]
  009df	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  009e4	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  009e9	f3 0f 58 c1	 addss	 xmm0, xmm1
  009ed	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _d_intensity$14[ebp], xmm0

; 1548 : 				s_intensity =	normal.x * lights->highlight_vector.x +

  009f5	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  009f8	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  009fd	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00a02	8b 4d 10	 mov	 ecx, DWORD PTR _lights$[ebp]
  00a05	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  00a0a	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00a0f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a13	8b 55 10	 mov	 edx, DWORD PTR _lights$[ebp]
  00a16	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  00a1b	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00a20	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a24	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _s_intensity$13[ebp], xmm0

; 1549 : 									normal.y * lights->highlight_vector.y +
; 1550 : 									normal.z * lights->highlight_vector.z;
; 1551 : 
; 1552 : //				d_intensity *= 1.0 / 32767.0;
; 1553 : //				s_intensity *= 1.0 / 32767.0;
; 1554 : 
; 1555 : 				if ( *( ( int *) &d_intensity ) > *( ( int *) &float_value_zero ) )

  00a2c	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _d_intensity$14[ebp]
  00a32	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  00a38	7e 78		 jle	 SHORT $LN50@illuminate

; 1556 : 				{
; 1557 : 
; 1558 : 					d_intensity *= d_intensity;

  00a3a	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _d_intensity$14[ebp]
  00a42	f3 0f 59 85 30
	ff ff ff	 mulss	 xmm0, DWORD PTR _d_intensity$14[ebp]
  00a4a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _d_intensity$14[ebp], xmm0

; 1559 : 
; 1560 : 					r += d_intensity * lights->colour.red;

  00a52	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00a55	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _d_intensity$14[ebp]
  00a5d	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00a62	f3 0f 58 85 40
	ff ff ff	 addss	 xmm0, DWORD PTR _r$18[ebp]
  00a6a	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _r$18[ebp], xmm0

; 1561 : 					g += d_intensity * lights->colour.green;

  00a72	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00a75	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _d_intensity$14[ebp]
  00a7d	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  00a82	f3 0f 58 85 3c
	ff ff ff	 addss	 xmm0, DWORD PTR _g$17[ebp]
  00a8a	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _g$17[ebp], xmm0

; 1562 : 					b += d_intensity * lights->colour.blue;

  00a92	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00a95	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _d_intensity$14[ebp]
  00a9d	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00aa2	f3 0f 58 85 38
	ff ff ff	 addss	 xmm0, DWORD PTR _b$16[ebp]
  00aaa	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _b$16[ebp], xmm0
$LN50@illuminate:

; 1563 : 				}
; 1564 : 
; 1565 : 				//
; 1566 : 				// Calculate specular colour intensities
; 1567 : 				//
; 1568 : 
; 1569 : 				if ( *( ( int *) &s_intensity ) > *( ( int *) &float_value_zero ) )

  00ab2	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _s_intensity$13[ebp]
  00ab8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  00abe	0f 8e 98 00 00
	00		 jle	 $LN51@illuminate

; 1570 : 				{
; 1571 : 
; 1572 : 					s_intensity *= s_intensity;

  00ac4	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00acc	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00ad4	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _s_intensity$13[ebp], xmm0

; 1573 : 					s_intensity *= s_intensity;

  00adc	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00ae4	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00aec	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _s_intensity$13[ebp], xmm0

; 1574 : 					s_intensity *= s_intensity;

  00af4	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00afc	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00b04	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _s_intensity$13[ebp], xmm0

; 1575 : 					s_intensity *= s_intensity;

  00b0c	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00b14	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00b1c	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _s_intensity$13[ebp], xmm0

; 1576 : 					s_intensity *= s_intensity;

  00b24	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00b2c	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00b34	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _s_intensity$13[ebp], xmm0

; 1577 : 
; 1578 : 					s += s_intensity * lights->intensity;

  00b3c	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00b3f	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _s_intensity$13[ebp]
  00b47	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  00b4c	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _s$15[ebp]
  00b54	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _s$15[ebp], xmm0
$LN51@illuminate:

; 1579 : 				}
; 1580 : 
; 1581 : 				if ( *( ( int *) &r ) > *( ( int *) &float_value_one ) )	{ r = 1.0; }

  00b5c	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _r$18[ebp]
  00b62	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00b68	7e 10		 jle	 SHORT $LN52@illuminate
  00b6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b72	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _r$18[ebp], xmm0
$LN52@illuminate:

; 1582 : 				if ( *( ( int *) &g ) > *( ( int *) &float_value_one ) )	{ g = 1.0; }

  00b7a	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _g$17[ebp]
  00b80	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00b86	7e 10		 jle	 SHORT $LN53@illuminate
  00b88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b90	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _g$17[ebp], xmm0
$LN53@illuminate:

; 1583 : 				if ( *( ( int *) &b ) > *( ( int *) &float_value_one ) )	{ b = 1.0; }

  00b98	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _b$16[ebp]
  00b9e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00ba4	7e 10		 jle	 SHORT $LN54@illuminate
  00ba6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bae	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _b$16[ebp], xmm0
$LN54@illuminate:

; 1584 : 				if ( *( ( int *) &s ) > *( ( int *) &float_value_one ) )	{ s = 1.0; }

  00bb6	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _s$15[ebp]
  00bbc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00bc2	7e 10		 jle	 SHORT $LN55@illuminate
  00bc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bcc	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _s$15[ebp], xmm0
$LN55@illuminate:

; 1585 : 
; 1586 : 				asm_convert_float_to_int ( ( r * 255 ), &ir );

  00bd4	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _ir$12[ebp]
  00bda	50		 push	 eax
  00bdb	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _r$18[ebp]
  00be3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00beb	51		 push	 ecx
  00bec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf1	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1587 : 				asm_convert_float_to_int ( ( g * 255 ), &ig );

  00bf6	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _ig$11[ebp]
  00bfc	50		 push	 eax
  00bfd	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _g$17[ebp]
  00c05	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00c0d	51		 push	 ecx
  00c0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c13	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1588 : 				asm_convert_float_to_int ( ( b * 255 ), &ib );

  00c18	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _ib$10[ebp]
  00c1e	50		 push	 eax
  00c1f	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _b$16[ebp]
  00c27	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00c2f	51		 push	 ecx
  00c30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c35	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1589 : 
; 1590 : 				result_normals[point_index].r = ir;

  00c3a	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00c3d	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00c40	8a 95 28 ff ff
	ff		 mov	 dl, BYTE PTR _ir$12[ebp]
  00c46	88 54 c1 02	 mov	 BYTE PTR [ecx+eax*8+2], dl

; 1591 : 				result_normals[point_index].g = ig;

  00c4a	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00c4d	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00c50	8a 95 24 ff ff
	ff		 mov	 dl, BYTE PTR _ig$11[ebp]
  00c56	88 54 c1 01	 mov	 BYTE PTR [ecx+eax*8+1], dl

; 1592 : 				result_normals[point_index].b = ib;

  00c5a	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00c5d	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00c60	8a 95 20 ff ff
	ff		 mov	 dl, BYTE PTR _ib$10[ebp]
  00c66	88 14 c1	 mov	 BYTE PTR [ecx+eax*8], dl

; 1593 : 				result_normals[point_index].alpha = current_object_3d_dissolve_value;

  00c69	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00c6c	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00c6f	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  00c75	88 54 c1 03	 mov	 BYTE PTR [ecx+eax*8+3], dl

; 1594 : 				result_normals[point_index].specular = s;

  00c79	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00c7c	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00c7f	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _s$15[ebp]
  00c87	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 1595 : 
; 1596 : 				point_list++;

  00c8d	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  00c90	83 c0 02	 add	 eax, 2
  00c93	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1597 : 			}

  00c96	e9 ba fc ff ff	 jmp	 $LN16@illuminate
$LN17@illuminate:

; 1598 : 		}
; 1599 : 		else

  00c9b	e9 9a 03 00 00	 jmp	 $LN20@illuminate
$LN48@illuminate:

; 1600 : 		{
; 1601 : 
; 1602 : 			for ( count = number_of_points; count > 0; count-- )

  00ca0	8b 45 fc	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00ca3	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
  00ca6	eb 09		 jmp	 SHORT $LN21@illuminate
$LN19@illuminate:
  00ca8	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  00cab	83 e8 01	 sub	 eax, 1
  00cae	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN21@illuminate:
  00cb1	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00cb5	0f 8e 7f 03 00
	00		 jle	 $LN20@illuminate

; 1603 : 			{
; 1604 : 
; 1605 : 				float
; 1606 : 					r,
; 1607 : 					g,
; 1608 : 					b,
; 1609 : 					specular;
; 1610 : 
; 1611 : 				int
; 1612 : 					ir,
; 1613 : 					ig,
; 1614 : 					ib;
; 1615 : 
; 1616 : 				light_3d_source
; 1617 : 					*this_light;
; 1618 : 
; 1619 : 				//
; 1620 : 				// Set the light levels
; 1621 : 				//
; 1622 : 
; 1623 : 				r = ambient_3d_light.colour.red;

  00cbb	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  00cc3	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _r$9[ebp], xmm0

; 1624 : 				g = ambient_3d_light.colour.green;

  00ccb	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  00cd3	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _g$8[ebp], xmm0

; 1625 : 				b = ambient_3d_light.colour.blue;

  00cdb	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  00ce3	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _b$7[ebp], xmm0

; 1626 : 
; 1627 : 				specular = 0;

  00ceb	0f 57 c0	 xorps	 xmm0, xmm0
  00cee	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _specular$6[ebp], xmm0

; 1628 : 
; 1629 : 				point_index = point_list->point;

  00cf6	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  00cf9	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00cfc	89 4d f8	 mov	 DWORD PTR _point_index$[ebp], ecx

; 1630 : 
; 1631 : 				generate_object_3d_point_normal ( &normals[point_index], &normal );

  00cff	8d 45 dc	 lea	 eax, DWORD PTR _normal$[ebp]
  00d02	50		 push	 eax
  00d03	8b 4d f8	 mov	 ecx, DWORD PTR _point_index$[ebp]
  00d06	8b 55 e8	 mov	 edx, DWORD PTR _normals$[ebp]
  00d09	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00d0c	50		 push	 eax
  00d0d	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1632 : 
; 1633 : 				this_light = lights;

  00d12	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00d15	89 85 00 ff ff
	ff		 mov	 DWORD PTR _this_light$2[ebp], eax
$LN22@illuminate:

; 1634 : 
; 1635 : 				while ( this_light )

  00d1b	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _this_light$2[ebp], 0
  00d22	0f 84 d3 01 00
	00		 je	 $LN23@illuminate

; 1636 : 				{
; 1637 : 
; 1638 : 					float
; 1639 : 						temp_intensity;
; 1640 : 
; 1641 : 					//
; 1642 : 					// Calculate diffuse colour intensities
; 1643 : 					//
; 1644 : 
; 1645 : 					temp_intensity = normal.x * this_light->lx + normal.y * this_light->ly + normal.z * this_light->lz;

  00d28	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$2[ebp]
  00d2e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  00d33	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00d37	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$2[ebp]
  00d3d	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  00d42	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  00d47	f3 0f 58 c1	 addss	 xmm0, xmm1
  00d4b	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _this_light$2[ebp]
  00d51	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  00d56	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00d5b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00d5f	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1646 : //					temp_intensity *= 1.0 / 32767.0;
; 1647 : 
; 1648 : 					if ( *( ( int *) &temp_intensity ) > *( ( int *) &float_value_zero ) )

  00d67	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _temp_intensity$1[ebp]
  00d6d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  00d73	0f 8e 81 00 00
	00		 jle	 $LN56@illuminate

; 1649 : 					{
; 1650 : 
; 1651 : 						temp_intensity *= temp_intensity;

  00d79	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00d81	f3 0f 59 85 fc
	fe ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00d89	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1652 : 
; 1653 : 						r += temp_intensity * this_light->colour.red;

  00d91	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$2[ebp]
  00d97	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00d9f	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00da4	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR _r$9[ebp]
  00dac	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _r$9[ebp], xmm0

; 1654 : 						g += temp_intensity * this_light->colour.green;

  00db4	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$2[ebp]
  00dba	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00dc2	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  00dc7	f3 0f 58 85 18
	ff ff ff	 addss	 xmm0, DWORD PTR _g$8[ebp]
  00dcf	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _g$8[ebp], xmm0

; 1655 : 						b += temp_intensity * this_light->colour.blue;

  00dd7	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$2[ebp]
  00ddd	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00de5	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00dea	f3 0f 58 85 14
	ff ff ff	 addss	 xmm0, DWORD PTR _b$7[ebp]
  00df2	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _b$7[ebp], xmm0
$LN56@illuminate:

; 1656 : 					}
; 1657 : 
; 1658 : 					//
; 1659 : 					// Calculate specular colour intensities
; 1660 : 					//
; 1661 : 
; 1662 : 					temp_intensity = normal.x * this_light->highlight_vector.x +

  00dfa	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$2[ebp]
  00e00	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _normal$[ebp]
  00e05	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00e0a	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$2[ebp]
  00e10	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  00e15	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00e1a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00e1e	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _this_light$2[ebp]
  00e24	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  00e29	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00e2e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00e32	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1663 : 											normal.y * this_light->highlight_vector.y +
; 1664 : 											normal.z * this_light->highlight_vector.z;
; 1665 : 
; 1666 : //					temp_intensity *= 1.0 / 32767.0;
; 1667 : 
; 1668 : 					if ( *( ( int *) &temp_intensity ) > *( ( int *) &float_value_zero ) )

  00e3a	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _temp_intensity$1[ebp]
  00e40	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  00e46	0f 8e 9b 00 00
	00		 jle	 $LN57@illuminate

; 1669 : 					{
; 1670 : 
; 1671 : 						temp_intensity *= temp_intensity;

  00e4c	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00e54	f3 0f 59 85 fc
	fe ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00e5c	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1672 : 						temp_intensity *= temp_intensity;

  00e64	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00e6c	f3 0f 59 85 fc
	fe ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00e74	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1673 : 						temp_intensity *= temp_intensity;

  00e7c	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00e84	f3 0f 59 85 fc
	fe ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00e8c	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1674 : 						temp_intensity *= temp_intensity;

  00e94	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00e9c	f3 0f 59 85 fc
	fe ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00ea4	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1675 : 						temp_intensity *= temp_intensity;

  00eac	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00eb4	f3 0f 59 85 fc
	fe ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00ebc	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _temp_intensity$1[ebp], xmm0

; 1676 : 
; 1677 : 						specular += temp_intensity * this_light->intensity;

  00ec4	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$2[ebp]
  00eca	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$1[ebp]
  00ed2	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  00ed7	f3 0f 58 85 10
	ff ff ff	 addss	 xmm0, DWORD PTR _specular$6[ebp]
  00edf	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _specular$6[ebp], xmm0
$LN57@illuminate:

; 1678 : 					}
; 1679 : 
; 1680 : 					this_light = this_light->succ;

  00ee7	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$2[ebp]
  00eed	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00ef0	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _this_light$2[ebp], ecx

; 1681 : 				}

  00ef6	e9 20 fe ff ff	 jmp	 $LN22@illuminate
$LN23@illuminate:

; 1682 : 
; 1683 : 				if ( *( ( int *) &r ) > *( ( int *) &float_value_one ) )	{ r = 1.0; }

  00efb	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _r$9[ebp]
  00f01	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00f07	7e 10		 jle	 SHORT $LN58@illuminate
  00f09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f11	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _r$9[ebp], xmm0
$LN58@illuminate:

; 1684 : 				if ( *( ( int *) &g ) > *( ( int *) &float_value_one ) )	{ g = 1.0; }

  00f19	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _g$8[ebp]
  00f1f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00f25	7e 10		 jle	 SHORT $LN59@illuminate
  00f27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f2f	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _g$8[ebp], xmm0
$LN59@illuminate:

; 1685 : 				if ( *( ( int *) &b ) > *( ( int *) &float_value_one ) )	{ b = 1.0; }

  00f37	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _b$7[ebp]
  00f3d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00f43	7e 10		 jle	 SHORT $LN60@illuminate
  00f45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f4d	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _b$7[ebp], xmm0
$LN60@illuminate:

; 1686 : 				if ( *( ( int *) &specular ) > *( ( int *) &float_value_one ) )	{ specular = 1.0; }

  00f55	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _specular$6[ebp]
  00f5b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_one@@3MB
  00f61	7e 10		 jle	 SHORT $LN61@illuminate
  00f63	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f6b	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _specular$6[ebp], xmm0
$LN61@illuminate:

; 1687 : 
; 1688 : 				asm_convert_float_to_int ( ( r * 255 ), &ir );

  00f73	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _ir$5[ebp]
  00f79	50		 push	 eax
  00f7a	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _r$9[ebp]
  00f82	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00f8a	51		 push	 ecx
  00f8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f90	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1689 : 				asm_convert_float_to_int ( ( g * 255 ), &ig );

  00f95	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _ig$4[ebp]
  00f9b	50		 push	 eax
  00f9c	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _g$8[ebp]
  00fa4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00fac	51		 push	 ecx
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1690 : 				asm_convert_float_to_int ( ( b * 255 ), &ib );

  00fb7	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR _ib$3[ebp]
  00fbd	50		 push	 eax
  00fbe	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _b$7[ebp]
  00fc6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00fce	51		 push	 ecx
  00fcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd4	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1691 : 
; 1692 : 				result_normals[point_index].r = ir;

  00fd9	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00fdc	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00fdf	8a 95 0c ff ff
	ff		 mov	 dl, BYTE PTR _ir$5[ebp]
  00fe5	88 54 c1 02	 mov	 BYTE PTR [ecx+eax*8+2], dl

; 1693 : 				result_normals[point_index].g = ig;

  00fe9	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00fec	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00fef	8a 95 08 ff ff
	ff		 mov	 dl, BYTE PTR _ig$4[ebp]
  00ff5	88 54 c1 01	 mov	 BYTE PTR [ecx+eax*8+1], dl

; 1694 : 				result_normals[point_index].b = ib;

  00ff9	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  00ffc	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  00fff	8a 95 04 ff ff
	ff		 mov	 dl, BYTE PTR _ib$3[ebp]
  01005	88 14 c1	 mov	 BYTE PTR [ecx+eax*8], dl

; 1695 : 				result_normals[point_index].alpha = current_object_3d_dissolve_value;

  01008	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  0100b	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  0100e	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  01014	88 54 c1 03	 mov	 BYTE PTR [ecx+eax*8+3], dl

; 1696 : 				result_normals[point_index].specular = specular;

  01018	8b 45 f8	 mov	 eax, DWORD PTR _point_index$[ebp]
  0101b	8b 4d f0	 mov	 ecx, DWORD PTR _result_normals$[ebp]
  0101e	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _specular$6[ebp]
  01026	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [ecx+eax*8+4], xmm0

; 1697 : 
; 1698 : 				point_list++;

  0102c	8b 45 ec	 mov	 eax, DWORD PTR _point_list$[ebp]
  0102f	83 c0 02	 add	 eax, 2
  01032	89 45 ec	 mov	 DWORD PTR _point_list$[ebp], eax

; 1699 : 			}

  01035	e9 6e fc ff ff	 jmp	 $LN19@illuminate
$LN20@illuminate:
$LN1@illuminate:

; 1700 : 		}
; 1701 : 	}
; 1702 : }

  0103a	5f		 pop	 edi
  0103b	5e		 pop	 esi
  0103c	5b		 pop	 ebx
  0103d	8b e5		 mov	 esp, ebp
  0103f	5d		 pop	 ebp
  01040	c2 14 00	 ret	 20			; 00000014H
?illuminate_3d_object_surface@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; illuminate_3d_object_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
_j$1 = -60						; size = 4
_i$2 = -56						; size = 4
_q$3 = -52						; size = 4
_z$4 = -48						; size = 4
_y$5 = -44						; size = 4
_x$6 = -40						; size = 4
_pointz$7 = -36						; size = 4
_pointx$8 = -32						; size = 4
_pos_z$ = -28						; size = 4
_pos_y$ = -24						; size = 4
_pos_x$ = -20						; size = 4
_result_2d_points$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; transform_unclipped_flat_3d_object, COMDAT

; 1083 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1084 : 
; 1085 : 	int
; 1086 : 		count,
; 1087 : 		number_of_points;
; 1088 : 
; 1089 : 	object_short_3d_point
; 1090 : 		*points;
; 1091 : 
; 1092 : 	object_transformed_2d_point
; 1093 : 		*result_2d_points;
; 1094 : 
; 1095 : 	float
; 1096 : 		pos_x,
; 1097 : 		pos_y,
; 1098 : 		pos_z;
; 1099 : 
; 1100 : 	//
; 1101 : 	// We only need the fpu to be in single precision mode
; 1102 : 	//
; 1103 : 
; 1104 : 	set_fpu_precision_mode_single ();

  00009	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_single@@YGXXZ ; set_fpu_precision_mode_single

; 1105 : 
; 1106 : 	number_of_points = object->number_of_points;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00011	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00014	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 1107 : 
; 1108 : 	ASSERT ( ( number_of_points + points_base ) < MAX_POINTS );

  00017	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0001a	03 45 18	 add	 eax, DWORD PTR _points_base$[ebp]
  0001d	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00022	7c 18		 jl	 SHORT $LN5@transform_
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  00029	83 c0 19	 add	 eax, 25			; 00000019H
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@transform_:

; 1109 : 
; 1110 : 	points = object->points;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0003f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00042	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 1111 : 
; 1112 : 	result_2d_points = &transformed_3d_2d_points[points_base];

  00045	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  00048	c1 e0 04	 shl	 eax, 4
  0004b	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points
  00050	89 45 f0	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 1113 : 
; 1114 : 	pos_x = pos->x;

  00053	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00056	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0005a	f3 0f 11 45 ec	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 1115 : 	pos_y = pos->y;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00062	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00067	f3 0f 11 45 e8	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 1116 : 	pos_z = pos->z;

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0006f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00074	f3 0f 11 45 e4	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 1117 : 
; 1118 : 	for ( count = number_of_points; count > 0; count-- )

  00079	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0007c	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  0007f	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  00081	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00084	83 e8 01	 sub	 eax, 1
  00087	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  0008a	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  0008e	0f 8e de 01 00
	00		 jle	 $LN3@transform_

; 1119 : 	{
; 1120 : 
; 1121 : 		{
; 1122 : 
; 1123 : 			float
; 1124 : 				pointx,
; 1125 : 				pointz,
; 1126 : 				x,
; 1127 : 				y,
; 1128 : 				z,
; 1129 : 				q,
; 1130 : 				i,
; 1131 : 				j;
; 1132 : 
; 1133 : 			pointx = points->x;

  00094	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00097	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0009a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0009e	f3 0f 11 45 e0	 movss	 DWORD PTR _pointx$8[ebp], xmm0

; 1134 : 			pointz = points->z;

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  000a6	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  000aa	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000ae	f3 0f 11 45 dc	 movss	 DWORD PTR _pointz$7[ebp], xmm0

; 1135 : 
; 1136 : 			x = pointx * rotation_3d[0][0];

  000b3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000b8	6b c8 00	 imul	 ecx, eax, 0
  000bb	ba 04 00 00 00	 mov	 edx, 4
  000c0	6b c2 00	 imul	 eax, edx, 0
  000c3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _pointx$8[ebp]
  000c8	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  000d1	f3 0f 11 45 d8	 movss	 DWORD PTR _x$6[ebp], xmm0

; 1137 : 			y = pointx * rotation_3d[0][1];

  000d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000db	6b c8 00	 imul	 ecx, eax, 0
  000de	ba 04 00 00 00	 mov	 edx, 4
  000e3	c1 e2 00	 shl	 edx, 0
  000e6	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _pointx$8[ebp]
  000eb	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  000f4	f3 0f 11 45 d4	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1138 : 			z = pointx * rotation_3d[0][2];

  000f9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000fe	6b c8 00	 imul	 ecx, eax, 0
  00101	ba 04 00 00 00	 mov	 edx, 4
  00106	d1 e2		 shl	 edx, 1
  00108	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _pointx$8[ebp]
  0010d	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00116	f3 0f 11 45 d0	 movss	 DWORD PTR _z$4[ebp], xmm0

; 1139 : 
; 1140 : 			x += pointz * rotation_3d[2][0];

  0011b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00120	d1 e0		 shl	 eax, 1
  00122	b9 04 00 00 00	 mov	 ecx, 4
  00127	6b d1 00	 imul	 edx, ecx, 0
  0012a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _pointz$7[ebp]
  0012f	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00138	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _x$6[ebp]
  0013d	f3 0f 11 45 d8	 movss	 DWORD PTR _x$6[ebp], xmm0

; 1141 : 			y += pointz * rotation_3d[2][1];

  00142	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00147	d1 e0		 shl	 eax, 1
  00149	b9 04 00 00 00	 mov	 ecx, 4
  0014e	c1 e1 00	 shl	 ecx, 0
  00151	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _pointz$7[ebp]
  00156	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0015f	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _y$5[ebp]
  00164	f3 0f 11 45 d4	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1142 : 			z += pointz * rotation_3d[2][2];

  00169	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0016e	d1 e0		 shl	 eax, 1
  00170	b9 04 00 00 00	 mov	 ecx, 4
  00175	d1 e1		 shl	 ecx, 1
  00177	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _pointz$7[ebp]
  0017c	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00185	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _z$4[ebp]
  0018a	f3 0f 11 45 d0	 movss	 DWORD PTR _z$4[ebp], xmm0

; 1143 : 
; 1144 : 			x += pos_x;

  0018f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00194	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  00199	f3 0f 11 45 d8	 movss	 DWORD PTR _x$6[ebp], xmm0

; 1145 : 			y += pos_y;

  0019e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _y$5[ebp]
  001a3	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  001a8	f3 0f 11 45 d4	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1146 : 			z += pos_z;

  001ad	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _z$4[ebp]
  001b2	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  001b7	f3 0f 11 45 d0	 movss	 DWORD PTR _z$4[ebp], xmm0

; 1147 : 
; 1148 : 			q = 1.0 / z;

  001bc	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _z$4[ebp]
  001c1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001c9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001cd	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001d1	f3 0f 11 45 cc	 movss	 DWORD PTR _q$3[ebp], xmm0

; 1149 : 
; 1150 : 			i = ( active_3d_environment->screen_i_scale * x * q );

  001d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001db	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001df	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _x$6[ebp]
  001e4	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  001e9	f3 0f 11 45 c8	 movss	 DWORD PTR _i$2[ebp], xmm0

; 1151 : 			j = ( active_3d_environment->screen_j_scale * y * q );

  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001f3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001f8	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _y$5[ebp]
  001fd	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  00202	f3 0f 11 45 c4	 movss	 DWORD PTR _j$1[ebp], xmm0

; 1152 : 
; 1153 : 			result_2d_points->j = active_3d_environment->y_origin - j;

  00207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0020c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00211	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _j$1[ebp]
  00216	8b 4d f0	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00219	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1154 : 			result_2d_points->i = active_3d_environment->x_origin + i;

  0021e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00223	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00228	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _i$2[ebp]
  0022d	8b 4d f0	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00230	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1155 : 
; 1156 : 			result_2d_points->q = q;

  00234	8b 45 f0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00237	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _q$3[ebp]
  0023c	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1157 : 			result_2d_points->z = z;

  00241	8b 45 f0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00244	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _z$4[ebp]
  00249	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1158 : 
; 1159 : #if DEBUG_STATS
; 1160 : 			current_number_of_3d_points_transformed++;

  0024e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_number_of_3d_points_transformed@@3HA ; current_number_of_3d_points_transformed
  00253	83 c0 01	 add	 eax, 1
  00256	a3 00 00 00 00	 mov	 DWORD PTR ?current_number_of_3d_points_transformed@@3HA, eax ; current_number_of_3d_points_transformed

; 1161 : #endif
; 1162 : 		}
; 1163 : 
; 1164 : 		result_2d_points++;

  0025b	8b 45 f0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  0025e	83 c0 10	 add	 eax, 16			; 00000010H
  00261	89 45 f0	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 1165 : 		points++;

  00264	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00267	83 c0 06	 add	 eax, 6
  0026a	89 45 f4	 mov	 DWORD PTR _points$[ebp], eax

; 1166 : 	}

  0026d	e9 0f fe ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 1167 : 
; 1168 : 	//
; 1169 : 	// Set back the fpu precision mode.
; 1170 : 	//
; 1171 : 
; 1172 : 	set_fpu_precision_mode_double ();

  00272	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_double@@YGXXZ ; set_fpu_precision_mode_double

; 1173 : }

  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
  00279	5b		 pop	 ebx
  0027a	8b e5		 mov	 esp, ebp
  0027c	5d		 pop	 ebp
  0027d	c2 14 00	 ret	 20			; 00000014H
?transform_unclipped_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; transform_unclipped_flat_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
$T1 = -148						; size = 4
$T2 = -144						; size = 4
$T3 = -140						; size = 4
$T4 = -136						; size = 4
$T5 = -132						; size = 4
$T6 = -128						; size = 4
_y$7 = -60						; size = 4
_x$8 = -56						; size = 4
_point_z$9 = -52					; size = 4
_point_y$10 = -48					; size = 4
_point_x$11 = -44					; size = 4
_pos_z$ = -40						; size = 4
_pos_y$ = -36						; size = 4
_pos_x$ = -32						; size = 4
_zmax$ = -28						; size = 4
_ymax$ = -24						; size = 4
_xmax$ = -20						; size = 4
_result_2d_points$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; transform_unclipped_3d_object, COMDAT

; 969  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 970  : 
; 971  : 	int
; 972  : 		count,
; 973  : 		number_of_points;
; 974  : 
; 975  : 	object_short_3d_point
; 976  : 		*points;
; 977  : 
; 978  : 	object_transformed_2d_point
; 979  : 		*result_2d_points;
; 980  : 
; 981  : 	float
; 982  : 		xmax,
; 983  : 		ymax,
; 984  : 		zmax,
; 985  : 		pos_x,
; 986  : 		pos_y,
; 987  : 		pos_z;
; 988  : 
; 989  : 	//
; 990  : 	// We only need the fpu to be in single precision mode
; 991  : 	//
; 992  : 
; 993  : 	set_fpu_precision_mode_single ();

  0000c	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_single@@YGXXZ ; set_fpu_precision_mode_single

; 994  : 
; 995  : 	number_of_points = object->number_of_points;

  00011	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00014	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 996  : 
; 997  : 	ASSERT ( ( number_of_points + points_base ) < MAX_POINTS );

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0001d	03 45 18	 add	 eax, DWORD PTR _points_base$[ebp]
  00020	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00025	7c 18		 jl	 SHORT $LN5@transform_
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  0002c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
  0003a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@transform_:

; 998  : 
; 999  : 	points = object->points;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00042	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00045	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 1000 : 
; 1001 : 	result_2d_points = &transformed_3d_2d_points[points_base];

  00048	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0004b	c1 e0 04	 shl	 eax, 4
  0004e	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points
  00053	89 45 f0	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 1002 : 
; 1003 : 	environment_x_origin = active_3d_environment->x_origin;

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0005b	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00060	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_x_origin@@3MA, xmm0

; 1004 : 	environment_y_origin = active_3d_environment->y_origin;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0006d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00072	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_y_origin@@3MA, xmm0

; 1005 : 
; 1006 : 	pos_x = pos->x * active_3d_environment->screen_i_scale;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00083	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00087	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0008b	f3 0f 11 45 e0	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 1007 : 	pos_y = pos->y * active_3d_environment->screen_j_scale;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00099	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0009e	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000a3	f3 0f 11 45 dc	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 1008 : 	pos_z = pos->z;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000ab	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000b0	f3 0f 11 45 d8	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 1009 : 
; 1010 : 	xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  000b5	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000b8	51		 push	 ecx
  000b9	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c3	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000c8	d9 5d 80	 fstp	 DWORD PTR $T6[ebp]
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000ce	51		 push	 ecx
  000cf	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000de	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  000e4	8d 55 80	 lea	 edx, DWORD PTR $T6[ebp]
  000e7	52		 push	 edx
  000e8	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000f4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000f8	f3 0f 11 45 ec	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 1011 : 	ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  000fd	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00100	51		 push	 ecx
  00101	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00110	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00119	51		 push	 ecx
  0011a	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00129	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  0012f	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00135	52		 push	 edx
  00136	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00142	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00146	f3 0f 11 45 e8	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 1012 : 	zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  0014b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0014e	51		 push	 ecx
  0014f	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0015e	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00167	51		 push	 ecx
  00168	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00177	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  0017d	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00183	52		 push	 edx
  00184	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00190	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00194	f3 0f 11 45 e4	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 1013 : 
; 1014 : 	scaled_rotation[0][0] = rotation_3d[0][0] * active_3d_environment->screen_i_scale * ( xmax / 32767.0 );

  00199	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0019e	6b c8 00	 imul	 ecx, eax, 0
  001a1	ba 04 00 00 00	 mov	 edx, 4
  001a6	6b c2 00	 imul	 eax, edx, 0
  001a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001af	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  001b8	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  001bc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001c0	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  001c5	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  001cd	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001da	6b c8 00	 imul	 ecx, eax, 0
  001dd	ba 04 00 00 00	 mov	 edx, 4
  001e2	6b c2 00	 imul	 eax, edx, 0
  001e5	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax], xmm0

; 1015 : 	scaled_rotation[0][1] = rotation_3d[0][1] * active_3d_environment->screen_j_scale * ( xmax / 32767.0 );

  001ee	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001f3	6b c8 00	 imul	 ecx, eax, 0
  001f6	ba 04 00 00 00	 mov	 edx, 4
  001fb	c1 e2 00	 shl	 edx, 0
  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00203	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0020c	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  00211	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00215	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  0021a	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00222	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00226	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0022f	6b d1 00	 imul	 edx, ecx, 0
  00232	b8 04 00 00 00	 mov	 eax, 4
  00237	c1 e0 00	 shl	 eax, 0
  0023a	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1016 : 	scaled_rotation[0][2] = rotation_3d[0][2] * ( xmax / 32767.0 );

  00243	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00248	6b c8 00	 imul	 ecx, eax, 0
  0024b	ba 04 00 00 00	 mov	 edx, 4
  00250	d1 e2		 shl	 edx, 1
  00252	f3 0f 5a 84 11
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0025b	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  00260	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00268	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0026c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00270	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00275	6b c8 00	 imul	 ecx, eax, 0
  00278	ba 04 00 00 00	 mov	 edx, 4
  0027d	d1 e2		 shl	 edx, 1
  0027f	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx], xmm0

; 1017 : 
; 1018 : 	scaled_rotation[1][0] = rotation_3d[1][0] * active_3d_environment->screen_i_scale * ( ymax / 32767.0 );

  00288	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0028d	c1 e0 00	 shl	 eax, 0
  00290	b9 04 00 00 00	 mov	 ecx, 4
  00295	6b d1 00	 imul	 edx, ecx, 0
  00298	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0029e	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  002a7	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  002ab	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002af	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  002b4	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  002bc	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002c9	c1 e2 00	 shl	 edx, 0
  002cc	b8 04 00 00 00	 mov	 eax, 4
  002d1	6b c8 00	 imul	 ecx, eax, 0
  002d4	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1019 : 	scaled_rotation[1][1] = rotation_3d[1][1] * active_3d_environment->screen_j_scale * ( ymax / 32767.0 );

  002dd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002e2	c1 e0 00	 shl	 eax, 0
  002e5	b9 04 00 00 00	 mov	 ecx, 4
  002ea	c1 e1 00	 shl	 ecx, 0
  002ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002f3	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  002fc	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00301	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00305	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  0030a	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00312	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00316	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0031f	c1 e0 00	 shl	 eax, 0
  00322	b9 04 00 00 00	 mov	 ecx, 4
  00327	c1 e1 00	 shl	 ecx, 0
  0032a	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1020 : 	scaled_rotation[1][2] = rotation_3d[1][2] * ( ymax / 32767.0 );

  00333	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00338	c1 e0 00	 shl	 eax, 0
  0033b	b9 04 00 00 00	 mov	 ecx, 4
  00340	d1 e1		 shl	 ecx, 1
  00342	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0034b	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00350	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00358	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0035c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00360	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00365	c1 e2 00	 shl	 edx, 0
  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	d1 e0		 shl	 eax, 1
  0036f	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1021 : 
; 1022 : 	scaled_rotation[2][0] = rotation_3d[2][0] * active_3d_environment->screen_i_scale * ( zmax / 32767.0 );

  00378	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0037d	d1 e0		 shl	 eax, 1
  0037f	b9 04 00 00 00	 mov	 ecx, 4
  00384	6b d1 00	 imul	 edx, ecx, 0
  00387	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0038d	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00396	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0039a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0039e	f3 0f 5a 4d e4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  003a3	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  003ab	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b3	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003b8	d1 e2		 shl	 edx, 1
  003ba	b8 04 00 00 00	 mov	 eax, 4
  003bf	6b c8 00	 imul	 ecx, eax, 0
  003c2	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1023 : 	scaled_rotation[2][1] = rotation_3d[2][1] * active_3d_environment->screen_j_scale * ( zmax / 32767.0 );

  003cb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003d0	d1 e0		 shl	 eax, 1
  003d2	b9 04 00 00 00	 mov	 ecx, 4
  003d7	c1 e1 00	 shl	 ecx, 0
  003da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  003e0	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  003e9	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  003ee	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003f2	f3 0f 5a 4d e4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  003f7	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  003ff	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00403	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00407	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0040c	d1 e0		 shl	 eax, 1
  0040e	b9 04 00 00 00	 mov	 ecx, 4
  00413	c1 e1 00	 shl	 ecx, 0
  00416	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1024 : 	scaled_rotation[2][2] = rotation_3d[2][2] * ( zmax / 32767.0 );

  0041f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00424	d1 e0		 shl	 eax, 1
  00426	b9 04 00 00 00	 mov	 ecx, 4
  0042b	d1 e1		 shl	 ecx, 1
  0042d	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00436	f3 0f 5a 4d e4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  0043b	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00443	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00447	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0044b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00450	d1 e2		 shl	 edx, 1
  00452	b8 04 00 00 00	 mov	 eax, 4
  00457	d1 e0		 shl	 eax, 1
  00459	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1025 : 
; 1026 : 	for ( count = number_of_points; count > 0; count-- )

  00462	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00465	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00468	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  0046a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0046d	83 e8 01	 sub	 eax, 1
  00470	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  00473	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00477	0f 8e 1d 02 00
	00		 jle	 $LN3@transform_

; 1027 : 	{
; 1028 : 
; 1029 : 		{
; 1030 : 
; 1031 : 			float
; 1032 : 				point_x,
; 1033 : 				point_y,
; 1034 : 				point_z,
; 1035 : 				x,
; 1036 : 				y;
; 1037 : 
; 1038 : 			point_x = points->x;

  0047d	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00480	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00483	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00487	f3 0f 11 45 d4	 movss	 DWORD PTR _point_x$11[ebp], xmm0

; 1039 : 			point_y = points->y;

  0048c	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0048f	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00493	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00497	f3 0f 11 45 d0	 movss	 DWORD PTR _point_y$10[ebp], xmm0

; 1040 : 			point_z = points->z;

  0049c	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0049f	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  004a3	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004a7	f3 0f 11 45 cc	 movss	 DWORD PTR _point_z$9[ebp], xmm0

; 1041 : 
; 1042 : 			x = pos_x;

  004ac	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _pos_x$[ebp]
  004b1	f3 0f 11 45 c8	 movss	 DWORD PTR _x$8[ebp], xmm0

; 1043 : 			x += point_x * scaled_rotation[0][0];

  004b6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004bb	6b c8 00	 imul	 ecx, eax, 0
  004be	ba 04 00 00 00	 mov	 edx, 4
  004c3	6b c2 00	 imul	 eax, edx, 0
  004c6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _point_x$11[ebp]
  004cb	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  004d4	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _x$8[ebp]
  004d9	f3 0f 11 45 c8	 movss	 DWORD PTR _x$8[ebp], xmm0

; 1044 : 			x += point_y * scaled_rotation[1][0];

  004de	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004e3	c1 e0 00	 shl	 eax, 0
  004e6	b9 04 00 00 00	 mov	 ecx, 4
  004eb	6b d1 00	 imul	 edx, ecx, 0
  004ee	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _point_y$10[ebp]
  004f3	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+edx]
  004fc	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _x$8[ebp]
  00501	f3 0f 11 45 c8	 movss	 DWORD PTR _x$8[ebp], xmm0

; 1045 : 			x += point_z * scaled_rotation[2][0];

  00506	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0050b	d1 e0		 shl	 eax, 1
  0050d	b9 04 00 00 00	 mov	 ecx, 4
  00512	6b d1 00	 imul	 edx, ecx, 0
  00515	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point_z$9[ebp]
  0051a	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+edx]
  00523	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _x$8[ebp]
  00528	f3 0f 11 45 c8	 movss	 DWORD PTR _x$8[ebp], xmm0

; 1046 : 
; 1047 : 			y = pos_y;

  0052d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _pos_y$[ebp]
  00532	f3 0f 11 45 c4	 movss	 DWORD PTR _y$7[ebp], xmm0

; 1048 : 			y += point_x * scaled_rotation[0][1];

  00537	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0053c	6b c8 00	 imul	 ecx, eax, 0
  0053f	ba 04 00 00 00	 mov	 edx, 4
  00544	c1 e2 00	 shl	 edx, 0
  00547	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _point_x$11[ebp]
  0054c	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  00555	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _y$7[ebp]
  0055a	f3 0f 11 45 c4	 movss	 DWORD PTR _y$7[ebp], xmm0

; 1049 : 			y += point_y * scaled_rotation[1][1];

  0055f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00564	c1 e0 00	 shl	 eax, 0
  00567	b9 04 00 00 00	 mov	 ecx, 4
  0056c	c1 e1 00	 shl	 ecx, 0
  0056f	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _point_y$10[ebp]
  00574	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  0057d	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _y$7[ebp]
  00582	f3 0f 11 45 c4	 movss	 DWORD PTR _y$7[ebp], xmm0

; 1050 : 			y += point_z * scaled_rotation[2][1];

  00587	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0058c	d1 e0		 shl	 eax, 1
  0058e	b9 04 00 00 00	 mov	 ecx, 4
  00593	c1 e1 00	 shl	 ecx, 0
  00596	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point_z$9[ebp]
  0059b	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  005a4	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _y$7[ebp]
  005a9	f3 0f 11 45 c4	 movss	 DWORD PTR _y$7[ebp], xmm0

; 1051 : 
; 1052 : 			result_2d_points->z = pos_z +

  005ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005b3	6b c8 00	 imul	 ecx, eax, 0
  005b6	ba 04 00 00 00	 mov	 edx, 4
  005bb	d1 e2		 shl	 edx, 1
  005bd	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _point_x$11[ebp]
  005c2	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  005cb	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  005d0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005d5	c1 e0 00	 shl	 eax, 0
  005d8	b9 04 00 00 00	 mov	 ecx, 4
  005dd	d1 e1		 shl	 ecx, 1
  005df	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _point_y$10[ebp]
  005e4	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  005ed	f3 0f 58 c1	 addss	 xmm0, xmm1
  005f1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005f6	d1 e2		 shl	 edx, 1
  005f8	b8 04 00 00 00	 mov	 eax, 4
  005fd	d1 e0		 shl	 eax, 1
  005ff	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _point_z$9[ebp]
  00604	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  0060d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00611	8b 4d f0	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00614	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 1053 : 											 point_x * scaled_rotation[0][2] +
; 1054 : 											 point_y * scaled_rotation[1][2] +
; 1055 : 											 point_z * scaled_rotation[2][2];
; 1056 : 
; 1057 : 			result_2d_points->q = ( 1.0 / result_2d_points->z );

  00619	8b 45 f0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  0061c	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00621	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00629	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0062d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00631	8b 4d f0	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00634	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1058 : 
; 1059 : 			result_2d_points->j = environment_y_origin - ( y * result_2d_points->q );

  00639	8b 45 f0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  0063c	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y$7[ebp]
  00641	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  00646	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?environment_y_origin@@3MA
  0064e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00652	8b 4d f0	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00655	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1

; 1060 : 			result_2d_points->i = environment_x_origin + ( x * result_2d_points->q );

  0065a	8b 45 f0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  0065d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$8[ebp]
  00662	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  00667	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?environment_x_origin@@3MA
  0066f	8b 4d f0	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00672	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1061 : 
; 1062 : #if DEBUG_STATS
; 1063 : 			current_number_of_3d_points_transformed++;

  00676	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_number_of_3d_points_transformed@@3HA ; current_number_of_3d_points_transformed
  0067b	83 c0 01	 add	 eax, 1
  0067e	a3 00 00 00 00	 mov	 DWORD PTR ?current_number_of_3d_points_transformed@@3HA, eax ; current_number_of_3d_points_transformed

; 1064 : #endif
; 1065 : 		}
; 1066 : 
; 1067 : 		result_2d_points++;

  00683	8b 45 f0	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00686	83 c0 10	 add	 eax, 16			; 00000010H
  00689	89 45 f0	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 1068 : 		points++;

  0068c	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0068f	83 c0 06	 add	 eax, 6
  00692	89 45 f4	 mov	 DWORD PTR _points$[ebp], eax

; 1069 : 	}

  00695	e9 d0 fd ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 1070 : 
; 1071 : 	//
; 1072 : 	// Set back the fpu precision mode.
; 1073 : 	//
; 1074 : 
; 1075 : 	set_fpu_precision_mode_double ();

  0069a	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_double@@YGXXZ ; set_fpu_precision_mode_double

; 1076 : }

  0069f	5f		 pop	 edi
  006a0	5e		 pop	 esi
  006a1	5b		 pop	 ebx
  006a2	8b e5		 mov	 esp, ebp
  006a4	5d		 pop	 ebp
  006a5	c2 14 00	 ret	 20			; 00000014H
?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; transform_unclipped_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
_j$1 = -120						; size = 4
_i$2 = -116						; size = 4
_q$3 = -112						; size = 4
_z$4 = -108						; size = 4
_y$5 = -104						; size = 4
_x$6 = -100						; size = 4
_iymin$ = -96						; size = 4
_iymax$ = -92						; size = 4
_ixmin$ = -88						; size = 4
_ixmax$ = -84						; size = 4
_oymin$ = -80						; size = 4
_oymax$ = -76						; size = 4
_oxmin$ = -72						; size = 4
_oxmax$ = -68						; size = 4
_pos_z$ = -64						; size = 4
_pos_y$ = -60						; size = 4
_pos_x$ = -56						; size = 4
_temp_last_transformed_point_outcode$ = -49		; size = 1
_last_transformed_point_outcode$ = -48			; size = 4
_result_outcode$ = -44					; size = 4
_temp_last_transformed_point$ = -40			; size = 16
_last_transformed_point$ = -24				; size = 4
_result_2d_points$ = -20				; size = 4
_result_3d_points$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; transform_flat_3d_object, COMDAT

; 791  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 792  : 
; 793  : 	int
; 794  : 		count,
; 795  : 		number_of_points;
; 796  : 
; 797  : 	object_short_3d_point
; 798  : 		*points;
; 799  : 
; 800  : 	object_transformed_3d_point
; 801  : 		*result_3d_points;
; 802  : 
; 803  : 	object_transformed_2d_point
; 804  : 		*result_2d_points,
; 805  : 		*last_transformed_point,
; 806  : 		temp_last_transformed_point;
; 807  : 
; 808  : 	unsigned char
; 809  : 		*result_outcode,
; 810  : 		*last_transformed_point_outcode,
; 811  : 		temp_last_transformed_point_outcode;
; 812  : 
; 813  : 	float
; 814  : 		pos_x,
; 815  : 		pos_y,
; 816  : 		pos_z,
; 817  : 		oxmax,
; 818  : 		oxmin,
; 819  : 		oymax,
; 820  : 		oymin;
; 821  : 
; 822  : 	int
; 823  : 		ixmax,
; 824  : 		ixmin,
; 825  : 		iymax,
; 826  : 		iymin;
; 827  : 
; 828  : 	//
; 829  : 	// We only need the fpu to be in single precision mode
; 830  : 	//
; 831  : 
; 832  : 	set_fpu_precision_mode_single ();

  0000c	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_single@@YGXXZ ; set_fpu_precision_mode_single

; 833  : 
; 834  : 	number_of_points = object->number_of_points;

  00011	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00014	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 835  : 
; 836  : 	ASSERT ( ( number_of_points + points_base ) < MAX_POINTS );

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0001d	03 45 18	 add	 eax, DWORD PTR _points_base$[ebp]
  00020	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00025	7c 18		 jl	 SHORT $LN5@transform_
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  0002c	83 c0 2d	 add	 eax, 45			; 0000002dH
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
  0003a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@transform_:

; 837  : 
; 838  : 	points = object->points;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00042	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00045	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 839  : 
; 840  : 	result_3d_points = &transformed_3d_3d_points[points_base];

  00048	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0004b	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A[eax*8]
  00052	89 4d f0	 mov	 DWORD PTR _result_3d_points$[ebp], ecx

; 841  : 
; 842  : 	result_2d_points = &transformed_3d_2d_points[points_base];

  00055	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  00058	c1 e0 04	 shl	 eax, 4
  0005b	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points
  00060	89 45 ec	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 843  : 
; 844  : 	result_outcode = &transformed_3d_point_outcodes[points_base];

  00063	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  00066	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_point_outcodes@@3PAEA ; transformed_3d_point_outcodes
  0006b	89 45 d4	 mov	 DWORD PTR _result_outcode$[ebp], eax

; 845  : 
; 846  : 	last_transformed_point = &temp_last_transformed_point;

  0006e	8d 45 d8	 lea	 eax, DWORD PTR _temp_last_transformed_point$[ebp]
  00071	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 847  : 
; 848  : 	last_transformed_point_outcode = &temp_last_transformed_point_outcode;

  00074	8d 45 cf	 lea	 eax, DWORD PTR _temp_last_transformed_point_outcode$[ebp]
  00077	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 849  : 
; 850  : 	pos_x = pos->x;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0007d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00081	f3 0f 11 45 c8	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 851  : 	pos_y = pos->y;

  00086	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00089	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0008e	f3 0f 11 45 c4	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 852  : 	pos_z = pos->z;

  00093	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00096	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0009b	f3 0f 11 45 c0	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 853  : 
; 854  : 	for ( count = number_of_points; count > 0; count-- )

  000a0	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000a3	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  000a6	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000ab	83 e8 01	 sub	 eax, 1
  000ae	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  000b1	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  000b5	0f 8e d8 02 00
	00		 jle	 $LN3@transform_

; 855  : 	{
; 856  : 
; 857  : 		{
; 858  : 
; 859  : 			float
; 860  : 				x,
; 861  : 				y,
; 862  : 				z;
; 863  : 
; 864  : 			x = pos_x;

  000bb	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _pos_x$[ebp]
  000c0	f3 0f 11 45 9c	 movss	 DWORD PTR _x$6[ebp], xmm0

; 865  : 			x += points->x * rotation_3d[0][0];

  000c5	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  000c8	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000cb	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000cf	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000d4	6b c2 00	 imul	 eax, edx, 0
  000d7	b9 04 00 00 00	 mov	 ecx, 4
  000dc	6b d1 00	 imul	 edx, ecx, 0
  000df	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  000e8	f3 0f 58 45 9c	 addss	 xmm0, DWORD PTR _x$6[ebp]
  000ed	f3 0f 11 45 9c	 movss	 DWORD PTR _x$6[ebp], xmm0

; 866  : 			x += points->z * rotation_3d[2][0];

  000f2	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  000f5	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  000f9	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000fd	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00102	d1 e2		 shl	 edx, 1
  00104	b8 04 00 00 00	 mov	 eax, 4
  00109	6b c8 00	 imul	 ecx, eax, 0
  0010c	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  00115	f3 0f 58 45 9c	 addss	 xmm0, DWORD PTR _x$6[ebp]
  0011a	f3 0f 11 45 9c	 movss	 DWORD PTR _x$6[ebp], xmm0

; 867  : 
; 868  : 			y = pos_y;

  0011f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pos_y$[ebp]
  00124	f3 0f 11 45 98	 movss	 DWORD PTR _y$5[ebp], xmm0

; 869  : 			y += points->x * rotation_3d[0][1];

  00129	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0012c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0012f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00133	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00138	6b c2 00	 imul	 eax, edx, 0
  0013b	b9 04 00 00 00	 mov	 ecx, 4
  00140	c1 e1 00	 shl	 ecx, 0
  00143	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0014c	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _y$5[ebp]
  00151	f3 0f 11 45 98	 movss	 DWORD PTR _y$5[ebp], xmm0

; 870  : 			y += points->z * rotation_3d[2][1];

  00156	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00159	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0015d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00161	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00166	d1 e2		 shl	 edx, 1
  00168	b8 04 00 00 00	 mov	 eax, 4
  0016d	c1 e0 00	 shl	 eax, 0
  00170	f3 0f 59 84 02
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00179	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _y$5[ebp]
  0017e	f3 0f 11 45 98	 movss	 DWORD PTR _y$5[ebp], xmm0

; 871  : 
; 872  : 			z = pos_z;

  00183	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pos_z$[ebp]
  00188	f3 0f 11 45 94	 movss	 DWORD PTR _z$4[ebp], xmm0

; 873  : 			z += points->x * rotation_3d[0][2];

  0018d	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00190	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00193	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00197	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0019c	6b c2 00	 imul	 eax, edx, 0
  0019f	b9 04 00 00 00	 mov	 ecx, 4
  001a4	d1 e1		 shl	 ecx, 1
  001a6	f3 0f 59 84 08
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  001af	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _z$4[ebp]
  001b4	f3 0f 11 45 94	 movss	 DWORD PTR _z$4[ebp], xmm0

; 874  : 			z += points->z * rotation_3d[2][2];

  001b9	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  001bc	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  001c0	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001c4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001c9	d1 e2		 shl	 edx, 1
  001cb	b8 04 00 00 00	 mov	 eax, 4
  001d0	d1 e0		 shl	 eax, 1
  001d2	f3 0f 59 84 02
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  001db	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _z$4[ebp]
  001e0	f3 0f 11 45 94	 movss	 DWORD PTR _z$4[ebp], xmm0

; 875  : 
; 876  : 			if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  001e5	8b 45 94	 mov	 eax, DWORD PTR _z$4[ebp]
  001e8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  001ee	0f 8c 3d 01 00
	00		 jl	 $LN6@transform_

; 877  : 			{
; 878  : 
; 879  : 				float
; 880  : 					q,
; 881  : 					i,
; 882  : 					j;
; 883  : 
; 884  : 				oxmax = active_viewport.x_max - last_transformed_point->i;

  001f4	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  001f7	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  001ff	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00203	f3 0f 11 45 bc	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 885  : 				oxmin = last_transformed_point->i - active_viewport.x_min;

  00208	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0020b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0020f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00217	f3 0f 11 45 b8	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 886  : 				oymax = active_viewport.y_max - last_transformed_point->j;

  0021c	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0021f	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00227	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0022c	f3 0f 11 45 b4	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 887  : 				oymin = last_transformed_point->j - active_viewport.y_min;

  00231	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00234	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00239	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00241	f3 0f 11 45 b0	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 888  : 
; 889  : 				ixmax = *( ( int * ) &oxmax );

  00246	8b 45 bc	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00249	89 45 ac	 mov	 DWORD PTR _ixmax$[ebp], eax

; 890  : 				ixmin = *( ( int * ) &oxmin );

  0024c	8b 45 b8	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0024f	89 45 a8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 891  : 				iymax = *( ( int * ) &oymax );

  00252	8b 45 b4	 mov	 eax, DWORD PTR _oymax$[ebp]
  00255	89 45 a4	 mov	 DWORD PTR _iymax$[ebp], eax

; 892  : 				iymin = *( ( int * ) &oymin );

  00258	8b 45 b0	 mov	 eax, DWORD PTR _oymin$[ebp]
  0025b	89 45 a0	 mov	 DWORD PTR _iymin$[ebp], eax

; 893  : 
; 894  : 				q = 1.0 / z;

  0025e	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _z$4[ebp]
  00263	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0026b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0026f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00273	f3 0f 11 45 90	 movss	 DWORD PTR _q$3[ebp], xmm0

; 895  : 
; 896  : //				start_float_divide ( z, 1.0 );
; 897  : 
; 898  : 				*last_transformed_point_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00278	8b 45 a4	 mov	 eax, DWORD PTR _iymax$[ebp]
  0027b	50		 push	 eax
  0027c	8b 4d ac	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  0027f	51		 push	 ecx
  00280	8b 55 a0	 mov	 edx, DWORD PTR _iymin$[ebp]
  00283	52		 push	 edx
  00284	8b 45 a8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  0028d	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  00290	88 01		 mov	 BYTE PTR [ecx], al

; 899  : 
; 900  : 				result_3d_points->x = x;

  00292	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00295	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x$6[ebp]
  0029a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 901  : 
; 902  : 				result_3d_points->y = y;

  0029e	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  002a1	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y$5[ebp]
  002a6	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 903  : 
; 904  : 				last_transformed_point = result_2d_points;

  002ab	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  002ae	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 905  : 
; 906  : 				last_transformed_point_outcode = result_outcode;

  002b1	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  002b4	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 907  : 
; 908  : //				q = end_float_divide ();
; 909  : 
; 910  : 				i = ( active_3d_environment->screen_i_scale * x * q );

  002b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002bc	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002c0	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _x$6[ebp]
  002c5	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  002ca	f3 0f 11 45 8c	 movss	 DWORD PTR _i$2[ebp], xmm0

; 911  : 
; 912  : 				j = ( active_3d_environment->screen_j_scale * y * q );

  002cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002d4	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002d9	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _y$5[ebp]
  002de	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  002e3	f3 0f 11 45 88	 movss	 DWORD PTR _j$1[ebp], xmm0

; 913  : 
; 914  : 				result_2d_points->j = active_3d_environment->y_origin - j;

  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002ed	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  002f2	f3 0f 5c 45 88	 subss	 xmm0, DWORD PTR _j$1[ebp]
  002f7	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  002fa	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 915  : 
; 916  : 				result_2d_points->i = active_3d_environment->x_origin + i;

  002ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00304	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00309	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _i$2[ebp]
  0030e	8b 4d ec	 mov	 ecx, DWORD PTR _result_2d_points$[ebp]
  00311	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 917  : 
; 918  : 				result_2d_points->q = q;

  00315	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00318	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _q$3[ebp]
  0031d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 919  : 
; 920  : 				result_2d_points->z = z;

  00322	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00325	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _z$4[ebp]
  0032a	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 921  : 			}
; 922  : 			else

  0032f	eb 2c		 jmp	 SHORT $LN7@transform_
$LN6@transform_:

; 923  : 			{
; 924  : 
; 925  : 				*result_outcode = CLIP_HITHER;

  00331	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  00334	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H

; 926  : 
; 927  : 				result_2d_points->z = z;

  00337	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  0033a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _z$4[ebp]
  0033f	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 928  : 
; 929  : 				result_3d_points->x = x;

  00344	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00347	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x$6[ebp]
  0034c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 930  : 
; 931  : 				result_3d_points->y = y;

  00350	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00353	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00358	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN7@transform_:

; 932  : 			}
; 933  : 
; 934  : #if DEBUG_STATS
; 935  : 			current_number_of_3d_points_transformed++;

  0035d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_number_of_3d_points_transformed@@3HA ; current_number_of_3d_points_transformed
  00362	83 c0 01	 add	 eax, 1
  00365	a3 00 00 00 00	 mov	 DWORD PTR ?current_number_of_3d_points_transformed@@3HA, eax ; current_number_of_3d_points_transformed

; 936  : #endif
; 937  : 		}
; 938  : 
; 939  : 		result_3d_points++;

  0036a	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  0036d	83 c0 08	 add	 eax, 8
  00370	89 45 f0	 mov	 DWORD PTR _result_3d_points$[ebp], eax

; 940  : 		result_2d_points++;

  00373	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00376	83 c0 10	 add	 eax, 16			; 00000010H
  00379	89 45 ec	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 941  : 		result_outcode++;

  0037c	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  0037f	83 c0 01	 add	 eax, 1
  00382	89 45 d4	 mov	 DWORD PTR _result_outcode$[ebp], eax

; 942  : 		points++;

  00385	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00388	83 c0 06	 add	 eax, 6
  0038b	89 45 f4	 mov	 DWORD PTR _points$[ebp], eax

; 943  : 	}

  0038e	e9 15 fd ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 944  : 
; 945  : 	oxmax = active_viewport.x_max - last_transformed_point->i;

  00393	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00396	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0039e	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  003a2	f3 0f 11 45 bc	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 946  : 	oxmin = last_transformed_point->i - active_viewport.x_min;

  003a7	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  003aa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003ae	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  003b6	f3 0f 11 45 b8	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 947  : 	oymax = active_viewport.y_max - last_transformed_point->j;

  003bb	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  003be	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  003c6	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  003cb	f3 0f 11 45 b4	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 948  : 	oymin = last_transformed_point->j - active_viewport.y_min;

  003d0	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  003d3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  003d8	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  003e0	f3 0f 11 45 b0	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 949  : 
; 950  : 	ixmax = *( ( int * ) &oxmax );

  003e5	8b 45 bc	 mov	 eax, DWORD PTR _oxmax$[ebp]
  003e8	89 45 ac	 mov	 DWORD PTR _ixmax$[ebp], eax

; 951  : 	ixmin = *( ( int * ) &oxmin );

  003eb	8b 45 b8	 mov	 eax, DWORD PTR _oxmin$[ebp]
  003ee	89 45 a8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 952  : 	iymax = *( ( int * ) &oymax );

  003f1	8b 45 b4	 mov	 eax, DWORD PTR _oymax$[ebp]
  003f4	89 45 a4	 mov	 DWORD PTR _iymax$[ebp], eax

; 953  : 	iymin = *( ( int * ) &oymin );

  003f7	8b 45 b0	 mov	 eax, DWORD PTR _oymin$[ebp]
  003fa	89 45 a0	 mov	 DWORD PTR _iymin$[ebp], eax

; 954  : 
; 955  : 	*last_transformed_point_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  003fd	8b 45 a4	 mov	 eax, DWORD PTR _iymax$[ebp]
  00400	50		 push	 eax
  00401	8b 4d ac	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00404	51		 push	 ecx
  00405	8b 55 a0	 mov	 edx, DWORD PTR _iymin$[ebp]
  00408	52		 push	 edx
  00409	8b 45 a8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0040c	50		 push	 eax
  0040d	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00412	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  00415	88 01		 mov	 BYTE PTR [ecx], al

; 956  : 
; 957  : 	//
; 958  : 	// Set back the fpu precision mode.
; 959  : 	//
; 960  : 
; 961  : 	set_fpu_precision_mode_double ();

  00417	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_double@@YGXXZ ; set_fpu_precision_mode_double

; 962  : }

  0041c	5f		 pop	 edi
  0041d	5e		 pop	 esi
  0041e	5b		 pop	 ebx
  0041f	8b e5		 mov	 esp, ebp
  00421	5d		 pop	 ebp
  00422	c2 14 00	 ret	 20			; 00000014H
?transform_flat_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; transform_flat_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
$T1 = -232						; size = 4
$T2 = -228						; size = 4
$T3 = -224						; size = 4
$T4 = -220						; size = 4
$T5 = -216						; size = 4
$T6 = -212						; size = 4
_j$7 = -144						; size = 4
_i$8 = -140						; size = 4
_q$9 = -136						; size = 4
_z$10 = -132						; size = 4
_y$11 = -128						; size = 4
_x$12 = -124						; size = 4
_point_z$13 = -120					; size = 4
_point_y$14 = -116					; size = 4
_point_x$15 = -112					; size = 4
_iymin$ = -108						; size = 4
_iymax$ = -104						; size = 4
_ixmin$ = -100						; size = 4
_ixmax$ = -96						; size = 4
_oymin$ = -92						; size = 4
_oymax$ = -88						; size = 4
_oxmin$ = -84						; size = 4
_oxmax$ = -80						; size = 4
_zmax$ = -76						; size = 4
_ymax$ = -72						; size = 4
_xmax$ = -68						; size = 4
_pos_z$ = -64						; size = 4
_pos_y$ = -60						; size = 4
_pos_x$ = -56						; size = 4
_temp_last_transformed_point_outcode$ = -49		; size = 1
_last_transformed_point_outcode$ = -48			; size = 4
_result_outcode$ = -44					; size = 4
_temp_last_transformed_point$ = -40			; size = 16
_last_transformed_point$ = -24				; size = 4
_result_2d_points$ = -20				; size = 4
_result_3d_points$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; transform_3d_object, COMDAT

; 591  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 592  : 
; 593  : 	int
; 594  : 		count,
; 595  : 		number_of_points;
; 596  : 
; 597  : 	object_short_3d_point
; 598  : 		*points;
; 599  : 
; 600  : 	object_transformed_3d_point
; 601  : 		*result_3d_points;
; 602  : 
; 603  : 	object_transformed_2d_point
; 604  : 		*result_2d_points,
; 605  : 		*last_transformed_point,
; 606  : 		temp_last_transformed_point;
; 607  : 
; 608  : 	unsigned char
; 609  : 		*result_outcode,
; 610  : 		*last_transformed_point_outcode,
; 611  : 		temp_last_transformed_point_outcode;
; 612  : 
; 613  : 	float
; 614  : 		pos_x,
; 615  : 		pos_y,
; 616  : 		pos_z,
; 617  : 		xmax,
; 618  : 		ymax,
; 619  : 		zmax,
; 620  : 		oxmax,
; 621  : 		oxmin,
; 622  : 		oymax,
; 623  : 		oymin;
; 624  : 
; 625  : 	unsigned int
; 626  : 		ixmax,
; 627  : 		ixmin,
; 628  : 		iymax,
; 629  : 		iymin;
; 630  : 
; 631  : 	//
; 632  : 	// We only need the fpu to be in single precision mode
; 633  : 	//
; 634  : 
; 635  : 	set_fpu_precision_mode_single ();

  0000c	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_single@@YGXXZ ; set_fpu_precision_mode_single

; 636  : 
; 637  : 	number_of_points = object->number_of_points;

  00011	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00014	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 638  : 
; 639  : 	ASSERT ( ( number_of_points + points_base ) < MAX_POINTS );

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0001d	03 45 18	 add	 eax, DWORD PTR _points_base$[ebp]
  00020	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00025	7c 18		 jl	 SHORT $LN5@transform_
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z@4JA
  0002c	83 c0 30	 add	 eax, 48			; 00000030H
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IHICNKCJ@?$CI?5number_of_points?5?$CL?5points_bas@
  0003a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@transform_:

; 640  : 
; 641  : 	points = object->points;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00042	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00045	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 642  : 
; 643  : 	result_3d_points = &transformed_3d_3d_points[points_base];

  00048	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0004b	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A[eax*8]
  00052	89 4d f0	 mov	 DWORD PTR _result_3d_points$[ebp], ecx

; 644  : 
; 645  : 	result_2d_points = &transformed_3d_2d_points[points_base];

  00055	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  00058	c1 e0 04	 shl	 eax, 4
  0005b	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points
  00060	89 45 ec	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 646  : 
; 647  : 	result_outcode = &transformed_3d_point_outcodes[points_base];

  00063	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  00066	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_point_outcodes@@3PAEA ; transformed_3d_point_outcodes
  0006b	89 45 d4	 mov	 DWORD PTR _result_outcode$[ebp], eax

; 648  : 
; 649  : 	last_transformed_point = &temp_last_transformed_point;

  0006e	8d 45 d8	 lea	 eax, DWORD PTR _temp_last_transformed_point$[ebp]
  00071	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 650  : 
; 651  : 	last_transformed_point_outcode = &temp_last_transformed_point_outcode;

  00074	8d 45 cf	 lea	 eax, DWORD PTR _temp_last_transformed_point_outcode$[ebp]
  00077	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 652  : 
; 653  : 	environment_x_origin = active_3d_environment->x_origin;

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0007f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00084	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_x_origin@@3MA, xmm0

; 654  : 	environment_y_origin = active_3d_environment->y_origin;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00091	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00096	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_y_origin@@3MA, xmm0

; 655  : 
; 656  : 	pos_x = pos->x * active_3d_environment->screen_i_scale;

  0009e	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000a7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000ab	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  000af	f3 0f 11 45 c8	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 657  : 	pos_y = pos->y * active_3d_environment->screen_j_scale;

  000b4	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000bd	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000c2	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000c7	f3 0f 11 45 c4	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 658  : 	pos_z = pos->z;

  000cc	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000cf	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000d4	f3 0f 11 45 c0	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 659  : 
; 660  : 	xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  000d9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000dc	51		 push	 ecx
  000dd	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000ec	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000f5	51		 push	 ecx
  000f6	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00105	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  0010b	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00111	52		 push	 edx
  00112	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0011e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00122	f3 0f 11 45 bc	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 661  : 	ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  00127	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0012a	51		 push	 ecx
  0012b	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0013a	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  00140	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00143	51		 push	 ecx
  00144	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00153	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  00159	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0015f	52		 push	 edx
  00160	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0016c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00170	f3 0f 11 45 b8	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 662  : 	zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  00175	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00178	51		 push	 ecx
  00179	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00188	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  0018e	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00191	51		 push	 ecx
  00192	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  001a1	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  001a7	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  001ad	52		 push	 edx
  001ae	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001ba	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001be	f3 0f 11 45 b4	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 663  : 
; 664  : 	scaled_rotation[0][0] = rotation_3d[0][0] * active_3d_environment->screen_i_scale * ( xmax / 32767.0 );

  001c3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001c8	6b c8 00	 imul	 ecx, eax, 0
  001cb	ba 04 00 00 00	 mov	 edx, 4
  001d0	6b c2 00	 imul	 eax, edx, 0
  001d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001d9	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  001e2	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  001e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001ea	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  001ef	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  001f7	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ff	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00204	6b c8 00	 imul	 ecx, eax, 0
  00207	ba 04 00 00 00	 mov	 edx, 4
  0020c	6b c2 00	 imul	 eax, edx, 0
  0020f	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax], xmm0

; 665  : 	scaled_rotation[0][1] = rotation_3d[0][1] * active_3d_environment->screen_j_scale * ( xmax / 32767.0 );

  00218	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0021d	6b c8 00	 imul	 ecx, eax, 0
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	c1 e2 00	 shl	 edx, 0
  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0022d	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00236	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0023b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0023f	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  00244	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0024c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00250	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00254	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00259	6b d1 00	 imul	 edx, ecx, 0
  0025c	b8 04 00 00 00	 mov	 eax, 4
  00261	c1 e0 00	 shl	 eax, 0
  00264	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 666  : 	scaled_rotation[0][2] = rotation_3d[0][2] * ( xmax / 32767.0 );

  0026d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00272	6b c8 00	 imul	 ecx, eax, 0
  00275	ba 04 00 00 00	 mov	 edx, 4
  0027a	d1 e2		 shl	 edx, 1
  0027c	f3 0f 5a 84 11
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00285	f3 0f 5a 4d bc	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  0028a	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00292	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00296	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0029f	6b c8 00	 imul	 ecx, eax, 0
  002a2	ba 04 00 00 00	 mov	 edx, 4
  002a7	d1 e2		 shl	 edx, 1
  002a9	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx], xmm0

; 667  : 
; 668  : 	scaled_rotation[1][0] = rotation_3d[1][0] * active_3d_environment->screen_i_scale * ( ymax / 32767.0 );

  002b2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b7	c1 e0 00	 shl	 eax, 0
  002ba	b9 04 00 00 00	 mov	 ecx, 4
  002bf	6b d1 00	 imul	 edx, ecx, 0
  002c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  002c8	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  002d1	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  002d5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002d9	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  002de	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  002e6	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002f3	c1 e2 00	 shl	 edx, 0
  002f6	b8 04 00 00 00	 mov	 eax, 4
  002fb	6b c8 00	 imul	 ecx, eax, 0
  002fe	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 669  : 	scaled_rotation[1][1] = rotation_3d[1][1] * active_3d_environment->screen_j_scale * ( ymax / 32767.0 );

  00307	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0030c	c1 e0 00	 shl	 eax, 0
  0030f	b9 04 00 00 00	 mov	 ecx, 4
  00314	c1 e1 00	 shl	 ecx, 0
  00317	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0031d	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00326	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0032b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0032f	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00334	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0033c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00340	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00344	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00349	c1 e0 00	 shl	 eax, 0
  0034c	b9 04 00 00 00	 mov	 ecx, 4
  00351	c1 e1 00	 shl	 ecx, 0
  00354	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 670  : 	scaled_rotation[1][2] = rotation_3d[1][2] * ( ymax / 32767.0 );

  0035d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00362	c1 e0 00	 shl	 eax, 0
  00365	b9 04 00 00 00	 mov	 ecx, 4
  0036a	d1 e1		 shl	 ecx, 1
  0036c	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00375	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  0037a	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00382	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00386	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0038f	c1 e2 00	 shl	 edx, 0
  00392	b8 04 00 00 00	 mov	 eax, 4
  00397	d1 e0		 shl	 eax, 1
  00399	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 671  : 
; 672  : 	scaled_rotation[2][0] = rotation_3d[2][0] * active_3d_environment->screen_i_scale * ( zmax / 32767.0 );

  003a2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003a7	d1 e0		 shl	 eax, 1
  003a9	b9 04 00 00 00	 mov	 ecx, 4
  003ae	6b d1 00	 imul	 edx, ecx, 0
  003b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  003b7	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  003c0	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  003c4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003c8	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  003cd	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  003d5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003dd	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003e2	d1 e2		 shl	 edx, 1
  003e4	b8 04 00 00 00	 mov	 eax, 4
  003e9	6b c8 00	 imul	 ecx, eax, 0
  003ec	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 673  : 	scaled_rotation[2][1] = rotation_3d[2][1] * active_3d_environment->screen_j_scale * ( zmax / 32767.0 );

  003f5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003fa	d1 e0		 shl	 eax, 1
  003fc	b9 04 00 00 00	 mov	 ecx, 4
  00401	c1 e1 00	 shl	 ecx, 0
  00404	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0040a	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00413	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00418	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0041c	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  00421	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00429	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0042d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00431	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00436	d1 e0		 shl	 eax, 1
  00438	b9 04 00 00 00	 mov	 ecx, 4
  0043d	c1 e1 00	 shl	 ecx, 0
  00440	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 674  : 	scaled_rotation[2][2] = rotation_3d[2][2] * ( zmax / 32767.0 );

  00449	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0044e	d1 e0		 shl	 eax, 1
  00450	b9 04 00 00 00	 mov	 ecx, 4
  00455	d1 e1		 shl	 ecx, 1
  00457	f3 0f 5a 84 08
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00460	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  00465	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0046d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00471	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00475	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0047a	d1 e2		 shl	 edx, 1
  0047c	b8 04 00 00 00	 mov	 eax, 4
  00481	d1 e0		 shl	 eax, 1
  00483	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 675  : 
; 676  : 	for ( count = number_of_points; count > 0; count-- )

  0048c	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0048f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00492	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  00494	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00497	83 e8 01	 sub	 eax, 1
  0049a	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  0049d	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  004a1	0f 8e 56 03 00
	00		 jle	 $LN3@transform_

; 677  : 	{
; 678  : 
; 679  : 		{
; 680  : 
; 681  : 			float
; 682  : 				point_x,
; 683  : 				point_y,
; 684  : 				point_z,
; 685  : 				x,
; 686  : 				y,
; 687  : 				z;
; 688  : 
; 689  : 			point_x = points->x;

  004a7	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  004aa	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  004ad	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004b1	f3 0f 11 45 90	 movss	 DWORD PTR _point_x$15[ebp], xmm0

; 690  : 			point_y = points->y;

  004b6	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  004b9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  004bd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004c1	f3 0f 11 45 8c	 movss	 DWORD PTR _point_y$14[ebp], xmm0

; 691  : 			point_z = points->z;

  004c6	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  004c9	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  004cd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004d1	f3 0f 11 45 88	 movss	 DWORD PTR _point_z$13[ebp], xmm0

; 692  : 
; 693  : 			x = pos_x + point_x * scaled_rotation[0][0] + point_y * scaled_rotation[1][0] + point_z * scaled_rotation[2][0];

  004d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004db	6b c8 00	 imul	 ecx, eax, 0
  004de	ba 04 00 00 00	 mov	 edx, 4
  004e3	6b c2 00	 imul	 eax, edx, 0
  004e6	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _point_x$15[ebp]
  004eb	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  004f4	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  004f9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004fe	c1 e1 00	 shl	 ecx, 0
  00501	ba 04 00 00 00	 mov	 edx, 4
  00506	6b c2 00	 imul	 eax, edx, 0
  00509	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _point_y$14[ebp]
  0050e	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  00517	f3 0f 58 c1	 addss	 xmm0, xmm1
  0051b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00520	d1 e1		 shl	 ecx, 1
  00522	ba 04 00 00 00	 mov	 edx, 4
  00527	6b c2 00	 imul	 eax, edx, 0
  0052a	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _point_z$13[ebp]
  0052f	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  00538	f3 0f 58 c1	 addss	 xmm0, xmm1
  0053c	f3 0f 11 45 84	 movss	 DWORD PTR _x$12[ebp], xmm0

; 694  : 			y = pos_y + point_x * scaled_rotation[0][1] + point_y * scaled_rotation[1][1] + point_z * scaled_rotation[2][1];

  00541	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00546	6b c8 00	 imul	 ecx, eax, 0
  00549	ba 04 00 00 00	 mov	 edx, 4
  0054e	c1 e2 00	 shl	 edx, 0
  00551	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _point_x$15[ebp]
  00556	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  0055f	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  00564	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00569	c1 e0 00	 shl	 eax, 0
  0056c	b9 04 00 00 00	 mov	 ecx, 4
  00571	c1 e1 00	 shl	 ecx, 0
  00574	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _point_y$14[ebp]
  00579	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  00582	f3 0f 58 c1	 addss	 xmm0, xmm1
  00586	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0058b	d1 e2		 shl	 edx, 1
  0058d	b8 04 00 00 00	 mov	 eax, 4
  00592	c1 e0 00	 shl	 eax, 0
  00595	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _point_z$13[ebp]
  0059a	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  005a3	f3 0f 58 c1	 addss	 xmm0, xmm1
  005a7	f3 0f 11 45 80	 movss	 DWORD PTR _y$11[ebp], xmm0

; 695  : 			z = pos_z + point_x * scaled_rotation[0][2] + point_y * scaled_rotation[1][2] + point_z * scaled_rotation[2][2];

  005ac	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005b1	6b c8 00	 imul	 ecx, eax, 0
  005b4	ba 04 00 00 00	 mov	 edx, 4
  005b9	d1 e2		 shl	 edx, 1
  005bb	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _point_x$15[ebp]
  005c0	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  005c9	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  005ce	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005d3	c1 e0 00	 shl	 eax, 0
  005d6	b9 04 00 00 00	 mov	 ecx, 4
  005db	d1 e1		 shl	 ecx, 1
  005dd	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _point_y$14[ebp]
  005e2	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  005eb	f3 0f 58 c1	 addss	 xmm0, xmm1
  005ef	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005f4	d1 e2		 shl	 edx, 1
  005f6	b8 04 00 00 00	 mov	 eax, 4
  005fb	d1 e0		 shl	 eax, 1
  005fd	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _point_z$13[ebp]
  00602	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  0060b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0060f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _z$10[ebp], xmm0

; 696  : 
; 697  : 			result_3d_points->x = x;

  00617	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  0061a	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _x$12[ebp]
  0061f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 698  : 			result_3d_points->y = y;

  00623	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00626	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _y$11[ebp]
  0062b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 699  : 			result_2d_points->z = z;

  00630	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00633	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _z$10[ebp]
  0063b	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 700  : 
; 701  : 			if ( *( ( int * ) &result_2d_points->z ) >= *( ( int * ) &clip_hither ) )

  00640	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00643	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00646	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?clip_hither@@3MA
  0064c	0f 8c 7c 01 00
	00		 jl	 $LN6@transform_

; 702  : 			{
; 703  : 
; 704  : 				float
; 705  : 					q,
; 706  : 					i,
; 707  : 					j;
; 708  : 
; 709  : 				oxmax = active_viewport.x_max - last_transformed_point->i;

  00652	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00655	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0065d	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00661	f3 0f 11 45 b0	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 710  : 				oxmin = last_transformed_point->i - active_viewport.x_min;

  00666	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00669	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0066d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00675	f3 0f 11 45 ac	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 711  : 				oymax = active_viewport.y_max - last_transformed_point->j;

  0067a	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0067d	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00685	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0068a	f3 0f 11 45 a8	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 712  : 				oymin = last_transformed_point->j - active_viewport.y_min;

  0068f	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00692	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00697	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0069f	f3 0f 11 45 a4	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 713  : 
; 714  : 				ixmax = *( ( unsigned int * ) &oxmax );

  006a4	8b 45 b0	 mov	 eax, DWORD PTR _oxmax$[ebp]
  006a7	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 715  : 				ixmin = *( ( unsigned int * ) &oxmin );

  006aa	8b 45 ac	 mov	 eax, DWORD PTR _oxmin$[ebp]
  006ad	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 716  : 				iymax = *( ( unsigned int * ) &oymax );

  006b0	8b 45 a8	 mov	 eax, DWORD PTR _oymax$[ebp]
  006b3	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 717  : 				iymin = *( ( unsigned int * ) &oymin );

  006b6	8b 45 a4	 mov	 eax, DWORD PTR _oymin$[ebp]
  006b9	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 718  : 
; 719  : 				q = 1.0 / result_2d_points->z;

  006bc	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  006bf	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  006c4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  006cc	f2 0f 5e c8	 divsd	 xmm1, xmm0
  006d0	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  006d4	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _q$9[ebp], xmm0

; 720  : 
; 721  : 				ixmin >>= 31;

  006dc	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  006df	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  006e2	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 722  : 				iymin &= 0x80000000;

  006e5	8b 45 94	 mov	 eax, DWORD PTR _iymin$[ebp]
  006e8	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  006ed	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 723  : 				ixmax >>= 29;

  006f0	8b 45 a0	 mov	 eax, DWORD PTR _ixmax$[ebp]
  006f3	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  006f6	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 724  : 				iymax &= 0x80000000;

  006f9	8b 45 98	 mov	 eax, DWORD PTR _iymax$[ebp]
  006fc	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00701	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 725  : 				iymin >>= 30;

  00704	8b 45 94	 mov	 eax, DWORD PTR _iymin$[ebp]
  00707	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  0070a	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 726  : 				ixmin &= 0x00000001;

  0070d	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00710	83 e0 01	 and	 eax, 1
  00713	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 727  : 				iymax >>= 28;

  00716	8b 45 98	 mov	 eax, DWORD PTR _iymax$[ebp]
  00719	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  0071c	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 728  : 				ixmax &= 0x00000004;

  0071f	8b 45 a0	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00722	83 e0 04	 and	 eax, 4
  00725	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 729  : 				ixmin |= iymin;

  00728	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0072b	0b 45 94	 or	 eax, DWORD PTR _iymin$[ebp]
  0072e	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 730  : 				ixmax |= iymax;

  00731	8b 45 a0	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00734	0b 45 98	 or	 eax, DWORD PTR _iymax$[ebp]
  00737	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 731  : 				*last_transformed_point_outcode = ( ixmin | ixmax );

  0073a	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0073d	0b 45 a0	 or	 eax, DWORD PTR _ixmax$[ebp]
  00740	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  00743	88 01		 mov	 BYTE PTR [ecx], al

; 732  : 
; 733  : //				start_float_divide ( result_2d_points->z, 1.0 );
; 734  : 
; 735  : //				*last_transformed_point_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );
; 736  : 
; 737  : 				last_transformed_point = result_2d_points;

  00745	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00748	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 738  : 
; 739  : 				last_transformed_point_outcode = result_outcode;

  0074b	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  0074e	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 740  : 
; 741  : //				q = end_float_divide ();
; 742  : 
; 743  : 				i = ( result_3d_points->x * q );

  00751	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00754	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00758	f3 0f 59 85 78
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  00760	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _i$8[ebp], xmm0

; 744  : 				j = ( result_3d_points->y * q );

  00768	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  0076b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00770	f3 0f 59 85 78
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  00778	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _j$7[ebp], xmm0

; 745  : 
; 746  : 				result_2d_points->q = q;

  00780	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00783	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _q$9[ebp]
  0078b	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 747  : 				result_2d_points->j = environment_y_origin - j;

  00790	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_y_origin@@3MA
  00798	f3 0f 5c 85 70
	ff ff ff	 subss	 xmm0, DWORD PTR _j$7[ebp]
  007a0	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  007a3	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 748  : 				result_2d_points->i = environment_x_origin + i;

  007a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_x_origin@@3MA
  007b0	f3 0f 58 85 74
	ff ff ff	 addss	 xmm0, DWORD PTR _i$8[ebp]
  007b8	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  007bb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 749  : 
; 750  : #if DEBUG_STATS
; 751  : 				current_number_of_3d_points_transformed++;

  007bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_number_of_3d_points_transformed@@3HA ; current_number_of_3d_points_transformed
  007c4	83 c0 01	 add	 eax, 1
  007c7	a3 00 00 00 00	 mov	 DWORD PTR ?current_number_of_3d_points_transformed@@3HA, eax ; current_number_of_3d_points_transformed

; 752  : #endif
; 753  : 			}
; 754  : 			else

  007cc	eb 06		 jmp	 SHORT $LN7@transform_
$LN6@transform_:

; 755  : 			{
; 756  : 
; 757  : 				*result_outcode = CLIP_HITHER;

  007ce	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  007d1	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN7@transform_:

; 758  : 			}
; 759  : 		}
; 760  : 
; 761  : 		result_3d_points++;

  007d4	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  007d7	83 c0 08	 add	 eax, 8
  007da	89 45 f0	 mov	 DWORD PTR _result_3d_points$[ebp], eax

; 762  : 		result_2d_points++;

  007dd	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  007e0	83 c0 10	 add	 eax, 16			; 00000010H
  007e3	89 45 ec	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 763  : 		result_outcode++;

  007e6	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  007e9	83 c0 01	 add	 eax, 1
  007ec	89 45 d4	 mov	 DWORD PTR _result_outcode$[ebp], eax

; 764  : 		points++;

  007ef	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  007f2	83 c0 06	 add	 eax, 6
  007f5	89 45 f4	 mov	 DWORD PTR _points$[ebp], eax

; 765  : 	}

  007f8	e9 97 fc ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 766  : 
; 767  : 	oxmax = active_viewport.x_max - last_transformed_point->i;

  007fd	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00800	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00808	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0080c	f3 0f 11 45 b0	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 768  : 	oxmin = last_transformed_point->i - active_viewport.x_min;

  00811	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00814	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00818	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00820	f3 0f 11 45 ac	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 769  : 	oymax = active_viewport.y_max - last_transformed_point->j;

  00825	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00828	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00830	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00835	f3 0f 11 45 a8	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 770  : 	oymin = last_transformed_point->j - active_viewport.y_min;

  0083a	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0083d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00842	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0084a	f3 0f 11 45 a4	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 771  : 
; 772  : 	ixmax = *( ( int * ) &oxmax );

  0084f	8b 45 b0	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00852	89 45 a0	 mov	 DWORD PTR _ixmax$[ebp], eax

; 773  : 	ixmin = *( ( int * ) &oxmin );

  00855	8b 45 ac	 mov	 eax, DWORD PTR _oxmin$[ebp]
  00858	89 45 9c	 mov	 DWORD PTR _ixmin$[ebp], eax

; 774  : 	iymax = *( ( int * ) &oymax );

  0085b	8b 45 a8	 mov	 eax, DWORD PTR _oymax$[ebp]
  0085e	89 45 98	 mov	 DWORD PTR _iymax$[ebp], eax

; 775  : 	iymin = *( ( int * ) &oymin );

  00861	8b 45 a4	 mov	 eax, DWORD PTR _oymin$[ebp]
  00864	89 45 94	 mov	 DWORD PTR _iymin$[ebp], eax

; 776  : 
; 777  : 	*last_transformed_point_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00867	8b 45 98	 mov	 eax, DWORD PTR _iymax$[ebp]
  0086a	50		 push	 eax
  0086b	8b 4d a0	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  0086e	51		 push	 ecx
  0086f	8b 55 94	 mov	 edx, DWORD PTR _iymin$[ebp]
  00872	52		 push	 edx
  00873	8b 45 9c	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00876	50		 push	 eax
  00877	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  0087c	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  0087f	88 01		 mov	 BYTE PTR [ecx], al

; 778  : 
; 779  : 	//
; 780  : 	// Set back the fpu precision mode.
; 781  : 	//
; 782  : 
; 783  : 	set_fpu_precision_mode_double ();

  00881	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_double@@YGXXZ ; set_fpu_precision_mode_double

; 784  : }

  00886	5f		 pop	 edi
  00887	5e		 pop	 esi
  00888	5b		 pop	 ebx
  00889	8b e5		 mov	 esp, ebp
  0088b	5d		 pop	 ebp
  0088c	c2 14 00	 ret	 20			; 00000014H
?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; transform_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z
_TEXT	SEGMENT
_is_test$1 = -148					; size = 4
_s_test$2 = -144					; size = 4
_temp_intensity$3 = -140				; size = 4
_this_light$4 = -136					; size = 4
_ib$5 = -132						; size = 4
_ig$6 = -128						; size = 4
_ir$7 = -124						; size = 4
_specular$8 = -120					; size = 4
_b$9 = -116						; size = 4
_g$10 = -112						; size = 4
_r$11 = -108						; size = 4
_is_test$12 = -104					; size = 4
_s_test$13 = -100					; size = 4
_ib$14 = -96						; size = 4
_ig$15 = -92						; size = 4
_ir$16 = -88						; size = 4
_s_intensity$17 = -84					; size = 4
_d_intensity$18 = -80					; size = 4
_s$19 = -76						; size = 4
_b$20 = -72						; size = 4
_g$21 = -68						; size = 4
_r$22 = -64						; size = 4
_highlight_vector$23 = -60				; size = 12
_light_vector$24 = -48					; size = 12
_normal_colour$25 = -36					; size = 4
_ib$26 = -32						; size = 4
_ig$27 = -28						; size = 4
_ir$28 = -24						; size = 4
_result_normals$ = -20					; size = 4
_normal$ = -16						; size = 12
_count$ = -4						; size = 4
_normals$ = 8						; size = 4
_number_of_normals$ = 12				; size = 4
_lights$ = 16						; size = 4
_points_base$ = 20					; size = 4
?illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z PROC ; illuminate_object_point_normals, COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 184  : 
; 185  : 	int
; 186  : 		count;
; 187  : 
; 188  : 	vec3d
; 189  : 		normal;
; 190  : 
; 191  : 	object_3d_transformed_point_normal
; 192  : 		*result_normals;
; 193  : 
; 194  : 	ASSERT ( ( number_of_normals + points_base ) < MAX_POINTS );

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _number_of_normals$[ebp]
  0000f	03 45 14	 add	 eax, DWORD PTR _points_base$[ebp]
  00012	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00017	7c 18		 jl	 SHORT $LN13@illuminate
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z@4JA
  0001e	83 c0 0b	 add	 eax, 11			; 0000000bH
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HPBECHPK@c?3?2users?2nhv90?2projects?2eech?2mo@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CBMNNJN@?$CI?5number_of_normals?5?$CL?5points_ba@
  0002c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@illuminate:

; 195  : 
; 196  : 	result_normals = &transformed_3d_normals[points_base];

  00031	8b 45 14	 mov	 eax, DWORD PTR _points_base$[ebp]
  00034	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A[eax*8]
  0003b	89 4d ec	 mov	 DWORD PTR _result_normals$[ebp], ecx

; 197  : 
; 198  : 	if ( !lights )

  0003e	83 7d 10 00	 cmp	 DWORD PTR _lights$[ebp], 0
  00042	0f 85 b1 00 00
	00		 jne	 $LN14@illuminate

; 199  : 	{
; 200  : 
; 201  : 		int
; 202  : 			ir,
; 203  : 			ig,
; 204  : 			ib;
; 205  : 
; 206  : 		real_colour
; 207  : 			normal_colour;
; 208  : 
; 209  : 		asm_convert_float_to_int (  ( ambient_3d_light.colour.red * 255 ), &ir );

  00048	8d 45 e8	 lea	 eax, DWORD PTR _ir$28[ebp]
  0004b	50		 push	 eax
  0004c	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  00054	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0005c	51		 push	 ecx
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 210  : 		asm_convert_float_to_int (  ( ambient_3d_light.colour.green * 255 ), &ig );

  00067	8d 45 e4	 lea	 eax, DWORD PTR _ig$27[ebp]
  0006a	50		 push	 eax
  0006b	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  00073	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0007b	51		 push	 ecx
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 211  : 		asm_convert_float_to_int (  ( ambient_3d_light.colour.blue * 255 ), &ib );

  00086	8d 45 e0	 lea	 eax, DWORD PTR _ib$26[ebp]
  00089	50		 push	 eax
  0008a	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  00092	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0009a	51		 push	 ecx
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 212  : 
; 213  : 		normal_colour.red = ir;

  000a5	8a 45 e8	 mov	 al, BYTE PTR _ir$28[ebp]
  000a8	88 45 de	 mov	 BYTE PTR _normal_colour$25[ebp+2], al

; 214  : 		normal_colour.green = ig;

  000ab	8a 45 e4	 mov	 al, BYTE PTR _ig$27[ebp]
  000ae	88 45 dd	 mov	 BYTE PTR _normal_colour$25[ebp+1], al

; 215  : 		normal_colour.blue = ib;

  000b1	8a 45 e0	 mov	 al, BYTE PTR _ib$26[ebp]
  000b4	88 45 dc	 mov	 BYTE PTR _normal_colour$25[ebp], al

; 216  : 		normal_colour.alpha = current_object_3d_dissolve_value;

  000b7	a0 00 00 00 00	 mov	 al, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  000bc	88 45 df	 mov	 BYTE PTR _normal_colour$25[ebp+3], al

; 217  : 
; 218  : 		for ( count = number_of_normals; count > 0; count-- )

  000bf	8b 45 0c	 mov	 eax, DWORD PTR _number_of_normals$[ebp]
  000c2	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  000c5	eb 09		 jmp	 SHORT $LN4@illuminate
$LN2@illuminate:
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000ca	83 e8 01	 sub	 eax, 1
  000cd	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@illuminate:
  000d0	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  000d4	7e 1e		 jle	 SHORT $LN3@illuminate

; 219  : 		{
; 220  : 
; 221  : 			result_normals->colour = normal_colour.colour;

  000d6	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  000d9	8b 4d dc	 mov	 ecx, DWORD PTR _normal_colour$25[ebp]
  000dc	89 08		 mov	 DWORD PTR [eax], ecx

; 222  : 			result_normals->specular = 0;

  000de	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  000e1	0f 57 c0	 xorps	 xmm0, xmm0
  000e4	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 223  : 
; 224  : 			result_normals++;

  000e9	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  000ec	83 c0 08	 add	 eax, 8
  000ef	89 45 ec	 mov	 DWORD PTR _result_normals$[ebp], eax

; 225  : 		}

  000f2	eb d3		 jmp	 SHORT $LN2@illuminate
$LN3@illuminate:

; 226  : 	}
; 227  : 	else if ( !lights->succ )

  000f4	e9 e7 06 00 00	 jmp	 $LN9@illuminate
$LN14@illuminate:
  000f9	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  000fc	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00100	0f 85 40 03 00
	00		 jne	 $LN16@illuminate

; 228  : 	{
; 229  : 
; 230  : 		vec3d
; 231  : 			light_vector,
; 232  : 			highlight_vector;
; 233  : 
; 234  : 		light_vector.x = lights->lx;

  00106	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00109	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0010d	f3 0f 11 45 d0	 movss	 DWORD PTR _light_vector$24[ebp], xmm0

; 235  : 		light_vector.y = lights->ly;

  00112	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00115	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0011a	f3 0f 11 45 d4	 movss	 DWORD PTR _light_vector$24[ebp+4], xmm0

; 236  : 		light_vector.z = lights->lz;

  0011f	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00122	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00127	f3 0f 11 45 d8	 movss	 DWORD PTR _light_vector$24[ebp+8], xmm0

; 237  : 
; 238  : 		highlight_vector.x = lights->highlight_vector.x;

  0012c	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0012f	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00134	f3 0f 11 45 c4	 movss	 DWORD PTR _highlight_vector$23[ebp], xmm0

; 239  : 		highlight_vector.y = lights->highlight_vector.y;

  00139	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0013c	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00141	f3 0f 11 45 c8	 movss	 DWORD PTR _highlight_vector$23[ebp+4], xmm0

; 240  : 		highlight_vector.z = lights->highlight_vector.z;

  00146	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00149	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0014e	f3 0f 11 45 cc	 movss	 DWORD PTR _highlight_vector$23[ebp+8], xmm0

; 241  : 
; 242  : 		for ( count = number_of_normals; count > 0; count-- )

  00153	8b 45 0c	 mov	 eax, DWORD PTR _number_of_normals$[ebp]
  00156	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00159	eb 09		 jmp	 SHORT $LN7@illuminate
$LN5@illuminate:
  0015b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0015e	83 e8 01	 sub	 eax, 1
  00161	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@illuminate:
  00164	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00168	0f 8e d3 02 00
	00		 jle	 $LN6@illuminate

; 243  : 		{
; 244  : 
; 245  : 			float
; 246  : 				r,
; 247  : 				g,
; 248  : 				b,
; 249  : 				s,
; 250  : 				d_intensity,
; 251  : 				s_intensity;
; 252  : 
; 253  : 			int
; 254  : 				ir,
; 255  : 				ig,
; 256  : 				ib;
; 257  : 
; 258  : 			//
; 259  : 			// Set the light levels
; 260  : 			//
; 261  : 
; 262  : 			r = ambient_3d_light.colour.red;

  0016e	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  00176	f3 0f 11 45 c0	 movss	 DWORD PTR _r$22[ebp], xmm0

; 263  : 			g = ambient_3d_light.colour.green;

  0017b	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  00183	f3 0f 11 45 bc	 movss	 DWORD PTR _g$21[ebp], xmm0

; 264  : 			b = ambient_3d_light.colour.blue;

  00188	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  00190	f3 0f 11 45 b8	 movss	 DWORD PTR _b$20[ebp], xmm0

; 265  : 
; 266  : 			s = 0;

  00195	0f 57 c0	 xorps	 xmm0, xmm0
  00198	f3 0f 11 45 b4	 movss	 DWORD PTR _s$19[ebp], xmm0

; 267  : 
; 268  : 			//
; 269  : 			// Calculate normal
; 270  : 			//
; 271  : 
; 272  : 			generate_object_3d_point_normal ( normals, &normal );

  0019d	8d 45 f0	 lea	 eax, DWORD PTR _normal$[ebp]
  001a0	50		 push	 eax
  001a1	8b 4d 08	 mov	 ecx, DWORD PTR _normals$[ebp]
  001a4	51		 push	 ecx
  001a5	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 273  : 
; 274  : 			//
; 275  : 			// Calculate diffuse colour intensities
; 276  : 			//
; 277  : 
; 278  : 			d_intensity = normal.x * lights->lx + normal.y * lights->ly + normal.z * lights->lz;

  001aa	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  001ad	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _normal$[ebp]
  001b2	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  001b6	8b 4d 10	 mov	 ecx, DWORD PTR _lights$[ebp]
  001b9	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  001be	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  001c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c7	8b 55 10	 mov	 edx, DWORD PTR _lights$[ebp]
  001ca	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  001cf	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  001d4	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d8	f3 0f 11 45 b0	 movss	 DWORD PTR _d_intensity$18[ebp], xmm0

; 279  : 			s_intensity = normal.x * lights->highlight_vector.x + normal.y * lights->highlight_vector.y + normal.z * lights->highlight_vector.z;

  001dd	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  001e0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _normal$[ebp]
  001e5	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  001ea	8b 4d 10	 mov	 ecx, DWORD PTR _lights$[ebp]
  001ed	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  001f2	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  001f7	f3 0f 58 c1	 addss	 xmm0, xmm1
  001fb	8b 55 10	 mov	 edx, DWORD PTR _lights$[ebp]
  001fe	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  00203	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00208	f3 0f 58 c1	 addss	 xmm0, xmm1
  0020c	f3 0f 11 45 ac	 movss	 DWORD PTR _s_intensity$17[ebp], xmm0

; 280  : 
; 281  : //			d_intensity *= 1.0 / 32767.0;
; 282  : //			s_intensity *= 1.0 / 32767.0;
; 283  : 
; 284  : 			if ( *( ( int *) &d_intensity ) > *( ( int *) &float_value_zero ) )

  00211	8b 45 b0	 mov	 eax, DWORD PTR _d_intensity$18[ebp]
  00214	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  0021a	7e 54		 jle	 SHORT $LN18@illuminate

; 285  : 			{
; 286  : 
; 287  : 				d_intensity *= d_intensity;

  0021c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _d_intensity$18[ebp]
  00221	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _d_intensity$18[ebp]
  00226	f3 0f 11 45 b0	 movss	 DWORD PTR _d_intensity$18[ebp], xmm0

; 288  : 
; 289  : 				r += d_intensity * lights->colour.red;

  0022b	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0022e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _d_intensity$18[ebp]
  00233	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00238	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _r$22[ebp]
  0023d	f3 0f 11 45 c0	 movss	 DWORD PTR _r$22[ebp], xmm0

; 290  : 				g += d_intensity * lights->colour.green;

  00242	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  00245	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _d_intensity$18[ebp]
  0024a	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  0024f	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _g$21[ebp]
  00254	f3 0f 11 45 bc	 movss	 DWORD PTR _g$21[ebp], xmm0

; 291  : 				b += d_intensity * lights->colour.blue;

  00259	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0025c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _d_intensity$18[ebp]
  00261	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00266	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _b$20[ebp]
  0026b	f3 0f 11 45 b8	 movss	 DWORD PTR _b$20[ebp], xmm0
$LN18@illuminate:

; 292  : 			}
; 293  : 
; 294  : 			//
; 295  : 			// Calculate specular colour intensities
; 296  : 			//
; 297  : 
; 298  : 			if ( *( ( int *) &s_intensity ) > *( ( int *) &float_value_zero ) )

  00270	8b 45 ac	 mov	 eax, DWORD PTR _s_intensity$17[ebp]
  00273	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  00279	7e 62		 jle	 SHORT $LN19@illuminate

; 299  : 			{
; 300  : 
; 301  : 				s_intensity *= s_intensity;

  0027b	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  00280	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  00285	f3 0f 11 45 ac	 movss	 DWORD PTR _s_intensity$17[ebp], xmm0

; 302  : 				s_intensity *= s_intensity;

  0028a	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  0028f	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  00294	f3 0f 11 45 ac	 movss	 DWORD PTR _s_intensity$17[ebp], xmm0

; 303  : 				s_intensity *= s_intensity;

  00299	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  0029e	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  002a3	f3 0f 11 45 ac	 movss	 DWORD PTR _s_intensity$17[ebp], xmm0

; 304  : 				s_intensity *= s_intensity;

  002a8	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  002ad	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  002b2	f3 0f 11 45 ac	 movss	 DWORD PTR _s_intensity$17[ebp], xmm0

; 305  : 				s_intensity *= s_intensity;

  002b7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  002bc	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  002c1	f3 0f 11 45 ac	 movss	 DWORD PTR _s_intensity$17[ebp], xmm0

; 306  : 
; 307  : 				s += s_intensity * lights->intensity;

  002c6	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  002c9	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _s_intensity$17[ebp]
  002ce	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  002d3	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _s$19[ebp]
  002d8	f3 0f 11 45 b4	 movss	 DWORD PTR _s$19[ebp], xmm0
$LN19@illuminate:

; 308  : 			}
; 309  : 
; 310  : 			asm_convert_float_to_int ( ( r * 255 ), &int_light_bounds[0] );

  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 00	 imul	 ecx, eax, 0
  002e5	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?int_light_bounds@@3PAHA ; int_light_bounds
  002eb	51		 push	 ecx
  002ec	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _r$22[ebp]
  002f1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002f9	51		 push	 ecx
  002fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ff	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 311  : 			asm_convert_float_to_int ( ( g * 255 ), &int_light_bounds[2] );

  00304	b8 04 00 00 00	 mov	 eax, 4
  00309	d1 e0		 shl	 eax, 1
  0030b	05 00 00 00 00	 add	 eax, OFFSET ?int_light_bounds@@3PAHA ; int_light_bounds
  00310	50		 push	 eax
  00311	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _g$21[ebp]
  00316	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0031e	51		 push	 ecx
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 312  : 			asm_convert_float_to_int ( ( b * 255 ), &int_light_bounds[4] );

  00329	b8 04 00 00 00	 mov	 eax, 4
  0032e	c1 e0 02	 shl	 eax, 2
  00331	05 00 00 00 00	 add	 eax, OFFSET ?int_light_bounds@@3PAHA ; int_light_bounds
  00336	50		 push	 eax
  00337	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _b$20[ebp]
  0033c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00344	51		 push	 ecx
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 313  : 			float_light_bounds[0] = s;

  0034f	b8 04 00 00 00	 mov	 eax, 4
  00354	6b c8 00	 imul	 ecx, eax, 0
  00357	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _s$19[ebp]
  0035c	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR ?float_light_bounds@@3PAMA[ecx], xmm0

; 314  : 
; 315  : 			{
; 316  : 
; 317  : 				float
; 318  : 					s_test;
; 319  : 
; 320  : 				unsigned int
; 321  : 					is_test;
; 322  : 
; 323  : 				ir = int_light_bounds[ (((unsigned int) ( 255 - int_light_bounds[0] )) >> 31) + 0];

  00364	b8 04 00 00 00	 mov	 eax, 4
  00369	6b c8 00	 imul	 ecx, eax, 0
  0036c	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00371	2b 91 00 00 00
	00		 sub	 edx, DWORD PTR ?int_light_bounds@@3PAHA[ecx]
  00377	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  0037a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?int_light_bounds@@3PAHA[edx*4]
  00381	89 45 a8	 mov	 DWORD PTR _ir$16[ebp], eax

; 324  : 				ig = int_light_bounds[ (((unsigned int) ( 255 - int_light_bounds[2] )) >> 31) + 2];

  00384	b8 04 00 00 00	 mov	 eax, 4
  00389	d1 e0		 shl	 eax, 1
  0038b	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00390	2b 88 00 00 00
	00		 sub	 ecx, DWORD PTR ?int_light_bounds@@3PAHA[eax]
  00396	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00399	8b 14 8d 08 00
	00 00		 mov	 edx, DWORD PTR ?int_light_bounds@@3PAHA[ecx*4+8]
  003a0	89 55 a4	 mov	 DWORD PTR _ig$15[ebp], edx

; 325  : 				ib = int_light_bounds[ (((unsigned int) ( 255 - int_light_bounds[4] )) >> 31) + 4];

  003a3	b8 04 00 00 00	 mov	 eax, 4
  003a8	c1 e0 02	 shl	 eax, 2
  003ab	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  003b0	2b 88 00 00 00
	00		 sub	 ecx, DWORD PTR ?int_light_bounds@@3PAHA[eax]
  003b6	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  003b9	8b 14 8d 10 00
	00 00		 mov	 edx, DWORD PTR ?int_light_bounds@@3PAHA[ecx*4+16]
  003c0	89 55 a0	 mov	 DWORD PTR _ib$14[ebp], edx

; 326  : 
; 327  : 				s_test = 1.0 - s;

  003c3	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _s$19[ebp]
  003c8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003d0	f2 0f 5c c8	 subsd	 xmm1, xmm0
  003d4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003d8	f3 0f 11 45 9c	 movss	 DWORD PTR _s_test$13[ebp], xmm0

; 328  : 				is_test = *( ( int * ) &s_test );

  003dd	8b 45 9c	 mov	 eax, DWORD PTR _s_test$13[ebp]
  003e0	89 45 98	 mov	 DWORD PTR _is_test$12[ebp], eax

; 329  : 
; 330  : 				s = float_light_bounds[ (((unsigned int) is_test) >> 31) ];

  003e3	8b 45 98	 mov	 eax, DWORD PTR _is_test$12[ebp]
  003e6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003e9	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?float_light_bounds@@3PAMA[eax*4]
  003f2	f3 0f 11 45 b4	 movss	 DWORD PTR _s$19[ebp], xmm0

; 331  : 			}
; 332  : 
; 333  : 			result_normals->r = ir;

  003f7	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  003fa	8a 4d a8	 mov	 cl, BYTE PTR _ir$16[ebp]
  003fd	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 334  : 			result_normals->g = ig;

  00400	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  00403	8a 4d a4	 mov	 cl, BYTE PTR _ig$15[ebp]
  00406	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 335  : 			result_normals->b = ib;

  00409	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  0040c	8a 4d a0	 mov	 cl, BYTE PTR _ib$14[ebp]
  0040f	88 08		 mov	 BYTE PTR [eax], cl

; 336  : 			result_normals->alpha = current_object_3d_dissolve_value;

  00411	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  00414	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  0041a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 337  : 			result_normals->specular = s;

  0041d	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  00420	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _s$19[ebp]
  00425	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 338  : 
; 339  : 			normals++;

  0042a	8b 45 08	 mov	 eax, DWORD PTR _normals$[ebp]
  0042d	83 c0 02	 add	 eax, 2
  00430	89 45 08	 mov	 DWORD PTR _normals$[ebp], eax

; 340  : 
; 341  : 			result_normals++;

  00433	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  00436	83 c0 08	 add	 eax, 8
  00439	89 45 ec	 mov	 DWORD PTR _result_normals$[ebp], eax

; 342  : 		}

  0043c	e9 1a fd ff ff	 jmp	 $LN5@illuminate
$LN6@illuminate:

; 343  : 	}
; 344  : 	else

  00441	e9 9a 03 00 00	 jmp	 $LN9@illuminate
$LN16@illuminate:

; 345  : 	{
; 346  : 
; 347  : 		for ( count = number_of_normals; count > 0; count-- )

  00446	8b 45 0c	 mov	 eax, DWORD PTR _number_of_normals$[ebp]
  00449	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  0044c	eb 09		 jmp	 SHORT $LN10@illuminate
$LN8@illuminate:
  0044e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00451	83 e8 01	 sub	 eax, 1
  00454	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN10@illuminate:
  00457	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  0045b	0f 8e 7f 03 00
	00		 jle	 $LN9@illuminate

; 348  : 		{
; 349  : 
; 350  : 			float
; 351  : 				r,
; 352  : 				g,
; 353  : 				b,
; 354  : 				specular;
; 355  : 
; 356  : 			int
; 357  : 				ir,
; 358  : 				ig,
; 359  : 				ib;
; 360  : 
; 361  : 			light_3d_source
; 362  : 				*this_light;
; 363  : 
; 364  : 			//
; 365  : 			// Set the light levels
; 366  : 			//
; 367  : 
; 368  : 			r = ambient_3d_light.colour.red;

  00461	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  00469	f3 0f 11 45 94	 movss	 DWORD PTR _r$11[ebp], xmm0

; 369  : 			g = ambient_3d_light.colour.green;

  0046e	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  00476	f3 0f 11 45 90	 movss	 DWORD PTR _g$10[ebp], xmm0

; 370  : 			b = ambient_3d_light.colour.blue;

  0047b	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  00483	f3 0f 11 45 8c	 movss	 DWORD PTR _b$9[ebp], xmm0

; 371  : 
; 372  : 			specular = 0;

  00488	0f 57 c0	 xorps	 xmm0, xmm0
  0048b	f3 0f 11 45 88	 movss	 DWORD PTR _specular$8[ebp], xmm0

; 373  : 
; 374  : 			//
; 375  : 			// Calculate normal
; 376  : 			//
; 377  : 
; 378  : 			generate_object_3d_point_normal ( normals, &normal );

  00490	8d 45 f0	 lea	 eax, DWORD PTR _normal$[ebp]
  00493	50		 push	 eax
  00494	8b 4d 08	 mov	 ecx, DWORD PTR _normals$[ebp]
  00497	51		 push	 ecx
  00498	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 379  : 
; 380  : 			this_light = lights;

  0049d	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  004a0	89 85 78 ff ff
	ff		 mov	 DWORD PTR _this_light$4[ebp], eax
$LN11@illuminate:

; 381  : 
; 382  : 			while ( this_light )

  004a6	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _this_light$4[ebp], 0
  004ad	0f 84 b7 01 00
	00		 je	 $LN12@illuminate

; 383  : 			{
; 384  : 
; 385  : 				float
; 386  : 					temp_intensity;
; 387  : 
; 388  : 				//
; 389  : 				// Calculate diffuse colour intensities
; 390  : 				//
; 391  : 
; 392  : 				temp_intensity = normal.x * this_light->lx + normal.y * this_light->ly + normal.z * this_light->lz;

  004b3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$4[ebp]
  004b9	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _normal$[ebp]
  004be	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  004c2	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$4[ebp]
  004c8	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  004cd	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  004d2	f3 0f 58 c1	 addss	 xmm0, xmm1
  004d6	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this_light$4[ebp]
  004dc	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  004e1	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  004e6	f3 0f 58 c1	 addss	 xmm0, xmm1
  004ea	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 393  : //				temp_intensity *= 1.0 / 32767.0;
; 394  : 
; 395  : 				if ( *( ( int *) &temp_intensity ) > *( ( int *) &float_value_zero ) )

  004f2	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _temp_intensity$3[ebp]
  004f8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  004fe	7e 6f		 jle	 SHORT $LN20@illuminate

; 396  : 				{
; 397  : 
; 398  : 					temp_intensity *= temp_intensity;

  00500	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00508	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00510	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 399  : 
; 400  : 					r += temp_intensity * this_light->colour.red;

  00518	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$4[ebp]
  0051e	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00526	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  0052b	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _r$11[ebp]
  00530	f3 0f 11 45 94	 movss	 DWORD PTR _r$11[ebp], xmm0

; 401  : 					g += temp_intensity * this_light->colour.green;

  00535	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$4[ebp]
  0053b	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00543	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  00548	f3 0f 58 45 90	 addss	 xmm0, DWORD PTR _g$10[ebp]
  0054d	f3 0f 11 45 90	 movss	 DWORD PTR _g$10[ebp], xmm0

; 402  : 					b += temp_intensity * this_light->colour.blue;

  00552	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$4[ebp]
  00558	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00560	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00565	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _b$9[ebp]
  0056a	f3 0f 11 45 8c	 movss	 DWORD PTR _b$9[ebp], xmm0
$LN20@illuminate:

; 403  : 				}
; 404  : 
; 405  : 				//
; 406  : 				// Calculate specular colour intensities
; 407  : 				//
; 408  : 
; 409  : 				temp_intensity = normal.x * this_light->highlight_vector.x +

  0056f	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$4[ebp]
  00575	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _normal$[ebp]
  0057a	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  0057f	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$4[ebp]
  00585	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _normal$[ebp+4]
  0058a	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  0058f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00593	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this_light$4[ebp]
  00599	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _normal$[ebp+8]
  0059e	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  005a3	f3 0f 58 c1	 addss	 xmm0, xmm1
  005a7	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 410  : 										normal.y * this_light->highlight_vector.y +
; 411  : 										normal.z * this_light->highlight_vector.z;
; 412  : 
; 413  : //				temp_intensity *= 1.0 / 32767.0;
; 414  : 
; 415  : 				if ( *( ( int *) &temp_intensity ) > *( ( int *) &float_value_zero ) )

  005af	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _temp_intensity$3[ebp]
  005b5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  005bb	0f 8e 95 00 00
	00		 jle	 $LN21@illuminate

; 416  : 				{
; 417  : 
; 418  : 					temp_intensity *= temp_intensity;

  005c1	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  005c9	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  005d1	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 419  : 					temp_intensity *= temp_intensity;

  005d9	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  005e1	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  005e9	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 420  : 					temp_intensity *= temp_intensity;

  005f1	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  005f9	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00601	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 421  : 					temp_intensity *= temp_intensity;

  00609	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00611	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00619	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 422  : 					temp_intensity *= temp_intensity;

  00621	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00629	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00631	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _temp_intensity$3[ebp], xmm0

; 423  : 
; 424  : 					specular += temp_intensity * this_light->intensity;

  00639	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$4[ebp]
  0063f	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _temp_intensity$3[ebp]
  00647	f3 0f 59 40 28	 mulss	 xmm0, DWORD PTR [eax+40]
  0064c	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _specular$8[ebp]
  00651	f3 0f 11 45 88	 movss	 DWORD PTR _specular$8[ebp], xmm0
$LN21@illuminate:

; 425  : 				}
; 426  : 
; 427  : 				this_light = this_light->succ;

  00656	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$4[ebp]
  0065c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0065f	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _this_light$4[ebp], ecx

; 428  : 			}

  00665	e9 3c fe ff ff	 jmp	 $LN11@illuminate
$LN12@illuminate:

; 429  : 
; 430  : 			asm_convert_float_to_int ( ( r * 255 ), &int_light_bounds[0] );

  0066a	b8 04 00 00 00	 mov	 eax, 4
  0066f	6b c8 00	 imul	 ecx, eax, 0
  00672	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?int_light_bounds@@3PAHA ; int_light_bounds
  00678	51		 push	 ecx
  00679	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _r$11[ebp]
  0067e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00686	51		 push	 ecx
  00687	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068c	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 431  : 			asm_convert_float_to_int ( ( g * 255 ), &int_light_bounds[2] );

  00691	b8 04 00 00 00	 mov	 eax, 4
  00696	d1 e0		 shl	 eax, 1
  00698	05 00 00 00 00	 add	 eax, OFFSET ?int_light_bounds@@3PAHA ; int_light_bounds
  0069d	50		 push	 eax
  0069e	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _g$10[ebp]
  006a3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  006ab	51		 push	 ecx
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 432  : 			asm_convert_float_to_int ( ( b * 255 ), &int_light_bounds[4] );

  006b6	b8 04 00 00 00	 mov	 eax, 4
  006bb	c1 e0 02	 shl	 eax, 2
  006be	05 00 00 00 00	 add	 eax, OFFSET ?int_light_bounds@@3PAHA ; int_light_bounds
  006c3	50		 push	 eax
  006c4	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _b$9[ebp]
  006c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  006d1	51		 push	 ecx
  006d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d7	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 433  : 			float_light_bounds[0] = specular;

  006dc	b8 04 00 00 00	 mov	 eax, 4
  006e1	6b c8 00	 imul	 ecx, eax, 0
  006e4	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _specular$8[ebp]
  006e9	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR ?float_light_bounds@@3PAMA[ecx], xmm0

; 434  : 
; 435  : 			{
; 436  : 
; 437  : 				float
; 438  : 					s_test;
; 439  : 
; 440  : 				unsigned int
; 441  : 					is_test;
; 442  : 
; 443  : 				ir = int_light_bounds[ (((unsigned int) ( 255 - int_light_bounds[0] )) >> 31) + 0];

  006f1	b8 04 00 00 00	 mov	 eax, 4
  006f6	6b c8 00	 imul	 ecx, eax, 0
  006f9	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  006fe	2b 91 00 00 00
	00		 sub	 edx, DWORD PTR ?int_light_bounds@@3PAHA[ecx]
  00704	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00707	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?int_light_bounds@@3PAHA[edx*4]
  0070e	89 45 84	 mov	 DWORD PTR _ir$7[ebp], eax

; 444  : 				ig = int_light_bounds[ (((unsigned int) ( 255 - int_light_bounds[2] )) >> 31) + 2];

  00711	b8 04 00 00 00	 mov	 eax, 4
  00716	d1 e0		 shl	 eax, 1
  00718	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0071d	2b 88 00 00 00
	00		 sub	 ecx, DWORD PTR ?int_light_bounds@@3PAHA[eax]
  00723	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00726	8b 14 8d 08 00
	00 00		 mov	 edx, DWORD PTR ?int_light_bounds@@3PAHA[ecx*4+8]
  0072d	89 55 80	 mov	 DWORD PTR _ig$6[ebp], edx

; 445  : 				ib = int_light_bounds[ (((unsigned int) ( 255 - int_light_bounds[4] )) >> 31) + 4];

  00730	b8 04 00 00 00	 mov	 eax, 4
  00735	c1 e0 02	 shl	 eax, 2
  00738	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0073d	2b 88 00 00 00
	00		 sub	 ecx, DWORD PTR ?int_light_bounds@@3PAHA[eax]
  00743	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00746	8b 14 8d 10 00
	00 00		 mov	 edx, DWORD PTR ?int_light_bounds@@3PAHA[ecx*4+16]
  0074d	89 95 7c ff ff
	ff		 mov	 DWORD PTR _ib$5[ebp], edx

; 446  : 
; 447  : 				s_test = 1.0 - specular;

  00753	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _specular$8[ebp]
  00758	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00760	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00764	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00768	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _s_test$2[ebp], xmm0

; 448  : 				is_test = *( ( int * ) &s_test );

  00770	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _s_test$2[ebp]
  00776	89 85 6c ff ff
	ff		 mov	 DWORD PTR _is_test$1[ebp], eax

; 449  : 
; 450  : 				specular = float_light_bounds[ (is_test >> 31) ];

  0077c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _is_test$1[ebp]
  00782	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00785	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?float_light_bounds@@3PAMA[eax*4]
  0078e	f3 0f 11 45 88	 movss	 DWORD PTR _specular$8[ebp], xmm0

; 451  : 			}
; 452  : 
; 453  : 			result_normals->r = ir;

  00793	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  00796	8a 4d 84	 mov	 cl, BYTE PTR _ir$7[ebp]
  00799	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 454  : 			result_normals->g = ig;

  0079c	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  0079f	8a 4d 80	 mov	 cl, BYTE PTR _ig$6[ebp]
  007a2	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 455  : 			result_normals->b = ib;

  007a5	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  007a8	8a 8d 7c ff ff
	ff		 mov	 cl, BYTE PTR _ib$5[ebp]
  007ae	88 08		 mov	 BYTE PTR [eax], cl

; 456  : 			result_normals->alpha = current_object_3d_dissolve_value;

  007b0	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  007b3	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  007b9	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 457  : 			result_normals->specular = specular;

  007bc	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  007bf	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _specular$8[ebp]
  007c4	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 458  : 
; 459  : 			normals++;

  007c9	8b 45 08	 mov	 eax, DWORD PTR _normals$[ebp]
  007cc	83 c0 02	 add	 eax, 2
  007cf	89 45 08	 mov	 DWORD PTR _normals$[ebp], eax

; 460  : 
; 461  : 			result_normals++;

  007d2	8b 45 ec	 mov	 eax, DWORD PTR _result_normals$[ebp]
  007d5	83 c0 08	 add	 eax, 8
  007d8	89 45 ec	 mov	 DWORD PTR _result_normals$[ebp], eax

; 462  : 		}

  007db	e9 6e fc ff ff	 jmp	 $LN8@illuminate
$LN9@illuminate:

; 463  : 	}
; 464  : }

  007e0	5f		 pop	 edi
  007e1	5e		 pop	 esi
  007e2	5b		 pop	 ebx
  007e3	8b e5		 mov	 esp, ebp
  007e5	5d		 pop	 ebp
  007e6	c2 10 00	 ret	 16			; 00000010H
?illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z ENDP ; illuminate_object_point_normals
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?illuminate_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_camera_direction$ = 20					; size = 4
_points_base$ = 24					; size = 4
?illuminate_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z PROC ; illuminate_3d_object, COMDAT

; 573  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 574  : 
; 575  : 	illuminate_object_point_normals ( object->point_normals, object->number_of_lighting_normals, lights, points_base );

  00009	8b 45 18	 mov	 eax, DWORD PTR _points_base$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _lights$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  00014	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0001c	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z ; illuminate_object_point_normals

; 576  : /*
; 577  : 	if ( camera_direction )
; 578  : 	{
; 579  : 
; 580  : 		calculate_object_normal_factors ( object->point_normals + object->culling_normals_offset,
; 581  : 														object->number_of_point_normals - object->culling_normals_offset,
; 582  : 														camera_direction, &object->bounding_box, points_base + object->culling_normals_offset );
; 583  : 	}*/
; 584  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?illuminate_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ENDP ; illuminate_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?reset_3d_transformation_stats@@YGXXZ
_TEXT	SEGMENT
?reset_3d_transformation_stats@@YGXXZ PROC		; reset_3d_transformation_stats, COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 148  : 
; 149  : 	total_number_of_3d_points_transformed = current_number_of_3d_points_transformed;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_number_of_3d_points_transformed@@3HA ; current_number_of_3d_points_transformed
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?total_number_of_3d_points_transformed@@3HA, eax ; total_number_of_3d_points_transformed

; 150  : 
; 151  : 	current_number_of_3d_points_transformed = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_number_of_3d_points_transformed@@3HA, 0 ; current_number_of_3d_points_transformed

; 152  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?reset_3d_transformation_stats@@YGXXZ ENDP		; reset_3d_transformation_stats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?initialise_3d_transformation_stats@@YGXXZ
_TEXT	SEGMENT
?initialise_3d_transformation_stats@@YGXXZ PROC		; initialise_3d_transformation_stats, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 133  : 
; 134  : #if DEBUG_STATS
; 135  : 
; 136  : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Number of 3D Object points transformed: %d", MT_INT, &total_number_of_3d_points_transformed );

  00009	68 00 00 00 00	 push	 OFFSET ?total_number_of_3d_points_transformed@@3HA ; total_number_of_3d_points_transformed
  0000e	6a 01		 push	 1
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NHHJFLJF@Number?5of?53D?5Object?5points?5tran@
  00015	6a 01		 push	 1
  00017	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 137  : 
; 138  : #endif
; 139  : 
; 140  : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?initialise_3d_transformation_stats@@YGXXZ ENDP		; initialise_3d_transformation_stats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dtrans.c
;	COMDAT ?initialise_3d_transformation_arrays@@YGXXZ
_TEXT	SEGMENT
?initialise_3d_transformation_arrays@@YGXXZ PROC	; initialise_3d_transformation_arrays, COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 123  : 
; 124  : 	memset ( transformed_3d_points_needed, 0, MAX_POINTS );

  00009	68 00 00 01 00	 push	 65536			; 00010000H
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET ?transformed_3d_points_needed@@3PAEA ; transformed_3d_points_needed
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 125  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?initialise_3d_transformation_arrays@@YGXXZ ENDP	; initialise_3d_transformation_arrays
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
