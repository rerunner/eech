; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\dirdraw.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?application_video_width@@3HA			; application_video_width
PUBLIC	?application_video_height@@3HA			; application_video_height
PUBLIC	?application_video_colourdepth@@3HA		; application_video_colourdepth
PUBLIC	?direct_draw_initialisation_error@@3W4DDRAW_INITIALISATION_ERRORS@@A ; direct_draw_initialisation_error
PUBLIC	?ddraw@@3Udirect_draw_data@@A			; ddraw
PUBLIC	?zbuffer_on_video@@3HA				; zbuffer_on_video
PUBLIC	?number_of_display_devices@@3HA			; number_of_display_devices
PUBLIC	?number_display_modes@@3HA			; number_display_modes
PUBLIC	?display_devices@@3PAUDD_DISPLAY_DEVICE@@A	; display_devices
PUBLIC	?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A	; best_display_device
PUBLIC	?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A ; current_display_device
PUBLIC	?display_modes@@3PAUDISPLAY_FORMAT@@A		; display_modes
PUBLIC	?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A ; zbuffer_target_surface
PUBLIC	?best_assessment@@3HA				; best_assessment
PUBLIC	?system_colour_table@@3PAUtagPALETTEENTRY@@A	; system_colour_table
PUBLIC	?ddraw_export@@3Udirect_draw_data@@A		; ddraw_export
PUBLIC	?current_zbuffer_pixel_format@@3U_DDPIXELFORMAT@@A ; current_zbuffer_pixel_format
PUBLIC	??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED@	; `string'
PUBLIC	??_C@_0BK@LBNPECMI@DDERR_CANNOTATTACHSURFACE@	; `string'
PUBLIC	??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE@	; `string'
PUBLIC	??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL@	; `string'
PUBLIC	??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION@		; `string'
PUBLIC	??_C@_0O@MGEMDJJH@DDERR_GENERIC@		; `string'
PUBLIC	??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN@		; `string'
PUBLIC	??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY@	; `string'
PUBLIC	??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS@		; `string'
PUBLIC	??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST@	; `string'
PUBLIC	??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE@		; `string'
PUBLIC	??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT@		; `string'
PUBLIC	??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS@		; `string'
PUBLIC	??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT@	; `string'
PUBLIC	??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT@		; `string'
PUBLIC	??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES@	; `string'
PUBLIC	??_C@_0L@DJKAAMGA@DDERR_NO3D@			; `string'
PUBLIC	??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW@		; `string'
PUBLIC	??_C@_0BH@HOBBEKCG@DDERR_NOSTEREOHARDWARE@	; `string'
PUBLIC	??_C@_0BE@GMBJAIDG@DDERR_NOSURFACELEFT@		; `string'
PUBLIC	??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST@		; `string'
PUBLIC	??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW@		; `string'
PUBLIC	??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET@	; `string'
PUBLIC	??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY@		; `string'
PUBLIC	??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW@		; `string'
PUBLIC	??_C@_0BK@BCHEFLBM@DDERR_NODIRECTDRAWSUPPORT@	; `string'
PUBLIC	??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE@	; `string'
PUBLIC	??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW@		; `string'
PUBLIC	??_C@_0M@IIGNACND@DDERR_NOGDI@			; `string'
PUBLIC	??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW@		; `string'
PUBLIC	??_C@_0P@IIGPDCF@DDERR_NOTFOUND@		; `string'
PUBLIC	??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW@		; `string'
PUBLIC	??_C@_0BH@CPKIKHCK@DDERR_OVERLAPPINGRECTS@	; `string'
PUBLIC	??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW@		; `string'
PUBLIC	??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW@		; `string'
PUBLIC	??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW@		; `string'
PUBLIC	??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR@		; `string'
PUBLIC	??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX@	; `string'
PUBLIC	??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR@		; `string'
PUBLIC	??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW@		; `string'
PUBLIC	??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW@		; `string'
PUBLIC	??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW@		; `string'
PUBLIC	??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW@		; `string'
PUBLIC	??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS@		; `string'
PUBLIC	??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY@		; `string'
PUBLIC	??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY@	; `string'
PUBLIC	??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP@	; `string'
PUBLIC	??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACT@ ; `string'
PUBLIC	??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY@		; `string'
PUBLIC	??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET@	; `string'
PUBLIC	??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED@ ; `string'
PUBLIC	??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT@ ; `string'
PUBLIC	??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY@		; `string'
PUBLIC	??_C@_0BG@IADNDEGE@DDERR_CANTLOCKSURFACE@	; `string'
PUBLIC	??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED@	; `string'
PUBLIC	??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST@		; `string'
PUBLIC	??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED@	; `string'
PUBLIC	??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT@		; `string'
PUBLIC	??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE@		; `string'
PUBLIC	??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH@		; `string'
PUBLIC	??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED@		; `string'
PUBLIC	??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT@	; `string'
PUBLIC	??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK@	; `string'
PUBLIC	??_C@_0BE@BCDLBAEK@DDERR_INVALIDSTREAM@		; `string'
PUBLIC	??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS@ ; `string'
PUBLIC	??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING@	; `string'
PUBLIC	??_C@_0BN@BHNGJHFA@DDERR_DDSCAPSCOMPLEXREQUIRED@ ; `string'
PUBLIC	??_C@_0N@MAIIIAKF@DDERR_XALIGN@			; `string'
PUBLIC	??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID@	; `string'
PUBLIC	??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED@ ; `string'
PUBLIC	??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW@	; `string'
PUBLIC	??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIS@ ; `string'
PUBLIC	??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION@		; `string'
PUBLIC	??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL@	; `string'
PUBLIC	??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND@	; `string'
PUBLIC	??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED@	; `string'
PUBLIC	??_C@_0N@EOPEBNEI@DDERR_NOHWND@			; `string'
PUBLIC	??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED@	; `string'
PUBLIC	??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET@	; `string'
PUBLIC	??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED@	; `string'
PUBLIC	??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW@		; `string'
PUBLIC	??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP@	; `string'
PUBLIC	??_C@_0O@NKGDNEG@DDERR_NOBLTHW@			; `string'
PUBLIC	??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW@		; `string'
PUBLIC	??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE@	; `string'
PUBLIC	??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST@		; `string'
PUBLIC	??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION@	; `string'
PUBLIC	??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE@	; `string'
PUBLIC	??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET@ ; `string'
PUBLIC	??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE@		; `string'
PUBLIC	??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE@		; `string'
PUBLIC	??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED@		; `string'
PUBLIC	??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC@		; `string'
PUBLIC	??_C@_0L@CHFPOEHC@DDERR_NODC@			; `string'
PUBLIC	??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE@		; `string'
PUBLIC	??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED@	; `string'
PUBLIC	??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED@		; `string'
PUBLIC	??_C@_0BG@GJEKJFBD@DDERR_UNSUPPORTEDMODE@	; `string'
PUBLIC	??_C@_0BB@LNEPLBGC@DDERR_NOMIPMAPHW@		; `string'
PUBLIC	??_C@_0BJ@HPBNNCIB@DDERR_INVALIDSURFACETYPE@	; `string'
PUBLIC	??_C@_0BD@DJOGAOFP@DDERR_NOOPTIMIZEHW@		; `string'
PUBLIC	??_C@_0BA@IAHGDMOK@DDERR_NOTLOADED@		; `string'
PUBLIC	??_C@_0BE@NFJHIIEO@DDERR_NOFOCUSWINDOW@		; `string'
PUBLIC	??_C@_0BH@BBAKKFGG@DDERR_DCALREADYCREATED@	; `string'
PUBLIC	??_C@_0BH@NGNFGAPP@DDERR_NONONLOCALVIDMEM@	; `string'
PUBLIC	??_C@_0BD@GIBKCHPD@DDERR_CANTPAGELOCK@		; `string'
PUBLIC	??_C@_0BF@MPOCMAGG@DDERR_CANTPAGEUNLOCK@	; `string'
PUBLIC	??_C@_0BE@ELKGHCMM@DDERR_NOTPAGELOCKED@		; `string'
PUBLIC	??_C@_0P@BACCKLEO@DDERR_MOREDATA@		; `string'
PUBLIC	??_C@_0O@DIBHCCKN@DDERR_EXPIRED@		; `string'
PUBLIC	??_C@_0BD@NFBNMILD@DDERR_TESTFINISHED@		; `string'
PUBLIC	??_C@_0O@DBFLIBLJ@DDERR_NEWMODE@		; `string'
PUBLIC	??_C@_0BF@DPOKKEIF@DDERR_VIDEONOTACTIVE@	; `string'
PUBLIC	??_C@_0BN@KNLDEANB@DDERR_DEVICEDOESNTOWNSURFACE@ ; `string'
PUBLIC	??_C@_0BF@DLEGFOLA@DDERR_NOTINITIALIZED@	; `string'
PUBLIC	??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@	; `string'
PUBLIC	??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@	; `string'
PUBLIC	??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@	; `string'
PUBLIC	??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@		; `string'
PUBLIC	??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@	; `string'
PUBLIC	??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@ ; `string'
PUBLIC	??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@	; `string'
PUBLIC	??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@ ; `string'
PUBLIC	??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@	; `string'
PUBLIC	??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@	; `string'
PUBLIC	??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@	; `string'
PUBLIC	??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@ ; `string'
PUBLIC	??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@	; `string'
PUBLIC	??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@ ; `string'
PUBLIC	??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@	; `string'
PUBLIC	??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@ ; `string'
PUBLIC	??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@	; `string'
PUBLIC	??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@	; `string'
PUBLIC	??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@	; `string'
PUBLIC	??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@	; `string'
PUBLIC	??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@ ; `string'
PUBLIC	??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@	; `string'
PUBLIC	??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@ ; `string'
PUBLIC	??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@	; `string'
PUBLIC	??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@	; `string'
PUBLIC	??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@	; `string'
PUBLIC	??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@	; `string'
PUBLIC	??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@ ; `string'
PUBLIC	??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@	; `string'
PUBLIC	??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@ ; `string'
PUBLIC	??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@ ; `string'
PUBLIC	??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@	; `string'
PUBLIC	??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@	; `string'
PUBLIC	??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@	; `string'
PUBLIC	??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@ ; `string'
PUBLIC	??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@	; `string'
PUBLIC	??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@	; `string'
PUBLIC	??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@	; `string'
PUBLIC	??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@	; `string'
PUBLIC	??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@		; `string'
PUBLIC	??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@		; `string'
PUBLIC	??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@		; `string'
PUBLIC	??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@	; `string'
PUBLIC	??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@	; `string'
PUBLIC	??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@	; `string'
PUBLIC	??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@	; `string'
PUBLIC	??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@	; `string'
PUBLIC	??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@	; `string'
PUBLIC	??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@	; `string'
PUBLIC	??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@	; `string'
PUBLIC	??_C@_0CA@DMBJGLAJ@D3DERR_VERTEXBUFFERUNLOCKFAILED@ ; `string'
PUBLIC	??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@	; `string'
PUBLIC	??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@ ; `string'
PUBLIC	??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@	; `string'
PUBLIC	??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@ ; `string'
PUBLIC	??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@	; `string'
PUBLIC	??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@ ; `string'
PUBLIC	??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@	; `string'
PUBLIC	??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@	; `string'
PUBLIC	??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@ ; `string'
PUBLIC	??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@ ; `string'
PUBLIC	??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@ ; `string'
PUBLIC	??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@ ; `string'
PUBLIC	??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@	; `string'
PUBLIC	??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@	; `string'
PUBLIC	??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@	; `string'
PUBLIC	??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@ ; `string'
PUBLIC	??_C@_0BJ@KEADFNMC@D3DERR_INVALIDSTATEBLOCK@	; `string'
PUBLIC	??_C@_0BJ@LJGGJJDE@D3DERR_INBEGINSTATEBLOCK@	; `string'
PUBLIC	??_C@_0BM@KKEBPLDD@D3DERR_NOTINBEGINSTATEBLOCK@	; `string'
PUBLIC	??_C@_08LPKPOPGP@NO?5ERROR@			; `string'
_BSS	SEGMENT
?application_video_width@@3HA DD 01H DUP (?)		; application_video_width
?application_video_height@@3HA DD 01H DUP (?)		; application_video_height
?application_video_colourdepth@@3HA DD 01H DUP (?)	; application_video_colourdepth
?direct_draw_initialisation_error@@3W4DDRAW_INITIALISATION_ERRORS@@A DD 01H DUP (?) ; direct_draw_initialisation_error
?number_of_display_devices@@3HA DD 01H DUP (?)		; number_of_display_devices
?number_display_modes@@3HA DD 01H DUP (?)		; number_display_modes
?display_devices@@3PAUDD_DISPLAY_DEVICE@@A DD 01H DUP (?) ; display_devices
?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A DD 01H DUP (?) ; best_display_device
?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A DD 01H DUP (?) ; current_display_device
?display_modes@@3PAUDISPLAY_FORMAT@@A DB 08000H DUP (?)	; display_modes
?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; zbuffer_target_surface
?best_assessment@@3HA DD 01H DUP (?)			; best_assessment
?system_colour_table@@3PAUtagPALETTEENTRY@@A DD 0100H DUP (?) ; system_colour_table
?current_zbuffer_pixel_format@@3U_DDPIXELFORMAT@@A DB 020H DUP (?) ; current_zbuffer_pixel_format
_BSS	ENDS
;	COMDAT ??_C@_08LPKPOPGP@NO?5ERROR@
CONST	SEGMENT
??_C@_08LPKPOPGP@NO?5ERROR@ DB 'NO ERROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KKEBPLDD@D3DERR_NOTINBEGINSTATEBLOCK@
CONST	SEGMENT
??_C@_0BM@KKEBPLDD@D3DERR_NOTINBEGINSTATEBLOCK@ DB 'D3DERR_NOTINBEGINSTAT'
	DB	'EBLOCK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LJGGJJDE@D3DERR_INBEGINSTATEBLOCK@
CONST	SEGMENT
??_C@_0BJ@LJGGJJDE@D3DERR_INBEGINSTATEBLOCK@ DB 'D3DERR_INBEGINSTATEBLOCK'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KEADFNMC@D3DERR_INVALIDSTATEBLOCK@
CONST	SEGMENT
??_C@_0BJ@KEADFNMC@D3DERR_INVALIDSTATEBLOCK@ DB 'D3DERR_INVALIDSTATEBLOCK'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@
CONST	SEGMENT
??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@ DB 'D3DERR_CONFLICTIN'
	DB	'GTEXTUREPALETTE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@
CONST	SEGMENT
??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@ DB 'D3DERR_TOOMANYVERTICES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@
CONST	SEGMENT
??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@ DB 'D3DERR_INVALIDMATRIX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@
CONST	SEGMENT
??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@ DB 'D3DERR_TOOMANYPRIMITIVES'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@
CONST	SEGMENT
??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@ DB 'D3DERR_UNSUPPORTE'
	DB	'DTEXTUREFILTER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@
CONST	SEGMENT
??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@ DB 'D3DERR_CONFLICTINGR'
	DB	'ENDERSTATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@
CONST	SEGMENT
??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@ DB 'D3DERR_UNSUPPORTEDF'
	DB	'ACTORVALUE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@
CONST	SEGMENT
??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@ DB 'D3DERR_CONFLICTIN'
	DB	'GTEXTUREFILTER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@
CONST	SEGMENT
??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@ DB 'D3DERR_TOOMANYOPERATIONS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@
CONST	SEGMENT
??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@ DB 'D3DERR_UNSUPPORTEDALPH'
	DB	'AARG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@
CONST	SEGMENT
??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@ DB 'D3DERR_UNSUPPORTE'
	DB	'DALPHAOPERATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@
CONST	SEGMENT
??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@ DB 'D3DERR_UNSUPPORTEDCOLO'
	DB	'RARG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@
CONST	SEGMENT
??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@ DB 'D3DERR_UNSUPPORTE'
	DB	'DCOLOROPERATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@
CONST	SEGMENT
??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@ DB 'D3DERR_WRONGTEXTUREFORM'
	DB	'AT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@
CONST	SEGMENT
??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@ DB 'D3DERR_STENCILBUF'
	DB	'FER_NOTPRESENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@
CONST	SEGMENT
??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@ DB 'D3DERR_ZBUFFER_NOTPRESE'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DMBJGLAJ@D3DERR_VERTEXBUFFERUNLOCKFAILED@
CONST	SEGMENT
??_C@_0CA@DMBJGLAJ@D3DERR_VERTEXBUFFERUNLOCKFAILED@ DB 'D3DERR_VERTEXBUFF'
	DB	'ERUNLOCKFAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@
CONST	SEGMENT
??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@ DB 'D3DERR_VERTEXBUFFERLOCK'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@ DB 'D3DERR_VBUF_CREATE_FAIL'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@
CONST	SEGMENT
??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@ DB 'D3DERR_VERTEXBUFFEROP'
	DB	'TIMIZED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@
CONST	SEGMENT
??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@ DB 'D3DERR_COLORKEYATTACHED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@
CONST	SEGMENT
??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@ DB 'D3DERR_INVALIDVERTEXFO'
	DB	'RMAT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@
CONST	SEGMENT
??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@ DB 'D3DERR_NOCURRENTVIEWPORT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@
CONST	SEGMENT
??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@ DB 'D3DERR_VIEWPORTHASNODE'
	DB	'VICE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@
CONST	SEGMENT
??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@ DB 'D3DERR_VIEWPORTDATANOTS'
	DB	'ET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@
CONST	SEGMENT
??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@ DB 'D3DERR_NOVIEWPORTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@
CONST	SEGMENT
??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@ DB 'D3DERR_NOTINBEGIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@
CONST	SEGMENT
??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@ DB 'D3DERR_INBEGIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@
CONST	SEGMENT
??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@ DB 'D3DERR_SCENE_END_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@
CONST	SEGMENT
??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@ DB 'D3DERR_SCENE_BEGIN_FAIL'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@
CONST	SEGMENT
??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@ DB 'D3DERR_SCENE_NOT_IN_SCE'
	DB	'NE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@
CONST	SEGMENT
??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@ DB 'D3DERR_SCENE_IN_SCENE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@
CONST	SEGMENT
??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@ DB 'D3DERR_LIGHTNOTINTH'
	DB	'ISVIEWPORT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@
CONST	SEGMENT
??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@ DB 'D3DERR_LIGHTHASVIEWPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@
CONST	SEGMENT
??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@ DB 'D3DERR_LIGHT_SET_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@
CONST	SEGMENT
??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@ DB 'D3DERR_SURFACENOTINVIDM'
	DB	'EM', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@
CONST	SEGMENT
??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@ DB 'D3DERR_ZBUFF_NEEDS'
	DB	'_VIDEOMEMORY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@
CONST	SEGMENT
??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@ DB 'D3DERR_ZBUFF_NEED'
	DB	'S_SYSTEMMEMORY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@
CONST	SEGMENT
??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@ DB 'D3DERR_INVALIDPALETTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@
CONST	SEGMENT
??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@ DB 'D3DERR_MATERIAL_GE'
	DB	'TDATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@
CONST	SEGMENT
??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@ DB 'D3DERR_MATERIAL_SE'
	DB	'TDATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@ DB 'D3DERR_MATERIAL_DE'
	DB	'STROY_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@ DB 'D3DERR_MATERIAL_CRE'
	DB	'ATE_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@
CONST	SEGMENT
??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@ DB 'D3DERR_INVALIDRAMPTEXTU'
	DB	'RE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@
CONST	SEGMENT
??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@ DB 'D3DERR_TEXTURE_BADSIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@
CONST	SEGMENT
??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@ DB 'D3DERR_INVALIDVERTEXTYPE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@
CONST	SEGMENT
??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@ DB 'D3DERR_INVALIDPRIMITI'
	DB	'VETYPE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@
CONST	SEGMENT
??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@ DB 'D3DERR_INVALIDCURRE'
	DB	'NTVIEWPORT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@
CONST	SEGMENT
??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@ DB 'D3DERR_SETVIEWPORTD'
	DB	'ATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@
CONST	SEGMENT
??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@ DB 'D3DERR_MATRIX_GETDAT'
	DB	'A_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@
CONST	SEGMENT
??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@ DB 'D3DERR_MATRIX_SETDAT'
	DB	'A_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@ DB 'D3DERR_MATRIX_DESTRO'
	DB	'Y_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@ DB 'D3DERR_MATRIX_CREATE_'
	DB	'FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@
CONST	SEGMENT
??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@ DB 'D3DERR_TEXTURE_GETSU'
	DB	'RF_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@
CONST	SEGMENT
??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@ DB 'D3DERR_TEXTURE_NOT_LOCK'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@
CONST	SEGMENT
??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@ DB 'D3DERR_TEXTURE_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@
CONST	SEGMENT
??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@ DB 'D3DERR_TEXTURE_SWAP_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@
CONST	SEGMENT
??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@ DB 'D3DERR_TEXTURE_LOAD_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@
CONST	SEGMENT
??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@ DB 'D3DERR_TEXTURE_UNLOC'
	DB	'K_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@
CONST	SEGMENT
??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@ DB 'D3DERR_TEXTURE_LOCK_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@ DB 'D3DERR_TEXTURE_DEST'
	DB	'ROY_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@ DB 'D3DERR_TEXTURE_CREAT'
	DB	'E_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@
CONST	SEGMENT
??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@ DB 'D3DERR_TEXTURE_NO_SUPPO'
	DB	'RT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@
CONST	SEGMENT
??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@ DB 'D3DERR_EXECUTE_CLIP'
	DB	'PED_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@
CONST	SEGMENT
??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@ DB 'D3DERR_EXECUTE_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@
CONST	SEGMENT
??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@ DB 'D3DERR_EXECUTE_NOT_LOCK'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@
CONST	SEGMENT
??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@ DB 'D3DERR_EXECUTE_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@
CONST	SEGMENT
??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@ DB 'D3DERR_EXECUTE_UNLOC'
	DB	'K_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@
CONST	SEGMENT
??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@ DB 'D3DERR_EXECUTE_LOCK_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@ DB 'D3DERR_EXECUTE_DEST'
	DB	'ROY_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@ DB 'D3DERR_EXECUTE_CREAT'
	DB	'E_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@
CONST	SEGMENT
??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@ DB 'D3DERR_DEVICEAGGREGATED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@
CONST	SEGMENT
??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@ DB 'D3DERR_INITFAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@
CONST	SEGMENT
??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@ DB 'D3DERR_INVALID_DEVICE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@
CONST	SEGMENT
??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@ DB 'D3DERR_BADMINORVERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@
CONST	SEGMENT
??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@ DB 'D3DERR_BADMAJORVERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DLEGFOLA@DDERR_NOTINITIALIZED@
CONST	SEGMENT
??_C@_0BF@DLEGFOLA@DDERR_NOTINITIALIZED@ DB 'DDERR_NOTINITIALIZED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KNLDEANB@DDERR_DEVICEDOESNTOWNSURFACE@
CONST	SEGMENT
??_C@_0BN@KNLDEANB@DDERR_DEVICEDOESNTOWNSURFACE@ DB 'DDERR_DEVICEDOESNTOW'
	DB	'NSURFACE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DPOKKEIF@DDERR_VIDEONOTACTIVE@
CONST	SEGMENT
??_C@_0BF@DPOKKEIF@DDERR_VIDEONOTACTIVE@ DB 'DDERR_VIDEONOTACTIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DBFLIBLJ@DDERR_NEWMODE@
CONST	SEGMENT
??_C@_0O@DBFLIBLJ@DDERR_NEWMODE@ DB 'DDERR_NEWMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NFBNMILD@DDERR_TESTFINISHED@
CONST	SEGMENT
??_C@_0BD@NFBNMILD@DDERR_TESTFINISHED@ DB 'DDERR_TESTFINISHED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DIBHCCKN@DDERR_EXPIRED@
CONST	SEGMENT
??_C@_0O@DIBHCCKN@DDERR_EXPIRED@ DB 'DDERR_EXPIRED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BACCKLEO@DDERR_MOREDATA@
CONST	SEGMENT
??_C@_0P@BACCKLEO@DDERR_MOREDATA@ DB 'DDERR_MOREDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ELKGHCMM@DDERR_NOTPAGELOCKED@
CONST	SEGMENT
??_C@_0BE@ELKGHCMM@DDERR_NOTPAGELOCKED@ DB 'DDERR_NOTPAGELOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MPOCMAGG@DDERR_CANTPAGEUNLOCK@
CONST	SEGMENT
??_C@_0BF@MPOCMAGG@DDERR_CANTPAGEUNLOCK@ DB 'DDERR_CANTPAGEUNLOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIBKCHPD@DDERR_CANTPAGELOCK@
CONST	SEGMENT
??_C@_0BD@GIBKCHPD@DDERR_CANTPAGELOCK@ DB 'DDERR_CANTPAGELOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NGNFGAPP@DDERR_NONONLOCALVIDMEM@
CONST	SEGMENT
??_C@_0BH@NGNFGAPP@DDERR_NONONLOCALVIDMEM@ DB 'DDERR_NONONLOCALVIDMEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BBAKKFGG@DDERR_DCALREADYCREATED@
CONST	SEGMENT
??_C@_0BH@BBAKKFGG@DDERR_DCALREADYCREATED@ DB 'DDERR_DCALREADYCREATED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NFJHIIEO@DDERR_NOFOCUSWINDOW@
CONST	SEGMENT
??_C@_0BE@NFJHIIEO@DDERR_NOFOCUSWINDOW@ DB 'DDERR_NOFOCUSWINDOW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IAHGDMOK@DDERR_NOTLOADED@
CONST	SEGMENT
??_C@_0BA@IAHGDMOK@DDERR_NOTLOADED@ DB 'DDERR_NOTLOADED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DJOGAOFP@DDERR_NOOPTIMIZEHW@
CONST	SEGMENT
??_C@_0BD@DJOGAOFP@DDERR_NOOPTIMIZEHW@ DB 'DDERR_NOOPTIMIZEHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HPBNNCIB@DDERR_INVALIDSURFACETYPE@
CONST	SEGMENT
??_C@_0BJ@HPBNNCIB@DDERR_INVALIDSURFACETYPE@ DB 'DDERR_INVALIDSURFACETYPE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LNEPLBGC@DDERR_NOMIPMAPHW@
CONST	SEGMENT
??_C@_0BB@LNEPLBGC@DDERR_NOMIPMAPHW@ DB 'DDERR_NOMIPMAPHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GJEKJFBD@DDERR_UNSUPPORTEDMODE@
CONST	SEGMENT
??_C@_0BG@GJEKJFBD@DDERR_UNSUPPORTEDMODE@ DB 'DDERR_UNSUPPORTEDMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED@
CONST	SEGMENT
??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED@ DB 'DDERR_NOTPALETTIZED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED@
CONST	SEGMENT
??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED@ DB 'DDERR_IMPLICITLYCREATED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE@
CONST	SEGMENT
??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE@ DB 'DDERR_WRONGMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHFPOEHC@DDERR_NODC@
CONST	SEGMENT
??_C@_0L@CHFPOEHC@DDERR_NODC@ DB 'DDERR_NODC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC@
CONST	SEGMENT
??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC@ DB 'DDERR_CANTCREATEDC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED@
CONST	SEGMENT
??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED@ DB 'DDERR_NOTLOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE@
CONST	SEGMENT
??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE@ DB 'DDERR_CANTDUPLICATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE@
CONST	SEGMENT
??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE@ DB 'DDERR_NOTFLIPPABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET@
CONST	SEGMENT
??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET@ DB 'DDERR_EXCLUSIVEMODE'
	DB	'ALREADYSET', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE@
CONST	SEGMENT
??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE@ DB 'DDERR_NOTAOVERLAYSURFACE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION@
CONST	SEGMENT
??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION@ DB 'DDERR_INVALIDPOSITION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST@
CONST	SEGMENT
??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST@ DB 'DDERR_NOOVERLAYDEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE@
CONST	SEGMENT
??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE@ DB 'DDERR_OVERLAYNOTVISIBLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW@
CONST	SEGMENT
??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW@ DB 'DDERR_NODDROPSHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKGDNEG@DDERR_NOBLTHW@
CONST	SEGMENT
??_C@_0O@NKGDNEG@DDERR_NOBLTHW@ DB 'DDERR_NOBLTHW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP@
CONST	SEGMENT
??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP@ DB 'DDERR_BLTFASTCANTCLIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW@
CONST	SEGMENT
??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW@ DB 'DDERR_NOPALETTEHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED@
CONST	SEGMENT
??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED@ DB 'DDERR_NOPALETTEATTACHED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET@
CONST	SEGMENT
??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET@ DB 'DDERR_HWNDALREADYSET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED@
CONST	SEGMENT
??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED@ DB 'DDERR_HWNDSUBCLASSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOPEBNEI@DDERR_NOHWND@
CONST	SEGMENT
??_C@_0N@EOPEBNEI@DDERR_NOHWND@ DB 'DDERR_NOHWND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED@
CONST	SEGMENT
??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED@ DB 'DDERR_NOCLIPPERATTACHED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND@
CONST	SEGMENT
??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND@ DB 'DDERR_CLIPPERISUSINGHWND'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL@
CONST	SEGMENT
??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL@ DB 'DDERR_REGIONTOOSMALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION@
CONST	SEGMENT
??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION@ DB 'DDERR_NOEMULATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIS@
CONST	SEGMENT
??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIS@ DB 'DDERR_PRIMARYSURF'
	DB	'ACEALREADYEXISTS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW@
CONST	SEGMENT
??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW@ DB 'DDERR_NODIRECTDRAWHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED@
CONST	SEGMENT
??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED@ DB 'DDERR_DIRECTDRAWAL'
	DB	'READYCREATED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID@
CONST	SEGMENT
??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID@ DB 'DDERR_INVALIDDIRECTDR'
	DB	'AWGUID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MAIIIAKF@DDERR_XALIGN@
CONST	SEGMENT
??_C@_0N@MAIIIAKF@DDERR_XALIGN@ DB 'DDERR_XALIGN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BHNGJHFA@DDERR_DDSCAPSCOMPLEXREQUIRED@
CONST	SEGMENT
??_C@_0BN@BHNGJHFA@DDERR_DDSCAPSCOMPLEXREQUIRED@ DB 'DDERR_DDSCAPSCOMPLEX'
	DB	'REQUIRED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING@
CONST	SEGMENT
??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING@ DB 'DDERR_WASSTILLDRAWING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS@
CONST	SEGMENT
??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS@ DB 'DDERR_VERTICALBLANK'
	DB	'INPROGRESS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BCDLBAEK@DDERR_INVALIDSTREAM@
CONST	SEGMENT
??_C@_0BE@BCDLBAEK@DDERR_INVALIDSTREAM@ DB 'DDERR_INVALIDSTREAM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK@
CONST	SEGMENT
??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK@ DB 'DDERR_UNSUPPORTEDMASK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT@
CONST	SEGMENT
??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT@ DB 'DDERR_UNSUPPORTEDFORMAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED@
CONST	SEGMENT
??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED@ DB 'DDERR_UNSUPPORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH@
CONST	SEGMENT
??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH@ DB 'DDERR_TOOBIGWIDTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE@
CONST	SEGMENT
??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE@ DB 'DDERR_TOOBIGSIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT@
CONST	SEGMENT
??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT@ DB 'DDERR_TOOBIGHEIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED@
CONST	SEGMENT
??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED@ DB 'DDERR_SURFACENOTATTACHED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST@
CONST	SEGMENT
??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST@ DB 'DDERR_SURFACELOST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED@
CONST	SEGMENT
??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED@ DB 'DDERR_SURFACEISOBSCURED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IADNDEGE@DDERR_CANTLOCKSURFACE@
CONST	SEGMENT
??_C@_0BG@IADNDEGE@DDERR_CANTLOCKSURFACE@ DB 'DDERR_CANTLOCKSURFACE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY@
CONST	SEGMENT
??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY@ DB 'DDERR_SURFACEBUSY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT@
CONST	SEGMENT
??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT@ DB 'DDERR_SURFACEALREADY'
	DB	'DEPENDENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED@
CONST	SEGMENT
??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED@ DB 'DDERR_SURFACEALREADY'
	DB	'ATTACHED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET@
CONST	SEGMENT
??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET@ DB 'DDERR_COLORKEYNOTSET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY@
CONST	SEGMENT
??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY@ DB 'DDERR_PALETTEBUSY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACT@
CONST	SEGMENT
??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACT@ DB 'DDERR_OVERLAYCOLO'
	DB	'RKEYONLYONEACTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP@
CONST	SEGMENT
??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP@ DB 'DDERR_OVERLAYCANTCLIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY@
CONST	SEGMENT
??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY@ DB 'DDERR_OUTOFVIDEOMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY@
CONST	SEGMENT
??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY@ DB 'DDERR_OUTOFMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS@
CONST	SEGMENT
??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS@ DB 'DDERR_OUTOFCAPS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW@
CONST	SEGMENT
??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW@ DB 'DDERR_NOZOVERLAYHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW@
CONST	SEGMENT
??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW@ DB 'DDERR_NOZBUFFERHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW@
CONST	SEGMENT
??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW@ DB 'DDERR_NOVSYNCHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW@
CONST	SEGMENT
??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW@ DB 'DDERR_NOTEXTUREHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR@
CONST	SEGMENT
??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR@ DB 'DDERR_NOT8BITCOLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX@
CONST	SEGMENT
??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX@ DB 'DDERR_NOT4BITCOLORINDEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR@
CONST	SEGMENT
??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR@ DB 'DDERR_NOT4BITCOLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW@
CONST	SEGMENT
??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW@ DB 'DDERR_NOSTRETCHHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW@
CONST	SEGMENT
??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW@ DB 'DDERR_NOROTATIONHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW@
CONST	SEGMENT
??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW@ DB 'DDERR_NORASTEROPHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CPKIKHCK@DDERR_OVERLAPPINGRECTS@
CONST	SEGMENT
??_C@_0BH@CPKIKHCK@DDERR_OVERLAPPINGRECTS@ DB 'DDERR_OVERLAPPINGRECTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW@
CONST	SEGMENT
??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW@ DB 'DDERR_NOOVERLAYHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IIGPDCF@DDERR_NOTFOUND@
CONST	SEGMENT
??_C@_0P@IIGPDCF@DDERR_NOTFOUND@ DB 'DDERR_NOTFOUND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW@
CONST	SEGMENT
??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW@ DB 'DDERR_NOMIRRORHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IIGNACND@DDERR_NOGDI@
CONST	SEGMENT
??_C@_0M@IIGNACND@DDERR_NOGDI@ DB 'DDERR_NOGDI', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW@
CONST	SEGMENT
??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW@ DB 'DDERR_NOFLIPHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE@
CONST	SEGMENT
??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE@ DB 'DDERR_NOEXCLUSIVEMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BCHEFLBM@DDERR_NODIRECTDRAWSUPPORT@
CONST	SEGMENT
??_C@_0BK@BCHEFLBM@DDERR_NODIRECTDRAWSUPPORT@ DB 'DDERR_NODIRECTDRAWSUPPO'
	DB	'RT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW@
CONST	SEGMENT
??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW@ DB 'DDERR_NOCOLORKEYHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY@
CONST	SEGMENT
??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY@ DB 'DDERR_NOCOLORKEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET@
CONST	SEGMENT
??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET@ DB 'DDERR_NOCOOPERATIVELE'
	DB	'VELSET', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW@
CONST	SEGMENT
??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW@ DB 'DDERR_NOCOLORCONVHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST@
CONST	SEGMENT
??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST@ DB 'DDERR_NOCLIPLIST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GMBJAIDG@DDERR_NOSURFACELEFT@
CONST	SEGMENT
??_C@_0BE@GMBJAIDG@DDERR_NOSURFACELEFT@ DB 'DDERR_NOSURFACELEFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HOBBEKCG@DDERR_NOSTEREOHARDWARE@
CONST	SEGMENT
??_C@_0BH@HOBBEKCG@DDERR_NOSTEREOHARDWARE@ DB 'DDERR_NOSTEREOHARDWARE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW@
CONST	SEGMENT
??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW@ DB 'DDERR_NOALPHAHW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DJKAAMGA@DDERR_NO3D@
CONST	SEGMENT
??_C@_0L@DJKAAMGA@DDERR_NO3D@ DB 'DDERR_NO3D', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES@
CONST	SEGMENT
??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES@ DB 'DDERR_LOCKEDSURFACES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT@
CONST	SEGMENT
??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT@ DB 'DDERR_INVALIDRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT@
CONST	SEGMENT
??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT@ DB 'DDERR_INVALIDPIXELFORMAT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS@
CONST	SEGMENT
??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS@ DB 'DDERR_INVALIDPARAMS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT@
CONST	SEGMENT
??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT@ DB 'DDERR_INVALIDOBJECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE@
CONST	SEGMENT
??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE@ DB 'DDERR_INVALIDMODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST@
CONST	SEGMENT
??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST@ DB 'DDERR_INVALIDCLIPLIST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS@
CONST	SEGMENT
??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS@ DB 'DDERR_INVALIDCAPS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY@
CONST	SEGMENT
??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY@ DB 'DDERR_INCOMPATIBLEPRIMA'
	DB	'RY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN@
CONST	SEGMENT
??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN@ DB 'DDERR_HEIGHTALIGN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGEMDJJH@DDERR_GENERIC@
CONST	SEGMENT
??_C@_0O@MGEMDJJH@DDERR_GENERIC@ DB 'DDERR_GENERIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION@
CONST	SEGMENT
??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION@ DB 'DDERR_EXCEPTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL@
CONST	SEGMENT
??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL@ DB 'DDERR_CURRENTLYNOTAVAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE@
CONST	SEGMENT
??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE@ DB 'DDERR_CANNOTDETACHSURFA'
	DB	'CE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LBNPECMI@DDERR_CANNOTATTACHSURFACE@
CONST	SEGMENT
??_C@_0BK@LBNPECMI@DDERR_CANNOTATTACHSURFACE@ DB 'DDERR_CANNOTATTACHSURFA'
	DB	'CE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED@
CONST	SEGMENT
??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED@ DB 'DDERR_ALREADYINITIALIZED'
	DB	00H						; `string'
CONST	ENDS
_DATA	SEGMENT
?ddraw@@3Udirect_draw_data@@A DD 00H			; ddraw
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?zbuffer_on_video@@3HA DD 01H				; zbuffer_on_video
?ddraw_export@@3Udirect_draw_data@@A DD 00H		; ddraw_export
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	?initialise_graphics_system@@YGHPAU_GUID@@@Z	; initialise_graphics_system
PUBLIC	?set_ddraw_use_full_screen@@YGXH@Z		; set_ddraw_use_full_screen
PUBLIC	?get_graphics_system_initialised@@YGHXZ		; get_graphics_system_initialised
PUBLIC	?get_ddraw_device_guid@@YGXPAU_GUID@@@Z		; get_ddraw_device_guid
PUBLIC	?ddraw_release_objects@@YGHXZ			; ddraw_release_objects
PUBLIC	?ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z ; ddraw_set_display_resolution
PUBLIC	?ddraw_change_display_resolution@@YGHHHH@Z	; ddraw_change_display_resolution
PUBLIC	?ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z ; ddraw_lock_surface
PUBLIC	?ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z ; ddraw_unlock_surface
PUBLIC	?ddraw_flip_surface@@YGHXZ			; ddraw_flip_surface
PUBLIC	?ddraw_create_surface@@YGPAUIDirectDrawSurface7@@HHH@Z ; ddraw_create_surface
PUBLIC	?ddraw_destroy_surface@@YGHPAUIDirectDrawSurface7@@@Z ; ddraw_destroy_surface
PUBLIC	?ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z ; ddraw_set_cooperative_level
PUBLIC	?ddraw_internal_set_cooperative_level@@YGHPAX@Z	; ddraw_internal_set_cooperative_level
PUBLIC	?get_ddraw_error_message@@YGPBDJ@Z		; get_ddraw_error_message
PUBLIC	?ddraw_validate_display_devices@@YGXXZ		; ddraw_validate_display_devices
PUBLIC	?ddraw_internal_set_display_mode@@YGHPAX@Z	; ddraw_internal_set_display_mode
PUBLIC	?blit_front_buffer_to_render_buffer@@YGXXZ	; blit_front_buffer_to_render_buffer
PUBLIC	?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ; get_ddraw_zbuffer_pixel_format
PUBLIC	?ddraw_initialise@@YGHPAU_GUID@@@Z		; ddraw_initialise
PUBLIC	?ddraw_flip_surface_export@@YGHXZ		; ddraw_flip_surface_export
PUBLIC	?copy_surface_to_surface@@YGXPAUIDirectDrawSurface7@@UtagRECT@@01@Z ; copy_surface_to_surface
PUBLIC	?clear_export_mfd_screen@@YGXXZ			; clear_export_mfd_screen
PUBLIC	?copy_export_mfd@@YGXPAUSCREEN@@0@Z		; copy_export_mfd
PUBLIC	?__LINE__Var@?0??initialise_graphics_system@@YGHPAU_GUID@@@Z@4JA ; `initialise_graphics_system'::`1'::__LINE__Var
PUBLIC	??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BG@CAEPONHO@?$CBgraphics_initialised@	; `string'
PUBLIC	??_C@_0CM@IFJFMBKL@Unable?5to?5enumerate?5direct?5draw@ ; `string'
PUBLIC	??_C@_0DI@MPLCJHGC@Unable?5to?5enumerate?5non?5display@ ; `string'
PUBLIC	??_C@_0CI@MFCABGJH@Unable?5to?5create?5direct?5draw?5ob@ ; `string'
PUBLIC	??_C@_0CG@MMJMEGL@Unable?5to?5enumerate?5display?5mod@ ; `string'
PUBLIC	??_C@_0DB@FFJCEEIC@Unable?5to?5get?5a?5Direct3D?5driver@ ; `string'
PUBLIC	??_C@_0CC@KFJHLHGM@wrong?5adapternumber?5?$CIexport_mfd@ ; `string'
PUBLIC	??_C@_0DF@CADBAMKH@Unable?5to?5create?5direct?5draw?5ob@ ; `string'
PUBLIC	??_C@_0BK@CDNIDHOL@Unable?5to?5release?5d3d?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0DI@PLBGCAHN@Unable?5to?5delete?5the?5zbuffer?5fr@ ; `string'
PUBLIC	??_C@_0CK@KFBOGJHI@Released?5DirectDraw?5?9?5reference@ ; `string'
PUBLIC	?__LINE__Var@?0??ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z@4JA ; `ddraw_lock_surface'::`1'::__LINE__Var
PUBLIC	??_C@_07IHELBNLD@surface@			; `string'
PUBLIC	??_C@_03PLHFFLIH@ptr@				; `string'
PUBLIC	??_C@_05NCNFOFLM@pitch@				; `string'
PUBLIC	??_C@_0BD@JLFNEMHA@Attempting?5restore@		; `string'
PUBLIC	??_C@_0BO@IEHBNKMH@Unable?5to?5restore?5surface?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BL@BHDPJNPH@failed?5to?5lock?5surface?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0DE@KEALBHFE@Locked?5surface?0?5but?5got?5a?5NULL?5@ ; `string'
PUBLIC	?__LINE__Var@?0??ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z@4JA ; `ddraw_unlock_surface'::`1'::__LINE__Var
PUBLIC	??_C@_06HLKELJGF@memory@			; `string'
PUBLIC	??_C@_0BN@GFIMFAAF@Unable?5to?5unlock?5surface?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CM@PKGNBJCK@Unable?5to?5perform?5surface?5flip?5@ ; `string'
PUBLIC	??_C@_0DA@POODLDHG@Unable?5to?5perform?5a?5windowed?5fl@ ; `string'
PUBLIC	?__LINE__Var@?0??ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z@4JA ; `ddraw_set_display_resolution'::`1'::__LINE__Var
PUBLIC	??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@ ; `string'
PUBLIC	??_C@_0DH@CBGPFDID@Unknown?5window?5status?5passed?5to@ ; `string'
PUBLIC	??_C@_0CF@OLGMECBP@Unable?5to?5set?5display?5resolutio@ ; `string'
PUBLIC	??_C@_0CF@PDIAAJFM@Unable?5to?5create?5primary?5surfac@ ; `string'
PUBLIC	??_C@_0BN@NNDAPKJG@Unable?5to?5get?5backbuffer?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@ ; `string'
PUBLIC	??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@ ; `string'
PUBLIC	??_C@_0CH@CCBKEALA@Unable?5to?5create?5secondary?5surf@ ; `string'
PUBLIC	??_C@_0BN@JIKBJCFH@Unable?5to?5create?5clipper?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CG@EJCPILFH@Unable?5to?5set?5clipper?5to?5a?5wind@ ; `string'
PUBLIC	??_C@_0DB@KAFIGAEM@Unable?5to?5set?5clipper?5to?5the?5pr@ ; `string'
PUBLIC	?__LINE__Var@?0??ddraw_change_display_resolution@@YGHHHH@Z@4JA ; `ddraw_change_display_resolution'::`1'::__LINE__Var
PUBLIC	??_C@_0CN@PDDIBKIM@Unable?5to?5delete?5the?5release?5th@ ; `string'
PUBLIC	??_C@_0CH@NHHFNKMB@Unable?5to?5release?5old?5front?5buf@ ; `string'
PUBLIC	??_C@_0BN@DHJONCNN@Unable?5to?5GetSurfaceDesc?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CA@MMNDKLML@Unable?5to?5RestoreAllSurface?3?5?$CFs@ ; `string'
PUBLIC	?__LINE__Var@?0??get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z@4JA ; `get_ddraw_zbuffer_pixel_format'::`1'::__LINE__Var
PUBLIC	??_C@_0N@NOCMIJCP@d3d_data?4d3d@		; `string'
PUBLIC	??_C@_0CI@IHPBAOID@Unable?5to?5enumerate?5zbuffer?5for@ ; `string'
PUBLIC	??_C@_0P@BDLKGDCN@Invalid?5object@		; `string'
PUBLIC	??_C@_0BL@COKODHLM@Exclusive?5mode?5already?5set@ ; `string'
PUBLIC	??_C@_0BC@KEFCBDGA@No?5Exclusive?5mode@		; `string'
PUBLIC	??_C@_0L@GNPEPAAH@Wrong?5mode@			; `string'
PUBLIC	??_C@_0CA@HFJBHAPL@Unable?5to?5destroy?5a?5surface?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CN@FEAPNDLA@Graphics?5adapter?5supports?5resol@ ; `string'
PUBLIC	??_C@_0CO@KKAOLCMG@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@ ; `string'
PUBLIC	??_C@_0CO@NNMMHCLN@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@ ; `string'
PUBLIC	??_C@_0DG@HAGLPPFM@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@ ; `string'
PUBLIC	??_C@_0BM@BNDNPKHA@Resolution?5?$CFi?5x?5?$CFi?5accepted@ ; `string'
PUBLIC	??_C@_0BL@CEEIFJLH@Driver?3?5?$CFs?0?5assessment?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0DD@PGNNHCMM@Setting?5the?5best?5display?5device@ ; `string'
PUBLIC	??_C@_0DB@HLPPDAOC@Unable?5to?5set?5cooperative?5level@ ; `string'
PUBLIC	??_C@_0CD@GKMNIIHL@Unable?5to?5restore?5display?5mode?3@ ; `string'
PUBLIC	??_C@_0CO@BONEAADN@Unable?5to?5set?5cooperative?5level@ ; `string'
PUBLIC	??_C@_0CP@NEHCLLHI@Unable?5to?5copy?5front?5buffer?5to?5@ ; `string'
PUBLIC	??_C@_0BF@KFCPHEKI@Unable?5to?5lock?5dst?$CFs@	; `string'
PUBLIC	??_C@_0P@LFGKBDPE@size?3dst?5?$CFd?5?$CFd@	; `string'
PUBLIC	??_C@_0P@BBBNKFBE@size?3src?5?$CFd?5?$CFd@	; `string'
PUBLIC	??_C@_0BF@ELFCAABN@Unable?5to?5lock?5src?$CFs@	; `string'
PUBLIC	??_C@_0BH@DMFGOCDJ@Unable?5to?5unlock?5dst?$CFs@ ; `string'
PUBLIC	??_C@_0BH@NCCLJGIM@Unable?5to?5unlock?5src?$CFs@ ; `string'
PUBLIC	__real@3f50624dd2f1a9fc
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__GetSystemPaletteEntries@16:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__GetMenu@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__AdjustWindowRectEx@16:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__SystemParametersInfoA@16:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?register_exit_function@@YGXP6GXXZ@Z:PROC	; register_exit_function
EXTRN	?register_post_activate_message_function@@YGHP6GXH@Z@Z:PROC ; register_post_activate_message_function
EXTRN	?set_fpu_rounding_mode_zero@@YGXXZ:PROC		; set_fpu_rounding_mode_zero
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?system_thread_function@@YGHP6GHPAX@Z0@Z:PROC	; system_thread_function
EXTRN	_DirectDrawEnumerateExA@12:PROC
EXTRN	_DirectDrawCreateEx@16:PROC
EXTRN	?d3d_release_objects@@YGXXZ:PROC		; d3d_release_objects
EXTRN	?destroy_d3d_vertex_buffers@@YGXXZ:PROC		; destroy_d3d_vertex_buffers
EXTRN	?get_d3d_error_message@@YGPBDJ@Z:PROC		; get_d3d_error_message
EXTRN	?d3d_render_target_recreated@@YGXXZ:PROC	; d3d_render_target_recreated
EXTRN	?initialise_graphics_colours@@YGXXZ:PROC	; initialise_graphics_colours
EXTRN	?set_viewport@@YGXMMMM@Z:PROC			; set_viewport
EXTRN	?set_basic_viewport@@YGXMMMM@Z:PROC		; set_basic_viewport
EXTRN	?ddraw_internal_assess_3d_capabilities@@YGHPAUIDirectDraw7@@@Z:PROC ; ddraw_internal_assess_3d_capabilities
EXTRN	?initialise_graphics_resolution_modes@@YGXXZ:PROC ; initialise_graphics_resolution_modes
EXTRN	?initialise_system_graphics_screens@@YGXXZ:PROC	; initialise_system_graphics_screens
EXTRN	?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z:PROC ; create_video_screen
EXTRN	?initialise_d3d_state@@YGXXZ:PROC		; initialise_d3d_state
EXTRN	?initialise_psd_layers@@YGXXZ:PROC		; initialise_psd_layers
EXTRN	?free_all_hardware_textures@@YGXXZ:PROC		; free_all_hardware_textures
EXTRN	?set_surface_shift_and_mask@@YGXHPAH0@Z:PROC	; set_surface_shift_and_mask
EXTRN	?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z:PROC ; f3d_surface_create
EXTRN	?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z:PROC ; f3d_surface_description
EXTRN	?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ:PROC ; f3d_surface_front
EXTRN	?application_window@@3PAUHWND__@@A:DWORD	; application_window
EXTRN	_IID_IDirectDraw7:BYTE
EXTRN	_IID_IDirect3D7:BYTE
EXTRN	_IID_IDirect3DHALDevice:BYTE
EXTRN	?application_colour_table@@3PAUtagPALETTEENTRY@@A:BYTE ; application_colour_table
EXTRN	?d3d_data@@3UDIRECT_3D_DATA@@A:BYTE		; d3d_data
EXTRN	?d3d_valid@@3HA:DWORD				; d3d_valid
EXTRN	?d3d_use_rgb_device@@3HA:DWORD			; d3d_use_rgb_device
EXTRN	?d3d_total_video_memory@@3HA:DWORD		; d3d_total_video_memory
EXTRN	?d3d_total_video_texture_memory@@3HA:DWORD	; d3d_total_video_texture_memory
EXTRN	?running_total_number_of_d3d_triangles@@3HA:DWORD ; running_total_number_of_d3d_triangles
EXTRN	?total_number_of_d3d_triangles@@3HA:DWORD	; total_number_of_d3d_triangles
EXTRN	?running_total_number_of_d3d_flushes@@3HA:DWORD	; running_total_number_of_d3d_flushes
EXTRN	?total_number_of_d3d_flushes@@3HA:DWORD		; total_number_of_d3d_flushes
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?command_line_export_mfd_adapter@@3HA:DWORD	; command_line_export_mfd_adapter
EXTRN	?command_line_export_mfd_screen_width@@3HA:DWORD ; command_line_export_mfd_screen_width
EXTRN	?command_line_export_mfd_screen_height@@3HA:DWORD ; command_line_export_mfd_screen_height
EXTRN	?command_line_export_mfd_right_pos@@3PAHA:BYTE	; command_line_export_mfd_right_pos
EXTRN	?command_line_export_mfd_left_pos@@3PAHA:BYTE	; command_line_export_mfd_left_pos
EXTRN	?command_line_export_mfd_single_pos@@3PAHA:BYTE	; command_line_export_mfd_single_pos
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?graphics_initialised@@3HA DD 01H DUP (?)		; graphics_initialised
?cooperative_level@?1??ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z@4HA DD 01H DUP (?) ; `ddraw_set_cooperative_level'::`2'::cooperative_level
_BSS	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT ??_C@_0BH@NCCLJGIM@Unable?5to?5unlock?5src?$CFs@
CONST	SEGMENT
??_C@_0BH@NCCLJGIM@Unable?5to?5unlock?5src?$CFs@ DB 'Unable to unlock src'
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DMFGOCDJ@Unable?5to?5unlock?5dst?$CFs@
CONST	SEGMENT
??_C@_0BH@DMFGOCDJ@Unable?5to?5unlock?5dst?$CFs@ DB 'Unable to unlock dst'
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ELFCAABN@Unable?5to?5lock?5src?$CFs@
CONST	SEGMENT
??_C@_0BF@ELFCAABN@Unable?5to?5lock?5src?$CFs@ DB 'Unable to lock src%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BBBNKFBE@size?3src?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0P@BBBNKFBE@size?3src?5?$CFd?5?$CFd@ DB 'size:src %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LFGKBDPE@size?3dst?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0P@LFGKBDPE@size?3dst?5?$CFd?5?$CFd@ DB 'size:dst %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KFCPHEKI@Unable?5to?5lock?5dst?$CFs@
CONST	SEGMENT
??_C@_0BF@KFCPHEKI@Unable?5to?5lock?5dst?$CFs@ DB 'Unable to lock dst%s', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
?ddraw_error_table@@3PAUDDRAW_ERROR_MESSAGE@@A DD 088760005H ; ddraw_error_table
	DD	FLAT:??_C@_0BJ@LAEIKKJF@DDERR_ALREADYINITIALIZED@
	DD	08876000aH
	DD	FLAT:??_C@_0BK@LBNPECMI@DDERR_CANNOTATTACHSURFACE@
	DD	088760014H
	DD	FLAT:??_C@_0BK@FMONFDPK@DDERR_CANNOTDETACHSURFACE@
	DD	088760028H
	DD	FLAT:??_C@_0BI@CPFFLGJD@DDERR_CURRENTLYNOTAVAIL@
	DD	088760037H
	DD	FLAT:??_C@_0BA@MEDIIHJ@DDERR_EXCEPTION@
	DD	080004005H
	DD	FLAT:??_C@_0O@MGEMDJJH@DDERR_GENERIC@
	DD	08876005aH
	DD	FLAT:??_C@_0BC@FNNCOGNH@DDERR_HEIGHTALIGN@
	DD	08876005fH
	DD	FLAT:??_C@_0BK@HJOPGIGH@DDERR_INCOMPATIBLEPRIMARY@
	DD	088760064H
	DD	FLAT:??_C@_0BC@DDIGIKID@DDERR_INVALIDCAPS@
	DD	08876006eH
	DD	FLAT:??_C@_0BG@OFKCMNHM@DDERR_INVALIDCLIPLIST@
	DD	088760078H
	DD	FLAT:??_C@_0BC@GLNOPNKK@DDERR_INVALIDMODE@
	DD	088760082H
	DD	FLAT:??_C@_0BE@KPNOKGED@DDERR_INVALIDOBJECT@
	DD	080070057H
	DD	FLAT:??_C@_0BE@CCPBMIBD@DDERR_INVALIDPARAMS@
	DD	088760091H
	DD	FLAT:??_C@_0BJ@PEGADMFO@DDERR_INVALIDPIXELFORMAT@
	DD	088760096H
	DD	FLAT:??_C@_0BC@LAEFCIAI@DDERR_INVALIDRECT@
	DD	0887600a0H
	DD	FLAT:??_C@_0BF@MAGKOGBC@DDERR_LOCKEDSURFACES@
	DD	0887600aaH
	DD	FLAT:??_C@_0L@DJKAAMGA@DDERR_NO3D@
	DD	0887600b4H
	DD	FLAT:??_C@_0BA@BFFEPDGJ@DDERR_NOALPHAHW@
	DD	0887600b5H
	DD	FLAT:??_C@_0BH@HOBBEKCG@DDERR_NOSTEREOHARDWARE@
	DD	0887600b6H
	DD	FLAT:??_C@_0BE@GMBJAIDG@DDERR_NOSURFACELEFT@
	DD	0887600cdH
	DD	FLAT:??_C@_0BB@JOLMGPDK@DDERR_NOCLIPLIST@
	DD	0887600d2H
	DD	FLAT:??_C@_0BE@PDOMLOPD@DDERR_NOCOLORCONVHW@
	DD	0887600d4H
	DD	FLAT:??_C@_0BM@PMEMMDPI@DDERR_NOCOOPERATIVELEVELSET@
	DD	0887600d7H
	DD	FLAT:??_C@_0BB@GIFHLHNH@DDERR_NOCOLORKEY@
	DD	0887600dcH
	DD	FLAT:??_C@_0BD@BAAPAKEL@DDERR_NOCOLORKEYHW@
	DD	0887600deH
	DD	FLAT:??_C@_0BK@BCHEFLBM@DDERR_NODIRECTDRAWSUPPORT@
	DD	0887600e1H
	DD	FLAT:??_C@_0BG@DHFIFBBC@DDERR_NOEXCLUSIVEMODE@
	DD	0887600e6H
	DD	FLAT:??_C@_0P@IEKAGFBG@DDERR_NOFLIPHW@
	DD	0887600f0H
	DD	FLAT:??_C@_0M@IIGNACND@DDERR_NOGDI@
	DD	0887600faH
	DD	FLAT:??_C@_0BB@MNGJGGOP@DDERR_NOMIRRORHW@
	DD	0887600ffH
	DD	FLAT:??_C@_0P@IIGPDCF@DDERR_NOTFOUND@
	DD	088760104H
	DD	FLAT:??_C@_0BC@JKHLHDPI@DDERR_NOOVERLAYHW@
	DD	08876010eH
	DD	FLAT:??_C@_0BH@CPKIKHCK@DDERR_OVERLAPPINGRECTS@
	DD	088760118H
	DD	FLAT:??_C@_0BD@ICAOCHBG@DDERR_NORASTEROPHW@
	DD	088760122H
	DD	FLAT:??_C@_0BD@NEIDAAKN@DDERR_NOROTATIONHW@
	DD	088760136H
	DD	FLAT:??_C@_0BC@CAPIEDAG@DDERR_NOSTRETCHHW@
	DD	08876013cH
	DD	FLAT:??_C@_0BD@ENAKJNOC@DDERR_NOT4BITCOLOR@
	DD	08876013dH
	DD	FLAT:??_C@_0BI@IKKPPDMJ@DDERR_NOT4BITCOLORINDEX@
	DD	088760140H
	DD	FLAT:??_C@_0BD@FHDGHNGM@DDERR_NOT8BITCOLOR@
	DD	08876014aH
	DD	FLAT:??_C@_0BC@ENEADALF@DDERR_NOTEXTUREHW@
	DD	08876014fH
	DD	FLAT:??_C@_0BA@PAPKELJP@DDERR_NOVSYNCHW@
	DD	088760154H
	DD	FLAT:??_C@_0BC@MGOAKBHI@DDERR_NOZBUFFERHW@
	DD	08876015eH
	DD	FLAT:??_C@_0BD@IFBPLCFK@DDERR_NOZOVERLAYHW@
	DD	088760168H
	DD	FLAT:??_C@_0BA@BCMNJCDB@DDERR_OUTOFCAPS@
	DD	08007000eH
	DD	FLAT:??_C@_0BC@JFAMHJIL@DDERR_OUTOFMEMORY@
	DD	08876017cH
	DD	FLAT:??_C@_0BH@IHGJFMGH@DDERR_OUTOFVIDEOMEMORY@
	DD	08876017eH
	DD	FLAT:??_C@_0BG@EDDFCCOG@DDERR_OVERLAYCANTCLIP@
	DD	088760180H
	DD	FLAT:??_C@_0CD@JNABKIAN@DDERR_OVERLAYCOLORKEYONLYONEACT@
	DD	088760183H
	DD	FLAT:??_C@_0BC@CEBGFCJL@DDERR_PALETTEBUSY@
	DD	088760190H
	DD	FLAT:??_C@_0BF@HOAOBBGM@DDERR_COLORKEYNOTSET@
	DD	08876019aH
	DD	FLAT:??_C@_0BN@DLNFLDJF@DDERR_SURFACEALREADYATTACHED@
	DD	0887601a4H
	DD	FLAT:??_C@_0BO@HOHOGLO@DDERR_SURFACEALREADYDEPENDENT@
	DD	0887601aeH
	DD	FLAT:??_C@_0BC@NLGPCHLD@DDERR_SURFACEBUSY@
	DD	0887601b3H
	DD	FLAT:??_C@_0BG@IADNDEGE@DDERR_CANTLOCKSURFACE@
	DD	0887601b8H
	DD	FLAT:??_C@_0BI@KAHOANAA@DDERR_SURFACEISOBSCURED@
	DD	0887601c2H
	DD	FLAT:??_C@_0BC@OOFFFAGE@DDERR_SURFACELOST@
	DD	0887601ccH
	DD	FLAT:??_C@_0BJ@DMNBOKFJ@DDERR_SURFACENOTATTACHED@
	DD	0887601d6H
	DD	FLAT:??_C@_0BD@FPHOLBKE@DDERR_TOOBIGHEIGHT@
	DD	0887601e0H
	DD	FLAT:??_C@_0BB@IBDADILM@DDERR_TOOBIGSIZE@
	DD	0887601eaH
	DD	FLAT:??_C@_0BC@MMEFKBGP@DDERR_TOOBIGWIDTH@
	DD	080004001H
	DD	FLAT:??_C@_0BC@LLCNADOP@DDERR_UNSUPPORTED@
	DD	0887601feH
	DD	FLAT:??_C@_0BI@GGBGCOID@DDERR_UNSUPPORTEDFORMAT@
	DD	088760208H
	DD	FLAT:??_C@_0BG@OHPHKFL@DDERR_UNSUPPORTEDMASK@
	DD	088760209H
	DD	FLAT:??_C@_0BE@BCDLBAEK@DDERR_INVALIDSTREAM@
	DD	088760219H
	DD	FLAT:??_C@_0BO@CKEGAAHC@DDERR_VERTICALBLANKINPROGRESS@
	DD	08876021cH
	DD	FLAT:??_C@_0BG@PNJKHKJC@DDERR_WASSTILLDRAWING@
	DD	08876021eH
	DD	FLAT:??_C@_0BN@BHNGJHFA@DDERR_DDSCAPSCOMPLEXREQUIRED@
	DD	088760230H
	DD	FLAT:??_C@_0N@MAIIIAKF@DDERR_XALIGN@
	DD	088760231H
	DD	FLAT:??_C@_0BM@LMDGBJFD@DDERR_INVALIDDIRECTDRAWGUID@
	DD	088760232H
	DD	FLAT:??_C@_0BP@CFDPGCFK@DDERR_DIRECTDRAWALREADYCREATED@
	DD	088760233H
	DD	FLAT:??_C@_0BF@NOEHEIDL@DDERR_NODIRECTDRAWHW@
	DD	088760234H
	DD	FLAT:??_C@_0CC@FKFBEMJC@DDERR_PRIMARYSURFACEALREADYEXIS@
	DD	088760235H
	DD	FLAT:??_C@_0BC@DCFOAKAL@DDERR_NOEMULATION@
	DD	088760236H
	DD	FLAT:??_C@_0BF@BDDJLJGA@DDERR_REGIONTOOSMALL@
	DD	088760237H
	DD	FLAT:??_C@_0BJ@BOEHMDDM@DDERR_CLIPPERISUSINGHWND@
	DD	088760238H
	DD	FLAT:??_C@_0BI@BGMBBEJL@DDERR_NOCLIPPERATTACHED@
	DD	088760239H
	DD	FLAT:??_C@_0N@EOPEBNEI@DDERR_NOHWND@
	DD	08876023aH
	DD	FLAT:??_C@_0BF@MAFLBECE@DDERR_HWNDSUBCLASSED@
	DD	08876023bH
	DD	FLAT:??_C@_0BF@LGLNHCHJ@DDERR_HWNDALREADYSET@
	DD	08876023cH
	DD	FLAT:??_C@_0BI@KBKHCNLK@DDERR_NOPALETTEATTACHED@
	DD	08876023dH
	DD	FLAT:??_C@_0BC@GEADEPGN@DDERR_NOPALETTEHW@
	DD	08876023eH
	DD	FLAT:??_C@_0BG@HLNKGEOE@DDERR_BLTFASTCANTCLIP@
	DD	08876023fH
	DD	FLAT:??_C@_0O@NKGDNEG@DDERR_NOBLTHW@
	DD	088760240H
	DD	FLAT:??_C@_0BB@BPILLDBG@DDERR_NODDROPSHW@
	DD	088760241H
	DD	FLAT:??_C@_0BI@CLLMFLGN@DDERR_OVERLAYNOTVISIBLE@
	DD	088760242H
	DD	FLAT:??_C@_0BE@JKKEKLOE@DDERR_NOOVERLAYDEST@
	DD	088760243H
	DD	FLAT:??_C@_0BG@OMJGFIHE@DDERR_INVALIDPOSITION@
	DD	088760244H
	DD	FLAT:??_C@_0BJ@LGNAEONK@DDERR_NOTAOVERLAYSURFACE@
	DD	088760245H
	DD	FLAT:??_C@_0BO@GMCKLDPA@DDERR_EXCLUSIVEMODEALREADYSET@
	DD	088760246H
	DD	FLAT:??_C@_0BD@FOFDLEGO@DDERR_NOTFLIPPABLE@
	DD	088760247H
	DD	FLAT:??_C@_0BE@LNBDBNLL@DDERR_CANTDUPLICATE@
	DD	088760248H
	DD	FLAT:??_C@_0BA@KCNFHPNM@DDERR_NOTLOCKED@
	DD	088760249H
	DD	FLAT:??_C@_0BD@PBNGJMBK@DDERR_CANTCREATEDC@
	DD	08876024aH
	DD	FLAT:??_C@_0L@CHFPOEHC@DDERR_NODC@
	DD	08876024bH
	DD	FLAT:??_C@_0BA@FGHHLMKB@DDERR_WRONGMODE@
	DD	08876024cH
	DD	FLAT:??_C@_0BI@NLHHKHEN@DDERR_IMPLICITLYCREATED@
	DD	08876024dH
	DD	FLAT:??_C@_0BE@FGMGOELL@DDERR_NOTPALETTIZED@
	DD	08876024eH
	DD	FLAT:??_C@_0BG@GJEKJFBD@DDERR_UNSUPPORTEDMODE@
	DD	08876024fH
	DD	FLAT:??_C@_0BB@LNEPLBGC@DDERR_NOMIPMAPHW@
	DD	088760250H
	DD	FLAT:??_C@_0BJ@HPBNNCIB@DDERR_INVALIDSURFACETYPE@
	DD	088760258H
	DD	FLAT:??_C@_0BD@DJOGAOFP@DDERR_NOOPTIMIZEHW@
	DD	088760259H
	DD	FLAT:??_C@_0BA@IAHGDMOK@DDERR_NOTLOADED@
	DD	08876025aH
	DD	FLAT:??_C@_0BE@NFJHIIEO@DDERR_NOFOCUSWINDOW@
	DD	08876026cH
	DD	FLAT:??_C@_0BH@BBAKKFGG@DDERR_DCALREADYCREATED@
	DD	088760276H
	DD	FLAT:??_C@_0BH@NGNFGAPP@DDERR_NONONLOCALVIDMEM@
	DD	088760280H
	DD	FLAT:??_C@_0BD@GIBKCHPD@DDERR_CANTPAGELOCK@
	DD	088760294H
	DD	FLAT:??_C@_0BF@MPOCMAGG@DDERR_CANTPAGEUNLOCK@
	DD	0887602a8H
	DD	FLAT:??_C@_0BE@ELKGHCMM@DDERR_NOTPAGELOCKED@
	DD	0887602b2H
	DD	FLAT:??_C@_0P@BACCKLEO@DDERR_MOREDATA@
	DD	0887602b3H
	DD	FLAT:??_C@_0O@DIBHCCKN@DDERR_EXPIRED@
	DD	0887602b4H
	DD	FLAT:??_C@_0BD@NFBNMILD@DDERR_TESTFINISHED@
	DD	0887602b5H
	DD	FLAT:??_C@_0O@DBFLIBLJ@DDERR_NEWMODE@
	DD	0887602b7H
	DD	FLAT:??_C@_0BF@DPOKKEIF@DDERR_VIDEONOTACTIVE@
	DD	0887602bbH
	DD	FLAT:??_C@_0BN@KNLDEANB@DDERR_DEVICEDOESNTOWNSURFACE@
	DD	0800401f0H
	DD	FLAT:??_C@_0BF@DLEGFOLA@DDERR_NOTINITIALIZED@
	DD	0887602bcH
	DD	FLAT:??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@
	DD	0887602bdH
	DD	FLAT:??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@
	DD	0887602c1H
	DD	FLAT:??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@
	DD	0887602c2H
	DD	FLAT:??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@
	DD	0887602c3H
	DD	FLAT:??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@
	DD	0887602c6H
	DD	FLAT:??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@
	DD	0887602c7H
	DD	FLAT:??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@
	DD	0887602c8H
	DD	FLAT:??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@
	DD	0887602c9H
	DD	FLAT:??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@
	DD	0887602caH
	DD	FLAT:??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@
	DD	0887602cbH
	DD	FLAT:??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@
	DD	0887602ccH
	DD	FLAT:??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@
	DD	0887602cdH
	DD	FLAT:??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@
	DD	0887602d0H
	DD	FLAT:??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@
	DD	0887602d1H
	DD	FLAT:??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@
	DD	0887602d2H
	DD	FLAT:??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@
	DD	0887602d3H
	DD	FLAT:??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@
	DD	0887602d4H
	DD	FLAT:??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@
	DD	0887602d5H
	DD	FLAT:??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@
	DD	0887602d6H
	DD	FLAT:??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@
	DD	0887602d7H
	DD	FLAT:??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@
	DD	0887602d8H
	DD	FLAT:??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@
	DD	0887602d9H
	DD	FLAT:??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@
	DD	0887602daH
	DD	FLAT:??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@
	DD	0887602dbH
	DD	FLAT:??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@
	DD	0887602dcH
	DD	FLAT:??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@
	DD	0887602ddH
	DD	FLAT:??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@
	DD	0887602deH
	DD	FLAT:??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@
	DD	0887602dfH
	DD	FLAT:??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@
	DD	0887602e0H
	DD	FLAT:??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@
	DD	0887602e1H
	DD	FLAT:??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@
	DD	0887602e2H
	DD	FLAT:??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@
	DD	0887602e3H
	DD	FLAT:??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@
	DD	0887602e4H
	DD	FLAT:??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@
	DD	0887602e5H
	DD	FLAT:??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@
	DD	0887602e6H
	DD	FLAT:??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@
	DD	0887602e7H
	DD	FLAT:??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@
	DD	0887602e8H
	DD	FLAT:??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@
	DD	0887602e9H
	DD	FLAT:??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@
	DD	0887602eaH
	DD	FLAT:??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@
	DD	0887602ebH
	DD	FLAT:??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@
	DD	0887602eeH
	DD	FLAT:??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@
	DD	0887602efH
	DD	FLAT:??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@
	DD	0887602f0H
	DD	FLAT:??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@
	DD	0887602f8H
	DD	FLAT:??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@
	DD	0887602f9H
	DD	FLAT:??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@
	DD	0887602faH
	DD	FLAT:??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@
	DD	0887602fbH
	DD	FLAT:??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@
	DD	088760302H
	DD	FLAT:??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@
	DD	088760303H
	DD	FLAT:??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@
	DD	088760304H
	DD	FLAT:??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@
	DD	088760305H
	DD	FLAT:??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@
	DD	088760306H
	DD	FLAT:??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@
	DD	088760307H
	DD	FLAT:??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@
	DD	088760800H
	DD	FLAT:??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@
	DD	088760802H
	DD	FLAT:??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@
	DD	08876080cH
	DD	FLAT:??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@
	DD	08876080dH
	DD	FLAT:??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@
	DD	08876080eH
	DD	FLAT:??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@
	DD	08876080fH
	DD	FLAT:??_C@_0CA@DMBJGLAJ@D3DERR_VERTEXBUFFERUNLOCKFAILED@
	DD	088760816H
	DD	FLAT:??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@
	DD	088760817H
	DD	FLAT:??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@
	DD	088760818H
	DD	FLAT:??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@
	DD	088760819H
	DD	FLAT:??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@
	DD	08876081aH
	DD	FLAT:??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@
	DD	08876081bH
	DD	FLAT:??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@
	DD	08876081cH
	DD	FLAT:??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@
	DD	08876081dH
	DD	FLAT:??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@
	DD	08876081eH
	DD	FLAT:??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@
	DD	08876081fH
	DD	FLAT:??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@
	DD	088760821H
	DD	FLAT:??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@
	DD	088760822H
	DD	FLAT:??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@
	DD	088760823H
	DD	FLAT:??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@
	DD	088760824H
	DD	FLAT:??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@
	DD	088760825H
	DD	FLAT:??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@
	DD	088760826H
	DD	FLAT:??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@
	DD	088760834H
	DD	FLAT:??_C@_0BJ@KEADFNMC@D3DERR_INVALIDSTATEBLOCK@
	DD	088760835H
	DD	FLAT:??_C@_0BJ@LJGGJJDE@D3DERR_INBEGINSTATEBLOCK@
	DD	088760836H
	DD	FLAT:??_C@_0BM@KKEBPLDD@D3DERR_NOTINBEGINSTATEBLOCK@
	DD	00H
	DD	FLAT:??_C@_08LPKPOPGP@NO?5ERROR@
_DATA	ENDS
;	COMDAT ??_C@_0CP@NEHCLLHI@Unable?5to?5copy?5front?5buffer?5to?5@
CONST	SEGMENT
??_C@_0CP@NEHCLLHI@Unable?5to?5copy?5front?5buffer?5to?5@ DB 'Unable to c'
	DB	'opy front buffer to back buffer, %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BONEAADN@Unable?5to?5set?5cooperative?5level@
CONST	SEGMENT
??_C@_0CO@BONEAADN@Unable?5to?5set?5cooperative?5level@ DB 'Unable to set'
	DB	' cooperative level to normal: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GKMNIIHL@Unable?5to?5restore?5display?5mode?3@
CONST	SEGMENT
??_C@_0CD@GKMNIIHL@Unable?5to?5restore?5display?5mode?3@ DB 'Unable to re'
	DB	'store display mode: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@HLPPDAOC@Unable?5to?5set?5cooperative?5level@
CONST	SEGMENT
??_C@_0DB@HLPPDAOC@Unable?5to?5set?5cooperative?5level@ DB 'Unable to set'
	DB	' cooperative level to exclusive: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@PGNNHCMM@Setting?5the?5best?5display?5device@
CONST	SEGMENT
??_C@_0DD@PGNNHCMM@Setting?5the?5best?5display?5device@ DB 'Setting the b'
	DB	'est display device: %s assessment: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CEEIFJLH@Driver?3?5?$CFs?0?5assessment?3?5?$CFd@
CONST	SEGMENT
??_C@_0BL@CEEIFJLH@Driver?3?5?$CFs?0?5assessment?3?5?$CFd@ DB 'Driver: %s'
	DB	', assessment: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BNDNPKHA@Resolution?5?$CFi?5x?5?$CFi?5accepted@
CONST	SEGMENT
??_C@_0BM@BNDNPKHA@Resolution?5?$CFi?5x?5?$CFi?5accepted@ DB 'Resolution '
	DB	'%i x %i accepted', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HAGLPPFM@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@
CONST	SEGMENT
??_C@_0DG@HAGLPPFM@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@ DB 'Resolu'
	DB	'tion %i x %i skipped because alpha flag was set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NNMMHCLN@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@
CONST	SEGMENT
??_C@_0CO@NNMMHCLN@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@ DB 'Resolu'
	DB	'tion %i x %i skipped because it''s 4 bit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KKAOLCMG@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@
CONST	SEGMENT
??_C@_0CO@KKAOLCMG@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@ DB 'Resolu'
	DB	'tion %i x %i skipped because it''s 8 bit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@FEAPNDLA@Graphics?5adapter?5supports?5resol@
CONST	SEGMENT
??_C@_0CN@FEAPNDLA@Graphics?5adapter?5supports?5resol@ DB 'Graphics adapt'
	DB	'er supports resolution %i x %i', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HFJBHAPL@Unable?5to?5destroy?5a?5surface?3?5?$CFs@
CONST	SEGMENT
??_C@_0CA@HFJBHAPL@Unable?5to?5destroy?5a?5surface?3?5?$CFs@ DB 'Unable t'
	DB	'o destroy a surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GNPEPAAH@Wrong?5mode@
CONST	SEGMENT
??_C@_0L@GNPEPAAH@Wrong?5mode@ DB 'Wrong mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KEFCBDGA@No?5Exclusive?5mode@
CONST	SEGMENT
??_C@_0BC@KEFCBDGA@No?5Exclusive?5mode@ DB 'No Exclusive mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@COKODHLM@Exclusive?5mode?5already?5set@
CONST	SEGMENT
??_C@_0BL@COKODHLM@Exclusive?5mode?5already?5set@ DB 'Exclusive mode alre'
	DB	'ady set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BDLKGDCN@Invalid?5object@
CONST	SEGMENT
??_C@_0P@BDLKGDCN@Invalid?5object@ DB 'Invalid object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IHPBAOID@Unable?5to?5enumerate?5zbuffer?5for@
CONST	SEGMENT
??_C@_0CI@IHPBAOID@Unable?5to?5enumerate?5zbuffer?5for@ DB 'Unable to enu'
	DB	'merate zbuffer formats: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NOCMIJCP@d3d_data?4d3d@
CONST	SEGMENT
??_C@_0N@NOCMIJCP@d3d_data?4d3d@ DB 'd3d_data.d3d', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z@4JA DD 093aH ; `get_ddraw_zbuffer_pixel_format'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@MMNDKLML@Unable?5to?5RestoreAllSurface?3?5?$CFs@
CONST	SEGMENT
??_C@_0CA@MMNDKLML@Unable?5to?5RestoreAllSurface?3?5?$CFs@ DB 'Unable to '
	DB	'RestoreAllSurface: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DHJONCNN@Unable?5to?5GetSurfaceDesc?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@DHJONCNN@Unable?5to?5GetSurfaceDesc?3?5?$CFs@ DB 'Unable to Get'
	DB	'SurfaceDesc: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NHHFNKMB@Unable?5to?5release?5old?5front?5buf@
CONST	SEGMENT
??_C@_0CH@NHHFNKMB@Unable?5to?5release?5old?5front?5buf@ DB 'Unable to re'
	DB	'lease old front buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PDDIBKIM@Unable?5to?5delete?5the?5release?5th@
CONST	SEGMENT
??_C@_0CN@PDDIBKIM@Unable?5to?5delete?5the?5release?5th@ DB 'Unable to de'
	DB	'lete the release the zbuffer: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ddraw_change_display_resolution@@YGHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ddraw_change_display_resolution@@YGHHHH@Z@4JA DD 06e8H ; `ddraw_change_display_resolution'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DB@KAFIGAEM@Unable?5to?5set?5clipper?5to?5the?5pr@
CONST	SEGMENT
??_C@_0DB@KAFIGAEM@Unable?5to?5set?5clipper?5to?5the?5pr@ DB 'Unable to s'
	DB	'et clipper to the primary surface: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EJCPILFH@Unable?5to?5set?5clipper?5to?5a?5wind@
CONST	SEGMENT
??_C@_0CG@EJCPILFH@Unable?5to?5set?5clipper?5to?5a?5wind@ DB 'Unable to s'
	DB	'et clipper to a window: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JIKBJCFH@Unable?5to?5create?5clipper?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@JIKBJCFH@Unable?5to?5create?5clipper?3?5?$CFs@ DB 'Unable to cr'
	DB	'eate clipper: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CCBKEALA@Unable?5to?5create?5secondary?5surf@
CONST	SEGMENT
??_C@_0CH@CCBKEALA@Unable?5to?5create?5secondary?5surf@ DB 'Unable to cre'
	DB	'ate secondary surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
CONST	SEGMENT
??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@ DB 'Unable to att'
	DB	'ach Zbuffer surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
CONST	SEGMENT
??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@ DB 'Unable to cre'
	DB	'ate Zbuffer surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NNDAPKJG@Unable?5to?5get?5backbuffer?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@NNDAPKJG@Unable?5to?5get?5backbuffer?3?5?$CFs@ DB 'Unable to ge'
	DB	't backbuffer: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PDIAAJFM@Unable?5to?5create?5primary?5surfac@
CONST	SEGMENT
??_C@_0CF@PDIAAJFM@Unable?5to?5create?5primary?5surfac@ DB 'Unable to cre'
	DB	'ate primary surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OLGMECBP@Unable?5to?5set?5display?5resolutio@
CONST	SEGMENT
??_C@_0CF@OLGMECBP@Unable?5to?5set?5display?5resolutio@ DB 'Unable to set'
	DB	' display resolution: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CBGPFDID@Unknown?5window?5status?5passed?5to@
CONST	SEGMENT
??_C@_0DH@CBGPFDID@Unknown?5window?5status?5passed?5to@ DB 'Unknown windo'
	DB	'w status passed to set_display_resolution', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@
CONST	SEGMENT
??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@ DB 'get_graphics_syst'
	DB	'em_initialised ()', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z@4JA DD 0480H ; `ddraw_set_display_resolution'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@POODLDHG@Unable?5to?5perform?5a?5windowed?5fl@
CONST	SEGMENT
??_C@_0DA@POODLDHG@Unable?5to?5perform?5a?5windowed?5fl@ DB 'Unable to pe'
	DB	'rform a windowed flip operation: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PKGNBJCK@Unable?5to?5perform?5surface?5flip?5@
CONST	SEGMENT
??_C@_0CM@PKGNBJCK@Unable?5to?5perform?5surface?5flip?5@ DB 'Unable to pe'
	DB	'rform surface flip (export): %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GFIMFAAF@Unable?5to?5unlock?5surface?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@GFIMFAAF@Unable?5to?5unlock?5surface?3?5?$CFs@ DB 'Unable to un'
	DB	'lock surface: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLKELJGF@memory@
CONST	SEGMENT
??_C@_06HLKELJGF@memory@ DB 'memory', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z@4JA DD 036bH ; `ddraw_unlock_surface'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DE@KEALBHFE@Locked?5surface?0?5but?5got?5a?5NULL?5@
CONST	SEGMENT
??_C@_0DE@KEALBHFE@Locked?5surface?0?5but?5got?5a?5NULL?5@ DB 'Locked sur'
	DB	'face, but got a NULL pointer..... odd....', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BHDPJNPH@failed?5to?5lock?5surface?3?5?$CFs@
CONST	SEGMENT
??_C@_0BL@BHDPJNPH@failed?5to?5lock?5surface?3?5?$CFs@ DB 'failed to lock'
	DB	' surface: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IEHBNKMH@Unable?5to?5restore?5surface?3?5?$CFs@
CONST	SEGMENT
??_C@_0BO@IEHBNKMH@Unable?5to?5restore?5surface?3?5?$CFs@ DB 'Unable to r'
	DB	'estore surface: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JLFNEMHA@Attempting?5restore@
CONST	SEGMENT
??_C@_0BD@JLFNEMHA@Attempting?5restore@ DB 'Attempting restore', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCNFOFLM@pitch@
CONST	SEGMENT
??_C@_05NCNFOFLM@pitch@ DB 'pitch', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PLHFFLIH@ptr@
CONST	SEGMENT
??_C@_03PLHFFLIH@ptr@ DB 'ptr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07IHELBNLD@surface@
CONST	SEGMENT
??_C@_07IHELBNLD@surface@ DB 'surface', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z@4JA DD 0320H ; `ddraw_lock_surface'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CK@KFBOGJHI@Released?5DirectDraw?5?9?5reference@
CONST	SEGMENT
??_C@_0CK@KFBOGJHI@Released?5DirectDraw?5?9?5reference@ DB 'Released Dire'
	DB	'ctDraw - references left: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PLBGCAHN@Unable?5to?5delete?5the?5zbuffer?5fr@
CONST	SEGMENT
??_C@_0DI@PLBGCAHN@Unable?5to?5delete?5the?5zbuffer?5fr@ DB 'Unable to de'
	DB	'lete the zbuffer from the render buffer: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CDNIDHOL@Unable?5to?5release?5d3d?3?5?$CFs@
CONST	SEGMENT
??_C@_0BK@CDNIDHOL@Unable?5to?5release?5d3d?3?5?$CFs@ DB 'Unable to relea'
	DB	'se d3d: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CADBAMKH@Unable?5to?5create?5direct?5draw?5ob@
CONST	SEGMENT
??_C@_0DF@CADBAMKH@Unable?5to?5create?5direct?5draw?5ob@ DB 'Unable to cr'
	DB	'eate direct draw object (export_mfd): %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KFJHLHGM@wrong?5adapternumber?5?$CIexport_mfd@
CONST	SEGMENT
??_C@_0CC@KFJHLHGM@wrong?5adapternumber?5?$CIexport_mfd@ DB 'wrong adapte'
	DB	'rnumber (export_mfd):', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FFJCEEIC@Unable?5to?5get?5a?5Direct3D?5driver@
CONST	SEGMENT
??_C@_0DB@FFJCEEIC@Unable?5to?5get?5a?5Direct3D?5driver@ DB 'Unable to ge'
	DB	't a Direct3D driver from DirectX: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MMJMEGL@Unable?5to?5enumerate?5display?5mod@
CONST	SEGMENT
??_C@_0CG@MMJMEGL@Unable?5to?5enumerate?5display?5mod@ DB 'Unable to enum'
	DB	'erate display modes: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MFCABGJH@Unable?5to?5create?5direct?5draw?5ob@
CONST	SEGMENT
??_C@_0CI@MFCABGJH@Unable?5to?5create?5direct?5draw?5ob@ DB 'Unable to cr'
	DB	'eate direct draw object: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MPLCJHGC@Unable?5to?5enumerate?5non?5display@
CONST	SEGMENT
??_C@_0DI@MPLCJHGC@Unable?5to?5enumerate?5non?5display@ DB 'Unable to enu'
	DB	'merate non display direct draw objects: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IFJFMBKL@Unable?5to?5enumerate?5direct?5draw@
CONST	SEGMENT
??_C@_0CM@IFJFMBKL@Unable?5to?5enumerate?5direct?5draw@ DB 'Unable to enu'
	DB	'merate direct draw objects: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CAEPONHO@?$CBgraphics_initialised@
CONST	SEGMENT
??_C@_0BG@CAEPONHO@?$CBgraphics_initialised@ DB '!graphics_initialised', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\dirdraw.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_graphics_system@@YGHPAU_GUID@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_graphics_system@@YGHPAU_GUID@@@Z@4JA DD 0e8H ; `initialise_graphics_system'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?copy_export_mfd@@YGXPAUSCREEN@@0@Z
_TEXT	SEGMENT
_dst_rect$ = -32					; size = 16
_src_rect$ = -16					; size = 16
_export_left$ = 8					; size = 4
_export_right$ = 12					; size = 4
?copy_export_mfd@@YGXPAUSCREEN@@0@Z PROC		; copy_export_mfd, COMDAT

; 3439 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3440 : 	RECT src_rect, dst_rect;
; 3441 : 
; 3442 : 	if(export_left)

  00009	83 7d 08 00	 cmp	 DWORD PTR _export_left$[ebp], 0
  0000d	74 6c		 je	 SHORT $LN2@copy_expor

; 3443 : 	{
; 3444 : 	src_rect.left=0;

  0000f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _src_rect$[ebp], 0

; 3445 : 	src_rect.top=0;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _src_rect$[ebp+4], 0

; 3446 : 	src_rect.right=export_left->width;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _export_left$[ebp]
  00020	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00024	89 4d f8	 mov	 DWORD PTR _src_rect$[ebp+8], ecx

; 3447 : 	src_rect.bottom=export_left->height;

  00027	8b 45 08	 mov	 eax, DWORD PTR _export_left$[ebp]
  0002a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0002e	89 4d fc	 mov	 DWORD PTR _src_rect$[ebp+12], ecx

; 3448 : 	copy_surface_to_surface(export_left->surface, src_rect, ddraw_export.lpBackBuffer,src_rect);	

  00031	83 ec 10	 sub	 esp, 16			; 00000010H
  00034	8b c4		 mov	 eax, esp
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _src_rect$[ebp]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
  0003b	8b 55 f4	 mov	 edx, DWORD PTR _src_rect$[ebp+4]
  0003e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _src_rect$[ebp+8]
  00044	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00047	8b 55 fc	 mov	 edx, DWORD PTR _src_rect$[ebp+12]
  0004a	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0004d	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+12
  00052	50		 push	 eax
  00053	83 ec 10	 sub	 esp, 16			; 00000010H
  00056	8b cc		 mov	 ecx, esp
  00058	8b 55 f0	 mov	 edx, DWORD PTR _src_rect$[ebp]
  0005b	89 11		 mov	 DWORD PTR [ecx], edx
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _src_rect$[ebp+4]
  00060	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00063	8b 55 f8	 mov	 edx, DWORD PTR _src_rect$[ebp+8]
  00066	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00069	8b 45 fc	 mov	 eax, DWORD PTR _src_rect$[ebp+12]
  0006c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _export_left$[ebp]
  00072	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?copy_surface_to_surface@@YGXPAUIDirectDrawSurface7@@UtagRECT@@01@Z ; copy_surface_to_surface
$LN2@copy_expor:

; 3449 : 	}
; 3450 : 
; 3451 : 	if(export_right)

  0007b	83 7d 0c 00	 cmp	 DWORD PTR _export_right$[ebp], 0
  0007f	0f 84 94 00 00
	00		 je	 $LN1@copy_expor

; 3452 : 	{
; 3453 : 	src_rect.left=0;

  00085	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _src_rect$[ebp], 0

; 3454 : 	src_rect.top=0;

  0008c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _src_rect$[ebp+4], 0

; 3455 : 	src_rect.right=export_right->width;

  00093	8b 45 0c	 mov	 eax, DWORD PTR _export_right$[ebp]
  00096	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  0009a	89 4d f8	 mov	 DWORD PTR _src_rect$[ebp+8], ecx

; 3456 : 	src_rect.bottom=export_right->height;

  0009d	8b 45 0c	 mov	 eax, DWORD PTR _export_right$[ebp]
  000a0	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000a4	89 4d fc	 mov	 DWORD PTR _src_rect$[ebp+12], ecx

; 3457 : 	dst_rect.left=272;

  000a7	c7 45 e0 10 01
	00 00		 mov	 DWORD PTR _dst_rect$[ebp], 272 ; 00000110H

; 3458 : 	dst_rect.top=0;

  000ae	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dst_rect$[ebp+4], 0

; 3459 : 	dst_rect.right=272+export_right->width;

  000b5	8b 45 0c	 mov	 eax, DWORD PTR _export_right$[ebp]
  000b8	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  000bc	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  000c2	89 4d e8	 mov	 DWORD PTR _dst_rect$[ebp+8], ecx

; 3460 : 	dst_rect.bottom=export_right->height;

  000c5	8b 45 0c	 mov	 eax, DWORD PTR _export_right$[ebp]
  000c8	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000cc	89 4d ec	 mov	 DWORD PTR _dst_rect$[ebp+12], ecx

; 3461 : 	copy_surface_to_surface(export_right->surface, src_rect, ddraw_export.lpBackBuffer,dst_rect);	

  000cf	83 ec 10	 sub	 esp, 16			; 00000010H
  000d2	8b c4		 mov	 eax, esp
  000d4	8b 4d e0	 mov	 ecx, DWORD PTR _dst_rect$[ebp]
  000d7	89 08		 mov	 DWORD PTR [eax], ecx
  000d9	8b 55 e4	 mov	 edx, DWORD PTR _dst_rect$[ebp+4]
  000dc	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000df	8b 4d e8	 mov	 ecx, DWORD PTR _dst_rect$[ebp+8]
  000e2	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000e5	8b 55 ec	 mov	 edx, DWORD PTR _dst_rect$[ebp+12]
  000e8	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  000eb	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+12
  000f0	50		 push	 eax
  000f1	83 ec 10	 sub	 esp, 16			; 00000010H
  000f4	8b cc		 mov	 ecx, esp
  000f6	8b 55 f0	 mov	 edx, DWORD PTR _src_rect$[ebp]
  000f9	89 11		 mov	 DWORD PTR [ecx], edx
  000fb	8b 45 f4	 mov	 eax, DWORD PTR _src_rect$[ebp+4]
  000fe	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00101	8b 55 f8	 mov	 edx, DWORD PTR _src_rect$[ebp+8]
  00104	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00107	8b 45 fc	 mov	 eax, DWORD PTR _src_rect$[ebp+12]
  0010a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0010d	8b 4d 0c	 mov	 ecx, DWORD PTR _export_right$[ebp]
  00110	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00113	52		 push	 edx
  00114	e8 00 00 00 00	 call	 ?copy_surface_to_surface@@YGXPAUIDirectDrawSurface7@@UtagRECT@@01@Z ; copy_surface_to_surface
$LN1@copy_expor:

; 3462 : 	}
; 3463 : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
?copy_export_mfd@@YGXPAUSCREEN@@0@Z ENDP		; copy_export_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?clear_export_mfd_screen@@YGXXZ
_TEXT	SEGMENT
_fx$ = -100						; size = 100
?clear_export_mfd_screen@@YGXXZ PROC			; clear_export_mfd_screen, COMDAT

; 3427 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3428 : 	DDBLTFX fx;
; 3429 : 
; 3430 : 	memset(&fx, 0, sizeof(fx));

  0000c	6a 64		 push	 100			; 00000064H
  0000e	6a 00		 push	 0
  00010	8d 45 9c	 lea	 eax, DWORD PTR _fx$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3431 : 	fx.dwSize = sizeof(fx);

  0001c	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _fx$[ebp], 100 ; 00000064H

; 3432 : 	fx.dwFillColor = 0;

  00023	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _fx$[ebp+80], 0

; 3433 : 
; 3434 : 	IDirectDrawSurface7_Blt ( ddraw_export.lpBackBuffer,NULL, NULL, NULL, DDBLT_COLORFILL|DDBLT_WAIT, &fx);

  0002a	8d 45 9c	 lea	 eax, DWORD PTR _fx$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 04 00 01	 push	 16778240		; 01000400H
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+12
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+12
  00046	50		 push	 eax
  00047	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0004a	ff d1		 call	 ecx

; 3435 : 	IDirectDrawSurface7_Blt ( ddraw_export.lpFrontBuffer,NULL, NULL, NULL, DDBLT_COLORFILL|DDBLT_WAIT, &fx);

  0004c	8d 45 9c	 lea	 eax, DWORD PTR _fx$[ebp]
  0004f	50		 push	 eax
  00050	68 00 04 00 01	 push	 16778240		; 01000400H
  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  00061	8b 11		 mov	 edx, DWORD PTR [ecx]
  00063	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  00068	50		 push	 eax
  00069	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0006c	ff d1		 call	 ecx

; 3436 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?clear_export_mfd_screen@@YGXXZ ENDP			; clear_export_mfd_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?copy_surface_to_surface@@YGXPAUIDirectDrawSurface7@@UtagRECT@@01@Z
_TEXT	SEGMENT
_dest_short$1 = -348					; size = 4
_dest$2 = -344						; size = 4
_source$3 = -340					; size = 4
_blue$4 = -336						; size = 4
_green$5 = -332						; size = 4
_red$6 = -328						; size = 4
_dst_surface_blue_shift$7 = -324			; size = 4
_dst_surface_green_shift$8 = -320			; size = 4
_dst_surface_red_shift$9 = -316				; size = 4
_src_surface_blue_shift$10 = -312			; size = 4
_src_surface_green_shift$11 = -308			; size = 4
_src_surface_red_shift$12 = -304			; size = 4
_dst_surface_blue_mask$13 = -300			; size = 4
_dst_surface_green_mask$14 = -296			; size = 4
_dst_surface_red_mask$15 = -292				; size = 4
_src_surface_blue_mask$16 = -288			; size = 4
_src_surface_green_mask$17 = -284			; size = 4
_src_surface_red_mask$18 = -280				; size = 4
_h$19 = -276						; size = 4
_w$20 = -272						; size = 4
_height$21 = -268					; size = 4
_width$22 = -264					; size = 4
_dest_screen$23 = -260					; size = 4
_source_screen$24 = -256				; size = 4
_ddrval$ = -252						; size = 4
_dest_ddsd$ = -248					; size = 124
_src_ddsd$ = -124					; size = 124
_src$ = 8						; size = 4
_src_rect$ = 12						; size = 16
_dst$ = 28						; size = 4
_dst_rect$ = 32						; size = 16
?copy_surface_to_surface@@YGXPAUIDirectDrawSurface7@@UtagRECT@@01@Z PROC ; copy_surface_to_surface, COMDAT

; 3290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3291 : 	DDSURFACEDESC2
; 3292 : 		src_ddsd,
; 3293 : 		dest_ddsd;
; 3294 : 	HRESULT ddrval;
; 3295 : 
; 3296 : 	//
; 3297 : 	// Lock the surface memory
; 3298 : 	//
; 3299 : 	src_ddsd.dwSize = sizeof ( src_ddsd );

  0000c	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _src_ddsd$[ebp], 124 ; 0000007cH

; 3300 : 	dest_ddsd.dwSize = sizeof ( dest_ddsd );

  00013	c7 85 08 ff ff
	ff 7c 00 00 00	 mov	 DWORD PTR _dest_ddsd$[ebp], 124 ; 0000007cH

; 3301 : 	ddrval=IDirectDrawSurface7_Lock ( dst, &dst_rect, &dest_ddsd, DDLOCK_NOSYSLOCK|DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL );

  0001d	6a 00		 push	 0
  0001f	68 01 08 00 00	 push	 2049			; 00000801H
  00024	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _dest_ddsd$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d 20	 lea	 ecx, DWORD PTR _dst_rect$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 1c	 mov	 edx, DWORD PTR _dst$[ebp]
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 4d 1c	 mov	 ecx, DWORD PTR _dst$[ebp]
  00037	51		 push	 ecx
  00038	8b 50 64	 mov	 edx, DWORD PTR [eax+100]
  0003b	ff d2		 call	 edx
  0003d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 3302 : 	if ( ddrval != DD_OK )

  00043	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  0004a	74 1a		 je	 SHORT $LN8@copy_surfa

; 3303 : 	{
; 3304 : 		debug_log ( "Unable to lock dst%s", get_ddraw_error_message ( ddrval ) );

  0004c	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00058	50		 push	 eax
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KFCPHEKI@Unable?5to?5lock?5dst?$CFs@
  0005e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00063	83 c4 08	 add	 esp, 8
$LN8@copy_surfa:

; 3305 : 	}
; 3306 : 	debug_log("size:dst %d %d",dest_ddsd.dwHeight,dest_ddsd.dwWidth);	

  00066	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _dest_ddsd$[ebp+12]
  0006c	50		 push	 eax
  0006d	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _dest_ddsd$[ebp+8]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LFGKBDPE@size?3dst?5?$CFd?5?$CFd@
  00079	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3307 : 	ddrval=IDirectDrawSurface7_Lock ( src, &src_rect, &src_ddsd, DDLOCK_NOSYSLOCK|DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL );

  00081	6a 00		 push	 0
  00083	68 01 08 00 00	 push	 2049			; 00000801H
  00088	8d 45 84	 lea	 eax, DWORD PTR _src_ddsd$[ebp]
  0008b	50		 push	 eax
  0008c	8d 4d 0c	 lea	 ecx, DWORD PTR _src_rect$[ebp]
  0008f	51		 push	 ecx
  00090	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00093	8b 02		 mov	 eax, DWORD PTR [edx]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  00098	51		 push	 ecx
  00099	8b 50 64	 mov	 edx, DWORD PTR [eax+100]
  0009c	ff d2		 call	 edx
  0009e	89 85 04 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 3308 : 	debug_log("size:src %d %d",src_ddsd.dwHeight,src_ddsd.dwWidth);	

  000a4	8b 45 90	 mov	 eax, DWORD PTR _src_ddsd$[ebp+12]
  000a7	50		 push	 eax
  000a8	8b 4d 8c	 mov	 ecx, DWORD PTR _src_ddsd$[ebp+8]
  000ab	51		 push	 ecx
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BBBNKFBE@size?3src?5?$CFd?5?$CFd@
  000b1	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3309 : 	if ( ddrval != DD_OK )

  000b9	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  000c0	74 1a		 je	 SHORT $LN9@copy_surfa

; 3310 : 	{
; 3311 : 		debug_log ( "Unable to lock src%s", get_ddraw_error_message ( ddrval ) );

  000c2	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ELFCAABN@Unable?5to?5lock?5src?$CFs@
  000d4	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000d9	83 c4 08	 add	 esp, 8
$LN9@copy_surfa:

; 3312 : 	}
; 3313 : 	{
; 3314 : 
; 3315 : 		unsigned char
; 3316 : 			*source_screen,
; 3317 : 			*dest_screen;
; 3318 : 
; 3319 : 		int
; 3320 : 			width,height, w, h;
; 3321 : 		unsigned int 
; 3322 : 		src_surface_red_mask,
; 3323 : 		src_surface_green_mask,
; 3324 : 		src_surface_blue_mask,
; 3325 : 		dst_surface_red_mask,
; 3326 : 		dst_surface_green_mask,
; 3327 : 		dst_surface_blue_mask;
; 3328 : 		int
; 3329 : 		src_surface_red_shift,
; 3330 : 		src_surface_green_shift,
; 3331 : 		src_surface_blue_shift,
; 3332 : 		dst_surface_red_shift,
; 3333 : 		dst_surface_green_shift,
; 3334 : 		dst_surface_blue_shift;
; 3335 : 		unsigned int
; 3336 : 		red,
; 3337 : 		green,
; 3338 : 		blue;
; 3339 : 
; 3340 : 		set_surface_shift_and_mask(src_ddsd.ddpfPixelFormat.dwRBitMask, (int*)&src_surface_red_mask, &src_surface_red_shift);

  000dc	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _src_surface_red_shift$12[ebp]
  000e2	50		 push	 eax
  000e3	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _src_surface_red_mask$18[ebp]
  000e9	51		 push	 ecx
  000ea	8b 55 dc	 mov	 edx, DWORD PTR _src_ddsd$[ebp+88]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 3341 : 		set_surface_shift_and_mask(src_ddsd.ddpfPixelFormat.dwGBitMask, (int*)&src_surface_green_mask, &src_surface_green_shift);

  000f3	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _src_surface_green_shift$11[ebp]
  000f9	50		 push	 eax
  000fa	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _src_surface_green_mask$17[ebp]
  00100	51		 push	 ecx
  00101	8b 55 e0	 mov	 edx, DWORD PTR _src_ddsd$[ebp+92]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 3342 : 		set_surface_shift_and_mask(src_ddsd.ddpfPixelFormat.dwBBitMask, (int*)&src_surface_blue_mask, &src_surface_blue_shift);

  0010a	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _src_surface_blue_shift$10[ebp]
  00110	50		 push	 eax
  00111	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _src_surface_blue_mask$16[ebp]
  00117	51		 push	 ecx
  00118	8b 55 e4	 mov	 edx, DWORD PTR _src_ddsd$[ebp+96]
  0011b	52		 push	 edx
  0011c	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 3343 : 
; 3344 : 		set_surface_shift_and_mask(dest_ddsd.ddpfPixelFormat.dwRBitMask, (int*)&dst_surface_red_mask, &dst_surface_red_shift);

  00121	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _dst_surface_red_shift$9[ebp]
  00127	50		 push	 eax
  00128	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _dst_surface_red_mask$15[ebp]
  0012e	51		 push	 ecx
  0012f	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _dest_ddsd$[ebp+88]
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 3345 : 		set_surface_shift_and_mask(dest_ddsd.ddpfPixelFormat.dwGBitMask, (int*)&dst_surface_green_mask, &dst_surface_green_shift);

  0013b	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _dst_surface_green_shift$8[ebp]
  00141	50		 push	 eax
  00142	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _dst_surface_green_mask$14[ebp]
  00148	51		 push	 ecx
  00149	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dest_ddsd$[ebp+92]
  0014f	52		 push	 edx
  00150	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 3346 : 		set_surface_shift_and_mask(dest_ddsd.ddpfPixelFormat.dwBBitMask, (int*)&dst_surface_blue_mask, &dst_surface_blue_shift);

  00155	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _dst_surface_blue_shift$7[ebp]
  0015b	50		 push	 eax
  0015c	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _dst_surface_blue_mask$13[ebp]
  00162	51		 push	 ecx
  00163	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dest_ddsd$[ebp+96]
  00169	52		 push	 edx
  0016a	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 3347 : 			
; 3348 : 		dst_surface_red_mask&=src_surface_red_mask;

  0016f	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_red_mask$15[ebp]
  00175	23 85 e8 fe ff
	ff		 and	 eax, DWORD PTR _src_surface_red_mask$18[ebp]
  0017b	89 85 dc fe ff
	ff		 mov	 DWORD PTR _dst_surface_red_mask$15[ebp], eax

; 3349 : 		dst_surface_green_mask&=src_surface_green_mask;

  00181	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_green_mask$14[ebp]
  00187	23 85 e4 fe ff
	ff		 and	 eax, DWORD PTR _src_surface_green_mask$17[ebp]
  0018d	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _dst_surface_green_mask$14[ebp], eax

; 3350 : 		dst_surface_blue_mask&=src_surface_blue_mask;

  00193	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_blue_mask$13[ebp]
  00199	23 85 e0 fe ff
	ff		 and	 eax, DWORD PTR _src_surface_blue_mask$16[ebp]
  0019f	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _dst_surface_blue_mask$13[ebp], eax

; 3351 : 		if(src_ddsd.ddpfPixelFormat.dwRGBBitCount==16) 

  001a5	83 7d d8 10	 cmp	 DWORD PTR _src_ddsd$[ebp+84], 16 ; 00000010H
  001a9	0f 85 ac 00 00
	00		 jne	 $LN10@copy_surfa

; 3352 : 		{
; 3353 : 			dst_surface_red_mask|=(dst_surface_red_mask>>16);

  001af	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_red_mask$15[ebp]
  001b5	c1 e8 10	 shr	 eax, 16			; 00000010H
  001b8	0b 85 dc fe ff
	ff		 or	 eax, DWORD PTR _dst_surface_red_mask$15[ebp]
  001be	89 85 dc fe ff
	ff		 mov	 DWORD PTR _dst_surface_red_mask$15[ebp], eax

; 3354 : 			dst_surface_green_mask|=(dst_surface_green_mask>>16);

  001c4	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_green_mask$14[ebp]
  001ca	c1 e8 10	 shr	 eax, 16			; 00000010H
  001cd	0b 85 d8 fe ff
	ff		 or	 eax, DWORD PTR _dst_surface_green_mask$14[ebp]
  001d3	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _dst_surface_green_mask$14[ebp], eax

; 3355 : 			dst_surface_blue_mask|=(dst_surface_blue_mask>>16);

  001d9	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_blue_mask$13[ebp]
  001df	c1 e8 10	 shr	 eax, 16			; 00000010H
  001e2	0b 85 d4 fe ff
	ff		 or	 eax, DWORD PTR _dst_surface_blue_mask$13[ebp]
  001e8	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _dst_surface_blue_mask$13[ebp], eax

; 3356 : 			src_surface_red_shift-=16; 

  001ee	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _src_surface_red_shift$12[ebp]
  001f4	83 e8 10	 sub	 eax, 16			; 00000010H
  001f7	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _src_surface_red_shift$12[ebp], eax

; 3357 : 			src_surface_green_shift-=16;

  001fd	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _src_surface_green_shift$11[ebp]
  00203	83 e8 10	 sub	 eax, 16			; 00000010H
  00206	89 85 cc fe ff
	ff		 mov	 DWORD PTR _src_surface_green_shift$11[ebp], eax

; 3358 : 			src_surface_blue_shift-=16;

  0020c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _src_surface_blue_shift$10[ebp]
  00212	83 e8 10	 sub	 eax, 16			; 00000010H
  00215	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _src_surface_blue_shift$10[ebp], eax

; 3359 : 			dst_surface_red_shift-=16; 

  0021b	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_red_shift$9[ebp]
  00221	83 e8 10	 sub	 eax, 16			; 00000010H
  00224	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _dst_surface_red_shift$9[ebp], eax

; 3360 : 			dst_surface_green_shift-=16;

  0022a	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_green_shift$8[ebp]
  00230	83 e8 10	 sub	 eax, 16			; 00000010H
  00233	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _dst_surface_green_shift$8[ebp], eax

; 3361 : 			dst_surface_blue_shift-=16;

  00239	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _dst_surface_blue_shift$7[ebp]
  0023f	83 e8 10	 sub	 eax, 16			; 00000010H
  00242	89 85 bc fe ff
	ff		 mov	 DWORD PTR _dst_surface_blue_shift$7[ebp], eax

; 3362 : 			w=(src_rect.right-src_rect.left)/2; 

  00248	8b 45 14	 mov	 eax, DWORD PTR _src_rect$[ebp+8]
  0024b	2b 45 0c	 sub	 eax, DWORD PTR _src_rect$[ebp]
  0024e	99		 cdq
  0024f	2b c2		 sub	 eax, edx
  00251	d1 f8		 sar	 eax, 1
  00253	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _w$20[ebp], eax

; 3363 : 		} 
; 3364 : 		else

  00259	eb 0c		 jmp	 SHORT $LN11@copy_surfa
$LN10@copy_surfa:

; 3365 : 		{
; 3366 : 			w=src_rect.right-src_rect.left;

  0025b	8b 45 14	 mov	 eax, DWORD PTR _src_rect$[ebp+8]
  0025e	2b 45 0c	 sub	 eax, DWORD PTR _src_rect$[ebp]
  00261	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _w$20[ebp], eax
$LN11@copy_surfa:

; 3367 : 		}
; 3368 : 		h=src_rect.bottom-src_rect.top;

  00267	8b 45 18	 mov	 eax, DWORD PTR _src_rect$[ebp+12]
  0026a	2b 45 10	 sub	 eax, DWORD PTR _src_rect$[ebp+4]
  0026d	89 85 ec fe ff
	ff		 mov	 DWORD PTR _h$19[ebp], eax

; 3369 : 
; 3370 : 		source_screen = ( unsigned char * ) src_ddsd.lpSurface;

  00273	8b 45 a8	 mov	 eax, DWORD PTR _src_ddsd$[ebp+36]
  00276	89 85 00 ff ff
	ff		 mov	 DWORD PTR _source_screen$24[ebp], eax

; 3371 : 		dest_screen = ( unsigned char * ) dest_ddsd.lpSurface;

  0027c	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _dest_ddsd$[ebp+36]
  00282	89 85 fc fe ff
	ff		 mov	 DWORD PTR _dest_screen$23[ebp], eax

; 3372 : 				
; 3373 : 		for ( height=0; height < h; height++ )

  00288	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _height$21[ebp], 0
  00292	eb 0f		 jmp	 SHORT $LN4@copy_surfa
$LN2@copy_surfa:
  00294	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _height$21[ebp]
  0029a	83 c0 01	 add	 eax, 1
  0029d	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _height$21[ebp], eax
$LN4@copy_surfa:
  002a3	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _height$21[ebp]
  002a9	3b 85 ec fe ff
	ff		 cmp	 eax, DWORD PTR _h$19[ebp]
  002af	0f 8d 97 01 00
	00		 jge	 $LN3@copy_surfa

; 3374 : 		{
; 3375 : 			unsigned int
; 3376 : 			*source,
; 3377 : 			*dest;
; 3378 : 			unsigned short int *dest_short;
; 3379 : 
; 3380 : 			source = ( unsigned int* ) source_screen;

  002b5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_screen$24[ebp]
  002bb	89 85 ac fe ff
	ff		 mov	 DWORD PTR _source$3[ebp], eax

; 3381 : 			dest = ( unsigned int* ) dest_screen;

  002c1	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dest_screen$23[ebp]
  002c7	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _dest$2[ebp], eax

; 3382 : 			dest_short = (unsigned short int*) dest_screen;

  002cd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dest_screen$23[ebp]
  002d3	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _dest_short$1[ebp], eax

; 3383 : 				
; 3384 : 			for(width=w;width>0;width--)

  002d9	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _w$20[ebp]
  002df	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _width$22[ebp], eax
  002e5	eb 0f		 jmp	 SHORT $LN7@copy_surfa
$LN5@copy_surfa:
  002e7	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _width$22[ebp]
  002ed	83 e8 01	 sub	 eax, 1
  002f0	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _width$22[ebp], eax
$LN7@copy_surfa:
  002f6	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _width$22[ebp], 0
  002fd	0f 8e 23 01 00
	00		 jle	 $LN6@copy_surfa

; 3385 : 			{
; 3386 : 				red=*source<<src_surface_red_shift;

  00303	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _source$3[ebp]
  00309	8b 10		 mov	 edx, DWORD PTR [eax]
  0030b	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _src_surface_red_shift$12[ebp]
  00311	d3 e2		 shl	 edx, cl
  00313	89 95 b8 fe ff
	ff		 mov	 DWORD PTR _red$6[ebp], edx

; 3387 : 				green=*source<<src_surface_green_shift;

  00319	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _source$3[ebp]
  0031f	8b 10		 mov	 edx, DWORD PTR [eax]
  00321	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _src_surface_green_shift$11[ebp]
  00327	d3 e2		 shl	 edx, cl
  00329	89 95 b4 fe ff
	ff		 mov	 DWORD PTR _green$5[ebp], edx

; 3388 : 				blue=*source<<src_surface_blue_shift;

  0032f	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _source$3[ebp]
  00335	8b 10		 mov	 edx, DWORD PTR [eax]
  00337	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _src_surface_blue_shift$10[ebp]
  0033d	d3 e2		 shl	 edx, cl
  0033f	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _blue$4[ebp], edx

; 3389 : 				red&=dst_surface_red_mask;

  00345	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _red$6[ebp]
  0034b	23 85 dc fe ff
	ff		 and	 eax, DWORD PTR _dst_surface_red_mask$15[ebp]
  00351	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _red$6[ebp], eax

; 3390 : 				green&=dst_surface_green_mask;

  00357	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _green$5[ebp]
  0035d	23 85 d8 fe ff
	ff		 and	 eax, DWORD PTR _dst_surface_green_mask$14[ebp]
  00363	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _green$5[ebp], eax

; 3391 : 				blue&=dst_surface_blue_mask;

  00369	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _blue$4[ebp]
  0036f	23 85 d4 fe ff
	ff		 and	 eax, DWORD PTR _dst_surface_blue_mask$13[ebp]
  00375	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _blue$4[ebp], eax

; 3392 : 				red>>=dst_surface_red_shift;

  0037b	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _red$6[ebp]
  00381	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _dst_surface_red_shift$9[ebp]
  00387	d3 e8		 shr	 eax, cl
  00389	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _red$6[ebp], eax

; 3393 : 				green>>=dst_surface_green_shift;

  0038f	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _green$5[ebp]
  00395	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _dst_surface_green_shift$8[ebp]
  0039b	d3 e8		 shr	 eax, cl
  0039d	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _green$5[ebp], eax

; 3394 : 				blue>>=dst_surface_blue_shift;

  003a3	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _blue$4[ebp]
  003a9	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _dst_surface_blue_shift$7[ebp]
  003af	d3 e8		 shr	 eax, cl
  003b1	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _blue$4[ebp], eax

; 3395 : 				
; 3396 : 				if(src_ddsd.ddpfPixelFormat.dwRGBBitCount==16)

  003b7	83 7d d8 10	 cmp	 DWORD PTR _src_ddsd$[ebp+84], 16 ; 00000010H
  003bb	75 2b		 jne	 SHORT $LN12@copy_surfa

; 3397 : 				{
; 3398 : 					*dest=(red|green|blue);

  003bd	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _red$6[ebp]
  003c3	0b 85 b4 fe ff
	ff		 or	 eax, DWORD PTR _green$5[ebp]
  003c9	0b 85 b0 fe ff
	ff		 or	 eax, DWORD PTR _blue$4[ebp]
  003cf	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _dest$2[ebp]
  003d5	89 01		 mov	 DWORD PTR [ecx], eax

; 3399 : 					dest++;

  003d7	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _dest$2[ebp]
  003dd	83 c0 04	 add	 eax, 4
  003e0	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _dest$2[ebp], eax

; 3400 : 				}
; 3401 : 				else

  003e6	eb 2a		 jmp	 SHORT $LN13@copy_surfa
$LN12@copy_surfa:

; 3402 : 				{
; 3403 : 					*dest_short=(red|green|blue);

  003e8	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _red$6[ebp]
  003ee	0b 85 b4 fe ff
	ff		 or	 eax, DWORD PTR _green$5[ebp]
  003f4	0b 85 b0 fe ff
	ff		 or	 eax, DWORD PTR _blue$4[ebp]
  003fa	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _dest_short$1[ebp]
  00400	66 89 01	 mov	 WORD PTR [ecx], ax

; 3404 : 					dest_short++;

  00403	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _dest_short$1[ebp]
  00409	83 c0 02	 add	 eax, 2
  0040c	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _dest_short$1[ebp], eax
$LN13@copy_surfa:

; 3405 : 				}
; 3406 : 				source++;

  00412	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _source$3[ebp]
  00418	83 c0 04	 add	 eax, 4
  0041b	89 85 ac fe ff
	ff		 mov	 DWORD PTR _source$3[ebp], eax

; 3407 : 			}

  00421	e9 c1 fe ff ff	 jmp	 $LN5@copy_surfa
$LN6@copy_surfa:

; 3408 : 			dest_screen += dest_ddsd.lPitch;

  00426	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dest_screen$23[ebp]
  0042c	03 85 18 ff ff
	ff		 add	 eax, DWORD PTR _dest_ddsd$[ebp+16]
  00432	89 85 fc fe ff
	ff		 mov	 DWORD PTR _dest_screen$23[ebp], eax

; 3409 : 			source_screen += src_ddsd.lPitch;

  00438	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_screen$24[ebp]
  0043e	03 45 94	 add	 eax, DWORD PTR _src_ddsd$[ebp+16]
  00441	89 85 00 ff ff
	ff		 mov	 DWORD PTR _source_screen$24[ebp], eax

; 3410 : 		}

  00447	e9 48 fe ff ff	 jmp	 $LN2@copy_surfa
$LN3@copy_surfa:

; 3411 : 	}
; 3412 : 
; 3413 : 	ddrval=IDirectDrawSurface7_Unlock ( dst, NULL );

  0044c	6a 00		 push	 0
  0044e	8b 45 1c	 mov	 eax, DWORD PTR _dst$[ebp]
  00451	8b 08		 mov	 ecx, DWORD PTR [eax]
  00453	8b 55 1c	 mov	 edx, DWORD PTR _dst$[ebp]
  00456	52		 push	 edx
  00457	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  0045d	ff d0		 call	 eax
  0045f	89 85 04 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 3414 : 	if ( ddrval != DD_OK )

  00465	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  0046c	74 1a		 je	 SHORT $LN14@copy_surfa

; 3415 : 	{
; 3416 : 		debug_log ( "Unable to unlock dst%s", get_ddraw_error_message ( ddrval ) );

  0046e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00474	50		 push	 eax
  00475	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0047a	50		 push	 eax
  0047b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DMFGOCDJ@Unable?5to?5unlock?5dst?$CFs@
  00480	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00485	83 c4 08	 add	 esp, 8
$LN14@copy_surfa:

; 3417 : 	}
; 3418 : 					
; 3419 : 	ddrval=IDirectDrawSurface7_Unlock ( src, NULL );

  00488	6a 00		 push	 0
  0048a	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0048d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048f	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00492	52		 push	 edx
  00493	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00499	ff d0		 call	 eax
  0049b	89 85 04 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 3420 : 	if ( ddrval != DD_OK )

  004a1	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  004a8	74 1a		 je	 SHORT $LN1@copy_surfa

; 3421 : 	{
; 3422 : 		debug_log ( "Unable to unlock src%s", get_ddraw_error_message ( ddrval ) );

  004aa	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  004b0	50		 push	 eax
  004b1	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  004b6	50		 push	 eax
  004b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NCCLJGIM@Unable?5to?5unlock?5src?$CFs@
  004bc	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  004c1	83 c4 08	 add	 esp, 8
$LN1@copy_surfa:

; 3423 : 	}
; 3424 : }

  004c4	5f		 pop	 edi
  004c5	5e		 pop	 esi
  004c6	5b		 pop	 ebx
  004c7	8b e5		 mov	 esp, ebp
  004c9	5d		 pop	 ebp
  004ca	c2 28 00	 ret	 40			; 00000028H
?copy_surface_to_surface@@YGXPAUIDirectDrawSurface7@@UtagRECT@@01@Z ENDP ; copy_surface_to_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_flip_surface_export@@YGHXZ
_TEXT	SEGMENT
tv93 = -208						; size = 4
tv64 = -208						; size = 4
_size$ = -140						; size = 4
_src$ = -136						; size = 16
_dst$ = -120						; size = 16
_ddbltfx$ = -104					; size = 100
_ddrval$ = -4						; size = 4
?ddraw_flip_surface_export@@YGHXZ PROC			; ddraw_flip_surface_export, COMDAT

; 912  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 913  : 	HRESULT	ddrval;
; 914  : 	DDBLTFX
; 915  : 		ddbltfx;
; 916  : 	RECT dst, src;
; 917  : 	int size;
; 918  : 	switch(get_global_gunship_type())

  0000c	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  00011	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00017	83 bd 30 ff ff
	ff 01		 cmp	 DWORD PTR tv64[ebp], 1
  0001e	74 14		 je	 SHORT $LN6@ddraw_flip
  00020	83 bd 30 ff ff
	ff 05		 cmp	 DWORD PTR tv64[ebp], 5
  00027	74 0b		 je	 SHORT $LN6@ddraw_flip
  00029	83 bd 30 ff ff
	ff 07		 cmp	 DWORD PTR tv64[ebp], 7
  00030	74 02		 je	 SHORT $LN6@ddraw_flip
  00032	eb 45		 jmp	 SHORT $LN7@ddraw_flip
$LN6@ddraw_flip:

; 919  : 	{
; 920  : 		case GUNSHIP_TYPE_HAVOC:
; 921  : 		case GUNSHIP_TYPE_KA50:
; 922  : 		case GUNSHIP_TYPE_HIND:
; 923  : 			dst.left=command_line_export_mfd_single_pos[0];

  00034	b8 04 00 00 00	 mov	 eax, 4
  00039	6b c8 00	 imul	 ecx, eax, 0
  0003c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_export_mfd_single_pos@@3PAHA[ecx]
  00042	89 55 88	 mov	 DWORD PTR _dst$[ebp], edx

; 924  : 			dst.top=command_line_export_mfd_single_pos[1];

  00045	b8 04 00 00 00	 mov	 eax, 4
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_export_mfd_single_pos@@3PAHA[eax]
  00053	89 4d 8c	 mov	 DWORD PTR _dst$[ebp+4], ecx

; 925  : 			dst.right=command_line_export_mfd_single_pos[2];

  00056	b8 04 00 00 00	 mov	 eax, 4
  0005b	d1 e0		 shl	 eax, 1
  0005d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_export_mfd_single_pos@@3PAHA[eax]
  00063	89 4d 90	 mov	 DWORD PTR _dst$[ebp+8], ecx

; 926  : 			dst.bottom=command_line_export_mfd_single_pos[3];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	6b c8 03	 imul	 ecx, eax, 3
  0006e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_export_mfd_single_pos@@3PAHA[ecx]
  00074	89 55 94	 mov	 DWORD PTR _dst$[ebp+12], edx

; 927  : 			break;

  00077	eb 43		 jmp	 SHORT $LN2@ddraw_flip
$LN7@ddraw_flip:

; 928  : 		case GUNSHIP_TYPE_COMANCHE:
; 929  : 		case GUNSHIP_TYPE_HOKUM:
; 930  : 		case GUNSHIP_TYPE_APACHE:
; 931  : 		case GUNSHIP_TYPE_BLACKHAWK:
; 932  : 		case GUNSHIP_TYPE_VIPER:
; 933  : 		case GUNSHIP_TYPE_KIOWA:
; 934  : 		default:
; 935  : 			dst.left=command_line_export_mfd_left_pos[0];

  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	6b c8 00	 imul	 ecx, eax, 0
  00081	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_export_mfd_left_pos@@3PAHA[ecx]
  00087	89 55 88	 mov	 DWORD PTR _dst$[ebp], edx

; 936  : 			dst.top=command_line_export_mfd_left_pos[1];

  0008a	b8 04 00 00 00	 mov	 eax, 4
  0008f	c1 e0 00	 shl	 eax, 0
  00092	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_export_mfd_left_pos@@3PAHA[eax]
  00098	89 4d 8c	 mov	 DWORD PTR _dst$[ebp+4], ecx

; 937  : 			dst.right=command_line_export_mfd_left_pos[2];

  0009b	b8 04 00 00 00	 mov	 eax, 4
  000a0	d1 e0		 shl	 eax, 1
  000a2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_export_mfd_left_pos@@3PAHA[eax]
  000a8	89 4d 90	 mov	 DWORD PTR _dst$[ebp+8], ecx

; 938  : 			dst.bottom=command_line_export_mfd_left_pos[3];

  000ab	b8 04 00 00 00	 mov	 eax, 4
  000b0	6b c8 03	 imul	 ecx, eax, 3
  000b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_export_mfd_left_pos@@3PAHA[ecx]
  000b9	89 55 94	 mov	 DWORD PTR _dst$[ebp+12], edx
$LN2@ddraw_flip:

; 939  : 	}
; 940  : // high-res mfds for all helis
; 941  : 	size=256;

  000bc	c7 85 74 ff ff
	ff 00 01 00 00	 mov	 DWORD PTR _size$[ebp], 256 ; 00000100H

; 942  : 	
; 943  : 	src.left=0;

  000c6	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _src$[ebp], 0

; 944  : 	src.top=0;

  000d0	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _src$[ebp+4], 0

; 945  : 	src.right=size;

  000da	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  000e0	89 45 80	 mov	 DWORD PTR _src$[ebp+8], eax

; 946  : 	src.bottom=size;

  000e3	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  000e9	89 45 84	 mov	 DWORD PTR _src$[ebp+12], eax

; 947  : 
; 948  : 	ddbltfx.dwSize = sizeof ( ddbltfx );

  000ec	c7 45 98 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp], 100 ; 00000064H

; 949  : 
; 950  : 	ddbltfx.dwROP = SRCCOPY;

  000f3	c7 45 a0 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$[ebp+8], 13369376 ; 00cc0020H

; 951  :        //	ddrval	= IDirectDrawSurface7_Flip ( ddraw2.lpFrontBuffer, NULL, DDFLIP_WAIT );
; 952  : 	ddrval = IDirectDrawSurface7_Blt ( ddraw_export.lpFrontBuffer, &dst, ddraw_export.lpBackBuffer, &src, 0, NULL);

  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _src$[ebp]
  00104	50		 push	 eax
  00105	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+12
  0010b	51		 push	 ecx
  0010c	8d 55 88	 lea	 edx, DWORD PTR _dst$[ebp]
  0010f	52		 push	 edx
  00110	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  00115	8b 08		 mov	 ecx, DWORD PTR [eax]
  00117	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  0011d	52		 push	 edx
  0011e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00121	ff d0		 call	 eax
  00123	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 953  : 
; 954  : 	switch(get_global_gunship_type())

  00126	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  0012b	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  00131	83 bd 30 ff ff
	ff 01		 cmp	 DWORD PTR tv93[ebp], 1
  00138	74 14		 je	 SHORT $LN8@ddraw_flip
  0013a	83 bd 30 ff ff
	ff 05		 cmp	 DWORD PTR tv93[ebp], 5
  00141	74 0b		 je	 SHORT $LN8@ddraw_flip
  00143	83 bd 30 ff ff
	ff 07		 cmp	 DWORD PTR tv93[ebp], 7
  0014a	74 02		 je	 SHORT $LN8@ddraw_flip
  0014c	eb 0a		 jmp	 SHORT $LN4@ddraw_flip
$LN8@ddraw_flip:

; 955  : 	{
; 956  : 		case GUNSHIP_TYPE_HAVOC:
; 957  : 		case GUNSHIP_TYPE_KA50:
; 958  : 		case GUNSHIP_TYPE_HIND:
; 959  : 			return TRUE;

  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	e9 c0 00 00 00	 jmp	 $LN1@ddraw_flip
$LN4@ddraw_flip:

; 960  : 	}
; 961  : 	dst.left=command_line_export_mfd_right_pos[0];

  00158	b8 04 00 00 00	 mov	 eax, 4
  0015d	6b c8 00	 imul	 ecx, eax, 0
  00160	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_export_mfd_right_pos@@3PAHA[ecx]
  00166	89 55 88	 mov	 DWORD PTR _dst$[ebp], edx

; 962  : 	dst.top=command_line_export_mfd_right_pos[1];

  00169	b8 04 00 00 00	 mov	 eax, 4
  0016e	c1 e0 00	 shl	 eax, 0
  00171	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_export_mfd_right_pos@@3PAHA[eax]
  00177	89 4d 8c	 mov	 DWORD PTR _dst$[ebp+4], ecx

; 963  : 	dst.right=command_line_export_mfd_right_pos[2];

  0017a	b8 04 00 00 00	 mov	 eax, 4
  0017f	d1 e0		 shl	 eax, 1
  00181	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_export_mfd_right_pos@@3PAHA[eax]
  00187	89 4d 90	 mov	 DWORD PTR _dst$[ebp+8], ecx

; 964  : 	dst.bottom=command_line_export_mfd_right_pos[3];

  0018a	b8 04 00 00 00	 mov	 eax, 4
  0018f	6b c8 03	 imul	 ecx, eax, 3
  00192	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?command_line_export_mfd_right_pos@@3PAHA[ecx]
  00198	89 55 94	 mov	 DWORD PTR _dst$[ebp+12], edx

; 965  : 	src.left=272;	

  0019b	c7 85 78 ff ff
	ff 10 01 00 00	 mov	 DWORD PTR _src$[ebp], 272 ; 00000110H

; 966  : 	src.top=0;

  001a5	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _src$[ebp+4], 0

; 967  : 	src.right=272+size;

  001af	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  001b5	05 10 01 00 00	 add	 eax, 272		; 00000110H
  001ba	89 45 80	 mov	 DWORD PTR _src$[ebp+8], eax

; 968  : 	src.bottom=size;

  001bd	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  001c3	89 45 84	 mov	 DWORD PTR _src$[ebp+12], eax

; 969  : 	ddrval = IDirectDrawSurface7_Blt ( ddraw_export.lpFrontBuffer, &dst, ddraw_export.lpBackBuffer, &src, 0, NULL);

  001c6	6a 00		 push	 0
  001c8	6a 00		 push	 0
  001ca	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _src$[ebp]
  001d0	50		 push	 eax
  001d1	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+12
  001d7	51		 push	 ecx
  001d8	8d 55 88	 lea	 edx, DWORD PTR _dst$[ebp]
  001db	52		 push	 edx
  001dc	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  001e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e3	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  001e9	52		 push	 edx
  001ea	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  001ed	ff d0		 call	 eax
  001ef	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 970  : 	if ( ddrval != DD_OK )

  001f2	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  001f6	74 1b		 je	 SHORT $LN9@ddraw_flip

; 971  : 	{
; 972  : 		debug_log ( "Unable to perform surface flip (export): %s", get_ddraw_error_message ( ddrval ) );

  001f8	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00201	50		 push	 eax
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@PKGNBJCK@Unable?5to?5perform?5surface?5flip?5@
  00207	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0020c	83 c4 08	 add	 esp, 8

; 973  : 		return ( FALSE );

  0020f	33 c0		 xor	 eax, eax
  00211	eb 05		 jmp	 SHORT $LN1@ddraw_flip
$LN9@ddraw_flip:

; 974  : 	}
; 975  : 	return TRUE;

  00213	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_flip:

; 976  : }

  00218	5f		 pop	 edi
  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c3		 ret	 0
?ddraw_flip_surface_export@@YGHXZ ENDP			; ddraw_flip_surface_export
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_initialise@@YGHPAU_GUID@@@Z
_TEXT	SEGMENT
_index$1 = -20						; size = 4
_device$2 = -16						; size = 4
_export_display_device$ = -12				; size = 4
_non_display_flag$ = -8					; size = 4
_ret$ = -4						; size = 4
_device_guid$ = 8					; size = 4
?ddraw_initialise@@YGHPAU_GUID@@@Z PROC			; ddraw_initialise, COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 343  : 	
; 344  : 	HRESULT
; 345  : 		ret;
; 346  : 
; 347  : 	int
; 348  : 		non_display_flag;
; 349  : 
; 350  : 	display_device *export_display_device;
; 351  : 
; 352  : 	ddraw.ddraw = NULL;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0

; 353  : 	ddraw_export.ddraw = NULL;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A, 0

; 354  : 
; 355  : 	ddraw.ddraw_valid = FALSE;

  0001d	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+44, 0

; 356  : 	ddraw_export.ddraw_valid = FALSE;

  00027	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+44, 0

; 357  : 
; 358  : 	number_of_display_devices = 0;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_display_devices@@3HA, 0 ; number_of_display_devices

; 359  : 
; 360  : 	display_devices = NULL;

  0003b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?display_devices@@3PAUDD_DISPLAY_DEVICE@@A, 0 ; display_devices

; 361  : 
; 362  : 	best_display_device = NULL;

  00045	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A, 0 ; best_display_device

; 363  : 
; 364  : 	current_display_device = NULL;

  0004f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A, 0 ; current_display_device

; 365  : 
; 366  : 	best_assessment = 0;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?best_assessment@@3HA, 0 ; best_assessment

; 367  : 
; 368  : 	//
; 369  : 	// Always enumerate the drivers
; 370  : 	//
; 371  : 
; 372  : 	non_display_flag = FALSE;

  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _non_display_flag$[ebp], 0

; 373  : 
; 374  : 	ret = DirectDrawEnumerateEx ( ddraw_enumerate_drivers, &non_display_flag, DDENUM_DETACHEDSECONDARYDEVICES|DDENUM_ATTACHEDSECONDARYDEVICES );// | DDENUM_NONDISPLAYDEVICES );

  0006a	6a 03		 push	 3
  0006c	8d 45 f8	 lea	 eax, DWORD PTR _non_display_flag$[ebp]
  0006f	50		 push	 eax
  00070	68 00 00 00 00	 push	 OFFSET ?ddraw_enumerate_drivers@@YGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z ; ddraw_enumerate_drivers
  00075	e8 00 00 00 00	 call	 _DirectDrawEnumerateExA@12
  0007a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 375  : 
; 376  : 	if ( FAILED ( ret ) )

  0007d	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00081	7d 28		 jge	 SHORT $LN7@ddraw_init

; 377  : 	{
; 378  : 
; 379  : 		debug_log ( "Unable to enumerate direct draw objects: %s", get_ddraw_error_message ( ret ) );

  00083	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0008c	50		 push	 eax
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@IFJFMBKL@Unable?5to?5enumerate?5direct?5draw@
  00092	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00097	83 c4 08	 add	 esp, 8

; 380  : 
; 381  : 		direct_draw_initialisation_error = DDRAW_INIT_UNABLE_TO_ENUMERATE;

  0009a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?direct_draw_initialisation_error@@3W4DDRAW_INITIALISATION_ERRORS@@A, 1 ; direct_draw_initialisation_error

; 382  : 
; 383  : 		return ( FALSE );

  000a4	33 c0		 xor	 eax, eax
  000a6	e9 24 03 00 00	 jmp	 $LN1@ddraw_init
$LN7@ddraw_init:

; 384  : 	}
; 385  : 
; 386  : 	//
; 387  : 	// Now enumerate any non-display devices
; 388  : 	//
; 389  : 
; 390  : 	non_display_flag = TRUE;

  000ab	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _non_display_flag$[ebp], 1

; 391  : 
; 392  : 	ret = DirectDrawEnumerateEx ( ddraw_enumerate_drivers, &non_display_flag, DDENUM_NONDISPLAYDEVICES );

  000b2	6a 04		 push	 4
  000b4	8d 45 f8	 lea	 eax, DWORD PTR _non_display_flag$[ebp]
  000b7	50		 push	 eax
  000b8	68 00 00 00 00	 push	 OFFSET ?ddraw_enumerate_drivers@@YGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z ; ddraw_enumerate_drivers
  000bd	e8 00 00 00 00	 call	 _DirectDrawEnumerateExA@12
  000c2	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 393  : 
; 394  : 	if ( FAILED ( ret ) )

  000c5	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000c9	7d 17		 jge	 SHORT $LN8@ddraw_init

; 395  : 	{
; 396  : 
; 397  : 		debug_log ( "Unable to enumerate non display direct draw objects: %s", get_ddraw_error_message ( ret ) );

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000d4	50		 push	 eax
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MPLCJHGC@Unable?5to?5enumerate?5non?5display@
  000da	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000df	83 c4 08	 add	 esp, 8
$LN8@ddraw_init:

; 398  : 	}
; 399  : 
; 400  : 	//
; 401  : 	//
; 402  : 	//
; 403  : 
; 404  : 	if ( ( device_guid ) && ( ddraw.use_full_screen ) /*&& ( !ddraw.use_software_driver )*/ )

  000e2	83 7d 08 00	 cmp	 DWORD PTR _device_guid$[ebp], 0
  000e6	0f 84 93 00 00
	00		 je	 $LN9@ddraw_init
  000ec	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+4, 0
  000f3	0f 84 86 00 00
	00		 je	 $LN9@ddraw_init

; 405  : 	{
; 406  : 
; 407  : 		display_device
; 408  : 			*device;
; 409  : 
; 410  : 		device = display_devices;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_devices@@3PAUDD_DISPLAY_DEVICE@@A ; display_devices
  000fe	89 45 f0	 mov	 DWORD PTR _device$2[ebp], eax
$LN2@ddraw_init:

; 411  : 
; 412  : 		while ( device )

  00101	83 7d f0 00	 cmp	 DWORD PTR _device$2[ebp], 0
  00105	74 73		 je	 SHORT $LN3@ddraw_init

; 413  : 		{
; 414  : 
; 415  : 			if ( !device->is_primary )

  00107	8b 45 f0	 mov	 eax, DWORD PTR _device$2[ebp]
  0010a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0010e	75 5f		 jne	 SHORT $LN11@ddraw_init

; 416  : 			{
; 417  : 
; 418  : 				if ( memcmp ( device_guid, &device->guid, sizeof ( GUID ) ) == 0 )

  00110	6a 10		 push	 16			; 00000010H
  00112	8b 45 f0	 mov	 eax, DWORD PTR _device$2[ebp]
  00115	83 c0 10	 add	 eax, 16			; 00000010H
  00118	50		 push	 eax
  00119	8b 4d 08	 mov	 ecx, DWORD PTR _device_guid$[ebp]
  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 _memcmp
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
  00125	85 c0		 test	 eax, eax
  00127	75 46		 jne	 SHORT $LN11@ddraw_init

; 419  : 				{
; 420  : 
; 421  : 					ret = DirectDrawCreateEx ( &device->guid, ( LPVOID * ) &ddraw.ddraw, GUID_PREFIX IID_IDirectDraw7, NULL );

  00129	6a 00		 push	 0
  0012b	68 00 00 00 00	 push	 OFFSET _IID_IDirectDraw7
  00130	68 00 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A ; ddraw
  00135	8b 45 f0	 mov	 eax, DWORD PTR _device$2[ebp]
  00138	83 c0 10	 add	 eax, 16			; 00000010H
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 _DirectDrawCreateEx@16
  00141	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 422  : 			
; 423  : 					if ( FAILED ( ret ) )

  00144	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00148	7d 19		 jge	 SHORT $LN13@ddraw_init

; 424  : 					{
; 425  : 			
; 426  : 						debug_log ( "Unable to create direct draw object: %s", get_ddraw_error_message ( ret ) );

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00153	50		 push	 eax
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@MFCABGJH@Unable?5to?5create?5direct?5draw?5ob@
  00159	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0015e	83 c4 08	 add	 esp, 8

; 427  : 					}
; 428  : 					else

  00161	eb 0c		 jmp	 SHORT $LN11@ddraw_init
$LN13@ddraw_init:

; 429  : 					{
; 430  : 		
; 431  : 						//
; 432  : 						// Set the current display device
; 433  : 						//
; 434  : 		
; 435  : 						current_display_device = best_display_device;

  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A ; best_display_device
  00168	a3 00 00 00 00	 mov	 DWORD PTR ?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A, eax ; current_display_device

; 436  : 
; 437  : 						break;

  0016d	eb 0b		 jmp	 SHORT $LN3@ddraw_init
$LN11@ddraw_init:

; 438  : 					}
; 439  : 				}
; 440  : 			}
; 441  : 
; 442  : 			device = device->succ;

  0016f	8b 45 f0	 mov	 eax, DWORD PTR _device$2[ebp]
  00172	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00175	89 4d f0	 mov	 DWORD PTR _device$2[ebp], ecx

; 443  : 		}

  00178	eb 87		 jmp	 SHORT $LN2@ddraw_init
$LN3@ddraw_init:

; 444  : 	}
; 445  : 	else if ( best_display_device )

  0017a	e9 90 00 00 00	 jmp	 $LN10@ddraw_init
$LN9@ddraw_init:
  0017f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A, 0 ; best_display_device
  00186	0f 84 83 00 00
	00		 je	 $LN10@ddraw_init

; 446  : 	{
; 447  : 
; 448  : 		//
; 449  : 		// If we're running fullscreen, or its the primary, we can use it.
; 450  : 		//
; 451  : 	
; 452  : 		if ( ( ( best_display_device->is_primary ) || ( ddraw.use_full_screen ) ) && ( device_guid /*!ddraw.use_software_driver*/ ) )

  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A ; best_display_device
  00191	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00195	75 09		 jne	 SHORT $LN17@ddraw_init
  00197	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+4, 0
  0019e	74 6f		 je	 SHORT $LN10@ddraw_init
$LN17@ddraw_init:
  001a0	83 7d 08 00	 cmp	 DWORD PTR _device_guid$[ebp], 0
  001a4	74 69		 je	 SHORT $LN10@ddraw_init

; 453  : 		{
; 454  : 
; 455  : 			if ( best_display_device->is_primary )

  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A ; best_display_device
  001ab	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001af	74 18		 je	 SHORT $LN18@ddraw_init

; 456  : 			{
; 457  : 	
; 458  : 				ret = DirectDrawCreateEx ( NULL, ( LPVOID * ) &ddraw.ddraw, GUID_PREFIX IID_IDirectDraw7, NULL );

  001b1	6a 00		 push	 0
  001b3	68 00 00 00 00	 push	 OFFSET _IID_IDirectDraw7
  001b8	68 00 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A ; ddraw
  001bd	6a 00		 push	 0
  001bf	e8 00 00 00 00	 call	 _DirectDrawCreateEx@16
  001c4	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 459  : 			}
; 460  : 			else

  001c7	eb 1d		 jmp	 SHORT $LN19@ddraw_init
$LN18@ddraw_init:

; 461  : 			{
; 462  : 
; 463  : 				ret = DirectDrawCreateEx ( &best_display_device->guid, ( LPVOID * ) &ddraw.ddraw, GUID_PREFIX IID_IDirectDraw7, NULL );

  001c9	6a 00		 push	 0
  001cb	68 00 00 00 00	 push	 OFFSET _IID_IDirectDraw7
  001d0	68 00 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A ; ddraw
  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A ; best_display_device
  001da	83 c0 10	 add	 eax, 16			; 00000010H
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _DirectDrawCreateEx@16
  001e3	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
$LN19@ddraw_init:

; 464  : 			}
; 465  : 	
; 466  : 			if ( FAILED ( ret ) )

  001e6	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  001ea	7d 19		 jge	 SHORT $LN20@ddraw_init

; 467  : 			{
; 468  : 
; 469  : 				debug_log ( "Unable to create direct draw object: %s", get_ddraw_error_message ( ret ) );

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  001f5	50		 push	 eax
  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@MFCABGJH@Unable?5to?5create?5direct?5draw?5ob@
  001fb	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00200	83 c4 08	 add	 esp, 8

; 470  : 			}
; 471  : 			else

  00203	eb 0a		 jmp	 SHORT $LN10@ddraw_init
$LN20@ddraw_init:

; 472  : 			{
; 473  : 
; 474  : 				//
; 475  : 				// Set the current display device
; 476  : 				//
; 477  : 
; 478  : 				current_display_device = best_display_device;

  00205	a1 00 00 00 00	 mov	 eax, DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A ; best_display_device
  0020a	a3 00 00 00 00	 mov	 DWORD PTR ?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A, eax ; current_display_device
$LN10@ddraw_init:

; 479  : 			}
; 480  : 		}
; 481  : 	}
; 482  : 
; 483  : 	//
; 484  : 	// If we've not managed to create direct draw yet, default to the primary display
; 485  : 	//
; 486  : 
; 487  : 	if ( !ddraw.ddraw )

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00216	75 44		 jne	 SHORT $LN22@ddraw_init

; 488  : 	{
; 489  : 
; 490  : 		ret = DirectDrawCreateEx ( NULL, ( LPVOID * ) &ddraw.ddraw, GUID_PREFIX IID_IDirectDraw7, NULL );

  00218	6a 00		 push	 0
  0021a	68 00 00 00 00	 push	 OFFSET _IID_IDirectDraw7
  0021f	68 00 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A ; ddraw
  00224	6a 00		 push	 0
  00226	e8 00 00 00 00	 call	 _DirectDrawCreateEx@16
  0022b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 491  : 
; 492  : 		if ( FAILED ( ret ) )

  0022e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00232	7d 28		 jge	 SHORT $LN22@ddraw_init

; 493  : 		{
; 494  : 
; 495  : 			debug_log ( "Unable to create direct draw object: %s", get_ddraw_error_message ( ret ) );

  00234	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0023d	50		 push	 eax
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@MFCABGJH@Unable?5to?5create?5direct?5draw?5ob@
  00243	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00248	83 c4 08	 add	 esp, 8

; 496  : 
; 497  : 			direct_draw_initialisation_error = DDRAW_INIT_UNABLE_TO_CREATE_DDRAW;

  0024b	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?direct_draw_initialisation_error@@3W4DDRAW_INITIALISATION_ERRORS@@A, 2 ; direct_draw_initialisation_error

; 498  : 
; 499  : 			return ( FALSE );

  00255	33 c0		 xor	 eax, eax
  00257	e9 73 01 00 00	 jmp	 $LN1@ddraw_init
$LN22@ddraw_init:

; 500  : 		}
; 501  : 	}
; 502  : 
; 503  : 	//
; 504  : 	// Enumerate the display modes this object is capable of
; 505  : 	//
; 506  : 
; 507  : 	number_display_modes = 0;

  0025c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_display_modes@@3HA, 0 ; number_display_modes

; 508  : 	
; 509  : 	ret = IDirectDraw7_EnumDisplayModes ( ddraw.ddraw, 0, NULL, NULL, ddraw_enum_modes );

  00266	68 00 00 00 00	 push	 OFFSET ?ddraw_enum_modes@@YGJPAU_DDSURFACEDESC2@@PAX@Z ; ddraw_enum_modes
  0026b	6a 00		 push	 0
  0026d	6a 00		 push	 0
  0026f	6a 00		 push	 0
  00271	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00276	8b 08		 mov	 ecx, DWORD PTR [eax]
  00278	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0027e	52		 push	 edx
  0027f	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00282	ff d0		 call	 eax
  00284	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 510  : 
; 511  : 	if ( FAILED ( ret ) )

  00287	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0028b	7d 28		 jge	 SHORT $LN24@ddraw_init

; 512  : 	{
; 513  : 
; 514  : 		debug_log ( "Unable to enumerate display modes: %s", get_ddraw_error_message ( ret ) );

  0028d	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00290	50		 push	 eax
  00291	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00296	50		 push	 eax
  00297	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MMJMEGL@Unable?5to?5enumerate?5display?5mod@
  0029c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  002a1	83 c4 08	 add	 esp, 8

; 515  : 
; 516  : 		direct_draw_initialisation_error = DDRAW_INIT_UNABLE_TO_ENUMERATE_DISPLAY_MODES;

  002a4	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?direct_draw_initialisation_error@@3W4DDRAW_INITIALISATION_ERRORS@@A, 4 ; direct_draw_initialisation_error

; 517  : 
; 518  : 		return ( FALSE );

  002ae	33 c0		 xor	 eax, eax
  002b0	e9 1a 01 00 00	 jmp	 $LN1@ddraw_init
$LN24@ddraw_init:

; 519  : 	}
; 520  : 
; 521  : 	//
; 522  : 	// Check the device has the 3d capabilities needed
; 523  : 	//
; 524  : 
; 525  : 	if ( !ddraw_validate_basic_3d_properties () )

  002b5	e8 00 00 00 00	 call	 ?ddraw_validate_basic_3d_properties@@YGHXZ ; ddraw_validate_basic_3d_properties
  002ba	85 c0		 test	 eax, eax
  002bc	75 11		 jne	 SHORT $LN25@ddraw_init

; 526  : 	{
; 527  : 
; 528  : 		direct_draw_initialisation_error = DDRAW_INIT_NO_3D_CARD;

  002be	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?direct_draw_initialisation_error@@3W4DDRAW_INITIALISATION_ERRORS@@A, 5 ; direct_draw_initialisation_error

; 529  : 
; 530  : 		return ( FALSE );

  002c8	33 c0		 xor	 eax, eax
  002ca	e9 00 01 00 00	 jmp	 $LN1@ddraw_init
$LN25@ddraw_init:

; 531  : 	}
; 532  : 
; 533  : 	//
; 534  : 	// Get a d3d driver interface
; 535  : 	//
; 536  : 
; 537  : 	ret = IDirectDraw7_QueryInterface ( ddraw.ddraw, GUID_PREFIX IID_IDirect3D7, ( LPVOID FAR * ) &d3d_data.d3d );

  002cf	68 00 00 00 00	 push	 OFFSET ?d3d_data@@3UDIRECT_3D_DATA@@A ; d3d_data
  002d4	68 00 00 00 00	 push	 OFFSET _IID_IDirect3D7
  002d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  002de	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  002e6	52		 push	 edx
  002e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  002e9	ff d0		 call	 eax
  002eb	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 538  : 
; 539  : 	if ( ret != DD_OK )

  002ee	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  002f2	74 1e		 je	 SHORT $LN26@ddraw_init

; 540  : 	{
; 541  : 
; 542  : 		debug_fatal ( "Unable to get a Direct3D driver from DirectX: %s", get_ddraw_error_message ( ret ) );

  002f4	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  002fd	50		 push	 eax
  002fe	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@FFJCEEIC@Unable?5to?5get?5a?5Direct3D?5driver@
  00303	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00308	83 c4 08	 add	 esp, 8

; 543  : 
; 544  : 		return ( FALSE );

  0030b	33 c0		 xor	 eax, eax
  0030d	e9 bd 00 00 00	 jmp	 $LN1@ddraw_init
$LN26@ddraw_init:

; 545  : 	}
; 546  : 
; 547  : 	//
; 548  : 	// Initialise the graphics modes availability
; 549  : 	//
; 550  : 
; 551  : 	initialise_graphics_resolution_modes ();

  00312	e8 00 00 00 00	 call	 ?initialise_graphics_resolution_modes@@YGXXZ ; initialise_graphics_resolution_modes

; 552  : 
; 553  : 	//
; 554  : 	// Get the memory configuration of the device
; 555  : 	//
; 556  : 
; 557  : 	set_ddraw_memory_config ();

  00317	e8 00 00 00 00	 call	 ?set_ddraw_memory_config@@YGXXZ ; set_ddraw_memory_config

; 558  : 
; 559  : 	ddraw.ddraw_valid = TRUE;

  0031c	c7 05 2c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+44, 1

; 560  : 	
; 561  : 	if(command_line_export_mfd)

  00326	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  0032d	0f 84 97 00 00
	00		 je	 $LN27@ddraw_init

; 562  : 	{
; 563  : 		int index;
; 564  : 		export_display_device=display_devices;

  00333	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_devices@@3PAUDD_DISPLAY_DEVICE@@A ; display_devices
  00338	89 45 f4	 mov	 DWORD PTR _export_display_device$[ebp], eax

; 565  : 		for(index=0;index<command_line_export_mfd_adapter;index++)

  0033b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _index$1[ebp], 0
  00342	eb 09		 jmp	 SHORT $LN6@ddraw_init
$LN4@ddraw_init:
  00344	8b 45 ec	 mov	 eax, DWORD PTR _index$1[ebp]
  00347	83 c0 01	 add	 eax, 1
  0034a	89 45 ec	 mov	 DWORD PTR _index$1[ebp], eax
$LN6@ddraw_init:
  0034d	8b 45 ec	 mov	 eax, DWORD PTR _index$1[ebp]
  00350	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?command_line_export_mfd_adapter@@3HA ; command_line_export_mfd_adapter
  00356	7d 22		 jge	 SHORT $LN5@ddraw_init

; 566  : 		{
; 567  : 			export_display_device=export_display_device->succ;

  00358	8b 45 f4	 mov	 eax, DWORD PTR _export_display_device$[ebp]
  0035b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0035e	89 4d f4	 mov	 DWORD PTR _export_display_device$[ebp], ecx

; 568  : 			if(!export_display_device)

  00361	83 7d f4 00	 cmp	 DWORD PTR _export_display_device$[ebp], 0
  00365	75 11		 jne	 SHORT $LN28@ddraw_init

; 569  : 			{
; 570  : 				debug_log ( "wrong adapternumber (export_mfd):");

  00367	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KFJHLHGM@wrong?5adapternumber?5?$CIexport_mfd@
  0036c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00371	83 c4 04	 add	 esp, 4

; 571  : 				return (FALSE);

  00374	33 c0		 xor	 eax, eax
  00376	eb 57		 jmp	 SHORT $LN1@ddraw_init
$LN28@ddraw_init:

; 572  : 			}
; 573  : 		}

  00378	eb ca		 jmp	 SHORT $LN4@ddraw_init
$LN5@ddraw_init:

; 574  : 
; 575  : 		ret = DirectDrawCreateEx ( &export_display_device->guid, ( LPVOID * ) &ddraw_export.ddraw, GUID_PREFIX IID_IDirectDraw7, NULL );

  0037a	6a 00		 push	 0
  0037c	68 00 00 00 00	 push	 OFFSET _IID_IDirectDraw7
  00381	68 00 00 00 00	 push	 OFFSET ?ddraw_export@@3Udirect_draw_data@@A ; ddraw_export
  00386	8b 45 f4	 mov	 eax, DWORD PTR _export_display_device$[ebp]
  00389	83 c0 10	 add	 eax, 16			; 00000010H
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 _DirectDrawCreateEx@16
  00392	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 576  : 		if ( FAILED ( ret ) )

  00395	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00399	7d 25		 jge	 SHORT $LN29@ddraw_init

; 577  : 		{
; 578  : 			debug_log ( "Unable to create direct draw object (export_mfd): %s", get_ddraw_error_message ( ret ) );

  0039b	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  003a4	50		 push	 eax
  003a5	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@CADBAMKH@Unable?5to?5create?5direct?5draw?5ob@
  003aa	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  003af	83 c4 08	 add	 esp, 8

; 579  : 			direct_draw_initialisation_error = DDRAW_INIT_UNABLE_TO_CREATE_DDRAW;

  003b2	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?direct_draw_initialisation_error@@3W4DDRAW_INITIALISATION_ERRORS@@A, 2 ; direct_draw_initialisation_error

; 580  : 			return (FALSE);

  003bc	33 c0		 xor	 eax, eax
  003be	eb 0f		 jmp	 SHORT $LN1@ddraw_init
$LN29@ddraw_init:

; 581  : 		}
; 582  : 		ddraw_export.ddraw_valid=TRUE;

  003c0	c7 05 2c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+44, 1
$LN27@ddraw_init:

; 583  : 		
; 584  : 	}	
; 585  : 
; 586  : 	return ( TRUE );

  003ca	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_init:

; 587  : }

  003cf	5f		 pop	 edi
  003d0	5e		 pop	 esi
  003d1	5b		 pop	 ebx
  003d2	8b e5		 mov	 esp, ebp
  003d4	5d		 pop	 ebp
  003d5	c2 04 00	 ret	 4
?ddraw_initialise@@YGHPAU_GUID@@@Z ENDP			; ddraw_initialise
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?save_system_palette@@YGXXZ
_TEXT	SEGMENT
_my_dc$ = -4						; size = 4
?save_system_palette@@YGXXZ PROC			; save_system_palette, COMDAT

; 3013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3014 : 	HDC
; 3015 : 		my_dc;
; 3016 : 	
; 3017 : 
; 3018 : 	my_dc = GetDC ( application_window );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00015	89 45 fc	 mov	 DWORD PTR _my_dc$[ebp], eax

; 3019 : 	
; 3020 : 	GetSystemPaletteEntries ( my_dc, 0, (1 << 8), system_colour_table );

  00018	68 00 00 00 00	 push	 OFFSET ?system_colour_table@@3PAUtagPALETTEENTRY@@A ; system_colour_table
  0001d	68 00 01 00 00	 push	 256			; 00000100H
  00022	6a 00		 push	 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _my_dc$[ebp]
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemPaletteEntries@16

; 3021 : 
; 3022 : 	GetSystemPaletteEntries ( my_dc, 0, (1 << 8), application_colour_table );

  0002e	68 00 00 00 00	 push	 OFFSET ?application_colour_table@@3PAUtagPALETTEENTRY@@A ; application_colour_table
  00033	68 00 01 00 00	 push	 256			; 00000100H
  00038	6a 00		 push	 0
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _my_dc$[ebp]
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemPaletteEntries@16

; 3023 : 	
; 3024 : 	ReleaseDC ( application_window, my_dc);

  00044	8b 45 fc	 mov	 eax, DWORD PTR _my_dc$[ebp]
  00047	50		 push	 eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0004e	51		 push	 ecx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 3025 : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?save_system_palette@@YGXXZ ENDP			; save_system_palette
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_enumerate_zbuffer_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z
_TEXT	SEGMENT
_format$ = 8						; size = 4
_choice$ = 12						; size = 4
?ddraw_enumerate_zbuffer_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z PROC ; ddraw_enumerate_zbuffer_formats, COMDAT

; 2383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2384 : 
; 2385 : 	if ( format->dwFlags == DDPF_ZBUFFER )

  00009	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0000c	81 78 04 00 04
	00 00		 cmp	 DWORD PTR [eax+4], 1024	; 00000400H
  00013	75 16		 jne	 SHORT $LN2@ddraw_enum

; 2386 : 	{
; 2387 : 
; 2388 : 		memcpy ( choice, format, sizeof ( DDPIXELFORMAT ) );

  00015	6a 20		 push	 32			; 00000020H
  00017	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _choice$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _memcpy
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2389 : 
; 2390 : 		return ( D3DENUMRET_CANCEL );

  00027	33 c0		 xor	 eax, eax
  00029	eb 05		 jmp	 SHORT $LN1@ddraw_enum
$LN2@ddraw_enum:

; 2391 : 	}
; 2392 : 
; 2393 : 	return ( D3DENUMRET_OK );

  0002b	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_enum:

; 2394 : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?ddraw_enumerate_zbuffer_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z ENDP ; ddraw_enumerate_zbuffer_formats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_enumerate_drivers@@YGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z
_TEXT	SEGMENT
_assessment$1 = -780					; size = 4
_device$2 = -776					; size = 4
_nondisplay$ = -772					; size = 4
_HELCaps$ = -768					; size = 380
_DriverCaps$ = -388					; size = 380
_ddrval$ = -8						; size = 4
_lpDD$ = -4						; size = 4
_lpGUID$ = 8						; size = 4
_lpDriverDesc$ = 12					; size = 4
_lpDriverName$ = 16					; size = 4
_lpContext$ = 20					; size = 4
_hm$ = 24						; size = 4
?ddraw_enumerate_drivers@@YGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z PROC ; ddraw_enumerate_drivers, COMDAT

; 2754 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 03 00
	00		 sub	 esp, 908		; 0000038cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2755 : 
; 2756 : 	LPDIRECTDRAWX
; 2757 : 		lpDD;
; 2758 : 	
; 2759 : 	HRESULT
; 2760 : 		ddrval;
; 2761 : 	
; 2762 : 	DDCAPS
; 2763 : 		DriverCaps,
; 2764 : 		HELCaps;
; 2765 : 
; 2766 : 	int
; 2767 : 		nondisplay;
; 2768 : 
; 2769 : 	nondisplay = *( ( int * ) lpContext );

  0000c	8b 45 14	 mov	 eax, DWORD PTR _lpContext$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 8d fc fc ff
	ff		 mov	 DWORD PTR _nondisplay$[ebp], ecx

; 2770 : 
; 2771 : 	if ( nondisplay )

  00017	83 bd fc fc ff
	ff 00		 cmp	 DWORD PTR _nondisplay$[ebp], 0
  0001e	74 10		 je	 SHORT $LN2@ddraw_enum

; 2772 : 	{
; 2773 : 
; 2774 : 		if ( !lpGUID )

  00020	83 7d 08 00	 cmp	 DWORD PTR _lpGUID$[ebp], 0
  00024	75 0a		 jne	 SHORT $LN2@ddraw_enum

; 2775 : 		{
; 2776 : 
; 2777 : 			return ( DDENUMRET_OK );

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	e9 02 02 00 00	 jmp	 $LN1@ddraw_enum
$LN2@ddraw_enum:

; 2778 : 		}
; 2779 : 	}
; 2780 : 
; 2781 : 	//
; 2782 : 	// Create the driver
; 2783 : 	//
; 2784 : 
; 2785 : 	ddrval = DirectDrawCreateEx ( lpGUID, ( LPVOID * ) &lpDD, GUID_PREFIX IID_IDirectDraw7, NULL );

  00030	6a 00		 push	 0
  00032	68 00 00 00 00	 push	 OFFSET _IID_IDirectDraw7
  00037	8d 45 fc	 lea	 eax, DWORD PTR _lpDD$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _lpGUID$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _DirectDrawCreateEx@16
  00044	89 45 f8	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2786 : 
; 2787 : 	if ( ddrval != DD_OK )

  00047	83 7d f8 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  0004b	74 0a		 je	 SHORT $LN4@ddraw_enum

; 2788 : 	{
; 2789 : 
; 2790 : 		return ( DDENUMRET_OK );

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	e9 db 01 00 00	 jmp	 $LN1@ddraw_enum
$LN4@ddraw_enum:

; 2791 : 	}
; 2792 : 
; 2793 : 	//
; 2794 : 	// Get the capabilities of the driver. If any call fails, just carry on to the next driver
; 2795 : 	//
; 2796 : 
; 2797 : 	memset( &DriverCaps, 0, sizeof ( DDCAPS ) );

  00057	68 7c 01 00 00	 push	 380			; 0000017cH
  0005c	6a 00		 push	 0
  0005e	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _DriverCaps$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _memset
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2798 : 
; 2799 : 	DriverCaps.dwSize = sizeof ( DDCAPS );

  0006d	c7 85 7c fe ff
	ff 7c 01 00 00	 mov	 DWORD PTR _DriverCaps$[ebp], 380 ; 0000017cH

; 2800 : 
; 2801 : 	memset( &HELCaps, 0, sizeof ( DDCAPS ) );

  00077	68 7c 01 00 00	 push	 380			; 0000017cH
  0007c	6a 00		 push	 0
  0007e	8d 85 00 fd ff
	ff		 lea	 eax, DWORD PTR _HELCaps$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _memset
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2802 : 
; 2803 : 	HELCaps.dwSize = sizeof ( DDCAPS );

  0008d	c7 85 00 fd ff
	ff 7c 01 00 00	 mov	 DWORD PTR _HELCaps$[ebp], 380 ; 0000017cH

; 2804 : 
; 2805 : 	ddrval = IDirectDraw7_GetCaps ( lpDD, &DriverCaps, &HELCaps );

  00097	8d 85 00 fd ff
	ff		 lea	 eax, DWORD PTR _HELCaps$[ebp]
  0009d	50		 push	 eax
  0009e	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _DriverCaps$[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _lpDD$[ebp]
  000a8	8b 02		 mov	 eax, DWORD PTR [edx]
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _lpDD$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  000b1	ff d2		 call	 edx
  000b3	89 45 f8	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2806 : 
; 2807 : 	if ( ddrval != DD_OK )

  000b6	83 7d f8 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  000ba	74 18		 je	 SHORT $LN5@ddraw_enum

; 2808 : 	{
; 2809 : 
; 2810 : 		IDirectDraw7_Release ( lpDD );

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _lpDD$[ebp]
  000bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c1	8b 55 fc	 mov	 edx, DWORD PTR _lpDD$[ebp]
  000c4	52		 push	 edx
  000c5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c8	ff d0		 call	 eax

; 2811 : 
; 2812 : 		return ( DDENUMRET_OK );

  000ca	b8 01 00 00 00	 mov	 eax, 1
  000cf	e9 5e 01 00 00	 jmp	 $LN1@ddraw_enum
$LN5@ddraw_enum:

; 2813 : 	}
; 2814 : 
; 2815 : // mue 070223 enumerate all  devices. 3D capabilities not necessary for mfd export?
; 2816 : 	if ( DriverCaps.dwCaps & DDCAPS_3D || command_line_export_mfd)

  000d4	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _DriverCaps$[ebp+4]
  000da	83 e0 01	 and	 eax, 1
  000dd	75 0d		 jne	 SHORT $LN7@ddraw_enum
  000df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  000e6	0f 84 33 01 00
	00		 je	 $LN6@ddraw_enum
$LN7@ddraw_enum:

; 2817 : 	{
; 2818 : 
; 2819 : 		display_device
; 2820 : 			*device;
; 2821 : 	
; 2822 : 		int
; 2823 : 			assessment;
; 2824 : 
; 2825 : 		//
; 2826 : 		// Add this driver to the list
; 2827 : 		//
; 2828 : 	
; 2829 : 		device = ( display_device * ) safe_malloc ( sizeof ( display_device ) );

  000ec	6a 24		 push	 36			; 00000024H
  000ee	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000f3	89 85 f8 fc ff
	ff		 mov	 DWORD PTR _device$2[ebp], eax

; 2830 : 	
; 2831 : 		device->succ = display_devices;

  000f9	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _device$2[ebp]
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?display_devices@@3PAUDD_DISPLAY_DEVICE@@A ; display_devices
  00105	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 2832 : 	
; 2833 : 		device->name = ( char *) safe_malloc ( strlen ( lpDriverDesc ) + 1 );

  00108	8b 45 0c	 mov	 eax, DWORD PTR _lpDriverDesc$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _strlen
  00111	83 c4 04	 add	 esp, 4
  00114	83 c0 01	 add	 eax, 1
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0011d	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _device$2[ebp]
  00123	89 01		 mov	 DWORD PTR [ecx], eax

; 2834 : 	
; 2835 : 		strcpy ( device->name, lpDriverDesc );

  00125	8b 45 0c	 mov	 eax, DWORD PTR _lpDriverDesc$[ebp]
  00128	50		 push	 eax
  00129	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _device$2[ebp]
  0012f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 _strcpy
  00137	83 c4 08	 add	 esp, 8

; 2836 : 	
; 2837 : 		if ( lpGUID )

  0013a	83 7d 08 00	 cmp	 DWORD PTR _lpGUID$[ebp], 0
  0013e	74 27		 je	 SHORT $LN8@ddraw_enum

; 2838 : 		{
; 2839 : 	
; 2840 : 			device->is_primary = FALSE;

  00140	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _device$2[ebp]
  00146	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 2841 : 	
; 2842 : 			memcpy ( &device->guid, lpGUID, sizeof ( GUID ) );

  0014d	6a 10		 push	 16			; 00000010H
  0014f	8b 45 08	 mov	 eax, DWORD PTR _lpGUID$[ebp]
  00152	50		 push	 eax
  00153	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _device$2[ebp]
  00159	83 c1 10	 add	 ecx, 16			; 00000010H
  0015c	51		 push	 ecx
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2843 : 		}
; 2844 : 		else

  00165	eb 0d		 jmp	 SHORT $LN9@ddraw_enum
$LN8@ddraw_enum:

; 2845 : 		{
; 2846 : 	
; 2847 : 			device->is_primary = TRUE;

  00167	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _device$2[ebp]
  0016d	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1
$LN9@ddraw_enum:

; 2848 : 		}
; 2849 : 
; 2850 : 		device->is_nondisplay = *( ( int * ) lpContext );

  00174	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _device$2[ebp]
  0017a	8b 4d 14	 mov	 ecx, DWORD PTR _lpContext$[ebp]
  0017d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017f	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 2851 : 
; 2852 : 		display_devices = device;

  00182	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _device$2[ebp]
  00188	a3 00 00 00 00	 mov	 DWORD PTR ?display_devices@@3PAUDD_DISPLAY_DEVICE@@A, eax ; display_devices

; 2853 : 	
; 2854 : 		number_of_display_devices++;

  0018d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_display_devices@@3HA ; number_of_display_devices
  00192	83 c0 01	 add	 eax, 1
  00195	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_display_devices@@3HA, eax ; number_of_display_devices

; 2855 : 	
; 2856 : 		//
; 2857 : 		// Assess the drivers 3D capabilities
; 2858 : 		//
; 2859 : 
; 2860 : 		assessment = ddraw_internal_assess_3d_capabilities ( lpDD );

  0019a	8b 45 fc	 mov	 eax, DWORD PTR _lpDD$[ebp]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?ddraw_internal_assess_3d_capabilities@@YGHPAUIDirectDraw7@@@Z ; ddraw_internal_assess_3d_capabilities
  001a3	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _assessment$1[ebp], eax

; 2861 : 
; 2862 : 		debug_log ( "Driver: %s, assessment: %d", device->name, assessment );

  001a9	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _assessment$1[ebp]
  001af	50		 push	 eax
  001b0	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _device$2[ebp]
  001b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b8	52		 push	 edx
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CEEIFJLH@Driver?3?5?$CFs?0?5assessment?3?5?$CFd@
  001be	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2863 : 
; 2864 : 		if ( assessment >= 0 )

  001c6	83 bd f4 fc ff
	ff 00		 cmp	 DWORD PTR _assessment$1[ebp], 0
  001cd	7c 50		 jl	 SHORT $LN6@ddraw_enum

; 2865 : 		{
; 2866 : 
; 2867 : /*			if ( device->is_primary )
; 2868 : 			{
; 2869 : 
; 2870 : 				if ( assessment > 10 )
; 2871 : 				{
; 2872 : 
; 2873 : 					assessment = 10;
; 2874 : 				}
; 2875 : 			}
; 2876 : */	
; 2877 : 			device->assessment = assessment;

  001cf	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _device$2[ebp]
  001d5	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _assessment$1[ebp]
  001db	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2878 : 	
; 2879 : 			if ( assessment > best_assessment )

  001de	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _assessment$1[ebp]
  001e4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?best_assessment@@3HA ; best_assessment
  001ea	7e 33		 jle	 SHORT $LN6@ddraw_enum

; 2880 : 			{
; 2881 : 	
; 2882 : 				//
; 2883 : 				// This driver has better 3D capabilities than the previous best
; 2884 : 				//
; 2885 : 
; 2886 : 				debug_log ( "Setting the best display device: %s assessment: %d",device->name, assessment );

  001ec	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _assessment$1[ebp]
  001f2	50		 push	 eax
  001f3	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _device$2[ebp]
  001f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fb	52		 push	 edx
  001fc	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PGNNHCMM@Setting?5the?5best?5display?5device@
  00201	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00206	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2887 : 	
; 2888 : 				best_assessment = assessment;

  00209	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _assessment$1[ebp]
  0020f	a3 00 00 00 00	 mov	 DWORD PTR ?best_assessment@@3HA, eax ; best_assessment

; 2889 : 	
; 2890 : 				best_display_device = device;

  00214	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _device$2[ebp]
  0021a	a3 00 00 00 00	 mov	 DWORD PTR ?best_display_device@@3PAUDD_DISPLAY_DEVICE@@A, eax ; best_display_device
$LN6@ddraw_enum:

; 2891 : 			}
; 2892 : 		}
; 2893 : 	}
; 2894 : 
; 2895 : 	//
; 2896 : 	// Release the driver
; 2897 : 	//
; 2898 : 
; 2899 : 	IDirectDraw7_Release ( lpDD );

  0021f	8b 45 fc	 mov	 eax, DWORD PTR _lpDD$[ebp]
  00222	8b 08		 mov	 ecx, DWORD PTR [eax]
  00224	8b 55 fc	 mov	 edx, DWORD PTR _lpDD$[ebp]
  00227	52		 push	 edx
  00228	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0022b	ff d0		 call	 eax

; 2900 : 
; 2901 : 	return ( DDENUMRET_OK );

  0022d	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_enum:

; 2902 : }

  00232	5f		 pop	 edi
  00233	5e		 pop	 esi
  00234	5b		 pop	 ebx
  00235	8b e5		 mov	 esp, ebp
  00237	5d		 pop	 ebp
  00238	c2 14 00	 ret	 20			; 00000014H
?ddraw_enumerate_drivers@@YGHPAU_GUID@@PAD1PAXPAUHMONITOR__@@@Z ENDP ; ddraw_enumerate_drivers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_enum_modes@@YGJPAU_DDSURFACEDESC2@@PAX@Z
_TEXT	SEGMENT
_b$ = -16						; size = 4
_g$ = -12						; size = 4
_r$ = -8						; size = 4
_m$ = -4						; size = 4
_lpddsd$ = 8						; size = 4
_Context$ = 12						; size = 4
?ddraw_enum_modes@@YGJPAU_DDSURFACEDESC2@@PAX@Z PROC	; ddraw_enum_modes, COMDAT

; 2562 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2563 : 
; 2564 : 	unsigned long
; 2565 : 		m;
; 2566 : 
; 2567 : 	int
; 2568 : 		r,
; 2569 : 		g,
; 2570 : 		b;
; 2571 : 
; 2572 : 	//
; 2573 : 	// Stop if we've exceeded the number of display modes
; 2574 : 	//
; 2575 : 
; 2576 : 	if ( number_display_modes == 255 )

  00009	81 3d 00 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR ?number_display_modes@@3HA, 255 ; number_display_modes, 000000ffH
  00013	75 07		 jne	 SHORT $LN20@ddraw_enum

; 2577 : 	{
; 2578 : 
; 2579 : 		return ( DDENUMRET_CANCEL );

  00015	33 c0		 xor	 eax, eax
  00017	e9 ad 02 00 00	 jmp	 $LN1@ddraw_enum
$LN20@ddraw_enum:

; 2580 : 	}
; 2581 : 
; 2582 : 	//
; 2583 : 	// Set the surface description
; 2584 : 	//
; 2585 : 
; 2586 : 	memset ( &display_modes[number_display_modes], 0, sizeof ( display_format ) );

  0001c	68 80 00 00 00	 push	 128			; 00000080H
  00021	6a 00		 push	 0
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  00028	c1 e0 07	 shl	 eax, 7
  0002b	05 00 00 00 00	 add	 eax, OFFSET ?display_modes@@3PAUDISPLAY_FORMAT@@A ; display_modes
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2587 : 	
; 2588 : 	memcpy ( &display_modes[number_display_modes].ddsd , lpddsd, sizeof ( DDSURFACEDESC ) );

  00039	6a 6c		 push	 108			; 0000006cH
  0003b	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  0003e	50		 push	 eax
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  00045	c1 e1 07	 shl	 ecx, 7
  00048	81 c1 14 00 00
	00		 add	 ecx, OFFSET ?display_modes@@3PAUDISPLAY_FORMAT@@A+20
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _memcpy
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2589 : 
; 2590 : 	//
; 2591 : 	// Assess the format
; 2592 : 	//
; 2593 : 
; 2594 : 	debug_log ( "Graphics adapter supports resolution %i x %i", lpddsd->dwWidth, lpddsd->dwHeight );

  00057	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  0005a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005d	51		 push	 ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR _lpddsd$[ebp]
  00061	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00064	50		 push	 eax
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@FEAPNDLA@Graphics?5adapter?5supports?5resol@
  0006a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2595 : 
; 2596 : 
; 2597 : 	if ( lpddsd->ddpfPixelFormat.dwFlags & DDPF_PALETTEINDEXED8 )

  00072	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  00075	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00078	83 e1 20	 and	 ecx, 32			; 00000020H
  0007b	74 2a		 je	 SHORT $LN21@ddraw_enum

; 2598 : 	{
; 2599 : 
; 2600 : 		//
; 2601 : 		// We no longer render to 8bit displays
; 2602 : 		//
; 2603 : /*
; 2604 : 		display_modes[number_display_modes].palette = TRUE;
; 2605 : 
; 2606 : 		display_modes[number_display_modes].bpp_palette = 8;
; 2607 : 
; 2608 : 		number_display_modes ++;
; 2609 : 		*/
; 2610 : 		debug_log ( "Resolution %i x %i skipped because it's 8 bit", lpddsd->dwWidth, lpddsd->dwHeight );

  0007d	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  00080	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00083	51		 push	 ecx
  00084	8b 55 08	 mov	 edx, DWORD PTR _lpddsd$[ebp]
  00087	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KKAOLCMG@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@
  00090	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2611 : 
; 2612 : 		return ( DDENUMRET_OK );

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	e9 27 02 00 00	 jmp	 $LN1@ddraw_enum
  000a2	e9 22 02 00 00	 jmp	 $LN1@ddraw_enum
$LN21@ddraw_enum:

; 2613 : 	}
; 2614 : 	else if ( lpddsd->ddpfPixelFormat.dwFlags & DDPF_PALETTEINDEXED4)

  000a7	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  000aa	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000ad	83 e1 08	 and	 ecx, 8
  000b0	74 2a		 je	 SHORT $LN23@ddraw_enum

; 2615 : 	{
; 2616 : 
; 2617 : 		//
; 2618 : 		// We are NOT going to render to 4bit displays!
; 2619 : 		//
; 2620 : 
; 2621 : 		debug_log ( "Resolution %i x %i skipped because it's 4 bit", lpddsd->dwWidth, lpddsd->dwHeight );

  000b2	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  000b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b8	51		 push	 ecx
  000b9	8b 55 08	 mov	 edx, DWORD PTR _lpddsd$[ebp]
  000bc	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@NNMMHCLN@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@
  000c5	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2622 : 
; 2623 : 		return ( DDENUMRET_OK );

  000cd	b8 01 00 00 00	 mov	 eax, 1
  000d2	e9 f2 01 00 00	 jmp	 $LN1@ddraw_enum
  000d7	e9 ed 01 00 00	 jmp	 $LN1@ddraw_enum
$LN23@ddraw_enum:

; 2624 : 	}
; 2625 : 	else if ( lpddsd->ddpfPixelFormat.dwFlags & DDPF_ALPHAPIXELS)

  000dc	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  000df	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000e2	83 e1 01	 and	 ecx, 1
  000e5	74 2a		 je	 SHORT $LN25@ddraw_enum

; 2626 : 	{
; 2627 : 
; 2628 : 		//
; 2629 : 		// Unknown display, ignore
; 2630 : 		//
; 2631 : 		debug_log ( "Resolution %i x %i skipped because alpha flag was set", lpddsd->dwWidth, lpddsd->dwHeight );

  000e7	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  000ea	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ed	51		 push	 ecx
  000ee	8b 55 08	 mov	 edx, DWORD PTR _lpddsd$[ebp]
  000f1	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000f4	50		 push	 eax
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@HAGLPPFM@Resolution?5?$CFi?5x?5?$CFi?5skipped?5beca@
  000fa	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2632 : 
; 2633 : 		return ( DDENUMRET_OK );

  00102	b8 01 00 00 00	 mov	 eax, 1
  00107	e9 bd 01 00 00	 jmp	 $LN1@ddraw_enum

; 2634 : 	}
; 2635 : 	else

  0010c	e9 b8 01 00 00	 jmp	 $LN1@ddraw_enum
$LN25@ddraw_enum:

; 2636 : 	{
; 2637 : 
; 2638 : 		display_modes[number_display_modes].palette = FALSE;

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  00116	c1 e0 07	 shl	 eax, 7
  00119	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?display_modes@@3PAUDISPLAY_FORMAT@@A[eax], 0

; 2639 : 		display_modes[number_display_modes].bpp_palette = 0;

  00123	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  00128	c1 e0 07	 shl	 eax, 7
  0012b	c7 80 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?display_modes@@3PAUDISPLAY_FORMAT@@A[eax+4], 0

; 2640 : 
; 2641 : 		if ( lpddsd->ddpfPixelFormat.dwRBitMask )

  00135	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  00138	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  0013c	74 51		 je	 SHORT $LN27@ddraw_enum

; 2642 : 		{
; 2643 : 
; 2644 : 			for ( r=0, m=lpddsd->ddpfPixelFormat.dwRBitMask; !(m & 1); r++, m >>= 1)

  0013e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0
  00145	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  00148	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0014b	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  0014e	eb 11		 jmp	 SHORT $LN4@ddraw_enum
$LN2@ddraw_enum:
  00150	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  00153	83 c0 01	 add	 eax, 1
  00156	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax
  00159	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  0015c	d1 e9		 shr	 ecx, 1
  0015e	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN4@ddraw_enum:
  00161	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  00164	83 e0 01	 and	 eax, 1
  00167	75 02		 jne	 SHORT $LN3@ddraw_enum

; 2645 : 					;

  00169	eb e5		 jmp	 SHORT $LN2@ddraw_enum
$LN3@ddraw_enum:

; 2646 : 
; 2647 : 			for ( r=0; m & 1; r++, m >>= 1)

  0016b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0
  00172	eb 11		 jmp	 SHORT $LN7@ddraw_enum
$LN5@ddraw_enum:
  00174	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  00177	83 c0 01	 add	 eax, 1
  0017a	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax
  0017d	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00180	d1 e9		 shr	 ecx, 1
  00182	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN7@ddraw_enum:
  00185	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  00188	83 e0 01	 and	 eax, 1
  0018b	74 02		 je	 SHORT $LN27@ddraw_enum

; 2648 : 					;

  0018d	eb e5		 jmp	 SHORT $LN5@ddraw_enum
$LN27@ddraw_enum:

; 2649 : 		}
; 2650 : 
; 2651 : 		if ( lpddsd->ddpfPixelFormat.dwGBitMask )

  0018f	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  00192	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00196	74 51		 je	 SHORT $LN28@ddraw_enum

; 2652 : 		{
; 2653 : 
; 2654 : 			for ( g=0, m=lpddsd->ddpfPixelFormat.dwGBitMask; !(m & 1); g++, m >>= 1)

  00198	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _g$[ebp], 0
  0019f	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  001a2	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  001a5	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  001a8	eb 11		 jmp	 SHORT $LN10@ddraw_enum
$LN8@ddraw_enum:
  001aa	8b 45 f4	 mov	 eax, DWORD PTR _g$[ebp]
  001ad	83 c0 01	 add	 eax, 1
  001b0	89 45 f4	 mov	 DWORD PTR _g$[ebp], eax
  001b3	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  001b6	d1 e9		 shr	 ecx, 1
  001b8	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN10@ddraw_enum:
  001bb	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  001be	83 e0 01	 and	 eax, 1
  001c1	75 02		 jne	 SHORT $LN9@ddraw_enum

; 2655 : 					;

  001c3	eb e5		 jmp	 SHORT $LN8@ddraw_enum
$LN9@ddraw_enum:

; 2656 : 			
; 2657 : 			for ( g=0; m & 1; g++, m >>= 1)

  001c5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _g$[ebp], 0
  001cc	eb 11		 jmp	 SHORT $LN13@ddraw_enum
$LN11@ddraw_enum:
  001ce	8b 45 f4	 mov	 eax, DWORD PTR _g$[ebp]
  001d1	83 c0 01	 add	 eax, 1
  001d4	89 45 f4	 mov	 DWORD PTR _g$[ebp], eax
  001d7	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  001da	d1 e9		 shr	 ecx, 1
  001dc	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN13@ddraw_enum:
  001df	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  001e2	83 e0 01	 and	 eax, 1
  001e5	74 02		 je	 SHORT $LN28@ddraw_enum

; 2658 : 					;

  001e7	eb e5		 jmp	 SHORT $LN11@ddraw_enum
$LN28@ddraw_enum:

; 2659 : 		}
; 2660 : 
; 2661 : 		if ( lpddsd->ddpfPixelFormat.dwBBitMask )

  001e9	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  001ec	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  001f0	74 51		 je	 SHORT $LN29@ddraw_enum

; 2662 : 		{
; 2663 : 
; 2664 : 			for ( b=0, m=lpddsd->ddpfPixelFormat.dwBBitMask; !(m & 1); b++, m >>= 1)

  001f2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  001f9	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  001fc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001ff	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  00202	eb 11		 jmp	 SHORT $LN16@ddraw_enum
$LN14@ddraw_enum:
  00204	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00207	83 c0 01	 add	 eax, 1
  0020a	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00210	d1 e9		 shr	 ecx, 1
  00212	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN16@ddraw_enum:
  00215	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  00218	83 e0 01	 and	 eax, 1
  0021b	75 02		 jne	 SHORT $LN15@ddraw_enum

; 2665 : 					;

  0021d	eb e5		 jmp	 SHORT $LN14@ddraw_enum
$LN15@ddraw_enum:

; 2666 : 			
; 2667 : 			for ( b=0; m & 1; b++, m >>= 1)

  0021f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  00226	eb 11		 jmp	 SHORT $LN19@ddraw_enum
$LN17@ddraw_enum:
  00228	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0022b	83 c0 01	 add	 eax, 1
  0022e	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00231	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00234	d1 e9		 shr	 ecx, 1
  00236	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
$LN19@ddraw_enum:
  00239	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  0023c	83 e0 01	 and	 eax, 1
  0023f	74 02		 je	 SHORT $LN29@ddraw_enum

; 2668 : 					;

  00241	eb e5		 jmp	 SHORT $LN17@ddraw_enum
$LN29@ddraw_enum:

; 2669 : 		}
; 2670 : 		
; 2671 : 		display_modes[number_display_modes].bpp_red = r;

  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  00248	c1 e0 07	 shl	 eax, 7
  0024b	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0024e	89 88 08 00 00
	00		 mov	 DWORD PTR ?display_modes@@3PAUDISPLAY_FORMAT@@A[eax+8], ecx

; 2672 : 		display_modes[number_display_modes].bpp_green = g;

  00254	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  00259	c1 e0 07	 shl	 eax, 7
  0025c	8b 4d f4	 mov	 ecx, DWORD PTR _g$[ebp]
  0025f	89 88 0c 00 00
	00		 mov	 DWORD PTR ?display_modes@@3PAUDISPLAY_FORMAT@@A[eax+12], ecx

; 2673 : 		display_modes[number_display_modes].bpp_blue = b;

  00265	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  0026a	c1 e0 07	 shl	 eax, 7
  0026d	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00270	89 88 10 00 00
	00		 mov	 DWORD PTR ?display_modes@@3PAUDISPLAY_FORMAT@@A[eax+16], ecx

; 2674 : 
; 2675 : 		if ( ( r + g + b ) <= 32 )

  00276	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  00279	03 45 f4	 add	 eax, DWORD PTR _g$[ebp]
  0027c	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  0027f	83 f8 20	 cmp	 eax, 32			; 00000020H
  00282	7f 40		 jg	 SHORT $LN30@ddraw_enum

; 2676 : 		{
; 2677 : 
; 2678 : 			if ( ( lpddsd->dwWidth >= 640 ) && ( lpddsd->dwHeight >= 480 ) )

  00284	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  00287	81 78 0c 80 02
	00 00		 cmp	 DWORD PTR [eax+12], 640	; 00000280H
  0028e	72 34		 jb	 SHORT $LN30@ddraw_enum
  00290	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  00293	81 78 08 e0 01
	00 00		 cmp	 DWORD PTR [eax+8], 480	; 000001e0H
  0029a	72 28		 jb	 SHORT $LN30@ddraw_enum

; 2679 : 			{
; 2680 : 				debug_log ( "Resolution %i x %i accepted", lpddsd->dwWidth, lpddsd->dwHeight );

  0029c	8b 45 08	 mov	 eax, DWORD PTR _lpddsd$[ebp]
  0029f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002a2	51		 push	 ecx
  002a3	8b 55 08	 mov	 edx, DWORD PTR _lpddsd$[ebp]
  002a6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002a9	50		 push	 eax
  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BNDNPKHA@Resolution?5?$CFi?5x?5?$CFi?5accepted@
  002af	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  002b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2681 : 				number_display_modes++;

  002b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_display_modes@@3HA ; number_display_modes
  002bc	83 c0 01	 add	 eax, 1
  002bf	a3 00 00 00 00	 mov	 DWORD PTR ?number_display_modes@@3HA, eax ; number_display_modes
$LN30@ddraw_enum:

; 2682 : 			}
; 2683 : 		}
; 2684 : 
; 2685 : 		return ( DDENUMRET_OK );

  002c4	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_enum:

; 2686 : 	}
; 2687 : }

  002c9	5f		 pop	 edi
  002ca	5e		 pop	 esi
  002cb	5b		 pop	 ebx
  002cc	8b e5		 mov	 esp, ebp
  002ce	5d		 pop	 ebp
  002cf	c2 08 00	 ret	 8
?ddraw_enum_modes@@YGJPAU_DDSURFACEDESC2@@PAX@Z ENDP	; ddraw_enum_modes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_validate_basic_3d_properties@@YGHXZ
_TEXT	SEGMENT
_HELCaps$ = -764					; size = 380
_DriverCaps$ = -384					; size = 380
_ddrval$ = -4						; size = 4
?ddraw_validate_basic_3d_properties@@YGHXZ PROC		; ddraw_validate_basic_3d_properties, COMDAT

; 2694 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 03 00
	00		 sub	 esp, 892		; 0000037cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2695 : 
; 2696 : 	HRESULT
; 2697 : 		ddrval;
; 2698 : 	
; 2699 : 	DDCAPS
; 2700 : 		DriverCaps,
; 2701 : 		HELCaps;
; 2702 : 
; 2703 : 
; 2704 : 	//
; 2705 : 	// Get the capabilities of the driver
; 2706 : 	//
; 2707 : 
; 2708 : 	memset( &DriverCaps, 0, sizeof ( DDCAPS ) );

  0000c	68 7c 01 00 00	 push	 380			; 0000017cH
  00011	6a 00		 push	 0
  00013	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _DriverCaps$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _memset
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2709 : 
; 2710 : 	DriverCaps.dwSize = sizeof ( DDCAPS );

  00022	c7 85 80 fe ff
	ff 7c 01 00 00	 mov	 DWORD PTR _DriverCaps$[ebp], 380 ; 0000017cH

; 2711 : 
; 2712 : 	memset( &HELCaps, 0, sizeof ( DDCAPS ) );

  0002c	68 7c 01 00 00	 push	 380			; 0000017cH
  00031	6a 00		 push	 0
  00033	8d 85 04 fd ff
	ff		 lea	 eax, DWORD PTR _HELCaps$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memset
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2713 : 
; 2714 : 	HELCaps.dwSize = sizeof ( DDCAPS );

  00042	c7 85 04 fd ff
	ff 7c 01 00 00	 mov	 DWORD PTR _HELCaps$[ebp], 380 ; 0000017cH

; 2715 : 
; 2716 : 	ddrval = IDirectDraw7_GetCaps ( ddraw.ddraw, &DriverCaps, &HELCaps );

  0004c	8d 85 04 fd ff
	ff		 lea	 eax, DWORD PTR _HELCaps$[ebp]
  00052	50		 push	 eax
  00053	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _DriverCaps$[ebp]
  00059	51		 push	 ecx
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00060	8b 02		 mov	 eax, DWORD PTR [edx]
  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00068	51		 push	 ecx
  00069	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0006c	ff d2		 call	 edx
  0006e	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2717 : 
; 2718 : 	if ( ddrval != DD_OK )

  00071	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  00075	74 04		 je	 SHORT $LN2@ddraw_vali

; 2719 : 	{
; 2720 : 
; 2721 : 		return ( FALSE );

  00077	33 c0		 xor	 eax, eax
  00079	eb 2b		 jmp	 SHORT $LN1@ddraw_vali
$LN2@ddraw_vali:

; 2722 : 	}
; 2723 : 
; 2724 : 	if ( DriverCaps.dwCaps & DDCAPS_3D )

  0007b	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _DriverCaps$[ebp+4]
  00081	83 e0 01	 and	 eax, 1
  00084	74 1e		 je	 SHORT $LN3@ddraw_vali

; 2725 : 	{
; 2726 : 
; 2727 : 		//
; 2728 : 		// Assess the basic drivers 3D capabilities
; 2729 : 		//
; 2730 : 
; 2731 : 		if ( ddraw_internal_assess_3d_capabilities ( ddraw.ddraw ) > 0 )

  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?ddraw_internal_assess_3d_capabilities@@YGHPAUIDirectDraw7@@@Z ; ddraw_internal_assess_3d_capabilities
  00091	85 c0		 test	 eax, eax
  00093	7e 09		 jle	 SHORT $LN5@ddraw_vali

; 2732 : 		{
; 2733 : 
; 2734 : 			return ( TRUE );

  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	eb 0a		 jmp	 SHORT $LN1@ddraw_vali

; 2735 : 		}
; 2736 : 		else

  0009c	eb 04		 jmp	 SHORT $LN6@ddraw_vali
$LN5@ddraw_vali:

; 2737 : 		{
; 2738 : 
; 2739 : 			return ( FALSE );

  0009e	33 c0		 xor	 eax, eax
  000a0	eb 04		 jmp	 SHORT $LN1@ddraw_vali
$LN6@ddraw_vali:

; 2740 : 		}
; 2741 : 	}
; 2742 : 	else

  000a2	eb 02		 jmp	 SHORT $LN1@ddraw_vali
$LN3@ddraw_vali:

; 2743 : 	{
; 2744 : 
; 2745 : 		return ( FALSE );

  000a4	33 c0		 xor	 eax, eax
$LN1@ddraw_vali:

; 2746 : 	}
; 2747 : }

  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
?ddraw_validate_basic_3d_properties@@YGHXZ ENDP		; ddraw_validate_basic_3d_properties
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_restore_objects@@YGXH@Z
_TEXT	SEGMENT
_activate$ = 8						; size = 4
?ddraw_restore_objects@@YGXH@Z PROC			; ddraw_restore_objects, COMDAT

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  : 
; 644  : 	if ( activate )

  00009	83 7d 08 00	 cmp	 DWORD PTR _activate$[ebp], 0
  0000d	74 4b		 je	 SHORT $LN1@ddraw_rest

; 645  : 	{
; 646  : 
; 647  : 		if ( !ddraw.application_windowed )

  0000f	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  00016	75 26		 jne	 SHORT $LN3@ddraw_rest

; 648  : 		{
; 649  : 	
; 650  : 			if ( ddraw.ddraw )

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  0001f	74 1d		 je	 SHORT $LN3@ddraw_rest

; 651  : 			{
; 652  : 	
; 653  : 				IDirectDraw7_RestoreAllSurfaces ( ddraw.ddraw );

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0002e	52		 push	 edx
  0002f	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00032	ff d0		 call	 eax

; 654  : 
; 655  : 				d3d_data.recreate_d3d = TRUE;

  00034	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+16, 1
$LN3@ddraw_rest:

; 656  : 			}
; 657  : 		}
; 658  : 			if ( ddraw_export.ddraw )

  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A, 0
  00045	74 13		 je	 SHORT $LN1@ddraw_rest

; 659  : 			{
; 660  : 	
; 661  : 				IDirectDraw7_RestoreAllSurfaces ( ddraw_export.ddraw );

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  00054	52		 push	 edx
  00055	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00058	ff d0		 call	 eax
$LN1@ddraw_rest:

; 662  : 			}
; 663  : 	}
; 664  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?ddraw_restore_objects@@YGXH@Z ENDP			; ddraw_restore_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?set_ddraw_memory_config@@YGXXZ
_TEXT	SEGMENT
_caps$ = -20						; size = 16
_free$ = -4						; size = 4
?set_ddraw_memory_config@@YGXXZ PROC			; set_ddraw_memory_config, COMDAT

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 595  : 
; 596  : 	DWORD
; 597  : 		free;
; 598  : 
; 599  : 	DDSCAPS2
; 600  : 		caps;
; 601  : 
; 602  : 	memset ( &caps, 0, sizeof ( caps ) );

  00009	6a 10		 push	 16			; 00000010H
  0000b	6a 00		 push	 0
  0000d	8d 45 ec	 lea	 eax, DWORD PTR _caps$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 603  : 
; 604  : 	caps.dwCaps = DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM;

  00019	c7 45 ec 00 40
	00 10		 mov	 DWORD PTR _caps$[ebp], 268451840 ; 10004000H

; 605  : 
; 606  : 	IDirectDraw7_GetAvailableVidMem ( ddraw.ddraw, &caps, ( DWORD * ) &d3d_total_video_memory, &free );

  00020	8d 45 fc	 lea	 eax, DWORD PTR _free$[ebp]
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ?d3d_total_video_memory@@3HA ; d3d_total_video_memory
  00029	8d 4d ec	 lea	 ecx, DWORD PTR _caps$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00033	8b 02		 mov	 eax, DWORD PTR [edx]
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0003b	51		 push	 ecx
  0003c	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  0003f	ff d2		 call	 edx

; 607  : 
; 608  : 	memset ( &caps, 0, sizeof ( caps ) );

  00041	6a 10		 push	 16			; 00000010H
  00043	6a 00		 push	 0
  00045	8d 45 ec	 lea	 eax, DWORD PTR _caps$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _memset
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 609  : 
; 610  : 	caps.dwCaps = DDSCAPS_TEXTURE | DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM;

  00051	c7 45 ec 00 50
	00 10		 mov	 DWORD PTR _caps$[ebp], 268455936 ; 10005000H

; 611  : 
; 612  : 	IDirectDraw7_GetAvailableVidMem ( ddraw.ddraw, &caps, ( DWORD * ) &d3d_total_video_texture_memory, &free );

  00058	8d 45 fc	 lea	 eax, DWORD PTR _free$[ebp]
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ?d3d_total_video_texture_memory@@3HA ; d3d_total_video_texture_memory
  00061	8d 4d ec	 lea	 ecx, DWORD PTR _caps$[ebp]
  00064	51		 push	 ecx
  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00073	51		 push	 ecx
  00074	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  00077	ff d2		 call	 edx

; 613  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?set_ddraw_memory_config@@YGXXZ ENDP			; set_ddraw_memory_config
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_format$ = 8						; size = 4
?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z PROC ; get_ddraw_zbuffer_pixel_format, COMDAT

; 2362 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2363 : 
; 2364 : 	HRESULT
; 2365 : 		ret;
; 2366 : 
; 2367 : 	ASSERT ( d3d_data.d3d );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A, 0
  00010	75 18		 jne	 SHORT $LN2@get_ddraw_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NOCMIJCP@d3d_data?4d3d@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_ddraw_:

; 2368 : 
; 2369 : 	ret = IDirect3D7_EnumZBufferFormats ( d3d_data.d3d, GUID_PREFIX IID_IDirect3DHALDevice, ddraw_enumerate_zbuffer_formats, ( void * ) format );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ?ddraw_enumerate_zbuffer_formats@@YGJPAU_DDPIXELFORMAT@@PAX@Z ; ddraw_enumerate_zbuffer_formats
  00033	68 00 00 00 00	 push	 OFFSET _IID_IDirect3DHALDevice
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00045	50		 push	 eax
  00046	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00049	ff d1		 call	 ecx
  0004b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 2370 : 
; 2371 : 	if ( FAILED ( ret ) )

  0004e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00052	7d 17		 jge	 SHORT $LN1@get_ddraw_

; 2372 : 	{
; 2373 : 
; 2374 : 		debug_fatal ( "Unable to enumerate zbuffer formats: %s", get_ddraw_error_message ( ret ) );

  00054	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IHPBAOID@Unable?5to?5enumerate?5zbuffer?5for@
  00063	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00068	83 c4 08	 add	 esp, 8
$LN1@get_ddraw_:

; 2375 : 	}
; 2376 : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ENDP ; get_ddraw_zbuffer_pixel_format
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?blit_front_buffer_to_render_buffer@@YGXXZ
_TEXT	SEGMENT
_ret$ = -4						; size = 4
?blit_front_buffer_to_render_buffer@@YGXXZ PROC		; blit_front_buffer_to_render_buffer, COMDAT

; 3032 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3033 : 
; 3034 : 	HRESULT
; 3035 : 		ret;
; 3036 : 
; 3037 : 	if ( !ddraw.application_windowed )

  00009	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  00010	75 44		 jne	 SHORT $LN1@blit_front

; 3038 : 	{
; 3039 : 		ret = IDirectDrawSurface7_Blt ( ddraw.lpBackBuffer, NULL, ddraw.lpFrontBuffer, NULL, DDBLT_WAIT, NULL );

  00012	6a 00		 push	 0
  00014	68 00 00 00 01	 push	 16777216		; 01000000H
  00019	6a 00		 push	 0
  0001b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00020	50		 push	 eax
  00021	6a 00		 push	 0
  00023	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00030	50		 push	 eax
  00031	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00034	ff d1		 call	 ecx
  00036	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 3040 : 
; 3041 : 		if ( FAILED ( ret ) )

  00039	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0003d	7d 17		 jge	 SHORT $LN1@blit_front

; 3042 : 		{
; 3043 : 	
; 3044 : 			debug_log ( "Unable to copy front buffer to back buffer, %s", get_ddraw_error_message ( ret ) );

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@NEHCLLHI@Unable?5to?5copy?5front?5buffer?5to?5@
  0004e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00053	83 c4 08	 add	 esp, 8
$LN1@blit_front:

; 3045 : 		}
; 3046 : 	}
; 3047 : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?blit_front_buffer_to_render_buffer@@YGXXZ ENDP		; blit_front_buffer_to_render_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_internal_set_display_mode@@YGHPAX@Z
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_ret$ = -4						; size = 4
_data$ = 8						; size = 4
?ddraw_internal_set_display_mode@@YGHPAX@Z PROC		; ddraw_internal_set_display_mode, COMDAT

; 2481 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2482 : 
; 2483 : 	HRESULT
; 2484 : 		ret;
; 2485 : 
; 2486 : 	int
; 2487 : 		*ptr;
; 2488 : 
; 2489 : 	ptr = ( int * ) data;

  00009	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _ptr$[ebp], eax

; 2490 : 
; 2491 : 	ret = IDirectDraw7_SetDisplayMode ( ddraw.ddraw, ptr[0], ptr[1], ptr[2], 0, 0 );

  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	b8 04 00 00 00	 mov	 eax, 4
  00018	d1 e0		 shl	 eax, 1
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0001d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00020	52		 push	 edx
  00021	b8 04 00 00 00	 mov	 eax, 4
  00026	c1 e0 00	 shl	 eax, 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0002c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0002f	52		 push	 edx
  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	6b c8 00	 imul	 ecx, eax, 0
  00038	8b 55 f8	 mov	 edx, DWORD PTR _ptr$[ebp]
  0003b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0003e	50		 push	 eax
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00045	8b 11		 mov	 edx, DWORD PTR [ecx]
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0004c	50		 push	 eax
  0004d	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00050	ff d1		 call	 ecx
  00052	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 2492 : 	if(ddraw_export.ddraw)

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A, 0
  0005c	74 2a		 je	 SHORT $LN2@ddraw_inte

; 2493 : 		ret = IDirectDraw7_SetDisplayMode ( ddraw_export.ddraw, command_line_export_mfd_screen_width, command_line_export_mfd_screen_height, 16, 0, 0 );

  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	6a 10		 push	 16			; 00000010H
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_export_mfd_screen_height@@3HA ; command_line_export_mfd_screen_height
  00069	50		 push	 eax
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_export_mfd_screen_width@@3HA ; command_line_export_mfd_screen_width
  00070	51		 push	 ecx
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  00077	8b 02		 mov	 eax, DWORD PTR [edx]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  0007f	51		 push	 ecx
  00080	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  00083	ff d2		 call	 edx
  00085	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
$LN2@ddraw_inte:

; 2494 : 
; 2495 : 	return ( ret );

  00088	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 2496 : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?ddraw_internal_set_display_mode@@YGHPAX@Z ENDP		; ddraw_internal_set_display_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_validate_display_devices@@YGXXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_ret$1 = -4						; size = 4
?ddraw_validate_display_devices@@YGXXZ PROC		; ddraw_validate_display_devices, COMDAT

; 2401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2402 : 
; 2403 : 	if ( ddraw.ddraw )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00010	0f 84 ea 00 00
	00		 je	 $LN1@ddraw_vali

; 2404 : 	{
; 2405 : 	
; 2406 : 		HRESULT
; 2407 : 			ret;
; 2408 : 	
; 2409 : 		ret = IDirectDraw7_TestCooperativeLevel ( ddraw.ddraw );

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00023	52		 push	 edx
  00024	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00027	ff d0		 call	 eax
  00029	89 45 fc	 mov	 DWORD PTR _ret$1[ebp], eax

; 2410 : 
; 2411 : 		if ( FAILED ( ret ) )

  0002c	83 7d fc 00	 cmp	 DWORD PTR _ret$1[ebp], 0
  00030	0f 8d ca 00 00
	00		 jge	 $LN1@ddraw_vali

; 2412 : 		{
; 2413 : 
; 2414 : 			switch ( ret )

  00036	8b 45 fc	 mov	 eax, DWORD PTR _ret$1[ebp]
  00039	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  0003c	81 7d b8 45 02
	76 88		 cmp	 DWORD PTR tv70[ebp], -2005532091 ; 88760245H
  00043	7f 20		 jg	 SHORT $LN13@ddraw_vali
  00045	81 7d b8 45 02
	76 88		 cmp	 DWORD PTR tv70[ebp], -2005532091 ; 88760245H
  0004c	74 3e		 je	 SHORT $LN8@ddraw_vali
  0004e	81 7d b8 82 00
	76 88		 cmp	 DWORD PTR tv70[ebp], -2005532542 ; 88760082H
  00055	74 1c		 je	 SHORT $LN7@ddraw_vali
  00057	81 7d b8 e1 00
	76 88		 cmp	 DWORD PTR tv70[ebp], -2005532447 ; 887600e1H
  0005e	74 45		 je	 SHORT $LN9@ddraw_vali
  00060	e9 9b 00 00 00	 jmp	 $LN1@ddraw_vali
$LN13@ddraw_vali:
  00065	81 7d b8 4b 02
	76 88		 cmp	 DWORD PTR tv70[ebp], -2005532085 ; 8876024bH
  0006c	74 50		 je	 SHORT $LN10@ddraw_vali
  0006e	e9 8d 00 00 00	 jmp	 $LN1@ddraw_vali
$LN7@ddraw_vali:

; 2415 : 			{
; 2416 : 
; 2417 : 				case DDERR_INVALIDOBJECT:
; 2418 : 				{
; 2419 : 
; 2420 : 					debug_log ( "Invalid object" );

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BDLKGDCN@Invalid?5object@
  00078	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0007d	83 c4 04	 add	 esp, 4

; 2421 : 
; 2422 : 					ddraw.ddraw_valid = FALSE;

  00080	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+44, 0

; 2423 : 
; 2424 : 					break;

  0008a	eb 74		 jmp	 SHORT $LN1@ddraw_vali
$LN8@ddraw_vali:

; 2425 : 				}
; 2426 : 
; 2427 : 				case DDERR_EXCLUSIVEMODEALREADYSET:
; 2428 : 				{
; 2429 : 
; 2430 : 					debug_log ( "Exclusive mode already set" );

  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@COKODHLM@Exclusive?5mode?5already?5set@
  00091	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00096	83 c4 04	 add	 esp, 4

; 2431 : 
; 2432 : 					ddraw.ddraw_valid = FALSE;

  00099	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+44, 0

; 2433 : 
; 2434 : 					break;

  000a3	eb 5b		 jmp	 SHORT $LN1@ddraw_vali
$LN9@ddraw_vali:

; 2435 : 				}
; 2436 : 
; 2437 : 				case DDERR_NOEXCLUSIVEMODE:
; 2438 : 				{
; 2439 : 
; 2440 : 					debug_log ( "No Exclusive mode" );

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KEFCBDGA@No?5Exclusive?5mode@
  000aa	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000af	83 c4 04	 add	 esp, 4

; 2441 : 
; 2442 : 					ddraw.ddraw_valid = FALSE;

  000b2	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+44, 0

; 2443 : 
; 2444 : 					break;

  000bc	eb 42		 jmp	 SHORT $LN1@ddraw_vali
$LN10@ddraw_vali:

; 2445 : 				}
; 2446 : 
; 2447 : 				case DDERR_WRONGMODE:
; 2448 : 				{
; 2449 : 
; 2450 : 					debug_log ( "Wrong mode" );

  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GNPEPAAH@Wrong?5mode@
  000c3	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000c8	83 c4 04	 add	 esp, 4

; 2451 : 
; 2452 : 					if ( ( !ddraw.ddraw_valid ) && ( !ddraw.application_windowed ) )

  000cb	83 3d 2c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+44, 0
  000d2	75 2c		 jne	 SHORT $LN1@ddraw_vali
  000d4	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  000db	75 23		 jne	 SHORT $LN1@ddraw_vali

; 2453 : 					{
; 2454 : 		
; 2455 : 						//
; 2456 : 						// Need to change display mode, restore surfaces etc etc
; 2457 : 						//
; 2458 : 		
; 2459 : 						ddraw_change_display_resolution ( application_video_width, application_video_height, application_video_colourdepth );

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_colourdepth@@3HA ; application_video_colourdepth
  000e2	50		 push	 eax
  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_video_height@@3HA ; application_video_height
  000e9	51		 push	 ecx
  000ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000f0	52		 push	 edx
  000f1	e8 00 00 00 00	 call	 ?ddraw_change_display_resolution@@YGHHHH@Z ; ddraw_change_display_resolution

; 2460 : 		
; 2461 : 						ddraw.ddraw_valid = TRUE;

  000f6	c7 05 2c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+44, 1
$LN1@ddraw_vali:

; 2462 : 					}
; 2463 : 
; 2464 : 					break;
; 2465 : 				}
; 2466 : 			}
; 2467 : 		}
; 2468 : 		else
; 2469 : 		{
; 2470 : 
; 2471 : //			debug_log ( "PASSED" );
; 2472 : 		}
; 2473 : 	}
; 2474 : }

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
?ddraw_validate_display_devices@@YGXXZ ENDP		; ddraw_validate_display_devices
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?get_ddraw_error_message@@YGPBDJ@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_error$ = 8						; size = 4
?get_ddraw_error_message@@YGPBDJ@Z PROC			; get_ddraw_error_message, COMDAT

; 3272 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3273 : 
; 3274 : 	int
; 3275 : 		count;
; 3276 : 
; 3277 : 
; 3278 : 	count = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@get_ddraw_:

; 3279 : 
; 3280 : 	while ( ( ddraw_error_table[count].error != 0 ) && ( ddraw_error_table[count].error != error ) )

  00010	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00013	83 3c c5 00 00
	00 00 00	 cmp	 DWORD PTR ?ddraw_error_table@@3PAUDDRAW_ERROR_MESSAGE@@A[eax*8], 0
  0001b	74 1a		 je	 SHORT $LN3@get_ddraw_
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00020	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?ddraw_error_table@@3PAUDDRAW_ERROR_MESSAGE@@A[eax*8]
  00027	3b 4d 08	 cmp	 ecx, DWORD PTR _error$[ebp]
  0002a	74 0b		 je	 SHORT $LN3@get_ddraw_

; 3281 : 	{
; 3282 : 
; 3283 : 		count ++;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 3284 : 	}

  00035	eb d9		 jmp	 SHORT $LN2@get_ddraw_
$LN3@get_ddraw_:

; 3285 : 
; 3286 : 	return ( ddraw_error_table[count].error_string );

  00037	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003a	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?ddraw_error_table@@3PAUDDRAW_ERROR_MESSAGE@@A[eax*8+4]

; 3287 : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?get_ddraw_error_message@@YGPBDJ@Z ENDP			; get_ddraw_error_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_internal_set_cooperative_level@@YGHPAX@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?ddraw_internal_set_cooperative_level@@YGHPAX@Z PROC	; ddraw_internal_set_cooperative_level, COMDAT

; 2910 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2911 : 	return ddraw_set_cooperative_level(*(ddraw_cooperative_level*) data);

  00009	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z ; ddraw_set_cooperative_level

; 2912 : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?ddraw_internal_set_cooperative_level@@YGHPAX@Z ENDP	; ddraw_internal_set_cooperative_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z
_TEXT	SEGMENT
_ddrval$ = -4						; size = 4
_level$ = 8						; size = 4
?ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z PROC ; ddraw_set_cooperative_level, COMDAT

; 2916 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2917 : 
; 2918 : 	HRESULT
; 2919 : 		ddrval;
; 2920 : 
; 2921 : 	static int
; 2922 : 		cooperative_level = UNSET_COOPERATIVE_LEVEL;
; 2923 : 				
; 2924 : 	if(ddraw_export.ddraw)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A, 0
  00010	74 21		 je	 SHORT $LN2@ddraw_set_

; 2925 : 	{
; 2926 : 		ddrval = IDirectDraw7_SetCooperativeLevel ( ddraw_export.ddraw, application_window,DDSCL_SETFOCUSWINDOW | DDSCL_CREATEDEVICEWINDOW | DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN | DDSCL_FPUPRESERVE );	//DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN );

  00012	68 91 12 00 00	 push	 4753			; 00001291H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0001c	50		 push	 eax
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  00023	8b 11		 mov	 edx, DWORD PTR [ecx]
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  0002a	50		 push	 eax
  0002b	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0002e	ff d1		 call	 ecx
  00030	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax
$LN2@ddraw_set_:

; 2927 : 	}
; 2928 : 
; 2929 : 	if ( ddraw.ddraw )

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  0003a	0f 84 64 01 00
	00		 je	 $LN3@ddraw_set_

; 2930 : 	{
; 2931 : 
; 2932 : 		if ( level == COOPERATIVE_LEVEL_EXCLUSIVE )

  00040	83 7d 08 02	 cmp	 DWORD PTR _level$[ebp], 2
  00044	0f 85 b8 00 00
	00		 jne	 $LN5@ddraw_set_

; 2933 : 		{
; 2934 : 	
; 2935 : 			if ( cooperative_level != COOPERATIVE_LEVEL_EXCLUSIVE )

  0004a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?cooperative_level@?1??ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z@4HA, 2
  00051	0f 84 9c 00 00
	00		 je	 $LN7@ddraw_set_

; 2936 : 			{
; 2937 : 				if(ddraw_export.ddraw)

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A, 0
  0005e	74 44		 je	 SHORT $LN8@ddraw_set_

; 2938 : 				{
; 2939 : 				ddrval = IDirectDraw7_SetCooperativeLevel ( ddraw.ddraw, application_window,DDSCL_SETFOCUSWINDOW );	//DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN );

  00060	68 80 00 00 00	 push	 128			; 00000080H
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0006a	50		 push	 eax
  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00071	8b 11		 mov	 edx, DWORD PTR [ecx]
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00078	50		 push	 eax
  00079	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0007c	ff d1		 call	 ecx
  0007e	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2940 : 				ddrval = IDirectDraw7_SetCooperativeLevel ( ddraw.ddraw, application_window,DDSCL_SETDEVICEWINDOW| DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN | DDSCL_FPUPRESERVE );	//DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN );

  00081	68 11 11 00 00	 push	 4369			; 00001111H
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0008b	50		 push	 eax
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00099	50		 push	 eax
  0009a	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0009d	ff d1		 call	 ecx
  0009f	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2941 : 				}
; 2942 : 				else

  000a2	eb 21		 jmp	 SHORT $LN9@ddraw_set_
$LN8@ddraw_set_:

; 2943 : 				{				
; 2944 : 				ddrval = IDirectDraw7_SetCooperativeLevel ( ddraw.ddraw, application_window, DDSCL_EXCLUSIVE | DDSCL_FPUPRESERVE | DDSCL_FULLSCREEN );	//DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN );

  000a4	68 11 10 00 00	 push	 4113			; 00001011H
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  000ae	50		 push	 eax
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  000bc	50		 push	 eax
  000bd	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  000c0	ff d1		 call	 ecx
  000c2	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax
$LN9@ddraw_set_:

; 2945 : //				ddrval = IDirectDraw7_SetCooperativeLevel ( ddraw.ddraw, application_window, DDSCL_EXCLUSIVE | DDSCL_MULTITHREADED | DDSCL_FULLSCREEN );	//DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN );
; 2946 : 				}
; 2947 : 				if ( ddrval != DD_OK )

  000c5	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  000c9	74 1e		 je	 SHORT $LN10@ddraw_set_

; 2948 : 				{
; 2949 : 					
; 2950 : 					debug_log ( "Unable to set cooperative level to exclusive: %s", get_ddraw_error_message ( ddrval ) );

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000d4	50		 push	 eax
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@HLPPDAOC@Unable?5to?5set?5cooperative?5level@
  000da	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000df	83 c4 08	 add	 esp, 8

; 2951 : 					
; 2952 : 					return ( FALSE );

  000e2	33 c0		 xor	 eax, eax
  000e4	e9 bd 00 00 00	 jmp	 $LN1@ddraw_set_
$LN10@ddraw_set_:

; 2953 : 				}
; 2954 : 				
; 2955 : 				cooperative_level = COOPERATIVE_LEVEL_EXCLUSIVE;

  000e9	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?cooperative_level@?1??ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z@4HA, 2
$LN7@ddraw_set_:

; 2956 : 			}
; 2957 : 	
; 2958 : 			return ( TRUE );

  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	e9 a9 00 00 00	 jmp	 $LN1@ddraw_set_

; 2959 : 		}
; 2960 : 		else

  000fd	e9 a0 00 00 00	 jmp	 $LN6@ddraw_set_
$LN5@ddraw_set_:

; 2961 : 		{
; 2962 : 	
; 2963 : 			if ( cooperative_level != COOPERATIVE_LEVEL_NORMAL )

  00102	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?cooperative_level@?1??ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z@4HA, 1
  00109	0f 84 8c 00 00
	00		 je	 $LN11@ddraw_set_

; 2964 : 			{
; 2965 : 				
; 2966 : 				if ( cooperative_level == COOPERATIVE_LEVEL_EXCLUSIVE )

  0010f	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?cooperative_level@?1??ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z@4HA, 2
  00116	75 37		 jne	 SHORT $LN12@ddraw_set_

; 2967 : 				{
; 2968 : 					
; 2969 : 					//
; 2970 : 					// Were in fullscreen mode last. Restore the displaymode before relinquishing exclusive level
; 2971 : 					//
; 2972 : 					
; 2973 : 					ddrval = IDirectDraw7_RestoreDisplayMode ( ddraw.ddraw );

  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0011d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00125	52		 push	 edx
  00126	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00129	ff d0		 call	 eax
  0012b	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2974 : 					
; 2975 : 					if ( ddrval != DD_OK )

  0012e	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  00132	74 1b		 je	 SHORT $LN12@ddraw_set_

; 2976 : 					{
; 2977 : 						
; 2978 : 						debug_log ( "Unable to restore display mode: %s", get_ddraw_error_message ( ddrval ) );

  00134	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0013d	50		 push	 eax
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GKMNIIHL@Unable?5to?5restore?5display?5mode?3@
  00143	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00148	83 c4 08	 add	 esp, 8

; 2979 : 						
; 2980 : 						return ( FALSE );

  0014b	33 c0		 xor	 eax, eax
  0014d	eb 57		 jmp	 SHORT $LN1@ddraw_set_
$LN12@ddraw_set_:

; 2981 : 					}
; 2982 : 				}
; 2983 : 				
; 2984 : 				ddrval = IDirectDraw7_SetCooperativeLevel ( ddraw.ddraw, application_window, DDSCL_NORMAL | DDSCL_FPUPRESERVE );

  0014f	68 08 10 00 00	 push	 4104			; 00001008H
  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00159	50		 push	 eax
  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00160	8b 11		 mov	 edx, DWORD PTR [ecx]
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00167	50		 push	 eax
  00168	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0016b	ff d1		 call	 ecx
  0016d	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2985 : //				ddrval = IDirectDraw7_SetCooperativeLevel ( ddraw.ddraw, application_window, DDSCL_NORMAL | DDSCL_MULTITHREADED );
; 2986 : 				
; 2987 : 				if ( ddrval != DD_OK )

  00170	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  00174	74 1b		 je	 SHORT $LN14@ddraw_set_

; 2988 : 				{
; 2989 : 					
; 2990 : 					debug_log ( "Unable to set cooperative level to normal: %s", get_ddraw_error_message ( ddrval ) );

  00176	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0017f	50		 push	 eax
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@BONEAADN@Unable?5to?5set?5cooperative?5level@
  00185	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0018a	83 c4 08	 add	 esp, 8

; 2991 : 					
; 2992 : 					return ( FALSE );

  0018d	33 c0		 xor	 eax, eax
  0018f	eb 15		 jmp	 SHORT $LN1@ddraw_set_
$LN14@ddraw_set_:

; 2993 : 				}
; 2994 : 				
; 2995 : 				cooperative_level = COOPERATIVE_LEVEL_NORMAL;

  00191	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?cooperative_level@?1??ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z@4HA, 1
$LN11@ddraw_set_:

; 2996 : 			}
; 2997 : 	
; 2998 : 			return ( TRUE );

  0019b	b8 01 00 00 00	 mov	 eax, 1
  001a0	eb 04		 jmp	 SHORT $LN1@ddraw_set_
$LN6@ddraw_set_:

; 2999 : 		}
; 3000 : 	}
; 3001 : 	else

  001a2	eb 02		 jmp	 SHORT $LN1@ddraw_set_
$LN3@ddraw_set_:

; 3002 : 	{
; 3003 : 		
; 3004 : 		return ( FALSE );

  001a4	33 c0		 xor	 eax, eax
$LN1@ddraw_set_:

; 3005 : 	}
; 3006 : }

  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 04 00	 ret	 4
?ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z ENDP ; ddraw_set_cooperative_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_destroy_surface@@YGHPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_ddrval$ = -4						; size = 4
_surface$ = 8						; size = 4
?ddraw_destroy_surface@@YGHPAUIDirectDrawSurface7@@@Z PROC ; ddraw_destroy_surface, COMDAT

; 2535 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2536 : 
; 2537 : 	HRESULT
; 2538 : 		ddrval;
; 2539 : 
; 2540 : 	//
; 2541 : 	// Create the surface
; 2542 : 	//
; 2543 : 
; 2544 : 	ddrval = IDirectDrawSurface7_Release ( surface );

  00009	8b 45 08	 mov	 eax, DWORD PTR _surface$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _surface$[ebp]
  00011	52		 push	 edx
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	ff d0		 call	 eax
  00017	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 2545 : 
; 2546 : 	if ( FAILED ( ddrval ) )

  0001a	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  0001e	7d 1b		 jge	 SHORT $LN2@ddraw_dest

; 2547 : 	{
; 2548 : 
; 2549 : 		debug_log ( "Unable to destroy a surface: %s", get_ddraw_error_message ( ddrval ) );

  00020	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HFJBHAPL@Unable?5to?5destroy?5a?5surface?3?5?$CFs@
  0002f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00034	83 c4 08	 add	 esp, 8

; 2550 : 
; 2551 : 		return ( FALSE );

  00037	33 c0		 xor	 eax, eax
  00039	eb 05		 jmp	 SHORT $LN1@ddraw_dest
$LN2@ddraw_dest:

; 2552 : 	}
; 2553 : 
; 2554 : 	return ( TRUE );

  0003b	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_dest:

; 2555 : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?ddraw_destroy_surface@@YGHPAUIDirectDrawSurface7@@@Z ENDP ; ddraw_destroy_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_create_surface@@YGPAUIDirectDrawSurface7@@HHH@Z
_TEXT	SEGMENT
_ddsd$ = -128						; size = 124
_lpSurface$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_video_memory$ = 16					; size = 4
?ddraw_create_surface@@YGPAUIDirectDrawSurface7@@HHH@Z PROC ; ddraw_create_surface, COMDAT

; 2503 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2504 : 	LPDIRECTDRAWSURFACEX
; 2505 : 		lpSurface;
; 2506 : 	DDSURFACEDESC2
; 2507 : 		ddsd;
; 2508 : 
; 2509 : 	//
; 2510 : 	// Create the surface
; 2511 : 	//
; 2512 : 	memset ( &ddsd, 0, sizeof ( ddsd ) );

  0000c	6a 7c		 push	 124			; 0000007cH
  0000e	6a 00		 push	 0
  00010	8d 45 80	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2513 : 	ddsd.dwSize = sizeof ( ddsd );

  0001c	c7 45 80 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 2514 : 	f3d_surface_description ( f3d_surface_front (), &ddsd );

  00023	8d 45 80	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ ; f3d_surface_front
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 2515 : 	ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  00032	c7 45 84 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 2516 : 	if ( !video_memory )

  00039	83 7d 10 00	 cmp	 DWORD PTR _video_memory$[ebp], 0
  0003d	75 09		 jne	 SHORT $LN2@ddraw_crea

; 2517 : 	{
; 2518 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_SYSTEMMEMORY;

  0003f	c7 45 e8 40 08
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 2112 ; 00000840H

; 2519 : 	}
; 2520 : 	else

  00046	eb 07		 jmp	 SHORT $LN3@ddraw_crea
$LN2@ddraw_crea:

; 2521 : 	{
; 2522 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN;

  00048	c7 45 e8 40 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 64 ; 00000040H
$LN3@ddraw_crea:

; 2523 : 	}
; 2524 : 	ddsd.dwHeight = height;

  0004f	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00052	89 45 88	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 2525 : 	ddsd.dwWidth = width;

  00055	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00058	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 2526 : 	f3d_surface_create ( &ddsd, &lpSurface );

  0005b	8d 45 fc	 lea	 eax, DWORD PTR _lpSurface$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d 80	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z ; f3d_surface_create

; 2527 : 	return ( lpSurface );

  00068	8b 45 fc	 mov	 eax, DWORD PTR _lpSurface$[ebp]

; 2528 : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 0c 00	 ret	 12			; 0000000cH
?ddraw_create_surface@@YGPAUIDirectDrawSurface7@@HHH@Z ENDP ; ddraw_create_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_flip_surface@@YGHXZ
_TEXT	SEGMENT
_my_rc$ = -120						; size = 16
_ddbltfx$ = -104					; size = 100
_ddrval$ = -4						; size = 4
?ddraw_flip_surface@@YGHXZ PROC				; ddraw_flip_surface, COMDAT

; 979  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 980  : 	
; 981  : 	HRESULT
; 982  : 		ddrval;
; 983  : 
; 984  : 	DDBLTFX
; 985  : 		ddbltfx;
; 986  : 
; 987  : 	RECT
; 988  : 		my_rc;
; 989  : 
; 990  : 	if ( !ddraw.ddraw )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00013	75 07		 jne	 SHORT $LN2@ddraw_flip

; 991  : 	{
; 992  : 
; 993  : 		return ( FALSE );

  00015	33 c0		 xor	 eax, eax
  00017	e9 4b 01 00 00	 jmp	 $LN1@ddraw_flip
$LN2@ddraw_flip:

; 994  : 	}
; 995  : 	if(ddraw_export.ddraw)

  0001c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A, 0
  00023	74 05		 je	 SHORT $LN3@ddraw_flip

; 996  : 		ddraw_flip_surface_export();

  00025	e8 00 00 00 00	 call	 ?ddraw_flip_surface_export@@YGHXZ ; ddraw_flip_surface_export
$LN3@ddraw_flip:

; 997  : 
; 998  : 	total_number_of_d3d_triangles = running_total_number_of_d3d_triangles;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?running_total_number_of_d3d_triangles@@3HA ; running_total_number_of_d3d_triangles
  0002f	a3 00 00 00 00	 mov	 DWORD PTR ?total_number_of_d3d_triangles@@3HA, eax ; total_number_of_d3d_triangles

; 999  : 
; 1000 : 	total_number_of_d3d_flushes = running_total_number_of_d3d_flushes;

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?running_total_number_of_d3d_flushes@@3HA ; running_total_number_of_d3d_flushes
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?total_number_of_d3d_flushes@@3HA, eax ; total_number_of_d3d_flushes

; 1001 : 	
; 1002 : 	running_total_number_of_d3d_triangles = 0;

  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?running_total_number_of_d3d_triangles@@3HA, 0 ; running_total_number_of_d3d_triangles

; 1003 : 
; 1004 : 	running_total_number_of_d3d_flushes = 0;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?running_total_number_of_d3d_flushes@@3HA, 0 ; running_total_number_of_d3d_flushes

; 1005 : 	
; 1006 : 	if ( ( ddraw.ddraw ) /*&& ( ddraw.use_double_buffer )*/ && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  00052	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00059	0f 84 03 01 00
	00		 je	 $LN4@ddraw_flip
  0005f	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  00066	0f 84 f6 00 00
	00		 je	 $LN4@ddraw_flip
  0006c	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  00073	0f 84 e9 00 00
	00		 je	 $LN4@ddraw_flip

; 1007 : 	{
; 1008 : 
; 1009 : 		if ( !ddraw.application_windowed )

  00079	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  00080	75 36		 jne	 SHORT $LN6@ddraw_flip

; 1010 : 		{
; 1011 : 
; 1012 : 			/*if ( ddraw.use_system_memory )
; 1013 : 			{
; 1014 : 
; 1015 : 				{
; 1016 : 
; 1017 : 					DDSURFACEDESC2
; 1018 : 						src_ddsd,
; 1019 : 						dest_ddsd;
; 1020 : 					
; 1021 : 
; 1022 : 					//
; 1023 : 					// Lock the surface memory
; 1024 : 					//
; 1025 : 
; 1026 : 					src_ddsd.dwSize = sizeof ( src_ddsd );
; 1027 : 
; 1028 : 					dest_ddsd.dwSize = sizeof ( dest_ddsd );
; 1029 : 	
; 1030 : 					IDirectDrawSurface7_Lock ( ddraw.lpBackBuffer, NULL, &dest_ddsd, DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL );
; 1031 : 		
; 1032 : 					IDirectDrawSurface7_Lock ( ddraw.lpRenderBuffer, NULL, &src_ddsd, DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL );
; 1033 : 
; 1034 : 					{
; 1035 : 
; 1036 : 						unsigned char
; 1037 : 							*source_screen,
; 1038 : 							*dest_screen;
; 1039 : 
; 1040 : 						int
; 1041 : 							width,
; 1042 : 							height;
; 1043 : 
; 1044 : 						source_screen = src_ddsd.lpSurface;
; 1045 : 
; 1046 : 						dest_screen = dest_ddsd.lpSurface;
; 1047 : 				
; 1048 : 						for ( height=0; height < application_video_height; height++ )
; 1049 : 						{
; 1050 : 
; 1051 : 							double
; 1052 : 								*source,
; 1053 : 								*dest;
; 1054 : 
; 1055 : 							source = ( double * ) source_screen;
; 1056 : 
; 1057 : 							dest = ( double * ) dest_screen;
; 1058 : 				
; 1059 : 							for ( width = application_video_width; width > 0; width -= 16 )
; 1060 : 							{
; 1061 : 
; 1062 : 								dest[0] = source[0];
; 1063 : 								dest[1] = source[1];
; 1064 : 								dest[2] = source[2];
; 1065 : 								dest[3] = source[3];
; 1066 : 								dest += 4;
; 1067 : 								source += 4;
; 1068 : 							}
; 1069 : 				
; 1070 : 							dest_screen += dest_ddsd.lPitch;
; 1071 : 				
; 1072 : 							source_screen += src_ddsd.lPitch;
; 1073 : 						}
; 1074 : 					}
; 1075 : 
; 1076 : 					IDirectDrawSurface7_Unlock ( ddraw.lpBackBuffer, NULL );
; 1077 : 					
; 1078 : 					IDirectDrawSurface7_Unlock ( ddraw.lpRenderBuffer, NULL );
; 1079 : 				}
; 1080 : 
; 1081 : //				ddbltfx.dwSize = sizeof ( ddbltfx );
; 1082 : 	
; 1083 : //				ddbltfx.dwROP = SRCCOPY;
; 1084 : 	
; 1085 : //				ddrval = IDirectDrawSurface7_Blt ( ddraw.lpBackBuffer, NULL, ddraw.lpRenderBuffer, NULL, 0, &ddbltfx );
; 1086 : 			}
; 1087 : 			else*/
; 1088 : 			{
; 1089 : 	
; 1090 : 				ddrval = IDirectDrawSurface7_Flip ( ddraw.lpFrontBuffer, NULL, DDFLIP_WAIT );

  00082	6a 01		 push	 1
  00084	6a 00		 push	 0
  00086	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00093	52		 push	 edx
  00094	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00097	ff d0		 call	 eax
  00099	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 1091 : 				
; 1092 : 				if ( ddrval != DD_OK )

  0009c	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  000a0	74 07		 je	 SHORT $LN8@ddraw_flip

; 1093 : 				{
; 1094 : 	
; 1095 : //					debug_log ( "Unable to perform surface flip: %s", get_ddraw_error_message ( ddrval ) );
; 1096 : 	
; 1097 : 					return ( FALSE );

  000a2	33 c0		 xor	 eax, eax
  000a4	e9 be 00 00 00	 jmp	 $LN1@ddraw_flip
$LN8@ddraw_flip:

; 1098 : 				}
; 1099 : 			}
; 1100 : 
; 1101 : 			return ( TRUE );

  000a9	b8 01 00 00 00	 mov	 eax, 1
  000ae	e9 b4 00 00 00	 jmp	 $LN1@ddraw_flip

; 1102 : 		}
; 1103 : 		else

  000b3	e9 a8 00 00 00	 jmp	 $LN7@ddraw_flip
$LN6@ddraw_flip:

; 1104 : 		{
; 1105 : 
; 1106 : 			ddbltfx.dwSize = sizeof ( ddbltfx );

  000b8	c7 45 98 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp], 100 ; 00000064H

; 1107 : 
; 1108 : 			ddbltfx.dwROP = SRCCOPY;

  000bf	c7 45 a0 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$[ebp+8], 13369376 ; 00cc0020H

; 1109 : 
; 1110 : 			GetClientRect(application_window, &my_rc);

  000c6	8d 45 88	 lea	 eax, DWORD PTR _my_rc$[ebp]
  000c9	50		 push	 eax
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  000d0	51		 push	 ecx
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1111 : 			ClientToScreen(application_window, (LPPOINT)&my_rc);

  000d7	8d 45 88	 lea	 eax, DWORD PTR _my_rc$[ebp]
  000da	50		 push	 eax
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  000e1	51		 push	 ecx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1112 : 			ClientToScreen(application_window, (LPPOINT)&my_rc+1);

  000e8	8d 45 90	 lea	 eax, DWORD PTR _my_rc$[ebp+8]
  000eb	50		 push	 eax
  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  000f2	51		 push	 ecx
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1113 : 
; 1114 : 
; 1115 : 			my_rc.bottom = my_rc.top + application_video_height;

  000f9	8b 45 8c	 mov	 eax, DWORD PTR _my_rc$[ebp+4]
  000fc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  00102	89 45 94	 mov	 DWORD PTR _my_rc$[ebp+12], eax

; 1116 : 			my_rc.right = my_rc.left + application_video_width;

  00105	8b 45 88	 mov	 eax, DWORD PTR _my_rc$[ebp]
  00108	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  0010e	89 45 90	 mov	 DWORD PTR _my_rc$[ebp+8], eax

; 1117 : 
; 1118 : 			ddrval = IDirectDrawSurface7_Blt ( ddraw.lpFrontBuffer, &my_rc, ddraw.lpBackBuffer, NULL, 0, NULL );

  00111	6a 00		 push	 0
  00113	6a 00		 push	 0
  00115	6a 00		 push	 0
  00117	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  0011c	50		 push	 eax
  0011d	8d 4d 88	 lea	 ecx, DWORD PTR _my_rc$[ebp]
  00120	51		 push	 ecx
  00121	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00127	8b 02		 mov	 eax, DWORD PTR [edx]
  00129	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0012f	51		 push	 ecx
  00130	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00133	ff d2		 call	 edx
  00135	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 1119 : 
; 1120 : 			if ( ddrval != DD_OK )

  00138	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  0013c	74 1b		 je	 SHORT $LN9@ddraw_flip

; 1121 : 			{
; 1122 : 
; 1123 : 				debug_log ( "Unable to perform a windowed flip operation: %s", get_ddraw_error_message ( ddrval ) );

  0013e	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00147	50		 push	 eax
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@POODLDHG@Unable?5to?5perform?5a?5windowed?5fl@
  0014d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00152	83 c4 08	 add	 esp, 8

; 1124 : 
; 1125 : 				return ( FALSE );

  00155	33 c0		 xor	 eax, eax
  00157	eb 0e		 jmp	 SHORT $LN1@ddraw_flip
$LN9@ddraw_flip:

; 1126 : 			}
; 1127 : /*
; 1128 : 			ddrval = -1;
; 1129 : 
; 1130 : 			while ( ddrval != DD_OK )
; 1131 : 			{
; 1132 : 	
; 1133 : 				ddrval = IDirectDrawSurface7_GetBltStatus ( ddraw.lpFrontBufferX, DDGBS_ISBLTDONE );
; 1134 : 			}
; 1135 : */
; 1136 : 			return ( TRUE );

  00159	b8 01 00 00 00	 mov	 eax, 1
  0015e	eb 07		 jmp	 SHORT $LN1@ddraw_flip
$LN7@ddraw_flip:

; 1137 : 		}
; 1138 : 	}
; 1139 : 	else

  00160	eb 05		 jmp	 SHORT $LN1@ddraw_flip
$LN4@ddraw_flip:

; 1140 : 	{
; 1141 : 		
; 1142 : 		return ( TRUE );

  00162	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_flip:

; 1143 : 	}
; 1144 : }

  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
?ddraw_flip_surface@@YGHXZ ENDP				; ddraw_flip_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z
_TEXT	SEGMENT
_ddrval$ = -4						; size = 4
_surface$ = 8						; size = 4
_memory$ = 12						; size = 4
?ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z PROC ; ddraw_unlock_surface, COMDAT

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 876  : 	
; 877  : 	HRESULT
; 878  : 		ddrval;
; 879  : 
; 880  : 	ASSERT ( surface );

  00009	83 7d 08 00	 cmp	 DWORD PTR _surface$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@ddraw_unlo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07IHELBNLD@surface@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@ddraw_unlo:

; 881  : 	ASSERT ( memory );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _memory$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@ddraw_unlo
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06HLKELJGF@memory@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@ddraw_unlo:

; 882  : 
; 883  : 	if ( ( ddraw.ddraw ) && ( surface ) )

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  0004c	74 48		 je	 SHORT $LN4@ddraw_unlo
  0004e	83 7d 08 00	 cmp	 DWORD PTR _surface$[ebp], 0
  00052	74 42		 je	 SHORT $LN4@ddraw_unlo

; 884  : 	{
; 885  : 		
; 886  : 		ddrval = IDirectDrawSurface7_Unlock ( surface, NULL );

  00054	6a 00		 push	 0
  00056	8b 45 08	 mov	 eax, DWORD PTR _surface$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _surface$[ebp]
  0005e	52		 push	 edx
  0005f	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00065	ff d0		 call	 eax
  00067	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 887  : 		
; 888  : 		if ( ddrval != DD_OK )

  0006a	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  0006e	74 1d		 je	 SHORT $LN6@ddraw_unlo

; 889  : 		{
; 890  : 
; 891  : 			debug_log ( "Unable to unlock surface: %s", get_ddraw_error_message ( ddrval ) );

  00070	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GFIMFAAF@Unable?5to?5unlock?5surface?3?5?$CFs@
  0007f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00084	83 c4 08	 add	 esp, 8

; 892  : 
; 893  : 			return ( FALSE );

  00087	33 c0		 xor	 eax, eax
  00089	eb 10		 jmp	 SHORT $LN1@ddraw_unlo

; 894  : 		}
; 895  : 		else

  0008b	eb 07		 jmp	 SHORT $LN7@ddraw_unlo
$LN6@ddraw_unlo:

; 896  : 		{
; 897  : 			
; 898  : 			return ( TRUE );

  0008d	b8 01 00 00 00	 mov	 eax, 1
  00092	eb 07		 jmp	 SHORT $LN1@ddraw_unlo
$LN7@ddraw_unlo:

; 899  : 		}
; 900  : 	}
; 901  : 	else

  00094	eb 05		 jmp	 SHORT $LN1@ddraw_unlo
$LN4@ddraw_unlo:

; 902  : 	{
; 903  : 		
; 904  : 		return ( TRUE );

  00096	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_unlo:

; 905  : 	}
; 906  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
?ddraw_unlock_surface@@YGHPAUIDirectDrawSurface7@@PAE@Z ENDP ; ddraw_unlock_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z
_TEXT	SEGMENT
_ret$ = -128						; size = 4
_ddsd$ = -124						; size = 124
_surface$ = 8						; size = 4
_ptr$ = 12						; size = 4
_pitch$ = 16						; size = 4
?ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z PROC ; ddraw_lock_surface, COMDAT

; 800  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 801  : 	
; 802  : 	DDSURFACEDESC2
; 803  : 		ddsd;
; 804  : 	
; 805  : 	HRESULT
; 806  : 		ret;
; 807  : 
; 808  : 	ASSERT ( surface );

  0000c	83 7d 08 00	 cmp	 DWORD PTR _surface$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@ddraw_lock
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z@4JA
  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_07IHELBNLD@surface@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@ddraw_lock:

; 809  : 	ASSERT ( ptr );

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@ddraw_lock
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z@4JA
  00035	83 c0 09	 add	 eax, 9
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_03PLHFFLIH@ptr@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@ddraw_lock:

; 810  : 	ASSERT ( pitch );

  00048	83 7d 10 00	 cmp	 DWORD PTR _pitch$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@ddraw_lock
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z@4JA
  00053	83 c0 0a	 add	 eax, 10			; 0000000aH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_05NCNFOFLM@pitch@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@ddraw_lock:

; 811  : 
; 812  : 	*ptr = NULL;

  00066	8b 45 0c	 mov	 eax, DWORD PTR _ptr$[ebp]
  00069	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 813  : 	
; 814  : 	*pitch = 0;

  0006f	8b 45 10	 mov	 eax, DWORD PTR _pitch$[ebp]
  00072	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 815  : 	
; 816  : 	ddsd.dwSize = sizeof ( DDSURFACEDESC2 );

  00078	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 817  : 	
; 818  : 	if ( ( ddraw.ddraw ) && ( surface ) )

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00086	0f 84 e1 00 00
	00		 je	 $LN5@ddraw_lock
  0008c	83 7d 08 00	 cmp	 DWORD PTR _surface$[ebp], 0
  00090	0f 84 d7 00 00
	00		 je	 $LN5@ddraw_lock

; 819  : 	{
; 820  : 		
; 821  : 		ret = IDirectDrawSurface7_Lock ( surface, NULL, &ddsd, DDLOCK_NOSYSLOCK | DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL );

  00096	6a 00		 push	 0
  00098	68 01 08 00 00	 push	 2049			; 00000801H
  0009d	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  000a0	50		 push	 eax
  000a1	6a 00		 push	 0
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _surface$[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	8b 45 08	 mov	 eax, DWORD PTR _surface$[ebp]
  000ab	50		 push	 eax
  000ac	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  000af	ff d1		 call	 ecx
  000b1	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax

; 822  : 		
; 823  : 		if ( ret != DD_OK )

  000b4	83 7d 80 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000b8	0f 84 83 00 00
	00		 je	 $LN7@ddraw_lock

; 824  : 		{
; 825  : 
; 826  : 			if ( ret == DDERR_SURFACELOST )

  000be	81 7d 80 c2 01
	76 88		 cmp	 DWORD PTR _ret$[ebp], -2005532222 ; 887601c2H
  000c5	75 59		 jne	 SHORT $LN8@ddraw_lock

; 827  : 			{
; 828  : 
; 829  : 				debug_log ( "Attempting restore" );

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JLFNEMHA@Attempting?5restore@
  000cc	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000d1	83 c4 04	 add	 esp, 4

; 830  : 
; 831  : 				ret = IDirectDrawSurface7_Restore ( surface );

  000d4	8b 45 08	 mov	 eax, DWORD PTR _surface$[ebp]
  000d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d9	8b 55 08	 mov	 edx, DWORD PTR _surface$[ebp]
  000dc	52		 push	 edx
  000dd	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  000e0	ff d0		 call	 eax
  000e2	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax

; 832  : 
; 833  : 				if ( FAILED ( ret ) )

  000e5	83 7d 80 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000e9	7d 17		 jge	 SHORT $LN9@ddraw_lock

; 834  : 				{
; 835  : 
; 836  : 					debug_log ( "Unable to restore surface: %s", get_ddraw_error_message ( ret ) );

  000eb	8b 45 80	 mov	 eax, DWORD PTR _ret$[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000f4	50		 push	 eax
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IEHBNKMH@Unable?5to?5restore?5surface?3?5?$CFs@
  000fa	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000ff	83 c4 08	 add	 esp, 8
$LN9@ddraw_lock:

; 837  : 				}
; 838  : 
; 839  : 				ret = IDirectDrawSurface7_Lock ( surface, NULL, &ddsd, DDLOCK_NOSYSLOCK | DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL );

  00102	6a 00		 push	 0
  00104	68 01 08 00 00	 push	 2049			; 00000801H
  00109	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0010c	50		 push	 eax
  0010d	6a 00		 push	 0
  0010f	8b 4d 08	 mov	 ecx, DWORD PTR _surface$[ebp]
  00112	8b 11		 mov	 edx, DWORD PTR [ecx]
  00114	8b 45 08	 mov	 eax, DWORD PTR _surface$[ebp]
  00117	50		 push	 eax
  00118	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  0011b	ff d1		 call	 ecx
  0011d	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax
$LN8@ddraw_lock:

; 840  : 			}
; 841  : 
; 842  : 			if ( ret != DD_OK )

  00120	83 7d 80 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00124	74 1b		 je	 SHORT $LN7@ddraw_lock

; 843  : 			{
; 844  : 	
; 845  : 				debug_log ( "failed to lock surface: %s", get_ddraw_error_message ( ret ) );

  00126	8b 45 80	 mov	 eax, DWORD PTR _ret$[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0012f	50		 push	 eax
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BHDPJNPH@failed?5to?5lock?5surface?3?5?$CFs@
  00135	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0013a	83 c4 08	 add	 esp, 8

; 846  : 	
; 847  : 				return ( FALSE );

  0013d	33 c0		 xor	 eax, eax
  0013f	eb 2e		 jmp	 SHORT $LN1@ddraw_lock
$LN7@ddraw_lock:

; 848  : 			}
; 849  : 		}
; 850  : 
; 851  : 		if ( !ddsd.lpSurface )

  00141	83 7d a8 00	 cmp	 DWORD PTR _ddsd$[ebp+36], 0
  00145	75 0d		 jne	 SHORT $LN11@ddraw_lock

; 852  : 		{
; 853  : 
; 854  : 			debug_fatal ( "Locked surface, but got a NULL pointer..... odd...." );

  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@KEALBHFE@Locked?5surface?0?5but?5got?5a?5NULL?5@
  0014c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00151	83 c4 04	 add	 esp, 4
$LN11@ddraw_lock:

; 855  : 		}
; 856  : 
; 857  : 		*ptr = ddsd.lpSurface;

  00154	8b 45 0c	 mov	 eax, DWORD PTR _ptr$[ebp]
  00157	8b 4d a8	 mov	 ecx, DWORD PTR _ddsd$[ebp+36]
  0015a	89 08		 mov	 DWORD PTR [eax], ecx

; 858  : 		
; 859  : 		*pitch = ddsd.lPitch;

  0015c	8b 45 10	 mov	 eax, DWORD PTR _pitch$[ebp]
  0015f	8b 4d 94	 mov	 ecx, DWORD PTR _ddsd$[ebp+16]
  00162	89 08		 mov	 DWORD PTR [eax], ecx

; 860  : 
; 861  : 		return ( TRUE );

  00164	b8 01 00 00 00	 mov	 eax, 1
  00169	eb 04		 jmp	 SHORT $LN1@ddraw_lock

; 862  : 	}
; 863  : 	else

  0016b	eb 02		 jmp	 SHORT $LN1@ddraw_lock
$LN5@ddraw_lock:

; 864  : 	{
; 865  : 		
; 866  : 		return ( FALSE );

  0016d	33 c0		 xor	 eax, eax
$LN1@ddraw_lock:

; 867  : 	}
; 868  : }

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 0c 00	 ret	 12			; 0000000cH
?ddraw_lock_surface@@YGHPAUIDirectDrawSurface7@@PAPAXPAH@Z ENDP ; ddraw_lock_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_change_display_resolution@@YGHHHH@Z
_TEXT	SEGMENT
tv290 = -252						; size = 4
_ret$1 = -184						; size = 4
_windowed$ = -180					; size = 4
_rcWork$ = -176						; size = 16
_rc$ = -160						; size = 16
_ret$ = -144						; size = 4
_caps$ = -140						; size = 16
_ddsd$ = -124						; size = 124
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_depth$ = 16						; size = 4
?ddraw_change_display_resolution@@YGHHHH@Z PROC		; ddraw_change_display_resolution, COMDAT

; 1768 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1769 : 
; 1770 : 	DDSURFACEDESC2
; 1771 : 		ddsd;
; 1772 : 	
; 1773 : 	DDSCAPS2
; 1774 : 		caps;
; 1775 : 	
; 1776 : 	HRESULT
; 1777 : 		ret;
; 1778 : 	
; 1779 : 	RECT
; 1780 : 		rc,
; 1781 : 		rcWork;
; 1782 : 	
; 1783 : 	BOOL
; 1784 : 		windowed;
; 1785 : 	
; 1786 : 	ASSERT ( get_graphics_system_initialised () );

  0000c	e8 00 00 00 00	 call	 ?get_graphics_system_initialised@@YGHXZ ; get_graphics_system_initialised
  00011	85 c0		 test	 eax, eax
  00013	75 18		 jne	 SHORT $LN2@ddraw_chan
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ddraw_change_display_resolution@@YGHHHH@Z@4JA
  0001a	83 c0 12	 add	 eax, 18			; 00000012H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@ddraw_chan:

; 1787 : 
; 1788 : 	application_video_height = height;

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00030	a3 00 00 00 00	 mov	 DWORD PTR ?application_video_height@@3HA, eax ; application_video_height

; 1789 : 	application_video_width = width;

  00035	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?application_video_width@@3HA, eax ; application_video_width

; 1790 : 	application_video_colourdepth = depth;

  0003d	8b 45 10	 mov	 eax, DWORD PTR _depth$[ebp]
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?application_video_colourdepth@@3HA, eax ; application_video_colourdepth

; 1791 : 
; 1792 : 	set_basic_viewport ( 0, 0, ( ( ( float ) application_video_width ) - 0.001 ), ( ( ( float ) application_video_height ) - 0.001 ) );

  00045	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?application_video_height@@3HA ; application_video_height
  0004d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00051	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00059	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005d	51		 push	 ecx
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?application_video_width@@3HA ; application_video_width
  0006b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0006f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00077	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	51		 push	 ecx
  00082	0f 57 c0	 xorps	 xmm0, xmm0
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	51		 push	 ecx
  0008b	0f 57 c0	 xorps	 xmm0, xmm0
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	e8 00 00 00 00	 call	 ?set_basic_viewport@@YGXMMMM@Z ; set_basic_viewport

; 1793 : 	
; 1794 : 	windowed = ddraw.application_windowed;

  00098	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28
  0009d	89 85 4c ff ff
	ff		 mov	 DWORD PTR _windowed$[ebp], eax

; 1795 : 
; 1796 : 	if ( !windowed )

  000a3	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _windowed$[ebp], 0
  000aa	0f 85 fd 03 00
	00		 jne	 $LN3@ddraw_chan

; 1797 : 	{
; 1798 : 
; 1799 : 		//
; 1800 : 	 	// Prevent d3d from being valid
; 1801 : 		//
; 1802 : 
; 1803 : 		d3d_valid = FALSE;

  000b0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_valid@@3HA, 0 ; d3d_valid

; 1804 : 
; 1805 : 		//
; 1806 : 		// Remove textures from pipeline
; 1807 : 		//
; 1808 : 
; 1809 : 		initialise_d3d_state ();

  000ba	e8 00 00 00 00	 call	 ?initialise_d3d_state@@YGXXZ ; initialise_d3d_state

; 1810 : 
; 1811 : 		//
; 1812 : 		// Destroy the vertex buffers
; 1813 : 		//
; 1814 : 
; 1815 : 		destroy_d3d_vertex_buffers ();

  000bf	e8 00 00 00 00	 call	 ?destroy_d3d_vertex_buffers@@YGXXZ ; destroy_d3d_vertex_buffers

; 1816 : 	
; 1817 : 		//
; 1818 : 		// Free all hardware textures up
; 1819 : 		//
; 1820 : 
; 1821 : 		free_all_hardware_textures ();

  000c4	e8 00 00 00 00	 call	 ?free_all_hardware_textures@@YGXXZ ; free_all_hardware_textures

; 1822 : 	
; 1823 : 		//
; 1824 : 		// Release the 3d devices
; 1825 : 		//
; 1826 : 	
; 1827 : 		d3d_release_objects ();

  000c9	e8 00 00 00 00	 call	 ?d3d_release_objects@@YGXXZ ; d3d_release_objects

; 1828 : 	
; 1829 : 		//
; 1830 : 		// Remove the Z buffer from the render surface
; 1831 : 		//
; 1832 : 
; 1833 : 		if ( ( ddraw.lpZBuffer ) && ( ddraw.lpRenderBuffer ) )

  000ce	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20, 0
  000d5	0f 84 97 00 00
	00		 je	 $LN5@ddraw_chan
  000db	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, 0
  000e2	0f 84 8a 00 00
	00		 je	 $LN5@ddraw_chan

; 1834 : 		{
; 1835 : 
; 1836 : 			ret = IDirectDrawSurface7_DeleteAttachedSurface ( ddraw.lpRenderBuffer, 0, ddraw.lpZBuffer );

  000e8	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  000ed	50		 push	 eax
  000ee	6a 00		 push	 0
  000f0	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  000f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f8	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  000fd	50		 push	 eax
  000fe	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00101	ff d1		 call	 ecx
  00103	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 1837 : 
; 1838 : 			if ( ret != DD_OK )

  00109	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00110	74 1a		 je	 SHORT $LN6@ddraw_chan

; 1839 : 			{
; 1840 : 
; 1841 : 				debug_log ( "Unable to delete the zbuffer from the render buffer: %s", get_ddraw_error_message ( ret ) );

  00112	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0011e	50		 push	 eax
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PLBGCAHN@Unable?5to?5delete?5the?5zbuffer?5fr@
  00124	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00129	83 c4 08	 add	 esp, 8
$LN6@ddraw_chan:

; 1842 : 			}
; 1843 : 
; 1844 : 			ret = IDirectDrawSurface7_Release ( ddraw.lpZBuffer );

  0012c	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  00131	8b 08		 mov	 ecx, DWORD PTR [eax]
  00133	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  00139	52		 push	 edx
  0013a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0013d	ff d0		 call	 eax
  0013f	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 1845 : 
; 1846 : 			if ( FAILED ( ret ) )

  00145	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  0014c	7d 1a		 jge	 SHORT $LN7@ddraw_chan

; 1847 : 			{
; 1848 : 
; 1849 : 				debug_log ( "Unable to delete the release the zbuffer: %s", get_ddraw_error_message ( ret ) );

  0014e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0015a	50		 push	 eax
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PDDIBKIM@Unable?5to?5delete?5the?5release?5th@
  00160	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00165	83 c4 08	 add	 esp, 8
$LN7@ddraw_chan:

; 1850 : 			}
; 1851 : 
; 1852 : 			ddraw.lpZBuffer = NULL;

  00168	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20, 0
$LN5@ddraw_chan:

; 1853 : 		}
; 1854 : 
; 1855 : 		//
; 1856 : 		// Set the video mode
; 1857 : 		//
; 1858 : 
; 1859 : 		ret = IDirectDraw7_SetDisplayMode ( ddraw.ddraw, width, height, depth, 0, 0 );

  00172	6a 00		 push	 0
  00174	6a 00		 push	 0
  00176	8b 45 10	 mov	 eax, DWORD PTR _depth$[ebp]
  00179	50		 push	 eax
  0017a	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0017d	51		 push	 ecx
  0017e	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00181	52		 push	 edx
  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00187	8b 08		 mov	 ecx, DWORD PTR [eax]
  00189	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0018f	52		 push	 edx
  00190	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00193	ff d0		 call	 eax
  00195	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 1860 : 		
; 1861 : 		if( ret != DD_OK )

  0019b	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  001a2	74 21		 je	 SHORT $LN8@ddraw_chan

; 1862 : 		{
; 1863 : 			
; 1864 : 			debug_log ( "Unable to set display resolution: %s", get_ddraw_error_message ( ret ) );

  001a4	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  001b0	50		 push	 eax
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OLGMECBP@Unable?5to?5set?5display?5resolutio@
  001b6	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001bb	83 c4 08	 add	 esp, 8

; 1865 : 			
; 1866 : 			return ( FALSE );

  001be	33 c0		 xor	 eax, eax
  001c0	e9 dc 07 00 00	 jmp	 $LN4@ddraw_chan
$LN8@ddraw_chan:

; 1867 : 		}
; 1868 : 
; 1869 : 		//
; 1870 : 		// Free up the previous video mode's pointers
; 1871 : 		//
; 1872 : 
; 1873 : 		if ( ddraw.lpFrontBuffer )

  001c5	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  001cc	74 3c		 je	 SHORT $LN10@ddraw_chan

; 1874 : 		{
; 1875 : 
; 1876 : 			ret = IDirectDrawSurface7_Release ( ddraw.lpFrontBuffer );

  001ce	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  001d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d5	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  001db	52		 push	 edx
  001dc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001df	ff d0		 call	 eax
  001e1	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 1877 : 
; 1878 : 			if ( FAILED ( ret ) )

  001e7	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  001ee	7d 1a		 jge	 SHORT $LN10@ddraw_chan

; 1879 : 			{
; 1880 : 
; 1881 : 				debug_log ( "Unable to release old front buffer: %s", get_ddraw_error_message ( ret ) );

  001f0	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  001fc	50		 push	 eax
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NHHFNKMB@Unable?5to?5release?5old?5front?5buf@
  00202	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00207	83 c4 08	 add	 esp, 8
$LN10@ddraw_chan:

; 1882 : 			}
; 1883 : 		}
; 1884 : 
; 1885 : 		/*if ( ddraw.use_system_memory )
; 1886 : 		{
; 1887 : 
; 1888 : 			if ( ddraw.lpRenderBuffer )
; 1889 : 			{
; 1890 : 
; 1891 : 				ret = IDirectDrawSurface7_Release ( ddraw.lpRenderBuffer );
; 1892 : 
; 1893 : 				if ( FAILED ( ret ) )
; 1894 : 				{
; 1895 : 	
; 1896 : 					debug_log ( "Unable to release old front buffer: %s", get_ddraw_error_message ( ret ) );
; 1897 : 				}
; 1898 : 			}
; 1899 : 		}*/
; 1900 : 
; 1901 : 		//
; 1902 : 		// Set the buffer pointers
; 1903 : 		//
; 1904 : 
; 1905 : 		ddraw.lpFrontBuffer = NULL;

  0020a	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0

; 1906 : 		ddraw.lpBackBuffer = NULL;

  00214	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0

; 1907 : 		ddraw.lpRenderBuffer = NULL;

  0021e	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, 0

; 1908 : 		
; 1909 : 		//
; 1910 : 		// Create the primary surface
; 1911 : 		//
; 1912 : 
; 1913 : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  00228	6a 7c		 push	 124			; 0000007cH
  0022a	6a 00		 push	 0
  0022c	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 _memset
  00235	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1914 : 
; 1915 : 		ddsd.dwSize = sizeof ( ddsd );

  00238	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 1916 : 		
; 1917 : 		ddsd.dwFlags = DDSD_CAPS;

  0023f	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 1

; 1918 : 
; 1919 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_3DDEVICE;

  00246	c7 45 ec 00 22
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 8704 ; 00002200H

; 1920 : 
; 1921 : 		//if ( ddraw.use_double_buffer )
; 1922 : 		{
; 1923 : 			
; 1924 : 			ddsd.dwFlags |= DDSD_BACKBUFFERCOUNT;

  0024d	8b 45 88	 mov	 eax, DWORD PTR _ddsd$[ebp+4]
  00250	83 c8 20	 or	 eax, 32			; 00000020H
  00253	89 45 88	 mov	 DWORD PTR _ddsd$[ebp+4], eax

; 1925 : 			
; 1926 : 			ddsd.dwBackBufferCount = 1;

  00256	c7 45 98 01 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+20], 1

; 1927 : 			
; 1928 : 			ddsd.ddsCaps.dwCaps |= DDSCAPS_FLIP | DDSCAPS_COMPLEX;

  0025d	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  00260	83 c8 18	 or	 eax, 24			; 00000018H
  00263	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 1929 : 		}
; 1930 : 		
; 1931 : 		ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &ddraw.lpFrontBuffer, NULL);

  00266	6a 00		 push	 0
  00268	68 08 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+8
  0026d	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00270	50		 push	 eax
  00271	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00277	8b 11		 mov	 edx, DWORD PTR [ecx]
  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0027e	50		 push	 eax
  0027f	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00282	ff d1		 call	 ecx
  00284	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 1932 : 		
; 1933 : 		if ( ret != DD_OK )

  0028a	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00291	74 21		 je	 SHORT $LN11@ddraw_chan

; 1934 : 		{
; 1935 : 			
; 1936 : 			debug_log ( "Unable to create primary surface: %s", get_ddraw_error_message ( ret ) );

  00293	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0029f	50		 push	 eax
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PDIAAJFM@Unable?5to?5create?5primary?5surfac@
  002a5	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  002aa	83 c4 08	 add	 esp, 8

; 1937 : 			
; 1938 : 			return ( FALSE );

  002ad	33 c0		 xor	 eax, eax
  002af	e9 ed 06 00 00	 jmp	 $LN4@ddraw_chan
$LN11@ddraw_chan:

; 1939 : 		}
; 1940 : 
; 1941 : 		//if ( ddraw.use_double_buffer )
; 1942 : 		{
; 1943 : 			
; 1944 : 			//
; 1945 : 			// Get the back screen from this surface.
; 1946 : 			//
; 1947 : 
; 1948 : 			memset ( &caps, 0, sizeof ( caps ) );

  002b4	6a 10		 push	 16			; 00000010H
  002b6	6a 00		 push	 0
  002b8	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _caps$[ebp]
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 _memset
  002c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1949 : 
; 1950 : 			caps.dwCaps = DDSCAPS_BACKBUFFER;

  002c7	c7 85 74 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR _caps$[ebp], 4

; 1951 : 			
; 1952 : 			ret = IDirectDrawSurface7_GetAttachedSurface ( ddraw.lpFrontBuffer, &caps, &ddraw.lpBackBuffer );

  002d1	68 0c 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+12
  002d6	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _caps$[ebp]
  002dc	50		 push	 eax
  002dd	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  002e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e5	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  002ea	50		 push	 eax
  002eb	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  002ee	ff d1		 call	 ecx
  002f0	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 1953 : 			
; 1954 : 			if ( ret != DD_OK )

  002f6	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  002fd	74 21		 je	 SHORT $LN12@ddraw_chan

; 1955 : 			{
; 1956 : 				
; 1957 : 				debug_fatal ( "Unable to get backbuffer: %s", get_ddraw_error_message ( ret ) );

  002ff	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00305	50		 push	 eax
  00306	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0030b	50		 push	 eax
  0030c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NNDAPKJG@Unable?5to?5get?5backbuffer?3?5?$CFs@
  00311	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00316	83 c4 08	 add	 esp, 8

; 1958 : 				
; 1959 : 				return ( FALSE );

  00319	33 c0		 xor	 eax, eax
  0031b	e9 81 06 00 00	 jmp	 $LN4@ddraw_chan
$LN12@ddraw_chan:

; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 		/*if ( ddraw.use_system_memory )
; 1964 : 		{
; 1965 : 
; 1966 : 			//
; 1967 : 			// Create the system memory surface
; 1968 : 			//
; 1969 : 	
; 1970 : 			memset ( &ddsd, 0, sizeof ( ddsd ) );
; 1971 : 	
; 1972 : 			ddsd.dwSize = sizeof( ddsd );
; 1973 : 	
; 1974 : 			ret = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );
; 1975 : 
; 1976 : 			if ( FAILED ( ret ) )
; 1977 : 			{
; 1978 : 
; 1979 : 				debug_log ( "Unable to GetSurfaceDesc: %s", get_ddraw_error_message ( ret ) );
; 1980 : 			}
; 1981 : 
; 1982 : 			ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;
; 1983 : 	
; 1984 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_3DDEVICE | DDSCAPS_SYSTEMMEMORY;
; 1985 : 			
; 1986 : 			ddsd.dwHeight = height;
; 1987 : 			
; 1988 : 			ddsd.dwWidth = width;
; 1989 : 			
; 1990 : 			ret = IDirectDraw7_CreateSurface ( ddraw.ddraw , &ddsd, &ddraw.lpRenderBuffer, NULL );
; 1991 : 			
; 1992 : 			if ( ret != DD_OK )
; 1993 : 			{
; 1994 : 				
; 1995 : 				debug_fatal ( "Unable to create system memory surface: %s", get_ddraw_error_message ( ret ) );
; 1996 : 				
; 1997 : 				return ( FALSE );
; 1998 : 			}
; 1999 : 		}
; 2000 : 		else*/
; 2001 : 		{
; 2002 : 
; 2003 : 			//
; 2004 : 			// Set the render buffer
; 2005 : 			//
; 2006 : 
; 2007 : 			//if ( ddraw.use_double_buffer )
; 2008 : 			{
; 2009 : 
; 2010 : 				ddraw.lpRenderBuffer = ddraw.lpBackBuffer;

  00320	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00325	a3 10 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, eax

; 2011 : 			}
; 2012 : 			/*else
; 2013 : 			{
; 2014 : 	
; 2015 : 				ddraw.lpRenderBuffer = ddraw.lpFrontBuffer;
; 2016 : 			}*/
; 2017 : 		}
; 2018 : 		
; 2019 : 		//if ( ddraw.use_z_buffer )
; 2020 : 		{
; 2021 : 
; 2022 : 			//
; 2023 : 			// Create the zbuffer and attach it to the render buffer.
; 2024 : 			//
; 2025 : 
; 2026 : 			memset ( &ddsd, 0, sizeof ( ddsd ) );

  0032a	6a 7c		 push	 124			; 0000007cH
  0032c	6a 00		 push	 0
  0032e	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 _memset
  00337	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2027 : 	
; 2028 : 			ddsd.dwSize = sizeof ( ddsd );

  0033a	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 2029 : 	
; 2030 : 			ret = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );

  00341	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00344	50		 push	 eax
  00345	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0034b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0034d	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00352	50		 push	 eax
  00353	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00356	ff d1		 call	 ecx
  00358	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2031 : 
; 2032 : 			if ( FAILED ( ret ) )

  0035e	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00365	7d 1a		 jge	 SHORT $LN13@ddraw_chan

; 2033 : 			{
; 2034 : 
; 2035 : 				debug_log ( "Unable to GetSurfaceDesc: %s", get_ddraw_error_message ( ret ) );

  00367	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00373	50		 push	 eax
  00374	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DHJONCNN@Unable?5to?5GetSurfaceDesc?3?5?$CFs@
  00379	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0037e	83 c4 08	 add	 esp, 8
$LN13@ddraw_chan:

; 2036 : 			}
; 2037 : 			
; 2038 : 			ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  00381	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 2039 : 	
; 2040 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER | DDSCAPS_VIDEOMEMORY;

  00388	c7 45 ec 00 40
	02 00		 mov	 DWORD PTR _ddsd$[ebp+104], 147456 ; 00024000H

; 2041 : 			
; 2042 : 			ddsd.dwHeight = height;

  0038f	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00392	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 2043 : 			
; 2044 : 			ddsd.dwWidth = width;

  00395	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00398	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 2045 : 
; 2046 : 			//
; 2047 : 			// Set zbuffer pixel format
; 2048 : 			//
; 2049 : 
; 2050 : 			get_ddraw_zbuffer_pixel_format ( &ddsd.ddpfPixelFormat );

  0039b	8d 45 cc	 lea	 eax, DWORD PTR _ddsd$[ebp+72]
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 ?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ; get_ddraw_zbuffer_pixel_format

; 2051 : 
; 2052 : //			ddsd.ddpfPixelFormat.dwSize = sizeof ( ddsd.ddpfPixelFormat );
; 2053 : //			ddsd.ddpfPixelFormat.dwFlags = DDPF_ZBUFFER;
; 2054 : //			ddsd.ddpfPixelFormat.dwZBufferBitDepth = depth;
; 2055 : 
; 2056 : 			ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &ddraw.lpZBuffer, NULL );

  003a4	6a 00		 push	 0
  003a6	68 14 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+20
  003ab	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  003ae	50		 push	 eax
  003af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  003b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  003b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  003bc	50		 push	 eax
  003bd	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  003c0	ff d1		 call	 ecx
  003c2	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2057 : 			
; 2058 : 			if ( ret != DD_OK )

  003c8	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  003cf	74 21		 je	 SHORT $LN14@ddraw_chan

; 2059 : 			{
; 2060 : 				
; 2061 : 				debug_fatal ( "Unable to create Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  003d1	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  003d7	50		 push	 eax
  003d8	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  003dd	50		 push	 eax
  003de	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
  003e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  003e8	83 c4 08	 add	 esp, 8

; 2062 : 				
; 2063 : 				return ( FALSE );

  003eb	33 c0		 xor	 eax, eax
  003ed	e9 af 05 00 00	 jmp	 $LN4@ddraw_chan
$LN14@ddraw_chan:

; 2064 : 			}
; 2065 : 
; 2066 : 			ret = IDirectDrawSurface7_AddAttachedSurface ( ddraw.lpRenderBuffer, ddraw.lpZBuffer );

  003f2	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  003f7	50		 push	 eax
  003f8	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  003fe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00400	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00405	50		 push	 eax
  00406	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00409	ff d1		 call	 ecx
  0040b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2067 : 
; 2068 : 			if ( ret != DD_OK )

  00411	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00418	74 21		 je	 SHORT $LN15@ddraw_chan

; 2069 : 			{
; 2070 : 
; 2071 : 				debug_fatal ( "Unable to attach Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  0041a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00420	50		 push	 eax
  00421	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00426	50		 push	 eax
  00427	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
  0042c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00431	83 c4 08	 add	 esp, 8

; 2072 : 				
; 2073 : 				return ( FALSE );

  00434	33 c0		 xor	 eax, eax
  00436	e9 66 05 00 00	 jmp	 $LN4@ddraw_chan
$LN15@ddraw_chan:

; 2074 : 			}
; 2075 : 
; 2076 : 			zbuffer_target_surface = ddraw.lpRenderBuffer;

  0043b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00440	a3 00 00 00 00	 mov	 DWORD PTR ?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A, eax ; zbuffer_target_surface

; 2077 : 		}
; 2078 : 
; 2079 : 		//
; 2080 : 		// Recreate d3d's managed surfaces
; 2081 : 		//
; 2082 : 
; 2083 : 		ret = IDirectDraw7_RestoreAllSurfaces ( ddraw.ddraw );

  00445	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0044a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00452	52		 push	 edx
  00453	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00456	ff d0		 call	 eax
  00458	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2084 : 
; 2085 : 		if ( FAILED ( ret ) )

  0045e	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00465	7d 1a		 jge	 SHORT $LN16@ddraw_chan

; 2086 : 		{
; 2087 : 
; 2088 : 			debug_log ( "Unable to RestoreAllSurface: %s", get_ddraw_error_message ( ret ) );

  00467	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  0046d	50		 push	 eax
  0046e	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00473	50		 push	 eax
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MMNDKLML@Unable?5to?5RestoreAllSurface?3?5?$CFs@
  00479	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0047e	83 c4 08	 add	 esp, 8
$LN16@ddraw_chan:

; 2089 : 		}
; 2090 : 
; 2091 : 		//
; 2092 : 		// Create the screen associated with the render buffer ( video_screen )
; 2093 : 		//
; 2094 : 
; 2095 : 		create_video_screen ( width, height, ddraw.lpRenderBuffer );

  00481	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00486	50		 push	 eax
  00487	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0048a	51		 push	 ecx
  0048b	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0048e	52		 push	 edx
  0048f	e8 00 00 00 00	 call	 ?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z ; create_video_screen

; 2096 : 
; 2097 : 		//
; 2098 : 		// As we're in fullscreen mode, we have just wiped out all the d3d devices & hardware textures, recreate them
; 2099 : 		//
; 2100 : 
; 2101 : 		d3d_data.recreate_d3d = TRUE;

  00494	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+16, 1

; 2102 : 
; 2103 : 		return ( TRUE );

  0049e	b8 01 00 00 00	 mov	 eax, 1
  004a3	e9 f9 04 00 00	 jmp	 $LN4@ddraw_chan

; 2104 : 	}
; 2105 : 	else

  004a8	e9 f4 04 00 00	 jmp	 $LN4@ddraw_chan
$LN3@ddraw_chan:

; 2106 : 	{
; 2107 : 		
; 2108 : 		//
; 2109 : 		// Position the window properly
; 2110 : 		//
; 2111 : 		
; 2112 : 		rc.top = 0;

  004ad	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rc$[ebp+4], 0

; 2113 : 		rc.left = 0;

  004b7	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rc$[ebp], 0

; 2114 : 		rc.bottom = height;

  004c1	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  004c4	89 85 6c ff ff
	ff		 mov	 DWORD PTR _rc$[ebp+12], eax

; 2115 : 		rc.right = width;

  004ca	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  004cd	89 85 68 ff ff
	ff		 mov	 DWORD PTR _rc$[ebp+8], eax

; 2116 : 		
; 2117 : 		AdjustWindowRectEx ( &rc, GetWindowStyle ( application_window), GetMenu ( application_window) != NULL, GetWindowExStyle ( application_window ) );

  004d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  004d8	50		 push	 eax
  004d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenu@4
  004df	85 c0		 test	 eax, eax
  004e1	74 0c		 je	 SHORT $LN32@ddraw_chan
  004e3	c7 85 04 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv290[ebp], 1
  004ed	eb 0a		 jmp	 SHORT $LN33@ddraw_chan
$LN32@ddraw_chan:
  004ef	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv290[ebp], 0
$LN33@ddraw_chan:
  004f9	6a ec		 push	 -20			; ffffffecH
  004fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00501	51		 push	 ecx
  00502	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00508	50		 push	 eax
  00509	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv290[ebp]
  0050f	52		 push	 edx
  00510	6a f0		 push	 -16			; fffffff0H
  00512	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00517	50		 push	 eax
  00518	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0051e	50		 push	 eax
  0051f	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _rc$[ebp]
  00525	51		 push	 ecx
  00526	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustWindowRectEx@16

; 2118 : 		SetWindowPos ( application_window, NULL, 0, 0, rc.right-rc.left, rc.bottom-rc.top, SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);

  0052c	6a 16		 push	 22			; 00000016H
  0052e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp+12]
  00534	2b 85 64 ff ff
	ff		 sub	 eax, DWORD PTR _rc$[ebp+4]
  0053a	50		 push	 eax
  0053b	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _rc$[ebp+8]
  00541	2b 8d 60 ff ff
	ff		 sub	 ecx, DWORD PTR _rc$[ebp]
  00547	51		 push	 ecx
  00548	6a 00		 push	 0
  0054a	6a 00		 push	 0
  0054c	6a 00		 push	 0
  0054e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00554	52		 push	 edx
  00555	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 2119 : 		SetWindowPos ( application_window, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_NOACTIVATE );

  0055b	6a 13		 push	 19			; 00000013H
  0055d	6a 00		 push	 0
  0055f	6a 00		 push	 0
  00561	6a 00		 push	 0
  00563	6a 00		 push	 0
  00565	6a fe		 push	 -2			; fffffffeH
  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0056c	50		 push	 eax
  0056d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 2120 : 		
; 2121 : 		//
; 2122 : 		// Make sure window does not hang off the screen
; 2123 : 		//
; 2124 : 		
; 2125 : 		SystemParametersInfo ( SPI_GETWORKAREA, 0, &rcWork, 0 );

  00573	6a 00		 push	 0
  00575	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _rcWork$[ebp]
  0057b	50		 push	 eax
  0057c	6a 00		 push	 0
  0057e	6a 30		 push	 48			; 00000030H
  00580	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 2126 : 		
; 2127 : 		GetWindowRect ( application_window, &rc );

  00586	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _rc$[ebp]
  0058c	50		 push	 eax
  0058d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00593	51		 push	 ecx
  00594	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 2128 : 		
; 2129 : 		if ( rc.left < rcWork.left )

  0059a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp]
  005a0	3b 85 50 ff ff
	ff		 cmp	 eax, DWORD PTR _rcWork$[ebp]
  005a6	7d 0c		 jge	 SHORT $LN17@ddraw_chan

; 2130 : 		{
; 2131 : 			
; 2132 : 			rc.left = rcWork.left;

  005a8	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _rcWork$[ebp]
  005ae	89 85 60 ff ff
	ff		 mov	 DWORD PTR _rc$[ebp], eax
$LN17@ddraw_chan:

; 2133 : 		}
; 2134 : 		
; 2135 : 		if ( rc.top  < rcWork.top )

  005b4	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp+4]
  005ba	3b 85 54 ff ff
	ff		 cmp	 eax, DWORD PTR _rcWork$[ebp+4]
  005c0	7d 0c		 jge	 SHORT $LN18@ddraw_chan

; 2136 : 		{
; 2137 : 			
; 2138 : 			rc.top  = rcWork.top;

  005c2	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _rcWork$[ebp+4]
  005c8	89 85 64 ff ff
	ff		 mov	 DWORD PTR _rc$[ebp+4], eax
$LN18@ddraw_chan:

; 2139 : 		}
; 2140 : 		
; 2141 : 		SetWindowPos ( application_window, NULL, rc.left, rc.top, 0, 0, SWP_NOSIZE | SWP_NOZORDER | SWP_NOACTIVATE );

  005ce	6a 15		 push	 21			; 00000015H
  005d0	6a 00		 push	 0
  005d2	6a 00		 push	 0
  005d4	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp+4]
  005da	50		 push	 eax
  005db	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _rc$[ebp]
  005e1	51		 push	 ecx
  005e2	6a 00		 push	 0
  005e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  005ea	52		 push	 edx
  005eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 2142 : 		
; 2143 : 		//
; 2144 : 		// No need to create the primary surface - the old one will suffice
; 2145 : 		//
; 2146 : 
; 2147 : 		//
; 2148 : 		// Release the old secondary surface, clipper, zbuffer
; 2149 : 		//
; 2150 : 
; 2151 : 		if ( ddraw.lpClipper )

  005f1	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24, 0
  005f8	74 32		 je	 SHORT $LN19@ddraw_chan

; 2152 : 		{
; 2153 : 
; 2154 : 			//
; 2155 : 			// Detach it from the primary screen
; 2156 : 			//
; 2157 : 
; 2158 : 			IDirectDrawSurface7_SetClipper ( ddraw.lpFrontBuffer, NULL );

  005fa	6a 00		 push	 0
  005fc	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00601	8b 08		 mov	 ecx, DWORD PTR [eax]
  00603	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00609	52		 push	 edx
  0060a	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  0060d	ff d0		 call	 eax

; 2159 : 
; 2160 : 			IDirectDrawClipper_Release ( ddraw.lpClipper );

  0060f	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  00614	8b 08		 mov	 ecx, DWORD PTR [eax]
  00616	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  0061c	52		 push	 edx
  0061d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00620	ff d0		 call	 eax

; 2161 : 
; 2162 : 			ddraw.lpClipper = NULL;

  00622	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24, 0
$LN19@ddraw_chan:

; 2163 : 		}
; 2164 : 
; 2165 : 		//
; 2166 : 		// Remove the ZBuffer
; 2167 : 		//
; 2168 : 
; 2169 : 		if ( ddraw.lpZBuffer )

  0062c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20, 0
  00633	74 61		 je	 SHORT $LN20@ddraw_chan

; 2170 : 		{
; 2171 : 
; 2172 : 			HRESULT
; 2173 : 				ret;
; 2174 : 
; 2175 : 			ret = IDirectDrawSurface7_DeleteAttachedSurface ( ddraw.lpRenderBuffer, 0, ddraw.lpZBuffer );

  00635	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  0063a	50		 push	 eax
  0063b	6a 00		 push	 0
  0063d	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00643	8b 11		 mov	 edx, DWORD PTR [ecx]
  00645	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  0064a	50		 push	 eax
  0064b	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  0064e	ff d1		 call	 ecx
  00650	89 85 48 ff ff
	ff		 mov	 DWORD PTR _ret$1[ebp], eax

; 2176 : 
; 2177 : 			if ( ret != DD_OK )

  00656	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _ret$1[ebp], 0
  0065d	74 1a		 je	 SHORT $LN21@ddraw_chan

; 2178 : 			{
; 2179 : 
; 2180 : 				debug_log ( "Unable to delete the zbuffer from the render buffer: %s", get_ddraw_error_message ( ret ) );

  0065f	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _ret$1[ebp]
  00665	50		 push	 eax
  00666	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0066b	50		 push	 eax
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PLBGCAHN@Unable?5to?5delete?5the?5zbuffer?5fr@
  00671	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00676	83 c4 08	 add	 esp, 8
$LN21@ddraw_chan:

; 2181 : 			}
; 2182 : 
; 2183 : 			IDirectDrawSurface7_Release ( ddraw.lpZBuffer );

  00679	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  0067e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00680	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  00686	52		 push	 edx
  00687	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0068a	ff d0		 call	 eax

; 2184 : 
; 2185 : 			ddraw.lpZBuffer = NULL;

  0068c	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20, 0
$LN20@ddraw_chan:

; 2186 : 		}
; 2187 : 
; 2188 : 		//
; 2189 : 		// Remove the back buffer/renderbuffer
; 2190 : 		//
; 2191 : 
; 2192 : 		if ( ddraw.lpBackBuffer )

  00696	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0069d	74 27		 je	 SHORT $LN22@ddraw_chan

; 2193 : 		{
; 2194 : 
; 2195 : 			IDirectDrawSurface7_Release ( ddraw.lpBackBuffer );

  0069f	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  006a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  006a6	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  006ac	52		 push	 edx
  006ad	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  006b0	ff d0		 call	 eax

; 2196 : 
; 2197 : 			ddraw.lpBackBuffer = NULL;

  006b2	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0

; 2198 : 
; 2199 : 			ddraw.lpRenderBuffer = NULL;

  006bc	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, 0
$LN22@ddraw_chan:

; 2200 : 		}
; 2201 : 		
; 2202 : 		//
; 2203 : 		// Create the secondary surface
; 2204 : 		//
; 2205 : 
; 2206 : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  006c6	6a 7c		 push	 124			; 0000007cH
  006c8	6a 00		 push	 0
  006ca	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  006cd	50		 push	 eax
  006ce	e8 00 00 00 00	 call	 _memset
  006d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2207 : 
; 2208 : 		ddsd.dwSize = sizeof( ddsd );

  006d6	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 2209 : 
; 2210 : 		ret = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );

  006dd	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  006e0	50		 push	 eax
  006e1	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  006e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  006e9	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  006ee	50		 push	 eax
  006ef	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  006f2	ff d1		 call	 ecx
  006f4	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2211 : 
; 2212 : 		if ( FAILED ( ret ) )

  006fa	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00701	7d 1a		 jge	 SHORT $LN23@ddraw_chan

; 2213 : 		{
; 2214 : 
; 2215 : 			debug_log ( "Unable to GetSurfaceDesc: %s", get_ddraw_error_message ( ret ) );

  00703	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00709	50		 push	 eax
  0070a	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0070f	50		 push	 eax
  00710	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DHJONCNN@Unable?5to?5GetSurfaceDesc?3?5?$CFs@
  00715	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0071a	83 c4 08	 add	 esp, 8
$LN23@ddraw_chan:

; 2216 : 		}
; 2217 : 		
; 2218 : 		ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  0071d	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 2219 : 
; 2220 : 		/*if ( ddraw.use_system_memory )
; 2221 : 		{
; 2222 : 
; 2223 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_3DDEVICE | DDSCAPS_SYSTEMMEMORY;
; 2224 : 		}
; 2225 : 		else*/
; 2226 : 		{
; 2227 : 
; 2228 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_3DDEVICE;

  00724	c7 45 ec 40 20
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 8256 ; 00002040H

; 2229 : 		}
; 2230 : 		
; 2231 : 		ddsd.dwHeight = height;

  0072b	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0072e	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 2232 : 		
; 2233 : 		ddsd.dwWidth = width;

  00731	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00734	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 2234 : 		
; 2235 : 		ret = IDirectDraw7_CreateSurface ( ddraw.ddraw , &ddsd, &ddraw.lpBackBuffer, NULL );

  00737	6a 00		 push	 0
  00739	68 0c 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+12
  0073e	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00741	50		 push	 eax
  00742	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00748	8b 11		 mov	 edx, DWORD PTR [ecx]
  0074a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0074f	50		 push	 eax
  00750	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00753	ff d1		 call	 ecx
  00755	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2236 : 		
; 2237 : 		if ( ret != DD_OK )

  0075b	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00762	74 21		 je	 SHORT $LN24@ddraw_chan

; 2238 : 		{
; 2239 : 			
; 2240 : 			debug_log ( "Unable to create secondary surface: %s", get_ddraw_error_message ( ret ) );

  00764	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  0076a	50		 push	 eax
  0076b	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00770	50		 push	 eax
  00771	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CCBKEALA@Unable?5to?5create?5secondary?5surf@
  00776	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0077b	83 c4 08	 add	 esp, 8

; 2241 : 			
; 2242 : 			return ( FALSE );

  0077e	33 c0		 xor	 eax, eax
  00780	e9 1c 02 00 00	 jmp	 $LN4@ddraw_chan
$LN24@ddraw_chan:

; 2243 : 		}
; 2244 : 
; 2245 : 		//
; 2246 : 		// Set render surface
; 2247 : 		//
; 2248 : 
; 2249 : 		ddraw.lpRenderBuffer = ddraw.lpBackBuffer;

  00785	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  0078a	a3 10 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, eax

; 2250 : 		
; 2251 : 		//
; 2252 : 		// If needed, create the zbuffer and attach it to the render buffer.
; 2253 : 		//
; 2254 : 
; 2255 : 		//if ( ddraw.use_z_buffer )
; 2256 : 		{
; 2257 : 
; 2258 : 			memset ( &ddsd, 0, sizeof ( ddsd ) );

  0078f	6a 7c		 push	 124			; 0000007cH
  00791	6a 00		 push	 0
  00793	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00796	50		 push	 eax
  00797	e8 00 00 00 00	 call	 _memset
  0079c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2259 : 	
; 2260 : 			ddsd.dwSize = sizeof( ddsd );

  0079f	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 2261 : 	
; 2262 : 			ret = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );

  007a6	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  007a9	50		 push	 eax
  007aa	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  007b0	8b 11		 mov	 edx, DWORD PTR [ecx]
  007b2	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  007b7	50		 push	 eax
  007b8	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  007bb	ff d1		 call	 ecx
  007bd	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2263 : 	
; 2264 : 			if ( FAILED ( ret ) )

  007c3	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  007ca	7d 1a		 jge	 SHORT $LN25@ddraw_chan

; 2265 : 			{
; 2266 : 	
; 2267 : 				debug_log ( "Unable to GetSurfaceDesc: %s", get_ddraw_error_message ( ret ) );

  007cc	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  007d2	50		 push	 eax
  007d3	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  007d8	50		 push	 eax
  007d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DHJONCNN@Unable?5to?5GetSurfaceDesc?3?5?$CFs@
  007de	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  007e3	83 c4 08	 add	 esp, 8
$LN25@ddraw_chan:

; 2268 : 			}
; 2269 : 			
; 2270 : 			ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  007e6	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 2271 : 	
; 2272 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER | DDSCAPS_VIDEOMEMORY;

  007ed	c7 45 ec 00 40
	02 00		 mov	 DWORD PTR _ddsd$[ebp+104], 147456 ; 00024000H

; 2273 : 			
; 2274 : 			ddsd.dwHeight = height;

  007f4	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  007f7	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 2275 : 			
; 2276 : 			ddsd.dwWidth = width;

  007fa	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  007fd	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 2277 : 			
; 2278 : 			get_ddraw_zbuffer_pixel_format ( &ddsd.ddpfPixelFormat );

  00800	8d 45 cc	 lea	 eax, DWORD PTR _ddsd$[ebp+72]
  00803	50		 push	 eax
  00804	e8 00 00 00 00	 call	 ?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ; get_ddraw_zbuffer_pixel_format

; 2279 : 
; 2280 : //			ddsd.ddpfPixelFormat.dwSize = sizeof ( ddsd.ddpfPixelFormat );
; 2281 : //			ddsd.ddpfPixelFormat.dwFlags = DDPF_ZBUFFER;
; 2282 : //			ddsd.ddpfPixelFormat.dwZBufferBitDepth = depth;
; 2283 : 
; 2284 : 			ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &ddraw.lpZBuffer, NULL );

  00809	6a 00		 push	 0
  0080b	68 14 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+20
  00810	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00813	50		 push	 eax
  00814	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0081a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0081c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00821	50		 push	 eax
  00822	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00825	ff d1		 call	 ecx
  00827	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2285 : 			
; 2286 : 			if ( ret != DD_OK )

  0082d	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00834	74 21		 je	 SHORT $LN26@ddraw_chan

; 2287 : 			{
; 2288 : 				
; 2289 : 				debug_fatal ( "Unable to create Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  00836	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  0083c	50		 push	 eax
  0083d	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00842	50		 push	 eax
  00843	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
  00848	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0084d	83 c4 08	 add	 esp, 8

; 2290 : 				
; 2291 : 				return ( FALSE );

  00850	33 c0		 xor	 eax, eax
  00852	e9 4a 01 00 00	 jmp	 $LN4@ddraw_chan
$LN26@ddraw_chan:

; 2292 : 			}
; 2293 : 
; 2294 : 			ret = IDirectDrawSurface7_AddAttachedSurface ( ddraw.lpRenderBuffer, ddraw.lpZBuffer );

  00857	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  0085c	50		 push	 eax
  0085d	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00863	8b 11		 mov	 edx, DWORD PTR [ecx]
  00865	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  0086a	50		 push	 eax
  0086b	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0086e	ff d1		 call	 ecx
  00870	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2295 : 
; 2296 : 			if ( ret != DD_OK )

  00876	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  0087d	74 21		 je	 SHORT $LN27@ddraw_chan

; 2297 : 			{
; 2298 : 
; 2299 : 				debug_fatal ( "Unable to attach Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  0087f	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00885	50		 push	 eax
  00886	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0088b	50		 push	 eax
  0088c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
  00891	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00896	83 c4 08	 add	 esp, 8

; 2300 : 				
; 2301 : 				return ( FALSE );

  00899	33 c0		 xor	 eax, eax
  0089b	e9 01 01 00 00	 jmp	 $LN4@ddraw_chan
$LN27@ddraw_chan:

; 2302 : 			}
; 2303 : 
; 2304 : 			zbuffer_target_surface = ddraw.lpRenderBuffer;

  008a0	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  008a5	a3 00 00 00 00	 mov	 DWORD PTR ?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A, eax ; zbuffer_target_surface

; 2305 : 		}
; 2306 : 
; 2307 : 		//
; 2308 : 		// now create a DirectDrawClipper object.
; 2309 : 		//
; 2310 : 		
; 2311 : 		ret = IDirectDraw7_CreateClipper ( ddraw.ddraw, 0, &ddraw.lpClipper, NULL);

  008aa	6a 00		 push	 0
  008ac	68 18 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+24
  008b1	6a 00		 push	 0
  008b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  008b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  008ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  008c0	52		 push	 edx
  008c1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  008c4	ff d0		 call	 eax
  008c6	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2312 : 		
; 2313 : 		if ( ret != DD_OK )

  008cc	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  008d3	74 21		 je	 SHORT $LN28@ddraw_chan

; 2314 : 		{
; 2315 : 			
; 2316 : 			debug_log ( "Unable to create clipper: %s", get_ddraw_error_message ( ret ) );

  008d5	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  008db	50		 push	 eax
  008dc	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  008e1	50		 push	 eax
  008e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JIKBJCFH@Unable?5to?5create?5clipper?3?5?$CFs@
  008e7	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  008ec	83 c4 08	 add	 esp, 8

; 2317 : 			
; 2318 : 			return ( FALSE );

  008ef	33 c0		 xor	 eax, eax
  008f1	e9 ab 00 00 00	 jmp	 $LN4@ddraw_chan
$LN28@ddraw_chan:

; 2319 : 		}
; 2320 : 
; 2321 : 		ret = IDirectDrawClipper_SetHWnd ( ddraw.lpClipper, 0, application_window );

  008f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  008fb	50		 push	 eax
  008fc	6a 00		 push	 0
  008fe	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  00904	8b 11		 mov	 edx, DWORD PTR [ecx]
  00906	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  0090b	50		 push	 eax
  0090c	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  0090f	ff d1		 call	 ecx
  00911	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2322 : 		
; 2323 : 		if ( ret != DD_OK )

  00917	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  0091e	74 1e		 je	 SHORT $LN29@ddraw_chan

; 2324 : 		{
; 2325 : 			
; 2326 : 			debug_log ( "Unable to set clipper to a window: %s", get_ddraw_error_message ( ret ) );

  00920	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  00926	50		 push	 eax
  00927	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0092c	50		 push	 eax
  0092d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EJCPILFH@Unable?5to?5set?5clipper?5to?5a?5wind@
  00932	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00937	83 c4 08	 add	 esp, 8

; 2327 : 			
; 2328 : 			return ( FALSE );

  0093a	33 c0		 xor	 eax, eax
  0093c	eb 63		 jmp	 SHORT $LN4@ddraw_chan
$LN29@ddraw_chan:

; 2329 : 		}
; 2330 : 		
; 2331 : 		ret = IDirectDrawSurface7_SetClipper ( ddraw.lpFrontBuffer, ddraw.lpClipper);

  0093e	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  00943	50		 push	 eax
  00944	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0094a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0094c	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00951	50		 push	 eax
  00952	8b 4a 70	 mov	 ecx, DWORD PTR [edx+112]
  00955	ff d1		 call	 ecx
  00957	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 2332 : 		
; 2333 : 		if ( ret != DD_OK )

  0095d	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00964	74 1e		 je	 SHORT $LN30@ddraw_chan

; 2334 : 		{
; 2335 : 			
; 2336 : 			debug_log ( "Unable to set clipper to the primary surface: %s", get_ddraw_error_message ( ret ) );

  00966	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]
  0096c	50		 push	 eax
  0096d	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00972	50		 push	 eax
  00973	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KAFIGAEM@Unable?5to?5set?5clipper?5to?5the?5pr@
  00978	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0097d	83 c4 08	 add	 esp, 8

; 2337 : 			
; 2338 : 			return ( FALSE );

  00980	33 c0		 xor	 eax, eax
  00982	eb 1d		 jmp	 SHORT $LN4@ddraw_chan
$LN30@ddraw_chan:

; 2339 : 		}
; 2340 : 
; 2341 : 		//
; 2342 : 		// Create the screen associated with the render buffer ( video_screen )
; 2343 : 		//
; 2344 : 
; 2345 : 		create_video_screen ( width, height, ddraw.lpRenderBuffer );

  00984	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00989	50		 push	 eax
  0098a	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0098d	51		 push	 ecx
  0098e	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00991	52		 push	 edx
  00992	e8 00 00 00 00	 call	 ?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z ; create_video_screen

; 2346 : 
; 2347 : 		//
; 2348 : 		// Now we need to alter the render target of the 3d system
; 2349 : 		//
; 2350 : 
; 2351 : 		d3d_render_target_recreated ();

  00997	e8 00 00 00 00	 call	 ?d3d_render_target_recreated@@YGXXZ ; d3d_render_target_recreated

; 2352 : 
; 2353 : 		return ( TRUE );

  0099c	b8 01 00 00 00	 mov	 eax, 1
$LN4@ddraw_chan:

; 2354 : 	}
; 2355 : }

  009a1	5f		 pop	 edi
  009a2	5e		 pop	 esi
  009a3	5b		 pop	 ebx
  009a4	8b e5		 mov	 esp, ebp
  009a6	5d		 pop	 ebp
  009a7	c2 0c 00	 ret	 12			; 0000000cH
?ddraw_change_display_resolution@@YGHHHH@Z ENDP		; ddraw_change_display_resolution
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z
_TEXT	SEGMENT
tv262 = -384						; size = 4
tv70 = -384						; size = 4
_rect$1 = -316						; size = 16
_fx$2 = -300						; size = 100
_parms$3 = -200						; size = 12
_coop_level$4 = -188					; size = 4
_windowed$ = -184					; size = 4
_dwStyle$ = -180					; size = 4
_rcWork$ = -176						; size = 16
_rc$ = -160						; size = 16
_ddrval$ = -144						; size = 4
_caps$ = -140						; size = 16
_ddsd$ = -124						; size = 124
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_depth$ = 16						; size = 4
_display_type$ = 20					; size = 4
?ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z PROC ; ddraw_set_display_resolution, COMDAT

; 1152 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1153 : 
; 1154 : 	DDSURFACEDESC2
; 1155 : 		ddsd;
; 1156 : 	
; 1157 : 	DDSCAPS2
; 1158 : 		caps;
; 1159 : 	
; 1160 : 	HRESULT
; 1161 : 		ddrval;
; 1162 : 	
; 1163 : 	RECT
; 1164 : 		rc,
; 1165 : 		rcWork;
; 1166 : 	
; 1167 : 	DWORD
; 1168 : 		dwStyle;
; 1169 : 
; 1170 : 	BOOL
; 1171 : 		windowed;
; 1172 : 	
; 1173 : 	ASSERT ( get_graphics_system_initialised () );

  0000c	e8 00 00 00 00	 call	 ?get_graphics_system_initialised@@YGHXZ ; get_graphics_system_initialised
  00011	85 c0		 test	 eax, eax
  00013	75 18		 jne	 SHORT $LN4@ddraw_set_
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z@4JA
  0001a	83 c0 15	 add	 eax, 21			; 00000015H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@ddraw_set_:

; 1174 : 
; 1175 : 	switch ( display_type )

  0002d	8b 45 14	 mov	 eax, DWORD PTR _display_type$[ebp]
  00030	89 85 80 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00036	83 bd 80 fe ff
	ff 01		 cmp	 DWORD PTR tv70[ebp], 1
  0003d	74 0b		 je	 SHORT $LN5@ddraw_set_
  0003f	83 bd 80 fe ff
	ff 02		 cmp	 DWORD PTR tv70[ebp], 2
  00046	74 0e		 je	 SHORT $LN6@ddraw_set_
  00048	eb 18		 jmp	 SHORT $LN7@ddraw_set_
$LN5@ddraw_set_:

; 1176 : 	{
; 1177 : 
; 1178 : 		case DISPLAY_WINDOW:
; 1179 : 		{
; 1180 : 
; 1181 : 			windowed = TRUE;

  0004a	c7 85 48 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _windowed$[ebp], 1

; 1182 : 
; 1183 : 			break;

  00054	eb 19		 jmp	 SHORT $LN2@ddraw_set_
$LN6@ddraw_set_:

; 1184 : 		}
; 1185 : 
; 1186 : 		case DISPLAY_FULLSCREEN:
; 1187 : 		{
; 1188 : 
; 1189 : 			windowed = FALSE;

  00056	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _windowed$[ebp], 0

; 1190 : 
; 1191 : 			break;

  00060	eb 0d		 jmp	 SHORT $LN2@ddraw_set_
$LN7@ddraw_set_:

; 1192 : 		}
; 1193 : 
; 1194 : 		default:
; 1195 : 		{
; 1196 : 
; 1197 : 			debug_fatal ( "Unknown window status passed to set_display_resolution" );

  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@CBGPFDID@Unknown?5window?5status?5passed?5to@
  00067	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0006c	83 c4 04	 add	 esp, 4
$LN2@ddraw_set_:

; 1198 : 
; 1199 : 			break;
; 1200 : 		}
; 1201 : 	}
; 1202 : 	
; 1203 : 	application_video_height = height;

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00072	a3 00 00 00 00	 mov	 DWORD PTR ?application_video_height@@3HA, eax ; application_video_height

; 1204 : 
; 1205 : 	application_video_width = width;

  00077	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0007a	a3 00 00 00 00	 mov	 DWORD PTR ?application_video_width@@3HA, eax ; application_video_width

; 1206 : 
; 1207 : 	application_video_colourdepth = depth;

  0007f	8b 45 10	 mov	 eax, DWORD PTR _depth$[ebp]
  00082	a3 00 00 00 00	 mov	 DWORD PTR ?application_video_colourdepth@@3HA, eax ; application_video_colourdepth

; 1208 : 	
; 1209 : 	ddraw.application_windowed = windowed;

  00087	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _windowed$[ebp]
  0008d	a3 1c 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, eax

; 1210 : 
; 1211 : 	set_viewport ( 0, 0, ( ( ( float ) width ) - 0.001 ), ( ( ( float ) height ) - 0.001 ) );

  00092	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _height$[ebp]
  00097	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0009b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a7	51		 push	 ecx
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _width$[ebp]
  000b2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c2	51		 push	 ecx
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	0f 57 c0	 xorps	 xmm0, xmm0
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	51		 push	 ecx
  000d2	0f 57 c0	 xorps	 xmm0, xmm0
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	e8 00 00 00 00	 call	 ?set_viewport@@YGXMMMM@Z ; set_viewport

; 1212 : 	
; 1213 : 	if ( !windowed )

  000df	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _windowed$[ebp], 0
  000e6	0f 85 2e 03 00
	00		 jne	 $LN8@ddraw_set_

; 1214 : 	{
; 1215 : 		
; 1216 : 		//
; 1217 : 		// Set the cooperative mode settings.
; 1218 : 		//
; 1219 : 	
; 1220 : 		//mue 070223 cooperative level must be set by the same thread that created the application window
; 1221 : 		ddraw_cooperative_level coop_level=COOPERATIVE_LEVEL_EXCLUSIVE; 

  000ec	c7 85 44 ff ff
	ff 02 00 00 00	 mov	 DWORD PTR _coop_level$4[ebp], 2

; 1222 : 		system_thread_function (ddraw_internal_set_cooperative_level,&coop_level  );

  000f6	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _coop_level$4[ebp]
  000fc	50		 push	 eax
  000fd	68 00 00 00 00	 push	 OFFSET ?ddraw_internal_set_cooperative_level@@YGHPAX@Z ; ddraw_internal_set_cooperative_level
  00102	e8 00 00 00 00	 call	 ?system_thread_function@@YGHP6GHPAX@Z0@Z ; system_thread_function

; 1223 : 
; 1224 : 		//
; 1225 : 		// Setup the window style for a fullscreen application
; 1226 : 		//
; 1227 : 		
; 1228 : 		dwStyle = GetWindowStyle ( application_window );

  00107	6a f0		 push	 -16			; fffffff0H
  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0010e	50		 push	 eax
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00115	89 85 4c ff ff
	ff		 mov	 DWORD PTR _dwStyle$[ebp], eax

; 1229 : 		
; 1230 : 		dwStyle &= ~( WS_OVERLAPPED | WS_CAPTION | WS_THICKFRAME | WS_MINIMIZEBOX );

  0011b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00121	25 ff ff 39 ff	 and	 eax, -12976129		; ff39ffffH
  00126	89 85 4c ff ff
	ff		 mov	 DWORD PTR _dwStyle$[ebp], eax

; 1231 : 		
; 1232 : 		dwStyle |= WS_POPUP;

  0012c	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00132	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00137	89 85 4c ff ff
	ff		 mov	 DWORD PTR _dwStyle$[ebp], eax

; 1233 : 		
; 1234 : 		SetWindowLong ( application_window, GWL_STYLE, dwStyle );

  0013d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00143	50		 push	 eax
  00144	6a f0		 push	 -16			; fffffff0H
  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0014c	51		 push	 ecx
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 1235 : 		
; 1236 : 		//
; 1237 : 		// Set the video mode
; 1238 : 		//
; 1239 : 		
; 1240 : 		{
; 1241 : 
; 1242 : 			int
; 1243 : 				parms[3];
; 1244 : 
; 1245 : 			parms[0] = width;

  00153	b8 04 00 00 00	 mov	 eax, 4
  00158	6b c8 00	 imul	 ecx, eax, 0
  0015b	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0015e	89 94 0d 38 ff
	ff ff		 mov	 DWORD PTR _parms$3[ebp+ecx], edx

; 1246 : 			parms[1] = height;

  00165	b8 04 00 00 00	 mov	 eax, 4
  0016a	c1 e0 00	 shl	 eax, 0
  0016d	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00170	89 8c 05 38 ff
	ff ff		 mov	 DWORD PTR _parms$3[ebp+eax], ecx

; 1247 : 			parms[2] = depth;

  00177	b8 04 00 00 00	 mov	 eax, 4
  0017c	d1 e0		 shl	 eax, 1
  0017e	8b 4d 10	 mov	 ecx, DWORD PTR _depth$[ebp]
  00181	89 8c 05 38 ff
	ff ff		 mov	 DWORD PTR _parms$3[ebp+eax], ecx

; 1248 : 
; 1249 : 			ddrval = system_thread_function ( ddraw_internal_set_display_mode, parms );

  00188	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _parms$3[ebp]
  0018e	50		 push	 eax
  0018f	68 00 00 00 00	 push	 OFFSET ?ddraw_internal_set_display_mode@@YGHPAX@Z ; ddraw_internal_set_display_mode
  00194	e8 00 00 00 00	 call	 ?system_thread_function@@YGHP6GHPAX@Z0@Z ; system_thread_function
  00199	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1250 : 		}
; 1251 : 		
; 1252 : 		if( ddrval != DD_OK )

  0019f	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  001a6	74 21		 je	 SHORT $LN10@ddraw_set_

; 1253 : 		{
; 1254 : 			
; 1255 : 			debug_log ( "Unable to set display resolution: %s", get_ddraw_error_message ( ddrval ) );

  001a8	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  001b4	50		 push	 eax
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OLGMECBP@Unable?5to?5set?5display?5resolutio@
  001ba	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001bf	83 c4 08	 add	 esp, 8

; 1256 : 			
; 1257 : 			return ( FALSE );

  001c2	33 c0		 xor	 eax, eax
  001c4	e9 77 08 00 00	 jmp	 $LN1@ddraw_set_
$LN10@ddraw_set_:

; 1258 : 		}
; 1259 : 
; 1260 : 		//
; 1261 : 		// Set the buffer pointers
; 1262 : 		//
; 1263 : 
; 1264 : 		ddraw.lpFrontBuffer = NULL;

  001c9	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0

; 1265 : 		ddraw.lpBackBuffer = NULL;

  001d3	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0

; 1266 : 		ddraw.lpRenderBuffer = NULL;

  001dd	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, 0

; 1267 : 		
; 1268 : 		//
; 1269 : 		// Create the primary surface
; 1270 : 		//
; 1271 : 
; 1272 : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  001e7	6a 7c		 push	 124			; 0000007cH
  001e9	6a 00		 push	 0
  001eb	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 _memset
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1273 : 
; 1274 : 		ddsd.dwSize = sizeof ( ddsd );

  001f7	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 1275 : 		
; 1276 : 		ddsd.dwFlags = DDSD_CAPS;

  001fe	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 1

; 1277 : 
; 1278 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_3DDEVICE;

  00205	c7 45 ec 00 22
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 8704 ; 00002200H

; 1279 : //		ddsd.ddsCaps.dwCaps2 = DDSCAPS2_HINTANTIALIASING;
; 1280 : 
; 1281 : 		//if ( ddraw.use_double_buffer )
; 1282 : 		{
; 1283 : 			
; 1284 : 			ddsd.dwFlags |= DDSD_BACKBUFFERCOUNT;

  0020c	8b 45 88	 mov	 eax, DWORD PTR _ddsd$[ebp+4]
  0020f	83 c8 20	 or	 eax, 32			; 00000020H
  00212	89 45 88	 mov	 DWORD PTR _ddsd$[ebp+4], eax

; 1285 : 			
; 1286 : 			ddsd.dwBackBufferCount = 1;

  00215	c7 45 98 01 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+20], 1

; 1287 : 			
; 1288 : 			ddsd.ddsCaps.dwCaps |= DDSCAPS_FLIP | DDSCAPS_COMPLEX;

  0021c	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  0021f	83 c8 18	 or	 eax, 24			; 00000018H
  00222	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 1289 : 		}
; 1290 : 		
; 1291 : 		ddrval = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &ddraw.lpFrontBuffer, NULL);

  00225	6a 00		 push	 0
  00227	68 08 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+8
  0022c	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0022f	50		 push	 eax
  00230	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00236	8b 11		 mov	 edx, DWORD PTR [ecx]
  00238	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0023d	50		 push	 eax
  0023e	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00241	ff d1		 call	 ecx
  00243	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1292 : 		
; 1293 : 		if ( ddrval != DD_OK )

  00249	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  00250	74 21		 je	 SHORT $LN11@ddraw_set_

; 1294 : 		{
; 1295 : 			
; 1296 : 			debug_log ( "Unable to create primary surface: %s", get_ddraw_error_message ( ddrval ) );

  00252	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0025e	50		 push	 eax
  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PDIAAJFM@Unable?5to?5create?5primary?5surfac@
  00264	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00269	83 c4 08	 add	 esp, 8

; 1297 : 			
; 1298 : 			return ( FALSE );

  0026c	33 c0		 xor	 eax, eax
  0026e	e9 cd 07 00 00	 jmp	 $LN1@ddraw_set_
$LN11@ddraw_set_:

; 1299 : 		}
; 1300 : 
; 1301 : 		//if ( ddraw.use_double_buffer )
; 1302 : 		{
; 1303 : 			
; 1304 : 			//
; 1305 : 			// Get the back screen from this surface.
; 1306 : 			//
; 1307 : 
; 1308 : 			memset ( &caps, 0, sizeof ( caps ) );

  00273	6a 10		 push	 16			; 00000010H
  00275	6a 00		 push	 0
  00277	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _caps$[ebp]
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 _memset
  00283	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1309 : 
; 1310 : 			caps.dwCaps = DDSCAPS_BACKBUFFER;

  00286	c7 85 74 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR _caps$[ebp], 4

; 1311 : 			
; 1312 : 			ddrval = IDirectDrawSurface7_GetAttachedSurface ( ddraw.lpFrontBuffer, &caps, &ddraw.lpBackBuffer );

  00290	68 0c 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+12
  00295	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _caps$[ebp]
  0029b	50		 push	 eax
  0029c	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  002a2	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a4	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  002a9	50		 push	 eax
  002aa	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  002ad	ff d1		 call	 ecx
  002af	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1313 : 			
; 1314 : 			if ( ddrval != DD_OK )

  002b5	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  002bc	74 21		 je	 SHORT $LN12@ddraw_set_

; 1315 : 			{
; 1316 : 				
; 1317 : 				debug_fatal ( "Unable to get backbuffer: %s", get_ddraw_error_message ( ddrval ) );

  002be	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  002ca	50		 push	 eax
  002cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NNDAPKJG@Unable?5to?5get?5backbuffer?3?5?$CFs@
  002d0	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002d5	83 c4 08	 add	 esp, 8

; 1318 : 				
; 1319 : 				return ( FALSE );

  002d8	33 c0		 xor	 eax, eax
  002da	e9 61 07 00 00	 jmp	 $LN1@ddraw_set_
$LN12@ddraw_set_:

; 1320 : 			}
; 1321 : 		}
; 1322 : 
; 1323 : 		/*if ( ddraw.use_system_memory )
; 1324 : 		{
; 1325 : 
; 1326 : 			//
; 1327 : 			// Create the system memory surface
; 1328 : 			//
; 1329 : 	
; 1330 : 			memset ( &ddsd, 0, sizeof ( ddsd ) );
; 1331 : 	
; 1332 : 			ddsd.dwSize = sizeof( ddsd );
; 1333 : 	
; 1334 : 			ddrval = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );
; 1335 : 			
; 1336 : 			ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;
; 1337 : 	
; 1338 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_3DDEVICE | DDSCAPS_SYSTEMMEMORY;
; 1339 : 			
; 1340 : 			ddsd.dwHeight = height;
; 1341 : 			
; 1342 : 			ddsd.dwWidth = width;
; 1343 : 			
; 1344 : 			ddrval = IDirectDraw7_CreateSurface ( ddraw.ddraw , &ddsd, &ddraw.lpRenderBuffer, NULL );
; 1345 : 			
; 1346 : 			if ( ddrval != DD_OK )
; 1347 : 			{
; 1348 : 				
; 1349 : 				debug_fatal ( "Unable to create system memory surface: %s", get_ddraw_error_message ( ddrval ) );
; 1350 : 				
; 1351 : 				return ( FALSE );
; 1352 : 			}
; 1353 : 		}
; 1354 : 		else*/
; 1355 : 		{
; 1356 : 
; 1357 : 			//
; 1358 : 			// Set the render buffer
; 1359 : 			//
; 1360 : 
; 1361 : 			//if ( ddraw.use_double_buffer )
; 1362 : 			{
; 1363 : 
; 1364 : 				ddraw.lpRenderBuffer = ddraw.lpBackBuffer;

  002df	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  002e4	a3 10 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, eax

; 1365 : 			}
; 1366 : 			/*else
; 1367 : 			{
; 1368 : 	
; 1369 : 				ddraw.lpRenderBuffer = ddraw.lpFrontBuffer;
; 1370 : 			}*/
; 1371 : 		}
; 1372 : 		
; 1373 : 		//if ( ddraw.use_z_buffer )
; 1374 : 		{
; 1375 : 
; 1376 : 			//
; 1377 : 			// Create the zbuffer and attach it to the render buffer.
; 1378 : 			//
; 1379 : 
; 1380 : 			memset ( &ddsd, 0, sizeof ( ddsd ) );

  002e9	6a 7c		 push	 124			; 0000007cH
  002eb	6a 00		 push	 0
  002ed	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  002f0	50		 push	 eax
  002f1	e8 00 00 00 00	 call	 _memset
  002f6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1381 : 	
; 1382 : 			ddsd.dwSize = sizeof ( ddsd );

  002f9	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 1383 : 	
; 1384 : 			ddrval = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );

  00300	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00303	50		 push	 eax
  00304	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0030a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0030c	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00311	50		 push	 eax
  00312	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00315	ff d1		 call	 ecx
  00317	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1385 : 			
; 1386 : 			ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  0031d	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 1387 : 
; 1388 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER;

  00324	c7 45 ec 00 00
	02 00		 mov	 DWORD PTR _ddsd$[ebp+104], 131072 ; 00020000H

; 1389 : 
; 1390 : 			if ( d3d_use_rgb_device )

  0032b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_rgb_device@@3HA, 0 ; d3d_use_rgb_device
  00332	74 0d		 je	 SHORT $LN13@ddraw_set_

; 1391 : 			{
; 1392 : 
; 1393 : 				ddsd.ddsCaps.dwCaps |= DDSCAPS_SYSTEMMEMORY;

  00334	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  00337	0d 00 08 00 00	 or	 eax, 2048		; 00000800H
  0033c	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 1394 : 			}
; 1395 : 			else

  0033f	eb 0b		 jmp	 SHORT $LN14@ddraw_set_
$LN13@ddraw_set_:

; 1396 : 			{
; 1397 : 
; 1398 : 				ddsd.ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

  00341	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  00344	0d 00 40 00 00	 or	 eax, 16384		; 00004000H
  00349	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax
$LN14@ddraw_set_:

; 1399 : 			}
; 1400 : 			
; 1401 : 			ddsd.dwHeight = height;

  0034c	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0034f	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 1402 : 			
; 1403 : 			ddsd.dwWidth = width;

  00352	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00355	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 1404 : 
; 1405 : 			//
; 1406 : 			// Set zbuffer pixel format
; 1407 : 			//
; 1408 : 
; 1409 : 			get_ddraw_zbuffer_pixel_format ( &ddsd.ddpfPixelFormat );

  00358	8d 45 cc	 lea	 eax, DWORD PTR _ddsd$[ebp+72]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ; get_ddraw_zbuffer_pixel_format

; 1410 : 
; 1411 : //			ddsd.ddpfPixelFormat.dwSize = sizeof ( ddsd.ddpfPixelFormat );
; 1412 : //			ddsd.ddpfPixelFormat.dwFlags = DDPF_ZBUFFER;
; 1413 : //			ddsd.ddpfPixelFormat.dwZBufferBitDepth = depth;
; 1414 : 
; 1415 : 			ddrval = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &ddraw.lpZBuffer, NULL );

  00361	6a 00		 push	 0
  00363	68 14 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+20
  00368	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0036b	50		 push	 eax
  0036c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00372	8b 11		 mov	 edx, DWORD PTR [ecx]
  00374	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00379	50		 push	 eax
  0037a	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0037d	ff d1		 call	 ecx
  0037f	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1416 : 			
; 1417 : 			if ( ddrval != DD_OK )

  00385	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  0038c	74 21		 je	 SHORT $LN15@ddraw_set_

; 1418 : 			{
; 1419 : 				
; 1420 : 				debug_fatal ( "Unable to create Zbuffer surface: %s", get_ddraw_error_message ( ddrval ) );

  0038e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00394	50		 push	 eax
  00395	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0039a	50		 push	 eax
  0039b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
  003a0	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  003a5	83 c4 08	 add	 esp, 8

; 1421 : 				
; 1422 : 				return ( FALSE );

  003a8	33 c0		 xor	 eax, eax
  003aa	e9 91 06 00 00	 jmp	 $LN1@ddraw_set_
$LN15@ddraw_set_:

; 1423 : 			}
; 1424 : 
; 1425 : 			ddrval = IDirectDrawSurface7_AddAttachedSurface ( ddraw.lpRenderBuffer, ddraw.lpZBuffer );

  003af	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  003b4	50		 push	 eax
  003b5	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  003bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  003bd	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  003c2	50		 push	 eax
  003c3	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  003c6	ff d1		 call	 ecx
  003c8	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1426 : 
; 1427 : 			if ( ddrval != DD_OK )

  003ce	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  003d5	74 21		 je	 SHORT $LN16@ddraw_set_

; 1428 : 			{
; 1429 : 
; 1430 : 				debug_fatal ( "Unable to attach Zbuffer surface: %s", get_ddraw_error_message ( ddrval ) );

  003d7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  003dd	50		 push	 eax
  003de	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  003e3	50		 push	 eax
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
  003e9	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  003ee	83 c4 08	 add	 esp, 8

; 1431 : 				
; 1432 : 				return ( FALSE );

  003f1	33 c0		 xor	 eax, eax
  003f3	e9 48 06 00 00	 jmp	 $LN1@ddraw_set_
$LN16@ddraw_set_:

; 1433 : 			}
; 1434 : 
; 1435 : 			zbuffer_target_surface = ddraw.lpRenderBuffer;

  003f8	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  003fd	a3 00 00 00 00	 mov	 DWORD PTR ?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A, eax ; zbuffer_target_surface

; 1436 : 		}
; 1437 : 
; 1438 : 		//
; 1439 : 		// Create the screen associated with the render buffer ( video_screen )
; 1440 : 		//
; 1441 : 
; 1442 : 		create_video_screen ( width, height, ddraw.lpRenderBuffer );

  00402	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00407	50		 push	 eax
  00408	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0040b	51		 push	 ecx
  0040c	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0040f	52		 push	 edx
  00410	e8 00 00 00 00	 call	 ?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z ; create_video_screen

; 1443 : 
; 1444 : //		return ( TRUE );
; 1445 : 	}
; 1446 : 	else

  00415	e9 18 05 00 00	 jmp	 $LN9@ddraw_set_
$LN8@ddraw_set_:

; 1447 : 	{
; 1448 : 		
; 1449 : 		//
; 1450 : 		// Set the cooperative mode settings.
; 1451 : 		//
; 1452 : 
; 1453 : 		ddraw_set_cooperative_level ( COOPERATIVE_LEVEL_NORMAL );

  0041a	6a 01		 push	 1
  0041c	e8 00 00 00 00	 call	 ?ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z ; ddraw_set_cooperative_level

; 1454 : 
; 1455 : 		//
; 1456 : 		// Convert from a WS_POPUP window to a proper window.
; 1457 : 		//
; 1458 : 		
; 1459 : 		dwStyle = GetWindowStyle ( application_window );

  00421	6a f0		 push	 -16			; fffffff0H
  00423	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00428	50		 push	 eax
  00429	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0042f	89 85 4c ff ff
	ff		 mov	 DWORD PTR _dwStyle$[ebp], eax

; 1460 : 		
; 1461 : 		dwStyle &= ~WS_POPUP;

  00435	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dwStyle$[ebp]
  0043b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00440	89 85 4c ff ff
	ff		 mov	 DWORD PTR _dwStyle$[ebp], eax

; 1462 : 		
; 1463 : 		dwStyle |= WS_OVERLAPPED | WS_CAPTION | WS_THICKFRAME | WS_MINIMIZEBOX;

  00446	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dwStyle$[ebp]
  0044c	0d 00 00 c6 00	 or	 eax, 12976128		; 00c60000H
  00451	89 85 4c ff ff
	ff		 mov	 DWORD PTR _dwStyle$[ebp], eax

; 1464 : 		
; 1465 : 		SetWindowLong ( application_window, GWL_STYLE, dwStyle );

  00457	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dwStyle$[ebp]
  0045d	50		 push	 eax
  0045e	6a f0		 push	 -16			; fffffff0H
  00460	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00466	51		 push	 ecx
  00467	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 1466 : 		
; 1467 : 		//
; 1468 : 		// Position the window properly
; 1469 : 		//
; 1470 : 		
; 1471 : 		rc.top = 0;

  0046d	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rc$[ebp+4], 0

; 1472 : 		rc.left = 0;

  00477	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rc$[ebp], 0

; 1473 : 		rc.bottom = height;

  00481	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00484	89 85 6c ff ff
	ff		 mov	 DWORD PTR _rc$[ebp+12], eax

; 1474 : 		rc.right = width;

  0048a	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0048d	89 85 68 ff ff
	ff		 mov	 DWORD PTR _rc$[ebp+8], eax

; 1475 : 		
; 1476 : 		AdjustWindowRectEx ( &rc,

  00493	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00498	50		 push	 eax
  00499	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenu@4
  0049f	85 c0		 test	 eax, eax
  004a1	74 0c		 je	 SHORT $LN32@ddraw_set_
  004a3	c7 85 80 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv262[ebp], 1
  004ad	eb 0a		 jmp	 SHORT $LN33@ddraw_set_
$LN32@ddraw_set_:
  004af	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv262[ebp], 0
$LN33@ddraw_set_:
  004b9	6a ec		 push	 -20			; ffffffecH
  004bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  004c1	51		 push	 ecx
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  004c8	50		 push	 eax
  004c9	8b 95 80 fe ff
	ff		 mov	 edx, DWORD PTR tv262[ebp]
  004cf	52		 push	 edx
  004d0	6a f0		 push	 -16			; fffffff0H
  004d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  004d7	50		 push	 eax
  004d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  004de	50		 push	 eax
  004df	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _rc$[ebp]
  004e5	51		 push	 ecx
  004e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustWindowRectEx@16

; 1477 : 									GetWindowStyle ( application_window),
; 1478 : 									GetMenu ( application_window) != NULL,
; 1479 : 									GetWindowExStyle ( application_window ) );
; 1480 : 
; 1481 : 		SetWindowPos ( application_window,

  004ec	6a 16		 push	 22			; 00000016H
  004ee	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp+12]
  004f4	2b 85 64 ff ff
	ff		 sub	 eax, DWORD PTR _rc$[ebp+4]
  004fa	50		 push	 eax
  004fb	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _rc$[ebp+8]
  00501	2b 8d 60 ff ff
	ff		 sub	 ecx, DWORD PTR _rc$[ebp]
  00507	51		 push	 ecx
  00508	6a 00		 push	 0
  0050a	6a 00		 push	 0
  0050c	6a 00		 push	 0
  0050e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00514	52		 push	 edx
  00515	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 1482 : 								NULL, 0, 0, rc.right-rc.left, rc.bottom-rc.top,
; 1483 : 								SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE);
; 1484 : 		
; 1485 : 		SetWindowPos ( application_window, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_NOACTIVATE );

  0051b	6a 13		 push	 19			; 00000013H
  0051d	6a 00		 push	 0
  0051f	6a 00		 push	 0
  00521	6a 00		 push	 0
  00523	6a 00		 push	 0
  00525	6a fe		 push	 -2			; fffffffeH
  00527	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0052c	50		 push	 eax
  0052d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 1486 : 		
; 1487 : 		//
; 1488 : 		// Make sure window does not hang off the screen
; 1489 : 		//
; 1490 : 		
; 1491 : 		SystemParametersInfo ( SPI_GETWORKAREA, 0, &rcWork, 0 );

  00533	6a 00		 push	 0
  00535	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _rcWork$[ebp]
  0053b	50		 push	 eax
  0053c	6a 00		 push	 0
  0053e	6a 30		 push	 48			; 00000030H
  00540	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 1492 : 		
; 1493 : 		GetWindowRect ( application_window, &rc );

  00546	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _rc$[ebp]
  0054c	50		 push	 eax
  0054d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00553	51		 push	 ecx
  00554	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 1494 : 		
; 1495 : 		if ( rc.left < rcWork.left )

  0055a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp]
  00560	3b 85 50 ff ff
	ff		 cmp	 eax, DWORD PTR _rcWork$[ebp]
  00566	7d 0c		 jge	 SHORT $LN17@ddraw_set_

; 1496 : 		{
; 1497 : 			
; 1498 : 			rc.left = rcWork.left;

  00568	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _rcWork$[ebp]
  0056e	89 85 60 ff ff
	ff		 mov	 DWORD PTR _rc$[ebp], eax
$LN17@ddraw_set_:

; 1499 : 		}
; 1500 : 		
; 1501 : 		if ( rc.top  < rcWork.top )

  00574	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp+4]
  0057a	3b 85 54 ff ff
	ff		 cmp	 eax, DWORD PTR _rcWork$[ebp+4]
  00580	7d 0c		 jge	 SHORT $LN18@ddraw_set_

; 1502 : 		{
; 1503 : 			
; 1504 : 			rc.top  = rcWork.top;

  00582	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _rcWork$[ebp+4]
  00588	89 85 64 ff ff
	ff		 mov	 DWORD PTR _rc$[ebp+4], eax
$LN18@ddraw_set_:

; 1505 : 		}
; 1506 : 		
; 1507 : 		SetWindowPos ( application_window, NULL, rc.left, rc.top, 0, 0, SWP_NOSIZE | SWP_NOZORDER | SWP_NOACTIVATE );

  0058e	6a 15		 push	 21			; 00000015H
  00590	6a 00		 push	 0
  00592	6a 00		 push	 0
  00594	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _rc$[ebp+4]
  0059a	50		 push	 eax
  0059b	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _rc$[ebp]
  005a1	51		 push	 ecx
  005a2	6a 00		 push	 0
  005a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  005aa	52		 push	 edx
  005ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 1508 : 		
; 1509 : 		//
; 1510 : 		// Create the primary surface
; 1511 : 		//
; 1512 : 		
; 1513 : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  005b1	6a 7c		 push	 124			; 0000007cH
  005b3	6a 00		 push	 0
  005b5	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  005b8	50		 push	 eax
  005b9	e8 00 00 00 00	 call	 _memset
  005be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1514 : 
; 1515 : 		ddsd.dwSize = sizeof (ddsd);

  005c1	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 1516 : 		
; 1517 : 		ddsd.dwFlags = DDSD_CAPS;

  005c8	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 1

; 1518 : 		
; 1519 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_3DDEVICE;

  005cf	c7 45 ec 00 22
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 8704 ; 00002200H

; 1520 : 		
; 1521 : 		ddrval = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &ddraw.lpFrontBuffer, NULL);

  005d6	6a 00		 push	 0
  005d8	68 08 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+8
  005dd	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  005e0	50		 push	 eax
  005e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  005e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  005e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  005ee	50		 push	 eax
  005ef	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  005f2	ff d1		 call	 ecx
  005f4	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1522 : 		
; 1523 : 		if ( ddrval != DD_OK )

  005fa	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  00601	74 21		 je	 SHORT $LN19@ddraw_set_

; 1524 : 		{
; 1525 : 			
; 1526 : 			debug_log ( "Unable to create primary surface: %s", get_ddraw_error_message ( ddrval ) );

  00603	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00609	50		 push	 eax
  0060a	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0060f	50		 push	 eax
  00610	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PDIAAJFM@Unable?5to?5create?5primary?5surfac@
  00615	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0061a	83 c4 08	 add	 esp, 8

; 1527 : 			
; 1528 : 			return ( FALSE );

  0061d	33 c0		 xor	 eax, eax
  0061f	e9 1c 04 00 00	 jmp	 $LN1@ddraw_set_
$LN19@ddraw_set_:

; 1529 : 		}
; 1530 : 
; 1531 : 		//
; 1532 : 		// Create the secondary surface
; 1533 : 		//
; 1534 : 
; 1535 : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  00624	6a 7c		 push	 124			; 0000007cH
  00626	6a 00		 push	 0
  00628	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0062b	50		 push	 eax
  0062c	e8 00 00 00 00	 call	 _memset
  00631	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1536 : 
; 1537 : 		ddsd.dwSize = sizeof( ddsd );

  00634	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 1538 : 
; 1539 : 		ddrval = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );

  0063b	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0063e	50		 push	 eax
  0063f	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00645	8b 11		 mov	 edx, DWORD PTR [ecx]
  00647	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0064c	50		 push	 eax
  0064d	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00650	ff d1		 call	 ecx
  00652	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1540 : 		
; 1541 : 		ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  00658	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 1542 : 
; 1543 : 		/*if ( ddraw.use_system_memory )
; 1544 : 		{
; 1545 : 
; 1546 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_3DDEVICE | DDSCAPS_SYSTEMMEMORY;
; 1547 : 		}
; 1548 : 		else*/
; 1549 : 		{
; 1550 : 
; 1551 : 			ddsd.ddsCaps.dwCaps = DDSCAPS_3DDEVICE;

  0065f	c7 45 ec 00 20
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 8192 ; 00002000H

; 1552 : 		}
; 1553 : 		
; 1554 : 		ddsd.dwHeight = height;

  00666	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00669	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 1555 : 		
; 1556 : 		ddsd.dwWidth = width;

  0066c	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0066f	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 1557 : 		
; 1558 : 		ddrval = IDirectDraw7_CreateSurface ( ddraw.ddraw , &ddsd, &ddraw.lpBackBuffer, NULL );

  00672	6a 00		 push	 0
  00674	68 0c 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+12
  00679	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0067c	50		 push	 eax
  0067d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00683	8b 11		 mov	 edx, DWORD PTR [ecx]
  00685	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0068a	50		 push	 eax
  0068b	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0068e	ff d1		 call	 ecx
  00690	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1559 : 		
; 1560 : 		if ( ddrval != DD_OK )

  00696	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  0069d	74 21		 je	 SHORT $LN20@ddraw_set_

; 1561 : 		{
; 1562 : 			
; 1563 : 			debug_fatal ( "Unable to create secondary surface: %s", get_ddraw_error_message ( ddrval ) );

  0069f	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  006a5	50		 push	 eax
  006a6	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  006ab	50		 push	 eax
  006ac	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CCBKEALA@Unable?5to?5create?5secondary?5surf@
  006b1	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  006b6	83 c4 08	 add	 esp, 8

; 1564 : 			
; 1565 : 			return ( FALSE );

  006b9	33 c0		 xor	 eax, eax
  006bb	e9 80 03 00 00	 jmp	 $LN1@ddraw_set_
$LN20@ddraw_set_:

; 1566 : 		}
; 1567 : 
; 1568 : 		//
; 1569 : 		// Clear the surface
; 1570 : 		//
; 1571 : 
; 1572 : 		{
; 1573 : 	
; 1574 : 			DDBLTFX
; 1575 : 				fx;
; 1576 : 		
; 1577 : 			RECT
; 1578 : 				rect;
; 1579 : 		
; 1580 : 			//
; 1581 : 			// Perform the blit using the blitter
; 1582 : 			//
; 1583 : 	
; 1584 : 			fx.dwSize = sizeof ( fx );

  006c0	c7 85 d4 fe ff
	ff 64 00 00 00	 mov	 DWORD PTR _fx$2[ebp], 100 ; 00000064H

; 1585 : 			fx.dwFillColor = 0;

  006ca	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fx$2[ebp+80], 0

; 1586 : 		
; 1587 : 			rect.left = 0;

  006d4	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rect$1[ebp], 0

; 1588 : 			rect.right = width;

  006de	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  006e1	89 85 cc fe ff
	ff		 mov	 DWORD PTR _rect$1[ebp+8], eax

; 1589 : 		
; 1590 : 			rect.top = 0;

  006e7	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rect$1[ebp+4], 0

; 1591 : 			rect.bottom = height;

  006f1	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  006f4	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _rect$1[ebp+12], eax

; 1592 : 	
; 1593 : 			ddrval = IDirectDrawSurface7_Blt ( ddraw.lpBackBuffer, &rect, NULL, NULL, DDBLT_COLORFILL | DDBLT_WAIT, &fx );

  006fa	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _fx$2[ebp]
  00700	50		 push	 eax
  00701	68 00 04 00 01	 push	 16778240		; 01000400H
  00706	6a 00		 push	 0
  00708	6a 00		 push	 0
  0070a	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _rect$1[ebp]
  00710	51		 push	 ecx
  00711	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00717	8b 02		 mov	 eax, DWORD PTR [edx]
  00719	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  0071f	51		 push	 ecx
  00720	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00723	ff d2		 call	 edx
  00725	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1594 : 		}
; 1595 : 
; 1596 : 		//
; 1597 : 		// Set render surface
; 1598 : 		//
; 1599 : 
; 1600 : 		ddraw.lpRenderBuffer = ddraw.lpBackBuffer;

  0072b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00730	a3 10 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, eax

; 1601 : 		
; 1602 : 		//
; 1603 : 		// If needed, create the zbuffer and attach it to the render buffer.
; 1604 : 		//
; 1605 : 
; 1606 : 		//if ( ddraw.use_z_buffer )
; 1607 : 		{
; 1608 : 
; 1609 : 			memset ( &ddsd, 0, sizeof ( ddsd ) );

  00735	6a 7c		 push	 124			; 0000007cH
  00737	6a 00		 push	 0
  00739	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0073c	50		 push	 eax
  0073d	e8 00 00 00 00	 call	 _memset
  00742	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1610 : 	
; 1611 : 			ddsd.dwSize = sizeof( ddsd );

  00745	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 1612 : 	
; 1613 : 			ddrval = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );

  0074c	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0074f	50		 push	 eax
  00750	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00756	8b 11		 mov	 edx, DWORD PTR [ecx]
  00758	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0075d	50		 push	 eax
  0075e	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00761	ff d1		 call	 ecx
  00763	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1614 : 			
; 1615 : 			ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  00769	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 1616 : 
; 1617 : 			if ( d3d_use_rgb_device )

  00770	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_rgb_device@@3HA, 0 ; d3d_use_rgb_device
  00777	74 09		 je	 SHORT $LN21@ddraw_set_

; 1618 : 			{
; 1619 : 	
; 1620 : 				ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER | DDSCAPS_SYSTEMMEMORY;

  00779	c7 45 ec 00 08
	02 00		 mov	 DWORD PTR _ddsd$[ebp+104], 133120 ; 00020800H

; 1621 : 			}
; 1622 : 			else

  00780	eb 07		 jmp	 SHORT $LN22@ddraw_set_
$LN21@ddraw_set_:

; 1623 : 			{
; 1624 : 
; 1625 : 				ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER | DDSCAPS_VIDEOMEMORY;

  00782	c7 45 ec 00 40
	02 00		 mov	 DWORD PTR _ddsd$[ebp+104], 147456 ; 00024000H
$LN22@ddraw_set_:

; 1626 : 			}
; 1627 : 			
; 1628 : 			ddsd.dwHeight = height;

  00789	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0078c	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 1629 : 			
; 1630 : 			ddsd.dwWidth = width;

  0078f	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00792	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 1631 : 			
; 1632 : 			get_ddraw_zbuffer_pixel_format ( &ddsd.ddpfPixelFormat );

  00795	8d 45 cc	 lea	 eax, DWORD PTR _ddsd$[ebp+72]
  00798	50		 push	 eax
  00799	e8 00 00 00 00	 call	 ?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ; get_ddraw_zbuffer_pixel_format

; 1633 : 
; 1634 : //			ddsd.ddpfPixelFormat.dwSize = sizeof ( ddsd.ddpfPixelFormat );
; 1635 : //			ddsd.ddpfPixelFormat.dwFlags = DDPF_ZBUFFER;
; 1636 : //			ddsd.ddpfPixelFormat.dwZBufferBitDepth = depth;
; 1637 : 
; 1638 : 			ddrval = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &ddraw.lpZBuffer, NULL );

  0079e	6a 00		 push	 0
  007a0	68 14 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+20
  007a5	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  007a8	50		 push	 eax
  007a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  007af	8b 11		 mov	 edx, DWORD PTR [ecx]
  007b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  007b6	50		 push	 eax
  007b7	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  007ba	ff d1		 call	 ecx
  007bc	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1639 : 			
; 1640 : 			if ( ddrval != DD_OK )

  007c2	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  007c9	74 21		 je	 SHORT $LN23@ddraw_set_

; 1641 : 			{
; 1642 : 				
; 1643 : 				debug_fatal ( "Unable to create Zbuffer surface: %s", get_ddraw_error_message ( ddrval ) );

  007cb	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  007d1	50		 push	 eax
  007d2	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  007d7	50		 push	 eax
  007d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
  007dd	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  007e2	83 c4 08	 add	 esp, 8

; 1644 : 				
; 1645 : 				return ( FALSE );

  007e5	33 c0		 xor	 eax, eax
  007e7	e9 54 02 00 00	 jmp	 $LN1@ddraw_set_
$LN23@ddraw_set_:

; 1646 : 			}
; 1647 : 
; 1648 : 			ddrval = IDirectDrawSurface7_AddAttachedSurface ( ddraw.lpRenderBuffer, ddraw.lpZBuffer );

  007ec	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  007f1	50		 push	 eax
  007f2	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  007f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  007fa	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  007ff	50		 push	 eax
  00800	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00803	ff d1		 call	 ecx
  00805	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1649 : 
; 1650 : 			if ( ddrval != DD_OK )

  0080b	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  00812	74 21		 je	 SHORT $LN24@ddraw_set_

; 1651 : 			{
; 1652 : 
; 1653 : 				debug_fatal ( "Unable to attach Zbuffer surface: %s", get_ddraw_error_message ( ddrval ) );

  00814	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  0081a	50		 push	 eax
  0081b	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00820	50		 push	 eax
  00821	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
  00826	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0082b	83 c4 08	 add	 esp, 8

; 1654 : 				
; 1655 : 				return ( FALSE );

  0082e	33 c0		 xor	 eax, eax
  00830	e9 0b 02 00 00	 jmp	 $LN1@ddraw_set_
$LN24@ddraw_set_:

; 1656 : 			}
; 1657 : 
; 1658 : 			zbuffer_target_surface = ddraw.lpRenderBuffer;

  00835	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  0083a	a3 00 00 00 00	 mov	 DWORD PTR ?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A, eax ; zbuffer_target_surface

; 1659 : 		}
; 1660 : 
; 1661 : 		//
; 1662 : 		// now create a DirectDrawClipper object.
; 1663 : 		//
; 1664 : 		
; 1665 : 		ddrval = IDirectDraw7_CreateClipper ( ddraw.ddraw, 0, &ddraw.lpClipper, NULL);

  0083f	6a 00		 push	 0
  00841	68 18 00 00 00	 push	 OFFSET ?ddraw@@3Udirect_draw_data@@A+24
  00846	6a 00		 push	 0
  00848	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0084d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0084f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00855	52		 push	 edx
  00856	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00859	ff d0		 call	 eax
  0085b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1666 : 		
; 1667 : 		if ( ddrval != DD_OK )

  00861	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  00868	74 21		 je	 SHORT $LN25@ddraw_set_

; 1668 : 		{
; 1669 : 			
; 1670 : 			debug_log ( "Unable to create clipper: %s", get_ddraw_error_message ( ddrval ) );

  0086a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00870	50		 push	 eax
  00871	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00876	50		 push	 eax
  00877	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JIKBJCFH@Unable?5to?5create?5clipper?3?5?$CFs@
  0087c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00881	83 c4 08	 add	 esp, 8

; 1671 : 			
; 1672 : 			return ( FALSE );

  00884	33 c0		 xor	 eax, eax
  00886	e9 b5 01 00 00	 jmp	 $LN1@ddraw_set_
$LN25@ddraw_set_:

; 1673 : 		}
; 1674 : 
; 1675 : 		ddrval = IDirectDrawClipper_SetHWnd ( ddraw.lpClipper, 0, application_window );

  0088b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00890	50		 push	 eax
  00891	6a 00		 push	 0
  00893	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  00899	8b 11		 mov	 edx, DWORD PTR [ecx]
  0089b	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  008a0	50		 push	 eax
  008a1	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  008a4	ff d1		 call	 ecx
  008a6	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1676 : 		
; 1677 : 		if ( ddrval != DD_OK )

  008ac	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  008b3	74 21		 je	 SHORT $LN26@ddraw_set_

; 1678 : 		{
; 1679 : 			
; 1680 : 			debug_log ( "Unable to set clipper to a window: %s", get_ddraw_error_message ( ddrval ) );

  008b5	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  008bb	50		 push	 eax
  008bc	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  008c1	50		 push	 eax
  008c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EJCPILFH@Unable?5to?5set?5clipper?5to?5a?5wind@
  008c7	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  008cc	83 c4 08	 add	 esp, 8

; 1681 : 			
; 1682 : 			return ( FALSE );

  008cf	33 c0		 xor	 eax, eax
  008d1	e9 6a 01 00 00	 jmp	 $LN1@ddraw_set_
$LN26@ddraw_set_:

; 1683 : 		}
; 1684 : 		
; 1685 : 		ddrval = IDirectDrawSurface7_SetClipper ( ddraw.lpFrontBuffer, ddraw.lpClipper);

  008d6	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  008db	50		 push	 eax
  008dc	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  008e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  008e4	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  008e9	50		 push	 eax
  008ea	8b 4a 70	 mov	 ecx, DWORD PTR [edx+112]
  008ed	ff d1		 call	 ecx
  008ef	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1686 : 		
; 1687 : 		if ( ddrval != DD_OK )

  008f5	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  008fc	74 21		 je	 SHORT $LN27@ddraw_set_

; 1688 : 		{
; 1689 : 			
; 1690 : 			debug_log ( "Unable to set clipper to the primary surface: %s", get_ddraw_error_message ( ddrval ) );

  008fe	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00904	50		 push	 eax
  00905	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0090a	50		 push	 eax
  0090b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KAFIGAEM@Unable?5to?5set?5clipper?5to?5the?5pr@
  00910	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00915	83 c4 08	 add	 esp, 8

; 1691 : 			
; 1692 : 			return ( FALSE );

  00918	33 c0		 xor	 eax, eax
  0091a	e9 21 01 00 00	 jmp	 $LN1@ddraw_set_
$LN27@ddraw_set_:

; 1693 : 		}
; 1694 : 
; 1695 : 		//
; 1696 : 		// Create the screen associated with the render buffer ( video_screen )
; 1697 : 		//
; 1698 : 
; 1699 : 		create_video_screen ( width, height, ddraw.lpRenderBuffer );

  0091f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00924	50		 push	 eax
  00925	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00928	51		 push	 ecx
  00929	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0092c	52		 push	 edx
  0092d	e8 00 00 00 00	 call	 ?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z ; create_video_screen
$LN9@ddraw_set_:

; 1700 : 
; 1701 : //		return ( TRUE );
; 1702 : 	}
; 1703 : 
; 1704 : 	//mue 070223 init export_display
; 1705 : 	if(ddraw_export.ddraw)

  00932	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A, 0
  00939	0f 84 fc 00 00
	00		 je	 $LN28@ddraw_set_

; 1706 : 	{
; 1707 : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  0093f	6a 7c		 push	 124			; 0000007cH
  00941	6a 00		 push	 0
  00943	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00946	50		 push	 eax
  00947	e8 00 00 00 00	 call	 _memset
  0094c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1708 : 
; 1709 : 		ddsd.dwSize = sizeof ( ddsd );

  0094f	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 1710 : 		
; 1711 : 		ddsd.dwFlags = DDSD_CAPS;

  00956	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 1

; 1712 : 
; 1713 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE;

  0095d	c7 45 ec 00 02
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 512 ; 00000200H

; 1714 : //		ddsd.ddsCaps.dwCaps2 = DDSCAPS2_HINTANTIALIASING;
; 1715 : 
; 1716 : 		//if ( ddraw_export.use_double_buffer )
; 1717 : 		{
; 1718 : 			
; 1719 : 			ddsd.dwFlags |= DDSD_BACKBUFFERCOUNT;

  00964	8b 45 88	 mov	 eax, DWORD PTR _ddsd$[ebp+4]
  00967	83 c8 20	 or	 eax, 32			; 00000020H
  0096a	89 45 88	 mov	 DWORD PTR _ddsd$[ebp+4], eax

; 1720 : 			
; 1721 : 			ddsd.dwBackBufferCount = 1;

  0096d	c7 45 98 01 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+20], 1

; 1722 : 			
; 1723 : 			ddsd.ddsCaps.dwCaps |= DDSCAPS_FLIP | DDSCAPS_COMPLEX;

  00974	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  00977	83 c8 18	 or	 eax, 24			; 00000018H
  0097a	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 1724 : 		}
; 1725 : 		
; 1726 : 		ddrval = IDirectDraw7_CreateSurface ( ddraw_export.ddraw, &ddsd, &ddraw_export.lpFrontBuffer, NULL);

  0097d	6a 00		 push	 0
  0097f	68 08 00 00 00	 push	 OFFSET ?ddraw_export@@3Udirect_draw_data@@A+8
  00984	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00987	50		 push	 eax
  00988	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  0098e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00990	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A
  00995	50		 push	 eax
  00996	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00999	ff d1		 call	 ecx
  0099b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1727 : 		
; 1728 : 		if ( ddrval != DD_OK )

  009a1	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  009a8	74 1e		 je	 SHORT $LN29@ddraw_set_

; 1729 : 		{
; 1730 : 			
; 1731 : 			debug_log ( "Unable to create primary surface: %s", get_ddraw_error_message ( ddrval ) );

  009aa	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  009b0	50		 push	 eax
  009b1	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  009b6	50		 push	 eax
  009b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PDIAAJFM@Unable?5to?5create?5primary?5surfac@
  009bc	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  009c1	83 c4 08	 add	 esp, 8

; 1732 : 			
; 1733 : 			return ( FALSE );

  009c4	33 c0		 xor	 eax, eax
  009c6	eb 78		 jmp	 SHORT $LN1@ddraw_set_
$LN29@ddraw_set_:

; 1734 : 		}
; 1735 : 
; 1736 : 		//if ( ddraw.use_double_buffer )
; 1737 : 		{
; 1738 : 			
; 1739 : 			//
; 1740 : 			// Get the back screen from this surface.
; 1741 : 			//
; 1742 : 
; 1743 : 			memset ( &caps, 0, sizeof ( caps ) );

  009c8	6a 10		 push	 16			; 00000010H
  009ca	6a 00		 push	 0
  009cc	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _caps$[ebp]
  009d2	50		 push	 eax
  009d3	e8 00 00 00 00	 call	 _memset
  009d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1744 : 
; 1745 : 			caps.dwCaps = DDSCAPS_BACKBUFFER;

  009db	c7 85 74 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR _caps$[ebp], 4

; 1746 : 			
; 1747 : 			ddrval = IDirectDrawSurface7_GetAttachedSurface ( ddraw_export.lpFrontBuffer, &caps, &ddraw_export.lpBackBuffer );

  009e5	68 0c 00 00 00	 push	 OFFSET ?ddraw_export@@3Udirect_draw_data@@A+12
  009ea	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _caps$[ebp]
  009f0	50		 push	 eax
  009f1	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  009f7	8b 11		 mov	 edx, DWORD PTR [ecx]
  009f9	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+8
  009fe	50		 push	 eax
  009ff	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  00a02	ff d1		 call	 ecx
  00a04	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ddrval$[ebp], eax

; 1748 : 			
; 1749 : 			if ( ddrval != DD_OK )

  00a0a	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ddrval$[ebp], 0
  00a11	74 1e		 je	 SHORT $LN30@ddraw_set_

; 1750 : 			{
; 1751 : 				
; 1752 : 				debug_fatal ( "Unable to get backbuffer: %s", get_ddraw_error_message ( ddrval ) );

  00a13	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ddrval$[ebp]
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00a1f	50		 push	 eax
  00a20	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NNDAPKJG@Unable?5to?5get?5backbuffer?3?5?$CFs@
  00a25	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00a2a	83 c4 08	 add	 esp, 8

; 1753 : 				
; 1754 : 				return ( FALSE );

  00a2d	33 c0		 xor	 eax, eax
  00a2f	eb 0f		 jmp	 SHORT $LN1@ddraw_set_
$LN30@ddraw_set_:

; 1755 : 			}
; 1756 : 			ddraw_export.lpRenderBuffer=ddraw_export.lpBackBuffer;

  00a31	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+12
  00a36	a3 10 00 00 00	 mov	 DWORD PTR ?ddraw_export@@3Udirect_draw_data@@A+16, eax
$LN28@ddraw_set_:

; 1757 : 		}
; 1758 : 	}
; 1759 : 	return ( TRUE );

  00a3b	b8 01 00 00 00	 mov	 eax, 1
$LN1@ddraw_set_:

; 1760 : 	// mue 070223 end init export_display
; 1761 : }

  00a40	5f		 pop	 edi
  00a41	5e		 pop	 esi
  00a42	5b		 pop	 ebx
  00a43	8b e5		 mov	 esp, ebp
  00a45	5d		 pop	 ebp
  00a46	c2 10 00	 ret	 16			; 00000010H
?ddraw_set_display_resolution@@YGHHHHW4DISPLAY_TYPES@@@Z ENDP ; ddraw_set_display_resolution
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?ddraw_release_objects@@YGHXZ
_TEXT	SEGMENT
_ret$1 = -8						; size = 4
_refs$ = -4						; size = 4
?ddraw_release_objects@@YGHXZ PROC			; ddraw_release_objects, COMDAT

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  : 
; 673  : 	int
; 674  : 		refs;
; 675  : 
; 676  : 	if ( ddraw.ddraw )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00010	0f 84 c1 01 00
	00		 je	 $LN2@ddraw_rele

; 677  : 	{
; 678  : 
; 679  : 		if ( d3d_data.d3d )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A, 0
  0001d	74 3d		 je	 SHORT $LN3@ddraw_rele

; 680  : 		{
; 681  : 	
; 682  : 			refs = IDirect3D7_Release ( d3d_data.d3d );

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  0002c	52		 push	 edx
  0002d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00030	ff d0		 call	 eax
  00032	89 45 fc	 mov	 DWORD PTR _refs$[ebp], eax

; 683  : 
; 684  : 			if ( refs < DD_OK )

  00035	83 7d fc 00	 cmp	 DWORD PTR _refs$[ebp], 0
  00039	7d 17		 jge	 SHORT $LN4@ddraw_rele

; 685  : 			{
; 686  : 	
; 687  : 				debug_log ( "Unable to release d3d: %s", get_d3d_error_message ( refs ) );

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _refs$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CDNIDHOL@Unable?5to?5release?5d3d?3?5?$CFs@
  0004a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0004f	83 c4 08	 add	 esp, 8
$LN4@ddraw_rele:

; 688  : 			}
; 689  : 	
; 690  : 			d3d_data.d3d = NULL;

  00052	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A, 0
$LN3@ddraw_rele:

; 691  : 		}
; 692  : 
; 693  : 		if ( ddraw.lpClipper )

  0005c	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24, 0
  00063	74 32		 je	 SHORT $LN5@ddraw_rele

; 694  : 		{
; 695  : 
; 696  : 			//
; 697  : 			// Detach it from the primary screen
; 698  : 			//
; 699  : 
; 700  : 			IDirectDrawSurface7_SetClipper ( ddraw.lpFrontBuffer, NULL );

  00065	6a 00		 push	 0
  00067	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00074	52		 push	 edx
  00075	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00078	ff d0		 call	 eax

; 701  : 
; 702  : 			IDirectDrawClipper_Release ( ddraw.lpClipper );

  0007a	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24
  00087	52		 push	 edx
  00088	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0008b	ff d0		 call	 eax

; 703  : 
; 704  : 			ddraw.lpClipper = NULL;

  0008d	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+24, 0
$LN5@ddraw_rele:

; 705  : 		}
; 706  : 
; 707  : 		//
; 708  : 		// Remove the ZBuffer
; 709  : 		//
; 710  : 
; 711  : 		if ( ddraw.lpZBuffer )

  00097	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20, 0
  0009e	74 5b		 je	 SHORT $LN6@ddraw_rele

; 712  : 		{
; 713  : 
; 714  : 			HRESULT
; 715  : 				ret;
; 716  : 
; 717  : 			ret = IDirectDrawSurface7_DeleteAttachedSurface ( ddraw.lpRenderBuffer, 0, ddraw.lpZBuffer );

  000a0	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  000ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b0	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  000b5	50		 push	 eax
  000b6	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  000b9	ff d1		 call	 ecx
  000bb	89 45 f8	 mov	 DWORD PTR _ret$1[ebp], eax

; 718  : 
; 719  : 			if ( ret != DD_OK )

  000be	83 7d f8 00	 cmp	 DWORD PTR _ret$1[ebp], 0
  000c2	74 17		 je	 SHORT $LN7@ddraw_rele

; 720  : 			{
; 721  : 
; 722  : 				debug_log ( "Unable to delete the zbuffer from the render buffer: %s", get_ddraw_error_message ( ret ) );

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _ret$1[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000cd	50		 push	 eax
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PLBGCAHN@Unable?5to?5delete?5the?5zbuffer?5fr@
  000d3	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000d8	83 c4 08	 add	 esp, 8
$LN7@ddraw_rele:

; 723  : 			}
; 724  : 
; 725  : 			refs = IDirectDrawSurface7_Release ( ddraw.lpZBuffer );

  000db	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  000e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e2	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  000e8	52		 push	 edx
  000e9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ec	ff d0		 call	 eax
  000ee	89 45 fc	 mov	 DWORD PTR _refs$[ebp], eax

; 726  : 
; 727  : 			ddraw.lpZBuffer = NULL;

  000f1	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20, 0
$LN6@ddraw_rele:

; 728  : 		}
; 729  : 
; 730  : 		if ( ddraw.application_windowed )

  000fb	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  00102	74 4e		 je	 SHORT $LN8@ddraw_rele

; 731  : 		{
; 732  : 
; 733  : 			if ( ddraw.lpFrontBuffer )

  00104	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0010b	74 43		 je	 SHORT $LN10@ddraw_rele

; 734  : 			{
; 735  : 
; 736  : 				IDirectDrawSurface7_Release ( ddraw.lpFrontBuffer );

  0010d	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00112	8b 08		 mov	 ecx, DWORD PTR [eax]
  00114	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0011a	52		 push	 edx
  0011b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0011e	ff d0		 call	 eax

; 737  : 
; 738  : 				ddraw.lpFrontBuffer = NULL;

  00120	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0

; 739  : 	
; 740  : 				if ( ddraw.lpBackBuffer )

  0012a	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  00131	74 1d		 je	 SHORT $LN10@ddraw_rele

; 741  : 				{
; 742  : 	
; 743  : 					IDirectDrawSurface7_Release ( ddraw.lpBackBuffer );

  00133	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00138	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013a	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00140	52		 push	 edx
  00141	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00144	ff d0		 call	 eax

; 744  : 	
; 745  : 					ddraw.lpBackBuffer = NULL;

  00146	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
$LN10@ddraw_rele:

; 746  : 				}
; 747  : 			}
; 748  : 		}
; 749  : 		else

  00150	eb 4d		 jmp	 SHORT $LN9@ddraw_rele
$LN8@ddraw_rele:

; 750  : 		{
; 751  : 
; 752  : 			if ( ddraw.lpFrontBuffer )

  00152	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  00159	74 44		 je	 SHORT $LN9@ddraw_rele

; 753  : 			{
; 754  : 
; 755  : 				//if ( ddraw.use_double_buffer )
; 756  : 				{
; 757  : 
; 758  : 					IDirectDrawSurface7_Release ( ddraw.lpBackBuffer );

  0015b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00160	8b 08		 mov	 ecx, DWORD PTR [eax]
  00162	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00168	52		 push	 edx
  00169	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0016c	ff d0		 call	 eax

; 759  : 
; 760  : 					ddraw.lpBackBuffer = NULL;

  0016e	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0

; 761  : 
; 762  : 					ddraw.lpRenderBuffer = NULL;

  00178	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, 0

; 763  : 				}
; 764  : 
; 765  : 				IDirectDrawSurface7_Release ( ddraw.lpFrontBuffer );

  00182	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00187	8b 08		 mov	 ecx, DWORD PTR [eax]
  00189	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0018f	52		 push	 edx
  00190	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00193	ff d0		 call	 eax

; 766  : 
; 767  : 				ddraw.lpFrontBuffer = NULL;

  00195	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
$LN9@ddraw_rele:

; 768  : 			}
; 769  : 
; 770  : 			/*if ( ddraw.use_system_memory )
; 771  : 			{
; 772  : 
; 773  : 				if ( ddraw.lpRenderBuffer )
; 774  : 				{
; 775  : 
; 776  : 					IDirectDrawSurface7_Release ( ddraw.lpRenderBuffer );
; 777  : 
; 778  : 					ddraw.lpRenderBuffer = NULL;
; 779  : 				}
; 780  : 			}*/
; 781  : 		}
; 782  : 
; 783  : 		ddraw_set_cooperative_level ( COOPERATIVE_LEVEL_NORMAL );

  0019f	6a 01		 push	 1
  001a1	e8 00 00 00 00	 call	 ?ddraw_set_cooperative_level@@YGHW4DDRAW_COOPERATIVE_LEVEL@@@Z ; ddraw_set_cooperative_level

; 784  : 
; 785  : 		refs = IDirectDraw7_Release ( ddraw.ddraw );

  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  001ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  001b3	52		 push	 edx
  001b4	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001b7	ff d0		 call	 eax
  001b9	89 45 fc	 mov	 DWORD PTR _refs$[ebp], eax

; 786  : 
; 787  : 		ddraw.ddraw = NULL;

  001bc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0

; 788  : 
; 789  : 		debug_log ( "Released DirectDraw - references left: %d", refs );

  001c6	8b 45 fc	 mov	 eax, DWORD PTR _refs$[ebp]
  001c9	50		 push	 eax
  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KFBOGJHI@Released?5DirectDraw?5?9?5reference@
  001cf	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001d4	83 c4 08	 add	 esp, 8
$LN2@ddraw_rele:

; 790  : 	}
; 791  : 
; 792  : 	return ( TRUE );

  001d7	b8 01 00 00 00	 mov	 eax, 1

; 793  : }

  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
?ddraw_release_objects@@YGHXZ ENDP			; ddraw_release_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?get_ddraw_device_guid@@YGXPAU_GUID@@@Z
_TEXT	SEGMENT
_ret$ = -1076						; size = 4
_did$ = -1072						; size = 1072
_this_guid$ = 8						; size = 4
?get_ddraw_device_guid@@YGXPAU_GUID@@@Z PROC		; get_ddraw_device_guid, COMDAT

; 620  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 04 00
	00		 sub	 esp, 1268		; 000004f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 621  : 
; 622  : 	DDDEVICEIDENTIFIER2
; 623  : 		did;
; 624  : 
; 625  : 	HRESULT
; 626  : 		ret;
; 627  : 
; 628  : 	if ( ddraw.ddraw )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00013	74 34		 je	 SHORT $LN1@get_ddraw_

; 629  : 	{
; 630  : 
; 631  : 		ret = IDirectDraw7_GetDeviceIdentifier ( ddraw.ddraw, &did, 0 );

  00015	6a 00		 push	 0
  00017	8d 85 d0 fb ff
	ff		 lea	 eax, DWORD PTR _did$[ebp]
  0001d	50		 push	 eax
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00024	8b 11		 mov	 edx, DWORD PTR [ecx]
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0002b	50		 push	 eax
  0002c	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0002f	ff d1		 call	 ecx
  00031	89 85 cc fb ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 632  : 
; 633  : 		memcpy ( this_guid, &did.guidDeviceIdentifier, sizeof ( GUID ) );

  00037	6a 10		 push	 16			; 00000010H
  00039	8d 45 e8	 lea	 eax, DWORD PTR _did$[ebp+1048]
  0003c	50		 push	 eax
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _this_guid$[ebp]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _memcpy
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@get_ddraw_:

; 634  : 	}
; 635  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?get_ddraw_device_guid@@YGXPAU_GUID@@@Z ENDP		; get_ddraw_device_guid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?get_graphics_system_initialised@@YGHXZ
_TEXT	SEGMENT
?get_graphics_system_initialised@@YGHXZ PROC		; get_graphics_system_initialised, COMDAT

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 321  : 
; 322  : 	return ( graphics_initialised );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphics_initialised@@3HA

; 323  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_graphics_system_initialised@@YGHXZ ENDP		; get_graphics_system_initialised
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?set_ddraw_use_full_screen@@YGXH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?set_ddraw_use_full_screen@@YGXH@Z PROC			; set_ddraw_use_full_screen, COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 311  : 
; 312  : 	ddraw.use_full_screen = flag;

  00009	8b 45 08	 mov	 eax, DWORD PTR _flag$[ebp]
  0000c	a3 04 00 00 00	 mov	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+4, eax

; 313  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_ddraw_use_full_screen@@YGXH@Z ENDP			; set_ddraw_use_full_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\dirdraw.c
;	COMDAT ?initialise_graphics_system@@YGHPAU_GUID@@@Z
_TEXT	SEGMENT
_device_guid$ = 8					; size = 4
?initialise_graphics_system@@YGHPAU_GUID@@@Z PROC	; initialise_graphics_system, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 233  : 
; 234  : 	ASSERT ( !graphics_initialised );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?graphics_initialised@@3HA, 0
  00010	74 18		 je	 SHORT $LN2@initialise
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_graphics_system@@YGHPAU_GUID@@@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJAKNJLM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CAEPONHO@?$CBgraphics_initialised@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@initialise:

; 235  : 
; 236  : 	save_system_palette ();

  0002a	e8 00 00 00 00	 call	 ?save_system_palette@@YGXXZ ; save_system_palette

; 237  : 
; 238  : 	initialise_graphics_colours ();

  0002f	e8 00 00 00 00	 call	 ?initialise_graphics_colours@@YGXXZ ; initialise_graphics_colours

; 239  : 
; 240  : 	register_exit_function ( ( void ( * ) ( void ) ) ddraw_release_objects );

  00034	68 00 00 00 00	 push	 OFFSET ?ddraw_release_objects@@YGHXZ ; ddraw_release_objects
  00039	e8 00 00 00 00	 call	 ?register_exit_function@@YGXP6GXXZ@Z ; register_exit_function

; 241  : 
; 242  : 	initialise_system_graphics_screens ();

  0003e	e8 00 00 00 00	 call	 ?initialise_system_graphics_screens@@YGXXZ ; initialise_system_graphics_screens

; 243  : 
; 244  : 	initialise_psd_layers ();

  00043	e8 00 00 00 00	 call	 ?initialise_psd_layers@@YGXXZ ; initialise_psd_layers

; 245  : 
; 246  : 	if ( !ddraw_initialise ( device_guid ) )

  00048	8b 45 08	 mov	 eax, DWORD PTR _device_guid$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?ddraw_initialise@@YGHPAU_GUID@@@Z ; ddraw_initialise
  00051	85 c0		 test	 eax, eax
  00053	75 04		 jne	 SHORT $LN3@initialise

; 247  : 	{
; 248  : 
; 249  : 		return ( FALSE );

  00055	33 c0		 xor	 eax, eax
  00057	eb 1e		 jmp	 SHORT $LN1@initialise
$LN3@initialise:

; 250  : 	}
; 251  : 
; 252  : 	graphics_initialised = TRUE;

  00059	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?graphics_initialised@@3HA, 1

; 253  : 
; 254  : 	register_post_activate_message_function ( ddraw_restore_objects );

  00063	68 00 00 00 00	 push	 OFFSET ?ddraw_restore_objects@@YGXH@Z ; ddraw_restore_objects
  00068	e8 00 00 00 00	 call	 ?register_post_activate_message_function@@YGHP6GXH@Z@Z ; register_post_activate_message_function

; 255  : 
; 256  : 	//
; 257  : 	// Reset the fpu rounding modes!
; 258  : 	//
; 259  : 
; 260  : 	set_fpu_rounding_mode_zero ();

  0006d	e8 00 00 00 00	 call	 ?set_fpu_rounding_mode_zero@@YGXXZ ; set_fpu_rounding_mode_zero

; 261  : 
; 262  : 	return ( TRUE );

  00072	b8 01 00 00 00	 mov	 eax, 1
$LN1@initialise:

; 263  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?initialise_graphics_system@@YGHPAU_GUID@@@Z ENDP	; initialise_graphics_system
_TEXT	ENDS
END
