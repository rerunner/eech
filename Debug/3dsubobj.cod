; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dsubobj.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?initialise_scene_quick_sub_object_search@@YGXH@Z ; initialise_scene_quick_sub_object_search
PUBLIC	?initialise_scene_visible_sub_objects@@YGXH@Z	; initialise_scene_visible_sub_objects
PUBLIC	?initialise_scene_bounding_sub_objects@@YGXH@Z	; initialise_scene_bounding_sub_objects
PUBLIC	?reset_sub_object_search_statistics@@YGXXZ	; reset_sub_object_search_statistics
PUBLIC	?report_sub_object_search_statistics@@YGXXZ	; report_sub_object_search_statistics
PUBLIC	?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
PUBLIC	?find_object_3d_sub_object_from_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@0@Z ; find_object_3d_sub_object_from_sub_object
PUBLIC	?find_sub_object@@YGPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_INSTANCE@@I@Z ; find_sub_object
PUBLIC	?find_object_3d_sub_objects@@YGHPAUOBJECT_3D_INSTANCE@@PBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@H@Z ; find_object_3d_sub_objects
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$max@N@std@@YGABNABN0@Z			; std::max<double>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??initialise_scene_quick_sub_object_search@@YGXH@Z@4JA ; `initialise_scene_quick_sub_object_search'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@LGGDPFGC@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0GG@NMJLGFCH@total_sub_object_indices?5?$DN?$DN?5obj@ ; `string'
PUBLIC	??_C@_0BJ@GHKJKEDC@current_sub_object_table@	; `string'
PUBLIC	??_C@_0CJ@GAODALJN@Unable?5to?5find?5sub?5object?5index@ ; `string'
PUBLIC	?__LINE__Var@?0??get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z@4JA ; `get_sub_object_from_sub_scene'::`1'::__LINE__Var
PUBLIC	??_C@_0EE@IPEHMMOK@number_of_sub_scenes?5?$DM?5?$CIsizeof?$CI@ ; `string'
PUBLIC	??_C@_0CA@LAMGPJDD@Failed?5to?5locate?5sub?5object?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CN@GJLDHAEA@Failed?5to?5locate?5sub?5object?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?object_3d_subobject_names@@3PAPBDA:BYTE	; object_3d_subobject_names
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?sub_object_search_minimum_depth@@3HA DD 01H DUP (?)	; sub_object_search_minimum_depth
?sub_object_index_count@@3PAHA DD 01cbH DUP (?)		; sub_object_index_count
?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A DD 01H DUP (?) ; current_sub_object_table
?number_of_sub_object_table_entries@@3HA DD 01H DUP (?)	; number_of_sub_object_table_entries
?scene_position@@3UVEC3D@@A DB 0cH DUP (?)		; scene_position
?scene_bounds@@3UOBJECT_3D_BOUNDS@@A DB 018H DUP (?)	; scene_bounds
?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A DB 018H DUP (?)	; scene_bounds2
?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A DB 018H DUP (?)	; rotated_bounds
?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A DB 018H DUP (?)	; rotated_bounds2
?scene_rotation@@3PAY02MA DD 09H DUP (?)		; scene_rotation
?contributes_to_collision@@3HA DD 01H DUP (?)		; contributes_to_collision
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GJLDHAEA@Failed?5to?5locate?5sub?5object?3?5?$CFd@
CONST	SEGMENT
??_C@_0CN@GJLDHAEA@Failed?5to?5locate?5sub?5object?3?5?$CFd@ DB 'Failed t'
	DB	'o locate sub object: %d (illegal id)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LAMGPJDD@Failed?5to?5locate?5sub?5object?3?5?$CFs@
CONST	SEGMENT
??_C@_0CA@LAMGPJDD@Failed?5to?5locate?5sub?5object?3?5?$CFs@ DB 'Failed t'
	DB	'o locate sub object: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@IPEHMMOK@number_of_sub_scenes?5?$DM?5?$CIsizeof?$CI@
CONST	SEGMENT
??_C@_0EE@IPEHMMOK@number_of_sub_scenes?5?$DM?5?$CIsizeof?$CI@ DB 'number'
	DB	'_of_sub_scenes < (sizeof(sub_scenes) / sizeof(sub_scenes[0]))'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z@4JA DD 0444H ; `get_sub_object_from_sub_scene'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@GAODALJN@Unable?5to?5find?5sub?5object?5index@
CONST	SEGMENT
??_C@_0CJ@GAODALJN@Unable?5to?5find?5sub?5object?5index@ DB 'Unable to fi'
	DB	'nd sub object index in table', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GHKJKEDC@current_sub_object_table@
CONST	SEGMENT
??_C@_0BJ@GHKJKEDC@current_sub_object_table@ DB 'current_sub_object_table'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@NMJLGFCH@total_sub_object_indices?5?$DN?$DN?5obj@
CONST	SEGMENT
??_C@_0GG@NMJLGFCH@total_sub_object_indices?5?$DN?$DN?5obj@ DB 'total_sub'
	DB	'_object_indices == objects_3d_scene_database[scene_index].tot'
	DB	'al_number_of_sub_object_indices', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LGGDPFGC@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DD@LGGDPFGC@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dsubobj.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_scene_quick_sub_object_search@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_scene_quick_sub_object_search@@YGXH@Z@4JA DD 07fH ; `initialise_scene_quick_sub_object_search'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@N@std@@YGABNABN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@N@std@@YGABNABN0@Z PROC				; std::max<double>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00013	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00017	76 65		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00019	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00023	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00027	77 02		 ja	 SHORT $LN9@max
  00029	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	6a 00		 push	 0
  00037	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	83 f8 01	 cmp	 eax, 1
  0004f	75 01		 jne	 SHORT $LN12@max
  00051	cc		 int	 3
$LN12@max:
  00052	6a 00		 push	 0
  00054	68 0e 15 00 00	 push	 5390			; 0000150eH
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	33 c0		 xor	 eax, eax
  00073	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00075	33 c0		 xor	 eax, eax
  00077	75 a0		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00079	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
??$max@N@std@@YGABNABN0@Z ENDP				; std::max<double>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_number_of_sub_scenes$ = -1044				; size = 4
_count$ = -1040						; size = 4
_offset$ = -1036					; size = 4
_this_sub_object$ = -1032				; size = 4
_sub_scenes$ = -1028					; size = 1024
_this_scene$ = -4					; size = 4
_scene_index$ = 8					; size = 4
_sub_scene$ = 12					; size = 4
_object$ = 16						; size = 4
?get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z PROC ; get_sub_object_from_sub_scene, COMDAT

; 1092 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 04 00
	00		 sub	 esp, 1236		; 000004d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1093 : 
; 1094 : 	object_3d_database_entry
; 1095 : 		*this_scene,
; 1096 : 		*sub_scenes[256];
; 1097 : 
; 1098 : 	object_3d_sub_instance
; 1099 : 		*this_sub_object;
; 1100 : 
; 1101 : 	int
; 1102 : 		offset,
; 1103 : 		count,
; 1104 : 		number_of_sub_scenes;
; 1105 : 
; 1106 : 	number_of_sub_scenes = 0;

  0000c	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _number_of_sub_scenes$[ebp], 0

; 1107 : 
; 1108 : 	this_scene = sub_scene;

  00016	8b 45 0c	 mov	 eax, DWORD PTR _sub_scene$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR _this_scene$[ebp], eax
$LN2@get_sub_ob:

; 1109 : 
; 1110 : 	// build path up to parent
; 1111 : 	while ( this_scene )

  0001c	83 7d fc 00	 cmp	 DWORD PTR _this_scene$[ebp], 0
  00020	74 4e		 je	 SHORT $LN3@get_sub_ob

; 1112 : 	{
; 1113 : 
; 1114 : 		sub_scenes[number_of_sub_scenes] = this_scene;

  00022	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _number_of_sub_scenes$[ebp]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this_scene$[ebp]
  0002b	89 8c 85 fc fb
	ff ff		 mov	 DWORD PTR _sub_scenes$[ebp+eax*4], ecx

; 1115 : 
; 1116 : 		this_scene = this_scene->parent;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this_scene$[ebp]
  00035	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00038	89 4d fc	 mov	 DWORD PTR _this_scene$[ebp], ecx

; 1117 : 
; 1118 : 		number_of_sub_scenes++;

  0003b	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _number_of_sub_scenes$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 85 ec fb ff
	ff		 mov	 DWORD PTR _number_of_sub_scenes$[ebp], eax

; 1119 : 
; 1120 : 		ASSERT(number_of_sub_scenes < (sizeof(sub_scenes) / sizeof(sub_scenes[0])));

  0004a	81 bd ec fb ff
	ff 00 01 00 00	 cmp	 DWORD PTR _number_of_sub_scenes$[ebp], 256 ; 00000100H
  00054	72 18		 jb	 SHORT $LN7@get_sub_ob
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z@4JA
  0005b	83 c0 1c	 add	 eax, 28			; 0000001cH
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LGGDPFGC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@IPEHMMOK@number_of_sub_scenes?5?$DM?5?$CIsizeof?$CI@
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_sub_ob:

; 1121 : 	}

  0006e	eb ac		 jmp	 SHORT $LN2@get_sub_ob
$LN3@get_sub_ob:

; 1122 : 
; 1123 : 	//
; 1124 : 	// Get the offset of parent from the main scene / object
; 1125 : 	//
; 1126 : 
; 1127 : 	offset = sub_scenes[ ( number_of_sub_scenes - 1 ) ] - objects_3d_scene_database[scene_index].sub_objects;

  00070	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00077	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _number_of_sub_scenes$[ebp]
  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00083	8b 8c 8d f8 fb
	ff ff		 mov	 ecx, DWORD PTR _sub_scenes$[ebp+ecx*4-4]
  0008a	2b 8c 02 d8 00
	00 00		 sub	 ecx, DWORD PTR [edx+eax+216]
  00091	8b c1		 mov	 eax, ecx
  00093	99		 cdq
  00094	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00099	f7 f9		 idiv	 ecx
  0009b	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _offset$[ebp], eax

; 1128 : 
; 1129 : 	this_sub_object = &object->sub_objects[offset];  // get the parent object

  000a1	6b 85 f4 fb ff
	ff 30		 imul	 eax, DWORD PTR _offset$[ebp], 48
  000a8	8b 4d 10	 mov	 ecx, DWORD PTR _object$[ebp]
  000ab	03 41 58	 add	 eax, DWORD PTR [ecx+88]
  000ae	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _this_sub_object$[ebp], eax

; 1130 : 
; 1131 : 	this_scene = sub_scenes[ ( number_of_sub_scenes -1 ) ];  // parent scene

  000b4	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _number_of_sub_scenes$[ebp]
  000ba	8b 8c 85 f8 fb
	ff ff		 mov	 ecx, DWORD PTR _sub_scenes$[ebp+eax*4-4]
  000c1	89 4d fc	 mov	 DWORD PTR _this_scene$[ebp], ecx

; 1132 : 
; 1133 : 	// traverse down the object tree with the same path as the scenes, and we should get the corresponding object
; 1134 : 	for ( count = ( number_of_sub_scenes - 2 ); count >= 0; count-- )

  000c4	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _number_of_sub_scenes$[ebp]
  000ca	83 e8 02	 sub	 eax, 2
  000cd	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _count$[ebp], eax
  000d3	eb 0f		 jmp	 SHORT $LN6@get_sub_ob
$LN4@get_sub_ob:
  000d5	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  000db	83 e8 01	 sub	 eax, 1
  000de	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _count$[ebp], eax
$LN6@get_sub_ob:
  000e4	83 bd f0 fb ff
	ff 00		 cmp	 DWORD PTR _count$[ebp], 0
  000eb	7c 49		 jl	 SHORT $LN5@get_sub_ob

; 1135 : 	{
; 1136 : 
; 1137 : 		offset = sub_scenes[count] - this_scene->sub_objects;

  000ed	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this_scene$[ebp]
  000f6	8b 84 85 fc fb
	ff ff		 mov	 eax, DWORD PTR _sub_scenes$[ebp+eax*4]
  000fd	2b 41 34	 sub	 eax, DWORD PTR [ecx+52]
  00100	99		 cdq
  00101	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00106	f7 f9		 idiv	 ecx
  00108	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _offset$[ebp], eax

; 1138 : 
; 1139 : 		this_sub_object = &this_sub_object->sub_objects[offset];

  0010e	6b 85 f4 fb ff
	ff 30		 imul	 eax, DWORD PTR _offset$[ebp], 48
  00115	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR _this_sub_object$[ebp]
  0011b	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0011e	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _this_sub_object$[ebp], eax

; 1140 : 
; 1141 : 		this_scene = sub_scenes[count];

  00124	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  0012a	8b 8c 85 fc fb
	ff ff		 mov	 ecx, DWORD PTR _sub_scenes$[ebp+eax*4]
  00131	89 4d fc	 mov	 DWORD PTR _this_scene$[ebp], ecx

; 1142 : 	}

  00134	eb 9f		 jmp	 SHORT $LN4@get_sub_ob
$LN5@get_sub_ob:

; 1143 : 
; 1144 : 	return ( this_sub_object );

  00136	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _this_sub_object$[ebp]

; 1145 : }

  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 0c 00	 ret	 12			; 0000000cH
?get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z ENDP ; get_sub_object_from_sub_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?sub_scene_has_parent_scene@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@0@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_scene$ = 12						; size = 4
?sub_scene_has_parent_scene@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@0@Z PROC ; sub_scene_has_parent_scene, COMDAT

; 1067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@sub_scene_:

; 1068 : 
; 1069 : 	while ( scene )

  00009	83 7d 0c 00	 cmp	 DWORD PTR _scene$[ebp], 0
  0000d	74 1f		 je	 SHORT $LN3@sub_scene_

; 1070 : 	{
; 1071 : 
; 1072 : 		if ( scene->parent == parent )

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  00012	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00015	3b 4d 08	 cmp	 ecx, DWORD PTR _parent$[ebp]
  00018	75 09		 jne	 SHORT $LN4@sub_scene_

; 1073 : 		{
; 1074 : 
; 1075 : 			return ( TRUE );

  0001a	b8 01 00 00 00	 mov	 eax, 1
  0001f	eb 0f		 jmp	 SHORT $LN1@sub_scene_

; 1076 : 		}
; 1077 : 		else

  00021	eb 09		 jmp	 SHORT $LN5@sub_scene_
$LN4@sub_scene_:

; 1078 : 		{
; 1079 : 
; 1080 : 			scene = scene->parent;

  00023	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  00026	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00029	89 4d 0c	 mov	 DWORD PTR _scene$[ebp], ecx
$LN5@sub_scene_:

; 1081 : 		}
; 1082 : 	}

  0002c	eb db		 jmp	 SHORT $LN2@sub_scene_
$LN3@sub_scene_:

; 1083 : 
; 1084 : 	return ( FALSE );

  0002e	33 c0		 xor	 eax, eax
$LN1@sub_scene_:

; 1085 : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?sub_scene_has_parent_scene@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@0@Z ENDP ; sub_scene_has_parent_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?add_sub_object_index_to_table@@YGXHPAUOBJECT_3D_DATABASE_ENTRY@@@Z
_TEXT	SEGMENT
_offset$1 = -8						; size = 4
_count$ = -4						; size = 4
_index$ = 8						; size = 4
_object$ = 12						; size = 4
?add_sub_object_index_to_table@@YGXHPAUOBJECT_3D_DATABASE_ENTRY@@@Z PROC ; add_sub_object_index_to_table, COMDAT

; 755  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 756  : 
; 757  : 	int
; 758  : 		count;
; 759  : 
; 760  : 	for ( count = 0; count < number_of_sub_object_table_entries; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@add_sub_ob
$LN2@add_sub_ob:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@add_sub_ob:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_sub_object_table_entries@@3HA
  00024	7d 5d		 jge	 SHORT $LN3@add_sub_ob

; 761  : 	{
; 762  : 
; 763  : 		if ( current_sub_object_table[count].sub_object_index == index )

  00026	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  00030	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00033	3b 55 08	 cmp	 edx, DWORD PTR _index$[ebp]
  00036	75 49		 jne	 SHORT $LN5@add_sub_ob

; 764  : 		{
; 765  : 
; 766  : 			int
; 767  : 				offset;
; 768  : 
; 769  : 			offset = current_sub_object_table[count].number_of_sub_objects;

  00038	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  00042	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00046	89 55 f8	 mov	 DWORD PTR _offset$1[ebp], edx

; 770  : 
; 771  : 			current_sub_object_table[count].sub_objects[offset] = object;

  00049	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  00053	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00057	8b 45 f8	 mov	 eax, DWORD PTR _offset$1[ebp]
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _object$[ebp]
  0005d	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 772  : 
; 773  : 			current_sub_object_table[count].number_of_sub_objects++;

  00060	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  0006a	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0006e	83 c2 01	 add	 edx, 1
  00071	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  0007b	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 774  : 
; 775  : 			return;

  0007f	eb 0f		 jmp	 SHORT $LN1@add_sub_ob
$LN5@add_sub_ob:

; 776  : 		}
; 777  : 	}

  00081	eb 8f		 jmp	 SHORT $LN2@add_sub_ob
$LN3@add_sub_ob:

; 778  : 
; 779  : 	debug_fatal ( "Unable to find sub object index in table" );

  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GAODALJN@Unable?5to?5find?5sub?5object?5index@
  00088	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0008d	83 c4 04	 add	 esp, 4
$LN1@add_sub_ob:

; 780  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
?add_sub_object_index_to_table@@YGXHPAUOBJECT_3D_DATABASE_ENTRY@@@Z ENDP ; add_sub_object_index_to_table
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?populate_table_with_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z
_TEXT	SEGMENT
_sub_object$1 = -16					; size = 4
_offset$2 = -12						; size = 4
_index$3 = -8						; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
?populate_table_with_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z PROC ; populate_table_with_named_sub_objects, COMDAT

; 717  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 718  : 
; 719  : 	int
; 720  : 		count;
; 721  : 
; 722  : 	for ( count = 0; count < object->number_of_sub_object_indices; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@populate_t
$LN2@populate_t:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@populate_t:
  0001b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0001e	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00021	80 e1 3f	 and	 cl, 63			; 0000003fH
  00024	0f b6 d1	 movzx	 edx, cl
  00027	39 55 fc	 cmp	 DWORD PTR _count$[ebp], edx
  0002a	7d 3d		 jge	 SHORT $LN3@populate_t

; 723  : 	{
; 724  : 
; 725  : 		object_3d_sub_object_index_numbers
; 726  : 			index;
; 727  : 
; 728  : 		int
; 729  : 			offset;
; 730  : 
; 731  : 		object_3d_database_entry
; 732  : 			*sub_object;
; 733  : 
; 734  : 		index = object->sub_object_indices[count].sub_object_index;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0002f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00032	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00035	0f b7 04 91	 movzx	 eax, WORD PTR [ecx+edx*4]
  00039	89 45 f8	 mov	 DWORD PTR _index$3[ebp], eax

; 735  : 
; 736  : 		offset = object->sub_object_indices[count].object_index;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0003f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00042	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00045	0f b7 44 91 02	 movzx	 eax, WORD PTR [ecx+edx*4+2]
  0004a	89 45 f4	 mov	 DWORD PTR _offset$2[ebp], eax

; 737  : 
; 738  : 		sub_object = &object->sub_objects[offset];

  0004d	6b 45 f4 38	 imul	 eax, DWORD PTR _offset$2[ebp], 56
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00054	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  00057	89 45 f0	 mov	 DWORD PTR _sub_object$1[ebp], eax

; 739  : 
; 740  : 		add_sub_object_index_to_table ( index, sub_object );

  0005a	8b 45 f0	 mov	 eax, DWORD PTR _sub_object$1[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _index$3[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?add_sub_object_index_to_table@@YGXHPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; add_sub_object_index_to_table

; 741  : 	}

  00067	eb a9		 jmp	 SHORT $LN2@populate_t
$LN3@populate_t:

; 742  : 
; 743  : 	for ( count = 0; count < object->number_of_sub_objects; count++ )

  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN7@populate_t
$LN5@populate_t:
  00072	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@populate_t:
  0007b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0007e	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00082	39 4d fc	 cmp	 DWORD PTR _count$[ebp], ecx
  00085	7d 12		 jge	 SHORT $LN1@populate_t

; 744  : 	{
; 745  : 
; 746  : 		populate_table_with_named_sub_objects ( &object->sub_objects[count] );

  00087	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0008e	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?populate_table_with_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; populate_table_with_named_sub_objects

; 747  : 	}

  00097	eb d9		 jmp	 SHORT $LN5@populate_t
$LN1@populate_t:

; 748  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?populate_table_with_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ENDP ; populate_table_with_named_sub_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?count_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_sub_scene$ = 8						; size = 4
?count_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z PROC ; count_named_sub_objects, COMDAT

; 694  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 695  : 
; 696  : 	int
; 697  : 		count;
; 698  : 
; 699  : 	for ( count = 0; count < sub_scene->number_of_sub_object_indices; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@count_name
$LN2@count_name:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@count_name:
  0001b	8b 45 08	 mov	 eax, DWORD PTR _sub_scene$[ebp]
  0001e	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00021	80 e1 3f	 and	 cl, 63			; 0000003fH
  00024	0f b6 d1	 movzx	 edx, cl
  00027	39 55 fc	 cmp	 DWORD PTR _count$[ebp], edx
  0002a	7d 2d		 jge	 SHORT $LN3@count_name

; 700  : 	{
; 701  : 
; 702  : 		sub_object_index_count[ sub_scene->sub_object_indices[count].sub_object_index ]++;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _sub_scene$[ebp]
  0002f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00032	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00035	0f b7 04 91	 movzx	 eax, WORD PTR [ecx+edx*4]
  00039	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?sub_object_index_count@@3PAHA[eax*4]
  00040	83 c1 01	 add	 ecx, 1
  00043	8b 55 08	 mov	 edx, DWORD PTR _sub_scene$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0004c	0f b7 04 90	 movzx	 eax, WORD PTR [eax+edx*4]
  00050	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?sub_object_index_count@@3PAHA[eax*4], ecx

; 703  : 	}

  00057	eb b9		 jmp	 SHORT $LN2@count_name
$LN3@count_name:

; 704  : 
; 705  : 	for ( count = 0; count < sub_scene->number_of_sub_objects; count++ )

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00060	eb 09		 jmp	 SHORT $LN7@count_name
$LN5@count_name:
  00062	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@count_name:
  0006b	8b 45 08	 mov	 eax, DWORD PTR _sub_scene$[ebp]
  0006e	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00072	39 4d fc	 cmp	 DWORD PTR _count$[ebp], ecx
  00075	7d 12		 jge	 SHORT $LN1@count_name

; 706  : 	{
; 707  : 
; 708  : 		count_named_sub_objects ( &sub_scene->sub_objects[count] );

  00077	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _sub_scene$[ebp]
  0007e	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?count_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; count_named_sub_objects

; 709  : 	}

  00087	eb d9		 jmp	 SHORT $LN5@count_name
$LN1@count_name:

; 710  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?count_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ENDP ; count_named_sub_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?rotate_sub_scene_boundaries@@YGXPAUOBJECT_3D_BOUNDS@@0@Z
_TEXT	SEGMENT
_z$1 = -112						; size = 4
_y$2 = -108						; size = 4
_x$3 = -104						; size = 4
_count$ = -100						; size = 4
_cube_points$ = -96					; size = 96
_results$ = 8						; size = 4
_source$ = 12						; size = 4
?rotate_sub_scene_boundaries@@YGXPAUOBJECT_3D_BOUNDS@@0@Z PROC ; rotate_sub_scene_boundaries, COMDAT

; 619  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 620  : 
; 621  : 	vec3d
; 622  : 		cube_points[8];
; 623  : 
; 624  : 	int
; 625  : 		count;
; 626  : 
; 627  : 	if (	( source->xmin == 0.0 ) && ( source->xmax == 0.0 ) &&
; 628  : 			( source->ymin == 0.0 ) && ( source->ymax == 0.0 ) &&
; 629  : 			( source->zmin == 0.0 ) && ( source->zmax == 0.0 ) )

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0000f	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00013	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0001b	9f		 lahf
  0001c	f6 c4 44	 test	 ah, 68			; 00000044H
  0001f	0f 8a bc 00 00
	00		 jp	 $LN8@rotate_sub
  00025	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00028	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0002d	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00035	9f		 lahf
  00036	f6 c4 44	 test	 ah, 68			; 00000044H
  00039	0f 8a a2 00 00
	00		 jp	 $LN8@rotate_sub
  0003f	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00042	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  00047	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0004f	9f		 lahf
  00050	f6 c4 44	 test	 ah, 68			; 00000044H
  00053	0f 8a 88 00 00
	00		 jp	 $LN8@rotate_sub
  00059	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0005c	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00061	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00069	9f		 lahf
  0006a	f6 c4 44	 test	 ah, 68			; 00000044H
  0006d	7a 72		 jp	 SHORT $LN8@rotate_sub
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00072	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00077	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0007f	9f		 lahf
  00080	f6 c4 44	 test	 ah, 68			; 00000044H
  00083	7a 5c		 jp	 SHORT $LN8@rotate_sub
  00085	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00088	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  0008d	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00095	9f		 lahf
  00096	f6 c4 44	 test	 ah, 68			; 00000044H
  00099	7a 46		 jp	 SHORT $LN8@rotate_sub

; 630  : 	{
; 631  : 
; 632  : 		results->xmin = 0.0;

  0009b	8b 45 08	 mov	 eax, DWORD PTR _results$[ebp]
  0009e	0f 57 c0	 xorps	 xmm0, xmm0
  000a1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 633  : 		results->xmax = 0.0;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _results$[ebp]
  000a8	0f 57 c0	 xorps	 xmm0, xmm0
  000ab	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 634  : 		results->ymin = 0.0;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _results$[ebp]
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 635  : 		results->ymax = 0.0;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _results$[ebp]
  000be	0f 57 c0	 xorps	 xmm0, xmm0
  000c1	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 636  : 		results->zmin = 0.0;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _results$[ebp]
  000c9	0f 57 c0	 xorps	 xmm0, xmm0
  000cc	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 637  : 		results->zmax = 0.0;

  000d1	8b 45 08	 mov	 eax, DWORD PTR _results$[ebp]
  000d4	0f 57 c0	 xorps	 xmm0, xmm0
  000d7	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 638  : 	}
; 639  : 	else

  000dc	e9 89 04 00 00	 jmp	 $LN6@rotate_sub
$LN8@rotate_sub:

; 640  : 	{
; 641  : 
; 642  : 		cube_points[0].x = source->xmin; cube_points[0].y = source->ymin; cube_points[0].z = source->zmin;

  000e1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000e6	6b c8 00	 imul	 ecx, eax, 0
  000e9	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  000ec	8b 02		 mov	 eax, DWORD PTR [edx]
  000ee	89 44 0d a0	 mov	 DWORD PTR _cube_points$[ebp+ecx], eax
  000f2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000f7	6b c8 00	 imul	 ecx, eax, 0
  000fa	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  000fd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00100	89 44 0d a4	 mov	 DWORD PTR _cube_points$[ebp+ecx+4], eax
  00104	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00109	6b c8 00	 imul	 ecx, eax, 0
  0010c	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  0010f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00112	89 44 0d a8	 mov	 DWORD PTR _cube_points$[ebp+ecx+8], eax

; 643  : 		cube_points[1].x = source->xmin; cube_points[1].y = source->ymin; cube_points[1].z = source->zmax;

  00116	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0011b	c1 e0 00	 shl	 eax, 0
  0011e	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00121	8b 11		 mov	 edx, DWORD PTR [ecx]
  00123	89 54 05 a0	 mov	 DWORD PTR _cube_points$[ebp+eax], edx
  00127	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0012c	c1 e0 00	 shl	 eax, 0
  0012f	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00132	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00135	89 54 05 a4	 mov	 DWORD PTR _cube_points$[ebp+eax+4], edx
  00139	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013e	c1 e0 00	 shl	 eax, 0
  00141	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00144	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00147	89 54 05 a8	 mov	 DWORD PTR _cube_points$[ebp+eax+8], edx

; 644  : 		cube_points[2].x = source->xmin; cube_points[2].y = source->ymax; cube_points[2].z = source->zmin;

  0014b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00150	d1 e0		 shl	 eax, 1
  00152	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00155	8b 11		 mov	 edx, DWORD PTR [ecx]
  00157	89 54 05 a0	 mov	 DWORD PTR _cube_points$[ebp+eax], edx
  0015b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00160	d1 e0		 shl	 eax, 1
  00162	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00165	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00168	89 54 05 a4	 mov	 DWORD PTR _cube_points$[ebp+eax+4], edx
  0016c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00171	d1 e0		 shl	 eax, 1
  00173	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00176	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00179	89 54 05 a8	 mov	 DWORD PTR _cube_points$[ebp+eax+8], edx

; 645  : 		cube_points[3].x = source->xmin; cube_points[3].y = source->ymax; cube_points[3].z = source->zmax;

  0017d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00182	6b c8 03	 imul	 ecx, eax, 3
  00185	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  00188	8b 02		 mov	 eax, DWORD PTR [edx]
  0018a	89 44 0d a0	 mov	 DWORD PTR _cube_points$[ebp+ecx], eax
  0018e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00193	6b c8 03	 imul	 ecx, eax, 3
  00196	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  00199	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0019c	89 44 0d a4	 mov	 DWORD PTR _cube_points$[ebp+ecx+4], eax
  001a0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001a5	6b c8 03	 imul	 ecx, eax, 3
  001a8	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  001ab	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001ae	89 44 0d a8	 mov	 DWORD PTR _cube_points$[ebp+ecx+8], eax

; 646  : 		cube_points[4].x = source->xmax; cube_points[4].y = source->ymin; cube_points[4].z = source->zmin;

  001b2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b7	c1 e0 02	 shl	 eax, 2
  001ba	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  001bd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c0	89 54 05 a0	 mov	 DWORD PTR _cube_points$[ebp+eax], edx
  001c4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001c9	c1 e0 02	 shl	 eax, 2
  001cc	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  001cf	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001d2	89 54 05 a4	 mov	 DWORD PTR _cube_points$[ebp+eax+4], edx
  001d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001db	c1 e0 02	 shl	 eax, 2
  001de	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  001e1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001e4	89 54 05 a8	 mov	 DWORD PTR _cube_points$[ebp+eax+8], edx

; 647  : 		cube_points[5].x = source->xmax; cube_points[5].y = source->ymin; cube_points[5].z = source->zmax;

  001e8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ed	6b c8 05	 imul	 ecx, eax, 5
  001f0	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  001f3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001f6	89 44 0d a0	 mov	 DWORD PTR _cube_points$[ebp+ecx], eax
  001fa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ff	6b c8 05	 imul	 ecx, eax, 5
  00202	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  00205	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00208	89 44 0d a4	 mov	 DWORD PTR _cube_points$[ebp+ecx+4], eax
  0020c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00211	6b c8 05	 imul	 ecx, eax, 5
  00214	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  00217	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0021a	89 44 0d a8	 mov	 DWORD PTR _cube_points$[ebp+ecx+8], eax

; 648  : 		cube_points[6].x = source->xmax; cube_points[6].y = source->ymax; cube_points[6].z = source->zmin;

  0021e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00223	6b c8 06	 imul	 ecx, eax, 6
  00226	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  00229	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0022c	89 44 0d a0	 mov	 DWORD PTR _cube_points$[ebp+ecx], eax
  00230	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00235	6b c8 06	 imul	 ecx, eax, 6
  00238	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  0023b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0023e	89 44 0d a4	 mov	 DWORD PTR _cube_points$[ebp+ecx+4], eax
  00242	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00247	6b c8 06	 imul	 ecx, eax, 6
  0024a	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  0024d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00250	89 44 0d a8	 mov	 DWORD PTR _cube_points$[ebp+ecx+8], eax

; 649  : 		cube_points[7].x = source->xmax; cube_points[7].y = source->ymax; cube_points[7].z = source->zmax;

  00254	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00259	6b c8 07	 imul	 ecx, eax, 7
  0025c	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  0025f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00262	89 44 0d a0	 mov	 DWORD PTR _cube_points$[ebp+ecx], eax
  00266	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0026b	6b c8 07	 imul	 ecx, eax, 7
  0026e	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  00271	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00274	89 44 0d a4	 mov	 DWORD PTR _cube_points$[ebp+ecx+4], eax
  00278	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0027d	6b c8 07	 imul	 ecx, eax, 7
  00280	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  00283	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00286	89 44 0d a8	 mov	 DWORD PTR _cube_points$[ebp+ecx+8], eax

; 650  : 
; 651  : 		for ( count = 0; count < 8; count++ )

  0028a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00291	eb 09		 jmp	 SHORT $LN4@rotate_sub
$LN2@rotate_sub:
  00293	8b 45 9c	 mov	 eax, DWORD PTR _count$[ebp]
  00296	83 c0 01	 add	 eax, 1
  00299	89 45 9c	 mov	 DWORD PTR _count$[ebp], eax
$LN4@rotate_sub:
  0029c	83 7d 9c 08	 cmp	 DWORD PTR _count$[ebp], 8
  002a0	0f 8d 8e 01 00
	00		 jge	 $LN3@rotate_sub

; 652  : 		{
; 653  : 
; 654  : 			float
; 655  : 				x,
; 656  : 				y,
; 657  : 				z;
; 658  : 
; 659  : 			x = cube_points[count].x * scene_rotation[0][0] + cube_points[count].y * scene_rotation[1][0] + cube_points[count].z * scene_rotation[2][0];

  002a6	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  002aa	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002af	6b d1 00	 imul	 edx, ecx, 0
  002b2	b9 04 00 00 00	 mov	 ecx, 4
  002b7	6b c9 00	 imul	 ecx, ecx, 0
  002ba	f3 0f 10 44 05
	a0		 movss	 xmm0, DWORD PTR _cube_points$[ebp+eax]
  002c0	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+ecx]
  002c9	6b 55 9c 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  002cd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002d2	c1 e0 00	 shl	 eax, 0
  002d5	b9 04 00 00 00	 mov	 ecx, 4
  002da	6b c9 00	 imul	 ecx, ecx, 0
  002dd	f3 0f 10 4c 15
	a4		 movss	 xmm1, DWORD PTR _cube_points$[ebp+edx+4]
  002e3	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  002ec	f3 0f 58 c1	 addss	 xmm0, xmm1
  002f0	6b 55 9c 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  002f4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002f9	d1 e0		 shl	 eax, 1
  002fb	b9 04 00 00 00	 mov	 ecx, 4
  00300	6b c9 00	 imul	 ecx, ecx, 0
  00303	f3 0f 10 4c 15
	a8		 movss	 xmm1, DWORD PTR _cube_points$[ebp+edx+8]
  00309	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  00312	f3 0f 58 c1	 addss	 xmm0, xmm1
  00316	f3 0f 11 45 98	 movss	 DWORD PTR _x$3[ebp], xmm0

; 660  : 			y = cube_points[count].x * scene_rotation[0][1] + cube_points[count].y * scene_rotation[1][1] + cube_points[count].z * scene_rotation[2][1];

  0031b	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0031f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00324	6b d1 00	 imul	 edx, ecx, 0
  00327	b9 04 00 00 00	 mov	 ecx, 4
  0032c	c1 e1 00	 shl	 ecx, 0
  0032f	f3 0f 10 44 05
	a0		 movss	 xmm0, DWORD PTR _cube_points$[ebp+eax]
  00335	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+ecx]
  0033e	6b 55 9c 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  00342	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00347	c1 e0 00	 shl	 eax, 0
  0034a	b9 04 00 00 00	 mov	 ecx, 4
  0034f	c1 e1 00	 shl	 ecx, 0
  00352	f3 0f 10 4c 15
	a4		 movss	 xmm1, DWORD PTR _cube_points$[ebp+edx+4]
  00358	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  00361	f3 0f 58 c1	 addss	 xmm0, xmm1
  00365	6b 55 9c 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  00369	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0036e	d1 e0		 shl	 eax, 1
  00370	b9 04 00 00 00	 mov	 ecx, 4
  00375	c1 e1 00	 shl	 ecx, 0
  00378	f3 0f 10 4c 15
	a8		 movss	 xmm1, DWORD PTR _cube_points$[ebp+edx+8]
  0037e	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  00387	f3 0f 58 c1	 addss	 xmm0, xmm1
  0038b	f3 0f 11 45 94	 movss	 DWORD PTR _y$2[ebp], xmm0

; 661  : 			z = cube_points[count].x * scene_rotation[0][2] + cube_points[count].y * scene_rotation[1][2] + cube_points[count].z * scene_rotation[2][2];

  00390	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00394	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00399	6b d1 00	 imul	 edx, ecx, 0
  0039c	b9 04 00 00 00	 mov	 ecx, 4
  003a1	d1 e1		 shl	 ecx, 1
  003a3	f3 0f 10 44 05
	a0		 movss	 xmm0, DWORD PTR _cube_points$[ebp+eax]
  003a9	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+ecx]
  003b2	6b 55 9c 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  003b6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003bb	c1 e0 00	 shl	 eax, 0
  003be	b9 04 00 00 00	 mov	 ecx, 4
  003c3	d1 e1		 shl	 ecx, 1
  003c5	f3 0f 10 4c 15
	a4		 movss	 xmm1, DWORD PTR _cube_points$[ebp+edx+4]
  003cb	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  003d4	f3 0f 58 c1	 addss	 xmm0, xmm1
  003d8	6b 55 9c 0c	 imul	 edx, DWORD PTR _count$[ebp], 12
  003dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003e1	d1 e0		 shl	 eax, 1
  003e3	b9 04 00 00 00	 mov	 ecx, 4
  003e8	d1 e1		 shl	 ecx, 1
  003ea	f3 0f 10 4c 15
	a8		 movss	 xmm1, DWORD PTR _cube_points$[ebp+edx+8]
  003f0	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  003f9	f3 0f 58 c1	 addss	 xmm0, xmm1
  003fd	f3 0f 11 45 90	 movss	 DWORD PTR _z$1[ebp], xmm0

; 662  : 
; 663  : 			cube_points[count].x = x;

  00402	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00406	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x$3[ebp]
  0040b	f3 0f 11 44 05
	a0		 movss	 DWORD PTR _cube_points$[ebp+eax], xmm0

; 664  : 			cube_points[count].y = y;

  00411	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00415	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$2[ebp]
  0041a	f3 0f 11 44 05
	a4		 movss	 DWORD PTR _cube_points$[ebp+eax+4], xmm0

; 665  : 			cube_points[count].z = z;

  00420	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00424	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _z$1[ebp]
  00429	f3 0f 11 44 05
	a8		 movss	 DWORD PTR _cube_points$[ebp+eax+8], xmm0

; 666  : 		}

  0042f	e9 5f fe ff ff	 jmp	 $LN2@rotate_sub
$LN3@rotate_sub:

; 667  : 
; 668  : 		results->xmin = cube_points[0].x;

  00434	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00439	6b c8 00	 imul	 ecx, eax, 0
  0043c	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  0043f	8b 44 0d a0	 mov	 eax, DWORD PTR _cube_points$[ebp+ecx]
  00443	89 02		 mov	 DWORD PTR [edx], eax

; 669  : 		results->xmax = cube_points[0].x;

  00445	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0044a	6b c8 00	 imul	 ecx, eax, 0
  0044d	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  00450	8b 44 0d a0	 mov	 eax, DWORD PTR _cube_points$[ebp+ecx]
  00454	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 670  : 		results->ymin = cube_points[0].y;

  00457	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0045c	6b c8 00	 imul	 ecx, eax, 0
  0045f	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  00462	8b 44 0d a4	 mov	 eax, DWORD PTR _cube_points$[ebp+ecx+4]
  00466	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 671  : 		results->ymax = cube_points[0].y;

  00469	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0046e	6b c8 00	 imul	 ecx, eax, 0
  00471	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  00474	8b 44 0d a4	 mov	 eax, DWORD PTR _cube_points$[ebp+ecx+4]
  00478	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 672  : 		results->zmin = cube_points[0].z;

  0047b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00480	6b c8 00	 imul	 ecx, eax, 0
  00483	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  00486	8b 44 0d a8	 mov	 eax, DWORD PTR _cube_points$[ebp+ecx+8]
  0048a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 673  : 		results->zmax = cube_points[0].z;

  0048d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00492	6b c8 00	 imul	 ecx, eax, 0
  00495	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  00498	8b 44 0d a8	 mov	 eax, DWORD PTR _cube_points$[ebp+ecx+8]
  0049c	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 674  : 
; 675  : 		for ( count = 1; count < 8; count++ )

  0049f	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  004a6	eb 09		 jmp	 SHORT $LN7@rotate_sub
$LN5@rotate_sub:
  004a8	8b 45 9c	 mov	 eax, DWORD PTR _count$[ebp]
  004ab	83 c0 01	 add	 eax, 1
  004ae	89 45 9c	 mov	 DWORD PTR _count$[ebp], eax
$LN7@rotate_sub:
  004b1	83 7d 9c 08	 cmp	 DWORD PTR _count$[ebp], 8
  004b5	0f 8d af 00 00
	00		 jge	 $LN6@rotate_sub

; 676  : 		{
; 677  : 
; 678  : 			results->xmin = min ( results->xmin, cube_points[count].x );

  004bb	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  004bf	8d 4c 05 a0	 lea	 ecx, DWORD PTR _cube_points$[ebp+eax]
  004c3	51		 push	 ecx
  004c4	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  004c7	52		 push	 edx
  004c8	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  004cd	8b 4d 08	 mov	 ecx, DWORD PTR _results$[ebp]
  004d0	8b 10		 mov	 edx, DWORD PTR [eax]
  004d2	89 11		 mov	 DWORD PTR [ecx], edx

; 679  : 			results->ymin = min ( results->ymin, cube_points[count].y );

  004d4	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  004d8	8d 4c 05 a4	 lea	 ecx, DWORD PTR _cube_points$[ebp+eax+4]
  004dc	51		 push	 ecx
  004dd	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  004e0	83 c2 08	 add	 edx, 8
  004e3	52		 push	 edx
  004e4	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  004e9	8b 4d 08	 mov	 ecx, DWORD PTR _results$[ebp]
  004ec	8b 10		 mov	 edx, DWORD PTR [eax]
  004ee	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 680  : 			results->zmin = min ( results->zmin, cube_points[count].z );

  004f1	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  004f5	8d 4c 05 a8	 lea	 ecx, DWORD PTR _cube_points$[ebp+eax+8]
  004f9	51		 push	 ecx
  004fa	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  004fd	83 c2 10	 add	 edx, 16			; 00000010H
  00500	52		 push	 edx
  00501	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00506	8b 4d 08	 mov	 ecx, DWORD PTR _results$[ebp]
  00509	8b 10		 mov	 edx, DWORD PTR [eax]
  0050b	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 681  : 
; 682  : 			results->xmax = max ( results->xmax, cube_points[count].x );

  0050e	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00512	8d 4c 05 a0	 lea	 ecx, DWORD PTR _cube_points$[ebp+eax]
  00516	51		 push	 ecx
  00517	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  0051a	83 c2 04	 add	 edx, 4
  0051d	52		 push	 edx
  0051e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00523	8b 4d 08	 mov	 ecx, DWORD PTR _results$[ebp]
  00526	8b 10		 mov	 edx, DWORD PTR [eax]
  00528	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 683  : 			results->ymax = max ( results->ymax, cube_points[count].y );

  0052b	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0052f	8d 4c 05 a4	 lea	 ecx, DWORD PTR _cube_points$[ebp+eax+4]
  00533	51		 push	 ecx
  00534	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  00537	83 c2 0c	 add	 edx, 12			; 0000000cH
  0053a	52		 push	 edx
  0053b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00540	8b 4d 08	 mov	 ecx, DWORD PTR _results$[ebp]
  00543	8b 10		 mov	 edx, DWORD PTR [eax]
  00545	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 684  : 			results->zmax = max ( results->zmax, cube_points[count].z );

  00548	6b 45 9c 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0054c	8d 4c 05 a8	 lea	 ecx, DWORD PTR _cube_points$[ebp+eax+8]
  00550	51		 push	 ecx
  00551	8b 55 08	 mov	 edx, DWORD PTR _results$[ebp]
  00554	83 c2 14	 add	 edx, 20			; 00000014H
  00557	52		 push	 edx
  00558	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0055d	8b 4d 08	 mov	 ecx, DWORD PTR _results$[ebp]
  00560	8b 10		 mov	 edx, DWORD PTR [eax]
  00562	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 685  : 		}

  00565	e9 3e ff ff ff	 jmp	 $LN5@rotate_sub
$LN6@rotate_sub:

; 686  : 	}
; 687  : }

  0056a	5f		 pop	 edi
  0056b	5e		 pop	 esi
  0056c	5b		 pop	 ebx
  0056d	8b e5		 mov	 esp, ebp
  0056f	5d		 pop	 ebp
  00570	c2 08 00	 ret	 8
?rotate_sub_scene_boundaries@@YGXPAUOBJECT_3D_BOUNDS@@0@Z ENDP ; rotate_sub_scene_boundaries
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?recurse_initialise_sub_scene_bounding_box@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z
_TEXT	SEGMENT
_count$ = -140						; size = 4
_old_contributes_to_collision$ = -136			; size = 4
_old_scene_rotation$ = -132				; size = 36
_new_rotation$ = -96					; size = 36
_matrix$ = -60						; size = 36
_relative_position$ = -24				; size = 12
_old_scene_position$ = -12				; size = 12
_sub_object$ = 8					; size = 4
?recurse_initialise_sub_scene_bounding_box@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z PROC ; recurse_initialise_sub_scene_bounding_box, COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 464  : 
; 465  : 	vec3d
; 466  : 		old_scene_position,
; 467  : 		relative_position;
; 468  : 
; 469  : 	matrix3x3
; 470  : 		matrix,
; 471  : 		new_rotation,
; 472  : 		old_scene_rotation;
; 473  : 
; 474  : 	int
; 475  : 		old_contributes_to_collision,
; 476  : 		count;
; 477  : 
; 478  : 	//
; 479  : 	// Save state variables
; 480  : 	//
; 481  : 
; 482  : 	old_scene_position = scene_position;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?scene_position@@3UVEC3D@@A
  00011	89 45 f4	 mov	 DWORD PTR _old_scene_position$[ebp], eax
  00014	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?scene_position@@3UVEC3D@@A+4
  0001a	89 4d f8	 mov	 DWORD PTR _old_scene_position$[ebp+4], ecx
  0001d	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?scene_position@@3UVEC3D@@A+8
  00023	89 55 fc	 mov	 DWORD PTR _old_scene_position$[ebp+8], edx

; 483  : 
; 484  : 	old_contributes_to_collision = contributes_to_collision;

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?contributes_to_collision@@3HA
  0002b	89 85 78 ff ff
	ff		 mov	 DWORD PTR _old_contributes_to_collision$[ebp], eax

; 485  : 
; 486  : 	memcpy ( old_scene_rotation, scene_rotation, sizeof ( matrix3x3 ) );

  00031	6a 24		 push	 36			; 00000024H
  00033	68 00 00 00 00	 push	 OFFSET ?scene_rotation@@3PAY02MA
  00038	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _old_scene_rotation$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _memcpy
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 487  : 
; 488  : 	//
; 489  : 	// Set the collision flag
; 490  : 	//
; 491  : 
; 492  : 	if ( !sub_object->collision_contribution )

  00047	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  0004a	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0004d	c0 e9 07	 shr	 cl, 7
  00050	80 e1 01	 and	 cl, 1
  00053	0f b6 d1	 movzx	 edx, cl
  00056	85 d2		 test	 edx, edx
  00058	75 0a		 jne	 SHORT $LN5@recurse_in

; 493  : 	{
; 494  : 
; 495  : 		contributes_to_collision = FALSE;

  0005a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?contributes_to_collision@@3HA, 0
$LN5@recurse_in:

; 496  : 	}
; 497  : 
; 498  : 	//
; 499  : 	// Figure out new position
; 500  : 	//
; 501  : 
; 502  : 	relative_position.x = (	( sub_object->keyframes[0].x * scene_rotation[0][0] ) +

  00064	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  0006f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00072	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00077	6b d2 00	 imul	 edx, edx, 0
  0007a	be 04 00 00 00	 mov	 esi, 4
  0007f	6b f6 00	 imul	 esi, esi, 0
  00082	f3 0f 10 44 08
	08		 movss	 xmm0, DWORD PTR [eax+ecx+8]
  00088	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00091	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00096	6b c8 00	 imul	 ecx, eax, 0
  00099	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  0009c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0009f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000a4	c1 e2 00	 shl	 edx, 0
  000a7	be 04 00 00 00	 mov	 esi, 4
  000ac	6b f6 00	 imul	 esi, esi, 0
  000af	f3 0f 10 4c 08
	0c		 movss	 xmm1, DWORD PTR [eax+ecx+12]
  000b5	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  000be	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c2	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  000c7	6b c8 00	 imul	 ecx, eax, 0
  000ca	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  000cd	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000d0	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000d5	d1 e2		 shl	 edx, 1
  000d7	be 04 00 00 00	 mov	 esi, 4
  000dc	6b f6 00	 imul	 esi, esi, 0
  000df	f3 0f 10 4c 08
	10		 movss	 xmm1, DWORD PTR [eax+ecx+16]
  000e5	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  000ee	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f2	f3 0f 11 45 e8	 movss	 DWORD PTR _relative_position$[ebp], xmm0

; 503  : 									( sub_object->keyframes[0].y * scene_rotation[1][0] ) +
; 504  : 									( sub_object->keyframes[0].z * scene_rotation[2][0] ) );
; 505  : 	relative_position.y = (	( sub_object->keyframes[0].x * scene_rotation[0][1] ) +

  000f7	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  000fc	6b c8 00	 imul	 ecx, eax, 0
  000ff	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  00102	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00105	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0010a	6b d2 00	 imul	 edx, edx, 0
  0010d	be 04 00 00 00	 mov	 esi, 4
  00112	c1 e6 00	 shl	 esi, 0
  00115	f3 0f 10 44 08
	08		 movss	 xmm0, DWORD PTR [eax+ecx+8]
  0011b	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00124	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00129	6b c8 00	 imul	 ecx, eax, 0
  0012c	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  0012f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00132	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00137	c1 e2 00	 shl	 edx, 0
  0013a	be 04 00 00 00	 mov	 esi, 4
  0013f	c1 e6 00	 shl	 esi, 0
  00142	f3 0f 10 4c 08
	0c		 movss	 xmm1, DWORD PTR [eax+ecx+12]
  00148	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00151	f3 0f 58 c1	 addss	 xmm0, xmm1
  00155	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0015a	6b c8 00	 imul	 ecx, eax, 0
  0015d	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  00160	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00163	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00168	d1 e2		 shl	 edx, 1
  0016a	be 04 00 00 00	 mov	 esi, 4
  0016f	c1 e6 00	 shl	 esi, 0
  00172	f3 0f 10 4c 08
	10		 movss	 xmm1, DWORD PTR [eax+ecx+16]
  00178	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00181	f3 0f 58 c1	 addss	 xmm0, xmm1
  00185	f3 0f 11 45 ec	 movss	 DWORD PTR _relative_position$[ebp+4], xmm0

; 506  : 									( sub_object->keyframes[0].y * scene_rotation[1][1] ) +
; 507  : 									( sub_object->keyframes[0].z * scene_rotation[2][1] ) );
; 508  : 	relative_position.z = (	( sub_object->keyframes[0].x * scene_rotation[0][2] ) +

  0018a	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0018f	6b c8 00	 imul	 ecx, eax, 0
  00192	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  00195	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00198	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0019d	6b d2 00	 imul	 edx, edx, 0
  001a0	be 04 00 00 00	 mov	 esi, 4
  001a5	d1 e6		 shl	 esi, 1
  001a7	f3 0f 10 44 08
	08		 movss	 xmm0, DWORD PTR [eax+ecx+8]
  001ad	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  001b6	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  001bb	6b c8 00	 imul	 ecx, eax, 0
  001be	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  001c1	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001c4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001c9	c1 e2 00	 shl	 edx, 0
  001cc	be 04 00 00 00	 mov	 esi, 4
  001d1	d1 e6		 shl	 esi, 1
  001d3	f3 0f 10 4c 08
	0c		 movss	 xmm1, DWORD PTR [eax+ecx+12]
  001d9	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  001e2	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e6	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  001eb	6b c8 00	 imul	 ecx, eax, 0
  001ee	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  001f1	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001f4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001f9	d1 e2		 shl	 edx, 1
  001fb	be 04 00 00 00	 mov	 esi, 4
  00200	d1 e6		 shl	 esi, 1
  00202	f3 0f 10 4c 08
	10		 movss	 xmm1, DWORD PTR [eax+ecx+16]
  00208	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00211	f3 0f 58 c1	 addss	 xmm0, xmm1
  00215	f3 0f 11 45 f0	 movss	 DWORD PTR _relative_position$[ebp+8], xmm0

; 509  : 									( sub_object->keyframes[0].y * scene_rotation[1][2] ) +
; 510  : 									( sub_object->keyframes[0].z * scene_rotation[2][2] ) );
; 511  : 
; 512  : 	scene_position.x += relative_position.x;

  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A
  00222	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _relative_position$[ebp]
  00227	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scene_position@@3UVEC3D@@A, xmm0

; 513  : 	scene_position.y += relative_position.y;

  0022f	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+4
  00237	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _relative_position$[ebp+4]
  0023c	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?scene_position@@3UVEC3D@@A+4, xmm0

; 514  : 	scene_position.z += relative_position.z;

  00244	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+8
  0024c	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _relative_position$[ebp+8]
  00251	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?scene_position@@3UVEC3D@@A+8, xmm0

; 515  : 
; 516  : 	get_3d_transformation_matrix ( matrix, sub_object->keyframes[0].heading, -sub_object->keyframes[0].pitch, -sub_object->keyframes[0].roll );

  00259	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0025e	6b c8 00	 imul	 ecx, eax, 0
  00261	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  00264	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00267	f3 0f 10 44 08
	1c		 movss	 xmm0, DWORD PTR [eax+ecx+28]
  0026d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00274	51		 push	 ecx
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0027f	6b d1 00	 imul	 edx, ecx, 0
  00282	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  00285	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00288	f3 0f 10 44 11
	18		 movss	 xmm0, DWORD PTR [ecx+edx+24]
  0028e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00295	51		 push	 ecx
  00296	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029b	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  002a0	6b c2 00	 imul	 eax, edx, 0
  002a3	8b 4d 08	 mov	 ecx, DWORD PTR _sub_object$[ebp]
  002a6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002a9	51		 push	 ecx
  002aa	f3 0f 10 44 02
	14		 movss	 xmm0, DWORD PTR [edx+eax+20]
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	8d 45 c4	 lea	 eax, DWORD PTR _matrix$[ebp]
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 517  : 
; 518  : 	new_rotation[0][0] = ( ( matrix[0][0] * scene_rotation[0][0] ) + ( matrix[0][1] * scene_rotation[1][0] ) + ( matrix[0][2] * scene_rotation[2][0] ) );

  002be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002c3	6b c8 00	 imul	 ecx, eax, 0
  002c6	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  002ca	b8 04 00 00 00	 mov	 eax, 4
  002cf	6b c8 00	 imul	 ecx, eax, 0
  002d2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002d7	6b c0 00	 imul	 eax, eax, 0
  002da	be 04 00 00 00	 mov	 esi, 4
  002df	6b f6 00	 imul	 esi, esi, 0
  002e2	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  002e7	f3 0f 59 84 30
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  002f0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002f5	6b d1 00	 imul	 edx, ecx, 0
  002f8	8d 44 15 c4	 lea	 eax, DWORD PTR _matrix$[ebp+edx]
  002fc	b9 04 00 00 00	 mov	 ecx, 4
  00301	c1 e1 00	 shl	 ecx, 0
  00304	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00309	c1 e2 00	 shl	 edx, 0
  0030c	be 04 00 00 00	 mov	 esi, 4
  00311	6b f6 00	 imul	 esi, esi, 0
  00314	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  00319	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00322	f3 0f 58 c1	 addss	 xmm0, xmm1
  00326	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0032b	6b c8 00	 imul	 ecx, eax, 0
  0032e	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00332	b8 04 00 00 00	 mov	 eax, 4
  00337	d1 e0		 shl	 eax, 1
  00339	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0033e	d1 e1		 shl	 ecx, 1
  00340	be 04 00 00 00	 mov	 esi, 4
  00345	6b f6 00	 imul	 esi, esi, 0
  00348	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0034d	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  00356	f3 0f 58 c1	 addss	 xmm0, xmm1
  0035a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0035f	6b c2 00	 imul	 eax, edx, 0
  00362	8d 4c 05 a0	 lea	 ecx, DWORD PTR _new_rotation$[ebp+eax]
  00366	ba 04 00 00 00	 mov	 edx, 4
  0036b	6b c2 00	 imul	 eax, edx, 0
  0036e	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 519  : 	new_rotation[0][1] = ( ( matrix[0][0] * scene_rotation[0][1] ) + ( matrix[0][1] * scene_rotation[1][1] ) + ( matrix[0][2] * scene_rotation[2][1] ) );

  00373	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00378	6b c8 00	 imul	 ecx, eax, 0
  0037b	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  0037f	b8 04 00 00 00	 mov	 eax, 4
  00384	6b c8 00	 imul	 ecx, eax, 0
  00387	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0038c	6b c0 00	 imul	 eax, eax, 0
  0038f	be 04 00 00 00	 mov	 esi, 4
  00394	c1 e6 00	 shl	 esi, 0
  00397	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0039c	f3 0f 59 84 30
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  003a5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003aa	6b d1 00	 imul	 edx, ecx, 0
  003ad	8d 44 15 c4	 lea	 eax, DWORD PTR _matrix$[ebp+edx]
  003b1	b9 04 00 00 00	 mov	 ecx, 4
  003b6	c1 e1 00	 shl	 ecx, 0
  003b9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003be	c1 e2 00	 shl	 edx, 0
  003c1	be 04 00 00 00	 mov	 esi, 4
  003c6	c1 e6 00	 shl	 esi, 0
  003c9	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  003ce	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  003d7	f3 0f 58 c1	 addss	 xmm0, xmm1
  003db	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003e0	6b c8 00	 imul	 ecx, eax, 0
  003e3	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  003e7	b8 04 00 00 00	 mov	 eax, 4
  003ec	d1 e0		 shl	 eax, 1
  003ee	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003f3	d1 e1		 shl	 ecx, 1
  003f5	be 04 00 00 00	 mov	 esi, 4
  003fa	c1 e6 00	 shl	 esi, 0
  003fd	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00402	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  0040b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0040f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00414	6b c2 00	 imul	 eax, edx, 0
  00417	8d 4c 05 a0	 lea	 ecx, DWORD PTR _new_rotation$[ebp+eax]
  0041b	ba 04 00 00 00	 mov	 edx, 4
  00420	c1 e2 00	 shl	 edx, 0
  00423	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 520  : 	new_rotation[0][2] = ( ( matrix[0][0] * scene_rotation[0][2] ) + ( matrix[0][1] * scene_rotation[1][2] ) + ( matrix[0][2] * scene_rotation[2][2] ) );

  00428	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0042d	6b c8 00	 imul	 ecx, eax, 0
  00430	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00434	b8 04 00 00 00	 mov	 eax, 4
  00439	6b c8 00	 imul	 ecx, eax, 0
  0043c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00441	6b c0 00	 imul	 eax, eax, 0
  00444	be 04 00 00 00	 mov	 esi, 4
  00449	d1 e6		 shl	 esi, 1
  0044b	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00450	f3 0f 59 84 30
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  00459	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0045e	6b d1 00	 imul	 edx, ecx, 0
  00461	8d 44 15 c4	 lea	 eax, DWORD PTR _matrix$[ebp+edx]
  00465	b9 04 00 00 00	 mov	 ecx, 4
  0046a	c1 e1 00	 shl	 ecx, 0
  0046d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00472	c1 e2 00	 shl	 edx, 0
  00475	be 04 00 00 00	 mov	 esi, 4
  0047a	d1 e6		 shl	 esi, 1
  0047c	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  00481	f3 0f 59 8c 32
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  0048a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0048e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00493	6b c8 00	 imul	 ecx, eax, 0
  00496	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  0049a	b8 04 00 00 00	 mov	 eax, 4
  0049f	d1 e0		 shl	 eax, 1
  004a1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004a6	d1 e1		 shl	 ecx, 1
  004a8	be 04 00 00 00	 mov	 esi, 4
  004ad	d1 e6		 shl	 esi, 1
  004af	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  004b4	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  004bd	f3 0f 58 c1	 addss	 xmm0, xmm1
  004c1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  004c6	6b c2 00	 imul	 eax, edx, 0
  004c9	8d 4c 05 a0	 lea	 ecx, DWORD PTR _new_rotation$[ebp+eax]
  004cd	ba 04 00 00 00	 mov	 edx, 4
  004d2	d1 e2		 shl	 edx, 1
  004d4	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 521  : 
; 522  : 	new_rotation[1][0] = ( ( matrix[1][0] * scene_rotation[0][0] ) + ( matrix[1][1] * scene_rotation[1][0] ) + ( matrix[1][2] * scene_rotation[2][0] ) );

  004d9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004de	c1 e0 00	 shl	 eax, 0
  004e1	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  004e5	ba 04 00 00 00	 mov	 edx, 4
  004ea	6b c2 00	 imul	 eax, edx, 0
  004ed	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  004f2	6b d2 00	 imul	 edx, edx, 0
  004f5	be 04 00 00 00	 mov	 esi, 4
  004fa	6b f6 00	 imul	 esi, esi, 0
  004fd	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00502	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  0050b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00510	c1 e0 00	 shl	 eax, 0
  00513	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00517	ba 04 00 00 00	 mov	 edx, 4
  0051c	c1 e2 00	 shl	 edx, 0
  0051f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00524	c1 e0 00	 shl	 eax, 0
  00527	be 04 00 00 00	 mov	 esi, 4
  0052c	6b f6 00	 imul	 esi, esi, 0
  0052f	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00534	f3 0f 59 8c 30
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  0053d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00541	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00546	c1 e1 00	 shl	 ecx, 0
  00549	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  0054d	b8 04 00 00 00	 mov	 eax, 4
  00552	d1 e0		 shl	 eax, 1
  00554	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00559	d1 e1		 shl	 ecx, 1
  0055b	be 04 00 00 00	 mov	 esi, 4
  00560	6b f6 00	 imul	 esi, esi, 0
  00563	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00568	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  00571	f3 0f 58 c1	 addss	 xmm0, xmm1
  00575	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0057a	c1 e2 00	 shl	 edx, 0
  0057d	8d 44 15 a0	 lea	 eax, DWORD PTR _new_rotation$[ebp+edx]
  00581	b9 04 00 00 00	 mov	 ecx, 4
  00586	6b d1 00	 imul	 edx, ecx, 0
  00589	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 523  : 	new_rotation[1][1] = ( ( matrix[1][0] * scene_rotation[0][1] ) + ( matrix[1][1] * scene_rotation[1][1] ) + ( matrix[1][2] * scene_rotation[2][1] ) );

  0058e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00593	c1 e0 00	 shl	 eax, 0
  00596	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0059a	ba 04 00 00 00	 mov	 edx, 4
  0059f	6b c2 00	 imul	 eax, edx, 0
  005a2	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005a7	6b d2 00	 imul	 edx, edx, 0
  005aa	be 04 00 00 00	 mov	 esi, 4
  005af	c1 e6 00	 shl	 esi, 0
  005b2	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  005b7	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  005c0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005c5	c1 e0 00	 shl	 eax, 0
  005c8	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  005cc	ba 04 00 00 00	 mov	 edx, 4
  005d1	c1 e2 00	 shl	 edx, 0
  005d4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005d9	c1 e0 00	 shl	 eax, 0
  005dc	be 04 00 00 00	 mov	 esi, 4
  005e1	c1 e6 00	 shl	 esi, 0
  005e4	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  005e9	f3 0f 59 8c 30
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  005f2	f3 0f 58 c1	 addss	 xmm0, xmm1
  005f6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005fb	c1 e1 00	 shl	 ecx, 0
  005fe	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00602	b8 04 00 00 00	 mov	 eax, 4
  00607	d1 e0		 shl	 eax, 1
  00609	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0060e	d1 e1		 shl	 ecx, 1
  00610	be 04 00 00 00	 mov	 esi, 4
  00615	c1 e6 00	 shl	 esi, 0
  00618	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0061d	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  00626	f3 0f 58 c1	 addss	 xmm0, xmm1
  0062a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0062f	c1 e2 00	 shl	 edx, 0
  00632	8d 44 15 a0	 lea	 eax, DWORD PTR _new_rotation$[ebp+edx]
  00636	b9 04 00 00 00	 mov	 ecx, 4
  0063b	c1 e1 00	 shl	 ecx, 0
  0063e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 524  : 	new_rotation[1][2] = ( ( matrix[1][0] * scene_rotation[0][2] ) + ( matrix[1][1] * scene_rotation[1][2] ) + ( matrix[1][2] * scene_rotation[2][2] ) );

  00643	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00648	c1 e0 00	 shl	 eax, 0
  0064b	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  0064f	ba 04 00 00 00	 mov	 edx, 4
  00654	6b c2 00	 imul	 eax, edx, 0
  00657	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0065c	6b d2 00	 imul	 edx, edx, 0
  0065f	be 04 00 00 00	 mov	 esi, 4
  00664	d1 e6		 shl	 esi, 1
  00666	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0066b	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00674	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00679	c1 e0 00	 shl	 eax, 0
  0067c	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00680	ba 04 00 00 00	 mov	 edx, 4
  00685	c1 e2 00	 shl	 edx, 0
  00688	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0068d	c1 e0 00	 shl	 eax, 0
  00690	be 04 00 00 00	 mov	 esi, 4
  00695	d1 e6		 shl	 esi, 1
  00697	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0069c	f3 0f 59 8c 30
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  006a5	f3 0f 58 c1	 addss	 xmm0, xmm1
  006a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006ae	c1 e1 00	 shl	 ecx, 0
  006b1	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  006b5	b8 04 00 00 00	 mov	 eax, 4
  006ba	d1 e0		 shl	 eax, 1
  006bc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006c1	d1 e1		 shl	 ecx, 1
  006c3	be 04 00 00 00	 mov	 esi, 4
  006c8	d1 e6		 shl	 esi, 1
  006ca	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  006cf	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  006d8	f3 0f 58 c1	 addss	 xmm0, xmm1
  006dc	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  006e1	c1 e2 00	 shl	 edx, 0
  006e4	8d 44 15 a0	 lea	 eax, DWORD PTR _new_rotation$[ebp+edx]
  006e8	b9 04 00 00 00	 mov	 ecx, 4
  006ed	d1 e1		 shl	 ecx, 1
  006ef	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 525  : 
; 526  : 	new_rotation[2][0] = ( ( matrix[2][0] * scene_rotation[0][0] ) + ( matrix[2][1] * scene_rotation[1][0] ) + ( matrix[2][2] * scene_rotation[2][0] ) );

  006f4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006f9	d1 e0		 shl	 eax, 1
  006fb	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  006ff	ba 04 00 00 00	 mov	 edx, 4
  00704	6b c2 00	 imul	 eax, edx, 0
  00707	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0070c	6b d2 00	 imul	 edx, edx, 0
  0070f	be 04 00 00 00	 mov	 esi, 4
  00714	6b f6 00	 imul	 esi, esi, 0
  00717	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0071c	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00725	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0072a	d1 e0		 shl	 eax, 1
  0072c	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00730	ba 04 00 00 00	 mov	 edx, 4
  00735	c1 e2 00	 shl	 edx, 0
  00738	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0073d	c1 e0 00	 shl	 eax, 0
  00740	be 04 00 00 00	 mov	 esi, 4
  00745	6b f6 00	 imul	 esi, esi, 0
  00748	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0074d	f3 0f 59 8c 30
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  00756	f3 0f 58 c1	 addss	 xmm0, xmm1
  0075a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0075f	d1 e1		 shl	 ecx, 1
  00761	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00765	b8 04 00 00 00	 mov	 eax, 4
  0076a	d1 e0		 shl	 eax, 1
  0076c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00771	d1 e1		 shl	 ecx, 1
  00773	be 04 00 00 00	 mov	 esi, 4
  00778	6b f6 00	 imul	 esi, esi, 0
  0077b	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00780	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  00789	f3 0f 58 c1	 addss	 xmm0, xmm1
  0078d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00792	d1 e2		 shl	 edx, 1
  00794	8d 44 15 a0	 lea	 eax, DWORD PTR _new_rotation$[ebp+edx]
  00798	b9 04 00 00 00	 mov	 ecx, 4
  0079d	6b d1 00	 imul	 edx, ecx, 0
  007a0	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 527  : 	new_rotation[2][1] = ( ( matrix[2][0] * scene_rotation[0][1] ) + ( matrix[2][1] * scene_rotation[1][1] ) + ( matrix[2][2] * scene_rotation[2][1] ) );

  007a5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007aa	d1 e0		 shl	 eax, 1
  007ac	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  007b0	ba 04 00 00 00	 mov	 edx, 4
  007b5	6b c2 00	 imul	 eax, edx, 0
  007b8	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  007bd	6b d2 00	 imul	 edx, edx, 0
  007c0	be 04 00 00 00	 mov	 esi, 4
  007c5	c1 e6 00	 shl	 esi, 0
  007c8	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  007cd	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  007d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007db	d1 e0		 shl	 eax, 1
  007dd	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  007e1	ba 04 00 00 00	 mov	 edx, 4
  007e6	c1 e2 00	 shl	 edx, 0
  007e9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007ee	c1 e0 00	 shl	 eax, 0
  007f1	be 04 00 00 00	 mov	 esi, 4
  007f6	c1 e6 00	 shl	 esi, 0
  007f9	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  007fe	f3 0f 59 8c 30
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  00807	f3 0f 58 c1	 addss	 xmm0, xmm1
  0080b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00810	d1 e1		 shl	 ecx, 1
  00812	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  00816	b8 04 00 00 00	 mov	 eax, 4
  0081b	d1 e0		 shl	 eax, 1
  0081d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00822	d1 e1		 shl	 ecx, 1
  00824	be 04 00 00 00	 mov	 esi, 4
  00829	c1 e6 00	 shl	 esi, 0
  0082c	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00831	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  0083a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0083e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00843	d1 e2		 shl	 edx, 1
  00845	8d 44 15 a0	 lea	 eax, DWORD PTR _new_rotation$[ebp+edx]
  00849	b9 04 00 00 00	 mov	 ecx, 4
  0084e	c1 e1 00	 shl	 ecx, 0
  00851	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 528  : 	new_rotation[2][2] = ( ( matrix[2][0] * scene_rotation[0][2] ) + ( matrix[2][1] * scene_rotation[1][2] ) + ( matrix[2][2] * scene_rotation[2][2] ) );

  00856	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0085b	d1 e0		 shl	 eax, 1
  0085d	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00861	ba 04 00 00 00	 mov	 edx, 4
  00866	6b c2 00	 imul	 eax, edx, 0
  00869	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0086e	6b d2 00	 imul	 edx, edx, 0
  00871	be 04 00 00 00	 mov	 esi, 4
  00876	d1 e6		 shl	 esi, 1
  00878	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0087d	f3 0f 59 84 32
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[edx+esi]
  00886	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0088b	d1 e0		 shl	 eax, 1
  0088d	8d 4c 05 c4	 lea	 ecx, DWORD PTR _matrix$[ebp+eax]
  00891	ba 04 00 00 00	 mov	 edx, 4
  00896	c1 e2 00	 shl	 edx, 0
  00899	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0089e	c1 e0 00	 shl	 eax, 0
  008a1	be 04 00 00 00	 mov	 esi, 4
  008a6	d1 e6		 shl	 esi, 1
  008a8	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  008ad	f3 0f 59 8c 30
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[eax+esi]
  008b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  008ba	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  008bf	d1 e1		 shl	 ecx, 1
  008c1	8d 54 0d c4	 lea	 edx, DWORD PTR _matrix$[ebp+ecx]
  008c5	b8 04 00 00 00	 mov	 eax, 4
  008ca	d1 e0		 shl	 eax, 1
  008cc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  008d1	d1 e1		 shl	 ecx, 1
  008d3	be 04 00 00 00	 mov	 esi, 4
  008d8	d1 e6		 shl	 esi, 1
  008da	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  008df	f3 0f 59 8c 31
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+esi]
  008e8	f3 0f 58 c1	 addss	 xmm0, xmm1
  008ec	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  008f1	d1 e2		 shl	 edx, 1
  008f3	8d 44 15 a0	 lea	 eax, DWORD PTR _new_rotation$[ebp+edx]
  008f7	b9 04 00 00 00	 mov	 ecx, 4
  008fc	d1 e1		 shl	 ecx, 1
  008fe	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 529  : 
; 530  : 	memcpy ( scene_rotation, new_rotation, sizeof ( matrix3x3 ) );

  00903	6a 24		 push	 36			; 00000024H
  00905	8d 45 a0	 lea	 eax, DWORD PTR _new_rotation$[ebp]
  00908	50		 push	 eax
  00909	68 00 00 00 00	 push	 OFFSET ?scene_rotation@@3PAY02MA
  0090e	e8 00 00 00 00	 call	 _memcpy
  00913	83 c4 0c	 add	 esp, 12			; 0000000cH

; 531  : 
; 532  : 	scene_rotation[0][0] *= sub_object->keyframes[0].scale_x;

  00916	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0091b	6b c8 00	 imul	 ecx, eax, 0
  0091e	ba 04 00 00 00	 mov	 edx, 4
  00923	6b c2 00	 imul	 eax, edx, 0
  00926	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0092b	6b d2 00	 imul	 edx, edx, 0
  0092e	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00931	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00934	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+eax]
  0093d	f3 0f 59 44 16
	20		 mulss	 xmm0, DWORD PTR [esi+edx+32]
  00943	b8 04 00 00 00	 mov	 eax, 4
  00948	6b c8 00	 imul	 ecx, eax, 0
  0094b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00950	6b c2 00	 imul	 eax, edx, 0
  00953	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx], xmm0

; 533  : 	scene_rotation[1][0] *= sub_object->keyframes[0].scale_y;

  0095c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00961	c1 e0 00	 shl	 eax, 0
  00964	b9 04 00 00 00	 mov	 ecx, 4
  00969	6b d1 00	 imul	 edx, ecx, 0
  0096c	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00971	6b c9 00	 imul	 ecx, ecx, 0
  00974	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00977	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  0097a	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+edx]
  00983	f3 0f 59 44 0e
	24		 mulss	 xmm0, DWORD PTR [esi+ecx+36]
  00989	ba 04 00 00 00	 mov	 edx, 4
  0098e	6b c2 00	 imul	 eax, edx, 0
  00991	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00996	c1 e1 00	 shl	 ecx, 0
  00999	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[ecx+eax], xmm0

; 534  : 	scene_rotation[2][0] *= sub_object->keyframes[0].scale_z;

  009a2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009a7	d1 e0		 shl	 eax, 1
  009a9	b9 04 00 00 00	 mov	 ecx, 4
  009ae	6b d1 00	 imul	 edx, ecx, 0
  009b1	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  009b6	6b c9 00	 imul	 ecx, ecx, 0
  009b9	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  009bc	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  009bf	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+edx]
  009c8	f3 0f 59 44 0e
	28		 mulss	 xmm0, DWORD PTR [esi+ecx+40]
  009ce	ba 04 00 00 00	 mov	 edx, 4
  009d3	6b c2 00	 imul	 eax, edx, 0
  009d6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  009db	d1 e1		 shl	 ecx, 1
  009dd	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[ecx+eax], xmm0

; 535  : 
; 536  : 	scene_rotation[0][1] *= sub_object->keyframes[0].scale_x;

  009e6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009eb	6b c8 00	 imul	 ecx, eax, 0
  009ee	ba 04 00 00 00	 mov	 edx, 4
  009f3	c1 e2 00	 shl	 edx, 0
  009f6	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  009fb	6b c0 00	 imul	 eax, eax, 0
  009fe	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00a01	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00a04	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+edx]
  00a0d	f3 0f 59 44 06
	20		 mulss	 xmm0, DWORD PTR [esi+eax+32]
  00a13	b9 04 00 00 00	 mov	 ecx, 4
  00a18	c1 e1 00	 shl	 ecx, 0
  00a1b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00a20	6b c2 00	 imul	 eax, edx, 0
  00a23	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx], xmm0

; 537  : 	scene_rotation[1][1] *= sub_object->keyframes[0].scale_y;

  00a2c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a31	c1 e0 00	 shl	 eax, 0
  00a34	b9 04 00 00 00	 mov	 ecx, 4
  00a39	c1 e1 00	 shl	 ecx, 0
  00a3c	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00a41	6b d2 00	 imul	 edx, edx, 0
  00a44	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00a47	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00a4a	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  00a53	f3 0f 59 44 16
	24		 mulss	 xmm0, DWORD PTR [esi+edx+36]
  00a59	b8 04 00 00 00	 mov	 eax, 4
  00a5e	c1 e0 00	 shl	 eax, 0
  00a61	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00a66	c1 e1 00	 shl	 ecx, 0
  00a69	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[ecx+eax], xmm0

; 538  : 	scene_rotation[2][1] *= sub_object->keyframes[0].scale_z;

  00a72	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a77	d1 e0		 shl	 eax, 1
  00a79	b9 04 00 00 00	 mov	 ecx, 4
  00a7e	c1 e1 00	 shl	 ecx, 0
  00a81	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00a86	6b d2 00	 imul	 edx, edx, 0
  00a89	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00a8c	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00a8f	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  00a98	f3 0f 59 44 16
	28		 mulss	 xmm0, DWORD PTR [esi+edx+40]
  00a9e	b8 04 00 00 00	 mov	 eax, 4
  00aa3	c1 e0 00	 shl	 eax, 0
  00aa6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00aab	d1 e1		 shl	 ecx, 1
  00aad	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[ecx+eax], xmm0

; 539  : 
; 540  : 	scene_rotation[0][2] *= sub_object->keyframes[0].scale_x;

  00ab6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00abb	6b c8 00	 imul	 ecx, eax, 0
  00abe	ba 04 00 00 00	 mov	 edx, 4
  00ac3	d1 e2		 shl	 edx, 1
  00ac5	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00aca	6b c0 00	 imul	 eax, eax, 0
  00acd	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00ad0	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00ad3	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[ecx+edx]
  00adc	f3 0f 59 44 06
	20		 mulss	 xmm0, DWORD PTR [esi+eax+32]
  00ae2	b9 04 00 00 00	 mov	 ecx, 4
  00ae7	d1 e1		 shl	 ecx, 1
  00ae9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00aee	6b c2 00	 imul	 eax, edx, 0
  00af1	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx], xmm0

; 541  : 	scene_rotation[1][2] *= sub_object->keyframes[0].scale_y;

  00afa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aff	c1 e0 00	 shl	 eax, 0
  00b02	b9 04 00 00 00	 mov	 ecx, 4
  00b07	d1 e1		 shl	 ecx, 1
  00b09	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00b0e	6b d2 00	 imul	 edx, edx, 0
  00b11	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00b14	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00b17	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  00b20	f3 0f 59 44 16
	24		 mulss	 xmm0, DWORD PTR [esi+edx+36]
  00b26	b8 04 00 00 00	 mov	 eax, 4
  00b2b	d1 e0		 shl	 eax, 1
  00b2d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b32	c1 e1 00	 shl	 ecx, 0
  00b35	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[ecx+eax], xmm0

; 542  : 	scene_rotation[2][2] *= sub_object->keyframes[0].scale_z;

  00b3e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b43	d1 e0		 shl	 eax, 1
  00b45	b9 04 00 00 00	 mov	 ecx, 4
  00b4a	d1 e1		 shl	 ecx, 1
  00b4c	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00b51	6b d2 00	 imul	 edx, edx, 0
  00b54	8b 75 08	 mov	 esi, DWORD PTR _sub_object$[ebp]
  00b57	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00b5a	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?scene_rotation@@3PAY02MA[eax+ecx]
  00b63	f3 0f 59 44 16
	28		 mulss	 xmm0, DWORD PTR [esi+edx+40]
  00b69	b8 04 00 00 00	 mov	 eax, 4
  00b6e	d1 e0		 shl	 eax, 1
  00b70	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b75	d1 e1		 shl	 ecx, 1
  00b77	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scene_rotation@@3PAY02MA[ecx+eax], xmm0

; 543  : 
; 544  : 	//
; 545  : 	// Compute the bounding boxes
; 546  : 	//
; 547  : 
; 548  : 	rotate_sub_scene_boundaries ( &rotated_bounds, &objects_3d_data[ sub_object->index ].bounding_box );

  00b80	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  00b83	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00b86	6b d1 68	 imul	 edx, ecx, 104
  00b89	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00b8e	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  00b92	51		 push	 ecx
  00b93	68 00 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A
  00b98	e8 00 00 00 00	 call	 ?rotate_sub_scene_boundaries@@YGXPAUOBJECT_3D_BOUNDS@@0@Z ; rotate_sub_scene_boundaries

; 549  : 	rotate_sub_scene_boundaries ( &rotated_bounds2, &objects_3d_data[ sub_object->index ].bounding_box2 );

  00b9d	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  00ba0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00ba3	6b d1 68	 imul	 edx, ecx, 104
  00ba6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00bab	8d 4c 10 28	 lea	 ecx, DWORD PTR [eax+edx+40]
  00baf	51		 push	 ecx
  00bb0	68 00 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A
  00bb5	e8 00 00 00 00	 call	 ?rotate_sub_scene_boundaries@@YGXPAUOBJECT_3D_BOUNDS@@0@Z ; rotate_sub_scene_boundaries

; 550  : 
; 551  : 	rotated_bounds.xmin += scene_position.x;

  00bba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A
  00bc2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A
  00bca	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A, xmm0

; 552  : 	rotated_bounds.ymin += scene_position.y;

  00bd2	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  00bda	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+4
  00be2	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+8, xmm0

; 553  : 	rotated_bounds.zmin += scene_position.z;

  00bea	f3 0f 10 05 10
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  00bf2	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+8
  00bfa	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+16, xmm0

; 554  : 
; 555  : 	rotated_bounds.xmax += scene_position.x;

  00c02	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  00c0a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A
  00c12	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+4, xmm0

; 556  : 	rotated_bounds.ymax += scene_position.y;

  00c1a	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  00c22	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+4
  00c2a	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+12, xmm0

; 557  : 	rotated_bounds.zmax += scene_position.z;

  00c32	f3 0f 10 05 14
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  00c3a	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+8
  00c42	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+20, xmm0

; 558  : 
; 559  : 	scene_bounds.xmin = min ( scene_bounds.xmin, rotated_bounds.xmin );

  00c4a	68 00 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A
  00c4f	68 00 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A
  00c54	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00c59	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00c5d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A, xmm0

; 560  : 	scene_bounds.ymin = min ( scene_bounds.ymin, rotated_bounds.ymin );

  00c65	68 08 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  00c6a	68 08 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  00c6f	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00c74	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00c78	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+8, xmm0

; 561  : 	scene_bounds.zmin = min ( scene_bounds.zmin, rotated_bounds.zmin );

  00c80	68 10 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  00c85	68 10 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  00c8a	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00c8f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00c93	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+16, xmm0

; 562  : 
; 563  : 	scene_bounds.xmax = max ( scene_bounds.xmax, rotated_bounds.xmax );

  00c9b	68 04 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  00ca0	68 04 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  00ca5	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00caa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00cae	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+4, xmm0

; 564  : 	scene_bounds.ymax = max ( scene_bounds.ymax, rotated_bounds.ymax );

  00cb6	68 0c 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  00cbb	68 0c 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  00cc0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00cc5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00cc9	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+12, xmm0

; 565  : 	scene_bounds.zmax = max ( scene_bounds.zmax, rotated_bounds.zmax );

  00cd1	68 14 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  00cd6	68 14 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  00cdb	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00ce0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00ce4	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+20, xmm0

; 566  : 
; 567  : 	if (	( ( rotated_bounds2.xmax - rotated_bounds2.xmin ) != 0 ) ||
; 568  : 			( ( rotated_bounds2.ymax - rotated_bounds2.ymin ) != 0 ) ||

  00cec	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+4
  00cf4	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A
  00cfc	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00d03	9f		 lahf
  00d04	f6 c4 44	 test	 ah, 68			; 00000044H
  00d07	7a 3e		 jp	 SHORT $LN7@recurse_in
  00d09	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+12
  00d11	f3 0f 5c 05 08
	00 00 00	 subss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+8
  00d19	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00d20	9f		 lahf
  00d21	f6 c4 44	 test	 ah, 68			; 00000044H
  00d24	7a 21		 jp	 SHORT $LN7@recurse_in
  00d26	f3 0f 10 05 14
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+20
  00d2e	f3 0f 5c 05 10
	00 00 00	 subss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+16
  00d36	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00d3d	9f		 lahf
  00d3e	f6 c4 44	 test	 ah, 68			; 00000044H
  00d41	0f 8b 3f 01 00
	00		 jnp	 $LN8@recurse_in
$LN7@recurse_in:

; 569  : 			( ( rotated_bounds2.zmax - rotated_bounds2.zmin ) != 0 ) )
; 570  : 	{
; 571  : 
; 572  : 		rotated_bounds2.xmin += scene_position.x;

  00d47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A
  00d4f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A
  00d57	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A, xmm0

; 573  : 		rotated_bounds2.ymin += scene_position.y;

  00d5f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+8
  00d67	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+4
  00d6f	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+8, xmm0

; 574  : 		rotated_bounds2.zmin += scene_position.z;

  00d77	f3 0f 10 05 10
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+16
  00d7f	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+8
  00d87	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+16, xmm0

; 575  : 
; 576  : 		rotated_bounds2.xmax += scene_position.x;

  00d8f	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+4
  00d97	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A
  00d9f	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+4, xmm0

; 577  : 		rotated_bounds2.ymax += scene_position.y;

  00da7	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+12
  00daf	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+4
  00db7	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+12, xmm0

; 578  : 		rotated_bounds2.zmax += scene_position.z;

  00dbf	f3 0f 10 05 14
	00 00 00	 movss	 xmm0, DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+20
  00dc7	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?scene_position@@3UVEC3D@@A+8
  00dcf	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+20, xmm0

; 579  : 
; 580  : 		if ( contributes_to_collision )

  00dd7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contributes_to_collision@@3HA, 0
  00dde	0f 84 a2 00 00
	00		 je	 $LN8@recurse_in

; 581  : 		{
; 582  : 
; 583  : 			scene_bounds2.xmin = min ( scene_bounds2.xmin, rotated_bounds2.xmin );

  00de4	68 00 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A
  00de9	68 00 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A
  00dee	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00df3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00df7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A, xmm0

; 584  : 			scene_bounds2.ymin = min ( scene_bounds2.ymin, rotated_bounds2.ymin );

  00dff	68 08 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+8
  00e04	68 08 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+8
  00e09	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00e0e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e12	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+8, xmm0

; 585  : 			scene_bounds2.zmin = min ( scene_bounds2.zmin, rotated_bounds2.zmin );

  00e1a	68 10 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+16
  00e1f	68 10 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+16
  00e24	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00e29	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e2d	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+16, xmm0

; 586  : 
; 587  : 			scene_bounds2.xmax = max ( scene_bounds2.xmax, rotated_bounds2.xmax );

  00e35	68 04 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+4
  00e3a	68 04 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+4
  00e3f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00e44	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e48	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+4, xmm0

; 588  : 			scene_bounds2.ymax = max ( scene_bounds2.ymax, rotated_bounds2.ymax );

  00e50	68 0c 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+12
  00e55	68 0c 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+12
  00e5a	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00e5f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e63	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+12, xmm0

; 589  : 			scene_bounds2.zmax = max ( scene_bounds2.zmax, rotated_bounds2.zmax );

  00e6b	68 14 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+20
  00e70	68 14 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+20
  00e75	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00e7a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e7e	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+20, xmm0
$LN8@recurse_in:

; 590  : 		}
; 591  : 	}
; 592  : 
; 593  : 	//
; 594  : 	// Calculate sub objects
; 595  : 	//
; 596  : 
; 597  : 	for ( count = 0; count < sub_object->number_of_sub_objects; count++ )

  00e86	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$[ebp], 0
  00e90	eb 0f		 jmp	 SHORT $LN4@recurse_in
$LN2@recurse_in:
  00e92	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  00e98	83 c0 01	 add	 eax, 1
  00e9b	89 85 74 ff ff
	ff		 mov	 DWORD PTR _count$[ebp], eax
$LN4@recurse_in:
  00ea1	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  00ea4	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00ea8	39 8d 74 ff ff
	ff		 cmp	 DWORD PTR _count$[ebp], ecx
  00eae	7d 15		 jge	 SHORT $LN3@recurse_in

; 598  : 	{
; 599  : 
; 600  : 		recurse_initialise_sub_scene_bounding_box ( &sub_object->sub_objects[count] );

  00eb0	6b 85 74 ff ff
	ff 38		 imul	 eax, DWORD PTR _count$[ebp], 56
  00eb7	8b 4d 08	 mov	 ecx, DWORD PTR _sub_object$[ebp]
  00eba	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  00ebd	50		 push	 eax
  00ebe	e8 00 00 00 00	 call	 ?recurse_initialise_sub_scene_bounding_box@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; recurse_initialise_sub_scene_bounding_box

; 601  : 	}

  00ec3	eb cd		 jmp	 SHORT $LN2@recurse_in
$LN3@recurse_in:

; 602  : 
; 603  : 	//
; 604  : 	// Restore the original position & rotation
; 605  : 	//
; 606  : 
; 607  : 	scene_position = old_scene_position;

  00ec5	8b 45 f4	 mov	 eax, DWORD PTR _old_scene_position$[ebp]
  00ec8	a3 00 00 00 00	 mov	 DWORD PTR ?scene_position@@3UVEC3D@@A, eax
  00ecd	8b 4d f8	 mov	 ecx, DWORD PTR _old_scene_position$[ebp+4]
  00ed0	89 0d 04 00 00
	00		 mov	 DWORD PTR ?scene_position@@3UVEC3D@@A+4, ecx
  00ed6	8b 55 fc	 mov	 edx, DWORD PTR _old_scene_position$[ebp+8]
  00ed9	89 15 08 00 00
	00		 mov	 DWORD PTR ?scene_position@@3UVEC3D@@A+8, edx

; 608  : 
; 609  : 	memcpy ( scene_rotation, old_scene_rotation, sizeof ( matrix3x3 ) );

  00edf	6a 24		 push	 36			; 00000024H
  00ee1	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _old_scene_rotation$[ebp]
  00ee7	50		 push	 eax
  00ee8	68 00 00 00 00	 push	 OFFSET ?scene_rotation@@3PAY02MA
  00eed	e8 00 00 00 00	 call	 _memcpy
  00ef2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 610  : 
; 611  : 	contributes_to_collision = old_contributes_to_collision;

  00ef5	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _old_contributes_to_collision$[ebp]
  00efb	a3 00 00 00 00	 mov	 DWORD PTR ?contributes_to_collision@@3HA, eax

; 612  : }

  00f00	5f		 pop	 edi
  00f01	5e		 pop	 esi
  00f02	5b		 pop	 ebx
  00f03	8b e5		 mov	 esp, ebp
  00f05	5d		 pop	 ebp
  00f06	c2 04 00	 ret	 4
?recurse_initialise_sub_scene_bounding_box@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ENDP ; recurse_initialise_sub_scene_bounding_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?recurse_set_scene_sub_object_visibility@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@@Z
_TEXT	SEGMENT
_visibility$ = -8					; size = 4
_count$ = -4						; size = 4
_sub_object$ = 8					; size = 4
?recurse_set_scene_sub_object_visibility@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@@Z PROC ; recurse_set_scene_sub_object_visibility, COMDAT

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 317  : 
; 318  : 	int
; 319  : 		count,
; 320  : 		visibility;
; 321  : 
; 322  : 	visibility = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _visibility$[ebp], 0

; 323  : 
; 324  : 	for ( count = 0; count < sub_object->number_of_sub_objects; count++ )

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@recurse_se
$LN2@recurse_se:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@recurse_se:
  00022	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  00025	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00029	39 4d fc	 cmp	 DWORD PTR _count$[ebp], ecx
  0002c	7d 18		 jge	 SHORT $LN3@recurse_se

; 325  : 	{
; 326  : 
; 327  : 		visibility += recurse_set_scene_sub_object_visibility ( &sub_object->sub_objects[count] );

  0002e	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _sub_object$[ebp]
  00035	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?recurse_set_scene_sub_object_visibility@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; recurse_set_scene_sub_object_visibility
  0003e	03 45 f8	 add	 eax, DWORD PTR _visibility$[ebp]
  00041	89 45 f8	 mov	 DWORD PTR _visibility$[ebp], eax

; 328  : 	}

  00044	eb d3		 jmp	 SHORT $LN2@recurse_se
$LN3@recurse_se:

; 329  : 
; 330  : 	if ( ( visibility ) || ( sub_object->index != 0 ) )

  00046	83 7d f8 00	 cmp	 DWORD PTR _visibility$[ebp], 0
  0004a	75 0a		 jne	 SHORT $LN7@recurse_se
  0004c	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  0004f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00052	85 c9		 test	 ecx, ecx
  00054	74 11		 je	 SHORT $LN5@recurse_se
$LN7@recurse_se:

; 331  : 	{
; 332  : 
; 333  : 		sub_object->default_visibility = TRUE;

  00056	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  00059	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0005c	80 c9 40	 or	 cl, 64			; 00000040H
  0005f	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  00062	88 4a 07	 mov	 BYTE PTR [edx+7], cl

; 334  : 	}
; 335  : 	else

  00065	eb 0f		 jmp	 SHORT $LN6@recurse_se
$LN5@recurse_se:

; 336  : 	{
; 337  : 
; 338  : 		sub_object->default_visibility = FALSE;

  00067	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  0006a	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0006d	80 e1 bf	 and	 cl, 191			; 000000bfH
  00070	8b 55 08	 mov	 edx, DWORD PTR _sub_object$[ebp]
  00073	88 4a 07	 mov	 BYTE PTR [edx+7], cl
$LN6@recurse_se:

; 339  : 	}
; 340  : 
; 341  : 	return ( sub_object->default_visibility );

  00076	8b 45 08	 mov	 eax, DWORD PTR _sub_object$[ebp]
  00079	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0007c	c0 e9 06	 shr	 cl, 6
  0007f	80 e1 01	 and	 cl, 1
  00082	0f b6 c1	 movzx	 eax, cl

; 342  : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?recurse_set_scene_sub_object_visibility@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@@Z ENDP ; recurse_set_scene_sub_object_visibility
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?find_object_3d_sub_objects@@YGHPAUOBJECT_3D_INSTANCE@@PBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@H@Z
_TEXT	SEGMENT
tv67 = -124						; size = 4
_search_data$ = -56					; size = 56
_search_object$ = 8					; size = 4
_search$ = 12						; size = 4
_number_of_sub_objects$ = 16				; size = 4
?find_object_3d_sub_objects@@YGHPAUOBJECT_3D_INSTANCE@@PBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@H@Z PROC ; find_object_3d_sub_objects, COMDAT

; 1176 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1177 : 	object_3d_sub_object_search_data
; 1178 : 		search_data;
; 1179 : 
; 1180 : 	search_data.search_object = search_object;

  00009	8b 45 08	 mov	 eax, DWORD PTR _search_object$[ebp]
  0000c	89 45 c8	 mov	 DWORD PTR _search_data$[ebp], eax

; 1181 : 	search_data.search_depth = 0;

  0000f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _search_data$[ebp+8], 0

; 1182 : 
; 1183 : 	for ( ; number_of_sub_objects--; search++ )

  00016	eb 09		 jmp	 SHORT $LN4@find_objec
$LN2@find_objec:
  00018	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  0001b	83 c0 08	 add	 eax, 8
  0001e	89 45 0c	 mov	 DWORD PTR _search$[ebp], eax
$LN4@find_objec:
  00021	8b 45 10	 mov	 eax, DWORD PTR _number_of_sub_objects$[ebp]
  00024	89 45 84	 mov	 DWORD PTR tv67[ebp], eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR _number_of_sub_objects$[ebp]
  0002a	83 e9 01	 sub	 ecx, 1
  0002d	89 4d 10	 mov	 DWORD PTR _number_of_sub_objects$[ebp], ecx
  00030	83 7d 84 00	 cmp	 DWORD PTR tv67[ebp], 0
  00034	74 27		 je	 SHORT $LN3@find_objec

; 1184 : 	{
; 1185 : 		search_data.sub_object_index = search->sub_object_index;

  00036	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 4d d4	 mov	 DWORD PTR _search_data$[ebp+12], ecx

; 1186 : 		if ( find_object_3d_sub_object ( &search_data ) != SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND )

  0003e	8d 45 c8	 lea	 eax, DWORD PTR _search_data$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  00047	83 f8 01	 cmp	 eax, 1
  0004a	74 04		 je	 SHORT $LN5@find_objec

; 1187 : 		{
; 1188 : 			return FALSE;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 12		 jmp	 SHORT $LN1@find_objec
$LN5@find_objec:

; 1189 : 		}
; 1190 : 		*search->result_sub_object = search_data.result_sub_object;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	8b 55 cc	 mov	 edx, DWORD PTR _search_data$[ebp+4]
  00059	89 11		 mov	 DWORD PTR [ecx], edx

; 1191 : 	}

  0005b	eb bb		 jmp	 SHORT $LN2@find_objec
$LN3@find_objec:

; 1192 : 
; 1193 : 	return TRUE;

  0005d	b8 01 00 00 00	 mov	 eax, 1
$LN1@find_objec:

; 1194 : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
?find_object_3d_sub_objects@@YGHPAUOBJECT_3D_INSTANCE@@PBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@H@Z ENDP ; find_object_3d_sub_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?find_sub_object@@YGPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_INSTANCE@@I@Z
_TEXT	SEGMENT
tv67 = -128						; size = 4
_name$ = -60						; size = 4
_search$ = -56						; size = 56
_parent_object$ = 8					; size = 4
_sub_obj_id$ = 12					; size = 4
?find_sub_object@@YGPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_INSTANCE@@I@Z PROC ; find_sub_object, COMDAT

; 1152 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1153 : 	object_3d_sub_object_search_data
; 1154 : 		search;
; 1155 : 
; 1156 : 	const char* name = (sub_obj_id < OBJECT_3D_SUB_OBJECT_LAST) ? object_3d_subobject_names[sub_obj_id] : NULL;

  0000c	81 7d 0c cb 01
	00 00		 cmp	 DWORD PTR _sub_obj_id$[ebp], 459 ; 000001cbH
  00013	73 0f		 jae	 SHORT $LN6@find_sub_o
  00015	8b 45 0c	 mov	 eax, DWORD PTR _sub_obj_id$[ebp]
  00018	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?object_3d_subobject_names@@3PAPBDA[eax*4]
  0001f	89 4d 80	 mov	 DWORD PTR tv67[ebp], ecx
  00022	eb 07		 jmp	 SHORT $LN7@find_sub_o
$LN6@find_sub_o:
  00024	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN7@find_sub_o:
  0002b	8b 55 80	 mov	 edx, DWORD PTR tv67[ebp]
  0002e	89 55 c4	 mov	 DWORD PTR _name$[ebp], edx

; 1157 : 
; 1158 : 	search.search_depth = 0;

  00031	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _search$[ebp+8], 0

; 1159 : 	search.search_object = parent_object;

  00038	8b 45 08	 mov	 eax, DWORD PTR _parent_object$[ebp]
  0003b	89 45 c8	 mov	 DWORD PTR _search$[ebp], eax

; 1160 : 	search.sub_object_index = sub_obj_id;

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _sub_obj_id$[ebp]
  00041	89 45 d4	 mov	 DWORD PTR _search$[ebp+12], eax

; 1161 : 
; 1162 : 	if (find_object_3d_sub_object(&search) != SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  00044	8d 45 c8	 lea	 eax, DWORD PTR _search$[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  0004d	83 f8 01	 cmp	 eax, 1
  00050	74 2a		 je	 SHORT $LN2@find_sub_o

; 1163 : 		if (name)

  00052	83 7d c4 00	 cmp	 DWORD PTR _name$[ebp], 0
  00056	74 13		 je	 SHORT $LN3@find_sub_o

; 1164 : 			debug_fatal ("Failed to locate sub object: %s", name);

  00058	8b 45 c4	 mov	 eax, DWORD PTR _name$[ebp]
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LAMGPJDD@Failed?5to?5locate?5sub?5object?3?5?$CFs@
  00061	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00066	83 c4 08	 add	 esp, 8

; 1165 : 		else

  00069	eb 11		 jmp	 SHORT $LN2@find_sub_o
$LN3@find_sub_o:

; 1166 : 			debug_fatal ("Failed to locate sub object: %d (illegal id)", sub_obj_id);

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _sub_obj_id$[ebp]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@GJLDHAEA@Failed?5to?5locate?5sub?5object?3?5?$CFd@
  00074	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00079	83 c4 08	 add	 esp, 8
$LN2@find_sub_o:

; 1167 : 
; 1168 : 	return search.result_sub_object;

  0007c	8b 45 cc	 mov	 eax, DWORD PTR _search$[ebp+4]

; 1169 : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?find_sub_object@@YGPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_INSTANCE@@I@Z ENDP ; find_sub_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?find_object_3d_sub_object_from_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@0@Z
_TEXT	SEGMENT
_search_object_depth$1 = -44				; size = 4
_table$ = -40						; size = 4
_search_index$ = -36					; size = 4
_scene_index$ = -32					; size = 4
_table_index$ = -28					; size = 4
_search_depth$ = -24					; size = 4
_scene_result$ = -20					; size = 4
_scene_parent$ = -16					; size = 4
_result$ = -12						; size = 4
_tmp_object$ = -8					; size = 4
_scene_object$ = -4					; size = 4
_parent_search$ = 8					; size = 4
_search$ = 12						; size = 4
?find_object_3d_sub_object_from_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@0@Z PROC ; find_object_3d_sub_object_from_sub_object, COMDAT

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 922  : 
; 923  : 	object_3d_instance
; 924  : 		*scene_object;
; 925  : 
; 926  : 	object_3d_sub_instance
; 927  : 		*tmp_object,
; 928  : 		*result;
; 929  : 
; 930  : 	object_3d_database_entry
; 931  : 		*scene_parent,
; 932  : 		*scene_result;
; 933  : 
; 934  : 	int
; 935  : 		search_depth,
; 936  : 		table_index,
; 937  : 		scene_index;
; 938  : 
; 939  : 	object_3d_sub_object_index_numbers
; 940  : 		search_index;
; 941  : 
; 942  : 	object_3d_scene_sub_object_table_entry
; 943  : 		*table;
; 944  : 
; 945  : #if REPORT_SUB_OBJECT_SEARCHES
; 946  : 
; 947  : 	sub_object_search_count++;
; 948  : 
; 949  : #endif
; 950  : 
; 951  : 	search_depth = search->search_depth;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	89 4d e8	 mov	 DWORD PTR _search_depth$[ebp], ecx

; 952  : 
; 953  : 	tmp_object = parent_search->result_sub_object;

  00012	8b 45 08	 mov	 eax, DWORD PTR _parent_search$[ebp]
  00015	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00018	89 4d f8	 mov	 DWORD PTR _tmp_object$[ebp], ecx
$LN2@find_objec:

; 954  : 
; 955  : 	while ( tmp_object->parent )

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _tmp_object$[ebp]
  0001e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00021	74 0a		 je	 SHORT $LN3@find_objec

; 956  : 	{
; 957  : 
; 958  : 		tmp_object = tmp_object->parent;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _tmp_object$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	89 4d f8	 mov	 DWORD PTR _tmp_object$[ebp], ecx

; 959  : 	}

  0002b	eb ee		 jmp	 SHORT $LN2@find_objec
$LN3@find_objec:

; 960  : 
; 961  : 	scene_object = ( object_3d_instance * ) tmp_object;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _tmp_object$[ebp]
  00030	89 45 fc	 mov	 DWORD PTR _scene_object$[ebp], eax

; 962  : 
; 963  : 	scene_index = scene_object->object_number;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _scene_object$[ebp]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	89 4d e0	 mov	 DWORD PTR _scene_index$[ebp], ecx

; 964  : 
; 965  : 	search_index = search->sub_object_index;

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  0003f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00042	89 4d dc	 mov	 DWORD PTR _search_index$[ebp], ecx

; 966  : 
; 967  : 	scene_parent = parent_search->object_scene;

  00045	8b 45 08	 mov	 eax, DWORD PTR _parent_search$[ebp]
  00048	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004b	89 4d f0	 mov	 DWORD PTR _scene_parent$[ebp], ecx

; 968  : 
; 969  : 	table = objects_3d_scene_database[scene_index].sub_object_indices_table;

  0004e	69 45 e0 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0005b	8b 54 01 64	 mov	 edx, DWORD PTR [ecx+eax+100]
  0005f	89 55 d8	 mov	 DWORD PTR _table$[ebp], edx

; 970  : 
; 971  : 	result = NULL;

  00062	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 972  : 
; 973  : 	scene_result = NULL;

  00069	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _scene_result$[ebp], 0

; 974  : 
; 975  : 	for ( table_index = 0; ( ( table_index < objects_3d_scene_database[scene_index].number_of_sub_object_table_entries ) && ( !scene_result ) ); table_index++ )

  00070	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _table_index$[ebp], 0
  00077	eb 09		 jmp	 SHORT $LN6@find_objec
$LN4@find_objec:
  00079	8b 45 e4	 mov	 eax, DWORD PTR _table_index$[ebp]
  0007c	83 c0 01	 add	 eax, 1
  0007f	89 45 e4	 mov	 DWORD PTR _table_index$[ebp], eax
$LN6@find_objec:
  00082	69 45 e0 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0008f	8b 55 e4	 mov	 edx, DWORD PTR _table_index$[ebp]
  00092	3b 94 01 b8 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+184]
  00099	0f 8d 9d 00 00
	00		 jge	 $LN5@find_objec
  0009f	83 7d ec 00	 cmp	 DWORD PTR _scene_result$[ebp], 0
  000a3	0f 85 93 00 00
	00		 jne	 $LN5@find_objec

; 976  : 	{
; 977  : 
; 978  : 		if ( table[table_index].sub_object_index == search_index )

  000a9	6b 45 e4 0c	 imul	 eax, DWORD PTR _table_index$[ebp], 12
  000ad	8b 4d d8	 mov	 ecx, DWORD PTR _table$[ebp]
  000b0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000b3	3b 55 dc	 cmp	 edx, DWORD PTR _search_index$[ebp]
  000b6	75 7f		 jne	 SHORT $LN15@find_objec

; 979  : 		{
; 980  : 
; 981  : 			int
; 982  : 				search_object_depth;
; 983  : 
; 984  : 			search_object_depth = 0;

  000b8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _search_object_depth$1[ebp], 0
$LN7@find_objec:

; 985  : 
; 986  : 			while ( search_depth >= 0 )

  000bf	83 7d e8 00	 cmp	 DWORD PTR _search_depth$[ebp], 0
  000c3	7c 65		 jl	 SHORT $LN8@find_objec

; 987  : 			{
; 988  : 
; 989  : 				if ( search_object_depth >= table[table_index].number_of_sub_objects )

  000c5	6b 45 e4 0c	 imul	 eax, DWORD PTR _table_index$[ebp], 12
  000c9	8b 4d d8	 mov	 ecx, DWORD PTR _table$[ebp]
  000cc	8b 55 d4	 mov	 edx, DWORD PTR _search_object_depth$1[ebp]
  000cf	3b 54 01 04	 cmp	 edx, DWORD PTR [ecx+eax+4]
  000d3	7c 04		 jl	 SHORT $LN10@find_objec

; 990  : 				{
; 991  : 
; 992  : 					break;

  000d5	eb 53		 jmp	 SHORT $LN8@find_objec

; 993  : 				}
; 994  : 				else

  000d7	eb 46		 jmp	 SHORT $LN14@find_objec
$LN10@find_objec:

; 995  : 				{
; 996  : 
; 997  : 					if ( sub_scene_has_parent_scene ( scene_parent, table[table_index].sub_objects[search_object_depth] ) )

  000d9	6b 45 e4 0c	 imul	 eax, DWORD PTR _table_index$[ebp], 12
  000dd	8b 4d d8	 mov	 ecx, DWORD PTR _table$[ebp]
  000e0	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  000e4	8b 45 d4	 mov	 eax, DWORD PTR _search_object_depth$1[ebp]
  000e7	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000ea	51		 push	 ecx
  000eb	8b 55 f0	 mov	 edx, DWORD PTR _scene_parent$[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 ?sub_scene_has_parent_scene@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@0@Z ; sub_scene_has_parent_scene
  000f4	85 c0		 test	 eax, eax
  000f6	74 27		 je	 SHORT $LN14@find_objec

; 998  : 					{
; 999  : 
; 1000 : 						scene_result = table[table_index].sub_objects[search_object_depth];

  000f8	6b 45 e4 0c	 imul	 eax, DWORD PTR _table_index$[ebp], 12
  000fc	8b 4d d8	 mov	 ecx, DWORD PTR _table$[ebp]
  000ff	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00103	8b 45 d4	 mov	 eax, DWORD PTR _search_object_depth$1[ebp]
  00106	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00109	89 4d ec	 mov	 DWORD PTR _scene_result$[ebp], ecx

; 1001 : 
; 1002 : 						if ( search_depth == 0 )

  0010c	83 7d e8 00	 cmp	 DWORD PTR _search_depth$[ebp], 0
  00110	75 04		 jne	 SHORT $LN13@find_objec

; 1003 : 						{
; 1004 : 
; 1005 : 							break;

  00112	eb 16		 jmp	 SHORT $LN8@find_objec

; 1006 : 						}
; 1007 : 						else

  00114	eb 09		 jmp	 SHORT $LN14@find_objec
$LN13@find_objec:

; 1008 : 						{
; 1009 : 
; 1010 : 							search_depth--;

  00116	8b 45 e8	 mov	 eax, DWORD PTR _search_depth$[ebp]
  00119	83 e8 01	 sub	 eax, 1
  0011c	89 45 e8	 mov	 DWORD PTR _search_depth$[ebp], eax
$LN14@find_objec:

; 1011 : 						}
; 1012 : 					}
; 1013 : 				}
; 1014 : 
; 1015 : 				search_object_depth++;

  0011f	8b 45 d4	 mov	 eax, DWORD PTR _search_object_depth$1[ebp]
  00122	83 c0 01	 add	 eax, 1
  00125	89 45 d4	 mov	 DWORD PTR _search_object_depth$1[ebp], eax

; 1016 : 			}

  00128	eb 95		 jmp	 SHORT $LN7@find_objec
$LN8@find_objec:

; 1017 : 
; 1018 : 			if ( search_depth != 0 )

  0012a	83 7d e8 00	 cmp	 DWORD PTR _search_depth$[ebp], 0
  0012e	74 07		 je	 SHORT $LN15@find_objec

; 1019 : 			{
; 1020 : 
; 1021 : 				scene_result = NULL;

  00130	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _scene_result$[ebp], 0
$LN15@find_objec:

; 1022 : 			}
; 1023 : 		}
; 1024 : 	}

  00137	e9 3d ff ff ff	 jmp	 $LN4@find_objec
$LN5@find_objec:

; 1025 : 
; 1026 : 	if ( scene_result )

  0013c	83 7d ec 00	 cmp	 DWORD PTR _scene_result$[ebp], 0
  00140	0f 84 bf 00 00
	00		 je	 $LN16@find_objec

; 1027 : 	{
; 1028 : 
; 1029 : 		//
; 1030 : 		// Match the scene to the object
; 1031 : 		//
; 1032 : 
; 1033 : 		result = get_sub_object_from_sub_scene ( scene_index, scene_result, scene_object );

  00146	8b 45 fc	 mov	 eax, DWORD PTR _scene_object$[ebp]
  00149	50		 push	 eax
  0014a	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  0014d	51		 push	 ecx
  0014e	8b 55 e0	 mov	 edx, DWORD PTR _scene_index$[ebp]
  00151	52		 push	 edx
  00152	e8 00 00 00 00	 call	 ?get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_sub_object_from_sub_scene
  00157	89 45 f4	 mov	 DWORD PTR _result$[ebp], eax

; 1034 : 
; 1035 : 		search->result_sub_object = result;

  0015a	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  0015d	8b 4d f4	 mov	 ecx, DWORD PTR _result$[ebp]
  00160	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1036 : 
; 1037 : 		search->object_scene = scene_result;

  00163	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  00166	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  00169	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1038 : 
; 1039 : 		search->relative_heading_initial = scene_result->keyframes[0].heading;

  0016c	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00171	6b c8 00	 imul	 ecx, eax, 0
  00174	8b 55 ec	 mov	 edx, DWORD PTR _scene_result$[ebp]
  00177	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0017a	8b 55 0c	 mov	 edx, DWORD PTR _search$[ebp]
  0017d	8b 44 08 14	 mov	 eax, DWORD PTR [eax+ecx+20]
  00181	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1040 : 		search->relative_heading_minimum = scene_result->relative_heading_minimum;

  00184	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  00187	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  0018a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0018d	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1041 : 		search->relative_heading_maximum = scene_result->relative_heading_maximum;

  00190	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  00193	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  00196	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00199	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1042 : 
; 1043 : 		search->relative_pitch_initial = scene_result->keyframes[0].pitch;

  0019c	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  001a1	6b c8 00	 imul	 ecx, eax, 0
  001a4	8b 55 ec	 mov	 edx, DWORD PTR _scene_result$[ebp]
  001a7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001aa	8b 55 0c	 mov	 edx, DWORD PTR _search$[ebp]
  001ad	8b 44 08 18	 mov	 eax, DWORD PTR [eax+ecx+24]
  001b1	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 1044 : 		search->relative_pitch_minimum = scene_result->relative_pitch_minimum;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  001b7	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  001ba	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001bd	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 1045 : 		search->relative_pitch_maximum = scene_result->relative_pitch_maximum;

  001c0	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  001c3	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  001c6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001c9	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 1046 : 
; 1047 : 		search->relative_roll_initial = scene_result->keyframes[0].roll;

  001cc	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  001d1	6b c8 00	 imul	 ecx, eax, 0
  001d4	8b 55 ec	 mov	 edx, DWORD PTR _scene_result$[ebp]
  001d7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001da	8b 55 0c	 mov	 edx, DWORD PTR _search$[ebp]
  001dd	8b 44 08 1c	 mov	 eax, DWORD PTR [eax+ecx+28]
  001e1	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 1048 : 		search->relative_roll_minimum = scene_result->relative_roll_minimum;

  001e4	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  001e7	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  001ea	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  001ed	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 1049 : 		search->relative_roll_maximum = scene_result->relative_roll_maximum;

  001f0	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  001f3	8b 4d ec	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  001f6	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001f9	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 1050 : 
; 1051 : 		return ( SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND );

  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	eb 11		 jmp	 SHORT $LN17@find_objec

; 1052 : 	}
; 1053 : 	else

  00203	eb 0f		 jmp	 SHORT $LN17@find_objec
$LN16@find_objec:

; 1054 : 	{
; 1055 : 
; 1056 : 		search->object_scene = NULL;

  00205	8b 45 0c	 mov	 eax, DWORD PTR _search$[ebp]
  00208	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1057 : 
; 1058 : 		return ( SUB_OBJECT_SEARCH_RESULT_OBJECT_NOT_FOUND );

  0020f	b8 02 00 00 00	 mov	 eax, 2
$LN17@find_objec:

; 1059 : 	}
; 1060 : }

  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 08 00	 ret	 8
?find_object_3d_sub_object_from_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@0@Z ENDP ; find_object_3d_sub_object_from_sub_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z
_TEXT	SEGMENT
_table$ = -24						; size = 4
_search_index$ = -20					; size = 4
_scene_index$ = -16					; size = 4
_table_index$ = -12					; size = 4
_scene_result$ = -8					; size = 4
_result$ = -4						; size = 4
_search$ = 8						; size = 4
?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z PROC ; find_object_3d_sub_object, COMDAT

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 820  : 
; 821  : 	object_3d_sub_instance
; 822  : 		*result;
; 823  : 
; 824  : 	object_3d_database_entry
; 825  : 		*scene_result;
; 826  : 
; 827  : 	int
; 828  : 		table_index,
; 829  : 		scene_index;
; 830  : 
; 831  : 	object_3d_sub_object_index_numbers
; 832  : 		search_index;
; 833  : 
; 834  : 	object_3d_scene_sub_object_table_entry   // table of the named sub objects (from scene)
; 835  : 		*table;
; 836  : 
; 837  : #if REPORT_SUB_OBJECT_SEARCHES
; 838  : 
; 839  : 	sub_object_search_count++;
; 840  : 
; 841  : #endif
; 842  : 
; 843  : 	sub_object_search_minimum_depth = search->search_depth;

  00009	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?sub_object_search_minimum_depth@@3HA, ecx

; 844  : 
; 845  : 	scene_index = search->search_object->object_number;

  00015	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	89 55 f0	 mov	 DWORD PTR _scene_index$[ebp], edx

; 846  : 
; 847  : 	search_index = search->sub_object_index;

  00020	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00023	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00026	89 4d ec	 mov	 DWORD PTR _search_index$[ebp], ecx

; 848  : 
; 849  : 	table = objects_3d_scene_database[scene_index].sub_object_indices_table;

  00029	69 45 f0 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00036	8b 54 01 64	 mov	 edx, DWORD PTR [ecx+eax+100]
  0003a	89 55 e8	 mov	 DWORD PTR _table$[ebp], edx

; 850  : 
; 851  : 	result = NULL;

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 852  : 
; 853  : 	scene_result = NULL;

  00044	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _scene_result$[ebp], 0

; 854  : 
; 855  : 	for ( table_index = 0; ( ( table_index < objects_3d_scene_database[scene_index].number_of_sub_object_table_entries ) && ( !scene_result ) ); table_index++ )

  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _table_index$[ebp], 0
  00052	eb 09		 jmp	 SHORT $LN4@find_objec
$LN2@find_objec:
  00054	8b 45 f4	 mov	 eax, DWORD PTR _table_index$[ebp]
  00057	83 c0 01	 add	 eax, 1
  0005a	89 45 f4	 mov	 DWORD PTR _table_index$[ebp], eax
$LN4@find_objec:
  0005d	69 45 f0 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0006a	8b 55 f4	 mov	 edx, DWORD PTR _table_index$[ebp]
  0006d	3b 94 01 b8 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+184]
  00074	7d 46		 jge	 SHORT $LN3@find_objec
  00076	83 7d f8 00	 cmp	 DWORD PTR _scene_result$[ebp], 0
  0007a	75 40		 jne	 SHORT $LN3@find_objec

; 856  : 	{
; 857  : 
; 858  : 		if ( table[table_index].sub_object_index == search_index )

  0007c	6b 45 f4 0c	 imul	 eax, DWORD PTR _table_index$[ebp], 12
  00080	8b 4d e8	 mov	 ecx, DWORD PTR _table$[ebp]
  00083	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00086	3b 55 ec	 cmp	 edx, DWORD PTR _search_index$[ebp]
  00089	75 2f		 jne	 SHORT $LN7@find_objec

; 859  : 		{
; 860  : 
; 861  : 			//
; 862  : 			// Check to ensure we haven't gone past our search depth
; 863  : 			//
; 864  : 
; 865  : 			if ( sub_object_search_minimum_depth < table[table_index].number_of_sub_objects )

  0008b	6b 45 f4 0c	 imul	 eax, DWORD PTR _table_index$[ebp], 12
  0008f	8b 4d e8	 mov	 ecx, DWORD PTR _table$[ebp]
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sub_object_search_minimum_depth@@3HA
  00098	3b 54 01 04	 cmp	 edx, DWORD PTR [ecx+eax+4]
  0009c	7d 1a		 jge	 SHORT $LN6@find_objec

; 866  : 			{
; 867  : 
; 868  : 				scene_result = table[table_index].sub_objects[sub_object_search_minimum_depth];

  0009e	6b 45 f4 0c	 imul	 eax, DWORD PTR _table_index$[ebp], 12
  000a2	8b 4d e8	 mov	 ecx, DWORD PTR _table$[ebp]
  000a5	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sub_object_search_minimum_depth@@3HA
  000ae	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000b1	89 4d f8	 mov	 DWORD PTR _scene_result$[ebp], ecx

; 869  : 
; 870  : 				break;

  000b4	eb 06		 jmp	 SHORT $LN3@find_objec

; 871  : 			}
; 872  : 			else

  000b6	eb 02		 jmp	 SHORT $LN7@find_objec
$LN6@find_objec:

; 873  : 			{
; 874  : 
; 875  : 				break;

  000b8	eb 02		 jmp	 SHORT $LN3@find_objec
$LN7@find_objec:

; 876  : 			}
; 877  : 		}
; 878  : 	}

  000ba	eb 98		 jmp	 SHORT $LN2@find_objec
$LN3@find_objec:

; 879  : 
; 880  : 	if ( scene_result )

  000bc	83 7d f8 00	 cmp	 DWORD PTR _scene_result$[ebp], 0
  000c0	0f 84 c1 00 00
	00		 je	 $LN8@find_objec

; 881  : 	{
; 882  : 
; 883  : 		//
; 884  : 		// Match the scene to the object
; 885  : 		//
; 886  : 
; 887  : 		result = get_sub_object_from_sub_scene ( scene_index, scene_result, search->search_object );

  000c6	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  000c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cb	51		 push	 ecx
  000cc	8b 55 f8	 mov	 edx, DWORD PTR _scene_result$[ebp]
  000cf	52		 push	 edx
  000d0	8b 45 f0	 mov	 eax, DWORD PTR _scene_index$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?get_sub_object_from_sub_scene@@YGPAUOBJECT_3D_SUB_INSTANCE@@HPAUOBJECT_3D_DATABASE_ENTRY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_sub_object_from_sub_scene
  000d9	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 888  : 
; 889  : 		search->result_sub_object = result;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _result$[ebp]
  000e2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 890  : 
; 891  : 		search->object_scene = scene_result;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  000eb	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 892  : 
; 893  : 		search->relative_heading_initial = scene_result->keyframes[0].heading;

  000ee	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  000f3	6b c8 00	 imul	 ecx, eax, 0
  000f6	8b 55 f8	 mov	 edx, DWORD PTR _scene_result$[ebp]
  000f9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000fc	8b 55 08	 mov	 edx, DWORD PTR _search$[ebp]
  000ff	8b 44 08 14	 mov	 eax, DWORD PTR [eax+ecx+20]
  00103	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 894  : 		search->relative_heading_minimum = scene_result->relative_heading_minimum;

  00106	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00109	8b 4d f8	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  0010c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0010f	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 895  : 		search->relative_heading_maximum = scene_result->relative_heading_maximum;

  00112	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00115	8b 4d f8	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  00118	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0011b	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 896  : 
; 897  : 		search->relative_pitch_initial = scene_result->keyframes[0].pitch;

  0011e	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00123	6b c8 00	 imul	 ecx, eax, 0
  00126	8b 55 f8	 mov	 edx, DWORD PTR _scene_result$[ebp]
  00129	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0012c	8b 55 08	 mov	 edx, DWORD PTR _search$[ebp]
  0012f	8b 44 08 18	 mov	 eax, DWORD PTR [eax+ecx+24]
  00133	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 898  : 		search->relative_pitch_minimum = scene_result->relative_pitch_minimum;

  00136	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00139	8b 4d f8	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  0013c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0013f	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 899  : 		search->relative_pitch_maximum = scene_result->relative_pitch_maximum;

  00142	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00145	8b 4d f8	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  00148	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0014b	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 900  : 
; 901  : 		search->relative_roll_initial = scene_result->keyframes[0].roll;

  0014e	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00153	6b c8 00	 imul	 ecx, eax, 0
  00156	8b 55 f8	 mov	 edx, DWORD PTR _scene_result$[ebp]
  00159	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0015c	8b 55 08	 mov	 edx, DWORD PTR _search$[ebp]
  0015f	8b 44 08 1c	 mov	 eax, DWORD PTR [eax+ecx+28]
  00163	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 902  : 		search->relative_roll_minimum = scene_result->relative_roll_minimum;

  00166	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00169	8b 4d f8	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  0016c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0016f	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 903  : 		search->relative_roll_maximum = scene_result->relative_roll_maximum;

  00172	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  00175	8b 4d f8	 mov	 ecx, DWORD PTR _scene_result$[ebp]
  00178	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0017b	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 904  : 
; 905  : 		return ( SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND );

  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	eb 11		 jmp	 SHORT $LN9@find_objec

; 906  : 	}
; 907  : 	else

  00185	eb 0f		 jmp	 SHORT $LN9@find_objec
$LN8@find_objec:

; 908  : 	{
; 909  : 
; 910  : 		search->object_scene = NULL;

  00187	8b 45 08	 mov	 eax, DWORD PTR _search$[ebp]
  0018a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 911  : 
; 912  : 		return ( SUB_OBJECT_SEARCH_RESULT_OBJECT_NOT_FOUND );

  00191	b8 02 00 00 00	 mov	 eax, 2
$LN9@find_objec:

; 913  : 	}
; 914  : }

  00196	5f		 pop	 edi
  00197	5e		 pop	 esi
  00198	5b		 pop	 ebx
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c2 04 00	 ret	 4
?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ENDP ; find_object_3d_sub_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?report_sub_object_search_statistics@@YGXXZ
_TEXT	SEGMENT
?report_sub_object_search_statistics@@YGXXZ PROC	; report_sub_object_search_statistics, COMDAT

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 805  : 
; 806  : #if REPORT_SUB_OBJECT_SEARCHES
; 807  : 
; 808  : 	debug_log ( "Performed %d sub object searches, internal: %d", sub_object_search_count, sub_object_internal_search_count );
; 809  : 
; 810  : #endif
; 811  : 
; 812  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?report_sub_object_search_statistics@@YGXXZ ENDP	; report_sub_object_search_statistics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?reset_sub_object_search_statistics@@YGXXZ
_TEXT	SEGMENT
?reset_sub_object_search_statistics@@YGXXZ PROC		; reset_sub_object_search_statistics, COMDAT

; 787  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 788  : 
; 789  : #if REPORT_SUB_OBJECT_SEARCHES
; 790  : 
; 791  : 	sub_object_search_count = 0;
; 792  : 
; 793  : 	sub_object_internal_search_count = 0;
; 794  : 
; 795  : #endif
; 796  : 
; 797  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?reset_sub_object_search_statistics@@YGXXZ ENDP		; reset_sub_object_search_statistics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?initialise_scene_bounding_sub_objects@@YGXH@Z
_TEXT	SEGMENT
$T1 = -192						; size = 8
$T2 = -184						; size = 8
$T3 = -176						; size = 8
$T4 = -168						; size = 8
$T5 = -160						; size = 8
$T6 = -152						; size = 8
$T7 = -144						; size = 8
$T8 = -136						; size = 8
_radius$9 = -64						; size = 8
_dzmax$10 = -56						; size = 8
_dzmin$11 = -48						; size = 8
_dymax$12 = -40						; size = 8
_dymin$13 = -32						; size = 8
_dxmax$14 = -24						; size = 8
_dxmin$15 = -16						; size = 8
_count$ = -8						; size = 4
_index$ = -4						; size = 4
_scene_index$ = 8					; size = 4
?initialise_scene_bounding_sub_objects@@YGXH@Z PROC	; initialise_scene_bounding_sub_objects, COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 366  : 
; 367  : 	int
; 368  : 		index,
; 369  : 		count;
; 370  : 
; 371  : 	memset ( &scene_bounds, 0, sizeof ( object_3d_bounds ) );

  0000c	6a 18		 push	 24			; 00000018H
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 372  : 	memset ( &scene_bounds2, 0, sizeof ( object_3d_bounds ) );

  0001d	6a 18		 push	 24			; 00000018H
  0001f	6a 00		 push	 0
  00021	68 00 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A
  00026	e8 00 00 00 00	 call	 _memset
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 373  : 
; 374  : 	index = objects_3d_scene_database[scene_index].index;

  0002e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0003b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003e	89 55 fc	 mov	 DWORD PTR _index$[ebp], edx

; 375  : 
; 376  : 	scene_position.x = 0;

  00041	0f 57 c0	 xorps	 xmm0, xmm0
  00044	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scene_position@@3UVEC3D@@A, xmm0

; 377  : 	scene_position.y = 0;

  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?scene_position@@3UVEC3D@@A+4, xmm0

; 378  : 	scene_position.z = 0;

  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?scene_position@@3UVEC3D@@A+8, xmm0

; 379  : 
; 380  : 	get_3d_transformation_matrix ( scene_rotation, 0, 0, 0 );

  00062	51		 push	 ecx
  00063	0f 57 c0	 xorps	 xmm0, xmm0
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	51		 push	 ecx
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00074	51		 push	 ecx
  00075	0f 57 c0	 xorps	 xmm0, xmm0
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	68 00 00 00 00	 push	 OFFSET ?scene_rotation@@3PAY02MA
  00082	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 381  : 
; 382  : 	if ( index != 0 )

  00087	83 7d fc 00	 cmp	 DWORD PTR _index$[ebp], 0
  0008b	0f 84 76 01 00
	00		 je	 $LN5@initialise

; 383  : 	{
; 384  : 
; 385  : 		rotate_sub_scene_boundaries ( &rotated_bounds, &objects_3d_data[index].bounding_box );

  00091	6b 45 fc 68	 imul	 eax, DWORD PTR _index$[ebp], 104
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0009b	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0009f	52		 push	 edx
  000a0	68 00 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A
  000a5	e8 00 00 00 00	 call	 ?rotate_sub_scene_boundaries@@YGXPAUOBJECT_3D_BOUNDS@@0@Z ; rotate_sub_scene_boundaries

; 386  : 		rotate_sub_scene_boundaries ( &rotated_bounds2, &objects_3d_data[index].bounding_box2 );

  000aa	6b 45 fc 68	 imul	 eax, DWORD PTR _index$[ebp], 104
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000b4	8d 54 01 28	 lea	 edx, DWORD PTR [ecx+eax+40]
  000b8	52		 push	 edx
  000b9	68 00 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A
  000be	e8 00 00 00 00	 call	 ?rotate_sub_scene_boundaries@@YGXPAUOBJECT_3D_BOUNDS@@0@Z ; rotate_sub_scene_boundaries

; 387  : 
; 388  : 		scene_bounds.xmin = min ( scene_bounds.xmin, rotated_bounds.xmin );

  000c3	68 00 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A
  000c8	68 00 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A
  000cd	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000d2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000d6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A, xmm0

; 389  : 		scene_bounds.ymin = min ( scene_bounds.ymin, rotated_bounds.ymin );

  000de	68 08 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  000e3	68 08 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  000e8	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000f1	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+8, xmm0

; 390  : 		scene_bounds.zmin = min ( scene_bounds.zmin, rotated_bounds.zmin );

  000f9	68 10 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  000fe	68 10 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  00103	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00108	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0010c	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+16, xmm0

; 391  : 
; 392  : 		scene_bounds.xmax = max ( scene_bounds.xmax, rotated_bounds.xmax );

  00114	68 04 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  00119	68 04 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  0011e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00123	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00127	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+4, xmm0

; 393  : 		scene_bounds.ymax = max ( scene_bounds.ymax, rotated_bounds.ymax );

  0012f	68 0c 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  00134	68 0c 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  00139	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0013e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00142	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+12, xmm0

; 394  : 		scene_bounds.zmax = max ( scene_bounds.zmax, rotated_bounds.zmax );

  0014a	68 14 00 00 00	 push	 OFFSET ?rotated_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  0014f	68 14 00 00 00	 push	 OFFSET ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  00154	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00159	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0015d	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+20, xmm0

; 395  : 
; 396  : 		scene_bounds2.xmin = min ( scene_bounds2.xmin, rotated_bounds2.xmin );

  00165	68 00 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A
  0016a	68 00 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A
  0016f	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00174	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00178	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A, xmm0

; 397  : 		scene_bounds2.ymin = min ( scene_bounds2.ymin, rotated_bounds2.ymin );

  00180	68 08 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+8
  00185	68 08 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+8
  0018a	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0018f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00193	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+8, xmm0

; 398  : 		scene_bounds2.zmin = min ( scene_bounds2.zmin, rotated_bounds2.zmin );

  0019b	68 10 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+16
  001a0	68 10 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+16
  001a5	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001aa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001ae	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+16, xmm0

; 399  : 
; 400  : 		scene_bounds2.xmax = max ( scene_bounds2.xmax, rotated_bounds2.xmax );

  001b6	68 04 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+4
  001bb	68 04 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+4
  001c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001c5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001c9	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+4, xmm0

; 401  : 		scene_bounds2.ymax = max ( scene_bounds2.ymax, rotated_bounds2.ymax );

  001d1	68 0c 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+12
  001d6	68 0c 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+12
  001db	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001e4	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+12, xmm0

; 402  : 		scene_bounds2.zmax = max ( scene_bounds2.zmax, rotated_bounds2.zmax );

  001ec	68 14 00 00 00	 push	 OFFSET ?rotated_bounds2@@3UOBJECT_3D_BOUNDS@@A+20
  001f1	68 14 00 00 00	 push	 OFFSET ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+20
  001f6	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001fb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001ff	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+20, xmm0
$LN5@initialise:

; 403  : 	}
; 404  : 
; 405  : 	contributes_to_collision = TRUE;

  00207	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?contributes_to_collision@@3HA, 1

; 406  : 
; 407  : 	for ( count = 0; count < objects_3d_scene_database[scene_index].number_of_sub_objects; count++ )

  00211	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00218	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0021a	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0021d	83 c0 01	 add	 eax, 1
  00220	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  00223	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00230	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00233	3b 94 01 b0 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+176]
  0023a	7d 20		 jge	 SHORT $LN3@initialise

; 408  : 	{
; 409  : 
; 410  : 		recurse_initialise_sub_scene_bounding_box ( &objects_3d_scene_database[scene_index].sub_objects[count] );

  0023c	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00243	6b 4d f8 38	 imul	 ecx, DWORD PTR _count$[ebp], 56
  00247	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0024d	03 8c 02 d8 00
	00 00		 add	 ecx, DWORD PTR [edx+eax+216]
  00254	51		 push	 ecx
  00255	e8 00 00 00 00	 call	 ?recurse_initialise_sub_scene_bounding_box@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; recurse_initialise_sub_scene_bounding_box

; 411  : 	}

  0025a	eb be		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 412  : 
; 413  : 	objects_3d_scene_database[scene_index].bounding_box = scene_bounds;

  0025c	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00263	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00269	8d 54 01 78	 lea	 edx, DWORD PTR [ecx+eax+120]
  0026d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A
  00272	89 02		 mov	 DWORD PTR [edx], eax
  00274	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  0027a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0027d	a1 08 00 00 00	 mov	 eax, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  00282	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00285	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  0028b	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0028e	a1 10 00 00 00	 mov	 eax, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  00293	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00296	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  0029c	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 414  : 
; 415  : 	objects_3d_scene_database[scene_index].bounding_box2 = scene_bounds2;

  0029f	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  002a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  002ac	8d 94 01 90 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+144]
  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A
  002b8	89 02		 mov	 DWORD PTR [edx], eax
  002ba	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+4
  002c0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  002c3	a1 08 00 00 00	 mov	 eax, DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+8
  002c8	89 42 08	 mov	 DWORD PTR [edx+8], eax
  002cb	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+12
  002d1	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  002d4	a1 10 00 00 00	 mov	 eax, DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+16
  002d9	89 42 10	 mov	 DWORD PTR [edx+16], eax
  002dc	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?scene_bounds2@@3UOBJECT_3D_BOUNDS@@A+20
  002e2	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 416  : 
; 417  : 	//
; 418  : 	// Calculate the radius based on the bounding_box values
; 419  : 	//
; 420  : 
; 421  : 	{
; 422  : 
; 423  : 		double
; 424  : 			dxmin,
; 425  : 			dxmax,
; 426  : 			dymin,
; 427  : 			dymax,
; 428  : 			dzmin,
; 429  : 			dzmax,
; 430  : 			radius;
; 431  : 
; 432  : 		dxmax = ( (double) scene_bounds.xmax * (double) scene_bounds.xmax );

  002e5	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  002ed	f3 0f 5a 0d 04
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+4
  002f5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002f9	f2 0f 11 45 e8	 movsd	 QWORD PTR _dxmax$14[ebp], xmm0

; 433  : 		dxmin = ( (double) scene_bounds.xmin * (double) scene_bounds.xmin );

  002fe	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A
  00306	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A
  0030e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00312	f2 0f 11 45 f0	 movsd	 QWORD PTR _dxmin$15[ebp], xmm0

; 434  : 
; 435  : 		dymax = ( (double) scene_bounds.ymax * (double) scene_bounds.ymax );

  00317	f3 0f 5a 05 0c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  0031f	f3 0f 5a 0d 0c
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+12
  00327	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0032b	f2 0f 11 45 d8	 movsd	 QWORD PTR _dymax$12[ebp], xmm0

; 436  : 		dymin = ( (double) scene_bounds.ymin * (double) scene_bounds.ymin );

  00330	f3 0f 5a 05 08
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  00338	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+8
  00340	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00344	f2 0f 11 45 e0	 movsd	 QWORD PTR _dymin$13[ebp], xmm0

; 437  : 
; 438  : 		dzmax = ( (double) scene_bounds.zmax * (double) scene_bounds.zmax );

  00349	f3 0f 5a 05 14
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  00351	f3 0f 5a 0d 14
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+20
  00359	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0035d	f2 0f 11 45 c8	 movsd	 QWORD PTR _dzmax$10[ebp], xmm0

; 439  : 		dzmin = ( (double) scene_bounds.zmin * (double) scene_bounds.zmin );

  00362	f3 0f 5a 05 10
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  0036a	f3 0f 5a 0d 10
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?scene_bounds@@3UOBJECT_3D_BOUNDS@@A+16
  00372	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00376	f2 0f 11 45 d0	 movsd	 QWORD PTR _dzmin$11[ebp], xmm0

; 440  : 
; 441  : 		radius = 0;

  0037b	0f 57 c0	 xorps	 xmm0, xmm0
  0037e	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 442  : 
; 443  : 		radius = max ( radius, ( dxmax + dymax + dzmax ) );

  00383	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _dxmax$14[ebp]
  00388	f2 0f 58 45 d8	 addsd	 xmm0, QWORD PTR _dymax$12[ebp]
  0038d	f2 0f 58 45 c8	 addsd	 xmm0, QWORD PTR _dzmax$10[ebp]
  00392	f2 0f 11 85 78
	ff ff ff	 movsd	 QWORD PTR $T8[ebp], xmm0
  0039a	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  003a0	50		 push	 eax
  003a1	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  003a4	51		 push	 ecx
  003a5	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  003aa	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  003ae	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 444  : 		radius = max ( radius, ( dxmax + dymax + dzmin ) );

  003b3	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _dxmax$14[ebp]
  003b8	f2 0f 58 45 d8	 addsd	 xmm0, QWORD PTR _dymax$12[ebp]
  003bd	f2 0f 58 45 d0	 addsd	 xmm0, QWORD PTR _dzmin$11[ebp]
  003c2	f2 0f 11 85 70
	ff ff ff	 movsd	 QWORD PTR $T7[ebp], xmm0
  003ca	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  003d0	50		 push	 eax
  003d1	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  003d4	51		 push	 ecx
  003d5	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  003da	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  003de	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 445  : 		radius = max ( radius, ( dxmax + dymin + dzmax ) );

  003e3	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _dxmax$14[ebp]
  003e8	f2 0f 58 45 e0	 addsd	 xmm0, QWORD PTR _dymin$13[ebp]
  003ed	f2 0f 58 45 c8	 addsd	 xmm0, QWORD PTR _dzmax$10[ebp]
  003f2	f2 0f 11 85 68
	ff ff ff	 movsd	 QWORD PTR $T6[ebp], xmm0
  003fa	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00400	50		 push	 eax
  00401	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  00404	51		 push	 ecx
  00405	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  0040a	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0040e	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 446  : 		radius = max ( radius, ( dxmax + dymin + dzmin ) );

  00413	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _dxmax$14[ebp]
  00418	f2 0f 58 45 e0	 addsd	 xmm0, QWORD PTR _dymin$13[ebp]
  0041d	f2 0f 58 45 d0	 addsd	 xmm0, QWORD PTR _dzmin$11[ebp]
  00422	f2 0f 11 85 60
	ff ff ff	 movsd	 QWORD PTR $T5[ebp], xmm0
  0042a	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00430	50		 push	 eax
  00431	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  00434	51		 push	 ecx
  00435	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  0043a	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0043e	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 447  : 		radius = max ( radius, ( dxmin + dymax + dzmax ) );

  00443	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _dxmin$15[ebp]
  00448	f2 0f 58 45 d8	 addsd	 xmm0, QWORD PTR _dymax$12[ebp]
  0044d	f2 0f 58 45 c8	 addsd	 xmm0, QWORD PTR _dzmax$10[ebp]
  00452	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR $T4[ebp], xmm0
  0045a	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00460	50		 push	 eax
  00461	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  00464	51		 push	 ecx
  00465	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  0046a	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0046e	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 448  : 		radius = max ( radius, ( dxmin + dymax + dzmin ) );

  00473	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _dxmin$15[ebp]
  00478	f2 0f 58 45 d8	 addsd	 xmm0, QWORD PTR _dymax$12[ebp]
  0047d	f2 0f 58 45 d0	 addsd	 xmm0, QWORD PTR _dzmin$11[ebp]
  00482	f2 0f 11 85 50
	ff ff ff	 movsd	 QWORD PTR $T3[ebp], xmm0
  0048a	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00490	50		 push	 eax
  00491	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  0049a	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0049e	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 449  : 		radius = max ( radius, ( dxmin + dymin + dzmax ) );

  004a3	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _dxmin$15[ebp]
  004a8	f2 0f 58 45 e0	 addsd	 xmm0, QWORD PTR _dymin$13[ebp]
  004ad	f2 0f 58 45 c8	 addsd	 xmm0, QWORD PTR _dzmax$10[ebp]
  004b2	f2 0f 11 85 48
	ff ff ff	 movsd	 QWORD PTR $T2[ebp], xmm0
  004ba	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  004c0	50		 push	 eax
  004c1	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  004c4	51		 push	 ecx
  004c5	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  004ca	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  004ce	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 450  : 		radius = max ( radius, ( dxmin + dymin + dzmin ) );

  004d3	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _dxmin$15[ebp]
  004d8	f2 0f 58 45 e0	 addsd	 xmm0, QWORD PTR _dymin$13[ebp]
  004dd	f2 0f 58 45 d0	 addsd	 xmm0, QWORD PTR _dzmin$11[ebp]
  004e2	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR $T1[ebp], xmm0
  004ea	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  004f0	50		 push	 eax
  004f1	8d 4d c0	 lea	 ecx, DWORD PTR _radius$9[ebp]
  004f4	51		 push	 ecx
  004f5	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  004fa	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  004fe	f2 0f 11 45 c0	 movsd	 QWORD PTR _radius$9[ebp], xmm0

; 451  : 
; 452  : 		radius = sqrt ( radius );

  00503	83 ec 08	 sub	 esp, 8
  00506	f2 0f 10 45 c0	 movsd	 xmm0, QWORD PTR _radius$9[ebp]
  0050b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00510	e8 00 00 00 00	 call	 _sqrt
  00515	83 c4 08	 add	 esp, 8
  00518	dd 5d c0	 fstp	 QWORD PTR _radius$9[ebp]

; 453  : 
; 454  : 		objects_3d_scene_database[scene_index].radius = radius;

  0051b	f2 0f 5a 45 c0	 cvtsd2ss xmm0, QWORD PTR _radius$9[ebp]
  00520	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00527	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0052d	f3 0f 11 44 01
	74		 movss	 DWORD PTR [ecx+eax+116], xmm0

; 455  : 	}
; 456  : }

  00533	5f		 pop	 edi
  00534	5e		 pop	 esi
  00535	5b		 pop	 ebx
  00536	8b e5		 mov	 esp, ebp
  00538	5d		 pop	 ebp
  00539	c2 04 00	 ret	 4
?initialise_scene_bounding_sub_objects@@YGXH@Z ENDP	; initialise_scene_bounding_sub_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?initialise_scene_visible_sub_objects@@YGXH@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_scene_index$ = 8					; size = 4
?initialise_scene_visible_sub_objects@@YGXH@Z PROC	; initialise_scene_visible_sub_objects, COMDAT

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 
; 301  : 	int
; 302  : 		count;
; 303  : 
; 304  : 	for ( count = 0; count < objects_3d_scene_database[scene_index].number_of_sub_objects; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  0001b	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00028	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0002b	3b 94 01 b0 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+176]
  00032	7d 20		 jge	 SHORT $LN1@initialise

; 305  : 	{
; 306  : 
; 307  : 		recurse_set_scene_sub_object_visibility ( &objects_3d_scene_database[scene_index].sub_objects[count] );

  00034	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  0003b	6b 4d fc 38	 imul	 ecx, DWORD PTR _count$[ebp], 56
  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00045	03 8c 02 d8 00
	00 00		 add	 ecx, DWORD PTR [edx+eax+216]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ?recurse_set_scene_sub_object_visibility@@YGHPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; recurse_set_scene_sub_object_visibility

; 308  : 	}

  00052	eb be		 jmp	 SHORT $LN2@initialise
$LN1@initialise:

; 309  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?initialise_scene_visible_sub_objects@@YGXH@Z ENDP	; initialise_scene_visible_sub_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsubobj.c
;	COMDAT ?initialise_scene_quick_sub_object_search@@YGXH@Z
_TEXT	SEGMENT
_sub_object$1 = -36					; size = 4
_offset$2 = -32						; size = 4
_table_index$3 = -28					; size = 4
_sub_object_entry_ptr$4 = -24				; size = 4
_sub_object_table_entries$5 = -20			; size = 4
_number_of_unique_indices$ = -16			; size = 4
_total_sub_object_indices$ = -12			; size = 4
_count$ = -8						; size = 4
_index$ = -4						; size = 4
_scene_index$ = 8					; size = 4
?initialise_scene_quick_sub_object_search@@YGXH@Z PROC	; initialise_scene_quick_sub_object_search, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 128  : 
; 129  : 	object_3d_sub_object_index_numbers
; 130  : 		index;
; 131  : 
; 132  : 	int
; 133  : 		count,
; 134  : 		total_sub_object_indices,
; 135  : 		number_of_unique_indices;
; 136  : 
; 137  : 	//
; 138  : 	// Set the sub object index array to 0
; 139  : 	//
; 140  : 
; 141  : 	for ( index = OBJECT_3D_INVALID_SUB_OBJECT_INDEX; index < OBJECT_3D_SUB_OBJECT_LAST; index++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax
$LN4@initialise:
  0001b	81 7d fc cb 01
	00 00		 cmp	 DWORD PTR _index$[ebp], 459 ; 000001cbH
  00022	7d 10		 jge	 SHORT $LN3@initialise

; 142  : 	{
; 143  : 
; 144  : 		sub_object_index_count[index] = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  00027	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?sub_object_index_count@@3PAHA[eax*4], 0

; 145  : 	}

  00032	eb de		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 146  : 
; 147  : 	//
; 148  : 	// Go through all the objects in the scene counting the sub object indices
; 149  : 	//
; 150  : 
; 151  : 	for ( count = 0; count < objects_3d_scene_database[scene_index].number_of_sub_object_indices; count++ )

  00034	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0003b	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00040	83 c0 01	 add	 eax, 1
  00043	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN7@initialise:
  00046	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00053	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00056	3b 94 01 b4 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+180]
  0005d	7d 49		 jge	 SHORT $LN6@initialise

; 152  : 	{
; 153  : 
; 154  : 		sub_object_index_count[ objects_3d_scene_database[scene_index].scene_sub_object_indices_array[count].sub_object_index ]++;

  0005f	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0006c	8b 94 01 cc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+204]
  00073	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00076	0f b7 0c 82	 movzx	 ecx, WORD PTR [edx+eax*4]
  0007a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?sub_object_index_count@@3PAHA[ecx*4]
  00081	83 c2 01	 add	 edx, 1
  00084	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00091	8b 84 01 cc 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax+204]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0009b	0f b7 04 88	 movzx	 eax, WORD PTR [eax+ecx*4]
  0009f	89 14 85 00 00
	00 00		 mov	 DWORD PTR ?sub_object_index_count@@3PAHA[eax*4], edx

; 155  : 	}

  000a6	eb 95		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 156  : 
; 157  : 	//
; 158  : 	// Recurse down through any sub objects
; 159  : 	//
; 160  : 
; 161  : 	for ( count = 0; count < objects_3d_scene_database[scene_index].number_of_sub_objects; count++ )

  000a8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000af	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  000b1	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN10@initialise:
  000ba	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  000c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  000c7	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  000ca	3b 94 01 b0 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+176]
  000d1	7d 20		 jge	 SHORT $LN9@initialise

; 162  : 	{
; 163  : 
; 164  : 		count_named_sub_objects ( &objects_3d_scene_database[scene_index].sub_objects[count] );

  000d3	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  000da	6b 4d f8 38	 imul	 ecx, DWORD PTR _count$[ebp], 56
  000de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  000e4	03 8c 02 d8 00
	00 00		 add	 ecx, DWORD PTR [edx+eax+216]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 ?count_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; count_named_sub_objects

; 165  : 	}

  000f1	eb be		 jmp	 SHORT $LN8@initialise
$LN9@initialise:

; 166  : 
; 167  : 	//
; 168  : 	// Count up the total number of named sub objects
; 169  : 	//
; 170  : 
; 171  : 	total_sub_object_indices = 0;

  000f3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _total_sub_object_indices$[ebp], 0

; 172  : 
; 173  : 	number_of_unique_indices = 0;

  000fa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _number_of_unique_indices$[ebp], 0

; 174  : 
; 175  : 	for ( index = OBJECT_3D_INVALID_SUB_OBJECT_INDEX; index < OBJECT_3D_SUB_OBJECT_LAST; index++ )

  00101	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  00108	eb 09		 jmp	 SHORT $LN13@initialise
$LN11@initialise:
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0010d	83 c0 01	 add	 eax, 1
  00110	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax
$LN13@initialise:
  00113	81 7d fc cb 01
	00 00		 cmp	 DWORD PTR _index$[ebp], 459 ; 000001cbH
  0011a	7d 28		 jge	 SHORT $LN12@initialise

; 176  : 	{
; 177  : 
; 178  : 		total_sub_object_indices += sub_object_index_count[index];

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR _total_sub_object_indices$[ebp]
  00122	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR ?sub_object_index_count@@3PAHA[eax*4]
  00129	89 4d f4	 mov	 DWORD PTR _total_sub_object_indices$[ebp], ecx

; 179  : 
; 180  : 		if ( sub_object_index_count[index] )

  0012c	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0012f	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?sub_object_index_count@@3PAHA[eax*4], 0
  00137	74 09		 je	 SHORT $LN23@initialise

; 181  : 		{
; 182  : 
; 183  : 			number_of_unique_indices++;

  00139	8b 45 f0	 mov	 eax, DWORD PTR _number_of_unique_indices$[ebp]
  0013c	83 c0 01	 add	 eax, 1
  0013f	89 45 f0	 mov	 DWORD PTR _number_of_unique_indices$[ebp], eax
$LN23@initialise:

; 184  : 		}
; 185  : 	}

  00142	eb c6		 jmp	 SHORT $LN11@initialise
$LN12@initialise:

; 186  : 
; 187  : 	//
; 188  : 	// We should already have the total number, so check here
; 189  : 	//
; 190  : 
; 191  : 	// If this asserts make sure you have recompiled this file with the latest 3dmodels.h file
; 192  : 	ASSERT ( total_sub_object_indices == objects_3d_scene_database[scene_index].total_number_of_sub_object_indices );

  00144	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00151	8b 55 f4	 mov	 edx, DWORD PTR _total_sub_object_indices$[ebp]
  00154	3b 94 01 c0 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+192]
  0015b	74 18		 je	 SHORT $LN24@initialise
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_scene_quick_sub_object_search@@YGXH@Z@4JA
  00162	83 c0 41	 add	 eax, 65			; 00000041H
  00165	50		 push	 eax
  00166	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LGGDPFGC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NMJLGFCH@total_sub_object_indices?5?$DN?$DN?5obj@
  00170	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN24@initialise:

; 193  : 
; 194  : 	if ( number_of_unique_indices )

  00175	83 7d f0 00	 cmp	 DWORD PTR _number_of_unique_indices$[ebp], 0
  00179	0f 84 dd 01 00
	00		 je	 $LN25@initialise

; 195  : 	{
; 196  : 
; 197  : 		object_3d_database_entry
; 198  : 			**sub_object_table_entries,
; 199  : 			**sub_object_entry_ptr;
; 200  : 
; 201  : 		int
; 202  : 			table_index;
; 203  : 
; 204  : 		number_of_sub_object_table_entries = number_of_unique_indices;

  0017f	8b 45 f0	 mov	 eax, DWORD PTR _number_of_unique_indices$[ebp]
  00182	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_sub_object_table_entries@@3HA, eax

; 205  : 
; 206  : 		//
; 207  : 		// Allocate memory for the table
; 208  : 		//
; 209  : 
; 210  : 		current_sub_object_table = ( struct OBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY * ) safe_malloc ( sizeof ( struct OBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY ) * number_of_unique_indices );

  00187	6b 45 f0 0c	 imul	 eax, DWORD PTR _number_of_unique_indices$[ebp], 12
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00191	a3 00 00 00 00	 mov	 DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A, eax

; 211  : 
; 212  : 		ASSERT ( current_sub_object_table );

  00196	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A, 0
  0019d	75 18		 jne	 SHORT $LN27@initialise
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_scene_quick_sub_object_search@@YGXH@Z@4JA
  001a4	83 c0 55	 add	 eax, 85			; 00000055H
  001a7	50		 push	 eax
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LGGDPFGC@c?3?2users?2nhv90?2projects?2eech?2mo@
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GHKJKEDC@current_sub_object_table@
  001b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN27@initialise:

; 213  : 
; 214  : 		//
; 215  : 		// Record the data in the scene
; 216  : 		//
; 217  : 
; 218  : 		objects_3d_scene_database[scene_index].sub_object_indices_table = current_sub_object_table;

  001b7	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  001c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  001ca	89 54 01 64	 mov	 DWORD PTR [ecx+eax+100], edx

; 219  : 
; 220  : 		objects_3d_scene_database[scene_index].number_of_sub_object_table_entries = number_of_unique_indices;

  001ce	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  001d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  001db	8b 55 f0	 mov	 edx, DWORD PTR _number_of_unique_indices$[ebp]
  001de	89 94 01 b8 00
	00 00		 mov	 DWORD PTR [ecx+eax+184], edx

; 221  : 
; 222  : 		//
; 223  : 		// Allocate memory for the entries in the table
; 224  : 		//
; 225  : 
; 226  : 		sub_object_table_entries = ( struct OBJECT_3D_DATABASE_ENTRY * * ) safe_malloc ( sizeof ( struct OBJECT_3D_DATABASE_ENTRY * ) * total_sub_object_indices );

  001e5	8b 45 f4	 mov	 eax, DWORD PTR _total_sub_object_indices$[ebp]
  001e8	c1 e0 02	 shl	 eax, 2
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  001f1	89 45 ec	 mov	 DWORD PTR _sub_object_table_entries$5[ebp], eax

; 227  : 
; 228  : 		//
; 229  : 		// Go through initialising the table
; 230  : 		//
; 231  : 
; 232  : 		sub_object_entry_ptr = sub_object_table_entries;

  001f4	8b 45 ec	 mov	 eax, DWORD PTR _sub_object_table_entries$5[ebp]
  001f7	89 45 e8	 mov	 DWORD PTR _sub_object_entry_ptr$4[ebp], eax

; 233  : 
; 234  : 		table_index = 0;

  001fa	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _table_index$3[ebp], 0

; 235  : 
; 236  : 		for ( index = OBJECT_3D_INVALID_SUB_OBJECT_INDEX; index < OBJECT_3D_SUB_OBJECT_LAST; index++ )

  00201	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  00208	eb 09		 jmp	 SHORT $LN16@initialise
$LN14@initialise:
  0020a	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0020d	83 c0 01	 add	 eax, 1
  00210	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax
$LN16@initialise:
  00213	81 7d fc cb 01
	00 00		 cmp	 DWORD PTR _index$[ebp], 459 ; 000001cbH
  0021a	7d 5e		 jge	 SHORT $LN15@initialise

; 237  : 		{
; 238  : 
; 239  : 			if ( sub_object_index_count[index] != 0 )

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0021f	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?sub_object_index_count@@3PAHA[eax*4], 0
  00227	74 4f		 je	 SHORT $LN28@initialise

; 240  : 			{
; 241  : 
; 242  : 				current_sub_object_table[table_index].sub_object_index = index;

  00229	6b 45 e4 0c	 imul	 eax, DWORD PTR _table_index$3[ebp], 12
  0022d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  00233	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  00236	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 243  : 
; 244  : 				current_sub_object_table[table_index].number_of_sub_objects = 0;

  00239	6b 45 e4 0c	 imul	 eax, DWORD PTR _table_index$3[ebp], 12
  0023d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  00243	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 245  : 
; 246  : 				current_sub_object_table[table_index].sub_objects = sub_object_entry_ptr;

  0024b	6b 45 e4 0c	 imul	 eax, DWORD PTR _table_index$3[ebp], 12
  0024f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_sub_object_table@@3PAUOBJECT_3D_SCENE_SUB_OBJECT_TABLE_ENTRY@@A
  00255	8b 55 e8	 mov	 edx, DWORD PTR _sub_object_entry_ptr$4[ebp]
  00258	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx

; 247  : 
; 248  : 				sub_object_entry_ptr += sub_object_index_count[index];

  0025c	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  0025f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?sub_object_index_count@@3PAHA[eax*4]
  00266	8b 55 e8	 mov	 edx, DWORD PTR _sub_object_entry_ptr$4[ebp]
  00269	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0026c	89 45 e8	 mov	 DWORD PTR _sub_object_entry_ptr$4[ebp], eax

; 249  : 
; 250  : 				table_index++;

  0026f	8b 45 e4	 mov	 eax, DWORD PTR _table_index$3[ebp]
  00272	83 c0 01	 add	 eax, 1
  00275	89 45 e4	 mov	 DWORD PTR _table_index$3[ebp], eax
$LN28@initialise:

; 251  : 			}
; 252  : 		}

  00278	eb 90		 jmp	 SHORT $LN14@initialise
$LN15@initialise:

; 253  : 
; 254  : 		//
; 255  : 		// Now go through populating the table with the first level named sub objects
; 256  : 		//
; 257  : 
; 258  : 		for ( count = 0; count < objects_3d_scene_database[scene_index].number_of_sub_object_indices; count++ )

  0027a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00281	eb 09		 jmp	 SHORT $LN19@initialise
$LN17@initialise:
  00283	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00286	83 c0 01	 add	 eax, 1
  00289	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN19@initialise:
  0028c	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00293	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00299	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  0029c	3b 94 01 b4 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+180]
  002a3	7d 6a		 jge	 SHORT $LN18@initialise

; 259  : 		{
; 260  : 
; 261  : 			int
; 262  : 				offset;
; 263  : 
; 264  : 			object_3d_database_entry
; 265  : 				*sub_object;
; 266  : 
; 267  : 			index = objects_3d_scene_database[scene_index].scene_sub_object_indices_array[count].sub_object_index;

  002a5	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  002ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  002b2	8b 94 01 cc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+204]
  002b9	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002bc	0f b7 0c 82	 movzx	 ecx, WORD PTR [edx+eax*4]
  002c0	89 4d fc	 mov	 DWORD PTR _index$[ebp], ecx

; 268  : 
; 269  : 			offset = objects_3d_scene_database[scene_index].scene_sub_object_indices_array[count].object_index;

  002c3	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  002ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  002d0	8b 94 01 cc 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+204]
  002d7	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  002da	0f b7 4c 82 02	 movzx	 ecx, WORD PTR [edx+eax*4+2]
  002df	89 4d e0	 mov	 DWORD PTR _offset$2[ebp], ecx

; 270  : 
; 271  : 			sub_object = &objects_3d_scene_database[scene_index].sub_objects[offset];

  002e2	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  002e9	6b 4d e0 38	 imul	 ecx, DWORD PTR _offset$2[ebp], 56
  002ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  002f3	03 8c 02 d8 00
	00 00		 add	 ecx, DWORD PTR [edx+eax+216]
  002fa	89 4d dc	 mov	 DWORD PTR _sub_object$1[ebp], ecx

; 272  : 
; 273  : 			add_sub_object_index_to_table ( index, sub_object );

  002fd	8b 45 dc	 mov	 eax, DWORD PTR _sub_object$1[ebp]
  00300	50		 push	 eax
  00301	8b 4d fc	 mov	 ecx, DWORD PTR _index$[ebp]
  00304	51		 push	 ecx
  00305	e8 00 00 00 00	 call	 ?add_sub_object_index_to_table@@YGXHPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; add_sub_object_index_to_table

; 274  : 		}

  0030a	e9 74 ff ff ff	 jmp	 $LN17@initialise
$LN18@initialise:

; 275  : 
; 276  : 		//
; 277  : 		// Now recurse the sub objects doing the same thing
; 278  : 		//
; 279  : 
; 280  : 		for ( count = 0; count < objects_3d_scene_database[scene_index].number_of_sub_objects; count++ )

  0030f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00316	eb 09		 jmp	 SHORT $LN22@initialise
$LN20@initialise:
  00318	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0031b	83 c0 01	 add	 eax, 1
  0031e	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN22@initialise:
  00321	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00328	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0032e	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00331	3b 94 01 b0 00
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+176]
  00338	7d 20		 jge	 SHORT $LN21@initialise

; 281  : 		{
; 282  : 
; 283  : 			populate_table_with_named_sub_objects ( &objects_3d_scene_database[scene_index].sub_objects[count] );

  0033a	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00341	6b 4d f8 38	 imul	 ecx, DWORD PTR _count$[ebp], 56
  00345	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0034b	03 8c 02 d8 00
	00 00		 add	 ecx, DWORD PTR [edx+eax+216]
  00352	51		 push	 ecx
  00353	e8 00 00 00 00	 call	 ?populate_table_with_named_sub_objects@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@@Z ; populate_table_with_named_sub_objects

; 284  : 		}

  00358	eb be		 jmp	 SHORT $LN20@initialise
$LN21@initialise:

; 285  : 	}
; 286  : 	else

  0035a	eb 2d		 jmp	 SHORT $LN1@initialise
$LN25@initialise:

; 287  : 	{
; 288  : 		objects_3d_scene_database[scene_index].sub_object_indices_table = NULL;

  0035c	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00369	c7 44 01 64 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+100], 0

; 289  : 
; 290  : 		objects_3d_scene_database[scene_index].number_of_sub_object_table_entries = 0;

  00371	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene_index$[ebp], 224
  00378	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0037e	c7 84 01 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+184], 0
$LN1@initialise:

; 291  : 	}
; 292  : }

  00389	5f		 pop	 edi
  0038a	5e		 pop	 esi
  0038b	5b		 pop	 ebx
  0038c	8b e5		 mov	 esp, ebp
  0038e	5d		 pop	 ebp
  0038f	c2 04 00	 ret	 4
?initialise_scene_quick_sub_object_search@@YGXH@Z ENDP	; initialise_scene_quick_sub_object_search
_TEXT	ENDS
END
