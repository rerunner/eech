; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dsprite.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?draw_3d_sprite@@YGXPAUOBJECT_3D_SPRITE@@@Z	; draw_3d_sprite
PUBLIC	__real@3f800000
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe2e147ae147ae1
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?generate_3d_outcode@@YGHMM@Z:PROC		; generate_3d_outcode
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?number_of_sprites_in_3d_scene@@3HA:DWORD	; number_of_sprites_in_3d_scene
EXTRN	?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A:BYTE	; ambient_3d_light
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe2e147ae147ae1
CONST	SEGMENT
__real@3fe2e147ae147ae1 DQ 03fe2e147ae147ae1r	; 0.59
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dsprite.c
;	COMDAT ?draw_3d_sprite@@YGXPAUOBJECT_3D_SPRITE@@@Z
_TEXT	SEGMENT
_colour$1 = -380					; size = 4
_ib$2 = -376						; size = 4
_ig$3 = -372						; size = 4
_ir$4 = -368						; size = 4
_intensity$5 = -364					; size = 4
_b$6 = -360						; size = 4
_g$7 = -356						; size = 4
_r$8 = -352						; size = 4
_specular_colour$9 = -348				; size = 4
_outcode$ = -344					; size = 4
_point4$ = -340						; size = 8
_point3$ = -332						; size = 8
_point2$ = -324						; size = 8
_point1$ = -316						; size = 8
_sprite_quad$ = -308					; size = 256
_poly$ = -52						; size = 4
_height$ = -48						; size = 4
_width$ = -44						; size = 4
_cos_roll$ = -40					; size = 4
_sin_roll$ = -36					; size = 4
_roll$ = -32						; size = 4
_radius$ = -28						; size = 4
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_q$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_sprite$ = 8						; size = 4
?draw_3d_sprite@@YGXPAUOBJECT_3D_SPRITE@@@Z PROC	; draw_3d_sprite, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 01 00
	00		 sub	 esp, 444		; 000001bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 75   : 
; 76   : 	float
; 77   : 		x,
; 78   : 		y,
; 79   : 		z,
; 80   : 		q,
; 81   : 		i,
; 82   : 		j,
; 83   : 		radius,
; 84   : 		roll,
; 85   : 		sin_roll,
; 86   : 		cos_roll,
; 87   : 		width,
; 88   : 		height;
; 89   : 
; 90   : 	vertex
; 91   : 		*poly,
; 92   : 		sprite_quad[4];
; 93   : 
; 94   : 	vec2d
; 95   : 		point1,
; 96   : 		point2,
; 97   : 		point3,
; 98   : 		point4;
; 99   : 
; 100  : 	int
; 101  : 		outcode;
; 102  : 
; 103  : 	number_of_sprites_in_3d_scene++;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_sprites_in_3d_scene@@3HA ; number_of_sprites_in_3d_scene
  00011	83 c0 01	 add	 eax, 1
  00014	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_sprites_in_3d_scene@@3HA, eax ; number_of_sprites_in_3d_scene

; 104  : 
; 105  : 	x = sprite->position.x;

  00019	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  0001c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00020	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 106  : 	y = sprite->position.y;

  00025	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  00028	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0002d	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 107  : 	z = sprite->position.z;

  00032	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  00035	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0003a	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 108  : 
; 109  : 	radius = sprite->radius;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  00042	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00047	f3 0f 11 45 e4	 movss	 DWORD PTR _radius$[ebp], xmm0

; 110  : 
; 111  : 	roll = sprite->roll;

  0004c	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  0004f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00054	f3 0f 11 45 e0	 movss	 DWORD PTR _roll$[ebp], xmm0

; 112  : 	sin_roll = sin ( roll );

  00059	51		 push	 ecx
  0005a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00069	d9 5d dc	 fstp	 DWORD PTR _sin_roll$[ebp]

; 113  : 	cos_roll = cos ( roll );

  0006c	51		 push	 ecx
  0006d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0007c	d9 5d d8	 fstp	 DWORD PTR _cos_roll$[ebp]

; 114  : 
; 115  : 	point1.x = ( -0.5 * ( +cos_roll ) ) + ( +0.5 * ( +sin_roll ) );

  0007f	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _cos_roll$[ebp]
  00084	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0008c	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _sin_roll$[ebp]
  00091	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00099	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0009d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a1	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _point1$[ebp], xmm0

; 116  : 	point1.y = ( -0.5 * ( -sin_roll ) ) + ( +0.5 * ( +cos_roll ) );

  000a9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _sin_roll$[ebp]
  000ae	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000b5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  000c1	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _cos_roll$[ebp]
  000c6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000ce	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d6	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _point1$[ebp+4], xmm0

; 117  : 
; 118  : 	point2.x = ( -0.5 * ( +cos_roll ) ) + ( -0.5 * ( +sin_roll ) );

  000de	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _cos_roll$[ebp]
  000e3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  000eb	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _sin_roll$[ebp]
  000f0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bfe0000000000000
  000f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00100	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _point2$[ebp], xmm0

; 119  : 	point2.y = ( -0.5 * ( -sin_roll ) ) + ( -0.5 * ( +cos_roll ) );

  00108	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _sin_roll$[ebp]
  0010d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00114	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00118	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00120	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _cos_roll$[ebp]
  00125	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bfe0000000000000
  0012d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00131	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00135	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _point2$[ebp+4], xmm0

; 120  : 
; 121  : 	point3.x = ( +0.5 * ( +cos_roll ) ) + ( -0.5 * ( +sin_roll ) );

  0013d	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _cos_roll$[ebp]
  00142	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0014a	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _sin_roll$[ebp]
  0014f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bfe0000000000000
  00157	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0015b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015f	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _point3$[ebp], xmm0

; 122  : 	point3.y = ( +0.5 * ( -sin_roll ) ) + ( -0.5 * ( +cos_roll ) );

  00167	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _sin_roll$[ebp]
  0016c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00173	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00177	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0017f	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _cos_roll$[ebp]
  00184	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bfe0000000000000
  0018c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00190	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00194	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _point3$[ebp+4], xmm0

; 123  : 
; 124  : 	point4.x = ( +0.5 * ( +cos_roll ) ) + ( +0.5 * ( +sin_roll ) );

  0019c	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _cos_roll$[ebp]
  001a1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001a9	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _sin_roll$[ebp]
  001ae	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001b6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001be	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _point4$[ebp], xmm0

; 125  : 	point4.y = ( +0.5 * ( -sin_roll ) ) + ( +0.5 * ( +cos_roll ) );

  001c6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _sin_roll$[ebp]
  001cb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001d2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001d6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001de	f3 0f 5a 4d d8	 cvtss2sd xmm1, DWORD PTR _cos_roll$[ebp]
  001e3	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001eb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f3	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _point4$[ebp+4], xmm0

; 126  : 	
; 127  : 	q = 1.0 / z;

  001fb	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00200	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00208	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0020c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00210	f3 0f 11 45 f0	 movss	 DWORD PTR _q$[ebp], xmm0

; 128  : 
; 129  : 	i = ( active_3d_environment->screen_i_scale * x * q );

  00215	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0021a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0021e	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00223	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00228	f3 0f 11 45 ec	 movss	 DWORD PTR _i$[ebp], xmm0

; 130  : 	j = ( active_3d_environment->screen_j_scale * y * q );

  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00232	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00237	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _y$[ebp]
  0023c	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00241	f3 0f 11 45 e8	 movss	 DWORD PTR _j$[ebp], xmm0

; 131  : 	
; 132  : 	i = active_3d_environment->x_origin + i;

  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0024b	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00250	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _i$[ebp]
  00255	f3 0f 11 45 ec	 movss	 DWORD PTR _i$[ebp], xmm0

; 133  : 	j = active_3d_environment->y_origin - j;

  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0025f	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00264	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _j$[ebp]
  00269	f3 0f 11 45 e8	 movss	 DWORD PTR _j$[ebp], xmm0

; 134  : 	
; 135  : 	width = active_3d_environment->screen_i_scale * radius * q;

  0026e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00273	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00277	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0027c	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00281	f3 0f 11 45 d4	 movss	 DWORD PTR _width$[ebp], xmm0

; 136  : 	height = active_3d_environment->screen_j_scale * radius * q;

  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0028b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00290	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  00295	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _q$[ebp]
  0029a	f3 0f 11 45 d0	 movss	 DWORD PTR _height$[ebp], xmm0

; 137  : 
; 138  : 	sprite_quad[0].q = q;

  0029f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002a4	6b c8 00	 imul	 ecx, eax, 0
  002a7	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _q$[ebp]
  002ac	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+12], xmm0

; 139  : 	sprite_quad[0].i = i + ( point1.x * width );

  002b5	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _point1$[ebp]
  002bd	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _width$[ebp]
  002c2	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _i$[ebp]
  002c7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002cc	6b c8 00	 imul	 ecx, eax, 0
  002cf	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+16], xmm0

; 140  : 	sprite_quad[0].j = j + ( point1.y * height );

  002d8	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _point1$[ebp+4]
  002e0	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _height$[ebp]
  002e5	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _j$[ebp]
  002ea	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002ef	6b c8 00	 imul	 ecx, eax, 0
  002f2	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+20], xmm0

; 141  : 	sprite_quad[0].u = 0;

  002fb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00300	6b c8 00	 imul	 ecx, eax, 0
  00303	0f 57 c0	 xorps	 xmm0, xmm0
  00306	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+24], xmm0

; 142  : 	sprite_quad[0].v = 0;

  0030f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00314	6b c8 00	 imul	 ecx, eax, 0
  00317	0f 57 c0	 xorps	 xmm0, xmm0
  0031a	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+28], xmm0

; 143  : 	sprite_quad[0].outcode = generate_3d_outcode ( sprite_quad[0].i, sprite_quad[0].j );

  00323	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00328	6b c8 00	 imul	 ecx, eax, 0
  0032b	51		 push	 ecx
  0032c	f3 0f 10 84 0d
	e0 fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+ecx+20]
  00335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0033f	6b c2 00	 imul	 eax, edx, 0
  00342	51		 push	 ecx
  00343	f3 0f 10 84 05
	dc fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+eax+16]
  0034c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00351	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00356	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0035b	6b d1 00	 imul	 edx, ecx, 0
  0035e	88 84 15 f8 fe
	ff ff		 mov	 BYTE PTR _sprite_quad$[ebp+edx+44], al

; 144  : 	sprite_quad[0].next_vertex = &sprite_quad[1];

  00365	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0036a	c1 e0 00	 shl	 eax, 0
  0036d	8d 8c 05 cc fe
	ff ff		 lea	 ecx, DWORD PTR _sprite_quad$[ebp+eax]
  00374	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00379	6b c2 00	 imul	 eax, edx, 0
  0037c	89 8c 05 f4 fe
	ff ff		 mov	 DWORD PTR _sprite_quad$[ebp+eax+40], ecx

; 145  : 
; 146  : 	sprite_quad[1].q = q;

  00383	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00388	c1 e0 00	 shl	 eax, 0
  0038b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _q$[ebp]
  00390	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+12], xmm0

; 147  : 	sprite_quad[1].i = i + ( point2.x * width );

  00399	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _point2$[ebp]
  003a1	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _width$[ebp]
  003a6	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _i$[ebp]
  003ab	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b0	c1 e0 00	 shl	 eax, 0
  003b3	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+16], xmm0

; 148  : 	sprite_quad[1].j = j + ( point2.y * height );

  003bc	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _point2$[ebp+4]
  003c4	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _height$[ebp]
  003c9	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _j$[ebp]
  003ce	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003d3	c1 e0 00	 shl	 eax, 0
  003d6	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+20], xmm0

; 149  : 	sprite_quad[1].u = 1;

  003df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003e4	c1 e0 00	 shl	 eax, 0
  003e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ef	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+24], xmm0

; 150  : 	sprite_quad[1].v = 0;

  003f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003fd	c1 e0 00	 shl	 eax, 0
  00400	0f 57 c0	 xorps	 xmm0, xmm0
  00403	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+28], xmm0

; 151  : 	sprite_quad[1].outcode = generate_3d_outcode ( sprite_quad[1].i, sprite_quad[1].j );

  0040c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00411	c1 e0 00	 shl	 eax, 0
  00414	51		 push	 ecx
  00415	f3 0f 10 84 05
	e0 fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+eax+20]
  0041e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00423	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00428	c1 e1 00	 shl	 ecx, 0
  0042b	51		 push	 ecx
  0042c	f3 0f 10 84 0d
	dc fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+ecx+16]
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  0043f	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00444	c1 e2 00	 shl	 edx, 0
  00447	88 84 15 f8 fe
	ff ff		 mov	 BYTE PTR _sprite_quad$[ebp+edx+44], al

; 152  : 	sprite_quad[1].next_vertex = &sprite_quad[2];

  0044e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00453	d1 e0		 shl	 eax, 1
  00455	8d 8c 05 cc fe
	ff ff		 lea	 ecx, DWORD PTR _sprite_quad$[ebp+eax]
  0045c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00461	c1 e2 00	 shl	 edx, 0
  00464	89 8c 15 f4 fe
	ff ff		 mov	 DWORD PTR _sprite_quad$[ebp+edx+40], ecx

; 153  : 
; 154  : 	sprite_quad[2].q = q;

  0046b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00470	d1 e0		 shl	 eax, 1
  00472	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _q$[ebp]
  00477	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+12], xmm0

; 155  : 	sprite_quad[2].i = i + ( point3.x * width );

  00480	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _point3$[ebp]
  00488	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _width$[ebp]
  0048d	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _i$[ebp]
  00492	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00497	d1 e0		 shl	 eax, 1
  00499	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+16], xmm0

; 156  : 	sprite_quad[2].j = j + ( point3.y * height );

  004a2	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _point3$[ebp+4]
  004aa	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _height$[ebp]
  004af	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _j$[ebp]
  004b4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004b9	d1 e0		 shl	 eax, 1
  004bb	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+20], xmm0

; 157  : 	sprite_quad[2].u = 1;

  004c4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004c9	d1 e0		 shl	 eax, 1
  004cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004d3	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+24], xmm0

; 158  : 	sprite_quad[2].v = 1;

  004dc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004e1	d1 e0		 shl	 eax, 1
  004e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004eb	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+eax+28], xmm0

; 159  : 	sprite_quad[2].outcode = generate_3d_outcode ( sprite_quad[2].i, sprite_quad[2].j );

  004f4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004f9	d1 e0		 shl	 eax, 1
  004fb	51		 push	 ecx
  004fc	f3 0f 10 84 05
	e0 fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+eax+20]
  00505	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0050f	d1 e1		 shl	 ecx, 1
  00511	51		 push	 ecx
  00512	f3 0f 10 84 0d
	dc fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+ecx+16]
  0051b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00520	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00525	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0052a	d1 e2		 shl	 edx, 1
  0052c	88 84 15 f8 fe
	ff ff		 mov	 BYTE PTR _sprite_quad$[ebp+edx+44], al

; 160  : 	sprite_quad[2].next_vertex = &sprite_quad[3];

  00533	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00538	6b c8 03	 imul	 ecx, eax, 3
  0053b	8d 94 0d cc fe
	ff ff		 lea	 edx, DWORD PTR _sprite_quad$[ebp+ecx]
  00542	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00547	d1 e0		 shl	 eax, 1
  00549	89 94 05 f4 fe
	ff ff		 mov	 DWORD PTR _sprite_quad$[ebp+eax+40], edx

; 161  : 
; 162  : 	sprite_quad[3].q = q;

  00550	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00555	6b c8 03	 imul	 ecx, eax, 3
  00558	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _q$[ebp]
  0055d	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+12], xmm0

; 163  : 	sprite_quad[3].i = i + ( point4.x * width );

  00566	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _point4$[ebp]
  0056e	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _width$[ebp]
  00573	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _i$[ebp]
  00578	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0057d	6b c8 03	 imul	 ecx, eax, 3
  00580	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+16], xmm0

; 164  : 	sprite_quad[3].j = j + ( point4.y * height );

  00589	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _point4$[ebp+4]
  00591	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _height$[ebp]
  00596	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _j$[ebp]
  0059b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005a0	6b c8 03	 imul	 ecx, eax, 3
  005a3	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+20], xmm0

; 165  : 	sprite_quad[3].u = 0;

  005ac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005b1	6b c8 03	 imul	 ecx, eax, 3
  005b4	0f 57 c0	 xorps	 xmm0, xmm0
  005b7	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+24], xmm0

; 166  : 	sprite_quad[3].v = 1;

  005c0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005c5	6b c8 03	 imul	 ecx, eax, 3
  005c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005d0	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _sprite_quad$[ebp+ecx+28], xmm0

; 167  : 	sprite_quad[3].outcode = generate_3d_outcode ( sprite_quad[3].i, sprite_quad[3].j );

  005d9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005de	6b c8 03	 imul	 ecx, eax, 3
  005e1	51		 push	 ecx
  005e2	f3 0f 10 84 0d
	e0 fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+ecx+20]
  005eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f0	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  005f5	6b c2 03	 imul	 eax, edx, 3
  005f8	51		 push	 ecx
  005f9	f3 0f 10 84 05
	dc fe ff ff	 movss	 xmm0, DWORD PTR _sprite_quad$[ebp+eax+16]
  00602	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00607	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  0060c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00611	6b d1 03	 imul	 edx, ecx, 3
  00614	88 84 15 f8 fe
	ff ff		 mov	 BYTE PTR _sprite_quad$[ebp+edx+44], al

; 168  : 	sprite_quad[3].next_vertex = NULL;

  0061b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00620	6b c8 03	 imul	 ecx, eax, 3
  00623	c7 84 0d f4 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _sprite_quad$[ebp+ecx+40], 0

; 169  : 
; 170  : 	outcode = sprite_quad[0].outcode;

  0062e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00633	6b c8 00	 imul	 ecx, eax, 0
  00636	0f b6 94 0d f8
	fe ff ff	 movzx	 edx, BYTE PTR _sprite_quad$[ebp+ecx+44]
  0063e	89 95 a8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], edx

; 171  : 	outcode |= sprite_quad[1].outcode;

  00644	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00649	c1 e0 00	 shl	 eax, 0
  0064c	0f b6 8c 05 f8
	fe ff ff	 movzx	 ecx, BYTE PTR _sprite_quad$[ebp+eax+44]
  00654	0b 8d a8 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  0065a	89 8d a8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 172  : 	outcode |= sprite_quad[2].outcode;

  00660	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00665	d1 e0		 shl	 eax, 1
  00667	0f b6 8c 05 f8
	fe ff ff	 movzx	 ecx, BYTE PTR _sprite_quad$[ebp+eax+44]
  0066f	0b 8d a8 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  00675	89 8d a8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 173  : 	outcode |= sprite_quad[3].outcode;

  0067b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00680	6b c8 03	 imul	 ecx, eax, 3
  00683	0f b6 94 0d f8
	fe ff ff	 movzx	 edx, BYTE PTR _sprite_quad$[ebp+ecx+44]
  0068b	0b 95 a8 fe ff
	ff		 or	 edx, DWORD PTR _outcode$[ebp]
  00691	89 95 a8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], edx

; 174  : 
; 175  : 	poly = sprite_quad;

  00697	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _sprite_quad$[ebp]
  0069d	89 45 cc	 mov	 DWORD PTR _poly$[ebp], eax

; 176  : 
; 177  : 	if ( outcode )

  006a0	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _outcode$[ebp], 0
  006a7	74 1d		 je	 SHORT $LN2@draw_3d_sp

; 178  : 	{
; 179  : 
; 180  : 		clip_3d_coord = 0;

  006a9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 181  : 
; 182  : 		poly = clip_3d_polygon ( poly, outcode );

  006b3	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode$[ebp]
  006b9	50		 push	 eax
  006ba	8b 4d cc	 mov	 ecx, DWORD PTR _poly$[ebp]
  006bd	51		 push	 ecx
  006be	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  006c3	89 45 cc	 mov	 DWORD PTR _poly$[ebp], eax
$LN2@draw_3d_sp:

; 183  : 	}
; 184  : 
; 185  : 	if ( poly )

  006c6	83 7d cc 00	 cmp	 DWORD PTR _poly$[ebp], 0
  006ca	0f 84 14 02 00
	00		 je	 $LN6@draw_3d_sp

; 186  : 	{
; 187  : 
; 188  : 		real_colour
; 189  : 			specular_colour;
; 190  : 
; 191  : 		specular_colour.colour = 0;

  006d0	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _specular_colour$9[ebp], 0

; 192  : 		specular_colour.alpha = 255;

  006da	c6 85 a7 fe ff
	ff ff		 mov	 BYTE PTR _specular_colour$9[ebp+3], 255 ; 000000ffH

; 193  : 
; 194  : 		set_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, D3DTFG_LINEAR );

  006e1	6a 02		 push	 2
  006e3	6a 10		 push	 16			; 00000010H
  006e5	6a 00		 push	 0
  006e7	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 195  : 		set_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, D3DTFN_LINEAR );

  006ec	6a 02		 push	 2
  006ee	6a 11		 push	 17			; 00000011H
  006f0	6a 00		 push	 0
  006f2	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 196  : 		set_d3d_texture_stage_state ( 0, D3DTSS_MIPFILTER, D3DTFP_POINT );

  006f7	6a 02		 push	 2
  006f9	6a 12		 push	 18			; 00000012H
  006fb	6a 00		 push	 0
  006fd	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 197  : 
; 198  : 		if (active_3d_environment->render_filter != RENDER_CLEAR )

  00702	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00707	83 b8 d0 02 00
	00 01		 cmp	 DWORD PTR [eax+720], 1
  0070e	0f 84 5b 01 00
	00		 je	 $LN4@draw_3d_sp

; 199  : 		{
; 200  : 
; 201  : 			float
; 202  : 				r,
; 203  : 				g,
; 204  : 				b,
; 205  : 				intensity;
; 206  : 
; 207  : 			int
; 208  : 				ir,
; 209  : 				ig,
; 210  : 				ib;
; 211  : 
; 212  : 			real_colour
; 213  : 				colour;
; 214  : 
; 215  : 			//
; 216  : 			// Colour the additive to the light colour
; 217  : 			//
; 218  : 
; 219  : 			colour.colour = sprite->colour;

  00714	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  00717	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0071a	89 8d 84 fe ff
	ff		 mov	 DWORD PTR _colour$1[ebp], ecx

; 220  : 
; 221  : 			r = colour.red;

  00720	0f b6 85 86 fe
	ff ff		 movzx	 eax, BYTE PTR _colour$1[ebp+2]
  00727	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0072b	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _r$8[ebp], xmm0

; 222  : 			g = colour.green;

  00733	0f b6 85 85 fe
	ff ff		 movzx	 eax, BYTE PTR _colour$1[ebp+1]
  0073a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0073e	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _g$7[ebp], xmm0

; 223  : 			b = colour.blue;

  00746	0f b6 85 84 fe
	ff ff		 movzx	 eax, BYTE PTR _colour$1[ebp]
  0074d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00751	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _b$6[ebp], xmm0

; 224  : 
; 225  : 			intensity = ( 0.3 * r ) + ( 0.59 * g ) + ( 0.11 * b );

  00759	f3 0f 5a 85 a0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _r$8[ebp]
  00761	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  00769	f3 0f 5a 8d 9c
	fe ff ff	 cvtss2sd xmm1, DWORD PTR _g$7[ebp]
  00771	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  00779	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0077d	f3 0f 5a 8d 98
	fe ff ff	 cvtss2sd xmm1, DWORD PTR _b$6[ebp]
  00785	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  0078d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00791	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00795	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _intensity$5[ebp], xmm0

; 226  : 
; 227  : 			r = intensity * ambient_3d_light.colour.red;

  0079d	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR _intensity$5[ebp]
  007a5	f3 0f 59 05 18
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  007ad	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _r$8[ebp], xmm0

; 228  : 			g = intensity * ambient_3d_light.colour.green;

  007b5	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR _intensity$5[ebp]
  007bd	f3 0f 59 05 1c
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  007c5	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _g$7[ebp], xmm0

; 229  : 			b = intensity * ambient_3d_light.colour.blue;

  007cd	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR _intensity$5[ebp]
  007d5	f3 0f 59 05 20
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  007dd	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _b$6[ebp], xmm0

; 230  : 
; 231  : 			convert_float_to_int ( r, &ir );

  007e5	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _ir$4[ebp]
  007eb	50		 push	 eax
  007ec	51		 push	 ecx
  007ed	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _r$8[ebp]
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 232  : 			convert_float_to_int ( g, &ig );

  007ff	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _ig$3[ebp]
  00805	50		 push	 eax
  00806	51		 push	 ecx
  00807	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _g$7[ebp]
  0080f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00814	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 233  : 			convert_float_to_int ( b, &ib );

  00819	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _ib$2[ebp]
  0081f	50		 push	 eax
  00820	51		 push	 ecx
  00821	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR _b$6[ebp]
  00829	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 234  : 
; 235  : 			colour.colour = sprite->colour;

  00833	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  00836	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00839	89 8d 84 fe ff
	ff		 mov	 DWORD PTR _colour$1[ebp], ecx

; 236  : 			colour.red = ir;

  0083f	8a 85 90 fe ff
	ff		 mov	 al, BYTE PTR _ir$4[ebp]
  00845	88 85 86 fe ff
	ff		 mov	 BYTE PTR _colour$1[ebp+2], al

; 237  : 			colour.green = ig;

  0084b	8a 85 8c fe ff
	ff		 mov	 al, BYTE PTR _ig$3[ebp]
  00851	88 85 85 fe ff
	ff		 mov	 BYTE PTR _colour$1[ebp+1], al

; 238  : 			colour.blue = ib;

  00857	8a 85 88 fe ff
	ff		 mov	 al, BYTE PTR _ib$2[ebp]
  0085d	88 85 84 fe ff
	ff		 mov	 BYTE PTR _colour$1[ebp], al

; 239  : 
; 240  : 			sprite->colour = colour.colour;

  00863	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  00866	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$1[ebp]
  0086c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$LN4@draw_3d_sp:

; 241  : 		}
; 242  : 
; 243  : 		if ( sprite->additive )

  0086f	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  00872	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00876	74 37		 je	 SHORT $LN5@draw_3d_sp

; 244  : 		{
; 245  : 
; 246  : 			set_d3d_int_state ( D3DRENDERSTATE_SRCBLEND, D3DBLEND_ONE );

  00878	6a 02		 push	 2
  0087a	6a 13		 push	 19			; 00000013H
  0087c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 247  : 			set_d3d_int_state ( D3DRENDERSTATE_DESTBLEND, D3DBLEND_ONE );

  00881	6a 02		 push	 2
  00883	6a 14		 push	 20			; 00000014H
  00885	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 248  : 
; 249  : 			set_d3d_flat_shaded_textured_renderstate ( sprite->texture );

  0088a	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  0088d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00890	51		 push	 ecx
  00891	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 250  : 
; 251  : 			draw_wbuffered_flat_shaded_textured_polygon ( poly, *( ( real_colour * ) &sprite->colour ), specular_colour );

  00896	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _specular_colour$9[ebp]
  0089c	50		 push	 eax
  0089d	8b 4d 08	 mov	 ecx, DWORD PTR _sprite$[ebp]
  008a0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  008a3	52		 push	 edx
  008a4	8b 45 cc	 mov	 eax, DWORD PTR _poly$[ebp]
  008a7	50		 push	 eax
  008a8	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 252  : 		}
; 253  : 		else

  008ad	eb 35		 jmp	 SHORT $LN6@draw_3d_sp
$LN5@draw_3d_sp:

; 254  : 		{
; 255  : 
; 256  : 
; 257  : 
; 258  : 			set_d3d_int_state ( D3DRENDERSTATE_SRCBLEND, D3DBLEND_SRCALPHA );

  008af	6a 05		 push	 5
  008b1	6a 13		 push	 19			; 00000013H
  008b3	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 259  : 			set_d3d_int_state ( D3DRENDERSTATE_DESTBLEND, D3DBLEND_INVSRCALPHA );

  008b8	6a 06		 push	 6
  008ba	6a 14		 push	 20			; 00000014H
  008bc	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 260  : 
; 261  : 			set_d3d_flat_shaded_textured_renderstate ( sprite->texture );

  008c1	8b 45 08	 mov	 eax, DWORD PTR _sprite$[ebp]
  008c4	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  008c7	51		 push	 ecx
  008c8	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 262  : 
; 263  : 			draw_wbuffered_flat_shaded_textured_polygon ( poly, *( ( real_colour * ) &sprite->colour ), specular_colour );

  008cd	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _specular_colour$9[ebp]
  008d3	50		 push	 eax
  008d4	8b 4d 08	 mov	 ecx, DWORD PTR _sprite$[ebp]
  008d7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  008da	52		 push	 edx
  008db	8b 45 cc	 mov	 eax, DWORD PTR _poly$[ebp]
  008de	50		 push	 eax
  008df	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon
$LN6@draw_3d_sp:

; 264  : 		}
; 265  : 	}
; 266  : }

  008e4	5f		 pop	 edi
  008e5	5e		 pop	 esi
  008e6	5b		 pop	 ebx
  008e7	8b e5		 mov	 esp, ebp
  008e9	5d		 pop	 ebp
  008ea	c2 04 00	 ret	 4
?draw_3d_sprite@@YGXPAUOBJECT_3D_SPRITE@@@Z ENDP	; draw_3d_sprite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
END
