; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z ; set_client_server_fixed_wing_afterburner_state
PUBLIC	?set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z ; set_local_fixed_wing_afterburner_state
PUBLIC	?animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z ; animate_fixed_wing_afterburners
PUBLIC	?update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z ; update_fixed_wing_afterburners
PUBLIC	?animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z	; animate_fixed_wing_airbrakes
PUBLIC	?update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z	; update_fixed_wing_airbrakes
PUBLIC	?animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z	; animate_fixed_wing_flaps
PUBLIC	?update_fixed_wing_flaps@@YGXPAUENTITY@@@Z	; update_fixed_wing_flaps
PUBLIC	?animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z ; animate_fixed_wing_propellors
PUBLIC	?initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z ; initialise_fixed_wing_propellors
PUBLIC	?damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z	; damage_fixed_wing_3d_object
PUBLIC	?set_fixed_wing_id_number@@YGXPAUENTITY@@@Z	; set_fixed_wing_id_number
PUBLIC	?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA ; `set_client_server_fixed_wing_afterburner_state'::`1'::__LINE__Var
PUBLIC	??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	?__LINE__Var@?0??set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA ; `set_local_fixed_wing_afterburner_state'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA ; `animate_fixed_wing_afterburners'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA ; `update_fixed_wing_afterburners'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA ; `animate_fixed_wing_airbrakes'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA ; `update_fixed_wing_airbrakes'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA ; `animate_fixed_wing_flaps'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA ; `update_fixed_wing_flaps'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA ; `animate_fixed_wing_propellors'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA ; `initialise_fixed_wing_propellors'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z@4JA ; `damage_fixed_wing_3d_object'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_fixed_wing_id_number@@YGXPAUENTITY@@@Z@4JA ; `set_fixed_wing_id_number'::`1'::__LINE__Var
PUBLIC	__real@0000000000000000
PUBLIC	__real@3e20d97c
PUBLIC	__real@3f000000
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@402e000000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@40a00000
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?fast_modf@@YGMMPAM@Z:PROC			; fast_modf
EXTRN	?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z:PROC ; construct_3d_object
EXTRN	?destruct_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z:PROC ; destruct_3d_object
EXTRN	?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z:PROC ; find_object_3d_sub_object
EXTRN	?open_client_server_entity_airbrakes@@YGXPAUENTITY@@@Z:PROC ; open_client_server_entity_airbrakes
EXTRN	?close_client_server_entity_airbrakes@@YGXPAUENTITY@@@Z:PROC ; close_client_server_entity_airbrakes
EXTRN	?open_client_server_entity_flaps@@YGXPAUENTITY@@@Z:PROC ; open_client_server_entity_flaps
EXTRN	?close_client_server_entity_flaps@@YGXPAUENTITY@@@Z:PROC ; close_client_server_entity_flaps
EXTRN	?set_local_entity_id_number@@YGXPAUENTITY@@W4TEXTURE_ANIMATION_INDICES@@1111@Z:PROC ; set_local_entity_id_number
EXTRN	?update_entity_reversable_keyframed_value@@YGHPAUENTITY@@PAMM@Z:PROC ; update_entity_reversable_keyframed_value
EXTRN	?animate_entity_simple_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z:PROC ; animate_entity_simple_keyframed_sub_objects
EXTRN	?animate_entity_reversable_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z:PROC ; animate_entity_reversable_keyframed_sub_objects
EXTRN	?object_contains_sub_object_type@@YGHPAUOBJECT_3D_INSTANCE@@HHPAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z:PROC ; object_contains_sub_object_type
EXTRN	?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z:PROC ; set_sub_object_type_visible_status
EXTRN	?modify_sub_object_type_heading_pitch_and_roll@@YGHPAUOBJECT_3D_INSTANCE@@HMMM@Z:PROC ; modify_sub_object_type_heading_pitch_and_roll
EXTRN	?get_external_view_entity@@YGPAUENTITY@@XZ:PROC	; get_external_view_entity
EXTRN	?pause_local_entity_sound_type@@YGHPAUENTITY@@HM@Z:PROC ; pause_local_entity_sound_type
EXTRN	?resume_local_entity_sound_type@@YGHPAUENTITY@@H@Z:PROC ; resume_local_entity_sound_type
EXTRN	?pause_client_server_entity_sound_type@@YGHPAUENTITY@@HM@Z:PROC ; pause_client_server_entity_sound_type
EXTRN	?resume_client_server_entity_sound_type@@YGHPAUENTITY@@H@Z:PROC ; resume_client_server_entity_sound_type
EXTRN	?get_time_acceleration@@YGHXZ:PROC		; get_time_acceleration
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?in_flight_articulation_test@@3HA:DWORD		; in_flight_articulation_test
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA:BYTE ; fn_set_client_server_entity_float_value
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?direction@@3HA DD 01H DUP (?)				; direction
_BSS	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@402e000000000000
CONST	SEGMENT
__real@402e000000000000 DQ 0402e000000000000r	; 15
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e20d97c
CONST	SEGMENT
__real@3e20d97c DD 03e20d97cr			; 0.15708
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_fixed_wing_id_number@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_fixed_wing_id_number@@YGXPAUENTITY@@@Z@4JA DD 0307H ; `set_fixed_wing_id_number'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z@4JA DD 02e5H ; `damage_fixed_wing_3d_object'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA DD 02b0H ; `initialise_fixed_wing_propellors'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA DD 025dH ; `animate_fixed_wing_propellors'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA DD 0225H ; `update_fixed_wing_flaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA DD 020cH ; `animate_fixed_wing_flaps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA DD 01ccH ; `update_fixed_wing_airbrakes'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA DD 01b3H ; `animate_fixed_wing_airbrakes'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA DD 013dH ; `update_fixed_wing_afterburners'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA DD 011dH ; `animate_fixed_wing_afterburners'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA DD 0c7H ; `set_local_fixed_wing_afterburner_state'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_SERVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwi'
	DB	'ng\fw_anim.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA DD 063H ; `set_client_server_fixed_wing_afterburner_state'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?set_fixed_wing_id_number@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?set_fixed_wing_id_number@@YGXPAUENTITY@@@Z PROC	; set_fixed_wing_id_number, COMDAT

; 775  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 776  : 	fixed_wing
; 777  : 		*raw;
; 778  : 
; 779  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_fixed_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_fixed_wing_id_number@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_fixed_:

; 780  : 
; 781  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 782  : 
; 783  : 	if (raw->ac.mob.side == ENTITY_SIDE_BLUE_FORCE)

  00030	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00033	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00036	d1 e9		 shr	 ecx, 1
  00038	83 e1 03	 and	 ecx, 3
  0003b	83 f9 01	 cmp	 ecx, 1
  0003e	75 1e		 jne	 SHORT $LN3@set_fixed_

; 784  : 	{
; 785  : 		set_local_entity_id_number

  00040	68 92 00 00 00	 push	 146			; 00000092H
  00045	68 92 00 00 00	 push	 146			; 00000092H
  0004a	68 92 00 00 00	 push	 146			; 00000092H
  0004f	6a 08		 push	 8
  00051	6a 09		 push	 9
  00053	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?set_local_entity_id_number@@YGXPAUENTITY@@W4TEXTURE_ANIMATION_INDICES@@1111@Z ; set_local_entity_id_number
  0005c	eb 2c		 jmp	 SHORT $LN1@set_fixed_
$LN3@set_fixed_:

; 786  : 		(
; 787  : 			en,
; 788  : 			TEXTURE_ANIMATION_INDEX_USA_AC_DIGIT__000,
; 789  : 			TEXTURE_ANIMATION_INDEX_USA_AC_DIGIT__001,
; 790  : 			TEXTURE_ANIMATION_INDEX_LAST,
; 791  : 			TEXTURE_ANIMATION_INDEX_LAST,
; 792  : 			TEXTURE_ANIMATION_INDEX_LAST
; 793  : 		);
; 794  : 	}
; 795  : 	else if (raw->ac.mob.side == ENTITY_SIDE_RED_FORCE)

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00061	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00064	d1 e9		 shr	 ecx, 1
  00066	83 e1 03	 and	 ecx, 3
  00069	83 f9 02	 cmp	 ecx, 2
  0006c	75 1c		 jne	 SHORT $LN1@set_fixed_

; 796  : 	{
; 797  : 		set_local_entity_id_number

  0006e	68 92 00 00 00	 push	 146			; 00000092H
  00073	68 92 00 00 00	 push	 146			; 00000092H
  00078	68 92 00 00 00	 push	 146			; 00000092H
  0007d	6a 0a		 push	 10			; 0000000aH
  0007f	6a 0b		 push	 11			; 0000000bH
  00081	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?set_local_entity_id_number@@YGXPAUENTITY@@W4TEXTURE_ANIMATION_INDICES@@1111@Z ; set_local_entity_id_number
$LN1@set_fixed_:

; 798  : 		(
; 799  : 			en,
; 800  : 			TEXTURE_ANIMATION_INDEX_CIS_AC_DIGIT__000,
; 801  : 			TEXTURE_ANIMATION_INDEX_CIS_AC_DIGIT__001,
; 802  : 			TEXTURE_ANIMATION_INDEX_LAST,
; 803  : 			TEXTURE_ANIMATION_INDEX_LAST,
; 804  : 			TEXTURE_ANIMATION_INDEX_LAST
; 805  : 		);
; 806  : 	}
; 807  : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?set_fixed_wing_id_number@@YGXPAUENTITY@@@Z ENDP	; set_fixed_wing_id_number
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv89 = -76						; size = 4
tv81 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z PROC	; damage_fixed_wing_3d_object, COMDAT

; 741  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 742  : 	fixed_wing
; 743  : 		*raw;
; 744  : 
; 745  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@damage_fix
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@damage_fix:

; 746  : 
; 747  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 748  : 
; 749  : 	//
; 750  : 	// destruct old object
; 751  : 	//
; 752  : 
; 753  : 	destruct_3d_object (raw->ac.inst3d);

  00030	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00033	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?destruct_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; destruct_3d_object

; 754  : 
; 755  : 	//
; 756  : 	// construct new (damaged) object
; 757  : 	//
; 758  : 
; 759  : 	raw->ac.object_3d_shape = get_local_entity_int_value (en, INT_TYPE_DESTROYED_3D_SHAPE);

  0003f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00043	74 0a		 je	 SHORT $LN4@damage_fix
  00045	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	89 4d b8	 mov	 DWORD PTR tv81[ebp], ecx
  0004d	eb 21		 jmp	 SHORT $LN5@damage_fix
$LN4@damage_fix:
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z@4JA
  00055	83 c2 12	 add	 edx, 18			; 00000012H
  00058	52		 push	 edx
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00069	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN5@damage_fix:
  00070	b9 01 00 00 00	 mov	 ecx, 1
  00075	85 c9		 test	 ecx, ecx
  00077	74 09		 je	 SHORT $LN6@damage_fix
  00079	c7 45 b4 2e 00
	00 00		 mov	 DWORD PTR tv89[ebp], 46	; 0000002eH
  00080	eb 21		 jmp	 SHORT $LN7@damage_fix
$LN6@damage_fix:
  00082	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z@4JA
  00088	83 c2 12	 add	 edx, 18			; 00000012H
  0008b	52		 push	 edx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN7@damage_fix:
  000a3	6a 2e		 push	 46			; 0000002eH
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000a8	51		 push	 ecx
  000a9	69 55 b8 5c 04
	00 00		 imul	 edx, DWORD PTR tv81[ebp], 1116
  000b0	8b 45 b4	 mov	 eax, DWORD PTR tv89[ebp]
  000b3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000ba	ff d1		 call	 ecx
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  000bf	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax

; 760  : 
; 761  : 	raw->ac.inst3d = construct_3d_object (raw->ac.object_3d_shape);

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000c8	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ?construct_3d_object@@YGPAUOBJECT_3D_INSTANCE@@H@Z ; construct_3d_object
  000d4	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  000d7	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 762  : 
; 763  : 	//
; 764  : 	// set id number for new object
; 765  : 	//
; 766  : 
; 767  : 	set_fixed_wing_id_number (en);

  000dd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?set_fixed_wing_id_number@@YGXPAUENTITY@@@Z ; set_fixed_wing_id_number

; 768  : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
?damage_fixed_wing_3d_object@@YGXPAUENTITY@@@Z ENDP	; damage_fixed_wing_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
_depth$ = -68						; size = 4
_search$ = -64						; size = 56
_inst3d$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z PROC ; initialise_fixed_wing_propellors, COMDAT

; 688  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 689  : 	fixed_wing
; 690  : 		*raw;
; 691  : 
; 692  : 	object_3d_instance
; 693  : 		*inst3d;
; 694  : 
; 695  : 	object_3d_sub_object_search_data
; 696  : 		search;
; 697  : 
; 698  : 	int
; 699  : 		depth;
; 700  : 
; 701  : 	ASSERT (en);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@initialise
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA
  00017	83 c0 0d	 add	 eax, 13			; 0000000dH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@initialise:

; 702  : 
; 703  : 	raw = (fixed_wing *) get_local_entity_data (en);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 704  : 
; 705  : 	inst3d = raw->ac.inst3d;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00036	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0003c	89 4d f8	 mov	 DWORD PTR _inst3d$[ebp], ecx

; 706  : 
; 707  : 	depth = 0;

  0003f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _depth$[ebp], 0
$LN2@initialise:

; 708  : 
; 709  : 	while (TRUE)

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	85 c0		 test	 eax, eax
  0004d	74 7c		 je	 SHORT $LN3@initialise

; 710  : 	{
; 711  : 		search.search_depth = depth;

  0004f	8b 45 bc	 mov	 eax, DWORD PTR _depth$[ebp]
  00052	89 45 c8	 mov	 DWORD PTR _search$[ebp+8], eax

; 712  : 		search.search_object = inst3d;

  00055	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00058	89 45 c0	 mov	 DWORD PTR _search$[ebp], eax

; 713  : 		search.sub_object_index = OBJECT_3D_SUB_OBJECT_PROPELLER_HUB;

  0005b	c7 45 cc 89 00
	00 00		 mov	 DWORD PTR _search$[ebp+12], 137 ; 00000089H

; 714  : 
; 715  : 		if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  00062	8d 45 c0	 lea	 eax, DWORD PTR _search$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  0006b	83 f8 01	 cmp	 eax, 1
  0006e	75 4b		 jne	 SHORT $LN5@initialise

; 716  : 		{
; 717  : 			#if RECOGNITION_GUIDE
; 718  : 
; 719  : 			search.result_sub_object->relative_roll = 0.0;
; 720  : 
; 721  : 			#else
; 722  : 
; 723  : 			search.result_sub_object->relative_roll = sfrand1 () * PI;

  00070	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0007a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0007f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0008a	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0008d	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00093	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00099	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0009d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000a5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  000ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b1	8b 55 c4	 mov	 edx, DWORD PTR _search$[ebp+4]
  000b4	f3 0f 11 42 20	 movss	 DWORD PTR [edx+32], xmm0

; 724  : 
; 725  : 			#endif
; 726  : 		}
; 727  : 		else

  000b9	eb 02		 jmp	 SHORT $LN6@initialise
$LN5@initialise:

; 728  : 		{
; 729  : 			break;

  000bb	eb 0e		 jmp	 SHORT $LN3@initialise
$LN6@initialise:

; 730  : 		}
; 731  : 
; 732  : 		depth++;

  000bd	8b 45 bc	 mov	 eax, DWORD PTR _depth$[ebp]
  000c0	83 c0 01	 add	 eax, 1
  000c3	89 45 bc	 mov	 DWORD PTR _depth$[ebp], eax

; 733  : 	}

  000c6	e9 7b ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 734  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?initialise_fixed_wing_propellors@@YGXPAUENTITY@@@Z ENDP ; initialise_fixed_wing_propellors
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv242 = -88						; size = 4
tv184 = -84						; size = 4
tv81 = -84						; size = 4
tv176 = -80						; size = 4
tv74 = -80						; size = 4
_ang$ = -12						; size = 4
_inst3d$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z PROC	; animate_fixed_wing_propellors, COMDAT

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 606  : 	fixed_wing
; 607  : 		*raw;
; 608  : 
; 609  : 	object_3d_instance
; 610  : 		*inst3d;
; 611  : 
; 612  : 	float
; 613  : 		ang;
; 614  : 
; 615  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@animate_fi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 0a	 add	 eax, 10			; 0000000aH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@animate_fi:

; 616  : 
; 617  : 	if (get_local_entity_int_value (en, INT_TYPE_OBJECT_DRAWN_ONCE_THIS_FRAME))

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN13@animate_fi
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d b0	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 1d		 jmp	 SHORT $LN14@animate_fi
$LN13@animate_fi:
  00037	68 69 02 00 00	 push	 617			; 00000269H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004d	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN14@animate_fi:
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN15@animate_fi
  0005d	c7 45 ac 93 00
	00 00		 mov	 DWORD PTR tv81[ebp], 147 ; 00000093H
  00064	eb 1d		 jmp	 SHORT $LN16@animate_fi
$LN15@animate_fi:
  00066	68 69 02 00 00	 push	 617			; 00000269H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN16@animate_fi:
  00083	68 93 00 00 00	 push	 147			; 00000093H
  00088	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0008b	52		 push	 edx
  0008c	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv74[ebp], 1116
  00093	8b 4d ac	 mov	 ecx, DWORD PTR tv81[ebp]
  00096	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009d	ff d2		 call	 edx
  0009f	85 c0		 test	 eax, eax
  000a1	74 05		 je	 SHORT $LN3@animate_fi

; 618  : 	{
; 619  : 		return;

  000a3	e9 27 02 00 00	 jmp	 $LN1@animate_fi
$LN3@animate_fi:

; 620  : 	}
; 621  : 
; 622  : 	raw = (fixed_wing *) get_local_entity_data (en);

  000a8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ab	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ae	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 623  : 
; 624  : 	inst3d = raw->ac.inst3d;

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  000ba	89 4d f8	 mov	 DWORD PTR _inst3d$[ebp], ecx

; 625  : 
; 626  : 	if ((in_flight_articulation_test) && (en == get_external_view_entity ()))

  000bd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_flight_articulation_test@@3HA, 0 ; in_flight_articulation_test
  000c4	0f 84 b2 00 00
	00		 je	 $LN8@animate_fi
  000ca	e8 00 00 00 00	 call	 ?get_external_view_entity@@YGPAUENTITY@@XZ ; get_external_view_entity
  000cf	39 45 08	 cmp	 DWORD PTR _en$[ebp], eax
  000d2	0f 85 a4 00 00
	00		 jne	 $LN8@animate_fi

; 627  : 	{
; 628  : 		if (direction)

  000d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?direction@@3HA, 0
  000df	74 4f		 je	 SHORT $LN5@animate_fi

; 629  : 		{
; 630  : 			raw->propellor_rpm += 5.0 * get_delta_time ();

  000e1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  000e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4014000000000000
  000f1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000f4	f3 0f 5a 88 8c
	01 00 00	 cvtss2sd xmm1, DWORD PTR [eax+396]
  000fc	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00100	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00104	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00107	f3 0f 11 81 8c
	01 00 00	 movss	 DWORD PTR [ecx+396], xmm0

; 631  : 
; 632  : 			if (raw->propellor_rpm >= 40.0)

  0010f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00112	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  0011a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4044000000000000
  00122	72 0a		 jb	 SHORT $LN7@animate_fi

; 633  : 			{
; 634  : 				direction = FALSE;

  00124	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?direction@@3HA, 0
$LN7@animate_fi:

; 635  : 			}
; 636  : 		}
; 637  : 		else

  0012e	eb 4c		 jmp	 SHORT $LN8@animate_fi
$LN5@animate_fi:

; 638  : 		{
; 639  : 			raw->propellor_rpm -= 5.0 * get_delta_time ();

  00130	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  00138	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4014000000000000
  00140	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00143	f3 0f 5a 88 8c
	01 00 00	 cvtss2sd xmm1, DWORD PTR [eax+396]
  0014b	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0014f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00153	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00156	f3 0f 11 81 8c
	01 00 00	 movss	 DWORD PTR [ecx+396], xmm0

; 640  : 
; 641  : 			if (raw->propellor_rpm <= 0.0)

  0015e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00161	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  00169	0f 57 c9	 xorps	 xmm1, xmm1
  0016c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00170	72 0a		 jb	 SHORT $LN8@animate_fi

; 642  : 			{
; 643  : 				direction = TRUE;

  00172	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?direction@@3HA, 1
$LN8@animate_fi:

; 644  : 			}
; 645  : 		}
; 646  : 	}
; 647  : 
; 648  : 	//
; 649  : 	// set the correct blade type visible status
; 650  : 	//
; 651  : 
; 652  : 	if (raw->propellor_rpm > 15.0)

  0017c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0017f	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  00187	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@402e000000000000
  0018f	76 2f		 jbe	 SHORT $LN9@animate_fi

; 653  : 	{
; 654  : 		set_sub_object_type_visible_status (inst3d, OBJECT_3D_SUB_OBJECT_PROPELLER_MOVING, TRUE);

  00191	6a 01		 push	 1
  00193	68 8b 00 00 00	 push	 139			; 0000008bH
  00198	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 655  : 		set_sub_object_type_visible_status (inst3d, OBJECT_3D_SUB_OBJECT_PROPELLER_STATIC, FALSE);

  001a1	6a 00		 push	 0
  001a3	68 8c 00 00 00	 push	 140			; 0000008cH
  001a8	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 656  : 
; 657  : 		ang = PI / 20.0;

  001b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e20d97c
  001b9	f3 0f 11 45 f4	 movss	 DWORD PTR _ang$[ebp], xmm0

; 658  : 	}
; 659  : 	else

  001be	eb 48		 jmp	 SHORT $LN10@animate_fi
$LN9@animate_fi:

; 660  : 	{
; 661  : 		set_sub_object_type_visible_status (inst3d, OBJECT_3D_SUB_OBJECT_PROPELLER_MOVING, FALSE);

  001c0	6a 00		 push	 0
  001c2	68 8b 00 00 00	 push	 139			; 0000008bH
  001c7	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 662  : 		set_sub_object_type_visible_status (inst3d, OBJECT_3D_SUB_OBJECT_PROPELLER_STATIC, TRUE);

  001d0	6a 01		 push	 1
  001d2	68 8c 00 00 00	 push	 140			; 0000008cH
  001d7	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 663  : 
; 664  : 		ang = 0.25 * raw->propellor_rpm * get_delta_time ();

  001e0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001e3	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  001eb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  001f3	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?system_delta_time@@3MA
  001fb	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00203	f3 0f 11 45 f4	 movss	 DWORD PTR _ang$[ebp], xmm0
$LN10@animate_fi:

; 665  : 	}
; 666  : 
; 667  : 	//
; 668  : 	// stop props from spinning if paused ( but must still switch the correct objects on and off )
; 669  : 	//
; 670  : 
; 671  :    if (get_time_acceleration () != TIME_ACCELERATION_PAUSE)

  00208	e8 00 00 00 00	 call	 ?get_time_acceleration@@YGHXZ ; get_time_acceleration
  0020d	85 c0		 test	 eax, eax
  0020f	0f 84 ba 00 00
	00		 je	 $LN11@animate_fi

; 672  : 	{
; 673  : 		ang *= get_local_entity_float_value (en, FLOAT_TYPE_PROPELLOR_DIRECTION);

  00215	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00219	74 0a		 je	 SHORT $LN17@animate_fi
  0021b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0021e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00220	89 4d b0	 mov	 DWORD PTR tv176[ebp], ecx
  00223	eb 21		 jmp	 SHORT $LN18@animate_fi
$LN17@animate_fi:
  00225	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA
  0022b	83 c2 44	 add	 edx, 68			; 00000044H
  0022e	52		 push	 edx
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0023f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv176[ebp], 0
$LN18@animate_fi:
  00246	b9 01 00 00 00	 mov	 ecx, 1
  0024b	85 c9		 test	 ecx, ecx
  0024d	74 09		 je	 SHORT $LN19@animate_fi
  0024f	c7 45 ac 62 00
	00 00		 mov	 DWORD PTR tv184[ebp], 98 ; 00000062H
  00256	eb 21		 jmp	 SHORT $LN20@animate_fi
$LN19@animate_fi:
  00258	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z@4JA
  0025e	83 c2 44	 add	 edx, 68			; 00000044H
  00261	52		 push	 edx
  00262	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00272	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN20@animate_fi:
  00279	6a 62		 push	 98			; 00000062H
  0027b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0027e	51		 push	 ecx
  0027f	69 55 b0 bc 02
	00 00		 imul	 edx, DWORD PTR tv176[ebp], 700
  00286	8b 45 ac	 mov	 eax, DWORD PTR tv184[ebp]
  00289	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00290	ff d1		 call	 ecx
  00292	d9 5d a8	 fstp	 DWORD PTR tv242[ebp]
  00295	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv242[ebp]
  0029a	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _ang$[ebp]
  0029f	f3 0f 11 45 f4	 movss	 DWORD PTR _ang$[ebp], xmm0

; 674  : 
; 675  : 		//
; 676  : 		// rotate hub
; 677  : 		//
; 678  : 
; 679  : 		modify_sub_object_type_heading_pitch_and_roll (inst3d, OBJECT_3D_SUB_OBJECT_PROPELLER_HUB, 0.0, 0.0, ang);

  002a4	51		 push	 ecx
  002a5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _ang$[ebp]
  002aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002af	51		 push	 ecx
  002b0	0f 57 c0	 xorps	 xmm0, xmm0
  002b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b8	51		 push	 ecx
  002b9	0f 57 c0	 xorps	 xmm0, xmm0
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	68 89 00 00 00	 push	 137			; 00000089H
  002c6	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 ?modify_sub_object_type_heading_pitch_and_roll@@YGHPAUOBJECT_3D_INSTANCE@@HMMM@Z ; modify_sub_object_type_heading_pitch_and_roll
$LN11@animate_fi:
$LN1@animate_fi:

; 680  : 	}
; 681  : }

  002cf	5f		 pop	 edi
  002d0	5e		 pop	 esi
  002d1	5b		 pop	 ebx
  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 04 00	 ret	 4
?animate_fixed_wing_propellors@@YGXPAUENTITY@@@Z ENDP	; animate_fixed_wing_propellors
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?update_fixed_wing_flaps@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv77 = -76						; size = 4
_flap_state$ = -8					; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?update_fixed_wing_flaps@@YGXPAUENTITY@@@Z PROC		; update_fixed_wing_flaps, COMDAT

; 549  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 550  : 	fixed_wing
; 551  : 		*raw;
; 552  : 
; 553  : 	int
; 554  : 		flap_state;
; 555  : 
; 556  : 	//
; 557  : 	// updates the flaps status ( regardless of whether the aircraft is drawn or not )
; 558  : 	//
; 559  : 
; 560  : 	ASSERT( en );

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@update_fix
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@update_fix:

; 561  : 
; 562  : 	raw = (fixed_wing *) get_local_entity_data( en );

  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 563  : 
; 564  : 	flap_state = update_entity_reversable_keyframed_value( en, &raw->flap_state, 0.5 );

  00030	51		 push	 ecx
  00031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00041	05 88 01 00 00	 add	 eax, 392		; 00000188H
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ?update_entity_reversable_keyframed_value@@YGHPAUENTITY@@PAMM@Z ; update_entity_reversable_keyframed_value
  00050	89 45 f8	 mov	 DWORD PTR _flap_state$[ebp], eax

; 565  : 
; 566  : 	if ( ( in_flight_articulation_test ) && ( get_comms_model() == COMMS_MODEL_SERVER ) )

  00053	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_flight_articulation_test@@3HA, 0 ; in_flight_articulation_test
  0005a	74 31		 je	 SHORT $LN2@update_fix
  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00063	75 28		 jne	 SHORT $LN2@update_fix

; 567  : 	{
; 568  : 		switch ( flap_state )

  00065	8b 45 f8	 mov	 eax, DWORD PTR _flap_state$[ebp]
  00068	89 45 b4	 mov	 DWORD PTR tv77[ebp], eax
  0006b	83 7d b4 00	 cmp	 DWORD PTR tv77[ebp], 0
  0006f	74 08		 je	 SHORT $LN6@update_fix
  00071	83 7d b4 02	 cmp	 DWORD PTR tv77[ebp], 2
  00075	74 0d		 je	 SHORT $LN7@update_fix
  00077	eb 14		 jmp	 SHORT $LN2@update_fix
$LN6@update_fix:

; 569  : 		{
; 570  : 			//////////////////////////////////////////////////
; 571  : 			case 0:
; 572  : 			//////////////////////////////////////////////////
; 573  : 			{
; 574  : 				open_client_server_entity_flaps( en );

  00079	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?open_client_server_entity_flaps@@YGXPAUENTITY@@@Z ; open_client_server_entity_flaps

; 575  : 
; 576  : 				break;

  00082	eb 09		 jmp	 SHORT $LN2@update_fix
$LN7@update_fix:

; 577  : 			}
; 578  : 			//////////////////////////////////////////////////
; 579  : 			case 2:
; 580  : 			//////////////////////////////////////////////////
; 581  : 			{
; 582  : 				close_client_server_entity_flaps( en );

  00084	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?close_client_server_entity_flaps@@YGXPAUENTITY@@@Z ; close_client_server_entity_flaps
$LN2@update_fix:

; 583  : 
; 584  : 				break;
; 585  : 			}
; 586  : 		}
; 587  : 	}
; 588  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?update_fixed_wing_flaps@@YGXPAUENTITY@@@Z ENDP		; update_fixed_wing_flaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv81 = -76						; size = 4
tv74 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z PROC	; animate_fixed_wing_flaps, COMDAT

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 525  : 	fixed_wing
; 526  : 		*raw;
; 527  : 
; 528  : 	//
; 529  : 	// animates the flaps on a fixed wing aircraft
; 530  : 	//
; 531  : 
; 532  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@animate_fi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@animate_fi:

; 533  : 
; 534  : 	if (get_local_entity_int_value (en, INT_TYPE_OBJECT_DRAWN_ONCE_THIS_FRAME))

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN5@animate_fi
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d b8	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 1d		 jmp	 SHORT $LN6@animate_fi
$LN5@animate_fi:
  00037	68 16 02 00 00	 push	 534			; 00000216H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN6@animate_fi:
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN7@animate_fi
  0005d	c7 45 b4 93 00
	00 00		 mov	 DWORD PTR tv81[ebp], 147 ; 00000093H
  00064	eb 1d		 jmp	 SHORT $LN8@animate_fi
$LN7@animate_fi:
  00066	68 16 02 00 00	 push	 534			; 00000216H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN8@animate_fi:
  00083	68 93 00 00 00	 push	 147			; 00000093H
  00088	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0008b	52		 push	 edx
  0008c	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv74[ebp], 1116
  00093	8b 4d b4	 mov	 ecx, DWORD PTR tv81[ebp]
  00096	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009d	ff d2		 call	 edx
  0009f	85 c0		 test	 eax, eax
  000a1	74 02		 je	 SHORT $LN3@animate_fi

; 535  : 	{
; 536  : 		return;

  000a3	eb 2e		 jmp	 SHORT $LN1@animate_fi
$LN3@animate_fi:

; 537  : 	}
; 538  : 
; 539  : 	raw = (fixed_wing *) get_local_entity_data (en);

  000a5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ab	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 540  : 
; 541  : 	animate_entity_reversable_keyframed_sub_objects( raw->ac.inst3d, OBJECT_3D_SUB_OBJECT_FLAPS, raw->flap_state );

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 10 80 88
	01 00 00	 movss	 xmm0, DWORD PTR [eax+392]
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	68 8e 00 00 00	 push	 142			; 0000008eH
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c7	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 ?animate_entity_reversable_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z ; animate_entity_reversable_keyframed_sub_objects
$LN1@animate_fi:

; 542  : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
?animate_fixed_wing_flaps@@YGXPAUENTITY@@@Z ENDP	; animate_fixed_wing_flaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv77 = -76						; size = 4
_airbrake_state$ = -8					; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z PROC	; update_fixed_wing_airbrakes, COMDAT

; 460  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 461  : 	fixed_wing
; 462  : 		*raw;
; 463  : 
; 464  : 	int
; 465  : 		airbrake_state;
; 466  : 
; 467  : 	//
; 468  : 	// updates the airbrakes status ( regardless of whether the aircraft is drawn or not )
; 469  : 	//
; 470  : 
; 471  : 	ASSERT( en );

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@update_fix
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@update_fix:

; 472  : 
; 473  : 	raw = (fixed_wing *) get_local_entity_data( en );

  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 474  : 
; 475  : 	airbrake_state = update_entity_reversable_keyframed_value( en, &raw->airbrake_state, 0.5 );

  00030	51		 push	 ecx
  00031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00041	05 84 01 00 00	 add	 eax, 388		; 00000184H
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ?update_entity_reversable_keyframed_value@@YGHPAUENTITY@@PAMM@Z ; update_entity_reversable_keyframed_value
  00050	89 45 f8	 mov	 DWORD PTR _airbrake_state$[ebp], eax

; 476  : 
; 477  : 	if ( ( in_flight_articulation_test ) && ( get_comms_model() == COMMS_MODEL_SERVER ) )

  00053	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_flight_articulation_test@@3HA, 0 ; in_flight_articulation_test
  0005a	74 31		 je	 SHORT $LN2@update_fix
  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00063	75 28		 jne	 SHORT $LN2@update_fix

; 478  : 	{
; 479  : 		switch ( airbrake_state )

  00065	8b 45 f8	 mov	 eax, DWORD PTR _airbrake_state$[ebp]
  00068	89 45 b4	 mov	 DWORD PTR tv77[ebp], eax
  0006b	83 7d b4 00	 cmp	 DWORD PTR tv77[ebp], 0
  0006f	74 08		 je	 SHORT $LN6@update_fix
  00071	83 7d b4 02	 cmp	 DWORD PTR tv77[ebp], 2
  00075	74 0d		 je	 SHORT $LN7@update_fix
  00077	eb 14		 jmp	 SHORT $LN2@update_fix
$LN6@update_fix:

; 480  : 		{
; 481  : 			//////////////////////////////////////////////////
; 482  : 			case 0:
; 483  : 			//////////////////////////////////////////////////
; 484  : 			{
; 485  : 				open_client_server_entity_airbrakes( en );

  00079	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?open_client_server_entity_airbrakes@@YGXPAUENTITY@@@Z ; open_client_server_entity_airbrakes

; 486  : 
; 487  : 				break;

  00082	eb 09		 jmp	 SHORT $LN2@update_fix
$LN7@update_fix:

; 488  : 			}
; 489  : 			//////////////////////////////////////////////////
; 490  : 			case 2:
; 491  : 			//////////////////////////////////////////////////
; 492  : 			{
; 493  : 				close_client_server_entity_airbrakes( en );

  00084	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?close_client_server_entity_airbrakes@@YGXPAUENTITY@@@Z ; close_client_server_entity_airbrakes
$LN2@update_fix:

; 494  : 
; 495  : 				break;
; 496  : 			}
; 497  : 		}
; 498  : 	}
; 499  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?update_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z ENDP	; update_fixed_wing_airbrakes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv81 = -76						; size = 4
tv74 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z PROC	; animate_fixed_wing_airbrakes, COMDAT

; 435  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 436  : 	fixed_wing
; 437  : 		*raw;
; 438  : 
; 439  : 	//
; 440  : 	// animates the airbrakes on a fixed wing aircraft
; 441  : 	//
; 442  : 
; 443  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@animate_fi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@animate_fi:

; 444  : 
; 445  : 	if (get_local_entity_int_value (en, INT_TYPE_OBJECT_DRAWN_ONCE_THIS_FRAME))

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN5@animate_fi
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d b8	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 1d		 jmp	 SHORT $LN6@animate_fi
$LN5@animate_fi:
  00037	68 bd 01 00 00	 push	 445			; 000001bdH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN6@animate_fi:
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN7@animate_fi
  0005d	c7 45 b4 93 00
	00 00		 mov	 DWORD PTR tv81[ebp], 147 ; 00000093H
  00064	eb 1d		 jmp	 SHORT $LN8@animate_fi
$LN7@animate_fi:
  00066	68 bd 01 00 00	 push	 445			; 000001bdH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN8@animate_fi:
  00083	68 93 00 00 00	 push	 147			; 00000093H
  00088	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0008b	52		 push	 edx
  0008c	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv74[ebp], 1116
  00093	8b 4d b4	 mov	 ecx, DWORD PTR tv81[ebp]
  00096	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009d	ff d2		 call	 edx
  0009f	85 c0		 test	 eax, eax
  000a1	74 02		 je	 SHORT $LN3@animate_fi

; 446  : 	{
; 447  : 		return;

  000a3	eb 2b		 jmp	 SHORT $LN1@animate_fi
$LN3@animate_fi:

; 448  : 	}
; 449  : 
; 450  : 	raw = (fixed_wing *) get_local_entity_data (en);

  000a5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ab	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 451  : 
; 452  : 	animate_entity_reversable_keyframed_sub_objects( raw->ac.inst3d, OBJECT_3D_SUB_OBJECT_AIR_BRAKE, raw->airbrake_state );

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 10 80 84
	01 00 00	 movss	 xmm0, DWORD PTR [eax+388]
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	6a 49		 push	 73			; 00000049H
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c4	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 ?animate_entity_reversable_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z ; animate_entity_reversable_keyframed_sub_objects
$LN1@animate_fi:

; 453  : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 04 00	 ret	 4
?animate_fixed_wing_airbrakes@@YGXPAUENTITY@@@Z ENDP	; animate_fixed_wing_airbrakes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
_state$ = -12						; size = 4
_frac$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z PROC	; update_fixed_wing_afterburners, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 318  : 	fixed_wing
; 319  : 		*raw;
; 320  : 
; 321  : 	float
; 322  : 		frac,
; 323  : 		state;
; 324  : 
; 325  : 	ASSERT( en );

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@update_fix
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@update_fix:

; 326  : 
; 327  : 	raw = (fixed_wing *) get_local_entity_data( en );

  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 328  : 
; 329  : 	//
; 330  : 	// break down afterburner state into integer and fractional parts
; 331  : 	//
; 332  : 
; 333  : 	frac = fast_modf (raw->afterburner_state, &state);

  00030	8d 45 f4	 lea	 eax, DWORD PTR _state$[ebp]
  00033	50		 push	 eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00037	51		 push	 ecx
  00038	f3 0f 10 81 80
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+384]
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	e8 00 00 00 00	 call	 ?fast_modf@@YGMMPAM@Z	; fast_modf
  0004a	d9 5d f8	 fstp	 DWORD PTR _frac$[ebp]

; 334  : 
; 335  : 	if ( ( in_flight_articulation_test ) && ( get_comms_model() == COMMS_MODEL_SERVER ) )

  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_flight_articulation_test@@3HA, 0 ; in_flight_articulation_test
  00054	0f 84 9c 00 00
	00		 je	 $LN7@update_fix
  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00061	0f 85 8f 00 00
	00		 jne	 $LN7@update_fix

; 336  : 	{
; 337  : 		//
; 338  : 		// debug articulation test
; 339  : 		//
; 340  : 
; 341  : 		if (state == FIXED_WING_AFTERBURNER_OFF_STATE)

  00067	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _state$[ebp]
  0006c	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00074	9f		 lahf
  00075	f6 c4 44	 test	 ah, 68			; 00000044H
  00078	7a 18		 jp	 SHORT $LN9@update_fix

; 342  : 		{
; 343  : 			//
; 344  : 			// if afterburners are off - turn them on !
; 345  : 			//
; 346  : 
; 347  : 			raw->afterburner_state = FIXED_WING_AFTERBURNER_EXTENDING_START_STATE;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00085	f3 0f 11 80 80
	01 00 00	 movss	 DWORD PTR [eax+384], xmm0

; 348  : 
; 349  : 			return;

  0008d	e9 22 01 00 00	 jmp	 $LN1@update_fix
$LN9@update_fix:

; 350  : 		}
; 351  : 
; 352  : 		//
; 353  : 		// update state, but don't loop the looping bit
; 354  : 		//
; 355  : 
; 356  : 		frac += (get_delta_time () * FIXED_WING_AFTERBURNER_ANIMATION_RATE);

  00092	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  0009a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000a2	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _frac$[ebp]
  000a7	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000ab	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000af	f3 0f 11 45 f8	 movss	 DWORD PTR _frac$[ebp], xmm0
$LN2@update_fix:

; 357  : 
; 358  : 		while (frac >= 1.0)

  000b4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _frac$[ebp]
  000b9	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  000c1	72 2e		 jb	 SHORT $LN3@update_fix

; 359  : 		{
; 360  : 			frac -= 1.0;

  000c3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _frac$[ebp]
  000c8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d4	f3 0f 11 45 f8	 movss	 DWORD PTR _frac$[ebp], xmm0

; 361  : 
; 362  : 			state += 2.0;

  000d9	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _state$[ebp]
  000de	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  000e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ea	f3 0f 11 45 f4	 movss	 DWORD PTR _state$[ebp], xmm0

; 363  : 		}

  000ef	eb c3		 jmp	 SHORT $LN2@update_fix
$LN3@update_fix:

; 364  : 	}
; 365  : 	else

  000f1	e9 8a 00 00 00	 jmp	 $LN5@update_fix
$LN7@update_fix:

; 366  : 	{
; 367  : 		//
; 368  : 		// normal operation
; 369  : 		//
; 370  : 
; 371  : 		if (state == FIXED_WING_AFTERBURNER_OFF_STATE)

  000f6	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _state$[ebp]
  000fb	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00103	9f		 lahf
  00104	f6 c4 44	 test	 ah, 68			; 00000044H
  00107	7a 05		 jp	 SHORT $LN10@update_fix

; 372  : 		{
; 373  : 
; 374  : 			return;

  00109	e9 a6 00 00 00	 jmp	 $LN1@update_fix
$LN10@update_fix:

; 375  : 		}
; 376  : 
; 377  : 		//
; 378  : 		// update state
; 379  : 		//
; 380  : 
; 381  : 		frac += (get_delta_time () * FIXED_WING_AFTERBURNER_ANIMATION_RATE);

  0010e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  00116	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011e	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _frac$[ebp]
  00123	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00127	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0012b	f3 0f 11 45 f8	 movss	 DWORD PTR _frac$[ebp], xmm0
$LN4@update_fix:

; 382  : 
; 383  : 		while (frac >= 1.0)

  00130	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _frac$[ebp]
  00135	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0013d	72 41		 jb	 SHORT $LN5@update_fix

; 384  : 		{
; 385  : 			frac -= 1.0;

  0013f	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _frac$[ebp]
  00144	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0014c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00150	f3 0f 11 45 f8	 movss	 DWORD PTR _frac$[ebp], xmm0

; 386  : 
; 387  : 			if (state != FIXED_WING_AFTERBURNER_ON_START_STATE)

  00155	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _state$[ebp]
  0015a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@4008000000000000
  00162	9f		 lahf
  00163	f6 c4 44	 test	 ah, 68			; 00000044H
  00166	7b 16		 jnp	 SHORT $LN11@update_fix

; 388  : 			{
; 389  : 				//
; 390  : 				// only change state if not in looping part
; 391  : 				//
; 392  : 
; 393  : 				state += 2.0;

  00168	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _state$[ebp]
  0016d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00175	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00179	f3 0f 11 45 f4	 movss	 DWORD PTR _state$[ebp], xmm0
$LN11@update_fix:

; 394  : 			}
; 395  : 		}

  0017e	eb b0		 jmp	 SHORT $LN4@update_fix
$LN5@update_fix:

; 396  : 	}
; 397  : 
; 398  : 	//
; 399  : 	// passed the end of the animation, so return to OFF state
; 400  : 	//
; 401  : 
; 402  : 	if (state >= FIXED_WING_AFTERBURNER_RETRACTING_END_STATE)

  00180	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _state$[ebp]
  00185	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4018000000000000
  0018d	72 10		 jb	 SHORT $LN12@update_fix

; 403  : 	{
; 404  : 		raw->afterburner_state = FIXED_WING_AFTERBURNER_OFF_STATE;

  0018f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00192	0f 57 c0	 xorps	 xmm0, xmm0
  00195	f3 0f 11 80 80
	01 00 00	 movss	 DWORD PTR [eax+384], xmm0

; 405  : 	}
; 406  : 	else

  0019d	eb 15		 jmp	 SHORT $LN13@update_fix
$LN12@update_fix:

; 407  : 	{
; 408  : 		raw->afterburner_state = state + frac;

  0019f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _state$[ebp]
  001a4	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _frac$[ebp]
  001a9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001ac	f3 0f 11 80 80
	01 00 00	 movss	 DWORD PTR [eax+384], xmm0
$LN13@update_fix:
$LN1@update_fix:

; 409  : 	}
; 410  : }

  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi
  001b6	5b		 pop	 ebx
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c2 04 00	 ret	 4
?update_fixed_wing_afterburners@@YGXPAUENTITY@@@Z ENDP	; update_fixed_wing_afterburners
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
_base$ = -20						; size = 4
_frac$ = -16						; size = 4
_val$ = -12						; size = 4
_inst3d$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z PROC	; animate_fixed_wing_afterburners, COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 286  : 	fixed_wing
; 287  : 		*raw;
; 288  : 
; 289  : 	object_3d_instance
; 290  : 		*inst3d;
; 291  : 
; 292  : 	float
; 293  : 		val,
; 294  : 		frac,
; 295  : 		base;
; 296  : 
; 297  : 	ASSERT( en );

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@animate_fi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@animate_fi:

; 298  : 
; 299  : 	raw = (fixed_wing *) get_local_entity_data( en );

  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 300  : 
; 301  : 	inst3d = raw->ac.inst3d;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00033	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00039	89 4d f8	 mov	 DWORD PTR _inst3d$[ebp], ecx

; 302  : 
; 303  : 	frac = fast_modf (raw->afterburner_state, &base);

  0003c	8d 45 ec	 lea	 eax, DWORD PTR _base$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00043	51		 push	 ecx
  00044	f3 0f 10 81 80
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+384]
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	e8 00 00 00 00	 call	 ?fast_modf@@YGMMPAM@Z	; fast_modf
  00056	d9 5d f0	 fstp	 DWORD PTR _frac$[ebp]

; 304  : 
; 305  : 	base = floor (base * 0.5);

  00059	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _base$[ebp]
  0005e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00066	83 ec 08	 sub	 esp, 8
  00069	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00074	83 c4 08	 add	 esp, 8
  00077	d9 5d ec	 fstp	 DWORD PTR _base$[ebp]

; 306  : 
; 307  : 	val = (base + frac) / 3.0;

  0007a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _base$[ebp]
  0007f	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _frac$[ebp]
  00084	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00088	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4008000000000000
  00090	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00094	f3 0f 11 45 f4	 movss	 DWORD PTR _val$[ebp], xmm0

; 308  : 
; 309  : 	animate_entity_simple_keyframed_sub_objects (inst3d, OBJECT_3D_SUB_OBJECT_EFFECT_AFTERBURNER, val);

  00099	51		 push	 ecx
  0009a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _val$[ebp]
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	6a 48		 push	 72			; 00000048H
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?animate_entity_simple_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z ; animate_entity_simple_keyframed_sub_objects

; 310  : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
?animate_fixed_wing_afterburners@@YGXPAUENTITY@@@Z ENDP	; animate_fixed_wing_afterburners
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z
_TEXT	SEGMENT
_inst3d$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_state$ = 12						; size = 4
?set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z PROC ; set_local_fixed_wing_afterburner_state, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 	fixed_wing
; 201  : 		*raw;
; 202  : 
; 203  : 	object_3d_instance
; 204  : 		*inst3d;
; 205  : 
; 206  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_local_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_local_:

; 207  : 
; 208  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 209  : 
; 210  : 	inst3d = raw->ac.inst3d;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00033	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00039	89 4d f8	 mov	 DWORD PTR _inst3d$[ebp], ecx

; 211  : 
; 212  : 	if (state)

  0003c	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  00040	0f 84 a5 00 00
	00		 je	 $LN3@set_local_

; 213  : 	{
; 214  : 		if (raw->afterburner_state < FIXED_WING_AFTERBURNER_EXTENDING_START_STATE)

  00046	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00049	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  00051	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00059	66 0f 2f c8	 comisd	 xmm1, xmm0
  0005d	76 4c		 jbe	 SHORT $LN5@set_local_

; 215  : 		{
; 216  : 			//
; 217  : 			// currently off - so turn them on
; 218  : 			//
; 219  : 
; 220  : 			raw->afterburner_state = FIXED_WING_AFTERBURNER_EXTENDING_START_STATE;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006a	f3 0f 11 80 80
	01 00 00	 movss	 DWORD PTR [eax+384], xmm0

; 221  : 
; 222  : 			//
; 223  : 			// sound effects
; 224  : 			//
; 225  : 
; 226  : 			if (object_contains_sub_object_type (inst3d, OBJECT_3D_SUB_OBJECT_EFFECT_AFTERBURNER, 0, NULL))

  00072	6a 00		 push	 0
  00074	6a 00		 push	 0
  00076	6a 48		 push	 72			; 00000048H
  00078	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?object_contains_sub_object_type@@YGHPAUOBJECT_3D_INSTANCE@@HHPAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; object_contains_sub_object_type
  00081	85 c0		 test	 eax, eax
  00083	74 24		 je	 SHORT $LN7@set_local_

; 227  : 			{
; 228  : 				pause_local_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING1, 0.5);

  00085	51		 push	 ecx
  00086	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	6a 15		 push	 21			; 00000015H
  00095	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?pause_local_entity_sound_type@@YGHPAUENTITY@@HM@Z ; pause_local_entity_sound_type

; 229  : 
; 230  : 				resume_local_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING2);

  0009e	6a 16		 push	 22			; 00000016H
  000a0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?resume_local_entity_sound_type@@YGHPAUENTITY@@H@Z ; resume_local_entity_sound_type
$LN7@set_local_:

; 231  : 			}
; 232  : 		}

  000a9	eb 3b		 jmp	 SHORT $LN8@set_local_
$LN5@set_local_:

; 233  : 		else if (raw->afterburner_state >= FIXED_WING_AFTERBURNER_RETRACTING_START_STATE)

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000ae	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  000b6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4014000000000000
  000be	72 26		 jb	 SHORT $LN8@set_local_

; 234  : 		{
; 235  : 			//
; 236  : 			// currently being retracted - so reverse the animation
; 237  : 			//
; 238  : 
; 239  : 			raw->afterburner_state = 7.0 - raw->afterburner_state;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000c3	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  000cb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@401c000000000000
  000d3	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000d7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000db	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000de	f3 0f 11 81 80
	01 00 00	 movss	 DWORD PTR [ecx+384], xmm0
$LN8@set_local_:

; 240  : 		}
; 241  : 	}
; 242  : 	else

  000e6	e9 c3 00 00 00	 jmp	 $LN15@set_local_
$LN3@set_local_:

; 243  : 	{
; 244  : 		if (raw->afterburner_state < FIXED_WING_AFTERBURNER_EXTENDING_START_STATE)

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000ee	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  000f6	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000fe	66 0f 2f c8	 comisd	 xmm1, xmm0
  00102	76 05		 jbe	 SHORT $LN9@set_local_
  00104	e9 a5 00 00 00	 jmp	 $LN15@set_local_
$LN9@set_local_:

; 245  : 		{
; 246  : 		}
; 247  : 		else if (raw->afterburner_state >= FIXED_WING_AFTERBURNER_RETRACTING_START_STATE)

  00109	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0010c	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  00114	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4014000000000000
  0011c	72 05		 jb	 SHORT $LN11@set_local_
  0011e	e9 8b 00 00 00	 jmp	 $LN15@set_local_
$LN11@set_local_:

; 248  : 		{
; 249  : 		}
; 250  : 		else if (raw->afterburner_state <= FIXED_WING_AFTERBURNER_EXTENDING_END_STATE	)

  00123	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00126	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  0012e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4000000000000000
  00136	66 0f 2f c8	 comisd	 xmm1, xmm0
  0013a	72 28		 jb	 SHORT $LN13@set_local_

; 251  : 		{
; 252  : 			//
; 253  : 			// currently being extended - so reverse the animation
; 254  : 			//
; 255  : 
; 256  : 			raw->afterburner_state = 7.0 - raw->afterburner_state;

  0013c	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0013f	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  00147	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@401c000000000000
  0014f	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00153	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0015a	f3 0f 11 81 80
	01 00 00	 movss	 DWORD PTR [ecx+384], xmm0

; 257  : 		}
; 258  : 		else

  00162	eb 4a		 jmp	 SHORT $LN15@set_local_
$LN13@set_local_:

; 259  : 		{
; 260  : 			//
; 261  : 			// currently on - so turn them off
; 262  : 			//
; 263  : 
; 264  : 			raw->afterburner_state = FIXED_WING_AFTERBURNER_RETRACTING_START_STATE;

  00164	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00167	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0016f	f3 0f 11 80 80
	01 00 00	 movss	 DWORD PTR [eax+384], xmm0

; 265  : 
; 266  : 			//
; 267  : 			// sound effects
; 268  : 			//
; 269  : 
; 270  : 			if (object_contains_sub_object_type (inst3d, OBJECT_3D_SUB_OBJECT_EFFECT_AFTERBURNER, 0, NULL))

  00177	6a 00		 push	 0
  00179	6a 00		 push	 0
  0017b	6a 48		 push	 72			; 00000048H
  0017d	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?object_contains_sub_object_type@@YGHPAUOBJECT_3D_INSTANCE@@HHPAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; object_contains_sub_object_type
  00186	85 c0		 test	 eax, eax
  00188	74 24		 je	 SHORT $LN15@set_local_

; 271  : 			{
; 272  : 				pause_local_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING2, 0.5);

  0018a	51		 push	 ecx
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	6a 16		 push	 22			; 00000016H
  0019a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?pause_local_entity_sound_type@@YGHPAUENTITY@@HM@Z ; pause_local_entity_sound_type

; 273  : 
; 274  : 				resume_local_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING1);

  001a3	6a 15		 push	 21			; 00000015H
  001a5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ?resume_local_entity_sound_type@@YGHPAUENTITY@@H@Z ; resume_local_entity_sound_type
$LN15@set_local_:

; 275  : 			}
; 276  : 		}
; 277  : 	}
; 278  : }

  001ae	5f		 pop	 edi
  001af	5e		 pop	 esi
  001b0	5b		 pop	 ebx
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c2 08 00	 ret	 8
?set_local_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z ENDP ; set_local_fixed_wing_afterburner_state
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_anim.c
;	COMDAT ?set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z
_TEXT	SEGMENT
tv226 = -80						; size = 4
tv199 = -80						; size = 4
tv163 = -80						; size = 4
tv95 = -80						; size = 4
tv218 = -76						; size = 4
tv191 = -76						; size = 4
tv155 = -76						; size = 4
tv87 = -76						; size = 4
_inst3d$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_state$ = 12						; size = 4
?set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z PROC ; set_client_server_fixed_wing_afterburner_state, COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 100  : 	fixed_wing
; 101  : 		*raw;
; 102  : 
; 103  : 	object_3d_instance
; 104  : 		*inst3d;
; 105  : 
; 106  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_client
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_client:

; 107  : 
; 108  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 18		 je	 SHORT $LN3@set_client
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  00035	83 c0 09	 add	 eax, 9
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_client:

; 109  : 
; 110  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00048	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004e	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 111  : 
; 112  : 	inst3d = raw->ac.inst3d;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00054	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0005a	89 4d f8	 mov	 DWORD PTR _inst3d$[ebp], ecx

; 113  : 
; 114  : 	if (state)

  0005d	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  00061	0f 84 b1 01 00
	00		 je	 $LN4@set_client

; 115  : 	{
; 116  : 		#if DEBUG_MODULE
; 117  : 
; 118  : 		debug_log( "TURNING AFTERBURNER ON ( entity %d, %s )", en, entity_sub_type_aircraft_names [get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE)]);
; 119  : 
; 120  : 		#endif
; 121  : 
; 122  : 		if (raw->afterburner_state < FIXED_WING_AFTERBURNER_EXTENDING_START_STATE)

  00067	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0006a	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  00072	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0007a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0007e	0f 86 d0 00 00
	00		 jbe	 $LN6@set_client

; 123  : 		{
; 124  : 			//
; 125  : 			// currently off - so turn them on
; 126  : 			//
; 127  : 
; 128  : 			set_client_server_entity_float_value (en, FLOAT_TYPE_AFTERBURNER_STATE, FIXED_WING_AFTERBURNER_EXTENDING_START_STATE);

  00084	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00088	74 0a		 je	 SHORT $LN18@set_client
  0008a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	89 4d b4	 mov	 DWORD PTR tv87[ebp], ecx
  00092	eb 21		 jmp	 SHORT $LN19@set_client
$LN18@set_client:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  0009a	83 c2 1d	 add	 edx, 29			; 0000001dH
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN19@set_client:
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	85 c9		 test	 ecx, ecx
  000bc	74 09		 je	 SHORT $LN20@set_client
  000be	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
  000c5	eb 21		 jmp	 SHORT $LN21@set_client
$LN20@set_client:
  000c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  000cd	83 c2 1d	 add	 edx, 29			; 0000001dH
  000d0	52		 push	 edx
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e1	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN21@set_client:
  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	6a 00		 push	 0
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000fb	51		 push	 ecx
  000fc	69 55 b4 78 05
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 1400
  00103	8b 45 b0	 mov	 eax, DWORD PTR tv95[ebp]
  00106	8d 8c c2 00 00
	00 00		 lea	 ecx, DWORD PTR ?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*8]
  0010d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  00113	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00116	ff d0		 call	 eax

; 129  : 
; 130  : 			//
; 131  : 			// sound effects
; 132  : 			//
; 133  : 
; 134  : 			if (object_contains_sub_object_type (inst3d, OBJECT_3D_SUB_OBJECT_EFFECT_AFTERBURNER, 0, NULL))

  00118	6a 00		 push	 0
  0011a	6a 00		 push	 0
  0011c	6a 48		 push	 72			; 00000048H
  0011e	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?object_contains_sub_object_type@@YGHPAUOBJECT_3D_INSTANCE@@HHPAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; object_contains_sub_object_type
  00127	85 c0		 test	 eax, eax
  00129	74 24		 je	 SHORT $LN8@set_client

; 135  : 			{
; 136  : 				resume_client_server_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING2);

  0012b	6a 16		 push	 22			; 00000016H
  0012d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ?resume_client_server_entity_sound_type@@YGHPAUENTITY@@H@Z ; resume_client_server_entity_sound_type

; 137  : 
; 138  : 				pause_client_server_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING1, 0.5);

  00136	51		 push	 ecx
  00137	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	6a 15		 push	 21			; 00000015H
  00146	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ?pause_client_server_entity_sound_type@@YGHPAUENTITY@@HM@Z ; pause_client_server_entity_sound_type
$LN8@set_client:

; 139  : 			}
; 140  : 		}

  0014f	e9 bf 00 00 00	 jmp	 $LN9@set_client
$LN6@set_client:

; 141  : 		else if (raw->afterburner_state >= FIXED_WING_AFTERBURNER_RETRACTING_START_STATE)

  00154	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00157	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  0015f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4014000000000000
  00167	0f 82 a6 00 00
	00		 jb	 $LN9@set_client

; 142  : 		{
; 143  : 			//
; 144  : 			// currently being retracted - so reverse the animation
; 145  : 			//
; 146  : 
; 147  : 			set_client_server_entity_float_value (en, FLOAT_TYPE_AFTERBURNER_STATE, 7.0 - raw->afterburner_state);

  0016d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00171	74 0a		 je	 SHORT $LN22@set_client
  00173	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00176	8b 08		 mov	 ecx, DWORD PTR [eax]
  00178	89 4d b4	 mov	 DWORD PTR tv155[ebp], ecx
  0017b	eb 21		 jmp	 SHORT $LN23@set_client
$LN22@set_client:
  0017d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  00183	83 c2 30	 add	 edx, 48			; 00000030H
  00186	52		 push	 edx
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00197	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv155[ebp], 0
$LN23@set_client:
  0019e	b9 01 00 00 00	 mov	 ecx, 1
  001a3	85 c9		 test	 ecx, ecx
  001a5	74 09		 je	 SHORT $LN24@set_client
  001a7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv163[ebp], 0
  001ae	eb 21		 jmp	 SHORT $LN25@set_client
$LN24@set_client:
  001b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  001b6	83 c2 30	 add	 edx, 48			; 00000030H
  001b9	52		 push	 edx
  001ba	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ca	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv163[ebp], 0
$LN25@set_client:
  001d1	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  001d4	f3 0f 5a 81 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+384]
  001dc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@401c000000000000
  001e4	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001e8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001ec	51		 push	 ecx
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	6a 00		 push	 0
  001f4	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  001f7	52		 push	 edx
  001f8	69 45 b4 78 05
	00 00		 imul	 eax, DWORD PTR tv155[ebp], 1400
  001ff	8b 4d b0	 mov	 ecx, DWORD PTR tv163[ebp]
  00202	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[eax+ecx*8]
  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  0020e	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00211	ff d1		 call	 ecx
$LN9@set_client:

; 148  : 		}
; 149  : 	}
; 150  : 	else

  00213	e9 cb 01 00 00	 jmp	 $LN16@set_client
$LN4@set_client:

; 151  : 	{
; 152  : 		#if DEBUG_MODULE
; 153  : 
; 154  : 		debug_log( "TURNING AFTERBURNER OFF ( entity %d, %s )", en, entity_sub_type_aircraft_names [get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE)]);
; 155  : 
; 156  : 		#endif
; 157  : 
; 158  : 		if (raw->afterburner_state < FIXED_WING_AFTERBURNER_EXTENDING_START_STATE)

  00218	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0021b	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  00223	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0022b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0022f	76 05		 jbe	 SHORT $LN10@set_client
  00231	e9 ad 01 00 00	 jmp	 $LN16@set_client
$LN10@set_client:

; 159  : 		{
; 160  : 		}
; 161  : 		else if (raw->afterburner_state >= FIXED_WING_AFTERBURNER_RETRACTING_START_STATE)

  00236	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00239	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  00241	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4014000000000000
  00249	72 05		 jb	 SHORT $LN12@set_client
  0024b	e9 93 01 00 00	 jmp	 $LN16@set_client
$LN12@set_client:

; 162  : 		{
; 163  : 		}
; 164  : 		else if (raw->afterburner_state <= FIXED_WING_AFTERBURNER_EXTENDING_END_STATE	)

  00250	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00253	f3 0f 5a 80 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+384]
  0025b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4000000000000000
  00263	66 0f 2f c8	 comisd	 xmm1, xmm0
  00267	0f 82 ab 00 00
	00		 jb	 $LN14@set_client

; 165  : 		{
; 166  : 			//
; 167  : 			// currently being extended - so reverse the animation
; 168  : 			//
; 169  : 
; 170  : 			set_client_server_entity_float_value (en, FLOAT_TYPE_AFTERBURNER_STATE, 7.0 - raw->afterburner_state);

  0026d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00271	74 0a		 je	 SHORT $LN26@set_client
  00273	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00276	8b 08		 mov	 ecx, DWORD PTR [eax]
  00278	89 4d b4	 mov	 DWORD PTR tv191[ebp], ecx
  0027b	eb 21		 jmp	 SHORT $LN27@set_client
$LN26@set_client:
  0027d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  00283	83 c2 47	 add	 edx, 71			; 00000047H
  00286	52		 push	 edx
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00297	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv191[ebp], 0
$LN27@set_client:
  0029e	b9 01 00 00 00	 mov	 ecx, 1
  002a3	85 c9		 test	 ecx, ecx
  002a5	74 09		 je	 SHORT $LN28@set_client
  002a7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
  002ae	eb 21		 jmp	 SHORT $LN29@set_client
$LN28@set_client:
  002b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  002b6	83 c2 47	 add	 edx, 71			; 00000047H
  002b9	52		 push	 edx
  002ba	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ca	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$LN29@set_client:
  002d1	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  002d4	f3 0f 5a 81 80
	01 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+384]
  002dc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@401c000000000000
  002e4	f2 0f 5c c8	 subsd	 xmm1, xmm0
  002e8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002ec	51		 push	 ecx
  002ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f2	6a 00		 push	 0
  002f4	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  002f7	52		 push	 edx
  002f8	69 45 b4 78 05
	00 00		 imul	 eax, DWORD PTR tv191[ebp], 1400
  002ff	8b 4d b0	 mov	 ecx, DWORD PTR tv199[ebp]
  00302	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[eax+ecx*8]
  00309	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  0030e	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00311	ff d1		 call	 ecx

; 171  : 		}
; 172  : 		else

  00313	e9 cb 00 00 00	 jmp	 $LN16@set_client
$LN14@set_client:

; 173  : 		{
; 174  : 			//
; 175  : 			// currently on - so turn them off
; 176  : 			//
; 177  : 
; 178  : 			set_client_server_entity_float_value (en, FLOAT_TYPE_AFTERBURNER_STATE, FIXED_WING_AFTERBURNER_RETRACTING_START_STATE);

  00318	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0031c	74 0a		 je	 SHORT $LN30@set_client
  0031e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00321	8b 08		 mov	 ecx, DWORD PTR [eax]
  00323	89 4d b4	 mov	 DWORD PTR tv218[ebp], ecx
  00326	eb 21		 jmp	 SHORT $LN31@set_client
$LN30@set_client:
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  0032e	83 c2 4f	 add	 edx, 79			; 0000004fH
  00331	52		 push	 edx
  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00342	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
$LN31@set_client:
  00349	b9 01 00 00 00	 mov	 ecx, 1
  0034e	85 c9		 test	 ecx, ecx
  00350	74 09		 je	 SHORT $LN32@set_client
  00352	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
  00359	eb 21		 jmp	 SHORT $LN33@set_client
$LN32@set_client:
  0035b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z@4JA
  00361	83 c2 4f	 add	 edx, 79			; 0000004fH
  00364	52		 push	 edx
  00365	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BNACCCEB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0036f	50		 push	 eax
  00370	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00375	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$LN33@set_client:
  0037c	51		 push	 ecx
  0037d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00385	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038a	6a 00		 push	 0
  0038c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0038f	51		 push	 ecx
  00390	69 55 b4 78 05
	00 00		 imul	 edx, DWORD PTR tv218[ebp], 1400
  00397	8b 45 b0	 mov	 eax, DWORD PTR tv226[ebp]
  0039a	8d 8c c2 00 00
	00 00		 lea	 ecx, DWORD PTR ?fn_set_client_server_entity_float_value@@3PAY1KP@1P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*8]
  003a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  003a7	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  003aa	ff d0		 call	 eax

; 179  : 
; 180  : 			//
; 181  : 			// sound effects
; 182  : 			//
; 183  : 
; 184  : 			if (object_contains_sub_object_type (inst3d, OBJECT_3D_SUB_OBJECT_EFFECT_AFTERBURNER, 0, NULL))

  003ac	6a 00		 push	 0
  003ae	6a 00		 push	 0
  003b0	6a 48		 push	 72			; 00000048H
  003b2	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  003b5	50		 push	 eax
  003b6	e8 00 00 00 00	 call	 ?object_contains_sub_object_type@@YGHPAUOBJECT_3D_INSTANCE@@HHPAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; object_contains_sub_object_type
  003bb	85 c0		 test	 eax, eax
  003bd	74 24		 je	 SHORT $LN16@set_client

; 185  : 			{
; 186  : 				resume_client_server_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING1);

  003bf	6a 15		 push	 21			; 00000015H
  003c1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003c4	50		 push	 eax
  003c5	e8 00 00 00 00	 call	 ?resume_client_server_entity_sound_type@@YGHPAUENTITY@@H@Z ; resume_client_server_entity_sound_type

; 187  : 
; 188  : 				pause_client_server_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING2, 0.5);

  003ca	51		 push	 ecx
  003cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	6a 16		 push	 22			; 00000016H
  003da	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003dd	50		 push	 eax
  003de	e8 00 00 00 00	 call	 ?pause_client_server_entity_sound_type@@YGHPAUENTITY@@HM@Z ; pause_client_server_entity_sound_type
$LN16@set_client:

; 189  : 			}
; 190  : 		}
; 191  : 	}
; 192  : }

  003e3	5f		 pop	 edi
  003e4	5e		 pop	 esi
  003e5	5b		 pop	 ebx
  003e6	8b e5		 mov	 esp, ebp
  003e8	5d		 pop	 ebp
  003e9	c2 08 00	 ret	 8
?set_client_server_fixed_wing_afterburner_state@@YGXPAUENTITY@@H@Z ENDP ; set_client_server_fixed_wing_afterburner_state
_TEXT	ENDS
END
