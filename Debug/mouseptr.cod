; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\mouseptr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?mouse_graphic_needs_restoring@@3HA		; mouse_graphic_needs_restoring
PUBLIC	?mouse_trail_positions_array@@3PAUMOUSE_TRAIL_POSITION@@A ; mouse_trail_positions_array
PUBLIC	?mouse_trails@@3PCUMOUSE_TRAIL_POSITION@@C	; mouse_trails
PUBLIC	?saved_screen_mouse_rectangle@@3UtagRECT@@A	; saved_screen_mouse_rectangle
PUBLIC	?saved_screen_screen_rectangle@@3UtagRECT@@A	; saved_screen_screen_rectangle
PUBLIC	?saved_back_screen_mouse_rectangle@@3UtagRECT@@A ; saved_back_screen_mouse_rectangle
PUBLIC	?saved_back_screen_screen_rectangle@@3UtagRECT@@A ; saved_back_screen_screen_rectangle
_BSS	SEGMENT
?mouse_graphic_needs_restoring@@3HA DD 01H DUP (?)	; mouse_graphic_needs_restoring
?mouse_trail_positions_array@@3PAUMOUSE_TRAIL_POSITION@@A DB 01000H DUP (?) ; mouse_trail_positions_array
?mouse_trails@@3PCUMOUSE_TRAIL_POSITION@@C DD 01H DUP (?) ; mouse_trails
?saved_screen_mouse_rectangle@@3UtagRECT@@A DB 010H DUP (?) ; saved_screen_mouse_rectangle
?saved_screen_screen_rectangle@@3UtagRECT@@A DB 010H DUP (?) ; saved_screen_screen_rectangle
?saved_back_screen_mouse_rectangle@@3UtagRECT@@A DB 010H DUP (?) ; saved_back_screen_mouse_rectangle
?saved_back_screen_screen_rectangle@@3UtagRECT@@A DB 010H DUP (?) ; saved_back_screen_screen_rectangle
_BSS	ENDS
PUBLIC	?set_mouse_graphic_on@@YGXXZ			; set_mouse_graphic_on
PUBLIC	?set_mouse_graphic_off@@YGXXZ			; set_mouse_graphic_off
PUBLIC	?get_mouse_graphic_on@@YGHXZ			; get_mouse_graphic_on
PUBLIC	?initialise_mouse_pointer@@YGXPAG@Z		; initialise_mouse_pointer
PUBLIC	?deinitialise_mouse_pointer@@YGXXZ		; deinitialise_mouse_pointer
PUBLIC	?update_mouse_pointer@@YGXXZ			; update_mouse_pointer
PUBLIC	?flip_video_screen_with_mouse@@YGXXZ		; flip_video_screen_with_mouse
PUBLIC	?draw_raw_mouse_pointer@@YGXHH@Z		; draw_raw_mouse_pointer
PUBLIC	?save_frontbuffer_screen_under_mouse_pointer@@YGXHH@Z ; save_frontbuffer_screen_under_mouse_pointer
PUBLIC	?restore_screen_under_mouse_pointer@@YGXXZ	; restore_screen_under_mouse_pointer
PUBLIC	?__LINE__Var@?0??flip_video_screen_with_mouse@@YGXXZ@4JA ; `flip_video_screen_with_mouse'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@DMMIHBAE@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0N@OOBGIFBC@video_screen@			; `string'
EXTRN	_memset:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_mouse_x@@YGHXZ:PROC			; get_mouse_x
EXTRN	?get_mouse_y@@YGHXZ:PROC			; get_mouse_y
EXTRN	?ddraw_flip_surface@@YGHXZ:PROC			; ddraw_flip_surface
EXTRN	?create_screen@@YGPAUSCREEN@@HHH@Z:PROC		; create_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?get_active_screen@@YGPAUSCREEN@@XZ:PROC	; get_active_screen
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z:PROC ; get_general_colour_value
EXTRN	?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z:PROC ; f3d_surface_blt
EXTRN	?application_window@@3PAUHWND__@@A:DWORD	; application_window
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?application_video_height@@3HA:DWORD		; application_video_height
EXTRN	?ddraw@@3Udirect_draw_data@@A:BYTE		; ddraw
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
_BSS	SEGMENT
?mouse_graphic_position_x@@3HA DD 01H DUP (?)		; mouse_graphic_position_x
?mouse_graphic_position_y@@3HA DD 01H DUP (?)		; mouse_graphic_position_y
?mouse_graphic_on@@3HA DD 01H DUP (?)			; mouse_graphic_on
?mouse_graphic_drawn@@3HA DD 01H DUP (?)		; mouse_graphic_drawn
?mouse_pointer_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; mouse_pointer_screen
?mouse_pointer_background@@3PAUSCREEN@@A DD 01H DUP (?)	; mouse_pointer_background
?mouse_backbuffer_pointer_background@@3PAUSCREEN@@A DD 01H DUP (?) ; mouse_backbuffer_pointer_background
_BSS	ENDS
;	COMDAT ??_C@_0N@OOBGIFBC@video_screen@
CONST	SEGMENT
??_C@_0N@OOBGIFBC@video_screen@ DB 'video_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DMMIHBAE@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DJ@DMMIHBAE@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\mouseptr.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??flip_video_screen_with_mouse@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??flip_video_screen_with_mouse@@YGXXZ@4JA DD 01e1H ; `flip_video_screen_with_mouse'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?mouse_pointer_width@@3HA DD 0aH			; mouse_pointer_width
?mouse_pointer_height@@3HA DD 014H			; mouse_pointer_height
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?swap_mouse_screen_buffers@@YGXXZ
_TEXT	SEGMENT
_temp$ = -4						; size = 4
?swap_mouse_screen_buffers@@YGXXZ PROC			; swap_mouse_screen_buffers, COMDAT

; 827  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 828  : 
; 829  : 	screen
; 830  : 		*temp;
; 831  : 
; 832  : 	saved_screen_mouse_rectangle = saved_back_screen_mouse_rectangle;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A, eax
  00013	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+4
  00019	89 0d 04 00 00
	00		 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+4, ecx
  0001f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+8
  00025	89 15 08 00 00
	00		 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+8, edx
  0002b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+12
  00030	a3 0c 00 00 00	 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+12, eax

; 833  : 	saved_screen_screen_rectangle = saved_back_screen_screen_rectangle;

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A, eax
  0003f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+4
  00045	89 0d 04 00 00
	00		 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+4, ecx
  0004b	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+8
  00051	89 15 08 00 00
	00		 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+8, edx
  00057	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+12
  0005c	a3 0c 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+12, eax

; 834  : 
; 835  : 	temp = mouse_pointer_background;

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_background@@3PAUSCREEN@@A
  00066	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax

; 836  : 
; 837  : 	mouse_pointer_background = mouse_backbuffer_pointer_background;

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_backbuffer_pointer_background@@3PAUSCREEN@@A
  0006e	a3 00 00 00 00	 mov	 DWORD PTR ?mouse_pointer_background@@3PAUSCREEN@@A, eax

; 838  : 
; 839  : 	mouse_backbuffer_pointer_background = temp;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?mouse_backbuffer_pointer_background@@3PAUSCREEN@@A, eax

; 840  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?swap_mouse_screen_buffers@@YGXXZ ENDP			; swap_mouse_screen_buffers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?draw_backbuffer_mouse_pointer@@YGXHH@Z
_TEXT	SEGMENT
_source_rc$ = -132					; size = 16
_my_rc$ = -116						; size = 16
_ddbltfx$ = -100					; size = 100
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?draw_backbuffer_mouse_pointer@@YGXHH@Z PROC		; draw_backbuffer_mouse_pointer, COMDAT

; 756  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 757  : 
; 758  : 	DDBLTFX
; 759  : 		ddbltfx;
; 760  : 
; 761  : 	RECT
; 762  : 		my_rc,
; 763  : 		source_rc;
; 764  : 
; 765  : 	if ( ( mouse_graphic_on ) && ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00013	0f 84 54 01 00
	00		 je	 $LN1@draw_backb
  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00020	0f 84 47 01 00
	00		 je	 $LN1@draw_backb
  00026	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0002d	0f 84 3a 01 00
	00		 je	 $LN1@draw_backb
  00033	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0003a	0f 84 2d 01 00
	00		 je	 $LN1@draw_backb

; 766  : 	{
; 767  : 
; 768  : 		my_rc.left = 0;

  00040	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _my_rc$[ebp], 0

; 769  : 
; 770  : 		my_rc.top = 0;

  00047	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _my_rc$[ebp+4], 0

; 771  : 
; 772  : 		source_rc.left = 0;

  0004e	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _source_rc$[ebp], 0

; 773  : 
; 774  : 		source_rc.top = 0;

  00058	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _source_rc$[ebp+4], 0

; 775  : 
; 776  : 		source_rc.right = mouse_pointer_width;

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  00064	89 45 84	 mov	 DWORD PTR _source_rc$[ebp+8], eax

; 777  : 
; 778  : 		source_rc.bottom = mouse_pointer_height;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  0006c	89 45 88	 mov	 DWORD PTR _source_rc$[ebp+12], eax

; 779  : 
; 780  : 		//
; 781  : 		// Do not adjust the back buffer mouse position under a window run
; 782  : 		//
; 783  : 
; 784  : 		my_rc.left += x;

  0006f	8b 45 8c	 mov	 eax, DWORD PTR _my_rc$[ebp]
  00072	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00075	89 45 8c	 mov	 DWORD PTR _my_rc$[ebp], eax

; 785  : 
; 786  : 		my_rc.top += y;

  00078	8b 45 90	 mov	 eax, DWORD PTR _my_rc$[ebp+4]
  0007b	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  0007e	89 45 90	 mov	 DWORD PTR _my_rc$[ebp+4], eax

; 787  : 
; 788  : 		my_rc.right = my_rc.left + mouse_pointer_width;

  00081	8b 45 8c	 mov	 eax, DWORD PTR _my_rc$[ebp]
  00084	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  0008a	89 45 94	 mov	 DWORD PTR _my_rc$[ebp+8], eax

; 789  : 
; 790  : 		my_rc.bottom = my_rc.top + mouse_pointer_height;

  0008d	8b 45 90	 mov	 eax, DWORD PTR _my_rc$[ebp+4]
  00090	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00096	89 45 98	 mov	 DWORD PTR _my_rc$[ebp+12], eax

; 791  : 
; 792  : 		if ( ( x + mouse_pointer_width ) > application_video_width )

  00099	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0009c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000a2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000a8	7e 2e		 jle	 SHORT $LN3@draw_backb

; 793  : 		{
; 794  : 
; 795  : 			source_rc.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000aa	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000ad	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000b3	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000b9	8b 4d 84	 mov	 ecx, DWORD PTR _source_rc$[ebp+8]
  000bc	2b c8		 sub	 ecx, eax
  000be	89 4d 84	 mov	 DWORD PTR _source_rc$[ebp+8], ecx

; 796  : 
; 797  : 			my_rc.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000c1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000c4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000ca	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000d0	8b 4d 94	 mov	 ecx, DWORD PTR _my_rc$[ebp+8]
  000d3	2b c8		 sub	 ecx, eax
  000d5	89 4d 94	 mov	 DWORD PTR _my_rc$[ebp+8], ecx
$LN3@draw_backb:

; 798  : 		}
; 799  : 
; 800  : 		if ( ( y + mouse_pointer_height ) > application_video_height )

  000d8	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000db	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  000e1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  000e7	7e 2e		 jle	 SHORT $LN4@draw_backb

; 801  : 		{
; 802  : 
; 803  : 			source_rc.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000ec	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  000f2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  000f8	8b 4d 88	 mov	 ecx, DWORD PTR _source_rc$[ebp+12]
  000fb	2b c8		 sub	 ecx, eax
  000fd	89 4d 88	 mov	 DWORD PTR _source_rc$[ebp+12], ecx

; 804  : 
; 805  : 			my_rc.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  00100	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00103	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00109	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  0010f	8b 4d 98	 mov	 ecx, DWORD PTR _my_rc$[ebp+12]
  00112	2b c8		 sub	 ecx, eax
  00114	89 4d 98	 mov	 DWORD PTR _my_rc$[ebp+12], ecx
$LN4@draw_backb:

; 806  : 		}
; 807  : 
; 808  : 		memset ( &ddbltfx, 0, sizeof ( ddbltfx ) );

  00117	6a 64		 push	 100			; 00000064H
  00119	6a 00		 push	 0
  0011b	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _memset
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH

; 809  : 
; 810  : 		ddbltfx.dwSize = sizeof ( ddbltfx );

  00127	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp], 100 ; 00000064H

; 811  : 
; 812  : 		ddbltfx.dwROP = SRCCOPY;

  0012e	c7 45 a4 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$[ebp+8], 13369376 ; 00cc0020H

; 813  : 
; 814  : 		ddbltfx.ddckSrcColorkey.dwColorSpaceLowValue = 0;

  00135	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp+92], 0

; 815  : 
; 816  : 		ddbltfx.ddckSrcColorkey.dwColorSpaceHighValue = 0;

  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp+96], 0

; 817  : 
; 818  : 		f3d_surface_blt ( ddraw.lpBackBuffer, &my_rc, mouse_pointer_screen->surface, &source_rc, DDBLT_ROP | DDBLT_KEYSRCOVERRIDE | DDBLT_WAIT, &ddbltfx );

  00143	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  00146	50		 push	 eax
  00147	68 00 00 03 01	 push	 16973824		; 01030000H
  0014c	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _source_rc$[ebp]
  00152	51		 push	 ecx
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mouse_pointer_screen@@3PAUSCREEN@@A
  00159	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0015c	50		 push	 eax
  0015d	8d 4d 8c	 lea	 ecx, DWORD PTR _my_rc$[ebp]
  00160	51		 push	 ecx
  00161	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@draw_backb:

; 819  : 	}
; 820  : }

  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 08 00	 ret	 8
?draw_backbuffer_mouse_pointer@@YGXHH@Z ENDP		; draw_backbuffer_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?restore_backbuffer_screen_under_mouse_pointer@@YGXXZ
_TEXT	SEGMENT
_ddbltfx$1 = -100					; size = 100
?restore_backbuffer_screen_under_mouse_pointer@@YGXXZ PROC ; restore_backbuffer_screen_under_mouse_pointer, COMDAT

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 733  : 	if ( ( mouse_graphic_on ) && ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00013	74 51		 je	 SHORT $LN1@restore_ba
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  0001c	74 48		 je	 SHORT $LN1@restore_ba
  0001e	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  00025	74 3f		 je	 SHORT $LN1@restore_ba
  00027	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0002e	74 36		 je	 SHORT $LN1@restore_ba

; 734  : 	{
; 735  : 
; 736  : 		DDBLTFX
; 737  : 			ddbltfx;
; 738  : 
; 739  : 		ddbltfx.dwSize = sizeof ( ddbltfx );

  00030	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$1[ebp], 100 ; 00000064H

; 740  : 
; 741  : 		ddbltfx.dwROP = SRCCOPY;

  00037	c7 45 a4 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$1[ebp+8], 13369376 ; 00cc0020H

; 742  : 
; 743  : 		f3d_surface_blt ( ddraw.lpBackBuffer,

  0003e	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$1[ebp]
  00041	50		 push	 eax
  00042	68 00 00 02 01	 push	 16908288		; 01020000H
  00047	68 00 00 00 00	 push	 OFFSET ?saved_screen_mouse_rectangle@@3UtagRECT@@A ; saved_screen_mouse_rectangle
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse_pointer_background@@3PAUSCREEN@@A
  00052	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ?saved_screen_screen_rectangle@@3UtagRECT@@A ; saved_screen_screen_rectangle
  0005b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@restore_ba:

; 744  : 															&saved_screen_screen_rectangle,
; 745  : 															mouse_pointer_background->surface,
; 746  : 															&saved_screen_mouse_rectangle,
; 747  : 															DDBLT_ROP | DDBLT_WAIT, &ddbltfx );
; 748  : 	}
; 749  : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?restore_backbuffer_screen_under_mouse_pointer@@YGXXZ ENDP ; restore_backbuffer_screen_under_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?restore_screen_under_mouse_pointer@@YGXXZ
_TEXT	SEGMENT
_my_rc$1 = -132						; size = 16
_screen_rectangle$2 = -116				; size = 16
_ddbltfx$3 = -100					; size = 100
?restore_screen_under_mouse_pointer@@YGXXZ PROC		; restore_screen_under_mouse_pointer, COMDAT

; 683  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 684  : 	if ( ( mouse_graphic_on ) && ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00013	0f 84 eb 00 00
	00		 je	 $LN1@restore_sc
  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00020	0f 84 de 00 00
	00		 je	 $LN1@restore_sc
  00026	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0002d	0f 84 d1 00 00
	00		 je	 $LN1@restore_sc
  00033	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0003a	0f 84 c4 00 00
	00		 je	 $LN1@restore_sc

; 685  : 	{
; 686  : 
; 687  : 		DDBLTFX
; 688  : 			ddbltfx;
; 689  : 
; 690  : 		RECT
; 691  : 			screen_rectangle;
; 692  : 
; 693  : 		screen_rectangle = saved_screen_screen_rectangle;

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A
  00045	89 45 8c	 mov	 DWORD PTR _screen_rectangle$2[ebp], eax
  00048	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+4
  0004e	89 4d 90	 mov	 DWORD PTR _screen_rectangle$2[ebp+4], ecx
  00051	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+8
  00057	89 55 94	 mov	 DWORD PTR _screen_rectangle$2[ebp+8], edx
  0005a	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+12
  0005f	89 45 98	 mov	 DWORD PTR _screen_rectangle$2[ebp+12], eax

; 694  : 
; 695  : 		if ( ddraw.application_windowed )

  00062	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  00069	74 63		 je	 SHORT $LN3@restore_sc

; 696  : 		{
; 697  : 
; 698  : 			RECT
; 699  : 				my_rc;
; 700  : 
; 701  : 			//
; 702  : 			// Adjust the top left part of the rectangle.
; 703  : 			//
; 704  : 
; 705  : 			GetClientRect ( application_window, &my_rc );

  0006b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _my_rc$1[ebp]
  00071	50		 push	 eax
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00078	51		 push	 ecx
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 706  : 			ClientToScreen ( application_window, ( LPPOINT ) &my_rc );

  0007f	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _my_rc$1[ebp]
  00085	50		 push	 eax
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0008c	51		 push	 ecx
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 707  : 			ClientToScreen ( application_window, ( LPPOINT ) &my_rc + 1 );

  00093	8d 45 84	 lea	 eax, DWORD PTR _my_rc$1[ebp+8]
  00096	50		 push	 eax
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 708  : 
; 709  : 			screen_rectangle.left += my_rc.left;

  000a4	8b 45 8c	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp]
  000a7	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _my_rc$1[ebp]
  000ad	89 45 8c	 mov	 DWORD PTR _screen_rectangle$2[ebp], eax

; 710  : 			screen_rectangle.right += my_rc.left;

  000b0	8b 45 94	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp+8]
  000b3	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _my_rc$1[ebp]
  000b9	89 45 94	 mov	 DWORD PTR _screen_rectangle$2[ebp+8], eax

; 711  : 			screen_rectangle.top += my_rc.top;

  000bc	8b 45 90	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp+4]
  000bf	03 45 80	 add	 eax, DWORD PTR _my_rc$1[ebp+4]
  000c2	89 45 90	 mov	 DWORD PTR _screen_rectangle$2[ebp+4], eax

; 712  : 			screen_rectangle.bottom += my_rc.top;

  000c5	8b 45 98	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp+12]
  000c8	03 45 80	 add	 eax, DWORD PTR _my_rc$1[ebp+4]
  000cb	89 45 98	 mov	 DWORD PTR _screen_rectangle$2[ebp+12], eax
$LN3@restore_sc:

; 713  : 		}
; 714  : 
; 715  : 		ddbltfx.dwSize = sizeof ( ddbltfx );

  000ce	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$3[ebp], 100 ; 00000064H

; 716  : 
; 717  : 		ddbltfx.dwROP = SRCCOPY;

  000d5	c7 45 a4 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$3[ebp+8], 13369376 ; 00cc0020H

; 718  : 
; 719  : 		f3d_surface_blt ( ddraw.lpFrontBuffer,

  000dc	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$3[ebp]
  000df	50		 push	 eax
  000e0	68 00 00 02 01	 push	 16908288		; 01020000H
  000e5	68 00 00 00 00	 push	 OFFSET ?saved_screen_mouse_rectangle@@3UtagRECT@@A ; saved_screen_mouse_rectangle
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse_pointer_background@@3PAUSCREEN@@A
  000f0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000f3	52		 push	 edx
  000f4	8d 45 8c	 lea	 eax, DWORD PTR _screen_rectangle$2[ebp]
  000f7	50		 push	 eax
  000f8	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@restore_sc:

; 720  : 															&screen_rectangle,
; 721  : 															mouse_pointer_background->surface,
; 722  : 															&saved_screen_mouse_rectangle,
; 723  : 															DDBLT_ROP | DDBLT_WAIT, &ddbltfx );
; 724  : 	}
; 725  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?restore_screen_under_mouse_pointer@@YGXXZ ENDP		; restore_screen_under_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?save_backbuffer_screen_under_mouse_pointer@@YGXHH@Z
_TEXT	SEGMENT
_ddbltfx$ = -100					; size = 100
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?save_backbuffer_screen_under_mouse_pointer@@YGXHH@Z PROC ; save_backbuffer_screen_under_mouse_pointer, COMDAT

; 620  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 621  : 
; 622  : 	DDBLTFX
; 623  : 		ddbltfx;
; 624  : 
; 625  : 	if ( ( mouse_graphic_on ) && ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00013	0f 84 7a 01 00
	00		 je	 $LN1@save_backb
  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00020	0f 84 6d 01 00
	00		 je	 $LN1@save_backb
  00026	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0002d	0f 84 60 01 00
	00		 je	 $LN1@save_backb
  00033	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0003a	0f 84 53 01 00
	00		 je	 $LN1@save_backb

; 626  : 	{
; 627  : 
; 628  : 		saved_back_screen_screen_rectangle.left = 0;

  00040	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A, 0

; 629  : 
; 630  : 		saved_back_screen_screen_rectangle.top = 0;

  0004a	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+4, 0

; 631  : 
; 632  : 		saved_back_screen_mouse_rectangle.left = 0;

  00054	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A, 0

; 633  : 
; 634  : 		saved_back_screen_mouse_rectangle.top = 0;

  0005e	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+4, 0

; 635  : 
; 636  : 		saved_back_screen_mouse_rectangle.right = mouse_pointer_width;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  0006d	a3 08 00 00 00	 mov	 DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+8, eax

; 637  : 
; 638  : 		saved_back_screen_mouse_rectangle.bottom = mouse_pointer_height;

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00077	a3 0c 00 00 00	 mov	 DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+12, eax

; 639  : 
; 640  : 		saved_back_screen_screen_rectangle.left += x;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A
  00081	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00084	a3 00 00 00 00	 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A, eax

; 641  : 
; 642  : 		saved_back_screen_screen_rectangle.top += y;

  00089	a1 04 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+4
  0008e	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  00091	a3 04 00 00 00	 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+4, eax

; 643  : 
; 644  : 		saved_back_screen_screen_rectangle.right = saved_back_screen_screen_rectangle.left + mouse_pointer_width;

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A
  0009b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000a1	a3 08 00 00 00	 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+8, eax

; 645  : 
; 646  : 		saved_back_screen_screen_rectangle.bottom = saved_back_screen_screen_rectangle.top + mouse_pointer_height;

  000a6	a1 04 00 00 00	 mov	 eax, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+4
  000ab	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  000b1	a3 0c 00 00 00	 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+12, eax

; 647  : 
; 648  : 		if ( ( x + mouse_pointer_width ) > application_video_width )

  000b6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000b9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000bf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000c5	7e 3a		 jle	 SHORT $LN3@save_backb

; 649  : 		{
; 650  : 
; 651  : 			saved_back_screen_mouse_rectangle.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000c7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000ca	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000d0	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000d6	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+8
  000dc	2b c8		 sub	 ecx, eax
  000de	89 0d 08 00 00
	00		 mov	 DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+8, ecx

; 652  : 
; 653  : 			saved_back_screen_screen_rectangle.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000e4	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000e7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000ed	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000f3	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+8
  000f9	2b c8		 sub	 ecx, eax
  000fb	89 0d 08 00 00
	00		 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+8, ecx
$LN3@save_backb:

; 654  : 		}
; 655  : 
; 656  : 		if ( ( y + mouse_pointer_height ) > application_video_height )

  00101	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00104	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  0010a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  00110	7e 3a		 jle	 SHORT $LN4@save_backb

; 657  : 		{
; 658  : 
; 659  : 			saved_back_screen_mouse_rectangle.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  00112	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00115	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  0011b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  00121	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+12
  00127	2b c8		 sub	 ecx, eax
  00129	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A+12, ecx

; 660  : 
; 661  : 			saved_back_screen_screen_rectangle.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  0012f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00132	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00138	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  0013e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+12
  00144	2b c8		 sub	 ecx, eax
  00146	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?saved_back_screen_screen_rectangle@@3UtagRECT@@A+12, ecx
$LN4@save_backb:

; 662  : 		}
; 663  : 
; 664  : 		memset ( &ddbltfx, 0, sizeof ( ddbltfx ) );

  0014c	6a 64		 push	 100			; 00000064H
  0014e	6a 00		 push	 0
  00150	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memset
  00159	83 c4 0c	 add	 esp, 12			; 0000000cH

; 665  : 
; 666  : 		ddbltfx.dwSize = sizeof ( ddbltfx );

  0015c	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp], 100 ; 00000064H

; 667  : 
; 668  : 		ddbltfx.dwROP = SRCCOPY;

  00163	c7 45 a4 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$[ebp+8], 13369376 ; 00cc0020H

; 669  : 
; 670  : 		f3d_surface_blt ( mouse_backbuffer_pointer_background->surface,

  0016a	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  0016d	50		 push	 eax
  0016e	68 00 00 02 01	 push	 16908288		; 01020000H
  00173	68 00 00 00 00	 push	 OFFSET ?saved_back_screen_screen_rectangle@@3UtagRECT@@A ; saved_back_screen_screen_rectangle
  00178	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  0017e	51		 push	 ecx
  0017f	68 00 00 00 00	 push	 OFFSET ?saved_back_screen_mouse_rectangle@@3UtagRECT@@A ; saved_back_screen_mouse_rectangle
  00184	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mouse_backbuffer_pointer_background@@3PAUSCREEN@@A
  0018a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@save_backb:

; 671  : 															&saved_back_screen_mouse_rectangle,
; 672  : 															ddraw.lpBackBuffer,
; 673  : 															&saved_back_screen_screen_rectangle,
; 674  : 															DDBLT_ROP | DDBLT_WAIT, &ddbltfx );
; 675  : 	}
; 676  : }

  00193	5f		 pop	 edi
  00194	5e		 pop	 esi
  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 08 00	 ret	 8
?save_backbuffer_screen_under_mouse_pointer@@YGXHH@Z ENDP ; save_backbuffer_screen_under_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?save_frontbuffer_screen_under_mouse_pointer@@YGXHH@Z
_TEXT	SEGMENT
_my_rc$1 = -132						; size = 16
_screen_rectangle$2 = -116				; size = 16
_ddbltfx$ = -100					; size = 100
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?save_frontbuffer_screen_under_mouse_pointer@@YGXHH@Z PROC ; save_frontbuffer_screen_under_mouse_pointer, COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 533  : 
; 534  : 	DDBLTFX
; 535  : 		ddbltfx;
; 536  : 
; 537  : 	if ( ( mouse_graphic_on ) && ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00013	0f 84 06 02 00
	00		 je	 $LN1@save_front
  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00020	0f 84 f9 01 00
	00		 je	 $LN1@save_front
  00026	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0002d	0f 84 ec 01 00
	00		 je	 $LN1@save_front
  00033	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0003a	0f 84 df 01 00
	00		 je	 $LN1@save_front

; 538  : 	{
; 539  : 
; 540  : 		RECT
; 541  : 			screen_rectangle;
; 542  : 
; 543  : 		saved_screen_screen_rectangle.left = 0;

  00040	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A, 0

; 544  : 
; 545  : 		saved_screen_screen_rectangle.top = 0;

  0004a	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+4, 0

; 546  : 
; 547  : 		saved_screen_mouse_rectangle.left = 0;

  00054	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A, 0

; 548  : 
; 549  : 		saved_screen_mouse_rectangle.top = 0;

  0005e	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+4, 0

; 550  : 
; 551  : 		saved_screen_mouse_rectangle.right = mouse_pointer_width;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  0006d	a3 08 00 00 00	 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+8, eax

; 552  : 
; 553  : 		saved_screen_mouse_rectangle.bottom = mouse_pointer_height;

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00077	a3 0c 00 00 00	 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+12, eax

; 554  : 
; 555  : 		saved_screen_screen_rectangle.left += x;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A
  00081	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00084	a3 00 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A, eax

; 556  : 
; 557  : 		saved_screen_screen_rectangle.top += y;

  00089	a1 04 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+4
  0008e	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  00091	a3 04 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+4, eax

; 558  : 
; 559  : 		saved_screen_screen_rectangle.right = saved_screen_screen_rectangle.left + mouse_pointer_width;

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A
  0009b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000a1	a3 08 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+8, eax

; 560  : 
; 561  : 		saved_screen_screen_rectangle.bottom = saved_screen_screen_rectangle.top + mouse_pointer_height;

  000a6	a1 04 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+4
  000ab	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  000b1	a3 0c 00 00 00	 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+12, eax

; 562  : 
; 563  : 		if ( ( x + mouse_pointer_width ) > application_video_width )

  000b6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000b9	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000bf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000c5	7e 3a		 jle	 SHORT $LN3@save_front

; 564  : 		{
; 565  : 
; 566  : 			saved_screen_mouse_rectangle.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000c7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000ca	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000d0	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000d6	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+8
  000dc	2b c8		 sub	 ecx, eax
  000de	89 0d 08 00 00
	00		 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+8, ecx

; 567  : 
; 568  : 			saved_screen_screen_rectangle.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000e4	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000e7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000ed	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000f3	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+8
  000f9	2b c8		 sub	 ecx, eax
  000fb	89 0d 08 00 00
	00		 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+8, ecx
$LN3@save_front:

; 569  : 		}
; 570  : 
; 571  : 		if ( ( y + mouse_pointer_height ) > application_video_height )

  00101	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00104	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  0010a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  00110	7e 3a		 jle	 SHORT $LN4@save_front

; 572  : 		{
; 573  : 
; 574  : 			saved_screen_mouse_rectangle.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  00112	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00115	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  0011b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  00121	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+12
  00127	2b c8		 sub	 ecx, eax
  00129	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?saved_screen_mouse_rectangle@@3UtagRECT@@A+12, ecx

; 575  : 
; 576  : 			saved_screen_screen_rectangle.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  0012f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00132	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00138	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  0013e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+12
  00144	2b c8		 sub	 ecx, eax
  00146	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+12, ecx
$LN4@save_front:

; 577  : 		}
; 578  : 
; 579  : 		screen_rectangle = saved_screen_screen_rectangle;

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A
  00151	89 45 8c	 mov	 DWORD PTR _screen_rectangle$2[ebp], eax
  00154	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+4
  0015a	89 4d 90	 mov	 DWORD PTR _screen_rectangle$2[ebp+4], ecx
  0015d	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+8
  00163	89 55 94	 mov	 DWORD PTR _screen_rectangle$2[ebp+8], edx
  00166	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?saved_screen_screen_rectangle@@3UtagRECT@@A+12
  0016b	89 45 98	 mov	 DWORD PTR _screen_rectangle$2[ebp+12], eax

; 580  : 
; 581  : 		if ( ddraw.application_windowed )

  0016e	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  00175	74 63		 je	 SHORT $LN5@save_front

; 582  : 		{
; 583  : 
; 584  : 			RECT
; 585  : 				my_rc;
; 586  : 
; 587  : 			//
; 588  : 			// Adjust the top left part of the rectangle.
; 589  : 			//
; 590  : 
; 591  : 			GetClientRect ( application_window, &my_rc );

  00177	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _my_rc$1[ebp]
  0017d	50		 push	 eax
  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00184	51		 push	 ecx
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 592  : 			ClientToScreen ( application_window, ( LPPOINT ) &my_rc );

  0018b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _my_rc$1[ebp]
  00191	50		 push	 eax
  00192	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00198	51		 push	 ecx
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 593  : 			ClientToScreen ( application_window, ( LPPOINT ) &my_rc + 1 );

  0019f	8d 45 84	 lea	 eax, DWORD PTR _my_rc$1[ebp+8]
  001a2	50		 push	 eax
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  001a9	51		 push	 ecx
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 594  : 
; 595  : 			screen_rectangle.left += my_rc.left;

  001b0	8b 45 8c	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp]
  001b3	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _my_rc$1[ebp]
  001b9	89 45 8c	 mov	 DWORD PTR _screen_rectangle$2[ebp], eax

; 596  : 			screen_rectangle.right += my_rc.left;

  001bc	8b 45 94	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp+8]
  001bf	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _my_rc$1[ebp]
  001c5	89 45 94	 mov	 DWORD PTR _screen_rectangle$2[ebp+8], eax

; 597  : 			screen_rectangle.top += my_rc.top;

  001c8	8b 45 90	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp+4]
  001cb	03 45 80	 add	 eax, DWORD PTR _my_rc$1[ebp+4]
  001ce	89 45 90	 mov	 DWORD PTR _screen_rectangle$2[ebp+4], eax

; 598  : 			screen_rectangle.bottom += my_rc.top;

  001d1	8b 45 98	 mov	 eax, DWORD PTR _screen_rectangle$2[ebp+12]
  001d4	03 45 80	 add	 eax, DWORD PTR _my_rc$1[ebp+4]
  001d7	89 45 98	 mov	 DWORD PTR _screen_rectangle$2[ebp+12], eax
$LN5@save_front:

; 599  : 		}
; 600  : 
; 601  : 		memset ( &ddbltfx, 0, sizeof ( ddbltfx ) );

  001da	6a 64		 push	 100			; 00000064H
  001dc	6a 00		 push	 0
  001de	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 _memset
  001e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 602  : 
; 603  : 		ddbltfx.dwSize = sizeof ( ddbltfx );

  001ea	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp], 100 ; 00000064H

; 604  : 
; 605  : 		ddbltfx.dwROP = SRCCOPY;

  001f1	c7 45 a4 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$[ebp+8], 13369376 ; 00cc0020H

; 606  : 
; 607  : 		f3d_surface_blt ( mouse_pointer_background->surface,

  001f8	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  001fb	50		 push	 eax
  001fc	68 00 00 02 01	 push	 16908288		; 01020000H
  00201	8d 4d 8c	 lea	 ecx, DWORD PTR _screen_rectangle$2[ebp]
  00204	51		 push	 ecx
  00205	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0020b	52		 push	 edx
  0020c	68 00 00 00 00	 push	 OFFSET ?saved_screen_mouse_rectangle@@3UtagRECT@@A ; saved_screen_mouse_rectangle
  00211	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_background@@3PAUSCREEN@@A
  00216	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00219	51		 push	 ecx
  0021a	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@save_front:

; 608  : 															&saved_screen_mouse_rectangle,
; 609  : 															ddraw.lpFrontBuffer,
; 610  : 															&screen_rectangle,
; 611  : 															DDBLT_ROP | DDBLT_WAIT, &ddbltfx );
; 612  : 	}
; 613  : }

  0021f	5f		 pop	 edi
  00220	5e		 pop	 esi
  00221	5b		 pop	 ebx
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c2 08 00	 ret	 8
?save_frontbuffer_screen_under_mouse_pointer@@YGXHH@Z ENDP ; save_frontbuffer_screen_under_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?draw_mouse_pointer@@YGXHH@Z
_TEXT	SEGMENT
_source_rc$ = -132					; size = 16
_my_rc$ = -116						; size = 16
_ddbltfx$ = -100					; size = 100
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?draw_mouse_pointer@@YGXHH@Z PROC			; draw_mouse_pointer, COMDAT

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 303  : 
; 304  : 	DDBLTFX
; 305  : 		ddbltfx;
; 306  : 
; 307  : 	RECT
; 308  : 		my_rc,
; 309  : 		source_rc;
; 310  : 
; 311  : 	if ( ( mouse_graphic_on ) && ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00013	0f 84 ab 01 00
	00		 je	 $LN1@draw_mouse
  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00020	0f 84 9e 01 00
	00		 je	 $LN1@draw_mouse
  00026	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0002d	0f 84 91 01 00
	00		 je	 $LN1@draw_mouse
  00033	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0003a	0f 84 84 01 00
	00		 je	 $LN1@draw_mouse

; 312  : 	{
; 313  : 
; 314  : 		if ( mouse_graphic_needs_restoring )

  00040	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_needs_restoring@@3HA, 0 ; mouse_graphic_needs_restoring
  00047	74 12		 je	 SHORT $LN3@draw_mouse

; 315  : 		{
; 316  : 
; 317  : 			//
; 318  : 			// Restore the previous background
; 319  : 			//
; 320  : 
; 321  : 			restore_screen_under_mouse_pointer ();

  00049	e8 00 00 00 00	 call	 ?restore_screen_under_mouse_pointer@@YGXXZ ; restore_screen_under_mouse_pointer

; 322  : 
; 323  : 			//
; 324  : 			// Save the current background
; 325  : 			//
; 326  : 
; 327  : 			save_frontbuffer_screen_under_mouse_pointer ( x, y );

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ?save_frontbuffer_screen_under_mouse_pointer@@YGXHH@Z ; save_frontbuffer_screen_under_mouse_pointer
$LN3@draw_mouse:

; 328  : 		}
; 329  : 
; 330  : 		//
; 331  : 		// Draw the cursor
; 332  : 		//
; 333  : 
; 334  : 		{
; 335  : 
; 336  : 			my_rc.left = 0;

  0005b	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _my_rc$[ebp], 0

; 337  : 
; 338  : 			my_rc.top = 0;

  00062	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _my_rc$[ebp+4], 0

; 339  : 
; 340  : 			source_rc.left = 0;

  00069	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _source_rc$[ebp], 0

; 341  : 
; 342  : 			source_rc.top = 0;

  00073	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _source_rc$[ebp+4], 0

; 343  : 
; 344  : 			source_rc.right = mouse_pointer_width;

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  0007f	89 45 84	 mov	 DWORD PTR _source_rc$[ebp+8], eax

; 345  : 
; 346  : 			source_rc.bottom = mouse_pointer_height;

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00087	89 45 88	 mov	 DWORD PTR _source_rc$[ebp+12], eax

; 347  : 
; 348  : 			if ( ddraw.application_windowed )

  0008a	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+28, 0
  00091	74 33		 je	 SHORT $LN4@draw_mouse

; 349  : 			{
; 350  : 
; 351  : 				//
; 352  : 				// Adjust the top left part of the rectangle.
; 353  : 				//
; 354  : 
; 355  : 				GetClientRect ( application_window, &my_rc );

  00093	8d 45 8c	 lea	 eax, DWORD PTR _my_rc$[ebp]
  00096	50		 push	 eax
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 356  : 
; 357  : 				ClientToScreen ( application_window, ( LPPOINT ) &my_rc );

  000a4	8d 45 8c	 lea	 eax, DWORD PTR _my_rc$[ebp]
  000a7	50		 push	 eax
  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  000ae	51		 push	 ecx
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 358  : 
; 359  : 				ClientToScreen ( application_window, ( LPPOINT ) &my_rc + 1 );

  000b5	8d 45 94	 lea	 eax, DWORD PTR _my_rc$[ebp+8]
  000b8	50		 push	 eax
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  000bf	51		 push	 ecx
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8
$LN4@draw_mouse:

; 360  : 			}
; 361  : 
; 362  : 
; 363  : 			my_rc.left += x;

  000c6	8b 45 8c	 mov	 eax, DWORD PTR _my_rc$[ebp]
  000c9	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  000cc	89 45 8c	 mov	 DWORD PTR _my_rc$[ebp], eax

; 364  : 
; 365  : 			my_rc.top += y;

  000cf	8b 45 90	 mov	 eax, DWORD PTR _my_rc$[ebp+4]
  000d2	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  000d5	89 45 90	 mov	 DWORD PTR _my_rc$[ebp+4], eax

; 366  : 
; 367  : 			my_rc.right = my_rc.left + mouse_pointer_width;

  000d8	8b 45 8c	 mov	 eax, DWORD PTR _my_rc$[ebp]
  000db	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000e1	89 45 94	 mov	 DWORD PTR _my_rc$[ebp+8], eax

; 368  : 
; 369  : 			my_rc.bottom = my_rc.top + mouse_pointer_height;

  000e4	8b 45 90	 mov	 eax, DWORD PTR _my_rc$[ebp+4]
  000e7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  000ed	89 45 98	 mov	 DWORD PTR _my_rc$[ebp+12], eax

; 370  : 
; 371  : 			if ( ( x + mouse_pointer_width ) > application_video_width )

  000f0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000f3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000f9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000ff	7e 2e		 jle	 SHORT $LN5@draw_mouse

; 372  : 			{
; 373  : 
; 374  : 				source_rc.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  00101	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00104	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  0010a	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  00110	8b 4d 84	 mov	 ecx, DWORD PTR _source_rc$[ebp+8]
  00113	2b c8		 sub	 ecx, eax
  00115	89 4d 84	 mov	 DWORD PTR _source_rc$[ebp+8], ecx

; 375  : 
; 376  : 				my_rc.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  00118	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0011b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  00121	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  00127	8b 4d 94	 mov	 ecx, DWORD PTR _my_rc$[ebp+8]
  0012a	2b c8		 sub	 ecx, eax
  0012c	89 4d 94	 mov	 DWORD PTR _my_rc$[ebp+8], ecx
$LN5@draw_mouse:

; 377  : 			}
; 378  : 
; 379  : 			if ( ( y + mouse_pointer_height ) > application_video_height )

  0012f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00132	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00138	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  0013e	7e 2e		 jle	 SHORT $LN6@draw_mouse

; 380  : 			{
; 381  : 
; 382  : 				source_rc.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  00140	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00143	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00149	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  0014f	8b 4d 88	 mov	 ecx, DWORD PTR _source_rc$[ebp+12]
  00152	2b c8		 sub	 ecx, eax
  00154	89 4d 88	 mov	 DWORD PTR _source_rc$[ebp+12], ecx

; 383  : 
; 384  : 				my_rc.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  00157	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0015a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00160	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  00166	8b 4d 98	 mov	 ecx, DWORD PTR _my_rc$[ebp+12]
  00169	2b c8		 sub	 ecx, eax
  0016b	89 4d 98	 mov	 DWORD PTR _my_rc$[ebp+12], ecx
$LN6@draw_mouse:

; 385  : 			}
; 386  : 
; 387  : 			memset ( &ddbltfx, 0, sizeof ( ddbltfx ) );

  0016e	6a 64		 push	 100			; 00000064H
  00170	6a 00		 push	 0
  00172	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _memset
  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 388  : 
; 389  : 			ddbltfx.dwSize = sizeof ( ddbltfx );

  0017e	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp], 100 ; 00000064H

; 390  : 
; 391  : 			ddbltfx.dwROP = SRCCOPY;

  00185	c7 45 a4 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$[ebp+8], 13369376 ; 00cc0020H

; 392  : 
; 393  : 			ddbltfx.ddckSrcColorkey.dwColorSpaceLowValue = 0;

  0018c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp+92], 0

; 394  : 
; 395  : 			ddbltfx.ddckSrcColorkey.dwColorSpaceHighValue = 0;

  00193	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp+96], 0

; 396  : 
; 397  : 			f3d_surface_blt ( ddraw.lpFrontBuffer, &my_rc, mouse_pointer_screen->surface, &source_rc, DDBLT_KEYSRCOVERRIDE | DDBLT_WAIT, &ddbltfx );

  0019a	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  0019d	50		 push	 eax
  0019e	68 00 00 01 01	 push	 16842752		; 01010000H
  001a3	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _source_rc$[ebp]
  001a9	51		 push	 ecx
  001aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mouse_pointer_screen@@3PAUSCREEN@@A
  001b0	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001b3	50		 push	 eax
  001b4	8d 4d 8c	 lea	 ecx, DWORD PTR _my_rc$[ebp]
  001b7	51		 push	 ecx
  001b8	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@draw_mouse:

; 398  : 		}
; 399  : 	}
; 400  : }

  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 08 00	 ret	 8
?draw_mouse_pointer@@YGXHH@Z ENDP			; draw_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?draw_raw_mouse_pointer@@YGXHH@Z
_TEXT	SEGMENT
_source_rc$ = -132					; size = 16
_my_rc$ = -116						; size = 16
_ddbltfx$ = -100					; size = 100
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?draw_raw_mouse_pointer@@YGXHH@Z PROC			; draw_raw_mouse_pointer, COMDAT

; 407  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 408  : 
; 409  : 	DDBLTFX
; 410  : 		ddbltfx;
; 411  : 
; 412  : 	RECT
; 413  : 		my_rc,
; 414  : 		source_rc;
; 415  : 
; 416  : 	if ( ( mouse_graphic_on ) && ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00013	0f 84 54 01 00
	00		 je	 $LN1@draw_raw_m
  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00020	0f 84 47 01 00
	00		 je	 $LN1@draw_raw_m
  00026	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0002d	0f 84 3a 01 00
	00		 je	 $LN1@draw_raw_m
  00033	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  0003a	0f 84 2d 01 00
	00		 je	 $LN1@draw_raw_m

; 417  : 	{
; 418  : 
; 419  : 		//
; 420  : 		// Draw the cursor
; 421  : 		//
; 422  : 
; 423  : 		{
; 424  : 
; 425  : 			my_rc.left = 0;

  00040	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _my_rc$[ebp], 0

; 426  : 
; 427  : 			my_rc.top = 0;

  00047	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _my_rc$[ebp+4], 0

; 428  : 
; 429  : 			source_rc.left = 0;

  0004e	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _source_rc$[ebp], 0

; 430  : 
; 431  : 			source_rc.top = 0;

  00058	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _source_rc$[ebp+4], 0

; 432  : 
; 433  : 			source_rc.right = mouse_pointer_width;

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  00064	89 45 84	 mov	 DWORD PTR _source_rc$[ebp+8], eax

; 434  : 
; 435  : 			source_rc.bottom = mouse_pointer_height;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  0006c	89 45 88	 mov	 DWORD PTR _source_rc$[ebp+12], eax

; 436  : 
; 437  : 			my_rc.left += x;

  0006f	8b 45 8c	 mov	 eax, DWORD PTR _my_rc$[ebp]
  00072	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00075	89 45 8c	 mov	 DWORD PTR _my_rc$[ebp], eax

; 438  : 
; 439  : 			my_rc.top += y;

  00078	8b 45 90	 mov	 eax, DWORD PTR _my_rc$[ebp+4]
  0007b	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  0007e	89 45 90	 mov	 DWORD PTR _my_rc$[ebp+4], eax

; 440  : 
; 441  : 			my_rc.right = my_rc.left + mouse_pointer_width;

  00081	8b 45 8c	 mov	 eax, DWORD PTR _my_rc$[ebp]
  00084	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  0008a	89 45 94	 mov	 DWORD PTR _my_rc$[ebp+8], eax

; 442  : 
; 443  : 			my_rc.bottom = my_rc.top + mouse_pointer_height;

  0008d	8b 45 90	 mov	 eax, DWORD PTR _my_rc$[ebp+4]
  00090	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00096	89 45 98	 mov	 DWORD PTR _my_rc$[ebp+12], eax

; 444  : 
; 445  : 			if ( ( x + mouse_pointer_width ) > application_video_width )

  00099	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0009c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000a2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000a8	7e 2e		 jle	 SHORT $LN3@draw_raw_m

; 446  : 			{
; 447  : 
; 448  : 				source_rc.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000aa	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000ad	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000b3	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000b9	8b 4d 84	 mov	 ecx, DWORD PTR _source_rc$[ebp+8]
  000bc	2b c8		 sub	 ecx, eax
  000be	89 4d 84	 mov	 DWORD PTR _source_rc$[ebp+8], ecx

; 449  : 
; 450  : 				my_rc.right -= ( ( x + mouse_pointer_width ) - application_video_width );

  000c1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000c4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000ca	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  000d0	8b 4d 94	 mov	 ecx, DWORD PTR _my_rc$[ebp+8]
  000d3	2b c8		 sub	 ecx, eax
  000d5	89 4d 94	 mov	 DWORD PTR _my_rc$[ebp+8], ecx
$LN3@draw_raw_m:

; 451  : 			}
; 452  : 
; 453  : 			if ( ( y + mouse_pointer_height ) > application_video_height )

  000d8	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000db	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  000e1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  000e7	7e 2e		 jle	 SHORT $LN4@draw_raw_m

; 454  : 			{
; 455  : 
; 456  : 				source_rc.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000ec	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  000f2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  000f8	8b 4d 88	 mov	 ecx, DWORD PTR _source_rc$[ebp+12]
  000fb	2b c8		 sub	 ecx, eax
  000fd	89 4d 88	 mov	 DWORD PTR _source_rc$[ebp+12], ecx

; 457  : 
; 458  : 				my_rc.bottom -= ( ( y + mouse_pointer_height ) - application_video_height );

  00100	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00103	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00109	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  0010f	8b 4d 98	 mov	 ecx, DWORD PTR _my_rc$[ebp+12]
  00112	2b c8		 sub	 ecx, eax
  00114	89 4d 98	 mov	 DWORD PTR _my_rc$[ebp+12], ecx
$LN4@draw_raw_m:

; 459  : 			}
; 460  : 
; 461  : 			memset ( &ddbltfx, 0, sizeof ( ddbltfx ) );

  00117	6a 64		 push	 100			; 00000064H
  00119	6a 00		 push	 0
  0011b	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _memset
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH

; 462  : 
; 463  : 			ddbltfx.dwSize = sizeof ( ddbltfx );

  00127	c7 45 9c 64 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp], 100 ; 00000064H

; 464  : 
; 465  : 			ddbltfx.dwROP = SRCCOPY;

  0012e	c7 45 a4 20 00
	cc 00		 mov	 DWORD PTR _ddbltfx$[ebp+8], 13369376 ; 00cc0020H

; 466  : 
; 467  : 			ddbltfx.ddckSrcColorkey.dwColorSpaceLowValue = 0;

  00135	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp+92], 0

; 468  : 
; 469  : 			ddbltfx.ddckSrcColorkey.dwColorSpaceHighValue = 0;

  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ddbltfx$[ebp+96], 0

; 470  : 
; 471  : 			f3d_surface_blt ( ddraw.lpBackBuffer, &my_rc, mouse_pointer_screen->surface, &source_rc, DDBLT_KEYSRCOVERRIDE | DDBLT_WAIT, &ddbltfx );

  00143	8d 45 9c	 lea	 eax, DWORD PTR _ddbltfx$[ebp]
  00146	50		 push	 eax
  00147	68 00 00 01 01	 push	 16842752		; 01010000H
  0014c	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _source_rc$[ebp]
  00152	51		 push	 ecx
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mouse_pointer_screen@@3PAUSCREEN@@A
  00159	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0015c	50		 push	 eax
  0015d	8d 4d 8c	 lea	 ecx, DWORD PTR _my_rc$[ebp]
  00160	51		 push	 ecx
  00161	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@draw_raw_m:

; 472  : 		}
; 473  : 	}
; 474  : }

  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 08 00	 ret	 8
?draw_raw_mouse_pointer@@YGXHH@Z ENDP			; draw_raw_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?flip_video_screen_with_mouse@@YGXXZ
_TEXT	SEGMENT
?flip_video_screen_with_mouse@@YGXXZ PROC		; flip_video_screen_with_mouse, COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 482  : 
; 483  : 	ASSERT ( video_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?video_screen@@3PAUSCREEN@@A, 0 ; video_screen
  00010	75 18		 jne	 SHORT $LN2@flip_video
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??flip_video_screen_with_mouse@@YGXXZ@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@DMMIHBAE@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OOBGIFBC@video_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@flip_video:

; 484  : 
; 485  : 	if ( ( ddraw.ddraw ) && ( ddraw.lpFrontBuffer ) && ( ddraw.lpBackBuffer ) )

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00031	74 43		 je	 SHORT $LN1@flip_video
  00033	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8, 0
  0003a	74 3a		 je	 SHORT $LN1@flip_video
  0003c	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+12, 0
  00043	74 31		 je	 SHORT $LN1@flip_video

; 486  : 	{
; 487  : 
; 488  : 		//
; 489  : 		// Save the area underneath the mouse pointer
; 490  : 		//
; 491  : 
; 492  : 		save_backbuffer_screen_under_mouse_pointer ( get_mouse_x (), get_mouse_y () );

  00045	e8 00 00 00 00	 call	 ?get_mouse_y@@YGHXZ	; get_mouse_y
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?get_mouse_x@@YGHXZ	; get_mouse_x
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?save_backbuffer_screen_under_mouse_pointer@@YGXHH@Z ; save_backbuffer_screen_under_mouse_pointer

; 493  : 
; 494  : 		//
; 495  : 		// Draw the mouse cursor onto the back buffer
; 496  : 		//
; 497  : 
; 498  : 		draw_backbuffer_mouse_pointer ( get_mouse_x (), get_mouse_y () );

  00056	e8 00 00 00 00	 call	 ?get_mouse_y@@YGHXZ	; get_mouse_y
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?get_mouse_x@@YGHXZ	; get_mouse_x
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?draw_backbuffer_mouse_pointer@@YGXHH@Z ; draw_backbuffer_mouse_pointer

; 499  : 
; 500  : 		ddraw_flip_surface ();

  00067	e8 00 00 00 00	 call	 ?ddraw_flip_surface@@YGHXZ ; ddraw_flip_surface

; 501  : 
; 502  : 		//
; 503  : 		// Screen has been flipped, but the backbuffer still has a mouse image on it - restore it
; 504  : 		//
; 505  : 
; 506  : 		restore_backbuffer_screen_under_mouse_pointer ();

  0006c	e8 00 00 00 00	 call	 ?restore_backbuffer_screen_under_mouse_pointer@@YGXXZ ; restore_backbuffer_screen_under_mouse_pointer

; 507  : 
; 508  : 		//
; 509  : 		// Now the area under the mouse on the front buffer & rectangle is stored in the back buffer variables
; 510  : 		//
; 511  : 
; 512  : 		swap_mouse_screen_buffers ();

  00071	e8 00 00 00 00	 call	 ?swap_mouse_screen_buffers@@YGXXZ ; swap_mouse_screen_buffers
$LN1@flip_video:

; 513  : 	}
; 514  : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?flip_video_screen_with_mouse@@YGXXZ ENDP		; flip_video_screen_with_mouse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?update_mouse_pointer@@YGXXZ
_TEXT	SEGMENT
?update_mouse_pointer@@YGXXZ PROC			; update_mouse_pointer, COMDAT

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 279  : 
; 280  : 	if ( mouse_graphic_on )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_on@@3HA, 0
  00010	74 52		 je	 SHORT $LN1@update_mou

; 281  : 	{
; 282  : 
; 283  : 		if ( ( !mouse_graphic_drawn ) || ( mouse_graphic_position_x != get_mouse_x () ) || ( mouse_graphic_position_y != get_mouse_y () ) )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_graphic_drawn@@3HA, 0
  00019	74 1a		 je	 SHORT $LN4@update_mou
  0001b	e8 00 00 00 00	 call	 ?get_mouse_x@@YGHXZ	; get_mouse_x
  00020	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mouse_graphic_position_x@@3HA, eax
  00026	75 0d		 jne	 SHORT $LN4@update_mou
  00028	e8 00 00 00 00	 call	 ?get_mouse_y@@YGHXZ	; get_mouse_y
  0002d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mouse_graphic_position_y@@3HA, eax
  00033	74 2f		 je	 SHORT $LN1@update_mou
$LN4@update_mou:

; 284  : 		{
; 285  : 
; 286  : 			draw_mouse_pointer ( get_mouse_x (), get_mouse_y () );

  00035	e8 00 00 00 00	 call	 ?get_mouse_y@@YGHXZ	; get_mouse_y
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?get_mouse_x@@YGHXZ	; get_mouse_x
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?draw_mouse_pointer@@YGXHH@Z ; draw_mouse_pointer

; 287  : 
; 288  : 			mouse_graphic_position_x = get_mouse_x ();

  00046	e8 00 00 00 00	 call	 ?get_mouse_x@@YGHXZ	; get_mouse_x
  0004b	a3 00 00 00 00	 mov	 DWORD PTR ?mouse_graphic_position_x@@3HA, eax

; 289  : 
; 290  : 			mouse_graphic_position_y = get_mouse_y ();

  00050	e8 00 00 00 00	 call	 ?get_mouse_y@@YGHXZ	; get_mouse_y
  00055	a3 00 00 00 00	 mov	 DWORD PTR ?mouse_graphic_position_y@@3HA, eax

; 291  : 
; 292  : 			mouse_graphic_drawn = TRUE;

  0005a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mouse_graphic_drawn@@3HA, 1
$LN1@update_mou:

; 293  : 		}
; 294  : 	}
; 295  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?update_mouse_pointer@@YGXXZ ENDP			; update_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?deinitialise_mouse_pointer@@YGXXZ
_TEXT	SEGMENT
?deinitialise_mouse_pointer@@YGXXZ PROC			; deinitialise_mouse_pointer, COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 242  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deinitialise_mouse_pointer@@YGXXZ ENDP			; deinitialise_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?initialise_mouse_pointer@@YGXPAG@Z
_TEXT	SEGMENT
tv135 = -102						; size = 2
$T1 = -100						; size = 4
_destptr$2 = -32					; size = 4
_dest_rgba$3 = -28					; size = 4
_old_active_screen$ = -24				; size = 4
_destpitch$ = -20					; size = 4
_count$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_ptr$ = -4						; size = 4
_pointer$ = 8						; size = 4
?initialise_mouse_pointer@@YGXPAG@Z PROC		; initialise_mouse_pointer, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 152  : 
; 153  : 	unsigned short int
; 154  : 		*ptr;
; 155  : 
; 156  : 	int
; 157  : 		x,
; 158  : 		y,
; 159  : 		count,
; 160  : 		destpitch;
; 161  : 
; 162  : 	struct SCREEN
; 163  : 		*old_active_screen;
; 164  : 
; 165  : 	mouse_trails = NULL;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse_trails@@3PCUMOUSE_TRAIL_POSITION@@C, 0 ; mouse_trails

; 166  : 
; 167  : 	for ( count = 0; count < 256; count++ )

  00013	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  00025	81 7d f0 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  0002c	7d 12		 jge	 SHORT $LN3@initialise

; 168  : 	{
; 169  : 
; 170  : 		mouse_trail_positions_array[count].used = FALSE;

  0002e	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  00031	c1 e0 04	 shl	 eax, 4
  00034	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse_trail_positions_array@@3PAUMOUSE_TRAIL_POSITION@@A[eax+8], 0

; 171  : 	}

  0003e	eb dc		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 172  : 
; 173  : 	ptr = pointer + 2;

  00040	8b 45 08	 mov	 eax, DWORD PTR _pointer$[ebp]
  00043	83 c0 04	 add	 eax, 4
  00046	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 174  : 
; 175  : 	mouse_pointer_screen = create_screen ( mouse_pointer_width, mouse_pointer_height, FALSE );

  00049	6a 00		 push	 0
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00050	50		 push	 eax
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse_pointer_width@@3HA
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 ?create_screen@@YGPAUSCREEN@@HHH@Z ; create_screen
  0005d	a3 00 00 00 00	 mov	 DWORD PTR ?mouse_pointer_screen@@3PAUSCREEN@@A, eax

; 176  : 
; 177  : 	mouse_pointer_background = create_screen ( mouse_pointer_width, mouse_pointer_height, FALSE );

  00062	6a 00		 push	 0
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00069	50		 push	 eax
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse_pointer_width@@3HA
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?create_screen@@YGPAUSCREEN@@HHH@Z ; create_screen
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?mouse_pointer_background@@3PAUSCREEN@@A, eax

; 178  : 
; 179  : 	mouse_backbuffer_pointer_background = create_screen ( mouse_pointer_width, mouse_pointer_height, FALSE );

  0007b	6a 00		 push	 0
  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00082	50		 push	 eax
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse_pointer_width@@3HA
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?create_screen@@YGPAUSCREEN@@HHH@Z ; create_screen
  0008f	a3 00 00 00 00	 mov	 DWORD PTR ?mouse_backbuffer_pointer_background@@3PAUSCREEN@@A, eax

; 180  : 
; 181  : 	old_active_screen = get_active_screen ();

  00094	e8 00 00 00 00	 call	 ?get_active_screen@@YGPAUSCREEN@@XZ ; get_active_screen
  00099	89 45 e8	 mov	 DWORD PTR _old_active_screen$[ebp], eax

; 182  : 
; 183  : 	set_active_screen ( mouse_pointer_screen );

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_screen@@3PAUSCREEN@@A
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN5@initialise:

; 184  : 
; 185  : 	while ( !lock_screen ( active_screen ) )

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  000b2	85 c0		 test	 eax, eax
  000b4	75 0a		 jne	 SHORT $LN6@initialise

; 186  : 	{
; 187  : 
; 188  : 		Sleep ( 100 );

  000b6	6a 64		 push	 100			; 00000064H
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 189  : 	}

  000be	eb e7		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 190  : 
; 191  : 	destpitch = get_screen_pitch ( active_screen );

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000cb	89 45 ec	 mov	 DWORD PTR _destpitch$[ebp], eax

; 192  : 
; 193  : 	if (destpitch == mouse_pointer_width * 4) // 32bpp

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  000d3	c1 e0 02	 shl	 eax, 2
  000d6	39 45 ec	 cmp	 DWORD PTR _destpitch$[ebp], eax
  000d9	0f 85 8f 00 00
	00		 jne	 $LN19@initialise

; 194  : 	{
; 195  : 		rgb_colour*
; 196  : 			dest_rgba = ( rgb_colour* ) get_screen_data ( active_screen );

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000ea	89 45 e4	 mov	 DWORD PTR _dest_rgba$3[ebp], eax

; 197  : 
; 198  : 		destpitch >>= 2; // bytes -> int's

  000ed	8b 45 ec	 mov	 eax, DWORD PTR _destpitch$[ebp]
  000f0	c1 f8 02	 sar	 eax, 2
  000f3	89 45 ec	 mov	 DWORD PTR _destpitch$[ebp], eax

; 199  : 
; 200  : 		for ( y = 0; y < mouse_pointer_height; y++ )

  000f6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  000fd	eb 09		 jmp	 SHORT $LN9@initialise
$LN7@initialise:
  000ff	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00102	83 c0 01	 add	 eax, 1
  00105	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN9@initialise:
  00108	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0010b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  00111	7d 59		 jge	 SHORT $LN8@initialise

; 201  : 		{
; 202  : 			for ( x = 0; x < mouse_pointer_width; x++ )

  00113	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  0011a	eb 09		 jmp	 SHORT $LN12@initialise
$LN10@initialise:
  0011c	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0011f	83 c0 01	 add	 eax, 1
  00122	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN12@initialise:
  00125	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00128	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  0012e	7d 2e		 jge	 SHORT $LN11@initialise

; 203  : 			{
; 204  : 				dest_rgba[x] = get_general_colour_value(*ptr++);

  00130	8b 45 fc	 mov	 eax, DWORD PTR _ptr$[ebp]
  00133	66 8b 08	 mov	 cx, WORD PTR [eax]
  00136	66 89 4d 9a	 mov	 WORD PTR tv135[ebp], cx
  0013a	0f b7 55 9a	 movzx	 edx, WORD PTR tv135[ebp]
  0013e	52		 push	 edx
  0013f	e8 00 00 00 00	 call	 ?get_general_colour_value@@YG?AUREAL_COLOUR@@G@Z ; get_general_colour_value
  00144	89 45 9c	 mov	 DWORD PTR $T1[ebp], eax
  00147	8b 45 fc	 mov	 eax, DWORD PTR _ptr$[ebp]
  0014a	83 c0 02	 add	 eax, 2
  0014d	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax
  00150	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  00153	8b 55 e4	 mov	 edx, DWORD PTR _dest_rgba$3[ebp]
  00156	8b 45 9c	 mov	 eax, DWORD PTR $T1[ebp]
  00159	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 205  : //				dest_rgba[x].a = 0;
; 206  : 			}

  0015c	eb be		 jmp	 SHORT $LN10@initialise
$LN11@initialise:

; 207  : 
; 208  : 			dest_rgba += destpitch;

  0015e	8b 45 ec	 mov	 eax, DWORD PTR _destpitch$[ebp]
  00161	8b 4d e4	 mov	 ecx, DWORD PTR _dest_rgba$3[ebp]
  00164	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00167	89 55 e4	 mov	 DWORD PTR _dest_rgba$3[ebp], edx

; 209  : 		}

  0016a	eb 93		 jmp	 SHORT $LN7@initialise
$LN8@initialise:

; 210  : 	}
; 211  : 	else // (hopefully) 16bpp

  0016c	eb 79		 jmp	 SHORT $LN20@initialise
$LN19@initialise:

; 212  : 	{
; 213  : 		unsigned short int
; 214  : 			*destptr = ( unsigned short int * ) get_screen_data ( active_screen );

  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00179	89 45 e0	 mov	 DWORD PTR _destptr$2[ebp], eax

; 215  : 
; 216  : 		destpitch >>= 1; // bytes -> shorts's

  0017c	8b 45 ec	 mov	 eax, DWORD PTR _destpitch$[ebp]
  0017f	d1 f8		 sar	 eax, 1
  00181	89 45 ec	 mov	 DWORD PTR _destpitch$[ebp], eax

; 217  : 
; 218  : 		for ( y = 0; y < mouse_pointer_height; y++ )

  00184	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  0018b	eb 09		 jmp	 SHORT $LN15@initialise
$LN13@initialise:
  0018d	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00190	83 c0 01	 add	 eax, 1
  00193	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN15@initialise:
  00196	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00199	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?mouse_pointer_height@@3HA
  0019f	7d 46		 jge	 SHORT $LN20@initialise

; 219  : 		{
; 220  : 
; 221  : 			for ( x = 0; x < mouse_pointer_width; x++ )

  001a1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001a8	eb 09		 jmp	 SHORT $LN18@initialise
$LN16@initialise:
  001aa	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001ad	83 c0 01	 add	 eax, 1
  001b0	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN18@initialise:
  001b3	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001b6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?mouse_pointer_width@@3HA
  001bc	7d 1b		 jge	 SHORT $LN17@initialise

; 222  : 			{
; 223  : 
; 224  : 				destptr[x] = *ptr++;

  001be	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001c1	8b 4d e0	 mov	 ecx, DWORD PTR _destptr$2[ebp]
  001c4	8b 55 fc	 mov	 edx, DWORD PTR _ptr$[ebp]
  001c7	66 8b 12	 mov	 dx, WORD PTR [edx]
  001ca	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  001ce	8b 45 fc	 mov	 eax, DWORD PTR _ptr$[ebp]
  001d1	83 c0 02	 add	 eax, 2
  001d4	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 225  : 			}

  001d7	eb d1		 jmp	 SHORT $LN16@initialise
$LN17@initialise:

; 226  : 
; 227  : 			destptr += destpitch;

  001d9	8b 45 ec	 mov	 eax, DWORD PTR _destpitch$[ebp]
  001dc	8b 4d e0	 mov	 ecx, DWORD PTR _destptr$2[ebp]
  001df	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001e2	89 55 e0	 mov	 DWORD PTR _destptr$2[ebp], edx

; 228  : 		}

  001e5	eb a6		 jmp	 SHORT $LN13@initialise
$LN20@initialise:

; 229  : 	}
; 230  : 
; 231  : 	unlock_screen ( active_screen );

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen

; 232  : 
; 233  : 	set_active_screen (old_active_screen);

  001f2	8b 45 e8	 mov	 eax, DWORD PTR _old_active_screen$[ebp]
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 234  : }

  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 04 00	 ret	 4
?initialise_mouse_pointer@@YGXPAG@Z ENDP		; initialise_mouse_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?get_mouse_graphic_on@@YGHXZ
_TEXT	SEGMENT
?get_mouse_graphic_on@@YGHXZ PROC			; get_mouse_graphic_on, COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 270  : 	return ( mouse_graphic_on );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse_graphic_on@@3HA

; 271  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_mouse_graphic_on@@YGHXZ ENDP			; get_mouse_graphic_on
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?set_mouse_graphic_off@@YGXXZ
_TEXT	SEGMENT
?set_mouse_graphic_off@@YGXXZ PROC			; set_mouse_graphic_off, COMDAT

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 260  : 
; 261  : 	mouse_graphic_on = FALSE;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse_graphic_on@@3HA, 0

; 262  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?set_mouse_graphic_off@@YGXXZ ENDP			; set_mouse_graphic_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\mouseptr.c
;	COMDAT ?set_mouse_graphic_on@@YGXXZ
_TEXT	SEGMENT
?set_mouse_graphic_on@@YGXXZ PROC			; set_mouse_graphic_on, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 250  : 
; 251  : 	mouse_graphic_on = TRUE;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mouse_graphic_on@@3HA, 1

; 252  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?set_mouse_graphic_on@@YGXXZ ENDP			; set_mouse_graphic_on
_TEXT	ENDS
END
