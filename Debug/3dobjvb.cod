; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dobjvb.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?objects_3d_extra_data@@3PAUOBJECT_3D_EXTRA_OBJECT_INFO@@A ; objects_3d_extra_data
PUBLIC	?d3d_hardware_vertex_indices@@3PAGA		; d3d_hardware_vertex_indices
PUBLIC	?objects_3d_extra_data_surfaces@@3PAUOBJECT_3D_SURFACE_INFO@@A ; objects_3d_extra_data_surfaces
PUBLIC	?objects_3d_extra_data_indices@@3PAGA		; objects_3d_extra_data_indices
PUBLIC	?objects_3d_vertex_buffers@@3PAPAUIDirect3DVertexBuffer7@@A ; objects_3d_vertex_buffers
PUBLIC	?objects_3d_vertex_buffer_sizes@@3PAHA		; objects_3d_vertex_buffer_sizes
PUBLIC	?total_number_of_d3d_object_surfaces@@3HA	; total_number_of_d3d_object_surfaces
PUBLIC	?current_vb_object@@3HA				; current_vb_object
PUBLIC	?total_vb_created@@3HA				; total_vb_created
PUBLIC	?total_vb_vertices@@3HA				; total_vb_vertices
PUBLIC	?total_number_of_objects_3d_vertex_buffers@@3HA	; total_number_of_objects_3d_vertex_buffers
PUBLIC	?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A ; object_3d_d3d_vbs
PUBLIC	?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A ; d3d_vb_slots
PUBLIC	?d3d_vb_slots_head@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A ; d3d_vb_slots_head
PUBLIC	?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A ; d3d_vb_slots_tail
PUBLIC	?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A ; object_3d_vb_slot_references
PUBLIC	?number_of_d3d_vb_slots@@3PAY03HA		; number_of_d3d_vb_slots
PUBLIC	?number_of_d3d_vbs@@3PAY03HA			; number_of_d3d_vbs
PUBLIC	?object_3d_d3d_vb_indices@@3PAY03PAGA		; object_3d_d3d_vb_indices
_BSS	SEGMENT
?objects_3d_extra_data@@3PAUOBJECT_3D_EXTRA_OBJECT_INFO@@A DD 01H DUP (?) ; objects_3d_extra_data
?d3d_hardware_vertex_indices@@3PAGA DW 0400H DUP (?)	; d3d_hardware_vertex_indices
?objects_3d_extra_data_surfaces@@3PAUOBJECT_3D_SURFACE_INFO@@A DD 01H DUP (?) ; objects_3d_extra_data_surfaces
?objects_3d_extra_data_indices@@3PAGA DD 01H DUP (?)	; objects_3d_extra_data_indices
?objects_3d_vertex_buffers@@3PAPAUIDirect3DVertexBuffer7@@A DD 01H DUP (?) ; objects_3d_vertex_buffers
?objects_3d_vertex_buffer_sizes@@3PAHA DD 01H DUP (?)	; objects_3d_vertex_buffer_sizes
?total_number_of_d3d_object_surfaces@@3HA DD 01H DUP (?) ; total_number_of_d3d_object_surfaces
?current_vb_object@@3HA DD 01H DUP (?)			; current_vb_object
?total_vb_created@@3HA DD 01H DUP (?)			; total_vb_created
?total_vb_vertices@@3HA DD 01H DUP (?)			; total_vb_vertices
?total_number_of_objects_3d_vertex_buffers@@3HA DD 01H DUP (?) ; total_number_of_objects_3d_vertex_buffers
?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A DD 0cH DUP (?) ; object_3d_d3d_vbs
?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A DD 0cH DUP (?) ; d3d_vb_slots
?d3d_vb_slots_head@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A DD 0cH DUP (?) ; d3d_vb_slots_head
?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A DD 0cH DUP (?) ; d3d_vb_slots_tail
?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A DD 01H DUP (?) ; object_3d_vb_slot_references
?number_of_d3d_vb_slots@@3PAY03HA DD 0cH DUP (?)	; number_of_d3d_vb_slots
?number_of_d3d_vbs@@3PAY03HA DD 0cH DUP (?)		; number_of_d3d_vbs
?object_3d_d3d_vb_indices@@3PAY03PAGA DD 0cH DUP (?)	; object_3d_d3d_vb_indices
_BSS	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?initialise_3d_objects_in_d3d@@YGXXZ		; initialise_3d_objects_in_d3d
PUBLIC	?deinitialise_3d_objects_in_d3d@@YGXXZ		; deinitialise_3d_objects_in_d3d
PUBLIC	?object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z ; object_3d_render_hardware_surface
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BB@LJHMMADH@RESTORING?53D?5VBS@		; `string'
PUBLIC	??_C@_0BK@EIADEJEM@DEINITIALISING?53d?5OBJECTS@	; `string'
PUBLIC	?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA ; `object_3d_render_hardware_surface'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@ ; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE@				; `string'
PUBLIC	??_C@_0FN@ILNFBMOC@current_face_index_offset?5?$DM?5?$CI?5n@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@40dfffc000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fabs:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?register_restore_vb_routine@@YGXP6GXXZ@Z:PROC	; register_restore_vb_routine
EXTRN	?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z:PROC ; f3d_vertex_create
EXTRN	?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z:PROC ; f3d_vertex_release
EXTRN	?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z:PROC ; f3d_vertex_lock
EXTRN	?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z:PROC ; f3d_vertex_unlock
EXTRN	?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z:PROC ; f3d_draw_vb
EXTRN	?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z:PROC ; generate_object_3d_point_normal
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?object_database_surfaces@@3PAUFACE_SURFACE_DESCRIPTION@@A:DWORD ; object_database_surfaces
EXTRN	?total_number_of_raw_3d_objects@@3HA:DWORD	; total_number_of_raw_3d_objects
EXTRN	?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A:DWORD ; current_object_3d_surface
EXTRN	?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A:DWORD ; current_object_3d_point_list
EXTRN	?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_face_normal_list
EXTRN	?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A:DWORD ; current_object_3d_surface_point_texture_list
EXTRN	?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_list
EXTRN	?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_normal_list
EXTRN	?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A:DWORD ; current_object_3d_faces
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?object_vbs_restore_registered@?1??initialise_3d_objects_in_d3d@@YGXXZ@4HA DD 01H DUP (?) ; `initialise_3d_objects_in_d3d'::`2'::object_vbs_restore_registered
_BSS	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@ILNFBMOC@current_face_index_offset?5?$DM?5?$CI?5n@
CONST	SEGMENT
??_C@_0FN@ILNFBMOC@current_face_index_offset?5?$DM?5?$CI?5n@ DB 'current_'
	DB	'face_index_offset < ( number_of_surface_points * NUMBER_OF_IN'
	DB	'DICES_PER_SLOT_FACTOR )', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE@ DB 'FALSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@
CONST	SEGMENT
??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@ DB 'current_objec'
	DB	't_3d_surface->polygons', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dobjvb.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA DD 0573H ; `object_3d_render_hardware_surface'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@EIADEJEM@DEINITIALISING?53d?5OBJECTS@
CONST	SEGMENT
??_C@_0BK@EIADEJEM@DEINITIALISING?53d?5OBJECTS@ DB 'DEINITIALISING 3d OBJ'
	DB	'ECTS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LJHMMADH@RESTORING?53D?5VBS@
CONST	SEGMENT
??_C@_0BB@LJHMMADH@RESTORING?53D?5VBS@ DB 'RESTORING 3D VBS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvb.c
;	COMDAT ?restore_3d_vb_routine@@YGXXZ
_TEXT	SEGMENT
?restore_3d_vb_routine@@YGXXZ PROC			; restore_3d_vb_routine, COMDAT

; 1128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1129 : 
; 1130 : 	debug_log ( "RESTORING 3D VBS" );

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LJHMMADH@RESTORING?53D?5VBS@
  0000e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00013	83 c4 04	 add	 esp, 4

; 1131 : 
; 1132 : 	deinitialise_3d_objects_in_d3d ();

  00016	e8 00 00 00 00	 call	 ?deinitialise_3d_objects_in_d3d@@YGXXZ ; deinitialise_3d_objects_in_d3d

; 1133 : 
; 1134 : 	initialise_3d_objects_in_d3d ();

  0001b	e8 00 00 00 00	 call	 ?initialise_3d_objects_in_d3d@@YGXXZ ; initialise_3d_objects_in_d3d

; 1135 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?restore_3d_vb_routine@@YGXXZ ENDP			; restore_3d_vb_routine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvb.c
;	COMDAT ?object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z
_TEXT	SEGMENT
tv135 = -332						; size = 4
$T1 = -328						; size = 4
$T2 = -324						; size = 4
$T3 = -320						; size = 4
$T4 = -316						; size = 4
$T5 = -312						; size = 4
$T6 = -308						; size = 4
_next_index$7 = -240					; size = 2
_base_index$8 = -236					; size = 2
_index_count$9 = -232					; size = 4
_index$10 = -228					; size = 4
_normal$11 = -224					; size = 12
_point_normal$12 = -212					; size = 4
_point_index$13 = -208					; size = 4
_normal$14 = -204					; size = 12
_point_normal$15 = -192					; size = 4
_point$16 = -188					; size = 4
_index$17 = -184					; size = 4
_normal$18 = -180					; size = 12
_point_normal$19 = -168					; size = 4
_point_index$20 = -164					; size = 4
_normal$21 = -160					; size = 12
_point_normal$22 = -148					; size = 4
_point$23 = -144					; size = 4
_index$24 = -140					; size = 4
_normal$25 = -136					; size = 12
_point_normal$26 = -124					; size = 4
_point_index$27 = -120					; size = 4
_normal$28 = -116					; size = 12
_point_normal$29 = -104					; size = 4
_point$30 = -100					; size = 4
_saved_object_3d_face_normal_list$31 = -96		; size = 4
_saved_object_3d_point_list$32 = -92			; size = 4
_faces$33 = -88						; size = 4
_indices$34 = -84					; size = 4
_zmax$35 = -80						; size = 4
_ymax$36 = -76						; size = 4
_xmax$37 = -72						; size = 4
_lock_flags$38 = -68					; size = 4
_surface_vertex_offset$39 = -64				; size = 4
_current_face_index_offset$40 = -60			; size = 4
_vertex_count$41 = -56					; size = 4
_face_count$42 = -52					; size = 4
_ret$43 = -48						; size = 4
_lightmap_vertices$ = -44				; size = 4
_plain_vertices$ = -40					; size = 4
_textured_vertices$ = -36				; size = 4
_surface$ = -32						; size = 4
_number_of_surface_points$ = -28			; size = 4
_half_number_of_vertices_in_slot$ = -24			; size = 4
_number_of_vertices_in_slot$ = -20			; size = 4
_size_slot$ = -16					; size = 4
_global_surface_index$ = -12				; size = 4
_type$ = -8						; size = 4
_prevent_rendering$ = -4				; size = 4
_object$ = 8						; size = 4
?object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z PROC ; object_3d_render_hardware_surface, COMDAT

; 1395 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1396 : 	int
; 1397 : 		prevent_rendering,
; 1398 : 		type,
; 1399 : 		global_surface_index,
; 1400 : 		size_slot,
; 1401 : 		number_of_vertices_in_slot,
; 1402 : 		half_number_of_vertices_in_slot,
; 1403 : 		number_of_surface_points;
; 1404 : 
; 1405 : 	d3d_vb_object_3d_info
; 1406 : 		*surface;
; 1407 : 
; 1408 : 	D3DVERTEX
; 1409 : 		*textured_vertices;
; 1410 : 
; 1411 : 	D3DPLAINVERTEX
; 1412 : 		*plain_vertices;
; 1413 : 
; 1414 : 	D3DTEXTURE2VERTEX
; 1415 : 		*lightmap_vertices;
; 1416 : 
; 1417 : 	//
; 1418 : 	// Check current surface
; 1419 : 	//
; 1420 : 
; 1421 : 	ASSERT ( current_object_3d_surface->polygons );

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00011	66 8b 08	 mov	 cx, WORD PTR [eax]
  00014	66 83 e1 01	 and	 cx, 1
  00018	0f b7 d1	 movzx	 edx, cx
  0001b	85 d2		 test	 edx, edx
  0001d	75 18		 jne	 SHORT $LN39@object_3d_
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA
  00024	83 c0 1a	 add	 eax, 26			; 0000001aH
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@EODDNGAD@current_object_3d_surface?9?$DOpoly@
  00032	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN39@object_3d_:

; 1422 : 
; 1423 : 	global_surface_index = ( current_object_3d_surface - object_database_surfaces );

  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0003c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?object_database_surfaces@@3PAUFACE_SURFACE_DESCRIPTION@@A ; object_database_surfaces
  00042	c1 f8 04	 sar	 eax, 4
  00045	89 45 f4	 mov	 DWORD PTR _global_surface_index$[ebp], eax

; 1424 : 
; 1425 : 	surface = object_3d_vb_slot_references[global_surface_index];

  00048	8b 45 f4	 mov	 eax, DWORD PTR _global_surface_index$[ebp]
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A ; object_3d_vb_slot_references
  00051	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00054	89 55 e0	 mov	 DWORD PTR _surface$[ebp], edx

; 1426 : 
; 1427 : 	//
; 1428 : 	// Get the type of vertex buffer we need
; 1429 : 	//
; 1430 : 
; 1431 : 	if ( current_object_3d_surface->textured )

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0005c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0005f	66 c1 e9 03	 shr	 cx, 3
  00063	66 83 e1 01	 and	 cx, 1
  00067	0f b7 d1	 movzx	 edx, cx
  0006a	85 d2		 test	 edx, edx
  0006c	74 29		 je	 SHORT $LN40@object_3d_

; 1432 : 	{
; 1433 : 		if ( current_object_3d_surface->has_luminosity_texture )

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00073	66 8b 08	 mov	 cx, WORD PTR [eax]
  00076	66 c1 e9 04	 shr	 cx, 4
  0007a	66 83 e1 01	 and	 cx, 1
  0007e	0f b7 d1	 movzx	 edx, cx
  00081	85 d2		 test	 edx, edx
  00083	74 09		 je	 SHORT $LN42@object_3d_

; 1434 : 		{
; 1435 : 			type = D3D_VB_LIGHTMAP_TYPE;

  00085	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _type$[ebp], 2

; 1436 : 		}
; 1437 : 		else

  0008c	eb 07		 jmp	 SHORT $LN43@object_3d_
$LN42@object_3d_:

; 1438 : 		{
; 1439 : 			type = D3D_VB_TEXTURED_TYPE;

  0008e	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _type$[ebp], 1
$LN43@object_3d_:

; 1440 : 		}
; 1441 : 	}
; 1442 : 	else

  00095	eb 07		 jmp	 SHORT $LN41@object_3d_
$LN40@object_3d_:

; 1443 : 	{
; 1444 : 		type = D3D_VB_PLAIN_TYPE;

  00097	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0
$LN41@object_3d_:

; 1445 : 	}
; 1446 : 
; 1447 : 	//
; 1448 : 	// Now, figure out what size slot we're dealing with
; 1449 : 	//
; 1450 : 
; 1451 : 	number_of_surface_points = current_object_3d_surface->number_of_points;

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000a3	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  000a7	89 4d e4	 mov	 DWORD PTR _number_of_surface_points$[ebp], ecx

; 1452 : 	if ( number_of_surface_points == 0 )

  000aa	83 7d e4 00	 cmp	 DWORD PTR _number_of_surface_points$[ebp], 0
  000ae	75 07		 jne	 SHORT $LN44@object_3d_

; 1453 : 	{
; 1454 : 		number_of_surface_points = 256;

  000b0	c7 45 e4 00 01
	00 00		 mov	 DWORD PTR _number_of_surface_points$[ebp], 256 ; 00000100H
$LN44@object_3d_:

; 1455 : 	}
; 1456 : 
; 1457 : 	size_slot = 0;

  000b7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _size_slot$[ebp], 0

; 1458 : 	number_of_vertices_in_slot = MAX_NUMBER_OF_VERTICES_IN_D3D_VB_SLOT;

  000be	c7 45 ec 00 01
	00 00		 mov	 DWORD PTR _number_of_vertices_in_slot$[ebp], 256 ; 00000100H

; 1459 : 	half_number_of_vertices_in_slot = MAX_NUMBER_OF_VERTICES_IN_D3D_VB_SLOT / 2;

  000c5	c7 45 e8 80 00
	00 00		 mov	 DWORD PTR _half_number_of_vertices_in_slot$[ebp], 128 ; 00000080H
$LN2@object_3d_:

; 1460 : 
; 1461 : 	while ( ( number_of_surface_points < half_number_of_vertices_in_slot ) && ( half_number_of_vertices_in_slot >= MIN_NUMBER_OF_VERTICES_IN_D3D_VB_SLOT ) )

  000cc	8b 45 e4	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  000cf	3b 45 e8	 cmp	 eax, DWORD PTR _half_number_of_vertices_in_slot$[ebp]
  000d2	7d 21		 jge	 SHORT $LN3@object_3d_
  000d4	83 7d e8 20	 cmp	 DWORD PTR _half_number_of_vertices_in_slot$[ebp], 32 ; 00000020H
  000d8	7c 1b		 jl	 SHORT $LN3@object_3d_

; 1462 : 	{
; 1463 : 		size_slot++;

  000da	8b 45 f0	 mov	 eax, DWORD PTR _size_slot$[ebp]
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 f0	 mov	 DWORD PTR _size_slot$[ebp], eax

; 1464 : 		number_of_vertices_in_slot >>= 1;

  000e3	8b 45 ec	 mov	 eax, DWORD PTR _number_of_vertices_in_slot$[ebp]
  000e6	d1 f8		 sar	 eax, 1
  000e8	89 45 ec	 mov	 DWORD PTR _number_of_vertices_in_slot$[ebp], eax

; 1465 : 		half_number_of_vertices_in_slot >>= 1;

  000eb	8b 45 e8	 mov	 eax, DWORD PTR _half_number_of_vertices_in_slot$[ebp]
  000ee	d1 f8		 sar	 eax, 1
  000f0	89 45 e8	 mov	 DWORD PTR _half_number_of_vertices_in_slot$[ebp], eax

; 1466 : 	}

  000f3	eb d7		 jmp	 SHORT $LN2@object_3d_
$LN3@object_3d_:

; 1467 : 
; 1468 : 	prevent_rendering = FALSE;

  000f5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _prevent_rendering$[ebp], 0

; 1469 : 
; 1470 : 	if ( !surface )

  000fc	83 7d e0 00	 cmp	 DWORD PTR _surface$[ebp], 0
  00100	0f 85 e6 0c 00
	00		 jne	 $LN51@object_3d_

; 1471 : 	{
; 1472 : 		int
; 1473 : 			ret;
; 1474 : 
; 1475 : 		int
; 1476 : 			face_count,
; 1477 : 			vertex_count,
; 1478 : 			current_face_index_offset,
; 1479 : 			surface_vertex_offset,
; 1480 : 			lock_flags;
; 1481 : 
; 1482 : 		float
; 1483 : 			xmax,
; 1484 : 			ymax,
; 1485 : 			zmax;
; 1486 : 
; 1487 : 		WORD
; 1488 : 			*indices;
; 1489 : 
; 1490 : 		object_3d_face
; 1491 : 			*faces;
; 1492 : 
; 1493 : 		point_3d_short_reference
; 1494 : 			*saved_object_3d_point_list;
; 1495 : 
; 1496 : 		point_3d_plain_reference
; 1497 : 			*saved_object_3d_face_normal_list;
; 1498 : 
; 1499 : 		//
; 1500 : 		// Remove first vb slot of this type
; 1501 : 		//
; 1502 : 
; 1503 : 		surface = d3d_vb_slots_head[type][size_slot];

  00106	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00109	c1 e0 04	 shl	 eax, 4
  0010c	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0010f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?d3d_vb_slots_head@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  00116	89 55 e0	 mov	 DWORD PTR _surface$[ebp], edx

; 1504 : 
; 1505 : 		if ( surface->surface_reference )

  00119	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  0011c	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00120	74 0c		 je	 SHORT $LN46@object_3d_

; 1506 : 		{
; 1507 : 			*( surface->surface_reference ) = NULL;

  00122	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00125	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00128	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN46@object_3d_:

; 1508 : 		}
; 1509 : 
; 1510 : 		//
; 1511 : 		// Try to lock the vertex buffer
; 1512 : 		//
; 1513 : 
; 1514 : 		textured_vertices = NULL;

  0012e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _textured_vertices$[ebp], 0

; 1515 : 		plain_vertices = NULL;

  00135	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _plain_vertices$[ebp], 0

; 1516 : 		lightmap_vertices = NULL;

  0013c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _lightmap_vertices$[ebp], 0

; 1517 : 
; 1518 : 		lock_flags = DDLOCK_NOSYSLOCK | DDLOCK_WRITEONLY | DDLOCK_SURFACEMEMORYPTR;

  00143	c7 45 bc 20 08
	00 00		 mov	 DWORD PTR _lock_flags$38[ebp], 2080 ; 00000820H

; 1519 : 
; 1520 : 		switch ( type )

  0014a	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0014d	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00153	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR tv135[ebp], 0
  0015a	74 14		 je	 SHORT $LN47@object_3d_
  0015c	83 bd b4 fe ff
	ff 01		 cmp	 DWORD PTR tv135[ebp], 1
  00163	74 24		 je	 SHORT $LN48@object_3d_
  00165	83 bd b4 fe ff
	ff 02		 cmp	 DWORD PTR tv135[ebp], 2
  0016c	74 34		 je	 SHORT $LN49@object_3d_
  0016e	eb 49		 jmp	 SHORT $LN4@object_3d_
$LN47@object_3d_:

; 1521 : 		{
; 1522 : 			case D3D_VB_PLAIN_TYPE:		ret = f3d_vertex_lock ( surface->buffer, lock_flags, ( LPVOID * ) &plain_vertices ); break;

  00170	8d 45 d8	 lea	 eax, DWORD PTR _plain_vertices$[ebp]
  00173	50		 push	 eax
  00174	8b 4d bc	 mov	 ecx, DWORD PTR _lock_flags$38[ebp]
  00177	51		 push	 ecx
  00178	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  0017b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 ?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock
  00184	89 45 d0	 mov	 DWORD PTR _ret$43[ebp], eax
  00187	eb 30		 jmp	 SHORT $LN4@object_3d_
$LN48@object_3d_:

; 1523 : 			case D3D_VB_TEXTURED_TYPE: ret = f3d_vertex_lock ( surface->buffer, lock_flags, ( LPVOID * ) &textured_vertices ); break;

  00189	8d 45 dc	 lea	 eax, DWORD PTR _textured_vertices$[ebp]
  0018c	50		 push	 eax
  0018d	8b 4d bc	 mov	 ecx, DWORD PTR _lock_flags$38[ebp]
  00190	51		 push	 ecx
  00191	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00194	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock
  0019d	89 45 d0	 mov	 DWORD PTR _ret$43[ebp], eax
  001a0	eb 17		 jmp	 SHORT $LN4@object_3d_
$LN49@object_3d_:

; 1524 : 			case D3D_VB_LIGHTMAP_TYPE: ret = f3d_vertex_lock ( surface->buffer, lock_flags, ( LPVOID * ) &lightmap_vertices ); break;

  001a2	8d 45 d4	 lea	 eax, DWORD PTR _lightmap_vertices$[ebp]
  001a5	50		 push	 eax
  001a6	8b 4d bc	 mov	 ecx, DWORD PTR _lock_flags$38[ebp]
  001a9	51		 push	 ecx
  001aa	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  001ad	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock
  001b6	89 45 d0	 mov	 DWORD PTR _ret$43[ebp], eax
$LN4@object_3d_:

; 1525 : 		}
; 1526 : 
; 1527 : #if REPORT_RERENDER
; 1528 : 		switch ( type )
; 1529 : 		{
; 1530 : 			case D3D_VB_PLAIN_TYPE:		debug_log ( "Constructing plain" ); break;
; 1531 : 			case D3D_VB_TEXTURED_TYPE: debug_log ( "Constructing textured" ); break;
; 1532 : 			case D3D_VB_LIGHTMAP_TYPE: debug_log ( "Constructing lightmap" ); break;
; 1533 : 		}
; 1534 : #endif
; 1535 : 
; 1536 : 		if ( !ret )

  001b9	83 7d d0 00	 cmp	 DWORD PTR _ret$43[ebp], 0
  001bd	75 0c		 jne	 SHORT $LN50@object_3d_

; 1537 : 		{
; 1538 : 			//
; 1539 : 			// Don't try to draw this vertex buffer!!!!
; 1540 : 			//
; 1541 : 
; 1542 : 			prevent_rendering = TRUE;

  001bf	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _prevent_rendering$[ebp], 1

; 1543 : 		}
; 1544 : 		else

  001c6	e9 21 0c 00 00	 jmp	 $LN51@object_3d_
$LN50@object_3d_:

; 1545 : 		{
; 1546 : 			object_3d_vb_slot_references[global_surface_index] = surface;

  001cb	8b 45 f4	 mov	 eax, DWORD PTR _global_surface_index$[ebp]
  001ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A ; object_3d_vb_slot_references
  001d4	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  001d7	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1547 : 			surface->surface_reference = &object_3d_vb_slot_references[global_surface_index];

  001da	8b 45 f4	 mov	 eax, DWORD PTR _global_surface_index$[ebp]
  001dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A ; object_3d_vb_slot_references
  001e3	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  001e6	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  001e9	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1548 : 			indices = surface->indices;

  001ec	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  001ef	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001f2	89 4d ac	 mov	 DWORD PTR _indices$34[ebp], ecx

; 1549 : 
; 1550 : 			saved_object_3d_point_list = current_object_3d_point_list;

  001f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  001fa	89 45 a4	 mov	 DWORD PTR _saved_object_3d_point_list$32[ebp], eax

; 1551 : 			saved_object_3d_face_normal_list = current_object_3d_face_normal_list;

  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00202	89 45 a0	 mov	 DWORD PTR _saved_object_3d_face_normal_list$31[ebp], eax

; 1552 : 
; 1553 : 			xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  00205	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00208	51		 push	 ecx
  00209	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0020e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00213	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00218	d9 9d cc fe ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  0021e	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00221	51		 push	 ecx
  00222	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022c	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00231	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  00237	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0023d	52		 push	 edx
  0023e	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0024a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0024e	f3 0f 11 45 b8	 movss	 DWORD PTR _xmax$37[ebp], xmm0

; 1554 : 			ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  00253	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00256	51		 push	 ecx
  00257	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0025c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00261	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00266	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  0026c	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0026f	51		 push	 ecx
  00270	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0027f	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  00285	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0028b	52		 push	 edx
  0028c	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00298	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0029c	f3 0f 11 45 b4	 movss	 DWORD PTR _ymax$36[ebp], xmm0

; 1555 : 			zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  002a1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  002a4	51		 push	 ecx
  002a5	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  002aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002af	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002b4	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  002ba	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  002bd	51		 push	 ecx
  002be	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  002c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c8	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  002cd	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  002d3	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  002d9	52		 push	 edx
  002da	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  002e0	50		 push	 eax
  002e1	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002e6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002ea	f3 0f 11 45 b0	 movss	 DWORD PTR _zmax$35[ebp], xmm0

; 1556 : 
; 1557 : 			current_face_index_offset = 0;

  002ef	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _current_face_index_offset$40[ebp], 0

; 1558 : 
; 1559 : 			surface_vertex_offset = surface->vertex_offset;

  002f6	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  002f9	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  002fd	89 4d c0	 mov	 DWORD PTR _surface_vertex_offset$39[ebp], ecx

; 1560 : 
; 1561 : 			if ( current_object_3d_surface->textured )

  00300	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00305	66 8b 08	 mov	 cx, WORD PTR [eax]
  00308	66 c1 e9 03	 shr	 cx, 3
  0030c	66 83 e1 01	 and	 cx, 1
  00310	0f b7 d1	 movzx	 edx, cx
  00313	85 d2		 test	 edx, edx
  00315	0f 84 6e 06 00
	00		 je	 $LN52@object_3d_

; 1562 : 			{
; 1563 : 				if ( current_object_3d_surface->has_luminosity_texture )

  0031b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00320	66 8b 08	 mov	 cx, WORD PTR [eax]
  00323	66 c1 e9 04	 shr	 cx, 4
  00327	66 83 e1 01	 and	 cx, 1
  0032b	0f b7 d1	 movzx	 edx, cx
  0032e	85 d2		 test	 edx, edx
  00330	0f 84 2b 03 00
	00		 je	 $LN54@object_3d_

; 1564 : 				{
; 1565 : 					for ( vertex_count = 0; vertex_count < number_of_surface_points; vertex_count++ )

  00336	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertex_count$41[ebp], 0
  0033d	eb 09		 jmp	 SHORT $LN8@object_3d_
$LN6@object_3d_:
  0033f	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00342	83 c0 01	 add	 eax, 1
  00345	89 45 c8	 mov	 DWORD PTR _vertex_count$41[ebp], eax
$LN8@object_3d_:
  00348	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  0034b	3b 45 e4	 cmp	 eax, DWORD PTR _number_of_surface_points$[ebp]
  0034e	0f 8d af 01 00
	00		 jge	 $LN7@object_3d_

; 1566 : 					{
; 1567 : 						object_short_3d_point
; 1568 : 							*point;
; 1569 : 
; 1570 : 						point = &object->points[ current_object_3d_surface_point_list[vertex_count].point ];

  00354	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00357	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  0035d	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00361	6b c2 06	 imul	 eax, edx, 6
  00364	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00367	03 41 40	 add	 eax, DWORD PTR [ecx+64]
  0036a	89 45 9c	 mov	 DWORD PTR _point$30[ebp], eax

; 1571 : 
; 1572 : 						lightmap_vertices[vertex_count+surface_vertex_offset].x = ( ( ( float ) point->x ) * xmax / 32767.0 );

  0036d	8b 45 9c	 mov	 eax, DWORD PTR _point$30[ebp]
  00370	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00373	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00377	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _xmax$37[ebp]
  0037c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00380	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00388	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038c	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  0038f	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  00392	6b c2 28	 imul	 eax, edx, 40
  00395	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  00398	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1573 : 						lightmap_vertices[vertex_count+surface_vertex_offset].y = ( ( ( float ) point->y ) * ymax / 32767.0 );

  0039d	8b 45 9c	 mov	 eax, DWORD PTR _point$30[ebp]
  003a0	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  003a4	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003a8	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _ymax$36[ebp]
  003ad	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003b1	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  003b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003bd	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  003c0	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  003c3	6b c2 28	 imul	 eax, edx, 40
  003c6	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  003c9	f3 0f 11 44 01
	04		 movss	 DWORD PTR [ecx+eax+4], xmm0

; 1574 : 						lightmap_vertices[vertex_count+surface_vertex_offset].z = ( ( ( float ) point->z ) * zmax / 32767.0 );

  003cf	8b 45 9c	 mov	 eax, DWORD PTR _point$30[ebp]
  003d2	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  003d6	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003da	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _zmax$35[ebp]
  003df	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003e3	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  003eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ef	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  003f2	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  003f5	6b c2 28	 imul	 eax, edx, 40
  003f8	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  003fb	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1575 : 
; 1576 : 						if ( current_object_3d_surface->smoothed )

  00401	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00406	66 8b 08	 mov	 cx, WORD PTR [eax]
  00409	66 c1 e9 02	 shr	 cx, 2
  0040d	66 83 e1 01	 and	 cx, 1
  00411	0f b7 d1	 movzx	 edx, cx
  00414	85 d2		 test	 edx, edx
  00416	74 6b		 je	 SHORT $LN56@object_3d_

; 1577 : 						{
; 1578 : 							object_3d_heading_pitch_normal
; 1579 : 								*point_normal;
; 1580 : 
; 1581 : 							vec3d
; 1582 : 								normal;
; 1583 : 
; 1584 : 							point_normal = &object->point_normals[ current_object_3d_surface_point_normal_list[vertex_count].point ];

  00418	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  0041b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
  00421	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00425	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00428	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0042b	8d 14 51	 lea	 edx, DWORD PTR [ecx+edx*2]
  0042e	89 55 98	 mov	 DWORD PTR _point_normal$29[ebp], edx

; 1585 : 							generate_object_3d_point_normal ( point_normal, &normal );

  00431	8d 45 8c	 lea	 eax, DWORD PTR _normal$28[ebp]
  00434	50		 push	 eax
  00435	8b 4d 98	 mov	 ecx, DWORD PTR _point_normal$29[ebp]
  00438	51		 push	 ecx
  00439	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1586 : 
; 1587 : 							lightmap_vertices[vertex_count+surface_vertex_offset].nx = normal.x;

  0043e	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00441	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  00444	6b c8 28	 imul	 ecx, eax, 40
  00447	8b 55 d4	 mov	 edx, DWORD PTR _lightmap_vertices$[ebp]
  0044a	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _normal$28[ebp]
  0044f	f3 0f 11 44 0a
	0c		 movss	 DWORD PTR [edx+ecx+12], xmm0

; 1588 : 							lightmap_vertices[vertex_count+surface_vertex_offset].ny = normal.y;

  00455	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00458	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  0045b	6b c8 28	 imul	 ecx, eax, 40
  0045e	8b 55 d4	 mov	 edx, DWORD PTR _lightmap_vertices$[ebp]
  00461	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _normal$28[ebp+4]
  00466	f3 0f 11 44 0a
	10		 movss	 DWORD PTR [edx+ecx+16], xmm0

; 1589 : 							lightmap_vertices[vertex_count+surface_vertex_offset].nz = normal.z;

  0046c	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  0046f	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  00472	6b c8 28	 imul	 ecx, eax, 40
  00475	8b 55 d4	 mov	 edx, DWORD PTR _lightmap_vertices$[ebp]
  00478	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _normal$28[ebp+8]
  0047d	f3 0f 11 44 0a
	14		 movss	 DWORD PTR [edx+ecx+20], xmm0
$LN56@object_3d_:

; 1590 : 						}
; 1591 : 
; 1592 : 						lightmap_vertices[vertex_count+surface_vertex_offset].tu = current_object_3d_surface_point_texture_list[vertex_count*2].u;

  00483	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00486	d1 e0		 shl	 eax, 1
  00488	8b 4d c8	 mov	 ecx, DWORD PTR _vertex_count$41[ebp]
  0048b	03 4d c0	 add	 ecx, DWORD PTR _surface_vertex_offset$39[ebp]
  0048e	6b d1 28	 imul	 edx, ecx, 40
  00491	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  00494	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  0049a	8b 04 c6	 mov	 eax, DWORD PTR [esi+eax*8]
  0049d	89 44 11 18	 mov	 DWORD PTR [ecx+edx+24], eax

; 1593 : 						lightmap_vertices[vertex_count+surface_vertex_offset].tv = current_object_3d_surface_point_texture_list[vertex_count*2].v;

  004a1	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  004a4	d1 e0		 shl	 eax, 1
  004a6	8b 4d c8	 mov	 ecx, DWORD PTR _vertex_count$41[ebp]
  004a9	03 4d c0	 add	 ecx, DWORD PTR _surface_vertex_offset$39[ebp]
  004ac	6b d1 28	 imul	 edx, ecx, 40
  004af	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  004b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  004b8	8b 44 c6 04	 mov	 eax, DWORD PTR [esi+eax*8+4]
  004bc	89 44 11 1c	 mov	 DWORD PTR [ecx+edx+28], eax

; 1594 : 						lightmap_vertices[vertex_count+surface_vertex_offset].tu2 = current_object_3d_surface_point_texture_list[vertex_count*2+1].u;

  004c0	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  004c3	d1 e0		 shl	 eax, 1
  004c5	8b 4d c8	 mov	 ecx, DWORD PTR _vertex_count$41[ebp]
  004c8	03 4d c0	 add	 ecx, DWORD PTR _surface_vertex_offset$39[ebp]
  004cb	6b d1 28	 imul	 edx, ecx, 40
  004ce	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  004d1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  004d7	8b 44 c6 08	 mov	 eax, DWORD PTR [esi+eax*8+8]
  004db	89 44 11 20	 mov	 DWORD PTR [ecx+edx+32], eax

; 1595 : 						lightmap_vertices[vertex_count+surface_vertex_offset].tv2 = current_object_3d_surface_point_texture_list[vertex_count*2+1].v;

  004df	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  004e2	d1 e0		 shl	 eax, 1
  004e4	8b 4d c8	 mov	 ecx, DWORD PTR _vertex_count$41[ebp]
  004e7	03 4d c0	 add	 ecx, DWORD PTR _surface_vertex_offset$39[ebp]
  004ea	6b d1 28	 imul	 edx, ecx, 40
  004ed	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  004f0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  004f6	8b 44 c6 0c	 mov	 eax, DWORD PTR [esi+eax*8+12]
  004fa	89 44 11 24	 mov	 DWORD PTR [ecx+edx+36], eax

; 1596 : 					}

  004fe	e9 3c fe ff ff	 jmp	 $LN6@object_3d_
$LN7@object_3d_:

; 1597 : 
; 1598 : 					//
; 1599 : 					// Generate any face point normals
; 1600 : 					//
; 1601 : 
; 1602 : 					if ( !current_object_3d_surface->smoothed )

  00503	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00508	66 8b 08	 mov	 cx, WORD PTR [eax]
  0050b	66 c1 e9 02	 shr	 cx, 2
  0050f	66 83 e1 01	 and	 cx, 1
  00513	0f b7 d1	 movzx	 edx, cx
  00516	85 d2		 test	 edx, edx
  00518	0f 85 3e 01 00
	00		 jne	 $LN10@object_3d_

; 1603 : 					{
; 1604 : 						faces = current_object_3d_faces;

  0051e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00523	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1605 : 						for ( face_count = 0; face_count < current_object_3d_surface->number_of_faces; face_count++ )

  00526	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _face_count$42[ebp], 0
  0052d	eb 09		 jmp	 SHORT $LN11@object_3d_
$LN9@object_3d_:
  0052f	8b 45 cc	 mov	 eax, DWORD PTR _face_count$42[ebp]
  00532	83 c0 01	 add	 eax, 1
  00535	89 45 cc	 mov	 DWORD PTR _face_count$42[ebp], eax
$LN11@object_3d_:
  00538	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0053d	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00541	39 4d cc	 cmp	 DWORD PTR _face_count$42[ebp], ecx
  00544	0f 8d 12 01 00
	00		 jge	 $LN10@object_3d_

; 1606 : 						{
; 1607 : 							if ( current_object_3d_surface->polygons )

  0054a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0054f	66 8b 08	 mov	 cx, WORD PTR [eax]
  00552	66 83 e1 01	 and	 cx, 1
  00556	0f b7 d1	 movzx	 edx, cx
  00559	85 d2		 test	 edx, edx
  0055b	0f 84 c6 00 00
	00		 je	 $LN58@object_3d_

; 1608 : 							{
; 1609 : 								int
; 1610 : 									point_index;
; 1611 : 
; 1612 : 								object_3d_heading_pitch_normal
; 1613 : 									*point_normal;
; 1614 : 
; 1615 : 								vec3d
; 1616 : 									normal;
; 1617 : 
; 1618 : 								point_normal = &object->point_normals[ current_object_3d_face_normal_list->point ];

  00561	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00566	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00569	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  0056c	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0056f	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00572	89 4d 84	 mov	 DWORD PTR _point_normal$26[ebp], ecx

; 1619 : 								generate_object_3d_point_normal ( point_normal, &normal );

  00575	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _normal$25[ebp]
  0057b	50		 push	 eax
  0057c	8b 4d 84	 mov	 ecx, DWORD PTR _point_normal$26[ebp]
  0057f	51		 push	 ecx
  00580	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1620 : 
; 1621 : 								for ( point_index = 0; point_index < faces->number_of_points; point_index++ )

  00585	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _point_index$27[ebp], 0
  0058c	eb 09		 jmp	 SHORT $LN14@object_3d_
$LN12@object_3d_:
  0058e	8b 45 88	 mov	 eax, DWORD PTR _point_index$27[ebp]
  00591	83 c0 01	 add	 eax, 1
  00594	89 45 88	 mov	 DWORD PTR _point_index$27[ebp], eax
$LN14@object_3d_:
  00597	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  0059a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0059d	39 4d 88	 cmp	 DWORD PTR _point_index$27[ebp], ecx
  005a0	7d 5b		 jge	 SHORT $LN13@object_3d_

; 1622 : 								{
; 1623 : 									int
; 1624 : 										index;
; 1625 : 
; 1626 : 
; 1627 : 									index = current_object_3d_point_list[point_index].point + surface_vertex_offset;

  005a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  005a7	03 45 88	 add	 eax, DWORD PTR _point_index$27[ebp]
  005aa	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  005ad	03 4d c0	 add	 ecx, DWORD PTR _surface_vertex_offset$39[ebp]
  005b0	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _index$24[ebp], ecx

; 1628 : 
; 1629 : 									lightmap_vertices[index].nx = normal.x;

  005b6	6b 85 74 ff ff
	ff 28		 imul	 eax, DWORD PTR _index$24[ebp], 40
  005bd	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  005c0	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$25[ebp]
  005c8	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 1630 : 									lightmap_vertices[index].ny = normal.y;

  005ce	6b 85 74 ff ff
	ff 28		 imul	 eax, DWORD PTR _index$24[ebp], 40
  005d5	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  005d8	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$25[ebp+4]
  005e0	f3 0f 11 44 01
	10		 movss	 DWORD PTR [ecx+eax+16], xmm0

; 1631 : 									lightmap_vertices[index].nz = normal.z;

  005e6	6b 85 74 ff ff
	ff 28		 imul	 eax, DWORD PTR _index$24[ebp], 40
  005ed	8b 4d d4	 mov	 ecx, DWORD PTR _lightmap_vertices$[ebp]
  005f0	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _normal$25[ebp+8]
  005f5	f3 0f 11 44 01
	14		 movss	 DWORD PTR [ecx+eax+20], xmm0

; 1632 : 								}

  005fb	eb 91		 jmp	 SHORT $LN12@object_3d_
$LN13@object_3d_:

; 1633 : 
; 1634 : 								current_object_3d_face_normal_list++;

  005fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00602	83 c0 02	 add	 eax, 2
  00605	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1635 : 								current_object_3d_point_list += faces->number_of_points;

  0060a	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  0060d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00610	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00616	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1636 : 								faces++;

  0061c	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  0061f	83 c0 01	 add	 eax, 1
  00622	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1637 : 							}
; 1638 : 							else

  00625	eb 30		 jmp	 SHORT $LN59@object_3d_
$LN58@object_3d_:

; 1639 : 							{
; 1640 : 								ASSERT ( FALSE );

  00627	b8 01 00 00 00	 mov	 eax, 1
  0062c	85 c0		 test	 eax, eax
  0062e	74 1a		 je	 SHORT $LN60@object_3d_
  00630	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA
  00635	05 f5 00 00 00	 add	 eax, 245		; 000000f5H
  0063a	50		 push	 eax
  0063b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00640	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  00645	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN60@object_3d_:

; 1641 : 								current_object_3d_point_list += 2;

  0064a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0064f	83 c0 02	 add	 eax, 2
  00652	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN59@object_3d_:

; 1642 : 							}
; 1643 : 						}

  00657	e9 d3 fe ff ff	 jmp	 $LN9@object_3d_
$LN10@object_3d_:

; 1644 : 					}
; 1645 : 				}
; 1646 : 				else

  0065c	e9 23 03 00 00	 jmp	 $LN19@object_3d_
$LN54@object_3d_:

; 1647 : 				{
; 1648 : 					for ( vertex_count = 0; vertex_count < number_of_surface_points; vertex_count++ )

  00661	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertex_count$41[ebp], 0
  00668	eb 09		 jmp	 SHORT $LN17@object_3d_
$LN15@object_3d_:
  0066a	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  0066d	83 c0 01	 add	 eax, 1
  00670	89 45 c8	 mov	 DWORD PTR _vertex_count$41[ebp], eax
$LN17@object_3d_:
  00673	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00676	3b 45 e4	 cmp	 eax, DWORD PTR _number_of_surface_points$[ebp]
  00679	0f 8d 8b 01 00
	00		 jge	 $LN16@object_3d_

; 1649 : 					{
; 1650 : 						object_short_3d_point
; 1651 : 							*point;
; 1652 : 
; 1653 : 						point = &object->points[ current_object_3d_surface_point_list[vertex_count].point ];

  0067f	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00682	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00688	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0068c	6b c2 06	 imul	 eax, edx, 6
  0068f	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00692	03 41 40	 add	 eax, DWORD PTR [ecx+64]
  00695	89 85 70 ff ff
	ff		 mov	 DWORD PTR _point$23[ebp], eax

; 1654 : 
; 1655 : 						textured_vertices[vertex_count+surface_vertex_offset].x = ( ( ( float ) point->x ) * xmax / 32767.0 );

  0069b	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _point$23[ebp]
  006a1	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  006a4	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  006a8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _xmax$37[ebp]
  006ad	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006b1	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  006b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006bd	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  006c0	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  006c3	c1 e2 05	 shl	 edx, 5
  006c6	8b 45 dc	 mov	 eax, DWORD PTR _textured_vertices$[ebp]
  006c9	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 1656 : 						textured_vertices[vertex_count+surface_vertex_offset].y = ( ( ( float ) point->y ) * ymax / 32767.0 );

  006ce	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _point$23[ebp]
  006d4	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  006d8	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  006dc	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _ymax$36[ebp]
  006e1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006e5	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  006ed	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006f1	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  006f4	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  006f7	c1 e2 05	 shl	 edx, 5
  006fa	8b 45 dc	 mov	 eax, DWORD PTR _textured_vertices$[ebp]
  006fd	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 1657 : 						textured_vertices[vertex_count+surface_vertex_offset].z = ( ( ( float ) point->z ) * zmax / 32767.0 );

  00703	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _point$23[ebp]
  00709	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0070d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00711	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _zmax$35[ebp]
  00716	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0071a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00722	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00726	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  00729	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  0072c	c1 e2 05	 shl	 edx, 5
  0072f	8b 45 dc	 mov	 eax, DWORD PTR _textured_vertices$[ebp]
  00732	f3 0f 11 44 10
	08		 movss	 DWORD PTR [eax+edx+8], xmm0

; 1658 : 
; 1659 : 						if ( current_object_3d_surface->smoothed )

  00738	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0073d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00740	66 c1 e9 02	 shr	 cx, 2
  00744	66 83 e1 01	 and	 cx, 1
  00748	0f b7 d1	 movzx	 edx, cx
  0074b	85 d2		 test	 edx, edx
  0074d	74 7d		 je	 SHORT $LN61@object_3d_

; 1660 : 						{
; 1661 : 							object_3d_heading_pitch_normal
; 1662 : 								*point_normal;
; 1663 : 
; 1664 : 							vec3d
; 1665 : 								normal;
; 1666 : 
; 1667 : 							point_normal = &object->point_normals[ current_object_3d_surface_point_normal_list[vertex_count].point ];

  0074f	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00752	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
  00758	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0075c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0075f	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00762	8d 14 51	 lea	 edx, DWORD PTR [ecx+edx*2]
  00765	89 95 6c ff ff
	ff		 mov	 DWORD PTR _point_normal$22[ebp], edx

; 1668 : 							generate_object_3d_point_normal ( point_normal, &normal );

  0076b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _normal$21[ebp]
  00771	50		 push	 eax
  00772	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _point_normal$22[ebp]
  00778	51		 push	 ecx
  00779	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1669 : 
; 1670 : 							textured_vertices[vertex_count+surface_vertex_offset].nx = normal.x;

  0077e	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00781	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  00784	c1 e0 05	 shl	 eax, 5
  00787	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  0078a	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$21[ebp]
  00792	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 1671 : 							textured_vertices[vertex_count+surface_vertex_offset].ny = normal.y;

  00798	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  0079b	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  0079e	c1 e0 05	 shl	 eax, 5
  007a1	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  007a4	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$21[ebp+4]
  007ac	f3 0f 11 44 01
	10		 movss	 DWORD PTR [ecx+eax+16], xmm0

; 1672 : 							textured_vertices[vertex_count+surface_vertex_offset].nz = normal.z;

  007b2	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  007b5	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  007b8	c1 e0 05	 shl	 eax, 5
  007bb	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  007be	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$21[ebp+8]
  007c6	f3 0f 11 44 01
	14		 movss	 DWORD PTR [ecx+eax+20], xmm0
$LN61@object_3d_:

; 1673 : 						}
; 1674 : 
; 1675 : 						textured_vertices[vertex_count+surface_vertex_offset].tu = current_object_3d_surface_point_texture_list[vertex_count].u;

  007cc	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  007cf	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  007d2	c1 e0 05	 shl	 eax, 5
  007d5	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  007d8	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  007db	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  007e1	8b 14 d6	 mov	 edx, DWORD PTR [esi+edx*8]
  007e4	89 54 01 18	 mov	 DWORD PTR [ecx+eax+24], edx

; 1676 : 						textured_vertices[vertex_count+surface_vertex_offset].tv = current_object_3d_surface_point_texture_list[vertex_count].v;

  007e8	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  007eb	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  007ee	c1 e0 05	 shl	 eax, 5
  007f1	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  007f4	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  007f7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  007fd	8b 54 d6 04	 mov	 edx, DWORD PTR [esi+edx*8+4]
  00801	89 54 01 1c	 mov	 DWORD PTR [ecx+eax+28], edx

; 1677 : 					}

  00805	e9 60 fe ff ff	 jmp	 $LN15@object_3d_
$LN16@object_3d_:

; 1678 : 
; 1679 : 					//
; 1680 : 					// Generate the index list for vertex buffer ( and any face point normals )
; 1681 : 					//
; 1682 : 
; 1683 : 					if ( !current_object_3d_surface->smoothed )

  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0080f	66 8b 08	 mov	 cx, WORD PTR [eax]
  00812	66 c1 e9 02	 shr	 cx, 2
  00816	66 83 e1 01	 and	 cx, 1
  0081a	0f b7 d1	 movzx	 edx, cx
  0081d	85 d2		 test	 edx, edx
  0081f	0f 85 5f 01 00
	00		 jne	 $LN19@object_3d_

; 1684 : 					{
; 1685 : 						faces = current_object_3d_faces;

  00825	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0082a	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1686 : 						for ( face_count = 0; face_count < current_object_3d_surface->number_of_faces; face_count++ )

  0082d	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _face_count$42[ebp], 0
  00834	eb 09		 jmp	 SHORT $LN20@object_3d_
$LN18@object_3d_:
  00836	8b 45 cc	 mov	 eax, DWORD PTR _face_count$42[ebp]
  00839	83 c0 01	 add	 eax, 1
  0083c	89 45 cc	 mov	 DWORD PTR _face_count$42[ebp], eax
$LN20@object_3d_:
  0083f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00844	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00848	39 4d cc	 cmp	 DWORD PTR _face_count$42[ebp], ecx
  0084b	0f 8d 33 01 00
	00		 jge	 $LN19@object_3d_

; 1687 : 						{
; 1688 : 							if ( current_object_3d_surface->polygons )

  00851	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00856	66 8b 08	 mov	 cx, WORD PTR [eax]
  00859	66 83 e1 01	 and	 cx, 1
  0085d	0f b7 d1	 movzx	 edx, cx
  00860	85 d2		 test	 edx, edx
  00862	0f 84 e7 00 00
	00		 je	 $LN63@object_3d_

; 1689 : 							{
; 1690 : 								int
; 1691 : 									point_index;
; 1692 : 
; 1693 : 								object_3d_heading_pitch_normal
; 1694 : 									*point_normal;
; 1695 : 
; 1696 : 								vec3d
; 1697 : 									normal;
; 1698 : 
; 1699 : 
; 1700 : 								point_normal = &object->point_normals[ current_object_3d_face_normal_list->point ];

  00868	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  0086d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00870	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  00873	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00876	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00879	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _point_normal$19[ebp], ecx

; 1701 : 								generate_object_3d_point_normal ( point_normal, &normal );

  0087f	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _normal$18[ebp]
  00885	50		 push	 eax
  00886	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _point_normal$19[ebp]
  0088c	51		 push	 ecx
  0088d	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1702 : 								for ( point_index = 0; point_index < faces->number_of_points; point_index++ )

  00892	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _point_index$20[ebp], 0
  0089c	eb 0f		 jmp	 SHORT $LN23@object_3d_
$LN21@object_3d_:
  0089e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _point_index$20[ebp]
  008a4	83 c0 01	 add	 eax, 1
  008a7	89 85 5c ff ff
	ff		 mov	 DWORD PTR _point_index$20[ebp], eax
$LN23@object_3d_:
  008ad	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  008b0	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  008b3	39 8d 5c ff ff
	ff		 cmp	 DWORD PTR _point_index$20[ebp], ecx
  008b9	7d 6a		 jge	 SHORT $LN22@object_3d_

; 1703 : 								{
; 1704 : 									int
; 1705 : 										index;
; 1706 : 
; 1707 : 
; 1708 : 									index = current_object_3d_point_list[point_index].point + surface_vertex_offset;

  008bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  008c0	03 85 5c ff ff
	ff		 add	 eax, DWORD PTR _point_index$20[ebp]
  008c6	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  008c9	03 4d c0	 add	 ecx, DWORD PTR _surface_vertex_offset$39[ebp]
  008cc	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _index$17[ebp], ecx

; 1709 : 
; 1710 : 									textured_vertices[index].nx = normal.x;

  008d2	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _index$17[ebp]
  008d8	c1 e0 05	 shl	 eax, 5
  008db	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  008de	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$18[ebp]
  008e6	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 1711 : 									textured_vertices[index].ny = normal.y;

  008ec	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _index$17[ebp]
  008f2	c1 e0 05	 shl	 eax, 5
  008f5	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  008f8	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$18[ebp+4]
  00900	f3 0f 11 44 01
	10		 movss	 DWORD PTR [ecx+eax+16], xmm0

; 1712 : 									textured_vertices[index].nz = normal.z;

  00906	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _index$17[ebp]
  0090c	c1 e0 05	 shl	 eax, 5
  0090f	8b 4d dc	 mov	 ecx, DWORD PTR _textured_vertices$[ebp]
  00912	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$18[ebp+8]
  0091a	f3 0f 11 44 01
	14		 movss	 DWORD PTR [ecx+eax+20], xmm0

; 1713 : 								}

  00920	e9 79 ff ff ff	 jmp	 $LN21@object_3d_
$LN22@object_3d_:

; 1714 : 								current_object_3d_face_normal_list++;

  00925	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  0092a	83 c0 02	 add	 eax, 2
  0092d	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1715 : 								current_object_3d_point_list += faces->number_of_points;

  00932	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00935	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00938	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0093e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1716 : 								faces++;

  00944	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00947	83 c0 01	 add	 eax, 1
  0094a	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1717 : 							}
; 1718 : 							else

  0094d	eb 30		 jmp	 SHORT $LN64@object_3d_
$LN63@object_3d_:

; 1719 : 							{
; 1720 : 								ASSERT ( FALSE );

  0094f	b8 01 00 00 00	 mov	 eax, 1
  00954	85 c0		 test	 eax, eax
  00956	74 1a		 je	 SHORT $LN65@object_3d_
  00958	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA
  0095d	05 45 01 00 00	 add	 eax, 325		; 00000145H
  00962	50		 push	 eax
  00963	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00968	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  0096d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN65@object_3d_:

; 1721 : 								current_object_3d_point_list += 2;

  00972	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00977	83 c0 02	 add	 eax, 2
  0097a	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN64@object_3d_:

; 1722 : 							}
; 1723 : 						}

  0097f	e9 b2 fe ff ff	 jmp	 $LN18@object_3d_
$LN19@object_3d_:

; 1724 : 					}
; 1725 : 				}
; 1726 : 			}
; 1727 : 			else

  00984	e9 e1 02 00 00	 jmp	 $LN28@object_3d_
$LN52@object_3d_:

; 1728 : 			{
; 1729 : 				for ( vertex_count = 0; vertex_count < number_of_surface_points; vertex_count++ )

  00989	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertex_count$41[ebp], 0
  00990	eb 09		 jmp	 SHORT $LN26@object_3d_
$LN24@object_3d_:
  00992	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00995	83 c0 01	 add	 eax, 1
  00998	89 45 c8	 mov	 DWORD PTR _vertex_count$41[ebp], eax
$LN26@object_3d_:
  0099b	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  0099e	3b 45 e4	 cmp	 eax, DWORD PTR _number_of_surface_points$[ebp]
  009a1	0f 8d 52 01 00
	00		 jge	 $LN25@object_3d_

; 1730 : 				{
; 1731 : 					object_short_3d_point
; 1732 : 						*point;
; 1733 : 
; 1734 : 					point = &object->points[ current_object_3d_surface_point_list[vertex_count].point ];

  009a7	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  009aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  009b0	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  009b4	6b c2 06	 imul	 eax, edx, 6
  009b7	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  009ba	03 41 40	 add	 eax, DWORD PTR [ecx+64]
  009bd	89 85 44 ff ff
	ff		 mov	 DWORD PTR _point$16[ebp], eax

; 1735 : 
; 1736 : 					plain_vertices[vertex_count+surface_vertex_offset].x = ( ( ( float ) point->x ) * xmax / 32767.0 );

  009c3	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _point$16[ebp]
  009c9	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  009cc	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  009d0	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _xmax$37[ebp]
  009d5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  009d9	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  009e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009e5	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  009e8	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  009eb	6b c2 18	 imul	 eax, edx, 24
  009ee	8b 4d d8	 mov	 ecx, DWORD PTR _plain_vertices$[ebp]
  009f1	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1737 : 					plain_vertices[vertex_count+surface_vertex_offset].y = ( ( ( float ) point->y ) * ymax / 32767.0 );

  009f6	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _point$16[ebp]
  009fc	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00a00	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00a04	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _ymax$36[ebp]
  00a09	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a0d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00a15	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a19	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  00a1c	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  00a1f	6b c2 18	 imul	 eax, edx, 24
  00a22	8b 4d d8	 mov	 ecx, DWORD PTR _plain_vertices$[ebp]
  00a25	f3 0f 11 44 01
	04		 movss	 DWORD PTR [ecx+eax+4], xmm0

; 1738 : 					plain_vertices[vertex_count+surface_vertex_offset].z = ( ( ( float ) point->z ) * zmax / 32767.0 );

  00a2b	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _point$16[ebp]
  00a31	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00a35	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00a39	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _zmax$35[ebp]
  00a3e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a42	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00a4a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a4e	8b 55 c8	 mov	 edx, DWORD PTR _vertex_count$41[ebp]
  00a51	03 55 c0	 add	 edx, DWORD PTR _surface_vertex_offset$39[ebp]
  00a54	6b c2 18	 imul	 eax, edx, 24
  00a57	8b 4d d8	 mov	 ecx, DWORD PTR _plain_vertices$[ebp]
  00a5a	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1739 : 
; 1740 : 					if ( current_object_3d_surface->smoothed )

  00a60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00a65	66 8b 08	 mov	 cx, WORD PTR [eax]
  00a68	66 c1 e9 02	 shr	 cx, 2
  00a6c	66 83 e1 01	 and	 cx, 1
  00a70	0f b7 d1	 movzx	 edx, cx
  00a73	85 d2		 test	 edx, edx
  00a75	74 7d		 je	 SHORT $LN66@object_3d_

; 1741 : 					{
; 1742 : 						object_3d_heading_pitch_normal
; 1743 : 							*point_normal;
; 1744 : 
; 1745 : 						vec3d
; 1746 : 							normal;
; 1747 : 
; 1748 : 						point_normal = &object->point_normals[ current_object_3d_surface_point_normal_list[vertex_count].point ];

  00a77	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00a7a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
  00a80	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00a84	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00a87	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00a8a	8d 14 51	 lea	 edx, DWORD PTR [ecx+edx*2]
  00a8d	89 95 40 ff ff
	ff		 mov	 DWORD PTR _point_normal$15[ebp], edx

; 1749 : 						generate_object_3d_point_normal ( point_normal, &normal );

  00a93	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _normal$14[ebp]
  00a99	50		 push	 eax
  00a9a	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _point_normal$15[ebp]
  00aa0	51		 push	 ecx
  00aa1	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1750 : 
; 1751 : 						plain_vertices[vertex_count+surface_vertex_offset].nx = normal.x;

  00aa6	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00aa9	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  00aac	6b c8 18	 imul	 ecx, eax, 24
  00aaf	8b 55 d8	 mov	 edx, DWORD PTR _plain_vertices$[ebp]
  00ab2	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$14[ebp]
  00aba	f3 0f 11 44 0a
	0c		 movss	 DWORD PTR [edx+ecx+12], xmm0

; 1752 : 						plain_vertices[vertex_count+surface_vertex_offset].ny = normal.y;

  00ac0	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00ac3	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  00ac6	6b c8 18	 imul	 ecx, eax, 24
  00ac9	8b 55 d8	 mov	 edx, DWORD PTR _plain_vertices$[ebp]
  00acc	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$14[ebp+4]
  00ad4	f3 0f 11 44 0a
	10		 movss	 DWORD PTR [edx+ecx+16], xmm0

; 1753 : 						plain_vertices[vertex_count+surface_vertex_offset].nz = normal.z;

  00ada	8b 45 c8	 mov	 eax, DWORD PTR _vertex_count$41[ebp]
  00add	03 45 c0	 add	 eax, DWORD PTR _surface_vertex_offset$39[ebp]
  00ae0	6b c8 18	 imul	 ecx, eax, 24
  00ae3	8b 55 d8	 mov	 edx, DWORD PTR _plain_vertices$[ebp]
  00ae6	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$14[ebp+8]
  00aee	f3 0f 11 44 0a
	14		 movss	 DWORD PTR [edx+ecx+20], xmm0
$LN66@object_3d_:

; 1754 : 					}
; 1755 : 				}

  00af4	e9 99 fe ff ff	 jmp	 $LN24@object_3d_
$LN25@object_3d_:

; 1756 : 
; 1757 : 				//
; 1758 : 				// Generate the index list for vertex buffer ( and any face point normals )
; 1759 : 				//
; 1760 : 
; 1761 : 				if ( !current_object_3d_surface->smoothed )

  00af9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00afe	66 8b 08	 mov	 cx, WORD PTR [eax]
  00b01	66 c1 e9 02	 shr	 cx, 2
  00b05	66 83 e1 01	 and	 cx, 1
  00b09	0f b7 d1	 movzx	 edx, cx
  00b0c	85 d2		 test	 edx, edx
  00b0e	0f 85 56 01 00
	00		 jne	 $LN28@object_3d_

; 1762 : 				{
; 1763 : 					faces = current_object_3d_faces;

  00b14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00b19	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1764 : 
; 1765 : 					for ( face_count = 0; face_count < current_object_3d_surface->number_of_faces; face_count++ )

  00b1c	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _face_count$42[ebp], 0
  00b23	eb 09		 jmp	 SHORT $LN29@object_3d_
$LN27@object_3d_:
  00b25	8b 45 cc	 mov	 eax, DWORD PTR _face_count$42[ebp]
  00b28	83 c0 01	 add	 eax, 1
  00b2b	89 45 cc	 mov	 DWORD PTR _face_count$42[ebp], eax
$LN29@object_3d_:
  00b2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00b33	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00b37	39 4d cc	 cmp	 DWORD PTR _face_count$42[ebp], ecx
  00b3a	0f 8d 2a 01 00
	00		 jge	 $LN28@object_3d_

; 1766 : 					{
; 1767 : 						if ( current_object_3d_surface->polygons )

  00b40	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00b45	66 8b 08	 mov	 cx, WORD PTR [eax]
  00b48	66 83 e1 01	 and	 cx, 1
  00b4c	0f b7 d1	 movzx	 edx, cx
  00b4f	85 d2		 test	 edx, edx
  00b51	0f 84 de 00 00
	00		 je	 $LN68@object_3d_

; 1768 : 						{
; 1769 : 							int
; 1770 : 								point_index;
; 1771 : 
; 1772 : 							object_3d_heading_pitch_normal
; 1773 : 								*point_normal;
; 1774 : 
; 1775 : 							vec3d
; 1776 : 								normal;
; 1777 : 
; 1778 : 							point_normal = &object->point_normals[ current_object_3d_face_normal_list->point ];

  00b57	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00b5c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00b5f	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  00b62	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00b65	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00b68	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _point_normal$12[ebp], ecx

; 1779 : 							generate_object_3d_point_normal ( point_normal, &normal );

  00b6e	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _normal$11[ebp]
  00b74	50		 push	 eax
  00b75	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _point_normal$12[ebp]
  00b7b	51		 push	 ecx
  00b7c	e8 00 00 00 00	 call	 ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal

; 1780 : 							for ( point_index = 0; point_index < faces->number_of_points; point_index++ )

  00b81	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _point_index$13[ebp], 0
  00b8b	eb 0f		 jmp	 SHORT $LN32@object_3d_
$LN30@object_3d_:
  00b8d	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _point_index$13[ebp]
  00b93	83 c0 01	 add	 eax, 1
  00b96	89 85 30 ff ff
	ff		 mov	 DWORD PTR _point_index$13[ebp], eax
$LN32@object_3d_:
  00b9c	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00b9f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00ba2	39 8d 30 ff ff
	ff		 cmp	 DWORD PTR _point_index$13[ebp], ecx
  00ba8	7d 61		 jge	 SHORT $LN31@object_3d_

; 1781 : 							{
; 1782 : 								int
; 1783 : 									index;
; 1784 : 
; 1785 : 								index = current_object_3d_point_list[point_index].point + surface_vertex_offset;

  00baa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00baf	03 85 30 ff ff
	ff		 add	 eax, DWORD PTR _point_index$13[ebp]
  00bb5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00bb8	03 4d c0	 add	 ecx, DWORD PTR _surface_vertex_offset$39[ebp]
  00bbb	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _index$10[ebp], ecx

; 1786 : 								plain_vertices[index].nx = normal.x;

  00bc1	6b 85 1c ff ff
	ff 18		 imul	 eax, DWORD PTR _index$10[ebp], 24
  00bc8	8b 4d d8	 mov	 ecx, DWORD PTR _plain_vertices$[ebp]
  00bcb	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$11[ebp]
  00bd3	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 1787 : 								plain_vertices[index].ny = normal.y;

  00bd9	6b 85 1c ff ff
	ff 18		 imul	 eax, DWORD PTR _index$10[ebp], 24
  00be0	8b 4d d8	 mov	 ecx, DWORD PTR _plain_vertices$[ebp]
  00be3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$11[ebp+4]
  00beb	f3 0f 11 44 01
	10		 movss	 DWORD PTR [ecx+eax+16], xmm0

; 1788 : 								plain_vertices[index].nz = normal.z;

  00bf1	6b 85 1c ff ff
	ff 18		 imul	 eax, DWORD PTR _index$10[ebp], 24
  00bf8	8b 4d d8	 mov	 ecx, DWORD PTR _plain_vertices$[ebp]
  00bfb	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _normal$11[ebp+8]
  00c03	f3 0f 11 44 01
	14		 movss	 DWORD PTR [ecx+eax+20], xmm0

; 1789 : 							}

  00c09	eb 82		 jmp	 SHORT $LN30@object_3d_
$LN31@object_3d_:

; 1790 : 							current_object_3d_face_normal_list++;

  00c0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00c10	83 c0 02	 add	 eax, 2
  00c13	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1791 : 							current_object_3d_point_list += faces->number_of_points;

  00c18	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00c1b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00c1e	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00c24	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1792 : 							faces++;

  00c2a	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00c2d	83 c0 01	 add	 eax, 1
  00c30	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1793 : 						}
; 1794 : 						else

  00c33	eb 30		 jmp	 SHORT $LN69@object_3d_
$LN68@object_3d_:

; 1795 : 						{
; 1796 : 							ASSERT ( FALSE );

  00c35	b8 01 00 00 00	 mov	 eax, 1
  00c3a	85 c0		 test	 eax, eax
  00c3c	74 1a		 je	 SHORT $LN70@object_3d_
  00c3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA
  00c43	05 91 01 00 00	 add	 eax, 401		; 00000191H
  00c48	50		 push	 eax
  00c49	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00c4e	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  00c53	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN70@object_3d_:

; 1797 : 							current_object_3d_point_list += 2;

  00c58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00c5d	83 c0 02	 add	 eax, 2
  00c60	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN69@object_3d_:

; 1798 : 						}
; 1799 : 					}

  00c65	e9 bb fe ff ff	 jmp	 $LN27@object_3d_
$LN28@object_3d_:

; 1800 : 				}
; 1801 : 			}
; 1802 : 
; 1803 : 			//
; 1804 : 			// Generate the index list for vertex buffer
; 1805 : 			//
; 1806 : 
; 1807 : 			faces = current_object_3d_faces;

  00c6a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00c6f	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1808 : 			current_object_3d_point_list = saved_object_3d_point_list;

  00c72	8b 45 a4	 mov	 eax, DWORD PTR _saved_object_3d_point_list$32[ebp]
  00c75	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list

; 1809 : 			current_object_3d_face_normal_list = saved_object_3d_face_normal_list;

  00c7a	8b 45 a0	 mov	 eax, DWORD PTR _saved_object_3d_face_normal_list$31[ebp]
  00c7d	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1810 : 
; 1811 : 			{
; 1812 : 				current_face_index_offset = 0;

  00c82	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _current_face_index_offset$40[ebp], 0

; 1813 : 				for ( face_count = 0; face_count < current_object_3d_surface->number_of_faces; face_count++ )

  00c89	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _face_count$42[ebp], 0
  00c90	eb 09		 jmp	 SHORT $LN35@object_3d_
$LN33@object_3d_:
  00c92	8b 45 cc	 mov	 eax, DWORD PTR _face_count$42[ebp]
  00c95	83 c0 01	 add	 eax, 1
  00c98	89 45 cc	 mov	 DWORD PTR _face_count$42[ebp], eax
$LN35@object_3d_:
  00c9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00ca0	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00ca4	39 4d cc	 cmp	 DWORD PTR _face_count$42[ebp], ecx
  00ca7	0f 8d ea 00 00
	00		 jge	 $LN34@object_3d_

; 1814 : 				{
; 1815 : 					int
; 1816 : 						index_count;
; 1817 : 
; 1818 : 					WORD
; 1819 : 						base_index,
; 1820 : 						next_index;
; 1821 : 
; 1822 : 					base_index = current_object_3d_point_list[0].point;

  00cad	b8 01 00 00 00	 mov	 eax, 1
  00cb2	6b c8 00	 imul	 ecx, eax, 0
  00cb5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00cbb	66 0f b6 04 0a	 movzx	 ax, BYTE PTR [edx+ecx]
  00cc0	66 89 85 14 ff
	ff ff		 mov	 WORD PTR _base_index$8[ebp], ax

; 1823 : 					next_index = current_object_3d_point_list[1].point;

  00cc7	b8 01 00 00 00	 mov	 eax, 1
  00ccc	c1 e0 00	 shl	 eax, 0
  00ccf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00cd5	66 0f b6 14 01	 movzx	 dx, BYTE PTR [ecx+eax]
  00cda	66 89 95 10 ff
	ff ff		 mov	 WORD PTR _next_index$7[ebp], dx

; 1824 : 
; 1825 : 					for ( index_count = 0; index_count < ( faces->number_of_points - 2 ); index_count++ )

  00ce1	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _index_count$9[ebp], 0
  00ceb	eb 0f		 jmp	 SHORT $LN38@object_3d_
$LN36@object_3d_:
  00ced	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _index_count$9[ebp]
  00cf3	83 c0 01	 add	 eax, 1
  00cf6	89 85 18 ff ff
	ff		 mov	 DWORD PTR _index_count$9[ebp], eax
$LN38@object_3d_:
  00cfc	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00cff	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00d02	83 e9 02	 sub	 ecx, 2
  00d05	39 8d 18 ff ff
	ff		 cmp	 DWORD PTR _index_count$9[ebp], ecx
  00d0b	7d 6a		 jge	 SHORT $LN37@object_3d_

; 1826 : 					{
; 1827 : 						indices[current_face_index_offset++] = base_index;

  00d0d	8b 45 c4	 mov	 eax, DWORD PTR _current_face_index_offset$40[ebp]
  00d10	8b 4d ac	 mov	 ecx, DWORD PTR _indices$34[ebp]
  00d13	66 8b 95 14 ff
	ff ff		 mov	 dx, WORD PTR _base_index$8[ebp]
  00d1a	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00d1e	8b 45 c4	 mov	 eax, DWORD PTR _current_face_index_offset$40[ebp]
  00d21	83 c0 01	 add	 eax, 1
  00d24	89 45 c4	 mov	 DWORD PTR _current_face_index_offset$40[ebp], eax

; 1828 : 						indices[current_face_index_offset++] = next_index;

  00d27	8b 45 c4	 mov	 eax, DWORD PTR _current_face_index_offset$40[ebp]
  00d2a	8b 4d ac	 mov	 ecx, DWORD PTR _indices$34[ebp]
  00d2d	66 8b 95 10 ff
	ff ff		 mov	 dx, WORD PTR _next_index$7[ebp]
  00d34	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00d38	8b 45 c4	 mov	 eax, DWORD PTR _current_face_index_offset$40[ebp]
  00d3b	83 c0 01	 add	 eax, 1
  00d3e	89 45 c4	 mov	 DWORD PTR _current_face_index_offset$40[ebp], eax

; 1829 : 
; 1830 : 						next_index = current_object_3d_point_list[index_count+2].point;

  00d41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00d46	03 85 18 ff ff
	ff		 add	 eax, DWORD PTR _index_count$9[ebp]
  00d4c	66 0f b6 48 02	 movzx	 cx, BYTE PTR [eax+2]
  00d51	66 89 8d 10 ff
	ff ff		 mov	 WORD PTR _next_index$7[ebp], cx

; 1831 : 						indices[current_face_index_offset++] = next_index;

  00d58	8b 45 c4	 mov	 eax, DWORD PTR _current_face_index_offset$40[ebp]
  00d5b	8b 4d ac	 mov	 ecx, DWORD PTR _indices$34[ebp]
  00d5e	66 8b 95 10 ff
	ff ff		 mov	 dx, WORD PTR _next_index$7[ebp]
  00d65	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00d69	8b 45 c4	 mov	 eax, DWORD PTR _current_face_index_offset$40[ebp]
  00d6c	83 c0 01	 add	 eax, 1
  00d6f	89 45 c4	 mov	 DWORD PTR _current_face_index_offset$40[ebp], eax

; 1832 : 					}

  00d72	e9 76 ff ff ff	 jmp	 $LN36@object_3d_
$LN37@object_3d_:

; 1833 : 
; 1834 : 					current_object_3d_point_list += faces->number_of_points;

  00d77	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00d7a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00d7d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00d83	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1835 : 					faces++;

  00d89	8b 45 a8	 mov	 eax, DWORD PTR _faces$33[ebp]
  00d8c	83 c0 01	 add	 eax, 1
  00d8f	89 45 a8	 mov	 DWORD PTR _faces$33[ebp], eax

; 1836 : 				}

  00d92	e9 fb fe ff ff	 jmp	 $LN33@object_3d_
$LN34@object_3d_:

; 1837 : 
; 1838 : 				ASSERT ( current_face_index_offset < ( number_of_surface_points * NUMBER_OF_INDICES_PER_SLOT_FACTOR ) );

  00d97	6b 45 e4 0a	 imul	 eax, DWORD PTR _number_of_surface_points$[ebp], 10
  00d9b	39 45 c4	 cmp	 DWORD PTR _current_face_index_offset$40[ebp], eax
  00d9e	7c 1a		 jl	 SHORT $LN71@object_3d_
  00da0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z@4JA
  00da5	05 bb 01 00 00	 add	 eax, 443		; 000001bbH
  00daa	50		 push	 eax
  00dab	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OLOJIKDD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00db0	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@ILNFBMOC@current_face_index_offset?5?$DM?5?$CI?5n@
  00db5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN71@object_3d_:

; 1839 : 			}
; 1840 : 
; 1841 : 			//
; 1842 : 			// Unlock the vertex buffer
; 1843 : 			//
; 1844 : 
; 1845 : 			f3d_vertex_unlock ( surface->buffer );

  00dba	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00dbd	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00dc0	51		 push	 ecx
  00dc1	e8 00 00 00 00	 call	 ?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_unlock

; 1846 : 
; 1847 : 			//
; 1848 : 			// Fill in the surface attributes
; 1849 : 			//
; 1850 : 
; 1851 : 			surface->number_of_vertices = number_of_surface_points;

  00dc6	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00dc9	66 8b 4d e4	 mov	 cx, WORD PTR _number_of_surface_points$[ebp]
  00dcd	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 1852 : 			surface->number_of_indices = current_face_index_offset;

  00dd1	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00dd4	66 8b 4d c4	 mov	 cx, WORD PTR _current_face_index_offset$40[ebp]
  00dd8	66 89 48 10	 mov	 WORD PTR [eax+16], cx

; 1853 : 
; 1854 : 			//
; 1855 : 			// Unwind back the object pointers
; 1856 : 			//
; 1857 : 
; 1858 : 			current_object_3d_point_list = saved_object_3d_point_list;

  00ddc	8b 45 a4	 mov	 eax, DWORD PTR _saved_object_3d_point_list$32[ebp]
  00ddf	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list

; 1859 : 			current_object_3d_face_normal_list = saved_object_3d_face_normal_list;

  00de4	8b 45 a0	 mov	 eax, DWORD PTR _saved_object_3d_face_normal_list$31[ebp]
  00de7	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list
$LN51@object_3d_:

; 1860 : 		}
; 1861 : 	}
; 1862 : 
; 1863 : 	if ( !prevent_rendering )

  00dec	83 7d fc 00	 cmp	 DWORD PTR _prevent_rendering$[ebp], 0
  00df0	0f 85 0e 01 00
	00		 jne	 $LN72@object_3d_

; 1864 : 	{
; 1865 : #if ( USE_ROUND_ROBIN_VBS )
; 1866 : 
; 1867 : 		if ( surface != d3d_vb_slots_tail[type][size_slot] )

  00df6	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00df9	c1 e0 04	 shl	 eax, 4
  00dfc	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00dff	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00e02	3b 94 88 00 00
	00 00		 cmp	 edx, DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  00e09	0f 84 c8 00 00
	00		 je	 $LN73@object_3d_

; 1868 : 		{
; 1869 : 			//
; 1870 : 			// Remove the surface from the list
; 1871 : 			//
; 1872 : 
; 1873 : 			if ( surface->pred )

  00e0f	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00e12	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00e16	74 0d		 je	 SHORT $LN74@object_3d_

; 1874 : 			{
; 1875 : 				surface->pred->succ = surface->succ;

  00e18	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00e1b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e1e	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00e21	8b 02		 mov	 eax, DWORD PTR [edx]
  00e23	89 01		 mov	 DWORD PTR [ecx], eax
$LN74@object_3d_:

; 1876 : 			}
; 1877 : 
; 1878 : 			if ( surface->succ )

  00e25	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00e28	83 38 00	 cmp	 DWORD PTR [eax], 0
  00e2b	74 0e		 je	 SHORT $LN75@object_3d_

; 1879 : 			{
; 1880 : 				surface->succ->pred = surface->pred;

  00e2d	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00e30	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e32	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00e35	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00e38	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN75@object_3d_:

; 1881 : 			}
; 1882 : 
; 1883 : 			if ( surface == d3d_vb_slots_head[type][size_slot] )

  00e3b	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00e3e	c1 e0 04	 shl	 eax, 4
  00e41	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00e44	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00e47	3b 94 88 00 00
	00 00		 cmp	 edx, DWORD PTR ?d3d_vb_slots_head@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  00e4e	75 15		 jne	 SHORT $LN76@object_3d_

; 1884 : 			{
; 1885 : 				d3d_vb_slots_head[type][size_slot] = surface->succ;

  00e50	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00e53	c1 e0 04	 shl	 eax, 4
  00e56	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00e59	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00e5c	8b 12		 mov	 edx, DWORD PTR [edx]
  00e5e	89 94 88 00 00
	00 00		 mov	 DWORD PTR ?d3d_vb_slots_head@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4], edx
$LN76@object_3d_:

; 1886 : 			}
; 1887 : 
; 1888 : 			if ( surface == d3d_vb_slots_tail[type][size_slot] )

  00e65	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00e68	c1 e0 04	 shl	 eax, 4
  00e6b	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00e6e	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00e71	3b 94 88 00 00
	00 00		 cmp	 edx, DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  00e78	75 16		 jne	 SHORT $LN77@object_3d_

; 1889 : 			{
; 1890 : 				d3d_vb_slots_tail[type][size_slot] = surface->pred;

  00e7a	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00e7d	c1 e0 04	 shl	 eax, 4
  00e80	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00e83	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00e86	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00e89	89 94 88 00 00
	00 00		 mov	 DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4], edx
$LN77@object_3d_:

; 1891 : 			}
; 1892 : 
; 1893 : 			//
; 1894 : 			// Add it back in to the tail end of the list
; 1895 : 			//
; 1896 : 
; 1897 : 			surface->pred = d3d_vb_slots_tail[type][size_slot];

  00e90	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00e93	c1 e0 04	 shl	 eax, 4
  00e96	8b 4d e0	 mov	 ecx, DWORD PTR _surface$[ebp]
  00e99	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  00e9c	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  00ea3	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1898 : 
; 1899 : 			surface->succ = NULL;

  00ea6	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00ea9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1900 : 
; 1901 : 			d3d_vb_slots_tail[type][size_slot]->succ = surface;

  00eaf	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00eb2	c1 e0 04	 shl	 eax, 4
  00eb5	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00eb8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  00ebf	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00ec2	89 02		 mov	 DWORD PTR [edx], eax

; 1902 : 
; 1903 : 			d3d_vb_slots_tail[type][size_slot] = surface;

  00ec4	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00ec7	c1 e0 04	 shl	 eax, 4
  00eca	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00ecd	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00ed0	89 94 88 00 00
	00 00		 mov	 DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4], edx
$LN73@object_3d_:

; 1904 : 		}
; 1905 : 
; 1906 : #endif
; 1907 : 
; 1908 : 		f3d_draw_vb ( D3DPT_TRIANGLELIST, surface->buffer,

  00ed7	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00eda	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  00ede	51		 push	 ecx
  00edf	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00ee2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00ee5	50		 push	 eax
  00ee6	8b 4d e0	 mov	 ecx, DWORD PTR _surface$[ebp]
  00ee9	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  00eed	52		 push	 edx
  00eee	8b 45 e0	 mov	 eax, DWORD PTR _surface$[ebp]
  00ef1	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00ef5	51		 push	 ecx
  00ef6	8b 55 e0	 mov	 edx, DWORD PTR _surface$[ebp]
  00ef9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00efc	50		 push	 eax
  00efd	6a 04		 push	 4
  00eff	e8 00 00 00 00	 call	 ?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z ; f3d_draw_vb
$LN72@object_3d_:

; 1909 : 																			surface->vertex_offset, surface->number_of_vertices,
; 1910 : 																			surface->indices, surface->number_of_indices );
; 1911 : 	}
; 1912 : }

  00f04	5f		 pop	 edi
  00f05	5e		 pop	 esi
  00f06	5b		 pop	 ebx
  00f07	8b e5		 mov	 esp, ebp
  00f09	5d		 pop	 ebp
  00f0a	c2 04 00	 ret	 4
?object_3d_render_hardware_surface@@YGXPAUOBJECT_3D@@@Z ENDP ; object_3d_render_hardware_surface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvb.c
;	COMDAT ?deinitialise_3d_objects_in_d3d@@YGXXZ
_TEXT	SEGMENT
_count$1 = -12						; size = 4
_type$ = -8						; size = 4
_size_slot$ = -4					; size = 4
?deinitialise_3d_objects_in_d3d@@YGXXZ PROC		; deinitialise_3d_objects_in_d3d, COMDAT

; 1324 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1325 : 
; 1326 : 	int
; 1327 : 		size_slot,
; 1328 : 		type;
; 1329 : 
; 1330 : 
; 1331 : 	debug_log ( "DEINITIALISING 3d OBJECTS" );

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EIADEJEM@DEINITIALISING?53d?5OBJECTS@
  0000e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00013	83 c4 04	 add	 esp, 4

; 1332 : 
; 1333 : 	if ( object_3d_vb_slot_references )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A, 0 ; object_3d_vb_slot_references
  0001d	74 15		 je	 SHORT $LN11@deinitiali

; 1334 : 	{
; 1335 : 
; 1336 : 		safe_free ( object_3d_vb_slot_references );

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A ; object_3d_vb_slot_references
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1337 : 
; 1338 : 		object_3d_vb_slot_references = NULL;

  0002a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A, 0 ; object_3d_vb_slot_references
$LN11@deinitiali:

; 1339 : 	}
; 1340 : 
; 1341 : 	for ( size_slot = 0; size_slot < NUMBER_OF_D3D_VB_SLOT_SIZES; size_slot++ )

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _size_slot$[ebp], 0
  0003b	eb 09		 jmp	 SHORT $LN4@deinitiali
$LN2@deinitiali:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _size_slot$[ebp]
  00040	83 c0 01	 add	 eax, 1
  00043	89 45 fc	 mov	 DWORD PTR _size_slot$[ebp], eax
$LN4@deinitiali:
  00046	83 7d fc 04	 cmp	 DWORD PTR _size_slot$[ebp], 4
  0004a	0f 8d 67 01 00
	00		 jge	 $LN1@deinitiali

; 1342 : 	{
; 1343 : 
; 1344 : 		for ( type = D3D_VB_PLAIN_TYPE; type < D3D_VB_NUMBER_OF_TYPES; type++ )

  00050	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0
  00057	eb 09		 jmp	 SHORT $LN7@deinitiali
$LN5@deinitiali:
  00059	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0005c	83 c0 01	 add	 eax, 1
  0005f	89 45 f8	 mov	 DWORD PTR _type$[ebp], eax
$LN7@deinitiali:
  00062	83 7d f8 03	 cmp	 DWORD PTR _type$[ebp], 3
  00066	0f 8d 46 01 00
	00		 jge	 $LN6@deinitiali

; 1345 : 		{
; 1346 : 
; 1347 : 			int
; 1348 : 				count;
; 1349 : 
; 1350 : 			d3d_vb_slots_tail[type][size_slot] = NULL;

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0006f	c1 e0 04	 shl	 eax, 4
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00075	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4], 0

; 1351 : 
; 1352 : 			d3d_vb_slots_head[type][size_slot] = NULL;

  00080	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00083	c1 e0 04	 shl	 eax, 4
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00089	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?d3d_vb_slots_head@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4], 0

; 1353 : 
; 1354 : 			if ( d3d_vb_slots[type][size_slot] )

  00094	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00097	c1 e0 04	 shl	 eax, 4
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0009d	83 bc 88 00 00
	00 00 00	 cmp	 DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4], 0
  000a5	74 2a		 je	 SHORT $LN12@deinitiali

; 1355 : 			{
; 1356 : 
; 1357 : 				safe_free ( d3d_vb_slots[type][size_slot] );

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  000aa	c1 e0 04	 shl	 eax, 4
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  000b0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1358 : 
; 1359 : 				d3d_vb_slots[type][size_slot] = NULL;

  000bd	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  000c0	c1 e0 04	 shl	 eax, 4
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  000c6	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4], 0
$LN12@deinitiali:

; 1360 : 			}
; 1361 : 
; 1362 : 			if ( object_3d_d3d_vb_indices[type][size_slot] )

  000d1	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  000d4	c1 e0 04	 shl	 eax, 4
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  000da	83 bc 88 00 00
	00 00 00	 cmp	 DWORD PTR ?object_3d_d3d_vb_indices@@3PAY03PAGA[eax+ecx*4], 0
  000e2	74 2a		 je	 SHORT $LN13@deinitiali

; 1363 : 			{
; 1364 : 
; 1365 : 				safe_free ( object_3d_d3d_vb_indices[type][size_slot] );

  000e4	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  000e7	c1 e0 04	 shl	 eax, 4
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  000ed	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_d3d_vb_indices@@3PAY03PAGA[eax+ecx*4]
  000f4	52		 push	 edx
  000f5	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1366 : 
; 1367 : 				object_3d_d3d_vb_indices[type][size_slot] = NULL;

  000fa	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  000fd	c1 e0 04	 shl	 eax, 4
  00100	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00103	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?object_3d_d3d_vb_indices@@3PAY03PAGA[eax+ecx*4], 0
$LN13@deinitiali:

; 1368 : 			}
; 1369 : 
; 1370 : 			if ( object_3d_d3d_vbs[type][size_slot] )

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00111	c1 e0 04	 shl	 eax, 4
  00114	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00117	83 bc 88 00 00
	00 00 00	 cmp	 DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[eax+ecx*4], 0
  0011f	0f 84 88 00 00
	00		 je	 $LN14@deinitiali

; 1371 : 			{
; 1372 : 
; 1373 : 				for ( count = 0; count < number_of_d3d_vbs[type][size_slot]; count++ )

  00125	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  0012c	eb 09		 jmp	 SHORT $LN10@deinitiali
$LN8@deinitiali:
  0012e	8b 45 f4	 mov	 eax, DWORD PTR _count$1[ebp]
  00131	83 c0 01	 add	 eax, 1
  00134	89 45 f4	 mov	 DWORD PTR _count$1[ebp], eax
$LN10@deinitiali:
  00137	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0013a	c1 e0 04	 shl	 eax, 4
  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00140	8b 55 f4	 mov	 edx, DWORD PTR _count$1[ebp]
  00143	3b 94 88 00 00
	00 00		 cmp	 edx, DWORD PTR ?number_of_d3d_vbs@@3PAY03HA[eax+ecx*4]
  0014a	7d 37		 jge	 SHORT $LN9@deinitiali

; 1374 : 				{
; 1375 : 
; 1376 : 					if ( object_3d_d3d_vbs[type][size_slot][count] )

  0014c	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0014f	c1 e0 04	 shl	 eax, 4
  00152	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00155	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[eax+ecx*4]
  0015c	8b 45 f4	 mov	 eax, DWORD PTR _count$1[ebp]
  0015f	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00163	74 1c		 je	 SHORT $LN15@deinitiali

; 1377 : 					{
; 1378 : 						f3d_vertex_release ( &object_3d_d3d_vbs[type][size_slot][count] );

  00165	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00168	c1 e0 04	 shl	 eax, 4
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0016e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[eax+ecx*4]
  00175	8b 45 f4	 mov	 eax, DWORD PTR _count$1[ebp]
  00178	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 ?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_release
$LN15@deinitiali:

; 1379 : 					}
; 1380 : 				}

  00181	eb ab		 jmp	 SHORT $LN8@deinitiali
$LN9@deinitiali:

; 1381 : 
; 1382 : 				safe_free ( object_3d_d3d_vbs[type][size_slot] );

  00183	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  00186	c1 e0 04	 shl	 eax, 4
  00189	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0018c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[eax+ecx*4]
  00193	52		 push	 edx
  00194	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1383 : 
; 1384 : 				object_3d_d3d_vbs[type][size_slot] = NULL;

  00199	8b 45 f8	 mov	 eax, DWORD PTR _type$[ebp]
  0019c	c1 e0 04	 shl	 eax, 4
  0019f	8b 4d fc	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  001a2	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[eax+ecx*4], 0
$LN14@deinitiali:

; 1385 : 			}
; 1386 : 		}

  001ad	e9 a7 fe ff ff	 jmp	 $LN5@deinitiali
$LN6@deinitiali:

; 1387 : 	}

  001b2	e9 86 fe ff ff	 jmp	 $LN2@deinitiali
$LN1@deinitiali:

; 1388 : }

  001b7	5f		 pop	 edi
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx
  001ba	8b e5		 mov	 esp, ebp
  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
?deinitialise_3d_objects_in_d3d@@YGXXZ ENDP		; deinitialise_3d_objects_in_d3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjvb.c
;	COMDAT ?initialise_3d_objects_in_d3d@@YGXXZ
_TEXT	SEGMENT
tv177 = -112						; size = 4
_temp$1 = -44						; size = 4
_desc$2 = -40						; size = 16
_slot_index$3 = -24					; size = 4
_type$ = -20						; size = 4
_size_slot$ = -16					; size = 4
_number_of_vertices_in_slot$ = -12			; size = 4
_count$ = -8						; size = 4
_total_surfaces$ = -4					; size = 4
?initialise_3d_objects_in_d3d@@YGXXZ PROC		; initialise_3d_objects_in_d3d, COMDAT

; 1142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1143 : 
; 1144 : 	static int
; 1145 : 		object_vbs_restore_registered = FALSE;
; 1146 : 
; 1147 : 	int
; 1148 : 		total_surfaces,
; 1149 : 		count,
; 1150 : 		number_of_vertices_in_slot,
; 1151 : 		size_slot,
; 1152 : 		type;
; 1153 : 
; 1154 : 	deinitialise_3d_objects_in_d3d ();

  00009	e8 00 00 00 00	 call	 ?deinitialise_3d_objects_in_d3d@@YGXXZ ; deinitialise_3d_objects_in_d3d

; 1155 : 
; 1156 : 	//
; 1157 : 	// Allocate vertex buffers & slots
; 1158 : 	//
; 1159 : 
; 1160 : 	for ( size_slot = 0; size_slot < NUMBER_OF_D3D_VB_SLOT_SIZES; size_slot++ )

  0000e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _size_slot$[ebp], 0
  00015	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00017	8b 45 f0	 mov	 eax, DWORD PTR _size_slot$[ebp]
  0001a	83 c0 01	 add	 eax, 1
  0001d	89 45 f0	 mov	 DWORD PTR _size_slot$[ebp], eax
$LN4@initialise:
  00020	83 7d f0 04	 cmp	 DWORD PTR _size_slot$[ebp], 4
  00024	7d 43		 jge	 SHORT $LN3@initialise

; 1161 : 	{
; 1162 : 
; 1163 : 		number_of_d3d_vbs[D3D_VB_PLAIN_TYPE][size_slot] = NUMBER_OF_PLAIN_D3D_VBS;

  00026	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002b	6b c8 00	 imul	 ecx, eax, 0
  0002e	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  00031	c7 84 91 00 00
	00 00 10 00 00
	00		 mov	 DWORD PTR ?number_of_d3d_vbs@@3PAY03HA[ecx+edx*4], 16 ; 00000010H

; 1164 : 		number_of_d3d_vbs[D3D_VB_TEXTURED_TYPE][size_slot] = NUMBER_OF_TEXTURED_D3D_VBS;

  0003c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00041	c1 e0 00	 shl	 eax, 0
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00047	c7 84 88 00 00
	00 00 10 00 00
	00		 mov	 DWORD PTR ?number_of_d3d_vbs@@3PAY03HA[eax+ecx*4], 16 ; 00000010H

; 1165 : 		number_of_d3d_vbs[D3D_VB_LIGHTMAP_TYPE][size_slot] = NUMBER_OF_LIGHTMAP_D3D_VBS;

  00052	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00057	d1 e0		 shl	 eax, 1
  00059	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0005c	c7 84 88 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR ?number_of_d3d_vbs@@3PAY03HA[eax+ecx*4], 2

; 1166 : 	}

  00067	eb ae		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 1167 : 
; 1168 : 	number_of_vertices_in_slot = MAX_NUMBER_OF_VERTICES_IN_D3D_VB_SLOT;

  00069	c7 45 f4 00 01
	00 00		 mov	 DWORD PTR _number_of_vertices_in_slot$[ebp], 256 ; 00000100H

; 1169 : 
; 1170 : 	for ( size_slot = 0; size_slot < NUMBER_OF_D3D_VB_SLOT_SIZES; size_slot++ )

  00070	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _size_slot$[ebp], 0
  00077	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  00079	8b 45 f0	 mov	 eax, DWORD PTR _size_slot$[ebp]
  0007c	83 c0 01	 add	 eax, 1
  0007f	89 45 f0	 mov	 DWORD PTR _size_slot$[ebp], eax
$LN7@initialise:
  00082	83 7d f0 04	 cmp	 DWORD PTR _size_slot$[ebp], 4
  00086	7d 5a		 jge	 SHORT $LN6@initialise

; 1171 : 	{
; 1172 : 
; 1173 : 		number_of_d3d_vb_slots[D3D_VB_PLAIN_TYPE][size_slot] = ( NUMBER_OF_VERTICES_IN_D3D_VBS * NUMBER_OF_PLAIN_D3D_VBS ) / number_of_vertices_in_slot;

  00088	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0008d	99		 cdq
  0008e	f7 7d f4	 idiv	 DWORD PTR _number_of_vertices_in_slot$[ebp]
  00091	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00096	6b d1 00	 imul	 edx, ecx, 0
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0009c	89 84 8a 00 00
	00 00		 mov	 DWORD PTR ?number_of_d3d_vb_slots@@3PAY03HA[edx+ecx*4], eax

; 1174 : 		number_of_d3d_vb_slots[D3D_VB_TEXTURED_TYPE][size_slot] = ( NUMBER_OF_VERTICES_IN_D3D_VBS * NUMBER_OF_TEXTURED_D3D_VBS ) / number_of_vertices_in_slot;

  000a3	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  000a8	99		 cdq
  000a9	f7 7d f4	 idiv	 DWORD PTR _number_of_vertices_in_slot$[ebp]
  000ac	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b1	c1 e1 00	 shl	 ecx, 0
  000b4	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  000b7	89 84 91 00 00
	00 00		 mov	 DWORD PTR ?number_of_d3d_vb_slots@@3PAY03HA[ecx+edx*4], eax

; 1175 : 		number_of_d3d_vb_slots[D3D_VB_LIGHTMAP_TYPE][size_slot] = ( NUMBER_OF_VERTICES_IN_D3D_VBS * NUMBER_OF_LIGHTMAP_D3D_VBS ) / number_of_vertices_in_slot;

  000be	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  000c3	99		 cdq
  000c4	f7 7d f4	 idiv	 DWORD PTR _number_of_vertices_in_slot$[ebp]
  000c7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000cc	d1 e1		 shl	 ecx, 1
  000ce	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  000d1	89 84 91 00 00
	00 00		 mov	 DWORD PTR ?number_of_d3d_vb_slots@@3PAY03HA[ecx+edx*4], eax

; 1176 : 
; 1177 : 		number_of_vertices_in_slot >>= 1;

  000d8	8b 45 f4	 mov	 eax, DWORD PTR _number_of_vertices_in_slot$[ebp]
  000db	d1 f8		 sar	 eax, 1
  000dd	89 45 f4	 mov	 DWORD PTR _number_of_vertices_in_slot$[ebp], eax

; 1178 : 	}

  000e0	eb 97		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 1179 : 
; 1180 : 	number_of_vertices_in_slot = MAX_NUMBER_OF_VERTICES_IN_D3D_VB_SLOT;

  000e2	c7 45 f4 00 01
	00 00		 mov	 DWORD PTR _number_of_vertices_in_slot$[ebp], 256 ; 00000100H

; 1181 : 
; 1182 : 	for ( size_slot = 0; size_slot < NUMBER_OF_D3D_VB_SLOT_SIZES; size_slot++ )

  000e9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _size_slot$[ebp], 0
  000f0	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  000f2	8b 45 f0	 mov	 eax, DWORD PTR _size_slot$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 f0	 mov	 DWORD PTR _size_slot$[ebp], eax
$LN10@initialise:
  000fb	83 7d f0 04	 cmp	 DWORD PTR _size_slot$[ebp], 4
  000ff	0f 8d 67 03 00
	00		 jge	 $LN9@initialise

; 1183 : 	{
; 1184 : 
; 1185 : 		for ( type = D3D_VB_PLAIN_TYPE; type < D3D_VB_NUMBER_OF_TYPES; type++ )

  00105	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0
  0010c	eb 09		 jmp	 SHORT $LN13@initialise
$LN11@initialise:
  0010e	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00111	83 c0 01	 add	 eax, 1
  00114	89 45 ec	 mov	 DWORD PTR _type$[ebp], eax
$LN13@initialise:
  00117	83 7d ec 03	 cmp	 DWORD PTR _type$[ebp], 3
  0011b	0f 8d 3e 03 00
	00		 jge	 $LN12@initialise

; 1186 : 		{
; 1187 : 
; 1188 : 			int
; 1189 : 				slot_index;
; 1190 : 
; 1191 : 			d3d_vb_slots[type][size_slot] = ( d3d_vb_object_3d_info * ) safe_malloc ( sizeof ( d3d_vb_object_3d_info ) * number_of_d3d_vb_slots[type][size_slot] );

  00121	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00124	c1 e0 04	 shl	 eax, 4
  00127	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0012a	6b 94 88 00 00
	00 00 1c	 imul	 edx, DWORD PTR ?number_of_d3d_vb_slots@@3PAY03HA[eax+ecx*4], 28
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00138	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  0013b	c1 e1 04	 shl	 ecx, 4
  0013e	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  00141	89 84 91 00 00
	00 00		 mov	 DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[ecx+edx*4], eax

; 1192 : 
; 1193 : 			object_3d_d3d_vbs[type][size_slot] = ( LPDIRECT3DVERTEXBUFFERX * ) safe_malloc ( sizeof ( LPDIRECT3DVERTEXBUFFERX ) * number_of_d3d_vbs[type][size_slot] );

  00148	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  0014b	c1 e0 04	 shl	 eax, 4
  0014e	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00151	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?number_of_d3d_vbs@@3PAY03HA[eax+ecx*4]
  00158	c1 e2 02	 shl	 edx, 2
  0015b	52		 push	 edx
  0015c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00161	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  00164	c1 e1 04	 shl	 ecx, 4
  00167	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  0016a	89 84 91 00 00
	00 00		 mov	 DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[ecx+edx*4], eax

; 1194 : 
; 1195 : 			object_3d_d3d_vb_indices[type][size_slot] = ( WORD * ) safe_malloc ( sizeof ( WORD ) * ( number_of_vertices_in_slot * NUMBER_OF_INDICES_PER_SLOT_FACTOR * number_of_d3d_vb_slots[type][size_slot] ) );

  00171	6b 45 f4 0a	 imul	 eax, DWORD PTR _number_of_vertices_in_slot$[ebp], 10
  00175	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  00178	c1 e1 04	 shl	 ecx, 4
  0017b	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  0017e	0f af 84 91 00
	00 00 00	 imul	 eax, DWORD PTR ?number_of_d3d_vb_slots@@3PAY03HA[ecx+edx*4]
  00186	d1 e0		 shl	 eax, 1
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0018e	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  00191	c1 e1 04	 shl	 ecx, 4
  00194	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  00197	89 84 91 00 00
	00 00		 mov	 DWORD PTR ?object_3d_d3d_vb_indices@@3PAY03PAGA[ecx+edx*4], eax

; 1196 : 
; 1197 : 			slot_index = 0;

  0019e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _slot_index$3[ebp], 0

; 1198 : 
; 1199 : 			for ( count = 0; count < number_of_d3d_vbs[type][size_slot]; count++ )

  001a5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001ac	eb 09		 jmp	 SHORT $LN16@initialise
$LN14@initialise:
  001ae	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  001b1	83 c0 01	 add	 eax, 1
  001b4	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN16@initialise:
  001b7	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  001ba	c1 e0 04	 shl	 eax, 4
  001bd	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  001c0	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  001c3	3b 94 88 00 00
	00 00		 cmp	 edx, DWORD PTR ?number_of_d3d_vbs@@3PAY03HA[eax+ecx*4]
  001ca	0f 8d 8a 02 00
	00		 jge	 $LN15@initialise

; 1200 : 			{
; 1201 : 
; 1202 : 				D3DVERTEXBUFFERDESC
; 1203 : 					desc;
; 1204 : 
; 1205 : 				int
; 1206 : 					temp;
; 1207 : 
; 1208 : 				memset ( &desc, 0, sizeof ( D3DVERTEXBUFFERDESC ) );

  001d0	6a 10		 push	 16			; 00000010H
  001d2	6a 00		 push	 0
  001d4	8d 45 d8	 lea	 eax, DWORD PTR _desc$2[ebp]
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _memset
  001dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1209 : 				desc.dwSize = sizeof ( D3DVERTEXBUFFERDESC );

  001e0	c7 45 d8 10 00
	00 00		 mov	 DWORD PTR _desc$2[ebp], 16 ; 00000010H

; 1210 : 
; 1211 : 	#if USE_D3D_SOFTWARE_TNL
; 1212 : 				desc.dwCaps = ( d3d_using_hardware_tnl ) ? ( D3DVBCAPS_WRITEONLY ) : ( D3DVBCAPS_WRITEONLY | D3DVBCAPS_SYSTEMMEMORY );
; 1213 : 				desc.dwCaps |= D3DVBCAPS_SYSTEMMEMORY;
; 1214 : 	#else
; 1215 : 	//			desc.dwCaps = D3DVBCAPS_DONOTCLIP;
; 1216 : 				desc.dwCaps |= D3DVBCAPS_WRITEONLY;

  001e7	8b 45 dc	 mov	 eax, DWORD PTR _desc$2[ebp+4]
  001ea	0d 00 00 01 00	 or	 eax, 65536		; 00010000H
  001ef	89 45 dc	 mov	 DWORD PTR _desc$2[ebp+4], eax

; 1217 : 	#endif
; 1218 : 
; 1219 : 				desc.dwNumVertices = NUMBER_OF_VERTICES_IN_D3D_VBS;

  001f2	c7 45 e4 00 08
	00 00		 mov	 DWORD PTR _desc$2[ebp+12], 2048 ; 00000800H

; 1220 : 
; 1221 : 				switch ( type )

  001f9	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  001fc	89 45 90	 mov	 DWORD PTR tv177[ebp], eax
  001ff	83 7d 90 00	 cmp	 DWORD PTR tv177[ebp], 0
  00203	74 0e		 je	 SHORT $LN28@initialise
  00205	83 7d 90 01	 cmp	 DWORD PTR tv177[ebp], 1
  00209	74 11		 je	 SHORT $LN29@initialise
  0020b	83 7d 90 02	 cmp	 DWORD PTR tv177[ebp], 2
  0020f	74 14		 je	 SHORT $LN30@initialise
  00211	eb 19		 jmp	 SHORT $LN17@initialise
$LN28@initialise:

; 1222 : 				{
; 1223 : 
; 1224 : 					case D3D_VB_PLAIN_TYPE:		desc.dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX0; break;

  00213	c7 45 e0 12 00
	00 00		 mov	 DWORD PTR _desc$2[ebp+8], 18 ; 00000012H
  0021a	eb 10		 jmp	 SHORT $LN17@initialise
$LN29@initialise:

; 1225 : 					case D3D_VB_TEXTURED_TYPE:	desc.dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1; break;

  0021c	c7 45 e0 12 01
	00 00		 mov	 DWORD PTR _desc$2[ebp+8], 274 ; 00000112H
  00223	eb 07		 jmp	 SHORT $LN17@initialise
$LN30@initialise:

; 1226 : 					case D3D_VB_LIGHTMAP_TYPE:	desc.dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX2; break;

  00225	c7 45 e0 12 02
	00 00		 mov	 DWORD PTR _desc$2[ebp+8], 530 ; 00000212H
$LN17@initialise:

; 1227 : 				}
; 1228 : 
; 1229 : 				f3d_vertex_create ( &desc, &object_3d_d3d_vbs[type][size_slot][count] );

  0022c	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  0022f	c1 e0 04	 shl	 eax, 4
  00232	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00235	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[eax+ecx*4]
  0023c	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0023f	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00242	51		 push	 ecx
  00243	8d 55 d8	 lea	 edx, DWORD PTR _desc$2[ebp]
  00246	52		 push	 edx
  00247	e8 00 00 00 00	 call	 ?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_create

; 1230 : 
; 1231 : 				//
; 1232 : 				// Now create the slots for this vertex buffer
; 1233 : 				//
; 1234 : 
; 1235 : 				for ( temp = 0; temp < ( NUMBER_OF_VERTICES_IN_D3D_VBS / number_of_vertices_in_slot ); temp++ )

  0024c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _temp$1[ebp], 0
  00253	eb 09		 jmp	 SHORT $LN21@initialise
$LN19@initialise:
  00255	8b 45 d4	 mov	 eax, DWORD PTR _temp$1[ebp]
  00258	83 c0 01	 add	 eax, 1
  0025b	89 45 d4	 mov	 DWORD PTR _temp$1[ebp], eax
$LN21@initialise:
  0025e	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00263	99		 cdq
  00264	f7 7d f4	 idiv	 DWORD PTR _number_of_vertices_in_slot$[ebp]
  00267	39 45 d4	 cmp	 DWORD PTR _temp$1[ebp], eax
  0026a	0f 8d e5 01 00
	00		 jge	 $LN20@initialise

; 1236 : 				{
; 1237 : 
; 1238 : 					if ( slot_index )

  00270	83 7d e8 00	 cmp	 DWORD PTR _slot_index$3[ebp], 0
  00274	74 33		 je	 SHORT $LN31@initialise

; 1239 : 					{
; 1240 : 
; 1241 : 						d3d_vb_slots[type][size_slot][slot_index].pred = &d3d_vb_slots[type][size_slot][slot_index-1];

  00276	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00279	c1 e0 04	 shl	 eax, 4
  0027c	8b 4d e8	 mov	 ecx, DWORD PTR _slot_index$3[ebp]
  0027f	83 e9 01	 sub	 ecx, 1
  00282	6b d1 1c	 imul	 edx, ecx, 28
  00285	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00288	03 94 88 00 00
	00 00		 add	 edx, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  0028f	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00292	c1 e0 04	 shl	 eax, 4
  00295	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  00299	8b 75 f0	 mov	 esi, DWORD PTR _size_slot$[ebp]
  0029c	8b 84 b0 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+esi*4]
  002a3	89 54 08 04	 mov	 DWORD PTR [eax+ecx+4], edx

; 1242 : 					}
; 1243 : 					else

  002a7	eb 40		 jmp	 SHORT $LN32@initialise
$LN31@initialise:

; 1244 : 					{
; 1245 : 
; 1246 : 						d3d_vb_slots[type][size_slot][slot_index].pred = NULL;

  002a9	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  002ac	c1 e0 04	 shl	 eax, 4
  002af	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  002b3	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  002b6	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  002bd	c7 44 08 04 00
	00 00 00	 mov	 DWORD PTR [eax+ecx+4], 0

; 1247 : 
; 1248 : 						d3d_vb_slots_head[type][size_slot] = &d3d_vb_slots[type][size_slot][slot_index];

  002c5	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  002c8	c1 e0 04	 shl	 eax, 4
  002cb	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  002cf	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  002d2	03 8c 90 00 00
	00 00		 add	 ecx, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  002d9	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  002dc	c1 e0 04	 shl	 eax, 4
  002df	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  002e2	89 8c 90 00 00
	00 00		 mov	 DWORD PTR ?d3d_vb_slots_head@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4], ecx
$LN32@initialise:

; 1249 : 					}
; 1250 : 
; 1251 : 					if ( ( slot_index + 1 ) < number_of_d3d_vb_slots[type][size_slot] )

  002e9	8b 45 e8	 mov	 eax, DWORD PTR _slot_index$3[ebp]
  002ec	83 c0 01	 add	 eax, 1
  002ef	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  002f2	c1 e1 04	 shl	 ecx, 4
  002f5	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  002f8	3b 84 91 00 00
	00 00		 cmp	 eax, DWORD PTR ?number_of_d3d_vb_slots@@3PAY03HA[ecx+edx*4]
  002ff	7d 32		 jge	 SHORT $LN33@initialise

; 1252 : 					{
; 1253 : 
; 1254 : 						d3d_vb_slots[type][size_slot][slot_index].succ = &d3d_vb_slots[type][size_slot][slot_index+1];

  00301	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00304	c1 e0 04	 shl	 eax, 4
  00307	8b 4d e8	 mov	 ecx, DWORD PTR _slot_index$3[ebp]
  0030a	83 c1 01	 add	 ecx, 1
  0030d	6b d1 1c	 imul	 edx, ecx, 28
  00310	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  00313	03 94 88 00 00
	00 00		 add	 edx, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+ecx*4]
  0031a	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  0031d	c1 e0 04	 shl	 eax, 4
  00320	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  00324	8b 75 f0	 mov	 esi, DWORD PTR _size_slot$[ebp]
  00327	8b 84 b0 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+esi*4]
  0032e	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 1255 : 					}
; 1256 : 					else

  00331	eb 3f		 jmp	 SHORT $LN34@initialise
$LN33@initialise:

; 1257 : 					{
; 1258 : 
; 1259 : 						d3d_vb_slots[type][size_slot][slot_index].succ = NULL;

  00333	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00336	c1 e0 04	 shl	 eax, 4
  00339	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  0033d	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  00340	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  00347	c7 04 08 00 00
	00 00		 mov	 DWORD PTR [eax+ecx], 0

; 1260 : 
; 1261 : 						d3d_vb_slots_tail[type][size_slot] = &d3d_vb_slots[type][size_slot][slot_index];

  0034e	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00351	c1 e0 04	 shl	 eax, 4
  00354	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  00358	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  0035b	03 8c 90 00 00
	00 00		 add	 ecx, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  00362	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00365	c1 e0 04	 shl	 eax, 4
  00368	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  0036b	89 8c 90 00 00
	00 00		 mov	 DWORD PTR ?d3d_vb_slots_tail@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4], ecx
$LN34@initialise:

; 1262 : 					}
; 1263 : 
; 1264 : 					d3d_vb_slots[type][size_slot][slot_index].buffer = object_3d_d3d_vbs[type][size_slot][count];

  00372	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00375	c1 e0 04	 shl	 eax, 4
  00378	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  0037b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?object_3d_d3d_vbs@@3PAY03PAPAUIDirect3DVertexBuffer7@@A[eax+ecx*4]
  00382	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00385	c1 e0 04	 shl	 eax, 4
  00388	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  0038c	8b 75 f0	 mov	 esi, DWORD PTR _size_slot$[ebp]
  0038f	8b 84 b0 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+esi*4]
  00396	8b 75 f8	 mov	 esi, DWORD PTR _count$[ebp]
  00399	8b 14 b2	 mov	 edx, DWORD PTR [edx+esi*4]
  0039c	89 54 08 08	 mov	 DWORD PTR [eax+ecx+8], edx

; 1265 : 					d3d_vb_slots[type][size_slot][slot_index].indices = &object_3d_d3d_vb_indices[type][size_slot][slot_index * number_of_vertices_in_slot * NUMBER_OF_INDICES_PER_SLOT_FACTOR];

  003a0	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  003a3	c1 e0 04	 shl	 eax, 4
  003a6	8b 4d e8	 mov	 ecx, DWORD PTR _slot_index$3[ebp]
  003a9	0f af 4d f4	 imul	 ecx, DWORD PTR _number_of_vertices_in_slot$[ebp]
  003ad	6b d1 0a	 imul	 edx, ecx, 10
  003b0	8b 4d f0	 mov	 ecx, DWORD PTR _size_slot$[ebp]
  003b3	8b 84 88 00 00
	00 00		 mov	 eax, DWORD PTR ?object_3d_d3d_vb_indices@@3PAY03PAGA[eax+ecx*4]
  003ba	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  003bd	8b 55 ec	 mov	 edx, DWORD PTR _type$[ebp]
  003c0	c1 e2 04	 shl	 edx, 4
  003c3	6b 45 e8 1c	 imul	 eax, DWORD PTR _slot_index$3[ebp], 28
  003c7	8b 75 f0	 mov	 esi, DWORD PTR _size_slot$[ebp]
  003ca	8b 94 b2 00 00
	00 00		 mov	 edx, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[edx+esi*4]
  003d1	89 4c 02 14	 mov	 DWORD PTR [edx+eax+20], ecx

; 1266 : 					d3d_vb_slots[type][size_slot][slot_index].vertex_offset = temp * number_of_vertices_in_slot;

  003d5	8b 45 d4	 mov	 eax, DWORD PTR _temp$1[ebp]
  003d8	0f af 45 f4	 imul	 eax, DWORD PTR _number_of_vertices_in_slot$[ebp]
  003dc	8b 4d ec	 mov	 ecx, DWORD PTR _type$[ebp]
  003df	c1 e1 04	 shl	 ecx, 4
  003e2	6b 55 e8 1c	 imul	 edx, DWORD PTR _slot_index$3[ebp], 28
  003e6	8b 75 f0	 mov	 esi, DWORD PTR _size_slot$[ebp]
  003e9	8b 8c b1 00 00
	00 00		 mov	 ecx, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[ecx+esi*4]
  003f0	66 89 44 11 0c	 mov	 WORD PTR [ecx+edx+12], ax

; 1267 : 					d3d_vb_slots[type][size_slot][slot_index].number_of_vertices = 0;

  003f5	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  003f8	c1 e0 04	 shl	 eax, 4
  003fb	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  003ff	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  00402	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  00409	33 d2		 xor	 edx, edx
  0040b	66 89 54 08 0e	 mov	 WORD PTR [eax+ecx+14], dx

; 1268 : 					d3d_vb_slots[type][size_slot][slot_index].number_of_indices = 0;

  00410	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  00413	c1 e0 04	 shl	 eax, 4
  00416	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  0041a	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  0041d	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  00424	33 d2		 xor	 edx, edx
  00426	66 89 54 08 10	 mov	 WORD PTR [eax+ecx+16], dx

; 1269 : 					d3d_vb_slots[type][size_slot][slot_index].surface_reference = NULL;

  0042b	8b 45 ec	 mov	 eax, DWORD PTR _type$[ebp]
  0042e	c1 e0 04	 shl	 eax, 4
  00431	6b 4d e8 1c	 imul	 ecx, DWORD PTR _slot_index$3[ebp], 28
  00435	8b 55 f0	 mov	 edx, DWORD PTR _size_slot$[ebp]
  00438	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR ?d3d_vb_slots@@3PAY03PAUD3D_VB_OBJECT_3D_INFO@@A[eax+edx*4]
  0043f	c7 44 08 18 00
	00 00 00	 mov	 DWORD PTR [eax+ecx+24], 0

; 1270 : 
; 1271 : 					slot_index++;

  00447	8b 45 e8	 mov	 eax, DWORD PTR _slot_index$3[ebp]
  0044a	83 c0 01	 add	 eax, 1
  0044d	89 45 e8	 mov	 DWORD PTR _slot_index$3[ebp], eax

; 1272 : 				}

  00450	e9 00 fe ff ff	 jmp	 $LN19@initialise
$LN20@initialise:

; 1273 : 			}

  00455	e9 54 fd ff ff	 jmp	 $LN14@initialise
$LN15@initialise:

; 1274 : 		}

  0045a	e9 af fc ff ff	 jmp	 $LN11@initialise
$LN12@initialise:

; 1275 : 
; 1276 : 		number_of_vertices_in_slot >>= 1;

  0045f	8b 45 f4	 mov	 eax, DWORD PTR _number_of_vertices_in_slot$[ebp]
  00462	d1 f8		 sar	 eax, 1
  00464	89 45 f4	 mov	 DWORD PTR _number_of_vertices_in_slot$[ebp], eax

; 1277 : 	}

  00467	e9 86 fc ff ff	 jmp	 $LN8@initialise
$LN9@initialise:

; 1278 : 
; 1279 : 	//
; 1280 : 	// Allocate surface reference pointers
; 1281 : 	//
; 1282 : 
; 1283 : 	total_surfaces = 0;

  0046c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _total_surfaces$[ebp], 0

; 1284 : 
; 1285 : 	for ( count = 1; count <= total_number_of_raw_3d_objects; count++ )

  00473	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  0047a	eb 09		 jmp	 SHORT $LN24@initialise
$LN22@initialise:
  0047c	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0047f	83 c0 01	 add	 eax, 1
  00482	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN24@initialise:
  00485	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00488	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?total_number_of_raw_3d_objects@@3HA ; total_number_of_raw_3d_objects
  0048e	7f 17		 jg	 SHORT $LN23@initialise

; 1286 : 	{
; 1287 : 
; 1288 : 		total_surfaces += objects_3d_data[count].number_of_surfaces;

  00490	6b 45 f8 68	 imul	 eax, DWORD PTR _count$[ebp], 104
  00494	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0049a	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  0049f	03 55 fc	 add	 edx, DWORD PTR _total_surfaces$[ebp]
  004a2	89 55 fc	 mov	 DWORD PTR _total_surfaces$[ebp], edx

; 1289 : 	}

  004a5	eb d5		 jmp	 SHORT $LN22@initialise
$LN23@initialise:

; 1290 : 
; 1291 : 	object_3d_vb_slot_references = ( d3d_vb_object_3d_info * * ) safe_malloc ( sizeof ( d3d_vb_object_3d_info * ) * total_surfaces );

  004a7	8b 45 fc	 mov	 eax, DWORD PTR _total_surfaces$[ebp]
  004aa	c1 e0 02	 shl	 eax, 2
  004ad	50		 push	 eax
  004ae	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  004b3	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A, eax ; object_3d_vb_slot_references

; 1292 : 
; 1293 : 	memset ( object_3d_vb_slot_references, 0, ( sizeof ( d3d_vb_object_3d_info * ) * total_surfaces ) );

  004b8	8b 45 fc	 mov	 eax, DWORD PTR _total_surfaces$[ebp]
  004bb	c1 e0 02	 shl	 eax, 2
  004be	50		 push	 eax
  004bf	6a 00		 push	 0
  004c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_vb_slot_references@@3PAPAUD3D_VB_OBJECT_3D_INFO@@A ; object_3d_vb_slot_references
  004c7	51		 push	 ecx
  004c8	e8 00 00 00 00	 call	 _memset
  004cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1294 : 
; 1295 : 	//
; 1296 : 	// Set line vertex indices
; 1297 : 	//
; 1298 : 
; 1299 : 	for ( count = 0; count < 1024; count += 2 )

  004d0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  004d7	eb 09		 jmp	 SHORT $LN27@initialise
$LN25@initialise:
  004d9	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004dc	83 c0 02	 add	 eax, 2
  004df	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN27@initialise:
  004e2	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _count$[ebp], 1024 ; 00000400H
  004e9	7d 22		 jge	 SHORT $LN26@initialise

; 1300 : 	{
; 1301 : 
; 1302 : 		d3d_hardware_vertex_indices[count] = count;

  004eb	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004ee	66 8b 4d f8	 mov	 cx, WORD PTR _count$[ebp]
  004f2	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR ?d3d_hardware_vertex_indices@@3PAGA[eax*2], cx

; 1303 : 		d3d_hardware_vertex_indices[count+1] = count+1;

  004fa	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  004fd	83 c0 01	 add	 eax, 1
  00500	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00503	66 89 04 4d 02
	00 00 00	 mov	 WORD PTR ?d3d_hardware_vertex_indices@@3PAGA[ecx*2+2], ax

; 1304 : 	}

  0050b	eb cc		 jmp	 SHORT $LN25@initialise
$LN26@initialise:

; 1305 : 
; 1306 : 	//
; 1307 : 	// Register the restore routine for Alt-tab situations
; 1308 : 	//
; 1309 : 
; 1310 : 	if ( !object_vbs_restore_registered )

  0050d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?object_vbs_restore_registered@?1??initialise_3d_objects_in_d3d@@YGXXZ@4HA, 0
  00514	75 14		 jne	 SHORT $LN1@initialise

; 1311 : 	{
; 1312 : 
; 1313 : 		register_restore_vb_routine ( restore_3d_vb_routine );

  00516	68 00 00 00 00	 push	 OFFSET ?restore_3d_vb_routine@@YGXXZ ; restore_3d_vb_routine
  0051b	e8 00 00 00 00	 call	 ?register_restore_vb_routine@@YGXP6GXXZ@Z ; register_restore_vb_routine

; 1314 : 
; 1315 : 		object_vbs_restore_registered = TRUE;

  00520	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?object_vbs_restore_registered@?1??initialise_3d_objects_in_d3d@@YGXXZ@4HA, 1
$LN1@initialise:

; 1316 : 	}
; 1317 : }

  0052a	5f		 pop	 edi
  0052b	5e		 pop	 esi
  0052c	5b		 pop	 ebx
  0052d	8b e5		 mov	 esp, ebp
  0052f	5d		 pop	 ebp
  00530	c3		 ret	 0
?initialise_3d_objects_in_d3d@@YGXXZ ENDP		; initialise_3d_objects_in_d3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
