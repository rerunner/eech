; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\random.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?random_number_seed@@3HA			; random_number_seed
_DATA	SEGMENT
?random_number_seed@@3HA DD 01H				; random_number_seed
_DATA	ENDS
PUBLIC	?initialise_random_number_generator@@YGXXZ	; initialise_random_number_generator
PUBLIC	?set_random_number_seed@@YGXH@Z			; set_random_number_seed
PUBLIC	?get_random_number_seed@@YGHXZ			; get_random_number_seed
PUBLIC	?sfrand1norm@@YGNXZ				; sfrand1norm
PUBLIC	__real@3f10000000000000
EXTRN	__imp__srand:PROC
EXTRN	_fabs:PROC
EXTRN	?get_system_time@@YGIXZ:PROC			; get_system_time
EXTRN	__fltused:DWORD
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\random.c
;	COMDAT ?sfrand1norm@@YGNXZ
_TEXT	SEGMENT
tv81 = -88						; size = 8
_positive_value$ = -16					; size = 8
_value$ = -8						; size = 8
?sfrand1norm@@YGNXZ PROC				; sfrand1norm, COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 125  : 	double value = (((double) (rand16 () - 16384)) * (1.0 / 16384.0));

  00009	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00013	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00023	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00026	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0002c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00032	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00036	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0003e	f2 0f 11 45 f8	 movsd	 QWORD PTR _value$[ebp], xmm0

; 126  : 	double positive_value = fabs(value);

  00043	83 ec 08	 sub	 esp, 8
  00046	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _value$[ebp]
  0004b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 _fabs
  00055	83 c4 08	 add	 esp, 8
  00058	dd 5d f0	 fstp	 QWORD PTR _positive_value$[ebp]

; 127  : 
; 128  : 	return value * positive_value;

  0005b	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _value$[ebp]
  00060	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _positive_value$[ebp]
  00065	f2 0f 11 45 a8	 movsd	 QWORD PTR tv81[ebp], xmm0
  0006a	dd 45 a8	 fld	 QWORD PTR tv81[ebp]

; 129  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?sfrand1norm@@YGNXZ ENDP				; sfrand1norm
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\random.c
;	COMDAT ?get_random_number_seed@@YGHXZ
_TEXT	SEGMENT
?get_random_number_seed@@YGHXZ PROC			; get_random_number_seed, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 116  : 	return (random_number_seed);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?random_number_seed@@3HA ; random_number_seed

; 117  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_random_number_seed@@YGHXZ ENDP			; get_random_number_seed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\random.c
;	COMDAT ?set_random_number_seed@@YGXH@Z
_TEXT	SEGMENT
_seed$ = 8						; size = 4
?set_random_number_seed@@YGXH@Z PROC			; set_random_number_seed, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 101  : 	random_number_seed = seed;

  00009	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed

; 102  : 
; 103  : 	//
; 104  : 	// sync with compiler random number generator
; 105  : 	//
; 106  : 
; 107  : 	srand (seed);

  00011	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  0001b	83 c4 04	 add	 esp, 4

; 108  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?set_random_number_seed@@YGXH@Z ENDP			; set_random_number_seed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\random.c
;	COMDAT ?initialise_random_number_generator@@YGXXZ
_TEXT	SEGMENT
_seed$ = -4						; size = 4
?initialise_random_number_generator@@YGXXZ PROC		; initialise_random_number_generator, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 82   : 	int
; 83   : 		seed;
; 84   : 
; 85   : 	seed = get_system_time ();

  00009	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0000e	89 45 fc	 mov	 DWORD PTR _seed$[ebp], eax

; 86   : 
; 87   : 	if (seed == 0)

  00011	83 7d fc 00	 cmp	 DWORD PTR _seed$[ebp], 0
  00015	75 07		 jne	 SHORT $LN2@initialise

; 88   : 	{
; 89   : 		seed = 1;

  00017	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _seed$[ebp], 1
$LN2@initialise:

; 90   : 	}
; 91   : 
; 92   : 	set_random_number_seed (seed);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _seed$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?set_random_number_seed@@YGXH@Z ; set_random_number_seed

; 93   : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?initialise_random_number_generator@@YGXXZ ENDP		; initialise_random_number_generator
_TEXT	ENDS
END
