; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fixwing.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?attach_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@@Z ; attach_fixed_wing_meta_smoke_lists
PUBLIC	?pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z ; pack_fixed_wing_meta_smoke_lists
PUBLIC	?unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z ; unpack_fixed_wing_meta_smoke_lists
PUBLIC	?assess_fixed_wing_damage_level@@YGXPAUENTITY@@HH@Z ; assess_fixed_wing_damage_level
PUBLIC	?update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z ; update_fixed_wing_crate_dropping
PUBLIC	??_C@_0DO@OICIPHLD@FIXWING?3?5Attach?5meta?5smoke?5list@ ; `string'
PUBLIC	?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA ; `pack_fixed_wing_meta_smoke_lists'::`1'::__LINE__Var
PUBLIC	??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0DM@KDGOFLGB@FIXWING?3?5Pack?5meta?5smoke?5lists?5@ ; `string'
PUBLIC	??_C@_0P@KGPELPEG@special_effect@		; `string'
PUBLIC	??_C@_0BI@MBKKNMHC@packed_indices?5?$DN?$DN?5count@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA ; `unpack_fixed_wing_meta_smoke_lists'::`1'::__LINE__Var
PUBLIC	??_C@_0DO@JBNJBBCN@FIXWING?3?5Unpack?5meta?5smoke?5list@ ; `string'
PUBLIC	?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA ; `update_fixed_wing_crate_dropping'::`1'::__LINE__Var
PUBLIC	__real@3f800000
PUBLIC	__real@4034000000000000
PUBLIC	__real@4041800000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@4049000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@461c4000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_sqr_3d_range
EXTRN	?register_attach_meta_smoke_list_to_object@@YGXPAUENTITY@@HHPAHH@Z:PROC ; register_attach_meta_smoke_list_to_object
EXTRN	?pack_entity_safe_index@@YGXH@Z:PROC		; pack_entity_safe_index
EXTRN	?unpack_entity_safe_index@@YGHXZ:PROC		; unpack_entity_safe_index
EXTRN	?count_sub_object_type_depth@@YGHPAUOBJECT_3D_INSTANCE@@H@Z:PROC ; count_sub_object_type_depth
EXTRN	?aircraft_fire_weapon@@YG?AW4AIRCRAFT_FIRE_RESULT@@PAUENTITY@@I@Z:PROC ; aircraft_fire_weapon
EXTRN	?count_entities_in_meta_smoke_list@@YGHW4META_SMOKE_LIST_TYPES@@@Z:PROC ; count_entities_in_meta_smoke_list
EXTRN	?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z:PROC ; set_infinite_smoke_list_generating_state
EXTRN	?attach_local_meta_smoke_lists_to_object@@YGHPAUENTITY@@W4META_SMOKE_LIST_TYPES@@HPAH@Z:PROC ; attach_local_meta_smoke_lists_to_object
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA:BYTE ; fn_get_local_entity_ptr_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?aircraft_database@@3PAUAIRCRAFT_DATA@@A:BYTE	; aircraft_database
EXTRN	?effect_database@@3QBUEFFECT_DATA@@B:BYTE	; effect_database
EXTRN	__fltused:DWORD
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@4041800000000000
CONST	SEGMENT
__real@4041800000000000 DQ 04041800000000000r	; 35
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA DD 01fbH ; `update_fixed_wing_crate_dropping'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DO@JBNJBBCN@FIXWING?3?5Unpack?5meta?5smoke?5list@
CONST	SEGMENT
??_C@_0DO@JBNJBBCN@FIXWING?3?5Unpack?5meta?5smoke?5list@ DB 'FIXWING: Unp'
	DB	'ack meta smoke lists - too many attachment points', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA DD 014fH ; `unpack_fixed_wing_meta_smoke_lists'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@MBKKNMHC@packed_indices?5?$DN?$DN?5count@
CONST	SEGMENT
??_C@_0BI@MBKKNMHC@packed_indices?5?$DN?$DN?5count@ DB 'packed_indices =='
	DB	' count', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGPELPEG@special_effect@
CONST	SEGMENT
??_C@_0P@KGPELPEG@special_effect@ DB 'special_effect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KDGOFLGB@FIXWING?3?5Pack?5meta?5smoke?5lists?5@
CONST	SEGMENT
??_C@_0DM@KDGOFLGB@FIXWING?3?5Pack?5meta?5smoke?5lists?5@ DB 'FIXWING: Pa'
	DB	'ck meta smoke lists - too many attachment points', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwi'
	DB	'ng\fixwing.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA DD 0c8H ; `pack_fixed_wing_meta_smoke_lists'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DO@OICIPHLD@FIXWING?3?5Attach?5meta?5smoke?5list@
CONST	SEGMENT
??_C@_0DO@OICIPHLD@FIXWING?3?5Attach?5meta?5smoke?5list@ DB 'FIXWING: Att'
	DB	'ach meta smoke lists - too many attachment points', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?attached_meta_smoke_list_table@@3PAUATTACHED_META_SMOKE_LIST_TABLE@@A DD 0aH ; attached_meta_smoke_list_table
	DD	047H
	DD	0ffffffffH
	DD	0bH
	DD	047H
	DD	0ffffffffH
	DD	0cH
	DD	047H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fixwing.c
;	COMDAT ?update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv196 = -92						; size = 4
tv173 = -92						; size = 4
tv153 = -92						; size = 4
tv132 = -92						; size = 4
tv79 = -92						; size = 4
tv189 = -88						; size = 4
tv165 = -88						; size = 4
tv145 = -88						; size = 4
tv92 = -88						; size = 4
tv72 = -88						; size = 4
_range$ = -20						; size = 4
_en_pos$ = -16						; size = 4
_crate_pos$ = -12					; size = 4
_crate$ = -8						; size = 4
_current_waypoint$ = -4					; size = 4
_en$ = 8						; size = 4
?update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z PROC ; update_fixed_wing_crate_dropping, COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 508  : 
; 509  : 	entity
; 510  : 		*current_waypoint,
; 511  : 		*crate;
; 512  : 
; 513  : 	vec3d
; 514  : 		*crate_pos,
; 515  : 		*en_pos;
; 516  : 
; 517  : 	float
; 518  : 		range;
; 519  : 
; 520  : 	current_waypoint = get_local_entity_current_waypoint (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00012	89 45 fc	 mov	 DWORD PTR _current_waypoint$[ebp], eax

; 521  : 
; 522  : 	// only perform code if next waypoint is FINISH_DROP_OFF (ie, drop crates between DROP_OFF and FINISH_DROP_OFF)
; 523  : 	if ((current_waypoint) && (get_local_entity_int_value (current_waypoint, INT_TYPE_ENTITY_SUB_TYPE) == ENTITY_SUB_TYPE_WAYPOINT_FINISH_DROP_OFF))

  00015	83 7d fc 00	 cmp	 DWORD PTR _current_waypoint$[ebp], 0
  00019	0f 84 b2 02 00
	00		 je	 $LN7@update_fix
  0001f	83 7d fc 00	 cmp	 DWORD PTR _current_waypoint$[ebp], 0
  00023	74 0a		 je	 SHORT $LN10@update_fix
  00025	8b 45 fc	 mov	 eax, DWORD PTR _current_waypoint$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d a8	 mov	 DWORD PTR tv72[ebp], ecx
  0002d	eb 1d		 jmp	 SHORT $LN11@update_fix
$LN10@update_fix:
  0002f	68 0b 02 00 00	 push	 523			; 0000020bH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00045	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN11@update_fix:
  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	85 c0		 test	 eax, eax
  00053	74 09		 je	 SHORT $LN12@update_fix
  00055	c7 45 a4 34 00
	00 00		 mov	 DWORD PTR tv79[ebp], 52	; 00000034H
  0005c	eb 1d		 jmp	 SHORT $LN13@update_fix
$LN12@update_fix:
  0005e	68 0b 02 00 00	 push	 523			; 0000020bH
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00074	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN13@update_fix:
  0007b	6a 34		 push	 52			; 00000034H
  0007d	8b 55 fc	 mov	 edx, DWORD PTR _current_waypoint$[ebp]
  00080	52		 push	 edx
  00081	69 45 a8 5c 04
	00 00		 imul	 eax, DWORD PTR tv72[ebp], 1116
  00088	8b 4d a4	 mov	 ecx, DWORD PTR tv79[ebp]
  0008b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00092	ff d2		 call	 edx
  00094	83 f8 09	 cmp	 eax, 9
  00097	0f 85 34 02 00
	00		 jne	 $LN7@update_fix

; 524  : 	{
; 525  : 	
; 526  : 		crate = get_local_entity_first_child (en, LIST_TYPE_LAUNCHED_WEAPON);

  0009d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000a1	74 0a		 je	 SHORT $LN14@update_fix
  000a3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	89 4d a8	 mov	 DWORD PTR tv92[ebp], ecx
  000ab	eb 21		 jmp	 SHORT $LN15@update_fix
$LN14@update_fix:
  000ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA
  000b3	83 c2 13	 add	 edx, 19			; 00000013H
  000b6	52		 push	 edx
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c7	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN15@update_fix:
  000ce	b9 01 00 00 00	 mov	 ecx, 1
  000d3	85 c9		 test	 ecx, ecx
  000d5	74 09		 je	 SHORT $LN16@update_fix
  000d7	c7 45 a4 18 00
	00 00		 mov	 DWORD PTR tv132[ebp], 24 ; 00000018H
  000de	eb 21		 jmp	 SHORT $LN17@update_fix
$LN16@update_fix:
  000e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA
  000e6	83 c2 13	 add	 edx, 19			; 00000013H
  000e9	52		 push	 edx
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000fa	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN17@update_fix:
  00101	6a 18		 push	 24			; 00000018H
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00106	51		 push	 ecx
  00107	69 55 a8 b4 00
	00 00		 imul	 edx, DWORD PTR tv92[ebp], 180
  0010e	8b 45 a4	 mov	 eax, DWORD PTR tv132[ebp]
  00111	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00118	ff d1		 call	 ecx
  0011a	89 45 f8	 mov	 DWORD PTR _crate$[ebp], eax

; 527  : 	
; 528  : 		if (crate)

  0011d	83 7d f8 00	 cmp	 DWORD PTR _crate$[ebp], 0
  00121	0f 84 0a 01 00
	00		 je	 $LN3@update_fix

; 529  : 		{
; 530  : 		
; 531  : 			crate_pos = get_local_entity_vec3d_ptr (crate, VEC3D_TYPE_POSITION);

  00127	83 7d f8 00	 cmp	 DWORD PTR _crate$[ebp], 0
  0012b	74 0a		 je	 SHORT $LN18@update_fix
  0012d	8b 45 f8	 mov	 eax, DWORD PTR _crate$[ebp]
  00130	8b 08		 mov	 ecx, DWORD PTR [eax]
  00132	89 4d a8	 mov	 DWORD PTR tv145[ebp], ecx
  00135	eb 21		 jmp	 SHORT $LN19@update_fix
$LN18@update_fix:
  00137	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA
  0013d	83 c2 18	 add	 edx, 24			; 00000018H
  00140	52		 push	 edx
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00151	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN19@update_fix:
  00158	b9 01 00 00 00	 mov	 ecx, 1
  0015d	85 c9		 test	 ecx, ecx
  0015f	74 09		 je	 SHORT $LN20@update_fix
  00161	c7 45 a4 08 00
	00 00		 mov	 DWORD PTR tv153[ebp], 8
  00168	eb 21		 jmp	 SHORT $LN21@update_fix
$LN20@update_fix:
  0016a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA
  00170	83 c2 18	 add	 edx, 24			; 00000018H
  00173	52		 push	 edx
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00184	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN21@update_fix:
  0018b	6a 08		 push	 8
  0018d	8b 4d f8	 mov	 ecx, DWORD PTR _crate$[ebp]
  00190	51		 push	 ecx
  00191	6b 55 a8 60	 imul	 edx, DWORD PTR tv145[ebp], 96
  00195	8b 45 a4	 mov	 eax, DWORD PTR tv153[ebp]
  00198	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0019f	ff d1		 call	 ecx
  001a1	89 45 f4	 mov	 DWORD PTR _crate_pos$[ebp], eax

; 532  : 			
; 533  : 			en_pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  001a4	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  001a8	74 0a		 je	 SHORT $LN22@update_fix
  001aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  001af	89 4d a8	 mov	 DWORD PTR tv165[ebp], ecx
  001b2	eb 21		 jmp	 SHORT $LN23@update_fix
$LN22@update_fix:
  001b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA
  001ba	83 c2 1a	 add	 edx, 26			; 0000001aH
  001bd	52		 push	 edx
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ce	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN23@update_fix:
  001d5	b9 01 00 00 00	 mov	 ecx, 1
  001da	85 c9		 test	 ecx, ecx
  001dc	74 09		 je	 SHORT $LN24@update_fix
  001de	c7 45 a4 08 00
	00 00		 mov	 DWORD PTR tv173[ebp], 8
  001e5	eb 21		 jmp	 SHORT $LN25@update_fix
$LN24@update_fix:
  001e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z@4JA
  001ed	83 c2 1a	 add	 edx, 26			; 0000001aH
  001f0	52		 push	 edx
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00201	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN25@update_fix:
  00208	6a 08		 push	 8
  0020a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0020d	51		 push	 ecx
  0020e	6b 55 a8 60	 imul	 edx, DWORD PTR tv165[ebp], 96
  00212	8b 45 a4	 mov	 eax, DWORD PTR tv173[ebp]
  00215	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0021c	ff d1		 call	 ecx
  0021e	89 45 f0	 mov	 DWORD PTR _en_pos$[ebp], eax

; 534  : 		
; 535  : 			range = get_sqr_3d_range (crate_pos, en_pos);

  00221	8b 45 f0	 mov	 eax, DWORD PTR _en_pos$[ebp]
  00224	50		 push	 eax
  00225	8b 4d f4	 mov	 ecx, DWORD PTR _crate_pos$[ebp]
  00228	51		 push	 ecx
  00229	e8 00 00 00 00	 call	 ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_3d_range
  0022e	d9 5d ec	 fstp	 DWORD PTR _range$[ebp]
$LN3@update_fix:

; 536  : 		}
; 537  : 		
; 538  : 		if ((!crate) || (range > (MIN_CRATE_DROPPING_RANGE * MIN_CRATE_DROPPING_RANGE)))

  00231	83 7d f8 00	 cmp	 DWORD PTR _crate$[ebp], 0
  00235	74 12		 je	 SHORT $LN5@update_fix
  00237	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _range$[ebp]
  0023c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@461c4000
  00243	0f 86 88 00 00
	00		 jbe	 $LN7@update_fix
$LN5@update_fix:

; 539  : 		{
; 540  : 		
; 541  : 			if (get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON) == ENTITY_SUB_TYPE_WEAPON_CRATE)

  00249	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0024d	74 0a		 je	 SHORT $LN26@update_fix
  0024f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00252	8b 08		 mov	 ecx, DWORD PTR [eax]
  00254	89 4d a8	 mov	 DWORD PTR tv189[ebp], ecx
  00257	eb 1d		 jmp	 SHORT $LN27@update_fix
$LN26@update_fix:
  00259	68 1d 02 00 00	 push	 541			; 0000021dH
  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00263	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00269	52		 push	 edx
  0026a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0026f	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv189[ebp], 0
$LN27@update_fix:
  00276	b8 01 00 00 00	 mov	 eax, 1
  0027b	85 c0		 test	 eax, eax
  0027d	74 09		 je	 SHORT $LN28@update_fix
  0027f	c7 45 a4 b8 00
	00 00		 mov	 DWORD PTR tv196[ebp], 184 ; 000000b8H
  00286	eb 1d		 jmp	 SHORT $LN29@update_fix
$LN28@update_fix:
  00288	68 1d 02 00 00	 push	 541			; 0000021dH
  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00292	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00298	51		 push	 ecx
  00299	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0029e	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv196[ebp], 0
$LN29@update_fix:
  002a5	68 b8 00 00 00	 push	 184			; 000000b8H
  002aa	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  002ad	52		 push	 edx
  002ae	69 45 a8 5c 04
	00 00		 imul	 eax, DWORD PTR tv189[ebp], 1116
  002b5	8b 4d a4	 mov	 ecx, DWORD PTR tv196[ebp]
  002b8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002bf	ff d2		 call	 edx
  002c1	83 f8 46	 cmp	 eax, 70			; 00000046H
  002c4	75 0b		 jne	 SHORT $LN7@update_fix

; 542  : 			{
; 543  : 		
; 544  : 				if (aircraft_fire_weapon (en, AIRCRAFT_FIRE_WEAPON_SYSTEM_NOT_READY) == AIRCRAFT_FIRE_WEAPON_SYSTEM_NOT_READY)

  002c6	6a 02		 push	 2
  002c8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 ?aircraft_fire_weapon@@YG?AW4AIRCRAFT_FIRE_RESULT@@PAUENTITY@@I@Z ; aircraft_fire_weapon
$LN7@update_fix:

; 545  : 				{
; 546  : 		
; 547  : 					//
; 548  : 					// go round again
; 549  : 					//
; 550  : 	
; 551  : 					#if DEBUG_MODULE
; 552  : 	
; 553  : 					debug_log ("FIXWING: SUPPLY_INFO: aircraft not ready to drop crates");
; 554  : 	
; 555  : 					#endif
; 556  : 				}
; 557  : 				else
; 558  : 				{
; 559  : 	
; 560  : 					#if DEBUG_MODULE
; 561  : 	
; 562  : 					debug_log ("FIXWING: SUPPLY_INFO: aircraft dropping crate");
; 563  : 	
; 564  : 					#endif
; 565  : 				}
; 566  : 			}
; 567  : 		}
; 568  : 	}
; 569  : }

  002d1	5f		 pop	 edi
  002d2	5e		 pop	 esi
  002d3	5b		 pop	 ebx
  002d4	8b e5		 mov	 esp, ebp
  002d6	5d		 pop	 ebp
  002d7	c2 04 00	 ret	 4
?update_fixed_wing_crate_dropping@@YGXPAUENTITY@@@Z ENDP ; update_fixed_wing_crate_dropping
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fixwing.c
;	COMDAT ?assess_fixed_wing_damage_level@@YGXPAUENTITY@@HH@Z
_TEXT	SEGMENT
tv189 = -96						; size = 8
tv77 = -88						; size = 4
tv70 = -84						; size = 4
_new_percent_damaged$ = -16				; size = 4
_old_percent_damaged$ = -12				; size = 4
_initial_damage$ = -8					; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_old_damage_level$ = 12					; size = 4
_new_damage_level$ = 16					; size = 4
?assess_fixed_wing_damage_level@@YGXPAUENTITY@@HH@Z PROC ; assess_fixed_wing_damage_level, COMDAT

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 453  : 
; 454  : 	fixed_wing
; 455  : 		*raw;
; 456  : 
; 457  : 	float
; 458  : 		initial_damage,
; 459  : 		old_percent_damaged,
; 460  : 		new_percent_damaged;
; 461  : 
; 462  : 	if (old_damage_level == new_damage_level)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _old_damage_level$[ebp]
  0000c	3b 45 10	 cmp	 eax, DWORD PTR _new_damage_level$[ebp]
  0000f	75 05		 jne	 SHORT $LN2@assess_fix

; 463  : 	{
; 464  : 		return;

  00011	e9 1d 02 00 00	 jmp	 $LN1@assess_fix
$LN2@assess_fix:

; 465  : 	}
; 466  : 	
; 467  : 	if (get_local_entity_float_value (en, FLOAT_TYPE_VELOCITY) <= FIXED_WING_DAMAGE_TRAIL_CUT_OFF_SPEED)

  00016	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0001a	74 0a		 je	 SHORT $LN8@assess_fix
  0001c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	89 4d ac	 mov	 DWORD PTR tv70[ebp], ecx
  00024	eb 1d		 jmp	 SHORT $LN9@assess_fix
$LN8@assess_fix:
  00026	68 d3 01 00 00	 push	 467			; 000001d3H
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN9@assess_fix:
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN10@assess_fix
  0004c	c7 45 a8 93 00
	00 00		 mov	 DWORD PTR tv77[ebp], 147 ; 00000093H
  00053	eb 1d		 jmp	 SHORT $LN11@assess_fix
$LN10@assess_fix:
  00055	68 d3 01 00 00	 push	 467			; 000001d3H
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN11@assess_fix:
  00072	68 93 00 00 00	 push	 147			; 00000093H
  00077	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0007a	52		 push	 edx
  0007b	69 45 ac bc 02
	00 00		 imul	 eax, DWORD PTR tv70[ebp], 700
  00082	8b 4d a8	 mov	 ecx, DWORD PTR tv77[ebp]
  00085	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[eax+ecx*4]
  0008c	ff d2		 call	 edx
  0008e	dd 5d a0	 fstp	 QWORD PTR tv189[ebp]
  00091	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4044000000000000
  00099	66 0f 2f 45 a0	 comisd	 xmm0, QWORD PTR tv189[ebp]
  0009e	72 05		 jb	 SHORT $LN3@assess_fix

; 468  : 	{
; 469  : 		return;

  000a0	e9 8e 01 00 00	 jmp	 $LN1@assess_fix
$LN3@assess_fix:

; 470  : 	}
; 471  : 
; 472  : 	raw = (fixed_wing *) get_local_entity_data (en);

  000a5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ab	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 473  : 
; 474  : 	initial_damage = (float)(aircraft_database[raw->ac.mob.sub_type].initial_damage_level);

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b1	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  000b7	f3 0f 2a 81 e0
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+224]
  000bf	f3 0f 11 45 f8	 movss	 DWORD PTR _initial_damage$[ebp], xmm0

; 475  : 	
; 476  : 	old_percent_damaged = (100.0 * (float)old_damage_level) / initial_damage;

  000c4	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _old_damage_level$[ebp]
  000c9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000cd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  000d5	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _initial_damage$[ebp]
  000da	f2 0f 5e c1	 divsd	 xmm0, xmm1
  000de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e2	f3 0f 11 45 f4	 movss	 DWORD PTR _old_percent_damaged$[ebp], xmm0

; 477  : 	new_percent_damaged = (100.0 * (float)new_damage_level) / initial_damage;

  000e7	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _new_damage_level$[ebp]
  000ec	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000f0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  000f8	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _initial_damage$[ebp]
  000fd	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00105	f3 0f 11 45 f0	 movss	 DWORD PTR _new_percent_damaged$[ebp], xmm0

; 478  : 
; 479  : 	if ((new_percent_damaged <= HEAVY_DAMAGE_THRESHOLD) && (old_percent_damaged > HEAVY_DAMAGE_THRESHOLD))

  0010a	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _new_percent_damaged$[ebp]
  0010f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4034000000000000
  00117	66 0f 2f c8	 comisd	 xmm1, xmm0
  0011b	72 50		 jb	 SHORT $LN4@assess_fix
  0011d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _old_percent_damaged$[ebp]
  00122	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4034000000000000
  0012a	76 41		 jbe	 SHORT $LN4@assess_fix

; 480  : 	{
; 481  : 		// activate heavy damage effect
; 482  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_LIGHT_DAMAGE, INFINITE_SMOKE_OFF);

  0012c	51		 push	 ecx
  0012d	0f 57 c0	 xorps	 xmm0, xmm0
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	6a 05		 push	 5
  00137	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state

; 483  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_MEDIUM_DAMAGE, INFINITE_SMOKE_OFF);

  00140	51		 push	 ecx
  00141	0f 57 c0	 xorps	 xmm0, xmm0
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	6a 06		 push	 6
  0014b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state

; 484  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_HEAVY_DAMAGE, INFINITE_SMOKE_ON);

  00154	51		 push	 ecx
  00155	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	6a 08		 push	 8
  00164	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state
$LN4@assess_fix:

; 485  : 	}
; 486  : 	if ((new_percent_damaged <= MEDIUM_DAMAGE_THRESHOLD) && (old_percent_damaged > MEDIUM_DAMAGE_THRESHOLD))

  0016d	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _new_percent_damaged$[ebp]
  00172	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4041800000000000
  0017a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0017e	72 50		 jb	 SHORT $LN5@assess_fix
  00180	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _old_percent_damaged$[ebp]
  00185	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4041800000000000
  0018d	76 41		 jbe	 SHORT $LN5@assess_fix

; 487  : 	{
; 488  : 		// activate medium damage effect
; 489  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_LIGHT_DAMAGE, INFINITE_SMOKE_OFF);

  0018f	51		 push	 ecx
  00190	0f 57 c0	 xorps	 xmm0, xmm0
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	6a 05		 push	 5
  0019a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state

; 490  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_MEDIUM_DAMAGE, INFINITE_SMOKE_ON);

  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	6a 06		 push	 6
  001b3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state

; 491  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_HEAVY_DAMAGE, INFINITE_SMOKE_OFF);

  001bc	51		 push	 ecx
  001bd	0f 57 c0	 xorps	 xmm0, xmm0
  001c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c5	6a 08		 push	 8
  001c7	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state
$LN5@assess_fix:

; 492  : 	}
; 493  : 	if ((new_percent_damaged <= LIGHT_DAMAGE_THRESHOLD) && (old_percent_damaged > LIGHT_DAMAGE_THRESHOLD))

  001d0	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _new_percent_damaged$[ebp]
  001d5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  001dd	66 0f 2f c8	 comisd	 xmm1, xmm0
  001e1	72 50		 jb	 SHORT $LN6@assess_fix
  001e3	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _old_percent_damaged$[ebp]
  001e8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4049000000000000
  001f0	76 41		 jbe	 SHORT $LN6@assess_fix

; 494  : 	{
; 495  : 		// activate light damage effect
; 496  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_LIGHT_DAMAGE, INFINITE_SMOKE_ON);

  001f2	51		 push	 ecx
  001f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	6a 05		 push	 5
  00202	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state

; 497  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_MEDIUM_DAMAGE, INFINITE_SMOKE_OFF);

  0020b	51		 push	 ecx
  0020c	0f 57 c0	 xorps	 xmm0, xmm0
  0020f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00214	6a 06		 push	 6
  00216	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state

; 498  : 		set_infinite_smoke_list_generating_state (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_HEAVY_DAMAGE, INFINITE_SMOKE_OFF);

  0021f	51		 push	 ecx
  00220	0f 57 c0	 xorps	 xmm0, xmm0
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	6a 08		 push	 8
  0022a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?set_infinite_smoke_list_generating_state@@YGHPAUENTITY@@HM@Z ; set_infinite_smoke_list_generating_state
$LN6@assess_fix:
$LN1@assess_fix:

; 499  : 	}
; 500  : }

  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx
  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c2 0c 00	 ret	 12			; 0000000cH
?assess_fixed_wing_damage_level@@YGXPAUENTITY@@HH@Z ENDP ; assess_fixed_wing_damage_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fixwing.c
;	COMDAT ?unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv129 = -104						; size = 4
tv76 = -104						; size = 4
tv89 = -100						; size = 4
tv69 = -100						; size = 4
_attachment_point$ = -32				; size = 4
_type$ = -28						; size = 4
_entity_index_list$ = -24				; size = 4
_point$ = -20						; size = 4
_count$ = -16						; size = 4
_loop$ = -12						; size = 4
_item$ = -8						; size = 4
_inst3d$ = -4						; size = 4
_en$ = 8						; size = 4
_mode$ = 12						; size = 4
?unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z PROC ; unpack_fixed_wing_meta_smoke_lists, COMDAT

; 335  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 336  : 	object_3d_instance
; 337  : 		*inst3d;
; 338  : 
; 339  : 	int
; 340  : 		item,
; 341  : 		loop,
; 342  : 		count,
; 343  : 		point,
; 344  : 		*entity_index_list;
; 345  : 
; 346  : 	meta_smoke_list_types
; 347  : 		type;
; 348  : 
; 349  : 	object_3d_sub_object_index_numbers
; 350  : 		attachment_point;
; 351  : 
; 352  : 	if (get_local_entity_int_value (en, INT_TYPE_ALIVE))

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN20@unpack_fix
  0000f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d 9c	 mov	 DWORD PTR tv69[ebp], ecx
  00017	eb 1d		 jmp	 SHORT $LN21@unpack_fix
$LN20@unpack_fix:
  00019	68 60 01 00 00	 push	 352			; 00000160H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0002f	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN21@unpack_fix:
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	85 c0		 test	 eax, eax
  0003d	74 09		 je	 SHORT $LN22@unpack_fix
  0003f	c7 45 98 07 00
	00 00		 mov	 DWORD PTR tv76[ebp], 7
  00046	eb 1d		 jmp	 SHORT $LN23@unpack_fix
$LN22@unpack_fix:
  00048	68 60 01 00 00	 push	 352			; 00000160H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN23@unpack_fix:
  00065	6a 07		 push	 7
  00067	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0006a	52		 push	 edx
  0006b	69 45 9c 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  00072	8b 4d 98	 mov	 ecx, DWORD PTR tv76[ebp]
  00075	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0007c	ff d2		 call	 edx
  0007e	85 c0		 test	 eax, eax
  00080	0f 84 b6 01 00
	00		 je	 $LN1@unpack_fix

; 353  : 	{
; 354  : 		inst3d = (object_3d_instance *) get_local_entity_ptr_value (en, PTR_TYPE_INSTANCE_3D_OBJECT);

  00086	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0008a	74 0a		 je	 SHORT $LN24@unpack_fix
  0008c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	89 4d 9c	 mov	 DWORD PTR tv89[ebp], ecx
  00094	eb 21		 jmp	 SHORT $LN25@unpack_fix
$LN24@unpack_fix:
  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0009c	83 c2 13	 add	 edx, 19			; 00000013H
  0009f	52		 push	 edx
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN25@unpack_fix:
  000b7	b9 01 00 00 00	 mov	 ecx, 1
  000bc	85 c9		 test	 ecx, ecx
  000be	74 09		 je	 SHORT $LN26@unpack_fix
  000c0	c7 45 98 02 00
	00 00		 mov	 DWORD PTR tv129[ebp], 2
  000c7	eb 21		 jmp	 SHORT $LN27@unpack_fix
$LN26@unpack_fix:
  000c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  000cf	83 c2 13	 add	 edx, 19			; 00000013H
  000d2	52		 push	 edx
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e3	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN27@unpack_fix:
  000ea	6a 02		 push	 2
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000ef	51		 push	 ecx
  000f0	6b 55 9c 50	 imul	 edx, DWORD PTR tv89[ebp], 80
  000f4	8b 45 98	 mov	 eax, DWORD PTR tv129[ebp]
  000f7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  000fe	ff d1		 call	 ecx
  00100	89 45 fc	 mov	 DWORD PTR _inst3d$[ebp], eax

; 355  : 
; 356  : 		if (inst3d)

  00103	83 7d fc 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  00107	0f 84 2f 01 00
	00		 je	 $LN1@unpack_fix

; 357  : 		{
; 358  : 			#if DEBUG_MODULE
; 359  : 
; 360  : 			debug_log ("FIXWING : Unpacking smoke for %s ( %d )", aircraft_database [get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE)].full_name, en);
; 361  : 
; 362  : 			#endif
; 363  : 
; 364  : 			item = 0;

  0010d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _item$[ebp], 0
$LN2@unpack_fix:

; 365  : 
; 366  : 			while (TRUE)

  00114	b8 01 00 00 00	 mov	 eax, 1
  00119	85 c0		 test	 eax, eax
  0011b	0f 84 1b 01 00
	00		 je	 $LN1@unpack_fix

; 367  : 			{
; 368  : 				type = attached_meta_smoke_list_table [item].type;

  00121	6b 45 f8 0c	 imul	 eax, DWORD PTR _item$[ebp], 12
  00125	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?attached_meta_smoke_list_table@@3PAUATTACHED_META_SMOKE_LIST_TABLE@@A[eax]
  0012b	89 4d e4	 mov	 DWORD PTR _type$[ebp], ecx

; 369  : 
; 370  : 				if (type == -1)

  0012e	83 7d e4 ff	 cmp	 DWORD PTR _type$[ebp], -1
  00132	75 0a		 jne	 SHORT $LN11@unpack_fix

; 371  : 				{
; 372  : 					break;

  00134	e9 03 01 00 00	 jmp	 $LN1@unpack_fix

; 373  : 				}
; 374  : 				else

  00139	e9 f0 00 00 00	 jmp	 $LN12@unpack_fix
$LN11@unpack_fix:

; 375  : 				{
; 376  : 					point = 0;

  0013e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _point$[ebp], 0
$LN4@unpack_fix:

; 377  : 
; 378  : 					while (TRUE)

  00145	b8 01 00 00 00	 mov	 eax, 1
  0014a	85 c0		 test	 eax, eax
  0014c	0f 84 dc 00 00
	00		 je	 $LN12@unpack_fix

; 379  : 					{
; 380  : 						attachment_point = attached_meta_smoke_list_table [item].attachment_point [point];

  00152	6b 45 f8 0c	 imul	 eax, DWORD PTR _item$[ebp], 12
  00156	8b 4d ec	 mov	 ecx, DWORD PTR _point$[ebp]
  00159	8b 94 88 04 00
	00 00		 mov	 edx, DWORD PTR ?attached_meta_smoke_list_table@@3PAUATTACHED_META_SMOKE_LIST_TABLE@@A[eax+ecx*4+4]
  00160	89 55 e0	 mov	 DWORD PTR _attachment_point$[ebp], edx

; 381  : 
; 382  : 						if (attachment_point == -1)

  00163	83 7d e0 ff	 cmp	 DWORD PTR _attachment_point$[ebp], -1
  00167	75 0a		 jne	 SHORT $LN13@unpack_fix

; 383  : 						{
; 384  : 							break;

  00169	e9 c0 00 00 00	 jmp	 $LN12@unpack_fix

; 385  : 						}
; 386  : 						else

  0016e	e9 b6 00 00 00	 jmp	 $LN14@unpack_fix
$LN13@unpack_fix:

; 387  : 						{
; 388  : 							if (point >= MAX_META_SMOKE_LIST_ATTACHMENT_POINTS)

  00173	83 7d ec 02	 cmp	 DWORD PTR _point$[ebp], 2
  00177	7c 0d		 jl	 SHORT $LN15@unpack_fix

; 389  : 							{
; 390  : 								debug_fatal ("FIXWING: Unpack meta smoke lists - too many attachment points");

  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@JBNJBBCN@FIXWING?3?5Unpack?5meta?5smoke?5list@
  0017e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00183	83 c4 04	 add	 esp, 4
$LN15@unpack_fix:

; 391  : 							}
; 392  : 
; 393  : 							count = count_sub_object_type_depth (inst3d, attachment_point);

  00186	8b 45 e0	 mov	 eax, DWORD PTR _attachment_point$[ebp]
  00189	50		 push	 eax
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 ?count_sub_object_type_depth@@YGHPAUOBJECT_3D_INSTANCE@@H@Z ; count_sub_object_type_depth
  00193	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 394  : 
; 395  : 							if (count >0)

  00196	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  0019a	0f 8e 80 00 00
	00		 jle	 $LN16@unpack_fix

; 396  : 							{
; 397  : 								count *= count_entities_in_meta_smoke_list (type);						

  001a0	8b 45 e4	 mov	 eax, DWORD PTR _type$[ebp]
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?count_entities_in_meta_smoke_list@@YGHW4META_SMOKE_LIST_TYPES@@@Z ; count_entities_in_meta_smoke_list
  001a9	0f af 45 f0	 imul	 eax, DWORD PTR _count$[ebp]
  001ad	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 398  : 
; 399  : 								entity_index_list = (int *) malloc_fast_mem (sizeof (int) * count);

  001b0	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  001b3	c1 e0 02	 shl	 eax, 2
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  001bc	89 45 e8	 mov	 DWORD PTR _entity_index_list$[ebp], eax

; 400  : 
; 401  : 								for (loop = 0; loop < count; loop ++)

  001bf	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  001c6	eb 09		 jmp	 SHORT $LN8@unpack_fix
$LN6@unpack_fix:
  001c8	8b 45 f4	 mov	 eax, DWORD PTR _loop$[ebp]
  001cb	83 c0 01	 add	 eax, 1
  001ce	89 45 f4	 mov	 DWORD PTR _loop$[ebp], eax
$LN8@unpack_fix:
  001d1	8b 45 f4	 mov	 eax, DWORD PTR _loop$[ebp]
  001d4	3b 45 f0	 cmp	 eax, DWORD PTR _count$[ebp]
  001d7	7d 25		 jge	 SHORT $LN7@unpack_fix

; 402  : 								{
; 403  : 									if (mode == PACK_MODE_SERVER_SESSION)

  001d9	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  001dd	75 0f		 jne	 SHORT $LN17@unpack_fix

; 404  : 									{
; 405  : 										entity_index_list [loop] = ENTITY_INDEX_DONT_CARE;

  001df	8b 45 f4	 mov	 eax, DWORD PTR _loop$[ebp]
  001e2	8b 4d e8	 mov	 ecx, DWORD PTR _entity_index_list$[ebp]
  001e5	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [ecx+eax*4], -1

; 406  : 									}
; 407  : 									else

  001ec	eb 0e		 jmp	 SHORT $LN18@unpack_fix
$LN17@unpack_fix:

; 408  : 									{
; 409  : 										entity_index_list [loop] = unpack_entity_safe_index ();

  001ee	e8 00 00 00 00	 call	 ?unpack_entity_safe_index@@YGHXZ ; unpack_entity_safe_index
  001f3	8b 4d f4	 mov	 ecx, DWORD PTR _loop$[ebp]
  001f6	8b 55 e8	 mov	 edx, DWORD PTR _entity_index_list$[ebp]
  001f9	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$LN18@unpack_fix:

; 410  : 									}
; 411  : 	
; 412  : 									#if DEBUG_MODULE
; 413  : 
; 414  : 									debug_log ("FIXWING : Index %d = %d", loop, entity_index_list [loop]);
; 415  : 
; 416  : 									#endif
; 417  : 								}

  001fc	eb ca		 jmp	 SHORT $LN6@unpack_fix
$LN7@unpack_fix:

; 418  : 
; 419  : 								register_attach_meta_smoke_list_to_object (en, type, attachment_point, entity_index_list, count);

  001fe	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  00201	50		 push	 eax
  00202	8b 4d e8	 mov	 ecx, DWORD PTR _entity_index_list$[ebp]
  00205	51		 push	 ecx
  00206	8b 55 e0	 mov	 edx, DWORD PTR _attachment_point$[ebp]
  00209	52		 push	 edx
  0020a	8b 45 e4	 mov	 eax, DWORD PTR _type$[ebp]
  0020d	50		 push	 eax
  0020e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00211	51		 push	 ecx
  00212	e8 00 00 00 00	 call	 ?register_attach_meta_smoke_list_to_object@@YGXPAUENTITY@@HHPAHH@Z ; register_attach_meta_smoke_list_to_object

; 420  : 
; 421  : 								free_mem (entity_index_list);

  00217	8b 45 e8	 mov	 eax, DWORD PTR _entity_index_list$[ebp]
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN16@unpack_fix:

; 422  : 							}
; 423  : 
; 424  : 							point ++;

  00220	8b 45 ec	 mov	 eax, DWORD PTR _point$[ebp]
  00223	83 c0 01	 add	 eax, 1
  00226	89 45 ec	 mov	 DWORD PTR _point$[ebp], eax
$LN14@unpack_fix:

; 425  : 						}
; 426  : 					}

  00229	e9 17 ff ff ff	 jmp	 $LN4@unpack_fix
$LN12@unpack_fix:

; 427  : 				}
; 428  : 
; 429  : 				item ++;

  0022e	8b 45 f8	 mov	 eax, DWORD PTR _item$[ebp]
  00231	83 c0 01	 add	 eax, 1
  00234	89 45 f8	 mov	 DWORD PTR _item$[ebp], eax

; 430  : 			}

  00237	e9 d8 fe ff ff	 jmp	 $LN2@unpack_fix
$LN1@unpack_fix:

; 431  : 
; 432  : 			//
; 433  : 			// activate smoke lists
; 434  : 			//
; 435  : 
; 436  : 			//
; 437  : 			// N.B. CAN'T ACTIVATE SMOKE AS THE SPECIAL EFFECT LIST IS NOT YET LINKED UP TO THE PARENT ENTITY
; 438  : 			//
; 439  : 		}
; 440  : 	}
; 441  : }

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b e5		 mov	 esp, ebp
  00241	5d		 pop	 ebp
  00242	c2 08 00	 ret	 8
?unpack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z ENDP ; unpack_fixed_wing_meta_smoke_lists
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fixwing.c
;	COMDAT ?pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv250 = -108						; size = 4
tv230 = -108						; size = 4
tv202 = -108						; size = 4
tv151 = -108						; size = 4
tv130 = -108						; size = 4
tv77 = -108						; size = 4
tv242 = -104						; size = 4
tv222 = -104						; size = 4
tv195 = -104						; size = 4
tv143 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_type$ = -36						; size = 4
_attachment_point$ = -32				; size = 4
_special_effect$ = -28					; size = 4
_packed_indices$ = -24					; size = 4
_point$ = -20						; size = 4
_count$ = -16						; size = 4
_loop$ = -12						; size = 4
_item$ = -8						; size = 4
_inst3d$ = -4						; size = 4
_en$ = 8						; size = 4
_mode$ = 12						; size = 4
?pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z PROC ; pack_fixed_wing_meta_smoke_lists, COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 201  : 	object_3d_instance
; 202  : 		*inst3d;
; 203  : 
; 204  : 	int
; 205  : 		item,
; 206  : 		loop,
; 207  : 		count,
; 208  : 		point,
; 209  : 		packed_indices;
; 210  : 
; 211  : 	entity
; 212  : 		*special_effect;
; 213  : 
; 214  : 	object_3d_sub_object_index_numbers
; 215  : 		attachment_point;
; 216  : 
; 217  : 	meta_smoke_list_types
; 218  : 		type;
; 219  : 
; 220  : 	if (mode == PACK_MODE_SERVER_SESSION)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	75 05		 jne	 SHORT $LN11@pack_fixed

; 221  : 	{
; 222  : 		//
; 223  : 		// no need to pack indices as the server can use "ENTITY_INDEX_DONT_CARE"s when unpacking
; 224  : 		//
; 225  : 
; 226  : 		return;

  0000f	e9 69 04 00 00	 jmp	 $LN1@pack_fixed
$LN11@pack_fixed:

; 227  : 	}
; 228  : 
; 229  : 	if (get_local_entity_int_value (en, INT_TYPE_ALIVE))

  00014	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00018	74 0a		 je	 SHORT $LN25@pack_fixed
  0001a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 1d		 jmp	 SHORT $LN26@pack_fixed
$LN25@pack_fixed:
  00024	68 e5 00 00 00	 push	 229			; 000000e5H
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003a	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN26@pack_fixed:
  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	85 c0		 test	 eax, eax
  00048	74 09		 je	 SHORT $LN27@pack_fixed
  0004a	c7 45 94 07 00
	00 00		 mov	 DWORD PTR tv77[ebp], 7
  00051	eb 1d		 jmp	 SHORT $LN28@pack_fixed
$LN27@pack_fixed:
  00053	68 e5 00 00 00	 push	 229			; 000000e5H
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00069	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN28@pack_fixed:
  00070	6a 07		 push	 7
  00072	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00075	52		 push	 edx
  00076	69 45 98 5c 04
	00 00		 imul	 eax, DWORD PTR tv70[ebp], 1116
  0007d	8b 4d 94	 mov	 ecx, DWORD PTR tv77[ebp]
  00080	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00087	ff d2		 call	 edx
  00089	85 c0		 test	 eax, eax
  0008b	0f 84 ec 03 00
	00		 je	 $LN1@pack_fixed

; 230  : 	{
; 231  : 		inst3d = (object_3d_instance *) get_local_entity_ptr_value (en, PTR_TYPE_INSTANCE_3D_OBJECT);

  00091	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00095	74 0a		 je	 SHORT $LN29@pack_fixed
  00097	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009f	eb 21		 jmp	 SHORT $LN30@pack_fixed
$LN29@pack_fixed:
  000a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  000a7	83 c2 1f	 add	 edx, 31			; 0000001fH
  000aa	52		 push	 edx
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000bb	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN30@pack_fixed:
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	85 c9		 test	 ecx, ecx
  000c9	74 09		 je	 SHORT $LN31@pack_fixed
  000cb	c7 45 94 02 00
	00 00		 mov	 DWORD PTR tv130[ebp], 2
  000d2	eb 21		 jmp	 SHORT $LN32@pack_fixed
$LN31@pack_fixed:
  000d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  000da	83 c2 1f	 add	 edx, 31			; 0000001fH
  000dd	52		 push	 edx
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ee	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN32@pack_fixed:
  000f5	6a 02		 push	 2
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000fa	51		 push	 ecx
  000fb	6b 55 98 50	 imul	 edx, DWORD PTR tv90[ebp], 80
  000ff	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00102	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  00109	ff d1		 call	 ecx
  0010b	89 45 fc	 mov	 DWORD PTR _inst3d$[ebp], eax

; 232  : 
; 233  : 		if (inst3d)

  0010e	83 7d fc 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  00112	0f 84 65 03 00
	00		 je	 $LN1@pack_fixed

; 234  : 		{
; 235  : 			#if DEBUG_MODULE
; 236  : 
; 237  : 			debug_log ("FIXWING : Packing smoke for %s ( %d )", aircraft_database [get_local_entity_int_value (en, INT_TYPE_ENTITY_SUB_TYPE)].full_name, en);
; 238  : 
; 239  : 			#endif
; 240  : 
; 241  : 			item = 0;

  00118	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _item$[ebp], 0

; 242  : 
; 243  : 			special_effect = get_local_entity_first_child (en, LIST_TYPE_SPECIAL_EFFECT);

  0011f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00123	74 0a		 je	 SHORT $LN33@pack_fixed
  00125	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00128	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012a	89 4d 98	 mov	 DWORD PTR tv143[ebp], ecx
  0012d	eb 21		 jmp	 SHORT $LN34@pack_fixed
$LN33@pack_fixed:
  0012f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  00135	83 c2 2b	 add	 edx, 43			; 0000002bH
  00138	52		 push	 edx
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00149	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN34@pack_fixed:
  00150	b9 01 00 00 00	 mov	 ecx, 1
  00155	85 c9		 test	 ecx, ecx
  00157	74 09		 je	 SHORT $LN35@pack_fixed
  00159	c7 45 94 24 00
	00 00		 mov	 DWORD PTR tv151[ebp], 36 ; 00000024H
  00160	eb 21		 jmp	 SHORT $LN36@pack_fixed
$LN35@pack_fixed:
  00162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  00168	83 c2 2b	 add	 edx, 43			; 0000002bH
  0016b	52		 push	 edx
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017c	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN36@pack_fixed:
  00183	6a 24		 push	 36			; 00000024H
  00185	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00188	51		 push	 ecx
  00189	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv143[ebp], 180
  00190	8b 45 94	 mov	 eax, DWORD PTR tv151[ebp]
  00193	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0019a	ff d1		 call	 ecx
  0019c	89 45 e4	 mov	 DWORD PTR _special_effect$[ebp], eax
$LN2@pack_fixed:

; 244  : 
; 245  : 			while (TRUE)

  0019f	b8 01 00 00 00	 mov	 eax, 1
  001a4	85 c0		 test	 eax, eax
  001a6	0f 84 d1 02 00
	00		 je	 $LN1@pack_fixed

; 246  : 			{
; 247  : 				type = attached_meta_smoke_list_table [item].type;

  001ac	6b 45 f8 0c	 imul	 eax, DWORD PTR _item$[ebp], 12
  001b0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?attached_meta_smoke_list_table@@3PAUATTACHED_META_SMOKE_LIST_TABLE@@A[eax]
  001b6	89 4d dc	 mov	 DWORD PTR _type$[ebp], ecx

; 248  : 
; 249  : 				if (type == -1)

  001b9	83 7d dc ff	 cmp	 DWORD PTR _type$[ebp], -1
  001bd	75 0a		 jne	 SHORT $LN14@pack_fixed

; 250  : 				{
; 251  : 					break;

  001bf	e9 b9 02 00 00	 jmp	 $LN1@pack_fixed

; 252  : 				}
; 253  : 				else

  001c4	e9 a6 02 00 00	 jmp	 $LN15@pack_fixed
$LN14@pack_fixed:

; 254  : 				{
; 255  : 					count = 0;

  001c9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 256  : 
; 257  : 					point = 0;

  001d0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _point$[ebp], 0
$LN4@pack_fixed:

; 258  : 
; 259  : 					while (TRUE)

  001d7	b8 01 00 00 00	 mov	 eax, 1
  001dc	85 c0		 test	 eax, eax
  001de	74 4c		 je	 SHORT $LN5@pack_fixed

; 260  : 					{
; 261  : 						attachment_point = attached_meta_smoke_list_table [item].attachment_point [point];

  001e0	6b 45 f8 0c	 imul	 eax, DWORD PTR _item$[ebp], 12
  001e4	8b 4d ec	 mov	 ecx, DWORD PTR _point$[ebp]
  001e7	8b 94 88 04 00
	00 00		 mov	 edx, DWORD PTR ?attached_meta_smoke_list_table@@3PAUATTACHED_META_SMOKE_LIST_TABLE@@A[eax+ecx*4+4]
  001ee	89 55 e0	 mov	 DWORD PTR _attachment_point$[ebp], edx

; 262  : 
; 263  : 						if (attachment_point == -1)

  001f1	83 7d e0 ff	 cmp	 DWORD PTR _attachment_point$[ebp], -1
  001f5	75 04		 jne	 SHORT $LN16@pack_fixed

; 264  : 						{
; 265  : 							break;

  001f7	eb 33		 jmp	 SHORT $LN5@pack_fixed

; 266  : 						}
; 267  : 						else

  001f9	eb 2f		 jmp	 SHORT $LN17@pack_fixed
$LN16@pack_fixed:

; 268  : 						{
; 269  : 							if (point >= MAX_META_SMOKE_LIST_ATTACHMENT_POINTS)

  001fb	83 7d ec 02	 cmp	 DWORD PTR _point$[ebp], 2
  001ff	7c 0d		 jl	 SHORT $LN18@pack_fixed

; 270  : 							{
; 271  : 								debug_fatal ("FIXWING: Pack meta smoke lists - too many attachment points");

  00201	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@KDGOFLGB@FIXWING?3?5Pack?5meta?5smoke?5lists?5@
  00206	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0020b	83 c4 04	 add	 esp, 4
$LN18@pack_fixed:

; 272  : 							}
; 273  : 
; 274  : 							count += count_sub_object_type_depth (inst3d, attachment_point);

  0020e	8b 45 e0	 mov	 eax, DWORD PTR _attachment_point$[ebp]
  00211	50		 push	 eax
  00212	8b 4d fc	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  00215	51		 push	 ecx
  00216	e8 00 00 00 00	 call	 ?count_sub_object_type_depth@@YGHPAUOBJECT_3D_INSTANCE@@H@Z ; count_sub_object_type_depth
  0021b	03 45 f0	 add	 eax, DWORD PTR _count$[ebp]
  0021e	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 275  : 
; 276  : 							point ++;

  00221	8b 45 ec	 mov	 eax, DWORD PTR _point$[ebp]
  00224	83 c0 01	 add	 eax, 1
  00227	89 45 ec	 mov	 DWORD PTR _point$[ebp], eax
$LN17@pack_fixed:

; 277  : 						}
; 278  : 					}

  0022a	eb ab		 jmp	 SHORT $LN4@pack_fixed
$LN5@pack_fixed:

; 279  : 
; 280  : 					count *= count_entities_in_meta_smoke_list (type);

  0022c	8b 45 dc	 mov	 eax, DWORD PTR _type$[ebp]
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 ?count_entities_in_meta_smoke_list@@YGHW4META_SMOKE_LIST_TYPES@@@Z ; count_entities_in_meta_smoke_list
  00235	0f af 45 f0	 imul	 eax, DWORD PTR _count$[ebp]
  00239	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 281  : 
; 282  : 					if (count > 0)

  0023c	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  00240	0f 8e 29 02 00
	00		 jle	 $LN15@pack_fixed

; 283  : 					{
; 284  : 						packed_indices = 0;

  00246	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _packed_indices$[ebp], 0

; 285  : 
; 286  : 						for (loop = 0 ; loop < count ; loop ++)

  0024d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00254	eb 09		 jmp	 SHORT $LN8@pack_fixed
$LN6@pack_fixed:
  00256	8b 45 f4	 mov	 eax, DWORD PTR _loop$[ebp]
  00259	83 c0 01	 add	 eax, 1
  0025c	89 45 f4	 mov	 DWORD PTR _loop$[ebp], eax
$LN8@pack_fixed:
  0025f	8b 45 f4	 mov	 eax, DWORD PTR _loop$[ebp]
  00262	3b 45 f0	 cmp	 eax, DWORD PTR _count$[ebp]
  00265	0f 8d e4 01 00
	00		 jge	 $LN7@pack_fixed
$LN9@pack_fixed:

; 287  : 						{
; 288  : 							while (TRUE)

  0026b	b8 01 00 00 00	 mov	 eax, 1
  00270	85 c0		 test	 eax, eax
  00272	0f 84 d2 01 00
	00		 je	 $LN10@pack_fixed

; 289  : 							{
; 290  : 								ASSERT (special_effect);

  00278	83 7d e4 00	 cmp	 DWORD PTR _special_effect$[ebp], 0
  0027c	75 18		 jne	 SHORT $LN20@pack_fixed
  0027e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  00283	83 c0 5a	 add	 eax, 90			; 0000005aH
  00286	50		 push	 eax
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KGPELPEG@special_effect@
  00291	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN20@pack_fixed:

; 291  : 			
; 292  : 								if (special_effect->type == ENTITY_TYPE_SMOKE_LIST)

  00296	8b 45 e4	 mov	 eax, DWORD PTR _special_effect$[ebp]
  00299	83 38 1f	 cmp	 DWORD PTR [eax], 31	; 0000001fH
  0029c	0f 85 23 01 00
	00		 jne	 $LN21@pack_fixed

; 293  : 								{
; 294  : 									if (effect_database [get_local_entity_int_value (special_effect, INT_TYPE_ENTITY_SUB_TYPE)].constructed_locally)

  002a2	83 7d e4 00	 cmp	 DWORD PTR _special_effect$[ebp], 0
  002a6	74 0a		 je	 SHORT $LN37@pack_fixed
  002a8	8b 45 e4	 mov	 eax, DWORD PTR _special_effect$[ebp]
  002ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ad	89 4d 98	 mov	 DWORD PTR tv195[ebp], ecx
  002b0	eb 1d		 jmp	 SHORT $LN38@pack_fixed
$LN37@pack_fixed:
  002b2	68 26 01 00 00	 push	 294			; 00000126H
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002c2	52		 push	 edx
  002c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv195[ebp], 0
$LN38@pack_fixed:
  002cf	b8 01 00 00 00	 mov	 eax, 1
  002d4	85 c0		 test	 eax, eax
  002d6	74 09		 je	 SHORT $LN39@pack_fixed
  002d8	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv202[ebp], 52 ; 00000034H
  002df	eb 1d		 jmp	 SHORT $LN40@pack_fixed
$LN39@pack_fixed:
  002e1	68 26 01 00 00	 push	 294			; 00000126H
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  002eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002f1	51		 push	 ecx
  002f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f7	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv202[ebp], 0
$LN40@pack_fixed:
  002fe	6a 34		 push	 52			; 00000034H
  00300	8b 55 e4	 mov	 edx, DWORD PTR _special_effect$[ebp]
  00303	52		 push	 edx
  00304	69 45 98 5c 04
	00 00		 imul	 eax, DWORD PTR tv195[ebp], 1116
  0030b	8b 4d 94	 mov	 ecx, DWORD PTR tv202[ebp]
  0030e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00315	ff d2		 call	 edx
  00317	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?effect_database@@3QBUEFFECT_DATA@@B[eax*4], 0
  0031f	0f 84 a0 00 00
	00		 je	 $LN21@pack_fixed

; 295  : 									{
; 296  : 										pack_entity_safe_index (get_local_entity_index (special_effect));

  00325	8b 45 e4	 mov	 eax, DWORD PTR _special_effect$[ebp]
  00328	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  0032e	c1 f8 04	 sar	 eax, 4
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?pack_entity_safe_index@@YGXH@Z ; pack_entity_safe_index

; 297  : 	
; 298  : 										#if DEBUG_MODULE
; 299  : 	
; 300  : 										debug_log ("FIXWING : Index %d = %d", packed_indices, get_local_entity_index (special_effect));
; 301  : 	
; 302  : 										#endif
; 303  : 	
; 304  : 										packed_indices ++;

  00337	8b 45 e8	 mov	 eax, DWORD PTR _packed_indices$[ebp]
  0033a	83 c0 01	 add	 eax, 1
  0033d	89 45 e8	 mov	 DWORD PTR _packed_indices$[ebp], eax

; 305  : 
; 306  : 										special_effect = get_local_entity_child_succ (special_effect, LIST_TYPE_SPECIAL_EFFECT);

  00340	83 7d e4 00	 cmp	 DWORD PTR _special_effect$[ebp], 0
  00344	74 0a		 je	 SHORT $LN41@pack_fixed
  00346	8b 45 e4	 mov	 eax, DWORD PTR _special_effect$[ebp]
  00349	8b 08		 mov	 ecx, DWORD PTR [eax]
  0034b	89 4d 98	 mov	 DWORD PTR tv222[ebp], ecx
  0034e	eb 21		 jmp	 SHORT $LN42@pack_fixed
$LN41@pack_fixed:
  00350	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  00356	83 c2 6a	 add	 edx, 106		; 0000006aH
  00359	52		 push	 edx
  0035a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0036a	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], 0
$LN42@pack_fixed:
  00371	b9 01 00 00 00	 mov	 ecx, 1
  00376	85 c9		 test	 ecx, ecx
  00378	74 09		 je	 SHORT $LN43@pack_fixed
  0037a	c7 45 94 24 00
	00 00		 mov	 DWORD PTR tv230[ebp], 36 ; 00000024H
  00381	eb 21		 jmp	 SHORT $LN44@pack_fixed
$LN43@pack_fixed:
  00383	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  00389	83 c2 6a	 add	 edx, 106		; 0000006aH
  0038c	52		 push	 edx
  0038d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0039d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv230[ebp], 0
$LN44@pack_fixed:
  003a4	6a 24		 push	 36			; 00000024H
  003a6	8b 4d e4	 mov	 ecx, DWORD PTR _special_effect$[ebp]
  003a9	51		 push	 ecx
  003aa	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv222[ebp], 180
  003b1	8b 45 94	 mov	 eax, DWORD PTR tv230[ebp]
  003b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  003bb	ff d1		 call	 ecx
  003bd	89 45 e4	 mov	 DWORD PTR _special_effect$[ebp], eax

; 307  : 
; 308  : 										break;

  003c0	e9 85 00 00 00	 jmp	 $LN10@pack_fixed
$LN21@pack_fixed:

; 309  : 									}
; 310  : 								}
; 311  : 	
; 312  : 								special_effect = get_local_entity_child_succ (special_effect, LIST_TYPE_SPECIAL_EFFECT);

  003c5	83 7d e4 00	 cmp	 DWORD PTR _special_effect$[ebp], 0
  003c9	74 0a		 je	 SHORT $LN45@pack_fixed
  003cb	8b 45 e4	 mov	 eax, DWORD PTR _special_effect$[ebp]
  003ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d0	89 4d 98	 mov	 DWORD PTR tv242[ebp], ecx
  003d3	eb 21		 jmp	 SHORT $LN46@pack_fixed
$LN45@pack_fixed:
  003d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  003db	83 c2 70	 add	 edx, 112		; 00000070H
  003de	52		 push	 edx
  003df	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003ef	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv242[ebp], 0
$LN46@pack_fixed:
  003f6	b9 01 00 00 00	 mov	 ecx, 1
  003fb	85 c9		 test	 ecx, ecx
  003fd	74 09		 je	 SHORT $LN47@pack_fixed
  003ff	c7 45 94 24 00
	00 00		 mov	 DWORD PTR tv250[ebp], 36 ; 00000024H
  00406	eb 21		 jmp	 SHORT $LN48@pack_fixed
$LN47@pack_fixed:
  00408	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0040e	83 c2 70	 add	 edx, 112		; 00000070H
  00411	52		 push	 edx
  00412	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00417	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0041c	50		 push	 eax
  0041d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00422	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv250[ebp], 0
$LN48@pack_fixed:
  00429	6a 24		 push	 36			; 00000024H
  0042b	8b 4d e4	 mov	 ecx, DWORD PTR _special_effect$[ebp]
  0042e	51		 push	 ecx
  0042f	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv242[ebp], 180
  00436	8b 45 94	 mov	 eax, DWORD PTR tv250[ebp]
  00439	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00440	ff d1		 call	 ecx
  00442	89 45 e4	 mov	 DWORD PTR _special_effect$[ebp], eax

; 313  : 							}

  00445	e9 21 fe ff ff	 jmp	 $LN9@pack_fixed
$LN10@pack_fixed:

; 314  : 						}

  0044a	e9 07 fe ff ff	 jmp	 $LN6@pack_fixed
$LN7@pack_fixed:

; 315  : 
; 316  : 						//
; 317  : 						// check to make sure that only vehicle wake smoke lists are being sent across ( and also the right amount of them )
; 318  : 						//
; 319  : 
; 320  : 						ASSERT (packed_indices == count);

  0044f	8b 45 e8	 mov	 eax, DWORD PTR _packed_indices$[ebp]
  00452	3b 45 f0	 cmp	 eax, DWORD PTR _count$[ebp]
  00455	74 18		 je	 SHORT $LN15@pack_fixed
  00457	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0045c	83 c0 78	 add	 eax, 120		; 00000078H
  0045f	50		 push	 eax
  00460	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@EOCFHFNF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00465	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MBKKNMHC@packed_indices?5?$DN?$DN?5count@
  0046a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@pack_fixed:

; 321  : 					}
; 322  : 				}
; 323  : 
; 324  : 				item ++;

  0046f	8b 45 f8	 mov	 eax, DWORD PTR _item$[ebp]
  00472	83 c0 01	 add	 eax, 1
  00475	89 45 f8	 mov	 DWORD PTR _item$[ebp], eax

; 325  : 			}

  00478	e9 22 fd ff ff	 jmp	 $LN2@pack_fixed
$LN1@pack_fixed:

; 326  : 		}
; 327  : 	}
; 328  : }

  0047d	5f		 pop	 edi
  0047e	5e		 pop	 esi
  0047f	5b		 pop	 ebx
  00480	8b e5		 mov	 esp, ebp
  00482	5d		 pop	 ebp
  00483	c2 08 00	 ret	 8
?pack_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@W4PACK_MODES@@@Z ENDP ; pack_fixed_wing_meta_smoke_lists
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fixwing.c
;	COMDAT ?attach_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
_type$ = -16						; size = 4
_attachment_point$ = -12				; size = 4
_point$ = -8						; size = 4
_item$ = -4						; size = 4
_en$ = 8						; size = 4
?attach_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@@Z PROC ; attach_fixed_wing_meta_smoke_lists, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 147  : 	int
; 148  : 		item,
; 149  : 		point;
; 150  : 
; 151  : 	object_3d_sub_object_index_numbers
; 152  : 		attachment_point;
; 153  : 
; 154  : 	meta_smoke_list_types
; 155  : 		type;
; 156  : 
; 157  : 	item = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _item$[ebp], 0
$LN2@attach_fix:

; 158  : 
; 159  : 	while (TRUE)

  00010	b8 01 00 00 00	 mov	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 7f		 je	 SHORT $LN1@attach_fix

; 160  : 	{
; 161  : 		type = attached_meta_smoke_list_table [item].type;

  00019	6b 45 fc 0c	 imul	 eax, DWORD PTR _item$[ebp], 12
  0001d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?attached_meta_smoke_list_table@@3PAUATTACHED_META_SMOKE_LIST_TABLE@@A[eax]
  00023	89 4d f0	 mov	 DWORD PTR _type$[ebp], ecx

; 162  : 
; 163  : 		if (type == -1)

  00026	83 7d f0 ff	 cmp	 DWORD PTR _type$[ebp], -1
  0002a	75 04		 jne	 SHORT $LN6@attach_fix

; 164  : 		{
; 165  : 			break;

  0002c	eb 6a		 jmp	 SHORT $LN1@attach_fix

; 166  : 		}
; 167  : 		else

  0002e	eb 5a		 jmp	 SHORT $LN7@attach_fix
$LN6@attach_fix:

; 168  : 		{
; 169  : 			point = 0;

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _point$[ebp], 0
$LN4@attach_fix:

; 170  : 
; 171  : 			while (TRUE)

  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	85 c0		 test	 eax, eax
  0003e	74 4a		 je	 SHORT $LN7@attach_fix

; 172  : 			{
; 173  : 				attachment_point = attached_meta_smoke_list_table [item].attachment_point [point];

  00040	6b 45 fc 0c	 imul	 eax, DWORD PTR _item$[ebp], 12
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _point$[ebp]
  00047	8b 94 88 04 00
	00 00		 mov	 edx, DWORD PTR ?attached_meta_smoke_list_table@@3PAUATTACHED_META_SMOKE_LIST_TABLE@@A[eax+ecx*4+4]
  0004e	89 55 f4	 mov	 DWORD PTR _attachment_point$[ebp], edx

; 174  : 
; 175  : 				if (attachment_point == -1)

  00051	83 7d f4 ff	 cmp	 DWORD PTR _attachment_point$[ebp], -1
  00055	75 02		 jne	 SHORT $LN8@attach_fix

; 176  : 				{
; 177  : 					break;

  00057	eb 31		 jmp	 SHORT $LN7@attach_fix
$LN8@attach_fix:

; 178  : 				}
; 179  : 
; 180  : 				if (point >= MAX_META_SMOKE_LIST_ATTACHMENT_POINTS)

  00059	83 7d f8 02	 cmp	 DWORD PTR _point$[ebp], 2
  0005d	7c 0d		 jl	 SHORT $LN9@attach_fix

; 181  : 				{
; 182  : 					debug_fatal ("FIXWING: Attach meta smoke lists - too many attachment points");

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@OICIPHLD@FIXWING?3?5Attach?5meta?5smoke?5list@
  00064	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00069	83 c4 04	 add	 esp, 4
$LN9@attach_fix:

; 183  : 				}
; 184  : 
; 185  : 				attach_local_meta_smoke_lists_to_object (en, type, attachment_point, NULL);

  0006c	6a 00		 push	 0
  0006e	8b 45 f4	 mov	 eax, DWORD PTR _attachment_point$[ebp]
  00071	50		 push	 eax
  00072	8b 4d f0	 mov	 ecx, DWORD PTR _type$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 ?attach_local_meta_smoke_lists_to_object@@YGHPAUENTITY@@W4META_SMOKE_LIST_TYPES@@HPAH@Z ; attach_local_meta_smoke_lists_to_object

; 186  : 
; 187  : 				point ++;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _point$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 f8	 mov	 DWORD PTR _point$[ebp], eax

; 188  : 			}

  00088	eb ad		 jmp	 SHORT $LN4@attach_fix
$LN7@attach_fix:

; 189  : 		}
; 190  : 
; 191  : 		item ++;

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _item$[ebp]
  0008d	83 c0 01	 add	 eax, 1
  00090	89 45 fc	 mov	 DWORD PTR _item$[ebp], eax

; 192  : 	}

  00093	e9 78 ff ff ff	 jmp	 $LN2@attach_fix
$LN1@attach_fix:

; 193  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
?attach_fixed_wing_meta_smoke_lists@@YGXPAUENTITY@@@Z ENDP ; attach_fixed_wing_meta_smoke_lists
_TEXT	ENDS
END
