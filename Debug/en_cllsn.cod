; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?draw_collision_boxes@@3HA			; draw_collision_boxes
PUBLIC	?collision_box_lifetime@@3MA			; collision_box_lifetime
_BSS	SEGMENT
?draw_collision_boxes@@3HA DD 01H DUP (?)		; draw_collision_boxes
_BSS	ENDS
_DATA	SEGMENT
?collision_box_lifetime@@3MA DD 040000000r	; 2	; collision_box_lifetime
_DATA	ENDS
PUBLIC	?get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z ; get_ground_impact_point
PUBLIC	?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z ; get_line_of_sight_collision_entity
PUBLIC	?get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z ; get_line_of_sight_collision_tree
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA ; `get_ground_impact_point'::`1'::__LINE__Var
PUBLIC	??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0N@EJKONMIL@above_ground@			; `string'
PUBLIC	??_C@_0N@EAJDPPBO@below_ground@			; `string'
PUBLIC	??_C@_0BE@CLCBMLIP@ground_impact_point@		; `string'
PUBLIC	??_C@_0CC@KGNBEJMF@point_above_ground?5?$CIabove_groun@ ; `string'
PUBLIC	??_C@_0CF@KFKHIMOI@point_inside_map_area?5?$CIabove_gr@ ; `string'
PUBLIC	??_C@_0CD@DOFOLHGO@?$CBpoint_above_ground?5?$CIbelow_grou@ ; `string'
PUBLIC	??_C@_0CF@CFMLNGAA@point_inside_map_area?5?$CIbelow_gr@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z@4JA ; `draw_min_max_box'::`1'::__LINE__Var
PUBLIC	??_C@_0N@LPIIOEGL@min_position@			; `string'
PUBLIC	??_C@_0N@PPMHJMBN@max_position@			; `string'
PUBLIC	?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA ; `get_3d_line_triangle_face_intersection'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@GALEKPNG@source_old_position@		; `string'
PUBLIC	??_C@_0BE@BHJPOOAI@source_new_position@		; `string'
PUBLIC	??_C@_02JCBCEJAP@p1@				; `string'
PUBLIC	??_C@_02LJDPBKMM@p2@				; `string'
PUBLIC	??_C@_02KACECLIN@p3@				; `string'
PUBLIC	??_C@_0BH@ELIBBDFL@source_intercept_point@	; `string'
PUBLIC	??_C@_0M@JKBFLAII@face_normal@			; `string'
PUBLIC	?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA ; `get_3d_line_quad_face_intersection'::`1'::__LINE__Var
PUBLIC	??_C@_02OPGFLNEK@p4@				; `string'
PUBLIC	?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA ; `accurate_stationary_bounding_box_collision_test'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0FJ@CMGMKEGN@?$CIindex_3d_object?5?$DO?5OBJECT_3D_IN@ ; `string'
PUBLIC	??_C@_0N@LOLJEHA@bounding_box@			; `string'
PUBLIC	??_C@_0DD@JAPGJNPL@get_local_entity_type?5?$CItarget?$CJ?5@ ; `string'
PUBLIC	??_C@_0BL@PGNAAFIC@Invalid?5target?5?$CItype?5?$DN?5?$CFs?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA ; `accurate_moving_bounding_box_collision_test'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@LJFEENAF@target_old_position@		; `string'
PUBLIC	??_C@_0BE@MOHPAMNL@target_new_position@		; `string'
PUBLIC	??_C@_0EE@FFGHDNIC@get_local_entity_int_value?5?$CItar@ ; `string'
PUBLIC	?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA ; `get_line_of_sight_collision_entity'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@BJJCPMFI@object_3d_index?5?$CB?$DN?5OBJECT_3D_IN@ ; `string'
PUBLIC	?__LINE__Var@?0??get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z@4JA ; `get_line_of_sight_collision_tree'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3fb0000000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4090000000000000
PUBLIC	__real@420c0000
PUBLIC	__real@42c80000
PUBLIC	__real@43160000
PUBLIC	__real@7f7fffff
PUBLIC	__real@c014000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU1@1@Z:PROC ; get_3d_line_triangle_intersection
EXTRN	?get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU1@1@Z:PROC ; get_3d_line_quad_intersection
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?get_3d_transformation_matrix_from_face_normal_and_heading@@YGXQAY02MPBUVEC3D@@M@Z:PROC ; get_3d_transformation_matrix_from_face_normal_and_heading
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_sqr_3d_range
EXTRN	?get_object_3d_collision_object_geometry_triangle@@YGHHPAUVEC3D@@H@Z:PROC ; get_object_3d_collision_object_geometry_triangle
EXTRN	?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z:PROC ; get_object_3d_bounding_box_without_lines
EXTRN	?get_object_3d_radius@@YGMH@Z:PROC		; get_object_3d_radius
EXTRN	?get_terrain_3d_sector@@YGXMMPAH0@Z:PROC	; get_terrain_3d_sector
EXTRN	?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z:PROC ; get_terrain_3d_point_sector_max_elevation
EXTRN	?get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z:PROC ; get_terrain_3d_tree_sector_data
EXTRN	?get_terrain_3d_tree_scale@@YGMPAUTERRAIN_3D_TREE_DATA@@@Z:PROC ; get_terrain_3d_tree_scale
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data_type
EXTRN	?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z:PROC ; get_3d_terrain_face_normal
EXTRN	?bound_position_to_map_area@@YGHPAUVEC3D@@@Z:PROC ; bound_position_to_map_area
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z:PROC ; create_debug_3d_line
EXTRN	?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z:PROC ; get_terrain_type_class
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?sys_col_blue@@3UREAL_COLOUR@@A:DWORD		; sys_col_blue
EXTRN	?sys_col_cyan@@3UREAL_COLOUR@@A:DWORD		; sys_col_cyan
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?sys_col_white@@3UREAL_COLOUR@@A:DWORD		; sys_col_white
EXTRN	?sys_col_amber@@3UREAL_COLOUR@@A:DWORD		; sys_col_amber
EXTRN	?terrain_3d_map_minimum_height@@3MA:DWORD	; terrain_3d_map_minimum_height
EXTRN	?terrain_3d_map_scaled_height_difference@@3MA:DWORD ; terrain_3d_map_scaled_height_difference
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?entity_type_database@@3PAUENTITY_TYPE_DATA@@A:BYTE ; entity_type_database
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_child_pred@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_pred
EXTRN	?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA:BYTE ; fn_get_local_entity_attitude_matrix
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entity_sector_map@@3PAPAUENTITY@@A:DWORD	; entity_sector_map
EXTRN	?null_sector_entity_map_pointer_message@@3PBDB:DWORD ; null_sector_entity_map_pointer_message
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	__fltused:DWORD
;	COMDAT __real@c014000000000000
CONST	SEGMENT
__real@c014000000000000 DQ 0c014000000000000r	; -5
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb0000000000000
CONST	SEGMENT
__real@3fb0000000000000 DQ 03fb0000000000000r	; 0.0625
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z@4JA DD 06e6H ; `get_line_of_sight_collision_tree'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@BJJCPMFI@object_3d_index?5?$CB?$DN?5OBJECT_3D_IN@
CONST	SEGMENT
??_C@_0DC@BJJCPMFI@object_3d_index?5?$CB?$DN?5OBJECT_3D_IN@ DB 'object_3d'
	DB	'_index != OBJECT_3D_INVALID_OBJECT_INDEX', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA DD 0476H ; `get_line_of_sight_collision_entity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EE@FFGHDNIC@get_local_entity_int_value?5?$CItar@
CONST	SEGMENT
??_C@_0EE@FFGHDNIC@get_local_entity_int_value?5?$CItar@ DB 'get_local_ent'
	DB	'ity_int_value (target, INT_TYPE_COLLISION_TEST_MOBILE)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MOHPAMNL@target_new_position@
CONST	SEGMENT
??_C@_0BE@MOHPAMNL@target_new_position@ DB 'target_new_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJFEENAF@target_old_position@
CONST	SEGMENT
??_C@_0BE@LJFEENAF@target_old_position@ DB 'target_old_position', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA DD 02a6H ; `accurate_moving_bounding_box_collision_test'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@PGNAAFIC@Invalid?5target?5?$CItype?5?$DN?5?$CFs?$CJ@
CONST	SEGMENT
??_C@_0BL@PGNAAFIC@Invalid?5target?5?$CItype?5?$DN?5?$CFs?$CJ@ DB 'Invali'
	DB	'd target (type = %s)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JAPGJNPL@get_local_entity_type?5?$CItarget?$CJ?5@
CONST	SEGMENT
??_C@_0DD@JAPGJNPL@get_local_entity_type?5?$CItarget?$CJ?5@ DB 'get_local'
	DB	'_entity_type (target) != ENTITY_TYPE_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LOLJEHA@bounding_box@
CONST	SEGMENT
??_C@_0N@LOLJEHA@bounding_box@ DB 'bounding_box', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@CMGMKEGN@?$CIindex_3d_object?5?$DO?5OBJECT_3D_IN@
CONST	SEGMENT
??_C@_0FJ@CMGMKEGN@?$CIindex_3d_object?5?$DO?5OBJECT_3D_IN@ DB '(index_3d'
	DB	'_object > OBJECT_3D_INVALID_OBJECT_INDEX) && (index_3d_object'
	DB	' < OBJECT_3D_LAST)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA DD 01aaH ; `accurate_stationary_bounding_box_collision_test'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02OPGFLNEK@p4@
CONST	SEGMENT
??_C@_02OPGFLNEK@p4@ DB 'p4', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA DD 0171H ; `get_3d_line_quad_face_intersection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@JKBFLAII@face_normal@
CONST	SEGMENT
??_C@_0M@JKBFLAII@face_normal@ DB 'face_normal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ELIBBDFL@source_intercept_point@
CONST	SEGMENT
??_C@_0BH@ELIBBDFL@source_intercept_point@ DB 'source_intercept_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KACECLIN@p3@
CONST	SEGMENT
??_C@_02KACECLIN@p3@ DB 'p3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LJDPBKMM@p2@
CONST	SEGMENT
??_C@_02LJDPBKMM@p2@ DB 'p2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JCBCEJAP@p1@
CONST	SEGMENT
??_C@_02JCBCEJAP@p1@ DB 'p1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHJPOOAI@source_new_position@
CONST	SEGMENT
??_C@_0BE@BHJPOOAI@source_new_position@ DB 'source_new_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GALEKPNG@source_old_position@
CONST	SEGMENT
??_C@_0BE@GALEKPNG@source_old_position@ DB 'source_old_position', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA DD 013dH ; `get_3d_line_triangle_face_intersection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@PPMHJMBN@max_position@
CONST	SEGMENT
??_C@_0N@PPMHJMBN@max_position@ DB 'max_position', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPIIOEGL@min_position@
CONST	SEGMENT
??_C@_0N@LPIIOEGL@min_position@ DB 'min_position', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z@4JA DD 0adH ; `draw_min_max_box'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CF@CFMLNGAA@point_inside_map_area?5?$CIbelow_gr@
CONST	SEGMENT
??_C@_0CF@CFMLNGAA@point_inside_map_area?5?$CIbelow_gr@ DB 'point_inside_'
	DB	'map_area (below_ground)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DOFOLHGO@?$CBpoint_above_ground?5?$CIbelow_grou@
CONST	SEGMENT
??_C@_0CD@DOFOLHGO@?$CBpoint_above_ground?5?$CIbelow_grou@ DB '!point_abo'
	DB	've_ground (below_ground)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KFKHIMOI@point_inside_map_area?5?$CIabove_gr@
CONST	SEGMENT
??_C@_0CF@KFKHIMOI@point_inside_map_area?5?$CIabove_gr@ DB 'point_inside_'
	DB	'map_area (above_ground)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KGNBEJMF@point_above_ground?5?$CIabove_groun@
CONST	SEGMENT
??_C@_0CC@KGNBEJMF@point_above_ground?5?$CIabove_groun@ DB 'point_above_g'
	DB	'round (above_ground)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLCBMLIP@ground_impact_point@
CONST	SEGMENT
??_C@_0BE@CLCBMLIP@ground_impact_point@ DB 'ground_impact_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EAJDPPBO@below_ground@
CONST	SEGMENT
??_C@_0N@EAJDPPBO@below_ground@ DB 'below_ground', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJKONMIL@above_ground@
CONST	SEGMENT
??_C@_0N@EJKONMIL@above_ground@ DB 'above_ground', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_c'
	DB	'llsn.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA DD 06cH ; `get_ground_impact_point'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z
_TEXT	SEGMENT
tv501 = -296						; size = 4
tv196 = -296						; size = 4
tv156 = -296						; size = 4
tv496 = -292						; size = 4
tv191 = -292						; size = 4
tv173 = -292						; size = 4
tv148 = -292						; size = 4
_attitude$ = -224					; size = 4
_target_mid_position$ = -220				; size = 12
_q$ = -208						; size = 96
_p$ = -112						; size = 96
_body_length$ = -16					; size = 4
_true_velocity$ = -12					; size = 4
_test_flags$ = -8					; size = 4
_depth$ = -4						; size = 4
_target$ = 8						; size = 4
_source_old_position$ = 12				; size = 4
_source_new_position$ = 16				; size = 4
_target_old_position$ = 20				; size = 4
_target_new_position$ = 24				; size = 4
_index_3d_object$ = 28					; size = 4
_bounding_box$ = 32					; size = 4
_source_intercept_point$ = 36				; size = 4
_face_normal$ = 40					; size = 4
?accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z PROC ; accurate_moving_bounding_box_collision_test, COMDAT

; 678  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 679  : 	int
; 680  : 		depth,
; 681  : 		test_flags;
; 682  : 
; 683  : 	float
; 684  : 		true_velocity,
; 685  : 		body_length;
; 686  : 
; 687  : 	vec3d
; 688  : 		p[8],
; 689  : 		q[8],
; 690  : 		target_mid_position;
; 691  : 
; 692  : 	matrix3x3
; 693  : 		*attitude;
; 694  : 
; 695  : 	ASSERT (target);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00010	75 18		 jne	 SHORT $LN5@accurate_m
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00017	83 c0 11	 add	 eax, 17			; 00000011H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@accurate_m:

; 696  : 
; 697  : 	ASSERT (source_old_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_old_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN6@accurate_m
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00035	83 c0 13	 add	 eax, 19			; 00000013H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GALEKPNG@source_old_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@accurate_m:

; 698  : 
; 699  : 	ASSERT (source_new_position);

  00048	83 7d 10 00	 cmp	 DWORD PTR _source_new_position$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN7@accurate_m
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00053	83 c0 15	 add	 eax, 21			; 00000015H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHJPOOAI@source_new_position@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@accurate_m:

; 700  : 
; 701  : 	ASSERT (target_old_position);

  00066	83 7d 14 00	 cmp	 DWORD PTR _target_old_position$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN8@accurate_m
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00071	83 c0 17	 add	 eax, 23			; 00000017H
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJFEENAF@target_old_position@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@accurate_m:

; 702  : 
; 703  : 	ASSERT (target_new_position);

  00084	83 7d 18 00	 cmp	 DWORD PTR _target_new_position$[ebp], 0
  00088	75 18		 jne	 SHORT $LN9@accurate_m
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  0008f	83 c0 19	 add	 eax, 25			; 00000019H
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MOHPAMNL@target_new_position@
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@accurate_m:

; 704  : 
; 705  : 	ASSERT ((index_3d_object > OBJECT_3D_INVALID_OBJECT_INDEX) && (index_3d_object < OBJECT_3D_LAST));

  000a2	83 7d 1c 00	 cmp	 DWORD PTR _index_3d_object$[ebp], 0
  000a6	7e 09		 jle	 SHORT $LN11@accurate_m
  000a8	81 7d 1c e4 0a
	00 00		 cmp	 DWORD PTR _index_3d_object$[ebp], 2788 ; 00000ae4H
  000af	7c 18		 jl	 SHORT $LN10@accurate_m
$LN11@accurate_m:
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  000b6	83 c0 1b	 add	 eax, 27			; 0000001bH
  000b9	50		 push	 eax
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@CMGMKEGN@?$CIindex_3d_object?5?$DO?5OBJECT_3D_IN@
  000c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@accurate_m:

; 706  : 
; 707  : 	ASSERT (bounding_box);

  000c9	83 7d 20 00	 cmp	 DWORD PTR _bounding_box$[ebp], 0
  000cd	75 18		 jne	 SHORT $LN12@accurate_m
  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  000d4	83 c0 1d	 add	 eax, 29			; 0000001dH
  000d7	50		 push	 eax
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LOLJEHA@bounding_box@
  000e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@accurate_m:

; 708  : 
; 709  : 	ASSERT (source_intercept_point);

  000e7	83 7d 24 00	 cmp	 DWORD PTR _source_intercept_point$[ebp], 0
  000eb	75 18		 jne	 SHORT $LN13@accurate_m
  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  000f2	83 c0 1f	 add	 eax, 31			; 0000001fH
  000f5	50		 push	 eax
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@ELIBBDFL@source_intercept_point@
  00100	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@accurate_m:

; 710  : 
; 711  : 	ASSERT (face_normal);

  00105	83 7d 28 00	 cmp	 DWORD PTR _face_normal$[ebp], 0
  00109	75 18		 jne	 SHORT $LN14@accurate_m
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00110	83 c0 21	 add	 eax, 33			; 00000021H
  00113	50		 push	 eax
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JKBFLAII@face_normal@
  0011e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@accurate_m:

; 712  : 
; 713  : 	ASSERT (get_local_entity_int_value (target, INT_TYPE_COLLISION_TEST_MOBILE));

  00123	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00127	74 0d		 je	 SHORT $LN50@accurate_m
  00129	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00134	eb 24		 jmp	 SHORT $LN51@accurate_m
$LN50@accurate_m:
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  0013c	83 c2 23	 add	 edx, 35			; 00000023H
  0013f	52		 push	 edx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00150	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN51@accurate_m:
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	85 c9		 test	 ecx, ecx
  00161	74 0c		 je	 SHORT $LN52@accurate_m
  00163	c7 85 d8 fe ff
	ff 1b 00 00 00	 mov	 DWORD PTR tv156[ebp], 27 ; 0000001bH
  0016d	eb 24		 jmp	 SHORT $LN53@accurate_m
$LN52@accurate_m:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00175	83 c2 23	 add	 edx, 35			; 00000023H
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN53@accurate_m:
  00193	6a 1b		 push	 27			; 0000001bH
  00195	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00198	51		 push	 ecx
  00199	69 95 dc fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv148[ebp], 1116
  001a3	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  001a9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001b0	ff d1		 call	 ecx
  001b2	85 c0		 test	 eax, eax
  001b4	75 18		 jne	 SHORT $LN15@accurate_m
  001b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  001bb	83 c0 23	 add	 eax, 35			; 00000023H
  001be	50		 push	 eax
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@FFGHDNIC@get_local_entity_int_value?5?$CItar@
  001c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@accurate_m:

; 714  : 
; 715  : 	attitude = get_local_entity_attitude_matrix_ptr (target);

  001ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001d2	74 0d		 je	 SHORT $LN54@accurate_m
  001d4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d9	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv173[ebp], ecx
  001df	eb 24		 jmp	 SHORT $LN55@accurate_m
$LN54@accurate_m:
  001e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  001e7	83 c2 25	 add	 edx, 37			; 00000025H
  001ea	52		 push	 edx
  001eb	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001fb	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv173[ebp], 0
$LN55@accurate_m:
  00205	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00208	51		 push	 ecx
  00209	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv173[ebp]
  0020f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  00216	ff d0		 call	 eax
  00218	89 85 20 ff ff
	ff		 mov	 DWORD PTR _attitude$[ebp], eax

; 716  : 
; 717  : 	//
; 718  : 	// determine which tests are required using target velocity and body length
; 719  : 	//
; 720  : 
; 721  : 	true_velocity = get_local_entity_vec3d_magnitude (target, VEC3D_TYPE_MOTION_VECTOR);

  0021e	6a 06		 push	 6
  00220	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  00229	d9 5d f4	 fstp	 DWORD PTR _true_velocity$[ebp]

; 722  : 
; 723  : 	body_length = bounding_box->zmax - bounding_box->zmin;

  0022c	8b 45 20	 mov	 eax, DWORD PTR _bounding_box$[ebp]
  0022f	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00232	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00237	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  0023c	f3 0f 11 45 f0	 movss	 DWORD PTR _body_length$[ebp], xmm0

; 724  : 
; 725  : 	if (true_velocity > body_length)

  00241	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _true_velocity$[ebp]
  00246	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _body_length$[ebp]
  0024a	76 09		 jbe	 SHORT $LN16@accurate_m

; 726  : 	{
; 727  : 		test_flags = TEST_OLD_POSITION + TEST_MID_POSITION + TEST_NEW_POSITION;

  0024c	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR _test_flags$[ebp], 7
  00253	eb 28		 jmp	 SHORT $LN19@accurate_m
$LN16@accurate_m:

; 728  : 	}
; 729  : 	else if (true_velocity > (body_length * 0.25))

  00255	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _true_velocity$[ebp]
  0025a	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _body_length$[ebp]
  0025f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00267	66 0f 2f c1	 comisd	 xmm0, xmm1
  0026b	76 09		 jbe	 SHORT $LN18@accurate_m

; 730  : 	{
; 731  : 		test_flags = TEST_OLD_POSITION + TEST_NEW_POSITION;

  0026d	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _test_flags$[ebp], 5

; 732  : 	}
; 733  : 	else

  00274	eb 07		 jmp	 SHORT $LN19@accurate_m
$LN18@accurate_m:

; 734  : 	{
; 735  : 		test_flags = TEST_MID_POSITION;

  00276	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _test_flags$[ebp], 2
$LN19@accurate_m:

; 736  : 	}
; 737  : 
; 738  : 	depth = 0;

  0027d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _depth$[ebp], 0

; 739  : 
; 740  : 	if (get_object_3d_collision_object_geometry_triangle (index_3d_object, p, depth++))

  00284	8b 45 fc	 mov	 eax, DWORD PTR _depth$[ebp]
  00287	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv191[ebp], eax
  0028d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv191[ebp]
  00293	51		 push	 ecx
  00294	8d 55 90	 lea	 edx, DWORD PTR _p$[ebp]
  00297	52		 push	 edx
  00298	8b 45 1c	 mov	 eax, DWORD PTR _index_3d_object$[ebp]
  0029b	50		 push	 eax
  0029c	e8 00 00 00 00	 call	 ?get_object_3d_collision_object_geometry_triangle@@YGHHPAUVEC3D@@H@Z ; get_object_3d_collision_object_geometry_triangle
  002a1	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv196[ebp], eax
  002a7	8b 4d fc	 mov	 ecx, DWORD PTR _depth$[ebp]
  002aa	83 c1 01	 add	 ecx, 1
  002ad	89 4d fc	 mov	 DWORD PTR _depth$[ebp], ecx
  002b0	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR tv196[ebp], 0
  002b7	0f 84 43 06 00
	00		 je	 $LN20@accurate_m
$LN4@accurate_m:

; 741  : 	{
; 742  : 		////////////////////////////////////////
; 743  : 		//
; 744  : 		// COLLISION TEST WITH GEOMETRY TRIANGLES
; 745  : 		//
; 746  : 		////////////////////////////////////////
; 747  : 
; 748  : 		do
; 749  : 		{
; 750  : 			multiply_matrix3x3_vec3d (&p[0], *attitude, &p[0]);

  002bd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002c2	6b c8 00	 imul	 ecx, eax, 0
  002c5	8d 54 0d 90	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  002c9	52		 push	 edx
  002ca	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _attitude$[ebp]
  002d0	50		 push	 eax
  002d1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002d6	6b d1 00	 imul	 edx, ecx, 0
  002d9	8d 44 15 90	 lea	 eax, DWORD PTR _p$[ebp+edx]
  002dd	50		 push	 eax
  002de	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 751  : 			multiply_matrix3x3_vec3d (&p[1], *attitude, &p[1]);

  002e3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002e8	c1 e0 00	 shl	 eax, 0
  002eb	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  002ef	51		 push	 ecx
  002f0	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _attitude$[ebp]
  002f6	52		 push	 edx
  002f7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002fc	c1 e0 00	 shl	 eax, 0
  002ff	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00303	51		 push	 ecx
  00304	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 752  : 			multiply_matrix3x3_vec3d (&p[2], *attitude, &p[2]);

  00309	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0030e	d1 e0		 shl	 eax, 1
  00310	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00314	51		 push	 ecx
  00315	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _attitude$[ebp]
  0031b	52		 push	 edx
  0031c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00321	d1 e0		 shl	 eax, 1
  00323	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00327	51		 push	 ecx
  00328	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 753  : 
; 754  : 			//
; 755  : 			// collision test triangle at old position
; 756  : 			//
; 757  : 
; 758  : 			if (test_flags & TEST_OLD_POSITION)

  0032d	8b 45 f8	 mov	 eax, DWORD PTR _test_flags$[ebp]
  00330	83 e0 01	 and	 eax, 1
  00333	0f 84 a8 01 00
	00		 je	 $LN23@accurate_m

; 759  : 			{
; 760  : 				q[0].x = p[0].x + target_old_position->x;

  00339	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0033e	6b c8 00	 imul	 ecx, eax, 0
  00341	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00344	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  0034a	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  0034e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00353	6b c8 00	 imul	 ecx, eax, 0
  00356	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 761  : 				q[0].y = p[0].y + target_old_position->y;

  0035f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00364	6b c8 00	 imul	 ecx, eax, 0
  00367	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  0036a	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00370	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00375	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0037a	6b c8 00	 imul	 ecx, eax, 0
  0037d	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 762  : 				q[0].z = p[0].z + target_old_position->z;

  00386	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0038b	6b c8 00	 imul	 ecx, eax, 0
  0038e	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00391	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00397	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  0039c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003a1	6b c8 00	 imul	 ecx, eax, 0
  003a4	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 763  : 
; 764  : 				q[1].x = p[1].x + target_old_position->x;

  003ad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003b2	c1 e0 00	 shl	 eax, 0
  003b5	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  003b8	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  003be	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  003c2	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003c7	c1 e2 00	 shl	 edx, 0
  003ca	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 765  : 				q[1].y = p[1].y + target_old_position->y;

  003d3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003d8	c1 e0 00	 shl	 eax, 0
  003db	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  003de	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  003e4	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  003e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003ee	c1 e2 00	 shl	 edx, 0
  003f1	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 766  : 				q[1].z = p[1].z + target_old_position->z;

  003fa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003ff	c1 e0 00	 shl	 eax, 0
  00402	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00405	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  0040b	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00410	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00415	c1 e2 00	 shl	 edx, 0
  00418	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 767  : 
; 768  : 				q[2].x = p[2].x + target_old_position->x;

  00421	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00426	d1 e0		 shl	 eax, 1
  00428	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  0042b	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00431	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00435	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0043a	d1 e2		 shl	 edx, 1
  0043c	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 769  : 				q[2].y = p[2].y + target_old_position->y;

  00445	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0044a	d1 e0		 shl	 eax, 1
  0044c	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  0044f	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00455	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0045a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0045f	d1 e2		 shl	 edx, 1
  00461	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 770  : 				q[2].z = p[2].z + target_old_position->z;

  0046a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0046f	d1 e0		 shl	 eax, 1
  00471	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00474	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  0047a	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0047f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00484	d1 e2		 shl	 edx, 1
  00486	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 771  : 
; 772  : 				if (get_3d_line_triangle_face_intersection (source_old_position, source_new_position, &q[0], &q[1], &q[2], source_intercept_point, face_normal))

  0048f	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00492	50		 push	 eax
  00493	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00496	51		 push	 ecx
  00497	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0049c	d1 e2		 shl	 edx, 1
  0049e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  004a5	50		 push	 eax
  004a6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004ab	c1 e1 00	 shl	 ecx, 0
  004ae	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  004b5	52		 push	 edx
  004b6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004bb	6b c8 00	 imul	 ecx, eax, 0
  004be	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  004c5	52		 push	 edx
  004c6	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  004c9	50		 push	 eax
  004ca	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  004cd	51		 push	 ecx
  004ce	e8 00 00 00 00	 call	 ?get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z ; get_3d_line_triangle_face_intersection
  004d3	85 c0		 test	 eax, eax
  004d5	74 0a		 je	 SHORT $LN23@accurate_m

; 773  : 				{
; 774  : 					return (TRUE);

  004d7	b8 01 00 00 00	 mov	 eax, 1
  004dc	e9 4f 19 00 00	 jmp	 $LN1@accurate_m
$LN23@accurate_m:

; 775  : 				}
; 776  : 			}
; 777  : 
; 778  : 			//
; 779  : 			// collision test triangle at new position
; 780  : 			//
; 781  : 
; 782  : 			if (test_flags & TEST_NEW_POSITION)

  004e1	8b 45 f8	 mov	 eax, DWORD PTR _test_flags$[ebp]
  004e4	83 e0 04	 and	 eax, 4
  004e7	0f 84 a8 01 00
	00		 je	 $LN25@accurate_m

; 783  : 			{
; 784  : 				q[0].x = p[0].x + target_new_position->x;

  004ed	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004f2	6b c8 00	 imul	 ecx, eax, 0
  004f5	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  004f8	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  004fe	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00502	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00507	6b c8 00	 imul	 ecx, eax, 0
  0050a	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 785  : 				q[0].y = p[0].y + target_new_position->y;

  00513	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00518	6b c8 00	 imul	 ecx, eax, 0
  0051b	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  0051e	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00524	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00529	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0052e	6b c8 00	 imul	 ecx, eax, 0
  00531	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 786  : 				q[0].z = p[0].z + target_new_position->z;

  0053a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0053f	6b c8 00	 imul	 ecx, eax, 0
  00542	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  00545	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  0054b	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00550	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00555	6b c8 00	 imul	 ecx, eax, 0
  00558	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 787  : 
; 788  : 				q[1].x = p[1].x + target_new_position->x;

  00561	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00566	c1 e0 00	 shl	 eax, 0
  00569	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  0056c	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00572	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00576	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0057b	c1 e2 00	 shl	 edx, 0
  0057e	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 789  : 				q[1].y = p[1].y + target_new_position->y;

  00587	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0058c	c1 e0 00	 shl	 eax, 0
  0058f	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  00592	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00598	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0059d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005a2	c1 e2 00	 shl	 edx, 0
  005a5	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 790  : 				q[1].z = p[1].z + target_new_position->z;

  005ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005b3	c1 e0 00	 shl	 eax, 0
  005b6	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  005b9	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  005bf	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  005c4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005c9	c1 e2 00	 shl	 edx, 0
  005cc	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 791  : 
; 792  : 				q[2].x = p[2].x + target_new_position->x;

  005d5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005da	d1 e0		 shl	 eax, 1
  005dc	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  005df	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  005e5	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  005e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005ee	d1 e2		 shl	 edx, 1
  005f0	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 793  : 				q[2].y = p[2].y + target_new_position->y;

  005f9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005fe	d1 e0		 shl	 eax, 1
  00600	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  00603	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00609	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0060e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00613	d1 e2		 shl	 edx, 1
  00615	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 794  : 				q[2].z = p[2].z + target_new_position->z;

  0061e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00623	d1 e0		 shl	 eax, 1
  00625	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  00628	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  0062e	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00633	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00638	d1 e2		 shl	 edx, 1
  0063a	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 795  : 
; 796  : 				if (get_3d_line_triangle_face_intersection (source_old_position, source_new_position, &q[0], &q[1], &q[2], source_intercept_point, face_normal))

  00643	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00646	50		 push	 eax
  00647	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  0064a	51		 push	 ecx
  0064b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00650	d1 e2		 shl	 edx, 1
  00652	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  00659	50		 push	 eax
  0065a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0065f	c1 e1 00	 shl	 ecx, 0
  00662	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  00669	52		 push	 edx
  0066a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0066f	6b c8 00	 imul	 ecx, eax, 0
  00672	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  00679	52		 push	 edx
  0067a	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  0067d	50		 push	 eax
  0067e	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00681	51		 push	 ecx
  00682	e8 00 00 00 00	 call	 ?get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z ; get_3d_line_triangle_face_intersection
  00687	85 c0		 test	 eax, eax
  00689	74 0a		 je	 SHORT $LN25@accurate_m

; 797  : 				{
; 798  : 					return (TRUE);

  0068b	b8 01 00 00 00	 mov	 eax, 1
  00690	e9 9b 17 00 00	 jmp	 $LN1@accurate_m
$LN25@accurate_m:

; 799  : 				}
; 800  : 			}
; 801  : 
; 802  : 			//
; 803  : 			// collision test triangle at mid position
; 804  : 			//
; 805  : 
; 806  : 			if (test_flags & TEST_MID_POSITION)

  00695	8b 45 f8	 mov	 eax, DWORD PTR _test_flags$[ebp]
  00698	83 e0 02	 and	 eax, 2
  0069b	0f 84 21 02 00
	00		 je	 $LN27@accurate_m

; 807  : 			{
; 808  : 				target_mid_position.x = (target_old_position->x + target_new_position->x) * 0.5;

  006a1	8b 45 14	 mov	 eax, DWORD PTR _target_old_position$[ebp]
  006a4	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  006a7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006ab	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  006af	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006b3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  006bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006bf	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _target_mid_position$[ebp], xmm0

; 809  : 				target_mid_position.y = (target_old_position->y + target_new_position->y) * 0.5;

  006c7	8b 45 14	 mov	 eax, DWORD PTR _target_old_position$[ebp]
  006ca	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  006cd	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006d2	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  006d7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  006db	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  006e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006e7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _target_mid_position$[ebp+4], xmm0

; 810  : 				target_mid_position.z = (target_old_position->z + target_new_position->z) * 0.5;

  006ef	8b 45 14	 mov	 eax, DWORD PTR _target_old_position$[ebp]
  006f2	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  006f5	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  006fa	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  006ff	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00703	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0070b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0070f	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _target_mid_position$[ebp+8], xmm0

; 811  : 
; 812  : 				q[0].x = p[0].x + target_mid_position.x;

  00717	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0071c	6b c8 00	 imul	 ecx, eax, 0
  0071f	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00725	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  0072d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00732	6b c2 00	 imul	 eax, edx, 0
  00735	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax], xmm0

; 813  : 				q[0].y = p[0].y + target_mid_position.y;

  0073e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00743	6b c8 00	 imul	 ecx, eax, 0
  00746	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  0074c	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  00754	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00759	6b c2 00	 imul	 eax, edx, 0
  0075c	f3 0f 11 84 05
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+4], xmm0

; 814  : 				q[0].z = p[0].z + target_mid_position.z;

  00765	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0076a	6b c8 00	 imul	 ecx, eax, 0
  0076d	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00773	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  0077b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00780	6b c2 00	 imul	 eax, edx, 0
  00783	f3 0f 11 84 05
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+8], xmm0

; 815  : 
; 816  : 				q[1].x = p[1].x + target_mid_position.x;

  0078c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00791	c1 e0 00	 shl	 eax, 0
  00794	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  0079a	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  007a2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007a7	c1 e1 00	 shl	 ecx, 0
  007aa	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 817  : 				q[1].y = p[1].y + target_mid_position.y;

  007b3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007b8	c1 e0 00	 shl	 eax, 0
  007bb	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  007c1	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  007c9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007ce	c1 e1 00	 shl	 ecx, 0
  007d1	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 818  : 				q[1].z = p[1].z + target_mid_position.z;

  007da	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007df	c1 e0 00	 shl	 eax, 0
  007e2	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  007e8	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  007f0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007f5	c1 e1 00	 shl	 ecx, 0
  007f8	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 819  : 
; 820  : 				q[2].x = p[2].x + target_mid_position.x;

  00801	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00806	d1 e0		 shl	 eax, 1
  00808	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  0080e	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  00816	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0081b	d1 e1		 shl	 ecx, 1
  0081d	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 821  : 				q[2].y = p[2].y + target_mid_position.y;

  00826	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0082b	d1 e0		 shl	 eax, 1
  0082d	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00833	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  0083b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00840	d1 e1		 shl	 ecx, 1
  00842	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 822  : 				q[2].z = p[2].z + target_mid_position.z;

  0084b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00850	d1 e0		 shl	 eax, 1
  00852	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00858	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  00860	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00865	d1 e1		 shl	 ecx, 1
  00867	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 823  : 
; 824  : 				if (get_3d_line_triangle_face_intersection (source_old_position, source_new_position, &q[0], &q[1], &q[2], source_intercept_point, face_normal))

  00870	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00873	50		 push	 eax
  00874	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00877	51		 push	 ecx
  00878	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0087d	d1 e2		 shl	 edx, 1
  0087f	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  00886	50		 push	 eax
  00887	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0088c	c1 e1 00	 shl	 ecx, 0
  0088f	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  00896	52		 push	 edx
  00897	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0089c	6b c8 00	 imul	 ecx, eax, 0
  0089f	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  008a6	52		 push	 edx
  008a7	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  008aa	50		 push	 eax
  008ab	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  008ae	51		 push	 ecx
  008af	e8 00 00 00 00	 call	 ?get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z ; get_3d_line_triangle_face_intersection
  008b4	85 c0		 test	 eax, eax
  008b6	74 0a		 je	 SHORT $LN27@accurate_m

; 825  : 				{
; 826  : 					return (TRUE);

  008b8	b8 01 00 00 00	 mov	 eax, 1
  008bd	e9 6e 15 00 00	 jmp	 $LN1@accurate_m
$LN27@accurate_m:

; 827  : 				}
; 828  : 			}
; 829  : 		}
; 830  : 		while (get_object_3d_collision_object_geometry_triangle (index_3d_object, p, depth++));

  008c2	8b 45 fc	 mov	 eax, DWORD PTR _depth$[ebp]
  008c5	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv496[ebp], eax
  008cb	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv496[ebp]
  008d1	51		 push	 ecx
  008d2	8d 55 90	 lea	 edx, DWORD PTR _p$[ebp]
  008d5	52		 push	 edx
  008d6	8b 45 1c	 mov	 eax, DWORD PTR _index_3d_object$[ebp]
  008d9	50		 push	 eax
  008da	e8 00 00 00 00	 call	 ?get_object_3d_collision_object_geometry_triangle@@YGHHPAUVEC3D@@H@Z ; get_object_3d_collision_object_geometry_triangle
  008df	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv501[ebp], eax
  008e5	8b 4d fc	 mov	 ecx, DWORD PTR _depth$[ebp]
  008e8	83 c1 01	 add	 ecx, 1
  008eb	89 4d fc	 mov	 DWORD PTR _depth$[ebp], ecx
  008ee	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR tv501[ebp], 0
  008f5	0f 85 c2 f9 ff
	ff		 jne	 $LN4@accurate_m

; 831  : 	}
; 832  : 	else

  008fb	e9 2e 15 00 00	 jmp	 $LN48@accurate_m
$LN20@accurate_m:

; 833  : 	{
; 834  : 		////////////////////////////////////////
; 835  : 		//
; 836  : 		// COLLISION TEST WITH BOUNDING BOX
; 837  : 		//
; 838  : 		////////////////////////////////////////
; 839  : 
; 840  : 		//
; 841  : 		// rotate bounding box
; 842  : 		//
; 843  : 
; 844  : 		p[0].x = bounding_box->xmin;

  00900	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00905	6b c8 00	 imul	 ecx, eax, 0
  00908	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  0090b	8b 02		 mov	 eax, DWORD PTR [edx]
  0090d	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 845  : 		p[0].y = bounding_box->ymin;

  00911	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00916	6b c8 00	 imul	 ecx, eax, 0
  00919	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  0091c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0091f	89 44 0d 94	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 846  : 		p[0].z = bounding_box->zmin;

  00923	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00928	6b c8 00	 imul	 ecx, eax, 0
  0092b	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  0092e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00931	89 44 0d 98	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 847  : 
; 848  : 		multiply_matrix3x3_vec3d (&p[0], *attitude, &p[0]);

  00935	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0093a	6b c8 00	 imul	 ecx, eax, 0
  0093d	8d 54 0d 90	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00941	52		 push	 edx
  00942	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _attitude$[ebp]
  00948	50		 push	 eax
  00949	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0094e	6b d1 00	 imul	 edx, ecx, 0
  00951	8d 44 15 90	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00955	50		 push	 eax
  00956	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 849  : 
; 850  : 		p[1].x = bounding_box->xmin;

  0095b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00960	c1 e0 00	 shl	 eax, 0
  00963	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00966	8b 11		 mov	 edx, DWORD PTR [ecx]
  00968	89 54 05 90	 mov	 DWORD PTR _p$[ebp+eax], edx

; 851  : 		p[1].y = bounding_box->ymax;

  0096c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00971	c1 e0 00	 shl	 eax, 0
  00974	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00977	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0097a	89 54 05 94	 mov	 DWORD PTR _p$[ebp+eax+4], edx

; 852  : 		p[1].z = bounding_box->zmin;

  0097e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00983	c1 e0 00	 shl	 eax, 0
  00986	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00989	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0098c	89 54 05 98	 mov	 DWORD PTR _p$[ebp+eax+8], edx

; 853  : 
; 854  : 		multiply_matrix3x3_vec3d (&p[1], *attitude, &p[1]);

  00990	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00995	c1 e0 00	 shl	 eax, 0
  00998	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  0099c	51		 push	 ecx
  0099d	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _attitude$[ebp]
  009a3	52		 push	 edx
  009a4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009a9	c1 e0 00	 shl	 eax, 0
  009ac	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  009b0	51		 push	 ecx
  009b1	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 855  : 
; 856  : 		p[2].x = bounding_box->xmax;

  009b6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009bb	d1 e0		 shl	 eax, 1
  009bd	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  009c0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  009c3	89 54 05 90	 mov	 DWORD PTR _p$[ebp+eax], edx

; 857  : 		p[2].y = bounding_box->ymax;

  009c7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009cc	d1 e0		 shl	 eax, 1
  009ce	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  009d1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  009d4	89 54 05 94	 mov	 DWORD PTR _p$[ebp+eax+4], edx

; 858  : 		p[2].z = bounding_box->zmin;

  009d8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009dd	d1 e0		 shl	 eax, 1
  009df	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  009e2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  009e5	89 54 05 98	 mov	 DWORD PTR _p$[ebp+eax+8], edx

; 859  : 
; 860  : 		multiply_matrix3x3_vec3d (&p[2], *attitude, &p[2]);

  009e9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009ee	d1 e0		 shl	 eax, 1
  009f0	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  009f4	51		 push	 ecx
  009f5	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _attitude$[ebp]
  009fb	52		 push	 edx
  009fc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a01	d1 e0		 shl	 eax, 1
  00a03	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00a07	51		 push	 ecx
  00a08	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 861  : 
; 862  : 		p[3].x = bounding_box->xmax;

  00a0d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a12	6b c8 03	 imul	 ecx, eax, 3
  00a15	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00a18	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00a1b	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 863  : 		p[3].y = bounding_box->ymin;

  00a1f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a24	6b c8 03	 imul	 ecx, eax, 3
  00a27	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00a2a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00a2d	89 44 0d 94	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 864  : 		p[3].z = bounding_box->zmin;

  00a31	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a36	6b c8 03	 imul	 ecx, eax, 3
  00a39	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00a3c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00a3f	89 44 0d 98	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 865  : 
; 866  : 		multiply_matrix3x3_vec3d (&p[3], *attitude, &p[3]);

  00a43	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a48	6b c8 03	 imul	 ecx, eax, 3
  00a4b	8d 54 0d 90	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00a4f	52		 push	 edx
  00a50	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _attitude$[ebp]
  00a56	50		 push	 eax
  00a57	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00a5c	6b d1 03	 imul	 edx, ecx, 3
  00a5f	8d 44 15 90	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00a63	50		 push	 eax
  00a64	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 867  : 
; 868  : 		p[4].x = bounding_box->xmin;

  00a69	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a6e	c1 e0 02	 shl	 eax, 2
  00a71	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00a74	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a76	89 54 05 90	 mov	 DWORD PTR _p$[ebp+eax], edx

; 869  : 		p[4].y = bounding_box->ymin;

  00a7a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a7f	c1 e0 02	 shl	 eax, 2
  00a82	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00a85	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00a88	89 54 05 94	 mov	 DWORD PTR _p$[ebp+eax+4], edx

; 870  : 		p[4].z = bounding_box->zmax;

  00a8c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a91	c1 e0 02	 shl	 eax, 2
  00a94	8b 4d 20	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00a97	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00a9a	89 54 05 98	 mov	 DWORD PTR _p$[ebp+eax+8], edx

; 871  : 
; 872  : 		multiply_matrix3x3_vec3d (&p[4], *attitude, &p[4]);

  00a9e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aa3	c1 e0 02	 shl	 eax, 2
  00aa6	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00aaa	51		 push	 ecx
  00aab	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _attitude$[ebp]
  00ab1	52		 push	 edx
  00ab2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ab7	c1 e0 02	 shl	 eax, 2
  00aba	8d 4c 05 90	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00abe	51		 push	 ecx
  00abf	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 873  : 
; 874  : 		p[5].x = bounding_box->xmin;

  00ac4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ac9	6b c8 05	 imul	 ecx, eax, 5
  00acc	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00acf	8b 02		 mov	 eax, DWORD PTR [edx]
  00ad1	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 875  : 		p[5].y = bounding_box->ymax;

  00ad5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ada	6b c8 05	 imul	 ecx, eax, 5
  00add	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00ae0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00ae3	89 44 0d 94	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 876  : 		p[5].z = bounding_box->zmax;

  00ae7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aec	6b c8 05	 imul	 ecx, eax, 5
  00aef	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00af2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00af5	89 44 0d 98	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 877  : 
; 878  : 		multiply_matrix3x3_vec3d (&p[5], *attitude, &p[5]);

  00af9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00afe	6b c8 05	 imul	 ecx, eax, 5
  00b01	8d 54 0d 90	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00b05	52		 push	 edx
  00b06	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _attitude$[ebp]
  00b0c	50		 push	 eax
  00b0d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b12	6b d1 05	 imul	 edx, ecx, 5
  00b15	8d 44 15 90	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00b19	50		 push	 eax
  00b1a	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 879  : 
; 880  : 		p[6].x = bounding_box->xmax;

  00b1f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b24	6b c8 06	 imul	 ecx, eax, 6
  00b27	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00b2a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00b2d	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 881  : 		p[6].y = bounding_box->ymax;

  00b31	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b36	6b c8 06	 imul	 ecx, eax, 6
  00b39	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00b3c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00b3f	89 44 0d 94	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 882  : 		p[6].z = bounding_box->zmax;

  00b43	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b48	6b c8 06	 imul	 ecx, eax, 6
  00b4b	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00b4e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00b51	89 44 0d 98	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 883  : 
; 884  : 		multiply_matrix3x3_vec3d (&p[6], *attitude, &p[6]);

  00b55	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b5a	6b c8 06	 imul	 ecx, eax, 6
  00b5d	8d 54 0d 90	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00b61	52		 push	 edx
  00b62	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _attitude$[ebp]
  00b68	50		 push	 eax
  00b69	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b6e	6b d1 06	 imul	 edx, ecx, 6
  00b71	8d 44 15 90	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00b75	50		 push	 eax
  00b76	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 885  : 
; 886  : 		p[7].x = bounding_box->xmax;

  00b7b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b80	6b c8 07	 imul	 ecx, eax, 7
  00b83	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00b86	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00b89	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 887  : 		p[7].y = bounding_box->ymin;

  00b8d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b92	6b c8 07	 imul	 ecx, eax, 7
  00b95	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00b98	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00b9b	89 44 0d 94	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 888  : 		p[7].z = bounding_box->zmax;

  00b9f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ba4	6b c8 07	 imul	 ecx, eax, 7
  00ba7	8b 55 20	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00baa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00bad	89 44 0d 98	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 889  : 
; 890  : 		multiply_matrix3x3_vec3d (&p[7], *attitude, &p[7]);

  00bb1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00bb6	6b c8 07	 imul	 ecx, eax, 7
  00bb9	8d 54 0d 90	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00bbd	52		 push	 edx
  00bbe	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _attitude$[ebp]
  00bc4	50		 push	 eax
  00bc5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00bca	6b d1 07	 imul	 edx, ecx, 7
  00bcd	8d 44 15 90	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00bd1	50		 push	 eax
  00bd2	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 891  : 
; 892  : 		//
; 893  : 		// collision test bounding box at old position
; 894  : 		//
; 895  : 
; 896  : 		if (test_flags & TEST_OLD_POSITION)

  00bd7	8b 45 f8	 mov	 eax, DWORD PTR _test_flags$[ebp]
  00bda	83 e0 01	 and	 eax, 1
  00bdd	0f 84 e9 05 00
	00		 je	 $LN34@accurate_m

; 897  : 		{
; 898  : 			q[0].x = p[0].x + target_old_position->x;

  00be3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00be8	6b c8 00	 imul	 ecx, eax, 0
  00beb	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00bee	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00bf4	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00bf8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00bfd	6b c8 00	 imul	 ecx, eax, 0
  00c00	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 899  : 			q[0].y = p[0].y + target_old_position->y;

  00c09	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c0e	6b c8 00	 imul	 ecx, eax, 0
  00c11	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00c14	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00c1a	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00c1f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c24	6b c8 00	 imul	 ecx, eax, 0
  00c27	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 900  : 			q[0].z = p[0].z + target_old_position->z;

  00c30	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c35	6b c8 00	 imul	 ecx, eax, 0
  00c38	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00c3b	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00c41	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00c46	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c4b	6b c8 00	 imul	 ecx, eax, 0
  00c4e	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 901  : 
; 902  : 			q[1].x = p[1].x + target_old_position->x;

  00c57	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c5c	c1 e0 00	 shl	 eax, 0
  00c5f	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00c62	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00c68	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00c6c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00c71	c1 e2 00	 shl	 edx, 0
  00c74	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 903  : 			q[1].y = p[1].y + target_old_position->y;

  00c7d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c82	c1 e0 00	 shl	 eax, 0
  00c85	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00c88	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00c8e	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00c93	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00c98	c1 e2 00	 shl	 edx, 0
  00c9b	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 904  : 			q[1].z = p[1].z + target_old_position->z;

  00ca4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ca9	c1 e0 00	 shl	 eax, 0
  00cac	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00caf	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00cb5	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00cba	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00cbf	c1 e2 00	 shl	 edx, 0
  00cc2	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 905  : 
; 906  : 			q[2].x = p[2].x + target_old_position->x;

  00ccb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cd0	d1 e0		 shl	 eax, 1
  00cd2	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00cd5	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00cdb	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00cdf	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00ce4	d1 e2		 shl	 edx, 1
  00ce6	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 907  : 			q[2].y = p[2].y + target_old_position->y;

  00cef	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cf4	d1 e0		 shl	 eax, 1
  00cf6	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00cf9	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00cff	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00d04	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00d09	d1 e2		 shl	 edx, 1
  00d0b	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 908  : 			q[2].z = p[2].z + target_old_position->z;

  00d14	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d19	d1 e0		 shl	 eax, 1
  00d1b	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00d1e	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00d24	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00d29	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00d2e	d1 e2		 shl	 edx, 1
  00d30	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 909  : 
; 910  : 			q[3].x = p[3].x + target_old_position->x;

  00d39	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d3e	6b c8 03	 imul	 ecx, eax, 3
  00d41	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00d44	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00d4a	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00d4e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d53	6b c8 03	 imul	 ecx, eax, 3
  00d56	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 911  : 			q[3].y = p[3].y + target_old_position->y;

  00d5f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d64	6b c8 03	 imul	 ecx, eax, 3
  00d67	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00d6a	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00d70	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00d75	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d7a	6b c8 03	 imul	 ecx, eax, 3
  00d7d	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 912  : 			q[3].z = p[3].z + target_old_position->z;

  00d86	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d8b	6b c8 03	 imul	 ecx, eax, 3
  00d8e	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00d91	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00d97	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00d9c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00da1	6b c8 03	 imul	 ecx, eax, 3
  00da4	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 913  : 
; 914  : 			q[4].x = p[4].x + target_old_position->x;

  00dad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00db2	c1 e0 02	 shl	 eax, 2
  00db5	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00db8	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00dbe	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00dc2	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00dc7	c1 e2 02	 shl	 edx, 2
  00dca	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 915  : 			q[4].y = p[4].y + target_old_position->y;

  00dd3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00dd8	c1 e0 02	 shl	 eax, 2
  00ddb	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00dde	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00de4	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00de9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00dee	c1 e2 02	 shl	 edx, 2
  00df1	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 916  : 			q[4].z = p[4].z + target_old_position->z;

  00dfa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00dff	c1 e0 02	 shl	 eax, 2
  00e02	8b 4d 14	 mov	 ecx, DWORD PTR _target_old_position$[ebp]
  00e05	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00e0b	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00e10	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00e15	c1 e2 02	 shl	 edx, 2
  00e18	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 917  : 
; 918  : 			q[5].x = p[5].x + target_old_position->x;

  00e21	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e26	6b c8 05	 imul	 ecx, eax, 5
  00e29	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00e2c	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00e32	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00e36	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e3b	6b c8 05	 imul	 ecx, eax, 5
  00e3e	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 919  : 			q[5].y = p[5].y + target_old_position->y;

  00e47	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e4c	6b c8 05	 imul	 ecx, eax, 5
  00e4f	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00e52	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00e58	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00e5d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e62	6b c8 05	 imul	 ecx, eax, 5
  00e65	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 920  : 			q[5].z = p[5].z + target_old_position->z;

  00e6e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e73	6b c8 05	 imul	 ecx, eax, 5
  00e76	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00e79	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00e7f	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00e84	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e89	6b c8 05	 imul	 ecx, eax, 5
  00e8c	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 921  : 
; 922  : 			q[6].x = p[6].x + target_old_position->x;

  00e95	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e9a	6b c8 06	 imul	 ecx, eax, 6
  00e9d	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00ea0	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00ea6	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00eaa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00eaf	6b c8 06	 imul	 ecx, eax, 6
  00eb2	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 923  : 			q[6].y = p[6].y + target_old_position->y;

  00ebb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ec0	6b c8 06	 imul	 ecx, eax, 6
  00ec3	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00ec6	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00ecc	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00ed1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ed6	6b c8 06	 imul	 ecx, eax, 6
  00ed9	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 924  : 			q[6].z = p[6].z + target_old_position->z;

  00ee2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ee7	6b c8 06	 imul	 ecx, eax, 6
  00eea	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00eed	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00ef3	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00ef8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00efd	6b c8 06	 imul	 ecx, eax, 6
  00f00	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 925  : 
; 926  : 			q[7].x = p[7].x + target_old_position->x;

  00f09	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f0e	6b c8 07	 imul	 ecx, eax, 7
  00f11	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00f14	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00f1a	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00f1e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f23	6b c8 07	 imul	 ecx, eax, 7
  00f26	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 927  : 			q[7].y = p[7].y + target_old_position->y;

  00f2f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f34	6b c8 07	 imul	 ecx, eax, 7
  00f37	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00f3a	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00f40	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00f45	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f4a	6b c8 07	 imul	 ecx, eax, 7
  00f4d	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 928  : 			q[7].z = p[7].z + target_old_position->z;

  00f56	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f5b	6b c8 07	 imul	 ecx, eax, 7
  00f5e	8b 55 14	 mov	 edx, DWORD PTR _target_old_position$[ebp]
  00f61	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00f67	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00f6c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f71	6b c8 07	 imul	 ecx, eax, 7
  00f74	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 929  : 
; 930  : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[0], &q[1], &q[2], &q[3], source_intercept_point, face_normal))

  00f7d	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00f80	50		 push	 eax
  00f81	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00f84	51		 push	 ecx
  00f85	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00f8a	6b c2 03	 imul	 eax, edx, 3
  00f8d	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  00f94	51		 push	 ecx
  00f95	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00f9a	d1 e2		 shl	 edx, 1
  00f9c	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  00fa3	50		 push	 eax
  00fa4	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00fa9	c1 e1 00	 shl	 ecx, 0
  00fac	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  00fb3	52		 push	 edx
  00fb4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00fb9	6b c8 00	 imul	 ecx, eax, 0
  00fbc	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  00fc3	52		 push	 edx
  00fc4	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00fc7	50		 push	 eax
  00fc8	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00fcb	51		 push	 ecx
  00fcc	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  00fd1	85 c0		 test	 eax, eax
  00fd3	74 0a		 je	 SHORT $LN29@accurate_m

; 931  : 			{
; 932  : 				return (TRUE);

  00fd5	b8 01 00 00 00	 mov	 eax, 1
  00fda	e9 51 0e 00 00	 jmp	 $LN1@accurate_m
$LN29@accurate_m:

; 933  : 			}
; 934  : 
; 935  : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[3], &q[2], &q[6], &q[7], source_intercept_point, face_normal))

  00fdf	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00fe2	50		 push	 eax
  00fe3	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00fe6	51		 push	 ecx
  00fe7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00fec	6b c2 07	 imul	 eax, edx, 7
  00fef	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  00ff6	51		 push	 ecx
  00ff7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00ffc	6b c2 06	 imul	 eax, edx, 6
  00fff	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01006	51		 push	 ecx
  01007	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0100c	d1 e2		 shl	 edx, 1
  0100e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01015	50		 push	 eax
  01016	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0101b	6b d1 03	 imul	 edx, ecx, 3
  0101e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01025	50		 push	 eax
  01026	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  01029	51		 push	 ecx
  0102a	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  0102d	52		 push	 edx
  0102e	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01033	85 c0		 test	 eax, eax
  01035	74 0a		 je	 SHORT $LN30@accurate_m

; 936  : 			{
; 937  : 				return (TRUE);

  01037	b8 01 00 00 00	 mov	 eax, 1
  0103c	e9 ef 0d 00 00	 jmp	 $LN1@accurate_m
$LN30@accurate_m:

; 938  : 			}
; 939  : 
; 940  : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[7], &q[6], &q[5], &q[4], source_intercept_point, face_normal))

  01041	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01044	50		 push	 eax
  01045	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01048	51		 push	 ecx
  01049	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0104e	c1 e2 02	 shl	 edx, 2
  01051	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01058	50		 push	 eax
  01059	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0105e	6b d1 05	 imul	 edx, ecx, 5
  01061	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01068	50		 push	 eax
  01069	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0106e	6b d1 06	 imul	 edx, ecx, 6
  01071	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01078	50		 push	 eax
  01079	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0107e	6b d1 07	 imul	 edx, ecx, 7
  01081	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01088	50		 push	 eax
  01089	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  0108c	51		 push	 ecx
  0108d	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01090	52		 push	 edx
  01091	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01096	85 c0		 test	 eax, eax
  01098	74 0a		 je	 SHORT $LN31@accurate_m

; 941  : 			{
; 942  : 				return (TRUE);

  0109a	b8 01 00 00 00	 mov	 eax, 1
  0109f	e9 8c 0d 00 00	 jmp	 $LN1@accurate_m
$LN31@accurate_m:

; 943  : 			}
; 944  : 
; 945  : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[4], &q[5], &q[1], &q[0], source_intercept_point, face_normal))

  010a4	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  010a7	50		 push	 eax
  010a8	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  010ab	51		 push	 ecx
  010ac	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  010b1	6b c2 00	 imul	 eax, edx, 0
  010b4	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  010bb	51		 push	 ecx
  010bc	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  010c1	c1 e2 00	 shl	 edx, 0
  010c4	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  010cb	50		 push	 eax
  010cc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  010d1	6b d1 05	 imul	 edx, ecx, 5
  010d4	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  010db	50		 push	 eax
  010dc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  010e1	c1 e1 02	 shl	 ecx, 2
  010e4	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  010eb	52		 push	 edx
  010ec	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  010ef	50		 push	 eax
  010f0	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  010f3	51		 push	 ecx
  010f4	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  010f9	85 c0		 test	 eax, eax
  010fb	74 0a		 je	 SHORT $LN32@accurate_m

; 946  : 			{
; 947  : 				return (TRUE);

  010fd	b8 01 00 00 00	 mov	 eax, 1
  01102	e9 29 0d 00 00	 jmp	 $LN1@accurate_m
$LN32@accurate_m:

; 948  : 			}
; 949  : 
; 950  : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[1], &q[5], &q[6], &q[2], source_intercept_point, face_normal))

  01107	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  0110a	50		 push	 eax
  0110b	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  0110e	51		 push	 ecx
  0110f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01114	d1 e2		 shl	 edx, 1
  01116	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0111d	50		 push	 eax
  0111e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01123	6b d1 06	 imul	 edx, ecx, 6
  01126	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0112d	50		 push	 eax
  0112e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01133	6b d1 05	 imul	 edx, ecx, 5
  01136	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0113d	50		 push	 eax
  0113e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01143	c1 e1 00	 shl	 ecx, 0
  01146	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  0114d	52		 push	 edx
  0114e	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  01151	50		 push	 eax
  01152	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  01155	51		 push	 ecx
  01156	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  0115b	85 c0		 test	 eax, eax
  0115d	74 0a		 je	 SHORT $LN33@accurate_m

; 951  : 			{
; 952  : 				return (TRUE);

  0115f	b8 01 00 00 00	 mov	 eax, 1
  01164	e9 c7 0c 00 00	 jmp	 $LN1@accurate_m
$LN33@accurate_m:

; 953  : 			}
; 954  : 
; 955  : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[0], &q[4], &q[7], &q[3], source_intercept_point, face_normal))

  01169	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  0116c	50		 push	 eax
  0116d	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01170	51		 push	 ecx
  01171	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01176	6b c2 03	 imul	 eax, edx, 3
  01179	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01180	51		 push	 ecx
  01181	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01186	6b c2 07	 imul	 eax, edx, 7
  01189	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01190	51		 push	 ecx
  01191	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01196	c1 e2 02	 shl	 edx, 2
  01199	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  011a0	50		 push	 eax
  011a1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  011a6	6b d1 00	 imul	 edx, ecx, 0
  011a9	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  011b0	50		 push	 eax
  011b1	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  011b4	51		 push	 ecx
  011b5	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  011b8	52		 push	 edx
  011b9	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  011be	85 c0		 test	 eax, eax
  011c0	74 0a		 je	 SHORT $LN34@accurate_m

; 956  : 			{
; 957  : 				return (TRUE);

  011c2	b8 01 00 00 00	 mov	 eax, 1
  011c7	e9 64 0c 00 00	 jmp	 $LN1@accurate_m
$LN34@accurate_m:

; 958  : 			}
; 959  : 		}
; 960  : 
; 961  : 		//
; 962  : 		// collision test bounding box at new position
; 963  : 		//
; 964  : 
; 965  : 		if (test_flags & TEST_NEW_POSITION)

  011cc	8b 45 f8	 mov	 eax, DWORD PTR _test_flags$[ebp]
  011cf	83 e0 04	 and	 eax, 4
  011d2	0f 84 e9 05 00
	00		 je	 $LN41@accurate_m

; 966  : 		{
; 967  : 			q[0].x = p[0].x + target_new_position->x;

  011d8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  011dd	6b c8 00	 imul	 ecx, eax, 0
  011e0	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  011e3	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  011e9	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  011ed	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  011f2	6b c8 00	 imul	 ecx, eax, 0
  011f5	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 968  : 			q[0].y = p[0].y + target_new_position->y;

  011fe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01203	6b c8 00	 imul	 ecx, eax, 0
  01206	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01209	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  0120f	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  01214	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01219	6b c8 00	 imul	 ecx, eax, 0
  0121c	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 969  : 			q[0].z = p[0].z + target_new_position->z;

  01225	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0122a	6b c8 00	 imul	 ecx, eax, 0
  0122d	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01230	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  01236	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  0123b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01240	6b c8 00	 imul	 ecx, eax, 0
  01243	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 970  : 
; 971  : 			q[1].x = p[1].x + target_new_position->x;

  0124c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01251	c1 e0 00	 shl	 eax, 0
  01254	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  01257	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  0125d	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  01261	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01266	c1 e2 00	 shl	 edx, 0
  01269	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 972  : 			q[1].y = p[1].y + target_new_position->y;

  01272	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01277	c1 e0 00	 shl	 eax, 0
  0127a	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  0127d	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  01283	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  01288	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0128d	c1 e2 00	 shl	 edx, 0
  01290	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 973  : 			q[1].z = p[1].z + target_new_position->z;

  01299	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0129e	c1 e0 00	 shl	 eax, 0
  012a1	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  012a4	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  012aa	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  012af	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  012b4	c1 e2 00	 shl	 edx, 0
  012b7	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 974  : 
; 975  : 			q[2].x = p[2].x + target_new_position->x;

  012c0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  012c5	d1 e0		 shl	 eax, 1
  012c7	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  012ca	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  012d0	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  012d4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  012d9	d1 e2		 shl	 edx, 1
  012db	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 976  : 			q[2].y = p[2].y + target_new_position->y;

  012e4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  012e9	d1 e0		 shl	 eax, 1
  012eb	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  012ee	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  012f4	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  012f9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  012fe	d1 e2		 shl	 edx, 1
  01300	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 977  : 			q[2].z = p[2].z + target_new_position->z;

  01309	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0130e	d1 e0		 shl	 eax, 1
  01310	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  01313	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  01319	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0131e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01323	d1 e2		 shl	 edx, 1
  01325	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 978  : 
; 979  : 			q[3].x = p[3].x + target_new_position->x;

  0132e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01333	6b c8 03	 imul	 ecx, eax, 3
  01336	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01339	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  0133f	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  01343	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01348	6b c8 03	 imul	 ecx, eax, 3
  0134b	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 980  : 			q[3].y = p[3].y + target_new_position->y;

  01354	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01359	6b c8 03	 imul	 ecx, eax, 3
  0135c	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  0135f	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  01365	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  0136a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0136f	6b c8 03	 imul	 ecx, eax, 3
  01372	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 981  : 			q[3].z = p[3].z + target_new_position->z;

  0137b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01380	6b c8 03	 imul	 ecx, eax, 3
  01383	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01386	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  0138c	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  01391	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01396	6b c8 03	 imul	 ecx, eax, 3
  01399	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 982  : 
; 983  : 			q[4].x = p[4].x + target_new_position->x;

  013a2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  013a7	c1 e0 02	 shl	 eax, 2
  013aa	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  013ad	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  013b3	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  013b7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  013bc	c1 e2 02	 shl	 edx, 2
  013bf	f3 0f 11 84 15
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx], xmm0

; 984  : 			q[4].y = p[4].y + target_new_position->y;

  013c8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  013cd	c1 e0 02	 shl	 eax, 2
  013d0	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  013d3	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  013d9	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  013de	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  013e3	c1 e2 02	 shl	 edx, 2
  013e6	f3 0f 11 84 15
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+4], xmm0

; 985  : 			q[4].z = p[4].z + target_new_position->z;

  013ef	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  013f4	c1 e0 02	 shl	 eax, 2
  013f7	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  013fa	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  01400	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  01405	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0140a	c1 e2 02	 shl	 edx, 2
  0140d	f3 0f 11 84 15
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+edx+8], xmm0

; 986  : 
; 987  : 			q[5].x = p[5].x + target_new_position->x;

  01416	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0141b	6b c8 05	 imul	 ecx, eax, 5
  0141e	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01421	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  01427	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  0142b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01430	6b c8 05	 imul	 ecx, eax, 5
  01433	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 988  : 			q[5].y = p[5].y + target_new_position->y;

  0143c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01441	6b c8 05	 imul	 ecx, eax, 5
  01444	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01447	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  0144d	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  01452	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01457	6b c8 05	 imul	 ecx, eax, 5
  0145a	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 989  : 			q[5].z = p[5].z + target_new_position->z;

  01463	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01468	6b c8 05	 imul	 ecx, eax, 5
  0146b	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  0146e	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  01474	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  01479	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0147e	6b c8 05	 imul	 ecx, eax, 5
  01481	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 990  : 
; 991  : 			q[6].x = p[6].x + target_new_position->x;

  0148a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0148f	6b c8 06	 imul	 ecx, eax, 6
  01492	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01495	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  0149b	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  0149f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  014a4	6b c8 06	 imul	 ecx, eax, 6
  014a7	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 992  : 			q[6].y = p[6].y + target_new_position->y;

  014b0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  014b5	6b c8 06	 imul	 ecx, eax, 6
  014b8	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  014bb	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  014c1	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  014c6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  014cb	6b c8 06	 imul	 ecx, eax, 6
  014ce	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 993  : 			q[6].z = p[6].z + target_new_position->z;

  014d7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  014dc	6b c8 06	 imul	 ecx, eax, 6
  014df	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  014e2	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  014e8	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  014ed	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  014f2	6b c8 06	 imul	 ecx, eax, 6
  014f5	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 994  : 
; 995  : 			q[7].x = p[7].x + target_new_position->x;

  014fe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01503	6b c8 07	 imul	 ecx, eax, 7
  01506	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01509	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  0150f	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  01513	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01518	6b c8 07	 imul	 ecx, eax, 7
  0151b	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 996  : 			q[7].y = p[7].y + target_new_position->y;

  01524	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01529	6b c8 07	 imul	 ecx, eax, 7
  0152c	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  0152f	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  01535	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  0153a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0153f	6b c8 07	 imul	 ecx, eax, 7
  01542	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 997  : 			q[7].z = p[7].z + target_new_position->z;

  0154b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01550	6b c8 07	 imul	 ecx, eax, 7
  01553	8b 55 18	 mov	 edx, DWORD PTR _target_new_position$[ebp]
  01556	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  0155c	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  01561	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01566	6b c8 07	 imul	 ecx, eax, 7
  01569	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 998  : 
; 999  : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[0], &q[1], &q[2], &q[3], source_intercept_point, face_normal))

  01572	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01575	50		 push	 eax
  01576	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01579	51		 push	 ecx
  0157a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0157f	6b c2 03	 imul	 eax, edx, 3
  01582	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01589	51		 push	 ecx
  0158a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0158f	d1 e2		 shl	 edx, 1
  01591	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01598	50		 push	 eax
  01599	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0159e	c1 e1 00	 shl	 ecx, 0
  015a1	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  015a8	52		 push	 edx
  015a9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  015ae	6b c8 00	 imul	 ecx, eax, 0
  015b1	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  015b8	52		 push	 edx
  015b9	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  015bc	50		 push	 eax
  015bd	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  015c0	51		 push	 ecx
  015c1	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  015c6	85 c0		 test	 eax, eax
  015c8	74 0a		 je	 SHORT $LN36@accurate_m

; 1000 : 			{
; 1001 : 				return (TRUE);

  015ca	b8 01 00 00 00	 mov	 eax, 1
  015cf	e9 5c 08 00 00	 jmp	 $LN1@accurate_m
$LN36@accurate_m:

; 1002 : 			}
; 1003 : 
; 1004 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[3], &q[2], &q[6], &q[7], source_intercept_point, face_normal))

  015d4	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  015d7	50		 push	 eax
  015d8	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  015db	51		 push	 ecx
  015dc	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  015e1	6b c2 07	 imul	 eax, edx, 7
  015e4	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  015eb	51		 push	 ecx
  015ec	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  015f1	6b c2 06	 imul	 eax, edx, 6
  015f4	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  015fb	51		 push	 ecx
  015fc	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01601	d1 e2		 shl	 edx, 1
  01603	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0160a	50		 push	 eax
  0160b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01610	6b d1 03	 imul	 edx, ecx, 3
  01613	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0161a	50		 push	 eax
  0161b	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  0161e	51		 push	 ecx
  0161f	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01622	52		 push	 edx
  01623	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01628	85 c0		 test	 eax, eax
  0162a	74 0a		 je	 SHORT $LN37@accurate_m

; 1005 : 			{
; 1006 : 				return (TRUE);

  0162c	b8 01 00 00 00	 mov	 eax, 1
  01631	e9 fa 07 00 00	 jmp	 $LN1@accurate_m
$LN37@accurate_m:

; 1007 : 			}
; 1008 : 
; 1009 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[7], &q[6], &q[5], &q[4], source_intercept_point, face_normal))

  01636	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01639	50		 push	 eax
  0163a	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  0163d	51		 push	 ecx
  0163e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01643	c1 e2 02	 shl	 edx, 2
  01646	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0164d	50		 push	 eax
  0164e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01653	6b d1 05	 imul	 edx, ecx, 5
  01656	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0165d	50		 push	 eax
  0165e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01663	6b d1 06	 imul	 edx, ecx, 6
  01666	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0166d	50		 push	 eax
  0166e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01673	6b d1 07	 imul	 edx, ecx, 7
  01676	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  0167d	50		 push	 eax
  0167e	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  01681	51		 push	 ecx
  01682	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01685	52		 push	 edx
  01686	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  0168b	85 c0		 test	 eax, eax
  0168d	74 0a		 je	 SHORT $LN38@accurate_m

; 1010 : 			{
; 1011 : 				return (TRUE);

  0168f	b8 01 00 00 00	 mov	 eax, 1
  01694	e9 97 07 00 00	 jmp	 $LN1@accurate_m
$LN38@accurate_m:

; 1012 : 			}
; 1013 : 
; 1014 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[4], &q[5], &q[1], &q[0], source_intercept_point, face_normal))

  01699	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  0169c	50		 push	 eax
  0169d	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  016a0	51		 push	 ecx
  016a1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  016a6	6b c2 00	 imul	 eax, edx, 0
  016a9	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  016b0	51		 push	 ecx
  016b1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  016b6	c1 e2 00	 shl	 edx, 0
  016b9	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  016c0	50		 push	 eax
  016c1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  016c6	6b d1 05	 imul	 edx, ecx, 5
  016c9	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  016d0	50		 push	 eax
  016d1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  016d6	c1 e1 02	 shl	 ecx, 2
  016d9	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  016e0	52		 push	 edx
  016e1	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  016e4	50		 push	 eax
  016e5	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  016e8	51		 push	 ecx
  016e9	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  016ee	85 c0		 test	 eax, eax
  016f0	74 0a		 je	 SHORT $LN39@accurate_m

; 1015 : 			{
; 1016 : 				return (TRUE);

  016f2	b8 01 00 00 00	 mov	 eax, 1
  016f7	e9 34 07 00 00	 jmp	 $LN1@accurate_m
$LN39@accurate_m:

; 1017 : 			}
; 1018 : 
; 1019 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[1], &q[5], &q[6], &q[2], source_intercept_point, face_normal))

  016fc	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  016ff	50		 push	 eax
  01700	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01703	51		 push	 ecx
  01704	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01709	d1 e2		 shl	 edx, 1
  0170b	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01712	50		 push	 eax
  01713	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01718	6b d1 06	 imul	 edx, ecx, 6
  0171b	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01722	50		 push	 eax
  01723	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01728	6b d1 05	 imul	 edx, ecx, 5
  0172b	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01732	50		 push	 eax
  01733	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01738	c1 e1 00	 shl	 ecx, 0
  0173b	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  01742	52		 push	 edx
  01743	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  01746	50		 push	 eax
  01747	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  0174a	51		 push	 ecx
  0174b	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01750	85 c0		 test	 eax, eax
  01752	74 0a		 je	 SHORT $LN40@accurate_m

; 1020 : 			{
; 1021 : 				return (TRUE);

  01754	b8 01 00 00 00	 mov	 eax, 1
  01759	e9 d2 06 00 00	 jmp	 $LN1@accurate_m
$LN40@accurate_m:

; 1022 : 			}
; 1023 : 
; 1024 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[0], &q[4], &q[7], &q[3], source_intercept_point, face_normal))

  0175e	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01761	50		 push	 eax
  01762	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01765	51		 push	 ecx
  01766	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0176b	6b c2 03	 imul	 eax, edx, 3
  0176e	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01775	51		 push	 ecx
  01776	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0177b	6b c2 07	 imul	 eax, edx, 7
  0177e	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01785	51		 push	 ecx
  01786	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0178b	c1 e2 02	 shl	 edx, 2
  0178e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01795	50		 push	 eax
  01796	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0179b	6b d1 00	 imul	 edx, ecx, 0
  0179e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  017a5	50		 push	 eax
  017a6	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  017a9	51		 push	 ecx
  017aa	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  017ad	52		 push	 edx
  017ae	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  017b3	85 c0		 test	 eax, eax
  017b5	74 0a		 je	 SHORT $LN41@accurate_m

; 1025 : 			{
; 1026 : 				return (TRUE);

  017b7	b8 01 00 00 00	 mov	 eax, 1
  017bc	e9 6f 06 00 00	 jmp	 $LN1@accurate_m
$LN41@accurate_m:

; 1027 : 			}
; 1028 : 		}
; 1029 : 
; 1030 : 		//
; 1031 : 		// collision test bounding box at mid position
; 1032 : 		//
; 1033 : 
; 1034 : 		if (test_flags & TEST_MID_POSITION)

  017c1	8b 45 f8	 mov	 eax, DWORD PTR _test_flags$[ebp]
  017c4	83 e0 02	 and	 eax, 2
  017c7	0f 84 61 06 00
	00		 je	 $LN48@accurate_m

; 1035 : 		{
; 1036 : 			target_mid_position.x = (target_old_position->x + target_new_position->x) * 0.5;

  017cd	8b 45 14	 mov	 eax, DWORD PTR _target_old_position$[ebp]
  017d0	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  017d3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  017d7	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  017db	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  017df	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  017e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017eb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _target_mid_position$[ebp], xmm0

; 1037 : 			target_mid_position.y = (target_old_position->y + target_new_position->y) * 0.5;

  017f3	8b 45 14	 mov	 eax, DWORD PTR _target_old_position$[ebp]
  017f6	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  017f9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  017fe	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  01803	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01807	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0180f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01813	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _target_mid_position$[ebp+4], xmm0

; 1038 : 			target_mid_position.z = (target_old_position->z + target_new_position->z) * 0.5;

  0181b	8b 45 14	 mov	 eax, DWORD PTR _target_old_position$[ebp]
  0181e	8b 4d 18	 mov	 ecx, DWORD PTR _target_new_position$[ebp]
  01821	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01826	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0182b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0182f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01837	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0183b	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _target_mid_position$[ebp+8], xmm0

; 1039 : 
; 1040 : 			q[0].x = p[0].x + target_mid_position.x;

  01843	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01848	6b c8 00	 imul	 ecx, eax, 0
  0184b	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  01851	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  01859	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0185e	6b c2 00	 imul	 eax, edx, 0
  01861	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax], xmm0

; 1041 : 			q[0].y = p[0].y + target_mid_position.y;

  0186a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0186f	6b c8 00	 imul	 ecx, eax, 0
  01872	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  01878	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  01880	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01885	6b c2 00	 imul	 eax, edx, 0
  01888	f3 0f 11 84 05
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+4], xmm0

; 1042 : 			q[0].z = p[0].z + target_mid_position.z;

  01891	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01896	6b c8 00	 imul	 ecx, eax, 0
  01899	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  0189f	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  018a7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  018ac	6b c2 00	 imul	 eax, edx, 0
  018af	f3 0f 11 84 05
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+8], xmm0

; 1043 : 
; 1044 : 			q[1].x = p[1].x + target_mid_position.x;

  018b8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  018bd	c1 e0 00	 shl	 eax, 0
  018c0	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  018c6	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  018ce	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  018d3	c1 e1 00	 shl	 ecx, 0
  018d6	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 1045 : 			q[1].y = p[1].y + target_mid_position.y;

  018df	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  018e4	c1 e0 00	 shl	 eax, 0
  018e7	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  018ed	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  018f5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  018fa	c1 e1 00	 shl	 ecx, 0
  018fd	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 1046 : 			q[1].z = p[1].z + target_mid_position.z;

  01906	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0190b	c1 e0 00	 shl	 eax, 0
  0190e	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  01914	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  0191c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01921	c1 e1 00	 shl	 ecx, 0
  01924	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 1047 : 
; 1048 : 			q[2].x = p[2].x + target_mid_position.x;

  0192d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01932	d1 e0		 shl	 eax, 1
  01934	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  0193a	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  01942	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01947	d1 e1		 shl	 ecx, 1
  01949	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 1049 : 			q[2].y = p[2].y + target_mid_position.y;

  01952	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01957	d1 e0		 shl	 eax, 1
  01959	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  0195f	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  01967	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0196c	d1 e1		 shl	 ecx, 1
  0196e	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 1050 : 			q[2].z = p[2].z + target_mid_position.z;

  01977	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0197c	d1 e0		 shl	 eax, 1
  0197e	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  01984	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  0198c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01991	d1 e1		 shl	 ecx, 1
  01993	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 1051 : 
; 1052 : 			q[3].x = p[3].x + target_mid_position.x;

  0199c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  019a1	6b c8 03	 imul	 ecx, eax, 3
  019a4	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  019aa	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  019b2	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  019b7	6b c2 03	 imul	 eax, edx, 3
  019ba	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax], xmm0

; 1053 : 			q[3].y = p[3].y + target_mid_position.y;

  019c3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  019c8	6b c8 03	 imul	 ecx, eax, 3
  019cb	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  019d1	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  019d9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  019de	6b c2 03	 imul	 eax, edx, 3
  019e1	f3 0f 11 84 05
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+4], xmm0

; 1054 : 			q[3].z = p[3].z + target_mid_position.z;

  019ea	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  019ef	6b c8 03	 imul	 ecx, eax, 3
  019f2	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  019f8	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  01a00	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01a05	6b c2 03	 imul	 eax, edx, 3
  01a08	f3 0f 11 84 05
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+8], xmm0

; 1055 : 
; 1056 : 			q[4].x = p[4].x + target_mid_position.x;

  01a11	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01a16	c1 e0 02	 shl	 eax, 2
  01a19	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  01a1f	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  01a27	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01a2c	c1 e1 02	 shl	 ecx, 2
  01a2f	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx], xmm0

; 1057 : 			q[4].y = p[4].y + target_mid_position.y;

  01a38	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01a3d	c1 e0 02	 shl	 eax, 2
  01a40	f3 0f 10 44 05
	94		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  01a46	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  01a4e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01a53	c1 e1 02	 shl	 ecx, 2
  01a56	f3 0f 11 84 0d
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+4], xmm0

; 1058 : 			q[4].z = p[4].z + target_mid_position.z;

  01a5f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01a64	c1 e0 02	 shl	 eax, 2
  01a67	f3 0f 10 44 05
	98		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  01a6d	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  01a75	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01a7a	c1 e1 02	 shl	 ecx, 2
  01a7d	f3 0f 11 84 0d
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+ecx+8], xmm0

; 1059 : 
; 1060 : 			q[5].x = p[5].x + target_mid_position.x;

  01a86	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01a8b	6b c8 05	 imul	 ecx, eax, 5
  01a8e	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  01a94	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  01a9c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01aa1	6b c2 05	 imul	 eax, edx, 5
  01aa4	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax], xmm0

; 1061 : 			q[5].y = p[5].y + target_mid_position.y;

  01aad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01ab2	6b c8 05	 imul	 ecx, eax, 5
  01ab5	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  01abb	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  01ac3	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01ac8	6b c2 05	 imul	 eax, edx, 5
  01acb	f3 0f 11 84 05
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+4], xmm0

; 1062 : 			q[5].z = p[5].z + target_mid_position.z;

  01ad4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01ad9	6b c8 05	 imul	 ecx, eax, 5
  01adc	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  01ae2	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  01aea	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01aef	6b c2 05	 imul	 eax, edx, 5
  01af2	f3 0f 11 84 05
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+8], xmm0

; 1063 : 
; 1064 : 			q[6].x = p[6].x + target_mid_position.x;

  01afb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01b00	6b c8 06	 imul	 ecx, eax, 6
  01b03	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  01b09	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  01b11	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01b16	6b c2 06	 imul	 eax, edx, 6
  01b19	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax], xmm0

; 1065 : 			q[6].y = p[6].y + target_mid_position.y;

  01b22	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01b27	6b c8 06	 imul	 ecx, eax, 6
  01b2a	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  01b30	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  01b38	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01b3d	6b c2 06	 imul	 eax, edx, 6
  01b40	f3 0f 11 84 05
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+4], xmm0

; 1066 : 			q[6].z = p[6].z + target_mid_position.z;

  01b49	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01b4e	6b c8 06	 imul	 ecx, eax, 6
  01b51	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  01b57	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  01b5f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01b64	6b c2 06	 imul	 eax, edx, 6
  01b67	f3 0f 11 84 05
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+8], xmm0

; 1067 : 
; 1068 : 			q[7].x = p[7].x + target_mid_position.x;

  01b70	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01b75	6b c8 07	 imul	 ecx, eax, 7
  01b78	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  01b7e	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp]
  01b86	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01b8b	6b c2 07	 imul	 eax, edx, 7
  01b8e	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax], xmm0

; 1069 : 			q[7].y = p[7].y + target_mid_position.y;

  01b97	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01b9c	6b c8 07	 imul	 ecx, eax, 7
  01b9f	f3 0f 10 44 0d
	94		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  01ba5	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+4]
  01bad	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01bb2	6b c2 07	 imul	 eax, edx, 7
  01bb5	f3 0f 11 84 05
	34 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+4], xmm0

; 1070 : 			q[7].z = p[7].z + target_mid_position.z;

  01bbe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01bc3	6b c8 07	 imul	 ecx, eax, 7
  01bc6	f3 0f 10 44 0d
	98		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  01bcc	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR _target_mid_position$[ebp+8]
  01bd4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01bd9	6b c2 07	 imul	 eax, edx, 7
  01bdc	f3 0f 11 84 05
	38 ff ff ff	 movss	 DWORD PTR _q$[ebp+eax+8], xmm0

; 1071 : 
; 1072 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[0], &q[1], &q[2], &q[3], source_intercept_point, face_normal))

  01be5	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01be8	50		 push	 eax
  01be9	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01bec	51		 push	 ecx
  01bed	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01bf2	6b c2 03	 imul	 eax, edx, 3
  01bf5	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01bfc	51		 push	 ecx
  01bfd	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01c02	d1 e2		 shl	 edx, 1
  01c04	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01c0b	50		 push	 eax
  01c0c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01c11	c1 e1 00	 shl	 ecx, 0
  01c14	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  01c1b	52		 push	 edx
  01c1c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01c21	6b c8 00	 imul	 ecx, eax, 0
  01c24	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  01c2b	52		 push	 edx
  01c2c	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  01c2f	50		 push	 eax
  01c30	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  01c33	51		 push	 ecx
  01c34	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01c39	85 c0		 test	 eax, eax
  01c3b	74 0a		 je	 SHORT $LN43@accurate_m

; 1073 : 			{
; 1074 : 				return (TRUE);

  01c3d	b8 01 00 00 00	 mov	 eax, 1
  01c42	e9 e9 01 00 00	 jmp	 $LN1@accurate_m
$LN43@accurate_m:

; 1075 : 			}
; 1076 : 
; 1077 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[3], &q[2], &q[6], &q[7], source_intercept_point, face_normal))

  01c47	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01c4a	50		 push	 eax
  01c4b	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01c4e	51		 push	 ecx
  01c4f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01c54	6b c2 07	 imul	 eax, edx, 7
  01c57	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01c5e	51		 push	 ecx
  01c5f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01c64	6b c2 06	 imul	 eax, edx, 6
  01c67	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01c6e	51		 push	 ecx
  01c6f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01c74	d1 e2		 shl	 edx, 1
  01c76	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01c7d	50		 push	 eax
  01c7e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01c83	6b d1 03	 imul	 edx, ecx, 3
  01c86	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01c8d	50		 push	 eax
  01c8e	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  01c91	51		 push	 ecx
  01c92	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01c95	52		 push	 edx
  01c96	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01c9b	85 c0		 test	 eax, eax
  01c9d	74 0a		 je	 SHORT $LN44@accurate_m

; 1078 : 			{
; 1079 : 				return (TRUE);

  01c9f	b8 01 00 00 00	 mov	 eax, 1
  01ca4	e9 87 01 00 00	 jmp	 $LN1@accurate_m
$LN44@accurate_m:

; 1080 : 			}
; 1081 : 
; 1082 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[7], &q[6], &q[5], &q[4], source_intercept_point, face_normal))

  01ca9	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01cac	50		 push	 eax
  01cad	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01cb0	51		 push	 ecx
  01cb1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01cb6	c1 e2 02	 shl	 edx, 2
  01cb9	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01cc0	50		 push	 eax
  01cc1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01cc6	6b d1 05	 imul	 edx, ecx, 5
  01cc9	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01cd0	50		 push	 eax
  01cd1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01cd6	6b d1 06	 imul	 edx, ecx, 6
  01cd9	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01ce0	50		 push	 eax
  01ce1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01ce6	6b d1 07	 imul	 edx, ecx, 7
  01ce9	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01cf0	50		 push	 eax
  01cf1	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  01cf4	51		 push	 ecx
  01cf5	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01cf8	52		 push	 edx
  01cf9	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01cfe	85 c0		 test	 eax, eax
  01d00	74 0a		 je	 SHORT $LN45@accurate_m

; 1083 : 			{
; 1084 : 				return (TRUE);

  01d02	b8 01 00 00 00	 mov	 eax, 1
  01d07	e9 24 01 00 00	 jmp	 $LN1@accurate_m
$LN45@accurate_m:

; 1085 : 			}
; 1086 : 
; 1087 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[4], &q[5], &q[1], &q[0], source_intercept_point, face_normal))

  01d0c	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01d0f	50		 push	 eax
  01d10	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01d13	51		 push	 ecx
  01d14	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01d19	6b c2 00	 imul	 eax, edx, 0
  01d1c	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01d23	51		 push	 ecx
  01d24	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01d29	c1 e2 00	 shl	 edx, 0
  01d2c	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01d33	50		 push	 eax
  01d34	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01d39	6b d1 05	 imul	 edx, ecx, 5
  01d3c	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01d43	50		 push	 eax
  01d44	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01d49	c1 e1 02	 shl	 ecx, 2
  01d4c	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  01d53	52		 push	 edx
  01d54	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  01d57	50		 push	 eax
  01d58	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  01d5b	51		 push	 ecx
  01d5c	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01d61	85 c0		 test	 eax, eax
  01d63	74 0a		 je	 SHORT $LN46@accurate_m

; 1088 : 			{
; 1089 : 				return (TRUE);

  01d65	b8 01 00 00 00	 mov	 eax, 1
  01d6a	e9 c1 00 00 00	 jmp	 $LN1@accurate_m
$LN46@accurate_m:

; 1090 : 			}
; 1091 : 
; 1092 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[1], &q[5], &q[6], &q[2], source_intercept_point, face_normal))

  01d6f	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01d72	50		 push	 eax
  01d73	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01d76	51		 push	 ecx
  01d77	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01d7c	d1 e2		 shl	 edx, 1
  01d7e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01d85	50		 push	 eax
  01d86	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01d8b	6b d1 06	 imul	 edx, ecx, 6
  01d8e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01d95	50		 push	 eax
  01d96	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01d9b	6b d1 05	 imul	 edx, ecx, 5
  01d9e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01da5	50		 push	 eax
  01da6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01dab	c1 e1 00	 shl	 ecx, 0
  01dae	8d 94 0d 30 ff
	ff ff		 lea	 edx, DWORD PTR _q$[ebp+ecx]
  01db5	52		 push	 edx
  01db6	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  01db9	50		 push	 eax
  01dba	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  01dbd	51		 push	 ecx
  01dbe	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01dc3	85 c0		 test	 eax, eax
  01dc5	74 07		 je	 SHORT $LN47@accurate_m

; 1093 : 			{
; 1094 : 				return (TRUE);

  01dc7	b8 01 00 00 00	 mov	 eax, 1
  01dcc	eb 62		 jmp	 SHORT $LN1@accurate_m
$LN47@accurate_m:

; 1095 : 			}
; 1096 : 
; 1097 : 			if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &q[0], &q[4], &q[7], &q[3], source_intercept_point, face_normal))

  01dce	8b 45 28	 mov	 eax, DWORD PTR _face_normal$[ebp]
  01dd1	50		 push	 eax
  01dd2	8b 4d 24	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  01dd5	51		 push	 ecx
  01dd6	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01ddb	6b c2 03	 imul	 eax, edx, 3
  01dde	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01de5	51		 push	 ecx
  01de6	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01deb	6b c2 07	 imul	 eax, edx, 7
  01dee	8d 8c 05 30 ff
	ff ff		 lea	 ecx, DWORD PTR _q$[ebp+eax]
  01df5	51		 push	 ecx
  01df6	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01dfb	c1 e2 02	 shl	 edx, 2
  01dfe	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01e05	50		 push	 eax
  01e06	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01e0b	6b d1 00	 imul	 edx, ecx, 0
  01e0e	8d 84 15 30 ff
	ff ff		 lea	 eax, DWORD PTR _q$[ebp+edx]
  01e15	50		 push	 eax
  01e16	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  01e19	51		 push	 ecx
  01e1a	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01e1d	52		 push	 edx
  01e1e	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  01e23	85 c0		 test	 eax, eax
  01e25	74 07		 je	 SHORT $LN48@accurate_m

; 1098 : 			{
; 1099 : 				return (TRUE);

  01e27	b8 01 00 00 00	 mov	 eax, 1
  01e2c	eb 02		 jmp	 SHORT $LN1@accurate_m
$LN48@accurate_m:

; 1100 : 			}
; 1101 : 		}
; 1102 : 	}
; 1103 : 
; 1104 : 	return (FALSE);

  01e2e	33 c0		 xor	 eax, eax
$LN1@accurate_m:

; 1105 : }

  01e30	5f		 pop	 edi
  01e31	5e		 pop	 esi
  01e32	5b		 pop	 ebx
  01e33	8b e5		 mov	 esp, ebp
  01e35	5d		 pop	 ebp
  01e36	c2 24 00	 ret	 36			; 00000024H
?accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z ENDP ; accurate_moving_bounding_box_collision_test
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z
_TEXT	SEGMENT
tv419 = -228						; size = 4
tv303 = -228						; size = 4
tv265 = -228						; size = 4
tv247 = -228						; size = 4
tv227 = -228						; size = 4
tv194 = -228						; size = 4
tv165 = -228						; size = 4
tv144 = -228						; size = 4
tv414 = -224						; size = 4
tv298 = -224						; size = 4
tv290 = -224						; size = 4
tv258 = -224						; size = 4
tv239 = -224						; size = 4
tv219 = -224						; size = 4
tv207 = -224						; size = 4
tv187 = -224						; size = 4
tv177 = -224						; size = 4
tv157 = -224						; size = 4
tv137 = -224						; size = 4
_attitude$ = -156					; size = 36
_p$ = -120						; size = 96
_terrain_face_normal$ = -24				; size = 12
_position$ = -12					; size = 4
_heading$ = -8						; size = 4
_depth$ = -4						; size = 4
_target$ = 8						; size = 4
_source_old_position$ = 12				; size = 4
_source_new_position$ = 16				; size = 4
_index_3d_object$ = 20					; size = 4
_bounding_box$ = 24					; size = 4
_source_intercept_point$ = 28				; size = 4
_face_normal$ = 32					; size = 4
?accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z PROC ; accurate_stationary_bounding_box_collision_test, COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 427  : 	int
; 428  : 		depth;
; 429  : 
; 430  : 	float
; 431  : 		heading;
; 432  : 
; 433  : 	vec3d
; 434  : 		*position,
; 435  : 		terrain_face_normal,
; 436  : 		p[8];
; 437  : 
; 438  : 	matrix3x3
; 439  : 		attitude;
; 440  : 
; 441  : 	ASSERT (target);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00010	75 18		 jne	 SHORT $LN5@accurate_s
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@accurate_s:

; 442  : 
; 443  : 	ASSERT (source_old_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_old_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN6@accurate_s
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GALEKPNG@source_old_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@accurate_s:

; 444  : 
; 445  : 	ASSERT (source_new_position);

  00048	83 7d 10 00	 cmp	 DWORD PTR _source_new_position$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN7@accurate_s
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00053	83 c0 13	 add	 eax, 19			; 00000013H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHJPOOAI@source_new_position@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@accurate_s:

; 446  : 
; 447  : 	ASSERT ((index_3d_object > OBJECT_3D_INVALID_OBJECT_INDEX) && (index_3d_object < OBJECT_3D_LAST));

  00066	83 7d 14 00	 cmp	 DWORD PTR _index_3d_object$[ebp], 0
  0006a	7e 09		 jle	 SHORT $LN9@accurate_s
  0006c	81 7d 14 e4 0a
	00 00		 cmp	 DWORD PTR _index_3d_object$[ebp], 2788 ; 00000ae4H
  00073	7c 18		 jl	 SHORT $LN8@accurate_s
$LN9@accurate_s:
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  0007a	83 c0 15	 add	 eax, 21			; 00000015H
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@CMGMKEGN@?$CIindex_3d_object?5?$DO?5OBJECT_3D_IN@
  00088	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@accurate_s:

; 448  : 
; 449  : 	ASSERT (bounding_box);

  0008d	83 7d 18 00	 cmp	 DWORD PTR _bounding_box$[ebp], 0
  00091	75 18		 jne	 SHORT $LN10@accurate_s
  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00098	83 c0 17	 add	 eax, 23			; 00000017H
  0009b	50		 push	 eax
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LOLJEHA@bounding_box@
  000a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@accurate_s:

; 450  : 
; 451  : 	ASSERT (source_intercept_point);

  000ab	83 7d 1c 00	 cmp	 DWORD PTR _source_intercept_point$[ebp], 0
  000af	75 18		 jne	 SHORT $LN11@accurate_s
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  000b6	83 c0 19	 add	 eax, 25			; 00000019H
  000b9	50		 push	 eax
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@ELIBBDFL@source_intercept_point@
  000c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@accurate_s:

; 452  : 
; 453  : 	ASSERT (face_normal);

  000c9	83 7d 20 00	 cmp	 DWORD PTR _face_normal$[ebp], 0
  000cd	75 18		 jne	 SHORT $LN12@accurate_s
  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  000d4	83 c0 1b	 add	 eax, 27			; 0000001bH
  000d7	50		 push	 eax
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JKBFLAII@face_normal@
  000e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@accurate_s:

; 454  : 
; 455  : 	//
; 456  : 	// get target position and attitude
; 457  : 	//
; 458  : 
; 459  : 	if (get_local_entity_int_value (target, INT_TYPE_COLLISION_TEST_MOBILE))

  000e7	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  000eb	74 0d		 je	 SHORT $LN30@accurate_s
  000ed	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  000f8	eb 20		 jmp	 SHORT $LN31@accurate_s
$LN30@accurate_s:
  000fa	68 cb 01 00 00	 push	 459			; 000001cbH
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00104	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN31@accurate_s:
  0011a	b8 01 00 00 00	 mov	 eax, 1
  0011f	85 c0		 test	 eax, eax
  00121	74 0c		 je	 SHORT $LN32@accurate_s
  00123	c7 85 1c ff ff
	ff 1b 00 00 00	 mov	 DWORD PTR tv144[ebp], 27 ; 0000001bH
  0012d	eb 20		 jmp	 SHORT $LN33@accurate_s
$LN32@accurate_s:
  0012f	68 cb 01 00 00	 push	 459			; 000001cbH
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00139	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013f	51		 push	 ecx
  00140	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00145	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], 0
$LN33@accurate_s:
  0014f	6a 1b		 push	 27			; 0000001bH
  00151	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00154	52		 push	 edx
  00155	69 85 20 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv137[ebp], 1116
  0015f	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv144[ebp]
  00165	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0016c	ff d2		 call	 edx
  0016e	85 c0		 test	 eax, eax
  00170	0f 84 e5 00 00
	00		 je	 $LN13@accurate_s

; 460  : 	{
; 461  : 		position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00176	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0017a	74 0d		 je	 SHORT $LN34@accurate_s
  0017c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv157[ebp], ecx
  00187	eb 24		 jmp	 SHORT $LN35@accurate_s
$LN34@accurate_s:
  00189	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  0018f	83 c2 23	 add	 edx, 35			; 00000023H
  00192	52		 push	 edx
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00198	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a3	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv157[ebp], 0
$LN35@accurate_s:
  001ad	b9 01 00 00 00	 mov	 ecx, 1
  001b2	85 c9		 test	 ecx, ecx
  001b4	74 0c		 je	 SHORT $LN36@accurate_s
  001b6	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv165[ebp], 8
  001c0	eb 24		 jmp	 SHORT $LN37@accurate_s
$LN36@accurate_s:
  001c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  001c8	83 c2 23	 add	 edx, 35			; 00000023H
  001cb	52		 push	 edx
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001dc	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv165[ebp], 0
$LN37@accurate_s:
  001e6	6a 08		 push	 8
  001e8	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001eb	51		 push	 ecx
  001ec	6b 95 20 ff ff
	ff 60		 imul	 edx, DWORD PTR tv157[ebp], 96
  001f3	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv165[ebp]
  001f9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00200	ff d1		 call	 ecx
  00202	89 45 f4	 mov	 DWORD PTR _position$[ebp], eax

; 462  : 
; 463  : 		get_local_entity_attitude_matrix (target, attitude);

  00205	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00209	74 0d		 je	 SHORT $LN38@accurate_s
  0020b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0020e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00210	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv177[ebp], ecx
  00216	eb 24		 jmp	 SHORT $LN39@accurate_s
$LN38@accurate_s:
  00218	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  0021e	83 c2 25	 add	 edx, 37			; 00000025H
  00221	52		 push	 edx
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00227	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0022c	50		 push	 eax
  0022d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00232	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv177[ebp], 0
$LN39@accurate_s:
  0023c	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _attitude$[ebp]
  00242	51		 push	 ecx
  00243	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00246	52		 push	 edx
  00247	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv177[ebp]
  0024d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00254	ff d1		 call	 ecx
  00256	e9 51 03 00 00	 jmp	 $LN16@accurate_s
$LN13@accurate_s:

; 464  : 	}
; 465  : 	else if (get_local_entity_int_value (target, INT_TYPE_COLLISION_TEST_FIXED))

  0025b	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0025f	74 0d		 je	 SHORT $LN40@accurate_s
  00261	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00264	8b 08		 mov	 ecx, DWORD PTR [eax]
  00266	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv187[ebp], ecx
  0026c	eb 20		 jmp	 SHORT $LN41@accurate_s
$LN40@accurate_s:
  0026e	68 d1 01 00 00	 push	 465			; 000001d1H
  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00278	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0027e	52		 push	 edx
  0027f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00284	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN41@accurate_s:
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	85 c0		 test	 eax, eax
  00295	74 0c		 je	 SHORT $LN42@accurate_s
  00297	c7 85 1c ff ff
	ff 1a 00 00 00	 mov	 DWORD PTR tv194[ebp], 26 ; 0000001aH
  002a1	eb 20		 jmp	 SHORT $LN43@accurate_s
$LN42@accurate_s:
  002a3	68 d1 01 00 00	 push	 465			; 000001d1H
  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b3	51		 push	 ecx
  002b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b9	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv194[ebp], 0
$LN43@accurate_s:
  002c3	6a 1a		 push	 26			; 0000001aH
  002c5	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002c8	52		 push	 edx
  002c9	69 85 20 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv187[ebp], 1116
  002d3	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  002d9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002e0	ff d2		 call	 edx
  002e2	85 c0		 test	 eax, eax
  002e4	0f 84 70 02 00
	00		 je	 $LN15@accurate_s

; 466  : 	{
; 467  : 		ASSERT (get_local_entity_type (target) != ENTITY_TYPE_CITY);

  002ea	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002ee	74 0d		 je	 SHORT $LN44@accurate_s
  002f0	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f5	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  002fb	eb 24		 jmp	 SHORT $LN45@accurate_s
$LN44@accurate_s:
  002fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00303	83 c2 29	 add	 edx, 41			; 00000029H
  00306	52		 push	 edx
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00311	50		 push	 eax
  00312	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00317	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN45@accurate_s:
  00321	83 bd 20 ff ff
	ff 05		 cmp	 DWORD PTR tv207[ebp], 5
  00328	75 18		 jne	 SHORT $LN17@accurate_s
  0032a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  0032f	83 c0 29	 add	 eax, 41			; 00000029H
  00332	50		 push	 eax
  00333	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00338	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@JAPGJNPL@get_local_entity_type?5?$CItarget?$CJ?5@
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@accurate_s:

; 468  : 
; 469  : 		position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00342	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00346	74 0d		 je	 SHORT $LN46@accurate_s
  00348	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0034b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0034d	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  00353	eb 24		 jmp	 SHORT $LN47@accurate_s
$LN46@accurate_s:
  00355	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  0035b	83 c2 2b	 add	 edx, 43			; 0000002bH
  0035e	52		 push	 edx
  0035f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00364	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00369	50		 push	 eax
  0036a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0036f	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$LN47@accurate_s:
  00379	b9 01 00 00 00	 mov	 ecx, 1
  0037e	85 c9		 test	 ecx, ecx
  00380	74 0c		 je	 SHORT $LN48@accurate_s
  00382	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv227[ebp], 8
  0038c	eb 24		 jmp	 SHORT $LN49@accurate_s
$LN48@accurate_s:
  0038e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00394	83 c2 2b	 add	 edx, 43			; 0000002bH
  00397	52		 push	 edx
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a8	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv227[ebp], 0
$LN49@accurate_s:
  003b2	6a 08		 push	 8
  003b4	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  003b7	51		 push	 ecx
  003b8	6b 95 20 ff ff
	ff 60		 imul	 edx, DWORD PTR tv219[ebp], 96
  003bf	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv227[ebp]
  003c5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  003cc	ff d1		 call	 ecx
  003ce	89 45 f4	 mov	 DWORD PTR _position$[ebp], eax

; 470  : 
; 471  : 		heading = get_local_entity_float_value (target, FLOAT_TYPE_HEADING);

  003d1	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d5	74 0d		 je	 SHORT $LN50@accurate_s
  003d7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003da	8b 08		 mov	 ecx, DWORD PTR [eax]
  003dc	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  003e2	eb 24		 jmp	 SHORT $LN51@accurate_s
$LN50@accurate_s:
  003e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  003ea	83 c2 2d	 add	 edx, 45			; 0000002dH
  003ed	52		 push	 edx
  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003f8	50		 push	 eax
  003f9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003fe	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv239[ebp], 0
$LN51@accurate_s:
  00408	b9 01 00 00 00	 mov	 ecx, 1
  0040d	85 c9		 test	 ecx, ecx
  0040f	74 0c		 je	 SHORT $LN52@accurate_s
  00411	c7 85 1c ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv247[ebp], 52 ; 00000034H
  0041b	eb 24		 jmp	 SHORT $LN53@accurate_s
$LN52@accurate_s:
  0041d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00423	83 c2 2d	 add	 edx, 45			; 0000002dH
  00426	52		 push	 edx
  00427	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0042c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00431	50		 push	 eax
  00432	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00437	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv247[ebp], 0
$LN53@accurate_s:
  00441	6a 34		 push	 52			; 00000034H
  00443	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00446	51		 push	 ecx
  00447	69 95 20 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv239[ebp], 700
  00451	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv247[ebp]
  00457	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0045e	ff d1		 call	 ecx
  00460	d9 5d f8	 fstp	 DWORD PTR _heading$[ebp]

; 472  : 
; 473  : 		if (get_local_entity_int_value (target, INT_TYPE_ALIGN_WITH_TERRAIN))

  00463	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00467	74 0d		 je	 SHORT $LN54@accurate_s
  00469	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0046c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0046e	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv258[ebp], ecx
  00474	eb 20		 jmp	 SHORT $LN55@accurate_s
$LN54@accurate_s:
  00476	68 d9 01 00 00	 push	 473			; 000001d9H
  0047b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00480	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00486	52		 push	 edx
  00487	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0048c	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN55@accurate_s:
  00496	b8 01 00 00 00	 mov	 eax, 1
  0049b	85 c0		 test	 eax, eax
  0049d	74 0c		 je	 SHORT $LN56@accurate_s
  0049f	c7 85 1c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv265[ebp], 6
  004a9	eb 20		 jmp	 SHORT $LN57@accurate_s
$LN56@accurate_s:
  004ab	68 d9 01 00 00	 push	 473			; 000001d9H
  004b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004bb	51		 push	 ecx
  004bc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c1	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv265[ebp], 0
$LN57@accurate_s:
  004cb	6a 06		 push	 6
  004cd	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  004d0	52		 push	 edx
  004d1	69 85 20 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv258[ebp], 1116
  004db	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv265[ebp]
  004e1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004e8	ff d2		 call	 edx
  004ea	85 c0		 test	 eax, eax
  004ec	74 41		 je	 SHORT $LN18@accurate_s

; 474  : 		{
; 475  : 			get_3d_terrain_face_normal (&terrain_face_normal, position->x, position->z);

  004ee	8b 45 f4	 mov	 eax, DWORD PTR _position$[ebp]
  004f1	51		 push	 ecx
  004f2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fc	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  004ff	51		 push	 ecx
  00500	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	8d 55 e8	 lea	 edx, DWORD PTR _terrain_face_normal$[ebp]
  0050c	52		 push	 edx
  0050d	e8 00 00 00 00	 call	 ?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z ; get_3d_terrain_face_normal

; 476  : 
; 477  : 			get_3d_transformation_matrix_from_face_normal_and_heading (attitude, &terrain_face_normal, heading);

  00512	51		 push	 ecx
  00513	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051d	8d 45 e8	 lea	 eax, DWORD PTR _terrain_face_normal$[ebp]
  00520	50		 push	 eax
  00521	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _attitude$[ebp]
  00527	51		 push	 ecx
  00528	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix_from_face_normal_and_heading@@YGXQAY02MPBUVEC3D@@M@Z ; get_3d_transformation_matrix_from_face_normal_and_heading

; 478  : 		}
; 479  : 		else

  0052d	eb 29		 jmp	 SHORT $LN19@accurate_s
$LN18@accurate_s:

; 480  : 		{
; 481  : 			get_3d_transformation_matrix (attitude, heading, 0.0, 0.0);

  0052f	51		 push	 ecx
  00530	0f 57 c0	 xorps	 xmm0, xmm0
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	51		 push	 ecx
  00539	0f 57 c0	 xorps	 xmm0, xmm0
  0053c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00541	51		 push	 ecx
  00542	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054c	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _attitude$[ebp]
  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix
$LN19@accurate_s:

; 482  : 		}
; 483  : 	}
; 484  : 	else

  00558	eb 52		 jmp	 SHORT $LN16@accurate_s
$LN15@accurate_s:

; 485  : 	{
; 486  : 		debug_fatal ("Invalid target (type = %s)", get_local_entity_type_name (target));

  0055a	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0055e	74 0d		 je	 SHORT $LN58@accurate_s
  00560	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00563	8b 08		 mov	 ecx, DWORD PTR [eax]
  00565	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv290[ebp], ecx
  0056b	eb 24		 jmp	 SHORT $LN59@accurate_s
$LN58@accurate_s:
  0056d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z@4JA
  00573	83 c2 3c	 add	 edx, 60			; 0000003cH
  00576	52		 push	 edx
  00577	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0057c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00581	50		 push	 eax
  00582	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00587	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv290[ebp], 0
$LN59@accurate_s:
  00591	6b 8d 20 ff ff
	ff 0c		 imul	 ecx, DWORD PTR tv290[ebp], 12
  00598	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?entity_type_database@@3PAUENTITY_TYPE_DATA@@A[ecx]
  0059e	52		 push	 edx
  0059f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PGNAAFIC@Invalid?5target?5?$CItype?5?$DN?5?$CFs?$CJ@
  005a4	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  005a9	83 c4 08	 add	 esp, 8
$LN16@accurate_s:

; 487  : 	}
; 488  : 
; 489  : 	depth = 0;

  005ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _depth$[ebp], 0

; 490  : 
; 491  : 	if (get_object_3d_collision_object_geometry_triangle (index_3d_object, p, depth++))

  005b3	8b 45 fc	 mov	 eax, DWORD PTR _depth$[ebp]
  005b6	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv298[ebp], eax
  005bc	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv298[ebp]
  005c2	51		 push	 ecx
  005c3	8d 55 88	 lea	 edx, DWORD PTR _p$[ebp]
  005c6	52		 push	 edx
  005c7	8b 45 14	 mov	 eax, DWORD PTR _index_3d_object$[ebp]
  005ca	50		 push	 eax
  005cb	e8 00 00 00 00	 call	 ?get_object_3d_collision_object_geometry_triangle@@YGHHPAUVEC3D@@H@Z ; get_object_3d_collision_object_geometry_triangle
  005d0	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv303[ebp], eax
  005d6	8b 4d fc	 mov	 ecx, DWORD PTR _depth$[ebp]
  005d9	83 c1 01	 add	 ecx, 1
  005dc	89 4d fc	 mov	 DWORD PTR _depth$[ebp], ecx
  005df	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR tv303[ebp], 0
  005e6	0f 84 32 02 00
	00		 je	 $LN20@accurate_s
$LN4@accurate_s:

; 492  : 	{
; 493  : 		////////////////////////////////////////
; 494  : 		//
; 495  : 		// COLLISION TEST WITH GEOMETRY TRIANGLES
; 496  : 		//
; 497  : 		////////////////////////////////////////
; 498  : 
; 499  : 		do
; 500  : 		{
; 501  : 			multiply_matrix3x3_vec3d (&p[0], attitude, &p[0]);

  005ec	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005f1	6b c8 00	 imul	 ecx, eax, 0
  005f4	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  005f8	52		 push	 edx
  005f9	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _attitude$[ebp]
  005ff	50		 push	 eax
  00600	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00605	6b d1 00	 imul	 edx, ecx, 0
  00608	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  0060c	50		 push	 eax
  0060d	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 502  : 			multiply_matrix3x3_vec3d (&p[1], attitude, &p[1]);

  00612	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00617	c1 e0 00	 shl	 eax, 0
  0061a	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  0061e	51		 push	 ecx
  0061f	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _attitude$[ebp]
  00625	52		 push	 edx
  00626	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0062b	c1 e0 00	 shl	 eax, 0
  0062e	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00632	51		 push	 ecx
  00633	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 503  : 			multiply_matrix3x3_vec3d (&p[2], attitude, &p[2]);

  00638	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0063d	d1 e0		 shl	 eax, 1
  0063f	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00643	51		 push	 ecx
  00644	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _attitude$[ebp]
  0064a	52		 push	 edx
  0064b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00650	d1 e0		 shl	 eax, 1
  00652	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00656	51		 push	 ecx
  00657	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 504  : 
; 505  : 			p[0].x += position->x;

  0065c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00661	6b c8 00	 imul	 ecx, eax, 0
  00664	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00667	f3 0f 10 44 0d
	88		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  0066d	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00671	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00676	6b c8 00	 imul	 ecx, eax, 0
  00679	f3 0f 11 44 0d
	88		 movss	 DWORD PTR _p$[ebp+ecx], xmm0

; 506  : 			p[0].y += position->y;

  0067f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00684	6b c8 00	 imul	 ecx, eax, 0
  00687	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  0068a	f3 0f 10 44 0d
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00690	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00695	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0069a	6b c8 00	 imul	 ecx, eax, 0
  0069d	f3 0f 11 44 0d
	8c		 movss	 DWORD PTR _p$[ebp+ecx+4], xmm0

; 507  : 			p[0].z += position->z;

  006a3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006a8	6b c8 00	 imul	 ecx, eax, 0
  006ab	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  006ae	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  006b4	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  006b9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006be	6b c8 00	 imul	 ecx, eax, 0
  006c1	f3 0f 11 44 0d
	90		 movss	 DWORD PTR _p$[ebp+ecx+8], xmm0

; 508  : 
; 509  : 			p[1].x += position->x;

  006c7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006cc	c1 e0 00	 shl	 eax, 0
  006cf	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  006d2	f3 0f 10 44 05
	88		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  006d8	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  006dc	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  006e1	c1 e2 00	 shl	 edx, 0
  006e4	f3 0f 11 44 15
	88		 movss	 DWORD PTR _p$[ebp+edx], xmm0

; 510  : 			p[1].y += position->y;

  006ea	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006ef	c1 e0 00	 shl	 eax, 0
  006f2	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  006f5	f3 0f 10 44 05
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  006fb	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00700	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00705	c1 e2 00	 shl	 edx, 0
  00708	f3 0f 11 44 15
	8c		 movss	 DWORD PTR _p$[ebp+edx+4], xmm0

; 511  : 			p[1].z += position->z;

  0070e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00713	c1 e0 00	 shl	 eax, 0
  00716	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00719	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  0071f	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00724	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00729	c1 e2 00	 shl	 edx, 0
  0072c	f3 0f 11 44 15
	90		 movss	 DWORD PTR _p$[ebp+edx+8], xmm0

; 512  : 
; 513  : 			p[2].x += position->x;

  00732	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00737	d1 e0		 shl	 eax, 1
  00739	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  0073c	f3 0f 10 44 05
	88		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00742	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00746	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0074b	d1 e2		 shl	 edx, 1
  0074d	f3 0f 11 44 15
	88		 movss	 DWORD PTR _p$[ebp+edx], xmm0

; 514  : 			p[2].y += position->y;

  00753	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00758	d1 e0		 shl	 eax, 1
  0075a	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  0075d	f3 0f 10 44 05
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00763	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00768	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0076d	d1 e2		 shl	 edx, 1
  0076f	f3 0f 11 44 15
	8c		 movss	 DWORD PTR _p$[ebp+edx+4], xmm0

; 515  : 			p[2].z += position->z;

  00775	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0077a	d1 e0		 shl	 eax, 1
  0077c	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  0077f	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00785	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0078a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0078f	d1 e2		 shl	 edx, 1
  00791	f3 0f 11 44 15
	90		 movss	 DWORD PTR _p$[ebp+edx+8], xmm0

; 516  : 
; 517  : 			if (get_3d_line_triangle_face_intersection (source_old_position, source_new_position, &p[0], &p[1], &p[2], source_intercept_point, face_normal))

  00797	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  0079a	50		 push	 eax
  0079b	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  0079e	51		 push	 ecx
  0079f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  007a4	d1 e2		 shl	 edx, 1
  007a6	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  007aa	50		 push	 eax
  007ab	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007b0	c1 e1 00	 shl	 ecx, 0
  007b3	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  007b7	52		 push	 edx
  007b8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007bd	6b c8 00	 imul	 ecx, eax, 0
  007c0	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  007c4	52		 push	 edx
  007c5	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  007c8	50		 push	 eax
  007c9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  007cc	51		 push	 ecx
  007cd	e8 00 00 00 00	 call	 ?get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z ; get_3d_line_triangle_face_intersection
  007d2	85 c0		 test	 eax, eax
  007d4	74 0a		 je	 SHORT $LN22@accurate_s

; 518  : 			{
; 519  : 				return (TRUE);

  007d6	b8 01 00 00 00	 mov	 eax, 1
  007db	e9 6a 08 00 00	 jmp	 $LN1@accurate_s
$LN22@accurate_s:

; 520  : 			}
; 521  : 		}
; 522  : 		while (get_object_3d_collision_object_geometry_triangle (index_3d_object, p, depth++));

  007e0	8b 45 fc	 mov	 eax, DWORD PTR _depth$[ebp]
  007e3	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv414[ebp], eax
  007e9	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv414[ebp]
  007ef	51		 push	 ecx
  007f0	8d 55 88	 lea	 edx, DWORD PTR _p$[ebp]
  007f3	52		 push	 edx
  007f4	8b 45 14	 mov	 eax, DWORD PTR _index_3d_object$[ebp]
  007f7	50		 push	 eax
  007f8	e8 00 00 00 00	 call	 ?get_object_3d_collision_object_geometry_triangle@@YGHHPAUVEC3D@@H@Z ; get_object_3d_collision_object_geometry_triangle
  007fd	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv419[ebp], eax
  00803	8b 4d fc	 mov	 ecx, DWORD PTR _depth$[ebp]
  00806	83 c1 01	 add	 ecx, 1
  00809	89 4d fc	 mov	 DWORD PTR _depth$[ebp], ecx
  0080c	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR tv419[ebp], 0
  00813	0f 85 d3 fd ff
	ff		 jne	 $LN4@accurate_s

; 523  : 	}
; 524  : 	else

  00819	e9 2a 08 00 00	 jmp	 $LN28@accurate_s
$LN20@accurate_s:

; 525  : 	{
; 526  : 		////////////////////////////////////////
; 527  : 		//
; 528  : 		// COLLISION TEST WITH BOUNDING BOX
; 529  : 		//
; 530  : 		////////////////////////////////////////
; 531  : 
; 532  : 		//
; 533  : 		// rotate bounding box
; 534  : 		//
; 535  : 
; 536  : 		p[0].x = bounding_box->xmin;

  0081e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00823	6b c8 00	 imul	 ecx, eax, 0
  00826	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00829	8b 02		 mov	 eax, DWORD PTR [edx]
  0082b	89 44 0d 88	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 537  : 		p[0].y = bounding_box->ymin;

  0082f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00834	6b c8 00	 imul	 ecx, eax, 0
  00837	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  0083a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0083d	89 44 0d 8c	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 538  : 		p[0].z = bounding_box->zmin;

  00841	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00846	6b c8 00	 imul	 ecx, eax, 0
  00849	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  0084c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0084f	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 539  : 
; 540  : 		multiply_matrix3x3_vec3d (&p[0], attitude, &p[0]);

  00853	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00858	6b c8 00	 imul	 ecx, eax, 0
  0085b	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  0085f	52		 push	 edx
  00860	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _attitude$[ebp]
  00866	50		 push	 eax
  00867	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0086c	6b d1 00	 imul	 edx, ecx, 0
  0086f	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00873	50		 push	 eax
  00874	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 541  : 
; 542  : 		p[0].x += position->x;

  00879	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0087e	6b c8 00	 imul	 ecx, eax, 0
  00881	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00884	f3 0f 10 44 0d
	88		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  0088a	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  0088e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00893	6b c8 00	 imul	 ecx, eax, 0
  00896	f3 0f 11 44 0d
	88		 movss	 DWORD PTR _p$[ebp+ecx], xmm0

; 543  : 		p[0].y += position->y;

  0089c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008a1	6b c8 00	 imul	 ecx, eax, 0
  008a4	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  008a7	f3 0f 10 44 0d
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  008ad	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  008b2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008b7	6b c8 00	 imul	 ecx, eax, 0
  008ba	f3 0f 11 44 0d
	8c		 movss	 DWORD PTR _p$[ebp+ecx+4], xmm0

; 544  : 		p[0].z += position->z;

  008c0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008c5	6b c8 00	 imul	 ecx, eax, 0
  008c8	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  008cb	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  008d1	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  008d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008db	6b c8 00	 imul	 ecx, eax, 0
  008de	f3 0f 11 44 0d
	90		 movss	 DWORD PTR _p$[ebp+ecx+8], xmm0

; 545  : 
; 546  : 		p[1].x = bounding_box->xmin;

  008e4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008e9	c1 e0 00	 shl	 eax, 0
  008ec	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  008ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  008f1	89 54 05 88	 mov	 DWORD PTR _p$[ebp+eax], edx

; 547  : 		p[1].y = bounding_box->ymax;

  008f5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008fa	c1 e0 00	 shl	 eax, 0
  008fd	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00900	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00903	89 54 05 8c	 mov	 DWORD PTR _p$[ebp+eax+4], edx

; 548  : 		p[1].z = bounding_box->zmin;

  00907	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0090c	c1 e0 00	 shl	 eax, 0
  0090f	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00912	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00915	89 54 05 90	 mov	 DWORD PTR _p$[ebp+eax+8], edx

; 549  : 
; 550  : 		multiply_matrix3x3_vec3d (&p[1], attitude, &p[1]);

  00919	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0091e	c1 e0 00	 shl	 eax, 0
  00921	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00925	51		 push	 ecx
  00926	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _attitude$[ebp]
  0092c	52		 push	 edx
  0092d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00932	c1 e0 00	 shl	 eax, 0
  00935	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00939	51		 push	 ecx
  0093a	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 551  : 
; 552  : 		p[1].x += position->x;

  0093f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00944	c1 e0 00	 shl	 eax, 0
  00947	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  0094a	f3 0f 10 44 05
	88		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00950	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00954	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00959	c1 e2 00	 shl	 edx, 0
  0095c	f3 0f 11 44 15
	88		 movss	 DWORD PTR _p$[ebp+edx], xmm0

; 553  : 		p[1].y += position->y;

  00962	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00967	c1 e0 00	 shl	 eax, 0
  0096a	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  0096d	f3 0f 10 44 05
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00973	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00978	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0097d	c1 e2 00	 shl	 edx, 0
  00980	f3 0f 11 44 15
	8c		 movss	 DWORD PTR _p$[ebp+edx+4], xmm0

; 554  : 		p[1].z += position->z;

  00986	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0098b	c1 e0 00	 shl	 eax, 0
  0098e	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00991	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00997	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0099c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  009a1	c1 e2 00	 shl	 edx, 0
  009a4	f3 0f 11 44 15
	90		 movss	 DWORD PTR _p$[ebp+edx+8], xmm0

; 555  : 
; 556  : 		p[2].x = bounding_box->xmax;

  009aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009af	d1 e0		 shl	 eax, 1
  009b1	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  009b4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  009b7	89 54 05 88	 mov	 DWORD PTR _p$[ebp+eax], edx

; 557  : 		p[2].y = bounding_box->ymax;

  009bb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009c0	d1 e0		 shl	 eax, 1
  009c2	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  009c5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  009c8	89 54 05 8c	 mov	 DWORD PTR _p$[ebp+eax+4], edx

; 558  : 		p[2].z = bounding_box->zmin;

  009cc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009d1	d1 e0		 shl	 eax, 1
  009d3	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  009d6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  009d9	89 54 05 90	 mov	 DWORD PTR _p$[ebp+eax+8], edx

; 559  : 
; 560  : 		multiply_matrix3x3_vec3d (&p[2], attitude, &p[2]);

  009dd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009e2	d1 e0		 shl	 eax, 1
  009e4	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  009e8	51		 push	 ecx
  009e9	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _attitude$[ebp]
  009ef	52		 push	 edx
  009f0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009f5	d1 e0		 shl	 eax, 1
  009f7	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  009fb	51		 push	 ecx
  009fc	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 561  : 
; 562  : 		p[2].x += position->x;

  00a01	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a06	d1 e0		 shl	 eax, 1
  00a08	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00a0b	f3 0f 10 44 05
	88		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00a11	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00a15	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00a1a	d1 e2		 shl	 edx, 1
  00a1c	f3 0f 11 44 15
	88		 movss	 DWORD PTR _p$[ebp+edx], xmm0

; 563  : 		p[2].y += position->y;

  00a22	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a27	d1 e0		 shl	 eax, 1
  00a29	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00a2c	f3 0f 10 44 05
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00a32	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00a37	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00a3c	d1 e2		 shl	 edx, 1
  00a3e	f3 0f 11 44 15
	8c		 movss	 DWORD PTR _p$[ebp+edx+4], xmm0

; 564  : 		p[2].z += position->z;

  00a44	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a49	d1 e0		 shl	 eax, 1
  00a4b	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00a4e	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00a54	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00a59	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00a5e	d1 e2		 shl	 edx, 1
  00a60	f3 0f 11 44 15
	90		 movss	 DWORD PTR _p$[ebp+edx+8], xmm0

; 565  : 
; 566  : 		p[3].x = bounding_box->xmax;

  00a66	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a6b	6b c8 03	 imul	 ecx, eax, 3
  00a6e	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00a71	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00a74	89 44 0d 88	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 567  : 		p[3].y = bounding_box->ymin;

  00a78	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a7d	6b c8 03	 imul	 ecx, eax, 3
  00a80	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00a83	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00a86	89 44 0d 8c	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 568  : 		p[3].z = bounding_box->zmin;

  00a8a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a8f	6b c8 03	 imul	 ecx, eax, 3
  00a92	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00a95	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00a98	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 569  : 
; 570  : 		multiply_matrix3x3_vec3d (&p[3], attitude, &p[3]);

  00a9c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aa1	6b c8 03	 imul	 ecx, eax, 3
  00aa4	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00aa8	52		 push	 edx
  00aa9	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _attitude$[ebp]
  00aaf	50		 push	 eax
  00ab0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ab5	6b d1 03	 imul	 edx, ecx, 3
  00ab8	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00abc	50		 push	 eax
  00abd	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 571  : 
; 572  : 		p[3].x += position->x;

  00ac2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ac7	6b c8 03	 imul	 ecx, eax, 3
  00aca	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00acd	f3 0f 10 44 0d
	88		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00ad3	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00ad7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00adc	6b c8 03	 imul	 ecx, eax, 3
  00adf	f3 0f 11 44 0d
	88		 movss	 DWORD PTR _p$[ebp+ecx], xmm0

; 573  : 		p[3].y += position->y;

  00ae5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aea	6b c8 03	 imul	 ecx, eax, 3
  00aed	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00af0	f3 0f 10 44 0d
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00af6	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00afb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b00	6b c8 03	 imul	 ecx, eax, 3
  00b03	f3 0f 11 44 0d
	8c		 movss	 DWORD PTR _p$[ebp+ecx+4], xmm0

; 574  : 		p[3].z += position->z;

  00b09	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b0e	6b c8 03	 imul	 ecx, eax, 3
  00b11	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00b14	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00b1a	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00b1f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b24	6b c8 03	 imul	 ecx, eax, 3
  00b27	f3 0f 11 44 0d
	90		 movss	 DWORD PTR _p$[ebp+ecx+8], xmm0

; 575  : 
; 576  : 		p[4].x = bounding_box->xmin;

  00b2d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b32	c1 e0 02	 shl	 eax, 2
  00b35	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00b38	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b3a	89 54 05 88	 mov	 DWORD PTR _p$[ebp+eax], edx

; 577  : 		p[4].y = bounding_box->ymin;

  00b3e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b43	c1 e0 02	 shl	 eax, 2
  00b46	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00b49	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00b4c	89 54 05 8c	 mov	 DWORD PTR _p$[ebp+eax+4], edx

; 578  : 		p[4].z = bounding_box->zmax;

  00b50	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b55	c1 e0 02	 shl	 eax, 2
  00b58	8b 4d 18	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00b5b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00b5e	89 54 05 90	 mov	 DWORD PTR _p$[ebp+eax+8], edx

; 579  : 
; 580  : 		multiply_matrix3x3_vec3d (&p[4], attitude, &p[4]);

  00b62	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b67	c1 e0 02	 shl	 eax, 2
  00b6a	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00b6e	51		 push	 ecx
  00b6f	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _attitude$[ebp]
  00b75	52		 push	 edx
  00b76	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b7b	c1 e0 02	 shl	 eax, 2
  00b7e	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00b82	51		 push	 ecx
  00b83	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 581  : 
; 582  : 		p[4].x += position->x;

  00b88	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b8d	c1 e0 02	 shl	 eax, 2
  00b90	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00b93	f3 0f 10 44 05
	88		 movss	 xmm0, DWORD PTR _p$[ebp+eax]
  00b99	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00b9d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00ba2	c1 e2 02	 shl	 edx, 2
  00ba5	f3 0f 11 44 15
	88		 movss	 DWORD PTR _p$[ebp+edx], xmm0

; 583  : 		p[4].y += position->y;

  00bab	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00bb0	c1 e0 02	 shl	 eax, 2
  00bb3	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00bb6	f3 0f 10 44 05
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+eax+4]
  00bbc	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00bc1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00bc6	c1 e2 02	 shl	 edx, 2
  00bc9	f3 0f 11 44 15
	8c		 movss	 DWORD PTR _p$[ebp+edx+4], xmm0

; 584  : 		p[4].z += position->z;

  00bcf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00bd4	c1 e0 02	 shl	 eax, 2
  00bd7	8b 4d f4	 mov	 ecx, DWORD PTR _position$[ebp]
  00bda	f3 0f 10 44 05
	90		 movss	 xmm0, DWORD PTR _p$[ebp+eax+8]
  00be0	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00be5	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00bea	c1 e2 02	 shl	 edx, 2
  00bed	f3 0f 11 44 15
	90		 movss	 DWORD PTR _p$[ebp+edx+8], xmm0

; 585  : 
; 586  : 		p[5].x = bounding_box->xmin;

  00bf3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00bf8	6b c8 05	 imul	 ecx, eax, 5
  00bfb	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00bfe	8b 02		 mov	 eax, DWORD PTR [edx]
  00c00	89 44 0d 88	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 587  : 		p[5].y = bounding_box->ymax;

  00c04	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c09	6b c8 05	 imul	 ecx, eax, 5
  00c0c	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00c0f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00c12	89 44 0d 8c	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 588  : 		p[5].z = bounding_box->zmax;

  00c16	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c1b	6b c8 05	 imul	 ecx, eax, 5
  00c1e	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00c21	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00c24	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 589  : 
; 590  : 		multiply_matrix3x3_vec3d (&p[5], attitude, &p[5]);

  00c28	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c2d	6b c8 05	 imul	 ecx, eax, 5
  00c30	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00c34	52		 push	 edx
  00c35	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _attitude$[ebp]
  00c3b	50		 push	 eax
  00c3c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00c41	6b d1 05	 imul	 edx, ecx, 5
  00c44	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00c48	50		 push	 eax
  00c49	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 591  : 
; 592  : 		p[5].x += position->x;

  00c4e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c53	6b c8 05	 imul	 ecx, eax, 5
  00c56	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00c59	f3 0f 10 44 0d
	88		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00c5f	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00c63	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c68	6b c8 05	 imul	 ecx, eax, 5
  00c6b	f3 0f 11 44 0d
	88		 movss	 DWORD PTR _p$[ebp+ecx], xmm0

; 593  : 		p[5].y += position->y;

  00c71	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c76	6b c8 05	 imul	 ecx, eax, 5
  00c79	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00c7c	f3 0f 10 44 0d
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00c82	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00c87	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c8c	6b c8 05	 imul	 ecx, eax, 5
  00c8f	f3 0f 11 44 0d
	8c		 movss	 DWORD PTR _p$[ebp+ecx+4], xmm0

; 594  : 		p[5].z += position->z;

  00c95	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c9a	6b c8 05	 imul	 ecx, eax, 5
  00c9d	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00ca0	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00ca6	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00cab	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cb0	6b c8 05	 imul	 ecx, eax, 5
  00cb3	f3 0f 11 44 0d
	90		 movss	 DWORD PTR _p$[ebp+ecx+8], xmm0

; 595  : 
; 596  : 		p[6].x = bounding_box->xmax;

  00cb9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cbe	6b c8 06	 imul	 ecx, eax, 6
  00cc1	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00cc4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00cc7	89 44 0d 88	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 597  : 		p[6].y = bounding_box->ymax;

  00ccb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cd0	6b c8 06	 imul	 ecx, eax, 6
  00cd3	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00cd6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00cd9	89 44 0d 8c	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 598  : 		p[6].z = bounding_box->zmax;

  00cdd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ce2	6b c8 06	 imul	 ecx, eax, 6
  00ce5	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00ce8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00ceb	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 599  : 
; 600  : 		multiply_matrix3x3_vec3d (&p[6], attitude, &p[6]);

  00cef	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cf4	6b c8 06	 imul	 ecx, eax, 6
  00cf7	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00cfb	52		 push	 edx
  00cfc	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _attitude$[ebp]
  00d02	50		 push	 eax
  00d03	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00d08	6b d1 06	 imul	 edx, ecx, 6
  00d0b	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00d0f	50		 push	 eax
  00d10	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 601  : 
; 602  : 		p[6].x += position->x;

  00d15	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d1a	6b c8 06	 imul	 ecx, eax, 6
  00d1d	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00d20	f3 0f 10 44 0d
	88		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00d26	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00d2a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d2f	6b c8 06	 imul	 ecx, eax, 6
  00d32	f3 0f 11 44 0d
	88		 movss	 DWORD PTR _p$[ebp+ecx], xmm0

; 603  : 		p[6].y += position->y;

  00d38	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d3d	6b c8 06	 imul	 ecx, eax, 6
  00d40	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00d43	f3 0f 10 44 0d
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00d49	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00d4e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d53	6b c8 06	 imul	 ecx, eax, 6
  00d56	f3 0f 11 44 0d
	8c		 movss	 DWORD PTR _p$[ebp+ecx+4], xmm0

; 604  : 		p[6].z += position->z;

  00d5c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d61	6b c8 06	 imul	 ecx, eax, 6
  00d64	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00d67	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00d6d	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00d72	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d77	6b c8 06	 imul	 ecx, eax, 6
  00d7a	f3 0f 11 44 0d
	90		 movss	 DWORD PTR _p$[ebp+ecx+8], xmm0

; 605  : 
; 606  : 		p[7].x = bounding_box->xmax;

  00d80	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d85	6b c8 07	 imul	 ecx, eax, 7
  00d88	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00d8b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d8e	89 44 0d 88	 mov	 DWORD PTR _p$[ebp+ecx], eax

; 607  : 		p[7].y = bounding_box->ymin;

  00d92	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d97	6b c8 07	 imul	 ecx, eax, 7
  00d9a	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00d9d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00da0	89 44 0d 8c	 mov	 DWORD PTR _p$[ebp+ecx+4], eax

; 608  : 		p[7].z = bounding_box->zmax;

  00da4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00da9	6b c8 07	 imul	 ecx, eax, 7
  00dac	8b 55 18	 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00daf	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00db2	89 44 0d 90	 mov	 DWORD PTR _p$[ebp+ecx+8], eax

; 609  : 
; 610  : 		multiply_matrix3x3_vec3d (&p[7], attitude, &p[7]);

  00db6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00dbb	6b c8 07	 imul	 ecx, eax, 7
  00dbe	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00dc2	52		 push	 edx
  00dc3	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _attitude$[ebp]
  00dc9	50		 push	 eax
  00dca	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00dcf	6b d1 07	 imul	 edx, ecx, 7
  00dd2	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00dd6	50		 push	 eax
  00dd7	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 611  : 
; 612  : 		p[7].x += position->x;

  00ddc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00de1	6b c8 07	 imul	 ecx, eax, 7
  00de4	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00de7	f3 0f 10 44 0d
	88		 movss	 xmm0, DWORD PTR _p$[ebp+ecx]
  00ded	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00df1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00df6	6b c8 07	 imul	 ecx, eax, 7
  00df9	f3 0f 11 44 0d
	88		 movss	 DWORD PTR _p$[ebp+ecx], xmm0

; 613  : 		p[7].y += position->y;

  00dff	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e04	6b c8 07	 imul	 ecx, eax, 7
  00e07	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00e0a	f3 0f 10 44 0d
	8c		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+4]
  00e10	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  00e15	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e1a	6b c8 07	 imul	 ecx, eax, 7
  00e1d	f3 0f 11 44 0d
	8c		 movss	 DWORD PTR _p$[ebp+ecx+4], xmm0

; 614  : 		p[7].z += position->z;

  00e23	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e28	6b c8 07	 imul	 ecx, eax, 7
  00e2b	8b 55 f4	 mov	 edx, DWORD PTR _position$[ebp]
  00e2e	f3 0f 10 44 0d
	90		 movss	 xmm0, DWORD PTR _p$[ebp+ecx+8]
  00e34	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00e39	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e3e	6b c8 07	 imul	 ecx, eax, 7
  00e41	f3 0f 11 44 0d
	90		 movss	 DWORD PTR _p$[ebp+ecx+8], xmm0

; 615  : 
; 616  : 		//
; 617  : 		// collision test each face of bounding box
; 618  : 		//
; 619  : 
; 620  : 		if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p[0], &p[1], &p[2], &p[3], source_intercept_point, face_normal))

  00e47	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00e4a	50		 push	 eax
  00e4b	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00e4e	51		 push	 ecx
  00e4f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00e54	6b c2 03	 imul	 eax, edx, 3
  00e57	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00e5b	51		 push	 ecx
  00e5c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00e61	d1 e2		 shl	 edx, 1
  00e63	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00e67	50		 push	 eax
  00e68	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00e6d	c1 e1 00	 shl	 ecx, 0
  00e70	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00e74	52		 push	 edx
  00e75	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e7a	6b c8 00	 imul	 ecx, eax, 0
  00e7d	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00e81	52		 push	 edx
  00e82	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00e85	50		 push	 eax
  00e86	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00e89	51		 push	 ecx
  00e8a	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  00e8f	85 c0		 test	 eax, eax
  00e91	74 0a		 je	 SHORT $LN23@accurate_s

; 621  : 		{
; 622  : 			return (TRUE);

  00e93	b8 01 00 00 00	 mov	 eax, 1
  00e98	e9 ad 01 00 00	 jmp	 $LN1@accurate_s
$LN23@accurate_s:

; 623  : 		}
; 624  : 
; 625  : 		if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p[3], &p[2], &p[6], &p[7], source_intercept_point, face_normal))

  00e9d	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00ea0	50		 push	 eax
  00ea1	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00ea4	51		 push	 ecx
  00ea5	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00eaa	6b c2 07	 imul	 eax, edx, 7
  00ead	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00eb1	51		 push	 ecx
  00eb2	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00eb7	6b c2 06	 imul	 eax, edx, 6
  00eba	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00ebe	51		 push	 ecx
  00ebf	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00ec4	d1 e2		 shl	 edx, 1
  00ec6	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00eca	50		 push	 eax
  00ecb	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ed0	6b d1 03	 imul	 edx, ecx, 3
  00ed3	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00ed7	50		 push	 eax
  00ed8	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  00edb	51		 push	 ecx
  00edc	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  00edf	52		 push	 edx
  00ee0	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  00ee5	85 c0		 test	 eax, eax
  00ee7	74 0a		 je	 SHORT $LN24@accurate_s

; 626  : 		{
; 627  : 			return (TRUE);

  00ee9	b8 01 00 00 00	 mov	 eax, 1
  00eee	e9 57 01 00 00	 jmp	 $LN1@accurate_s
$LN24@accurate_s:

; 628  : 		}
; 629  : 
; 630  : 		if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p[7], &p[6], &p[5], &p[4], source_intercept_point, face_normal))

  00ef3	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00ef6	50		 push	 eax
  00ef7	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00efa	51		 push	 ecx
  00efb	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00f00	c1 e2 02	 shl	 edx, 2
  00f03	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00f07	50		 push	 eax
  00f08	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f0d	6b d1 05	 imul	 edx, ecx, 5
  00f10	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00f14	50		 push	 eax
  00f15	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f1a	6b d1 06	 imul	 edx, ecx, 6
  00f1d	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00f21	50		 push	 eax
  00f22	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f27	6b d1 07	 imul	 edx, ecx, 7
  00f2a	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00f2e	50		 push	 eax
  00f2f	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  00f32	51		 push	 ecx
  00f33	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  00f36	52		 push	 edx
  00f37	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  00f3c	85 c0		 test	 eax, eax
  00f3e	74 0a		 je	 SHORT $LN25@accurate_s

; 631  : 		{
; 632  : 			return (TRUE);

  00f40	b8 01 00 00 00	 mov	 eax, 1
  00f45	e9 00 01 00 00	 jmp	 $LN1@accurate_s
$LN25@accurate_s:

; 633  : 		}
; 634  : 
; 635  : 		if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p[4], &p[5], &p[1], &p[0], source_intercept_point, face_normal))

  00f4a	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00f4d	50		 push	 eax
  00f4e	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00f51	51		 push	 ecx
  00f52	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00f57	6b c2 00	 imul	 eax, edx, 0
  00f5a	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  00f5e	51		 push	 ecx
  00f5f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00f64	c1 e2 00	 shl	 edx, 0
  00f67	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00f6b	50		 push	 eax
  00f6c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f71	6b d1 05	 imul	 edx, ecx, 5
  00f74	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00f78	50		 push	 eax
  00f79	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f7e	c1 e1 02	 shl	 ecx, 2
  00f81	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00f85	52		 push	 edx
  00f86	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00f89	50		 push	 eax
  00f8a	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00f8d	51		 push	 ecx
  00f8e	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  00f93	85 c0		 test	 eax, eax
  00f95	74 0a		 je	 SHORT $LN26@accurate_s

; 636  : 		{
; 637  : 			return (TRUE);

  00f97	b8 01 00 00 00	 mov	 eax, 1
  00f9c	e9 a9 00 00 00	 jmp	 $LN1@accurate_s
$LN26@accurate_s:

; 638  : 		}
; 639  : 
; 640  : 		if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p[1], &p[5], &p[6], &p[2], source_intercept_point, face_normal))

  00fa1	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00fa4	50		 push	 eax
  00fa5	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00fa8	51		 push	 ecx
  00fa9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00fae	d1 e2		 shl	 edx, 1
  00fb0	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00fb4	50		 push	 eax
  00fb5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00fba	6b d1 06	 imul	 edx, ecx, 6
  00fbd	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00fc1	50		 push	 eax
  00fc2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00fc7	6b d1 05	 imul	 edx, ecx, 5
  00fca	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  00fce	50		 push	 eax
  00fcf	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00fd4	c1 e1 00	 shl	 ecx, 0
  00fd7	8d 54 0d 88	 lea	 edx, DWORD PTR _p$[ebp+ecx]
  00fdb	52		 push	 edx
  00fdc	8b 45 10	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00fdf	50		 push	 eax
  00fe0	8b 4d 0c	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00fe3	51		 push	 ecx
  00fe4	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  00fe9	85 c0		 test	 eax, eax
  00feb	74 07		 je	 SHORT $LN27@accurate_s

; 641  : 		{
; 642  : 			return (TRUE);

  00fed	b8 01 00 00 00	 mov	 eax, 1
  00ff2	eb 56		 jmp	 SHORT $LN1@accurate_s
$LN27@accurate_s:

; 643  : 		}
; 644  : 
; 645  : 		if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p[0], &p[4], &p[7], &p[3], source_intercept_point, face_normal))

  00ff4	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00ff7	50		 push	 eax
  00ff8	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00ffb	51		 push	 ecx
  00ffc	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  01001	6b c2 03	 imul	 eax, edx, 3
  01004	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  01008	51		 push	 ecx
  01009	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0100e	6b c2 07	 imul	 eax, edx, 7
  01011	8d 4c 05 88	 lea	 ecx, DWORD PTR _p$[ebp+eax]
  01015	51		 push	 ecx
  01016	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0101b	c1 e2 02	 shl	 edx, 2
  0101e	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  01022	50		 push	 eax
  01023	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01028	6b d1 00	 imul	 edx, ecx, 0
  0102b	8d 44 15 88	 lea	 eax, DWORD PTR _p$[ebp+edx]
  0102f	50		 push	 eax
  01030	8b 4d 10	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  01033	51		 push	 ecx
  01034	8b 55 0c	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01037	52		 push	 edx
  01038	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  0103d	85 c0		 test	 eax, eax
  0103f	74 07		 je	 SHORT $LN28@accurate_s

; 646  : 		{
; 647  : 			return (TRUE);

  01041	b8 01 00 00 00	 mov	 eax, 1
  01046	eb 02		 jmp	 SHORT $LN1@accurate_s
$LN28@accurate_s:

; 648  : 		}
; 649  : 	}
; 650  : 
; 651  : 	return (FALSE);

  01048	33 c0		 xor	 eax, eax
$LN1@accurate_s:

; 652  : }

  0104a	5f		 pop	 edi
  0104b	5e		 pop	 esi
  0104c	5b		 pop	 ebx
  0104d	8b e5		 mov	 esp, ebp
  0104f	5d		 pop	 ebp
  01050	c2 1c 00	 ret	 28			; 0000001cH
?accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z ENDP ; accurate_stationary_bounding_box_collision_test
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z
_TEXT	SEGMENT
_source_old_position$ = 8				; size = 4
_source_new_position$ = 12				; size = 4
_p1$ = 16						; size = 4
_p2$ = 20						; size = 4
_p3$ = 24						; size = 4
_p4$ = 28						; size = 4
_source_intercept_point$ = 32				; size = 4
_face_normal$ = 36					; size = 4
?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z PROC ; get_3d_line_quad_face_intersection, COMDAT

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 370  : 	ASSERT (source_old_position);

  00009	83 7d 08 00	 cmp	 DWORD PTR _source_old_position$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_lin
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GALEKPNG@source_old_position@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_lin:

; 371  : 
; 372  : 	ASSERT (source_new_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_new_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_lin
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHJPOOAI@source_new_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_lin:

; 373  : 
; 374  : 	ASSERT (p1);

  00045	83 7d 10 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_3d_lin
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  00050	83 c0 05	 add	 eax, 5
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02JCBCEJAP@p1@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_lin:

; 375  : 
; 376  : 	ASSERT (p2);

  00063	83 7d 14 00	 cmp	 DWORD PTR _p2$[ebp], 0
  00067	75 18		 jne	 SHORT $LN5@get_3d_lin
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  0006e	83 c0 07	 add	 eax, 7
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_02LJDPBKMM@p2@
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_3d_lin:

; 377  : 
; 378  : 	ASSERT (p3);

  00081	83 7d 18 00	 cmp	 DWORD PTR _p3$[ebp], 0
  00085	75 18		 jne	 SHORT $LN6@get_3d_lin
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  0008c	83 c0 09	 add	 eax, 9
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_02KACECLIN@p3@
  0009a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_3d_lin:

; 379  : 
; 380  : 	ASSERT (p4);

  0009f	83 7d 1c 00	 cmp	 DWORD PTR _p4$[ebp], 0
  000a3	75 18		 jne	 SHORT $LN7@get_3d_lin
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  000aa	83 c0 0b	 add	 eax, 11			; 0000000bH
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_02OPGFLNEK@p4@
  000b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_3d_lin:

; 381  : 
; 382  : 	ASSERT (source_intercept_point);

  000bd	83 7d 20 00	 cmp	 DWORD PTR _source_intercept_point$[ebp], 0
  000c1	75 18		 jne	 SHORT $LN8@get_3d_lin
  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  000c8	83 c0 0d	 add	 eax, 13			; 0000000dH
  000cb	50		 push	 eax
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@ELIBBDFL@source_intercept_point@
  000d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@get_3d_lin:

; 383  : 
; 384  : 	ASSERT (face_normal);

  000db	83 7d 24 00	 cmp	 DWORD PTR _face_normal$[ebp], 0
  000df	75 18		 jne	 SHORT $LN9@get_3d_lin
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z@4JA
  000e6	83 c0 0f	 add	 eax, 15			; 0000000fH
  000e9	50		 push	 eax
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JKBFLAII@face_normal@
  000f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@get_3d_lin:

; 385  : 
; 386  : 	if (get_3d_line_quad_intersection (source_old_position, source_new_position, p1, p2, p3, p4, source_intercept_point, face_normal))

  000f9	8b 45 24	 mov	 eax, DWORD PTR _face_normal$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d 20	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00100	51		 push	 ecx
  00101	8b 55 1c	 mov	 edx, DWORD PTR _p4$[ebp]
  00104	52		 push	 edx
  00105	8b 45 18	 mov	 eax, DWORD PTR _p3$[ebp]
  00108	50		 push	 eax
  00109	8b 4d 14	 mov	 ecx, DWORD PTR _p2$[ebp]
  0010c	51		 push	 ecx
  0010d	8b 55 10	 mov	 edx, DWORD PTR _p1$[ebp]
  00110	52		 push	 edx
  00111	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00114	50		 push	 eax
  00115	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 ?get_3d_line_quad_intersection@@YGHPBUVEC3D@@00000PAU1@1@Z ; get_3d_line_quad_intersection
  0011e	85 c0		 test	 eax, eax
  00120	0f 84 c9 00 00
	00		 je	 $LN10@get_3d_lin

; 387  : 	{
; 388  : 		if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  00126	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  0012d	0f 84 b2 00 00
	00		 je	 $LN11@get_3d_lin
  00133	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  0013a	0f 85 a5 00 00
	00		 jne	 $LN11@get_3d_lin

; 389  : 		{
; 390  : 			create_debug_3d_line (p1, p2, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  00140	51		 push	 ecx
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00153	50		 push	 eax
  00154	8b 4d 14	 mov	 ecx, DWORD PTR _p2$[ebp]
  00157	51		 push	 ecx
  00158	8b 55 10	 mov	 edx, DWORD PTR _p1$[ebp]
  0015b	52		 push	 edx
  0015c	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 391  : 			create_debug_3d_line (p2, p3, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  00161	51		 push	 ecx
  00162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0016a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00174	50		 push	 eax
  00175	8b 4d 18	 mov	 ecx, DWORD PTR _p3$[ebp]
  00178	51		 push	 ecx
  00179	8b 55 14	 mov	 edx, DWORD PTR _p2$[ebp]
  0017c	52		 push	 edx
  0017d	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 392  : 			create_debug_3d_line (p3, p4, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  00182	51		 push	 ecx
  00183	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0018b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00190	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00195	50		 push	 eax
  00196	8b 4d 1c	 mov	 ecx, DWORD PTR _p4$[ebp]
  00199	51		 push	 ecx
  0019a	8b 55 18	 mov	 edx, DWORD PTR _p3$[ebp]
  0019d	52		 push	 edx
  0019e	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 393  : 			create_debug_3d_line (p4, p1, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  001b6	50		 push	 eax
  001b7	8b 4d 10	 mov	 ecx, DWORD PTR _p1$[ebp]
  001ba	51		 push	 ecx
  001bb	8b 55 1c	 mov	 edx, DWORD PTR _p4$[ebp]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 394  : 			create_debug_3d_line (p1, p3, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  001c4	51		 push	 ecx
  001c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  001cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  001d7	50		 push	 eax
  001d8	8b 4d 18	 mov	 ecx, DWORD PTR _p3$[ebp]
  001db	51		 push	 ecx
  001dc	8b 55 10	 mov	 edx, DWORD PTR _p1$[ebp]
  001df	52		 push	 edx
  001e0	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line
$LN11@get_3d_lin:

; 395  : 		}
; 396  : 
; 397  : 		return (TRUE);

  001e5	b8 01 00 00 00	 mov	 eax, 1
  001ea	e9 c1 00 00 00	 jmp	 $LN1@get_3d_lin
$LN10@get_3d_lin:

; 398  : 	}
; 399  : 
; 400  : 	if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  001ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  001f6	0f 84 b2 00 00
	00		 je	 $LN12@get_3d_lin
  001fc	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  00203	0f 85 a5 00 00
	00		 jne	 $LN12@get_3d_lin

; 401  : 	{
; 402  : 		create_debug_3d_line (p1, p2, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  00209	51		 push	 ecx
  0020a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00212	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00217	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  0021c	50		 push	 eax
  0021d	8b 4d 14	 mov	 ecx, DWORD PTR _p2$[ebp]
  00220	51		 push	 ecx
  00221	8b 55 10	 mov	 edx, DWORD PTR _p1$[ebp]
  00224	52		 push	 edx
  00225	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 403  : 		create_debug_3d_line (p2, p3, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  0023d	50		 push	 eax
  0023e	8b 4d 18	 mov	 ecx, DWORD PTR _p3$[ebp]
  00241	51		 push	 ecx
  00242	8b 55 14	 mov	 edx, DWORD PTR _p2$[ebp]
  00245	52		 push	 edx
  00246	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 404  : 		create_debug_3d_line (p3, p4, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  0024b	51		 push	 ecx
  0024c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00254	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  0025e	50		 push	 eax
  0025f	8b 4d 1c	 mov	 ecx, DWORD PTR _p4$[ebp]
  00262	51		 push	 ecx
  00263	8b 55 18	 mov	 edx, DWORD PTR _p3$[ebp]
  00266	52		 push	 edx
  00267	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 405  : 		create_debug_3d_line (p4, p1, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  0026c	51		 push	 ecx
  0026d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  0027f	50		 push	 eax
  00280	8b 4d 10	 mov	 ecx, DWORD PTR _p1$[ebp]
  00283	51		 push	 ecx
  00284	8b 55 1c	 mov	 edx, DWORD PTR _p4$[ebp]
  00287	52		 push	 edx
  00288	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 406  : 		create_debug_3d_line (p1, p3, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  0028d	51		 push	 ecx
  0028e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00296	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  002a0	50		 push	 eax
  002a1	8b 4d 18	 mov	 ecx, DWORD PTR _p3$[ebp]
  002a4	51		 push	 ecx
  002a5	8b 55 10	 mov	 edx, DWORD PTR _p1$[ebp]
  002a8	52		 push	 edx
  002a9	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line
$LN12@get_3d_lin:

; 407  : 	}
; 408  : 
; 409  : 	return (FALSE);

  002ae	33 c0		 xor	 eax, eax
$LN1@get_3d_lin:

; 410  : }

  002b0	5f		 pop	 edi
  002b1	5e		 pop	 esi
  002b2	5b		 pop	 ebx
  002b3	8b e5		 mov	 esp, ebp
  002b5	5d		 pop	 ebp
  002b6	c2 20 00	 ret	 32			; 00000020H
?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ENDP ; get_3d_line_quad_face_intersection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z
_TEXT	SEGMENT
_source_old_position$ = 8				; size = 4
_source_new_position$ = 12				; size = 4
_p1$ = 16						; size = 4
_p2$ = 20						; size = 4
_p3$ = 24						; size = 4
_source_intercept_point$ = 28				; size = 4
_face_normal$ = 32					; size = 4
?get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z PROC ; get_3d_line_triangle_face_intersection, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 318  : 	ASSERT (source_old_position);

  00009	83 7d 08 00	 cmp	 DWORD PTR _source_old_position$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_lin
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GALEKPNG@source_old_position@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_lin:

; 319  : 
; 320  : 	ASSERT (source_new_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_new_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_lin
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHJPOOAI@source_new_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_lin:

; 321  : 
; 322  : 	ASSERT (p1);

  00045	83 7d 10 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_3d_lin
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
  00050	83 c0 05	 add	 eax, 5
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02JCBCEJAP@p1@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_3d_lin:

; 323  : 
; 324  : 	ASSERT (p2);

  00063	83 7d 14 00	 cmp	 DWORD PTR _p2$[ebp], 0
  00067	75 18		 jne	 SHORT $LN5@get_3d_lin
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
  0006e	83 c0 07	 add	 eax, 7
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_02LJDPBKMM@p2@
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_3d_lin:

; 325  : 
; 326  : 	ASSERT (p3);

  00081	83 7d 18 00	 cmp	 DWORD PTR _p3$[ebp], 0
  00085	75 18		 jne	 SHORT $LN6@get_3d_lin
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
  0008c	83 c0 09	 add	 eax, 9
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_02KACECLIN@p3@
  0009a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_3d_lin:

; 327  : 
; 328  : 	ASSERT (source_intercept_point);

  0009f	83 7d 1c 00	 cmp	 DWORD PTR _source_intercept_point$[ebp], 0
  000a3	75 18		 jne	 SHORT $LN7@get_3d_lin
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
  000aa	83 c0 0b	 add	 eax, 11			; 0000000bH
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@ELIBBDFL@source_intercept_point@
  000b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_3d_lin:

; 329  : 
; 330  : 	ASSERT (face_normal);

  000bd	83 7d 20 00	 cmp	 DWORD PTR _face_normal$[ebp], 0
  000c1	75 18		 jne	 SHORT $LN8@get_3d_lin
  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z@4JA
  000c8	83 c0 0d	 add	 eax, 13			; 0000000dH
  000cb	50		 push	 eax
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JKBFLAII@face_normal@
  000d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@get_3d_lin:

; 331  : 
; 332  : 	if (get_3d_line_triangle_intersection (source_old_position, source_new_position, p1, p2, p3, source_intercept_point, face_normal))

  000db	8b 45 20	 mov	 eax, DWORD PTR _face_normal$[ebp]
  000de	50		 push	 eax
  000df	8b 4d 1c	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  000e2	51		 push	 ecx
  000e3	8b 55 18	 mov	 edx, DWORD PTR _p3$[ebp]
  000e6	52		 push	 edx
  000e7	8b 45 14	 mov	 eax, DWORD PTR _p2$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d 10	 mov	 ecx, DWORD PTR _p1$[ebp]
  000ee	51		 push	 ecx
  000ef	8b 55 0c	 mov	 edx, DWORD PTR _source_new_position$[ebp]
  000f2	52		 push	 edx
  000f3	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?get_3d_line_triangle_intersection@@YGHPBUVEC3D@@0000PAU1@1@Z ; get_3d_line_triangle_intersection
  000fc	85 c0		 test	 eax, eax
  000fe	74 7c		 je	 SHORT $LN9@get_3d_lin

; 333  : 	{
; 334  : 		if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  00100	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  00107	74 6c		 je	 SHORT $LN10@get_3d_lin
  00109	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  00110	75 63		 jne	 SHORT $LN10@get_3d_lin

; 335  : 		{
; 336  : 			create_debug_3d_line (p1, p2, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  00112	51		 push	 ecx
  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0011b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00125	50		 push	 eax
  00126	8b 4d 14	 mov	 ecx, DWORD PTR _p2$[ebp]
  00129	51		 push	 ecx
  0012a	8b 55 10	 mov	 edx, DWORD PTR _p1$[ebp]
  0012d	52		 push	 edx
  0012e	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 337  : 			create_debug_3d_line (p2, p3, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  00133	51		 push	 ecx
  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00146	50		 push	 eax
  00147	8b 4d 18	 mov	 ecx, DWORD PTR _p3$[ebp]
  0014a	51		 push	 ecx
  0014b	8b 55 14	 mov	 edx, DWORD PTR _p2$[ebp]
  0014e	52		 push	 edx
  0014f	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 338  : 			create_debug_3d_line (p3, p1, COLLISION_FACE_HIT_COLOUR, collision_box_lifetime);

  00154	51		 push	 ecx
  00155	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00167	50		 push	 eax
  00168	8b 4d 10	 mov	 ecx, DWORD PTR _p1$[ebp]
  0016b	51		 push	 ecx
  0016c	8b 55 18	 mov	 edx, DWORD PTR _p3$[ebp]
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line
$LN10@get_3d_lin:

; 339  : 		}
; 340  : 
; 341  : 		return (TRUE);

  00175	b8 01 00 00 00	 mov	 eax, 1
  0017a	eb 77		 jmp	 SHORT $LN1@get_3d_lin
$LN9@get_3d_lin:

; 342  : 	}
; 343  : 
; 344  : 	if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  0017c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  00183	74 6c		 je	 SHORT $LN11@get_3d_lin
  00185	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  0018c	75 63		 jne	 SHORT $LN11@get_3d_lin

; 345  : 	{
; 346  : 		create_debug_3d_line (p1, p2, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  0018e	51		 push	 ecx
  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  001a1	50		 push	 eax
  001a2	8b 4d 14	 mov	 ecx, DWORD PTR _p2$[ebp]
  001a5	51		 push	 ecx
  001a6	8b 55 10	 mov	 edx, DWORD PTR _p1$[ebp]
  001a9	52		 push	 edx
  001aa	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 347  : 		create_debug_3d_line (p2, p3, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  001af	51		 push	 ecx
  001b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  001b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  001c2	50		 push	 eax
  001c3	8b 4d 18	 mov	 ecx, DWORD PTR _p3$[ebp]
  001c6	51		 push	 ecx
  001c7	8b 55 14	 mov	 edx, DWORD PTR _p2$[ebp]
  001ca	52		 push	 edx
  001cb	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 348  : 		create_debug_3d_line (p3, p1, COLLISION_FACE_MISS_COLOUR, collision_box_lifetime);

  001d0	51		 push	 ecx
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  001e3	50		 push	 eax
  001e4	8b 4d 10	 mov	 ecx, DWORD PTR _p1$[ebp]
  001e7	51		 push	 ecx
  001e8	8b 55 18	 mov	 edx, DWORD PTR _p3$[ebp]
  001eb	52		 push	 edx
  001ec	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line
$LN11@get_3d_lin:

; 349  : 	}
; 350  : 
; 351  : 	return (FALSE);

  001f1	33 c0		 xor	 eax, eax
$LN1@get_3d_lin:

; 352  : }

  001f3	5f		 pop	 edi
  001f4	5e		 pop	 esi
  001f5	5b		 pop	 ebx
  001f6	8b e5		 mov	 esp, ebp
  001f8	5d		 pop	 ebp
  001f9	c2 1c 00	 ret	 28			; 0000001cH
?get_3d_line_triangle_face_intersection@@YGHPAUVEC3D@@000000@Z ENDP ; get_3d_line_triangle_face_intersection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z
_TEXT	SEGMENT
_p2$ = -24						; size = 12
_p1$ = -12						; size = 12
_min_position$ = 8					; size = 4
_max_position$ = 12					; size = 4
_colour$ = 16						; size = 4
?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z PROC	; draw_min_max_box, COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 174  : 	vec3d
; 175  : 		p1,
; 176  : 		p2;
; 177  : 
; 178  : 	ASSERT (min_position);

  00009	83 7d 08 00	 cmp	 DWORD PTR _min_position$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_min_m
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPIIOEGL@min_position@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_min_m:

; 179  : 
; 180  : 	ASSERT (max_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _max_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_min_m
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z@4JA
  00032	83 c0 07	 add	 eax, 7
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PPMHJMBN@max_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_min_m:

; 181  : 
; 182  : 	p1.x = min_position->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 183  : 	p1.y = min_position->y;

  00051	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00054	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00059	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 184  : 	p1.z = min_position->z;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00061	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00066	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 185  : 
; 186  : 	p2.x = min_position->x;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  0006e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00072	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 187  : 	p2.y = max_position->y;

  00077	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0007a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0007f	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 188  : 	p2.z = min_position->z;

  00084	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00087	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0008c	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 189  : 
; 190  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  000a6	51		 push	 ecx
  000a7	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 191  : 
; 192  : 	p1.x = min_position->x;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  000b3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b7	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 193  : 	p1.y = max_position->y;

  000bc	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  000bf	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000c4	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 194  : 	p1.z = min_position->z;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  000cc	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000d1	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 195  : 
; 196  : 	p2.x = max_position->x;

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  000d9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000dd	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 197  : 	p2.y = max_position->y;

  000e2	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  000e5	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ea	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 198  : 	p2.z = min_position->z;

  000ef	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  000f2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000f7	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 199  : 
; 200  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  000fc	51		 push	 ecx
  000fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0010d	50		 push	 eax
  0010e	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  00111	51		 push	 ecx
  00112	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 201  : 
; 202  : 	p1.x = max_position->x;

  0011b	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0011e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00122	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 203  : 	p1.y = max_position->y;

  00127	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0012a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0012f	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 204  : 	p1.z = min_position->z;

  00134	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00137	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0013c	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 205  : 
; 206  : 	p2.x = max_position->x;

  00141	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00144	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00148	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 207  : 	p2.y = min_position->y;

  0014d	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00150	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00155	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 208  : 	p2.z = min_position->z;

  0015a	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  0015d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00162	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 209  : 
; 210  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  00167	51		 push	 ecx
  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  00178	50		 push	 eax
  00179	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  0017c	51		 push	 ecx
  0017d	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  00180	52		 push	 edx
  00181	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 211  : 
; 212  : 	p1.x = max_position->x;

  00186	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00189	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0018d	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 213  : 	p1.y = min_position->y;

  00192	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00195	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0019a	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 214  : 	p1.z = min_position->z;

  0019f	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  001a2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001a7	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 215  : 
; 216  : 	p2.x = min_position->x;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  001af	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001b3	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 217  : 	p2.y = min_position->y;

  001b8	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  001bb	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001c0	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 218  : 	p2.z = min_position->z;

  001c5	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  001c8	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001cd	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 219  : 
; 220  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  001d2	51		 push	 ecx
  001d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  001e3	50		 push	 eax
  001e4	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  001e7	51		 push	 ecx
  001e8	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  001eb	52		 push	 edx
  001ec	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 221  : 
; 222  : 	p1.x = min_position->x;

  001f1	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  001f4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f8	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 223  : 	p1.y = min_position->y;

  001fd	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00200	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00205	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 224  : 	p1.z = max_position->z;

  0020a	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0020d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00212	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 225  : 
; 226  : 	p2.x = min_position->x;

  00217	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  0021a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0021e	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 227  : 	p2.y = max_position->y;

  00223	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00226	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0022b	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 228  : 	p2.z = max_position->z;

  00230	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00233	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00238	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 229  : 
; 230  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  0023d	51		 push	 ecx
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0024e	50		 push	 eax
  0024f	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  00252	51		 push	 ecx
  00253	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  00256	52		 push	 edx
  00257	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 231  : 
; 232  : 	p1.x = min_position->x;

  0025c	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  0025f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00263	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 233  : 	p1.y = max_position->y;

  00268	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0026b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00270	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 234  : 	p1.z = max_position->z;

  00275	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00278	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0027d	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 235  : 
; 236  : 	p2.x = max_position->x;

  00282	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00285	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00289	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 237  : 	p2.y = max_position->y;

  0028e	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00291	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00296	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 238  : 	p2.z = max_position->z;

  0029b	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0029e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  002a3	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 239  : 
; 240  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  002a8	51		 push	 ecx
  002a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  002b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b6	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  002b9	50		 push	 eax
  002ba	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  002bd	51		 push	 ecx
  002be	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  002c1	52		 push	 edx
  002c2	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 241  : 
; 242  : 	p1.x = max_position->x;

  002c7	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  002ca	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 243  : 	p1.y = max_position->y;

  002d3	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  002d6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002db	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 244  : 	p1.z = max_position->z;

  002e0	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  002e3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  002e8	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 245  : 
; 246  : 	p2.x = max_position->x;

  002ed	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  002f0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002f4	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 247  : 	p2.y = min_position->y;

  002f9	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  002fc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00301	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 248  : 	p2.z = max_position->z;

  00306	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00309	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0030e	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 249  : 
; 250  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  00313	51		 push	 ecx
  00314	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0031c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00321	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  00324	50		 push	 eax
  00325	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  00328	51		 push	 ecx
  00329	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  0032c	52		 push	 edx
  0032d	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 251  : 
; 252  : 	p1.x = max_position->x;

  00332	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00335	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00339	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 253  : 	p1.y = min_position->y;

  0033e	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00341	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00346	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 254  : 	p1.z = max_position->z;

  0034b	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0034e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00353	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 255  : 
; 256  : 	p2.x = min_position->x;

  00358	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  0035b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0035f	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 257  : 	p2.y = min_position->y;

  00364	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00367	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0036c	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 258  : 	p2.z = max_position->z;

  00371	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00374	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00379	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 259  : 
; 260  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  0037e	51		 push	 ecx
  0037f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00387	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038c	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0038f	50		 push	 eax
  00390	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  00393	51		 push	 ecx
  00394	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  00397	52		 push	 edx
  00398	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 261  : 
; 262  : 	p1.x = min_position->x;

  0039d	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  003a0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003a4	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 263  : 	p1.y = min_position->y;

  003a9	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  003ac	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  003b1	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 264  : 	p1.z = min_position->z;

  003b6	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  003b9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003be	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 265  : 
; 266  : 	p2.x = min_position->x;

  003c3	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  003c6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003ca	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 267  : 	p2.y = min_position->y;

  003cf	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  003d2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  003d7	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 268  : 	p2.z = max_position->z;

  003dc	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  003df	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003e4	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 269  : 
; 270  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  003e9	51		 push	 ecx
  003ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  003f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f7	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  003fa	50		 push	 eax
  003fb	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  003fe	51		 push	 ecx
  003ff	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  00402	52		 push	 edx
  00403	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 271  : 
; 272  : 	p1.x = min_position->x;

  00408	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  0040b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0040f	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 273  : 	p1.y = max_position->y;

  00414	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00417	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0041c	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 274  : 	p1.z = min_position->z;

  00421	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00424	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00429	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 275  : 
; 276  : 	p2.x = min_position->x;

  0042e	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00431	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00435	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 277  : 	p2.y = max_position->y;

  0043a	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0043d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00442	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 278  : 	p2.z = max_position->z;

  00447	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0044a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0044f	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 279  : 
; 280  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  00454	51		 push	 ecx
  00455	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  00465	50		 push	 eax
  00466	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  00469	51		 push	 ecx
  0046a	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  0046d	52		 push	 edx
  0046e	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 281  : 
; 282  : 	p1.x = max_position->x;

  00473	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00476	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0047a	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 283  : 	p1.y = max_position->y;

  0047f	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00482	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00487	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 284  : 	p1.z = min_position->z;

  0048c	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  0048f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00494	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 285  : 
; 286  : 	p2.x = max_position->x;

  00499	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  0049c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004a0	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 287  : 	p2.y = max_position->y;

  004a5	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  004a8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004ad	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 288  : 	p2.z = max_position->z;

  004b2	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  004b5	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004ba	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 289  : 
; 290  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  004bf	51		 push	 ecx
  004c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  004c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cd	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  004d0	50		 push	 eax
  004d1	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  004d4	51		 push	 ecx
  004d5	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  004d8	52		 push	 edx
  004d9	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 291  : 
; 292  : 	p1.x = max_position->x;

  004de	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  004e1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004e5	f3 0f 11 45 f4	 movss	 DWORD PTR _p1$[ebp], xmm0

; 293  : 	p1.y = min_position->y;

  004ea	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  004ed	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004f2	f3 0f 11 45 f8	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 294  : 	p1.z = min_position->z;

  004f7	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  004fa	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004ff	f3 0f 11 45 fc	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 295  : 
; 296  : 	p2.x = max_position->x;

  00504	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00507	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0050b	f3 0f 11 45 e8	 movss	 DWORD PTR _p2$[ebp], xmm0

; 297  : 	p2.y = min_position->y;

  00510	8b 45 08	 mov	 eax, DWORD PTR _min_position$[ebp]
  00513	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00518	f3 0f 11 45 ec	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 298  : 	p2.z = max_position->z;

  0051d	8b 45 0c	 mov	 eax, DWORD PTR _max_position$[ebp]
  00520	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00525	f3 0f 11 45 f0	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 299  : 
; 300  : 	create_debug_3d_line (&p1, &p2, colour, collision_box_lifetime);

  0052a	51		 push	 ecx
  0052b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0053b	50		 push	 eax
  0053c	8d 4d e8	 lea	 ecx, DWORD PTR _p2$[ebp]
  0053f	51		 push	 ecx
  00540	8d 55 f4	 lea	 edx, DWORD PTR _p1$[ebp]
  00543	52		 push	 edx
  00544	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 301  : }

  00549	5f		 pop	 edi
  0054a	5e		 pop	 esi
  0054b	5b		 pop	 ebx
  0054c	8b e5		 mov	 esp, ebp
  0054e	5d		 pop	 ebp
  0054f	c2 0c 00	 ret	 12			; 0000000cH
?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ENDP	; draw_min_max_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z
_TEXT	SEGMENT
tv617 = -296						; size = 8
tv522 = -292						; size = 4
tv503 = -292						; size = 4
tv259 = -292						; size = 4
_tree$ = -224						; size = 4
_p4$ = -220						; size = 12
_p3$ = -208						; size = 12
_p2$ = -196						; size = 12
_p1$ = -184						; size = 12
_tree_position$ = -172					; size = 12
_source_max_position$ = -160				; size = 12
_source_min_position$ = -148				; size = 12
_nearest_tree_face_normal$ = -136			; size = 12
_nearest_tree_intercept_point$ = -124			; size = 12
_ddz$ = -112						; size = 4
_ddx$ = -108						; size = 4
_dz2$ = -104						; size = 4
_dx2$ = -100						; size = 4
_dz1$ = -96						; size = 4
_dx1$ = -92						; size = 4
_dz$ = -88						; size = 4
_dx$ = -84						; size = 4
_z_sector_mid_point$ = -80				; size = 4
_x_sector_mid_point$ = -76				; size = 4
_tree_intercept_y$ = -72				; size = 4
_nearest_tree_range$ = -68				; size = 4
_tree_range$ = -64					; size = 4
_tree_top$ = -60					; size = 4
_height$ = -56						; size = 4
_source_ratio$ = -52					; size = 4
_source_dy$ = -48					; size = 4
_source_range$ = -44					; size = 4
_source_new_position_rad_alt$ = -40			; size = 4
_source_old_position_rad_alt$ = -36			; size = 4
_num_trees$ = -32					; size = 4
_hit_tree$ = -28					; size = 4
_z_sector$ = -24					; size = 4
_x_sector$ = -20					; size = 4
_z_sector_max$ = -16					; size = 4
_x_sector_max$ = -12					; size = 4
_z_sector_min$ = -8					; size = 4
_x_sector_min$ = -4					; size = 4
_source_old_position$ = 8				; size = 4
_source_new_position$ = 12				; size = 4
_source_intercept_point$ = 16				; size = 4
_face_normal$ = 20					; size = 4
_ignore_forest_edge_trees$ = 24				; size = 4
_skip_tree_top_test$ = 28				; size = 4
?get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z PROC ; get_line_of_sight_collision_tree, COMDAT

; 1766 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1767 : 	int
; 1768 : 		x_sector_min,
; 1769 : 		z_sector_min,
; 1770 : 		x_sector_max,
; 1771 : 		z_sector_max,
; 1772 : 		x_sector,
; 1773 : 		z_sector,
; 1774 : 		hit_tree,
; 1775 : 		num_trees;
; 1776 : 
; 1777 : 	float
; 1778 : 		source_old_position_rad_alt,
; 1779 : 		source_new_position_rad_alt,
; 1780 : 		source_range,
; 1781 : 		source_dy,
; 1782 : 		source_ratio,
; 1783 : 		height,
; 1784 : 		tree_top,
; 1785 : 		tree_range,
; 1786 : 		nearest_tree_range,
; 1787 : 		tree_intercept_y,
; 1788 : 		x_sector_mid_point,
; 1789 : 		z_sector_mid_point,
; 1790 : 		dx,
; 1791 : 		dz,
; 1792 : 		dx1,
; 1793 : 		dz1,
; 1794 : 		dx2,
; 1795 : 		dz2,
; 1796 : 		ddx,
; 1797 : 		ddz;
; 1798 : 
; 1799 : 	vec3d
; 1800 : 		nearest_tree_intercept_point,
; 1801 : 		nearest_tree_face_normal,
; 1802 : 		source_min_position,
; 1803 : 		source_max_position,
; 1804 : 		tree_position,
; 1805 : 		p1,
; 1806 : 		p2,
; 1807 : 		p3,
; 1808 : 		p4;
; 1809 : 
; 1810 : 	terrain_3d_tree_data
; 1811 : 		*tree;
; 1812 : 
; 1813 : 	ASSERT (source_old_position);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source_old_position$[ebp], 0
  00010	75 18		 jne	 SHORT $LN10@get_line_o
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z@4JA
  00017	83 c0 2f	 add	 eax, 47			; 0000002fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GALEKPNG@source_old_position@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@get_line_o:

; 1814 : 
; 1815 : 	ASSERT (source_new_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_new_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN11@get_line_o
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z@4JA
  00035	83 c0 31	 add	 eax, 49			; 00000031H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHJPOOAI@source_new_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@get_line_o:

; 1816 : 
; 1817 : 	ASSERT (source_intercept_point);

  00048	83 7d 10 00	 cmp	 DWORD PTR _source_intercept_point$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN12@get_line_o
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z@4JA
  00053	83 c0 33	 add	 eax, 51			; 00000033H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@ELIBBDFL@source_intercept_point@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@get_line_o:

; 1818 : 
; 1819 : 	ASSERT (face_normal);

  00066	83 7d 14 00	 cmp	 DWORD PTR _face_normal$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN13@get_line_o
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z@4JA
  00071	83 c0 35	 add	 eax, 53			; 00000035H
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JKBFLAII@face_normal@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@get_line_o:

; 1820 : 
; 1821 : 	if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  0008b	74 2a		 je	 SHORT $LN14@get_line_o
  0008d	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  00094	75 21		 jne	 SHORT $LN14@get_line_o

; 1822 : 	{
; 1823 : 		create_debug_3d_line (source_old_position, source_new_position, LOS_COLOUR, collision_box_lifetime);

  00096	51		 push	 ecx
  00097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_blue@@3UREAL_COLOUR@@A ; sys_col_blue
  000a9	50		 push	 eax
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 08	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line
$LN14@get_line_o:

; 1824 : 	}
; 1825 : 
; 1826 : 	////////////////////////////////////////
; 1827 : 	//
; 1828 : 	// check if source is above highest tree
; 1829 : 	//
; 1830 : 	////////////////////////////////////////
; 1831 : 
; 1832 : 	if (point_inside_map_area (source_old_position))

  000b7	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000ba	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000be	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  000c5	72 71		 jb	 SHORT $LN15@get_line_o
  000c7	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000ca	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  000d2	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  000d5	72 61		 jb	 SHORT $LN15@get_line_o
  000d7	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000da	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000df	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  000e6	72 50		 jb	 SHORT $LN15@get_line_o
  000e8	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000eb	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  000f3	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  000f7	72 3f		 jb	 SHORT $LN15@get_line_o

; 1833 : 	{
; 1834 : 		source_old_position_rad_alt = source_old_position->y - get_3d_terrain_elevation (source_old_position->x, source_old_position->z);

  000f9	6a 00		 push	 0
  000fb	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000fe	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00103	51		 push	 ecx
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  0010c	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00110	51		 push	 ecx
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  0011b	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv503[ebp]
  00121	8b 55 08	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  00124	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00129	f3 0f 5c 85 dc
	fe ff ff	 subss	 xmm0, DWORD PTR tv503[ebp]
  00131	f3 0f 11 45 dc	 movss	 DWORD PTR _source_old_position_rad_alt$[ebp], xmm0

; 1835 : 	}
; 1836 : 	else

  00136	eb 08		 jmp	 SHORT $LN16@get_line_o
$LN15@get_line_o:

; 1837 : 	{
; 1838 : 		source_old_position_rad_alt = 0.0;

  00138	0f 57 c0	 xorps	 xmm0, xmm0
  0013b	f3 0f 11 45 dc	 movss	 DWORD PTR _source_old_position_rad_alt$[ebp], xmm0
$LN16@get_line_o:

; 1839 : 	}
; 1840 : 
; 1841 : 	if (point_inside_map_area (source_new_position))

  00140	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00143	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00147	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  0014e	72 71		 jb	 SHORT $LN17@get_line_o
  00150	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00153	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  0015b	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  0015e	72 61		 jb	 SHORT $LN17@get_line_o
  00160	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00163	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00168	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  0016f	72 50		 jb	 SHORT $LN17@get_line_o
  00171	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00174	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  0017c	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  00180	72 3f		 jb	 SHORT $LN17@get_line_o

; 1842 : 	{
; 1843 : 		source_new_position_rad_alt = source_new_position->y - get_3d_terrain_elevation (source_new_position->x, source_new_position->z);

  00182	6a 00		 push	 0
  00184	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00187	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0018c	51		 push	 ecx
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	8b 4d 0c	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  00195	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00199	51		 push	 ecx
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  001a4	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv522[ebp]
  001aa	8b 55 0c	 mov	 edx, DWORD PTR _source_new_position$[ebp]
  001ad	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  001b2	f3 0f 5c 85 dc
	fe ff ff	 subss	 xmm0, DWORD PTR tv522[ebp]
  001ba	f3 0f 11 45 d8	 movss	 DWORD PTR _source_new_position_rad_alt$[ebp], xmm0

; 1844 : 	}
; 1845 : 	else

  001bf	eb 0a		 jmp	 SHORT $LN18@get_line_o
$LN17@get_line_o:

; 1846 : 	{
; 1847 : 		source_new_position_rad_alt = source_old_position_rad_alt;

  001c1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _source_old_position_rad_alt$[ebp]
  001c6	f3 0f 11 45 d8	 movss	 DWORD PTR _source_new_position_rad_alt$[ebp], xmm0
$LN18@get_line_o:

; 1848 : 	}
; 1849 : 
; 1850 : 	if (min (source_old_position_rad_alt, source_new_position_rad_alt) > TERRAIN_3D_MAX_TREE_HEIGHT)

  001cb	8d 45 d8	 lea	 eax, DWORD PTR _source_new_position_rad_alt$[ebp]
  001ce	50		 push	 eax
  001cf	8d 4d dc	 lea	 ecx, DWORD PTR _source_old_position_rad_alt$[ebp]
  001d2	51		 push	 ecx
  001d3	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001d8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001dc	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@420c0000
  001e3	76 07		 jbe	 SHORT $LN19@get_line_o

; 1851 : 	{
; 1852 : 		return (FALSE);

  001e5	33 c0		 xor	 eax, eax
  001e7	e9 f1 09 00 00	 jmp	 $LN1@get_line_o
$LN19@get_line_o:

; 1853 : 	}
; 1854 : 
; 1855 : 	////////////////////////////////////////
; 1856 : 	//
; 1857 : 	// source values
; 1858 : 	//
; 1859 : 	////////////////////////////////////////
; 1860 : 
; 1861 : 	source_range = get_2d_range (source_old_position, source_new_position);

  001ec	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  001ef	50		 push	 eax
  001f0	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  001f9	d9 5d d4	 fstp	 DWORD PTR _source_range$[ebp]

; 1862 : 
; 1863 : 	if (source_range < 0.1)

  001fc	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _source_range$[ebp]
  00201	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  00209	66 0f 2f c8	 comisd	 xmm1, xmm0
  0020d	76 07		 jbe	 SHORT $LN20@get_line_o

; 1864 : 	{
; 1865 : 		return (FALSE);

  0020f	33 c0		 xor	 eax, eax
  00211	e9 c7 09 00 00	 jmp	 $LN1@get_line_o
$LN20@get_line_o:

; 1866 : 	}
; 1867 : 
; 1868 : 	source_dy = source_new_position->y - source_old_position->y;

  00216	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00219	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  0021c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00221	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00226	f3 0f 11 45 d0	 movss	 DWORD PTR _source_dy$[ebp], xmm0

; 1869 : 
; 1870 : 	source_ratio = source_dy / source_range;

  0022b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _source_dy$[ebp]
  00230	f3 0f 5e 45 d4	 divss	 xmm0, DWORD PTR _source_range$[ebp]
  00235	f3 0f 11 45 cc	 movss	 DWORD PTR _source_ratio$[ebp], xmm0

; 1871 : 
; 1872 : 	////////////////////////////////////////
; 1873 : 	//
; 1874 : 	// get source min and max positions
; 1875 : 	//
; 1876 : 	////////////////////////////////////////
; 1877 : 
; 1878 : 	if (source_old_position->x <= source_new_position->x)

  0023a	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  0023d	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00240	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00244	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00247	72 20		 jb	 SHORT $LN21@get_line_o

; 1879 : 	{
; 1880 : 		source_min_position.x = source_old_position->x;

  00249	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  0024c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00250	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _source_min_position$[ebp], xmm0

; 1881 : 		source_max_position.x = source_new_position->x;

  00258	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  0025b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0025f	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _source_max_position$[ebp], xmm0

; 1882 : 	}
; 1883 : 	else

  00267	eb 1e		 jmp	 SHORT $LN22@get_line_o
$LN21@get_line_o:

; 1884 : 	{
; 1885 : 		source_min_position.x = source_new_position->x;

  00269	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  0026c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00270	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _source_min_position$[ebp], xmm0

; 1886 : 		source_max_position.x = source_old_position->x;

  00278	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  0027b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027f	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _source_max_position$[ebp], xmm0
$LN22@get_line_o:

; 1887 : 	}
; 1888 : 
; 1889 : 	if (source_old_position->y <= source_new_position->y)

  00287	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  0028a	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  0028d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00292	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  00296	72 22		 jb	 SHORT $LN23@get_line_o

; 1890 : 	{
; 1891 : 		source_min_position.y = source_old_position->y;

  00298	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  0029b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002a0	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _source_min_position$[ebp+4], xmm0

; 1892 : 		source_max_position.y = source_new_position->y;

  002a8	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  002ab	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002b0	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _source_max_position$[ebp+4], xmm0

; 1893 : 	}
; 1894 : 	else

  002b8	eb 20		 jmp	 SHORT $LN24@get_line_o
$LN23@get_line_o:

; 1895 : 	{
; 1896 : 		source_min_position.y = source_new_position->y;

  002ba	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  002bd	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002c2	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _source_min_position$[ebp+4], xmm0

; 1897 : 		source_max_position.y = source_old_position->y;

  002ca	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  002cd	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002d2	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _source_max_position$[ebp+4], xmm0
$LN24@get_line_o:

; 1898 : 	}
; 1899 : 
; 1900 : 	if (source_old_position->z <= source_new_position->z)

  002da	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  002dd	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  002e0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  002e5	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  002e9	72 22		 jb	 SHORT $LN25@get_line_o

; 1901 : 	{
; 1902 : 		source_min_position.z = source_old_position->z;

  002eb	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  002ee	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  002f3	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _source_min_position$[ebp+8], xmm0

; 1903 : 		source_max_position.z = source_new_position->z;

  002fb	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  002fe	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00303	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _source_max_position$[ebp+8], xmm0

; 1904 : 	}
; 1905 : 	else

  0030b	eb 20		 jmp	 SHORT $LN26@get_line_o
$LN25@get_line_o:

; 1906 : 	{
; 1907 : 		source_min_position.z = source_new_position->z;

  0030d	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00310	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00315	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _source_min_position$[ebp+8], xmm0

; 1908 : 		source_max_position.z = source_old_position->z;

  0031d	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  00320	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00325	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _source_max_position$[ebp+8], xmm0
$LN26@get_line_o:

; 1909 : 	}
; 1910 : 
; 1911 : 	////////////////////////////////////////
; 1912 : 	//
; 1913 : 	// calc sector scan
; 1914 : 	//
; 1915 : 	////////////////////////////////////////
; 1916 : 
; 1917 : 	bound_position_to_map_area (&source_min_position);

  0032d	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _source_min_position$[ebp]
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 ?bound_position_to_map_area@@YGHPAUVEC3D@@@Z ; bound_position_to_map_area

; 1918 : 
; 1919 : 	bound_position_to_map_area (&source_max_position);

  00339	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _source_max_position$[ebp]
  0033f	50		 push	 eax
  00340	e8 00 00 00 00	 call	 ?bound_position_to_map_area@@YGHPAUVEC3D@@@Z ; bound_position_to_map_area

; 1920 : 
; 1921 : 	get_terrain_3d_sector (source_min_position.x, source_min_position.z, &x_sector_min, &z_sector_min);

  00345	8d 45 f8	 lea	 eax, DWORD PTR _z_sector_min$[ebp]
  00348	50		 push	 eax
  00349	8d 4d fc	 lea	 ecx, DWORD PTR _x_sector_min$[ebp]
  0034c	51		 push	 ecx
  0034d	51		 push	 ecx
  0034e	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  00356	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035b	51		 push	 ecx
  0035c	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_min_position$[ebp]
  00364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00369	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1922 : 
; 1923 : 	get_terrain_3d_sector (source_max_position.x, source_max_position.z, &x_sector_max, &z_sector_max);

  0036e	8d 45 f0	 lea	 eax, DWORD PTR _z_sector_max$[ebp]
  00371	50		 push	 eax
  00372	8d 4d f4	 lea	 ecx, DWORD PTR _x_sector_max$[ebp]
  00375	51		 push	 ecx
  00376	51		 push	 ecx
  00377	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  0037f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00384	51		 push	 ecx
  00385	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _source_max_position$[ebp]
  0038d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00392	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1924 : 
; 1925 : 	if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  00397	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  0039e	74 22		 je	 SHORT $LN27@get_line_o
  003a0	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  003a7	75 19		 jne	 SHORT $LN27@get_line_o

; 1926 : 	{
; 1927 : 		draw_min_max_box (&source_min_position, &source_max_position, sys_col_cyan);

  003a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_cyan@@3UREAL_COLOUR@@A ; sys_col_cyan
  003ae	50		 push	 eax
  003af	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _source_max_position$[ebp]
  003b5	51		 push	 ecx
  003b6	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _source_min_position$[ebp]
  003bc	52		 push	 edx
  003bd	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box
$LN27@get_line_o:

; 1928 : 	}
; 1929 : 
; 1930 : 	////////////////////////////////////////
; 1931 : 	//
; 1932 : 	// sector scan
; 1933 : 	//
; 1934 : 	////////////////////////////////////////
; 1935 : 
; 1936 : 	hit_tree = FALSE;

  003c2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hit_tree$[ebp], 0

; 1937 : 
; 1938 : 	nearest_tree_range = FLT_MAX;

  003c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  003d1	f3 0f 11 45 bc	 movss	 DWORD PTR _nearest_tree_range$[ebp], xmm0

; 1939 : 
; 1940 : 	for (x_sector = x_sector_min; x_sector <= x_sector_max; x_sector++)

  003d6	8b 45 fc	 mov	 eax, DWORD PTR _x_sector_min$[ebp]
  003d9	89 45 ec	 mov	 DWORD PTR _x_sector$[ebp], eax
  003dc	eb 09		 jmp	 SHORT $LN4@get_line_o
$LN2@get_line_o:
  003de	8b 45 ec	 mov	 eax, DWORD PTR _x_sector$[ebp]
  003e1	83 c0 01	 add	 eax, 1
  003e4	89 45 ec	 mov	 DWORD PTR _x_sector$[ebp], eax
$LN4@get_line_o:
  003e7	8b 45 ec	 mov	 eax, DWORD PTR _x_sector$[ebp]
  003ea	3b 45 f4	 cmp	 eax, DWORD PTR _x_sector_max$[ebp]
  003ed	0f 8f b3 07 00
	00		 jg	 $LN3@get_line_o

; 1941 : 	{
; 1942 : 		for (z_sector = z_sector_min; z_sector <= z_sector_max; z_sector++)

  003f3	8b 45 f8	 mov	 eax, DWORD PTR _z_sector_min$[ebp]
  003f6	89 45 e8	 mov	 DWORD PTR _z_sector$[ebp], eax
  003f9	eb 09		 jmp	 SHORT $LN7@get_line_o
$LN5@get_line_o:
  003fb	8b 45 e8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  003fe	83 c0 01	 add	 eax, 1
  00401	89 45 e8	 mov	 DWORD PTR _z_sector$[ebp], eax
$LN7@get_line_o:
  00404	8b 45 e8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00407	3b 45 f0	 cmp	 eax, DWORD PTR _z_sector_max$[ebp]
  0040a	0f 8f 91 07 00
	00		 jg	 $LN6@get_line_o

; 1943 : 		{
; 1944 : 			num_trees = get_terrain_3d_tree_sector_data (x_sector, z_sector, &tree);

  00410	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _tree$[ebp]
  00416	50		 push	 eax
  00417	8b 4d e8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  0041a	51		 push	 ecx
  0041b	8b 55 ec	 mov	 edx, DWORD PTR _x_sector$[ebp]
  0041e	52		 push	 edx
  0041f	e8 00 00 00 00	 call	 ?get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z ; get_terrain_3d_tree_sector_data
  00424	89 45 e0	 mov	 DWORD PTR _num_trees$[ebp], eax

; 1945 : 
; 1946 : 			if (num_trees > 0)

  00427	83 7d e0 00	 cmp	 DWORD PTR _num_trees$[ebp], 0
  0042b	0f 8e 6b 07 00
	00		 jle	 $LN9@get_line_o

; 1947 : 			{
; 1948 : 				x_sector_mid_point = (x_sector * TERRAIN_3D_SECTOR_SIDE_LENGTH) + (TERRAIN_3D_SECTOR_SIDE_LENGTH * 0.5);

  00431	8b 45 ec	 mov	 eax, DWORD PTR _x_sector$[ebp]
  00434	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00437	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0043b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4090000000000000
  00443	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00447	f3 0f 11 45 b4	 movss	 DWORD PTR _x_sector_mid_point$[ebp], xmm0

; 1949 : 				z_sector_mid_point = (z_sector * TERRAIN_3D_SECTOR_SIDE_LENGTH) + (TERRAIN_3D_SECTOR_SIDE_LENGTH * 0.5);

  0044c	8b 45 e8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  0044f	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00452	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00456	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4090000000000000
  0045e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00462	f3 0f 11 45 b0	 movss	 DWORD PTR _z_sector_mid_point$[ebp], xmm0

; 1950 : 
; 1951 : 				tree--;

  00467	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _tree$[ebp]
  0046d	83 e8 08	 sub	 eax, 8
  00470	89 85 20 ff ff
	ff		 mov	 DWORD PTR _tree$[ebp], eax
$LN50@get_line_o:

; 1952 : 
; 1953 : 				while (num_trees--)

  00476	8b 45 e0	 mov	 eax, DWORD PTR _num_trees$[ebp]
  00479	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  0047f	8b 4d e0	 mov	 ecx, DWORD PTR _num_trees$[ebp]
  00482	83 e9 01	 sub	 ecx, 1
  00485	89 4d e0	 mov	 DWORD PTR _num_trees$[ebp], ecx
  00488	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR tv259[ebp], 0
  0048f	0f 84 07 07 00
	00		 je	 $LN9@get_line_o

; 1954 : 				{
; 1955 : 					tree++;

  00495	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _tree$[ebp]
  0049b	83 c0 08	 add	 eax, 8
  0049e	89 85 20 ff ff
	ff		 mov	 DWORD PTR _tree$[ebp], eax

; 1956 : 
; 1957 : 					if (!(ignore_forest_edge_trees && (tree->type == 0)))

  004a4	83 7d 18 00	 cmp	 DWORD PTR _ignore_forest_edge_trees$[ebp], 0
  004a8	74 1a		 je	 SHORT $LN30@get_line_o
  004aa	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _tree$[ebp]
  004b0	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  004b3	c0 e9 07	 shr	 cl, 7
  004b6	80 e1 01	 and	 cl, 1
  004b9	0f b6 d1	 movzx	 edx, cl
  004bc	85 d2		 test	 edx, edx
  004be	0f 84 d3 06 00
	00		 je	 $LN45@get_line_o
$LN30@get_line_o:

; 1958 : 					{
; 1959 : 						tree_position.y = (tree->y * terrain_3d_map_scaled_height_difference * 0.5) + terrain_3d_map_minimum_height;

  004c4	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _tree$[ebp]
  004ca	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  004ce	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004d2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  004da	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004de	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  004e6	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  004ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004f6	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tree_position$[ebp+4], xmm0

; 1960 : 
; 1961 : 						if (source_max_position.y >= tree_position.y)

  004fe	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _source_max_position$[ebp+4]
  00506	0f 2f 85 58 ff
	ff ff		 comiss	 xmm0, DWORD PTR _tree_position$[ebp+4]
  0050d	0f 82 84 06 00
	00		 jb	 $LN45@get_line_o

; 1962 : 						{
; 1963 : 							//
; 1964 : 							// scale down height to make the tree top soft
; 1965 : 							//
; 1966 : 
; 1967 : 							height = get_terrain_3d_tree_scale (tree) * 0.75;

  00513	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _tree$[ebp]
  00519	50		 push	 eax
  0051a	e8 00 00 00 00	 call	 ?get_terrain_3d_tree_scale@@YGMPAUTERRAIN_3D_TREE_DATA@@@Z ; get_terrain_3d_tree_scale
  0051f	dd 9d d8 fe ff
	ff		 fstp	 QWORD PTR tv617[ebp]
  00525	f2 0f 10 85 d8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv617[ebp]
  0052d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  00535	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00539	f3 0f 11 45 c8	 movss	 DWORD PTR _height$[ebp], xmm0

; 1968 : 
; 1969 : 							tree_top = tree_position.y + height;

  0053e	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+4]
  00546	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _height$[ebp]
  0054b	f3 0f 11 45 c4	 movss	 DWORD PTR _tree_top$[ebp], xmm0

; 1970 : 
; 1971 : 							if (source_min_position.y <= tree_top)

  00550	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  00555	0f 2f 85 70 ff
	ff ff		 comiss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  0055c	0f 82 35 06 00
	00		 jb	 $LN45@get_line_o

; 1972 : 							{
; 1973 : 								tree_position.x = x_sector_mid_point + (tree->x * TERRAIN_3D_XZ_SCALE * 0.5);

  00562	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _x_sector_mid_point$[ebp]
  00567	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _tree$[ebp]
  0056d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00570	f2 0f 2a c9	 cvtsi2sd xmm1, ecx
  00574	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb0000000000000
  0057c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00584	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00588	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0058c	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tree_position$[ebp], xmm0

; 1974 : 
; 1975 : 								if ((tree_position.x >= source_min_position.x) && (tree_position.x <= source_max_position.x))

  00594	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp]
  0059c	0f 2f 85 6c ff
	ff ff		 comiss	 xmm0, DWORD PTR _source_min_position$[ebp]
  005a3	0f 82 ee 05 00
	00		 jb	 $LN45@get_line_o
  005a9	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _source_max_position$[ebp]
  005b1	0f 2f 85 54 ff
	ff ff		 comiss	 xmm0, DWORD PTR _tree_position$[ebp]
  005b8	0f 82 d9 05 00
	00		 jb	 $LN45@get_line_o

; 1976 : 								{
; 1977 : 									tree_position.z = z_sector_mid_point + (tree->z * TERRAIN_3D_XZ_SCALE * 0.5);

  005be	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _z_sector_mid_point$[ebp]
  005c3	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _tree$[ebp]
  005c9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  005cd	f2 0f 2a c9	 cvtsi2sd xmm1, ecx
  005d1	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb0000000000000
  005d9	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  005e1	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005e9	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tree_position$[ebp+8], xmm0

; 1978 : 
; 1979 : 									if ((tree_position.z >= source_min_position.z) && (tree_position.z <= source_max_position.z))

  005f1	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+8]
  005f9	0f 2f 85 74 ff
	ff ff		 comiss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  00600	0f 82 91 05 00
	00		 jb	 $LN45@get_line_o
  00606	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  0060e	0f 2f 85 5c ff
	ff ff		 comiss	 xmm0, DWORD PTR _tree_position$[ebp+8]
  00615	0f 82 7c 05 00
	00		 jb	 $LN45@get_line_o

; 1980 : 									{
; 1981 : 										//
; 1982 : 										// use similar triangles (xz plane) to determine 2D distance from the line
; 1983 : 										//
; 1984 : 
; 1985 : 										dx = source_new_position->x - source_old_position->x;

  0061b	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  0061e	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00621	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00625	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00629	f3 0f 11 45 ac	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1986 : 										dz = source_new_position->z - source_old_position->z;

  0062e	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00631	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00634	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00639	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0063e	f3 0f 11 45 a8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 1987 : 
; 1988 : 										dx1 = tree_position.x - source_old_position->x;

  00643	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  00646	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp]
  0064e	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00652	f3 0f 11 45 a4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1989 : 										dz1 = dx1 * dz / dx;

  00657	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  0065c	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _dz$[ebp]
  00661	f3 0f 5e 45 ac	 divss	 xmm0, DWORD PTR _dx$[ebp]
  00666	f3 0f 11 45 a0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1990 : 
; 1991 : 										dz2 = tree_position.z - source_old_position->z;

  0066b	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  0066e	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+8]
  00676	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0067b	f3 0f 11 45 98	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 1992 : 										dx2 = dz2 * dx / dz;

  00680	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _dz2$[ebp]
  00685	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  0068a	f3 0f 5e 45 a8	 divss	 xmm0, DWORD PTR _dz$[ebp]
  0068f	f3 0f 11 45 9c	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 1993 : 
; 1994 : 										ddx = dx1 - dx2;

  00694	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _dx1$[ebp]
  00699	f3 0f 5c 45 9c	 subss	 xmm0, DWORD PTR _dx2$[ebp]
  0069e	f3 0f 11 45 94	 movss	 DWORD PTR _ddx$[ebp], xmm0

; 1995 : 										ddz = dz1 - dz2;

  006a3	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _dz1$[ebp]
  006a8	f3 0f 5c 45 98	 subss	 xmm0, DWORD PTR _dz2$[ebp]
  006ad	f3 0f 11 45 90	 movss	 DWORD PTR _ddz$[ebp], xmm0

; 1996 : 
; 1997 : 										if (((ddx > -TREE_RADIUS) && (ddx < TREE_RADIUS)) || ((ddz > -TREE_RADIUS) && (ddz < TREE_RADIUS)))

  006b2	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _ddx$[ebp]
  006b7	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c014000000000000
  006bf	76 13		 jbe	 SHORT $LN37@get_line_o
  006c1	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _ddx$[ebp]
  006c6	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  006ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  006d2	77 2a		 ja	 SHORT $LN36@get_line_o
$LN37@get_line_o:
  006d4	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _ddz$[ebp]
  006d9	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@c014000000000000
  006e1	0f 86 b0 04 00
	00		 jbe	 $LN45@get_line_o
  006e7	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _ddz$[ebp]
  006ec	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  006f4	66 0f 2f c8	 comisd	 xmm1, xmm0
  006f8	0f 86 99 04 00
	00		 jbe	 $LN45@get_line_o
$LN36@get_line_o:

; 1998 : 										{
; 1999 : 											//
; 2000 : 											// use similar triangles to determine if line intercepts tree
; 2001 : 											//
; 2002 : 
; 2003 : 											tree_range = get_2d_range (source_old_position, &tree_position);

  006fe	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _tree_position$[ebp]
  00704	50		 push	 eax
  00705	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00708	51		 push	 ecx
  00709	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  0070e	d9 5d c0	 fstp	 DWORD PTR _tree_range$[ebp]

; 2004 : 
; 2005 : 											tree_intercept_y = (tree_range * source_ratio) + source_old_position->y;

  00711	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _tree_range$[ebp]
  00716	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _source_ratio$[ebp]
  0071b	8b 45 08	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  0071e	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00723	f3 0f 11 45 b8	 movss	 DWORD PTR _tree_intercept_y$[ebp], xmm0

; 2006 : 
; 2007 : 											if ((tree_position.y <= tree_intercept_y) && (tree_top >= tree_intercept_y))

  00728	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _tree_intercept_y$[ebp]
  0072d	0f 2f 85 58 ff
	ff ff		 comiss	 xmm0, DWORD PTR _tree_position$[ebp+4]
  00734	0f 82 5d 04 00
	00		 jb	 $LN45@get_line_o
  0073a	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  0073f	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _tree_intercept_y$[ebp]
  00743	0f 82 4e 04 00
	00		 jb	 $LN45@get_line_o

; 2008 : 											{
; 2009 : 												p1.x = tree_position.x - (TREE_RADIUS * 0.5);

  00749	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp]
  00751	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4004000000000000
  00759	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0075d	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _p1$[ebp], xmm0

; 2010 : 												p1.y = tree_position.y;

  00765	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+4]
  0076d	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 2011 : 												p1.z = tree_position.z;

  00775	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+8]
  0077d	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 2012 : 
; 2013 : 												p4.x = tree_position.x + (TREE_RADIUS * 0.5);

  00785	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp]
  0078d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4004000000000000
  00795	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00799	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _p4$[ebp], xmm0

; 2014 : 												p4.y = tree_position.y;

  007a1	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+4]
  007a9	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _p4$[ebp+4], xmm0

; 2015 : 												p4.z = tree_position.z;

  007b1	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+8]
  007b9	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _p4$[ebp+8], xmm0

; 2016 : 
; 2017 : 												p2.x = p1.x;

  007c1	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _p1$[ebp]
  007c9	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _p2$[ebp], xmm0

; 2018 : 												p2.y = tree_top;

  007d1	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  007d6	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 2019 : 												p2.z = p1.z;

  007de	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _p1$[ebp+8]
  007e6	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 2020 : 
; 2021 : 												p3.x = p4.x;

  007ee	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _p4$[ebp]
  007f6	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _p3$[ebp], xmm0

; 2022 : 												p3.y = tree_top;

  007fe	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  00803	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+4], xmm0

; 2023 : 												p3.z = p4.z;

  0080b	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _p4$[ebp+8]
  00813	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+8], xmm0

; 2024 : 
; 2025 : 												if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p1, &p2, &p3, &p4, source_intercept_point, face_normal))

  0081b	8b 45 14	 mov	 eax, DWORD PTR _face_normal$[ebp]
  0081e	50		 push	 eax
  0081f	8b 4d 10	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00822	51		 push	 ecx
  00823	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR _p4$[ebp]
  00829	52		 push	 edx
  0082a	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _p3$[ebp]
  00830	50		 push	 eax
  00831	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _p2$[ebp]
  00837	51		 push	 ecx
  00838	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR _p1$[ebp]
  0083e	52		 push	 edx
  0083f	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00842	50		 push	 eax
  00843	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00846	51		 push	 ecx
  00847	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  0084c	85 c0		 test	 eax, eax
  0084e	74 4f		 je	 SHORT $LN40@get_line_o

; 2026 : 												{
; 2027 : 													if (tree_range < nearest_tree_range)

  00850	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _nearest_tree_range$[ebp]
  00855	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _tree_range$[ebp]
  00859	76 44		 jbe	 SHORT $LN40@get_line_o

; 2028 : 													{
; 2029 : 														hit_tree = TRUE;

  0085b	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _hit_tree$[ebp], 1

; 2030 : 
; 2031 : 														nearest_tree_range = tree_range;

  00862	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _tree_range$[ebp]
  00867	f3 0f 11 45 bc	 movss	 DWORD PTR _nearest_tree_range$[ebp], xmm0

; 2032 : 
; 2033 : 														nearest_tree_intercept_point = *source_intercept_point;

  0086c	8b 45 10	 mov	 eax, DWORD PTR _source_intercept_point$[ebp]
  0086f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00871	89 4d 84	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp], ecx
  00874	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00877	89 55 88	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp+4], edx
  0087a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0087d	89 45 8c	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp+8], eax

; 2034 : 
; 2035 : 														nearest_tree_face_normal = *face_normal;

  00880	8b 45 14	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00883	8b 08		 mov	 ecx, DWORD PTR [eax]
  00885	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _nearest_tree_face_normal$[ebp], ecx
  0088b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0088e	89 95 7c ff ff
	ff		 mov	 DWORD PTR _nearest_tree_face_normal$[ebp+4], edx
  00894	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00897	89 45 80	 mov	 DWORD PTR _nearest_tree_face_normal$[ebp+8], eax

; 2036 : 
; 2037 : 														continue;

  0089a	e9 d7 fb ff ff	 jmp	 $LN50@get_line_o
$LN40@get_line_o:

; 2038 : 													}
; 2039 : 												}
; 2040 : 
; 2041 : 												p1.x = tree_position.x;

  0089f	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp]
  008a7	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _p1$[ebp], xmm0

; 2042 : 												p1.y = tree_position.y;

  008af	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+4]
  008b7	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 2043 : 												p1.z = tree_position.z - (TREE_RADIUS * 0.5);

  008bf	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp+8]
  008c7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4004000000000000
  008cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008d3	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 2044 : 
; 2045 : 												p4.x = tree_position.x;

  008db	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp]
  008e3	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _p4$[ebp], xmm0

; 2046 : 												p4.y = tree_position.y;

  008eb	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _tree_position$[ebp+4]
  008f3	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _p4$[ebp+4], xmm0

; 2047 : 												p4.z = tree_position.z + (TREE_RADIUS * 0.5);

  008fb	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp+8]
  00903	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4004000000000000
  0090b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0090f	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _p4$[ebp+8], xmm0

; 2048 : 
; 2049 : 												p2.x = p1.x;

  00917	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _p1$[ebp]
  0091f	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _p2$[ebp], xmm0

; 2050 : 												p2.y = tree_top;

  00927	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  0092c	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 2051 : 												p2.z = p1.z;

  00934	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _p1$[ebp+8]
  0093c	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 2052 : 
; 2053 : 												p3.x = p4.x;

  00944	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _p4$[ebp]
  0094c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _p3$[ebp], xmm0

; 2054 : 												p3.y = tree_top;

  00954	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  00959	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+4], xmm0

; 2055 : 												p3.z = p4.z;

  00961	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _p4$[ebp+8]
  00969	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+8], xmm0

; 2056 : 
; 2057 : 												if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p1, &p2, &p3, &p4, source_intercept_point, face_normal))

  00971	8b 45 14	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00974	50		 push	 eax
  00975	8b 4d 10	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00978	51		 push	 ecx
  00979	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR _p4$[ebp]
  0097f	52		 push	 edx
  00980	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _p3$[ebp]
  00986	50		 push	 eax
  00987	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _p2$[ebp]
  0098d	51		 push	 ecx
  0098e	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR _p1$[ebp]
  00994	52		 push	 edx
  00995	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00998	50		 push	 eax
  00999	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  0099c	51		 push	 ecx
  0099d	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  009a2	85 c0		 test	 eax, eax
  009a4	74 4f		 je	 SHORT $LN42@get_line_o

; 2058 : 												{
; 2059 : 													if (tree_range < nearest_tree_range)

  009a6	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _nearest_tree_range$[ebp]
  009ab	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _tree_range$[ebp]
  009af	76 44		 jbe	 SHORT $LN42@get_line_o

; 2060 : 													{
; 2061 : 														hit_tree = TRUE;

  009b1	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _hit_tree$[ebp], 1

; 2062 : 
; 2063 : 														nearest_tree_range = tree_range;

  009b8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _tree_range$[ebp]
  009bd	f3 0f 11 45 bc	 movss	 DWORD PTR _nearest_tree_range$[ebp], xmm0

; 2064 : 
; 2065 : 														nearest_tree_intercept_point = *source_intercept_point;

  009c2	8b 45 10	 mov	 eax, DWORD PTR _source_intercept_point$[ebp]
  009c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  009c7	89 4d 84	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp], ecx
  009ca	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  009cd	89 55 88	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp+4], edx
  009d0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  009d3	89 45 8c	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp+8], eax

; 2066 : 
; 2067 : 														nearest_tree_face_normal = *face_normal;

  009d6	8b 45 14	 mov	 eax, DWORD PTR _face_normal$[ebp]
  009d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  009db	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _nearest_tree_face_normal$[ebp], ecx
  009e1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  009e4	89 95 7c ff ff
	ff		 mov	 DWORD PTR _nearest_tree_face_normal$[ebp+4], edx
  009ea	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  009ed	89 45 80	 mov	 DWORD PTR _nearest_tree_face_normal$[ebp+8], eax

; 2068 : 
; 2069 : 														continue;

  009f0	e9 81 fa ff ff	 jmp	 $LN50@get_line_o
$LN42@get_line_o:

; 2070 : 													}
; 2071 : 												}
; 2072 : 
; 2073 : 												if (!skip_tree_top_test)

  009f5	83 7d 1c 00	 cmp	 DWORD PTR _skip_tree_top_test$[ebp], 0
  009f9	0f 85 98 01 00
	00		 jne	 $LN45@get_line_o

; 2074 : 												{
; 2075 : 													p1.x = tree_position.x - (TREE_RADIUS * 0.5);

  009ff	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp]
  00a07	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4004000000000000
  00a0f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a13	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _p1$[ebp], xmm0

; 2076 : 													p1.y = tree_top;

  00a1b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  00a20	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _p1$[ebp+4], xmm0

; 2077 : 													p1.z = tree_position.z - (TREE_RADIUS * 0.5);

  00a28	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp+8]
  00a30	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4004000000000000
  00a38	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a3c	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _p1$[ebp+8], xmm0

; 2078 : 
; 2079 : 													p2.x = tree_position.x - (TREE_RADIUS * 0.5);

  00a44	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp]
  00a4c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4004000000000000
  00a54	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a58	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _p2$[ebp], xmm0

; 2080 : 													p2.y = tree_top;

  00a60	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  00a65	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+4], xmm0

; 2081 : 													p2.z = tree_position.z + (TREE_RADIUS * 0.5);

  00a6d	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp+8]
  00a75	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4004000000000000
  00a7d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a81	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _p2$[ebp+8], xmm0

; 2082 : 
; 2083 : 													p3.x = tree_position.x + (TREE_RADIUS * 0.5);

  00a89	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp]
  00a91	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4004000000000000
  00a99	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a9d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _p3$[ebp], xmm0

; 2084 : 													p3.y = tree_top;

  00aa5	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  00aaa	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+4], xmm0

; 2085 : 													p3.z = tree_position.z + (TREE_RADIUS * 0.5);

  00ab2	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp+8]
  00aba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4004000000000000
  00ac2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ac6	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _p3$[ebp+8], xmm0

; 2086 : 
; 2087 : 													p4.x = tree_position.x + (TREE_RADIUS * 0.5);

  00ace	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp]
  00ad6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4004000000000000
  00ade	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ae2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _p4$[ebp], xmm0

; 2088 : 													p4.y = tree_top;

  00aea	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _tree_top$[ebp]
  00aef	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _p4$[ebp+4], xmm0

; 2089 : 													p4.z = tree_position.z - (TREE_RADIUS * 0.5);

  00af7	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tree_position$[ebp+8]
  00aff	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4004000000000000
  00b07	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b0b	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _p4$[ebp+8], xmm0

; 2090 : 
; 2091 : 													if (get_3d_line_quad_face_intersection (source_old_position, source_new_position, &p1, &p2, &p3, &p4, source_intercept_point, face_normal))

  00b13	8b 45 14	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00b16	50		 push	 eax
  00b17	8b 4d 10	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00b1a	51		 push	 ecx
  00b1b	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR _p4$[ebp]
  00b21	52		 push	 edx
  00b22	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _p3$[ebp]
  00b28	50		 push	 eax
  00b29	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _p2$[ebp]
  00b2f	51		 push	 ecx
  00b30	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR _p1$[ebp]
  00b36	52		 push	 edx
  00b37	8b 45 0c	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00b3a	50		 push	 eax
  00b3b	8b 4d 08	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00b3e	51		 push	 ecx
  00b3f	e8 00 00 00 00	 call	 ?get_3d_line_quad_face_intersection@@YGHPAUVEC3D@@0000000@Z ; get_3d_line_quad_face_intersection
  00b44	85 c0		 test	 eax, eax
  00b46	74 4f		 je	 SHORT $LN45@get_line_o

; 2092 : 													{
; 2093 : 														if (tree_range < nearest_tree_range)

  00b48	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _nearest_tree_range$[ebp]
  00b4d	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _tree_range$[ebp]
  00b51	76 44		 jbe	 SHORT $LN45@get_line_o

; 2094 : 														{
; 2095 : 															hit_tree = TRUE;

  00b53	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _hit_tree$[ebp], 1

; 2096 : 
; 2097 : 															nearest_tree_range = tree_range;

  00b5a	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _tree_range$[ebp]
  00b5f	f3 0f 11 45 bc	 movss	 DWORD PTR _nearest_tree_range$[ebp], xmm0

; 2098 : 
; 2099 : 															nearest_tree_intercept_point = *source_intercept_point;

  00b64	8b 45 10	 mov	 eax, DWORD PTR _source_intercept_point$[ebp]
  00b67	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b69	89 4d 84	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp], ecx
  00b6c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00b6f	89 55 88	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp+4], edx
  00b72	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00b75	89 45 8c	 mov	 DWORD PTR _nearest_tree_intercept_point$[ebp+8], eax

; 2100 : 
; 2101 : 															nearest_tree_face_normal = *face_normal;

  00b78	8b 45 14	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00b7b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7d	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _nearest_tree_face_normal$[ebp], ecx
  00b83	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00b86	89 95 7c ff ff
	ff		 mov	 DWORD PTR _nearest_tree_face_normal$[ebp+4], edx
  00b8c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00b8f	89 45 80	 mov	 DWORD PTR _nearest_tree_face_normal$[ebp+8], eax

; 2102 : 
; 2103 : 															continue;

  00b92	e9 df f8 ff ff	 jmp	 $LN50@get_line_o
$LN45@get_line_o:

; 2104 : 														}
; 2105 : 													}
; 2106 : 												}
; 2107 : 											}
; 2108 : 										}
; 2109 : 									}
; 2110 : 								}
; 2111 : 							}
; 2112 : 						}
; 2113 : 					}
; 2114 : 				}

  00b97	e9 da f8 ff ff	 jmp	 $LN50@get_line_o
$LN9@get_line_o:

; 2115 : 			}
; 2116 : 		}

  00b9c	e9 5a f8 ff ff	 jmp	 $LN5@get_line_o
$LN6@get_line_o:

; 2117 : 	}

  00ba1	e9 38 f8 ff ff	 jmp	 $LN2@get_line_o
$LN3@get_line_o:

; 2118 : 
; 2119 : 	if (hit_tree)

  00ba6	83 7d e4 00	 cmp	 DWORD PTR _hit_tree$[ebp], 0
  00baa	74 2e		 je	 SHORT $LN46@get_line_o

; 2120 : 	{
; 2121 : 		*source_intercept_point = nearest_tree_intercept_point;

  00bac	8b 45 10	 mov	 eax, DWORD PTR _source_intercept_point$[ebp]
  00baf	8b 4d 84	 mov	 ecx, DWORD PTR _nearest_tree_intercept_point$[ebp]
  00bb2	89 08		 mov	 DWORD PTR [eax], ecx
  00bb4	8b 55 88	 mov	 edx, DWORD PTR _nearest_tree_intercept_point$[ebp+4]
  00bb7	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00bba	8b 4d 8c	 mov	 ecx, DWORD PTR _nearest_tree_intercept_point$[ebp+8]
  00bbd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 2122 : 
; 2123 : 		*face_normal = nearest_tree_face_normal;

  00bc0	8b 45 14	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00bc3	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _nearest_tree_face_normal$[ebp]
  00bc9	89 08		 mov	 DWORD PTR [eax], ecx
  00bcb	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _nearest_tree_face_normal$[ebp+4]
  00bd1	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00bd4	8b 4d 80	 mov	 ecx, DWORD PTR _nearest_tree_face_normal$[ebp+8]
  00bd7	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN46@get_line_o:

; 2124 : 	}
; 2125 : 
; 2126 : 	return (hit_tree);

  00bda	8b 45 e4	 mov	 eax, DWORD PTR _hit_tree$[ebp]
$LN1@get_line_o:

; 2127 : }

  00bdd	5f		 pop	 edi
  00bde	5e		 pop	 esi
  00bdf	5b		 pop	 ebx
  00be0	8b e5		 mov	 esp, ebp
  00be2	5d		 pop	 ebp
  00be3	c2 18 00	 ret	 24			; 00000018H
?get_line_of_sight_collision_tree@@YGHPAUVEC3D@@000HH@Z ENDP ; get_line_of_sight_collision_tree
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z
_TEXT	SEGMENT
tv1116 = -232						; size = 4
tv975 = -228						; size = 4
tv908 = -228						; size = 4
tv876 = -228						; size = 4
tv849 = -228						; size = 4
tv784 = -228						; size = 4
tv752 = -228						; size = 4
tv705 = -228						; size = 4
tv685 = -228						; size = 4
tv665 = -228						; size = 4
tv644 = -228						; size = 4
tv616 = -228						; size = 4
tv552 = -228						; size = 4
tv487 = -228						; size = 4
tv458 = -228						; size = 4
tv405 = -228						; size = 4
tv374 = -228						; size = 4
tv342 = -228						; size = 4
tv321 = -228						; size = 4
tv300 = -228						; size = 4
tv247 = -228						; size = 4
tv226 = -228						; size = 4
tv205 = -228						; size = 4
tv967 = -224						; size = 4
tv900 = -224						; size = 4
tv868 = -224						; size = 4
tv860 = -224						; size = 4
tv841 = -224						; size = 4
tv776 = -224						; size = 4
tv744 = -224						; size = 4
tv697 = -224						; size = 4
tv677 = -224						; size = 4
tv657 = -224						; size = 4
tv636 = -224						; size = 4
tv628 = -224						; size = 4
tv609 = -224						; size = 4
tv544 = -224						; size = 4
tv479 = -224						; size = 4
tv450 = -224						; size = 4
tv398 = -224						; size = 4
tv366 = -224						; size = 4
tv334 = -224						; size = 4
tv314 = -224						; size = 4
tv292 = -224						; size = 4
tv239 = -224						; size = 4
tv218 = -224						; size = 4
tv198 = -224						; size = 4
tv192 = -224						; size = 4
$T1 = -220						; size = 4
$T2 = -216						; size = 4
$T3 = -212						; size = 4
$T4 = -208						; size = 4
_bounding_box$ = -140					; size = 4
_object_3d_index$ = -136				; size = 4
_target_max_position$ = -132				; size = 12
_target_min_position$ = -120				; size = 12
_target_new_position$ = -108				; size = 12
_target_old_position$ = -96				; size = 12
_target_motion_vector$ = -84				; size = 4
_target_position$ = -80					; size = 4
_source_max_position$ = -76				; size = 12
_source_min_position$ = -64				; size = 12
_building$ = -52					; size = 4
_target_succ$ = -48					; size = 4
_target$ = -44						; size = 4
_sector$ = -40						; size = 4
_sqr_velocity$ = -36					; size = 4
_radius$ = -32						; size = 4
_ignore_all_fixed_entities_in_sector$ = -28		; size = 4
_z_sector$ = -24					; size = 4
_x_sector$ = -20					; size = 4
_z_sector_max$ = -16					; size = 4
_x_sector_max$ = -12					; size = 4
_z_sector_min$ = -8					; size = 4
_x_sector_min$ = -4					; size = 4
_los_source$ = 8					; size = 4
_los_target$ = 12					; size = 4
_source_old_position$ = 16				; size = 4
_source_new_position$ = 20				; size = 4
_source_intercept_point$ = 24				; size = 4
_face_normal$ = 28					; size = 4
?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z PROC ; get_line_of_sight_collision_entity, COMDAT

; 1142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1143 : 	int
; 1144 : 		x_sector_min,
; 1145 : 		z_sector_min,
; 1146 : 		x_sector_max,
; 1147 : 		z_sector_max,
; 1148 : 		x_sector,
; 1149 : 		z_sector,
; 1150 : 		ignore_all_fixed_entities_in_sector;
; 1151 : 
; 1152 : 	float
; 1153 : 		radius,
; 1154 : 		sqr_velocity;
; 1155 : 
; 1156 : 	entity
; 1157 : 		*sector,
; 1158 : 		*target,
; 1159 : 		*target_succ,
; 1160 : 		*building;
; 1161 : 
; 1162 : 	vec3d
; 1163 : 		source_min_position,
; 1164 : 		source_max_position,
; 1165 : 		*target_position,
; 1166 : 		*target_motion_vector,
; 1167 : 		target_old_position,
; 1168 : 		target_new_position,
; 1169 : 		target_min_position,
; 1170 : 		target_max_position;
; 1171 : 
; 1172 : 	object_3d_index_numbers
; 1173 : 		object_3d_index;
; 1174 : 
; 1175 : 	object_3d_bounds
; 1176 : 		*bounding_box;
; 1177 : 
; 1178 : 	ASSERT (source_old_position);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _source_old_position$[ebp], 0
  00010	75 18		 jne	 SHORT $LN14@get_line_o
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00017	83 c0 24	 add	 eax, 36			; 00000024H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GALEKPNG@source_old_position@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@get_line_o:

; 1179 : 
; 1180 : 	ASSERT (source_new_position);

  0002a	83 7d 14 00	 cmp	 DWORD PTR _source_new_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN15@get_line_o
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00035	83 c0 26	 add	 eax, 38			; 00000026H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHJPOOAI@source_new_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@get_line_o:

; 1181 : 
; 1182 : 	ASSERT (source_intercept_point);

  00048	83 7d 18 00	 cmp	 DWORD PTR _source_intercept_point$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN16@get_line_o
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00053	83 c0 28	 add	 eax, 40			; 00000028H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@ELIBBDFL@source_intercept_point@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@get_line_o:

; 1183 : 
; 1184 : 	ASSERT (face_normal);

  00066	83 7d 1c 00	 cmp	 DWORD PTR _face_normal$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN17@get_line_o
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00071	83 c0 2a	 add	 eax, 42			; 0000002aH
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JKBFLAII@face_normal@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@get_line_o:

; 1185 : 
; 1186 : 	if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  0008b	74 2a		 je	 SHORT $LN18@get_line_o
  0008d	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  00094	75 21		 jne	 SHORT $LN18@get_line_o

; 1187 : 	{
; 1188 : 		create_debug_3d_line (source_old_position, source_new_position, LOS_COLOUR, collision_box_lifetime);

  00096	51		 push	 ecx
  00097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?collision_box_lifetime@@3MA
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_blue@@3UREAL_COLOUR@@A ; sys_col_blue
  000a9	50		 push	 eax
  000aa	8b 4d 14	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 10	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line
$LN18@get_line_o:

; 1189 : 	}
; 1190 : 
; 1191 : 	////////////////////////////////////////
; 1192 : 	//
; 1193 : 	// get source min and max positions
; 1194 : 	//
; 1195 : 	////////////////////////////////////////
; 1196 : 
; 1197 : 	if (source_old_position->x <= source_new_position->x)

  000b7	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  000ba	8b 4d 10	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  000bd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c1	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  000c4	72 1a		 jb	 SHORT $LN19@get_line_o

; 1198 : 	{
; 1199 : 		source_min_position.x = source_old_position->x;

  000c6	8b 45 10	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000c9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000cd	f3 0f 11 45 c0	 movss	 DWORD PTR _source_min_position$[ebp], xmm0

; 1200 : 		source_max_position.x = source_new_position->x;

  000d2	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  000d5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000d9	f3 0f 11 45 b4	 movss	 DWORD PTR _source_max_position$[ebp], xmm0

; 1201 : 	}
; 1202 : 	else

  000de	eb 18		 jmp	 SHORT $LN20@get_line_o
$LN19@get_line_o:

; 1203 : 	{
; 1204 : 		source_min_position.x = source_new_position->x;

  000e0	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  000e3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e7	f3 0f 11 45 c0	 movss	 DWORD PTR _source_min_position$[ebp], xmm0

; 1205 : 		source_max_position.x = source_old_position->x;

  000ec	8b 45 10	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  000ef	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000f3	f3 0f 11 45 b4	 movss	 DWORD PTR _source_max_position$[ebp], xmm0
$LN20@get_line_o:

; 1206 : 	}
; 1207 : 
; 1208 : 	if (source_old_position->y <= source_new_position->y)

  000f8	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  000fb	8b 4d 10	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  000fe	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00103	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  00107	72 1c		 jb	 SHORT $LN21@get_line_o

; 1209 : 	{
; 1210 : 		source_min_position.y = source_old_position->y;

  00109	8b 45 10	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  0010c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00111	f3 0f 11 45 c4	 movss	 DWORD PTR _source_min_position$[ebp+4], xmm0

; 1211 : 		source_max_position.y = source_new_position->y;

  00116	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00119	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0011e	f3 0f 11 45 b8	 movss	 DWORD PTR _source_max_position$[ebp+4], xmm0

; 1212 : 	}
; 1213 : 	else

  00123	eb 1a		 jmp	 SHORT $LN22@get_line_o
$LN21@get_line_o:

; 1214 : 	{
; 1215 : 		source_min_position.y = source_new_position->y;

  00125	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00128	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0012d	f3 0f 11 45 c4	 movss	 DWORD PTR _source_min_position$[ebp+4], xmm0

; 1216 : 		source_max_position.y = source_old_position->y;

  00132	8b 45 10	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  00135	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0013a	f3 0f 11 45 b8	 movss	 DWORD PTR _source_max_position$[ebp+4], xmm0
$LN22@get_line_o:

; 1217 : 	}
; 1218 : 
; 1219 : 	if (source_old_position->z <= source_new_position->z)

  0013f	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00142	8b 4d 10	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00145	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0014a	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  0014e	72 1c		 jb	 SHORT $LN23@get_line_o

; 1220 : 	{
; 1221 : 		source_min_position.z = source_old_position->z;

  00150	8b 45 10	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  00153	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00158	f3 0f 11 45 c8	 movss	 DWORD PTR _source_min_position$[ebp+8], xmm0

; 1222 : 		source_max_position.z = source_new_position->z;

  0015d	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00160	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00165	f3 0f 11 45 bc	 movss	 DWORD PTR _source_max_position$[ebp+8], xmm0

; 1223 : 	}
; 1224 : 	else

  0016a	eb 1a		 jmp	 SHORT $LN24@get_line_o
$LN23@get_line_o:

; 1225 : 	{
; 1226 : 		source_min_position.z = source_new_position->z;

  0016c	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  0016f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00174	f3 0f 11 45 c8	 movss	 DWORD PTR _source_min_position$[ebp+8], xmm0

; 1227 : 		source_max_position.z = source_old_position->z;

  00179	8b 45 10	 mov	 eax, DWORD PTR _source_old_position$[ebp]
  0017c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00181	f3 0f 11 45 bc	 movss	 DWORD PTR _source_max_position$[ebp+8], xmm0
$LN24@get_line_o:

; 1228 : 	}
; 1229 : 
; 1230 : 	////////////////////////////////////////
; 1231 : 	//
; 1232 : 	// calc sector scan (widened to include entites which are overlapping sector edges)
; 1233 : 	//
; 1234 : 	////////////////////////////////////////
; 1235 : 
; 1236 : 	get_x_sector (x_sector_min, max (source_min_position.x - LARGEST_3D_OBJECT_RADIUS, MIN_MAP_X));

  00186	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _source_min_position$[ebp]
  0018b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43160000
  00193	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR $T4[ebp], xmm0
  0019b	8d 45 fc	 lea	 eax, DWORD PTR _x_sector_min$[ebp]
  0019e	50		 push	 eax
  0019f	68 24 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+36
  001a4	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  001aa	51		 push	 ecx
  001ab	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001b0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001b4	51		 push	 ecx
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  001bf	8b 45 fc	 mov	 eax, DWORD PTR _x_sector_min$[ebp]
  001c2	99		 cdq
  001c3	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  001c9	89 45 fc	 mov	 DWORD PTR _x_sector_min$[ebp], eax

; 1237 : 	get_z_sector (z_sector_min, max (source_min_position.z - LARGEST_3D_OBJECT_RADIUS, MIN_MAP_Z));

  001cc	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  001d1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43160000
  001d9	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  001e1	8d 45 f8	 lea	 eax, DWORD PTR _z_sector_min$[ebp]
  001e4	50		 push	 eax
  001e5	68 2c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+44
  001ea	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001f0	51		 push	 ecx
  001f1	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001f6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001fa	51		 push	 ecx
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00205	8b 45 f8	 mov	 eax, DWORD PTR _z_sector_min$[ebp]
  00208	99		 cdq
  00209	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0020f	89 45 f8	 mov	 DWORD PTR _z_sector_min$[ebp], eax

; 1238 : 	get_x_sector (x_sector_max, min (source_max_position.x + LARGEST_3D_OBJECT_RADIUS, MAX_MAP_X));

  00212	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _source_max_position$[ebp]
  00217	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@43160000
  0021f	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  00227	8d 45 f4	 lea	 eax, DWORD PTR _x_sector_max$[ebp]
  0022a	50		 push	 eax
  0022b	68 3c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+60
  00230	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0023c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00240	51		 push	 ecx
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0024b	8b 45 f4	 mov	 eax, DWORD PTR _x_sector_max$[ebp]
  0024e	99		 cdq
  0024f	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00255	89 45 f4	 mov	 DWORD PTR _x_sector_max$[ebp], eax

; 1239 : 	get_z_sector (z_sector_max, min (source_max_position.z + LARGEST_3D_OBJECT_RADIUS, MAX_MAP_Z));

  00258	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  0025d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@43160000
  00265	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  0026d	8d 45 f0	 lea	 eax, DWORD PTR _z_sector_max$[ebp]
  00270	50		 push	 eax
  00271	68 44 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+68
  00276	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0027c	51		 push	 ecx
  0027d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00282	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00286	51		 push	 ecx
  00287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00291	8b 45 f0	 mov	 eax, DWORD PTR _z_sector_max$[ebp]
  00294	99		 cdq
  00295	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0029b	89 45 f0	 mov	 DWORD PTR _z_sector_max$[ebp], eax

; 1240 : 
; 1241 : 	////////////////////////////////////////
; 1242 : 	//
; 1243 : 	// sector scan
; 1244 : 	//
; 1245 : 	////////////////////////////////////////
; 1246 : 
; 1247 : 	//
; 1248 : 	// scan
; 1249 : 	//
; 1250 : 
; 1251 : 	for (x_sector = x_sector_min; x_sector <= x_sector_max; x_sector++)

  0029e	8b 45 fc	 mov	 eax, DWORD PTR _x_sector_min$[ebp]
  002a1	89 45 ec	 mov	 DWORD PTR _x_sector$[ebp], eax
  002a4	eb 09		 jmp	 SHORT $LN4@get_line_o
$LN2@get_line_o:
  002a6	8b 45 ec	 mov	 eax, DWORD PTR _x_sector$[ebp]
  002a9	83 c0 01	 add	 eax, 1
  002ac	89 45 ec	 mov	 DWORD PTR _x_sector$[ebp], eax
$LN4@get_line_o:
  002af	8b 45 ec	 mov	 eax, DWORD PTR _x_sector$[ebp]
  002b2	3b 45 f4	 cmp	 eax, DWORD PTR _x_sector_max$[ebp]
  002b5	0f 8f f1 17 00
	00		 jg	 $LN3@get_line_o

; 1252 : 	{
; 1253 : 		for (z_sector = z_sector_min; z_sector <= z_sector_max; z_sector++)

  002bb	8b 45 f8	 mov	 eax, DWORD PTR _z_sector_min$[ebp]
  002be	89 45 e8	 mov	 DWORD PTR _z_sector$[ebp], eax
  002c1	eb 09		 jmp	 SHORT $LN7@get_line_o
$LN5@get_line_o:
  002c3	8b 45 e8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  002c6	83 c0 01	 add	 eax, 1
  002c9	89 45 e8	 mov	 DWORD PTR _z_sector$[ebp], eax
$LN7@get_line_o:
  002cc	8b 45 e8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  002cf	3b 45 f0	 cmp	 eax, DWORD PTR _z_sector_max$[ebp]
  002d2	0f 8f cf 17 00
	00		 jg	 $LN6@get_line_o

; 1254 : 		{
; 1255 : 			sector = get_local_raw_sector_entity (x_sector, z_sector);

  002d8	8b 45 e8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  002db	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  002e2	03 45 ec	 add	 eax, DWORD PTR _x_sector$[ebp]
  002e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  002eb	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  002ef	74 1d		 je	 SHORT $LN78@get_line_o
  002f1	8b 55 e8	 mov	 edx, DWORD PTR _z_sector$[ebp]
  002f4	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  002fb	03 55 ec	 add	 edx, DWORD PTR _x_sector$[ebp]
  002fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  00303	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00306	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv192[ebp], ecx
  0030c	eb 24		 jmp	 SHORT $LN79@get_line_o
$LN78@get_line_o:
  0030e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00314	83 c2 71	 add	 edx, 113		; 00000071H
  00317	52		 push	 edx
  00318	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  00322	50		 push	 eax
  00323	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00328	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
$LN79@get_line_o:
  00332	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv192[ebp]
  00338	89 4d d8	 mov	 DWORD PTR _sector$[ebp], ecx

; 1256 : 
; 1257 : 			if (source_min_position.y > get_local_entity_float_value (sector, FLOAT_TYPE_TALLEST_STRUCTURE_HEIGHT))

  0033b	83 7d d8 00	 cmp	 DWORD PTR _sector$[ebp], 0
  0033f	74 0d		 je	 SHORT $LN80@get_line_o
  00341	8b 45 d8	 mov	 eax, DWORD PTR _sector$[ebp]
  00344	8b 08		 mov	 ecx, DWORD PTR [eax]
  00346	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv198[ebp], ecx
  0034c	eb 20		 jmp	 SHORT $LN81@get_line_o
$LN80@get_line_o:
  0034e	68 e9 04 00 00	 push	 1257			; 000004e9H
  00353	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00358	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0035e	52		 push	 edx
  0035f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00364	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv198[ebp], 0
$LN81@get_line_o:
  0036e	b8 01 00 00 00	 mov	 eax, 1
  00373	85 c0		 test	 eax, eax
  00375	74 0c		 je	 SHORT $LN82@get_line_o
  00377	c7 85 1c ff ff
	ff 82 00 00 00	 mov	 DWORD PTR tv205[ebp], 130 ; 00000082H
  00381	eb 20		 jmp	 SHORT $LN83@get_line_o
$LN82@get_line_o:
  00383	68 e9 04 00 00	 push	 1257			; 000004e9H
  00388	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0038d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00393	51		 push	 ecx
  00394	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00399	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv205[ebp], 0
$LN83@get_line_o:
  003a3	68 82 00 00 00	 push	 130			; 00000082H
  003a8	8b 55 d8	 mov	 edx, DWORD PTR _sector$[ebp]
  003ab	52		 push	 edx
  003ac	69 85 20 ff ff
	ff bc 02 00 00	 imul	 eax, DWORD PTR tv198[ebp], 700
  003b6	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv205[ebp]
  003bc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[eax+ecx*4]
  003c3	ff d2		 call	 edx
  003c5	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR tv1116[ebp]
  003cb	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  003d0	0f 2f 85 18 ff
	ff ff		 comiss	 xmm0, DWORD PTR tv1116[ebp]
  003d7	76 09		 jbe	 SHORT $LN25@get_line_o

; 1258 : 			{
; 1259 : 				ignore_all_fixed_entities_in_sector = TRUE;

  003d9	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _ignore_all_fixed_entities_in_sector$[ebp], 1

; 1260 : 			}
; 1261 : 			else

  003e0	eb 07		 jmp	 SHORT $LN26@get_line_o
$LN25@get_line_o:

; 1262 : 			{
; 1263 : 				ignore_all_fixed_entities_in_sector = FALSE;

  003e2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ignore_all_fixed_entities_in_sector$[ebp], 0
$LN26@get_line_o:

; 1264 : 			}
; 1265 : 
; 1266 : 			//
; 1267 : 			// search sector list backwards so that static objects are checked before mobile objects
; 1268 : 			//
; 1269 : 			// (mobile objects tend to be at the start of the list as they are dynamic)
; 1270 : 			//
; 1271 : 
; 1272 : 			target = get_local_entity_first_child (sector, LIST_TYPE_SECTOR);

  003e9	83 7d d8 00	 cmp	 DWORD PTR _sector$[ebp], 0
  003ed	74 0d		 je	 SHORT $LN84@get_line_o
  003ef	8b 45 d8	 mov	 eax, DWORD PTR _sector$[ebp]
  003f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f4	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv218[ebp], ecx
  003fa	eb 27		 jmp	 SHORT $LN85@get_line_o
$LN84@get_line_o:
  003fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00402	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00408	52		 push	 edx
  00409	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0040e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00413	50		 push	 eax
  00414	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00419	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN85@get_line_o:
  00423	b9 01 00 00 00	 mov	 ecx, 1
  00428	85 c9		 test	 ecx, ecx
  0042a	74 0c		 je	 SHORT $LN86@get_line_o
  0042c	c7 85 1c ff ff
	ff 21 00 00 00	 mov	 DWORD PTR tv226[ebp], 33 ; 00000021H
  00436	eb 27		 jmp	 SHORT $LN87@get_line_o
$LN86@get_line_o:
  00438	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  0043e	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00444	52		 push	 edx
  00445	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0044a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0044f	50		 push	 eax
  00450	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00455	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN87@get_line_o:
  0045f	6a 21		 push	 33			; 00000021H
  00461	8b 4d d8	 mov	 ecx, DWORD PTR _sector$[ebp]
  00464	51		 push	 ecx
  00465	69 95 20 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv218[ebp], 180
  0046f	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv226[ebp]
  00475	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0047c	ff d1		 call	 ecx
  0047e	89 45 d4	 mov	 DWORD PTR _target$[ebp], eax

; 1273 : 
; 1274 : 			if (target)

  00481	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00485	0f 84 45 01 00
	00		 je	 $LN9@get_line_o

; 1275 : 			{
; 1276 : 				target_succ = get_local_entity_child_succ (target, LIST_TYPE_SECTOR);

  0048b	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0048f	74 0d		 je	 SHORT $LN88@get_line_o
  00491	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00494	8b 08		 mov	 ecx, DWORD PTR [eax]
  00496	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  0049c	eb 27		 jmp	 SHORT $LN89@get_line_o
$LN88@get_line_o:
  0049e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  004a4	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  004aa	52		 push	 edx
  004ab	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004b5	50		 push	 eax
  004b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004bb	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv239[ebp], 0
$LN89@get_line_o:
  004c5	b9 01 00 00 00	 mov	 ecx, 1
  004ca	85 c9		 test	 ecx, ecx
  004cc	74 0c		 je	 SHORT $LN90@get_line_o
  004ce	c7 85 1c ff ff
	ff 21 00 00 00	 mov	 DWORD PTR tv247[ebp], 33 ; 00000021H
  004d8	eb 27		 jmp	 SHORT $LN91@get_line_o
$LN90@get_line_o:
  004da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  004e0	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  004e6	52		 push	 edx
  004e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004f1	50		 push	 eax
  004f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f7	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv247[ebp], 0
$LN91@get_line_o:
  00501	6a 21		 push	 33			; 00000021H
  00503	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  00506	51		 push	 ecx
  00507	69 95 20 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv239[ebp], 180
  00511	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv247[ebp]
  00517	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0051e	ff d1		 call	 ecx
  00520	89 45 d0	 mov	 DWORD PTR _target_succ$[ebp], eax
$LN8@get_line_o:

; 1277 : 
; 1278 : 				while (target_succ)

  00523	83 7d d0 00	 cmp	 DWORD PTR _target_succ$[ebp], 0
  00527	0f 84 a3 00 00
	00		 je	 $LN9@get_line_o

; 1279 : 				{
; 1280 : 					target = target_succ;

  0052d	8b 45 d0	 mov	 eax, DWORD PTR _target_succ$[ebp]
  00530	89 45 d4	 mov	 DWORD PTR _target$[ebp], eax

; 1281 : 
; 1282 : 					target_succ = get_local_entity_child_succ (target, LIST_TYPE_SECTOR);

  00533	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00537	74 0d		 je	 SHORT $LN92@get_line_o
  00539	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  0053c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0053e	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv292[ebp], ecx
  00544	eb 27		 jmp	 SHORT $LN93@get_line_o
$LN92@get_line_o:
  00546	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  0054c	81 c2 8c 00 00
	00		 add	 edx, 140		; 0000008cH
  00552	52		 push	 edx
  00553	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00558	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00563	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv292[ebp], 0
$LN93@get_line_o:
  0056d	b9 01 00 00 00	 mov	 ecx, 1
  00572	85 c9		 test	 ecx, ecx
  00574	74 0c		 je	 SHORT $LN94@get_line_o
  00576	c7 85 1c ff ff
	ff 21 00 00 00	 mov	 DWORD PTR tv300[ebp], 33 ; 00000021H
  00580	eb 27		 jmp	 SHORT $LN95@get_line_o
$LN94@get_line_o:
  00582	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00588	81 c2 8c 00 00
	00		 add	 edx, 140		; 0000008cH
  0058e	52		 push	 edx
  0058f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00594	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00599	50		 push	 eax
  0059a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0059f	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv300[ebp], 0
$LN95@get_line_o:
  005a9	6a 21		 push	 33			; 00000021H
  005ab	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  005ae	51		 push	 ecx
  005af	69 95 20 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv292[ebp], 180
  005b9	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv300[ebp]
  005bf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  005c6	ff d1		 call	 ecx
  005c8	89 45 d0	 mov	 DWORD PTR _target_succ$[ebp], eax

; 1283 : 				}

  005cb	e9 53 ff ff ff	 jmp	 $LN8@get_line_o
$LN9@get_line_o:

; 1284 : 			}
; 1285 : 
; 1286 : 			while (target)

  005d0	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  005d4	0f 84 c8 14 00
	00		 je	 $LN11@get_line_o

; 1287 : 			{
; 1288 : 				if ((target != los_source) && (target != los_target))

  005da	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  005dd	3b 45 08	 cmp	 eax, DWORD PTR _los_source$[ebp]
  005e0	0f 84 1f 14 00
	00		 je	 $LN76@get_line_o
  005e6	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  005e9	3b 45 0c	 cmp	 eax, DWORD PTR _los_target$[ebp]
  005ec	0f 84 13 14 00
	00		 je	 $LN76@get_line_o

; 1289 : 				{
; 1290 : 					if (get_local_entity_int_value (target, INT_TYPE_COLLISION_TEST_MOBILE))

  005f2	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  005f6	74 0d		 je	 SHORT $LN96@get_line_o
  005f8	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  005fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  005fd	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv314[ebp], ecx
  00603	eb 20		 jmp	 SHORT $LN97@get_line_o
$LN96@get_line_o:
  00605	68 0a 05 00 00	 push	 1290			; 0000050aH
  0060a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0060f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00615	52		 push	 edx
  00616	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0061b	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv314[ebp], 0
$LN97@get_line_o:
  00625	b8 01 00 00 00	 mov	 eax, 1
  0062a	85 c0		 test	 eax, eax
  0062c	74 0c		 je	 SHORT $LN98@get_line_o
  0062e	c7 85 1c ff ff
	ff 1b 00 00 00	 mov	 DWORD PTR tv321[ebp], 27 ; 0000001bH
  00638	eb 20		 jmp	 SHORT $LN99@get_line_o
$LN98@get_line_o:
  0063a	68 0a 05 00 00	 push	 1290			; 0000050aH
  0063f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00644	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0064a	51		 push	 ecx
  0064b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00650	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv321[ebp], 0
$LN99@get_line_o:
  0065a	6a 1b		 push	 27			; 0000001bH
  0065c	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  0065f	52		 push	 edx
  00660	69 85 20 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv314[ebp], 1116
  0066a	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv321[ebp]
  00670	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00677	ff d2		 call	 edx
  00679	85 c0		 test	 eax, eax
  0067b	0f 84 41 08 00
	00		 je	 $LN29@get_line_o

; 1291 : 					{
; 1292 : 						////////////////////////////////////////
; 1293 : 						//
; 1294 : 						// MOBILE TARGET
; 1295 : 						//
; 1296 : 						////////////////////////////////////////
; 1297 : 
; 1298 : 						object_3d_index = get_local_entity_int_value (target, INT_TYPE_OBJECT_3D_SHAPE);

  00681	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00685	74 0d		 je	 SHORT $LN100@get_line_o
  00687	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  0068a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0068c	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv334[ebp], ecx
  00692	eb 27		 jmp	 SHORT $LN101@get_line_o
$LN100@get_line_o:
  00694	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  0069a	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  006a0	52		 push	 edx
  006a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006ab	50		 push	 eax
  006ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006b1	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv334[ebp], 0
$LN101@get_line_o:
  006bb	b9 01 00 00 00	 mov	 ecx, 1
  006c0	85 c9		 test	 ecx, ecx
  006c2	74 0c		 je	 SHORT $LN102@get_line_o
  006c4	c7 85 1c ff ff
	ff 92 00 00 00	 mov	 DWORD PTR tv342[ebp], 146 ; 00000092H
  006ce	eb 27		 jmp	 SHORT $LN103@get_line_o
$LN102@get_line_o:
  006d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  006d6	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  006dc	52		 push	 edx
  006dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  006e7	50		 push	 eax
  006e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ed	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv342[ebp], 0
$LN103@get_line_o:
  006f7	68 92 00 00 00	 push	 146			; 00000092H
  006fc	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  006ff	51		 push	 ecx
  00700	69 95 20 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv334[ebp], 1116
  0070a	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv342[ebp]
  00710	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00717	ff d1		 call	 ecx
  00719	89 85 78 ff ff
	ff		 mov	 DWORD PTR _object_3d_index$[ebp], eax

; 1299 : 
; 1300 : 						ASSERT (object_3d_index != OBJECT_3D_INVALID_OBJECT_INDEX);

  0071f	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _object_3d_index$[ebp], 0
  00726	75 1a		 jne	 SHORT $LN31@get_line_o
  00728	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  0072d	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  00732	50		 push	 eax
  00733	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00738	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BJJCPMFI@object_3d_index?5?$CB?$DN?5OBJECT_3D_IN@
  0073d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN31@get_line_o:

; 1301 : 
; 1302 : 						bounding_box = get_object_3d_bounding_box_without_lines (object_3d_index);

  00742	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  00748	50		 push	 eax
  00749	e8 00 00 00 00	 call	 ?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box_without_lines
  0074e	89 85 74 ff ff
	ff		 mov	 DWORD PTR _bounding_box$[ebp], eax

; 1303 : 
; 1304 : 						ASSERT (bounding_box);

  00754	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _bounding_box$[ebp], 0
  0075b	75 1a		 jne	 SHORT $LN32@get_line_o
  0075d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00762	05 a2 00 00 00	 add	 eax, 162		; 000000a2H
  00767	50		 push	 eax
  00768	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0076d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LOLJEHA@bounding_box@
  00772	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN32@get_line_o:

; 1305 : 
; 1306 : 						target_motion_vector = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_MOTION_VECTOR);

  00777	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0077b	74 0d		 je	 SHORT $LN104@get_line_o
  0077d	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00780	8b 08		 mov	 ecx, DWORD PTR [eax]
  00782	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv366[ebp], ecx
  00788	eb 27		 jmp	 SHORT $LN105@get_line_o
$LN104@get_line_o:
  0078a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00790	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00796	52		 push	 edx
  00797	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0079c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007a1	50		 push	 eax
  007a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007a7	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv366[ebp], 0
$LN105@get_line_o:
  007b1	b9 01 00 00 00	 mov	 ecx, 1
  007b6	85 c9		 test	 ecx, ecx
  007b8	74 0c		 je	 SHORT $LN106@get_line_o
  007ba	c7 85 1c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv374[ebp], 6
  007c4	eb 27		 jmp	 SHORT $LN107@get_line_o
$LN106@get_line_o:
  007c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  007cc	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  007d2	52		 push	 edx
  007d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  007dd	50		 push	 eax
  007de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007e3	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv374[ebp], 0
$LN107@get_line_o:
  007ed	6a 06		 push	 6
  007ef	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  007f2	51		 push	 ecx
  007f3	6b 95 20 ff ff
	ff 60		 imul	 edx, DWORD PTR tv366[ebp], 96
  007fa	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv374[ebp]
  00800	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00807	ff d1		 call	 ecx
  00809	89 45 ac	 mov	 DWORD PTR _target_motion_vector$[ebp], eax

; 1307 : 
; 1308 : 						sqr_velocity =

  0080c	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  0080f	8b 4d ac	 mov	 ecx, DWORD PTR _target_motion_vector$[ebp]
  00812	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00816	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0081a	8b 55 ac	 mov	 edx, DWORD PTR _target_motion_vector$[ebp]
  0081d	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00820	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00825	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  0082a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0082e	8b 4d ac	 mov	 ecx, DWORD PTR _target_motion_vector$[ebp]
  00831	8b 55 ac	 mov	 edx, DWORD PTR _target_motion_vector$[ebp]
  00834	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00839	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  0083e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00842	f3 0f 11 45 dc	 movss	 DWORD PTR _sqr_velocity$[ebp], xmm0

; 1309 : 						(
; 1310 : 							target_motion_vector->x * target_motion_vector->x +
; 1311 : 							target_motion_vector->y * target_motion_vector->y +
; 1312 : 							target_motion_vector->z * target_motion_vector->z
; 1313 : 						);
; 1314 : 
; 1315 : 						if (sqr_velocity > 1.0)

  00847	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _sqr_velocity$[ebp]
  0084c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00854	0f 86 51 04 00
	00		 jbe	 $LN33@get_line_o

; 1316 : 						{
; 1317 : 							//
; 1318 : 							// moving mobile
; 1319 : 							//
; 1320 : 
; 1321 : 							if (get_local_entity_int_value (target, INT_TYPE_UPDATED))

  0085a	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0085e	74 0d		 je	 SHORT $LN108@get_line_o
  00860	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00863	8b 08		 mov	 ecx, DWORD PTR [eax]
  00865	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv398[ebp], ecx
  0086b	eb 20		 jmp	 SHORT $LN109@get_line_o
$LN108@get_line_o:
  0086d	68 29 05 00 00	 push	 1321			; 00000529H
  00872	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00877	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0087d	52		 push	 edx
  0087e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00883	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv398[ebp], 0
$LN109@get_line_o:
  0088d	b8 01 00 00 00	 mov	 eax, 1
  00892	85 c0		 test	 eax, eax
  00894	74 0c		 je	 SHORT $LN110@get_line_o
  00896	c7 85 1c ff ff
	ff ee 00 00 00	 mov	 DWORD PTR tv405[ebp], 238 ; 000000eeH
  008a0	eb 20		 jmp	 SHORT $LN111@get_line_o
$LN110@get_line_o:
  008a2	68 29 05 00 00	 push	 1321			; 00000529H
  008a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008b2	51		 push	 ecx
  008b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008b8	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv405[ebp], 0
$LN111@get_line_o:
  008c2	68 ee 00 00 00	 push	 238			; 000000eeH
  008c7	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  008ca	52		 push	 edx
  008cb	69 85 20 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv398[ebp], 1116
  008d5	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv405[ebp]
  008db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  008e2	ff d2		 call	 edx
  008e4	85 c0		 test	 eax, eax
  008e6	0f 84 f4 00 00
	00		 je	 $LN35@get_line_o

; 1322 : 							{
; 1323 : 								get_local_entity_vec3d (target, VEC3D_TYPE_POSITION, &target_new_position);

  008ec	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  008f0	74 0d		 je	 SHORT $LN112@get_line_o
  008f2	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  008f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  008f7	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv450[ebp], ecx
  008fd	eb 27		 jmp	 SHORT $LN113@get_line_o
$LN112@get_line_o:
  008ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00905	81 c2 b5 00 00
	00		 add	 edx, 181		; 000000b5H
  0090b	52		 push	 edx
  0090c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00911	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00916	50		 push	 eax
  00917	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0091c	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv450[ebp], 0
$LN113@get_line_o:
  00926	b9 01 00 00 00	 mov	 ecx, 1
  0092b	85 c9		 test	 ecx, ecx
  0092d	74 0c		 je	 SHORT $LN114@get_line_o
  0092f	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv458[ebp], 8
  00939	eb 27		 jmp	 SHORT $LN115@get_line_o
$LN114@get_line_o:
  0093b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00941	81 c2 b5 00 00
	00		 add	 edx, 181		; 000000b5H
  00947	52		 push	 edx
  00948	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0094d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00952	50		 push	 eax
  00953	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00958	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv458[ebp], 0
$LN115@get_line_o:
  00962	8d 4d 94	 lea	 ecx, DWORD PTR _target_new_position$[ebp]
  00965	51		 push	 ecx
  00966	6a 08		 push	 8
  00968	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  0096b	52		 push	 edx
  0096c	6b 85 20 ff ff
	ff 60		 imul	 eax, DWORD PTR tv450[ebp], 96
  00973	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv458[ebp]
  00979	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00980	ff d2		 call	 edx

; 1324 : 
; 1325 : 								target_old_position.x = target_new_position.x - target_motion_vector->x * get_delta_time ();

  00982	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00985	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00989	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00991	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _target_new_position$[ebp]
  00996	f3 0f 5c c8	 subss	 xmm1, xmm0
  0099a	f3 0f 11 4d a0	 movss	 DWORD PTR _target_old_position$[ebp], xmm1

; 1326 : 								target_old_position.y = target_new_position.y - target_motion_vector->y * get_delta_time ();

  0099f	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  009a2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  009a7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  009af	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _target_new_position$[ebp+4]
  009b4	f3 0f 5c c8	 subss	 xmm1, xmm0
  009b8	f3 0f 11 4d a4	 movss	 DWORD PTR _target_old_position$[ebp+4], xmm1

; 1327 : 								target_old_position.z = target_new_position.z - target_motion_vector->z * get_delta_time ();

  009bd	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  009c0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  009c5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  009cd	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _target_new_position$[ebp+8]
  009d2	f3 0f 5c c8	 subss	 xmm1, xmm0
  009d6	f3 0f 11 4d a8	 movss	 DWORD PTR _target_old_position$[ebp+8], xmm1

; 1328 : 							}
; 1329 : 							else

  009db	e9 e3 00 00 00	 jmp	 $LN36@get_line_o
$LN35@get_line_o:

; 1330 : 							{
; 1331 : 								get_local_entity_vec3d (target, VEC3D_TYPE_POSITION, &target_old_position);

  009e0	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  009e4	74 0d		 je	 SHORT $LN116@get_line_o
  009e6	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  009e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  009eb	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv479[ebp], ecx
  009f1	eb 27		 jmp	 SHORT $LN117@get_line_o
$LN116@get_line_o:
  009f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  009f9	81 c2 bd 00 00
	00		 add	 edx, 189		; 000000bdH
  009ff	52		 push	 edx
  00a00	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a0a	50		 push	 eax
  00a0b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a10	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv479[ebp], 0
$LN117@get_line_o:
  00a1a	b9 01 00 00 00	 mov	 ecx, 1
  00a1f	85 c9		 test	 ecx, ecx
  00a21	74 0c		 je	 SHORT $LN118@get_line_o
  00a23	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv487[ebp], 8
  00a2d	eb 27		 jmp	 SHORT $LN119@get_line_o
$LN118@get_line_o:
  00a2f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00a35	81 c2 bd 00 00
	00		 add	 edx, 189		; 000000bdH
  00a3b	52		 push	 edx
  00a3c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00a46	50		 push	 eax
  00a47	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a4c	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv487[ebp], 0
$LN119@get_line_o:
  00a56	8d 4d a0	 lea	 ecx, DWORD PTR _target_old_position$[ebp]
  00a59	51		 push	 ecx
  00a5a	6a 08		 push	 8
  00a5c	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  00a5f	52		 push	 edx
  00a60	6b 85 20 ff ff
	ff 60		 imul	 eax, DWORD PTR tv479[ebp], 96
  00a67	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv487[ebp]
  00a6d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00a74	ff d2		 call	 edx

; 1332 : 
; 1333 : 								target_new_position.x = target_old_position.x + target_motion_vector->x * get_delta_time ();

  00a76	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00a79	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00a7d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00a85	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _target_old_position$[ebp]
  00a8a	f3 0f 11 45 94	 movss	 DWORD PTR _target_new_position$[ebp], xmm0

; 1334 : 								target_new_position.y = target_old_position.y + target_motion_vector->y * get_delta_time ();

  00a8f	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00a92	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00a97	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00a9f	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _target_old_position$[ebp+4]
  00aa4	f3 0f 11 45 98	 movss	 DWORD PTR _target_new_position$[ebp+4], xmm0

; 1335 : 								target_new_position.z = target_old_position.z + target_motion_vector->z * get_delta_time ();

  00aa9	8b 45 ac	 mov	 eax, DWORD PTR _target_motion_vector$[ebp]
  00aac	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00ab1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00ab9	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _target_old_position$[ebp+8]
  00abe	f3 0f 11 45 9c	 movss	 DWORD PTR _target_new_position$[ebp+8], xmm0
$LN36@get_line_o:

; 1336 : 							}
; 1337 : 
; 1338 : 							//
; 1339 : 							// get target min and max positions (widened to target radius)
; 1340 : 							//
; 1341 : 
; 1342 : 							if (target_old_position.x <= target_new_position.x)

  00ac3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _target_new_position$[ebp]
  00ac8	0f 2f 45 a0	 comiss	 xmm0, DWORD PTR _target_old_position$[ebp]
  00acc	72 19		 jb	 SHORT $LN37@get_line_o

; 1343 : 							{
; 1344 : 								target_min_position.x = target_old_position.x;

  00ace	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _target_old_position$[ebp]
  00ad3	f3 0f 11 45 88	 movss	 DWORD PTR _target_min_position$[ebp], xmm0

; 1345 : 								target_max_position.x = target_new_position.x;

  00ad8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _target_new_position$[ebp]
  00add	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _target_max_position$[ebp], xmm0

; 1346 : 							}
; 1347 : 							else

  00ae5	eb 17		 jmp	 SHORT $LN38@get_line_o
$LN37@get_line_o:

; 1348 : 							{
; 1349 : 								target_min_position.x = target_new_position.x;

  00ae7	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _target_new_position$[ebp]
  00aec	f3 0f 11 45 88	 movss	 DWORD PTR _target_min_position$[ebp], xmm0

; 1350 : 								target_max_position.x = target_old_position.x;

  00af1	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _target_old_position$[ebp]
  00af6	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _target_max_position$[ebp], xmm0
$LN38@get_line_o:

; 1351 : 							}
; 1352 : 
; 1353 : 							if (target_old_position.y <= target_new_position.y)

  00afe	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _target_new_position$[ebp+4]
  00b03	0f 2f 45 a4	 comiss	 xmm0, DWORD PTR _target_old_position$[ebp+4]
  00b07	72 16		 jb	 SHORT $LN39@get_line_o

; 1354 : 							{
; 1355 : 								target_min_position.y = target_old_position.y;

  00b09	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _target_old_position$[ebp+4]
  00b0e	f3 0f 11 45 8c	 movss	 DWORD PTR _target_min_position$[ebp+4], xmm0

; 1356 : 								target_max_position.y = target_new_position.y;

  00b13	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _target_new_position$[ebp+4]
  00b18	f3 0f 11 45 80	 movss	 DWORD PTR _target_max_position$[ebp+4], xmm0

; 1357 : 							}
; 1358 : 							else

  00b1d	eb 14		 jmp	 SHORT $LN40@get_line_o
$LN39@get_line_o:

; 1359 : 							{
; 1360 : 								target_min_position.y = target_new_position.y;

  00b1f	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _target_new_position$[ebp+4]
  00b24	f3 0f 11 45 8c	 movss	 DWORD PTR _target_min_position$[ebp+4], xmm0

; 1361 : 								target_max_position.y = target_old_position.y;

  00b29	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _target_old_position$[ebp+4]
  00b2e	f3 0f 11 45 80	 movss	 DWORD PTR _target_max_position$[ebp+4], xmm0
$LN40@get_line_o:

; 1362 : 							}
; 1363 : 
; 1364 : 							if (target_old_position.z <= target_new_position.z)

  00b33	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _target_new_position$[ebp+8]
  00b38	0f 2f 45 a8	 comiss	 xmm0, DWORD PTR _target_old_position$[ebp+8]
  00b3c	72 16		 jb	 SHORT $LN41@get_line_o

; 1365 : 							{
; 1366 : 								target_min_position.z = target_old_position.z;

  00b3e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _target_old_position$[ebp+8]
  00b43	f3 0f 11 45 90	 movss	 DWORD PTR _target_min_position$[ebp+8], xmm0

; 1367 : 								target_max_position.z = target_new_position.z;

  00b48	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _target_new_position$[ebp+8]
  00b4d	f3 0f 11 45 84	 movss	 DWORD PTR _target_max_position$[ebp+8], xmm0

; 1368 : 							}
; 1369 : 							else

  00b52	eb 14		 jmp	 SHORT $LN42@get_line_o
$LN41@get_line_o:

; 1370 : 							{
; 1371 : 								target_min_position.z = target_new_position.z;

  00b54	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _target_new_position$[ebp+8]
  00b59	f3 0f 11 45 90	 movss	 DWORD PTR _target_min_position$[ebp+8], xmm0

; 1372 : 								target_max_position.z = target_old_position.z;

  00b5e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _target_old_position$[ebp+8]
  00b63	f3 0f 11 45 84	 movss	 DWORD PTR _target_max_position$[ebp+8], xmm0
$LN42@get_line_o:

; 1373 : 							}
; 1374 : 
; 1375 : 							radius = get_object_3d_radius (object_3d_index);

  00b68	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  00b6e	50		 push	 eax
  00b6f	e8 00 00 00 00	 call	 ?get_object_3d_radius@@YGMH@Z ; get_object_3d_radius
  00b74	d9 5d e0	 fstp	 DWORD PTR _radius$[ebp]

; 1376 : 
; 1377 : 							target_min_position.x -= radius;

  00b77	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _target_min_position$[ebp]
  00b7c	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  00b81	f3 0f 11 45 88	 movss	 DWORD PTR _target_min_position$[ebp], xmm0

; 1378 : 							target_min_position.y -= radius;

  00b86	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+4]
  00b8b	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  00b90	f3 0f 11 45 8c	 movss	 DWORD PTR _target_min_position$[ebp+4], xmm0

; 1379 : 							target_min_position.z -= radius;

  00b95	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+8]
  00b9a	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  00b9f	f3 0f 11 45 90	 movss	 DWORD PTR _target_min_position$[ebp+8], xmm0

; 1380 : 
; 1381 : 							target_max_position.x += radius;

  00ba4	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _target_max_position$[ebp]
  00bac	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00bb1	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _target_max_position$[ebp], xmm0

; 1382 : 							target_max_position.y += radius;

  00bb9	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _target_max_position$[ebp+4]
  00bbe	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00bc3	f3 0f 11 45 80	 movss	 DWORD PTR _target_max_position$[ebp+4], xmm0

; 1383 : 							target_max_position.z += radius;

  00bc8	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _target_max_position$[ebp+8]
  00bcd	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00bd2	f3 0f 11 45 84	 movss	 DWORD PTR _target_max_position$[ebp+8], xmm0

; 1384 : 
; 1385 : 							if
; 1386 : 							(
; 1387 : 								(!(target_max_position.x < source_min_position.x)) &&
; 1388 : 								(!(target_min_position.x > source_max_position.x)) &&
; 1389 : 								(!(target_max_position.y < source_min_position.y)) &&
; 1390 : 								(!(target_min_position.y > source_max_position.y)) &&
; 1391 : 								(!(target_max_position.z < source_min_position.z)) &&

  00bd7	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _source_min_position$[ebp]
  00bdc	0f 2f 85 7c ff
	ff ff		 comiss	 xmm0, DWORD PTR _target_max_position$[ebp]
  00be3	0f 87 bd 00 00
	00		 ja	 $LN43@get_line_o
  00be9	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _target_min_position$[ebp]
  00bee	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp]
  00bf2	0f 87 ae 00 00
	00		 ja	 $LN43@get_line_o
  00bf8	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  00bfd	0f 2f 45 80	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+4]
  00c01	0f 87 9f 00 00
	00		 ja	 $LN43@get_line_o
  00c07	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+4]
  00c0c	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+4]
  00c10	0f 87 90 00 00
	00		 ja	 $LN43@get_line_o
  00c16	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  00c1b	0f 2f 45 84	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+8]
  00c1f	0f 87 81 00 00
	00		 ja	 $LN43@get_line_o
  00c25	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+8]
  00c2a	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  00c2e	77 76		 ja	 SHORT $LN43@get_line_o

; 1392 : 								(!(target_min_position.z > source_max_position.z))
; 1393 : 							)
; 1394 : 							{
; 1395 : 								if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  00c30	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  00c37	74 32		 je	 SHORT $LN45@get_line_o
  00c39	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  00c40	75 29		 jne	 SHORT $LN45@get_line_o

; 1396 : 								{
; 1397 : 									draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_HIT_COLOUR);

  00c42	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  00c47	50		 push	 eax
  00c48	8d 4d b4	 lea	 ecx, DWORD PTR _source_max_position$[ebp]
  00c4b	51		 push	 ecx
  00c4c	8d 55 c0	 lea	 edx, DWORD PTR _source_min_position$[ebp]
  00c4f	52		 push	 edx
  00c50	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box

; 1398 : 									draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_HIT_COLOUR);

  00c55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  00c5a	50		 push	 eax
  00c5b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _target_max_position$[ebp]
  00c61	51		 push	 ecx
  00c62	8d 55 88	 lea	 edx, DWORD PTR _target_min_position$[ebp]
  00c65	52		 push	 edx
  00c66	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box
$LN45@get_line_o:

; 1399 : 								}
; 1400 : 
; 1401 : 								if
; 1402 : 								(
; 1403 : 									accurate_moving_bounding_box_collision_test
; 1404 : 									(

  00c6b	8b 45 1c	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00c6e	50		 push	 eax
  00c6f	8b 4d 18	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00c72	51		 push	 ecx
  00c73	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00c79	52		 push	 edx
  00c7a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  00c80	50		 push	 eax
  00c81	8d 4d 94	 lea	 ecx, DWORD PTR _target_new_position$[ebp]
  00c84	51		 push	 ecx
  00c85	8d 55 a0	 lea	 edx, DWORD PTR _target_old_position$[ebp]
  00c88	52		 push	 edx
  00c89	8b 45 14	 mov	 eax, DWORD PTR _source_new_position$[ebp]
  00c8c	50		 push	 eax
  00c8d	8b 4d 10	 mov	 ecx, DWORD PTR _source_old_position$[ebp]
  00c90	51		 push	 ecx
  00c91	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  00c94	52		 push	 edx
  00c95	e8 00 00 00 00	 call	 ?accurate_moving_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@111HPAUOBJECT_3D_BOUNDS@@11@Z ; accurate_moving_bounding_box_collision_test
  00c9a	85 c0		 test	 eax, eax
  00c9c	74 08		 je	 SHORT $LN46@get_line_o

; 1405 : 										target,
; 1406 : 										source_old_position,
; 1407 : 										source_new_position,
; 1408 : 										&target_old_position,
; 1409 : 										&target_new_position,
; 1410 : 										object_3d_index,
; 1411 : 										bounding_box,
; 1412 : 										source_intercept_point,
; 1413 : 										face_normal
; 1414 : 									)
; 1415 : 								)
; 1416 : 								{
; 1417 : 									return (target);

  00c9e	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00ca1	e9 08 0e 00 00	 jmp	 $LN1@get_line_o
$LN46@get_line_o:
$LN43@get_line_o:

; 1418 : 								}
; 1419 : 							}
; 1420 : 							else
; 1421 : 							{
; 1422 : 								#if DEBUG_MODULE_ENABLE_COLLISION_BOX_MISS
; 1423 : 
; 1424 : 								if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))
; 1425 : 								{
; 1426 : 									draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_MISS_COLOUR);
; 1427 : 									draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_MISS_COLOUR);
; 1428 : 								}
; 1429 : 
; 1430 : 								#endif
; 1431 : 							}
; 1432 : 						}
; 1433 : 						else

  00ca6	e9 12 02 00 00	 jmp	 $LN48@get_line_o
$LN33@get_line_o:

; 1434 : 						{
; 1435 : 							//
; 1436 : 							// stationary mobile (usually on ground but could be helicopter on deck of ship etc.)
; 1437 : 							//
; 1438 : 
; 1439 : 	 						target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00cab	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00caf	74 0d		 je	 SHORT $LN120@get_line_o
  00cb1	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00cb4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cb6	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv544[ebp], ecx
  00cbc	eb 27		 jmp	 SHORT $LN121@get_line_o
$LN120@get_line_o:
  00cbe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00cc4	81 c2 29 01 00
	00		 add	 edx, 297		; 00000129H
  00cca	52		 push	 edx
  00ccb	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cd0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00cd5	50		 push	 eax
  00cd6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cdb	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv544[ebp], 0
$LN121@get_line_o:
  00ce5	b9 01 00 00 00	 mov	 ecx, 1
  00cea	85 c9		 test	 ecx, ecx
  00cec	74 0c		 je	 SHORT $LN122@get_line_o
  00cee	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv552[ebp], 8
  00cf8	eb 27		 jmp	 SHORT $LN123@get_line_o
$LN122@get_line_o:
  00cfa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00d00	81 c2 29 01 00
	00		 add	 edx, 297		; 00000129H
  00d06	52		 push	 edx
  00d07	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00d11	50		 push	 eax
  00d12	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d17	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv552[ebp], 0
$LN123@get_line_o:
  00d21	6a 08		 push	 8
  00d23	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  00d26	51		 push	 ecx
  00d27	6b 95 20 ff ff
	ff 60		 imul	 edx, DWORD PTR tv544[ebp], 96
  00d2e	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv552[ebp]
  00d34	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00d3b	ff d1		 call	 ecx
  00d3d	89 45 b0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1440 : 
; 1441 : 							if
; 1442 : 							(
; 1443 : 								(source_min_position.y <= (target_position->y + bounding_box->ymax)) &&

  00d40	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00d43	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00d49	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00d4e	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  00d53	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  00d57	0f 82 60 01 00
	00		 jb	 $LN48@get_line_o
  00d5d	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00d60	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  00d66	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00d6b	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00d70	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _source_max_position$[ebp+4]
  00d75	0f 2f c8	 comiss	 xmm1, xmm0
  00d78	0f 82 3f 01 00
	00		 jb	 $LN48@get_line_o

; 1444 : 								(source_max_position.y >= (target_position->y + bounding_box->ymin))
; 1445 : 							)
; 1446 : 							{
; 1447 : 								radius = get_object_3d_radius (object_3d_index);

  00d7e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  00d84	50		 push	 eax
  00d85	e8 00 00 00 00	 call	 ?get_object_3d_radius@@YGMH@Z ; get_object_3d_radius
  00d8a	d9 5d e0	 fstp	 DWORD PTR _radius$[ebp]

; 1448 : 
; 1449 : 								target_min_position.x = target_position->x - radius;

  00d8d	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00d90	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00d94	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  00d99	f3 0f 11 45 88	 movss	 DWORD PTR _target_min_position$[ebp], xmm0

; 1450 : 								target_min_position.y = target_position->y - radius;

  00d9e	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00da1	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00da6	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  00dab	f3 0f 11 45 8c	 movss	 DWORD PTR _target_min_position$[ebp+4], xmm0

; 1451 : 								target_min_position.z = target_position->z - radius;

  00db0	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00db3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00db8	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  00dbd	f3 0f 11 45 90	 movss	 DWORD PTR _target_min_position$[ebp+8], xmm0

; 1452 : 
; 1453 : 								target_max_position.x = target_position->x + radius;

  00dc2	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00dc5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00dc9	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00dce	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _target_max_position$[ebp], xmm0

; 1454 : 								target_max_position.y = target_position->y + radius;

  00dd6	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00dd9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00dde	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00de3	f3 0f 11 45 80	 movss	 DWORD PTR _target_max_position$[ebp+4], xmm0

; 1455 : 								target_max_position.z = target_position->z + radius;

  00de8	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00deb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00df0	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  00df5	f3 0f 11 45 84	 movss	 DWORD PTR _target_max_position$[ebp+8], xmm0

; 1456 : 
; 1457 : 								if
; 1458 : 								(
; 1459 : 									(!(target_max_position.x < source_min_position.x)) &&
; 1460 : 									(!(target_min_position.x > source_max_position.x)) &&
; 1461 : 									(!(target_max_position.y < source_min_position.y)) &&
; 1462 : 									(!(target_min_position.y > source_max_position.y)) &&
; 1463 : 									(!(target_max_position.z < source_min_position.z)) &&

  00dfa	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _source_min_position$[ebp]
  00dff	0f 2f 85 7c ff
	ff ff		 comiss	 xmm0, DWORD PTR _target_max_position$[ebp]
  00e06	0f 87 b1 00 00
	00		 ja	 $LN48@get_line_o
  00e0c	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _target_min_position$[ebp]
  00e11	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp]
  00e15	0f 87 a2 00 00
	00		 ja	 $LN48@get_line_o
  00e1b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  00e20	0f 2f 45 80	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+4]
  00e24	0f 87 93 00 00
	00		 ja	 $LN48@get_line_o
  00e2a	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+4]
  00e2f	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+4]
  00e33	0f 87 84 00 00
	00		 ja	 $LN48@get_line_o
  00e39	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  00e3e	0f 2f 45 84	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+8]
  00e42	77 79		 ja	 SHORT $LN48@get_line_o
  00e44	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+8]
  00e49	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  00e4d	77 6e		 ja	 SHORT $LN48@get_line_o

; 1464 : 									(!(target_min_position.z > source_max_position.z))
; 1465 : 								)
; 1466 : 								{
; 1467 : 									if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  00e4f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  00e56	74 32		 je	 SHORT $LN50@get_line_o
  00e58	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  00e5f	75 29		 jne	 SHORT $LN50@get_line_o

; 1468 : 									{
; 1469 : 										draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_HIT_COLOUR);

  00e61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  00e66	50		 push	 eax
  00e67	8d 4d b4	 lea	 ecx, DWORD PTR _source_max_position$[ebp]
  00e6a	51		 push	 ecx
  00e6b	8d 55 c0	 lea	 edx, DWORD PTR _source_min_position$[ebp]
  00e6e	52		 push	 edx
  00e6f	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box

; 1470 : 										draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_HIT_COLOUR);

  00e74	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  00e79	50		 push	 eax
  00e7a	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _target_max_position$[ebp]
  00e80	51		 push	 ecx
  00e81	8d 55 88	 lea	 edx, DWORD PTR _target_min_position$[ebp]
  00e84	52		 push	 edx
  00e85	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box
$LN50@get_line_o:

; 1471 : 									}
; 1472 : 
; 1473 : 									if
; 1474 : 									(
; 1475 : 										accurate_stationary_bounding_box_collision_test
; 1476 : 										(

  00e8a	8b 45 1c	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00e8d	50		 push	 eax
  00e8e	8b 4d 18	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  00e91	51		 push	 ecx
  00e92	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _bounding_box$[ebp]
  00e98	52		 push	 edx
  00e99	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  00e9f	50		 push	 eax
  00ea0	8b 4d 14	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  00ea3	51		 push	 ecx
  00ea4	8b 55 10	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  00ea7	52		 push	 edx
  00ea8	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00eab	50		 push	 eax
  00eac	e8 00 00 00 00	 call	 ?accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z ; accurate_stationary_bounding_box_collision_test
  00eb1	85 c0		 test	 eax, eax
  00eb3	74 08		 je	 SHORT $LN51@get_line_o

; 1477 : 											target,
; 1478 : 											source_old_position,
; 1479 : 											source_new_position,
; 1480 : 											object_3d_index,
; 1481 : 											bounding_box,
; 1482 : 											source_intercept_point,
; 1483 : 											face_normal
; 1484 : 										)
; 1485 : 									)
; 1486 : 									{
; 1487 : 										return (target);

  00eb5	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00eb8	e9 f1 0b 00 00	 jmp	 $LN1@get_line_o
$LN51@get_line_o:
$LN48@get_line_o:

; 1488 : 									}
; 1489 : 								}
; 1490 : 								else
; 1491 : 								{
; 1492 : 									#if DEBUG_MODULE_ENABLE_COLLISION_BOX_MISS
; 1493 : 
; 1494 : 									if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))
; 1495 : 									{
; 1496 : 										draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_MISS_COLOUR);
; 1497 : 										draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_MISS_COLOUR);
; 1498 : 									}
; 1499 : 
; 1500 : 									#endif
; 1501 : 								}
; 1502 : 							}
; 1503 : 						}

  00ebd	e9 43 0b 00 00	 jmp	 $LN76@get_line_o
$LN29@get_line_o:

; 1504 : 					}
; 1505 : 					else if (!ignore_all_fixed_entities_in_sector)

  00ec2	83 7d e4 00	 cmp	 DWORD PTR _ignore_all_fixed_entities_in_sector$[ebp], 0
  00ec6	0f 85 39 0b 00
	00		 jne	 $LN76@get_line_o

; 1506 : 					{
; 1507 : 						if (get_local_entity_int_value (target, INT_TYPE_COLLISION_TEST_FIXED))

  00ecc	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00ed0	74 0d		 je	 SHORT $LN124@get_line_o
  00ed2	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00ed5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ed7	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv609[ebp], ecx
  00edd	eb 20		 jmp	 SHORT $LN125@get_line_o
$LN124@get_line_o:
  00edf	68 e3 05 00 00	 push	 1507			; 000005e3H
  00ee4	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ee9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00eef	52		 push	 edx
  00ef0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ef5	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN125@get_line_o:
  00eff	b8 01 00 00 00	 mov	 eax, 1
  00f04	85 c0		 test	 eax, eax
  00f06	74 0c		 je	 SHORT $LN126@get_line_o
  00f08	c7 85 1c ff ff
	ff 1a 00 00 00	 mov	 DWORD PTR tv616[ebp], 26 ; 0000001aH
  00f12	eb 20		 jmp	 SHORT $LN127@get_line_o
$LN126@get_line_o:
  00f14	68 e3 05 00 00	 push	 1507			; 000005e3H
  00f19	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00f24	51		 push	 ecx
  00f25	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f2a	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv616[ebp], 0
$LN127@get_line_o:
  00f34	6a 1a		 push	 26			; 0000001aH
  00f36	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  00f39	52		 push	 edx
  00f3a	69 85 20 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv609[ebp], 1116
  00f44	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv616[ebp]
  00f4a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00f51	ff d2		 call	 edx
  00f53	85 c0		 test	 eax, eax
  00f55	0f 84 aa 0a 00
	00		 je	 $LN76@get_line_o

; 1508 : 						{
; 1509 : 							////////////////////////////////////////
; 1510 : 							//
; 1511 : 							// FIXED TARGET
; 1512 : 							//
; 1513 : 							////////////////////////////////////////
; 1514 : 
; 1515 : 							if (get_local_entity_type (target) == ENTITY_TYPE_CITY)

  00f5b	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00f5f	74 0d		 je	 SHORT $LN128@get_line_o
  00f61	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00f64	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f66	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv628[ebp], ecx
  00f6c	eb 20		 jmp	 SHORT $LN129@get_line_o
$LN128@get_line_o:
  00f6e	68 eb 05 00 00	 push	 1515			; 000005ebH
  00f73	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f78	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f7e	52		 push	 edx
  00f7f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f84	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv628[ebp], 0
$LN129@get_line_o:
  00f8e	83 bd 20 ff ff
	ff 05		 cmp	 DWORD PTR tv628[ebp], 5
  00f95	0f 85 22 07 00
	00		 jne	 $LN54@get_line_o

; 1516 : 							{
; 1517 : 								building = get_local_entity_first_child (target, LIST_TYPE_CITY_BUILDING);

  00f9b	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00f9f	74 0d		 je	 SHORT $LN130@get_line_o
  00fa1	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  00fa4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fa6	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv636[ebp], ecx
  00fac	eb 27		 jmp	 SHORT $LN131@get_line_o
$LN130@get_line_o:
  00fae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00fb4	81 c2 77 01 00
	00		 add	 edx, 375		; 00000177H
  00fba	52		 push	 edx
  00fbb	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fc5	50		 push	 eax
  00fc6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fcb	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv636[ebp], 0
$LN131@get_line_o:
  00fd5	b9 01 00 00 00	 mov	 ecx, 1
  00fda	85 c9		 test	 ecx, ecx
  00fdc	74 0c		 je	 SHORT $LN132@get_line_o
  00fde	c7 85 1c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv644[ebp], 7
  00fe8	eb 27		 jmp	 SHORT $LN133@get_line_o
$LN132@get_line_o:
  00fea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  00ff0	81 c2 77 01 00
	00		 add	 edx, 375		; 00000177H
  00ff6	52		 push	 edx
  00ff7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ffc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01001	50		 push	 eax
  01002	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01007	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv644[ebp], 0
$LN133@get_line_o:
  01011	6a 07		 push	 7
  01013	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  01016	51		 push	 ecx
  01017	69 95 20 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv636[ebp], 180
  01021	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv644[ebp]
  01027	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0102e	ff d1		 call	 ecx
  01030	89 45 cc	 mov	 DWORD PTR _building$[ebp], eax

; 1518 : 
; 1519 : 								if (building)

  01033	83 7d cc 00	 cmp	 DWORD PTR _building$[ebp], 0
  01037	0f 84 7b 06 00
	00		 je	 $LN58@get_line_o

; 1520 : 								{
; 1521 : 									target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0103d	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  01041	74 0d		 je	 SHORT $LN134@get_line_o
  01043	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  01046	8b 08		 mov	 ecx, DWORD PTR [eax]
  01048	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv657[ebp], ecx
  0104e	eb 27		 jmp	 SHORT $LN135@get_line_o
$LN134@get_line_o:
  01050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01056	81 c2 7b 01 00
	00		 add	 edx, 379		; 0000017bH
  0105c	52		 push	 edx
  0105d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01067	50		 push	 eax
  01068	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0106d	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv657[ebp], 0
$LN135@get_line_o:
  01077	b9 01 00 00 00	 mov	 ecx, 1
  0107c	85 c9		 test	 ecx, ecx
  0107e	74 0c		 je	 SHORT $LN136@get_line_o
  01080	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv665[ebp], 8
  0108a	eb 27		 jmp	 SHORT $LN137@get_line_o
$LN136@get_line_o:
  0108c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01092	81 c2 7b 01 00
	00		 add	 edx, 379		; 0000017bH
  01098	52		 push	 edx
  01099	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0109e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  010a3	50		 push	 eax
  010a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010a9	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv665[ebp], 0
$LN137@get_line_o:
  010b3	6a 08		 push	 8
  010b5	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  010b8	51		 push	 ecx
  010b9	6b 95 20 ff ff
	ff 60		 imul	 edx, DWORD PTR tv657[ebp], 96
  010c0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv665[ebp]
  010c6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  010cd	ff d1		 call	 ecx
  010cf	89 45 b0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1522 : 
; 1523 : 									get_local_entity_vec3d (target, VEC3D_TYPE_BOUNDING_BOX_MIN, &target_min_position);

  010d2	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  010d6	74 0d		 je	 SHORT $LN138@get_line_o
  010d8	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  010db	8b 08		 mov	 ecx, DWORD PTR [eax]
  010dd	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv677[ebp], ecx
  010e3	eb 27		 jmp	 SHORT $LN139@get_line_o
$LN138@get_line_o:
  010e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  010eb	81 c2 7d 01 00
	00		 add	 edx, 381		; 0000017dH
  010f1	52		 push	 edx
  010f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  010f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  010fc	50		 push	 eax
  010fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01102	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv677[ebp], 0
$LN139@get_line_o:
  0110c	b9 01 00 00 00	 mov	 ecx, 1
  01111	85 c9		 test	 ecx, ecx
  01113	74 0c		 je	 SHORT $LN140@get_line_o
  01115	c7 85 1c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv685[ebp], 1
  0111f	eb 27		 jmp	 SHORT $LN141@get_line_o
$LN140@get_line_o:
  01121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01127	81 c2 7d 01 00
	00		 add	 edx, 381		; 0000017dH
  0112d	52		 push	 edx
  0112e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01133	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01138	50		 push	 eax
  01139	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0113e	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv685[ebp], 0
$LN141@get_line_o:
  01148	8d 4d 88	 lea	 ecx, DWORD PTR _target_min_position$[ebp]
  0114b	51		 push	 ecx
  0114c	6a 01		 push	 1
  0114e	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  01151	52		 push	 edx
  01152	6b 85 20 ff ff
	ff 60		 imul	 eax, DWORD PTR tv677[ebp], 96
  01159	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv685[ebp]
  0115f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  01166	ff d2		 call	 edx

; 1524 : 									get_local_entity_vec3d (target, VEC3D_TYPE_BOUNDING_BOX_MAX, &target_max_position);

  01168	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0116c	74 0d		 je	 SHORT $LN142@get_line_o
  0116e	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  01171	8b 08		 mov	 ecx, DWORD PTR [eax]
  01173	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv697[ebp], ecx
  01179	eb 27		 jmp	 SHORT $LN143@get_line_o
$LN142@get_line_o:
  0117b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01181	81 c2 7e 01 00
	00		 add	 edx, 382		; 0000017eH
  01187	52		 push	 edx
  01188	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0118d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01192	50		 push	 eax
  01193	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01198	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN143@get_line_o:
  011a2	b9 01 00 00 00	 mov	 ecx, 1
  011a7	85 c9		 test	 ecx, ecx
  011a9	74 0c		 je	 SHORT $LN144@get_line_o
  011ab	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv705[ebp], 0
  011b5	eb 27		 jmp	 SHORT $LN145@get_line_o
$LN144@get_line_o:
  011b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  011bd	81 c2 7e 01 00
	00		 add	 edx, 382		; 0000017eH
  011c3	52		 push	 edx
  011c4	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  011ce	50		 push	 eax
  011cf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011d4	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv705[ebp], 0
$LN145@get_line_o:
  011de	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _target_max_position$[ebp]
  011e4	51		 push	 ecx
  011e5	6a 00		 push	 0
  011e7	8b 55 d4	 mov	 edx, DWORD PTR _target$[ebp]
  011ea	52		 push	 edx
  011eb	6b 85 20 ff ff
	ff 60		 imul	 eax, DWORD PTR tv697[ebp], 96
  011f2	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv705[ebp]
  011f8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  011ff	ff d2		 call	 edx

; 1525 : 
; 1526 : 									target_min_position.y += target_position->y;

  01201	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01204	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+4]
  01209	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0120e	f3 0f 11 45 8c	 movss	 DWORD PTR _target_min_position$[ebp+4], xmm0

; 1527 : 									target_max_position.y += target_position->y;

  01213	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01216	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _target_max_position$[ebp+4]
  0121b	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  01220	f3 0f 11 45 80	 movss	 DWORD PTR _target_max_position$[ebp+4], xmm0

; 1528 : 
; 1529 : 									if
; 1530 : 									(
; 1531 : 										(!(target_max_position.y < source_min_position.y)) &&

  01225	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  0122a	0f 2f 45 80	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+4]
  0122e	0f 87 84 04 00
	00		 ja	 $LN58@get_line_o
  01234	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+4]
  01239	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+4]
  0123d	0f 87 75 04 00
	00		 ja	 $LN58@get_line_o

; 1532 : 										(!(target_min_position.y > source_max_position.y))
; 1533 : 									)
; 1534 : 									{
; 1535 : 										target_min_position.x += target_position->x;

  01243	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01246	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _target_min_position$[ebp]
  0124b	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0124f	f3 0f 11 45 88	 movss	 DWORD PTR _target_min_position$[ebp], xmm0

; 1536 : 										target_min_position.z += target_position->z;

  01254	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01257	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+8]
  0125c	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  01261	f3 0f 11 45 90	 movss	 DWORD PTR _target_min_position$[ebp+8], xmm0

; 1537 : 
; 1538 : 										target_max_position.x += target_position->x;

  01266	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01269	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _target_max_position$[ebp]
  01271	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  01275	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _target_max_position$[ebp], xmm0

; 1539 : 										target_max_position.z += target_position->z;

  0127d	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01280	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _target_max_position$[ebp+8]
  01285	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0128a	f3 0f 11 45 84	 movss	 DWORD PTR _target_max_position$[ebp+8], xmm0

; 1540 : 
; 1541 : 										if
; 1542 : 										(
; 1543 : 											(!(target_max_position.x < source_min_position.x)) &&
; 1544 : 											(!(target_min_position.x > source_max_position.x)) &&
; 1545 : 											(!(target_max_position.z < source_min_position.z)) &&

  0128f	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _source_min_position$[ebp]
  01294	0f 2f 85 7c ff
	ff ff		 comiss	 xmm0, DWORD PTR _target_max_position$[ebp]
  0129b	0f 87 17 04 00
	00		 ja	 $LN58@get_line_o
  012a1	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _target_min_position$[ebp]
  012a6	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp]
  012aa	0f 87 08 04 00
	00		 ja	 $LN58@get_line_o
  012b0	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  012b5	0f 2f 45 84	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+8]
  012b9	0f 87 f9 03 00
	00		 ja	 $LN58@get_line_o
  012bf	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+8]
  012c4	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  012c8	0f 87 ea 03 00
	00		 ja	 $LN58@get_line_o

; 1546 : 											(!(target_min_position.z > source_max_position.z))
; 1547 : 										)
; 1548 : 										{
; 1549 : 											if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  012ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  012d5	74 32		 je	 SHORT $LN60@get_line_o
  012d7	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  012de	75 29		 jne	 SHORT $LN60@get_line_o

; 1550 : 											{
; 1551 : 												draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_HIT_COLOUR);

  012e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  012e5	50		 push	 eax
  012e6	8d 4d b4	 lea	 ecx, DWORD PTR _source_max_position$[ebp]
  012e9	51		 push	 ecx
  012ea	8d 55 c0	 lea	 edx, DWORD PTR _source_min_position$[ebp]
  012ed	52		 push	 edx
  012ee	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box

; 1552 : 												draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_HIT_COLOUR);

  012f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  012f8	50		 push	 eax
  012f9	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _target_max_position$[ebp]
  012ff	51		 push	 ecx
  01300	8d 55 88	 lea	 edx, DWORD PTR _target_min_position$[ebp]
  01303	52		 push	 edx
  01304	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box
$LN60@get_line_o:

; 1553 : 											}
; 1554 : 
; 1555 : 											while (building)

  01309	83 7d cc 00	 cmp	 DWORD PTR _building$[ebp], 0
  0130d	0f 84 a5 03 00
	00		 je	 $LN13@get_line_o

; 1556 : 											{
; 1557 : 												object_3d_index = get_local_entity_int_value (building, INT_TYPE_OBJECT_3D_SHAPE);

  01313	83 7d cc 00	 cmp	 DWORD PTR _building$[ebp], 0
  01317	74 0d		 je	 SHORT $LN146@get_line_o
  01319	8b 45 cc	 mov	 eax, DWORD PTR _building$[ebp]
  0131c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0131e	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv744[ebp], ecx
  01324	eb 27		 jmp	 SHORT $LN147@get_line_o
$LN146@get_line_o:
  01326	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  0132c	81 c2 9f 01 00
	00		 add	 edx, 415		; 0000019fH
  01332	52		 push	 edx
  01333	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0133d	50		 push	 eax
  0133e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01343	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN147@get_line_o:
  0134d	b9 01 00 00 00	 mov	 ecx, 1
  01352	85 c9		 test	 ecx, ecx
  01354	74 0c		 je	 SHORT $LN148@get_line_o
  01356	c7 85 1c ff ff
	ff 92 00 00 00	 mov	 DWORD PTR tv752[ebp], 146 ; 00000092H
  01360	eb 27		 jmp	 SHORT $LN149@get_line_o
$LN148@get_line_o:
  01362	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01368	81 c2 9f 01 00
	00		 add	 edx, 415		; 0000019fH
  0136e	52		 push	 edx
  0136f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01374	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01379	50		 push	 eax
  0137a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0137f	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN149@get_line_o:
  01389	68 92 00 00 00	 push	 146			; 00000092H
  0138e	8b 4d cc	 mov	 ecx, DWORD PTR _building$[ebp]
  01391	51		 push	 ecx
  01392	69 95 20 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv744[ebp], 1116
  0139c	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv752[ebp]
  013a2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  013a9	ff d1		 call	 ecx
  013ab	89 85 78 ff ff
	ff		 mov	 DWORD PTR _object_3d_index$[ebp], eax

; 1558 : 
; 1559 : 												ASSERT (object_3d_index != OBJECT_3D_INVALID_OBJECT_INDEX);

  013b1	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _object_3d_index$[ebp], 0
  013b8	75 1a		 jne	 SHORT $LN61@get_line_o
  013ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  013bf	05 a1 01 00 00	 add	 eax, 417		; 000001a1H
  013c4	50		 push	 eax
  013c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013ca	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BJJCPMFI@object_3d_index?5?$CB?$DN?5OBJECT_3D_IN@
  013cf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN61@get_line_o:

; 1560 : 
; 1561 : 												bounding_box = get_object_3d_bounding_box_without_lines (object_3d_index);

  013d4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  013da	50		 push	 eax
  013db	e8 00 00 00 00	 call	 ?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box_without_lines
  013e0	89 85 74 ff ff
	ff		 mov	 DWORD PTR _bounding_box$[ebp], eax

; 1562 : 
; 1563 : 												ASSERT (bounding_box);

  013e6	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _bounding_box$[ebp], 0
  013ed	75 1a		 jne	 SHORT $LN62@get_line_o
  013ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  013f4	05 a5 01 00 00	 add	 eax, 421		; 000001a5H
  013f9	50		 push	 eax
  013fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013ff	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LOLJEHA@bounding_box@
  01404	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN62@get_line_o:

; 1564 : 
; 1565 :  												target_position = get_local_entity_vec3d_ptr (building, VEC3D_TYPE_POSITION);

  01409	83 7d cc 00	 cmp	 DWORD PTR _building$[ebp], 0
  0140d	74 0d		 je	 SHORT $LN150@get_line_o
  0140f	8b 45 cc	 mov	 eax, DWORD PTR _building$[ebp]
  01412	8b 08		 mov	 ecx, DWORD PTR [eax]
  01414	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv776[ebp], ecx
  0141a	eb 27		 jmp	 SHORT $LN151@get_line_o
$LN150@get_line_o:
  0141c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01422	81 c2 a7 01 00
	00		 add	 edx, 423		; 000001a7H
  01428	52		 push	 edx
  01429	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0142e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01433	50		 push	 eax
  01434	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01439	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv776[ebp], 0
$LN151@get_line_o:
  01443	b9 01 00 00 00	 mov	 ecx, 1
  01448	85 c9		 test	 ecx, ecx
  0144a	74 0c		 je	 SHORT $LN152@get_line_o
  0144c	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv784[ebp], 8
  01456	eb 27		 jmp	 SHORT $LN153@get_line_o
$LN152@get_line_o:
  01458	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  0145e	81 c2 a7 01 00
	00		 add	 edx, 423		; 000001a7H
  01464	52		 push	 edx
  01465	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0146a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0146f	50		 push	 eax
  01470	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01475	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN153@get_line_o:
  0147f	6a 08		 push	 8
  01481	8b 4d cc	 mov	 ecx, DWORD PTR _building$[ebp]
  01484	51		 push	 ecx
  01485	6b 95 20 ff ff
	ff 60		 imul	 edx, DWORD PTR tv776[ebp], 96
  0148c	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv784[ebp]
  01492	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01499	ff d1		 call	 ecx
  0149b	89 45 b0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1566 : 
; 1567 : 												if
; 1568 : 												(
; 1569 : 													(source_min_position.y <= (target_position->y + bounding_box->ymax)) &&

  0149e	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  014a1	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  014a7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  014ac	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  014b1	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  014b5	0f 82 60 01 00
	00		 jb	 $LN64@get_line_o
  014bb	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  014be	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  014c4	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  014c9	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  014ce	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _source_max_position$[ebp+4]
  014d3	0f 2f c8	 comiss	 xmm1, xmm0
  014d6	0f 82 3f 01 00
	00		 jb	 $LN64@get_line_o

; 1570 : 													(source_max_position.y >= (target_position->y + bounding_box->ymin))
; 1571 : 												)
; 1572 : 												{
; 1573 : 													radius = get_object_3d_radius (object_3d_index);

  014dc	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  014e2	50		 push	 eax
  014e3	e8 00 00 00 00	 call	 ?get_object_3d_radius@@YGMH@Z ; get_object_3d_radius
  014e8	d9 5d e0	 fstp	 DWORD PTR _radius$[ebp]

; 1574 : 
; 1575 : 													target_min_position.x = target_position->x - radius;

  014eb	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  014ee	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  014f2	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  014f7	f3 0f 11 45 88	 movss	 DWORD PTR _target_min_position$[ebp], xmm0

; 1576 : 													target_min_position.y = target_position->y - radius;

  014fc	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  014ff	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01504	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  01509	f3 0f 11 45 8c	 movss	 DWORD PTR _target_min_position$[ebp+4], xmm0

; 1577 : 													target_min_position.z = target_position->z - radius;

  0150e	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01511	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01516	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  0151b	f3 0f 11 45 90	 movss	 DWORD PTR _target_min_position$[ebp+8], xmm0

; 1578 : 
; 1579 : 													target_max_position.x = target_position->x + radius;

  01520	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01523	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01527	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  0152c	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _target_max_position$[ebp], xmm0

; 1580 : 													target_max_position.y = target_position->y + radius;

  01534	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01537	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0153c	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  01541	f3 0f 11 45 80	 movss	 DWORD PTR _target_max_position$[ebp+4], xmm0

; 1581 : 													target_max_position.z = target_position->z + radius;

  01546	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01549	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0154e	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  01553	f3 0f 11 45 84	 movss	 DWORD PTR _target_max_position$[ebp+8], xmm0

; 1582 : 
; 1583 : 													if
; 1584 : 													(
; 1585 : 														(!(target_max_position.x < source_min_position.x)) &&
; 1586 : 														(!(target_min_position.x > source_max_position.x)) &&
; 1587 : 														(!(target_max_position.y < source_min_position.y)) &&
; 1588 : 														(!(target_min_position.y > source_max_position.y)) &&
; 1589 : 														(!(target_max_position.z < source_min_position.z)) &&

  01558	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _source_min_position$[ebp]
  0155d	0f 2f 85 7c ff
	ff ff		 comiss	 xmm0, DWORD PTR _target_max_position$[ebp]
  01564	0f 87 b1 00 00
	00		 ja	 $LN64@get_line_o
  0156a	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _target_min_position$[ebp]
  0156f	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp]
  01573	0f 87 a2 00 00
	00		 ja	 $LN64@get_line_o
  01579	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  0157e	0f 2f 45 80	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+4]
  01582	0f 87 93 00 00
	00		 ja	 $LN64@get_line_o
  01588	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+4]
  0158d	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+4]
  01591	0f 87 84 00 00
	00		 ja	 $LN64@get_line_o
  01597	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  0159c	0f 2f 45 84	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+8]
  015a0	77 79		 ja	 SHORT $LN64@get_line_o
  015a2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+8]
  015a7	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  015ab	77 6e		 ja	 SHORT $LN64@get_line_o

; 1590 : 														(!(target_min_position.z > source_max_position.z))
; 1591 : 													)
; 1592 : 													{
; 1593 : 														if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  015ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  015b4	74 32		 je	 SHORT $LN66@get_line_o
  015b6	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  015bd	75 29		 jne	 SHORT $LN66@get_line_o

; 1594 : 														{
; 1595 : 															draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_HIT_COLOUR);

  015bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  015c4	50		 push	 eax
  015c5	8d 4d b4	 lea	 ecx, DWORD PTR _source_max_position$[ebp]
  015c8	51		 push	 ecx
  015c9	8d 55 c0	 lea	 edx, DWORD PTR _source_min_position$[ebp]
  015cc	52		 push	 edx
  015cd	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box

; 1596 : 															draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_HIT_COLOUR);

  015d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  015d7	50		 push	 eax
  015d8	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _target_max_position$[ebp]
  015de	51		 push	 ecx
  015df	8d 55 88	 lea	 edx, DWORD PTR _target_min_position$[ebp]
  015e2	52		 push	 edx
  015e3	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box
$LN66@get_line_o:

; 1597 : 														}
; 1598 : 
; 1599 : 														if
; 1600 : 														(
; 1601 : 															accurate_stationary_bounding_box_collision_test
; 1602 : 															(

  015e8	8b 45 1c	 mov	 eax, DWORD PTR _face_normal$[ebp]
  015eb	50		 push	 eax
  015ec	8b 4d 18	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  015ef	51		 push	 ecx
  015f0	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _bounding_box$[ebp]
  015f6	52		 push	 edx
  015f7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  015fd	50		 push	 eax
  015fe	8b 4d 14	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  01601	51		 push	 ecx
  01602	8b 55 10	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  01605	52		 push	 edx
  01606	8b 45 cc	 mov	 eax, DWORD PTR _building$[ebp]
  01609	50		 push	 eax
  0160a	e8 00 00 00 00	 call	 ?accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z ; accurate_stationary_bounding_box_collision_test
  0160f	85 c0		 test	 eax, eax
  01611	74 08		 je	 SHORT $LN67@get_line_o

; 1603 : 																building,
; 1604 : 																source_old_position,
; 1605 : 																source_new_position,
; 1606 : 																object_3d_index,
; 1607 : 																bounding_box,
; 1608 : 																source_intercept_point,
; 1609 : 																face_normal
; 1610 : 															)
; 1611 : 														)
; 1612 : 														{
; 1613 : 															return (building);

  01613	8b 45 cc	 mov	 eax, DWORD PTR _building$[ebp]
  01616	e9 93 04 00 00	 jmp	 $LN1@get_line_o
$LN67@get_line_o:
$LN64@get_line_o:

; 1614 : 														}
; 1615 : 													}
; 1616 : 													else
; 1617 : 													{
; 1618 : 														#if DEBUG_MODULE_ENABLE_COLLISION_BOX_MISS
; 1619 : 
; 1620 : 														if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))
; 1621 : 														{
; 1622 : 															draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_MISS_COLOUR);
; 1623 : 															draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_MISS_COLOUR);
; 1624 : 														}
; 1625 : 
; 1626 : 														#endif
; 1627 : 													}
; 1628 : 												}
; 1629 : 
; 1630 : 												building = get_local_entity_child_succ (building, LIST_TYPE_CITY_BUILDING);

  0161b	83 7d cc 00	 cmp	 DWORD PTR _building$[ebp], 0
  0161f	74 0d		 je	 SHORT $LN154@get_line_o
  01621	8b 45 cc	 mov	 eax, DWORD PTR _building$[ebp]
  01624	8b 08		 mov	 ecx, DWORD PTR [eax]
  01626	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv841[ebp], ecx
  0162c	eb 27		 jmp	 SHORT $LN155@get_line_o
$LN154@get_line_o:
  0162e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01634	81 c2 e8 01 00
	00		 add	 edx, 488		; 000001e8H
  0163a	52		 push	 edx
  0163b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01640	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01645	50		 push	 eax
  01646	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0164b	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv841[ebp], 0
$LN155@get_line_o:
  01655	b9 01 00 00 00	 mov	 ecx, 1
  0165a	85 c9		 test	 ecx, ecx
  0165c	74 0c		 je	 SHORT $LN156@get_line_o
  0165e	c7 85 1c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv849[ebp], 7
  01668	eb 27		 jmp	 SHORT $LN157@get_line_o
$LN156@get_line_o:
  0166a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01670	81 c2 e8 01 00
	00		 add	 edx, 488		; 000001e8H
  01676	52		 push	 edx
  01677	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0167c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01681	50		 push	 eax
  01682	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01687	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv849[ebp], 0
$LN157@get_line_o:
  01691	6a 07		 push	 7
  01693	8b 4d cc	 mov	 ecx, DWORD PTR _building$[ebp]
  01696	51		 push	 ecx
  01697	69 95 20 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv841[ebp], 180
  016a1	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv849[ebp]
  016a7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  016ae	ff d1		 call	 ecx
  016b0	89 45 cc	 mov	 DWORD PTR _building$[ebp], eax

; 1631 : 											}

  016b3	e9 51 fc ff ff	 jmp	 $LN60@get_line_o
$LN13@get_line_o:
$LN58@get_line_o:

; 1632 : 										}
; 1633 : 										else
; 1634 : 										{
; 1635 : 											#if DEBUG_MODULE_ENABLE_COLLISION_BOX_MISS
; 1636 : 
; 1637 : 											if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))
; 1638 : 											{
; 1639 : 												draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_MISS_COLOUR);
; 1640 : 												draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_MISS_COLOUR);
; 1641 : 											}
; 1642 : 
; 1643 : 											#endif
; 1644 : 										}
; 1645 : 									}
; 1646 : 								}
; 1647 : 							}

  016b8	e9 48 03 00 00	 jmp	 $LN76@get_line_o
$LN54@get_line_o:

; 1648 : 							else if (get_local_entity_type (target) != ENTITY_TYPE_CITY_BUILDING)

  016bd	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  016c1	74 0d		 je	 SHORT $LN158@get_line_o
  016c3	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  016c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  016c8	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv860[ebp], ecx
  016ce	eb 20		 jmp	 SHORT $LN159@get_line_o
$LN158@get_line_o:
  016d0	68 70 06 00 00	 push	 1648			; 00000670H
  016d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  016da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016e0	52		 push	 edx
  016e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016e6	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv860[ebp], 0
$LN159@get_line_o:
  016f0	83 bd 20 ff ff
	ff 06		 cmp	 DWORD PTR tv860[ebp], 6
  016f7	0f 84 08 03 00
	00		 je	 $LN76@get_line_o

; 1649 : 							{
; 1650 : 								object_3d_index = get_local_entity_int_value (target, INT_TYPE_OBJECT_3D_SHAPE);

  016fd	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  01701	74 0d		 je	 SHORT $LN160@get_line_o
  01703	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  01706	8b 08		 mov	 ecx, DWORD PTR [eax]
  01708	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv868[ebp], ecx
  0170e	eb 27		 jmp	 SHORT $LN161@get_line_o
$LN160@get_line_o:
  01710	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01716	81 c2 fc 01 00
	00		 add	 edx, 508		; 000001fcH
  0171c	52		 push	 edx
  0171d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01722	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01727	50		 push	 eax
  01728	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0172d	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv868[ebp], 0
$LN161@get_line_o:
  01737	b9 01 00 00 00	 mov	 ecx, 1
  0173c	85 c9		 test	 ecx, ecx
  0173e	74 0c		 je	 SHORT $LN162@get_line_o
  01740	c7 85 1c ff ff
	ff 92 00 00 00	 mov	 DWORD PTR tv876[ebp], 146 ; 00000092H
  0174a	eb 27		 jmp	 SHORT $LN163@get_line_o
$LN162@get_line_o:
  0174c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01752	81 c2 fc 01 00
	00		 add	 edx, 508		; 000001fcH
  01758	52		 push	 edx
  01759	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0175e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01763	50		 push	 eax
  01764	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01769	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv876[ebp], 0
$LN163@get_line_o:
  01773	68 92 00 00 00	 push	 146			; 00000092H
  01778	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  0177b	51		 push	 ecx
  0177c	69 95 20 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv868[ebp], 1116
  01786	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv876[ebp]
  0178c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01793	ff d1		 call	 ecx
  01795	89 85 78 ff ff
	ff		 mov	 DWORD PTR _object_3d_index$[ebp], eax

; 1651 : 
; 1652 : 								ASSERT (object_3d_index != OBJECT_3D_INVALID_OBJECT_INDEX);

  0179b	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _object_3d_index$[ebp], 0
  017a2	75 1a		 jne	 SHORT $LN69@get_line_o
  017a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  017a9	05 fe 01 00 00	 add	 eax, 510		; 000001feH
  017ae	50		 push	 eax
  017af	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017b4	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BJJCPMFI@object_3d_index?5?$CB?$DN?5OBJECT_3D_IN@
  017b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN69@get_line_o:

; 1653 : 
; 1654 : 								bounding_box = get_object_3d_bounding_box_without_lines (object_3d_index);

  017be	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  017c4	50		 push	 eax
  017c5	e8 00 00 00 00	 call	 ?get_object_3d_bounding_box_without_lines@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box_without_lines
  017ca	89 85 74 ff ff
	ff		 mov	 DWORD PTR _bounding_box$[ebp], eax

; 1655 : 
; 1656 : 								ASSERT (bounding_box);

  017d0	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _bounding_box$[ebp], 0
  017d7	75 1a		 jne	 SHORT $LN70@get_line_o
  017d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  017de	05 02 02 00 00	 add	 eax, 514		; 00000202H
  017e3	50		 push	 eax
  017e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017e9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LOLJEHA@bounding_box@
  017ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN70@get_line_o:

; 1657 : 
; 1658 :  								target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  017f3	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  017f7	74 0d		 je	 SHORT $LN164@get_line_o
  017f9	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  017fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  017fe	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv900[ebp], ecx
  01804	eb 27		 jmp	 SHORT $LN165@get_line_o
$LN164@get_line_o:
  01806	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  0180c	81 c2 04 02 00
	00		 add	 edx, 516		; 00000204H
  01812	52		 push	 edx
  01813	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01818	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0181d	50		 push	 eax
  0181e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01823	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv900[ebp], 0
$LN165@get_line_o:
  0182d	b9 01 00 00 00	 mov	 ecx, 1
  01832	85 c9		 test	 ecx, ecx
  01834	74 0c		 je	 SHORT $LN166@get_line_o
  01836	c7 85 1c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv908[ebp], 8
  01840	eb 27		 jmp	 SHORT $LN167@get_line_o
$LN166@get_line_o:
  01842	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01848	81 c2 04 02 00
	00		 add	 edx, 516		; 00000204H
  0184e	52		 push	 edx
  0184f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01854	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01859	50		 push	 eax
  0185a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0185f	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv908[ebp], 0
$LN167@get_line_o:
  01869	6a 08		 push	 8
  0186b	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  0186e	51		 push	 ecx
  0186f	6b 95 20 ff ff
	ff 60		 imul	 edx, DWORD PTR tv900[ebp], 96
  01876	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv908[ebp]
  0187c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01883	ff d1		 call	 ecx
  01885	89 45 b0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1659 : 
; 1660 : 								if
; 1661 : 								(
; 1662 : 									(source_min_position.y <= (target_position->y + bounding_box->ymax)) &&

  01888	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0188b	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  01891	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01896	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  0189b	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  0189f	0f 82 60 01 00
	00		 jb	 $LN76@get_line_o
  018a5	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  018a8	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  018ae	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  018b3	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  018b8	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _source_max_position$[ebp+4]
  018bd	0f 2f c8	 comiss	 xmm1, xmm0
  018c0	0f 82 3f 01 00
	00		 jb	 $LN76@get_line_o

; 1663 : 									(source_max_position.y >= (target_position->y + bounding_box->ymin))
; 1664 : 								)
; 1665 : 								{
; 1666 : 									radius = get_object_3d_radius (object_3d_index);

  018c6	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  018cc	50		 push	 eax
  018cd	e8 00 00 00 00	 call	 ?get_object_3d_radius@@YGMH@Z ; get_object_3d_radius
  018d2	d9 5d e0	 fstp	 DWORD PTR _radius$[ebp]

; 1667 : 
; 1668 : 									target_min_position.x = target_position->x - radius;

  018d5	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  018d8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  018dc	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  018e1	f3 0f 11 45 88	 movss	 DWORD PTR _target_min_position$[ebp], xmm0

; 1669 : 									target_min_position.y = target_position->y - radius;

  018e6	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  018e9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  018ee	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  018f3	f3 0f 11 45 8c	 movss	 DWORD PTR _target_min_position$[ebp+4], xmm0

; 1670 : 									target_min_position.z = target_position->z - radius;

  018f8	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  018fb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01900	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _radius$[ebp]
  01905	f3 0f 11 45 90	 movss	 DWORD PTR _target_min_position$[ebp+8], xmm0

; 1671 : 
; 1672 : 									target_max_position.x = target_position->x + radius;

  0190a	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0190d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01911	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  01916	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _target_max_position$[ebp], xmm0

; 1673 : 									target_max_position.y = target_position->y + radius;

  0191e	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01921	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01926	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  0192b	f3 0f 11 45 80	 movss	 DWORD PTR _target_max_position$[ebp+4], xmm0

; 1674 : 									target_max_position.z = target_position->z + radius;

  01930	8b 45 b0	 mov	 eax, DWORD PTR _target_position$[ebp]
  01933	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01938	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _radius$[ebp]
  0193d	f3 0f 11 45 84	 movss	 DWORD PTR _target_max_position$[ebp+8], xmm0

; 1675 : 
; 1676 : 									if
; 1677 : 									(
; 1678 : 										(!(target_max_position.x < source_min_position.x)) &&
; 1679 : 										(!(target_min_position.x > source_max_position.x)) &&
; 1680 : 										(!(target_max_position.y < source_min_position.y)) &&
; 1681 : 										(!(target_min_position.y > source_max_position.y)) &&
; 1682 : 										(!(target_max_position.z < source_min_position.z)) &&

  01942	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _source_min_position$[ebp]
  01947	0f 2f 85 7c ff
	ff ff		 comiss	 xmm0, DWORD PTR _target_max_position$[ebp]
  0194e	0f 87 b1 00 00
	00		 ja	 $LN72@get_line_o
  01954	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _target_min_position$[ebp]
  01959	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp]
  0195d	0f 87 a2 00 00
	00		 ja	 $LN72@get_line_o
  01963	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+4]
  01968	0f 2f 45 80	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+4]
  0196c	0f 87 93 00 00
	00		 ja	 $LN72@get_line_o
  01972	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+4]
  01977	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+4]
  0197b	0f 87 84 00 00
	00		 ja	 $LN72@get_line_o
  01981	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _source_min_position$[ebp+8]
  01986	0f 2f 45 84	 comiss	 xmm0, DWORD PTR _target_max_position$[ebp+8]
  0198a	77 79		 ja	 SHORT $LN72@get_line_o
  0198c	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _target_min_position$[ebp+8]
  01991	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _source_max_position$[ebp+8]
  01995	77 6e		 ja	 SHORT $LN72@get_line_o

; 1683 : 										(!(target_min_position.z > source_max_position.z))
; 1684 : 									)
; 1685 : 									{
; 1686 : 										if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))

  01997	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_collision_boxes@@3HA, 0 ; draw_collision_boxes
  0199e	74 32		 je	 SHORT $LN74@get_line_o
  019a0	83 3d 00 00 00
	00 2a		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 42 ; view_mode, 0000002aH
  019a7	75 29		 jne	 SHORT $LN74@get_line_o

; 1687 : 										{
; 1688 : 											draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_HIT_COLOUR);

  019a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  019ae	50		 push	 eax
  019af	8d 4d b4	 lea	 ecx, DWORD PTR _source_max_position$[ebp]
  019b2	51		 push	 ecx
  019b3	8d 55 c0	 lea	 edx, DWORD PTR _source_min_position$[ebp]
  019b6	52		 push	 edx
  019b7	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box

; 1689 : 											draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_HIT_COLOUR);

  019bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  019c1	50		 push	 eax
  019c2	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _target_max_position$[ebp]
  019c8	51		 push	 ecx
  019c9	8d 55 88	 lea	 edx, DWORD PTR _target_min_position$[ebp]
  019cc	52		 push	 edx
  019cd	e8 00 00 00 00	 call	 ?draw_min_max_box@@YGXPAUVEC3D@@0UREAL_COLOUR@@@Z ; draw_min_max_box
$LN74@get_line_o:

; 1690 : 										}
; 1691 : 
; 1692 : 										if
; 1693 : 										(
; 1694 : 											accurate_stationary_bounding_box_collision_test
; 1695 : 											(

  019d2	8b 45 1c	 mov	 eax, DWORD PTR _face_normal$[ebp]
  019d5	50		 push	 eax
  019d6	8b 4d 18	 mov	 ecx, DWORD PTR _source_intercept_point$[ebp]
  019d9	51		 push	 ecx
  019da	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _bounding_box$[ebp]
  019e0	52		 push	 edx
  019e1	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  019e7	50		 push	 eax
  019e8	8b 4d 14	 mov	 ecx, DWORD PTR _source_new_position$[ebp]
  019eb	51		 push	 ecx
  019ec	8b 55 10	 mov	 edx, DWORD PTR _source_old_position$[ebp]
  019ef	52		 push	 edx
  019f0	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  019f3	50		 push	 eax
  019f4	e8 00 00 00 00	 call	 ?accurate_stationary_bounding_box_collision_test@@YGHPAUENTITY@@PAUVEC3D@@1HPAUOBJECT_3D_BOUNDS@@11@Z ; accurate_stationary_bounding_box_collision_test
  019f9	85 c0		 test	 eax, eax
  019fb	74 08		 je	 SHORT $LN75@get_line_o

; 1696 : 												target,
; 1697 : 												source_old_position,
; 1698 : 												source_new_position,
; 1699 : 												object_3d_index,
; 1700 : 												bounding_box,
; 1701 : 												source_intercept_point,
; 1702 : 												face_normal
; 1703 : 											)
; 1704 : 										)
; 1705 : 										{
; 1706 : 											return (target);

  019fd	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  01a00	e9 a9 00 00 00	 jmp	 $LN1@get_line_o
$LN75@get_line_o:
$LN72@get_line_o:
$LN76@get_line_o:

; 1707 : 										}
; 1708 : 									}
; 1709 : 									else
; 1710 : 									{
; 1711 : 										if (draw_collision_boxes && (get_view_mode () == VIEW_MODE_EXTERNAL))
; 1712 : 										{
; 1713 : 											#if DEBUG_MODULE_ENABLE_COLLISION_BOX_MISS
; 1714 : 
; 1715 : 											draw_min_max_box (&source_min_position, &source_max_position, COLLISION_BOX_MISS_COLOUR);
; 1716 : 											draw_min_max_box (&target_min_position, &target_max_position, COLLISION_BOX_MISS_COLOUR);
; 1717 : 
; 1718 : 											#endif
; 1719 : 										}
; 1720 : 									}
; 1721 : 								}
; 1722 : 							}
; 1723 : 						}
; 1724 : 					}
; 1725 : 				}
; 1726 : 
; 1727 : 				//
; 1728 : 				// search list backwards
; 1729 : 				//
; 1730 : 
; 1731 : 				target = get_local_entity_child_pred (target, LIST_TYPE_SECTOR);

  01a05	83 7d d4 00	 cmp	 DWORD PTR _target$[ebp], 0
  01a09	74 0d		 je	 SHORT $LN168@get_line_o
  01a0b	8b 45 d4	 mov	 eax, DWORD PTR _target$[ebp]
  01a0e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a10	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv967[ebp], ecx
  01a16	eb 27		 jmp	 SHORT $LN169@get_line_o
$LN168@get_line_o:
  01a18	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01a1e	81 c2 4d 02 00
	00		 add	 edx, 589		; 0000024dH
  01a24	52		 push	 edx
  01a25	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a2a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a2f	50		 push	 eax
  01a30	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a35	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv967[ebp], 0
$LN169@get_line_o:
  01a3f	b9 01 00 00 00	 mov	 ecx, 1
  01a44	85 c9		 test	 ecx, ecx
  01a46	74 0c		 je	 SHORT $LN170@get_line_o
  01a48	c7 85 1c ff ff
	ff 21 00 00 00	 mov	 DWORD PTR tv975[ebp], 33 ; 00000021H
  01a52	eb 27		 jmp	 SHORT $LN171@get_line_o
$LN170@get_line_o:
  01a54	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU2@0PAUVEC3D@@111@Z@4JA
  01a5a	81 c2 4d 02 00
	00		 add	 edx, 589		; 0000024dH
  01a60	52		 push	 edx
  01a61	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a66	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01a6b	50		 push	 eax
  01a6c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a71	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv975[ebp], 0
$LN171@get_line_o:
  01a7b	6a 21		 push	 33			; 00000021H
  01a7d	8b 4d d4	 mov	 ecx, DWORD PTR _target$[ebp]
  01a80	51		 push	 ecx
  01a81	69 95 20 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv967[ebp], 180
  01a8b	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv975[ebp]
  01a91	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_pred@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01a98	ff d1		 call	 ecx
  01a9a	89 45 d4	 mov	 DWORD PTR _target$[ebp], eax

; 1732 : 			}

  01a9d	e9 2e eb ff ff	 jmp	 $LN9@get_line_o
$LN11@get_line_o:

; 1733 : 		}

  01aa2	e9 1c e8 ff ff	 jmp	 $LN5@get_line_o
$LN6@get_line_o:

; 1734 : 	}

  01aa7	e9 fa e7 ff ff	 jmp	 $LN2@get_line_o
$LN3@get_line_o:

; 1735 : 
; 1736 : 	return (NULL);

  01aac	33 c0		 xor	 eax, eax
$LN1@get_line_o:

; 1737 : }

  01aae	5f		 pop	 edi
  01aaf	5e		 pop	 esi
  01ab0	5b		 pop	 ebx
  01ab1	8b e5		 mov	 esp, ebp
  01ab3	5d		 pop	 ebp
  01ab4	c2 18 00	 ret	 24			; 00000018H
?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z ENDP ; get_line_of_sight_collision_entity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\en_misc\en_maths\en_cllsn.c
;	COMDAT ?get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z
_TEXT	SEGMENT
tv355 = -108						; size = 4
tv346 = -108						; size = 4
tv304 = -108						; size = 4
tv294 = -108						; size = 4
tv272 = -108						; size = 4
tv262 = -108						; size = 4
_point_c$ = -40						; size = 12
_point_b$ = -28						; size = 12
_point_a$ = -16						; size = 12
_length$ = -4						; size = 4
_above_ground$ = 8					; size = 4
_below_ground$ = 12					; size = 4
_ground_impact_point$ = 16				; size = 4
?get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z PROC ; get_ground_impact_point, COMDAT

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 109  : 	float
; 110  : 		length;
; 111  : 
; 112  : 	vec3d
; 113  : 		point_a,
; 114  : 		point_b,
; 115  : 		point_c;
; 116  : 
; 117  : 	ASSERT (above_ground);

  00009	83 7d 08 00	 cmp	 DWORD PTR _above_ground$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_ground
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
  00014	83 c0 09	 add	 eax, 9
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EJKONMIL@above_ground@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_ground:

; 118  : 
; 119  : 	ASSERT (below_ground);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _below_ground$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN5@get_ground
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
  00032	83 c0 0b	 add	 eax, 11			; 0000000bH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EAJDPPBO@below_ground@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_ground:

; 120  : 
; 121  : 	ASSERT (ground_impact_point);

  00045	83 7d 10 00	 cmp	 DWORD PTR _ground_impact_point$[ebp], 0
  00049	75 18		 jne	 SHORT $LN6@get_ground
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
  00050	83 c0 0d	 add	 eax, 13			; 0000000dH
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CLCBMLIP@ground_impact_point@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_ground:

; 122  : 
; 123  : 	ASSERT (point_above_ground (above_ground));

  00063	8b 45 08	 mov	 eax, DWORD PTR _above_ground$[ebp]
  00066	51		 push	 ecx
  00067	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _above_ground$[ebp]
  00074	51		 push	 ecx
  00075	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_max_elevation
  00083	d9 5d 94	 fstp	 DWORD PTR tv262[ebp]
  00086	8b 55 08	 mov	 edx, DWORD PTR _above_ground$[ebp]
  00089	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0008e	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv262[ebp]
  00092	73 4b		 jae	 SHORT $LN7@get_ground
  00094	6a 00		 push	 0
  00096	8b 45 08	 mov	 eax, DWORD PTR _above_ground$[ebp]
  00099	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0009e	51		 push	 ecx
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _above_ground$[ebp]
  000a7	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000ab	51		 push	 ecx
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  000b6	d9 5d 94	 fstp	 DWORD PTR tv272[ebp]
  000b9	8b 55 08	 mov	 edx, DWORD PTR _above_ground$[ebp]
  000bc	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  000c1	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv272[ebp]
  000c5	73 18		 jae	 SHORT $LN7@get_ground
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
  000cc	83 c0 0f	 add	 eax, 15			; 0000000fH
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KGNBEJMF@point_above_ground?5?$CIabove_groun@
  000da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_ground:

; 124  : 
; 125  : 	ASSERT (point_inside_map_area (above_ground));

  000df	8b 45 08	 mov	 eax, DWORD PTR _above_ground$[ebp]
  000e2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e6	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  000ed	72 32		 jb	 SHORT $LN9@get_ground
  000ef	8b 45 08	 mov	 eax, DWORD PTR _above_ground$[ebp]
  000f2	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  000fa	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  000fd	72 22		 jb	 SHORT $LN9@get_ground
  000ff	8b 45 08	 mov	 eax, DWORD PTR _above_ground$[ebp]
  00102	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00107	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  0010e	72 11		 jb	 SHORT $LN9@get_ground
  00110	8b 45 08	 mov	 eax, DWORD PTR _above_ground$[ebp]
  00113	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  0011b	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  0011f	73 18		 jae	 SHORT $LN8@get_ground
$LN9@get_ground:
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
  00126	83 c0 11	 add	 eax, 17			; 00000011H
  00129	50		 push	 eax
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KFKHIMOI@point_inside_map_area?5?$CIabove_gr@
  00134	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@get_ground:

; 126  : 
; 127  : 	ASSERT (!point_above_ground (below_ground));

  00139	8b 45 0c	 mov	 eax, DWORD PTR _below_ground$[ebp]
  0013c	51		 push	 ecx
  0013d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	8b 4d 0c	 mov	 ecx, DWORD PTR _below_ground$[ebp]
  0014a	51		 push	 ecx
  0014b	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	e8 00 00 00 00	 call	 ?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_max_elevation
  00159	d9 5d 94	 fstp	 DWORD PTR tv294[ebp]
  0015c	8b 55 0c	 mov	 edx, DWORD PTR _below_ground$[ebp]
  0015f	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00164	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv294[ebp]
  00168	73 33		 jae	 SHORT $LN11@get_ground
  0016a	6a 00		 push	 0
  0016c	8b 45 0c	 mov	 eax, DWORD PTR _below_ground$[ebp]
  0016f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00174	51		 push	 ecx
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	8b 4d 0c	 mov	 ecx, DWORD PTR _below_ground$[ebp]
  0017d	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00181	51		 push	 ecx
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  0018c	d9 5d 94	 fstp	 DWORD PTR tv304[ebp]
  0018f	8b 55 0c	 mov	 edx, DWORD PTR _below_ground$[ebp]
  00192	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00197	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv304[ebp]
  0019b	72 18		 jb	 SHORT $LN10@get_ground
$LN11@get_ground:
  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
  001a2	83 c0 13	 add	 eax, 19			; 00000013H
  001a5	50		 push	 eax
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DOFOLHGO@?$CBpoint_above_ground?5?$CIbelow_grou@
  001b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@get_ground:

; 128  : 
; 129  : 	ASSERT (point_inside_map_area (below_ground));

  001b5	8b 45 0c	 mov	 eax, DWORD PTR _below_ground$[ebp]
  001b8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001bc	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  001c3	72 32		 jb	 SHORT $LN13@get_ground
  001c5	8b 45 0c	 mov	 eax, DWORD PTR _below_ground$[ebp]
  001c8	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  001d0	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  001d3	72 22		 jb	 SHORT $LN13@get_ground
  001d5	8b 45 0c	 mov	 eax, DWORD PTR _below_ground$[ebp]
  001d8	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001dd	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  001e4	72 11		 jb	 SHORT $LN13@get_ground
  001e6	8b 45 0c	 mov	 eax, DWORD PTR _below_ground$[ebp]
  001e9	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  001f1	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  001f5	73 18		 jae	 SHORT $LN12@get_ground
$LN13@get_ground:
  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z@4JA
  001fc	83 c0 15	 add	 eax, 21			; 00000015H
  001ff	50		 push	 eax
  00200	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FNJIFOKC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CFMLNGAA@point_inside_map_area?5?$CIbelow_gr@
  0020a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@get_ground:

; 130  : 
; 131  : 	point_a = *above_ground;

  0020f	8b 45 08	 mov	 eax, DWORD PTR _above_ground$[ebp]
  00212	8b 08		 mov	 ecx, DWORD PTR [eax]
  00214	89 4d f0	 mov	 DWORD PTR _point_a$[ebp], ecx
  00217	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0021a	89 55 f4	 mov	 DWORD PTR _point_a$[ebp+4], edx
  0021d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00220	89 45 f8	 mov	 DWORD PTR _point_a$[ebp+8], eax

; 132  : 
; 133  : 	point_b = *below_ground;

  00223	8b 45 0c	 mov	 eax, DWORD PTR _below_ground$[ebp]
  00226	8b 08		 mov	 ecx, DWORD PTR [eax]
  00228	89 4d e4	 mov	 DWORD PTR _point_b$[ebp], ecx
  0022b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0022e	89 55 e8	 mov	 DWORD PTR _point_b$[ebp+4], edx
  00231	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00234	89 45 ec	 mov	 DWORD PTR _point_b$[ebp+8], eax

; 134  : 
; 135  : 	length = 100.0;

  00237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0023f	f3 0f 11 45 fc	 movss	 DWORD PTR _length$[ebp], xmm0
$LN2@get_ground:

; 136  : 
; 137  : 	while (length > 1.0)

  00244	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00249	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00251	0f 86 ec 00 00
	00		 jbe	 $LN3@get_ground

; 138  : 	{
; 139  : 		point_c.x = (point_a.x + point_b.x) * 0.5;

  00257	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _point_a$[ebp]
  0025c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _point_b$[ebp]
  00261	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00265	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0026d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00271	f3 0f 11 45 d8	 movss	 DWORD PTR _point_c$[ebp], xmm0

; 140  : 		point_c.y = (point_a.y + point_b.y) * 0.5;

  00276	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _point_a$[ebp+4]
  0027b	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _point_b$[ebp+4]
  00280	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00284	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0028c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00290	f3 0f 11 45 dc	 movss	 DWORD PTR _point_c$[ebp+4], xmm0

; 141  : 		point_c.z = (point_a.z + point_b.z) * 0.5;

  00295	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _point_a$[ebp+8]
  0029a	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _point_b$[ebp+8]
  0029f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002af	f3 0f 11 45 e0	 movss	 DWORD PTR _point_c$[ebp+8], xmm0

; 142  : 
; 143  : 		if (point_above_ground (&point_c))

  002b4	51		 push	 ecx
  002b5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _point_c$[ebp+8]
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	51		 push	 ecx
  002c0	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _point_c$[ebp]
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	e8 00 00 00 00	 call	 ?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_max_elevation
  002cf	d9 5d 94	 fstp	 DWORD PTR tv346[ebp]
  002d2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _point_c$[ebp+4]
  002d7	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv346[ebp]
  002db	73 2b		 jae	 SHORT $LN16@get_ground
  002dd	6a 00		 push	 0
  002df	51		 push	 ecx
  002e0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _point_c$[ebp+8]
  002e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ea	51		 push	 ecx
  002eb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _point_c$[ebp]
  002f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f5	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  002fa	d9 5d 94	 fstp	 DWORD PTR tv355[ebp]
  002fd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _point_c$[ebp+4]
  00302	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv355[ebp]
  00306	72 14		 jb	 SHORT $LN14@get_ground
$LN16@get_ground:

; 144  : 		{
; 145  : 			point_a = point_c;

  00308	8b 45 d8	 mov	 eax, DWORD PTR _point_c$[ebp]
  0030b	89 45 f0	 mov	 DWORD PTR _point_a$[ebp], eax
  0030e	8b 4d dc	 mov	 ecx, DWORD PTR _point_c$[ebp+4]
  00311	89 4d f4	 mov	 DWORD PTR _point_a$[ebp+4], ecx
  00314	8b 55 e0	 mov	 edx, DWORD PTR _point_c$[ebp+8]
  00317	89 55 f8	 mov	 DWORD PTR _point_a$[ebp+8], edx

; 146  : 		}
; 147  : 		else

  0031a	eb 12		 jmp	 SHORT $LN15@get_ground
$LN14@get_ground:

; 148  : 		{
; 149  : 			point_b = point_c;

  0031c	8b 45 d8	 mov	 eax, DWORD PTR _point_c$[ebp]
  0031f	89 45 e4	 mov	 DWORD PTR _point_b$[ebp], eax
  00322	8b 4d dc	 mov	 ecx, DWORD PTR _point_c$[ebp+4]
  00325	89 4d e8	 mov	 DWORD PTR _point_b$[ebp+4], ecx
  00328	8b 55 e0	 mov	 edx, DWORD PTR _point_c$[ebp+8]
  0032b	89 55 ec	 mov	 DWORD PTR _point_b$[ebp+8], edx
$LN15@get_ground:

; 150  : 		}
; 151  : 
; 152  : 		length = get_sqr_3d_range (&point_a, &point_b);

  0032e	8d 45 e4	 lea	 eax, DWORD PTR _point_b$[ebp]
  00331	50		 push	 eax
  00332	8d 4d f0	 lea	 ecx, DWORD PTR _point_a$[ebp]
  00335	51		 push	 ecx
  00336	e8 00 00 00 00	 call	 ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_3d_range
  0033b	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 153  : 	}

  0033e	e9 01 ff ff ff	 jmp	 $LN2@get_ground
$LN3@get_ground:

; 154  : 
; 155  : 	point_b.y = get_3d_terrain_point_data (point_b.x, point_b.z, NULL);

  00343	6a 00		 push	 0
  00345	51		 push	 ecx
  00346	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _point_b$[ebp+8]
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	51		 push	 ecx
  00351	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _point_b$[ebp]
  00356	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035b	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00360	d9 5d e8	 fstp	 DWORD PTR _point_b$[ebp+4]

; 156  : 
; 157  : 	*ground_impact_point = point_b;

  00363	8b 45 10	 mov	 eax, DWORD PTR _ground_impact_point$[ebp]
  00366	8b 4d e4	 mov	 ecx, DWORD PTR _point_b$[ebp]
  00369	89 08		 mov	 DWORD PTR [eax], ecx
  0036b	8b 55 e8	 mov	 edx, DWORD PTR _point_b$[ebp+4]
  0036e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00371	8b 4d ec	 mov	 ecx, DWORD PTR _point_b$[ebp+8]
  00374	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 158  : 
; 159  : 	return (get_terrain_type_class (get_3d_terrain_point_data_type (NULL)));

  00377	6a 00		 push	 0
  00379	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_type
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 ?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z ; get_terrain_type_class

; 160  : }

  00384	5f		 pop	 edi
  00385	5e		 pop	 esi
  00386	5b		 pop	 ebx
  00387	8b e5		 mov	 esp, ebp
  00389	5d		 pop	 ebp
  0038a	c2 0c 00	 ret	 12			; 0000000cH
?get_ground_impact_point@@YG?AW4TERRAIN_CLASSES@@PAUVEC3D@@00@Z ENDP ; get_ground_impact_point
_TEXT	ENDS
END
