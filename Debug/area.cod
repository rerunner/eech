; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_obj\area\area.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ui_object_autosize@@YGXPAUUI_OBJECT@@@Z	; ui_object_autosize
PUBLIC	?get_text_position@@YGXPAM0MMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z ; get_text_position
PUBLIC	?get_text_y_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@H@Z ; get_text_y_position
PUBLIC	?get_text_x_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z ; get_text_x_position
PUBLIC	?get_ui_object_bounded_t_value@@YGMPAUUI_OBJECT@@@Z ; get_ui_object_bounded_t_value
PUBLIC	?reset_time_values@@YGXPAUUI_OBJECT@@@Z		; reset_time_values
PUBLIC	?recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z ; recursively_set_object_time
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?get_system_time@@YGIXZ:PROC			; get_system_time
EXTRN	?ui_get_string_length@@YGMPBD@Z:PROC		; ui_get_string_length
EXTRN	?current_font@@3PAUUI_FONT_TYPE@@A:DWORD	; current_font
EXTRN	?fn_set_ui_object_t_value@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_t_value
EXTRN	?fn_set_ui_object_time_length@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_time_length
EXTRN	?fn_get_ui_object_time_length@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_time_length
EXTRN	?fn_set_ui_object_start_time@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_start_time
EXTRN	?fn_get_ui_object_start_time@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_start_time
EXTRN	?fn_set_ui_object_offset_time@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_offset_time
EXTRN	?fn_get_ui_object_offset_time@@3PAP6GHPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_offset_time
EXTRN	?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_child
EXTRN	?fn_get_ui_object_next@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_next
EXTRN	__fltused:DWORD
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?internal_recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z
_TEXT	SEGMENT
_next$ = -8						; size = 4
_child$ = -4						; size = 4
_obj$ = 8						; size = 4
_time$ = 12						; size = 4
_offset$ = 16						; size = 4
?internal_recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z PROC ; internal_recursively_set_object_time, COMDAT

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 503  : 
; 504  : 	ui_object
; 505  : 		*child,
; 506  : 		*next;
; 507  : 
; 508  : 	// set variables
; 509  : 
; 510  : 	set_ui_object_time_length (obj, time);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _time$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_time_length@@3PAP6GXPAUUI_OBJECT@@H@ZA[eax*4]
  0001d	ff d1		 call	 ecx

; 511  : 
; 512  : 	set_ui_object_offset_time (obj, offset);

  0001f	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_offset_time@@3PAP6GXPAUUI_OBJECT@@H@ZA[eax*4]
  00033	ff d1		 call	 ecx

; 513  : 
; 514  : 	// do recursive stuff
; 515  : 
; 516  : 	child = get_ui_object_child (obj);

  00035	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00045	ff d0		 call	 eax
  00047	89 45 fc	 mov	 DWORD PTR _child$[ebp], eax

; 517  : 
; 518  : 	if (child)

  0004a	83 7d fc 00	 cmp	 DWORD PTR _child$[ebp], 0
  0004e	74 11		 je	 SHORT $LN2@internal_r

; 519  : 	{
; 520  : 
; 521  : 		internal_recursively_set_object_time (child, time, offset);

  00050	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _time$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 fc	 mov	 edx, DWORD PTR _child$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?internal_recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z ; internal_recursively_set_object_time
$LN2@internal_r:

; 522  : 	}
; 523  : 
; 524  : 	next = get_ui_object_next (obj);

  00061	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_next@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00071	ff d0		 call	 eax
  00073	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax

; 525  : 
; 526  : 	if (next)

  00076	83 7d f8 00	 cmp	 DWORD PTR _next$[ebp], 0
  0007a	74 11		 je	 SHORT $LN1@internal_r

; 527  : 	{
; 528  : 
; 529  : 		internal_recursively_set_object_time (next, time, offset);

  0007c	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _time$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ?internal_recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z ; internal_recursively_set_object_time
$LN1@internal_r:

; 530  : 	}
; 531  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
?internal_recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z ENDP ; internal_recursively_set_object_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?internal_reset_time_values@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_time_offset$ = -12					; size = 4
_next$ = -8						; size = 4
_child$ = -4						; size = 4
_obj$ = 8						; size = 4
?internal_reset_time_values@@YGXPAUUI_OBJECT@@@Z PROC	; internal_reset_time_values, COMDAT

; 438  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 439  : 
; 440  : 	ui_object
; 441  : 		*child,
; 442  : 		*next;
; 443  : 
; 444  : 	int
; 445  : 		time_offset;
; 446  : 
; 447  : 	time_offset = get_ui_object_offset_time (obj);

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_offset_time@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  00019	ff d0		 call	 eax
  0001b	89 45 f4	 mov	 DWORD PTR _time_offset$[ebp], eax

; 448  : 
; 449  : 	set_ui_object_start_time (obj, get_system_time () + time_offset);

  0001e	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00023	03 45 f4	 add	 eax, DWORD PTR _time_offset$[ebp]
  00026	50		 push	 eax
  00027	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_start_time@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00037	ff d0		 call	 eax

; 450  : 
; 451  : 	set_ui_object_t_value (obj, 0.0);

  00039	51		 push	 ecx
  0003a	0f 57 c0	 xorps	 xmm0, xmm0
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_t_value@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00052	ff d0		 call	 eax

; 452  : 
; 453  : 	child = get_ui_object_child (obj);

  00054	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00064	ff d0		 call	 eax
  00066	89 45 fc	 mov	 DWORD PTR _child$[ebp], eax

; 454  : 
; 455  : 	if (child)

  00069	83 7d fc 00	 cmp	 DWORD PTR _child$[ebp], 0
  0006d	74 09		 je	 SHORT $LN2@internal_r

; 456  : 	{
; 457  : 
; 458  : 		internal_reset_time_values (child);

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _child$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?internal_reset_time_values@@YGXPAUUI_OBJECT@@@Z ; internal_reset_time_values
$LN2@internal_r:

; 459  : 	}
; 460  : 
; 461  : 	next = get_ui_object_next (obj);

  00078	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_next@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00088	ff d0		 call	 eax
  0008a	89 45 f8	 mov	 DWORD PTR _next$[ebp], eax

; 462  : 
; 463  : 	if (next)

  0008d	83 7d f8 00	 cmp	 DWORD PTR _next$[ebp], 0
  00091	74 09		 je	 SHORT $LN3@internal_r

; 464  : 	{
; 465  : 
; 466  : 		internal_reset_time_values (next);

  00093	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?internal_reset_time_values@@YGXPAUUI_OBJECT@@@Z ; internal_reset_time_values
$LN3@internal_r:

; 467  : 	}
; 468  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
?internal_reset_time_values@@YGXPAUUI_OBJECT@@@Z ENDP	; internal_reset_time_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z
_TEXT	SEGMENT
_child$ = -4						; size = 4
_obj$ = 8						; size = 4
_time$ = 12						; size = 4
_offset$ = 16						; size = 4
?recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z PROC ; recursively_set_object_time, COMDAT

; 475  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 476  : 
; 477  : 	ui_object
; 478  : 		*child;
; 479  : 
; 480  : 	// set variables
; 481  : 
; 482  : 	set_ui_object_time_length (obj, time);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _time$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_time_length@@3PAP6GXPAUUI_OBJECT@@H@ZA[eax*4]
  0001d	ff d1		 call	 ecx

; 483  : 
; 484  : 	set_ui_object_offset_time (obj, offset);

  0001f	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_offset_time@@3PAP6GXPAUUI_OBJECT@@H@ZA[eax*4]
  00033	ff d1		 call	 ecx

; 485  : 
; 486  : 	// do recursive stuff
; 487  : 
; 488  : 	child = get_ui_object_child (obj);

  00035	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00045	ff d0		 call	 eax
  00047	89 45 fc	 mov	 DWORD PTR _child$[ebp], eax

; 489  : 
; 490  : 	if (child)

  0004a	83 7d fc 00	 cmp	 DWORD PTR _child$[ebp], 0
  0004e	74 11		 je	 SHORT $LN1@recursivel

; 491  : 	{
; 492  : 
; 493  : 		internal_recursively_set_object_time (obj, time, offset);

  00050	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _time$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?internal_recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z ; internal_recursively_set_object_time
$LN1@recursivel:

; 494  : 	}
; 495  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
?recursively_set_object_time@@YGXPAUUI_OBJECT@@HH@Z ENDP ; recursively_set_object_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?reset_time_values@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_time_offset$ = -8					; size = 4
_child$ = -4						; size = 4
_obj$ = 8						; size = 4
?reset_time_values@@YGXPAUUI_OBJECT@@@Z PROC		; reset_time_values, COMDAT

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 411  : 
; 412  : 	ui_object
; 413  : 		*child;
; 414  : 
; 415  : 	int
; 416  : 		time_offset;
; 417  : 
; 418  : 	time_offset = get_ui_object_offset_time (obj);

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_offset_time@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  00019	ff d0		 call	 eax
  0001b	89 45 f8	 mov	 DWORD PTR _time_offset$[ebp], eax

; 419  : 
; 420  : 	set_ui_object_start_time (obj, get_system_time () + time_offset);

  0001e	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00023	03 45 f8	 add	 eax, DWORD PTR _time_offset$[ebp]
  00026	50		 push	 eax
  00027	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_start_time@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00037	ff d0		 call	 eax

; 421  : 
; 422  : 	set_ui_object_t_value (obj, 0.0);

  00039	51		 push	 ecx
  0003a	0f 57 c0	 xorps	 xmm0, xmm0
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_t_value@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00052	ff d0		 call	 eax

; 423  : 
; 424  : 	child = get_ui_object_child (obj);

  00054	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_child@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00064	ff d0		 call	 eax
  00066	89 45 fc	 mov	 DWORD PTR _child$[ebp], eax

; 425  : 
; 426  : 	if (child)

  00069	83 7d fc 00	 cmp	 DWORD PTR _child$[ebp], 0
  0006d	74 09		 je	 SHORT $LN2@reset_time

; 427  : 	{
; 428  : 
; 429  : 		internal_reset_time_values (child);

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _child$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?internal_reset_time_values@@YGXPAUUI_OBJECT@@@Z ; internal_reset_time_values
$LN2@reset_time:

; 430  : 	}
; 431  : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
?reset_time_values@@YGXPAUUI_OBJECT@@@Z ENDP		; reset_time_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?get_ui_object_bounded_t_value@@YGMPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
tv85 = -100						; size = 8
tv86 = -92						; size = 8
_t$ = -20						; size = 4
_time_length$ = -16					; size = 4
_current_length$ = -12					; size = 4
_current_time$ = -8					; size = 4
_start_time$ = -4					; size = 4
_obj$ = 8						; size = 4
?get_ui_object_bounded_t_value@@YGMPAUUI_OBJECT@@@Z PROC ; get_ui_object_bounded_t_value, COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 371  : 
; 372  : 	int
; 373  : 		start_time,
; 374  : 		current_time,
; 375  : 		current_length,
; 376  : 		time_length;
; 377  : 
; 378  : 	float
; 379  : 		t;
; 380  : 
; 381  : 	start_time = get_ui_object_start_time (obj);

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_start_time@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  00019	ff d0		 call	 eax
  0001b	89 45 fc	 mov	 DWORD PTR _start_time$[ebp], eax

; 382  : 
; 383  : 	current_time = get_system_time ();

  0001e	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00023	89 45 f8	 mov	 DWORD PTR _current_time$[ebp], eax

; 384  : 
; 385  : 	current_length = current_time - start_time;

  00026	8b 45 f8	 mov	 eax, DWORD PTR _current_time$[ebp]
  00029	2b 45 fc	 sub	 eax, DWORD PTR _start_time$[ebp]
  0002c	89 45 f4	 mov	 DWORD PTR _current_length$[ebp], eax

; 386  : 
; 387  : 	time_length = get_ui_object_time_length (obj);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_time_length@@3PAP6GHPAUUI_OBJECT@@@ZA[edx*4]
  0003f	ff d0		 call	 eax
  00041	89 45 f0	 mov	 DWORD PTR _time_length$[ebp], eax

; 388  : 
; 389  : 	if (time_length > 0)

  00044	83 7d f0 00	 cmp	 DWORD PTR _time_length$[ebp], 0
  00048	7e 15		 jle	 SHORT $LN2@get_ui_obj

; 390  : 	{
; 391  : 
; 392  : 		t = (float) current_length / (float) time_length;

  0004a	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _current_length$[ebp]
  0004f	f3 0f 2a 4d f0	 cvtsi2ss xmm1, DWORD PTR _time_length$[ebp]
  00054	f3 0f 5e c1	 divss	 xmm0, xmm1
  00058	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp], xmm0

; 393  : 	}
; 394  : 	else

  0005d	eb 0d		 jmp	 SHORT $LN3@get_ui_obj
$LN2@get_ui_obj:

; 395  : 	{
; 396  : 
; 397  : 		t = 1.0;

  0005f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00067	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp], xmm0
$LN3@get_ui_obj:

; 398  : 	}
; 399  : 
; 400  : 	t = bound (t, 0.0, 1.0);

  0006c	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00071	0f 57 c9	 xorps	 xmm1, xmm1
  00074	66 0f 2f c8	 comisd	 xmm1, xmm0
  00078	76 0a		 jbe	 SHORT $LN7@get_ui_obj
  0007a	0f 57 c0	 xorps	 xmm0, xmm0
  0007d	f2 0f 11 45 a4	 movsd	 QWORD PTR tv86[ebp], xmm0
  00082	eb 32		 jmp	 SHORT $LN8@get_ui_obj
$LN7@get_ui_obj:
  00084	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00089	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00091	76 0f		 jbe	 SHORT $LN5@get_ui_obj
  00093	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0009b	f2 0f 11 45 9c	 movsd	 QWORD PTR tv85[ebp], xmm0
  000a0	eb 0a		 jmp	 SHORT $LN6@get_ui_obj
$LN5@get_ui_obj:
  000a2	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  000a7	f2 0f 11 45 9c	 movsd	 QWORD PTR tv85[ebp], xmm0
$LN6@get_ui_obj:
  000ac	f2 0f 10 45 9c	 movsd	 xmm0, QWORD PTR tv85[ebp]
  000b1	f2 0f 11 45 a4	 movsd	 QWORD PTR tv86[ebp], xmm0
$LN8@get_ui_obj:
  000b6	f2 0f 5a 45 a4	 cvtsd2ss xmm0, QWORD PTR tv86[ebp]
  000bb	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp], xmm0

; 401  : 
; 402  : 	return (t);

  000c0	d9 45 ec	 fld	 DWORD PTR _t$[ebp]

; 403  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
?get_ui_object_bounded_t_value@@YGMPAUUI_OBJECT@@@Z ENDP ; get_ui_object_bounded_t_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?get_text_x_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z
_TEXT	SEGMENT
tv93 = -96						; size = 8
tv145 = -88						; size = 8
tv132 = -88						; size = 4
tv147 = -84						; size = 4
tv80 = -84						; size = 4
_ix_position$ = -16					; size = 4
_x_position$ = -12					; size = 4
_max_x$ = -8						; size = 4
_mid_x$ = -4						; size = 4
_x$ = 8							; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
_text$ = 20						; size = 4
_justify_type$ = 24					; size = 4
?get_text_x_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z PROC ; get_text_x_position, COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 311  : 
; 312  : 	float
; 313  : 		mid_x,
; 314  : 		max_x;
; 315  : 
; 316  : 	float
; 317  : 		x_position;
; 318  : 
; 319  : 	int
; 320  : 		ix_position;
; 321  : 
; 322  : 	mid_x = x1 + ((x2 - x1) / 2.0) - (ui_get_string_length (text) / 2.0);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0000e	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _x2$[ebp]
  00013	f3 0f 5c 4d 0c	 subss	 xmm1, DWORD PTR _x1$[ebp]
  00018	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0001c	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4000000000000000
  00024	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00028	8b 45 14	 mov	 eax, DWORD PTR _text$[ebp]
  0002b	50		 push	 eax
  0002c	f2 0f 11 45 a8	 movsd	 QWORD PTR tv145[ebp], xmm0
  00031	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  00036	dd 5d a0	 fstp	 QWORD PTR tv93[ebp]
  00039	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv93[ebp]
  0003e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00046	f2 0f 10 4d a8	 movsd	 xmm1, QWORD PTR tv145[ebp]
  0004b	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0004f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _mid_x$[ebp], xmm0

; 323  : 
; 324  : 	max_x = x1 + (x2 - x1) - ui_get_string_length (text);

  00058	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0005d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00062	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _x1$[ebp]
  00067	8b 45 14	 mov	 eax, DWORD PTR _text$[ebp]
  0006a	50		 push	 eax
  0006b	f3 0f 11 45 ac	 movss	 DWORD PTR tv147[ebp], xmm0
  00070	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  00075	d9 5d a8	 fstp	 DWORD PTR tv132[ebp]
  00078	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv147[ebp]
  0007d	f3 0f 5c 45 a8	 subss	 xmm0, DWORD PTR tv132[ebp]
  00082	f3 0f 11 45 f8	 movss	 DWORD PTR _max_x$[ebp], xmm0

; 325  : 
; 326  : 	x_position = mid_x;

  00087	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _mid_x$[ebp]
  0008c	f3 0f 11 45 f4	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 327  : 
; 328  : 	switch (justify_type)

  00091	8b 45 18	 mov	 eax, DWORD PTR _justify_type$[ebp]
  00094	89 45 ac	 mov	 DWORD PTR tv80[ebp], eax
  00097	8b 4d ac	 mov	 ecx, DWORD PTR tv80[ebp]
  0009a	83 e9 01	 sub	 ecx, 1
  0009d	89 4d ac	 mov	 DWORD PTR tv80[ebp], ecx
  000a0	83 7d ac 07	 cmp	 DWORD PTR tv80[ebp], 7
  000a4	77 29		 ja	 SHORT $LN2@get_text_x
  000a6	8b 55 ac	 mov	 edx, DWORD PTR tv80[ebp]
  000a9	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN8@get_text_x[edx]
  000b0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN9@get_text_x[eax*4]

; 329  : 	{
; 330  : 
; 331  : 		case TEXT_JUSTIFY_CENTRE:
; 332  : 		{
; 333  : 
; 334  : 			break;

  000b7	eb 16		 jmp	 SHORT $LN2@get_text_x
$LN5@get_text_x:

; 335  : 		}
; 336  : 		case TEXT_JUSTIFY_LEFT_TOP:
; 337  : 		case TEXT_JUSTIFY_LEFT_CENTRE:
; 338  : 		case TEXT_JUSTIFY_LEFT_BOTTOM:
; 339  : 		{
; 340  : 
; 341  : 			x_position = x1;

  000b9	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000be	f3 0f 11 45 f4	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 342  : 
; 343  : 			break;

  000c3	eb 0a		 jmp	 SHORT $LN2@get_text_x
$LN6@get_text_x:

; 344  : 		}
; 345  : 		case TEXT_JUSTIFY_RIGHT_TOP:
; 346  : 		case TEXT_JUSTIFY_RIGHT_CENTRE:
; 347  : 		case TEXT_JUSTIFY_RIGHT_BOTTOM:
; 348  : 		{
; 349  : 
; 350  : 			x_position = max_x;

  000c5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _max_x$[ebp]
  000ca	f3 0f 11 45 f4	 movss	 DWORD PTR _x_position$[ebp], xmm0
$LN2@get_text_x:

; 351  : 
; 352  : 			break;
; 353  : 		}
; 354  : 	}
; 355  : 
; 356  : 	//
; 357  : 	// Now ensure we're not using 1/2 pixel boundaries :)
; 358  : 	//
; 359  : 
; 360  : 	convert_float_to_int ( x_position, &ix_position );

  000cf	8d 45 f0	 lea	 eax, DWORD PTR _ix_position$[ebp]
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_position$[ebp]
  000d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000de	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 361  : 
; 362  : 	*x = ix_position;

  000e3	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _ix_position$[ebp]
  000e8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000eb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 363  : }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 14 00	 ret	 20			; 00000014H
$LN9@get_text_x:
  000f8	00 00 00 00	 DD	 $LN5@get_text_x
  000fc	00 00 00 00	 DD	 $LN6@get_text_x
  00100	00 00 00 00	 DD	 $LN2@get_text_x
$LN8@get_text_x:
  00104	00		 DB	 0
  00105	01		 DB	 1
  00106	02		 DB	 2
  00107	00		 DB	 0
  00108	01		 DB	 1
  00109	02		 DB	 2
  0010a	00		 DB	 0
  0010b	01		 DB	 1
?get_text_x_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z ENDP ; get_text_x_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?get_text_y_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@H@Z
_TEXT	SEGMENT
tv72 = -84						; size = 4
_iy_position$ = -16					; size = 4
_y_position$ = -12					; size = 4
_max_y$ = -8						; size = 4
_mid_y$ = -4						; size = 4
_y$ = 8							; size = 4
_y1$ = 12						; size = 4
_y2$ = 16						; size = 4
_text$ = 20						; size = 4
_justify_type$ = 24					; size = 4
_line_count$ = 28					; size = 4
?get_text_y_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@H@Z PROC ; get_text_y_position, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 250  : 
; 251  : 	float
; 252  : 		mid_y,
; 253  : 		max_y;
; 254  : 
; 255  : 	float
; 256  : 		y_position;
; 257  : 
; 258  : 	int
; 259  : 		iy_position;
; 260  : 
; 261  : 	mid_y = y1 + ((y2 - y1) / 2.0);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0000e	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _y2$[ebp]
  00013	f3 0f 5c 4d 0c	 subss	 xmm1, DWORD PTR _y1$[ebp]
  00018	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0001c	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4000000000000000
  00024	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00028	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0002c	f3 0f 11 45 fc	 movss	 DWORD PTR _mid_y$[ebp], xmm0

; 262  : 
; 263  : 	max_y = y1 + (y2 - y1);

  00031	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00036	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _y1$[ebp]
  0003b	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _y1$[ebp]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _max_y$[ebp], xmm0

; 264  : 
; 265  : 	switch (justify_type)

  00045	8b 45 18	 mov	 eax, DWORD PTR _justify_type$[ebp]
  00048	89 45 ac	 mov	 DWORD PTR tv72[ebp], eax
  0004b	8b 4d ac	 mov	 ecx, DWORD PTR tv72[ebp]
  0004e	83 e9 03	 sub	 ecx, 3
  00051	89 4d ac	 mov	 DWORD PTR tv72[ebp], ecx
  00054	83 7d ac 05	 cmp	 DWORD PTR tv72[ebp], 5
  00058	77 36		 ja	 SHORT $LN6@get_text_y
  0005a	8b 55 ac	 mov	 edx, DWORD PTR tv72[ebp]
  0005d	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN8@get_text_y[edx*4]
$LN4@get_text_y:

; 266  : 	{
; 267  : 
; 268  : 		case TEXT_JUSTIFY_CENTRE_TOP:
; 269  : 		case TEXT_JUSTIFY_LEFT_TOP:
; 270  : 		case TEXT_JUSTIFY_RIGHT_TOP:
; 271  : 		{
; 272  : 
; 273  : 			y_position = y1;

  00064	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00069	f3 0f 11 45 f4	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 274  : 
; 275  : 			break;

  0006e	eb 4d		 jmp	 SHORT $LN2@get_text_y
$LN5@get_text_y:

; 276  : 		}
; 277  : 		case TEXT_JUSTIFY_CENTRE_BOTTOM:
; 278  : 		case TEXT_JUSTIFY_LEFT_BOTTOM:
; 279  : 		case TEXT_JUSTIFY_RIGHT_BOTTOM:
; 280  : 		{
; 281  : 
; 282  : 			y_position = max_y - (line_count * ui_get_font_height ());

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  00075	8b 4d 1c	 mov	 ecx, DWORD PTR _line_count$[ebp]
  00078	0f af 48 10	 imul	 ecx, DWORD PTR [eax+16]
  0007c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00080	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _max_y$[ebp]
  00085	f3 0f 5c c8	 subss	 xmm1, xmm0
  00089	f3 0f 11 4d f4	 movss	 DWORD PTR _y_position$[ebp], xmm1

; 283  : 
; 284  : 			break;

  0008e	eb 2d		 jmp	 SHORT $LN2@get_text_y
$LN6@get_text_y:

; 285  : 		}
; 286  : 
; 287  : 		default:
; 288  : 		{
; 289  : 
; 290  : 			y_position = mid_y - (0.5 * line_count * ui_get_font_height ());

  00090	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _mid_y$[ebp]
  00095	f2 0f 2a 4d 1c	 cvtsi2sd xmm1, DWORD PTR _line_count$[ebp]
  0009a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  000a7	f2 0f 2a 50 10	 cvtsi2sd xmm2, DWORD PTR [eax+16]
  000ac	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000b0	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b8	f3 0f 11 45 f4	 movss	 DWORD PTR _y_position$[ebp], xmm0
$LN2@get_text_y:

; 291  : 
; 292  : 			break;
; 293  : 		}
; 294  : 	}
; 295  : 
; 296  : 	//
; 297  : 	// Now ensure we're not using 1/2 pixel boundaries :)
; 298  : 	//
; 299  : 
; 300  : 	convert_float_to_int ( y_position, &iy_position );

  000bd	8d 45 f0	 lea	 eax, DWORD PTR _iy_position$[ebp]
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 301  : 
; 302  : 	*y = iy_position;

  000d1	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _iy_position$[ebp]
  000d6	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  000d9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 303  : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 18 00	 ret	 24			; 00000018H
  000e6	66 90		 npad	 2
$LN8@get_text_y:
  000e8	00 00 00 00	 DD	 $LN4@get_text_y
  000ec	00 00 00 00	 DD	 $LN4@get_text_y
  000f0	00 00 00 00	 DD	 $LN4@get_text_y
  000f4	00 00 00 00	 DD	 $LN5@get_text_y
  000f8	00 00 00 00	 DD	 $LN5@get_text_y
  000fc	00 00 00 00	 DD	 $LN5@get_text_y
?get_text_y_position@@YGXPAMMMPBDW4TEXT_JUSTIFY_TYPES@@H@Z ENDP ; get_text_y_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?get_text_position@@YGXPAM0MMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z
_TEXT	SEGMENT
tv143 = -112						; size = 8
tv182 = -104						; size = 8
tv152 = -104						; size = 4
tv184 = -100						; size = 4
tv95 = -100						; size = 4
_iy_position$ = -32					; size = 4
_ix_position$ = -28					; size = 4
_y_position$ = -24					; size = 4
_x_position$ = -20					; size = 4
_max_y$ = -16						; size = 4
_max_x$ = -12						; size = 4
_mid_y$ = -8						; size = 4
_mid_x$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_text$ = 32						; size = 4
_justify_type$ = 36					; size = 4
?get_text_position@@YGXPAM0MMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z PROC ; get_text_position, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 136  : 
; 137  : 	float
; 138  : 		mid_x,
; 139  : 		mid_y,
; 140  : 		max_x,
; 141  : 		max_y;
; 142  : 
; 143  : 	float
; 144  : 		x_position,
; 145  : 		y_position;
; 146  : 
; 147  : 	int
; 148  : 		ix_position,
; 149  : 		iy_position;
; 150  : 
; 151  : 	mid_x = x1 + ((x2 - x1) / 2.0) - (ui_get_string_length (text) / 2.0);

  00009	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0000e	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _x2$[ebp]
  00013	f3 0f 5c 4d 10	 subss	 xmm1, DWORD PTR _x1$[ebp]
  00018	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0001c	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4000000000000000
  00024	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00028	8b 45 20	 mov	 eax, DWORD PTR _text$[ebp]
  0002b	50		 push	 eax
  0002c	f2 0f 11 45 98	 movsd	 QWORD PTR tv182[ebp], xmm0
  00031	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  00036	dd 5d 90	 fstp	 QWORD PTR tv143[ebp]
  00039	f2 0f 10 45 90	 movsd	 xmm0, QWORD PTR tv143[ebp]
  0003e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00046	f2 0f 10 4d 98	 movsd	 xmm1, QWORD PTR tv182[ebp]
  0004b	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0004f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _mid_x$[ebp], xmm0

; 152  : 
; 153  : 	mid_y = y1 + ((y2 - y1) / 2.0) - (ui_get_font_height () / 2.0);

  00058	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0005d	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _y2$[ebp]
  00062	f3 0f 5c 4d 14	 subss	 xmm1, DWORD PTR _y1$[ebp]
  00067	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0006b	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4000000000000000
  00073	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  0007c	f2 0f 2a 48 10	 cvtsi2sd xmm1, DWORD PTR [eax+16]
  00081	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4000000000000000
  00089	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0008d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00091	f3 0f 11 45 f8	 movss	 DWORD PTR _mid_y$[ebp], xmm0

; 154  : 
; 155  : 	max_x = x1 + (x2 - x1) - ui_get_string_length (text);

  00096	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0009b	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _x1$[ebp]
  000a0	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _x1$[ebp]
  000a5	8b 45 20	 mov	 eax, DWORD PTR _text$[ebp]
  000a8	50		 push	 eax
  000a9	f3 0f 11 45 9c	 movss	 DWORD PTR tv184[ebp], xmm0
  000ae	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  000b3	d9 5d 98	 fstp	 DWORD PTR tv152[ebp]
  000b6	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv184[ebp]
  000bb	f3 0f 5c 45 98	 subss	 xmm0, DWORD PTR tv152[ebp]
  000c0	f3 0f 11 45 f4	 movss	 DWORD PTR _max_x$[ebp], xmm0

; 156  : 
; 157  : 	max_y = y1 + (y2 - y1) - ui_get_font_height ();

  000c5	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000ca	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _y1$[ebp]
  000cf	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y1$[ebp]
  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  000d9	f3 0f 2a 48 10	 cvtsi2ss xmm1, DWORD PTR [eax+16]
  000de	f3 0f 5c c1	 subss	 xmm0, xmm1
  000e2	f3 0f 11 45 f0	 movss	 DWORD PTR _max_y$[ebp], xmm0

; 158  : 
; 159  : 	x_position = mid_x;

  000e7	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _mid_x$[ebp]
  000ec	f3 0f 11 45 ec	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 160  : 
; 161  : 	y_position = mid_y;

  000f1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _mid_y$[ebp]
  000f6	f3 0f 11 45 e8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 162  : 
; 163  : 	switch (justify_type)

  000fb	8b 45 24	 mov	 eax, DWORD PTR _justify_type$[ebp]
  000fe	89 45 9c	 mov	 DWORD PTR tv95[ebp], eax
  00101	8b 4d 9c	 mov	 ecx, DWORD PTR tv95[ebp]
  00104	83 e9 01	 sub	 ecx, 1
  00107	89 4d 9c	 mov	 DWORD PTR tv95[ebp], ecx
  0010a	83 7d 9c 07	 cmp	 DWORD PTR tv95[ebp], 7
  0010e	0f 87 95 00 00
	00		 ja	 $LN2@get_text_p
  00114	8b 55 9c	 mov	 edx, DWORD PTR tv95[ebp]
  00117	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN14@get_text_p[edx*4]

; 164  : 	{
; 165  : 
; 166  : 		case TEXT_JUSTIFY_CENTRE:
; 167  : 		{
; 168  : 
; 169  : 			break;

  0011e	e9 86 00 00 00	 jmp	 $LN2@get_text_p
$LN5@get_text_p:

; 170  : 		}
; 171  : 		case TEXT_JUSTIFY_LEFT_CENTRE:
; 172  : 		{
; 173  : 
; 174  : 			x_position = x1;

  00123	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00128	f3 0f 11 45 ec	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 175  : 
; 176  : 			break;

  0012d	eb 7a		 jmp	 SHORT $LN2@get_text_p
$LN6@get_text_p:

; 177  : 		}
; 178  : 		case TEXT_JUSTIFY_RIGHT_CENTRE:
; 179  : 		{
; 180  : 
; 181  : 			x_position = max_x;

  0012f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_x$[ebp]
  00134	f3 0f 11 45 ec	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 182  : 
; 183  : 			break;

  00139	eb 6e		 jmp	 SHORT $LN2@get_text_p
$LN7@get_text_p:

; 184  : 		}
; 185  : 		case TEXT_JUSTIFY_CENTRE_TOP:
; 186  : 		{
; 187  : 
; 188  : 			y_position = y1;

  0013b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00140	f3 0f 11 45 e8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 189  : 
; 190  : 			break;

  00145	eb 62		 jmp	 SHORT $LN2@get_text_p
$LN8@get_text_p:

; 191  : 		}
; 192  : 		case TEXT_JUSTIFY_LEFT_TOP:
; 193  : 		{
; 194  : 
; 195  : 			x_position = x1;

  00147	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0014c	f3 0f 11 45 ec	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 196  : 			y_position = y1;

  00151	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00156	f3 0f 11 45 e8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 197  : 
; 198  : 			break;

  0015b	eb 4c		 jmp	 SHORT $LN2@get_text_p
$LN9@get_text_p:

; 199  : 		}
; 200  : 		case TEXT_JUSTIFY_RIGHT_TOP:
; 201  : 		{
; 202  : 
; 203  : 			x_position = max_x;

  0015d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_x$[ebp]
  00162	f3 0f 11 45 ec	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 204  : 			y_position = y1;

  00167	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0016c	f3 0f 11 45 e8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 205  : 
; 206  : 			break;

  00171	eb 36		 jmp	 SHORT $LN2@get_text_p
$LN10@get_text_p:

; 207  : 		}
; 208  : 		case TEXT_JUSTIFY_CENTRE_BOTTOM:
; 209  : 		{
; 210  : 
; 211  : 			y_position = max_y;

  00173	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _max_y$[ebp]
  00178	f3 0f 11 45 e8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 212  : 
; 213  : 			break;

  0017d	eb 2a		 jmp	 SHORT $LN2@get_text_p
$LN11@get_text_p:

; 214  : 		}
; 215  : 		case TEXT_JUSTIFY_LEFT_BOTTOM:
; 216  : 		{
; 217  : 
; 218  : 			x_position = x1;

  0017f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00184	f3 0f 11 45 ec	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 219  : 			y_position = max_y;

  00189	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _max_y$[ebp]
  0018e	f3 0f 11 45 e8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 220  : 
; 221  : 			break;

  00193	eb 14		 jmp	 SHORT $LN2@get_text_p
$LN12@get_text_p:

; 222  : 		}
; 223  : 		case TEXT_JUSTIFY_RIGHT_BOTTOM:
; 224  : 		{
; 225  : 
; 226  : 			x_position = max_x;

  00195	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_x$[ebp]
  0019a	f3 0f 11 45 ec	 movss	 DWORD PTR _x_position$[ebp], xmm0

; 227  : 			y_position = max_y;

  0019f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _max_y$[ebp]
  001a4	f3 0f 11 45 e8	 movss	 DWORD PTR _y_position$[ebp], xmm0
$LN2@get_text_p:

; 228  : 
; 229  : 			break;
; 230  : 		}
; 231  : 	}
; 232  : 
; 233  : 	//
; 234  : 	// Now ensure we're not using 1/2 pixel boundaries :)
; 235  : 	//
; 236  : 
; 237  : 	convert_float_to_int ( x_position, &ix_position );

  001a9	8d 45 e4	 lea	 eax, DWORD PTR _ix_position$[ebp]
  001ac	50		 push	 eax
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_position$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 238  : 	convert_float_to_int ( y_position, &iy_position );

  001bd	8d 45 e0	 lea	 eax, DWORD PTR _iy_position$[ebp]
  001c0	50		 push	 eax
  001c1	51		 push	 ecx
  001c2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 239  : 
; 240  : 	*x = ix_position;

  001d1	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _ix_position$[ebp]
  001d6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001d9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 241  : 	*y = iy_position;

  001dd	f3 0f 2a 45 e0	 cvtsi2ss xmm0, DWORD PTR _iy_position$[ebp]
  001e2	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  001e5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 242  : }

  001e9	5f		 pop	 edi
  001ea	5e		 pop	 esi
  001eb	5b		 pop	 ebx
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 20 00	 ret	 32			; 00000020H
  001f2	66 90		 npad	 2
$LN14@get_text_p:
  001f4	00 00 00 00	 DD	 $LN5@get_text_p
  001f8	00 00 00 00	 DD	 $LN6@get_text_p
  001fc	00 00 00 00	 DD	 $LN7@get_text_p
  00200	00 00 00 00	 DD	 $LN8@get_text_p
  00204	00 00 00 00	 DD	 $LN9@get_text_p
  00208	00 00 00 00	 DD	 $LN10@get_text_p
  0020c	00 00 00 00	 DD	 $LN11@get_text_p
  00210	00 00 00 00	 DD	 $LN12@get_text_p
?get_text_position@@YGXPAM0MMMMPBDW4TEXT_JUSTIFY_TYPES@@@Z ENDP ; get_text_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\area\area.c
;	COMDAT ?ui_object_autosize@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?ui_object_autosize@@YGXPAUUI_OBJECT@@@Z PROC		; ui_object_autosize, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 83   : /*
; 84   : 	ui_object
; 85   : 		*child;
; 86   : 
; 87   : 	area_ui_object
; 88   : 		*area;
; 89   : 
; 90   : 	float
; 91   : 		x2 = 0.0,
; 92   : 		y2 = 0.0;
; 93   : 
; 94   : 	debug_fatal ("UI_AUTOSIZE - NOT CODED YET!");
; 95   : 
; 96   : 	child = get_ui_object_child (obj);
; 97   : 
; 98   : 	while (child)
; 99   : 	{
; 100  : 
; 101  : 		if (get_ui_object_autosize (child))
; 102  : 		{
; 103  : 
; 104  : 			ui_object_autosize (child);
; 105  : 		}
; 106  : 
; 107  : 		area = (area_ui_object *) child->data;
; 108  : 
; 109  : 		if (area->x + area->x_size > x2)
; 110  : 		{
; 111  : 
; 112  : 			x2 = area->x + area->x_size;
; 113  : 		}
; 114  : 
; 115  : 		if (area->y + area->y_size > y2)
; 116  : 		{
; 117  : 
; 118  : 			y2 = area->y + area->y_size;
; 119  : 		}
; 120  : 
; 121  : 		child = get_ui_object_next (child);
; 122  : 	}
; 123  : 
; 124  : 	set_ui_object_x_size (obj, x2);
; 125  : 
; 126  : 	set_ui_object_y_size (obj, y2);
; 127  : 	*/
; 128  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?ui_object_autosize@@YGXPAUUI_OBJECT@@@Z ENDP		; ui_object_autosize
_TEXT	ENDS
END
