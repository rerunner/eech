; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?atan@@YGMM@Z					; atan
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?initialise_havoc_hud@@YGXXZ			; initialise_havoc_hud
PUBLIC	?deinitialise_havoc_hud@@YGXXZ			; deinitialise_havoc_hud
PUBLIC	?draw_havoc_hud_on_cockpit@@YGXH@Z		; draw_havoc_hud_on_cockpit
PUBLIC	?draw_havoc_hud_on_texture@@YGXXZ		; draw_havoc_hud_on_texture
PUBLIC	?draw_external_havoc_hud@@YGXXZ			; draw_external_havoc_hud
PUBLIC	?draw_havoc_hms@@YGXXZ				; draw_havoc_hms
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@N@std@@YGABNABN0@Z			; std::max<double>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA ; `clip_2d_point_to_hud_extent'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_01FJMABOPO@x@				; `string'
PUBLIC	??_C@_01EANLCPLP@y@				; `string'
PUBLIC	?__LINE__Var@?0??transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z@4JA ; `transform_hud_screen_co_ords_to_hud_texture_co_ords'::`1'::__LINE__Var
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_01CBDEGOCN@j@				; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA	; `draw_heading_scale'::`1'::__LINE__Var
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	??_C@_02KPIPOMFB@36@				; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_indicator@@YGXXZ@4JA ; `draw_pitch_indicator'::`1'::__LINE__Var
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_datum@@YGXXZ@4JA	; `draw_aircraft_datum'::`1'::__LINE__Var
PUBLIC	??_C@_03OCGDPLBD@500@				; `string'
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL@				; `string'
PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_scale@@YGXXZ@4JA	; `draw_pitch_scale'::`1'::__LINE__Var
PUBLIC	??_C@_03GPCJOALC@?$CF2d@			; `string'
PUBLIC	??_C@_02PNFIDHGF@50@				; `string'
PUBLIC	??_C@_01DGKLNCNG@R@				; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	??_C@_01EKENIIDA@3@				; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_01HIHLOKLC@1@				; `string'
PUBLIC	??_C@_02PJNFELNH@30@				; `string'
PUBLIC	??_C@_02PKFBJPLJ@10@				; `string'
PUBLIC	??_C@_03HGAMOOFE@?910@				; `string'
PUBLIC	??_C@_04FCMNJMCO@?$CFd?$CF?$CF@			; `string'
PUBLIC	?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA ; `display_flight_path_marker_and_waypoint_information'::`1'::__LINE__Var
PUBLIC	??_C@_07GLDGAFOI@?$CFc?3?$CF?41f@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA ; `display_waypoint_information'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA	; `draw_bob_up_overlay'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA	; `draw_target_marker'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA ; `display_weapon_information'::`1'::__LINE__Var
PUBLIC	??_C@_07KPIMALJJ@HE?5?$CF03d@			; `string'
PUBLIC	??_C@_07IFCFKDNL@AP?5?$CF03d@			; `string'
PUBLIC	??_C@_06HHKMCLEN@?$CF02?40f@			; `string'
PUBLIC	??_C@_08LGPBCGJH@MSL?5?$CF02d@			; `string'
PUBLIC	??_C@_08DLNHLNFK@ATA?5?$CF02d@			; `string'
PUBLIC	??_C@_08HDONNOJA@GUN?5?$CF03d@			; `string'
PUBLIC	??_C@_08DPCFDJDH@RKT?5?$CF03d@			; `string'
PUBLIC	?__LINE__Var@?0??display_target_information@@YGXXZ@4JA ; `display_target_information'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_05JEFOLKLE@?$CF2?41f@			; `string'
PUBLIC	??_C@_01OCOKONAJ@L@				; `string'
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_06BNPEMCDI@NO?5WPN@			; `string'
PUBLIC	??_C@_06KGAFCCPI@NO?5TGT@			; `string'
PUBLIC	??_C@_07EMEAKIHK@INV?5TGT@			; `string'
PUBLIC	??_C@_07PAKIBCIO@SKR?5LMT@			; `string'
PUBLIC	??_C@_06HCPKJKPH@NO?5LOS@			; `string'
PUBLIC	??_C@_06DLNCBKEB@NO?5SGT@			; `string'
PUBLIC	??_C@_07KJHNDNDJ@MIN?5RNG@			; `string'
PUBLIC	??_C@_07EPBNJCNI@MAX?5RNG@			; `string'
PUBLIC	??_C@_04GPIFAJG@LOCK@				; `string'
PUBLIC	??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c03126f
PUBLIC	__real@3d1374bc
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d45f7fb
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3dcccccd
PUBLIC	__real@3df5c28f
PUBLIC	__real@3e000000
PUBLIC	__real@3e19999a
PUBLIC	__real@3e23d70a
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e333333
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e666666
PUBLIC	__real@3e75c28f
PUBLIC	__real@3e800000
PUBLIC	__real@3e860a92
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9b22d1
PUBLIC	__real@3ea3d70a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ec28f5c
PUBLIC	__real@3ec7ae14
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ee66666
PUBLIC	__real@3ef33333
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3f000000
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f060a92
PUBLIC	__real@3f066666
PUBLIC	__real@3f0a3d71
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f133333
PUBLIC	__real@3f19999a
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f28f5c3
PUBLIC	__real@3f333333
PUBLIC	__real@3f39999a
PUBLIC	__real@3f400000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f533333
PUBLIC	__real@3f56f0068db8bac7
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f600000
PUBLIC	__real@3f666666
PUBLIC	__real@3f733333
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f800000
PUBLIC	__real@3f80624dd2f1a9fc
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f860a92
PUBLIC	__real@3f90624dd2f1a9fc
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3f9c71c71c71c71c
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb53f7ced916873
PUBLIC	__real@3fb6571848000000
PUBLIC	__real@3fb70a3d70a3d70a
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc11cc249f74fea
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd0a3d70a3d70a4
PUBLIC	__real@3fd1111111111111
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd6666666666666
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@3fdbecde5a000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe1eb851eb851ec
PUBLIC	__real@3fe3333333333333
PUBLIC	__real@3fea3d70a3d70a3d
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@401921fb51000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4028000000000000
PUBLIC	__real@402bc71c71c71c72
PUBLIC	__real@402d333333333333
PUBLIC	__real@4034000000000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4049000000000000
PUBLIC	__real@4058f9999999999a
PUBLIC	__real@405fffef9db22d0e
PUBLIC	__real@4060000000000000
PUBLIC	__real@40666666
PUBLIC	__real@4072c00000000000
PUBLIC	__real@407ca5dc1e1ce25c
PUBLIC	__real@407e000000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@40800000
PUBLIC	__real@4084000000000000
PUBLIC	__real@408e000000000000
PUBLIC	__real@4094000000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40b1c71c
PUBLIC	__real@40c00000
PUBLIC	__real@410e848000000000
PUBLIC	__real@41200000
PUBLIC	__real@42652ee0
PUBLIC	__real@43000000
PUBLIC	__real@43020000
PUBLIC	__real@437fffbe
PUBLIC	__real@43800000
PUBLIC	__real@451c4000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@bc03126f
PUBLIC	__real@bd23d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd8f5c29
PUBLIC	__real@bda3d70a
PUBLIC	__real@bdb2b8c2
PUBLIC	__real@bdcccccd
PUBLIC	__real@be19999a
PUBLIC	__real@be32b8c2
PUBLIC	__real@be333333
PUBLIC	__real@be4ccccd
PUBLIC	__real@be6147ae
PUBLIC	__real@be666666
PUBLIC	__real@be800000
PUBLIC	__real@be860a92
PUBLIC	__real@be99999a
PUBLIC	__real@be9b22d1
PUBLIC	__real@beb2b8c2
PUBLIC	__real@beb33333
PUBLIC	__real@bec7ae14
PUBLIC	__real@becccccd
PUBLIC	__real@bee66666
PUBLIC	__real@bef33333
PUBLIC	__real@bf000000
PUBLIC	__real@bf060a92
PUBLIC	__real@bf066666
PUBLIC	__real@bf0ccccd
PUBLIC	__real@bf133333
PUBLIC	__real@bf19999a
PUBLIC	__real@bf266666
PUBLIC	__real@bf333333
PUBLIC	__real@bf39999a
PUBLIC	__real@bf400000
PUBLIC	__real@bf47ae14
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf59999a
PUBLIC	__real@bf666666
PUBLIC	__real@bf800000
PUBLIC	__real@bf860a92
PUBLIC	__real@bf9c71c71c71c71c
PUBLIC	__real@bfb6571848000000
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@bfd0000000000000
PUBLIC	__real@bfd3333333333333
PUBLIC	__real@bfdc8543bf9690c9
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe199999999999a
PUBLIC	__real@bfe3333333333333
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff921fb51000000
PUBLIC	__real@c0000000
PUBLIC	__real@c00921fb51000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c02bc71c71c71c72
PUBLIC	__real@c02d333333333333
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c0c90fdb
PUBLIC	__real@c1000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1700000
PUBLIC	__real@c1c80000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_abs:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?get_system_time@@YGIXZ:PROC			; get_system_time
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?get_mono_font_position@@YGXPAM0@Z:PROC		; get_mono_font_position
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_mono_sprite
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?set_2d_view_offset@@YGXPAUENV_2D@@MM@Z:PROC	; set_2d_view_offset
EXTRN	?reset_2d_view_offset@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_view_offset
EXTRN	?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z:PROC	; set_2d_pixel
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_target_intercept_point@@YGXPAUENTITY@@0HPAUVEC3D@@@Z:PROC ; get_target_intercept_point
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_full_screen_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@@Z:PROC ; set_main_3d_full_screen_params
EXTRN	?getViewpointOffsetX@@YGMM@Z:PROC		; getViewpointOffsetX
EXTRN	?getViewpointOffsetY@@YGMM@Z:PROC		; getViewpointOffsetY
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?slew_eo_to_direction@@YGXMM@Z:PROC		; slew_eo_to_direction
EXTRN	?laser_is_active@@YGHXZ:PROC			; laser_is_active
EXTRN	?electrical_system_active@@YGHXZ:PROC		; electrical_system_active
EXTRN	?get_eo_tracking_point@@YGPAUVEC3D@@XZ:PROC	; get_eo_tracking_point
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?clear_hud_bob_up_overlay@@YGXXZ:PROC		; clear_hud_bob_up_overlay
EXTRN	?get_weapon_drop@@YGMH@Z:PROC			; get_weapon_drop
EXTRN	?get_missile_flight_time@@YGMXZ:PROC		; get_missile_flight_time
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_modulate_alpha@@3HA:DWORD			; d3d_modulate_alpha
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_high_res_hud@@3HA:DWORD		; command_line_high_res_hud
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?full_screen_x_mid@@3MA:DWORD			; full_screen_x_mid
EXTRN	?full_screen_y_mid@@3MA:DWORD			; full_screen_y_mid
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?in_cockpit@@3HA:DWORD				; in_cockpit
EXTRN	?pilot_head_heading@@3MA:DWORD			; pilot_head_heading
EXTRN	?pilot_head_pitch@@3MA:DWORD			; pilot_head_pitch
EXTRN	?wide_cockpit@@3HA:DWORD			; wide_cockpit
EXTRN	?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A:BYTE ; wide_cockpit_position
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?hud_colour_table@@3PAUREAL_COLOUR@@A:BYTE	; hud_colour_table
EXTRN	?hud_colour@@3UREAL_COLOUR@@A:DWORD		; hud_colour
EXTRN	?display_hud_layout_grid@@3HA:DWORD		; display_hud_layout_grid
EXTRN	?hud_bob_up_overlay@@3HA:DWORD			; hud_bob_up_overlay
EXTRN	?hud_bob_up_position@@3UVEC3D@@A:BYTE		; hud_bob_up_position
EXTRN	?hud_mode@@3W4HUD_MODES@@A:DWORD		; hud_mode
EXTRN	?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A:DWORD ; weapon_lock_type
EXTRN	?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A:DWORD	; havoc_damage
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?hud_env@@3PAUENV_2D@@A DD 01H DUP (?)			; hud_env
?hud_viewport_size@@3MA DD 01H DUP (?)			; hud_viewport_size
?hud_viewport_x_org@@3MA DD 01H DUP (?)			; hud_viewport_x_org
?hud_viewport_y_org@@3MA DD 01H DUP (?)			; hud_viewport_y_org
?hud_viewport_x_min@@3MA DD 01H DUP (?)			; hud_viewport_x_min
?hud_viewport_y_min@@3MA DD 01H DUP (?)			; hud_viewport_y_min
?hud_viewport_x_max@@3MA DD 01H DUP (?)			; hud_viewport_x_max
?hud_viewport_y_max@@3MA DD 01H DUP (?)			; hud_viewport_y_max
?draw_large_hud@@3HA DD 01H DUP (?)			; draw_large_hud
?hud_screen_x_min@@3MA DD 01H DUP (?)			; hud_screen_x_min
?hud_screen_y_min@@3MA DD 01H DUP (?)			; hud_screen_y_min
?hud_screen_x_max@@3MA DD 01H DUP (?)			; hud_screen_x_max
?hud_screen_y_max@@3MA DD 01H DUP (?)			; hud_screen_y_max
?hud_screen_x_scale@@3MA DD 01H DUP (?)			; hud_screen_x_scale
?hud_screen_y_scale@@3MA DD 01H DUP (?)			; hud_screen_y_scale
?hud_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; hud_texture_screen
?large_hms_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; large_hms_texture_screen
?clear_hud_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_hud_colour
?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA DD 01H DUP (?) ; draw_line_func
?gun_pipper_points@@3PAY01MA DD 0104H DUP (?)		; gun_pipper_points
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1700000
CONST	SEGMENT
__real@c1700000 DD 0c1700000r			; -15
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c90fdb
CONST	SEGMENT
__real@c0c90fdb DD 0c0c90fdbr			; -6.28319
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c02d333333333333
CONST	SEGMENT
__real@c02d333333333333 DQ 0c02d333333333333r	; -14.6
CONST	ENDS
;	COMDAT __real@c02bc71c71c71c72
CONST	SEGMENT
__real@c02bc71c71c71c72 DQ 0c02bc71c71c71c72r	; -13.8889
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c00921fb51000000
CONST	SEGMENT
__real@c00921fb51000000 DQ 0c00921fb51000000r	; -3.14159
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb51000000
CONST	SEGMENT
__real@bff921fb51000000 DQ 0bff921fb51000000r	; -1.5708
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe3333333333333
CONST	SEGMENT
__real@bfe3333333333333 DQ 0bfe3333333333333r	; -0.6
CONST	ENDS
;	COMDAT __real@bfe199999999999a
CONST	SEGMENT
__real@bfe199999999999a DQ 0bfe199999999999ar	; -0.55
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfdc8543bf9690c9
CONST	SEGMENT
__real@bfdc8543bf9690c9 DQ 0bfdc8543bf9690c9r	; -0.445634
CONST	ENDS
;	COMDAT __real@bfd3333333333333
CONST	SEGMENT
__real@bfd3333333333333 DQ 0bfd3333333333333r	; -0.3
CONST	ENDS
;	COMDAT __real@bfd0000000000000
CONST	SEGMENT
__real@bfd0000000000000 DQ 0bfd0000000000000r	; -0.25
CONST	ENDS
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@bfb6571848000000
CONST	SEGMENT
__real@bfb6571848000000 DQ 0bfb6571848000000r	; -0.0872665
CONST	ENDS
;	COMDAT __real@bf9c71c71c71c71c
CONST	SEGMENT
__real@bf9c71c71c71c71c DQ 0bf9c71c71c71c71cr	; -0.0277778
CONST	ENDS
;	COMDAT __real@bf860a92
CONST	SEGMENT
__real@bf860a92 DD 0bf860a92r			; -1.0472
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf47ae14
CONST	SEGMENT
__real@bf47ae14 DD 0bf47ae14r			; -0.78
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf39999a
CONST	SEGMENT
__real@bf39999a DD 0bf39999ar			; -0.725
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf133333
CONST	SEGMENT
__real@bf133333 DD 0bf133333r			; -0.575
CONST	ENDS
;	COMDAT __real@bf0ccccd
CONST	SEGMENT
__real@bf0ccccd DD 0bf0ccccdr			; -0.55
CONST	ENDS
;	COMDAT __real@bf066666
CONST	SEGMENT
__real@bf066666 DD 0bf066666r			; -0.525
CONST	ENDS
;	COMDAT __real@bf060a92
CONST	SEGMENT
__real@bf060a92 DD 0bf060a92r			; -0.523599
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bef33333
CONST	SEGMENT
__real@bef33333 DD 0bef33333r			; -0.475
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@bec7ae14
CONST	SEGMENT
__real@bec7ae14 DD 0bec7ae14r			; -0.39
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@beb2b8c2
CONST	SEGMENT
__real@beb2b8c2 DD 0beb2b8c2r			; -0.349066
CONST	ENDS
;	COMDAT __real@be9b22d1
CONST	SEGMENT
__real@be9b22d1 DD 0be9b22d1r			; -0.303
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be666666
CONST	SEGMENT
__real@be666666 DD 0be666666r			; -0.225
CONST	ENDS
;	COMDAT __real@be6147ae
CONST	SEGMENT
__real@be6147ae DD 0be6147aer			; -0.22
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be333333
CONST	SEGMENT
__real@be333333 DD 0be333333r			; -0.175
CONST	ENDS
;	COMDAT __real@be32b8c2
CONST	SEGMENT
__real@be32b8c2 DD 0be32b8c2r			; -0.174533
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bdb2b8c2
CONST	SEGMENT
__real@bdb2b8c2 DD 0bdb2b8c2r			; -0.0872665
CONST	ENDS
;	COMDAT __real@bda3d70a
CONST	SEGMENT
__real@bda3d70a DD 0bda3d70ar			; -0.08
CONST	ENDS
;	COMDAT __real@bd8f5c29
CONST	SEGMENT
__real@bd8f5c29 DD 0bd8f5c29r			; -0.07
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd23d70a
CONST	SEGMENT
__real@bd23d70a DD 0bd23d70ar			; -0.04
CONST	ENDS
;	COMDAT __real@bc03126f
CONST	SEGMENT
__real@bc03126f DD 0bc03126fr			; -0.008
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fffbe
CONST	SEGMENT
__real@437fffbe DD 0437fffber			; 255.999
CONST	ENDS
;	COMDAT __real@43020000
CONST	SEGMENT
__real@43020000 DD 043020000r			; 130
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@410e848000000000
CONST	SEGMENT
__real@410e848000000000 DQ 0410e848000000000r	; 250000
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40b1c71c
CONST	SEGMENT
__real@40b1c71c DD 040b1c71cr			; 5.55556
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4094000000000000
CONST	SEGMENT
__real@4094000000000000 DQ 04094000000000000r	; 1280
CONST	ENDS
;	COMDAT __real@408e000000000000
CONST	SEGMENT
__real@408e000000000000 DQ 0408e000000000000r	; 960
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@407ca5dc1e1ce25c
CONST	SEGMENT
__real@407ca5dc1e1ce25c DQ 0407ca5dc1e1ce25cr	; 458.366
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@405fffef9db22d0e
CONST	SEGMENT
__real@405fffef9db22d0e DQ 0405fffef9db22d0er	; 127.999
CONST	ENDS
;	COMDAT __real@4058f9999999999a
CONST	SEGMENT
__real@4058f9999999999a DQ 04058f9999999999ar	; 99.9
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402d333333333333
CONST	SEGMENT
__real@402d333333333333 DQ 0402d333333333333r	; 14.6
CONST	ENDS
;	COMDAT __real@402bc71c71c71c72
CONST	SEGMENT
__real@402bc71c71c71c72 DQ 0402bc71c71c71c72r	; 13.8889
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3fea3d70a3d70a3d
CONST	SEGMENT
__real@3fea3d70a3d70a3d DQ 03fea3d70a3d70a3dr	; 0.82
CONST	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe1eb851eb851ec
CONST	SEGMENT
__real@3fe1eb851eb851ec DQ 03fe1eb851eb851ecr	; 0.56
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdbecde5a000000
CONST	SEGMENT
__real@3fdbecde5a000000 DQ 03fdbecde5a000000r	; 0.436332
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT __real@3fd6666666666666
CONST	SEGMENT
__real@3fd6666666666666 DQ 03fd6666666666666r	; 0.35
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd1111111111111
CONST	SEGMENT
__real@3fd1111111111111 DQ 03fd1111111111111r	; 0.266667
CONST	ENDS
;	COMDAT __real@3fd0a3d70a3d70a4
CONST	SEGMENT
__real@3fd0a3d70a3d70a4 DQ 03fd0a3d70a3d70a4r	; 0.26
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc11cc249f74fea
CONST	SEGMENT
__real@3fc11cc249f74fea DQ 03fc11cc249f74fear	; 0.13369
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb70a3d70a3d70a
CONST	SEGMENT
__real@3fb70a3d70a3d70a DQ 03fb70a3d70a3d70ar	; 0.09
CONST	ENDS
;	COMDAT __real@3fb6571848000000
CONST	SEGMENT
__real@3fb6571848000000 DQ 03fb6571848000000r	; 0.0872665
CONST	ENDS
;	COMDAT __real@3fb53f7ced916873
CONST	SEGMENT
__real@3fb53f7ced916873 DQ 03fb53f7ced916873r	; 0.083
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3f9c71c71c71c71c
CONST	SEGMENT
__real@3f9c71c71c71c71c DQ 03f9c71c71c71c71cr	; 0.0277778
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f90624dd2f1a9fc
CONST	SEGMENT
__real@3f90624dd2f1a9fc DQ 03f90624dd2f1a9fcr	; 0.016
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f80624dd2f1a9fc
CONST	SEGMENT
__real@3f80624dd2f1a9fc DQ 03f80624dd2f1a9fcr	; 0.008
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f56f0068db8bac7
CONST	SEGMENT
__real@3f56f0068db8bac7 DQ 03f56f0068db8bac7r	; 0.0014
CONST	ENDS
;	COMDAT __real@3f533333
CONST	SEGMENT
__real@3f533333 DD 03f533333r			; 0.825
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f39999a
CONST	SEGMENT
__real@3f39999a DD 03f39999ar			; 0.725
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f28f5c3
CONST	SEGMENT
__real@3f28f5c3 DD 03f28f5c3r			; 0.66
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f0a3d71
CONST	SEGMENT
__real@3f0a3d71 DD 03f0a3d71r			; 0.54
CONST	ENDS
;	COMDAT __real@3f066666
CONST	SEGMENT
__real@3f066666 DD 03f066666r			; 0.525
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3ef33333
CONST	SEGMENT
__real@3ef33333 DD 03ef33333r			; 0.475
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec7ae14
CONST	SEGMENT
__real@3ec7ae14 DD 03ec7ae14r			; 0.39
CONST	ENDS
;	COMDAT __real@3ec28f5c
CONST	SEGMENT
__real@3ec28f5c DD 03ec28f5cr			; 0.38
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3ea3d70a
CONST	SEGMENT
__real@3ea3d70a DD 03ea3d70ar			; 0.32
CONST	ENDS
;	COMDAT __real@3e9b22d1
CONST	SEGMENT
__real@3e9b22d1 DD 03e9b22d1r			; 0.303
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e860a92
CONST	SEGMENT
__real@3e860a92 DD 03e860a92r			; 0.261799
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e75c28f
CONST	SEGMENT
__real@3e75c28f DD 03e75c28fr			; 0.24
CONST	ENDS
;	COMDAT __real@3e666666
CONST	SEGMENT
__real@3e666666 DD 03e666666r			; 0.225
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e333333
CONST	SEGMENT
__real@3e333333 DD 03e333333r			; 0.175
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3df5c28f
CONST	SEGMENT
__real@3df5c28f DD 03df5c28fr			; 0.12
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d45f7fb
CONST	SEGMENT
__real@3d45f7fb DD 03d45f7fbr			; 0.0483322
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d1374bc
CONST	SEGMENT
__real@3d1374bc DD 03d1374bcr			; 0.036
CONST	ENDS
;	COMDAT __real@3c03126f
CONST	SEGMENT
__real@3c03126f DD 03c03126fr			; 0.008
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@ DB 'Invalid '
	DB	'weapon lock type = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPIFAJG@LOCK@
CONST	SEGMENT
??_C@_04GPIFAJG@LOCK@ DB 'LOCK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EPBNJCNI@MAX?5RNG@
CONST	SEGMENT
??_C@_07EPBNJCNI@MAX?5RNG@ DB 'MAX RNG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJHNDNDJ@MIN?5RNG@
CONST	SEGMENT
??_C@_07KJHNDNDJ@MIN?5RNG@ DB 'MIN RNG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLNCBKEB@NO?5SGT@
CONST	SEGMENT
??_C@_06DLNCBKEB@NO?5SGT@ DB 'NO SGT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPKJKPH@NO?5LOS@
CONST	SEGMENT
??_C@_06HCPKJKPH@NO?5LOS@ DB 'NO LOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PAKIBCIO@SKR?5LMT@
CONST	SEGMENT
??_C@_07PAKIBCIO@SKR?5LMT@ DB 'SKR LMT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMEAKIHK@INV?5TGT@
CONST	SEGMENT
??_C@_07EMEAKIHK@INV?5TGT@ DB 'INV TGT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGAFCCPI@NO?5TGT@
CONST	SEGMENT
??_C@_06KGAFCCPI@NO?5TGT@ DB 'NO TGT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNPEMCDI@NO?5WPN@
CONST	SEGMENT
??_C@_06BNPEMCDI@NO?5WPN@ DB 'NO WPN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L@
CONST	SEGMENT
??_C@_01OCOKONAJ@L@ DB 'L', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05JEFOLKLE@?$CF2?41f@
CONST	SEGMENT
??_C@_05JEFOLKLE@?$CF2?41f@ DB '%2.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_target_information@@YGXXZ@4JA DD 09e0H ; `display_target_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08DPCFDJDH@RKT?5?$CF03d@
CONST	SEGMENT
??_C@_08DPCFDJDH@RKT?5?$CF03d@ DB 'RKT %03d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HDONNOJA@GUN?5?$CF03d@
CONST	SEGMENT
??_C@_08HDONNOJA@GUN?5?$CF03d@ DB 'GUN %03d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DLNHLNFK@ATA?5?$CF02d@
CONST	SEGMENT
??_C@_08DLNHLNFK@ATA?5?$CF02d@ DB 'ATA %02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGPBCGJH@MSL?5?$CF02d@
CONST	SEGMENT
??_C@_08LGPBCGJH@MSL?5?$CF02d@ DB 'MSL %02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHKMCLEN@?$CF02?40f@
CONST	SEGMENT
??_C@_06HHKMCLEN@?$CF02?40f@ DB '%02.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFCFKDNL@AP?5?$CF03d@
CONST	SEGMENT
??_C@_07IFCFKDNL@AP?5?$CF03d@ DB 'AP %03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KPIMALJJ@HE?5?$CF03d@
CONST	SEGMENT
??_C@_07KPIMALJJ@HE?5?$CF03d@ DB 'HE %03d', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA DD 098aH ; `display_weapon_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA DD 0922H	; `draw_target_marker'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA DD 060fH ; `draw_bob_up_overlay'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA DD 05cfH ; `display_waypoint_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GLDGAFOI@?$CFc?3?$CF?41f@
CONST	SEGMENT
??_C@_07GLDGAFOI@?$CFc?3?$CF?41f@ DB '%c:%.1f', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA DD 0534H ; `display_flight_path_marker_and_waypoint_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
CONST	SEGMENT
??_C@_04FCMNJMCO@?$CFd?$CF?$CF@ DB '%d%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HGAMOOFE@?910@
CONST	SEGMENT
??_C@_03HGAMOOFE@?910@ DB '-10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKFBJPLJ@10@
CONST	SEGMENT
??_C@_02PKFBJPLJ@10@ DB '10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJNFELNH@30@
CONST	SEGMENT
??_C@_02PJNFELNH@30@ DB '30', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1@
CONST	SEGMENT
??_C@_01HIHLOKLC@1@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3@
CONST	SEGMENT
??_C@_01EKENIIDA@3@ DB '3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R@
CONST	SEGMENT
??_C@_01DGKLNCNG@R@ DB 'R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNFIDHGF@50@
CONST	SEGMENT
??_C@_02PNFIDHGF@50@ DB '50', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPCJOALC@?$CF2d@
CONST	SEGMENT
??_C@_03GPCJOALC@?$CF2d@ DB '%2d', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_scale@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_scale@@YGXXZ@4JA DD 0343H	; `draw_pitch_scale'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OCGDPLBD@500@
CONST	SEGMENT
??_C@_03OCGDPLBD@500@ DB '500', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_datum@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_datum@@YGXXZ@4JA DD 02b1H ; `draw_aircraft_datum'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_indicator@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_indicator@@YGXXZ@4JA DD 025eH ; `draw_pitch_indicator'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02KPIPOMFB@36@
CONST	SEGMENT
??_C@_02KPIPOMFB@36@ DB '36', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA DD 01a0H	; `draw_heading_scale'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CBDEGOCN@j@
CONST	SEGMENT
??_C@_01CBDEGOCN@j@ DB 'j', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z@4JA DD 016cH ; `transform_hud_screen_co_ords_to_hud_texture_co_ords'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01EANLCPLP@y@
CONST	SEGMENT
??_C@_01EANLCPLP@y@ DB 'y', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01FJMABOPO@x@
CONST	SEGMENT
??_C@_01FJMABOPO@x@ DB 'x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_h'
	DB	'ud.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA DD 0143H ; `clip_2d_point_to_hud_extent'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?large_hud_command_heading_carat@@3PADA DB 0bH		; large_hud_command_heading_carat
	DB	06H
	DB	0fbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+2
?large_hud_heading_carat@@3PADA DB 0bH			; large_hud_heading_carat
	DB	06H
	DB	0fbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+2
?large_right_carat@@3PADA DB 05H			; large_right_carat
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_left_carat@@3PADA DB 05H				; large_left_carat
	DB	09H
	DB	00H
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?small_right_carat@@3PADA DB 03H			; small_right_carat
	DB	05H
	DB	0feH
	DB	0feH
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
?small_left_carat@@3PADA DB 03H				; small_left_carat
	DB	05H
	DB	00H
	DB	0feH
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
?small_hud_heading_carat@@3PADA DB 05H			; small_hud_heading_carat
	DB	03H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_hud_command_heading_carat@@3PADA DB 05H		; small_hud_command_heading_carat
	DB	03H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
?large_hud_rate_of_climb_scale_pointer@@3PADA DB 0fH	; large_hud_rate_of_climb_scale_pointer
	DB	09H
	DB	00H
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
?small_hud_rate_of_climb_scale_pointer@@3PADA DB 08H	; small_hud_rate_of_climb_scale_pointer
	DB	05H
	DB	00H
	DB	0feH
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_target_marker@@YGXXZ
_TEXT	SEGMENT
tv192 = -144						; size = 4
tv156 = -144						; size = 4
tv132 = -144						; size = 4
tv78 = -144						; size = 4
tv184 = -140						; size = 4
tv148 = -140						; size = 4
tv92 = -140						; size = 4
tv70 = -140						; size = 4
_tracking_point$1 = -72					; size = 4
_intercept_point$ = -68					; size = 12
_target_position$ = -56					; size = 12
_source_position$ = -44					; size = 4
_target$ = -40						; size = 4
_source$ = -36						; size = 4
_target_range$ = -32					; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_visibility$ = -12					; size = 4
_selected_weapon_type$ = -8				; size = 4
_airborne_target$ = -4					; size = 4
?draw_target_marker@@YGXXZ PROC				; draw_target_marker, COMDAT

; 2338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2339 : 	int
; 2340 : 		airborne_target = FALSE;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _airborne_target$[ebp], 0

; 2341 : 
; 2342 : 	entity_sub_types
; 2343 : 		selected_weapon_type;
; 2344 : 
; 2345 : 	object_3d_visibility
; 2346 : 		visibility;
; 2347 : 
; 2348 : 	float
; 2349 : 		i,
; 2350 : 		j,
; 2351 : 		x,
; 2352 : 		y,
; 2353 : 		target_range;
; 2354 : 
; 2355 : 	entity
; 2356 : 		*source,
; 2357 : 		*target;
; 2358 : 
; 2359 : 	vec3d
; 2360 : 		*source_position,
; 2361 : 		target_position,
; 2362 : 		intercept_point;
; 2363 : 
; 2364 : 	source = get_gunship_entity ();

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00018	89 45 dc	 mov	 DWORD PTR _source$[ebp], eax

; 2365 : 
; 2366 : 	selected_weapon_type = get_local_entity_int_value (source, INT_TYPE_SELECTED_WEAPON);

  0001b	83 7d dc 00	 cmp	 DWORD PTR _source$[ebp], 0
  0001f	74 0d		 je	 SHORT $LN15@draw_targe
  00021	8b 45 dc	 mov	 eax, DWORD PTR _source$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0002c	eb 24		 jmp	 SHORT $LN16@draw_targe
$LN15@draw_targe:
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  00034	83 c2 1c	 add	 edx, 28			; 0000001cH
  00037	52		 push	 edx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00048	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN16@draw_targe:
  00052	b9 01 00 00 00	 mov	 ecx, 1
  00057	85 c9		 test	 ecx, ecx
  00059	74 0c		 je	 SHORT $LN17@draw_targe
  0005b	c7 85 70 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  00065	eb 24		 jmp	 SHORT $LN18@draw_targe
$LN17@draw_targe:
  00067	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  0006d	83 c2 1c	 add	 edx, 28			; 0000001cH
  00070	52		 push	 edx
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00081	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN18@draw_targe:
  0008b	68 b8 00 00 00	 push	 184			; 000000b8H
  00090	8b 4d dc	 mov	 ecx, DWORD PTR _source$[ebp]
  00093	51		 push	 ecx
  00094	69 95 74 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  0009e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000a4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000ab	ff d1		 call	 ecx
  000ad	89 45 f8	 mov	 DWORD PTR _selected_weapon_type$[ebp], eax

; 2367 : 
; 2368 : 	if (selected_weapon_type != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  000b0	83 7d f8 00	 cmp	 DWORD PTR _selected_weapon_type$[ebp], 0
  000b4	0f 84 0d 04 00
	00		 je	 $LN12@draw_targe

; 2369 : 	{
; 2370 : 		vec3d* tracking_point = get_eo_tracking_point();

  000ba	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  000bf	89 45 b8	 mov	 DWORD PTR _tracking_point$1[ebp], eax

; 2371 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000c2	83 7d dc 00	 cmp	 DWORD PTR _source$[ebp], 0
  000c6	74 0d		 je	 SHORT $LN19@draw_targe
  000c8	8b 45 dc	 mov	 eax, DWORD PTR _source$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], ecx
  000d3	eb 24		 jmp	 SHORT $LN20@draw_targe
$LN19@draw_targe:
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  000db	83 c2 21	 add	 edx, 33			; 00000021H
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ef	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$LN20@draw_targe:
  000f9	b9 01 00 00 00	 mov	 ecx, 1
  000fe	85 c9		 test	 ecx, ecx
  00100	74 0c		 je	 SHORT $LN21@draw_targe
  00102	c7 85 70 ff ff
	ff 26 00 00 00	 mov	 DWORD PTR tv132[ebp], 38 ; 00000026H
  0010c	eb 24		 jmp	 SHORT $LN22@draw_targe
$LN21@draw_targe:
  0010e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  00114	83 c2 21	 add	 edx, 33			; 00000021H
  00117	52		 push	 edx
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00128	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN22@draw_targe:
  00132	6a 26		 push	 38			; 00000026H
  00134	8b 4d dc	 mov	 ecx, DWORD PTR _source$[ebp]
  00137	51		 push	 ecx
  00138	69 95 74 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv92[ebp], 180
  00142	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv132[ebp]
  00148	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0014f	ff d1		 call	 ecx
  00151	89 45 d8	 mov	 DWORD PTR _target$[ebp], eax

; 2372 : 
; 2373 : 		if (target || tracking_point)

  00154	83 7d d8 00	 cmp	 DWORD PTR _target$[ebp], 0
  00158	75 0a		 jne	 SHORT $LN4@draw_targe
  0015a	83 7d b8 00	 cmp	 DWORD PTR _tracking_point$1[ebp], 0
  0015e	0f 84 63 03 00
	00		 je	 $LN12@draw_targe
$LN4@draw_targe:

; 2374 : 		{
; 2375 : 			if (tracking_point)

  00164	83 7d b8 00	 cmp	 DWORD PTR _tracking_point$1[ebp], 0
  00168	74 19		 je	 SHORT $LN5@draw_targe

; 2376 : 				target_position = *tracking_point;

  0016a	8b 45 b8	 mov	 eax, DWORD PTR _tracking_point$1[ebp]
  0016d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016f	89 4d c8	 mov	 DWORD PTR _target_position$[ebp], ecx
  00172	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00175	89 55 cc	 mov	 DWORD PTR _target_position$[ebp+4], edx
  00178	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0017b	89 45 d0	 mov	 DWORD PTR _target_position$[ebp+8], eax

; 2377 : 			else

  0017e	e9 9f 00 00 00	 jmp	 $LN6@draw_targe
$LN5@draw_targe:

; 2378 : 			{
; 2379 : 				airborne_target = get_local_entity_int_value (target, INT_TYPE_AIRBORNE_AIRCRAFT);

  00183	83 7d d8 00	 cmp	 DWORD PTR _target$[ebp], 0
  00187	74 0d		 je	 SHORT $LN23@draw_targe
  00189	8b 45 d8	 mov	 eax, DWORD PTR _target$[ebp]
  0018c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018e	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00194	eb 24		 jmp	 SHORT $LN24@draw_targe
$LN23@draw_targe:
  00196	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  0019c	83 c2 29	 add	 edx, 41			; 00000029H
  0019f	52		 push	 edx
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b0	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN24@draw_targe:
  001ba	b9 01 00 00 00	 mov	 ecx, 1
  001bf	85 c9		 test	 ecx, ecx
  001c1	74 0c		 je	 SHORT $LN25@draw_targe
  001c3	c7 85 70 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv156[ebp], 4
  001cd	eb 24		 jmp	 SHORT $LN26@draw_targe
$LN25@draw_targe:
  001cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  001d5	83 c2 29	 add	 edx, 41			; 00000029H
  001d8	52		 push	 edx
  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e9	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN26@draw_targe:
  001f3	6a 04		 push	 4
  001f5	8b 4d d8	 mov	 ecx, DWORD PTR _target$[ebp]
  001f8	51		 push	 ecx
  001f9	69 95 74 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv148[ebp], 1116
  00203	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  00209	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00210	ff d1		 call	 ecx
  00212	89 45 fc	 mov	 DWORD PTR _airborne_target$[ebp], eax

; 2380 : 				get_local_entity_target_point (target, &target_position);

  00215	8d 45 c8	 lea	 eax, DWORD PTR _target_position$[ebp]
  00218	50		 push	 eax
  00219	8b 4d d8	 mov	 ecx, DWORD PTR _target$[ebp]
  0021c	51		 push	 ecx
  0021d	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point
$LN6@draw_targe:

; 2381 : 			}
; 2382 : 
; 2383 : 			visibility = get_position_3d_screen_coordinates (&target_position, &i, &j);

  00222	8d 45 ec	 lea	 eax, DWORD PTR _j$[ebp]
  00225	50		 push	 eax
  00226	8d 4d f0	 lea	 ecx, DWORD PTR _i$[ebp]
  00229	51		 push	 ecx
  0022a	8d 55 c8	 lea	 edx, DWORD PTR _target_position$[ebp]
  0022d	52		 push	 edx
  0022e	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  00233	89 45 f4	 mov	 DWORD PTR _visibility$[ebp], eax

; 2384 : 
; 2385 : 			if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  00236	83 7d f4 01	 cmp	 DWORD PTR _visibility$[ebp], 1
  0023a	74 0a		 je	 SHORT $LN8@draw_targe
  0023c	83 7d f4 02	 cmp	 DWORD PTR _visibility$[ebp], 2
  00240	0f 85 63 01 00
	00		 jne	 $LN10@draw_targe
$LN8@draw_targe:

; 2386 : 			{
; 2387 : 				transform_hud_screen_co_ords_to_hud_texture_co_ords (&i, &j);

  00246	8d 45 ec	 lea	 eax, DWORD PTR _j$[ebp]
  00249	50		 push	 eax
  0024a	8d 4d f0	 lea	 ecx, DWORD PTR _i$[ebp]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 ?transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z ; transform_hud_screen_co_ords_to_hud_texture_co_ords

; 2388 : 
; 2389 : 				get_2d_world_position (i, j, &x, &y);

  00253	8d 45 e4	 lea	 eax, DWORD PTR _y$[ebp]
  00256	50		 push	 eax
  00257	8d 4d e8	 lea	 ecx, DWORD PTR _x$[ebp]
  0025a	51		 push	 ecx
  0025b	51		 push	 ecx
  0025c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  00261	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00266	51		 push	 ecx
  00267	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  0026c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00271	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 2390 : 
; 2391 : 				clip_2d_point_to_hud_extent (&x, &y);

  00276	8d 45 e4	 lea	 eax, DWORD PTR _y$[ebp]
  00279	50		 push	 eax
  0027a	8d 4d e8	 lea	 ecx, DWORD PTR _x$[ebp]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 ?clip_2d_point_to_hud_extent@@YGXPAM0@Z ; clip_2d_point_to_hud_extent

; 2392 : 
; 2393 : 				source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00283	83 7d dc 00	 cmp	 DWORD PTR _source$[ebp], 0
  00287	74 0d		 je	 SHORT $LN27@draw_targe
  00289	8b 45 dc	 mov	 eax, DWORD PTR _source$[ebp]
  0028c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028e	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv184[ebp], ecx
  00294	eb 24		 jmp	 SHORT $LN28@draw_targe
$LN27@draw_targe:
  00296	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  0029c	83 c2 37	 add	 edx, 55			; 00000037H
  0029f	52		 push	 edx
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b0	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv184[ebp], 0
$LN28@draw_targe:
  002ba	b9 01 00 00 00	 mov	 ecx, 1
  002bf	85 c9		 test	 ecx, ecx
  002c1	74 0c		 je	 SHORT $LN29@draw_targe
  002c3	c7 85 70 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv192[ebp], 8
  002cd	eb 24		 jmp	 SHORT $LN30@draw_targe
$LN29@draw_targe:
  002cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_target_marker@@YGXXZ@4JA
  002d5	83 c2 37	 add	 edx, 55			; 00000037H
  002d8	52		 push	 edx
  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e9	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
$LN30@draw_targe:
  002f3	6a 08		 push	 8
  002f5	8b 4d dc	 mov	 ecx, DWORD PTR _source$[ebp]
  002f8	51		 push	 ecx
  002f9	6b 95 74 ff ff
	ff 60		 imul	 edx, DWORD PTR tv184[ebp], 96
  00300	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv192[ebp]
  00306	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0030d	ff d1		 call	 ecx
  0030f	89 45 d4	 mov	 DWORD PTR _source_position$[ebp], eax

; 2394 : 				target_range = get_3d_range (source_position, &target_position);

  00312	8d 45 c8	 lea	 eax, DWORD PTR _target_position$[ebp]
  00315	50		 push	 eax
  00316	8b 4d d4	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00319	51		 push	 ecx
  0031a	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  0031f	d9 5d e0	 fstp	 DWORD PTR _target_range$[ebp]

; 2395 : 
; 2396 : 				draw_gun_pipper (x, y, target_range, weapon_database[selected_weapon_type].min_range, weapon_database[selected_weapon_type].max_range);

  00322	69 45 f8 e0 00
	00 00		 imul	 eax, DWORD PTR _selected_weapon_type$[ebp], 224
  00329	51		 push	 ecx
  0032a	f3 0f 10 80 90
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+144]
  00332	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00337	69 4d f8 e0 00
	00 00		 imul	 ecx, DWORD PTR _selected_weapon_type$[ebp], 224
  0033e	51		 push	 ecx
  0033f	f3 0f 10 81 8c
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+140]
  00347	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034c	51		 push	 ecx
  0034d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00357	51		 push	 ecx
  00358	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y$[ebp]
  0035d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00362	51		 push	 ecx
  00363	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	e8 00 00 00 00	 call	 ?draw_gun_pipper@@YGXMMMMM@Z ; draw_gun_pipper

; 2397 : 
; 2398 : 				//
; 2399 : 				// if unguided weapon then draw a dot in the target marker centre (except for airborne targets)
; 2400 : 				//
; 2401 : 
; 2402 : 				if (!airborne_target)

  00372	83 7d fc 00	 cmp	 DWORD PTR _airborne_target$[ebp], 0
  00376	75 31		 jne	 SHORT $LN10@draw_targe

; 2403 : 				{
; 2404 : 					if (weapon_database[selected_weapon_type].guidance_type == WEAPON_GUIDANCE_TYPE_NONE)

  00378	69 45 f8 e0 00
	00 00		 imul	 eax, DWORD PTR _selected_weapon_type$[ebp], 224
  0037f	83 b8 18 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+24], 0
  00386	75 21		 jne	 SHORT $LN10@draw_targe

; 2405 : 					{
; 2406 : 						set_2d_pixel (x, y, hud_colour);

  00388	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0038d	50		 push	 eax
  0038e	51		 push	 ecx
  0038f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00394	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00399	51		 push	 ecx
  0039a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0039f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a4	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel
$LN10@draw_targe:

; 2407 : 					}
; 2408 : 				}
; 2409 : 			}
; 2410 : 
; 2411 : 			//
; 2412 : 			// if airborne target then draw the intercept point
; 2413 : 			//
; 2414 : 
; 2415 : 			if (airborne_target)

  003a9	83 7d fc 00	 cmp	 DWORD PTR _airborne_target$[ebp], 0
  003ad	0f 84 14 01 00
	00		 je	 $LN12@draw_targe

; 2416 : 			{
; 2417 : 				get_target_intercept_point (source, target, selected_weapon_type, &intercept_point);

  003b3	8d 45 bc	 lea	 eax, DWORD PTR _intercept_point$[ebp]
  003b6	50		 push	 eax
  003b7	8b 4d f8	 mov	 ecx, DWORD PTR _selected_weapon_type$[ebp]
  003ba	51		 push	 ecx
  003bb	8b 55 d8	 mov	 edx, DWORD PTR _target$[ebp]
  003be	52		 push	 edx
  003bf	8b 45 dc	 mov	 eax, DWORD PTR _source$[ebp]
  003c2	50		 push	 eax
  003c3	e8 00 00 00 00	 call	 ?get_target_intercept_point@@YGXPAUENTITY@@0HPAUVEC3D@@@Z ; get_target_intercept_point

; 2418 : 
; 2419 : 				visibility = get_position_3d_screen_coordinates (&intercept_point, &i, &j);

  003c8	8d 45 ec	 lea	 eax, DWORD PTR _j$[ebp]
  003cb	50		 push	 eax
  003cc	8d 4d f0	 lea	 ecx, DWORD PTR _i$[ebp]
  003cf	51		 push	 ecx
  003d0	8d 55 bc	 lea	 edx, DWORD PTR _intercept_point$[ebp]
  003d3	52		 push	 edx
  003d4	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  003d9	89 45 f4	 mov	 DWORD PTR _visibility$[ebp], eax

; 2420 : 
; 2421 : 				if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  003dc	83 7d f4 01	 cmp	 DWORD PTR _visibility$[ebp], 1
  003e0	74 0a		 je	 SHORT $LN13@draw_targe
  003e2	83 7d f4 02	 cmp	 DWORD PTR _visibility$[ebp], 2
  003e6	0f 85 db 00 00
	00		 jne	 $LN12@draw_targe
$LN13@draw_targe:

; 2422 : 				{
; 2423 : 					transform_hud_screen_co_ords_to_hud_texture_co_ords (&i, &j);

  003ec	8d 45 ec	 lea	 eax, DWORD PTR _j$[ebp]
  003ef	50		 push	 eax
  003f0	8d 4d f0	 lea	 ecx, DWORD PTR _i$[ebp]
  003f3	51		 push	 ecx
  003f4	e8 00 00 00 00	 call	 ?transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z ; transform_hud_screen_co_ords_to_hud_texture_co_ords

; 2424 : 
; 2425 : 					get_2d_world_position (i, j, &x, &y);

  003f9	8d 45 e4	 lea	 eax, DWORD PTR _y$[ebp]
  003fc	50		 push	 eax
  003fd	8d 4d e8	 lea	 ecx, DWORD PTR _x$[ebp]
  00400	51		 push	 ecx
  00401	51		 push	 ecx
  00402	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	51		 push	 ecx
  0040d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 2426 : 
; 2427 : 					clip_2d_point_to_hud_extent (&x, &y);

  0041c	8d 45 e4	 lea	 eax, DWORD PTR _y$[ebp]
  0041f	50		 push	 eax
  00420	8d 4d e8	 lea	 ecx, DWORD PTR _x$[ebp]
  00423	51		 push	 ecx
  00424	e8 00 00 00 00	 call	 ?clip_2d_point_to_hud_extent@@YGXPAM0@Z ; clip_2d_point_to_hud_extent

; 2428 : 
; 2429 : 					draw_2d_line (x - 0.05, y, x + 0.05, y, hud_colour);

  00429	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0042e	50		 push	 eax
  0042f	51		 push	 ecx
  00430	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043a	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0043f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00447	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0044b	51		 push	 ecx
  0044c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00451	51		 push	 ecx
  00452	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045c	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00461	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00469	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0046d	51		 push	 ecx
  0046e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00473	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2430 : 					draw_2d_line (x, y - 0.05, x, y + 0.05, hud_colour);

  00478	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0047d	50		 push	 eax
  0047e	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00483	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0048b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0048f	51		 push	 ecx
  00490	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00495	51		 push	 ecx
  00496	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0049b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a0	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  004a5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  004ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b1	51		 push	 ecx
  004b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b7	51		 push	 ecx
  004b8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN12@draw_targe:

; 2431 : 				}
; 2432 : 			}
; 2433 : 		}
; 2434 : 	}
; 2435 : }

  004c7	5f		 pop	 edi
  004c8	5e		 pop	 esi
  004c9	5b		 pop	 ebx
  004ca	8b e5		 mov	 esp, ebp
  004cc	5d		 pop	 ebp
  004cd	c3		 ret	 0
?draw_target_marker@@YGXXZ ENDP				; draw_target_marker
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_gun_pipper@@YGXMMMMM@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
tv75 = -88						; size = 4
_i_max$ = -20						; size = 4
_i$ = -16						; size = 4
_max_range$ = -12					; size = 4
_theta$ = -8						; size = 4
_normalised_range$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_range$ = 16						; size = 4
_weapon_min_range$ = 20					; size = 4
_weapon_max_range$ = 24					; size = 4
?draw_gun_pipper@@YGXMMMMM@Z PROC			; draw_gun_pipper, COMDAT

; 2287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2288 : 	float
; 2289 : 		normalised_range,
; 2290 : 		theta,
; 2291 : 		max_range;
; 2292 : 
; 2293 : 	int
; 2294 : 		i,
; 2295 : 		i_max;
; 2296 : 
; 2297 : 	if (weapon_max_range > 5000)

  00009	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _weapon_max_range$[ebp]
  0000e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@459c4000
  00015	76 0f		 jbe	 SHORT $LN5@draw_gun_p

; 2298 : 		max_range = 10000;

  00017	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0001f	f3 0f 11 45 f4	 movss	 DWORD PTR _max_range$[ebp], xmm0
  00024	eb 2a		 jmp	 SHORT $LN8@draw_gun_p
$LN5@draw_gun_p:

; 2299 : 	else if (weapon_max_range > 2500)

  00026	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _weapon_max_range$[ebp]
  0002b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@451c4000
  00032	76 0f		 jbe	 SHORT $LN7@draw_gun_p

; 2300 : 		max_range = 5000;

  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0003c	f3 0f 11 45 f4	 movss	 DWORD PTR _max_range$[ebp], xmm0

; 2301 : 	else

  00041	eb 0d		 jmp	 SHORT $LN8@draw_gun_p
$LN7@draw_gun_p:

; 2302 : 		max_range = 2500;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@451c4000
  0004b	f3 0f 11 45 f4	 movss	 DWORD PTR _max_range$[ebp], xmm0
$LN8@draw_gun_p:

; 2303 : 
; 2304 : 	normalised_range = range / max_range;

  00050	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  00055	f3 0f 5e 45 f4	 divss	 xmm0, DWORD PTR _max_range$[ebp]
  0005a	f3 0f 11 45 fc	 movss	 DWORD PTR _normalised_range$[ebp], xmm0

; 2305 : 
; 2306 : 	if (get_range_finder() != RANGEFINDER_TRIANGULATION)

  0005f	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  00064	83 f8 02	 cmp	 eax, 2
  00067	0f 84 ac 00 00
	00		 je	 $LN3@draw_gun_p

; 2307 : 	{
; 2308 : 		i_max = (int) (normalised_range * NUM_GUN_PIPPER_POINTS);

  0006d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _normalised_range$[ebp]
  00072	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43020000
  0007a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0007e	89 45 ec	 mov	 DWORD PTR _i_max$[ebp], eax

; 2309 : 	
; 2310 : 		i_max = bound (i_max, 0, NUM_GUN_PIPPER_POINTS - 1);

  00081	83 7d ec 00	 cmp	 DWORD PTR _i_max$[ebp], 0
  00085	7d 09		 jge	 SHORT $LN13@draw_gun_p
  00087	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
  0008e	eb 1e		 jmp	 SHORT $LN14@draw_gun_p
$LN13@draw_gun_p:
  00090	81 7d ec 81 00
	00 00		 cmp	 DWORD PTR _i_max$[ebp], 129 ; 00000081H
  00097	7e 09		 jle	 SHORT $LN11@draw_gun_p
  00099	c7 45 a4 81 00
	00 00		 mov	 DWORD PTR tv74[ebp], 129 ; 00000081H
  000a0	eb 06		 jmp	 SHORT $LN12@draw_gun_p
$LN11@draw_gun_p:
  000a2	8b 45 ec	 mov	 eax, DWORD PTR _i_max$[ebp]
  000a5	89 45 a4	 mov	 DWORD PTR tv74[ebp], eax
$LN12@draw_gun_p:
  000a8	8b 4d a4	 mov	 ecx, DWORD PTR tv74[ebp]
  000ab	89 4d a8	 mov	 DWORD PTR tv75[ebp], ecx
$LN14@draw_gun_p:
  000ae	8b 55 a8	 mov	 edx, DWORD PTR tv75[ebp]
  000b1	89 55 ec	 mov	 DWORD PTR _i_max$[ebp], edx

; 2311 : 	
; 2312 : 		for (i = 0; i <= i_max; i++)

  000b4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000bb	eb 09		 jmp	 SHORT $LN4@draw_gun_p
$LN2@draw_gun_p:
  000bd	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000c0	83 c0 01	 add	 eax, 1
  000c3	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@draw_gun_p:
  000c6	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000c9	3b 45 ec	 cmp	 eax, DWORD PTR _i_max$[ebp]
  000cc	7f 4b		 jg	 SHORT $LN3@draw_gun_p

; 2313 : 			set_2d_pixel (x + gun_pipper_points[i][0], y + gun_pipper_points[i][1], hud_colour);

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000d3	50		 push	 eax
  000d4	b9 04 00 00 00	 mov	 ecx, 4
  000d9	c1 e1 00	 shl	 ecx, 0
  000dc	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000df	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  000e4	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points@@3PAY01MA[ecx+edx*8]
  000ed	51		 push	 ecx
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	6b c8 00	 imul	 ecx, eax, 0
  000fb	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000fe	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00103	f3 0f 58 84 d1
	00 00 00 00	 addss	 xmm0, DWORD PTR ?gun_pipper_points@@3PAY01MA[ecx+edx*8]
  0010c	51		 push	 ecx
  0010d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00112	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel
  00117	eb a4		 jmp	 SHORT $LN2@draw_gun_p
$LN3@draw_gun_p:

; 2314 : 	}
; 2315 : 
; 2316 : 	set_2d_instance_position (hud_env, x, y);

  00119	51		 push	 ecx
  0011a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	51		 push	 ecx
  00125	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 2317 : 
; 2318 : 	draw_2d_line (0.0, 0.15, 0.0, 0.12, hud_colour);

  0013a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0013f	50		 push	 eax
  00140	51		 push	 ecx
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	51		 push	 ecx
  0014f	0f 57 c0	 xorps	 xmm0, xmm0
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	51		 push	 ecx
  00166	0f 57 c0	 xorps	 xmm0, xmm0
  00169	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2319 : 
; 2320 : 	theta = weapon_max_range / max_range * -PI2;

  00173	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _weapon_max_range$[ebp]
  00178	f3 0f 5e 45 f4	 divss	 xmm0, DWORD PTR _max_range$[ebp]
  0017d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0c90fdb
  00185	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 2321 : 	set_2d_instance_rotation (hud_env, theta);

  0018a	51		 push	 ecx
  0018b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00190	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 2322 : 	draw_2d_line (0.0, 0.15, 0.0, 0.12, hud_colour);

  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001a5	50		 push	 eax
  001a6	51		 push	 ecx
  001a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  001af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b4	51		 push	 ecx
  001b5	0f 57 c0	 xorps	 xmm0, xmm0
  001b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bd	51		 push	 ecx
  001be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  001c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cb	51		 push	 ecx
  001cc	0f 57 c0	 xorps	 xmm0, xmm0
  001cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2323 : 
; 2324 : 	theta = weapon_min_range / max_range * -PI2;

  001d9	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _weapon_min_range$[ebp]
  001de	f3 0f 5e 45 f4	 divss	 xmm0, DWORD PTR _max_range$[ebp]
  001e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0c90fdb
  001eb	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 2325 : 	set_2d_instance_rotation (hud_env, theta);

  001f0	51		 push	 ecx
  001f1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  001f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 2326 : 	draw_2d_line (0.0, 0.15, 0.0, 0.12, hud_colour);

  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0020b	50		 push	 eax
  0020c	51		 push	 ecx
  0020d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	51		 push	 ecx
  0021b	0f 57 c0	 xorps	 xmm0, xmm0
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	51		 push	 ecx
  00224	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0022c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00231	51		 push	 ecx
  00232	0f 57 c0	 xorps	 xmm0, xmm0
  00235	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2327 : 
; 2328 : 	draw_2d_circle(0.0, 0.0, 0.12, hud_colour);

  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00244	50		 push	 eax
  00245	51		 push	 ecx
  00246	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  0024e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00253	51		 push	 ecx
  00254	0f 57 c0	 xorps	 xmm0, xmm0
  00257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025c	51		 push	 ecx
  0025d	0f 57 c0	 xorps	 xmm0, xmm0
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2329 : 
; 2330 : 	reset_2d_instance (hud_env);

  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 2331 : }

  00275	5f		 pop	 edi
  00276	5e		 pop	 esi
  00277	5b		 pop	 ebx
  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c2 14 00	 ret	 20			; 00000014H
?draw_gun_pipper@@YGXMMMMM@Z ENDP			; draw_gun_pipper
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_hms_centre_datum@@YGXXZ
_TEXT	SEGMENT
?draw_hms_centre_datum@@YGXXZ PROC			; draw_hms_centre_datum, COMDAT

; 2226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2227 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_HMS)

  00009	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 10 ; target_acquisition_system, 0000000aH
  00010	0f 85 50 01 00
	00		 jne	 $LN4@draw_hms_c

; 2228 : 	{
; 2229 : 		draw_2d_circle(0.0, 0.0, 0.3, hud_colour);

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00025	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002a	51		 push	 ecx
  0002b	0f 57 c0	 xorps	 xmm0, xmm0
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2230 : 		
; 2231 : 		if (weapon_lock_type != WEAPON_LOCK_NO_TARGET)

  00041	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A, 2 ; weapon_lock_type
  00048	74 2b		 je	 SHORT $LN3@draw_hms_c

; 2232 : 			draw_2d_circle(0.0, 0.0, 0.35, hud_colour);

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0004f	50		 push	 eax
  00050	51		 push	 ecx
  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005e	51		 push	 ecx
  0005f	0f 57 c0	 xorps	 xmm0, xmm0
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	51		 push	 ecx
  00068	0f 57 c0	 xorps	 xmm0, xmm0
  0006b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00070	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN3@draw_hms_c:

; 2233 : 		if (weapon_lock_type == WEAPON_LOCK_VALID)

  00075	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A, 9 ; weapon_lock_type
  0007c	0f 85 e4 00 00
	00		 jne	 $LN4@draw_hms_c

; 2234 : 		{
; 2235 : 			draw_2d_line(0.3, 0.0, 0.4, 0.0, hud_colour);	

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00087	50		 push	 eax
  00088	51		 push	 ecx
  00089	0f 57 c0	 xorps	 xmm0, xmm0
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	51		 push	 ecx
  000a0	0f 57 c0	 xorps	 xmm0, xmm0
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	51		 push	 ecx
  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2236 : 			draw_2d_line(0.0, 0.3, 0.0, 0.4, hud_colour);	

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	51		 push	 ecx
  000d0	0f 57 c0	 xorps	 xmm0, xmm0
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	51		 push	 ecx
  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	51		 push	 ecx
  000e7	0f 57 c0	 xorps	 xmm0, xmm0
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2237 : 			draw_2d_line(-0.3, 0.0, -0.4, 0.0, hud_colour);	

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000f9	50		 push	 eax
  000fa	51		 push	 ecx
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	51		 push	 ecx
  00112	0f 57 c0	 xorps	 xmm0, xmm0
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	51		 push	 ecx
  0011b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2238 : 			draw_2d_line(0.0, -0.3, 0.0, -0.4, hud_colour);	

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00132	50		 push	 eax
  00133	51		 push	 ecx
  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	51		 push	 ecx
  00142	0f 57 c0	 xorps	 xmm0, xmm0
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	51		 push	 ecx
  0014b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	51		 push	 ecx
  00159	0f 57 c0	 xorps	 xmm0, xmm0
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN4@draw_hms_c:

; 2239 : 		}
; 2240 : 	}
; 2241 : }

  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
?draw_hms_centre_datum@@YGXXZ ENDP			; draw_hms_centre_datum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_weapon_mode_hud@@YGXH@Z
_TEXT	SEGMENT
_draw_on_virtual_cockpit_texture$ = 8			; size = 4
?draw_weapon_mode_hud@@YGXH@Z PROC			; draw_weapon_mode_hud, COMDAT

; 1696 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1697 : 	if (get_view_mode () != VIEW_MODE_COCKPIT_PANEL_LEVEL_AHEAD)

  00009	83 3d 00 00 00
	00 11		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 17 ; view_mode, 00000011H
  00010	74 05		 je	 SHORT $LN2@draw_weapo

; 1698 : 	{
; 1699 : 		draw_hud_centre_datum ();

  00012	e8 00 00 00 00	 call	 ?draw_hud_centre_datum@@YGXXZ ; draw_hud_centre_datum
$LN2@draw_weapo:

; 1700 : 	}
; 1701 : 
; 1702 : 	draw_heading_scale ();

  00017	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXXZ ; draw_heading_scale

; 1703 : 
; 1704 : 	display_true_airspeed ();

  0001c	e8 00 00 00 00	 call	 ?display_true_airspeed@@YGXXZ ; display_true_airspeed

; 1705 : 
; 1706 : 	display_altitude ();

  00021	e8 00 00 00 00	 call	 ?display_altitude@@YGXXZ ; display_altitude

; 1707 : 
; 1708 : 	draw_rate_of_climb_scale ();

  00026	e8 00 00 00 00	 call	 ?draw_rate_of_climb_scale@@YGXXZ ; draw_rate_of_climb_scale

; 1709 : 
; 1710 : 	display_engine_torque ();

  0002b	e8 00 00 00 00	 call	 ?display_engine_torque@@YGXXZ ; display_engine_torque

; 1711 : 
; 1712 : 	draw_bob_up_overlay ();

  00030	e8 00 00 00 00	 call	 ?draw_bob_up_overlay@@YGXXZ ; draw_bob_up_overlay

; 1713 : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?draw_weapon_mode_hud@@YGXH@Z ENDP			; draw_weapon_mode_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_navigation_mode_hud@@YGXH@Z
_TEXT	SEGMENT
_draw_on_virtual_cockpit_texture$ = 8			; size = 4
?draw_navigation_mode_hud@@YGXH@Z PROC			; draw_navigation_mode_hud, COMDAT

; 1667 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1668 : 	draw_hud_centre_datum ();

  00009	e8 00 00 00 00	 call	 ?draw_hud_centre_datum@@YGXXZ ; draw_hud_centre_datum

; 1669 : 
; 1670 : 	draw_heading_scale ();

  0000e	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXXZ ; draw_heading_scale

; 1671 : 
; 1672 : 	draw_pitch_indicator ();

  00013	e8 00 00 00 00	 call	 ?draw_pitch_indicator@@YGXXZ ; draw_pitch_indicator

; 1673 : 
; 1674 : 	draw_bank_scale ();

  00018	e8 00 00 00 00	 call	 ?draw_bank_scale@@YGXXZ	; draw_bank_scale

; 1675 : 
; 1676 : 	draw_aircraft_datum ();

  0001d	e8 00 00 00 00	 call	 ?draw_aircraft_datum@@YGXXZ ; draw_aircraft_datum

; 1677 : 
; 1678 : 	display_true_airspeed ();

  00022	e8 00 00 00 00	 call	 ?display_true_airspeed@@YGXXZ ; display_true_airspeed

; 1679 : 
; 1680 : 	display_altitude ();

  00027	e8 00 00 00 00	 call	 ?display_altitude@@YGXXZ ; display_altitude

; 1681 : 
; 1682 : 	draw_rate_of_climb_scale ();

  0002c	e8 00 00 00 00	 call	 ?draw_rate_of_climb_scale@@YGXXZ ; draw_rate_of_climb_scale

; 1683 : 
; 1684 : 	display_engine_torque ();

  00031	e8 00 00 00 00	 call	 ?display_engine_torque@@YGXXZ ; display_engine_torque

; 1685 : 
; 1686 : 	display_flight_path_marker_and_waypoint_information (draw_on_virtual_cockpit_texture);

  00036	8b 45 08	 mov	 eax, DWORD PTR _draw_on_virtual_cockpit_texture$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?display_flight_path_marker_and_waypoint_information@@YGXH@Z ; display_flight_path_marker_and_waypoint_information

; 1687 : 
; 1688 : 	draw_bob_up_overlay ();

  0003f	e8 00 00 00 00	 call	 ?draw_bob_up_overlay@@YGXXZ ; draw_bob_up_overlay

; 1689 : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?draw_navigation_mode_hud@@YGXH@Z ENDP			; draw_navigation_mode_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_basic_hud@@YGXXZ
_TEXT	SEGMENT
?draw_basic_hud@@YGXXZ PROC				; draw_basic_hud, COMDAT

; 1659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1660 : 	display_altitude();

  00009	e8 00 00 00 00	 call	 ?display_altitude@@YGXXZ ; display_altitude

; 1661 : 	display_vertical_velocity();

  0000e	e8 00 00 00 00	 call	 ?display_vertical_velocity@@YGXXZ ; display_vertical_velocity

; 1662 : 	display_true_airspeed();

  00013	e8 00 00 00 00	 call	 ?display_true_airspeed@@YGXXZ ; display_true_airspeed

; 1663 : 	draw_pitch_scale();

  00018	e8 00 00 00 00	 call	 ?draw_pitch_scale@@YGXXZ ; draw_pitch_scale

; 1664 : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?draw_basic_hud@@YGXXZ ENDP				; draw_basic_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@N@std@@YGABNABN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@N@std@@YGABNABN0@Z PROC				; std::max<double>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00013	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00017	76 65		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00019	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00023	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00027	77 02		 ja	 SHORT $LN9@max
  00029	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	6a 00		 push	 0
  00037	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	83 f8 01	 cmp	 eax, 1
  0004f	75 01		 jne	 SHORT $LN12@max
  00051	cc		 int	 3
$LN12@max:
  00052	6a 00		 push	 0
  00054	68 0e 15 00 00	 push	 5390			; 0000150eH
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	33 c0		 xor	 eax, eax
  00073	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00075	33 c0		 xor	 eax, eax
  00077	75 a0		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00079	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
??$max@N@std@@YGABNABN0@Z ENDP				; std::max<double>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_bob_up_overlay@@YGXXZ
_TEXT	SEGMENT
tv436 = -136						; size = 4
tv422 = -136						; size = 4
tv547 = -132						; size = 4
tv545 = -132						; size = 4
tv318 = -132						; size = 4
tv140 = -132						; size = 4
tv79 = -132						; size = 4
tv429 = -128						; size = 4
tv415 = -128						; size = 4
tv310 = -128						; size = 4
tv132 = -128						; size = 4
tv71 = -128						; size = 4
$T1 = -124						; size = 8
$T2 = -116						; size = 8
$T3 = -108						; size = 4
_motion_vector$ = -40					; size = 4
_position$ = -36					; size = 4
_dzt$ = -32						; size = 4
_dxt$ = -28						; size = 4
_dz$ = -24						; size = 4
_dx$ = -20						; size = 4
_length$ = -16						; size = 4
_theta$ = -12						; size = 4
_bearing$ = -8						; size = 4
_heading$ = -4						; size = 4
?draw_bob_up_overlay@@YGXXZ PROC			; draw_bob_up_overlay, COMDAT

; 1551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1552 : 	float
; 1553 : 		heading,
; 1554 : 		bearing,
; 1555 : 		theta,
; 1556 : 		length,
; 1557 : 		dx,
; 1558 : 		dz,
; 1559 : 		dxt,
; 1560 : 		dzt;
; 1561 : 
; 1562 : 	vec3d
; 1563 : 		*position,
; 1564 : 		*motion_vector;
; 1565 : 
; 1566 : 	if (hud_bob_up_overlay)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hud_bob_up_overlay@@3HA, 0 ; hud_bob_up_overlay
  00013	0f 84 33 08 00
	00		 je	 $LN4@draw_bob_u

; 1567 : 	{
; 1568 : 		position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00020	74 0c		 je	 SHORT $LN13@draw_bob_u
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	89 4d 80	 mov	 DWORD PTR tv71[ebp], ecx
  0002c	eb 21		 jmp	 SHORT $LN14@draw_bob_u
$LN13@draw_bob_u:
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA
  00034	83 c2 11	 add	 edx, 17			; 00000011H
  00037	52		 push	 edx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00048	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN14@draw_bob_u:
  0004f	b9 01 00 00 00	 mov	 ecx, 1
  00054	85 c9		 test	 ecx, ecx
  00056	74 0c		 je	 SHORT $LN15@draw_bob_u
  00058	c7 85 7c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv79[ebp], 8
  00062	eb 24		 jmp	 SHORT $LN16@draw_bob_u
$LN15@draw_bob_u:
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA
  0006a	83 c2 11	 add	 edx, 17			; 00000011H
  0006d	52		 push	 edx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007e	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN16@draw_bob_u:
  00088	6a 08		 push	 8
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00090	51		 push	 ecx
  00091	6b 55 80 60	 imul	 edx, DWORD PTR tv71[ebp], 96
  00095	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  0009b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000a2	ff d1		 call	 ecx
  000a4	89 45 dc	 mov	 DWORD PTR _position$[ebp], eax

; 1569 : 
; 1570 : 		dx = hud_bob_up_position.x - position->x;

  000a7	8b 45 dc	 mov	 eax, DWORD PTR _position$[ebp]
  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_bob_up_position@@3UVEC3D@@A
  000b2	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  000b6	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1571 : 		dz = hud_bob_up_position.z - position->z;

  000bb	8b 45 dc	 mov	 eax, DWORD PTR _position$[ebp]
  000be	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_bob_up_position@@3UVEC3D@@A+8
  000c6	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  000cb	f3 0f 11 45 e8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 1572 : 
; 1573 : 		if (((dx * dx) + (dz * dz)) < (500.0 * 500.0))

  000d0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  000d5	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  000da	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _dz$[ebp]
  000df	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  000e4	f3 0f 58 c1	 addss	 xmm0, xmm1
  000e8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ec	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@410e848000000000
  000f4	66 0f 2f c8	 comisd	 xmm1, xmm0
  000f8	0f 86 49 07 00
	00		 jbe	 $LN3@draw_bob_u

; 1574 : 		{
; 1575 : 			heading = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING);

  000fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00105	74 0c		 je	 SHORT $LN17@draw_bob_u
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0010c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010e	89 4d 80	 mov	 DWORD PTR tv132[ebp], ecx
  00111	eb 21		 jmp	 SHORT $LN18@draw_bob_u
$LN17@draw_bob_u:
  00113	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA
  00119	83 c2 18	 add	 edx, 24			; 00000018H
  0011c	52		 push	 edx
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN18@draw_bob_u:
  00134	b9 01 00 00 00	 mov	 ecx, 1
  00139	85 c9		 test	 ecx, ecx
  0013b	74 0c		 je	 SHORT $LN19@draw_bob_u
  0013d	c7 85 7c ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv140[ebp], 52 ; 00000034H
  00147	eb 24		 jmp	 SHORT $LN20@draw_bob_u
$LN19@draw_bob_u:
  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA
  0014f	83 c2 18	 add	 edx, 24			; 00000018H
  00152	52		 push	 edx
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00163	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN20@draw_bob_u:
  0016d	6a 34		 push	 52			; 00000034H
  0016f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00175	51		 push	 ecx
  00176	69 55 80 bc 02
	00 00		 imul	 edx, DWORD PTR tv132[ebp], 700
  0017d	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv140[ebp]
  00183	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0018a	ff d1		 call	 ecx
  0018c	d9 5d fc	 fstp	 DWORD PTR _heading$[ebp]

; 1576 : 
; 1577 : 			//
; 1578 : 			// hover box
; 1579 : 			//
; 1580 : 
; 1581 : 			dxt = (dx * cos (heading)) - (dz * sin (heading));

  0018f	51		 push	 ecx
  00190	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0019f	d9 5d 80	 fstp	 DWORD PTR tv415[ebp]
  001a2	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv415[ebp]
  001a7	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  001ac	51		 push	 ecx
  001ad	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _heading$[ebp]
  001b2	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  001b7	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR tv545[ebp], xmm0
  001bf	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  001c4	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR tv422[ebp]
  001ca	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv422[ebp]
  001d2	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _dz$[ebp]
  001d7	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR tv545[ebp]
  001df	f3 0f 5c c8	 subss	 xmm1, xmm0
  001e3	f3 0f 11 4d e4	 movss	 DWORD PTR _dxt$[ebp], xmm1

; 1582 : 			dzt = (dx * sin (heading)) + (dz * cos (heading));

  001e8	51		 push	 ecx
  001e9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  001f8	d9 5d 80	 fstp	 DWORD PTR tv429[ebp]
  001fb	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv429[ebp]
  00200	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  00205	51		 push	 ecx
  00206	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _heading$[ebp]
  0020b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00210	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR tv547[ebp], xmm0
  00218	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0021d	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR tv436[ebp]
  00223	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv436[ebp]
  0022b	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _dz$[ebp]
  00230	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR tv547[ebp]
  00238	f3 0f 58 c8	 addss	 xmm1, xmm0
  0023c	f3 0f 11 4d e0	 movss	 DWORD PTR _dzt$[ebp], xmm1

; 1583 : 
; 1584 : 			dxt *= 1.0 / 100.0;

  00241	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00246	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0024e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00252	f3 0f 11 45 e4	 movss	 DWORD PTR _dxt$[ebp], xmm0

; 1585 : 			dzt *= 1.0 / 100.0;

  00257	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  0025c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00264	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00268	f3 0f 11 45 e0	 movss	 DWORD PTR _dzt$[ebp], xmm0

; 1586 : 
; 1587 : 			clip_2d_point_to_hud_extent (&dxt, &dzt);

  0026d	8d 45 e0	 lea	 eax, DWORD PTR _dzt$[ebp]
  00270	50		 push	 eax
  00271	8d 4d e4	 lea	 ecx, DWORD PTR _dxt$[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ?clip_2d_point_to_hud_extent@@YGXPAM0@Z ; clip_2d_point_to_hud_extent

; 1588 : 
; 1589 : 			draw_2d_line (dxt - 0.083, dzt + 0.200, dxt + 0.083, dzt + 0.200, hud_colour);

  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0027f	50		 push	 eax
  00280	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  00285	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0028d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00291	51		 push	 ecx
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  0029c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  002a4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a8	51		 push	 ecx
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  002b3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  002bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002bf	51		 push	 ecx
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  002ca	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  002d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d6	51		 push	 ecx
  002d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1590 : 			draw_2d_line (dxt + 0.083, dzt + 0.200, dxt + 0.200, dzt + 0.083, hud_colour);

  002e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002e6	50		 push	 eax
  002e7	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  002ec	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  002f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f8	51		 push	 ecx
  002f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fe	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00303	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0030b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030f	51		 push	 ecx
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  0031a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00322	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00326	51		 push	 ecx
  00327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032c	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00331	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  00339	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00343	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1591 : 			draw_2d_line (dxt + 0.200, dzt + 0.083, dxt + 0.200, dzt - 0.083, hud_colour);

  00348	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0034d	50		 push	 eax
  0034e	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  00353	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  0035b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0035f	51		 push	 ecx
  00360	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00365	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  0036a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00372	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00376	51		 push	 ecx
  00377	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037c	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  00381	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  00389	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038d	51		 push	 ecx
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00398	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  003a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a4	51		 push	 ecx
  003a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003aa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1592 : 			draw_2d_line (dxt + 0.200, dzt - 0.083, dxt + 0.083, dzt - 0.200, hud_colour);

  003af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  003b4	50		 push	 eax
  003b5	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  003ba	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  003c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003c6	51		 push	 ecx
  003c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cc	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  003d1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  003d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003dd	51		 push	 ecx
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  003e8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  003f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f4	51		 push	 ecx
  003f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fa	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  003ff	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00407	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0040b	51		 push	 ecx
  0040c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00411	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1593 : 			draw_2d_line (dxt + 0.083, dzt - 0.200, dxt - 0.083, dzt - 0.200, hud_colour);

  00416	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0041b	50		 push	 eax
  0041c	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  00421	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00429	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0042d	51		 push	 ecx
  0042e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00433	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00438	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  00440	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00444	51		 push	 ecx
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  0044f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00457	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0045b	51		 push	 ecx
  0045c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00461	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00466	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  0046e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00472	51		 push	 ecx
  00473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00478	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1594 : 			draw_2d_line (dxt - 0.083, dzt - 0.200, dxt - 0.200, dzt - 0.083, hud_colour);

  0047d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00482	50		 push	 eax
  00483	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  00488	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  00490	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00494	51		 push	 ecx
  00495	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  0049f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  004a7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004ab	51		 push	 ecx
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  004b6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  004be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004c2	51		 push	 ecx
  004c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c8	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  004cd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  004d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004d9	51		 push	 ecx
  004da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004df	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1595 : 			draw_2d_line (dxt - 0.200, dzt - 0.083, dxt - 0.200, dzt + 0.083, hud_colour);

  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  004e9	50		 push	 eax
  004ea	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  004ef	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  004f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00501	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00506	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0050e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00512	51		 push	 ecx
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  0051d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  00525	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00529	51		 push	 ecx
  0052a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052f	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  00534	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0053c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00540	51		 push	 ecx
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1596 : 			draw_2d_line (dxt - 0.200, dzt + 0.083, dxt - 0.083, dzt + 0.200, hud_colour);

  0054b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00550	50		 push	 eax
  00551	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  00556	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0055e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00562	51		 push	 ecx
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  0056d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  00575	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00579	51		 push	 ecx
  0057a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057f	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dzt$[ebp]
  00584	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb53f7ced916873
  0058c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00590	51		 push	 ecx
  00591	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00596	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _dxt$[ebp]
  0059b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  005a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a7	51		 push	 ecx
  005a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ad	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1597 : 
; 1598 : 			//
; 1599 : 			// velocity vector
; 1600 : 			//
; 1601 : 
; 1602 : 			motion_vector = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_MOTION_VECTOR);

  005b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  005b9	74 0c		 je	 SHORT $LN21@draw_bob_u
  005bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  005c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  005c2	89 4d 80	 mov	 DWORD PTR tv310[ebp], ecx
  005c5	eb 21		 jmp	 SHORT $LN22@draw_bob_u
$LN21@draw_bob_u:
  005c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA
  005cd	83 c2 33	 add	 edx, 51			; 00000033H
  005d0	52		 push	 edx
  005d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  005d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005db	50		 push	 eax
  005dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005e1	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv310[ebp], 0
$LN22@draw_bob_u:
  005e8	b9 01 00 00 00	 mov	 ecx, 1
  005ed	85 c9		 test	 ecx, ecx
  005ef	74 0c		 je	 SHORT $LN23@draw_bob_u
  005f1	c7 85 7c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv318[ebp], 6
  005fb	eb 24		 jmp	 SHORT $LN24@draw_bob_u
$LN23@draw_bob_u:
  005fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_bob_up_overlay@@YGXXZ@4JA
  00603	83 c2 33	 add	 edx, 51			; 00000033H
  00606	52		 push	 edx
  00607	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0060c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00611	50		 push	 eax
  00612	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00617	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv318[ebp], 0
$LN24@draw_bob_u:
  00621	6a 06		 push	 6
  00623	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00629	51		 push	 ecx
  0062a	6b 55 80 60	 imul	 edx, DWORD PTR tv310[ebp], 96
  0062e	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv318[ebp]
  00634	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0063b	ff d1		 call	 ecx
  0063d	89 45 d8	 mov	 DWORD PTR _motion_vector$[ebp], eax

; 1603 : 
; 1604 : 			dx = motion_vector->x;

  00640	8b 45 d8	 mov	 eax, DWORD PTR _motion_vector$[ebp]
  00643	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00647	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1605 : 			dz = motion_vector->z;

  0064c	8b 45 d8	 mov	 eax, DWORD PTR _motion_vector$[ebp]
  0064f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00654	f3 0f 11 45 e8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 1606 : 
; 1607 : 			length = sqrt ((dx * dx) + (dz * dz));

  00659	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0065e	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  00663	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _dz$[ebp]
  00668	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  0066d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00671	51		 push	 ecx
  00672	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00677	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0067c	d9 5d f0	 fstp	 DWORD PTR _length$[ebp]

; 1608 : 
; 1609 : 			if ((length < kilometres_per_hour_to_metres_per_second (-0.1)) || (length > kilometres_per_hour_to_metres_per_second (0.1)))

  0067f	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00684	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bf9c71c71c71c71c
  0068c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00690	77 13		 ja	 SHORT $LN7@draw_bob_u
  00692	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00697	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f9c71c71c71c71c
  0069f	0f 86 b8 00 00
	00		 jbe	 $LN5@draw_bob_u
$LN7@draw_bob_u:

; 1610 : 			{
; 1611 : 				length = min (length, kilometres_per_hour_to_metres_per_second (20.0f));

  006a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40b1c71c
  006ad	f3 0f 11 45 94	 movss	 DWORD PTR $T3[ebp], xmm0
  006b2	8d 45 94	 lea	 eax, DWORD PTR $T3[ebp]
  006b5	50		 push	 eax
  006b6	8d 4d f0	 lea	 ecx, DWORD PTR _length$[ebp]
  006b9	51		 push	 ecx
  006ba	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  006bf	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006c3	f3 0f 11 45 f0	 movss	 DWORD PTR _length$[ebp], xmm0

; 1612 : 
; 1613 : 				length *= 0.5 / kilometres_per_hour_to_metres_per_second (20.0);

  006c8	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  006cd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb70a3d70a3d70a
  006d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006d9	f3 0f 11 45 f0	 movss	 DWORD PTR _length$[ebp], xmm0

; 1614 : 
; 1615 : 				bearing = atan2 (dx, dz);

  006de	51		 push	 ecx
  006df	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dz$[ebp]
  006e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e9	51		 push	 ecx
  006ea	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f4	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  006f9	d9 5d f8	 fstp	 DWORD PTR _bearing$[ebp]

; 1616 : 
; 1617 : 				theta = bearing - heading;

  006fc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _bearing$[ebp]
  00701	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _heading$[ebp]
  00706	f3 0f 11 45 f4	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1618 : 
; 1619 : 				if (theta > rad (180.0))

  0070b	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00710	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  00718	76 18		 jbe	 SHORT $LN8@draw_bob_u

; 1620 : 				{
; 1621 : 					theta -= rad (360.0);

  0071a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  0071f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00727	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0072b	f3 0f 11 45 f4	 movss	 DWORD PTR _theta$[ebp], xmm0
  00730	eb 29		 jmp	 SHORT $LN10@draw_bob_u
$LN8@draw_bob_u:

; 1622 : 				}
; 1623 : 				else if (theta < rad (-180.0))

  00732	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00737	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  0073f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00743	76 16		 jbe	 SHORT $LN10@draw_bob_u

; 1624 : 				{
; 1625 : 					theta += rad (360.0);

  00745	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  0074a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  00752	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00756	f3 0f 11 45 f4	 movss	 DWORD PTR _theta$[ebp], xmm0
$LN10@draw_bob_u:

; 1626 : 				}
; 1627 : 			}
; 1628 : 			else

  0075b	eb 10		 jmp	 SHORT $LN6@draw_bob_u
$LN5@draw_bob_u:

; 1629 : 			{
; 1630 : 				length = 0.0;

  0075d	0f 57 c0	 xorps	 xmm0, xmm0
  00760	f3 0f 11 45 f0	 movss	 DWORD PTR _length$[ebp], xmm0

; 1631 : 
; 1632 : 				theta = 0.0;

  00765	0f 57 c0	 xorps	 xmm0, xmm0
  00768	f3 0f 11 45 f4	 movss	 DWORD PTR _theta$[ebp], xmm0
$LN6@draw_bob_u:

; 1633 : 			}
; 1634 : 
; 1635 : 			set_2d_window_rotation (hud_env, -theta);

  0076d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00772	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00779	51		 push	 ecx
  0077a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00784	50		 push	 eax
  00785	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1636 : 
; 1637 : 			draw_2d_line (0.0, 0.0, 0.0, length, hud_colour);

  0078a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0078f	50		 push	 eax
  00790	51		 push	 ecx
  00791	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _length$[ebp]
  00796	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079b	51		 push	 ecx
  0079c	0f 57 c0	 xorps	 xmm0, xmm0
  0079f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a4	51		 push	 ecx
  007a5	0f 57 c0	 xorps	 xmm0, xmm0
  007a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ad	51		 push	 ecx
  007ae	0f 57 c0	 xorps	 xmm0, xmm0
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1638 : 
; 1639 : 			if (draw_large_hud)

  007bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  007c2	74 6d		 je	 SHORT $LN11@draw_bob_u

; 1640 : 			{
; 1641 : 				length = max (length - 0.008, 0.0);

  007c4	0f 57 c0	 xorps	 xmm0, xmm0
  007c7	f2 0f 11 45 8c	 movsd	 QWORD PTR $T2[ebp], xmm0
  007cc	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  007d1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f80624dd2f1a9fc
  007d9	f2 0f 11 45 84	 movsd	 QWORD PTR $T1[ebp], xmm0
  007de	8d 45 8c	 lea	 eax, DWORD PTR $T2[ebp]
  007e1	50		 push	 eax
  007e2	8d 4d 84	 lea	 ecx, DWORD PTR $T1[ebp]
  007e5	51		 push	 ecx
  007e6	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  007eb	f2 0f 5a 00	 cvtsd2ss xmm0, QWORD PTR [eax]
  007ef	f3 0f 11 45 f0	 movss	 DWORD PTR _length$[ebp], xmm0

; 1642 : 
; 1643 : 				draw_2d_line (-0.008, length, 0.008, length, hud_colour);

  007f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  007f9	50		 push	 eax
  007fa	51		 push	 ecx
  007fb	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _length$[ebp]
  00800	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00805	51		 push	 ecx
  00806	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c03126f
  0080e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00813	51		 push	 ecx
  00814	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _length$[ebp]
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bc03126f
  00827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@draw_bob_u:

; 1644 : 			}
; 1645 : 
; 1646 : 			set_2d_window_rotation (hud_env, 0.0);

  00831	51		 push	 ecx
  00832	0f 57 c0	 xorps	 xmm0, xmm0
  00835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0083f	50		 push	 eax
  00840	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1647 : 		}
; 1648 : 		else

  00845	eb 05		 jmp	 SHORT $LN4@draw_bob_u
$LN3@draw_bob_u:

; 1649 : 		{
; 1650 : 			clear_hud_bob_up_overlay ();

  00847	e8 00 00 00 00	 call	 ?clear_hud_bob_up_overlay@@YGXXZ ; clear_hud_bob_up_overlay
$LN4@draw_bob_u:

; 1651 : 		}
; 1652 : 	}
; 1653 : }

  0084c	5f		 pop	 edi
  0084d	5e		 pop	 esi
  0084e	5b		 pop	 ebx
  0084f	8b e5		 mov	 esp, ebp
  00851	5d		 pop	 ebp
  00852	c3		 ret	 0
?draw_bob_up_overlay@@YGXXZ ENDP			; draw_bob_up_overlay
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_waypoint_information@@YGXXZ
_TEXT	SEGMENT
tv139 = -208						; size = 4
tv81 = -208						; size = 4
tv131 = -204						; size = 4
tv73 = -204						; size = 4
_wp_position$ = -136					; size = 12
_en_position$ = -124					; size = 4
_wp$ = -120						; size = 4
_en$ = -116						; size = 4
_width$ = -112						; size = 4
_flat_range$ = -108					; size = 4
_tag$ = -101						; size = 1
_s$ = -100						; size = 100
?display_waypoint_information@@YGXXZ PROC		; display_waypoint_information, COMDAT

; 1487 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1488 : 	char
; 1489 : 		s[100],
; 1490 : 		tag;
; 1491 : 
; 1492 : 	float
; 1493 : 		flat_range,
; 1494 : 		width;
; 1495 : 
; 1496 : 	entity
; 1497 : 		*en,
; 1498 : 		*wp;
; 1499 : 
; 1500 : 	vec3d
; 1501 : 		*en_position,
; 1502 : 		wp_position;
; 1503 : 
; 1504 : 	en = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 45 8c	 mov	 DWORD PTR _en$[ebp], eax

; 1505 : 
; 1506 : 	wp = get_local_entity_current_waypoint (en);

  00014	8b 45 8c	 mov	 eax, DWORD PTR _en$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  0001d	89 45 88	 mov	 DWORD PTR _wp$[ebp], eax

; 1507 : 
; 1508 : 	if (wp)

  00020	83 7d 88 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00024	0f 84 18 02 00
	00		 je	 $LN2@display_wa

; 1509 : 	{
; 1510 : 		en_position = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  0002a	83 7d 8c 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002e	74 0d		 je	 SHORT $LN8@display_wa
  00030	8b 45 8c	 mov	 eax, DWORD PTR _en$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003b	eb 24		 jmp	 SHORT $LN9@display_wa
$LN8@display_wa:
  0003d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00043	83 c2 17	 add	 edx, 23			; 00000017H
  00046	52		 push	 edx
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00057	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN9@display_wa:
  00061	b9 01 00 00 00	 mov	 ecx, 1
  00066	85 c9		 test	 ecx, ecx
  00068	74 0c		 je	 SHORT $LN10@display_wa
  0006a	c7 85 30 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv81[ebp], 8
  00074	eb 24		 jmp	 SHORT $LN11@display_wa
$LN10@display_wa:
  00076	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  0007c	83 c2 17	 add	 edx, 23			; 00000017H
  0007f	52		 push	 edx
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00090	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN11@display_wa:
  0009a	6a 08		 push	 8
  0009c	8b 4d 8c	 mov	 ecx, DWORD PTR _en$[ebp]
  0009f	51		 push	 ecx
  000a0	6b 95 34 ff ff
	ff 60		 imul	 edx, DWORD PTR tv73[ebp], 96
  000a7	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000ad	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000b4	ff d1		 call	 ecx
  000b6	89 45 84	 mov	 DWORD PTR _en_position$[ebp], eax

; 1511 : 
; 1512 : 		get_waypoint_display_position (en, wp, &wp_position);

  000b9	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _wp_position$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d 88	 mov	 ecx, DWORD PTR _wp$[ebp]
  000c3	51		 push	 ecx
  000c4	8b 55 8c	 mov	 edx, DWORD PTR _en$[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1513 : 
; 1514 : 		if (!havoc_damage.navigation_computer)

  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  000d2	c1 e8 09	 shr	 eax, 9
  000d5	83 e0 01	 and	 eax, 1
  000d8	0f 85 d1 00 00
	00		 jne	 $LN3@display_wa

; 1515 : 		{
; 1516 : 			tag = get_local_entity_char_value (wp, CHAR_TYPE_TAG);

  000de	83 7d 88 00	 cmp	 DWORD PTR _wp$[ebp], 0
  000e2	74 0d		 je	 SHORT $LN12@display_wa
  000e4	8b 45 88	 mov	 eax, DWORD PTR _wp$[ebp]
  000e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e9	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv131[ebp], ecx
  000ef	eb 24		 jmp	 SHORT $LN13@display_wa
$LN12@display_wa:
  000f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  000f7	83 c2 1d	 add	 edx, 29			; 0000001dH
  000fa	52		 push	 edx
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010b	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv131[ebp], 0
$LN13@display_wa:
  00115	b9 01 00 00 00	 mov	 ecx, 1
  0011a	85 c9		 test	 ecx, ecx
  0011c	74 0c		 je	 SHORT $LN14@display_wa
  0011e	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv139[ebp], 0
  00128	eb 24		 jmp	 SHORT $LN15@display_wa
$LN14@display_wa:
  0012a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00130	83 c2 1d	 add	 edx, 29			; 0000001dH
  00133	52		 push	 edx
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00144	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv139[ebp], 0
$LN15@display_wa:
  0014e	6a 00		 push	 0
  00150	8b 4d 88	 mov	 ecx, DWORD PTR _wp$[ebp]
  00153	51		 push	 ecx
  00154	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv139[ebp]
  0015a	c1 e2 02	 shl	 edx, 2
  0015d	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv131[ebp]
  00163	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  0016a	ff d1		 call	 ecx
  0016c	88 45 9b	 mov	 BYTE PTR _tag$[ebp], al

; 1517 : 
; 1518 : 			flat_range = get_2d_range (en_position, &wp_position);

  0016f	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _wp_position$[ebp]
  00175	50		 push	 eax
  00176	8b 4d 84	 mov	 ecx, DWORD PTR _en_position$[ebp]
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  0017f	d9 5d 94	 fstp	 DWORD PTR _flat_range$[ebp]

; 1519 : 
; 1520 : 			sprintf (s, "%c:%.1f", tag, flat_range * (1.0 / 1000.0));

  00182	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _flat_range$[ebp]
  00187	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0018f	83 ec 08	 sub	 esp, 8
  00192	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00197	0f b6 45 9b	 movzx	 eax, BYTE PTR _tag$[ebp]
  0019b	50		 push	 eax
  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_07GLDGAFOI@?$CFc?3?$CF?41f@
  001a1	8d 4d 9c	 lea	 ecx, DWORD PTR _s$[ebp]
  001a4	51		 push	 ecx
  001a5	e8 00 00 00 00	 call	 _sprintf
  001aa	83 c4 14	 add	 esp, 20			; 00000014H

; 1521 : 		}
; 1522 : 		else

  001ad	eb 11		 jmp	 SHORT $LN4@display_wa
$LN3@display_wa:

; 1523 : 		{
; 1524 : 			sprintf (s, "-:--.-");

  001af	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  001b4	8d 45 9c	 lea	 eax, DWORD PTR _s$[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _sprintf
  001bd	83 c4 08	 add	 esp, 8
$LN4@display_wa:

; 1525 : 		}
; 1526 : 
; 1527 : 		if (draw_large_hud)

  001c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  001c7	74 09		 je	 SHORT $LN5@display_wa

; 1528 : 		{
; 1529 : 			set_mono_font_type (MONO_FONT_TYPE_6X10);

  001c9	6a 04		 push	 4
  001cb	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1530 : 		}
; 1531 : 		else

  001d0	eb 07		 jmp	 SHORT $LN6@display_wa
$LN5@display_wa:

; 1532 : 		{
; 1533 : 			set_mono_font_type (MONO_FONT_TYPE_6X7);

  001d2	6a 03		 push	 3
  001d4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN6@display_wa:

; 1534 : 		}
; 1535 : 
; 1536 : 		set_2d_mono_font_position (0.0, -0.8);

  001d9	51		 push	 ecx
  001da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  001e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e7	51		 push	 ecx
  001e8	0f 57 c0	 xorps	 xmm0, xmm0
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1537 : 
; 1538 : 		width = get_mono_font_string_width (s);

  001f5	8d 45 9c	 lea	 eax, DWORD PTR _s$[ebp]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  001fe	d9 5d 90	 fstp	 DWORD PTR _width$[ebp]

; 1539 : 
; 1540 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, 0.0);

  00201	51		 push	 ecx
  00202	0f 57 c0	 xorps	 xmm0, xmm0
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _width$[ebp]
  0020f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00216	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0021a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00222	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0022a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022e	51		 push	 ecx
  0022f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00234	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1541 : 
; 1542 : 		print_mono_font_string (s);

  00239	8d 45 9c	 lea	 eax, DWORD PTR _s$[ebp]
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_wa:

; 1543 : 	}
; 1544 : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c3		 ret	 0
?display_waypoint_information@@YGXXZ ENDP		; display_waypoint_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_flight_path_marker_and_waypoint_information@@YGXH@Z
_TEXT	SEGMENT
tv218 = -252						; size = 4
tv174 = -252						; size = 4
tv81 = -252						; size = 4
tv210 = -248						; size = 4
tv166 = -248						; size = 4
tv73 = -248						; size = 4
_visibility$ = -180					; size = 4
_wp_position$ = -176					; size = 12
_en_position$ = -164					; size = 4
_wp$ = -160						; size = 4
_en$ = -156						; size = 4
_relative_heading$ = -152				; size = 4
_heading$ = -148					; size = 4
_bearing$ = -144					; size = 4
_dz$ = -140						; size = 4
_dx$ = -136						; size = 4
_width$ = -132						; size = 4
_flat_range$ = -128					; size = 4
_y$ = -124						; size = 4
_x$ = -120						; size = 4
_j$ = -116						; size = 4
_i$ = -112						; size = 4
_draw_flight_path_marker$ = -108			; size = 4
_tag$ = -101						; size = 1
_s$ = -100						; size = 100
_draw_on_virtual_cockpit_texture$ = 8			; size = 4
?display_flight_path_marker_and_waypoint_information@@YGXH@Z PROC ; display_flight_path_marker_and_waypoint_information, COMDAT

; 1332 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1333 : 	char
; 1334 : 		s[100],
; 1335 : 		tag;
; 1336 : 
; 1337 : 	int
; 1338 : 		draw_flight_path_marker;
; 1339 : 
; 1340 : 	float
; 1341 : 		i,
; 1342 : 		j,
; 1343 : 		x,
; 1344 : 		y,
; 1345 : 		flat_range,
; 1346 : 		width,
; 1347 : 		dx,
; 1348 : 		dz,
; 1349 : 		bearing,
; 1350 : 		heading,
; 1351 : 		relative_heading;
; 1352 : 
; 1353 : 	entity
; 1354 : 		*en,
; 1355 : 		*wp;
; 1356 : 
; 1357 : 	vec3d
; 1358 : 		*en_position,
; 1359 : 		wp_position;
; 1360 : 
; 1361 : 	object_3d_visibility
; 1362 : 		visibility;
; 1363 : 
; 1364 : 	en = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 85 64 ff ff
	ff		 mov	 DWORD PTR _en$[ebp], eax

; 1365 : 
; 1366 : 	wp = get_local_entity_current_waypoint (en);

  00017	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00023	89 85 60 ff ff
	ff		 mov	 DWORD PTR _wp$[ebp], eax

; 1367 : 
; 1368 : 	if (wp)

  00029	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _wp$[ebp], 0
  00030	0f 84 48 05 00
	00		 je	 $LN2@display_fl

; 1369 : 	{
; 1370 : 		en_position = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  00036	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _en$[ebp], 0
  0003d	74 10		 je	 SHORT $LN21@display_fl
  0003f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0004d	eb 24		 jmp	 SHORT $LN22@display_fl
$LN21@display_fl:
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA
  00055	83 c2 26	 add	 edx, 38			; 00000026H
  00058	52		 push	 edx
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00069	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN22@display_fl:
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	85 c9		 test	 ecx, ecx
  0007a	74 0c		 je	 SHORT $LN23@display_fl
  0007c	c7 85 04 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv81[ebp], 8
  00086	eb 24		 jmp	 SHORT $LN24@display_fl
$LN23@display_fl:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA
  0008e	83 c2 26	 add	 edx, 38			; 00000026H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN24@display_fl:
  000ac	6a 08		 push	 8
  000ae	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  000b4	51		 push	 ecx
  000b5	6b 95 08 ff ff
	ff 60		 imul	 edx, DWORD PTR tv73[ebp], 96
  000bc	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000c2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000c9	ff d1		 call	 ecx
  000cb	89 85 5c ff ff
	ff		 mov	 DWORD PTR _en_position$[ebp], eax

; 1371 : 
; 1372 : 		get_waypoint_display_position (en, wp, &wp_position);

  000d1	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _wp_position$[ebp]
  000d7	50		 push	 eax
  000d8	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _wp$[ebp]
  000de	51		 push	 ecx
  000df	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _en$[ebp]
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1373 : 
; 1374 : 		//
; 1375 : 		// flight path marker
; 1376 : 		//
; 1377 : 
; 1378 : 		draw_flight_path_marker = FALSE;

  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _draw_flight_path_marker$[ebp], 0

; 1379 : 
; 1380 : 		if (draw_on_virtual_cockpit_texture)

  000f2	83 7d 08 00	 cmp	 DWORD PTR _draw_on_virtual_cockpit_texture$[ebp], 0
  000f6	74 59		 je	 SHORT $LN3@display_fl

; 1381 : 		{
; 1382 : 			if
; 1383 : 			(
; 1384 : 				(pilot_head_heading >= rad (-5.0)) &&
; 1385 : 				(pilot_head_heading <= rad (5.0)) &&
; 1386 : 				(pilot_head_pitch >= rad (-5.0)) &&

  000f8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pilot_head_heading@@3MA
  00100	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfb6571848000000
  00108	72 45		 jb	 SHORT $LN5@display_fl
  0010a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pilot_head_heading@@3MA
  00112	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb6571848000000
  0011a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0011e	72 2f		 jb	 SHORT $LN5@display_fl
  00120	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pilot_head_pitch@@3MA
  00128	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfb6571848000000
  00130	72 1d		 jb	 SHORT $LN5@display_fl
  00132	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pilot_head_pitch@@3MA
  0013a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb6571848000000
  00142	66 0f 2f c8	 comisd	 xmm1, xmm0
  00146	72 07		 jb	 SHORT $LN5@display_fl

; 1387 : 				(pilot_head_pitch <= rad (5.0))
; 1388 : 			)
; 1389 : 			{
; 1390 : 				draw_flight_path_marker = TRUE;

  00148	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _draw_flight_path_marker$[ebp], 1
$LN5@display_fl:

; 1391 : 			}
; 1392 : 		}
; 1393 : 		else

  0014f	eb 07		 jmp	 SHORT $LN4@display_fl
$LN3@display_fl:

; 1394 : 		{
; 1395 : 			draw_flight_path_marker = TRUE;

  00151	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _draw_flight_path_marker$[ebp], 1
$LN4@display_fl:

; 1396 : 		}
; 1397 : 
; 1398 : 		if (draw_flight_path_marker)

  00158	83 7d 94 00	 cmp	 DWORD PTR _draw_flight_path_marker$[ebp], 0
  0015c	0f 84 95 02 00
	00		 je	 $LN15@display_fl

; 1399 : 		{
; 1400 : 			if (!havoc_damage.navigation_computer)

  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00167	c1 e8 09	 shr	 eax, 9
  0016a	83 e0 01	 and	 eax, 1
  0016d	0f 85 84 02 00
	00		 jne	 $LN15@display_fl

; 1401 : 			{
; 1402 : 				visibility = get_position_3d_screen_coordinates (&wp_position, &i, &j);

  00173	8d 45 8c	 lea	 eax, DWORD PTR _j$[ebp]
  00176	50		 push	 eax
  00177	8d 4d 90	 lea	 ecx, DWORD PTR _i$[ebp]
  0017a	51		 push	 ecx
  0017b	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR _wp_position$[ebp]
  00181	52		 push	 edx
  00182	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  00187	89 85 4c ff ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 1403 : 
; 1404 : 				if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  0018d	83 bd 4c ff ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  00194	74 09		 je	 SHORT $LN10@display_fl
  00196	83 bd 4c ff ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  0019d	75 71		 jne	 SHORT $LN8@display_fl
$LN10@display_fl:

; 1405 : 				{
; 1406 : 					transform_hud_screen_co_ords_to_hud_texture_co_ords (&i, &j);

  0019f	8d 45 8c	 lea	 eax, DWORD PTR _j$[ebp]
  001a2	50		 push	 eax
  001a3	8d 4d 90	 lea	 ecx, DWORD PTR _i$[ebp]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 ?transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z ; transform_hud_screen_co_ords_to_hud_texture_co_ords

; 1407 : 
; 1408 : 					get_2d_world_position (i, j, &x, &y);

  001ac	8d 45 84	 lea	 eax, DWORD PTR _y$[ebp]
  001af	50		 push	 eax
  001b0	8d 4d 88	 lea	 ecx, DWORD PTR _x$[ebp]
  001b3	51		 push	 ecx
  001b4	51		 push	 ecx
  001b5	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _j$[ebp]
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	51		 push	 ecx
  001c0	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _i$[ebp]
  001c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ca	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 1409 : 
; 1410 : 					clip_2d_point_to_hud_extent (&x, &y);

  001cf	8d 45 84	 lea	 eax, DWORD PTR _y$[ebp]
  001d2	50		 push	 eax
  001d3	8d 4d 88	 lea	 ecx, DWORD PTR _x$[ebp]
  001d6	51		 push	 ecx
  001d7	e8 00 00 00 00	 call	 ?clip_2d_point_to_hud_extent@@YGXPAM0@Z ; clip_2d_point_to_hud_extent

; 1411 : 
; 1412 : 					draw_2d_circle (x, y, 0.125, hud_colour);

  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001e1	50		 push	 eax
  001e2	51		 push	 ecx
  001e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	51		 push	 ecx
  001f1	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$[ebp]
  001f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fb	51		 push	 ecx
  001fc	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x$[ebp]
  00201	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00206	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1413 : 				}
; 1414 : 				else

  0020b	e9 e7 01 00 00	 jmp	 $LN15@display_fl
$LN8@display_fl:

; 1415 : 				{
; 1416 : 					dx = wp_position.x - en_position->x;

  00210	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _en_position$[ebp]
  00216	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _wp_position$[ebp]
  0021e	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00222	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1417 : 					dz = wp_position.z - en_position->z;

  0022a	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _en_position$[ebp]
  00230	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _wp_position$[ebp+8]
  00238	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0023d	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _dz$[ebp], xmm0

; 1418 : 
; 1419 : 					bearing = atan2 (dx, dz);

  00245	51		 push	 ecx
  00246	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _dz$[ebp]
  0024e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00253	51		 push	 ecx
  00254	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0025c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00261	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00266	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR _bearing$[ebp]

; 1420 : 
; 1421 : 					heading = get_local_entity_float_value (en, FLOAT_TYPE_HEADING);

  0026c	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _en$[ebp], 0
  00273	74 10		 je	 SHORT $LN25@display_fl
  00275	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  0027b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027d	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv166[ebp], ecx
  00283	eb 24		 jmp	 SHORT $LN26@display_fl
$LN25@display_fl:
  00285	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA
  0028b	83 c2 59	 add	 edx, 89			; 00000059H
  0028e	52		 push	 edx
  0028f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00294	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0029f	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv166[ebp], 0
$LN26@display_fl:
  002a9	b9 01 00 00 00	 mov	 ecx, 1
  002ae	85 c9		 test	 ecx, ecx
  002b0	74 0c		 je	 SHORT $LN27@display_fl
  002b2	c7 85 04 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv174[ebp], 52 ; 00000034H
  002bc	eb 24		 jmp	 SHORT $LN28@display_fl
$LN27@display_fl:
  002be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA
  002c4	83 c2 59	 add	 edx, 89			; 00000059H
  002c7	52		 push	 edx
  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d8	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv174[ebp], 0
$LN28@display_fl:
  002e2	6a 34		 push	 52			; 00000034H
  002e4	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  002ea	51		 push	 ecx
  002eb	69 95 08 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv166[ebp], 700
  002f5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv174[ebp]
  002fb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00302	ff d1		 call	 ecx
  00304	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR _heading$[ebp]

; 1422 : 
; 1423 : 					relative_heading = bearing - heading;

  0030a	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _bearing$[ebp]
  00312	f3 0f 5c 85 6c
	ff ff ff	 subss	 xmm0, DWORD PTR _heading$[ebp]
  0031a	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _relative_heading$[ebp], xmm0

; 1424 : 
; 1425 : 					if (relative_heading < rad (-180.0))

  00322	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _relative_heading$[ebp]
  0032a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  00332	66 0f 2f c8	 comisd	 xmm1, xmm0
  00336	76 1e		 jbe	 SHORT $LN11@display_fl

; 1426 : 					{
; 1427 : 						relative_heading += rad (360.0);

  00338	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _relative_heading$[ebp]
  00340	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  00348	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0034c	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _relative_heading$[ebp], xmm0
  00354	eb 2e		 jmp	 SHORT $LN13@display_fl
$LN11@display_fl:

; 1428 : 					}
; 1429 : 					else if (relative_heading > rad (180.0))

  00356	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _relative_heading$[ebp]
  0035e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  00366	76 1c		 jbe	 SHORT $LN13@display_fl

; 1430 : 					{
; 1431 : 						relative_heading -= rad (360.0);

  00368	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _relative_heading$[ebp]
  00370	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00378	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0037c	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _relative_heading$[ebp], xmm0
$LN13@display_fl:

; 1432 : 					}
; 1433 : 
; 1434 : 					if (relative_heading < 0.0)

  00384	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _relative_heading$[ebp]
  0038c	0f 57 c9	 xorps	 xmm1, xmm1
  0038f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00393	76 32		 jbe	 SHORT $LN14@display_fl

; 1435 : 					{
; 1436 : 						draw_2d_circle (-1.0, 0.0, 0.125, hud_colour);

  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0039a	50		 push	 eax
  0039b	51		 push	 ecx
  0039c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  003a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a9	51		 push	 ecx
  003aa	0f 57 c0	 xorps	 xmm0, xmm0
  003ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b2	51		 push	 ecx
  003b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c0	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 1437 : 					}
; 1438 : 					else

  003c5	eb 30		 jmp	 SHORT $LN15@display_fl
$LN14@display_fl:

; 1439 : 					{
; 1440 : 						draw_2d_circle (1.0, 0.0, 0.125, hud_colour);

  003c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  003cc	50		 push	 eax
  003cd	51		 push	 ecx
  003ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  003d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003db	51		 push	 ecx
  003dc	0f 57 c0	 xorps	 xmm0, xmm0
  003df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e4	51		 push	 ecx
  003e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f2	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN15@display_fl:

; 1441 : 					}
; 1442 : 				}
; 1443 : 			}
; 1444 : 		}
; 1445 : 
; 1446 : 		//
; 1447 : 		// waypoint information
; 1448 : 		//
; 1449 : 
; 1450 : 		if (!havoc_damage.navigation_computer)

  003f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  003fc	c1 e8 09	 shr	 eax, 9
  003ff	83 e0 01	 and	 eax, 1
  00402	0f 85 dd 00 00
	00		 jne	 $LN16@display_fl

; 1451 : 		{
; 1452 : 			tag = get_local_entity_char_value (wp, CHAR_TYPE_TAG);

  00408	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _wp$[ebp], 0
  0040f	74 10		 je	 SHORT $LN29@display_fl
  00411	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _wp$[ebp]
  00417	8b 08		 mov	 ecx, DWORD PTR [eax]
  00419	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv210[ebp], ecx
  0041f	eb 24		 jmp	 SHORT $LN30@display_fl
$LN29@display_fl:
  00421	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA
  00427	83 c2 78	 add	 edx, 120		; 00000078H
  0042a	52		 push	 edx
  0042b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00435	50		 push	 eax
  00436	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0043b	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv210[ebp], 0
$LN30@display_fl:
  00445	b9 01 00 00 00	 mov	 ecx, 1
  0044a	85 c9		 test	 ecx, ecx
  0044c	74 0c		 je	 SHORT $LN31@display_fl
  0044e	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
  00458	eb 24		 jmp	 SHORT $LN32@display_fl
$LN31@display_fl:
  0045a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_flight_path_marker_and_waypoint_information@@YGXH@Z@4JA
  00460	83 c2 78	 add	 edx, 120		; 00000078H
  00463	52		 push	 edx
  00464	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00469	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  0046e	50		 push	 eax
  0046f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00474	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN32@display_fl:
  0047e	6a 00		 push	 0
  00480	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _wp$[ebp]
  00486	51		 push	 ecx
  00487	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv218[ebp]
  0048d	c1 e2 02	 shl	 edx, 2
  00490	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv210[ebp]
  00496	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  0049d	ff d1		 call	 ecx
  0049f	88 45 9b	 mov	 BYTE PTR _tag$[ebp], al

; 1453 : 
; 1454 : 			flat_range = get_2d_range (en_position, &wp_position);

  004a2	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _wp_position$[ebp]
  004a8	50		 push	 eax
  004a9	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _en_position$[ebp]
  004af	51		 push	 ecx
  004b0	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  004b5	d9 5d 80	 fstp	 DWORD PTR _flat_range$[ebp]

; 1455 : 
; 1456 : 			sprintf (s, "%c:%.1f", tag, flat_range * (1.0 / 1000.0));

  004b8	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _flat_range$[ebp]
  004bd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  004c5	83 ec 08	 sub	 esp, 8
  004c8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004cd	0f b6 45 9b	 movzx	 eax, BYTE PTR _tag$[ebp]
  004d1	50		 push	 eax
  004d2	68 00 00 00 00	 push	 OFFSET ??_C@_07GLDGAFOI@?$CFc?3?$CF?41f@
  004d7	8d 4d 9c	 lea	 ecx, DWORD PTR _s$[ebp]
  004da	51		 push	 ecx
  004db	e8 00 00 00 00	 call	 _sprintf
  004e0	83 c4 14	 add	 esp, 20			; 00000014H

; 1457 : 		}
; 1458 : 		else

  004e3	eb 11		 jmp	 SHORT $LN17@display_fl
$LN16@display_fl:

; 1459 : 		{
; 1460 : 			sprintf (s, "-:--.-");

  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  004ea	8d 45 9c	 lea	 eax, DWORD PTR _s$[ebp]
  004ed	50		 push	 eax
  004ee	e8 00 00 00 00	 call	 _sprintf
  004f3	83 c4 08	 add	 esp, 8
$LN17@display_fl:

; 1461 : 		}
; 1462 : 
; 1463 : 		if (draw_large_hud)

  004f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  004fd	74 09		 je	 SHORT $LN18@display_fl

; 1464 : 		{
; 1465 : 			set_mono_font_type (MONO_FONT_TYPE_6X10);

  004ff	6a 04		 push	 4
  00501	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1466 : 		}
; 1467 : 		else

  00506	eb 07		 jmp	 SHORT $LN19@display_fl
$LN18@display_fl:

; 1468 : 		{
; 1469 : 			set_mono_font_type (MONO_FONT_TYPE_6X7);

  00508	6a 03		 push	 3
  0050a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN19@display_fl:

; 1470 : 		}
; 1471 : 
; 1472 : 		set_2d_mono_font_position (0.0, -0.8);

  0050f	51		 push	 ecx
  00510	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051d	51		 push	 ecx
  0051e	0f 57 c0	 xorps	 xmm0, xmm0
  00521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00526	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1473 : 
; 1474 : 		width = get_mono_font_string_width (s);

  0052b	8d 45 9c	 lea	 eax, DWORD PTR _s$[ebp]
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00534	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1475 : 
; 1476 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, 0.0);

  0053a	51		 push	 ecx
  0053b	0f 57 c0	 xorps	 xmm0, xmm0
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0054b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00552	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00556	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0055e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00566	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0056a	51		 push	 ecx
  0056b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00570	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1477 : 
; 1478 : 		print_mono_font_string (s);

  00575	8d 45 9c	 lea	 eax, DWORD PTR _s$[ebp]
  00578	50		 push	 eax
  00579	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_fl:

; 1479 : 	}
; 1480 : }

  0057e	5f		 pop	 edi
  0057f	5e		 pop	 esi
  00580	5b		 pop	 ebx
  00581	8b e5		 mov	 esp, ebp
  00583	5d		 pop	 ebp
  00584	c2 04 00	 ret	 4
?display_flight_path_marker_and_waypoint_information@@YGXH@Z ENDP ; display_flight_path_marker_and_waypoint_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_engine_torque@@YGXXZ
_TEXT	SEGMENT
_width$ = -44						; size = 4
_y_max$ = -40						; size = 4
_x_max$ = -36						; size = 4
_y_min$ = -32						; size = 4
_x_min$ = -28						; size = 4
_torque$ = -24						; size = 4
_s$ = -20						; size = 20
?display_engine_torque@@YGXXZ PROC			; display_engine_torque, COMDAT

; 1251 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1252 : 	char
; 1253 : 		s[20];
; 1254 : 
; 1255 : 	int
; 1256 : 		torque;
; 1257 : 
; 1258 : 	float
; 1259 : 		x_min,
; 1260 : 		y_min,
; 1261 : 		x_max,
; 1262 : 		y_max,
; 1263 : 		width;
; 1264 : 
; 1265 : 	torque = (int) current_flight_dynamics->combined_engine_torque.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 2c 88 8c
	24 00 00	 cvttss2si ecx, DWORD PTR [eax+9356]
  00016	89 4d e8	 mov	 DWORD PTR _torque$[ebp], ecx

; 1266 : 
; 1267 : 	sprintf (s, "%d%%", torque);

  00019	8b 45 e8	 mov	 eax, DWORD PTR _torque$[ebp]
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
  00022	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _sprintf
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1268 : 
; 1269 : 	if (draw_large_hud)

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00035	0f 84 c9 01 00
	00		 je	 $LN2@display_en

; 1270 : 	{
; 1271 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0003b	6a 05		 push	 5
  0003d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1272 : 
; 1273 : 		set_2d_mono_font_position (0.0, 0.7);

  00042	51		 push	 ecx
  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	51		 push	 ecx
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1274 : 
; 1275 : 		width = get_mono_font_string_width (s);

  0005e	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00067	d9 5d d4	 fstp	 DWORD PTR _width$[ebp]

; 1276 : 
; 1277 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, 0.0);

  0006a	51		 push	 ecx
  0006b	0f 57 c0	 xorps	 xmm0, xmm0
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _width$[ebp]
  00078	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0007f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0008b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00093	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00097	51		 push	 ecx
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1278 : 
; 1279 : 		get_mono_font_position (&x_min, &y_min);

  000a2	8d 45 e0	 lea	 eax, DWORD PTR _y_min$[ebp]
  000a5	50		 push	 eax
  000a6	8d 4d e4	 lea	 ecx, DWORD PTR _x_min$[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ?get_mono_font_position@@YGXPAM0@Z ; get_mono_font_position

; 1280 : 
; 1281 : 		print_mono_font_string (s);

  000af	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1282 : 
; 1283 : 		if (torque >= 98)

  000b8	83 7d e8 62	 cmp	 DWORD PTR _torque$[ebp], 98 ; 00000062H
  000bc	0f 8c 3d 01 00
	00		 jl	 $LN4@display_en

; 1284 : 		{
; 1285 : 			x_min -= 2.0;

  000c2	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  000c7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  000cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d3	f3 0f 11 45 e4	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 1286 : 			y_min -= 2.0;

  000d8	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _y_min$[ebp]
  000dd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 e0	 movss	 DWORD PTR _y_min$[ebp], xmm0

; 1287 : 
; 1288 : 			x_max = x_min + width + 3.0;

  000ee	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  000f3	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _width$[ebp]
  000f8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000fc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00104	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00108	f3 0f 11 45 dc	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 1289 : 			y_max = y_min + 12.0;

  0010d	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _y_min$[ebp]
  00112	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4028000000000000
  0011a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011e	f3 0f 11 45 d8	 movss	 DWORD PTR _y_max$[ebp], xmm0

; 1290 : 
; 1291 : 			draw_line (x_min, y_min, x_max, y_min, hud_colour);

  00123	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00128	50		 push	 eax
  00129	51		 push	 ecx
  0012a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	51		 push	 ecx
  00135	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	51		 push	 ecx
  00140	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	51		 push	 ecx
  0014b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00155	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1292 : 			draw_line (x_max, y_min, x_max, y_max, hud_colour);

  0015a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0015f	50		 push	 eax
  00160	51		 push	 ecx
  00161	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	51		 push	 ecx
  0016c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	51		 push	 ecx
  00177	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	51		 push	 ecx
  00182	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1293 : 			draw_line (x_max, y_max, x_min, y_max, hud_colour);

  00191	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00196	50		 push	 eax
  00197	51		 push	 ecx
  00198	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	51		 push	 ecx
  001a3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1294 : 			draw_line (x_min, y_max, x_min, y_min, hud_colour);

  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001cd	50		 push	 eax
  001ce	51		 push	 ecx
  001cf	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  001d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d9	51		 push	 ecx
  001da	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	51		 push	 ecx
  001e5	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	51		 push	 ecx
  001f0	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fa	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN4@display_en:

; 1295 : 		}
; 1296 : 	}
; 1297 : 	else

  001ff	e9 c4 01 00 00	 jmp	 $LN5@display_en
$LN2@display_en:

; 1298 : 	{
; 1299 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00204	6a 04		 push	 4
  00206	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1300 : 
; 1301 : 		set_2d_mono_font_position (0.0, 0.7);

  0020b	51		 push	 ecx
  0020c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	0f 57 c0	 xorps	 xmm0, xmm0
  0021d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00222	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1302 : 
; 1303 : 		width = get_mono_font_string_width (s);

  00227	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00230	d9 5d d4	 fstp	 DWORD PTR _width$[ebp]

; 1304 : 
; 1305 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, 0.0);

  00233	51		 push	 ecx
  00234	0f 57 c0	 xorps	 xmm0, xmm0
  00237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _width$[ebp]
  00241	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00248	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0024c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00254	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0025c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00260	51		 push	 ecx
  00261	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00266	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1306 : 
; 1307 : 		get_mono_font_position (&x_min, &y_min);

  0026b	8d 45 e0	 lea	 eax, DWORD PTR _y_min$[ebp]
  0026e	50		 push	 eax
  0026f	8d 4d e4	 lea	 ecx, DWORD PTR _x_min$[ebp]
  00272	51		 push	 ecx
  00273	e8 00 00 00 00	 call	 ?get_mono_font_position@@YGXPAM0@Z ; get_mono_font_position

; 1308 : 
; 1309 : 		print_mono_font_string (s);

  00278	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1310 : 
; 1311 : 		if (torque >= 98)

  00281	83 7d e8 62	 cmp	 DWORD PTR _torque$[ebp], 98 ; 00000062H
  00285	0f 8c 3d 01 00
	00		 jl	 $LN5@display_en

; 1312 : 		{
; 1313 : 			x_min -= 2.0;

  0028b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  00290	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00298	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029c	f3 0f 11 45 e4	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 1314 : 			y_min -= 2.0;

  002a1	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _y_min$[ebp]
  002a6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  002ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b2	f3 0f 11 45 e0	 movss	 DWORD PTR _y_min$[ebp], xmm0

; 1315 : 
; 1316 : 			x_max = x_min + width + 3.0;

  002b7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  002bc	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _width$[ebp]
  002c1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  002cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d1	f3 0f 11 45 dc	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 1317 : 			y_max = y_min + 10.0;

  002d6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _y_min$[ebp]
  002db	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  002e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e7	f3 0f 11 45 d8	 movss	 DWORD PTR _y_max$[ebp], xmm0

; 1318 : 
; 1319 : 			draw_line (x_min, y_min, x_max, y_min, hud_colour);

  002ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002f1	50		 push	 eax
  002f2	51		 push	 ecx
  002f3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	51		 push	 ecx
  002fe	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00308	51		 push	 ecx
  00309	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  0030e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00313	51		 push	 ecx
  00314	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00319	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1320 : 			draw_line (x_max, y_min, x_max, y_max, hud_colour);

  00323	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00328	50		 push	 eax
  00329	51		 push	 ecx
  0032a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0032f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00334	51		 push	 ecx
  00335	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  0033a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033f	51		 push	 ecx
  00340	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1321 : 			draw_line (x_max, y_max, x_min, y_max, hud_colour);

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0035f	50		 push	 eax
  00360	51		 push	 ecx
  00361	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	51		 push	 ecx
  0036c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	51		 push	 ecx
  00377	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0037c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00381	51		 push	 ecx
  00382	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00387	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 1322 : 			draw_line (x_min, y_max, x_min, y_min, hud_colour);

  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00396	50		 push	 eax
  00397	51		 push	 ecx
  00398	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	51		 push	 ecx
  003ae	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  003b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b8	51		 push	 ecx
  003b9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  003be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN5@display_en:

; 1323 : 		}
; 1324 : 	}
; 1325 : }

  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	5b		 pop	 ebx
  003cb	8b e5		 mov	 esp, ebp
  003cd	5d		 pop	 ebp
  003ce	c3		 ret	 0
?display_engine_torque@@YGXXZ ENDP			; display_engine_torque
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_rate_of_climb_scale@@YGXXZ
_TEXT	SEGMENT
tv163 = -96						; size = 8
tv164 = -88						; size = 8
_width$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_y$ = -4						; size = 4
?draw_rate_of_climb_scale@@YGXXZ PROC			; draw_rate_of_climb_scale, COMDAT

; 1157 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1158 : 	float
; 1159 : 		y,
; 1160 : 		i,
; 1161 : 		j,
; 1162 : 		width;
; 1163 : 
; 1164 : 	//
; 1165 : 	// draw scale
; 1166 : 	//
; 1167 : 
; 1168 : 	draw_2d_line (+0.800, +0.500, +0.800, -0.500, hud_colour);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001d	51		 push	 ecx
  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	51		 push	 ecx
  0002c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00034	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1169 : 
; 1170 : 	draw_2d_line (+0.800, +0.500, +0.850, +0.500, hud_colour);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00051	50		 push	 eax
  00052	51		 push	 ecx
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	51		 push	 ecx
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	51		 push	 ecx
  0006f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	51		 push	 ecx
  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1171 : 	draw_2d_line (+0.800, +0.400, +0.825, +0.400, hud_colour);

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00094	50		 push	 eax
  00095	51		 push	 ecx
  00096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	51		 push	 ecx
  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	51		 push	 ecx
  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	51		 push	 ecx
  000c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  000c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1172 : 	draw_2d_line (+0.800, +0.300, +0.825, +0.300, hud_colour);

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000d7	50		 push	 eax
  000d8	51		 push	 ecx
  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	51		 push	 ecx
  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	51		 push	 ecx
  000f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	51		 push	 ecx
  00103	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0010b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00110	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1173 : 	draw_2d_line (+0.800, +0.200, +0.825, +0.200, hud_colour);

  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0011a	50		 push	 eax
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00145	51		 push	 ecx
  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0014e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00153	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1174 : 	draw_2d_line (+0.800, +0.100, +0.825, +0.100, hud_colour);

  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0015d	50		 push	 eax
  0015e	51		 push	 ecx
  0015f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016c	51		 push	 ecx
  0016d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	51		 push	 ecx
  0017b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00183	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00188	51		 push	 ecx
  00189	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1175 : 	draw_2d_line (+0.800, +0.000, +0.850, +0.000, hud_colour);

  0019b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001a0	50		 push	 eax
  001a1	51		 push	 ecx
  001a2	0f 57 c0	 xorps	 xmm0, xmm0
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	51		 push	 ecx
  001ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	0f 57 c0	 xorps	 xmm0, xmm0
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1176 : 	draw_2d_line (+0.800, -0.100, +0.825, -0.100, hud_colour);

  001d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001d9	50		 push	 eax
  001da	51		 push	 ecx
  001db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	51		 push	 ecx
  001e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  001f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f6	51		 push	 ecx
  001f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	51		 push	 ecx
  00205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1177 : 	draw_2d_line (+0.800, -0.200, +0.825, -0.200, hud_colour);

  00217	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0021c	50		 push	 eax
  0021d	51		 push	 ecx
  0021e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00226	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022b	51		 push	 ecx
  0022c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  00234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00239	51		 push	 ecx
  0023a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00247	51		 push	 ecx
  00248	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00250	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00255	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1178 : 	draw_2d_line (+0.800, -0.300, +0.825, -0.300, hud_colour);

  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0025f	50		 push	 eax
  00260	51		 push	 ecx
  00261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	51		 push	 ecx
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	51		 push	 ecx
  0027d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	51		 push	 ecx
  0028b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00293	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00298	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1179 : 	draw_2d_line (+0.800, -0.400, +0.825, -0.400, hud_colour);

  0029d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002a2	50		 push	 eax
  002a3	51		 push	 ecx
  002a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  002ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b1	51		 push	 ecx
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f533333
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	51		 push	 ecx
  002c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  002c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cd	51		 push	 ecx
  002ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  002d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002db	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1180 : 	draw_2d_line (+0.800, -0.500, +0.850, -0.500, hud_colour);

  002e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002e5	50		 push	 eax
  002e6	51		 push	 ecx
  002e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f4	51		 push	 ecx
  002f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  002fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00302	51		 push	 ecx
  00303	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0030b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00310	51		 push	 ecx
  00311	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00319	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1181 : 
; 1182 : 	//
; 1183 : 	// get indicator position (fsd +/- 10m/s)
; 1184 : 	//
; 1185 : 
; 1186 : 	y = current_flight_dynamics->world_velocity_y.value;

  00323	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00328	f3 0f 10 80 14
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8468]
  00330	f3 0f 11 45 fc	 movss	 DWORD PTR _y$[ebp], xmm0

; 1187 : 
; 1188 : 	y = bound (y, -10.0, 10.0);

  00335	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0033a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  00342	66 0f 2f c8	 comisd	 xmm1, xmm0
  00346	76 0f		 jbe	 SHORT $LN7@draw_rate_
  00348	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  00350	f2 0f 11 45 a8	 movsd	 QWORD PTR tv164[ebp], xmm0
  00355	eb 32		 jmp	 SHORT $LN8@draw_rate_
$LN7@draw_rate_:
  00357	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0035c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  00364	76 0f		 jbe	 SHORT $LN5@draw_rate_
  00366	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  0036e	f2 0f 11 45 a0	 movsd	 QWORD PTR tv163[ebp], xmm0
  00373	eb 0a		 jmp	 SHORT $LN6@draw_rate_
$LN5@draw_rate_:
  00375	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0037a	f2 0f 11 45 a0	 movsd	 QWORD PTR tv163[ebp], xmm0
$LN6@draw_rate_:
  0037f	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv163[ebp]
  00384	f2 0f 11 45 a8	 movsd	 QWORD PTR tv164[ebp], xmm0
$LN8@draw_rate_:
  00389	f2 0f 5a 45 a8	 cvtsd2ss xmm0, QWORD PTR tv164[ebp]
  0038e	f3 0f 11 45 fc	 movss	 DWORD PTR _y$[ebp], xmm0

; 1189 : 
; 1190 : 	y *= 0.05;

  00393	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00398	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  003a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a4	f3 0f 11 45 fc	 movss	 DWORD PTR _y$[ebp], xmm0

; 1191 : 
; 1192 : 	//
; 1193 : 	// draw indicator and fsd values
; 1194 : 	//
; 1195 : 
; 1196 : 	draw_2d_line (0.8, y, 0.85, y, hud_colour);

  003a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  003ae	50		 push	 eax
  003af	51		 push	 ecx
  003b0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$[ebp]
  003b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ba	51		 push	 ecx
  003bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  003c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c8	51		 push	 ecx
  003c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$[ebp]
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	51		 push	 ecx
  003d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1197 : 
; 1198 : 	get_2d_float_screen_coordinates (0.85, y, &i, &j);

  003e6	8d 45 f4	 lea	 eax, DWORD PTR _j$[ebp]
  003e9	50		 push	 eax
  003ea	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  003ed	51		 push	 ecx
  003ee	51		 push	 ecx
  003ef	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$[ebp]
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1199 : 
; 1200 : 	if (draw_large_hud)

  0040c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00413	0f 84 f8 00 00
	00		 je	 $LN2@draw_rate_

; 1201 : 	{
; 1202 : 		draw_mono_sprite (large_hud_rate_of_climb_scale_pointer, i + 1.0, j, hud_colour);

  00419	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0041e	50		 push	 eax
  0041f	51		 push	 ecx
  00420	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _j$[ebp]
  00425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042a	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _i$[ebp]
  0042f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00437	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0043b	51		 push	 ecx
  0043c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00441	68 00 00 00 00	 push	 OFFSET ?large_hud_rate_of_climb_scale_pointer@@3PADA
  00446	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 1203 : 
; 1204 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  0044b	6a 04		 push	 4
  0044d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1205 : 
; 1206 : 		set_2d_mono_font_position (1.0, 0.5);

  00452	51		 push	 ecx
  00453	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0045b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00460	51		 push	 ecx
  00461	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00469	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1207 : 
; 1208 : 		width = get_mono_font_string_width ("10");

  00473	68 00 00 00 00	 push	 OFFSET ??_C@_02PKFBJPLJ@10@
  00478	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0047d	d9 5d f0	 fstp	 DWORD PTR _width$[ebp]

; 1209 : 
; 1210 : 		set_mono_font_rel_position (-width, -12.0);

  00480	51		 push	 ecx
  00481	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00489	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _width$[ebp]
  00493	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0049a	51		 push	 ecx
  0049b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1211 : 
; 1212 : 		print_mono_font_string ("10");

  004a5	68 00 00 00 00	 push	 OFFSET ??_C@_02PKFBJPLJ@10@
  004aa	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1213 : 
; 1214 : 		set_2d_mono_font_position (1.0, -0.5);

  004af	51		 push	 ecx
  004b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  004b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bd	51		 push	 ecx
  004be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1215 : 
; 1216 : 		width = get_mono_font_string_width ("-10");

  004d0	68 00 00 00 00	 push	 OFFSET ??_C@_03HGAMOOFE@?910@
  004d5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004da	d9 5d f0	 fstp	 DWORD PTR _width$[ebp]

; 1217 : 
; 1218 : 		set_mono_font_rel_position (-width, 6.0);

  004dd	51		 push	 ecx
  004de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c00000
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _width$[ebp]
  004f0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004f7	51		 push	 ecx
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1219 : 
; 1220 : 		print_mono_font_string ("-10");

  00502	68 00 00 00 00	 push	 OFFSET ??_C@_03HGAMOOFE@?910@
  00507	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1221 : 	}
; 1222 : 	else

  0050c	e9 f3 00 00 00	 jmp	 $LN3@draw_rate_
$LN2@draw_rate_:

; 1223 : 	{
; 1224 : 		draw_mono_sprite (small_hud_rate_of_climb_scale_pointer, i + 1.0, j, hud_colour);

  00511	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00516	50		 push	 eax
  00517	51		 push	 ecx
  00518	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _j$[ebp]
  0051d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00522	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _i$[ebp]
  00527	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0052f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00533	51		 push	 ecx
  00534	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00539	68 00 00 00 00	 push	 OFFSET ?small_hud_rate_of_climb_scale_pointer@@3PADA
  0053e	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 1225 : 
; 1226 : 		set_mono_font_type (MONO_FONT_TYPE_6X7);

  00543	6a 03		 push	 3
  00545	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1227 : 
; 1228 : 		set_2d_mono_font_position (1.0, 0.5);

  0054a	51		 push	 ecx
  0054b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00553	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00558	51		 push	 ecx
  00559	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00561	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00566	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1229 : 
; 1230 : 		width = get_mono_font_string_width ("10");

  0056b	68 00 00 00 00	 push	 OFFSET ??_C@_02PKFBJPLJ@10@
  00570	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00575	d9 5d f0	 fstp	 DWORD PTR _width$[ebp]

; 1231 : 
; 1232 : 		set_mono_font_rel_position (-width, -8.0);

  00578	51		 push	 ecx
  00579	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00581	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00586	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _width$[ebp]
  0058b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00592	51		 push	 ecx
  00593	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00598	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1233 : 
; 1234 : 		print_mono_font_string ("10");

  0059d	68 00 00 00 00	 push	 OFFSET ??_C@_02PKFBJPLJ@10@
  005a2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1235 : 
; 1236 : 		set_2d_mono_font_position (1.0, -0.5);

  005a7	51		 push	 ecx
  005a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  005b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b5	51		 push	 ecx
  005b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1237 : 
; 1238 : 		width = get_mono_font_string_width ("-10");

  005c8	68 00 00 00 00	 push	 OFFSET ??_C@_03HGAMOOFE@?910@
  005cd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  005d2	d9 5d f0	 fstp	 DWORD PTR _width$[ebp]

; 1239 : 
; 1240 : 		set_mono_font_rel_position (-width, 4.0);

  005d5	51		 push	 ecx
  005d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _width$[ebp]
  005e8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005ef	51		 push	 ecx
  005f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1241 : 
; 1242 : 		print_mono_font_string ("-10");

  005fa	68 00 00 00 00	 push	 OFFSET ??_C@_03HGAMOOFE@?910@
  005ff	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN3@draw_rate_:

; 1243 : 	}
; 1244 : }

  00604	5f		 pop	 edi
  00605	5e		 pop	 esi
  00606	5b		 pop	 ebx
  00607	8b e5		 mov	 esp, ebp
  00609	5d		 pop	 ebp
  0060a	c3		 ret	 0
?draw_rate_of_climb_scale@@YGXXZ ENDP			; draw_rate_of_climb_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_vertical_velocity@@YGXXZ
_TEXT	SEGMENT
tv210 = -108						; size = 8
tv197 = -108						; size = 8
tv211 = -100						; size = 8
tv198 = -100						; size = 8
_y_offset$1 = -28					; size = 4
_vv$ = -24						; size = 4
_s$ = -20						; size = 20
?display_vertical_velocity@@YGXXZ PROC			; display_vertical_velocity, COMDAT

; 1075 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1076 : 	char s[20];
; 1077 : 	float vv = kilometres_per_hour(current_flight_dynamics->world_velocity_y.value);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 14
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8468]
  00016	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  0001e	f3 0f 11 45 e8	 movss	 DWORD PTR _vv$[ebp], xmm0

; 1078 : 	
; 1079 : 	sprintf (s, "%02d", abs((int)vv));;

  00023	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _vv$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _abs
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00037	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _sprintf
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1080 : 
; 1081 : 	set_2d_mono_font_position (0.6, -0.07);

  00043	51		 push	 ecx
  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	51		 push	 ecx
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1082 : 	if (draw_large_hud)

  00064	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  0006b	74 2a		 je	 SHORT $LN2@display_ve

; 1083 : 	{
; 1084 : 		set_mono_font_type (MONO_FONT_TYPE_8X14);

  0006d	6a 06		 push	 6
  0006f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1085 : 		set_mono_font_rel_position (5.0, -4.0);

  00074	51		 push	 ecx
  00075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1086 : 	}
; 1087 : 	else

  00095	eb 23		 jmp	 SHORT $LN3@display_ve
$LN2@display_ve:

; 1088 : 	{
; 1089 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00097	6a 01		 push	 1
  00099	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1090 : 		set_mono_font_rel_position (0.0, -3.0);

  0009e	51		 push	 ecx
  0009f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	51		 push	 ecx
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN3@display_ve:

; 1091 : 	}
; 1092 : 
; 1093 : 	if (vv >= 0.0)

  000ba	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _vv$[ebp]
  000bf	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000c7	72 0c		 jb	 SHORT $LN4@display_ve

; 1094 : 		print_mono_font_string("+");

  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_01MIFGBAGJ@?$CL@
  000ce	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1095 : 	else

  000d3	eb 0a		 jmp	 SHORT $LN5@display_ve
$LN4@display_ve:

; 1096 : 		print_mono_font_string("-");

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_01JOAMLHOP@?9@
  000da	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@display_ve:

; 1097 : 
; 1098 : 	set_2d_mono_font_position (0.7, -0.07);

  000df	51		 push	 ecx
  000e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	51		 push	 ecx
  000ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  000f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1099 : 	if (draw_large_hud)

  00100	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00107	74 25		 je	 SHORT $LN6@display_ve

; 1100 : 	{
; 1101 : 		set_mono_font_type (MONO_FONT_TYPE_10X16);

  00109	6a 07		 push	 7
  0010b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1102 : 		set_mono_font_rel_position (0.0, -4.0);

  00110	51		 push	 ecx
  00111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00119	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011e	51		 push	 ecx
  0011f	0f 57 c0	 xorps	 xmm0, xmm0
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1103 : 	}
; 1104 : 	else

  0012c	eb 23		 jmp	 SHORT $LN7@display_ve
$LN6@display_ve:

; 1105 : 	{
; 1106 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  0012e	6a 04		 push	 4
  00130	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1107 : 		set_mono_font_rel_position (0.0, -4.0);

  00135	51		 push	 ecx
  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	51		 push	 ecx
  00144	0f 57 c0	 xorps	 xmm0, xmm0
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN7@display_ve:

; 1108 : 	}
; 1109 : 	
; 1110 : 	print_mono_font_string (s);

  00151	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1111 : 
; 1112 : 	// draw the scale
; 1113 : 	if (hud_mode != HUD_MODE_WEAPON)

  0015a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 2 ; hud_mode
  00161	0f 84 40 04 00
	00		 je	 $LN12@display_ve

; 1114 : 	{
; 1115 : 		float y_offset = vv * 0.01;

  00167	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _vv$[ebp]
  0016c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00174	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00178	f3 0f 11 45 e4	 movss	 DWORD PTR _y_offset$1[ebp], xmm0

; 1116 : 		
; 1117 : 		draw_2d_line(0.7, -0.2, 0.7, -0.8, hud_colour);

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00182	50		 push	 eax
  00183	51		 push	 ecx
  00184	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0018c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00191	51		 push	 ecx
  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1118 : 
; 1119 : 		// the vertical tick marks
; 1120 : 		draw_2d_line(0.7, -0.2, 0.725, -0.2, hud_colour);

  001c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001c5	50		 push	 eax
  001c6	51		 push	 ecx
  001c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  001cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d4	51		 push	 ecx
  001d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f39999a
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	51		 push	 ecx
  001e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	51		 push	 ecx
  001f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1121 : 		draw_2d_line(0.7, -0.3, 0.725, -0.3, hud_colour);

  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00208	50		 push	 eax
  00209	51		 push	 ecx
  0020a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00212	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00217	51		 push	 ecx
  00218	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f39999a
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	51		 push	 ecx
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	51		 push	 ecx
  00234	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0023c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00241	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1122 : 		draw_2d_line(0.7, -0.4, 0.725, -0.4, hud_colour);

  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0024b	50		 push	 eax
  0024c	51		 push	 ecx
  0024d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00255	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025a	51		 push	 ecx
  0025b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f39999a
  00263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00268	51		 push	 ecx
  00269	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00271	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00276	51		 push	 ecx
  00277	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1123 : 		draw_2d_line(0.7, -0.5, 0.75, -0.5, hud_colour);

  00289	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0028e	50		 push	 eax
  0028f	51		 push	 ecx
  00290	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	51		 push	 ecx
  0029e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  002a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ab	51		 push	 ecx
  002ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	51		 push	 ecx
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1124 : 		draw_2d_line(0.7, -0.6, 0.725, -0.6, hud_colour);

  002cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002d1	50		 push	 eax
  002d2	51		 push	 ecx
  002d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e0	51		 push	 ecx
  002e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f39999a
  002e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ee	51		 push	 ecx
  002ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fc	51		 push	 ecx
  002fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1125 : 		draw_2d_line(0.7, -0.7, 0.725, -0.7, hud_colour);

  0030f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00314	50		 push	 eax
  00315	51		 push	 ecx
  00316	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0031e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00323	51		 push	 ecx
  00324	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f39999a
  0032c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00331	51		 push	 ecx
  00332	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0033a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033f	51		 push	 ecx
  00340	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00348	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1126 : 		draw_2d_line(0.7, -0.8, 0.725, -0.8, hud_colour);

  00352	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00357	50		 push	 eax
  00358	51		 push	 ecx
  00359	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00361	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00366	51		 push	 ecx
  00367	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f39999a
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	51		 push	 ecx
  00375	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0037d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00382	51		 push	 ecx
  00383	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0038b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00390	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1127 : 		
; 1128 : 		if (draw_large_hud)

  00395	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  0039c	74 09		 je	 SHORT $LN9@display_ve

; 1129 : 			set_mono_font_type(MONO_FONT_TYPE_6X10);

  0039e	6a 04		 push	 4
  003a0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1130 : 		else

  003a5	eb 07		 jmp	 SHORT $LN10@display_ve
$LN9@display_ve:

; 1131 : 			set_mono_font_type(MONO_FONT_TYPE_3X6);

  003a7	6a 00		 push	 0
  003a9	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN10@display_ve:

; 1132 : 			
; 1133 : 		set_2d_mono_font_position(0.75, -0.2);

  003ae	51		 push	 ecx
  003af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  003b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bc	51		 push	 ecx
  003bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1134 : 		set_mono_font_rel_position (0.0, -3.0);

  003cf	51		 push	 ecx
  003d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	51		 push	 ecx
  003de	0f 57 c0	 xorps	 xmm0, xmm0
  003e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1135 : 		print_mono_font_string("30");

  003eb	68 00 00 00 00	 push	 OFFSET ??_C@_02PJNFELNH@30@
  003f0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1136 : 		
; 1137 : 		set_2d_mono_font_position(0.75, -0.5);

  003f5	51		 push	 ecx
  003f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  003fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00403	51		 push	 ecx
  00404	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  0040c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00411	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1138 : 		set_mono_font_rel_position (0.0, -3.0);

  00416	51		 push	 ecx
  00417	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0041f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00424	51		 push	 ecx
  00425	0f 57 c0	 xorps	 xmm0, xmm0
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1139 : 		print_mono_font_string("0");

  00432	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00437	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1140 : 
; 1141 : 		set_2d_mono_font_position(0.75, -0.8);

  0043c	51		 push	 ecx
  0043d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	51		 push	 ecx
  0044b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  00453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00458	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1142 : 		set_mono_font_rel_position (0.0, -3.0);

  0045d	51		 push	 ecx
  0045e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046b	51		 push	 ecx
  0046c	0f 57 c0	 xorps	 xmm0, xmm0
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1143 : 		print_mono_font_string("30");

  00479	68 00 00 00 00	 push	 OFFSET ??_C@_02PJNFELNH@30@
  0047e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1144 : 
; 1145 : 		if (draw_large_hud)

  00483	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  0048a	0f 84 8e 00 00
	00		 je	 $LN11@display_ve

; 1146 : 			draw_2d_mono_sprite(large_right_carat, 0.7, -0.5 + bound(y_offset, -0.3, 0.3), hud_colour);

  00490	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y_offset$1[ebp]
  00495	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd3333333333333
  0049d	66 0f 2f c8	 comisd	 xmm1, xmm0
  004a1	76 0f		 jbe	 SHORT $LN16@display_ve
  004a3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfd3333333333333
  004ab	f2 0f 11 45 9c	 movsd	 QWORD PTR tv198[ebp], xmm0
  004b0	eb 32		 jmp	 SHORT $LN17@display_ve
$LN16@display_ve:
  004b2	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y_offset$1[ebp]
  004b7	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd3333333333333
  004bf	76 0f		 jbe	 SHORT $LN14@display_ve
  004c1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd3333333333333
  004c9	f2 0f 11 45 94	 movsd	 QWORD PTR tv197[ebp], xmm0
  004ce	eb 0a		 jmp	 SHORT $LN15@display_ve
$LN14@display_ve:
  004d0	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y_offset$1[ebp]
  004d5	f2 0f 11 45 94	 movsd	 QWORD PTR tv197[ebp], xmm0
$LN15@display_ve:
  004da	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv197[ebp]
  004df	f2 0f 11 45 9c	 movsd	 QWORD PTR tv198[ebp], xmm0
$LN17@display_ve:
  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  004e9	50		 push	 eax
  004ea	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe0000000000000
  004f2	f2 0f 58 45 9c	 addsd	 xmm0, QWORD PTR tv198[ebp]
  004f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00501	51		 push	 ecx
  00502	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0050a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050f	68 00 00 00 00	 push	 OFFSET ?large_right_carat@@3PADA
  00514	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1147 : 		else

  00519	e9 89 00 00 00	 jmp	 $LN12@display_ve
$LN11@display_ve:

; 1148 : 			draw_2d_mono_sprite(small_right_carat, 0.7, -0.5 + bound(y_offset, -0.3, 0.3), hud_colour);

  0051e	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y_offset$1[ebp]
  00523	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd3333333333333
  0052b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0052f	76 0f		 jbe	 SHORT $LN20@display_ve
  00531	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfd3333333333333
  00539	f2 0f 11 45 9c	 movsd	 QWORD PTR tv211[ebp], xmm0
  0053e	eb 32		 jmp	 SHORT $LN21@display_ve
$LN20@display_ve:
  00540	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y_offset$1[ebp]
  00545	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd3333333333333
  0054d	76 0f		 jbe	 SHORT $LN18@display_ve
  0054f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd3333333333333
  00557	f2 0f 11 45 94	 movsd	 QWORD PTR tv210[ebp], xmm0
  0055c	eb 0a		 jmp	 SHORT $LN19@display_ve
$LN18@display_ve:
  0055e	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y_offset$1[ebp]
  00563	f2 0f 11 45 94	 movsd	 QWORD PTR tv210[ebp], xmm0
$LN19@display_ve:
  00568	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv210[ebp]
  0056d	f2 0f 11 45 9c	 movsd	 QWORD PTR tv211[ebp], xmm0
$LN21@display_ve:
  00572	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00577	50		 push	 eax
  00578	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00580	f2 0f 58 45 9c	 addsd	 xmm0, QWORD PTR tv211[ebp]
  00585	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058f	51		 push	 ecx
  00590	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00598	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059d	68 00 00 00 00	 push	 OFFSET ?small_right_carat@@3PADA
  005a2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN12@display_ve:

; 1149 : 	}
; 1150 : }

  005a7	5f		 pop	 edi
  005a8	5e		 pop	 esi
  005a9	5b		 pop	 ebx
  005aa	8b e5		 mov	 esp, ebp
  005ac	5d		 pop	 ebp
  005ad	c3		 ret	 0
?display_vertical_velocity@@YGXXZ ENDP			; display_vertical_velocity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_g_scale@@YGXXZ
_TEXT	SEGMENT
tv78 = -84						; size = 8
tv79 = -76						; size = 8
_y_offset$ = -4						; size = 4
?display_g_scale@@YGXXZ PROC				; display_g_scale, COMDAT

; 1038 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1039 : 	float y_offset = bound(current_flight_dynamics->g_force.value * 0.1, -0.1, 0.35);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 5a 80 5c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9308]
  00016	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0001e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfb999999999999a
  00026	66 0f 2f c8	 comisd	 xmm1, xmm0
  0002a	76 0f		 jbe	 SHORT $LN9@display_g_
  0002c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfb999999999999a
  00034	f2 0f 11 45 b4	 movsd	 QWORD PTR tv79[ebp], xmm0
  00039	eb 54		 jmp	 SHORT $LN10@display_g_
$LN9@display_g_:
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00041	f3 0f 5a 81 5c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+9308]
  00049	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00051	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd6666666666666
  00059	76 0f		 jbe	 SHORT $LN7@display_g_
  0005b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd6666666666666
  00063	f2 0f 11 45 ac	 movsd	 QWORD PTR tv78[ebp], xmm0
  00068	eb 1b		 jmp	 SHORT $LN8@display_g_
$LN7@display_g_:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00070	f3 0f 5a 82 5c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [edx+9308]
  00078	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00080	f2 0f 11 45 ac	 movsd	 QWORD PTR tv78[ebp], xmm0
$LN8@display_g_:
  00085	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv78[ebp]
  0008a	f2 0f 11 45 b4	 movsd	 QWORD PTR tv79[ebp], xmm0
$LN10@display_g_:
  0008f	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv79[ebp]
  00094	f3 0f 11 45 fc	 movss	 DWORD PTR _y_offset$[ebp], xmm0

; 1040 : 	
; 1041 : 	draw_2d_line(-0.7, -0.2, -0.7, -0.65, hud_colour);

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0009e	50		 push	 eax
  0009f	51		 push	 ecx
  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	51		 push	 ecx
  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  000c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c9	51		 push	 ecx
  000ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1042 : 
; 1043 : 	draw_2d_line(-0.7, -0.25, -0.725, -0.25, hud_colour);

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	51		 push	 ecx
  000f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  000f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fe	51		 push	 ecx
  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	51		 push	 ecx
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1044 : 	draw_2d_line(-0.7, -0.55, -0.725, -0.55, hud_colour);

  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	51		 push	 ecx
  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	51		 push	 ecx
  00142	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  0014a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1045 : 	draw_2d_line(-0.7, -0.65, -0.725, -0.65, hud_colour);

  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00167	50		 push	 eax
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	51		 push	 ecx
  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1046 : 	
; 1047 : 	if (draw_large_hud)

  001a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  001ac	74 09		 je	 SHORT $LN2@display_g_

; 1048 : 		set_mono_font_type(MONO_FONT_TYPE_6X10);

  001ae	6a 04		 push	 4
  001b0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1049 : 	else

  001b5	eb 07		 jmp	 SHORT $LN3@display_g_
$LN2@display_g_:

; 1050 : 		set_mono_font_type(MONO_FONT_TYPE_3X6);

  001b7	6a 00		 push	 0
  001b9	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@display_g_:

; 1051 : 
; 1052 : 	set_2d_mono_font_position(-0.78, -0.25);

  001be	51		 push	 ecx
  001bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	51		 push	 ecx
  001cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1053 : 	set_mono_font_rel_position (0.0, -3.0);

  001df	51		 push	 ecx
  001e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  001e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ed	51		 push	 ecx
  001ee	0f 57 c0	 xorps	 xmm0, xmm0
  001f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1054 : 	print_mono_font_string("3");

  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_01EKENIIDA@3@
  00200	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1055 : 	
; 1056 : 	set_2d_mono_font_position(-0.78, -0.55);

  00205	51		 push	 ecx
  00206	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  0020e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00213	51		 push	 ecx
  00214	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0021c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00221	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1057 : 	set_mono_font_rel_position (0.0, -3.0);

  00226	51		 push	 ecx
  00227	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0022f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00234	51		 push	 ecx
  00235	0f 57 c0	 xorps	 xmm0, xmm0
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1058 : 	print_mono_font_string("0");

  00242	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00247	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1059 : 
; 1060 : 	set_2d_mono_font_position(-0.78, -0.65);

  0024c	51		 push	 ecx
  0024d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00255	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025a	51		 push	 ecx
  0025b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00268	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1061 : 	set_mono_font_rel_position (0.0, -3.0);

  0026d	51		 push	 ecx
  0026e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027b	51		 push	 ecx
  0027c	0f 57 c0	 xorps	 xmm0, xmm0
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1062 : 	print_mono_font_string("1");

  00289	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  0028e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1063 : 
; 1064 : 	if (draw_large_hud)

  00293	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  0029a	74 37		 je	 SHORT $LN4@display_g_

; 1065 : 		draw_2d_mono_sprite(large_left_carat, -0.7, -0.55 + y_offset, hud_colour);

  0029c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002a1	50		 push	 eax
  002a2	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_offset$[ebp]
  002a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe199999999999a
  002af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b3	51		 push	 ecx
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	51		 push	 ecx
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	68 00 00 00 00	 push	 OFFSET ?large_left_carat@@3PADA
  002cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1066 : 	else

  002d1	eb 35		 jmp	 SHORT $LN5@display_g_
$LN4@display_g_:

; 1067 : 		draw_2d_mono_sprite(small_left_carat, -0.7, -0.55 + y_offset, hud_colour);

  002d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002d8	50		 push	 eax
  002d9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_offset$[ebp]
  002de	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe199999999999a
  002e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ea	51		 push	 ecx
  002eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f0	51		 push	 ecx
  002f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fe	68 00 00 00 00	 push	 OFFSET ?small_left_carat@@3PADA
  00303	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN5@display_g_:

; 1068 : }

  00308	5f		 pop	 edi
  00309	5e		 pop	 esi
  0030a	5b		 pop	 ebx
  0030b	8b e5		 mov	 esp, ebp
  0030d	5d		 pop	 ebp
  0030e	c3		 ret	 0
?display_g_scale@@YGXXZ ENDP				; display_g_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_altitude@@YGXXZ
_TEXT	SEGMENT
_s$ = -24						; size = 20
_altitude$ = -4						; size = 4
?display_altitude@@YGXXZ PROC				; display_altitude, COMDAT

; 987  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 988  : 	float altitude = current_flight_dynamics->radar_altitude.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _altitude$[ebp], xmm0

; 989  : 	char
; 990  : 		s[20];
; 991  : 
; 992  : 	if (altitude < 300.0)

  0001b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  00020	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4072c00000000000
  00028	66 0f 2f c8	 comisd	 xmm1, xmm0
  0002c	0f 86 a9 00 00
	00		 jbe	 $LN2@display_al

; 993  : 	{
; 994  : 		if (altitude <= 50.0)

  00032	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  00037	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  0003f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00043	72 10		 jb	 SHORT $LN4@display_al

; 995  : 			draw_altitude_scale(altitude);

  00045	51		 push	 ecx
  00046	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _altitude$[ebp]
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 ?draw_altitude_scale@@YGXM@Z ; draw_altitude_scale
$LN4@display_al:

; 996  : 		
; 997  : 		sprintf (s, "%03d", (int) current_flight_dynamics->radar_altitude.value);

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0005a	f3 0f 2c 88 44
	24 00 00	 cvttss2si ecx, DWORD PTR [eax+9284]
  00062	51		 push	 ecx
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00068	8d 55 e8	 lea	 edx, DWORD PTR _s$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _sprintf
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 998  : 		
; 999  : 		if (draw_large_hud)

  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  0007b	74 2a		 je	 SHORT $LN5@display_al

; 1000 : 		{
; 1001 : 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  0007d	6a 05		 push	 5
  0007f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1002 : 			set_2d_mono_font_position (0.87, 0.95);			

  00084	51		 push	 ecx
  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	51		 push	 ecx
  00093	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5eb852
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1003 : 		}
; 1004 : 		else

  000a5	eb 28		 jmp	 SHORT $LN6@display_al
$LN5@display_al:

; 1005 : 		{
; 1006 : 			set_mono_font_type (MONO_FONT_TYPE_5X7);

  000a7	6a 01		 push	 1
  000a9	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1007 : 			set_2d_mono_font_position (0.9, 0.95);

  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	51		 push	 ecx
  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position
$LN6@display_al:

; 1008 : 		}
; 1009 : 
; 1010 : 		print_mono_font_string("R");

  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_01DGKLNCNG@R@
  000d4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1011 : 	}
; 1012 : 	else

  000d9	eb 36		 jmp	 SHORT $LN3@display_al
$LN2@display_al:

; 1013 : 	{
; 1014 : 		sprintf (s, "%04d", 10 * (((int)(current_flight_dynamics->barometric_altitude.value + 5.0)) / 10));

  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000e0	f3 0f 5a 80 2c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9260]
  000e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  000f0	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000f4	99		 cdq
  000f5	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000fa	f7 f9		 idiv	 ecx
  000fc	6b d0 0a	 imul	 edx, eax, 10
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  00105	8d 45 e8	 lea	 eax, DWORD PTR _s$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _sprintf
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@display_al:

; 1015 : 	}
; 1016 : 
; 1017 : 	if (draw_large_hud)

  00111	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00118	74 4b		 je	 SHORT $LN7@display_al

; 1018 : 	{
; 1019 : 		set_mono_font_type (MONO_FONT_TYPE_10X16);

  0011a	6a 07		 push	 7
  0011c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1020 : 		set_2d_mono_font_position (0.8, 0.95);

  00121	51		 push	 ecx
  00122	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	51		 push	 ecx
  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1021 : 		set_mono_font_rel_position (-25.0, -4.0);

  00142	51		 push	 ecx
  00143	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0014b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00150	51		 push	 ecx
  00151	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1022 : 	}
; 1023 : 	else

  00163	eb 49		 jmp	 SHORT $LN8@display_al
$LN7@display_al:

; 1024 : 	{
; 1025 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00165	6a 04		 push	 4
  00167	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1026 : 		set_2d_mono_font_position (0.8, 0.9);

  0016c	51		 push	 ecx
  0016d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	51		 push	 ecx
  0017b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00183	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00188	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1027 : 		set_mono_font_rel_position (-15.0, -5.0);

  0018d	51		 push	 ecx
  0018e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  00196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019b	51		 push	 ecx
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1700000
  001a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN8@display_al:

; 1028 : 	}
; 1029 : 
; 1030 : 	print_mono_font_string (s);

  001ae	8d 45 e8	 lea	 eax, DWORD PTR _s$[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1031 : }

  001b7	5f		 pop	 edi
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx
  001ba	8b e5		 mov	 esp, ebp
  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
?display_altitude@@YGXXZ ENDP				; display_altitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_altitude_scale@@YGXM@Z
_TEXT	SEGMENT
_y_offset$ = -4						; size = 4
_altitude$ = 8						; size = 4
?draw_altitude_scale@@YGXM@Z PROC			; draw_altitude_scale, COMDAT

; 957  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 958  : 	float y_offset = altitude * 0.016;

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  0000e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f90624dd2f1a9fc
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 45 fc	 movss	 DWORD PTR _y_offset$[ebp], xmm0

; 959  : 	
; 960  : 	draw_2d_line(0.55, 0.0, 0.55, 0.8, hud_colour);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00024	50		 push	 eax
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	0f 57 c0	 xorps	 xmm0, xmm0
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	51		 push	 ecx
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 961  : 	
; 962  : 	// the vertical tick marks
; 963  : 	draw_2d_line(0.525, 0.0, 0.575, 0.0, hud_colour);

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00062	50		 push	 eax
  00063	51		 push	 ecx
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	51		 push	 ecx
  0006d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	51		 push	 ecx
  0007b	0f 57 c0	 xorps	 xmm0, xmm0
  0007e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f066666
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 964  : 	draw_2d_line(0.55, 0.16, 0.575, 0.16, hud_colour);

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0009b	50		 push	 eax
  0009c	51		 push	 ecx
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	51		 push	 ecx
  000ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	51		 push	 ecx
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	51		 push	 ecx
  000c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  000cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 965  : 	draw_2d_line(0.55, 0.32, 0.575, 0.32, hud_colour);

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000de	50		 push	 eax
  000df	51		 push	 ecx
  000e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea3d70a
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	51		 push	 ecx
  000ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  000f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fb	51		 push	 ecx
  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea3d70a
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	51		 push	 ecx
  0010a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 966  : 	draw_2d_line(0.55, 0.48, 0.575, 0.48, hud_colour);

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00121	50		 push	 eax
  00122	51		 push	 ecx
  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  0012b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00130	51		 push	 ecx
  00131	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  00139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013e	51		 push	 ecx
  0013f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	51		 push	 ecx
  0014d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 967  : 	draw_2d_line(0.55, 0.64, 0.575, 0.64, hud_colour);

  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00164	50		 push	 eax
  00165	51		 push	 ecx
  00166	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f23d70a
  0016e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00173	51		 push	 ecx
  00174	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	51		 push	 ecx
  00182	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f23d70a
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 968  : 	draw_2d_line(0.55, 0.80, 0.575, 0.80, hud_colour);

  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001a7	50		 push	 eax
  001a8	51		 push	 ecx
  001a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  001b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b6	51		 push	 ecx
  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	51		 push	 ecx
  001c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  001cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d2	51		 push	 ecx
  001d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 969  : 	
; 970  : 	if (draw_large_hud)

  001e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  001ec	74 09		 je	 SHORT $LN2@draw_altit

; 971  : 		set_mono_font_type(MONO_FONT_TYPE_6X10);

  001ee	6a 04		 push	 4
  001f0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 972  : 	else

  001f5	eb 07		 jmp	 SHORT $LN3@draw_altit
$LN2@draw_altit:

; 973  : 		set_mono_font_type(MONO_FONT_TYPE_5X7);

  001f7	6a 01		 push	 1
  001f9	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_altit:

; 974  : 
; 975  : 	set_2d_mono_font_position(0.6, 0.8);

  001fe	51		 push	 ecx
  001ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	51		 push	 ecx
  0020d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 976  : 	set_mono_font_rel_position (0.0, -2.0);

  0021f	51		 push	 ecx
  00220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	51		 push	 ecx
  0022e	0f 57 c0	 xorps	 xmm0, xmm0
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 977  : 
; 978  : 	print_mono_font_string("50");

  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_02PNFIDHGF@50@
  00240	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 979  : 	
; 980  : 	if (draw_large_hud)

  00245	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  0024c	74 2b		 je	 SHORT $LN4@draw_altit

; 981  : 		draw_2d_mono_sprite(large_right_carat, 0.55, y_offset, hud_colour);

  0024e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00253	50		 push	 eax
  00254	51		 push	 ecx
  00255	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_offset$[ebp]
  0025a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025f	51		 push	 ecx
  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00268	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026d	68 00 00 00 00	 push	 OFFSET ?large_right_carat@@3PADA
  00272	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 982  : 	else

  00277	eb 29		 jmp	 SHORT $LN5@draw_altit
$LN4@draw_altit:

; 983  : 		draw_2d_mono_sprite(small_right_carat, 0.55, y_offset, hud_colour);

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0027e	50		 push	 eax
  0027f	51		 push	 ecx
  00280	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_offset$[ebp]
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	51		 push	 ecx
  0028b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00293	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00298	68 00 00 00 00	 push	 OFFSET ?small_right_carat@@3PADA
  0029d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN5@draw_altit:

; 984  : }

  002a2	5f		 pop	 edi
  002a3	5e		 pop	 esi
  002a4	5b		 pop	 ebx
  002a5	8b e5		 mov	 esp, ebp
  002a7	5d		 pop	 ebp
  002a8	c2 04 00	 ret	 4
?draw_altitude_scale@@YGXM@Z ENDP			; draw_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_pitch_scale@@YGXXZ
_TEXT	SEGMENT
tv130 = -124						; size = 4
tv78 = -124						; size = 4
tv90 = -120						; size = 4
tv70 = -120						; size = 4
_pnum$1 = -52						; size = 4
_s$ = -48						; size = 20
_int_pitch_step_10$ = -28				; size = 4
_loop$ = -24						; size = 4
_width$ = -20						; size = 4
_y$ = -16						; size = 4
_mod_pitch_step_10$ = -12				; size = 4
_roll$ = -8						; size = 4
_pitch$ = -4						; size = 4
?draw_pitch_scale@@YGXXZ PROC				; draw_pitch_scale, COMDAT

; 835  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  : 	float
; 837  : 		pitch,
; 838  : 		roll,
; 839  : 		mod_pitch_step_10,
; 840  : 		y,
; 841  : 		width;
; 842  : 
; 843  : 	int
; 844  : 		loop,
; 845  : 		int_pitch_step_10;
; 846  : 
; 847  : 	char
; 848  : 		s[20];
; 849  : 
; 850  : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN16@draw_pitch
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d 88	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN17@draw_pitch
$LN16@draw_pitch:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_scale@@YGXXZ@4JA
  00024	83 c2 0f	 add	 edx, 15			; 0000000fH
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN17@draw_pitch:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN18@draw_pitch
  00048	c7 45 84 71 00
	00 00		 mov	 DWORD PTR tv78[ebp], 113 ; 00000071H
  0004f	eb 21		 jmp	 SHORT $LN19@draw_pitch
$LN18@draw_pitch:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_scale@@YGXXZ@4JA
  00057	83 c2 0f	 add	 edx, 15			; 0000000fH
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN19@draw_pitch:
  00072	6a 71		 push	 113			; 00000071H
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007a	51		 push	 ecx
  0007b	69 55 88 bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  00082	8b 45 84	 mov	 eax, DWORD PTR tv78[ebp]
  00085	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0008c	ff d1		 call	 ecx
  0008e	d9 5d f8	 fstp	 DWORD PTR _roll$[ebp]

; 851  : 	pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00098	74 0c		 je	 SHORT $LN20@draw_pitch
  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	89 4d 88	 mov	 DWORD PTR tv90[ebp], ecx
  000a4	eb 21		 jmp	 SHORT $LN21@draw_pitch
$LN20@draw_pitch:
  000a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_scale@@YGXXZ@4JA
  000ac	83 c2 10	 add	 edx, 16			; 00000010H
  000af	52		 push	 edx
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c0	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN21@draw_pitch:
  000c7	b9 01 00 00 00	 mov	 ecx, 1
  000cc	85 c9		 test	 ecx, ecx
  000ce	74 09		 je	 SHORT $LN22@draw_pitch
  000d0	c7 45 84 54 00
	00 00		 mov	 DWORD PTR tv130[ebp], 84 ; 00000054H
  000d7	eb 21		 jmp	 SHORT $LN23@draw_pitch
$LN22@draw_pitch:
  000d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_scale@@YGXXZ@4JA
  000df	83 c2 10	 add	 edx, 16			; 00000010H
  000e2	52		 push	 edx
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f3	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN23@draw_pitch:
  000fa	6a 54		 push	 84			; 00000054H
  000fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00102	51		 push	 ecx
  00103	69 55 88 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  0010a	8b 45 84	 mov	 eax, DWORD PTR tv130[ebp]
  0010d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00114	ff d1		 call	 ecx
  00116	d9 5d fc	 fstp	 DWORD PTR _pitch$[ebp]

; 852  : 	pitch = deg(pitch);

  00119	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0011e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00126	f3 0f 11 45 fc	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 853  : 
; 854  : 	mod_pitch_step_10 = fmod (pitch, 10.0f);

  0012b	51		 push	 ecx
  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	51		 push	 ecx
  0013a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00149	d9 5d f4	 fstp	 DWORD PTR _mod_pitch_step_10$[ebp]

; 855  : 
; 856  : 	int_pitch_step_10 = ((int)(pitch * 0.1)) * 10;

  0014c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  00151	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00159	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0015d	6b c8 0a	 imul	 ecx, eax, 10
  00160	89 4d e4	 mov	 DWORD PTR _int_pitch_step_10$[ebp], ecx

; 857  : 	int_pitch_step_10 -= 30;

  00163	8b 45 e4	 mov	 eax, DWORD PTR _int_pitch_step_10$[ebp]
  00166	83 e8 1e	 sub	 eax, 30			; 0000001eH
  00169	89 45 e4	 mov	 DWORD PTR _int_pitch_step_10$[ebp], eax

; 858  : 
; 859  : 	y = - (30.0 + mod_pitch_step_10) * 0.04;

  0016c	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _mod_pitch_step_10$[ebp]
  00171	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  00179	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00180	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00188	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018c	f3 0f 11 45 f0	 movss	 DWORD PTR _y$[ebp], xmm0

; 860  : 
; 861  : 
; 862  : 	//
; 863  : 	// draw pitch scale ticks and pitch value
; 864  : 	//
; 865  : 
; 866  : 	for (loop = 0; loop < 6; loop++)

  00191	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00198	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  0019a	8b 45 e8	 mov	 eax, DWORD PTR _loop$[ebp]
  0019d	83 c0 01	 add	 eax, 1
  001a0	89 45 e8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  001a3	83 7d e8 06	 cmp	 DWORD PTR _loop$[ebp], 6
  001a7	0f 8d 87 02 00
	00		 jge	 $LN3@draw_pitch

; 867  : 	{
; 868  : 		//
; 869  : 		// major tick every 10 degrees
; 870  : 		//
; 871  : 
; 872  : 		if (y >= -0.6)

  001ad	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  001b2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfe3333333333333
  001ba	0f 82 b7 01 00
	00		 jb	 $LN7@draw_pitch

; 873  : 		{
; 874  : 			if (int_pitch_step_10 != 0)

  001c0	83 7d e4 00	 cmp	 DWORD PTR _int_pitch_step_10$[ebp], 0
  001c4	0f 84 6f 01 00
	00		 je	 $LN6@draw_pitch

; 875  : 			{
; 876  : 				int pnum;
; 877  : 				
; 878  : 				draw_line_func (-0.22, y, -0.07, y, hud_colour);

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001cf	50		 push	 eax
  001d0	51		 push	 ecx
  001d1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  001d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001db	51		 push	 ecx
  001dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  001e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e9	51		 push	 ecx
  001ea	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	51		 push	 ecx
  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  001fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 879  : 				draw_line_func (0.07, y, 0.22, y, hud_colour);

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0020d	50		 push	 eax
  0020e	51		 push	 ecx
  0020f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	51		 push	 ecx
  00228	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  0022d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00232	51		 push	 ecx
  00233	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d8f5c29
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 880  : 				
; 881  : 				if (draw_large_hud)

  00246	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  0024d	74 09		 je	 SHORT $LN8@draw_pitch

; 882  : 					set_mono_font_type (MONO_FONT_TYPE_6X10);

  0024f	6a 04		 push	 4
  00251	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 883  : 				else

  00256	eb 07		 jmp	 SHORT $LN9@draw_pitch
$LN8@draw_pitch:

; 884  : 					set_mono_font_type (MONO_FONT_TYPE_3X6);

  00258	6a 00		 push	 0
  0025a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN9@draw_pitch:

; 885  : 				set_2d_mono_font_position (0.0, y);

  0025f	51		 push	 ecx
  00260	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00265	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026a	51		 push	 ecx
  0026b	0f 57 c0	 xorps	 xmm0, xmm0
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 886  : 		
; 887  : 				pnum = abs(int_pitch_step_10);

  00278	8b 45 e4	 mov	 eax, DWORD PTR _int_pitch_step_10$[ebp]
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 _abs
  00281	83 c4 04	 add	 esp, 4
  00284	89 45 cc	 mov	 DWORD PTR _pnum$1[ebp], eax

; 888  : 				if (pnum > 90)

  00287	83 7d cc 5a	 cmp	 DWORD PTR _pnum$1[ebp], 90 ; 0000005aH
  0028b	7e 0b		 jle	 SHORT $LN10@draw_pitch

; 889  : 					pnum = 180 - pnum;

  0028d	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  00292	2b 45 cc	 sub	 eax, DWORD PTR _pnum$1[ebp]
  00295	89 45 cc	 mov	 DWORD PTR _pnum$1[ebp], eax
$LN10@draw_pitch:

; 890  : 				sprintf(s, "%2d", pnum);

  00298	8b 45 cc	 mov	 eax, DWORD PTR _pnum$1[ebp]
  0029b	50		 push	 eax
  0029c	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  002a1	8d 4d d0	 lea	 ecx, DWORD PTR _s$[ebp]
  002a4	51		 push	 ecx
  002a5	e8 00 00 00 00	 call	 _sprintf
  002aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 891  : 				width = get_mono_font_string_width(s);

  002ad	8d 45 d0	 lea	 eax, DWORD PTR _s$[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002b6	d9 5d ec	 fstp	 DWORD PTR _width$[ebp]

; 892  : 		
; 893  : 				if (draw_large_hud)

  002b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  002c0	74 37		 je	 SHORT $LN11@draw_pitch

; 894  : 					set_mono_font_rel_position ((-width * 0.5), -4.0);

  002c2	51		 push	 ecx
  002c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _width$[ebp]
  002d5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002dc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002e0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ec	51		 push	 ecx
  002ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 895  : 				else

  002f7	eb 35		 jmp	 SHORT $LN12@draw_pitch
$LN11@draw_pitch:

; 896  : 					set_mono_font_rel_position ((-width * 0.5), -2.0);

  002f9	51		 push	 ecx
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _width$[ebp]
  0030c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00313	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00317	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0031f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00323	51		 push	 ecx
  00324	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00329	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN12@draw_pitch:

; 897  : 		
; 898  : 				print_mono_font_string (s);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _s$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 899  : 			}
; 900  : 			else

  00337	eb 3e		 jmp	 SHORT $LN7@draw_pitch
$LN6@draw_pitch:

; 901  : 				draw_line_func(0.005, y, 0.005, y, hud_colour);

  00339	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0033e	50		 push	 eax
  0033f	51		 push	 ecx
  00340	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	51		 push	 ecx
  00359	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA
$LN7@draw_pitch:

; 902  : 		}
; 903  : 
; 904  : 		//
; 905  : 		// minor tick every 5 degrees
; 906  : 		//
; 907  : 
; 908  : 		if (y + 0.2 < 0.6 && y + 0.2 >= -0.6)

  00377	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0037c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00384	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe3333333333333
  0038c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00390	76 6d		 jbe	 SHORT $LN13@draw_pitch
  00392	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00397	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0039f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfe3333333333333
  003a7	72 56		 jb	 SHORT $LN13@draw_pitch

; 909  : 			draw_line_func(-0.05, y + 0.2, 0.05, y + 0.2, hud_colour);

  003a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  003ae	50		 push	 eax
  003af	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  003bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003c0	51		 push	 ecx
  003c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c6	51		 push	 ecx
  003c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  003cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d4	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003d9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  003e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003e5	51		 push	 ecx
  003e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003eb	51		 push	 ecx
  003ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA
$LN13@draw_pitch:

; 910  : 
; 911  : 
; 912  : 		//
; 913  : 		// next pitch value
; 914  : 		//
; 915  : 
; 916  : 		int_pitch_step_10 += 10;

  003ff	8b 45 e4	 mov	 eax, DWORD PTR _int_pitch_step_10$[ebp]
  00402	83 c0 0a	 add	 eax, 10			; 0000000aH
  00405	89 45 e4	 mov	 DWORD PTR _int_pitch_step_10$[ebp], eax

; 917  : 		y += 0.4;

  00408	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0040d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd999999999999a
  00415	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00419	f3 0f 11 45 f0	 movss	 DWORD PTR _y$[ebp], xmm0

; 918  : 		
; 919  : 		if (y > 0.6)

  0041e	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00423	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe3333333333333
  0042b	76 02		 jbe	 SHORT $LN14@draw_pitch

; 920  : 			break;

  0042d	eb 05		 jmp	 SHORT $LN3@draw_pitch
$LN14@draw_pitch:

; 921  : 	}

  0042f	e9 66 fd ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 922  : 	
; 923  : 	// draw datum
; 924  : 	set_2d_instance_rotation (hud_env, -roll);

  00434	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00439	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00440	51		 push	 ecx
  00441	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00446	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0044b	50		 push	 eax
  0044c	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 925  : 	
; 926  : 	draw_line_func(-0.2, 0.0, -0.08, 0.0, hud_colour);

  00451	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00456	50		 push	 eax
  00457	51		 push	 ecx
  00458	0f 57 c0	 xorps	 xmm0, xmm0
  0045b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00460	51		 push	 ecx
  00461	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  00469	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046e	51		 push	 ecx
  0046f	0f 57 c0	 xorps	 xmm0, xmm0
  00472	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00477	51		 push	 ecx
  00478	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00480	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00485	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 927  : 	draw_line_func(-0.08, 0.0, -0.08, -0.04, hud_colour);

  0048b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00490	50		 push	 eax
  00491	51		 push	 ecx
  00492	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0049a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049f	51		 push	 ecx
  004a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  004a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ad	51		 push	 ecx
  004ae	0f 57 c0	 xorps	 xmm0, xmm0
  004b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b6	51		 push	 ecx
  004b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  004bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 928  : 	draw_line_func(-0.08, -0.04, -0.04, -0.08, hud_colour);

  004ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  004cf	50		 push	 eax
  004d0	51		 push	 ecx
  004d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  004d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004de	51		 push	 ecx
  004df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  004e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ec	51		 push	 ecx
  004ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 929  : 	draw_line_func(-0.04, -0.08, 0.04, -0.08, hud_colour);

  0050e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00513	50		 push	 eax
  00514	51		 push	 ecx
  00515	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  0051d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00522	51		 push	 ecx
  00523	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  0052b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00530	51		 push	 ecx
  00531	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  00539	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053e	51		 push	 ecx
  0053f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054c	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 930  : 	draw_line_func(0.08, -0.04, 0.04, -0.08, hud_colour);

  00552	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00557	50		 push	 eax
  00558	51		 push	 ecx
  00559	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  00561	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00566	51		 push	 ecx
  00567	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  0056f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00574	51		 push	 ecx
  00575	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0057d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00582	51		 push	 ecx
  00583	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 931  : 	draw_line_func(0.08, 0.0, 0.08, -0.04, hud_colour);

  00596	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0059b	50		 push	 eax
  0059c	51		 push	 ecx
  0059d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  005a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005aa	51		 push	 ecx
  005ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  005b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b8	51		 push	 ecx
  005b9	0f 57 c0	 xorps	 xmm0, xmm0
  005bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c1	51		 push	 ecx
  005c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  005ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 932  : 	draw_line_func(0.2, 0.0, 0.08, 0.0, hud_colour);

  005d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  005da	50		 push	 eax
  005db	51		 push	 ecx
  005dc	0f 57 c0	 xorps	 xmm0, xmm0
  005df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e4	51		 push	 ecx
  005e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  005ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f2	51		 push	 ecx
  005f3	0f 57 c0	 xorps	 xmm0, xmm0
  005f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fb	51		 push	 ecx
  005fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00604	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00609	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 933  : 	
; 934  : 	reset_2d_instance (hud_env);

  0060f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00614	50		 push	 eax
  00615	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 935  : 	
; 936  : 	// draw bank angle marks
; 937  : 	draw_2d_line(0.35, 0.0, 0.45, 0.0, hud_colour);

  0061a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0061f	50		 push	 eax
  00620	51		 push	 ecx
  00621	0f 57 c0	 xorps	 xmm0, xmm0
  00624	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00629	51		 push	 ecx
  0062a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  00632	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00637	51		 push	 ecx
  00638	0f 57 c0	 xorps	 xmm0, xmm0
  0063b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00640	51		 push	 ecx
  00641	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00649	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 938  : 	draw_2d_line(-0.35, 0.0, -0.45, 0.0, hud_colour);

  00653	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00658	50		 push	 eax
  00659	51		 push	 ecx
  0065a	0f 57 c0	 xorps	 xmm0, xmm0
  0065d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00662	51		 push	 ecx
  00663	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  0066b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00670	51		 push	 ecx
  00671	0f 57 c0	 xorps	 xmm0, xmm0
  00674	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00679	51		 push	 ecx
  0067a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00682	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00687	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 939  : 	
; 940  : 	draw_2d_line(0.303, -0.175, 0.390, -0.225, hud_colour);

  0068c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00691	50		 push	 eax
  00692	51		 push	 ecx
  00693	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  0069b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a0	51		 push	 ecx
  006a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec7ae14
  006a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ae	51		 push	 ecx
  006af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  006b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bc	51		 push	 ecx
  006bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9b22d1
  006c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 941  : 	draw_2d_line(-0.303, -0.175, -0.390, -0.225, hud_colour);

  006cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  006d4	50		 push	 eax
  006d5	51		 push	 ecx
  006d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  006de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e3	51		 push	 ecx
  006e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec7ae14
  006ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f1	51		 push	 ecx
  006f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  006fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ff	51		 push	 ecx
  00700	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be9b22d1
  00708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 942  : 	draw_2d_line(0.175, -0.303, 0.225, -0.390, hud_colour);

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00717	50		 push	 eax
  00718	51		 push	 ecx
  00719	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec7ae14
  00721	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00726	51		 push	 ecx
  00727	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  0072f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00734	51		 push	 ecx
  00735	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be9b22d1
  0073d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00742	51		 push	 ecx
  00743	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  0074b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00750	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 943  : 	draw_2d_line(-0.175, -0.303, -0.225, -0.390, hud_colour);

  00755	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0075a	50		 push	 eax
  0075b	51		 push	 ecx
  0075c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec7ae14
  00764	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00769	51		 push	 ecx
  0076a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  00772	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00777	51		 push	 ecx
  00778	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be9b22d1
  00780	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00785	51		 push	 ecx
  00786	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  0078e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00793	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 944  : 
; 945  : 	// reset view
; 946  : 	reset_2d_instance (hud_env);

  00798	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0079d	50		 push	 eax
  0079e	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 947  : 	set_2d_window (hud_env, HUD_WINDOW_X_MIN, HUD_WINDOW_Y_MIN, HUD_WINDOW_X_MAX, HUD_WINDOW_Y_MAX);

  007a3	51		 push	 ecx
  007a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  007ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b1	51		 push	 ecx
  007b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  007ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bf	51		 push	 ecx
  007c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cd	51		 push	 ecx
  007ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  007e0	50		 push	 eax
  007e1	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 948  : 	set_2d_viewport (hud_env, hud_viewport_x_min, hud_viewport_y_min, hud_viewport_x_max, hud_viewport_y_max);

  007e6	51		 push	 ecx
  007e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_max@@3MA
  007ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f4	51		 push	 ecx
  007f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_max@@3MA
  007fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00802	51		 push	 ecx
  00803	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_min@@3MA
  0080b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00810	51		 push	 ecx
  00811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_min@@3MA
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00823	50		 push	 eax
  00824	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 949  : 
; 950  : }

  00829	5f		 pop	 edi
  0082a	5e		 pop	 esi
  0082b	5b		 pop	 ebx
  0082c	8b e5		 mov	 esp, ebp
  0082e	5d		 pop	 ebp
  0082f	c3		 ret	 0
?draw_pitch_scale@@YGXXZ ENDP				; draw_pitch_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_true_airspeed@@YGXXZ
_TEXT	SEGMENT
_s$ = -24						; size = 20
_true_airspeed$ = -4					; size = 4
?display_true_airspeed@@YGXXZ PROC			; display_true_airspeed, COMDAT

; 776  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 777  : 	float
; 778  : 		true_airspeed;
; 779  : 
; 780  : 	char
; 781  : 		s[20];
; 782  : 
; 783  : 	true_airspeed = current_flight_dynamics->velocity_z.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _true_airspeed$[ebp], xmm0

; 784  : 
; 785  : 	true_airspeed = kilometres_per_hour (true_airspeed);

  0001b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _true_airspeed$[ebp]
  00020	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _true_airspeed$[ebp], xmm0

; 786  : 
; 787  : 	sprintf (s, "%03d", abs((int) true_airspeed));

  0002d	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _true_airspeed$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _abs
  00038	83 c4 04	 add	 esp, 4
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00041	8d 4d e8	 lea	 ecx, DWORD PTR _s$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _sprintf
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 788  : 
; 789  : 	if (true_airspeed <= 50.0 || hud_mode != HUD_MODE_WEAPON)

  0004d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _true_airspeed$[ebp]
  00052	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  0005a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0005e	73 0d		 jae	 SHORT $LN3@display_tr
  00060	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 2 ; hud_mode
  00067	0f 84 88 01 00
	00		 je	 $LN5@display_tr
$LN3@display_tr:

; 790  : 	{
; 791  : 		if (draw_large_hud)

  0006d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00074	0f 84 c0 00 00
	00		 je	 $LN4@display_tr

; 792  : 		{
; 793  : 			set_mono_font_type (MONO_FONT_TYPE_8X14);

  0007a	6a 06		 push	 6
  0007c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 794  : 			set_2d_mono_font_position (-0.9, 0.95);

  00081	51		 push	 ecx
  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 795  : 			set_mono_font_rel_position (5.0, -4.0);

  000a2	51		 push	 ecx
  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  000ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b0	51		 push	 ecx
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 796  : 	
; 797  : 			if (true_airspeed >= 0.0)

  000c3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _true_airspeed$[ebp]
  000c8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000d0	72 0c		 jb	 SHORT $LN6@display_tr

; 798  : 				print_mono_font_string("+");

  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_01MIFGBAGJ@?$CL@
  000d7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 799  : 			else

  000dc	eb 0a		 jmp	 SHORT $LN7@display_tr
$LN6@display_tr:

; 800  : 				print_mono_font_string("-");

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_01JOAMLHOP@?9@
  000e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN7@display_tr:

; 801  : 	
; 802  : 			set_mono_font_type (MONO_FONT_TYPE_10X16);

  000e8	6a 07		 push	 7
  000ea	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 803  : 			set_2d_mono_font_position (-0.8, 0.95);

  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	51		 push	 ecx
  000fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 804  : 			set_mono_font_rel_position (0.0, -4.0);

  00110	51		 push	 ecx
  00111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00119	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011e	51		 push	 ecx
  0011f	0f 57 c0	 xorps	 xmm0, xmm0
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 805  : 			print_mono_font_string (s);

  0012c	8d 45 e8	 lea	 eax, DWORD PTR _s$[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 806  : 		}
; 807  : 		else

  00135	e9 bb 00 00 00	 jmp	 $LN5@display_tr
$LN4@display_tr:

; 808  : 		{
; 809  : 			set_mono_font_type (MONO_FONT_TYPE_5X7);

  0013a	6a 01		 push	 1
  0013c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 810  : 			set_2d_mono_font_position (-0.9, 0.9);

  00141	51		 push	 ecx
  00142	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0014a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 811  : 			set_mono_font_rel_position (3.0, -4.0);

  00162	51		 push	 ecx
  00163	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	51		 push	 ecx
  00171	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 812  : 	
; 813  : 			if (true_airspeed >= 0.0)

  00183	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _true_airspeed$[ebp]
  00188	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00190	72 0c		 jb	 SHORT $LN8@display_tr

; 814  : 				print_mono_font_string("+");

  00192	68 00 00 00 00	 push	 OFFSET ??_C@_01MIFGBAGJ@?$CL@
  00197	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 815  : 			else

  0019c	eb 0a		 jmp	 SHORT $LN9@display_tr
$LN8@display_tr:

; 816  : 				print_mono_font_string("-");

  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_01JOAMLHOP@?9@
  001a3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@display_tr:

; 817  : 	
; 818  : 			set_mono_font_type (MONO_FONT_TYPE_6X10);

  001a8	6a 04		 push	 4
  001aa	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 819  : 			set_2d_mono_font_position (-0.75, 0.9);

  001af	51		 push	 ecx
  001b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  001b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bd	51		 push	 ecx
  001be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  001c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 820  : 			set_mono_font_rel_position (0.0, -5.0);

  001d0	51		 push	 ecx
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	51		 push	 ecx
  001df	0f 57 c0	 xorps	 xmm0, xmm0
  001e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 821  : 			print_mono_font_string (s);

  001ec	8d 45 e8	 lea	 eax, DWORD PTR _s$[ebp]
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@display_tr:

; 822  : 		}
; 823  : 	}
; 824  : 
; 825  : 	if (true_airspeed <= 50.0)

  001f5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _true_airspeed$[ebp]
  001fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  00202	66 0f 2f c8	 comisd	 xmm1, xmm0
  00206	72 07		 jb	 SHORT $LN10@display_tr

; 826  : 		draw_velocity_vector();

  00208	e8 00 00 00 00	 call	 ?draw_velocity_vector@@YGXXZ ; draw_velocity_vector

; 827  : 	else

  0020d	eb 10		 jmp	 SHORT $LN11@display_tr
$LN10@display_tr:

; 828  : 		draw_velocity_scale(true_airspeed);

  0020f	51		 push	 ecx
  00210	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _true_airspeed$[ebp]
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	e8 00 00 00 00	 call	 ?draw_velocity_scale@@YGXM@Z ; draw_velocity_scale
$LN11@display_tr:

; 829  : }

  0021f	5f		 pop	 edi
  00220	5e		 pop	 esi
  00221	5b		 pop	 ebx
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c3		 ret	 0
?display_true_airspeed@@YGXXZ ENDP			; display_true_airspeed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_velocity_scale@@YGXM@Z
_TEXT	SEGMENT
tv69 = -84						; size = 8
tv70 = -76						; size = 8
_y_offset$ = -4						; size = 4
_airspeed$ = 8						; size = 4
?draw_velocity_scale@@YGXM@Z PROC			; draw_velocity_scale, COMDAT

; 740  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 741  : 	float y_offset = bound(airspeed, 0.0, 500.0) * 0.0014;

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  0000e	0f 57 c9	 xorps	 xmm1, xmm1
  00011	66 0f 2f c8	 comisd	 xmm1, xmm0
  00015	76 0a		 jbe	 SHORT $LN9@draw_veloc
  00017	0f 57 c0	 xorps	 xmm0, xmm0
  0001a	f2 0f 11 45 b4	 movsd	 QWORD PTR tv70[ebp], xmm0
  0001f	eb 32		 jmp	 SHORT $LN10@draw_veloc
$LN9@draw_veloc:
  00021	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00026	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@407f400000000000
  0002e	76 0f		 jbe	 SHORT $LN7@draw_veloc
  00030	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@407f400000000000
  00038	f2 0f 11 45 ac	 movsd	 QWORD PTR tv69[ebp], xmm0
  0003d	eb 0a		 jmp	 SHORT $LN8@draw_veloc
$LN7@draw_veloc:
  0003f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00044	f2 0f 11 45 ac	 movsd	 QWORD PTR tv69[ebp], xmm0
$LN8@draw_veloc:
  00049	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv69[ebp]
  0004e	f2 0f 11 45 b4	 movsd	 QWORD PTR tv70[ebp], xmm0
$LN10@draw_veloc:
  00053	f2 0f 10 45 b4	 movsd	 xmm0, QWORD PTR tv70[ebp]
  00058	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f56f0068db8bac7
  00060	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00064	f3 0f 11 45 fc	 movss	 DWORD PTR _y_offset$[ebp], xmm0

; 742  : 	
; 743  : 	draw_2d_line(-0.55, 0.1, -0.55, 0.8, hud_colour);

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	51		 push	 ecx
  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	51		 push	 ecx
  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00099	51		 push	 ecx
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 744  : 	
; 745  : 	draw_2d_line(-0.55, 0.1, -0.575, 0.1, hud_colour);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000b1	50		 push	 eax
  000b2	51		 push	 ecx
  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	51		 push	 ecx
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf133333
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	51		 push	 ecx
  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 746  : 	draw_2d_line(-0.55, 0.24, -0.575, 0.24, hud_colour);

  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000f4	50		 push	 eax
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf133333
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	51		 push	 ecx
  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	51		 push	 ecx
  00120	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 747  : 	draw_2d_line(-0.55, 0.38, -0.575, 0.38, hud_colour);

  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00137	50		 push	 eax
  00138	51		 push	 ecx
  00139	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	51		 push	 ecx
  00147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf133333
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	51		 push	 ecx
  00155	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	51		 push	 ecx
  00163	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 748  : 	draw_2d_line(-0.55, 0.52, -0.575, 0.52, hud_colour);

  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0017a	50		 push	 eax
  0017b	51		 push	 ecx
  0017c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	51		 push	 ecx
  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf133333
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 749  : 	draw_2d_line(-0.55, 0.66, -0.575, 0.66, hud_colour);

  001b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001bd	50		 push	 eax
  001be	51		 push	 ecx
  001bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f28f5c3
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	51		 push	 ecx
  001cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf133333
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	51		 push	 ecx
  001db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f28f5c3
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	51		 push	 ecx
  001e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  001f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 750  : 	draw_2d_line(-0.55, 0.80, -0.575, 0.80, hud_colour);

  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00200	50		 push	 eax
  00201	51		 push	 ecx
  00202	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0020a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020f	51		 push	 ecx
  00210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf133333
  00218	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021d	51		 push	 ecx
  0021e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00226	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022b	51		 push	 ecx
  0022c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00239	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 751  : 
; 752  : 	draw_2d_line(-0.55, 0.54, -0.525, 0.54, hud_colour);

  0023e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00243	50		 push	 eax
  00244	51		 push	 ecx
  00245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	51		 push	 ecx
  00253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf066666
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	51		 push	 ecx
  00261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	51		 push	 ecx
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 753  : 
; 754  : 	if (draw_large_hud)

  00281	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00288	74 25		 je	 SHORT $LN2@draw_veloc

; 755  : 	{
; 756  : 		set_mono_font_type(MONO_FONT_TYPE_6X10);

  0028a	6a 04		 push	 4
  0028c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 757  : 		set_mono_font_rel_position (0.0, -1.0);

  00291	51		 push	 ecx
  00292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	51		 push	 ecx
  002a0	0f 57 c0	 xorps	 xmm0, xmm0
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 758  : 	}
; 759  : 	else

  002ad	eb 28		 jmp	 SHORT $LN3@draw_veloc
$LN2@draw_veloc:

; 760  : 	{
; 761  : 		set_mono_font_type(MONO_FONT_TYPE_3X6);

  002af	6a 00		 push	 0
  002b1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 762  : 		set_mono_font_rel_position (-5.0, -1.0);

  002b6	51		 push	 ecx
  002b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c4	51		 push	 ecx
  002c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  002cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN3@draw_veloc:

; 763  : 	}
; 764  : 
; 765  : 	set_2d_mono_font_position(-0.75, 0.8);

  002d7	51		 push	 ecx
  002d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  002e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e5	51		 push	 ecx
  002e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  002ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 766  : 
; 767  : 	print_mono_font_string("500");

  002f8	68 00 00 00 00	 push	 OFFSET ??_C@_03OCGDPLBD@500@
  002fd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 768  : 	
; 769  : 	if (draw_large_hud)

  00302	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00309	74 37		 je	 SHORT $LN4@draw_veloc

; 770  : 		draw_2d_mono_sprite(large_left_carat, -0.55, 0.1 + y_offset, hud_colour);

  0030b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00310	50		 push	 eax
  00311	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_offset$[ebp]
  00316	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0031e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00322	51		 push	 ecx
  00323	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00328	51		 push	 ecx
  00329	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00331	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00336	68 00 00 00 00	 push	 OFFSET ?large_left_carat@@3PADA
  0033b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 771  : 	else

  00340	eb 35		 jmp	 SHORT $LN5@draw_veloc
$LN4@draw_veloc:

; 772  : 		draw_2d_mono_sprite(small_left_carat, -0.55, 0.1 + y_offset, hud_colour);

  00342	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00347	50		 push	 eax
  00348	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_offset$[ebp]
  0034d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00355	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00359	51		 push	 ecx
  0035a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035f	51		 push	 ecx
  00360	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	68 00 00 00 00	 push	 OFFSET ?small_left_carat@@3PADA
  00372	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN5@draw_veloc:

; 773  : }

  00377	5f		 pop	 edi
  00378	5e		 pop	 esi
  00379	5b		 pop	 ebx
  0037a	8b e5		 mov	 esp, ebp
  0037c	5d		 pop	 ebp
  0037d	c2 04 00	 ret	 4
?draw_velocity_scale@@YGXM@Z ENDP			; draw_velocity_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_velocity_vector@@YGXXZ
_TEXT	SEGMENT
tv135 = -92						; size = 8
tv84 = -92						; size = 8
tv188 = -84						; size = 8
tv181 = -84						; size = 8
tv169 = -84						; size = 8
tv162 = -84						; size = 8
tv136 = -84						; size = 8
tv85 = -84						; size = 8
_z$ = -12						; size = 4
_x$ = -8						; size = 4
_scale$ = -4						; size = 4
?draw_velocity_vector@@YGXXZ PROC			; draw_velocity_vector, COMDAT

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 712  : #define VV_CUTOFF_VELOCITY kilometres_per_hour_to_metres_per_second(50.0)
; 713  : 	float scale, x, z;
; 714  : 	
; 715  : 	z = current_flight_dynamics->velocity_z.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00016	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 716  : 	x = current_flight_dynamics->velocity_x.value;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00020	f3 0f 10 80 6c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8300]
  00028	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0

; 717  : 
; 718  : 	// cutoff the velocity marker if it gets too far from center
; 719  : 	if (fabs(z) > VV_CUTOFF_VELOCITY)

  0002d	51		 push	 ecx
  0002e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _z$[ebp]
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0003d	dd 5d ac	 fstp	 QWORD PTR tv162[ebp]
  00040	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv162[ebp]
  00045	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  0004d	0f 86 90 00 00
	00		 jbe	 $LN2@draw_veloc

; 720  : 	{
; 721  : 		x *= VV_CUTOFF_VELOCITY / fabs(z);

  00053	51		 push	 ecx
  00054	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _z$[ebp]
  00059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00063	dd 5d ac	 fstp	 QWORD PTR tv169[ebp]
  00066	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  0006e	f2 0f 5e 45 ac	 divsd	 xmm0, QWORD PTR tv169[ebp]
  00073	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _x$[ebp]
  00078	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0007c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00080	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0

; 722  : 		z = bound(z, -VV_CUTOFF_VELOCITY, VV_CUTOFF_VELOCITY);

  00085	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  0008a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c02bc71c71c71c72
  00092	66 0f 2f c8	 comisd	 xmm1, xmm0
  00096	76 0f		 jbe	 SHORT $LN7@draw_veloc
  00098	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c02bc71c71c71c72
  000a0	f2 0f 11 45 ac	 movsd	 QWORD PTR tv85[ebp], xmm0
  000a5	eb 32		 jmp	 SHORT $LN8@draw_veloc
$LN7@draw_veloc:
  000a7	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  000ac	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  000b4	76 0f		 jbe	 SHORT $LN5@draw_veloc
  000b6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  000be	f2 0f 11 45 a4	 movsd	 QWORD PTR tv84[ebp], xmm0
  000c3	eb 0a		 jmp	 SHORT $LN6@draw_veloc
$LN5@draw_veloc:
  000c5	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  000ca	f2 0f 11 45 a4	 movsd	 QWORD PTR tv84[ebp], xmm0
$LN6@draw_veloc:
  000cf	f2 0f 10 45 a4	 movsd	 xmm0, QWORD PTR tv84[ebp]
  000d4	f2 0f 11 45 ac	 movsd	 QWORD PTR tv85[ebp], xmm0
$LN8@draw_veloc:
  000d9	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv85[ebp]
  000de	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0
$LN2@draw_veloc:

; 723  : 	}
; 724  : 	if (fabs(x) > VV_CUTOFF_VELOCITY)

  000e3	51		 push	 ecx
  000e4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000f3	dd 5d ac	 fstp	 QWORD PTR tv181[ebp]
  000f6	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv181[ebp]
  000fb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  00103	0f 86 90 00 00
	00		 jbe	 $LN3@draw_veloc

; 725  : 	{
; 726  : 		z *= VV_CUTOFF_VELOCITY / fabs(x);

  00109	51		 push	 ecx
  0010a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00119	dd 5d ac	 fstp	 QWORD PTR tv188[ebp]
  0011c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  00124	f2 0f 5e 45 ac	 divsd	 xmm0, QWORD PTR tv188[ebp]
  00129	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _z$[ebp]
  0012e	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00132	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00136	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 727  : 		x = bound(x, -VV_CUTOFF_VELOCITY, VV_CUTOFF_VELOCITY);

  0013b	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00140	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c02bc71c71c71c72
  00148	66 0f 2f c8	 comisd	 xmm1, xmm0
  0014c	76 0f		 jbe	 SHORT $LN11@draw_veloc
  0014e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c02bc71c71c71c72
  00156	f2 0f 11 45 ac	 movsd	 QWORD PTR tv136[ebp], xmm0
  0015b	eb 32		 jmp	 SHORT $LN12@draw_veloc
$LN11@draw_veloc:
  0015d	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00162	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  0016a	76 0f		 jbe	 SHORT $LN9@draw_veloc
  0016c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402bc71c71c71c72
  00174	f2 0f 11 45 a4	 movsd	 QWORD PTR tv135[ebp], xmm0
  00179	eb 0a		 jmp	 SHORT $LN10@draw_veloc
$LN9@draw_veloc:
  0017b	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00180	f2 0f 11 45 a4	 movsd	 QWORD PTR tv135[ebp], xmm0
$LN10@draw_veloc:
  00185	f2 0f 10 45 a4	 movsd	 xmm0, QWORD PTR tv135[ebp]
  0018a	f2 0f 11 45 ac	 movsd	 QWORD PTR tv136[ebp], xmm0
$LN12@draw_veloc:
  0018f	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv136[ebp]
  00194	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0
$LN3@draw_veloc:

; 728  : 	}
; 729  : 
; 730  : 	// from center use 50% of the hud area
; 731  : 	scale = (0.5 / VV_CUTOFF_VELOCITY);

  00199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d1374bc
  001a1	f3 0f 11 45 fc	 movss	 DWORD PTR _scale$[ebp], xmm0

; 732  : 
; 733  : 	x *= scale;

  001a6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  001ab	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001b0	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0

; 734  : 	z *= scale;

  001b5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _z$[ebp]
  001ba	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001bf	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0

; 735  : 
; 736  : 	draw_line_func(0.0, 0.0, x, z, hud_colour);

  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001c9	50		 push	 eax
  001ca	51		 push	 ecx
  001cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _z$[ebp]
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	51		 push	 ecx
  001d6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	51		 push	 ecx
  001e1	0f 57 c0	 xorps	 xmm0, xmm0
  001e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e9	51		 push	 ecx
  001ea	0f 57 c0	 xorps	 xmm0, xmm0
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 737  : }

  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	5b		 pop	 ebx
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c3		 ret	 0
?draw_velocity_vector@@YGXXZ ENDP			; draw_velocity_vector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_aircraft_datum@@YGXXZ
_TEXT	SEGMENT
tv78 = -76						; size = 4
tv70 = -72						; size = 4
_roll$ = -4						; size = 4
?draw_aircraft_datum@@YGXXZ PROC			; draw_aircraft_datum, COMDAT

; 689  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 690  : 	float
; 691  : 		roll;
; 692  : 
; 693  : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN3@draw_aircr
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN4@draw_aircr
$LN3@draw_aircr:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_datum@@YGXXZ@4JA
  00024	83 c2 04	 add	 edx, 4
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@draw_aircr:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN5@draw_aircr
  00048	c7 45 b4 71 00
	00 00		 mov	 DWORD PTR tv78[ebp], 113 ; 00000071H
  0004f	eb 21		 jmp	 SHORT $LN6@draw_aircr
$LN5@draw_aircr:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_datum@@YGXXZ@4JA
  00057	83 c2 04	 add	 edx, 4
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@draw_aircr:
  00072	6a 71		 push	 113			; 00000071H
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007a	51		 push	 ecx
  0007b	69 55 b8 bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  00082	8b 45 b4	 mov	 eax, DWORD PTR tv78[ebp]
  00085	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0008c	ff d1		 call	 ecx
  0008e	d9 5d fc	 fstp	 DWORD PTR _roll$[ebp]

; 694  : 
; 695  : 	set_2d_window_rotation (hud_env, -roll);

  00091	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00096	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0009d	51		 push	 ecx
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 696  : 
; 697  : 	draw_2d_line (-0.35, +0.00, -0.15, +0.00, hud_colour);

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000b3	50		 push	 eax
  000b4	51		 push	 ecx
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	51		 push	 ecx
  000cc	0f 57 c0	 xorps	 xmm0, xmm0
  000cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d4	51		 push	 ecx
  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 698  : 	draw_2d_line (+0.35, +0.00, +0.15, +0.00, hud_colour);

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000ec	50		 push	 eax
  000ed	51		 push	 ecx
  000ee	0f 57 c0	 xorps	 xmm0, xmm0
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	51		 push	 ecx
  00105	0f 57 c0	 xorps	 xmm0, xmm0
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 699  : 	draw_2d_line (+0.00, +0.15, +0.00, +0.25, hud_colour);

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00125	50		 push	 eax
  00126	51		 push	 ecx
  00127	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	51		 push	 ecx
  00135	0f 57 c0	 xorps	 xmm0, xmm0
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	51		 push	 ecx
  0013e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	51		 push	 ecx
  0014c	0f 57 c0	 xorps	 xmm0, xmm0
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 700  : 	draw_2d_line (-0.20, +0.00, -0.20, -0.04, hud_colour);

  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0015e	50		 push	 eax
  0015f	51		 push	 ecx
  00160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	51		 push	 ecx
  0016e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017b	51		 push	 ecx
  0017c	0f 57 c0	 xorps	 xmm0, xmm0
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 701  : 	draw_2d_line (+0.20, +0.00, +0.20, -0.04, hud_colour);

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0019c	50		 push	 eax
  0019d	51		 push	 ecx
  0019e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  001a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ab	51		 push	 ecx
  001ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  001b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b9	51		 push	 ecx
  001ba	0f 57 c0	 xorps	 xmm0, xmm0
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	51		 push	 ecx
  001c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 702  : 
; 703  : 	set_2d_window_rotation (hud_env, 0.0);

  001d5	51		 push	 ecx
  001d6	0f 57 c0	 xorps	 xmm0, xmm0
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 704  : }

  001e9	5f		 pop	 edi
  001ea	5e		 pop	 esi
  001eb	5b		 pop	 ebx
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c3		 ret	 0
?draw_aircraft_datum@@YGXXZ ENDP			; draw_aircraft_datum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_bank_scale@@YGXXZ
_TEXT	SEGMENT
?draw_bank_scale@@YGXXZ PROC				; draw_bank_scale, COMDAT

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 653  : 	draw_2d_line (-BANK_SCALE_TICK_START, 0.0, -BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	0f 57 c0	 xorps	 xmm0, xmm0
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	51		 push	 ecx
  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	51		 push	 ecx
  00027	0f 57 c0	 xorps	 xmm0, xmm0
  0002a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 654  : 	draw_2d_line (+BANK_SCALE_TICK_START, 0.0, +BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	51		 push	 ecx
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	51		 push	 ecx
  00060	0f 57 c0	 xorps	 xmm0, xmm0
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	51		 push	 ecx
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 655  : 
; 656  : 	set_2d_window_rotation (hud_env, rad (+5.0));

  0007b	51		 push	 ecx
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db2b8c2
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 657  : 	draw_2d_line (-BANK_SCALE_TICK_START, 0.0, -BANK_SCALE_MINOR_TICK, 0.0, hud_colour);

  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00099	50		 push	 eax
  0009a	51		 push	 ecx
  0009b	0f 57 c0	 xorps	 xmm0, xmm0
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	51		 push	 ecx
  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef33333
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	51		 push	 ecx
  000b2	0f 57 c0	 xorps	 xmm0, xmm0
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 658  : 	set_2d_window_rotation (hud_env, rad (-5.0));

  000cd	51		 push	 ecx
  000ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb2b8c2
  000d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 659  : 	draw_2d_line (+BANK_SCALE_TICK_START, 0.0, +BANK_SCALE_MINOR_TICK, 0.0, hud_colour);

  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000eb	50		 push	 eax
  000ec	51		 push	 ecx
  000ed	0f 57 c0	 xorps	 xmm0, xmm0
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef33333
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	0f 57 c0	 xorps	 xmm0, xmm0
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	51		 push	 ecx
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 660  : 
; 661  : 	set_2d_window_rotation (hud_env, rad (+10.0));

  0011f	51		 push	 ecx
  00120	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 662  : 	draw_2d_line (-BANK_SCALE_TICK_START, 0.0, -BANK_SCALE_MINOR_TICK, 0.0, hud_colour);

  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0013d	50		 push	 eax
  0013e	51		 push	 ecx
  0013f	0f 57 c0	 xorps	 xmm0, xmm0
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	51		 push	 ecx
  00148	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef33333
  00150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00155	51		 push	 ecx
  00156	0f 57 c0	 xorps	 xmm0, xmm0
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	51		 push	 ecx
  0015f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 663  : 	set_2d_window_rotation (hud_env, rad (-10.0));

  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 664  : 	draw_2d_line (+BANK_SCALE_TICK_START, 0.0, +BANK_SCALE_MINOR_TICK, 0.0, hud_colour);

  0018a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0018f	50		 push	 eax
  00190	51		 push	 ecx
  00191	0f 57 c0	 xorps	 xmm0, xmm0
  00194	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00199	51		 push	 ecx
  0019a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef33333
  001a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a7	51		 push	 ecx
  001a8	0f 57 c0	 xorps	 xmm0, xmm0
  001ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b0	51		 push	 ecx
  001b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 665  : 
; 666  : 	set_2d_window_rotation (hud_env, rad (+15.0));

  001c3	51		 push	 ecx
  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e860a92
  001cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 667  : 	draw_2d_line (-BANK_SCALE_TICK_START, 0.0, -BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001e1	50		 push	 eax
  001e2	51		 push	 ecx
  001e3	0f 57 c0	 xorps	 xmm0, xmm0
  001e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001eb	51		 push	 ecx
  001ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  001f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f9	51		 push	 ecx
  001fa	0f 57 c0	 xorps	 xmm0, xmm0
  001fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00202	51		 push	 ecx
  00203	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 668  : 	set_2d_window_rotation (hud_env, rad (-15.0));

  00215	51		 push	 ecx
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be860a92
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 669  : 	draw_2d_line (+BANK_SCALE_TICK_START, 0.0, +BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  0022e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00233	50		 push	 eax
  00234	51		 push	 ecx
  00235	0f 57 c0	 xorps	 xmm0, xmm0
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	51		 push	 ecx
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	51		 push	 ecx
  0024c	0f 57 c0	 xorps	 xmm0, xmm0
  0024f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00254	51		 push	 ecx
  00255	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 670  : 
; 671  : 	set_2d_window_rotation (hud_env, rad (+30.0));

  00267	51		 push	 ecx
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  00270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00275	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 672  : 	draw_2d_line (-BANK_SCALE_TICK_START, 0.0, -BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  00280	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00285	50		 push	 eax
  00286	51		 push	 ecx
  00287	0f 57 c0	 xorps	 xmm0, xmm0
  0028a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028f	51		 push	 ecx
  00290	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	51		 push	 ecx
  0029e	0f 57 c0	 xorps	 xmm0, xmm0
  002a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a6	51		 push	 ecx
  002a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  002af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 673  : 	set_2d_window_rotation (hud_env, rad (-30.0));

  002b9	51		 push	 ecx
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf060a92
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  002cc	50		 push	 eax
  002cd	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 674  : 	draw_2d_line (+BANK_SCALE_TICK_START, 0.0, +BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  002d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  002d7	50		 push	 eax
  002d8	51		 push	 ecx
  002d9	0f 57 c0	 xorps	 xmm0, xmm0
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	51		 push	 ecx
  002f0	0f 57 c0	 xorps	 xmm0, xmm0
  002f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f8	51		 push	 ecx
  002f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 675  : 
; 676  : 	set_2d_window_rotation (hud_env, rad (+60.0));

  0030b	51		 push	 ecx
  0030c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f860a92
  00314	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00319	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0031e	50		 push	 eax
  0031f	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 677  : 	draw_2d_line (-BANK_SCALE_TICK_START, 0.0, -BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  00324	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00329	50		 push	 eax
  0032a	51		 push	 ecx
  0032b	0f 57 c0	 xorps	 xmm0, xmm0
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	51		 push	 ecx
  00334	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	51		 push	 ecx
  00342	0f 57 c0	 xorps	 xmm0, xmm0
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 678  : 	set_2d_window_rotation (hud_env, rad (-60.0));

  0035d	51		 push	 ecx
  0035e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf860a92
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00370	50		 push	 eax
  00371	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 679  : 	draw_2d_line (+BANK_SCALE_TICK_START, 0.0, +BANK_SCALE_MAJOR_TICK, 0.0, hud_colour);

  00376	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0037b	50		 push	 eax
  0037c	51		 push	 ecx
  0037d	0f 57 c0	 xorps	 xmm0, xmm0
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	51		 push	 ecx
  00386	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	51		 push	 ecx
  00394	0f 57 c0	 xorps	 xmm0, xmm0
  00397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039c	51		 push	 ecx
  0039d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  003a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003aa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 680  : 
; 681  : 	set_2d_window_rotation (hud_env, 0.0);

  003af	51		 push	 ecx
  003b0	0f 57 c0	 xorps	 xmm0, xmm0
  003b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 682  : }

  003c3	5f		 pop	 edi
  003c4	5e		 pop	 esi
  003c5	5b		 pop	 ebx
  003c6	8b e5		 mov	 esp, ebp
  003c8	5d		 pop	 ebp
  003c9	c3		 ret	 0
?draw_bank_scale@@YGXXZ ENDP				; draw_bank_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_pitch_indicator@@YGXXZ
_TEXT	SEGMENT
tv78 = -104						; size = 4
tv70 = -100						; size = 4
_s$ = -32						; size = 20
_width$ = -12						; size = 4
_y$ = -8						; size = 4
_pitch$ = -4						; size = 4
?draw_pitch_indicator@@YGXXZ PROC			; draw_pitch_indicator, COMDAT

; 606  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 607  : 	float
; 608  : 		pitch,
; 609  : 		y,
; 610  : 		width;
; 611  : 
; 612  : 	char
; 613  : 		s[20];
; 614  : 
; 615  : 	pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN5@draw_pitch
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d 9c	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN6@draw_pitch
$LN5@draw_pitch:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_indicator@@YGXXZ@4JA
  00024	83 c2 09	 add	 edx, 9
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN6@draw_pitch:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN7@draw_pitch
  00048	c7 45 98 54 00
	00 00		 mov	 DWORD PTR tv78[ebp], 84	; 00000054H
  0004f	eb 21		 jmp	 SHORT $LN8@draw_pitch
$LN7@draw_pitch:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_indicator@@YGXXZ@4JA
  00057	83 c2 09	 add	 edx, 9
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN8@draw_pitch:
  00072	6a 54		 push	 84			; 00000054H
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007a	51		 push	 ecx
  0007b	69 55 9c bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  00082	8b 45 98	 mov	 eax, DWORD PTR tv78[ebp]
  00085	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0008c	ff d1		 call	 ecx
  0008e	d9 5d fc	 fstp	 DWORD PTR _pitch$[ebp]

; 616  : 
; 617  : 	y = pitch * (-0.7 / (PI / 2.0));

  00091	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  00096	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfdc8543bf9690c9
  0009e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a2	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 618  : 
; 619  : 	draw_2d_line (-0.5, y, 0.7, y, hud_colour);

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000ac	50		 push	 eax
  000ad	51		 push	 ecx
  000ae	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	51		 push	 ecx
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	51		 push	 ecx
  000c7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	51		 push	 ecx
  000d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 620  : 
; 621  : 	sprintf (s, "%d", abs ((int) (deg (pitch))));

  000e4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  000f1	f3 0f 2c c0	 cvttss2si eax, xmm0
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _abs
  000fb	83 c4 04	 add	 esp, 4
  000fe	50		 push	 eax
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00104	8d 4d e0	 lea	 ecx, DWORD PTR _s$[ebp]
  00107	51		 push	 ecx
  00108	e8 00 00 00 00	 call	 _sprintf
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 622  : 
; 623  : 	if (draw_large_hud)

  00110	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00117	74 68		 je	 SHORT $LN2@draw_pitch

; 624  : 	{
; 625  : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00119	6a 04		 push	 4
  0011b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 626  : 
; 627  : 		set_2d_mono_font_position (0.7, y);

  00120	51		 push	 ecx
  00121	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	51		 push	 ecx
  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 628  : 
; 629  : 		width = get_mono_font_string_width (s);

  0013e	8d 45 e0	 lea	 eax, DWORD PTR _s$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00147	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 630  : 
; 631  : 		set_mono_font_rel_position (-width + 1.0, -8.0);

  0014a	51		 push	 ecx
  0014b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  0015d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00164	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00168	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00170	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00174	51		 push	 ecx
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 632  : 	}
; 633  : 	else

  0017f	eb 66		 jmp	 SHORT $LN3@draw_pitch
$LN2@draw_pitch:

; 634  : 	{
; 635  : 		set_mono_font_type (MONO_FONT_TYPE_6X7);

  00181	6a 03		 push	 3
  00183	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 636  : 
; 637  : 		set_2d_mono_font_position (0.7, y);

  00188	51		 push	 ecx
  00189	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	51		 push	 ecx
  00194	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 638  : 
; 639  : 		width = get_mono_font_string_width (s);

  001a6	8d 45 e0	 lea	 eax, DWORD PTR _s$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  001af	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 640  : 
; 641  : 		set_mono_font_rel_position (-width + 1.0, -6.0);

  001b2	51		 push	 ecx
  001b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  001c5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001cc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001d0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001dc	51		 push	 ecx
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN3@draw_pitch:

; 642  : 	}
; 643  : 
; 644  : 	print_mono_font_string (s);

  001e7	8d 45 e0	 lea	 eax, DWORD PTR _s$[ebp]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 645  : }

  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	5b		 pop	 ebx
  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c3		 ret	 0
?draw_pitch_indicator@@YGXXZ ENDP			; draw_pitch_indicator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_heading_scale@@YGXXZ
_TEXT	SEGMENT
tv286 = -168						; size = 8
tv287 = -160						; size = 8
tv264 = -160						; size = 4
tv234 = -160						; size = 4
tv78 = -160						; size = 4
tv256 = -156						; size = 4
tv226 = -156						; size = 4
tv70 = -156						; size = 4
_command_heading$1 = -88				; size = 4
_bearing$2 = -84					; size = 4
_dz$3 = -80						; size = 4
_dx$4 = -76						; size = 4
_waypoint_position$5 = -72				; size = 12
_gunship_position$6 = -60				; size = 4
_wp$7 = -56						; size = 4
_s$ = -52						; size = 20
_int_heading_step_10$ = -32				; size = 4
_loop$ = -28						; size = 4
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_width$ = -16						; size = 4
_x$ = -12						; size = 4
_mod_heading_step_10$ = -8				; size = 4
_heading$ = -4						; size = 4
?draw_heading_scale@@YGXXZ PROC				; draw_heading_scale, COMDAT

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 417  : 	float
; 418  : 		heading,
; 419  : 		mod_heading_step_10,
; 420  : 		x,
; 421  : 		width,
; 422  : 		i,
; 423  : 		j;
; 424  : 
; 425  : 	int
; 426  : 		loop,
; 427  : 		int_heading_step_10;
; 428  : 
; 429  : 	char
; 430  : 		s[20];
; 431  : 
; 432  : 	//
; 433  : 	// sort first major tick position (draw 2 major ticks either side of centre)
; 434  : 	//
; 435  : 
; 436  : 	heading = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00013	74 0f		 je	 SHORT $LN25@draw_headi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN26@draw_headi
$LN25@draw_headi:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA
  0002a	83 c2 14	 add	 edx, 20			; 00000014H
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN26@draw_headi:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN27@draw_headi
  00051	c7 85 60 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv78[ebp], 52	; 00000034H
  0005b	eb 24		 jmp	 SHORT $LN28@draw_headi
$LN27@draw_headi:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA
  00063	83 c2 14	 add	 edx, 20			; 00000014H
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN28@draw_headi:
  00081	6a 34		 push	 52			; 00000034H
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00089	51		 push	 ecx
  0008a	69 95 64 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv70[ebp], 700
  00094	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a1	ff d1		 call	 ecx
  000a3	d9 5d fc	 fstp	 DWORD PTR _heading$[ebp]

; 437  : 
; 438  : 	heading = deg (heading);

  000a6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  000b3	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$[ebp], xmm0

; 439  : 
; 440  : 	mod_heading_step_10 = fmod (heading, 10.0f);

  000b8	51		 push	 ecx
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	51		 push	 ecx
  000c7	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  000d6	d9 5d f8	 fstp	 DWORD PTR _mod_heading_step_10$[ebp]

; 441  : 
; 442  : 	int_heading_step_10 = ((int) (heading * 0.1));

  000d9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  000de	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000e6	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000ea	89 45 e0	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 443  : 
; 444  : 	int_heading_step_10 -= 2;

  000ed	8b 45 e0	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  000f0	83 e8 02	 sub	 eax, 2
  000f3	89 45 e0	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 445  : 
; 446  : 	if (int_heading_step_10 < 0)

  000f6	79 09		 jns	 SHORT $LN5@draw_headi

; 447  : 	{
; 448  : 		int_heading_step_10 += 36;

  000f8	8b 45 e0	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  000fb	83 c0 24	 add	 eax, 36			; 00000024H
  000fe	89 45 e0	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN5@draw_headi:

; 449  : 	}
; 450  : 
; 451  : 	x = - (20.0 + mod_heading_step_10) * 0.025;

  00101	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  00106	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  0010e	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00115	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0011d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00121	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0

; 452  : 
; 453  : 	//
; 454  : 	// draw heading scale line
; 455  : 	//
; 456  : 
; 457  : 	draw_2d_line (-0.25, 0.85, 0.25, 0.85, hud_colour);

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0012b	50		 push	 eax
  0012c	51		 push	 ecx
  0012d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00135	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013a	51		 push	 ecx
  0013b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	51		 push	 ecx
  00149	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	51		 push	 ecx
  00157	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  0015f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00164	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 458  : 
; 459  : 	//
; 460  : 	// large and small HUD differences
; 461  : 	//
; 462  : 
; 463  : 	get_2d_float_screen_coordinates (0.0, 0.85, &i, &j);

  00169	8d 45 e8	 lea	 eax, DWORD PTR _j$[ebp]
  0016c	50		 push	 eax
  0016d	8d 4d ec	 lea	 ecx, DWORD PTR _i$[ebp]
  00170	51		 push	 ecx
  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	51		 push	 ecx
  00180	0f 57 c0	 xorps	 xmm0, xmm0
  00183	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00188	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 464  : 
; 465  : 	if (draw_large_hud)

  0018d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00194	74 30		 je	 SHORT $LN6@draw_headi

; 466  : 	{
; 467  : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00196	6a 05		 push	 5
  00198	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 468  : 
; 469  : 		draw_2d_mono_sprite(large_hud_heading_carat, 0.0, 0.85, hud_colour);

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001a2	50		 push	 eax
  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	51		 push	 ecx
  001b2	0f 57 c0	 xorps	 xmm0, xmm0
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	68 00 00 00 00	 push	 OFFSET ?large_hud_heading_carat@@3PADA
  001bf	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 470  : 	}
; 471  : 	else

  001c4	eb 2e		 jmp	 SHORT $LN7@draw_headi
$LN6@draw_headi:

; 472  : 	{
; 473  : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  001c6	6a 01		 push	 1
  001c8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 474  : 
; 475  : 		draw_2d_mono_sprite(small_hud_heading_carat, 0.0, 0.85, hud_colour);

  001cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  001d2	50		 push	 eax
  001d3	51		 push	 ecx
  001d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	51		 push	 ecx
  001e2	0f 57 c0	 xorps	 xmm0, xmm0
  001e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ea	68 00 00 00 00	 push	 OFFSET ?small_hud_heading_carat@@3PADA
  001ef	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN7@draw_headi:

; 476  : 	}
; 477  : 
; 478  : 	//
; 479  : 	// draw heading scale ticks and heading value
; 480  : 	//
; 481  : 
; 482  : 	for (loop = 0; loop < 5; loop++)

  001f4	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  001fb	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  001fd	8b 45 e4	 mov	 eax, DWORD PTR _loop$[ebp]
  00200	83 c0 01	 add	 eax, 1
  00203	89 45 e4	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  00206	83 7d e4 05	 cmp	 DWORD PTR _loop$[ebp], 5
  0020a	0f 8d 0a 02 00
	00		 jge	 $LN3@draw_headi

; 483  : 	{
; 484  : 		//
; 485  : 		// major tick every 10 degrees
; 486  : 		//
; 487  : 
; 488  : 		if (x >= -0.25)

  00210	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00215	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfd0000000000000
  0021d	72 3d		 jb	 SHORT $LN8@draw_headi

; 489  : 			draw_2d_line (x, 0.9, x, 0.85, hud_colour);

  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00224	50		 push	 eax
  00225	51		 push	 ecx
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	51		 push	 ecx
  00234	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00239	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023e	51		 push	 ecx
  0023f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00247	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024c	51		 push	 ecx
  0024d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN8@draw_headi:

; 490  : 
; 491  : 		//
; 492  : 		// minor tick every 5 degrees
; 493  : 		//
; 494  : 
; 495  : 		if (x + 0.125 >= -0.25 && x + 0.125 < 0.25)

  0025c	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00261	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00269	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfd0000000000000
  00271	72 70		 jb	 SHORT $LN9@draw_headi
  00273	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00278	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00280	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00288	66 0f 2f c8	 comisd	 xmm1, xmm0
  0028c	76 55		 jbe	 SHORT $LN9@draw_headi

; 496  : 			draw_2d_line (x + 0.125, 0.85, x + 0.125, 0.875, hud_colour);

  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00293	50		 push	 eax
  00294	51		 push	 ecx
  00295	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f600000
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  002af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b3	51		 push	 ecx
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	51		 push	 ecx
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002cc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  002d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d8	51		 push	 ecx
  002d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002de	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN9@draw_headi:

; 497  : 
; 498  : 		//
; 499  : 		// heading value ('0' displayed as '36')
; 500  : 		//
; 501  : 
; 502  : 		if (int_heading_step_10 != 0)

  002e3	83 7d e0 00	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 0
  002e7	74 17		 je	 SHORT $LN10@draw_headi

; 503  : 		{
; 504  : 			sprintf (s, "%02d", int_heading_step_10);

  002e9	8b 45 e0	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002ec	50		 push	 eax
  002ed	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  002f2	8d 4d cc	 lea	 ecx, DWORD PTR _s$[ebp]
  002f5	51		 push	 ecx
  002f6	e8 00 00 00 00	 call	 _sprintf
  002fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 505  : 		}
; 506  : 		else

  002fe	eb 11		 jmp	 SHORT $LN11@draw_headi
$LN10@draw_headi:

; 507  : 		{
; 508  : 			sprintf (s, "36");

  00300	68 00 00 00 00	 push	 OFFSET ??_C@_02KPIPOMFB@36@
  00305	8d 45 cc	 lea	 eax, DWORD PTR _s$[ebp]
  00308	50		 push	 eax
  00309	e8 00 00 00 00	 call	 _sprintf
  0030e	83 c4 08	 add	 esp, 8
$LN11@draw_headi:

; 509  : 		}
; 510  : 
; 511  : 		set_2d_mono_font_position (x, 0.9);

  00311	51		 push	 ecx
  00312	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	51		 push	 ecx
  00320	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 512  : 
; 513  : 		width = get_mono_font_string_width (s);

  0032f	8d 45 cc	 lea	 eax, DWORD PTR _s$[ebp]
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00338	d9 5d f0	 fstp	 DWORD PTR _width$[ebp]

; 514  : 
; 515  : 		if (draw_large_hud)

  0033b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00342	74 3f		 je	 SHORT $LN12@draw_headi

; 516  : 		{
; 517  : 			set_mono_font_rel_position ((-width * 0.5) + 1.0, -8.0);

  00344	51		 push	 ecx
  00345	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0034d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00352	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _width$[ebp]
  00357	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0035e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00362	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0036a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00372	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00376	51		 push	 ecx
  00377	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 518  : 		}
; 519  : 		else

  00381	eb 3d		 jmp	 SHORT $LN13@draw_headi
$LN12@draw_headi:

; 520  : 		{
; 521  : 			set_mono_font_rel_position ((-width * 0.5) + 1.0, -6.0);

  00383	51		 push	 ecx
  00384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0038c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00391	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _width$[ebp]
  00396	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0039d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003a1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  003a9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b5	51		 push	 ecx
  003b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN13@draw_headi:

; 522  : 		}
; 523  : 
; 524  : 		if (x >= -0.25)

  003c0	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  003c5	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfd0000000000000
  003cd	72 09		 jb	 SHORT $LN14@draw_headi

; 525  : 			print_mono_font_string (s);

  003cf	8d 45 cc	 lea	 eax, DWORD PTR _s$[ebp]
  003d2	50		 push	 eax
  003d3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN14@draw_headi:

; 526  : 
; 527  : 		//
; 528  : 		// next heading value
; 529  : 		//
; 530  : 
; 531  : 		int_heading_step_10++;

  003d8	8b 45 e0	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  003db	83 c0 01	 add	 eax, 1
  003de	89 45 e0	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 532  : 
; 533  : 		if (int_heading_step_10 == 36)

  003e1	83 7d e0 24	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 36 ; 00000024H
  003e5	75 07		 jne	 SHORT $LN15@draw_headi

; 534  : 		{
; 535  : 			int_heading_step_10 = 0;

  003e7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _int_heading_step_10$[ebp], 0
$LN15@draw_headi:

; 536  : 		}
; 537  : 
; 538  : 		x += 0.25;

  003ee	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  003f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  003fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ff	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0

; 539  : 		if (x > 0.25)

  00404	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00409	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd0000000000000
  00411	76 02		 jbe	 SHORT $LN16@draw_headi

; 540  : 			break;

  00413	eb 05		 jmp	 SHORT $LN3@draw_headi
$LN16@draw_headi:

; 541  : 	}

  00415	e9 e3 fd ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 542  : 
; 543  : 	//
; 544  : 	// draw command heading carat
; 545  : 	//
; 546  : 
; 547  : 	if (!havoc_damage.navigation_computer)

  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  0041f	c1 e8 09	 shr	 eax, 9
  00422	83 e0 01	 and	 eax, 1
  00425	0f 85 ee 02 00
	00		 jne	 $LN23@draw_headi

; 548  : 	{
; 549  : 		entity
; 550  : 			*wp;
; 551  : 
; 552  : 		wp = get_local_entity_current_waypoint (get_gunship_entity ());

  0042b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00430	50		 push	 eax
  00431	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00436	89 45 c8	 mov	 DWORD PTR _wp$7[ebp], eax

; 553  : 
; 554  : 		if (wp)

  00439	83 7d c8 00	 cmp	 DWORD PTR _wp$7[ebp], 0
  0043d	0f 84 d6 02 00
	00		 je	 $LN23@draw_headi

; 555  : 		{
; 556  : 			vec3d
; 557  : 				*gunship_position,
; 558  : 				waypoint_position;
; 559  : 
; 560  : 			float
; 561  : 				dx,
; 562  : 				dz,
; 563  : 				bearing,
; 564  : 				command_heading;
; 565  : 
; 566  : 			gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00443	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0044a	74 0f		 je	 SHORT $LN29@draw_headi
  0044c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00451	8b 08		 mov	 ecx, DWORD PTR [eax]
  00453	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv226[ebp], ecx
  00459	eb 27		 jmp	 SHORT $LN30@draw_headi
$LN29@draw_headi:
  0045b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA
  00461	81 c2 96 00 00
	00		 add	 edx, 150		; 00000096H
  00467	52		 push	 edx
  00468	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0046d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00478	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN30@draw_headi:
  00482	b9 01 00 00 00	 mov	 ecx, 1
  00487	85 c9		 test	 ecx, ecx
  00489	74 0c		 je	 SHORT $LN31@draw_headi
  0048b	c7 85 60 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv234[ebp], 8
  00495	eb 27		 jmp	 SHORT $LN32@draw_headi
$LN31@draw_headi:
  00497	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA
  0049d	81 c2 96 00 00
	00		 add	 edx, 150		; 00000096H
  004a3	52		 push	 edx
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b4	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN32@draw_headi:
  004be	6a 08		 push	 8
  004c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  004c6	51		 push	 ecx
  004c7	6b 95 64 ff ff
	ff 60		 imul	 edx, DWORD PTR tv226[ebp], 96
  004ce	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv234[ebp]
  004d4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  004db	ff d1		 call	 ecx
  004dd	89 45 c4	 mov	 DWORD PTR _gunship_position$6[ebp], eax

; 567  : 
; 568  : 			get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  004e0	8d 45 b8	 lea	 eax, DWORD PTR _waypoint_position$5[ebp]
  004e3	50		 push	 eax
  004e4	8b 4d c8	 mov	 ecx, DWORD PTR _wp$7[ebp]
  004e7	51		 push	 ecx
  004e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  004ee	52		 push	 edx
  004ef	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 569  : 
; 570  : 			dx = waypoint_position.x - gunship_position->x;

  004f4	8b 45 c4	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  004f7	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp]
  004fc	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00500	f3 0f 11 45 b4	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 571  : 			dz = waypoint_position.z - gunship_position->z;

  00505	8b 45 c4	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  00508	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp+8]
  0050d	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00512	f3 0f 11 45 b0	 movss	 DWORD PTR _dz$3[ebp], xmm0

; 572  : 
; 573  : 			bearing = atan2 (dx, dz);

  00517	51		 push	 ecx
  00518	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _dz$3[ebp]
  0051d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00522	51		 push	 ecx
  00523	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00528	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052d	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00532	d9 5d ac	 fstp	 DWORD PTR _bearing$2[ebp]

; 574  : 
; 575  : 			heading = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING);

  00535	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0053c	74 0f		 je	 SHORT $LN33@draw_headi
  0053e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00543	8b 08		 mov	 ecx, DWORD PTR [eax]
  00545	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv256[ebp], ecx
  0054b	eb 27		 jmp	 SHORT $LN34@draw_headi
$LN33@draw_headi:
  0054d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA
  00553	81 c2 9f 00 00
	00		 add	 edx, 159		; 0000009fH
  00559	52		 push	 edx
  0055a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0055f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0056a	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv256[ebp], 0
$LN34@draw_headi:
  00574	b9 01 00 00 00	 mov	 ecx, 1
  00579	85 c9		 test	 ecx, ecx
  0057b	74 0c		 je	 SHORT $LN35@draw_headi
  0057d	c7 85 60 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv264[ebp], 52 ; 00000034H
  00587	eb 27		 jmp	 SHORT $LN36@draw_headi
$LN35@draw_headi:
  00589	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXXZ@4JA
  0058f	81 c2 9f 00 00
	00		 add	 edx, 159		; 0000009fH
  00595	52		 push	 edx
  00596	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0059b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005a6	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv264[ebp], 0
$LN36@draw_headi:
  005b0	6a 34		 push	 52			; 00000034H
  005b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  005b8	51		 push	 ecx
  005b9	69 95 64 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv256[ebp], 700
  005c3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv264[ebp]
  005c9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  005d0	ff d1		 call	 ecx
  005d2	d9 5d fc	 fstp	 DWORD PTR _heading$[ebp]

; 576  : 
; 577  : 			command_heading = bearing - heading;

  005d5	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _bearing$2[ebp]
  005da	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _heading$[ebp]
  005df	f3 0f 11 45 a8	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 578  : 
; 579  : 			if (command_heading > rad (180.0))

  005e4	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  005e9	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  005f1	76 18		 jbe	 SHORT $LN19@draw_headi

; 580  : 				command_heading -= rad (360.0);

  005f3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  005f8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00600	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00604	f3 0f 11 45 a8	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
  00609	eb 29		 jmp	 SHORT $LN21@draw_headi
$LN19@draw_headi:

; 581  : 			else if (command_heading < rad (-180.0))

  0060b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00610	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  00618	66 0f 2f c8	 comisd	 xmm1, xmm0
  0061c	76 16		 jbe	 SHORT $LN21@draw_headi

; 582  : 				command_heading += rad (360.0);

  0061e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00623	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  0062b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0062f	f3 0f 11 45 a8	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
$LN21@draw_headi:

; 583  : 
; 584  : 			command_heading = bound (command_heading, rad (-90.0), rad (90.0));

  00634	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00639	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff921fb51000000
  00641	66 0f 2f c8	 comisd	 xmm1, xmm0
  00645	76 12		 jbe	 SHORT $LN39@draw_headi
  00647	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff921fb51000000
  0064f	f2 0f 11 85 60
	ff ff ff	 movsd	 QWORD PTR tv287[ebp], xmm0
  00657	eb 3e		 jmp	 SHORT $LN40@draw_headi
$LN39@draw_headi:
  00659	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0065e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00666	76 12		 jbe	 SHORT $LN37@draw_headi
  00668	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00670	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv286[ebp], xmm0
  00678	eb 0d		 jmp	 SHORT $LN38@draw_headi
$LN37@draw_headi:
  0067a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0067f	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv286[ebp], xmm0
$LN38@draw_headi:
  00687	f2 0f 10 85 58
	ff ff ff	 movsd	 xmm0, QWORD PTR tv286[ebp]
  0068f	f2 0f 11 85 60
	ff ff ff	 movsd	 QWORD PTR tv287[ebp], xmm0
$LN40@draw_headi:
  00697	f2 0f 5a 85 60
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv287[ebp]
  0069f	f3 0f 11 45 a8	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 585  : 
; 586  : 			if (draw_large_hud)

  006a4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  006ab	74 37		 je	 SHORT $LN22@draw_headi

; 587  : 				draw_2d_mono_sprite (large_hud_command_heading_carat, command_heading * ((0.25 - 0.04) / rad (90.0)), 0.85, hud_colour);

  006ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  006b2	50		 push	 eax
  006b3	51		 push	 ecx
  006b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  006bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  006c6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc11cc249f74fea
  006ce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006d2	51		 push	 ecx
  006d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d8	68 00 00 00 00	 push	 OFFSET ?large_hud_command_heading_carat@@3PADA
  006dd	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 588  : 			else

  006e2	eb 35		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:

; 589  : 				draw_2d_mono_sprite (small_hud_command_heading_carat, command_heading * ((0.25 - 0.04) / rad (90.0)), 0.85, hud_colour);

  006e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  006e9	50		 push	 eax
  006ea	51		 push	 ecx
  006eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  006f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f8	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  006fd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc11cc249f74fea
  00705	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00709	51		 push	 ecx
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	68 00 00 00 00	 push	 OFFSET ?small_hud_command_heading_carat@@3PADA
  00714	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN23@draw_headi:

; 590  : 		}
; 591  : 	}
; 592  : 	//
; 593  : 	// restore 2D environment
; 594  : 	//
; 595  : 
; 596  : 	set_2d_window (hud_env, HUD_WINDOW_X_MIN, HUD_WINDOW_Y_MIN, HUD_WINDOW_X_MAX, HUD_WINDOW_Y_MAX);

  00719	51		 push	 ecx
  0071a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00722	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00727	51		 push	 ecx
  00728	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00730	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00735	51		 push	 ecx
  00736	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0073e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00743	51		 push	 ecx
  00744	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0074c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00751	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 597  : 
; 598  : 	set_2d_viewport (hud_env, hud_viewport_x_min, hud_viewport_y_min, hud_viewport_x_max, hud_viewport_y_max);

  0075c	51		 push	 ecx
  0075d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_max@@3MA
  00765	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076a	51		 push	 ecx
  0076b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_max@@3MA
  00773	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00778	51		 push	 ecx
  00779	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_min@@3MA
  00781	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00786	51		 push	 ecx
  00787	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_min@@3MA
  0078f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00794	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 599  : }

  0079f	5f		 pop	 edi
  007a0	5e		 pop	 esi
  007a1	5b		 pop	 ebx
  007a2	8b e5		 mov	 esp, ebp
  007a4	5d		 pop	 ebp
  007a5	c3		 ret	 0
?draw_heading_scale@@YGXXZ ENDP				; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_hud_centre_datum@@YGXXZ
_TEXT	SEGMENT
?draw_hud_centre_datum@@YGXXZ PROC			; draw_hud_centre_datum, COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 405  : 	draw_2d_line (-0.10, +0.00, -0.05, +0.00, hud_colour);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	0f 57 c0	 xorps	 xmm0, xmm0
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	51		 push	 ecx
  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	51		 push	 ecx
  00027	0f 57 c0	 xorps	 xmm0, xmm0
  0002a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 406  : 	draw_2d_line (+0.10, +0.00, +0.05, +0.00, hud_colour);

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	51		 push	 ecx
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	51		 push	 ecx
  00060	0f 57 c0	 xorps	 xmm0, xmm0
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	51		 push	 ecx
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 407  : 	draw_2d_line (+0.00, -0.10, +0.00, -0.05, hud_colour);

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00080	50		 push	 eax
  00081	51		 push	 ecx
  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	51		 push	 ecx
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	51		 push	 ecx
  00099	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	51		 push	 ecx
  000a7	0f 57 c0	 xorps	 xmm0, xmm0
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 408  : 	draw_2d_line (+0.00, +0.10, +0.00, +0.05, hud_colour);

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  000b9	50		 push	 eax
  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	0f 57 c0	 xorps	 xmm0, xmm0
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	51		 push	 ecx
  000d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	51		 push	 ecx
  000e0	0f 57 c0	 xorps	 xmm0, xmm0
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 409  : }

  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
?draw_hud_centre_datum@@YGXXZ ENDP			; draw_hud_centre_datum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 381  : 	float
; 382  : 		x,
; 383  : 		y;
; 384  : 
; 385  : 	if (display_hud_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_hud_layout_grid@@3HA, 0 ; display_hud_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 386  : 	{
; 387  : 		for (x = HUD_WINDOW_X_MIN; x <= HUD_WINDOW_X_MAX; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feff7ced916872b
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 388  : 		{
; 389  : 			draw_2d_line (x, HUD_WINDOW_Y_MIN, x, HUD_WINDOW_Y_MAX, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 390  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 391  : 
; 392  : 		for (y = HUD_WINDOW_Y_MIN; y <= HUD_WINDOW_Y_MAX; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feff7ced916872b
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 393  : 		{
; 394  : 			draw_2d_line (HUD_WINDOW_X_MIN, y, HUD_WINDOW_X_MAX, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 395  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 396  : 	}
; 397  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z PROC ; transform_hud_screen_co_ords_to_hud_texture_co_ords, COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 365  : 	ASSERT (i);

  00009	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@transform_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@transform_:

; 366  : 	ASSERT (j);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _j$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@transform_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01CBDEGOCN@j@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@transform_:

; 367  : 
; 368  : 	*i -= hud_screen_x_min;

  00045	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?hud_screen_x_min@@3MA
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 369  : 	*j -= hud_screen_y_min;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0005e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00062	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?hud_screen_y_min@@3MA
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  0006d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 370  : 
; 371  : 	*i *= hud_screen_x_scale;

  00071	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00074	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00078	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?hud_screen_x_scale@@3MA
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 372  : 	*j *= hud_screen_y_scale;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?hud_screen_y_scale@@3MA
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  00099	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 373  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
?transform_hud_screen_co_ords_to_hud_texture_co_ords@@YGXPAM0@Z ENDP ; transform_hud_screen_co_ords_to_hud_texture_co_ords
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?clip_2d_point_to_hud_extent@@YGXPAM0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?clip_2d_point_to_hud_extent@@YGXPAM0@Z PROC		; clip_2d_point_to_hud_extent, COMDAT

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 324  : 	ASSERT (x);

  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@clip_2d_po
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01FJMABOPO@x@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@clip_2d_po:

; 325  : 
; 326  : 	ASSERT (y);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@clip_2d_po
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??clip_2d_point_to_hud_extent@@YGXPAM0@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01EANLCPLP@y@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@clip_2d_po:

; 327  : 
; 328  : 	//
; 329  : 	// clipping assumes that the HUD origin is at (0.0, 0.0)
; 330  : 	//
; 331  : 
; 332  : 	if (*x > HUD_WINDOW_X_MAX)

  00045	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00048	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  0004c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00054	76 36		 jbe	 SHORT $LN4@clip_2d_po

; 333  : 	{
; 334  : 		*y = (*y * HUD_WINDOW_X_MAX) / *x;

  00056	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00059	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  0005d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00068	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  0006c	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00070	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00074	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00077	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 335  : 
; 336  : 		*x = HUD_WINDOW_X_MAX;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00086	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0008a	eb 49		 jmp	 SHORT $LN6@clip_2d_po
$LN4@clip_2d_po:

; 337  : 	}
; 338  : 	else if (*x < HUD_WINDOW_X_MIN)

  0008c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0008f	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00093	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  0009b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0009f	76 34		 jbe	 SHORT $LN6@clip_2d_po

; 339  : 	{
; 340  : 		*y = (*y * HUD_WINDOW_X_MIN) / *x;

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000a4	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000a8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000b3	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  000b7	f2 0f 5e c1	 divsd	 xmm0, xmm1
  000bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bf	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000c2	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 341  : 
; 342  : 		*x = HUD_WINDOW_X_MIN;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000d1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN6@clip_2d_po:

; 343  : 	}
; 344  : 
; 345  : 	if (*y > HUD_WINDOW_Y_MAX)

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000d8	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000dc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3feff7ced916872b
  000e4	76 36		 jbe	 SHORT $LN7@clip_2d_po

; 346  : 	{
; 347  : 		*x = (*x * HUD_WINDOW_Y_MAX) / *y;

  000e6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000e9	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000ed	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000f8	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  000fc	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00100	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00104	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00107	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 348  : 
; 349  : 		*y = HUD_WINDOW_Y_MAX;

  0010b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00116	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0011a	eb 49		 jmp	 SHORT $LN9@clip_2d_po
$LN7@clip_2d_po:

; 350  : 	}
; 351  : 	else if (*y < HUD_WINDOW_Y_MIN)

  0011c	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0011f	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00123	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  0012b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0012f	76 34		 jbe	 SHORT $LN9@clip_2d_po

; 352  : 	{
; 353  : 		*x = (*x * HUD_WINDOW_Y_MIN) / *y;

  00131	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00134	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00138	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00143	f3 0f 5a 09	 cvtss2sd xmm1, DWORD PTR [ecx]
  00147	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0014b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00152	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 354  : 
; 355  : 		*y = HUD_WINDOW_Y_MIN;

  00156	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00161	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN9@clip_2d_po:

; 356  : 	}
; 357  : }

  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 08 00	 ret	 8
?clip_2d_point_to_hud_extent@@YGXPAM0@Z ENDP		; clip_2d_point_to_hud_extent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_target_information@@YGXXZ
_TEXT	SEGMENT
tv224 = -308						; size = 4
tv185 = -308						; size = 4
tv137 = -308						; size = 4
tv216 = -304						; size = 4
tv197 = -304						; size = 4
tv178 = -304						; size = 4
tv129 = -304						; size = 4
_selected_weapon_type$1 = -236				; size = 4
_target_range$2 = -232					; size = 4
_max_weapon_range$3 = -228				; size = 4
_min_weapon_range$4 = -224				; size = 4
_range_finder$ = -220					; size = 4
_source$ = -216						; size = 4
_target$ = -212						; size = 4
_width$ = -208						; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?display_target_information@@YGXXZ PROC			; display_target_information, COMDAT

; 2528 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2529 : 	const char
; 2530 : 		*s;
; 2531 : 	char
; 2532 : 		buffer[200];
; 2533 : 
; 2534 : 	float
; 2535 : 		width;
; 2536 : 
; 2537 : 	entity
; 2538 : 		*target,
; 2539 : 		*source;
; 2540 : 
; 2541 : 	rangefinding_system
; 2542 : 		range_finder = get_range_finder();

  0000c	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  00011	89 85 24 ff ff
	ff		 mov	 DWORD PTR _range_finder$[ebp], eax

; 2543 : 
; 2544 : 	// Range
; 2545 : 	source = get_gunship_entity ();

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001c	89 85 28 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 2546 : 	ASSERT(source);

  00022	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00029	75 18		 jne	 SHORT $LN4@display_ta
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
  00030	83 c0 12	 add	 eax, 18			; 00000012H
  00033	50		 push	 eax
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  0003e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@display_ta:

; 2547 : 	if (range_finder != RANGEFINDER_TRIANGULATION)

  00043	83 bd 24 ff ff
	ff 02		 cmp	 DWORD PTR _range_finder$[ebp], 2
  0004a	0f 84 49 02 00
	00		 je	 $LN8@display_ta

; 2548 : 	{
; 2549 : 		float min_weapon_range, max_weapon_range, target_range;
; 2550 : 		entity_sub_types selected_weapon_type;
; 2551 : 
; 2552 : 		target_range = get_range_to_target();

  00050	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  00055	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _target_range$2[ebp]

; 2553 : 
; 2554 : 		if (draw_large_hud)

  0005b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00062	74 09		 je	 SHORT $LN6@display_ta

; 2555 : 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00064	6a 05		 push	 5
  00066	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2556 : 		else

  0006b	eb 07		 jmp	 SHORT $LN7@display_ta
$LN6@display_ta:

; 2557 : 			set_mono_font_type (MONO_FONT_TYPE_5X7);

  0006d	6a 01		 push	 1
  0006f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN7@display_ta:

; 2558 : 
; 2559 : 		sprintf (buffer, "%2.1f", target_range * 0.001);

  00074	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$2[ebp]
  0007c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00084	83 ec 08	 sub	 esp, 8
  00087	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_05JEFOLKLE@?$CF2?41f@
  00091	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _sprintf
  0009d	83 c4 10	 add	 esp, 16			; 00000010H

; 2560 : 		set_2d_mono_font_position (0.0, -0.65);

  000a0	51		 push	 ecx
  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	0f 57 c0	 xorps	 xmm0, xmm0
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2561 : 		width = get_mono_font_string_width (buffer);

  000bc	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000c8	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2562 : 		set_mono_font_rel_position (-width * 0.5, 0.0);

  000ce	51		 push	 ecx
  000cf	0f 57 c0	 xorps	 xmm0, xmm0
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  000df	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ea	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2563 : 		print_mono_font_string (buffer);

  00101	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2564 : 
; 2565 : 		// min and max range
; 2566 : 		selected_weapon_type = get_local_entity_int_value (source, INT_TYPE_SELECTED_WEAPON);

  0010d	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00114	74 10		 je	 SHORT $LN29@display_ta
  00116	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0011c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011e	89 8d d0 fe ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
  00124	eb 24		 jmp	 SHORT $LN30@display_ta
$LN29@display_ta:
  00126	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
  0012c	83 c2 26	 add	 edx, 38			; 00000026H
  0012f	52		 push	 edx
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN30@display_ta:
  0014a	b9 01 00 00 00	 mov	 ecx, 1
  0014f	85 c9		 test	 ecx, ecx
  00151	74 0c		 je	 SHORT $LN31@display_ta
  00153	c7 85 cc fe ff
	ff b8 00 00 00	 mov	 DWORD PTR tv137[ebp], 184 ; 000000b8H
  0015d	eb 24		 jmp	 SHORT $LN32@display_ta
$LN31@display_ta:
  0015f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
  00165	83 c2 26	 add	 edx, 38			; 00000026H
  00168	52		 push	 edx
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00179	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN32@display_ta:
  00183	68 b8 00 00 00	 push	 184			; 000000b8H
  00188	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0018e	51		 push	 ecx
  0018f	69 95 d0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv129[ebp], 1116
  00199	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0019f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001a6	ff d1		 call	 ecx
  001a8	89 85 14 ff ff
	ff		 mov	 DWORD PTR _selected_weapon_type$1[ebp], eax

; 2567 : 
; 2568 : 		min_weapon_range = weapon_database[selected_weapon_type].min_range;

  001ae	69 85 14 ff ff
	ff e0 00 00 00	 imul	 eax, DWORD PTR _selected_weapon_type$1[ebp], 224
  001b8	f3 0f 10 80 8c
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+140]
  001c0	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _min_weapon_range$4[ebp], xmm0

; 2569 : 		max_weapon_range = weapon_database[selected_weapon_type].max_range;

  001c8	69 85 14 ff ff
	ff e0 00 00 00	 imul	 eax, DWORD PTR _selected_weapon_type$1[ebp], 224
  001d2	f3 0f 10 80 90
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+144]
  001da	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _max_weapon_range$3[ebp], xmm0

; 2570 : 		
; 2571 : 		// flashing X when within minimum range
; 2572 : 		if (target_range < min_weapon_range && (get_system_time() % 800) < 400)

  001e2	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _min_weapon_range$4[ebp]
  001ea	0f 2f 85 18 ff
	ff ff		 comiss	 xmm0, DWORD PTR _target_range$2[ebp]
  001f1	0f 86 a2 00 00
	00		 jbe	 $LN8@display_ta
  001f7	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  001fc	33 d2		 xor	 edx, edx
  001fe	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  00203	f7 f1		 div	 ecx
  00205	81 fa 90 01 00
	00		 cmp	 edx, 400		; 00000190H
  0020b	0f 83 88 00 00
	00		 jae	 $LN8@display_ta

; 2573 : 		{
; 2574 : 			draw_line_func(-0.5, -0.5, 0.5, 0.5, hud_colour);

  00211	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00216	50		 push	 eax
  00217	51		 push	 ecx
  00218	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	51		 push	 ecx
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	51		 push	 ecx
  00234	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0023c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00241	51		 push	 ecx
  00242	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0024a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024f	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA

; 2575 : 			draw_line_func(-0.5, 0.5, 0.5, -0.5, hud_colour);

  00255	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0025a	50		 push	 eax
  0025b	51		 push	 ecx
  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	51		 push	 ecx
  0026a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	51		 push	 ecx
  00278	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00285	51		 push	 ecx
  00286	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0028e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00293	ff 15 00 00 00
	00		 call	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA
$LN8@display_ta:

; 2576 : 		}
; 2577 : 	}
; 2578 : 
; 2579 : 	if (draw_large_hud)

  00299	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  002a0	74 09		 je	 SHORT $LN9@display_ta

; 2580 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  002a2	6a 04		 push	 4
  002a4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2581 : 	else

  002a9	eb 07		 jmp	 SHORT $LN10@display_ta
$LN9@display_ta:

; 2582 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  002ab	6a 00		 push	 0
  002ad	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN10@display_ta:

; 2583 : 
; 2584 : 	// laser active
; 2585 : 	if (laser_is_active())

  002b2	e8 00 00 00 00	 call	 ?laser_is_active@@YGHXZ	; laser_is_active
  002b7	85 c0		 test	 eax, eax
  002b9	74 42		 je	 SHORT $LN11@display_ta

; 2586 : 	{
; 2587 : 		set_2d_mono_font_position (-0.8, 0.2);

  002bb	51		 push	 ecx
  002bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  002c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c9	51		 push	 ecx
  002ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  002d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2588 : 		set_mono_font_rel_position (0.0, 0.0);

  002dc	51		 push	 ecx
  002dd	0f 57 c0	 xorps	 xmm0, xmm0
  002e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e5	51		 push	 ecx
  002e6	0f 57 c0	 xorps	 xmm0, xmm0
  002e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ee	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2589 : 		print_mono_font_string("L");

  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  002f8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN11@display_ta:

; 2590 : 	}
; 2591 : 
; 2592 : 	if (get_local_entity_int_value(source, INT_TYPE_RADAR_ON))

  002fd	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00304	74 10		 je	 SHORT $LN33@display_ta
  00306	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0030c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030e	89 8d d0 fe ff
	ff		 mov	 DWORD PTR tv178[ebp], ecx
  00314	eb 20		 jmp	 SHORT $LN34@display_ta
$LN33@display_ta:
  00316	68 20 0a 00 00	 push	 2592			; 00000a20H
  0031b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00320	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00326	52		 push	 edx
  00327	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0032c	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN34@display_ta:
  00336	b8 01 00 00 00	 mov	 eax, 1
  0033b	85 c0		 test	 eax, eax
  0033d	74 0c		 je	 SHORT $LN35@display_ta
  0033f	c7 85 cc fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv185[ebp], 169 ; 000000a9H
  00349	eb 20		 jmp	 SHORT $LN36@display_ta
$LN35@display_ta:
  0034b	68 20 0a 00 00	 push	 2592			; 00000a20H
  00350	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00355	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0035b	51		 push	 ecx
  0035c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00361	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv185[ebp], 0
$LN36@display_ta:
  0036b	68 a9 00 00 00	 push	 169			; 000000a9H
  00370	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00376	52		 push	 edx
  00377	69 85 d0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv178[ebp], 1116
  00381	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv185[ebp]
  00387	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0038e	ff d2		 call	 edx
  00390	85 c0		 test	 eax, eax
  00392	74 42		 je	 SHORT $LN12@display_ta

; 2593 : 	{
; 2594 : 		set_2d_mono_font_position (-0.8, 0.1);

  00394	51		 push	 ecx
  00395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  003ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2595 : 		set_mono_font_rel_position (0.0, 0.0);

  003b5	51		 push	 ecx
  003b6	0f 57 c0	 xorps	 xmm0, xmm0
  003b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003be	51		 push	 ecx
  003bf	0f 57 c0	 xorps	 xmm0, xmm0
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2596 : 		print_mono_font_string("R");

  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_01DGKLNCNG@R@
  003d1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN12@display_ta:

; 2597 : 	}
; 2598 : 	
; 2599 : 
; 2600 : 	//
; 2601 : 	// weapon lock
; 2602 : 	//
; 2603 : 
; 2604 : 	switch (weapon_lock_type)

  003d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A ; weapon_lock_type
  003db	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv197[ebp], eax
  003e1	83 bd d0 fe ff
	ff 09		 cmp	 DWORD PTR tv197[ebp], 9
  003e8	77 79		 ja	 SHORT $LN25@display_ta
  003ea	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv197[ebp]
  003f0	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN41@display_ta[ecx*4]
$LN13@display_ta:

; 2605 : 	{
; 2606 : 		case WEAPON_LOCK_NO_ACQUIRE:
; 2607 : 			s = "NO ACQ";

  003f7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 2608 : 			break;

  003fe	eb 76		 jmp	 SHORT $LN2@display_ta
$LN14@display_ta:

; 2609 : 		case WEAPON_LOCK_NO_WEAPON:
; 2610 : 			s = "NO WPN";

  00400	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06BNPEMCDI@NO?5WPN@

; 2611 : 			break;

  00407	eb 6d		 jmp	 SHORT $LN2@display_ta
$LN15@display_ta:

; 2612 : 		case WEAPON_LOCK_NO_TARGET:
; 2613 : 			s = "NO TGT";

  00409	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06KGAFCCPI@NO?5TGT@

; 2614 : 			break;

  00410	eb 64		 jmp	 SHORT $LN2@display_ta
$LN16@display_ta:

; 2615 : 		case WEAPON_LOCK_INVALID_TARGET:
; 2616 : 			s = "INV TGT";

  00412	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07EMEAKIHK@INV?5TGT@

; 2617 : 			break;

  00419	eb 5b		 jmp	 SHORT $LN2@display_ta
$LN17@display_ta:

; 2618 : 		case WEAPON_LOCK_SEEKER_LIMIT:
; 2619 : 			s = "SKR LMT";

  0041b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07PAKIBCIO@SKR?5LMT@

; 2620 : 			break;

  00422	eb 52		 jmp	 SHORT $LN2@display_ta
$LN18@display_ta:

; 2621 : 		case WEAPON_LOCK_NO_LOS:
; 2622 : 			s = "NO LOS";

  00424	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06HCPKJKPH@NO?5LOS@

; 2623 : 			break;

  0042b	eb 49		 jmp	 SHORT $LN2@display_ta
$LN19@display_ta:

; 2624 : 		case WEAPON_LOCK_NO_BORESIGHT:
; 2625 : 			s = "NO SGT";

  0042d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06DLNCBKEB@NO?5SGT@

; 2626 : 			break;

  00434	eb 40		 jmp	 SHORT $LN2@display_ta
$LN20@display_ta:

; 2627 : 		case WEAPON_LOCK_MIN_RANGE:
; 2628 : 			if (range_finder != RANGEFINDER_TRIANGULATION)

  00436	83 bd 24 ff ff
	ff 02		 cmp	 DWORD PTR _range_finder$[ebp], 2
  0043d	74 09		 je	 SHORT $LN21@display_ta

; 2629 : 			{
; 2630 : 				s = "MIN RNG";

  0043f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07KJHNDNDJ@MIN?5RNG@

; 2631 : 				break;

  00446	eb 2e		 jmp	 SHORT $LN2@display_ta
$LN21@display_ta:

; 2632 : 			}
; 2633 : 			// fallthrough
; 2634 : 		case WEAPON_LOCK_MAX_RANGE:
; 2635 : 			if (range_finder != RANGEFINDER_TRIANGULATION)

  00448	83 bd 24 ff ff
	ff 02		 cmp	 DWORD PTR _range_finder$[ebp], 2
  0044f	74 09		 je	 SHORT $LN23@display_ta

; 2636 : 			{
; 2637 : 				s = "MAX RNG";

  00451	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07EPBNJCNI@MAX?5RNG@

; 2638 : 				break;

  00458	eb 1c		 jmp	 SHORT $LN2@display_ta
$LN23@display_ta:

; 2639 : 			}
; 2640 : 			// fallthrough
; 2641 : 		case WEAPON_LOCK_VALID:
; 2642 : 			s = "LOCK";

  0045a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04GPIFAJG@LOCK@

; 2643 : 			break;

  00461	eb 13		 jmp	 SHORT $LN2@display_ta
$LN25@display_ta:

; 2644 : 		default:
; 2645 : 			debug_fatal ("Invalid weapon lock type = %d", weapon_lock_type);

  00463	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A ; weapon_lock_type
  00468	50		 push	 eax
  00469	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@
  0046e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00473	83 c4 08	 add	 esp, 8
$LN2@display_ta:

; 2646 : 			break;
; 2647 : 	}
; 2648 : 
; 2649 : 	width = get_mono_font_string_width (s);

  00476	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00479	50		 push	 eax
  0047a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0047f	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2650 : 	set_2d_mono_font_position (-0.9, -0.2);

  00485	51		 push	 ecx
  00486	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	51		 push	 ecx
  00494	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2651 : 	set_mono_font_rel_position (0.0, 0.0);

  004a6	51		 push	 ecx
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004af	51		 push	 ecx
  004b0	0f 57 c0	 xorps	 xmm0, xmm0
  004b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2652 : 	print_mono_font_string (s);

  004bd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004c0	50		 push	 eax
  004c1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2653 : 
; 2654 : 	//
; 2655 : 	// target name
; 2656 : 	//
; 2657 : 
; 2658 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  004c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  004cd	74 0f		 je	 SHORT $LN37@display_ta
  004cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  004d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d6	89 8d d0 fe ff
	ff		 mov	 DWORD PTR tv216[ebp], ecx
  004dc	eb 27		 jmp	 SHORT $LN38@display_ta
$LN37@display_ta:
  004de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
  004e4	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  004ea	52		 push	 edx
  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  004f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004fb	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv216[ebp], 0
$LN38@display_ta:
  00505	b9 01 00 00 00	 mov	 ecx, 1
  0050a	85 c9		 test	 ecx, ecx
  0050c	74 0c		 je	 SHORT $LN39@display_ta
  0050e	c7 85 cc fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv224[ebp], 38 ; 00000026H
  00518	eb 27		 jmp	 SHORT $LN40@display_ta
$LN39@display_ta:
  0051a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_target_information@@YGXXZ@4JA
  00520	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00526	52		 push	 edx
  00527	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0052c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00531	50		 push	 eax
  00532	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00537	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv224[ebp], 0
$LN40@display_ta:
  00541	6a 26		 push	 38			; 00000026H
  00543	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00549	51		 push	 ecx
  0054a	69 95 d0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv216[ebp], 180
  00554	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  0055a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00561	ff d1		 call	 ecx
  00563	89 85 2c ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 2659 : 
; 2660 : 	if (target)

  00569	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00570	0f 84 85 00 00
	00		 je	 $LN27@display_ta

; 2661 : 	{
; 2662 : 		s = get_target_display_name (target, buffer, TRUE);

  00576	6a 01		 push	 1
  00578	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0057e	50		 push	 eax
  0057f	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00585	51		 push	 ecx
  00586	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0058b	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2663 : 
; 2664 : 		if (s)

  0058e	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00592	74 67		 je	 SHORT $LN27@display_ta

; 2665 : 		{
; 2666 : 			width = get_mono_font_string_width (s);

  00594	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0059d	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2667 : 			set_2d_mono_font_position (0.0, -0.75);

  005a3	51		 push	 ecx
  005a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  005ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b1	51		 push	 ecx
  005b2	0f 57 c0	 xorps	 xmm0, xmm0
  005b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ba	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2668 : 			set_mono_font_rel_position (-width * 0.5, 0.0);

  005bf	51		 push	 ecx
  005c0	0f 57 c0	 xorps	 xmm0, xmm0
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  005d0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005d7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  005db	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  005e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005e7	51		 push	 ecx
  005e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ed	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2669 : 			print_mono_font_string (s);

  005f2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005f5	50		 push	 eax
  005f6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN27@display_ta:

; 2670 : 		}
; 2671 : 	}
; 2672 : }

  005fb	5f		 pop	 edi
  005fc	5e		 pop	 esi
  005fd	5b		 pop	 ebx
  005fe	8b e5		 mov	 esp, ebp
  00600	5d		 pop	 ebp
  00601	c3		 ret	 0
  00602	66 90		 npad	 2
$LN41@display_ta:
  00604	00 00 00 00	 DD	 $LN13@display_ta
  00608	00 00 00 00	 DD	 $LN14@display_ta
  0060c	00 00 00 00	 DD	 $LN15@display_ta
  00610	00 00 00 00	 DD	 $LN16@display_ta
  00614	00 00 00 00	 DD	 $LN17@display_ta
  00618	00 00 00 00	 DD	 $LN18@display_ta
  0061c	00 00 00 00	 DD	 $LN19@display_ta
  00620	00 00 00 00	 DD	 $LN20@display_ta
  00624	00 00 00 00	 DD	 $LN21@display_ta
  00628	00 00 00 00	 DD	 $LN23@display_ta
?display_target_information@@YGXXZ ENDP			; display_target_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?display_weapon_information@@YGXXZ
_TEXT	SEGMENT
tv137 = -200						; size = 8
tv299 = -192						; size = 8
tv186 = -192						; size = 8
tv172 = -192						; size = 4
tv156 = -192						; size = 8
tv138 = -192						; size = 8
tv78 = -192						; size = 4
tv312 = -188						; size = 4
tv305 = -188						; size = 4
tv164 = -188						; size = 4
tv70 = -188						; size = 4
_roll$1 = -120						; size = 4
_drop_hud_distance$2 = -116				; size = 4
_head_offset_z$3 = -112					; size = 4
_angle_of_drop$4 = -108					; size = 4
_y$5 = -104						; size = 4
_x$6 = -100						; size = 4
_flight_time$7 = -96					; size = 4
_count$8 = -92						; size = 4
_weapon_type$ = -88					; size = 4
_s$ = -84						; size = 80
_weapon_sub_type$ = -4					; size = 4
?display_weapon_information@@YGXXZ PROC			; display_weapon_information, COMDAT

; 2442 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2443 : 	entity_sub_types weapon_sub_type;
; 2444 : 	char s[80], *weapon_type;
; 2445 : 
; 2446 : 	weapon_sub_type = get_local_entity_int_value (get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00013	74 0f		 je	 SHORT $LN19@display_we
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN20@display_we
$LN19@display_we:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  0002a	83 c2 04	 add	 edx, 4
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN20@display_we:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN21@display_we
  00051	c7 85 40 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005b	eb 24		 jmp	 SHORT $LN22@display_we
$LN21@display_we:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  00063	83 c2 04	 add	 edx, 4
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN22@display_we:
  00081	68 b8 00 00 00	 push	 184			; 000000b8H
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0008c	51		 push	 ecx
  0008d	69 95 44 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 fc	 mov	 DWORD PTR _weapon_sub_type$[ebp], eax

; 2447 : 
; 2448 : 	if (weapon_sub_type != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  000a9	83 7d fc 00	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 0
  000ad	0f 84 4d 04 00
	00		 je	 $LN2@display_we

; 2449 : 	{
; 2450 : 		int count = get_local_entity_weapon_count (get_gunship_entity (), weapon_sub_type);

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  000b6	50		 push	 eax
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  000c3	89 45 a4	 mov	 DWORD PTR _count$8[ebp], eax

; 2451 : 		
; 2452 : 		if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_2A42_30MM_HE_ROUND
; 2453 : 			|| weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_2A42_30MM_AP_ROUND)

  000c6	83 7d fc 13	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 19 ; 00000013H
  000ca	74 06		 je	 SHORT $LN5@display_we
  000cc	83 7d fc 14	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 20 ; 00000014H
  000d0	75 5a		 jne	 SHORT $LN3@display_we
$LN5@display_we:

; 2454 : 		{
; 2455 : 			set_mono_font_type (MONO_FONT_TYPE_6X10);

  000d2	6a 04		 push	 4
  000d4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2456 : 			set_2d_mono_font_position (-0.9, -0.7);

  000d9	51		 push	 ecx
  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	51		 push	 ecx
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2457 : 			set_mono_font_rel_position (0.0, 0.0);

  000fa	51		 push	 ecx
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	0f 57 c0	 xorps	 xmm0, xmm0
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2458 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_2A42_30MM_HE_ROUND)

  00111	83 7d fc 13	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 19 ; 00000013H
  00115	75 09		 jne	 SHORT $LN6@display_we

; 2459 : 				weapon_type = "HE %03d";

  00117	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _weapon_type$[ebp], OFFSET ??_C@_07KPIMALJJ@HE?5?$CF03d@

; 2460 : 			else

  0011e	eb 07		 jmp	 SHORT $LN7@display_we
$LN6@display_we:

; 2461 : 				weapon_type = "AP %03d";

  00120	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _weapon_type$[ebp], OFFSET ??_C@_07IFCFKDNL@AP?5?$CF03d@
$LN7@display_we:
  00127	e9 66 03 00 00	 jmp	 $LN12@display_we
$LN3@display_we:

; 2462 : 		}
; 2463 : 		else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_ATAKA)

  0012c	83 7d fc 31	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 49 ; 00000031H
  00130	0f 85 f1 00 00
	00		 jne	 $LN8@display_we

; 2464 : 		{
; 2465 : 			float flight_time = get_missile_flight_time ();

  00136	e8 00 00 00 00	 call	 ?get_missile_flight_time@@YGMXZ ; get_missile_flight_time
  0013b	d9 5d a0	 fstp	 DWORD PTR _flight_time$7[ebp]

; 2466 : 
; 2467 : 			if (flight_time > 0.01)

  0013e	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _flight_time$7[ebp]
  00143	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0014b	0f 86 ca 00 00
	00		 jbe	 $LN10@display_we

; 2468 : 			{
; 2469 : 				flight_time = bound (flight_time, 0.0, 99.9);

  00151	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _flight_time$7[ebp]
  00156	0f 57 c9	 xorps	 xmm1, xmm1
  00159	66 0f 2f c8	 comisd	 xmm1, xmm0
  0015d	76 0d		 jbe	 SHORT $LN25@display_we
  0015f	0f 57 c0	 xorps	 xmm0, xmm0
  00162	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv138[ebp], xmm0
  0016a	eb 3e		 jmp	 SHORT $LN26@display_we
$LN25@display_we:
  0016c	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _flight_time$7[ebp]
  00171	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4058f9999999999a
  00179	76 12		 jbe	 SHORT $LN23@display_we
  0017b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4058f9999999999a
  00183	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv137[ebp], xmm0
  0018b	eb 0d		 jmp	 SHORT $LN24@display_we
$LN23@display_we:
  0018d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _flight_time$7[ebp]
  00192	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv137[ebp], xmm0
$LN24@display_we:
  0019a	f2 0f 10 85 38
	ff ff ff	 movsd	 xmm0, QWORD PTR tv137[ebp]
  001a2	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv138[ebp], xmm0
$LN26@display_we:
  001aa	f2 0f 5a 85 40
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv138[ebp]
  001b2	f3 0f 11 45 a0	 movss	 DWORD PTR _flight_time$7[ebp], xmm0

; 2470 : 				sprintf (s, "%02.0f", flight_time);

  001b7	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _flight_time$7[ebp]
  001bc	83 ec 08	 sub	 esp, 8
  001bf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_06HHKMCLEN@?$CF02?40f@
  001c9	8d 45 ac	 lea	 eax, DWORD PTR _s$[ebp]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _sprintf
  001d2	83 c4 10	 add	 esp, 16			; 00000010H

; 2471 : 				set_2d_mono_font_position (-0.5, -0.65);

  001d5	51		 push	 ecx
  001d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  001de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e3	51		 push	 ecx
  001e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2472 : 				set_mono_font_rel_position (1.0, 0.0);

  001f6	51		 push	 ecx
  001f7	0f 57 c0	 xorps	 xmm0, xmm0
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2473 : 				print_mono_font_string (s);

  00212	8d 45 ac	 lea	 eax, DWORD PTR _s$[ebp]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN10@display_we:

; 2474 : 			}
; 2475 : 			weapon_type = "MSL %02d";

  0021b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _weapon_type$[ebp], OFFSET ??_C@_08LGPBCGJH@MSL?5?$CF02d@
  00222	e9 6b 02 00 00	 jmp	 $LN12@display_we
$LN8@display_we:

; 2476 : 		}
; 2477 : 		else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_IGLA_V)

  00227	83 7d fc 27	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 39 ; 00000027H
  0022b	75 0c		 jne	 SHORT $LN11@display_we

; 2478 : 			weapon_type = "ATA %02d";

  0022d	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _weapon_type$[ebp], OFFSET ??_C@_08DLNHLNFK@ATA?5?$CF02d@

; 2479 : 		else

  00234	e9 59 02 00 00	 jmp	 $LN12@display_we
$LN11@display_we:

; 2480 : 		{
; 2481 : 			float x,y;
; 2482 : 			float angle_of_drop = 0.0;

  00239	0f 57 c0	 xorps	 xmm0, xmm0
  0023c	f3 0f 11 45 94	 movss	 DWORD PTR _angle_of_drop$4[ebp], xmm0

; 2483 : 			float head_offset_z = get_global_wide_cockpit() ? wide_cockpit_position[WIDEVIEW_HAVOC_PILOT].c.z : 0.0;

  00241	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?wide_cockpit@@3HA, 0 ; wide_cockpit
  00248	74 1a		 je	 SHORT $LN27@display_we
  0024a	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  0024f	6b c8 06	 imul	 ecx, eax, 6
  00252	f3 0f 5a 81 1c
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A[ecx+28]
  0025a	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv156[ebp], xmm0
  00262	eb 0b		 jmp	 SHORT $LN28@display_we
$LN27@display_we:
  00264	0f 57 c0	 xorps	 xmm0, xmm0
  00267	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv156[ebp], xmm0
$LN28@display_we:
  0026f	f2 0f 5a 85 40
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv156[ebp]
  00277	f3 0f 11 45 90	 movss	 DWORD PTR _head_offset_z$3[ebp], xmm0

; 2484 : 			float drop_hud_distance;
; 2485 : 			float roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  0027c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00283	74 0f		 je	 SHORT $LN29@display_we
  00285	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0028a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028c	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv164[ebp], ecx
  00292	eb 24		 jmp	 SHORT $LN30@display_we
$LN29@display_we:
  00294	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  0029a	83 c2 2b	 add	 edx, 43			; 0000002bH
  0029d	52		 push	 edx
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ae	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv164[ebp], 0
$LN30@display_we:
  002b8	b9 01 00 00 00	 mov	 ecx, 1
  002bd	85 c9		 test	 ecx, ecx
  002bf	74 0c		 je	 SHORT $LN31@display_we
  002c1	c7 85 40 ff ff
	ff 71 00 00 00	 mov	 DWORD PTR tv172[ebp], 113 ; 00000071H
  002cb	eb 24		 jmp	 SHORT $LN32@display_we
$LN31@display_we:
  002cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_weapon_information@@YGXXZ@4JA
  002d3	83 c2 2b	 add	 edx, 43			; 0000002bH
  002d6	52		 push	 edx
  002d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CLMCCCNE@c?3?2users?2nhv90?2projects?2eech?2ap@
  002dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e7	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN32@display_we:
  002f1	6a 71		 push	 113			; 00000071H
  002f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002f9	51		 push	 ecx
  002fa	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv164[ebp], 700
  00304	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv172[ebp]
  0030a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00311	ff d1		 call	 ecx
  00313	d9 5d 88	 fstp	 DWORD PTR _roll$1[ebp]

; 2486 : 
; 2487 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_GSH23L_23MM_ROUND)

  00316	83 7d fc 0f	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 15 ; 0000000fH
  0031a	75 09		 jne	 SHORT $LN13@display_we

; 2488 : 				weapon_type = "GUN %03d";

  0031c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _weapon_type$[ebp], OFFSET ??_C@_08HDONNOJA@GUN?5?$CF03d@

; 2489 : 			else

  00323	eb 07		 jmp	 SHORT $LN14@display_we
$LN13@display_we:

; 2490 : 				weapon_type = "RKT %03d";

  00325	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _weapon_type$[ebp], OFFSET ??_C@_08DPCFDJDH@RKT?5?$CF03d@
$LN14@display_we:

; 2491 : 
; 2492 : 			angle_of_drop = get_weapon_drop(weapon_sub_type);

  0032c	8b 45 fc	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0032f	50		 push	 eax
  00330	e8 00 00 00 00	 call	 ?get_weapon_drop@@YGMH@Z ; get_weapon_drop
  00335	d9 5d 94	 fstp	 DWORD PTR _angle_of_drop$4[ebp]

; 2493 : 
; 2494 : 			// move eo to hit point
; 2495 : 			if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_OFF)

  00338	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 0 ; target_acquisition_system
  0033f	75 20		 jne	 SHORT $LN15@display_we

; 2496 : 				slew_eo_to_direction(-angle_of_drop, 0.0);

  00341	51		 push	 ecx
  00342	0f 57 c0	 xorps	 xmm0, xmm0
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _angle_of_drop$4[ebp]
  0034f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00356	51		 push	 ecx
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	e8 00 00 00 00	 call	 ?slew_eo_to_direction@@YGXMM@Z ; slew_eo_to_direction
$LN15@display_we:

; 2497 : 
; 2498 : 			x = 0.0;

  00361	0f 57 c0	 xorps	 xmm0, xmm0
  00364	f3 0f 11 45 9c	 movss	 DWORD PTR _x$6[ebp], xmm0

; 2499 : 			y = get_global_wide_cockpit() ? 0.26 : 0.0;

  00369	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?wide_cockpit@@3HA, 0 ; wide_cockpit
  00370	74 12		 je	 SHORT $LN33@display_we
  00372	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd0a3d70a3d70a4
  0037a	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv186[ebp], xmm0
  00382	eb 0b		 jmp	 SHORT $LN34@display_we
$LN33@display_we:
  00384	0f 57 c0	 xorps	 xmm0, xmm0
  00387	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv186[ebp], xmm0
$LN34@display_we:
  0038f	f2 0f 5a 85 40
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv186[ebp]
  00397	f3 0f 11 45 98	 movss	 DWORD PTR _y$5[ebp], xmm0

; 2500 : 
; 2501 : 			// this magic formula translates the angle to a HUD distance
; 2502 : 			// the magic values are just arrived at by measuring in game
; 2503 : 			drop_hud_distance = atan(angle_of_drop) * ((head_offset_z * 0.82) + 0.56) * HUD_UNIT_RATIO;

  0039c	51		 push	 ecx
  0039d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _angle_of_drop$4[ebp]
  003a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a7	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  003ac	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv299[ebp]
  003b2	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv299[ebp]
  003ba	f3 0f 5a 4d 90	 cvtss2sd xmm1, DWORD PTR _head_offset_z$3[ebp]
  003bf	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fea3d70a3d70a3d
  003c7	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3fe1eb851eb851ec
  003cf	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@402d333333333333
  003db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003df	f3 0f 11 45 8c	 movss	 DWORD PTR _drop_hud_distance$2[ebp], xmm0

; 2504 : 			y -= cos(roll) * drop_hud_distance;

  003e4	51		 push	 ecx
  003e5	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _roll$1[ebp]
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  003f4	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv305[ebp]
  003fa	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv305[ebp]
  00402	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _drop_hud_distance$2[ebp]
  00407	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _y$5[ebp]
  0040c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00410	f3 0f 11 4d 98	 movss	 DWORD PTR _y$5[ebp], xmm1

; 2505 : 			x += sin(roll) * drop_hud_distance;

  00415	51		 push	 ecx
  00416	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _roll$1[ebp]
  0041b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00420	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00425	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv312[ebp]
  0042b	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv312[ebp]
  00433	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _drop_hud_distance$2[ebp]
  00438	f3 0f 58 45 9c	 addss	 xmm0, DWORD PTR _x$6[ebp]
  0043d	f3 0f 11 45 9c	 movss	 DWORD PTR _x$6[ebp], xmm0

; 2506 : 
; 2507 : 			draw_2d_circle(x, y, 0.1, hud_colour);

  00442	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00447	50		 push	 eax
  00448	51		 push	 ecx
  00449	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	51		 push	 ecx
  00457	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0045c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00461	51		 push	 ecx
  00462	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00467	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046c	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2508 : 			set_2d_pixel(x, y, hud_colour); 

  00471	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00476	50		 push	 eax
  00477	51		 push	 ecx
  00478	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	51		 push	 ecx
  00483	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00488	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048d	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel
$LN12@display_we:

; 2509 : 		}
; 2510 : 
; 2511 : 		if (draw_large_hud)

  00492	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_hud@@3HA, 0
  00499	74 09		 je	 SHORT $LN16@display_we

; 2512 : 			set_mono_font_type (MONO_FONT_TYPE_6X10);

  0049b	6a 04		 push	 4
  0049d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2513 : 		else

  004a2	eb 07		 jmp	 SHORT $LN17@display_we
$LN16@display_we:

; 2514 : 			set_mono_font_type (MONO_FONT_TYPE_3X6);

  004a4	6a 00		 push	 0
  004a6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN17@display_we:

; 2515 : 
; 2516 : 		set_2d_mono_font_position (-0.85, -0.1);

  004ab	51		 push	 ecx
  004ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  004b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b9	51		 push	 ecx
  004ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  004c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2517 : 		set_mono_font_rel_position (0.0, 0.0);

  004cc	51		 push	 ecx
  004cd	0f 57 c0	 xorps	 xmm0, xmm0
  004d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d5	51		 push	 ecx
  004d6	0f 57 c0	 xorps	 xmm0, xmm0
  004d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004de	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2518 : 		sprintf(s, weapon_type, count);

  004e3	8b 45 a4	 mov	 eax, DWORD PTR _count$8[ebp]
  004e6	50		 push	 eax
  004e7	8b 4d a8	 mov	 ecx, DWORD PTR _weapon_type$[ebp]
  004ea	51		 push	 ecx
  004eb	8d 55 ac	 lea	 edx, DWORD PTR _s$[ebp]
  004ee	52		 push	 edx
  004ef	e8 00 00 00 00	 call	 _sprintf
  004f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2519 : 		print_mono_font_string (s);

  004f7	8d 45 ac	 lea	 eax, DWORD PTR _s$[ebp]
  004fa	50		 push	 eax
  004fb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_we:

; 2520 : 	}
; 2521 : }

  00500	5f		 pop	 edi
  00501	5e		 pop	 esi
  00502	5b		 pop	 ebx
  00503	8b e5		 mov	 esp, ebp
  00505	5d		 pop	 ebp
  00506	c3		 ret	 0
?display_weapon_information@@YGXXZ ENDP			; display_weapon_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?initialise_hms_gun_pipper@@YGXXZ
_TEXT	SEGMENT
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_i$ = -4						; size = 4
?initialise_hms_gun_pipper@@YGXXZ PROC			; initialise_hms_gun_pipper, COMDAT

; 2259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2260 : 	int
; 2261 : 		i;
; 2262 : 
; 2263 : 	float
; 2264 : 		theta,
; 2265 : 		sin_theta,
; 2266 : 		cos_theta;
; 2267 : 
; 2268 : 	theta = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 2269 : 
; 2270 : 	for (i = 0; i < NUM_GUN_PIPPER_POINTS; i++)

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00018	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  00023	81 7d fc 82 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 130	; 00000082H
  0002a	0f 8d 87 00 00
	00		 jge	 $LN3@initialise

; 2271 : 	{
; 2272 : 		sin_theta = sin (theta);

  00030	51		 push	 ecx
  00031	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00040	d9 5d f4	 fstp	 DWORD PTR _sin_theta$[ebp]

; 2273 : 		cos_theta = cos (theta);

  00043	51		 push	 ecx
  00044	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00053	d9 5d f0	 fstp	 DWORD PTR _cos_theta$[ebp]

; 2274 : 
; 2275 : 		gun_pipper_points[i][0] = sin_theta * GUN_PIPPER_SIZE;

  00056	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _sin_theta$[ebp]
  0005b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00063	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 00	 imul	 ecx, eax, 0
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00072	f3 0f 11 84 d1
	00 00 00 00	 movss	 DWORD PTR ?gun_pipper_points@@3PAY01MA[ecx+edx*8], xmm0

; 2276 : 		gun_pipper_points[i][1] = cos_theta * GUN_PIPPER_SIZE;

  0007b	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _cos_theta$[ebp]
  00080	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00088	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	c1 e0 00	 shl	 eax, 0
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00097	f3 0f 11 84 c8
	00 00 00 00	 movss	 DWORD PTR ?gun_pipper_points@@3PAY01MA[eax+ecx*8], xmm0

; 2277 : 
; 2278 : 		theta += GUN_PIPPER_ANGULAR_STEP_SIZE;

  000a0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  000a5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d45f7fb
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 2279 : 	}

  000b2	e9 63 ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 2280 : }

  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
?initialise_hms_gun_pipper@@YGXXZ ENDP			; initialise_hms_gun_pipper
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_havoc_hms@@YGXXZ
_TEXT	SEGMENT
tv95 = -356						; size = 4
tv128 = -352						; size = 4
_specular$ = -284					; size = 4
_colour$ = -280						; size = 4
_quad$ = -276						; size = 256
_max_offset$ = -20					; size = 4
_pitch_offset$ = -16					; size = 4
_heading_offset$ = -12					; size = 4
_alpha$ = -8						; size = 4
_store_hud_colour$ = -4					; size = 4
?draw_havoc_hms@@YGXXZ PROC				; draw_havoc_hms, COMDAT

; 2679 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2680 : 	rgb_colour
; 2681 : 		store_hud_colour;
; 2682 : 
; 2683 : 	int
; 2684 : 		alpha;
; 2685 : 
; 2686 : 	float
; 2687 : 		heading_offset,
; 2688 : 		pitch_offset,
; 2689 : 		max_offset;
; 2690 : 
; 2691 : 	vertex
; 2692 : 		quad[4];
; 2693 : 
; 2694 : 	real_colour
; 2695 : 		colour,
; 2696 : 		specular;
; 2697 : 
; 2698 : 	////////////////////////////////////////
; 2699 : 	//
; 2700 : 	// do not draw damaged or inactive HMS
; 2701 : 	//
; 2702 : 	////////////////////////////////////////
; 2703 : 
; 2704 : 	if (havoc_damage.helmet_mounted_sight || !electrical_system_active())

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00011	c1 e8 11	 shr	 eax, 17			; 00000011H
  00014	83 e0 01	 and	 eax, 1
  00017	75 09		 jne	 SHORT $LN3@draw_havoc
  00019	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  0001e	85 c0		 test	 eax, eax
  00020	75 05		 jne	 SHORT $LN2@draw_havoc
$LN3@draw_havoc:

; 2705 : 	{
; 2706 : 		return;

  00022	e9 4c 08 00 00	 jmp	 $LN1@draw_havoc
$LN2@draw_havoc:

; 2707 : 	}
; 2708 : 
; 2709 : 	if (hud_mode != HUD_MODE_WEAPON)

  00027	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?hud_mode@@3W4HUD_MODES@@A, 2 ; hud_mode
  0002e	74 05		 je	 SHORT $LN4@draw_havoc

; 2710 : 	{
; 2711 : 		return;

  00030	e9 3e 08 00 00	 jmp	 $LN1@draw_havoc
$LN4@draw_havoc:

; 2712 : 	}
; 2713 : 
; 2714 : 	////////////////////////////////////////
; 2715 : 	//
; 2716 : 	// reduce alpha as the HUD interferes with the instrument view (some cards cannot do this)
; 2717 : 	//
; 2718 : 	////////////////////////////////////////
; 2719 : 
; 2720 : 	alpha = 255;

  00035	c7 45 f8 ff 00
	00 00		 mov	 DWORD PTR _alpha$[ebp], 255 ; 000000ffH

; 2721 : 
; 2722 : 	if (in_cockpit)

  0003c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_cockpit@@3HA, 0 ; in_cockpit
  00043	0f 84 46 01 00
	00		 je	 $LN12@draw_havoc

; 2723 : 	{
; 2724 : 		if (get_global_draw_cockpit_graphics ())

  00049	83 3d b8 01 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+440, 0
  00050	0f 84 39 01 00
	00		 je	 $LN12@draw_havoc

; 2725 : 		{
; 2726 : 			if (d3d_modulate_alpha)

  00056	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_modulate_alpha@@3HA, 0 ; d3d_modulate_alpha
  0005d	0f 84 fd 00 00
	00		 je	 $LN7@draw_havoc

; 2727 : 			{
; 2728 : 				heading_offset = HAVOC_INSTRUMENT_VIEW_HEADING - pilot_head_heading;

  00063	0f 57 c0	 xorps	 xmm0, xmm0
  00066	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?pilot_head_heading@@3MA
  0006e	f3 0f 11 45 f4	 movss	 DWORD PTR _heading_offset$[ebp], xmm0

; 2729 : 
; 2730 : 				if (heading_offset < 0.0)

  00073	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _heading_offset$[ebp]
  00078	0f 57 c9	 xorps	 xmm1, xmm1
  0007b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0007f	76 11		 jbe	 SHORT $LN9@draw_havoc

; 2731 : 				{
; 2732 : 					heading_offset = -heading_offset;

  00081	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _heading_offset$[ebp]
  00086	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0008d	f3 0f 11 45 f4	 movss	 DWORD PTR _heading_offset$[ebp], xmm0
$LN9@draw_havoc:

; 2733 : 				}
; 2734 : 
; 2735 : 				pitch_offset = HAVOC_INSTRUMENT_VIEW_PITCH - pilot_head_pitch;

  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb2b8c2
  0009a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?pilot_head_pitch@@3MA
  000a2	f3 0f 11 45 f0	 movss	 DWORD PTR _pitch_offset$[ebp], xmm0

; 2736 : 
; 2737 : 				if (pitch_offset < 0.0)

  000a7	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _pitch_offset$[ebp]
  000ac	0f 57 c9	 xorps	 xmm1, xmm1
  000af	66 0f 2f c8	 comisd	 xmm1, xmm0
  000b3	76 11		 jbe	 SHORT $LN10@draw_havoc

; 2738 : 				{
; 2739 : 					pitch_offset = -pitch_offset;

  000b5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pitch_offset$[ebp]
  000ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c1	f3 0f 11 45 f0	 movss	 DWORD PTR _pitch_offset$[ebp], xmm0
$LN10@draw_havoc:

; 2740 : 				}
; 2741 : 
; 2742 : 				if ((heading_offset < rad (25.0)) && (pitch_offset < rad (25.0)))

  000c6	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _heading_offset$[ebp]
  000cb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fdbecde5a000000
  000d3	66 0f 2f c8	 comisd	 xmm1, xmm0
  000d7	0f 86 81 00 00
	00		 jbe	 $LN11@draw_havoc
  000dd	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _pitch_offset$[ebp]
  000e2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fdbecde5a000000
  000ea	66 0f 2f c8	 comisd	 xmm1, xmm0
  000ee	76 6e		 jbe	 SHORT $LN11@draw_havoc

; 2743 : 				{
; 2744 : 					max_offset = max (heading_offset, pitch_offset);

  000f0	8d 45 f0	 lea	 eax, DWORD PTR _pitch_offset$[ebp]
  000f3	50		 push	 eax
  000f4	8d 4d f4	 lea	 ecx, DWORD PTR _heading_offset$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000fd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00101	f3 0f 11 45 ec	 movss	 DWORD PTR _max_offset$[ebp], xmm0

; 2745 : 
; 2746 : 					alpha = (int) (max_offset * (200.0 / rad (25.0))) + 55;

  00106	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _max_offset$[ebp]
  0010b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407ca5dc1e1ce25c
  00113	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00117	83 c0 37	 add	 eax, 55			; 00000037H
  0011a	89 45 f8	 mov	 DWORD PTR _alpha$[ebp], eax

; 2747 : 
; 2748 : 					alpha = bound (alpha, 0, 255);

  0011d	79 0c		 jns	 SHORT $LN23@draw_havoc
  0011f	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
  00129	eb 2a		 jmp	 SHORT $LN24@draw_havoc
$LN23@draw_havoc:
  0012b	81 7d f8 ff 00
	00 00		 cmp	 DWORD PTR _alpha$[ebp], 255 ; 000000ffH
  00132	7e 0c		 jle	 SHORT $LN21@draw_havoc
  00134	c7 85 9c fe ff
	ff ff 00 00 00	 mov	 DWORD PTR tv95[ebp], 255 ; 000000ffH
  0013e	eb 09		 jmp	 SHORT $LN22@draw_havoc
$LN21@draw_havoc:
  00140	8b 45 f8	 mov	 eax, DWORD PTR _alpha$[ebp]
  00143	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv95[ebp], eax
$LN22@draw_havoc:
  00149	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv95[ebp]
  0014f	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
$LN24@draw_havoc:
  00155	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv128[ebp]
  0015b	89 55 f8	 mov	 DWORD PTR _alpha$[ebp], edx
$LN11@draw_havoc:

; 2749 : 				}
; 2750 : 			}
; 2751 : 			else

  0015e	eb 2f		 jmp	 SHORT $LN12@draw_havoc
$LN7@draw_havoc:

; 2752 : 			{
; 2753 : 				if ((pilot_head_heading == HAVOC_INSTRUMENT_VIEW_HEADING) && (pilot_head_pitch == HAVOC_INSTRUMENT_VIEW_PITCH))

  00160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_head_heading@@3MA
  00168	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0016f	9f		 lahf
  00170	f6 c4 44	 test	 ah, 68			; 00000044H
  00173	7a 1a		 jp	 SHORT $LN12@draw_havoc
  00175	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_head_pitch@@3MA
  0017d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@beb2b8c2
  00184	9f		 lahf
  00185	f6 c4 44	 test	 ah, 68			; 00000044H
  00188	7a 05		 jp	 SHORT $LN12@draw_havoc

; 2754 : 				{
; 2755 : 					return;

  0018a	e9 e4 06 00 00	 jmp	 $LN1@draw_havoc
$LN12@draw_havoc:

; 2756 : 				}
; 2757 : 			}
; 2758 : 		}
; 2759 : 	}
; 2760 : 
; 2761 : 	////////////////////////////////////////
; 2762 : 	//
; 2763 : 	// set active 3D environment now else 2D clipping will be affected
; 2764 : 	//
; 2765 : 	////////////////////////////////////////
; 2766 : 
; 2767 : 	set_main_3d_full_screen_params (DISPLAY_3D_TINT_CLEAR, DISPLAY_3D_LIGHT_LEVEL_HIGH, DISPLAY_3D_NOISE_LEVEL_NONE);

  0018f	6a 00		 push	 0
  00191	6a 02		 push	 2
  00193	6a 00		 push	 0
  00195	e8 00 00 00 00	 call	 ?set_main_3d_full_screen_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@@Z ; set_main_3d_full_screen_params

; 2768 : 
; 2769 : 	set_3d_active_environment (main_3d_env);

  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 2770 : 
; 2771 : 	////////////////////////////////////////
; 2772 : 	//
; 2773 : 	// set up HUD 2D environment
; 2774 : 	//
; 2775 : 	////////////////////////////////////////
; 2776 : 
; 2777 : 	set_2d_active_environment (hud_env);

  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 2778 : 
; 2779 : 	set_2d_window (hud_env, HUD_WINDOW_X_MIN, HUD_WINDOW_Y_MIN, HUD_WINDOW_X_MAX, HUD_WINDOW_Y_MAX);

  001b0	51		 push	 ecx
  001b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	51		 push	 ecx
  001bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	51		 push	 ecx
  001cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	51		 push	 ecx
  001db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 2780 : 
; 2781 : 	hud_viewport_x_org = HUD_VIEWPORT_LARGE_SIZE * 0.5;

  001f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  001fb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_org@@3MA, xmm0

; 2782 : 	hud_viewport_y_org = HUD_VIEWPORT_LARGE_SIZE * 0.5;

  00203	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0020b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_org@@3MA, xmm0

; 2783 : 
; 2784 : 	hud_viewport_x_min = 0.0;

  00213	0f 57 c0	 xorps	 xmm0, xmm0
  00216	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_min@@3MA, xmm0

; 2785 : 	hud_viewport_y_min = 0.0;

  0021e	0f 57 c0	 xorps	 xmm0, xmm0
  00221	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_min@@3MA, xmm0

; 2786 : 
; 2787 : 	hud_viewport_x_max = HUD_VIEWPORT_LARGE_SIZE - 0.001;

  00229	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  00231	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_max@@3MA, xmm0

; 2788 : 	hud_viewport_y_max = HUD_VIEWPORT_LARGE_SIZE - 0.001;

  00239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  00241	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_max@@3MA, xmm0

; 2789 : 
; 2790 : 	set_2d_viewport (hud_env, hud_viewport_x_min, hud_viewport_y_min, hud_viewport_x_max, hud_viewport_y_max);

  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_max@@3MA
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_max@@3MA
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	51		 push	 ecx
  00266	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_min@@3MA
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	51		 push	 ecx
  00274	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_min@@3MA
  0027c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00281	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2791 : 
; 2792 : 	//
; 2793 : 	// get screen co-ords (scaled to keep HUD size constant)
; 2794 : 	//
; 2795 : 
; 2796 : 	if (get_global_unscaled_displays ())

  0028c	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00293	0f 84 95 00 00
	00		 je	 $LN13@draw_havoc

; 2797 : 	{
; 2798 : 		hud_screen_x_min = full_screen_x_mid - 128.0;

  00299	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  002a1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4060000000000000
  002a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ad	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_min@@3MA, xmm0

; 2799 : 		hud_screen_y_min = full_screen_y_mid - 128.0;

  002b5	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  002bd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4060000000000000
  002c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_min@@3MA, xmm0

; 2800 : 
; 2801 : 		hud_screen_x_max = full_screen_x_mid + 127.999;

  002d1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  002d9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@405fffef9db22d0e
  002e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_max@@3MA, xmm0

; 2802 : 		hud_screen_y_max = full_screen_y_mid + 127.999;

  002ed	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  002f5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@405fffef9db22d0e
  002fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00301	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_max@@3MA, xmm0

; 2803 : 
; 2804 : 		hud_screen_x_scale = 1.0;

  00309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00311	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_scale@@3MA, xmm0

; 2805 : 		hud_screen_y_scale = 1.0;

  00319	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00321	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_scale@@3MA, xmm0

; 2806 : 	}
; 2807 : 	else

  00329	e9 f0 00 00 00	 jmp	 $LN14@draw_havoc
$LN13@draw_havoc:

; 2808 : 	{
; 2809 : 		hud_screen_x_min = full_screen_x_mid - ((256.0 / (640.0 * 2.0)) * full_screen_width);

  0032e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00336	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  0033e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00346	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0034a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0034e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_min@@3MA, xmm0

; 2810 : 		hud_screen_y_min = full_screen_y_mid - ((256.0 / (480.0 * 2.0)) * full_screen_height);

  00356	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  0035e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  00366	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  0036e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00372	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00376	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_min@@3MA, xmm0

; 2811 : 
; 2812 : 		hud_screen_x_max = full_screen_x_mid + ((256.0 / (640.0 * 2.0)) * full_screen_width) - 0.001;

  0037e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00386	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  0038e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00396	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0039a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  003a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_max@@3MA, xmm0

; 2813 : 		hud_screen_y_max = full_screen_y_mid + ((256.0 / (480.0 * 2.0)) * full_screen_height) - 0.001;

  003ae	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  003b6	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  003be	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  003c6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003ca	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  003d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003d6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_max@@3MA, xmm0

; 2814 : 
; 2815 : 		hud_screen_x_scale = 640.0 / full_screen_width;

  003de	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  003e6	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4084000000000000
  003ee	f2 0f 5e c8	 divsd	 xmm1, xmm0
  003f2	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003f6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_scale@@3MA, xmm0

; 2816 : 		hud_screen_y_scale = 480.0 / full_screen_height;

  003fe	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00406	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407e000000000000
  0040e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00412	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00416	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_scale@@3MA, xmm0
$LN14@draw_havoc:

; 2817 : 	}
; 2818 : 
; 2819 : 	////////////////////////////////////////
; 2820 : 	//
; 2821 : 	// draw HUD on texture
; 2822 : 	//
; 2823 : 	////////////////////////////////////////
; 2824 : 
; 2825 : 	set_active_screen (large_hms_texture_screen);

  0041e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_hms_texture_screen@@3PAUSCREEN@@A
  00423	50		 push	 eax
  00424	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2826 : 
; 2827 : 	if (lock_screen (large_hms_texture_screen))

  00429	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_hms_texture_screen@@3PAUSCREEN@@A
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00434	85 c0		 test	 eax, eax
  00436	74 75		 je	 SHORT $LN15@draw_havoc

; 2828 : 	{
; 2829 : 	 	store_hud_colour = hud_colour;

  00438	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  0043d	89 45 fc	 mov	 DWORD PTR _store_hud_colour$[ebp], eax

; 2830 : 
; 2831 : 		set_rgb_colour (hud_colour, 255, 255, 255, 255);

  00440	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  00447	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  0044e	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  00455	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 2832 : 
; 2833 : 		set_mono_font_colour (hud_colour);

  0045c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00461	50		 push	 eax
  00462	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2834 : 
; 2835 : 		set_block (0, 0, HUD_VIEWPORT_LARGE_SIZE - 1, HUD_VIEWPORT_LARGE_SIZE - 1, clear_hud_colour);

  00467	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_hud_colour@@3UREAL_COLOUR@@A
  0046c	50		 push	 eax
  0046d	68 ff 00 00 00	 push	 255			; 000000ffH
  00472	68 ff 00 00 00	 push	 255			; 000000ffH
  00477	6a 00		 push	 0
  00479	6a 00		 push	 0
  0047b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 2836 : 
; 2837 : 		draw_layout_grid ();

  00480	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2838 : 
; 2839 : 		draw_hms_centre_datum ();

  00485	e8 00 00 00 00	 call	 ?draw_hms_centre_datum@@YGXXZ ; draw_hms_centre_datum

; 2840 : 
; 2841 : 		draw_target_marker ();

  0048a	e8 00 00 00 00	 call	 ?draw_target_marker@@YGXXZ ; draw_target_marker

; 2842 : 
; 2843 : //		draw_target_range_indicator ();
; 2844 : 
; 2845 : //		display_weapon_information ();
; 2846 : 
; 2847 : //		display_target_information ();
; 2848 : 
; 2849 : 		hud_colour = store_hud_colour;

  0048f	8b 45 fc	 mov	 eax, DWORD PTR _store_hud_colour$[ebp]
  00492	a3 00 00 00 00	 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, eax ; hud_colour

; 2850 : 
; 2851 : 		flush_screen_texture_graphics (large_hms_texture_screen);

  00497	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_hms_texture_screen@@3PAUSCREEN@@A
  0049c	50		 push	 eax
  0049d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 2852 : 
; 2853 : 		unlock_screen (large_hms_texture_screen);

  004a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_hms_texture_screen@@3PAUSCREEN@@A
  004a7	50		 push	 eax
  004a8	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN15@draw_havoc:

; 2854 : 	}
; 2855 : 
; 2856 : 	set_active_screen (video_screen);

  004ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  004b2	50		 push	 eax
  004b3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2857 : 
; 2858 : 	////////////////////////////////////////
; 2859 : 	//
; 2860 : 	// render HUD to screen
; 2861 : 	//
; 2862 : 	////////////////////////////////////////
; 2863 : 
; 2864 : 	set_3d_active_environment (main_3d_env);

  004b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  004bd	50		 push	 eax
  004be	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 2865 : 
; 2866 : 	if (begin_3d_scene ())

  004c3	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  004c8	85 c0		 test	 eax, eax
  004ca	0f 84 a3 03 00
	00		 je	 $LN16@draw_havoc

; 2867 : 	{
; 2868 : 		set_d3d_transparency_on ();

  004d0	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 2869 : 
; 2870 : 		set_d3d_zbuffer_comparison (FALSE);

  004d5	6a 00		 push	 0
  004d7	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 2871 : 
; 2872 : 		set_d3d_culling (FALSE);

  004dc	6a 00		 push	 0
  004de	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 2873 : 
; 2874 : 		set_d3d_texture_wrapping (0, FALSE);

  004e3	6a 00		 push	 0
  004e5	6a 00		 push	 0
  004e7	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 2875 : 
; 2876 : 		if ((application_video_width == 640) || (get_global_unscaled_displays ()))

  004ec	81 3d 00 00 00
	00 80 02 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 640 ; application_video_width, 00000280H
  004f6	74 09		 je	 SHORT $LN19@draw_havoc
  004f8	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  004ff	74 17		 je	 SHORT $LN17@draw_havoc
$LN19@draw_havoc:

; 2877 : 		{
; 2878 : 			set_d3d_texture_mag_filtering (FALSE);

  00501	6a 00		 push	 0
  00503	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 2879 : 			set_d3d_texture_min_filtering (FALSE);

  00508	6a 00		 push	 0
  0050a	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 2880 : 			set_d3d_texture_mip_filtering (FALSE);

  0050f	6a 00		 push	 0
  00511	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 2881 : 		}
; 2882 : 		else

  00516	eb 15		 jmp	 SHORT $LN18@draw_havoc
$LN17@draw_havoc:

; 2883 : 		{
; 2884 : 			set_d3d_texture_mag_filtering (TRUE);

  00518	6a 01		 push	 1
  0051a	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 2885 : 			set_d3d_texture_min_filtering (TRUE);

  0051f	6a 01		 push	 1
  00521	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 2886 : 			set_d3d_texture_mip_filtering (FALSE);

  00526	6a 00		 push	 0
  00528	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN18@draw_havoc:

; 2887 : 		}
; 2888 : 
; 2889 : 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (LARGE_HMS_TEXTURE_INDEX));

  0052d	68 f9 00 00 00	 push	 249			; 000000f9H
  00532	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00537	50		 push	 eax
  00538	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 2890 : 
; 2891 : 		////////////////////////////////////////
; 2892 : 		//
; 2893 : 
; 2894 : 		colour.red				= hud_colour_table[get_global_hud_colour ()].r;

  0053d	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00542	8a 0c 85 02 00
	00 00		 mov	 cl, BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4+2]
  00549	88 8d ea fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+2], cl

; 2895 : 		colour.green			= hud_colour_table[get_global_hud_colour ()].g;

  0054f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00554	8a 0c 85 01 00
	00 00		 mov	 cl, BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4+1]
  0055b	88 8d e9 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+1], cl

; 2896 : 		colour.blue				= hud_colour_table[get_global_hud_colour ()].b;

  00561	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00566	8a 0c 85 00 00
	00 00		 mov	 cl, BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4]
  0056d	88 8d e8 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp], cl

; 2897 : 		colour.alpha			= alpha;

  00573	8a 45 f8	 mov	 al, BYTE PTR _alpha$[ebp]
  00576	88 85 eb fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+3], al

; 2898 : 
; 2899 : 		specular.red			= 0;

  0057c	c6 85 e6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 2900 : 		specular.green			= 0;

  00583	c6 85 e5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 2901 : 		specular.blue			= 0;

  0058a	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 2902 : 		specular.alpha			= 255;

  00591	c6 85 e7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 2903 : 
; 2904 : 		quad[0].i				= hud_screen_x_min;

  00598	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0059d	6b c8 00	 imul	 ecx, eax, 0
  005a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_min@@3MA
  005a8	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 2905 : 		quad[0].j				= hud_screen_y_min;

  005b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005b6	6b c8 00	 imul	 ecx, eax, 0
  005b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_min@@3MA
  005c1	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 2906 : 		quad[0].z				= 0.5;

  005ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005cf	6b c8 00	 imul	 ecx, eax, 0
  005d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005da	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 2907 : 		quad[0].q				= 0.5;

  005e3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005e8	6b c8 00	 imul	 ecx, eax, 0
  005eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005f3	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 2908 : 		quad[0].u				= 0.0;

  005fc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00601	6b c8 00	 imul	 ecx, eax, 0
  00604	0f 57 c0	 xorps	 xmm0, xmm0
  00607	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 2909 : 		quad[0].v				= 0.0;

  00610	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00615	6b c8 00	 imul	 ecx, eax, 0
  00618	0f 57 c0	 xorps	 xmm0, xmm0
  0061b	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 2910 : 
; 2911 : 		quad[1].i				= hud_screen_x_max;

  00624	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00629	c1 e0 00	 shl	 eax, 0
  0062c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_max@@3MA
  00634	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 2912 : 		quad[1].j				= hud_screen_y_min;

  0063d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00642	c1 e0 00	 shl	 eax, 0
  00645	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_min@@3MA
  0064d	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 2913 : 		quad[1].z				= 0.5;

  00656	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0065b	c1 e0 00	 shl	 eax, 0
  0065e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00666	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 2914 : 		quad[1].q				= 0.5;

  0066f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00674	c1 e0 00	 shl	 eax, 0
  00677	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0067f	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 2915 : 		quad[1].u				= 1.0;

  00688	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0068d	c1 e0 00	 shl	 eax, 0
  00690	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00698	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 2916 : 		quad[1].v				= 0.0;

  006a1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006a6	c1 e0 00	 shl	 eax, 0
  006a9	0f 57 c0	 xorps	 xmm0, xmm0
  006ac	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 2917 : 
; 2918 : 		quad[2].i				= hud_screen_x_max;

  006b5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006ba	d1 e0		 shl	 eax, 1
  006bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_max@@3MA
  006c4	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 2919 : 		quad[2].j				= hud_screen_y_max;

  006cd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006d2	d1 e0		 shl	 eax, 1
  006d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_max@@3MA
  006dc	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 2920 : 		quad[2].z				= 0.5;

  006e5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006ea	d1 e0		 shl	 eax, 1
  006ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  006f4	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 2921 : 		quad[2].q				= 0.5;

  006fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00702	d1 e0		 shl	 eax, 1
  00704	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0070c	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 2922 : 		quad[2].u				= 1.0;

  00715	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0071a	d1 e0		 shl	 eax, 1
  0071c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00724	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 2923 : 		quad[2].v				= 1.0;

  0072d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00732	d1 e0		 shl	 eax, 1
  00734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0073c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 2924 : 
; 2925 : 		quad[3].i				= hud_screen_x_min;

  00745	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0074a	6b c8 03	 imul	 ecx, eax, 3
  0074d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_min@@3MA
  00755	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 2926 : 		quad[3].j				= hud_screen_y_max;

  0075e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00763	6b c8 03	 imul	 ecx, eax, 3
  00766	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_max@@3MA
  0076e	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 2927 : 		quad[3].z				= 0.5;

  00777	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0077c	6b c8 03	 imul	 ecx, eax, 3
  0077f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00787	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 2928 : 		quad[3].q				= 0.5;

  00790	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00795	6b c8 03	 imul	 ecx, eax, 3
  00798	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  007a0	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 2929 : 		quad[3].u				= 0.0;

  007a9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007ae	6b c8 03	 imul	 ecx, eax, 3
  007b1	0f 57 c0	 xorps	 xmm0, xmm0
  007b4	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 2930 : 		quad[3].v				= 1.0;

  007bd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007c2	6b c8 03	 imul	 ecx, eax, 3
  007c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007cd	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 2931 : 
; 2932 : 		quad[0].next_vertex	= &quad[1];

  007d6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007db	c1 e0 00	 shl	 eax, 0
  007de	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  007e5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  007ea	6b c2 00	 imul	 eax, edx, 0
  007ed	89 8c 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 2933 : 		quad[1].next_vertex	= &quad[2];

  007f4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007f9	d1 e0		 shl	 eax, 1
  007fb	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00802	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00807	c1 e2 00	 shl	 edx, 0
  0080a	89 8c 15 14 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 2934 : 		quad[2].next_vertex	= &quad[3];

  00811	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00816	6b c8 03	 imul	 ecx, eax, 3
  00819	8d 94 0d ec fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00820	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00825	d1 e0		 shl	 eax, 1
  00827	89 94 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 2935 : 		quad[3].next_vertex	= NULL;

  0082e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00833	6b c8 03	 imul	 ecx, eax, 3
  00836	c7 84 0d 14 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 2936 : 
; 2937 : 		//
; 2938 : 		////////////////////////////////////////
; 2939 : 
; 2940 : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00841	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00847	50		 push	 eax
  00848	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  0084e	51		 push	 ecx
  0084f	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00855	52		 push	 edx
  00856	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 2941 : 
; 2942 : 		set_d3d_transparency_off ();

  0085b	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 2943 : 
; 2944 : 		set_d3d_zbuffer_comparison (TRUE);

  00860	6a 01		 push	 1
  00862	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 2945 : 
; 2946 : 		set_d3d_culling (TRUE);

  00867	6a 01		 push	 1
  00869	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 2947 : 
; 2948 : 		end_3d_scene ();

  0086e	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN16@draw_havoc:
$LN1@draw_havoc:

; 2949 : 	}
; 2950 : }

  00873	5f		 pop	 edi
  00874	5e		 pop	 esi
  00875	5b		 pop	 ebx
  00876	8b e5		 mov	 esp, ebp
  00878	5d		 pop	 ebp
  00879	c3		 ret	 0
?draw_havoc_hms@@YGXXZ ENDP				; draw_havoc_hms
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_external_havoc_hud@@YGXXZ
_TEXT	SEGMENT
tv181 = -336						; size = 4
_specular$ = -268					; size = 4
_colour$ = -264						; size = 4
_quad$ = -260						; size = 256
_store_hud_colour$ = -4					; size = 4
?draw_external_havoc_hud@@YGXXZ PROC			; draw_external_havoc_hud, COMDAT

; 1990 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1991 : 	rgb_colour
; 1992 : 		store_hud_colour;
; 1993 : 
; 1994 : 	vertex
; 1995 : 		quad[4];
; 1996 : 
; 1997 : 	real_colour
; 1998 : 		colour,
; 1999 : 		specular;
; 2000 : 
; 2001 : 	////////////////////////////////////////
; 2002 : 	//
; 2003 : 	// do not draw damaged HUD
; 2004 : 	//
; 2005 : 	////////////////////////////////////////
; 2006 : 
; 2007 : 	if (havoc_damage.head_up_display)

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00011	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00014	83 e0 01	 and	 eax, 1
  00017	74 05		 je	 SHORT $LN4@draw_exter

; 2008 : 	{
; 2009 : 		return;

  00019	e9 74 07 00 00	 jmp	 $LN1@draw_exter
$LN4@draw_exter:

; 2010 : 	}
; 2011 : 
; 2012 : 	////////////////////////////////////////
; 2013 : 	//
; 2014 : 	// set active 3D environment now else 2D clipping will be affected
; 2015 : 	//
; 2016 : 	////////////////////////////////////////
; 2017 : 
; 2018 : 	set_main_3d_full_screen_params (DISPLAY_3D_TINT_CLEAR, DISPLAY_3D_LIGHT_LEVEL_HIGH, DISPLAY_3D_NOISE_LEVEL_NONE);

  0001e	6a 00		 push	 0
  00020	6a 02		 push	 2
  00022	6a 00		 push	 0
  00024	e8 00 00 00 00	 call	 ?set_main_3d_full_screen_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@@Z ; set_main_3d_full_screen_params

; 2019 : 
; 2020 : 	set_3d_active_environment (main_3d_env);

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 2021 : 
; 2022 : 	////////////////////////////////////////
; 2023 : 	//
; 2024 : 	// set up HUD 2D environment
; 2025 : 	//
; 2026 : 	////////////////////////////////////////
; 2027 : 
; 2028 : 	set_2d_active_environment (hud_env);

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 2029 : 
; 2030 : 	set_2d_window (hud_env, HUD_WINDOW_X_MIN, HUD_WINDOW_Y_MIN, HUD_WINDOW_X_MAX, HUD_WINDOW_Y_MAX);

  0003f	51		 push	 ecx
  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	51		 push	 ecx
  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	51		 push	 ecx
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	51		 push	 ecx
  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 2031 : 
; 2032 : 	hud_viewport_x_org = hud_viewport_size * 0.5;

  00082	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_size@@3MA
  0008a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00096	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_org@@3MA, xmm0

; 2033 : 	hud_viewport_y_org = hud_viewport_size * 0.5;

  0009e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_size@@3MA
  000a6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_org@@3MA, xmm0

; 2034 : 
; 2035 : 	hud_viewport_x_min = 0.0;

  000ba	0f 57 c0	 xorps	 xmm0, xmm0
  000bd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_min@@3MA, xmm0

; 2036 : 	hud_viewport_y_min = 0.0;

  000c5	0f 57 c0	 xorps	 xmm0, xmm0
  000c8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_min@@3MA, xmm0

; 2037 : 
; 2038 : 	hud_viewport_x_max = hud_viewport_size - 0.001;

  000d0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_size@@3MA
  000d8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_max@@3MA, xmm0

; 2039 : 	hud_viewport_y_max = hud_viewport_size - 0.001;

  000ec	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_size@@3MA
  000f4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00100	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_max@@3MA, xmm0

; 2040 : 
; 2041 : 	set_2d_viewport (hud_env, hud_viewport_x_min, hud_viewport_y_min, hud_viewport_x_max, hud_viewport_y_max);

  00108	51		 push	 ecx
  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_max@@3MA
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	51		 push	 ecx
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_max@@3MA
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	51		 push	 ecx
  00125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_min@@3MA
  0012d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00132	51		 push	 ecx
  00133	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_min@@3MA
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2042 : 
; 2043 : 	//
; 2044 : 	// get screen co-ords (scaled to keep HUD size constant)
; 2045 : 	//
; 2046 : 
; 2047 : 	if (get_global_unscaled_displays ())

  0014b	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00152	0f 84 95 00 00
	00		 je	 $LN5@draw_exter

; 2048 : 	{
; 2049 : 		hud_screen_x_min = full_screen_x_mid - 128.0;

  00158	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00160	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4060000000000000
  00168	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_min@@3MA, xmm0

; 2050 : 		hud_screen_y_min = full_screen_y_mid - 128.0;

  00174	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  0017c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4060000000000000
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_min@@3MA, xmm0

; 2051 : 
; 2052 : 		hud_screen_x_max = full_screen_x_mid + 127.999;

  00190	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00198	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@405fffef9db22d0e
  001a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_max@@3MA, xmm0

; 2053 : 		hud_screen_y_max = full_screen_y_mid + 127.999;

  001ac	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  001b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@405fffef9db22d0e
  001bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_max@@3MA, xmm0

; 2054 : 
; 2055 : 		hud_screen_x_scale = 1.0;

  001c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_scale@@3MA, xmm0

; 2056 : 		hud_screen_y_scale = 1.0;

  001d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001e0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_scale@@3MA, xmm0

; 2057 : 	}
; 2058 : 	else

  001e8	e9 f0 00 00 00	 jmp	 $LN6@draw_exter
$LN5@draw_exter:

; 2059 : 	{
; 2060 : 		hud_screen_x_min = full_screen_x_mid - ((256.0 / (640.0 * 2.0)) * full_screen_width);

  001ed	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  001f5	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  001fd	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00205	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00209	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_min@@3MA, xmm0

; 2061 : 		hud_screen_y_min = full_screen_y_mid - ((256.0 / (480.0 * 2.0)) * full_screen_height);

  00215	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  0021d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  00225	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  0022d	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00231	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00235	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_min@@3MA, xmm0

; 2062 : 
; 2063 : 		hud_screen_x_max = full_screen_x_mid + ((256.0 / (640.0 * 2.0)) * full_screen_width) - 0.001;

  0023d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00245	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  0024d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00255	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00259	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00261	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00265	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_max@@3MA, xmm0

; 2064 : 		hud_screen_y_max = full_screen_y_mid + ((256.0 / (480.0 * 2.0)) * full_screen_height) - 0.001;

  0026d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  00275	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  0027d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  00285	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00289	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00291	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00295	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_max@@3MA, xmm0

; 2065 : 
; 2066 : 		hud_screen_x_scale = 640.0 / full_screen_width;

  0029d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  002a5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4084000000000000
  002ad	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002b1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002b5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_scale@@3MA, xmm0

; 2067 : 		hud_screen_y_scale = 480.0 / full_screen_height;

  002bd	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  002c5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407e000000000000
  002cd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002d1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002d5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_scale@@3MA, xmm0
$LN6@draw_exter:

; 2068 : 	}
; 2069 : 
; 2070 : 	////////////////////////////////////////
; 2071 : 	//
; 2072 : 	// draw HUD on texture
; 2073 : 	//
; 2074 : 	////////////////////////////////////////
; 2075 : 
; 2076 : 	set_active_screen (hud_texture_screen);

  002dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  002e2	50		 push	 eax
  002e3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2077 : 
; 2078 : 	if (lock_screen (hud_texture_screen))

  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  002ed	50		 push	 eax
  002ee	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  002f3	85 c0		 test	 eax, eax
  002f5	0f 84 d3 00 00
	00		 je	 $LN7@draw_exter

; 2079 : 	{
; 2080 : 	 	store_hud_colour = hud_colour;

  002fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00300	89 45 fc	 mov	 DWORD PTR _store_hud_colour$[ebp], eax

; 2081 : 
; 2082 : 		set_rgb_colour (hud_colour, 255, 255, 255, 255);

  00303	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  0030a	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  00311	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  00318	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 2083 : 
; 2084 : 		set_mono_font_colour (hud_colour);

  0031f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00324	50		 push	 eax
  00325	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2085 : 
; 2086 : 		set_block (0, 0, hud_viewport_size - 1, hud_viewport_size - 1, clear_hud_colour);

  0032a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_hud_colour@@3UREAL_COLOUR@@A
  0032f	50		 push	 eax
  00330	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_size@@3MA
  00338	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00340	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00344	51		 push	 ecx
  00345	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_size@@3MA
  0034d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00355	f3 0f 2c d0	 cvttss2si edx, xmm0
  00359	52		 push	 edx
  0035a	6a 00		 push	 0
  0035c	6a 00		 push	 0
  0035e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 2087 : 
; 2088 : 		draw_layout_grid ();

  00363	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 2089 : 
; 2090 : 		draw_basic_hud();

  00368	e8 00 00 00 00	 call	 ?draw_basic_hud@@YGXXZ	; draw_basic_hud

; 2091 : 
; 2092 : 		switch (hud_mode)

  0036d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_mode@@3W4HUD_MODES@@A ; hud_mode
  00372	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
  00378	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv181[ebp], 0
  0037f	7c 2f		 jl	 SHORT $LN2@draw_exter
  00381	83 bd b0 fe ff
	ff 01		 cmp	 DWORD PTR tv181[ebp], 1
  00388	7e 0b		 jle	 SHORT $LN8@draw_exter
  0038a	83 bd b0 fe ff
	ff 02		 cmp	 DWORD PTR tv181[ebp], 2
  00391	74 13		 je	 SHORT $LN9@draw_exter
  00393	eb 1b		 jmp	 SHORT $LN2@draw_exter
$LN8@draw_exter:

; 2093 : 		{
; 2094 : 			case HUD_MODE_TRANSITION:				
; 2095 : 			case HUD_MODE_NAVIGATION:
; 2096 : 			{
; 2097 : 				draw_heading_scale();

  00395	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXXZ ; draw_heading_scale

; 2098 : 				display_waypoint_information();

  0039a	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXXZ ; display_waypoint_information

; 2099 : 				display_g_scale();

  0039f	e8 00 00 00 00	 call	 ?display_g_scale@@YGXXZ	; display_g_scale

; 2100 : 
; 2101 : 				break;

  003a4	eb 0a		 jmp	 SHORT $LN2@draw_exter
$LN9@draw_exter:

; 2102 : 			}
; 2103 : 			case HUD_MODE_WEAPON:
; 2104 : 			{
; 2105 : 				display_weapon_information();

  003a6	e8 00 00 00 00	 call	 ?display_weapon_information@@YGXXZ ; display_weapon_information

; 2106 : 				display_target_information();

  003ab	e8 00 00 00 00	 call	 ?display_target_information@@YGXXZ ; display_target_information
$LN2@draw_exter:

; 2107 : 
; 2108 : 				break;
; 2109 : 			}
; 2110 : 		}
; 2111 : 
; 2112 : 		hud_colour = store_hud_colour;

  003b0	8b 45 fc	 mov	 eax, DWORD PTR _store_hud_colour$[ebp]
  003b3	a3 00 00 00 00	 mov	 DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A, eax ; hud_colour

; 2113 : 
; 2114 : 		flush_screen_texture_graphics (hud_texture_screen);

  003b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 2115 : 
; 2116 : 		unlock_screen (hud_texture_screen);

  003c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  003c8	50		 push	 eax
  003c9	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN7@draw_exter:

; 2117 : 	}
; 2118 : 
; 2119 : 	set_active_screen (video_screen);

  003ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  003d3	50		 push	 eax
  003d4	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2120 : 
; 2121 : 	////////////////////////////////////////
; 2122 : 	//
; 2123 : 	// render HUD to screen
; 2124 : 	//
; 2125 : 	////////////////////////////////////////
; 2126 : 
; 2127 : 	set_3d_active_environment (main_3d_env);

  003d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  003de	50		 push	 eax
  003df	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 2128 : 
; 2129 : 	if (begin_3d_scene ())

  003e4	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  003e9	85 c0		 test	 eax, eax
  003eb	0f 84 a1 03 00
	00		 je	 $LN10@draw_exter

; 2130 : 	{
; 2131 : 		set_d3d_transparency_on ();

  003f1	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 2132 : 
; 2133 : 		set_d3d_zbuffer_comparison (FALSE);

  003f6	6a 00		 push	 0
  003f8	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 2134 : 
; 2135 : 		set_d3d_culling (FALSE);

  003fd	6a 00		 push	 0
  003ff	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 2136 : 
; 2137 : 		set_d3d_texture_wrapping (0, FALSE);

  00404	6a 00		 push	 0
  00406	6a 00		 push	 0
  00408	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 2138 : 
; 2139 : 		if ((application_video_width == 640) || (get_global_unscaled_displays ()))

  0040d	81 3d 00 00 00
	00 80 02 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 640 ; application_video_width, 00000280H
  00417	74 09		 je	 SHORT $LN13@draw_exter
  00419	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00420	74 17		 je	 SHORT $LN11@draw_exter
$LN13@draw_exter:

; 2140 : 		{
; 2141 : 			set_d3d_texture_mag_filtering (FALSE);

  00422	6a 00		 push	 0
  00424	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 2142 : 			set_d3d_texture_min_filtering (FALSE);

  00429	6a 00		 push	 0
  0042b	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 2143 : 			set_d3d_texture_mip_filtering (FALSE);

  00430	6a 00		 push	 0
  00432	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 2144 : 		}
; 2145 : 		else

  00437	eb 15		 jmp	 SHORT $LN12@draw_exter
$LN11@draw_exter:

; 2146 : 		{
; 2147 : 			set_d3d_texture_mag_filtering (TRUE);

  00439	6a 01		 push	 1
  0043b	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 2148 : 			set_d3d_texture_min_filtering (TRUE);

  00440	6a 01		 push	 1
  00442	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 2149 : 			set_d3d_texture_mip_filtering (FALSE);

  00447	6a 00		 push	 0
  00449	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN12@draw_exter:

; 2150 : 		}
; 2151 : 
; 2152 : 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_HVCKPT_HUD_DISPLAY));

  0044e	68 eb 06 00 00	 push	 1771			; 000006ebH
  00453	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00458	50		 push	 eax
  00459	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 2153 : 
; 2154 : 		////////////////////////////////////////
; 2155 : 		//
; 2156 : 
; 2157 : 		colour.red 				= hud_colour_table[get_global_hud_colour ()].r;

  0045e	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00463	8a 0c 85 02 00
	00 00		 mov	 cl, BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4+2]
  0046a	88 8d fa fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+2], cl

; 2158 : 		colour.green 			= hud_colour_table[get_global_hud_colour ()].g;

  00470	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00475	8a 0c 85 01 00
	00 00		 mov	 cl, BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4+1]
  0047c	88 8d f9 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+1], cl

; 2159 : 		colour.blue	  			= hud_colour_table[get_global_hud_colour ()].b;

  00482	a1 10 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+16
  00487	8a 0c 85 00 00
	00 00		 mov	 cl, BYTE PTR ?hud_colour_table@@3PAUREAL_COLOUR@@A[eax*4]
  0048e	88 8d f8 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp], cl

; 2160 : 		colour.alpha 			= 255;

  00494	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _colour$[ebp+3], 255 ; 000000ffH

; 2161 : 
; 2162 : 		specular.red 			= 0;

  0049b	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 2163 : 		specular.green			= 0;

  004a2	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 2164 : 		specular.blue			= 0;

  004a9	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 2165 : 		specular.alpha			= 255;

  004b0	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 2166 : 
; 2167 : 		quad[0].i				= hud_screen_x_min;

  004b7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004bc	6b c8 00	 imul	 ecx, eax, 0
  004bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_min@@3MA
  004c7	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 2168 : 		quad[0].j				= hud_screen_y_min;

  004d0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004d5	6b c8 00	 imul	 ecx, eax, 0
  004d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_min@@3MA
  004e0	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 2169 : 		quad[0].z				= 0.5;

  004e9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004ee	6b c8 00	 imul	 ecx, eax, 0
  004f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004f9	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 2170 : 		quad[0].q				= 0.5;

  00502	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00507	6b c8 00	 imul	 ecx, eax, 0
  0050a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00512	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 2171 : 		quad[0].u				= 0.0;

  0051b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00520	6b c8 00	 imul	 ecx, eax, 0
  00523	0f 57 c0	 xorps	 xmm0, xmm0
  00526	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 2172 : 		quad[0].v				= 0.0;

  0052f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00534	6b c8 00	 imul	 ecx, eax, 0
  00537	0f 57 c0	 xorps	 xmm0, xmm0
  0053a	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 2173 : 
; 2174 : 		quad[1].i				= hud_screen_x_max;

  00543	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00548	c1 e0 00	 shl	 eax, 0
  0054b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_max@@3MA
  00553	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 2175 : 		quad[1].j				= hud_screen_y_min;

  0055c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00561	c1 e0 00	 shl	 eax, 0
  00564	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_min@@3MA
  0056c	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 2176 : 		quad[1].z				= 0.5;

  00575	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0057a	c1 e0 00	 shl	 eax, 0
  0057d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00585	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 2177 : 		quad[1].q				= 0.5;

  0058e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00593	c1 e0 00	 shl	 eax, 0
  00596	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0059e	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 2178 : 		quad[1].u				= 1.0;

  005a7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005ac	c1 e0 00	 shl	 eax, 0
  005af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005b7	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 2179 : 		quad[1].v				= 0.0;

  005c0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005c5	c1 e0 00	 shl	 eax, 0
  005c8	0f 57 c0	 xorps	 xmm0, xmm0
  005cb	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 2180 : 
; 2181 : 		quad[2].i				= hud_screen_x_max;

  005d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005d9	d1 e0		 shl	 eax, 1
  005db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_max@@3MA
  005e3	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 2182 : 		quad[2].j				= hud_screen_y_max;

  005ec	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005f1	d1 e0		 shl	 eax, 1
  005f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_max@@3MA
  005fb	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 2183 : 		quad[2].z				= 0.5;

  00604	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00609	d1 e0		 shl	 eax, 1
  0060b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00613	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 2184 : 		quad[2].q				= 0.5;

  0061c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00621	d1 e0		 shl	 eax, 1
  00623	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0062b	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 2185 : 		quad[2].u				= 1.0;

  00634	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00639	d1 e0		 shl	 eax, 1
  0063b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00643	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 2186 : 		quad[2].v				= 1.0;

  0064c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00651	d1 e0		 shl	 eax, 1
  00653	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0065b	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 2187 : 
; 2188 : 		quad[3].i				= hud_screen_x_min;

  00664	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00669	6b c8 03	 imul	 ecx, eax, 3
  0066c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_x_min@@3MA
  00674	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 2189 : 		quad[3].j				= hud_screen_y_max;

  0067d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00682	6b c8 03	 imul	 ecx, eax, 3
  00685	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_screen_y_max@@3MA
  0068d	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 2190 : 		quad[3].z				= 0.5;

  00696	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0069b	6b c8 03	 imul	 ecx, eax, 3
  0069e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  006a6	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 2191 : 		quad[3].q				= 0.5;

  006af	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006b4	6b c8 03	 imul	 ecx, eax, 3
  006b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  006bf	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 2192 : 		quad[3].u				= 0.0;

  006c8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006cd	6b c8 03	 imul	 ecx, eax, 3
  006d0	0f 57 c0	 xorps	 xmm0, xmm0
  006d3	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 2193 : 		quad[3].v				= 1.0;

  006dc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006e1	6b c8 03	 imul	 ecx, eax, 3
  006e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006ec	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 2194 : 
; 2195 : 		quad[0].next_vertex	= &quad[1];

  006f5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006fa	c1 e0 00	 shl	 eax, 0
  006fd	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00704	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00709	6b c2 00	 imul	 eax, edx, 0
  0070c	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 2196 : 		quad[1].next_vertex	= &quad[2];

  00713	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00718	d1 e0		 shl	 eax, 1
  0071a	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00721	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00726	c1 e2 00	 shl	 edx, 0
  00729	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 2197 : 		quad[2].next_vertex	= &quad[3];

  00730	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00735	6b c8 03	 imul	 ecx, eax, 3
  00738	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  0073f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00744	d1 e0		 shl	 eax, 1
  00746	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 2198 : 		quad[3].next_vertex	= NULL;

  0074d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00752	6b c8 03	 imul	 ecx, eax, 3
  00755	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 2199 : 
; 2200 : 		//
; 2201 : 		////////////////////////////////////////
; 2202 : 
; 2203 : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00760	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00766	50		 push	 eax
  00767	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  0076d	51		 push	 ecx
  0076e	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00774	52		 push	 edx
  00775	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 2204 : 
; 2205 : 		set_d3d_transparency_off ();

  0077a	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 2206 : 
; 2207 : 		set_d3d_zbuffer_comparison (TRUE);

  0077f	6a 01		 push	 1
  00781	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 2208 : 
; 2209 : 		set_d3d_culling (TRUE);

  00786	6a 01		 push	 1
  00788	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 2210 : 
; 2211 : 		end_3d_scene ();

  0078d	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN10@draw_exter:
$LN1@draw_exter:

; 2212 : 	}
; 2213 : }

  00792	5f		 pop	 edi
  00793	5e		 pop	 esi
  00794	5b		 pop	 ebx
  00795	8b e5		 mov	 esp, ebp
  00797	5d		 pop	 ebp
  00798	c3		 ret	 0
?draw_external_havoc_hud@@YGXXZ ENDP			; draw_external_havoc_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_havoc_hud_on_texture@@YGXXZ
_TEXT	SEGMENT
tv216 = -88						; size = 4
_clear_hud_colour$1 = -20				; size = 4
_head_offset_y$2 = -16					; size = 4
_head_offset_x$3 = -12					; size = 4
_x_offset$4 = -8					; size = 4
_y_offset$5 = -4					; size = 4
?draw_havoc_hud_on_texture@@YGXXZ PROC			; draw_havoc_hud_on_texture, COMDAT

; 1860 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1861 : 	//
; 1862 : 	// set active 3D environment now else 2D clipping will be affected
; 1863 : 	//
; 1864 : 
; 1865 : 	set_main_3d_full_screen_params (DISPLAY_3D_TINT_CLEAR, DISPLAY_3D_LIGHT_LEVEL_HIGH, DISPLAY_3D_NOISE_LEVEL_NONE);

  00009	6a 00		 push	 0
  0000b	6a 02		 push	 2
  0000d	6a 00		 push	 0
  0000f	e8 00 00 00 00	 call	 ?set_main_3d_full_screen_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@@Z ; set_main_3d_full_screen_params

; 1866 : 
; 1867 : 	set_3d_active_environment (main_3d_env);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 1868 : 
; 1869 : 	////////////////////////////////////////
; 1870 : 	//
; 1871 : 	// set up HUD 2D environment
; 1872 : 	//
; 1873 : 	////////////////////////////////////////
; 1874 : 
; 1875 : 	set_2d_active_environment (hud_env);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 1876 : 
; 1877 : 	//
; 1878 : 	// window
; 1879 : 	//
; 1880 : 
; 1881 : 	set_2d_window (hud_env, HUD_WINDOW_X_MIN, HUD_WINDOW_Y_MIN, HUD_WINDOW_X_MAX, HUD_WINDOW_Y_MAX);

  0002a	51		 push	 ecx
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	51		 push	 ecx
  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	51		 push	 ecx
  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1882 : 
; 1883 : 	{
; 1884 : 		// move HUD coordinate system with head movements to simulate the collimation effect (focus on infinity)
; 1885 : 		float y_offset, x_offset;
; 1886 : 		float head_offset_x = 0.0, head_offset_y = 0.0;

  0006d	0f 57 c0	 xorps	 xmm0, xmm0
  00070	f3 0f 11 45 f4	 movss	 DWORD PTR _head_offset_x$3[ebp], xmm0
  00075	0f 57 c0	 xorps	 xmm0, xmm0
  00078	f3 0f 11 45 f0	 movss	 DWORD PTR _head_offset_y$2[ebp], xmm0

; 1887 : 
; 1888 : 		head_offset_x = getViewpointOffsetX(head_offset_x);

  0007d	51		 push	 ecx
  0007e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _head_offset_x$3[ebp]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	e8 00 00 00 00	 call	 ?getViewpointOffsetX@@YGMM@Z ; getViewpointOffsetX
  0008d	d9 5d f4	 fstp	 DWORD PTR _head_offset_x$3[ebp]

; 1889 : 		head_offset_y = getViewpointOffsetY(head_offset_y);

  00090	51		 push	 ecx
  00091	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _head_offset_y$2[ebp]
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	e8 00 00 00 00	 call	 ?getViewpointOffsetY@@YGMM@Z ; getViewpointOffsetY
  000a0	d9 5d f0	 fstp	 DWORD PTR _head_offset_y$2[ebp]

; 1890 : 		
; 1891 : 		if (get_global_wide_cockpit())

  000a3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?wide_cockpit@@3HA, 0 ; wide_cockpit
  000aa	74 44		 je	 SHORT $LN4@draw_havoc

; 1892 : 		{
; 1893 : 			head_offset_x += wide_cockpit_position[WIDEVIEW_HAVOC_PILOT].c.x;

  000ac	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  000b1	6b c8 06	 imul	 ecx, eax, 6
  000b4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _head_offset_x$3[ebp]
  000b9	f3 0f 58 81 14
	00 00 00	 addss	 xmm0, DWORD PTR ?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A[ecx+20]
  000c1	f3 0f 11 45 f4	 movss	 DWORD PTR _head_offset_x$3[ebp], xmm0

; 1894 : 			head_offset_y += wide_cockpit_position[WIDEVIEW_HAVOC_PILOT].c.y + 0.02;

  000c6	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  000cb	6b c8 06	 imul	 ecx, eax, 6
  000ce	f3 0f 5a 81 18
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?wide_cockpit_position@@3PAUCOCKPIT_POSITION@@A[ecx+24]
  000d6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  000de	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _head_offset_y$2[ebp]
  000e3	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000e7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000eb	f3 0f 11 45 f0	 movss	 DWORD PTR _head_offset_y$2[ebp], xmm0
$LN4@draw_havoc:

; 1895 : 		}
; 1896 : 
; 1897 : 		x_offset = head_offset_x * -HUD_UNIT_RATIO;

  000f0	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _head_offset_x$3[ebp]
  000f5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c02d333333333333
  000fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00101	f3 0f 11 45 f8	 movss	 DWORD PTR _x_offset$4[ebp], xmm0

; 1898 : 		y_offset = head_offset_y * -HUD_UNIT_RATIO;

  00106	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _head_offset_y$2[ebp]
  0010b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c02d333333333333
  00113	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00117	f3 0f 11 45 fc	 movss	 DWORD PTR _y_offset$5[ebp], xmm0

; 1899 : 
; 1900 : 		set_2d_view_offset(hud_env, x_offset, y_offset);

  0011c	51		 push	 ecx
  0011d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_offset$5[ebp]
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	51		 push	 ecx
  00128	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x_offset$4[ebp]
  0012d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?set_2d_view_offset@@YGXPAUENV_2D@@MM@Z ; set_2d_view_offset

; 1901 : 	}
; 1902 : 
; 1903 : 	//
; 1904 : 	// viewport
; 1905 : 	//
; 1906 : 
; 1907 : 	hud_viewport_x_min = hud_viewport_x_org - (hud_viewport_size * 0.5);

  0013d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_x_org@@3MA
  00145	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  0014d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00155	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00159	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_min@@3MA, xmm0

; 1908 : 	hud_viewport_y_min = hud_viewport_y_org - (hud_viewport_size * 0.5);

  00165	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_y_org@@3MA
  0016d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  00175	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0017d	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00185	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_min@@3MA, xmm0

; 1909 : 	hud_viewport_x_max = hud_viewport_x_org + (hud_viewport_size * 0.5) - 0.001;

  0018d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_x_org@@3MA
  00195	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  0019d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001a5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001a9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_max@@3MA, xmm0

; 1910 : 	hud_viewport_y_max = hud_viewport_y_org + (hud_viewport_size * 0.5) - 0.001;

  001bd	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_y_org@@3MA
  001c5	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  001cd	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001d5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001d9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_max@@3MA, xmm0

; 1911 : 
; 1912 : 	set_2d_viewport (hud_env, hud_viewport_x_min, hud_viewport_y_min, hud_viewport_x_max, hud_viewport_y_max);

  001ed	51		 push	 ecx
  001ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_max@@3MA
  001f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fb	51		 push	 ecx
  001fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_max@@3MA
  00204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00209	51		 push	 ecx
  0020a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_min@@3MA
  00212	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00217	51		 push	 ecx
  00218	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_min@@3MA
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1913 : 
; 1914 : 	//
; 1915 : 	// get screen co-ords (vitural cockpit texture - scaling only works near screen centre)
; 1916 : 	//
; 1917 : 
; 1918 : 	hud_screen_x_min = full_screen_x_mid - ((hud_viewport_size / (640.0 * 2.0)) * full_screen_width);

  00230	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00238	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  00240	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4094000000000000
  00248	f3 0f 5a 15 00
	00 00 00	 cvtss2sd xmm2, DWORD PTR ?full_screen_width@@3MA
  00250	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00254	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00258	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_min@@3MA, xmm0

; 1919 : 	hud_screen_y_min = full_screen_y_mid - ((hud_viewport_size / (480.0 * 2.0)) * full_screen_height);

  00264	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  0026c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  00274	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@408e000000000000
  0027c	f3 0f 5a 15 00
	00 00 00	 cvtss2sd xmm2, DWORD PTR ?full_screen_height@@3MA
  00284	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00288	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0028c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00290	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_min@@3MA, xmm0

; 1920 : 
; 1921 : 	hud_screen_x_max = full_screen_x_mid + ((hud_viewport_size / (640.0 * 2.0)) * full_screen_width) - 0.001;

  00298	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  002a0	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  002a8	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4094000000000000
  002b0	f3 0f 5a 15 00
	00 00 00	 cvtss2sd xmm2, DWORD PTR ?full_screen_width@@3MA
  002b8	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  002bc	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  002c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_max@@3MA, xmm0

; 1922 : 	hud_screen_y_max = full_screen_y_mid + ((hud_viewport_size / (480.0 * 2.0)) * full_screen_height) - 0.001;

  002d4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  002dc	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  002e4	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@408e000000000000
  002ec	f3 0f 5a 15 00
	00 00 00	 cvtss2sd xmm2, DWORD PTR ?full_screen_height@@3MA
  002f4	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  002f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002fc	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00304	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00308	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_max@@3MA, xmm0

; 1923 : 
; 1924 : 	hud_screen_x_scale = 640.0 / full_screen_width;

  00310	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00318	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4084000000000000
  00320	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00324	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00328	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_scale@@3MA, xmm0

; 1925 : 	hud_screen_y_scale = 480.0 / full_screen_height;

  00330	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00338	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407e000000000000
  00340	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00344	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00348	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_scale@@3MA, xmm0

; 1926 : 
; 1927 : 	////////////////////////////////////////
; 1928 : 	//
; 1929 : 	// draw HUD
; 1930 : 	//
; 1931 : 	////////////////////////////////////////
; 1932 : 
; 1933 : 	set_active_screen (hud_texture_screen);

  00350	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 1934 : 
; 1935 : 	if (lock_screen (hud_texture_screen))

  0035b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  00360	50		 push	 eax
  00361	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00366	85 c0		 test	 eax, eax
  00368	0f 84 cb 00 00
	00		 je	 $LN5@draw_havoc

; 1936 : 	{
; 1937 : 		rgb_colour
; 1938 : 			clear_hud_colour;
; 1939 : 
; 1940 : 		set_rgb_colour (clear_hud_colour, hud_colour.r, hud_colour.g, hud_colour.b, 0);

  0036e	a0 02 00 00 00	 mov	 al, BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+2
  00373	88 45 ee	 mov	 BYTE PTR _clear_hud_colour$1[ebp+2], al
  00376	a0 01 00 00 00	 mov	 al, BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A+1
  0037b	88 45 ed	 mov	 BYTE PTR _clear_hud_colour$1[ebp+1], al
  0037e	a0 00 00 00 00	 mov	 al, BYTE PTR ?hud_colour@@3UREAL_COLOUR@@A
  00383	88 45 ec	 mov	 BYTE PTR _clear_hud_colour$1[ebp], al
  00386	c6 45 ef 00	 mov	 BYTE PTR _clear_hud_colour$1[ebp+3], 0

; 1941 : 
; 1942 : 		set_block (0, 0, hud_viewport_size - 1, hud_viewport_size - 1, clear_hud_colour);

  0038a	8b 45 ec	 mov	 eax, DWORD PTR _clear_hud_colour$1[ebp]
  0038d	50		 push	 eax
  0038e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_size@@3MA
  00396	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0039e	f3 0f 2c c8	 cvttss2si ecx, xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_size@@3MA
  003ab	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  003b3	f3 0f 2c d0	 cvttss2si edx, xmm0
  003b7	52		 push	 edx
  003b8	6a 00		 push	 0
  003ba	6a 00		 push	 0
  003bc	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1943 : 
; 1944 : 		if (!havoc_damage.head_up_display && electrical_system_active())

  003c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  003c6	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  003c9	83 e0 01	 and	 eax, 1
  003cc	75 55		 jne	 SHORT $LN2@draw_havoc
  003ce	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  003d3	85 c0		 test	 eax, eax
  003d5	74 4c		 je	 SHORT $LN2@draw_havoc

; 1945 : 		{
; 1946 : 			set_mono_font_colour (hud_colour);

  003d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  003dc	50		 push	 eax
  003dd	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1947 : 
; 1948 : 			draw_layout_grid ();

  003e2	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 1949 : 
; 1950 : 			draw_basic_hud();

  003e7	e8 00 00 00 00	 call	 ?draw_basic_hud@@YGXXZ	; draw_basic_hud

; 1951 : 
; 1952 : 			switch (hud_mode)

  003ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_mode@@3W4HUD_MODES@@A ; hud_mode
  003f1	89 45 a8	 mov	 DWORD PTR tv216[ebp], eax
  003f4	83 7d a8 00	 cmp	 DWORD PTR tv216[ebp], 0
  003f8	7c 29		 jl	 SHORT $LN2@draw_havoc
  003fa	83 7d a8 01	 cmp	 DWORD PTR tv216[ebp], 1
  003fe	7e 08		 jle	 SHORT $LN7@draw_havoc
  00400	83 7d a8 02	 cmp	 DWORD PTR tv216[ebp], 2
  00404	74 13		 je	 SHORT $LN8@draw_havoc
  00406	eb 1b		 jmp	 SHORT $LN2@draw_havoc
$LN7@draw_havoc:

; 1953 : 			{
; 1954 : 				case HUD_MODE_TRANSITION:				
; 1955 : 				case HUD_MODE_NAVIGATION:
; 1956 : 				{
; 1957 : 					draw_heading_scale();

  00408	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXXZ ; draw_heading_scale

; 1958 : 					display_waypoint_information();

  0040d	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXXZ ; display_waypoint_information

; 1959 : 					display_g_scale();

  00412	e8 00 00 00 00	 call	 ?display_g_scale@@YGXXZ	; display_g_scale

; 1960 : //					draw_navigation_mode_hud (TRUE);
; 1961 : 
; 1962 : 					break;

  00417	eb 0a		 jmp	 SHORT $LN2@draw_havoc
$LN8@draw_havoc:

; 1963 : 				}
; 1964 : 				case HUD_MODE_WEAPON:
; 1965 : 				{
; 1966 : 					display_weapon_information();

  00419	e8 00 00 00 00	 call	 ?display_weapon_information@@YGXXZ ; display_weapon_information

; 1967 : 					display_target_information();

  0041e	e8 00 00 00 00	 call	 ?display_target_information@@YGXXZ ; display_target_information
$LN2@draw_havoc:

; 1968 : //					draw_weapon_mode_hud (TRUE);
; 1969 : 
; 1970 : 					break;
; 1971 : 				}
; 1972 : 			}
; 1973 : 		}
; 1974 : 
; 1975 : 		flush_screen_texture_graphics (hud_texture_screen);

  00423	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  00428	50		 push	 eax
  00429	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 1976 : 
; 1977 : 		unlock_screen (hud_texture_screen);

  0042e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  00433	50		 push	 eax
  00434	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN5@draw_havoc:

; 1978 : 	}
; 1979 : 
; 1980 : 	set_active_screen (video_screen);

  00439	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0043e	50		 push	 eax
  0043f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 1981 : 
; 1982 : 	reset_2d_view_offset(hud_env);

  00444	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00449	50		 push	 eax
  0044a	e8 00 00 00 00	 call	 ?reset_2d_view_offset@@YGXPAUENV_2D@@@Z ; reset_2d_view_offset

; 1983 : }

  0044f	5f		 pop	 edi
  00450	5e		 pop	 esi
  00451	5b		 pop	 ebx
  00452	8b e5		 mov	 esp, ebp
  00454	5d		 pop	 ebp
  00455	c3		 ret	 0
?draw_havoc_hud_on_texture@@YGXXZ ENDP			; draw_havoc_hud_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?draw_havoc_hud_on_cockpit@@YGXH@Z
_TEXT	SEGMENT
tv148 = -68						; size = 4
_hud_enlarge$ = 8					; size = 4
?draw_havoc_hud_on_cockpit@@YGXH@Z PROC			; draw_havoc_hud_on_cockpit, COMDAT

; 1765 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1766 : 	if (havoc_damage.head_up_display || !electrical_system_active())

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  0000e	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00011	83 e0 01	 and	 eax, 1
  00014	75 09		 jne	 SHORT $LN5@draw_havoc
  00016	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  0001b	85 c0		 test	 eax, eax
  0001d	75 05		 jne	 SHORT $LN4@draw_havoc
$LN5@draw_havoc:

; 1767 : 	{
; 1768 : 		return;

  0001f	e9 3d 02 00 00	 jmp	 $LN1@draw_havoc
$LN4@draw_havoc:

; 1769 : 	}
; 1770 : 
; 1771 : 	//
; 1772 : 	// set active 3D environment now else 2D clipping will be affected
; 1773 : 	//
; 1774 : 
; 1775 : 	set_main_3d_full_screen_params (DISPLAY_3D_TINT_CLEAR, DISPLAY_3D_LIGHT_LEVEL_HIGH, DISPLAY_3D_NOISE_LEVEL_NONE);

  00024	6a 00		 push	 0
  00026	6a 02		 push	 2
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 ?set_main_3d_full_screen_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@@Z ; set_main_3d_full_screen_params

; 1776 : 
; 1777 : 	set_3d_active_environment (main_3d_env);

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 1778 : 
; 1779 : 	////////////////////////////////////////
; 1780 : 	//
; 1781 : 	// set up HUD 2D environment
; 1782 : 	//
; 1783 : 	////////////////////////////////////////
; 1784 : 
; 1785 : 	set_2d_active_environment (hud_env);

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 1786 : 
; 1787 : 	//
; 1788 : 	// window
; 1789 : 	//
; 1790 : 
; 1791 : 	set_2d_window (hud_env, HUD_WINDOW_X_MIN, HUD_WINDOW_Y_MIN, HUD_WINDOW_X_MAX, HUD_WINDOW_Y_MAX);

  00045	51		 push	 ecx
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	51		 push	 ecx
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	51		 push	 ecx
  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	51		 push	 ecx
  00070	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1792 : 
; 1793 : 	//
; 1794 : 	// viewport
; 1795 : 	//
; 1796 : 
; 1797 : 	draw_large_hud = hud_enlarge;

  00088	8b 45 08	 mov	 eax, DWORD PTR _hud_enlarge$[ebp]
  0008b	a3 00 00 00 00	 mov	 DWORD PTR ?draw_large_hud@@3HA, eax

; 1798 : 
; 1799 : 	hud_viewport_x_org = full_screen_x_mid;

  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00098	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_org@@3MA, xmm0

; 1800 : 	hud_viewport_y_org = full_screen_y_mid;

  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  000a8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_org@@3MA, xmm0

; 1801 : 
; 1802 : 	hud_viewport_x_min = hud_viewport_x_org - (hud_viewport_size * 0.5);

  000b0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_x_org@@3MA
  000b8	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  000c0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000c8	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_min@@3MA, xmm0

; 1803 : 	hud_viewport_y_min = hud_viewport_y_org - (hud_viewport_size * 0.5);

  000d8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_y_org@@3MA
  000e0	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  000e8	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000f0	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_min@@3MA, xmm0

; 1804 : 
; 1805 : 	hud_viewport_x_max = hud_viewport_x_org + (hud_viewport_size * 0.5) - 0.001;

  00100	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_x_org@@3MA
  00108	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  00110	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00118	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0011c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00124	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00128	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_max@@3MA, xmm0

; 1806 : 	hud_viewport_y_max = hud_viewport_y_org + (hud_viewport_size * 0.5) - 0.001;

  00130	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_y_org@@3MA
  00138	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hud_viewport_size@@3MA
  00140	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00148	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0014c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00154	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00158	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_max@@3MA, xmm0

; 1807 : 
; 1808 : 	set_2d_viewport (hud_env, hud_viewport_x_min, hud_viewport_y_min, hud_viewport_x_max, hud_viewport_y_max);

  00160	51		 push	 ecx
  00161	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_max@@3MA
  00169	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016e	51		 push	 ecx
  0016f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_max@@3MA
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	51		 push	 ecx
  0017d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_y_min@@3MA
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	51		 push	 ecx
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_x_min@@3MA
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1809 : 
; 1810 : 	//
; 1811 : 	// get screen co-ords (constant size - does not require scaling)
; 1812 : 	//
; 1813 : 
; 1814 : 	hud_screen_x_min = 0.0;

  001a3	0f 57 c0	 xorps	 xmm0, xmm0
  001a6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_min@@3MA, xmm0

; 1815 : 	hud_screen_y_min = 0.0;

  001ae	0f 57 c0	 xorps	 xmm0, xmm0
  001b1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_min@@3MA, xmm0

; 1816 : 
; 1817 : 	hud_screen_x_max = hud_viewport_size - 0.001;

  001b9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_size@@3MA
  001c1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_max@@3MA, xmm0

; 1818 : 	hud_screen_y_max = hud_viewport_size - 0.001;

  001d5	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hud_viewport_size@@3MA
  001dd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_max@@3MA, xmm0

; 1819 : 
; 1820 : 	hud_screen_x_scale = 1.0;

  001f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_x_scale@@3MA, xmm0

; 1821 : 	hud_screen_y_scale = 1.0;

  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00209	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_screen_y_scale@@3MA, xmm0

; 1822 : 
; 1823 : 	////////////////////////////////////////
; 1824 : 	//
; 1825 : 	// draw HUD
; 1826 : 	//
; 1827 : 	////////////////////////////////////////
; 1828 : 
; 1829 : 	if (lock_screen (active_screen))

  00211	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0021c	85 c0		 test	 eax, eax
  0021e	74 41		 je	 SHORT $LN6@draw_havoc

; 1830 : 	{
; 1831 : 		set_mono_font_colour (hud_colour);

  00220	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_colour@@3UREAL_COLOUR@@A ; hud_colour
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1832 : 
; 1833 : 		draw_layout_grid ();

  0022b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 1834 : 
; 1835 : 		switch (hud_mode)

  00230	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_mode@@3W4HUD_MODES@@A ; hud_mode
  00235	89 45 bc	 mov	 DWORD PTR tv148[ebp], eax
  00238	83 7d bc 00	 cmp	 DWORD PTR tv148[ebp], 0
  0023c	74 08		 je	 SHORT $LN7@draw_havoc
  0023e	83 7d bc 02	 cmp	 DWORD PTR tv148[ebp], 2
  00242	74 0b		 je	 SHORT $LN8@draw_havoc
  00244	eb 10		 jmp	 SHORT $LN2@draw_havoc
$LN7@draw_havoc:

; 1836 : 		{
; 1837 : 			case HUD_MODE_NAVIGATION:
; 1838 : 			{
; 1839 : 				draw_navigation_mode_hud (FALSE);

  00246	6a 00		 push	 0
  00248	e8 00 00 00 00	 call	 ?draw_navigation_mode_hud@@YGXH@Z ; draw_navigation_mode_hud

; 1840 : 
; 1841 : 				break;

  0024d	eb 07		 jmp	 SHORT $LN2@draw_havoc
$LN8@draw_havoc:

; 1842 : 			}
; 1843 : 			case HUD_MODE_WEAPON:
; 1844 : 			{
; 1845 : 				draw_weapon_mode_hud (FALSE);

  0024f	6a 00		 push	 0
  00251	e8 00 00 00 00	 call	 ?draw_weapon_mode_hud@@YGXH@Z ; draw_weapon_mode_hud
$LN2@draw_havoc:

; 1846 : 
; 1847 : 				break;
; 1848 : 			}
; 1849 : 		}
; 1850 : 
; 1851 : 		unlock_screen (active_screen);

  00256	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN6@draw_havoc:
$LN1@draw_havoc:

; 1852 : 	}
; 1853 : }

  00261	5f		 pop	 edi
  00262	5e		 pop	 esi
  00263	5b		 pop	 ebx
  00264	8b e5		 mov	 esp, ebp
  00266	5d		 pop	 ebp
  00267	c2 04 00	 ret	 4
?draw_havoc_hud_on_cockpit@@YGXH@Z ENDP			; draw_havoc_hud_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?deinitialise_havoc_hud@@YGXXZ
_TEXT	SEGMENT
?deinitialise_havoc_hud@@YGXXZ PROC			; deinitialise_havoc_hud, COMDAT

; 1753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1754 : 	destroy_2d_environment (hud_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 1755 : 
; 1756 : 	destroy_screen (hud_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1757 : 	destroy_screen (large_hms_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_hms_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1758 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?deinitialise_havoc_hud@@YGXXZ ENDP			; deinitialise_havoc_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_hud.c
;	COMDAT ?initialise_havoc_hud@@YGXXZ
_TEXT	SEGMENT
?initialise_havoc_hud@@YGXXZ PROC			; initialise_havoc_hud, COMDAT

; 1720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1721 : 	hud_env = create_2d_environment ();

  00009	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?hud_env@@3PAUENV_2D@@A, eax

; 1722 : 
; 1723 : 	if (command_line_high_res_hud)

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_hud@@3HA, 0 ; command_line_high_res_hud
  0001a	74 41		 je	 SHORT $LN2@initialise

; 1724 : 	{
; 1725 : 		hud_texture_screen = create_system_texture_screen (HUD_VIEWPORT_LARGE_SIZE, HUD_VIEWPORT_LARGE_SIZE, TEXTURE_INDEX_HVCKPT_HUD_DISPLAY, TEXTURE_TYPE_SINGLEALPHA);

  0001c	6a 02		 push	 2
  0001e	68 eb 06 00 00	 push	 1771			; 000006ebH
  00023	68 00 01 00 00	 push	 256			; 00000100H
  00028	68 00 01 00 00	 push	 256			; 00000100H
  0002d	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00032	a3 00 00 00 00	 mov	 DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A, eax

; 1726 : 		draw_large_hud = TRUE;

  00037	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_hud@@3HA, 1

; 1727 : 		hud_viewport_size = HUD_VIEWPORT_LARGE_SIZE;

  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00049	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_size@@3MA, xmm0

; 1728 : 		draw_line_func = draw_2d_half_thick_line;

  00051	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 1729 : 	}
; 1730 : 	else

  0005b	eb 3f		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 1731 : 	{
; 1732 : 		hud_texture_screen = create_system_texture_screen (HUD_VIEWPORT_SMALL_SIZE, HUD_VIEWPORT_SMALL_SIZE, TEXTURE_INDEX_HVCKPT_HUD_DISPLAY, TEXTURE_TYPE_SINGLEALPHA);

  0005d	6a 02		 push	 2
  0005f	68 eb 06 00 00	 push	 1771			; 000006ebH
  00064	68 80 00 00 00	 push	 128			; 00000080H
  00069	68 80 00 00 00	 push	 128			; 00000080H
  0006e	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00073	a3 00 00 00 00	 mov	 DWORD PTR ?hud_texture_screen@@3PAUSCREEN@@A, eax

; 1733 : 		draw_large_hud = FALSE;

  00078	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_hud@@3HA, 0

; 1734 : 		hud_viewport_size = HUD_VIEWPORT_SMALL_SIZE;

  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0008a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_size@@3MA, xmm0

; 1735 : 		draw_line_func = draw_2d_line;

  00092	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN3@initialise:

; 1736 : 	}
; 1737 : 
; 1738 : 	hud_viewport_x_org = hud_viewport_size / 2;

  0009c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_size@@3MA
  000a4	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000ac	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_x_org@@3MA, xmm0

; 1739 : 	hud_viewport_y_org = hud_viewport_size / 2;

  000b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hud_viewport_size@@3MA
  000bc	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000c4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hud_viewport_y_org@@3MA, xmm0

; 1740 : 
; 1741 : 	large_hms_texture_screen = create_system_texture_screen (HUD_VIEWPORT_LARGE_SIZE, HUD_VIEWPORT_LARGE_SIZE, LARGE_HMS_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  000cc	6a 02		 push	 2
  000ce	68 f9 00 00 00	 push	 249			; 000000f9H
  000d3	68 00 01 00 00	 push	 256			; 00000100H
  000d8	68 00 01 00 00	 push	 256			; 00000100H
  000dd	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?large_hms_texture_screen@@3PAUSCREEN@@A, eax

; 1742 : 
; 1743 : 	set_rgb_colour (clear_hud_colour, 255, 255, 255, 0);

  000e7	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  000ee	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  000f5	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  000fc	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_hud_colour@@3UREAL_COLOUR@@A+3, 0

; 1744 : 
; 1745 : 	initialise_hms_gun_pipper ();

  00103	e8 00 00 00 00	 call	 ?initialise_hms_gun_pipper@@YGXXZ ; initialise_hms_gun_pipper

; 1746 : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?initialise_havoc_hud@@YGXXZ ENDP			; initialise_havoc_hud
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?atan@@YGMM@Z PROC					; atan, COMDAT

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 47   : 	return (_CSTD atanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _atanf
  00019	83 c4 04	 add	 esp, 4

; 48   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?atan@@YGMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 638  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  :             return (float)atan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _atan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 640  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
