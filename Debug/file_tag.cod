; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\misc\file_tag.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?system_tag_strings@@3PAPBDA			; system_tag_strings
PUBLIC	?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
PUBLIC	??_C@_06ONCDKIFA@UNUSED@			; `string'
PUBLIC	??_C@_07DNODLGKM@INVALID@			; `string'
PUBLIC	??_C@_08LEMDHBFI@BIND_KEY@			; `string'
PUBLIC	??_C@_09KPJDKKFA@CALCULATE@			; `string'
PUBLIC	??_C@_04CAGKGBIO@CALL@				; `string'
PUBLIC	??_C@_0N@INGKCNDE@CREATE_EVENT@			; `string'
PUBLIC	??_C@_0P@HMAJBNMI@CREATE_TRIGGER@		; `string'
PUBLIC	??_C@_0BA@JPPDAMLG@CREATE_VARIABLE@		; `string'
PUBLIC	??_C@_0N@DDHEIJBI@ECHO_MESSAGE@			; `string'
PUBLIC	??_C@_04JLPIBDPH@ELSE@				; `string'
PUBLIC	??_C@_03JMGAKCCH@END@				; `string'
PUBLIC	??_C@_09OKCDOHJA@END_EVENT@			; `string'
PUBLIC	??_C@_05DLHFLCAN@ENDIF@				; `string'
PUBLIC	??_C@_09GBGGCFCF@END_WHILE@			; `string'
PUBLIC	??_C@_05KOOCGPHN@EVENT@				; `string'
PUBLIC	??_C@_08GPLFLAGL@FILENAME@			; `string'
PUBLIC	??_C@_05GGMHDFKJ@FLOAT@				; `string'
PUBLIC	??_C@_02NJNGHICB@IF@				; `string'
PUBLIC	??_C@_03JMHEAPMO@INT@				; `string'
PUBLIC	??_C@_08EJGAFIOK@KEY_CODE@			; `string'
PUBLIC	??_C@_0N@MBODJNIN@KEY_MODIFIER@			; `string'
PUBLIC	??_C@_09PDEEENAD@KEY_STATE@			; `string'
PUBLIC	??_C@_03KHPPBABN@LET@				; `string'
PUBLIC	??_C@_04HBHDLLBA@PATH@				; `string'
PUBLIC	??_C@_0N@LEBBCGFP@SET_VARIABLE@			; `string'
PUBLIC	??_C@_05JLPDBANI@START@				; `string'
PUBLIC	??_C@_04KDPJLEDB@TYPE@				; `string'
PUBLIC	??_C@_05MHMCHENB@VALUE@				; `string'
PUBLIC	??_C@_08MBJEJMEP@VARIABLE@			; `string'
PUBLIC	??_C@_05CFKHKNMI@WHILE@				; `string'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN@			; `string'
_BSS	SEGMENT
?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A DD 01H DUP (?) ; file_tag_variables
_BSS	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFKHKNMI@WHILE@
CONST	SEGMENT
??_C@_05CFKHKNMI@WHILE@ DB 'WHILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBJEJMEP@VARIABLE@
CONST	SEGMENT
??_C@_08MBJEJMEP@VARIABLE@ DB 'VARIABLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHMCHENB@VALUE@
CONST	SEGMENT
??_C@_05MHMCHENB@VALUE@ DB 'VALUE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KDPJLEDB@TYPE@
CONST	SEGMENT
??_C@_04KDPJLEDB@TYPE@ DB 'TYPE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLPDBANI@START@
CONST	SEGMENT
??_C@_05JLPDBANI@START@ DB 'START', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEBBCGFP@SET_VARIABLE@
CONST	SEGMENT
??_C@_0N@LEBBCGFP@SET_VARIABLE@ DB 'SET_VARIABLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HBHDLLBA@PATH@
CONST	SEGMENT
??_C@_04HBHDLLBA@PATH@ DB 'PATH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHPPBABN@LET@
CONST	SEGMENT
??_C@_03KHPPBABN@LET@ DB 'LET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDEEENAD@KEY_STATE@
CONST	SEGMENT
??_C@_09PDEEENAD@KEY_STATE@ DB 'KEY_STATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBODJNIN@KEY_MODIFIER@
CONST	SEGMENT
??_C@_0N@MBODJNIN@KEY_MODIFIER@ DB 'KEY_MODIFIER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJGAFIOK@KEY_CODE@
CONST	SEGMENT
??_C@_08EJGAFIOK@KEY_CODE@ DB 'KEY_CODE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMHEAPMO@INT@
CONST	SEGMENT
??_C@_03JMHEAPMO@INT@ DB 'INT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJNGHICB@IF@
CONST	SEGMENT
??_C@_02NJNGHICB@IF@ DB 'IF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGMHDFKJ@FLOAT@
CONST	SEGMENT
??_C@_05GGMHDFKJ@FLOAT@ DB 'FLOAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPLFLAGL@FILENAME@
CONST	SEGMENT
??_C@_08GPLFLAGL@FILENAME@ DB 'FILENAME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOOCGPHN@EVENT@
CONST	SEGMENT
??_C@_05KOOCGPHN@EVENT@ DB 'EVENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GBGGCFCF@END_WHILE@
CONST	SEGMENT
??_C@_09GBGGCFCF@END_WHILE@ DB 'END_WHILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DLHFLCAN@ENDIF@
CONST	SEGMENT
??_C@_05DLHFLCAN@ENDIF@ DB 'ENDIF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKCDOHJA@END_EVENT@
CONST	SEGMENT
??_C@_09OKCDOHJA@END_EVENT@ DB 'END_EVENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMGAKCCH@END@
CONST	SEGMENT
??_C@_03JMGAKCCH@END@ DB 'END', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLPIBDPH@ELSE@
CONST	SEGMENT
??_C@_04JLPIBDPH@ELSE@ DB 'ELSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DDHEIJBI@ECHO_MESSAGE@
CONST	SEGMENT
??_C@_0N@DDHEIJBI@ECHO_MESSAGE@ DB 'ECHO_MESSAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JPPDAMLG@CREATE_VARIABLE@
CONST	SEGMENT
??_C@_0BA@JPPDAMLG@CREATE_VARIABLE@ DB 'CREATE_VARIABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HMAJBNMI@CREATE_TRIGGER@
CONST	SEGMENT
??_C@_0P@HMAJBNMI@CREATE_TRIGGER@ DB 'CREATE_TRIGGER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@INGKCNDE@CREATE_EVENT@
CONST	SEGMENT
??_C@_0N@INGKCNDE@CREATE_EVENT@ DB 'CREATE_EVENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04CAGKGBIO@CALL@
CONST	SEGMENT
??_C@_04CAGKGBIO@CALL@ DB 'CALL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPJDKKFA@CALCULATE@
CONST	SEGMENT
??_C@_09KPJDKKFA@CALCULATE@ DB 'CALCULATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LEMDHBFI@BIND_KEY@
CONST	SEGMENT
??_C@_08LEMDHBFI@BIND_KEY@ DB 'BIND_KEY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DNODLGKM@INVALID@
CONST	SEGMENT
??_C@_07DNODLGKM@INVALID@ DB 'INVALID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONCDKIFA@UNUSED@
CONST	SEGMENT
??_C@_06ONCDKIFA@UNUSED@ DB 'UNUSED', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?system_tag_strings@@3PAPBDA DD FLAT:??_C@_06ONCDKIFA@UNUSED@ ; system_tag_strings
	DD	FLAT:??_C@_07DNODLGKM@INVALID@
	DD	FLAT:??_C@_08LEMDHBFI@BIND_KEY@
	DD	FLAT:??_C@_09KPJDKKFA@CALCULATE@
	DD	FLAT:??_C@_04CAGKGBIO@CALL@
	DD	FLAT:??_C@_0N@INGKCNDE@CREATE_EVENT@
	DD	FLAT:??_C@_0P@HMAJBNMI@CREATE_TRIGGER@
	DD	FLAT:??_C@_0BA@JPPDAMLG@CREATE_VARIABLE@
	DD	FLAT:??_C@_0N@DDHEIJBI@ECHO_MESSAGE@
	DD	FLAT:??_C@_04JLPIBDPH@ELSE@
	DD	FLAT:??_C@_03JMGAKCCH@END@
	DD	FLAT:??_C@_09OKCDOHJA@END_EVENT@
	DD	FLAT:??_C@_05DLHFLCAN@ENDIF@
	DD	FLAT:??_C@_09GBGGCFCF@END_WHILE@
	DD	FLAT:??_C@_05KOOCGPHN@EVENT@
	DD	FLAT:??_C@_08GPLFLAGL@FILENAME@
	DD	FLAT:??_C@_05GGMHDFKJ@FLOAT@
	DD	FLAT:??_C@_02NJNGHICB@IF@
	DD	FLAT:??_C@_03JMHEAPMO@INT@
	DD	FLAT:??_C@_08EJGAFIOK@KEY_CODE@
	DD	FLAT:??_C@_0N@MBODJNIN@KEY_MODIFIER@
	DD	FLAT:??_C@_09PDEEENAD@KEY_STATE@
	DD	FLAT:??_C@_03KHPPBABN@LET@
	DD	FLAT:??_C@_04HBHDLLBA@PATH@
	DD	FLAT:??_C@_0N@LEBBCGFP@SET_VARIABLE@
	DD	FLAT:??_C@_05JLPDBANI@START@
	DD	FLAT:??_C@_04KDPJLEDB@TYPE@
	DD	FLAT:??_C@_05MHMCHENB@VALUE@
	DD	FLAT:??_C@_08MBJEJMEP@VARIABLE@
	DD	FLAT:??_C@_05CFKHKNMI@WHILE@
	DD	FLAT:??_C@_07NFANNNEC@UNKNOWN@
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?strchr@@YAPADQADH@Z				; strchr
PUBLIC	?initialise_file_tag_system@@YGXXZ		; initialise_file_tag_system
PUBLIC	?deinitialise_file_tag_system@@YGXXZ		; deinitialise_file_tag_system
PUBLIC	?set_file_tag@@YGXPAU_iobuf@@QAPBDH@Z		; set_file_tag
PUBLIC	?set_file_int@@YGXPAU_iobuf@@H@Z		; set_file_int
PUBLIC	?set_file_float@@YGXPAU_iobuf@@M@Z		; set_file_float
PUBLIC	?set_file_string@@YGXPAU_iobuf@@PBD@Z		; set_file_string
PUBLIC	?set_file_enum@@YGXPAU_iobuf@@QAPBDH@Z		; set_file_enum
PUBLIC	?set_file_new_line@@YGXPAU_iobuf@@H@Z		; set_file_new_line
PUBLIC	?set_file_comment@@YGXPAU_iobuf@@PBD@Z		; set_file_comment
PUBLIC	?get_file_tag@@YGHPBDQAPBDH@Z			; get_file_tag
PUBLIC	?get_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z	; get_next_file_tag
PUBLIC	?check_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z	; check_next_file_tag
PUBLIC	?get_next_file_int@@YGHPAU_iobuf@@@Z		; get_next_file_int
PUBLIC	?get_next_file_float@@YGMPAU_iobuf@@@Z		; get_next_file_float
PUBLIC	?get_next_file_paragraph@@YGHPAU_iobuf@@PADH@Z	; get_next_file_paragraph
PUBLIC	?get_next_file_string@@YGHPAU_iobuf@@PADH@Z	; get_next_file_string
PUBLIC	?get_next_file_word@@YGHPAU_iobuf@@PADH@Z	; get_next_file_word
PUBLIC	?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z	; get_next_file_enum
PUBLIC	?register_file_tag_variable@@YGXPBDPAH@Z	; register_file_tag_variable
PUBLIC	?unregister_file_tag_variable@@YGXPBD@Z		; unregister_file_tag_variable
PUBLIC	?get_file_tag_variable@@YGPAHPBD@Z		; get_file_tag_variable
PUBLIC	?if_file_tag_variable@@YGHPBD0H@Z		; if_file_tag_variable
PUBLIC	?if_file_tag_operator@@YGHHPBDH@Z		; if_file_tag_operator
PUBLIC	?set_file_tag_variable@@YGHPBDH@Z		; set_file_tag_variable
PUBLIC	?get_variable_id@@YGHPBD@Z			; get_variable_id
PUBLIC	?get_operator_id@@YGHPBD@Z			; get_operator_id
PUBLIC	?get_variable_name@@YGPBDH@Z			; get_variable_name
PUBLIC	?get_operator_name@@YGDH@Z			; get_operator_name
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_05FAOIHALK@?6?3?$CFs?5@			; `string'
PUBLIC	??_C@_03JDANDILB@?$CFd?5@			; `string'
PUBLIC	??_C@_06OAGNEJGA@?$CF?402f?5@			; `string'
PUBLIC	??_C@_04NMPCIDEG@?$CFs?$AA?5@			; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_05GOPCNELJ@?6?1?1?$CFs@			; `string'
PUBLIC	??_C@_0BK@FEMOLBP@FILE_TAG?3?5tag?5too?5long?5?$CFs@ ; `string'
PUBLIC	??_C@_0BN@PFLFCENI@FILE_TAG?3?5check?5tag?5too?5long@ ; `string'
PUBLIC	??_C@_0CA@DJAFFCDM@FILE_TAG?3?5get?5next?5int?5too?5long@ ; `string'
PUBLIC	??_C@_0CB@NBIBODM@FILE_TAG?3?5get?5next?5enum?5too?5lon@ ; `string'
PUBLIC	??_C@_0BO@CMOENNCH@FILE_TAG?3?5unrecognised?5tag?5?$CFs@ ; `string'
PUBLIC	??_C@_0BO@BOMADOCJ@FILE_TAG?3?5unknown?5operator?5?$CFc@ ; `string'
PUBLIC	__real@4024000000000000
EXTRN	__imp__fgetc:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__atoi:PROC
EXTRN	_memset:PROC
EXTRN	_strchr:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__isdigit:PROC
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT ??_C@_0BO@BOMADOCJ@FILE_TAG?3?5unknown?5operator?5?$CFc@
CONST	SEGMENT
??_C@_0BO@BOMADOCJ@FILE_TAG?3?5unknown?5operator?5?$CFc@ DB 'FILE_TAG: un'
	DB	'known operator %c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CMOENNCH@FILE_TAG?3?5unrecognised?5tag?5?$CFs@
CONST	SEGMENT
??_C@_0BO@CMOENNCH@FILE_TAG?3?5unrecognised?5tag?5?$CFs@ DB 'FILE_TAG: un'
	DB	'recognised tag %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NBIBODM@FILE_TAG?3?5get?5next?5enum?5too?5lon@
CONST	SEGMENT
??_C@_0CB@NBIBODM@FILE_TAG?3?5get?5next?5enum?5too?5lon@ DB 'FILE_TAG: ge'
	DB	't next enum too long', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DJAFFCDM@FILE_TAG?3?5get?5next?5int?5too?5long@
CONST	SEGMENT
??_C@_0CA@DJAFFCDM@FILE_TAG?3?5get?5next?5int?5too?5long@ DB 'FILE_TAG: g'
	DB	'et next int too long', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PFLFCENI@FILE_TAG?3?5check?5tag?5too?5long@
CONST	SEGMENT
??_C@_0BN@PFLFCENI@FILE_TAG?3?5check?5tag?5too?5long@ DB 'FILE_TAG: check'
	DB	' tag too long', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FEMOLBP@FILE_TAG?3?5tag?5too?5long?5?$CFs@
CONST	SEGMENT
??_C@_0BK@FEMOLBP@FILE_TAG?3?5tag?5too?5long?5?$CFs@ DB 'FILE_TAG: tag to'
	DB	'o long %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05GOPCNELJ@?6?1?1?$CFs@
CONST	SEGMENT
??_C@_05GOPCNELJ@?6?1?1?$CFs@ DB 0aH, '//%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5@ DB '%s ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMPCIDEG@?$CFs?$AA?5@
CONST	SEGMENT
??_C@_04NMPCIDEG@?$CFs?$AA?5@ DB '%s', 00H, ' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAGNEJGA@?$CF?402f?5@
CONST	SEGMENT
??_C@_06OAGNEJGA@?$CF?402f?5@ DB '%.02f ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5@ DB '%d ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAOIHALK@?6?3?$CFs?5@
CONST	SEGMENT
??_C@_05FAOIHALK@?6?3?$CFs?5@ DB 0aH, ':%s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_operator_name@@YGDH@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
_id$ = 8						; size = 4
?get_operator_name@@YGDH@Z PROC				; get_operator_name, COMDAT

; 1393 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1394 : 
; 1395 : 	#if DEBUG_MODULE
; 1396 : 
; 1397 : 	debug_log ("FILE_TAG: get_operator_name %d", id);
; 1398 : 
; 1399 : 	#endif
; 1400 : 
; 1401 : 	switch (id)

  00009	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d bc 00	 cmp	 DWORD PTR tv64[ebp], 0
  00013	74 0e		 je	 SHORT $LN4@get_operat
  00015	83 7d bc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00019	74 0c		 je	 SHORT $LN5@get_operat
  0001b	83 7d bc 02	 cmp	 DWORD PTR tv64[ebp], 2
  0001f	74 0a		 je	 SHORT $LN6@get_operat
  00021	eb 0c		 jmp	 SHORT $LN2@get_operat
$LN4@get_operat:

; 1402 : 	{
; 1403 : 
; 1404 : 		case FILE_TAG_EQUALS:
; 1405 : 		{
; 1406 : 
; 1407 : 			return '=';

  00023	b0 3d		 mov	 al, 61			; 0000003dH
  00025	eb 0a		 jmp	 SHORT $LN1@get_operat
$LN5@get_operat:

; 1408 : 		}
; 1409 : 
; 1410 : 		case FILE_TAG_LESS_THAN:
; 1411 : 		{
; 1412 : 
; 1413 : 			return '<';

  00027	b0 3c		 mov	 al, 60			; 0000003cH
  00029	eb 06		 jmp	 SHORT $LN1@get_operat
$LN6@get_operat:

; 1414 : 		}
; 1415 : 
; 1416 : 		case FILE_TAG_GREATER_THAN:
; 1417 : 		{
; 1418 : 
; 1419 : 			return '>';

  0002b	b0 3e		 mov	 al, 62			; 0000003eH
  0002d	eb 02		 jmp	 SHORT $LN1@get_operat
$LN2@get_operat:

; 1420 : 		}
; 1421 : 	}
; 1422 : 
; 1423 : 	return '\0';

  0002f	32 c0		 xor	 al, al
$LN1@get_operat:

; 1424 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?get_operator_name@@YGDH@Z ENDP				; get_operator_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_variable_name@@YGPBDH@Z
_TEXT	SEGMENT
_variable$ = -4						; size = 4
_id$ = 8						; size = 4
?get_variable_name@@YGPBDH@Z PROC			; get_variable_name, COMDAT

; 1323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1324 : 
; 1325 : 	file_tag_variable_type
; 1326 : 		*variable;
; 1327 : 
; 1328 : 	variable = file_tag_variables;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  0000e	89 45 fc	 mov	 DWORD PTR _variable$[ebp], eax
$LN2@get_variab:

; 1329 : 
; 1330 : 	while (variable)

  00011	83 7d fc 00	 cmp	 DWORD PTR _variable$[ebp], 0
  00015	74 1d		 je	 SHORT $LN3@get_variab

; 1331 : 	{
; 1332 : 
; 1333 : 		if (variable->id == id)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  0001a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001d	3b 4d 08	 cmp	 ecx, DWORD PTR _id$[ebp]
  00020	75 07		 jne	 SHORT $LN4@get_variab

; 1334 : 		{
; 1335 : 
; 1336 : 			#if DEBUG_MODULE
; 1337 : 
; 1338 : 			debug_log ("FILE_TAG: get_variable_name id %d = %s", id, variable->name);
; 1339 : 
; 1340 : 			#endif
; 1341 : 
; 1342 : 			return variable->name;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
  00027	eb 0d		 jmp	 SHORT $LN1@get_variab
$LN4@get_variab:

; 1343 : 		}
; 1344 : 
; 1345 : 		variable = variable->next;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  0002c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002f	89 4d fc	 mov	 DWORD PTR _variable$[ebp], ecx

; 1346 : 	}

  00032	eb dd		 jmp	 SHORT $LN2@get_variab
$LN3@get_variab:

; 1347 : 
; 1348 : 	return NULL;

  00034	33 c0		 xor	 eax, eax
$LN1@get_variab:

; 1349 : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?get_variable_name@@YGPBDH@Z ENDP			; get_variable_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_operator_id@@YGHPBD@Z
_TEXT	SEGMENT
tv65 = -68						; size = 4
_name$ = 8						; size = 4
?get_operator_id@@YGHPBD@Z PROC				; get_operator_id, COMDAT

; 1356 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1357 : 
; 1358 : 	#if DEBUG_MODULE
; 1359 : 
; 1360 : 	debug_log ("FILE_TAG: get_operator_id %c", name [0]);
; 1361 : 
; 1362 : 	#endif
; 1363 : 
; 1364 : 	switch (*name)

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	8a 08		 mov	 cl, BYTE PTR [eax]
  0000e	88 4d bc	 mov	 BYTE PTR tv65[ebp], cl
  00011	80 7d bc 3c	 cmp	 BYTE PTR tv65[ebp], 60	; 0000003cH
  00015	74 12		 je	 SHORT $LN5@get_operat
  00017	80 7d bc 3d	 cmp	 BYTE PTR tv65[ebp], 61	; 0000003dH
  0001b	74 08		 je	 SHORT $LN4@get_operat
  0001d	80 7d bc 3e	 cmp	 BYTE PTR tv65[ebp], 62	; 0000003eH
  00021	74 0d		 je	 SHORT $LN6@get_operat
  00023	eb 12		 jmp	 SHORT $LN2@get_operat
$LN4@get_operat:

; 1365 : 	{
; 1366 : 
; 1367 : 		case '=':
; 1368 : 		{
; 1369 : 
; 1370 : 			return FILE_TAG_EQUALS;

  00025	33 c0		 xor	 eax, eax
  00027	eb 11		 jmp	 SHORT $LN1@get_operat
$LN5@get_operat:

; 1371 : 		}
; 1372 : 
; 1373 : 		case '<':
; 1374 : 		{
; 1375 : 			return FILE_TAG_LESS_THAN;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	eb 0a		 jmp	 SHORT $LN1@get_operat
$LN6@get_operat:

; 1376 : 		}
; 1377 : 
; 1378 : 		case '>':
; 1379 : 		{
; 1380 : 
; 1381 : 			return FILE_TAG_GREATER_THAN;

  00030	b8 02 00 00 00	 mov	 eax, 2
  00035	eb 03		 jmp	 SHORT $LN1@get_operat
$LN2@get_operat:

; 1382 : 		}
; 1383 : 	}
; 1384 : 
; 1385 : 	return -1;

  00037	83 c8 ff	 or	 eax, -1
$LN1@get_operat:

; 1386 : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?get_operator_id@@YGHPBD@Z ENDP				; get_operator_id
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_variable_id@@YGHPBD@Z
_TEXT	SEGMENT
_variable$ = -4						; size = 4
_variable_name$ = 8					; size = 4
?get_variable_id@@YGHPBD@Z PROC				; get_variable_id, COMDAT

; 1290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1291 : 
; 1292 : 	file_tag_variable_type
; 1293 : 		*variable;
; 1294 : 
; 1295 : 	variable = file_tag_variables;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  0000e	89 45 fc	 mov	 DWORD PTR _variable$[ebp], eax
$LN2@get_variab:

; 1296 : 
; 1297 : 	while (variable)

  00011	83 7d fc 00	 cmp	 DWORD PTR _variable$[ebp], 0
  00015	74 2a		 je	 SHORT $LN3@get_variab

; 1298 : 	{
; 1299 : 
; 1300 : 		if (strcmpi (variable_name, variable->name) == 0)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR _variable_name$[ebp]
  00020	52		 push	 edx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  00027	83 c4 08	 add	 esp, 8
  0002a	85 c0		 test	 eax, eax
  0002c	75 08		 jne	 SHORT $LN4@get_variab

; 1301 : 		{
; 1302 : 
; 1303 : 			#if DEBUG_MODULE
; 1304 : 
; 1305 : 			debug_log ("FILE_TAG: get_variable_id %s = %d", variable_name, variable->id);
; 1306 : 
; 1307 : 			#endif
; 1308 : 
; 1309 : 			return variable->id;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	eb 0e		 jmp	 SHORT $LN1@get_variab
$LN4@get_variab:

; 1310 : 		}
; 1311 : 
; 1312 : 		variable = variable->next;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00039	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003c	89 4d fc	 mov	 DWORD PTR _variable$[ebp], ecx

; 1313 : 	}

  0003f	eb d0		 jmp	 SHORT $LN2@get_variab
$LN3@get_variab:

; 1314 : 
; 1315 : 	return -1;

  00041	83 c8 ff	 or	 eax, -1
$LN1@get_variab:

; 1316 : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?get_variable_id@@YGHPBD@Z ENDP				; get_variable_id
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_tag_variable@@YGHPBDH@Z
_TEXT	SEGMENT
_variable$ = -4						; size = 4
_variable_name$ = 8					; size = 4
_value$ = 12						; size = 4
?set_file_tag_variable@@YGHPBDH@Z PROC			; set_file_tag_variable, COMDAT

; 1261 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1262 : 
; 1263 : 	int
; 1264 : 		*variable;
; 1265 : 
; 1266 : 	variable = get_file_tag_variable (variable_name);

  00009	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_file_tag_variable@@YGPAHPBD@Z ; get_file_tag_variable
  00012	89 45 fc	 mov	 DWORD PTR _variable$[ebp], eax

; 1267 : 
; 1268 : 	if (variable)

  00015	83 7d fc 00	 cmp	 DWORD PTR _variable$[ebp], 0
  00019	74 0f		 je	 SHORT $LN2@set_file_t

; 1269 : 	{
; 1270 : 
; 1271 : 		#if DEBUG_MODULE
; 1272 : 
; 1273 : 		debug_log ("FILE_TAG: set_file_tag_variable %s = %d", variable_name, value);
; 1274 : 
; 1275 : 		#endif
; 1276 : 
; 1277 : 		*variable = value;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00021	89 08		 mov	 DWORD PTR [eax], ecx

; 1278 : 
; 1279 : 		return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	eb 02		 jmp	 SHORT $LN1@set_file_t
$LN2@set_file_t:

; 1280 : 	}
; 1281 : 
; 1282 : 	return FALSE;

  0002a	33 c0		 xor	 eax, eax
$LN1@set_file_t:

; 1283 : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
?set_file_tag_variable@@YGHPBDH@Z ENDP			; set_file_tag_variable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?if_file_tag_operator@@YGHHPBDH@Z
_TEXT	SEGMENT
tv65 = -328						; size = 4
_log_string$1 = -260					; size = 256
_return_value$ = -4					; size = 4
_value1$ = 8						; size = 4
_operator_$ = 12					; size = 4
_value2$ = 16						; size = 4
?if_file_tag_operator@@YGHHPBDH@Z PROC			; if_file_tag_operator, COMDAT

; 1189 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1190 : 
; 1191 : 	int
; 1192 : 		return_value;
; 1193 : 		//*variable;
; 1194 : 
; 1195 : 	#if DEBUG_MODULE
; 1196 : 
; 1197 : 	debug_log ("FILE_TAG: IF %d %s %d", value1, *operator, value2);
; 1198 : 
; 1199 : 	#endif
; 1200 : 
; 1201 : 	return_value = FALSE;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 0

; 1202 : 
; 1203 : 	switch (*operator_)

  00013	8b 45 0c	 mov	 eax, DWORD PTR _operator_$[ebp]
  00016	8a 08		 mov	 cl, BYTE PTR [eax]
  00018	88 8d b8 fe ff
	ff		 mov	 BYTE PTR tv65[ebp], cl
  0001e	80 bd b8 fe ff
	ff 3c		 cmp	 BYTE PTR tv65[ebp], 60	; 0000003cH
  00025	74 25		 je	 SHORT $LN6@if_file_ta
  00027	80 bd b8 fe ff
	ff 3d		 cmp	 BYTE PTR tv65[ebp], 61	; 0000003dH
  0002e	74 0b		 je	 SHORT $LN4@if_file_ta
  00030	80 bd b8 fe ff
	ff 3e		 cmp	 BYTE PTR tv65[ebp], 62	; 0000003eH
  00037	74 24		 je	 SHORT $LN8@if_file_ta
  00039	eb 33		 jmp	 SHORT $LN10@if_file_ta
$LN4@if_file_ta:

; 1204 : 	{
; 1205 : 
; 1206 : 		case '=':
; 1207 : 		{
; 1208 : 
; 1209 : 			if (value1 == value2)

  0003b	8b 45 08	 mov	 eax, DWORD PTR _value1$[ebp]
  0003e	3b 45 10	 cmp	 eax, DWORD PTR _value2$[ebp]
  00041	75 07		 jne	 SHORT $LN5@if_file_ta

; 1210 : 			{
; 1211 : 
; 1212 : 				return_value = TRUE;

  00043	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 1
$LN5@if_file_ta:

; 1213 : 			}
; 1214 : 
; 1215 : 			break;

  0004a	eb 55		 jmp	 SHORT $LN2@if_file_ta
$LN6@if_file_ta:

; 1216 : 		}
; 1217 : 
; 1218 : 		case '<':
; 1219 : 		{
; 1220 : 
; 1221 : 			if (value1 < value2)

  0004c	8b 45 08	 mov	 eax, DWORD PTR _value1$[ebp]
  0004f	3b 45 10	 cmp	 eax, DWORD PTR _value2$[ebp]
  00052	7d 07		 jge	 SHORT $LN7@if_file_ta

; 1222 : 			{
; 1223 : 
; 1224 : 				return_value = TRUE;

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 1
$LN7@if_file_ta:

; 1225 : 			}
; 1226 : 
; 1227 : 			break;

  0005b	eb 44		 jmp	 SHORT $LN2@if_file_ta
$LN8@if_file_ta:

; 1228 : 		}
; 1229 : 
; 1230 : 		case '>':
; 1231 : 		{
; 1232 : 
; 1233 : 			if (value1 > value2)

  0005d	8b 45 08	 mov	 eax, DWORD PTR _value1$[ebp]
  00060	3b 45 10	 cmp	 eax, DWORD PTR _value2$[ebp]
  00063	7e 07		 jle	 SHORT $LN9@if_file_ta

; 1234 : 			{
; 1235 : 
; 1236 : 				return_value = TRUE;

  00065	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 1
$LN9@if_file_ta:

; 1237 : 			}
; 1238 : 
; 1239 : 			break;

  0006c	eb 33		 jmp	 SHORT $LN2@if_file_ta
$LN10@if_file_ta:

; 1240 : 		}
; 1241 : 
; 1242 : 		default:
; 1243 : 		{
; 1244 : 
; 1245 : 			char
; 1246 : 				log_string [256];
; 1247 : 
; 1248 : 			sprintf (log_string, "FILE_TAG: unknown operator %c", operator_ [0]);

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	6b c8 00	 imul	 ecx, eax, 0
  00076	8b 55 0c	 mov	 edx, DWORD PTR _operator_$[ebp]
  00079	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BOMADOCJ@FILE_TAG?3?5unknown?5operator?5?$CFc@
  00083	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _log_string$1[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 _sprintf
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1249 : 			debug_fatal (log_string);

  00092	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _log_string$1[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0009e	83 c4 04	 add	 esp, 4
$LN2@if_file_ta:

; 1250 : 		}
; 1251 : 	}
; 1252 : 
; 1253 : 	return return_value;

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _return_value$[ebp]

; 1254 : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 0c 00	 ret	 12			; 0000000cH
?if_file_tag_operator@@YGHHPBDH@Z ENDP			; if_file_tag_operator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?if_file_tag_variable@@YGHPBD0H@Z
_TEXT	SEGMENT
tv65 = -76						; size = 4
_variable$ = -8						; size = 4
_return_value$ = -4					; size = 4
_variable_name$ = 8					; size = 4
_operator_$ = 12					; size = 4
_value$ = 16						; size = 4
?if_file_tag_variable@@YGHPBD0H@Z PROC			; if_file_tag_variable, COMDAT

; 1109 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1110 : 
; 1111 : 	int
; 1112 : 		return_value,
; 1113 : 		*variable;
; 1114 : 
; 1115 : 	#if DEBUG_MODULE
; 1116 : 
; 1117 : 	debug_log ("FILE_TAG: IF %s %s %d", variable_name, operator, value);
; 1118 : 
; 1119 : 	#endif
; 1120 : 
; 1121 : 	return_value = FALSE;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 0

; 1122 : 
; 1123 : 	switch (*operator_)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _operator_$[ebp]
  00013	8a 08		 mov	 cl, BYTE PTR [eax]
  00015	88 4d b4	 mov	 BYTE PTR tv65[ebp], cl
  00018	80 7d b4 3c	 cmp	 BYTE PTR tv65[ebp], 60	; 0000003cH
  0001c	74 33		 je	 SHORT $LN7@if_file_ta
  0001e	80 7d b4 3d	 cmp	 BYTE PTR tv65[ebp], 61	; 0000003dH
  00022	74 08		 je	 SHORT $LN4@if_file_ta
  00024	80 7d b4 3e	 cmp	 BYTE PTR tv65[ebp], 62	; 0000003eH
  00028	74 4c		 je	 SHORT $LN10@if_file_ta
  0002a	eb 6d		 jmp	 SHORT $LN2@if_file_ta
$LN4@if_file_ta:

; 1124 : 	{
; 1125 : 
; 1126 : 		case '=':
; 1127 : 		{
; 1128 : 
; 1129 : 			variable = get_file_tag_variable (variable_name);

  0002c	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?get_file_tag_variable@@YGPAHPBD@Z ; get_file_tag_variable
  00035	89 45 f8	 mov	 DWORD PTR _variable$[ebp], eax

; 1130 : 
; 1131 : 			if (variable)

  00038	83 7d f8 00	 cmp	 DWORD PTR _variable$[ebp], 0
  0003c	74 11		 je	 SHORT $LN5@if_file_ta

; 1132 : 			{
; 1133 : 	
; 1134 : 				if (*variable == value)

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _variable$[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	3b 4d 10	 cmp	 ecx, DWORD PTR _value$[ebp]
  00046	75 07		 jne	 SHORT $LN5@if_file_ta

; 1135 : 				{
; 1136 : 	
; 1137 : 					return_value = TRUE;

  00048	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 1
$LN5@if_file_ta:

; 1138 : 				}
; 1139 : 			}
; 1140 : 
; 1141 : 			break;

  0004f	eb 48		 jmp	 SHORT $LN2@if_file_ta
$LN7@if_file_ta:

; 1142 : 		}
; 1143 : 
; 1144 : 		case '<':
; 1145 : 		{
; 1146 : 
; 1147 : 			variable = get_file_tag_variable (variable_name);

  00051	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?get_file_tag_variable@@YGPAHPBD@Z ; get_file_tag_variable
  0005a	89 45 f8	 mov	 DWORD PTR _variable$[ebp], eax

; 1148 : 
; 1149 : 			if (variable)

  0005d	83 7d f8 00	 cmp	 DWORD PTR _variable$[ebp], 0
  00061	74 11		 je	 SHORT $LN8@if_file_ta

; 1150 : 			{
; 1151 : 	
; 1152 : 				if (*variable < value)

  00063	8b 45 f8	 mov	 eax, DWORD PTR _variable$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	3b 4d 10	 cmp	 ecx, DWORD PTR _value$[ebp]
  0006b	7d 07		 jge	 SHORT $LN8@if_file_ta

; 1153 : 				{
; 1154 : 	
; 1155 : 					return_value = TRUE;

  0006d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 1
$LN8@if_file_ta:

; 1156 : 				}
; 1157 : 			}
; 1158 : 
; 1159 : 			break;

  00074	eb 23		 jmp	 SHORT $LN2@if_file_ta
$LN10@if_file_ta:

; 1160 : 		}
; 1161 : 
; 1162 : 		case '>':
; 1163 : 		{
; 1164 : 
; 1165 : 			variable = get_file_tag_variable (variable_name);

  00076	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?get_file_tag_variable@@YGPAHPBD@Z ; get_file_tag_variable
  0007f	89 45 f8	 mov	 DWORD PTR _variable$[ebp], eax

; 1166 : 
; 1167 : 			if (variable)

  00082	83 7d f8 00	 cmp	 DWORD PTR _variable$[ebp], 0
  00086	74 11		 je	 SHORT $LN2@if_file_ta

; 1168 : 			{
; 1169 : 	
; 1170 : 				if (*variable > value)

  00088	8b 45 f8	 mov	 eax, DWORD PTR _variable$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	3b 4d 10	 cmp	 ecx, DWORD PTR _value$[ebp]
  00090	7e 07		 jle	 SHORT $LN2@if_file_ta

; 1171 : 				{
; 1172 : 	
; 1173 : 					return_value = TRUE;

  00092	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _return_value$[ebp], 1
$LN2@if_file_ta:

; 1174 : 				}
; 1175 : 			}
; 1176 : 
; 1177 : 			break;
; 1178 : 		}
; 1179 : 	}
; 1180 : 
; 1181 : 	return return_value;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _return_value$[ebp]

; 1182 : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH
?if_file_tag_variable@@YGHPBD0H@Z ENDP			; if_file_tag_variable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_file_tag_variable@@YGPAHPBD@Z
_TEXT	SEGMENT
_variable$ = -4						; size = 4
_variable_name$ = 8					; size = 4
?get_file_tag_variable@@YGPAHPBD@Z PROC			; get_file_tag_variable, COMDAT

; 1070 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1071 : 
; 1072 : 	file_tag_variable_type
; 1073 : 		*variable;
; 1074 : 
; 1075 : 	variable = file_tag_variables;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  0000e	89 45 fc	 mov	 DWORD PTR _variable$[ebp], eax
$LN2@get_file_t:

; 1076 : 
; 1077 : 	while (variable)

  00011	83 7d fc 00	 cmp	 DWORD PTR _variable$[ebp], 0
  00015	74 2a		 je	 SHORT $LN3@get_file_t

; 1078 : 	{
; 1079 : 
; 1080 : 		if (strcmpi (variable_name, variable->name) == 0)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR _variable_name$[ebp]
  00020	52		 push	 edx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  00027	83 c4 08	 add	 esp, 8
  0002a	85 c0		 test	 eax, eax
  0002c	75 08		 jne	 SHORT $LN4@get_file_t

; 1081 : 		{
; 1082 : 
; 1083 : 			#if DEBUG_MODULE
; 1084 : 
; 1085 : 			debug_log ("FILE_TAG: get_file_tag_variable %s", variable_name);
; 1086 : 
; 1087 : 			#endif
; 1088 : 
; 1089 : 			return variable->variable;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00031	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00034	eb 0d		 jmp	 SHORT $LN1@get_file_t
$LN4@get_file_t:

; 1090 : 		}
; 1091 : 
; 1092 : 		variable = variable->next;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00039	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003c	89 4d fc	 mov	 DWORD PTR _variable$[ebp], ecx

; 1093 : 	}

  0003f	eb d0		 jmp	 SHORT $LN2@get_file_t
$LN3@get_file_t:

; 1094 : 
; 1095 : 	#if DEBUG_MODULE
; 1096 : 
; 1097 : 	debug_log ("FILE_TAG: get_file_tag_variable %s, not found", variable_name);
; 1098 : 
; 1099 : 	#endif
; 1100 : 
; 1101 : 	return NULL;

  00041	33 c0		 xor	 eax, eax
$LN1@get_file_t:

; 1102 : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?get_file_tag_variable@@YGPAHPBD@Z ENDP			; get_file_tag_variable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?unregister_file_tag_variable@@YGXPBD@Z
_TEXT	SEGMENT
_last_variable$ = -8					; size = 4
_variable$ = -4						; size = 4
_variable_name$ = 8					; size = 4
?unregister_file_tag_variable@@YGXPBD@Z PROC		; unregister_file_tag_variable, COMDAT

; 1007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1008 : 
; 1009 : 	file_tag_variable_type
; 1010 : 		*variable,
; 1011 : 		*last_variable;
; 1012 : 
; 1013 : 	//
; 1014 : 	// check if variable already registered
; 1015 : 	//
; 1016 : 
; 1017 : 	last_variable = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _last_variable$[ebp], 0

; 1018 : 
; 1019 : 	variable = file_tag_variables;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  00015	89 45 fc	 mov	 DWORD PTR _variable$[ebp], eax
$LN2@unregister:

; 1020 : 
; 1021 : 	while (variable)

  00018	83 7d fc 00	 cmp	 DWORD PTR _variable$[ebp], 0
  0001c	74 2a		 je	 SHORT $LN3@unregister

; 1022 : 	{
; 1023 : 
; 1024 : 		if (strcmpi (variable->name, variable_name) == 0)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  00021	50		 push	 eax
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _variable$[ebp]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	52		 push	 edx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0002e	83 c4 08	 add	 esp, 8
  00031	85 c0		 test	 eax, eax
  00033	75 02		 jne	 SHORT $LN4@unregister

; 1025 : 		{
; 1026 : 
; 1027 : 			break;

  00035	eb 11		 jmp	 SHORT $LN3@unregister
$LN4@unregister:

; 1028 : 		}
; 1029 : 
; 1030 : 		last_variable = variable;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  0003a	89 45 f8	 mov	 DWORD PTR _last_variable$[ebp], eax

; 1031 : 
; 1032 : 		variable = variable->next;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00040	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00043	89 4d fc	 mov	 DWORD PTR _variable$[ebp], ecx

; 1033 : 	}

  00046	eb d0		 jmp	 SHORT $LN2@unregister
$LN3@unregister:

; 1034 : 
; 1035 : 	if (variable)

  00048	83 7d fc 00	 cmp	 DWORD PTR _variable$[ebp], 0
  0004c	74 44		 je	 SHORT $LN1@unregister

; 1036 : 	{
; 1037 : 	
; 1038 : 		if (last_variable)

  0004e	83 7d f8 00	 cmp	 DWORD PTR _last_variable$[ebp], 0
  00052	74 0e		 je	 SHORT $LN6@unregister

; 1039 : 		{
; 1040 : 	
; 1041 : 			last_variable->next = variable->next;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _last_variable$[ebp]
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _variable$[ebp]
  0005a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005d	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 1042 : 		}
; 1043 : 		else

  00060	eb 0c		 jmp	 SHORT $LN7@unregister
$LN6@unregister:

; 1044 : 		{
; 1045 : 	
; 1046 : 			file_tag_variables = variable->next;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00065	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00068	89 0d 00 00 00
	00		 mov	 DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A, ecx ; file_tag_variables
$LN7@unregister:

; 1047 : 		}
; 1048 : 
; 1049 : 		#if DEBUG_MODULE
; 1050 : 
; 1051 : 		debug_log ("FILE_TAG: unregistered variable %s", variable_name);
; 1052 : 
; 1053 : 		#endif
; 1054 : 	
; 1055 : 		if (variable->name)

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00071	83 38 00	 cmp	 DWORD PTR [eax], 0
  00074	74 0f		 je	 SHORT $LN8@unregister

; 1056 : 		{
; 1057 : 	
; 1058 : 			free (variable->name);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	51		 push	 ecx
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00082	83 c4 04	 add	 esp, 4
$LN8@unregister:

; 1059 : 		}
; 1060 : 
; 1061 : 		free (variable);

  00085	8b 45 fc	 mov	 eax, DWORD PTR _variable$[ebp]
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0008f	83 c4 04	 add	 esp, 4
$LN1@unregister:

; 1062 : 	}
; 1063 : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?unregister_file_tag_variable@@YGXPBD@Z ENDP		; unregister_file_tag_variable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?register_file_tag_variable@@YGXPBDPAH@Z
_TEXT	SEGMENT
_new_variable$ = -8					; size = 4
_next_id$ = -4						; size = 4
_variable_name$ = 8					; size = 4
_variable$ = 12						; size = 4
?register_file_tag_variable@@YGXPBDPAH@Z PROC		; register_file_tag_variable, COMDAT

; 945  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 946  : 
; 947  : 	int
; 948  : 		next_id;
; 949  : 
; 950  : 	file_tag_variable_type
; 951  : 		*new_variable;
; 952  : 
; 953  : 	//
; 954  : 	// check if variable already registered
; 955  : 	//
; 956  : 
; 957  : 	next_id = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next_id$[ebp], 0

; 958  : 
; 959  : 	new_variable = file_tag_variables;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  00015	89 45 f8	 mov	 DWORD PTR _new_variable$[ebp], eax
$LN2@register_f:

; 960  : 
; 961  : 	while (new_variable)

  00018	83 7d f8 00	 cmp	 DWORD PTR _new_variable$[ebp], 0
  0001c	74 30		 je	 SHORT $LN3@register_f

; 962  : 	{
; 963  : 
; 964  : 		if (strcmpi (new_variable->name, variable_name) == 0)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  00021	50		 push	 eax
  00022	8b 4d f8	 mov	 ecx, DWORD PTR _new_variable$[ebp]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	52		 push	 edx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0002e	83 c4 08	 add	 esp, 8
  00031	85 c0		 test	 eax, eax
  00033	75 05		 jne	 SHORT $LN4@register_f

; 965  : 		{
; 966  : 
; 967  : 			return;

  00035	e9 8d 00 00 00	 jmp	 $LN1@register_f
$LN4@register_f:

; 968  : 		}
; 969  : 
; 970  : 		next_id ++;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _next_id$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _next_id$[ebp], eax

; 971  : 
; 972  : 		new_variable = new_variable->next;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _new_variable$[ebp]
  00046	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00049	89 4d f8	 mov	 DWORD PTR _new_variable$[ebp], ecx

; 973  : 	}

  0004c	eb ca		 jmp	 SHORT $LN2@register_f
$LN3@register_f:

; 974  : 
; 975  : 	//
; 976  : 	// Register new variable
; 977  : 	//
; 978  : 
; 979  : 	new_variable = (file_tag_variable_type *) malloc (sizeof (file_tag_variable_type));

  0004e	6a 10		 push	 16			; 00000010H
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00056	83 c4 04	 add	 esp, 4
  00059	89 45 f8	 mov	 DWORD PTR _new_variable$[ebp], eax

; 980  : 
; 981  : 	memset (new_variable, 0, sizeof (file_tag_variable_type));

  0005c	6a 10		 push	 16			; 00000010H
  0005e	6a 00		 push	 0
  00060	8b 45 f8	 mov	 eax, DWORD PTR _new_variable$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _memset
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH

; 982  : 
; 983  : 	new_variable->name = (char *) malloc ((strlen (variable_name) + 1));

  0006c	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _strlen
  00075	83 c4 04	 add	 esp, 4
  00078	83 c0 01	 add	 eax, 1
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00082	83 c4 04	 add	 esp, 4
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _new_variable$[ebp]
  00088	89 01		 mov	 DWORD PTR [ecx], eax

; 984  : 
; 985  : 	sprintf (new_variable->name, "%s", variable_name);

  0008a	8b 45 08	 mov	 eax, DWORD PTR _variable_name$[ebp]
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _new_variable$[ebp]
  00096	8b 11		 mov	 edx, DWORD PTR [ecx]
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 _sprintf
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 
; 987  : 	new_variable->variable = variable;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _new_variable$[ebp]
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _variable$[ebp]
  000a7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 988  : 
; 989  : 	new_variable->id = next_id;

  000aa	8b 45 f8	 mov	 eax, DWORD PTR _new_variable$[ebp]
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _next_id$[ebp]
  000b0	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 990  : 
; 991  : 	new_variable->next = file_tag_variables;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _new_variable$[ebp]
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  000bc	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 992  : 
; 993  : 	#if DEBUG_MODULE
; 994  : 
; 995  : 	debug_log ("FILE_TAG: registered new variable %s to value %d", variable_name, *variable);
; 996  : 
; 997  : 	#endif
; 998  : 
; 999  : 	file_tag_variables = new_variable;

  000bf	8b 45 f8	 mov	 eax, DWORD PTR _new_variable$[ebp]
  000c2	a3 00 00 00 00	 mov	 DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A, eax ; file_tag_variables
$LN1@register_f:

; 1000 : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
?register_file_tag_variable@@YGXPBDPAH@Z ENDP		; register_file_tag_variable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z
_TEXT	SEGMENT
_buffer$ = -268						; size = 256
_c_count$ = -12						; size = 4
_tag$ = -8						; size = 4
_c$ = -4						; size = 4
_file_ptr$ = 8						; size = 4
_enum_strings$ = 12					; size = 4
_last_enum$ = 16					; size = 4
?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z PROC	; get_next_file_enum, COMDAT

; 865  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 866  : 
; 867  : 	int
; 868  : 		c,
; 869  : 		tag,
; 870  : 		c_count;
; 871  : 
; 872  : 	char
; 873  : 		buffer [256];
; 874  : 
; 875  : 	tag = 0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _tag$[ebp], 0

; 876  : 
; 877  : 	memset (buffer, 0, 256);

  00013	68 00 01 00 00	 push	 256			; 00000100H
  00018	6a 00		 push	 0
  0001a	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 878  : 
; 879  :    //
; 880  :    // Read in line
; 881  :    //
; 882  : 
; 883  : 	c = fgetc (file_ptr);

  00029	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax

; 884  : 
; 885  : 	c_count = 0;

  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _c_count$[ebp], 0
$LN2@get_next_f:

; 886  : 
; 887  :    while ((c != EOF) && (c != '\n') && (c != ' ') && (c != ',') && (c != '	') && (c != ' ') && (c != ':'))

  00040	83 7d fc ff	 cmp	 DWORD PTR _c$[ebp], -1
  00044	74 62		 je	 SHORT $LN3@get_next_f
  00046	83 7d fc 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  0004a	74 5c		 je	 SHORT $LN3@get_next_f
  0004c	83 7d fc 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  00050	74 56		 je	 SHORT $LN3@get_next_f
  00052	83 7d fc 2c	 cmp	 DWORD PTR _c$[ebp], 44	; 0000002cH
  00056	74 50		 je	 SHORT $LN3@get_next_f
  00058	83 7d fc 09	 cmp	 DWORD PTR _c$[ebp], 9
  0005c	74 4a		 je	 SHORT $LN3@get_next_f
  0005e	83 7d fc 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  00062	74 44		 je	 SHORT $LN3@get_next_f
  00064	83 7d fc 3a	 cmp	 DWORD PTR _c$[ebp], 58	; 0000003aH
  00068	74 3e		 je	 SHORT $LN3@get_next_f

; 888  :    {
; 889  : 
; 890  : 		buffer [c_count] = c;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _c_count$[ebp]
  0006d	8a 4d fc	 mov	 cl, BYTE PTR _c$[ebp]
  00070	88 8c 05 f4 fe
	ff ff		 mov	 BYTE PTR _buffer$[ebp+eax], cl

; 891  : 
; 892  : 		c_count ++;

  00077	8b 45 f4	 mov	 eax, DWORD PTR _c_count$[ebp]
  0007a	83 c0 01	 add	 eax, 1
  0007d	89 45 f4	 mov	 DWORD PTR _c_count$[ebp], eax

; 893  : 
; 894  : 		if (c_count > sizeof (buffer))

  00080	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _c_count$[ebp], 256 ; 00000100H
  00087	76 0d		 jbe	 SHORT $LN6@get_next_f

; 895  : 		{
; 896  : 
; 897  : 			debug_fatal ("FILE_TAG: get next enum too long");

  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NBIBODM@FILE_TAG?3?5get?5next?5enum?5too?5lon@
  0008e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00093	83 c4 04	 add	 esp, 4
$LN6@get_next_f:

; 898  : 		}
; 899  : 
; 900  :       c = fgetc (file_ptr);

  00096	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00099	50		 push	 eax
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax

; 901  :    }

  000a6	eb 98		 jmp	 SHORT $LN2@get_next_f
$LN3@get_next_f:

; 902  : 
; 903  : 	if (c_count > 0)

  000a8	83 7d f4 00	 cmp	 DWORD PTR _c_count$[ebp], 0
  000ac	7e 35		 jle	 SHORT $LN7@get_next_f
$LN4@get_next_f:

; 904  : 	{
; 905  : 	
; 906  :   		while (tag <= last_enum)

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _tag$[ebp]
  000b1	3b 45 10	 cmp	 eax, DWORD PTR _last_enum$[ebp]
  000b4	7f 2b		 jg	 SHORT $LN5@get_next_f

; 907  : 		{
; 908  : 
; 909  :          if (strcmpi (buffer, enum_strings [tag]) == 0)

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _tag$[ebp]
  000b9	8b 4d 0c	 mov	 ecx, DWORD PTR _enum_strings$[ebp]
  000bc	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000bf	52		 push	 edx
  000c0	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  000cd	83 c4 08	 add	 esp, 8
  000d0	85 c0		 test	 eax, eax
  000d2	75 02		 jne	 SHORT $LN9@get_next_f

; 910  :          {
; 911  : 
; 912  :             break;

  000d4	eb 0b		 jmp	 SHORT $LN5@get_next_f
$LN9@get_next_f:

; 913  :          }
; 914  : 
; 915  : 			tag ++;

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _tag$[ebp]
  000d9	83 c0 01	 add	 eax, 1
  000dc	89 45 f8	 mov	 DWORD PTR _tag$[ebp], eax

; 916  : 		}

  000df	eb cd		 jmp	 SHORT $LN4@get_next_f
$LN5@get_next_f:

; 917  : 	}
; 918  : 	else

  000e1	eb 06		 jmp	 SHORT $LN8@get_next_f
$LN7@get_next_f:

; 919  : 	{
; 920  : 
; 921  : 		tag = last_enum;

  000e3	8b 45 10	 mov	 eax, DWORD PTR _last_enum$[ebp]
  000e6	89 45 f8	 mov	 DWORD PTR _tag$[ebp], eax
$LN8@get_next_f:

; 922  : 	}
; 923  : 
; 924  : 
; 925  : 	if (tag > last_enum)

  000e9	8b 45 f8	 mov	 eax, DWORD PTR _tag$[ebp]
  000ec	3b 45 10	 cmp	 eax, DWORD PTR _last_enum$[ebp]
  000ef	7e 14		 jle	 SHORT $LN10@get_next_f

; 926  : 	{
; 927  : 
; 928  : 		debug_fatal ("FILE_TAG: unrecognised tag %s", buffer);

  000f1	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000f7	50		 push	 eax
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CMOENNCH@FILE_TAG?3?5unrecognised?5tag?5?$CFs@
  000fd	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00102	83 c4 08	 add	 esp, 8
$LN10@get_next_f:

; 929  : 	}
; 930  : 
; 931  : 	#if DEBUG_MODULE
; 932  : 
; 933  : 	debug_log ("FILE_TAG: get_next_file_enum = %s (index = %d)", enum_strings [tag], tag);
; 934  : 
; 935  : 	#endif
; 936  : 
; 937  : 	return tag;

  00105	8b 45 f8	 mov	 eax, DWORD PTR _tag$[ebp]

; 938  : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 0c 00	 ret	 12			; 0000000cH
?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z ENDP	; get_next_file_enum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_next_file_word@@YGHPAU_iobuf@@PADH@Z
_TEXT	SEGMENT
_count$ = -8						; size = 4
_character$ = -4					; size = 4
_file_ptr$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
?get_next_file_word@@YGHPAU_iobuf@@PADH@Z PROC		; get_next_file_word, COMDAT

; 829  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 830  : 
; 831  : 	int
; 832  : 		character,
; 833  : 		count;
; 834  : 
; 835  : 	memset (buffer, 0, size);

  00009	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memset
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 836  : 
; 837  : 	count = 0;

  0001b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@get_next_f:

; 838  : 
; 839  : 	while ((character = fgetc (file_ptr)) != EOF)

  00022	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 fc	 mov	 DWORD PTR _character$[ebp], eax
  00032	83 7d fc ff	 cmp	 DWORD PTR _character$[ebp], -1
  00036	74 30		 je	 SHORT $LN3@get_next_f

; 840  : 	{
; 841  : 
; 842  : 		if ((character == ' ') || (character == ',') || (character == '\n') || (character == '	'))

  00038	83 7d fc 20	 cmp	 DWORD PTR _character$[ebp], 32 ; 00000020H
  0003c	74 12		 je	 SHORT $LN5@get_next_f
  0003e	83 7d fc 2c	 cmp	 DWORD PTR _character$[ebp], 44 ; 0000002cH
  00042	74 0c		 je	 SHORT $LN5@get_next_f
  00044	83 7d fc 0a	 cmp	 DWORD PTR _character$[ebp], 10 ; 0000000aH
  00048	74 06		 je	 SHORT $LN5@get_next_f
  0004a	83 7d fc 09	 cmp	 DWORD PTR _character$[ebp], 9
  0004e	75 02		 jne	 SHORT $LN4@get_next_f
$LN5@get_next_f:

; 843  : 		{
; 844  : 
; 845  : 			break;

  00050	eb 16		 jmp	 SHORT $LN3@get_next_f
$LN4@get_next_f:

; 846  : 		}
; 847  : 
; 848  : 		buffer [count++] = character;

  00052	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  00055	03 45 f8	 add	 eax, DWORD PTR _count$[ebp]
  00058	8a 4d fc	 mov	 cl, BYTE PTR _character$[ebp]
  0005b	88 08		 mov	 BYTE PTR [eax], cl
  0005d	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00060	83 c2 01	 add	 edx, 1
  00063	89 55 f8	 mov	 DWORD PTR _count$[ebp], edx

; 849  : 	}

  00066	eb ba		 jmp	 SHORT $LN2@get_next_f
$LN3@get_next_f:

; 850  : 
; 851  : 	#if DEBUG_MODULE
; 852  : 
; 853  : 	debug_log ("FILE_TAG: get_next_file_string = %s, strlen (%d)", buffer, strlen (buffer));
; 854  : 
; 855  : 	#endif
; 856  : 
; 857  : 	return TRUE;

  00068	b8 01 00 00 00	 mov	 eax, 1

; 858  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 0c 00	 ret	 12			; 0000000cH
?get_next_file_word@@YGHPAU_iobuf@@PADH@Z ENDP		; get_next_file_word
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_next_file_string@@YGHPAU_iobuf@@PADH@Z
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_file_ptr$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
?get_next_file_string@@YGHPAU_iobuf@@PADH@Z PROC	; get_next_file_string, COMDAT

; 795  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 796  : 
; 797  : 	char
; 798  : 		*ptr;
; 799  : 
; 800  : 	memset (buffer, 0, size);

  00009	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memset
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  : 
; 802  : 	if (fgets (buffer, size - 1, file_ptr))

  0001b	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00022	83 e9 01	 sub	 ecx, 1
  00025	51		 push	 ecx
  00026	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	85 c0		 test	 eax, eax
  00035	74 20		 je	 SHORT $LN2@get_next_f

; 803  : 	{
; 804  : 	
; 805  : 		ptr = strchr (buffer, '\n');

  00037	6a 0a		 push	 10			; 0000000aH
  00039	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?strchr@@YAPADQADH@Z	; strchr
  00042	83 c4 08	 add	 esp, 8
  00045	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 806  : 	
; 807  : 		*ptr = '\0';

  00048	8b 45 fc	 mov	 eax, DWORD PTR _ptr$[ebp]
  0004b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 808  : 
; 809  : 		#if DEBUG_MODULE
; 810  : 
; 811  : 		debug_log ("FILE_TAG: get_next_file_string = %s, strlen (%d)", buffer, strlen (buffer));
; 812  : 
; 813  : 		#endif
; 814  : 	
; 815  : 		return TRUE;

  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	eb 04		 jmp	 SHORT $LN1@get_next_f

; 816  : 	}
; 817  : 	else

  00055	eb 02		 jmp	 SHORT $LN1@get_next_f
$LN2@get_next_f:

; 818  : 	{
; 819  : 
; 820  : 		return FALSE;

  00057	33 c0		 xor	 eax, eax
$LN1@get_next_f:

; 821  : 	}
; 822  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 0c 00	 ret	 12			; 0000000cH
?get_next_file_string@@YGHPAU_iobuf@@PADH@Z ENDP	; get_next_file_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_next_file_paragraph@@YGHPAU_iobuf@@PADH@Z
_TEXT	SEGMENT
_count$ = -12						; size = 4
_character$ = -8					; size = 4
_last_c$ = -4						; size = 4
_file_ptr$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
?get_next_file_paragraph@@YGHPAU_iobuf@@PADH@Z PROC	; get_next_file_paragraph, COMDAT

; 743  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 744  : 
; 745  : 	int
; 746  : 		last_c,
; 747  : 		character,
; 748  : 		count;
; 749  : 
; 750  : 	memset (buffer, 0, size);

  00009	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memset
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 751  : 
; 752  : 	count = 0;

  0001b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 753  : 
; 754  : 	size -= 1;

  00022	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00025	83 e8 01	 sub	 eax, 1
  00028	89 45 10	 mov	 DWORD PTR _size$[ebp], eax

; 755  : 
; 756  : 	last_c = 0;

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _last_c$[ebp], 0
$LN2@get_next_f:

; 757  : 
; 758  : 	while (((character = fgetc (file_ptr)) != EOF) && (count < size))

  00032	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 f8	 mov	 DWORD PTR _character$[ebp], eax
  00042	83 7d f8 ff	 cmp	 DWORD PTR _character$[ebp], -1
  00046	74 49		 je	 SHORT $LN3@get_next_f
  00048	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0004b	3b 45 10	 cmp	 eax, DWORD PTR _size$[ebp]
  0004e	7d 41		 jge	 SHORT $LN3@get_next_f

; 759  : 	{
; 760  : 
; 761  : 		if ((character == ':') && (last_c != '\\'))

  00050	83 7d f8 3a	 cmp	 DWORD PTR _character$[ebp], 58 ; 0000003aH
  00054	75 19		 jne	 SHORT $LN4@get_next_f
  00056	83 7d fc 5c	 cmp	 DWORD PTR _last_c$[ebp], 92 ; 0000005cH
  0005a	74 13		 je	 SHORT $LN4@get_next_f

; 762  : 		{
; 763  : 
; 764  : 			// rewind file point to before the :
; 765  : 			fseek (file_ptr, -1, SEEK_CUR);

  0005c	6a 01		 push	 1
  0005e	6a ff		 push	 -1
  00060	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 766  : 
; 767  : 			break;

  0006d	eb 22		 jmp	 SHORT $LN3@get_next_f
$LN4@get_next_f:

; 768  : 		}
; 769  : 	
; 770  : 		last_c = character;

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _character$[ebp]
  00072	89 45 fc	 mov	 DWORD PTR _last_c$[ebp], eax

; 771  : 
; 772  : 		if (character != '\\')

  00075	83 7d f8 5c	 cmp	 DWORD PTR _character$[ebp], 92 ; 0000005cH
  00079	74 14		 je	 SHORT $LN5@get_next_f

; 773  : 		{
; 774  : 	
; 775  : 			buffer [count ++] = character;

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  0007e	03 45 f4	 add	 eax, DWORD PTR _count$[ebp]
  00081	8a 4d f8	 mov	 cl, BYTE PTR _character$[ebp]
  00084	88 08		 mov	 BYTE PTR [eax], cl
  00086	8b 55 f4	 mov	 edx, DWORD PTR _count$[ebp]
  00089	83 c2 01	 add	 edx, 1
  0008c	89 55 f4	 mov	 DWORD PTR _count$[ebp], edx
$LN5@get_next_f:

; 776  : 		}
; 777  : 	}

  0008f	eb a1		 jmp	 SHORT $LN2@get_next_f
$LN3@get_next_f:

; 778  : 
; 779  : 	#if DEBUG_MODULE
; 780  : 
; 781  : 	debug_log ("FILE_TAG: get_next_file_paragraph = %s, strlen (%d)", buffer, strlen (buffer));
; 782  : 
; 783  : 	#endif
; 784  : 
; 785  : 	buffer [count] = '\0';

  00091	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  00094	03 45 f4	 add	 eax, DWORD PTR _count$[ebp]
  00097	c6 00 00	 mov	 BYTE PTR [eax], 0

; 786  : 
; 787  : 	return TRUE;

  0009a	b8 01 00 00 00	 mov	 eax, 1

; 788  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 0c 00	 ret	 12			; 0000000cH
?get_next_file_paragraph@@YGHPAU_iobuf@@PADH@Z ENDP	; get_next_file_paragraph
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_next_file_float@@YGMPAU_iobuf@@@Z
_TEXT	SEGMENT
tv161 = -96						; size = 4
_level$ = -28						; size = 4
_sign$ = -24						; size = 4
_c$ = -20						; size = 4
_result$ = -16						; size = 8
_digit$ = -8						; size = 8
_file_ptr$ = 8						; size = 4
?get_next_file_float@@YGMPAU_iobuf@@@Z PROC		; get_next_file_float, COMDAT

; 656  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 657  : 
; 658  : 	double
; 659  : 		digit,
; 660  : 		result;
; 661  : 
; 662  : 	int
; 663  : 		c,
; 664  : 		sign = 1,

  00009	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _sign$[ebp], 1

; 665  : 		level;
; 666  : 
; 667  : 	//
; 668  : 	// skim off crap
; 669  : 	//
; 670  : 
; 671  : 	c = fgetc (file_ptr);

  00010	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
$LN2@get_next_f:

; 672  : 
; 673  : 	while ((!isdigit (c)) && (c != '-'))

  00020	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	75 18		 jne	 SHORT $LN3@get_next_f
  00031	83 7d ec 2d	 cmp	 DWORD PTR _c$[ebp], 45	; 0000002dH
  00035	74 12		 je	 SHORT $LN3@get_next_f

; 674  : 	{
; 675  : 
; 676  : 		c = fgetc (file_ptr);

  00037	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 677  : 	}

  00047	eb d7		 jmp	 SHORT $LN2@get_next_f
$LN3@get_next_f:

; 678  : 
; 679  : 	//
; 680  : 	// interger part
; 681  : 	//
; 682  : 
; 683  : 	if (c == '-')

  00049	83 7d ec 2d	 cmp	 DWORD PTR _c$[ebp], 45	; 0000002dH
  0004d	75 17		 jne	 SHORT $LN8@get_next_f

; 684  : 	{
; 685  : 
; 686  : 		sign = -1;

  0004f	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _sign$[ebp], -1

; 687  : 
; 688  : 		c = fgetc (file_ptr);

  00056	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00059	50		 push	 eax
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00060	83 c4 04	 add	 esp, 4
  00063	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
$LN8@get_next_f:

; 689  : 	}
; 690  : 
; 691  : 	result = 0.0;

  00066	0f 57 c0	 xorps	 xmm0, xmm0
  00069	f2 0f 11 45 f0	 movsd	 QWORD PTR _result$[ebp], xmm0
$LN4@get_next_f:

; 692  : 
; 693  : 	while ((c != '.') && (c != ',') && (c != '\n') && (c != ' ') && (c != '	'))

  0006e	83 7d ec 2e	 cmp	 DWORD PTR _c$[ebp], 46	; 0000002eH
  00072	74 54		 je	 SHORT $LN5@get_next_f
  00074	83 7d ec 2c	 cmp	 DWORD PTR _c$[ebp], 44	; 0000002cH
  00078	74 4e		 je	 SHORT $LN5@get_next_f
  0007a	83 7d ec 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  0007e	74 48		 je	 SHORT $LN5@get_next_f
  00080	83 7d ec 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  00084	74 42		 je	 SHORT $LN5@get_next_f
  00086	83 7d ec 09	 cmp	 DWORD PTR _c$[ebp], 9
  0008a	74 3c		 je	 SHORT $LN5@get_next_f

; 694  : 	{
; 695  : 
; 696  : 		result *= 10.0;

  0008c	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _result$[ebp]
  00091	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  00099	f2 0f 11 45 f0	 movsd	 QWORD PTR _result$[ebp], xmm0

; 697  : 
; 698  : 		result += (float) (c - '0');

  0009e	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  000a1	83 e8 30	 sub	 eax, 48			; 00000030H
  000a4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000a8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ac	f2 0f 58 45 f0	 addsd	 xmm0, QWORD PTR _result$[ebp]
  000b1	f2 0f 11 45 f0	 movsd	 QWORD PTR _result$[ebp], xmm0

; 699  : 
; 700  : 		c = fgetc (file_ptr);

  000b6	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000b9	50		 push	 eax
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 701  : 	}

  000c6	eb a6		 jmp	 SHORT $LN4@get_next_f
$LN5@get_next_f:

; 702  : 
; 703  : 	//
; 704  : 	// factional part
; 705  : 	//
; 706  : 
; 707  : 	if (c == '.')

  000c8	83 7d ec 2e	 cmp	 DWORD PTR _c$[ebp], 46	; 0000002eH
  000cc	75 77		 jne	 SHORT $LN7@get_next_f

; 708  : 	{
; 709  : 
; 710  : 		level = 1;

  000ce	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _level$[ebp], 1

; 711  : 
; 712  : 		c = fgetc (file_ptr);

  000d5	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000d8	50		 push	 eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  000df	83 c4 04	 add	 esp, 4
  000e2	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
$LN6@get_next_f:

; 713  : 	
; 714  : 		while ((c != ',') && (c != '\n') && (c != ' '))

  000e5	83 7d ec 2c	 cmp	 DWORD PTR _c$[ebp], 44	; 0000002cH
  000e9	74 5a		 je	 SHORT $LN7@get_next_f
  000eb	83 7d ec 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  000ef	74 54		 je	 SHORT $LN7@get_next_f
  000f1	83 7d ec 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  000f5	74 4e		 je	 SHORT $LN7@get_next_f

; 715  : 		{
; 716  : 
; 717  : 			level *= 10;

  000f7	6b 45 e4 0a	 imul	 eax, DWORD PTR _level$[ebp], 10
  000fb	89 45 e4	 mov	 DWORD PTR _level$[ebp], eax

; 718  : 	
; 719  : 			digit = (float) (c - '0');

  000fe	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00101	83 e8 30	 sub	 eax, 48			; 00000030H
  00104	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00108	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0010c	f2 0f 11 45 f8	 movsd	 QWORD PTR _digit$[ebp], xmm0

; 720  : 
; 721  : 			digit /= level;

  00111	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _level$[ebp]
  00116	f2 0f 10 4d f8	 movsd	 xmm1, QWORD PTR _digit$[ebp]
  0011b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0011f	f2 0f 11 4d f8	 movsd	 QWORD PTR _digit$[ebp], xmm1

; 722  : 
; 723  : 			result += digit;

  00124	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _result$[ebp]
  00129	f2 0f 58 45 f8	 addsd	 xmm0, QWORD PTR _digit$[ebp]
  0012e	f2 0f 11 45 f0	 movsd	 QWORD PTR _result$[ebp], xmm0

; 724  : 	
; 725  : 			c = fgetc (file_ptr);

  00133	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00136	50		 push	 eax
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0013d	83 c4 04	 add	 esp, 4
  00140	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 726  : 		}

  00143	eb a0		 jmp	 SHORT $LN6@get_next_f
$LN7@get_next_f:

; 727  : 	}
; 728  : 
; 729  : 	#if DEBUG_MODULE
; 730  : 
; 731  : 	debug_log ("FILE_TAG: get_next_file_float = %f", (result * sign));
; 732  : 
; 733  : 	#endif
; 734  : 
; 735  : 	return (result * sign);

  00145	f2 0f 2a 45 e8	 cvtsi2sd xmm0, DWORD PTR _sign$[ebp]
  0014a	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _result$[ebp]
  0014f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00153	f3 0f 11 45 a0	 movss	 DWORD PTR tv161[ebp], xmm0
  00158	d9 45 a0	 fld	 DWORD PTR tv161[ebp]

; 736  : }

  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 04 00	 ret	 4
?get_next_file_float@@YGMPAU_iobuf@@@Z ENDP		; get_next_file_float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_next_file_int@@YGHPAU_iobuf@@@Z
_TEXT	SEGMENT
_text$ = -268						; size = 256
_number$ = -12						; size = 4
_c_count$ = -8						; size = 4
_c$ = -4						; size = 4
_file_ptr$ = 8						; size = 4
?get_next_file_int@@YGHPAU_iobuf@@@Z PROC		; get_next_file_int, COMDAT

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 609  : 
; 610  : 	int
; 611  : 		c,
; 612  : 		c_count,
; 613  : 		number;
; 614  : 
; 615  : 	char
; 616  : 		text [256];
; 617  : 
; 618  : 	memset (text, 0, sizeof (text));

  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	6a 00		 push	 0
  00013	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _memset
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  : 
; 620  : 	c_count = 0;

  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _c_count$[ebp], 0

; 621  : 
; 622  : 	c = fgetc (file_ptr);

  00029	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax
$LN2@get_next_f:

; 623  : 
; 624  : 	while ((c != '.') && (c != ',') && (c != '\n') && (c != ' ') && (c != '	'))

  00039	83 7d fc 2e	 cmp	 DWORD PTR _c$[ebp], 46	; 0000002eH
  0003d	74 56		 je	 SHORT $LN3@get_next_f
  0003f	83 7d fc 2c	 cmp	 DWORD PTR _c$[ebp], 44	; 0000002cH
  00043	74 50		 je	 SHORT $LN3@get_next_f
  00045	83 7d fc 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  00049	74 4a		 je	 SHORT $LN3@get_next_f
  0004b	83 7d fc 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  0004f	74 44		 je	 SHORT $LN3@get_next_f
  00051	83 7d fc 09	 cmp	 DWORD PTR _c$[ebp], 9
  00055	74 3e		 je	 SHORT $LN3@get_next_f

; 625  : 	{
; 626  : 
; 627  : 		text [c_count] = c;

  00057	8b 45 f8	 mov	 eax, DWORD PTR _c_count$[ebp]
  0005a	8a 4d fc	 mov	 cl, BYTE PTR _c$[ebp]
  0005d	88 8c 05 f4 fe
	ff ff		 mov	 BYTE PTR _text$[ebp+eax], cl

; 628  : 
; 629  : 		c_count ++;

  00064	8b 45 f8	 mov	 eax, DWORD PTR _c_count$[ebp]
  00067	83 c0 01	 add	 eax, 1
  0006a	89 45 f8	 mov	 DWORD PTR _c_count$[ebp], eax

; 630  : 
; 631  : 		if (c_count > sizeof (text))

  0006d	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _c_count$[ebp], 256 ; 00000100H
  00074	76 0d		 jbe	 SHORT $LN4@get_next_f

; 632  : 		{
; 633  : 
; 634  : 			debug_fatal ("FILE_TAG: get next int too long");

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DJAFFCDM@FILE_TAG?3?5get?5next?5int?5too?5long@
  0007b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00080	83 c4 04	 add	 esp, 4
$LN4@get_next_f:

; 635  : 		}
; 636  : 
; 637  : 		c = fgetc (file_ptr);

  00083	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00086	50		 push	 eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0008d	83 c4 04	 add	 esp, 4
  00090	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax

; 638  : 	}

  00093	eb a4		 jmp	 SHORT $LN2@get_next_f
$LN3@get_next_f:

; 639  : 
; 640  : 	number = atoi (text);

  00095	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  0009b	50		 push	 eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000a2	83 c4 04	 add	 esp, 4
  000a5	89 45 f4	 mov	 DWORD PTR _number$[ebp], eax

; 641  : 
; 642  : 	#if DEBUG_MODULE
; 643  : 
; 644  : 	debug_log ("FILE_TAG: get_next_file_int = %d", number);
; 645  : 
; 646  : 	#endif
; 647  : 
; 648  : 	return number;

  000a8	8b 45 f4	 mov	 eax, DWORD PTR _number$[ebp]

; 649  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?get_next_file_int@@YGHPAU_iobuf@@@Z ENDP		; get_next_file_int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?check_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z
_TEXT	SEGMENT
_current_tag$ = -276					; size = 4
_line$ = -272						; size = 260
_c$ = -12						; size = 4
_last_c$ = -8						; size = 4
_c_count$ = -4						; size = 4
_file_ptr$ = 8						; size = 4
_application_enums$ = 12				; size = 4
_last_application_enum$ = 16				; size = 4
?check_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z PROC	; check_next_file_tag, COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 482  : 
; 483  :    int
; 484  : 		c_count,
; 485  :       last_c = 0,

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _last_c$[ebp], 0

; 486  :       c;
; 487  : 
; 488  :    char
; 489  :       line [260];
; 490  : 
; 491  :    int
; 492  :       current_tag = last_application_enum;

  00013	8b 45 10	 mov	 eax, DWORD PTR _last_application_enum$[ebp]
  00016	89 85 ec fe ff
	ff		 mov	 DWORD PTR _current_tag$[ebp], eax

; 493  : 
; 494  :    memset (line, 0, 260);

  0001c	68 04 01 00 00	 push	 260			; 00000104H
  00021	6a 00		 push	 0
  00023	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _memset
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@check_next:

; 495  : 
; 496  :    //
; 497  :    // Search for next :
; 498  :    //
; 499  : 
; 500  :    while ((c = fgetc (file_ptr)) != EOF)

  00032	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax
  00042	83 7d f4 ff	 cmp	 DWORD PTR _c$[ebp], -1
  00046	74 63		 je	 SHORT $LN3@check_next

; 501  :    {
; 502  : 
; 503  : 		//
; 504  : 		// skip lines starting with comments '//'
; 505  : 		//
; 506  : 
; 507  :       if ((c == '/') && (last_c == '/'))

  00048	83 7d f4 2f	 cmp	 DWORD PTR _c$[ebp], 47	; 0000002fH
  0004c	75 37		 jne	 SHORT $LN10@check_next
  0004e	83 7d f8 2f	 cmp	 DWORD PTR _last_c$[ebp], 47 ; 0000002fH
  00052	75 31		 jne	 SHORT $LN10@check_next

; 508  :       {
; 509  : 
; 510  :          fgets (line, 256, file_ptr);

  00054	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00057	50		 push	 eax
  00058	68 00 01 00 00	 push	 256			; 00000100H
  0005d	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _line$[ebp]
  00063	51		 push	 ecx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 511  : 
; 512  : 			memset (line, 0, 260);

  0006d	68 04 01 00 00	 push	 260			; 00000104H
  00072	6a 00		 push	 0
  00074	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _memset
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	eb 1e		 jmp	 SHORT $LN11@check_next
$LN10@check_next:

; 513  :       }
; 514  :       else if ((c == ':') && (last_c != '\\'))

  00085	83 7d f4 3a	 cmp	 DWORD PTR _c$[ebp], 58	; 0000003aH
  00089	75 18		 jne	 SHORT $LN11@check_next
  0008b	83 7d f8 5c	 cmp	 DWORD PTR _last_c$[ebp], 92 ; 0000005cH
  0008f	74 12		 je	 SHORT $LN11@check_next

; 515  :       {
; 516  : 
; 517  :          // read off :
; 518  : 
; 519  :          c = fgetc (file_ptr);

  00091	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0009b	83 c4 04	 add	 esp, 4
  0009e	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 520  : 
; 521  :          break;

  000a1	eb 08		 jmp	 SHORT $LN3@check_next
$LN11@check_next:

; 522  :       }
; 523  : 
; 524  :       last_c = c;

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _c$[ebp]
  000a6	89 45 f8	 mov	 DWORD PTR _last_c$[ebp], eax

; 525  :    }

  000a9	eb 87		 jmp	 SHORT $LN2@check_next
$LN3@check_next:

; 526  : 
; 527  :    //
; 528  :    // Read in next tag
; 529  :    //
; 530  : 
; 531  : 	c_count = 0;

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _c_count$[ebp], 0
$LN4@check_next:

; 532  : 
; 533  :    while ((c != EOF) && (c != '\n') && (c != ' ') && (c != '=') && (c != '	'))

  000b2	83 7d f4 ff	 cmp	 DWORD PTR _c$[ebp], -1
  000b6	74 56		 je	 SHORT $LN5@check_next
  000b8	83 7d f4 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  000bc	74 50		 je	 SHORT $LN5@check_next
  000be	83 7d f4 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  000c2	74 4a		 je	 SHORT $LN5@check_next
  000c4	83 7d f4 3d	 cmp	 DWORD PTR _c$[ebp], 61	; 0000003dH
  000c8	74 44		 je	 SHORT $LN5@check_next
  000ca	83 7d f4 09	 cmp	 DWORD PTR _c$[ebp], 9
  000ce	74 3e		 je	 SHORT $LN5@check_next

; 534  :    {
; 535  : 
; 536  : 		line [c_count] = c;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _c_count$[ebp]
  000d3	8a 4d f4	 mov	 cl, BYTE PTR _c$[ebp]
  000d6	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _line$[ebp+eax], cl

; 537  : 
; 538  : 		c_count ++;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _c_count$[ebp]
  000e0	83 c0 01	 add	 eax, 1
  000e3	89 45 fc	 mov	 DWORD PTR _c_count$[ebp], eax

; 539  : 
; 540  : 		if (c_count > sizeof (line))

  000e6	81 7d fc 04 01
	00 00		 cmp	 DWORD PTR _c_count$[ebp], 260 ; 00000104H
  000ed	76 0d		 jbe	 SHORT $LN13@check_next

; 541  : 		{
; 542  : 
; 543  : 			debug_fatal ("FILE_TAG: check tag too long");

  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PFLFCENI@FILE_TAG?3?5check?5tag?5too?5long@
  000f4	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000f9	83 c4 04	 add	 esp, 4
$LN13@check_next:

; 544  : 		}
; 545  : 
; 546  :       c = fgetc (file_ptr);

  000fc	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000ff	50		 push	 eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00106	83 c4 04	 add	 esp, 4
  00109	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 547  :    }

  0010c	eb a4		 jmp	 SHORT $LN4@check_next
$LN5@check_next:

; 548  : 
; 549  :    //
; 550  :    // Compare tag with enums
; 551  :    //
; 552  : 
; 553  :    if (c != EOF)

  0010e	83 7d f4 ff	 cmp	 DWORD PTR _c$[ebp], -1
  00112	0f 84 c6 00 00
	00		 je	 $LN14@check_next

; 554  :    {
; 555  : 
; 556  :       current_tag = FILE_TAG_UNKNOWN;

  00118	c7 85 ec fe ff
	ff e2 ff ff ff	 mov	 DWORD PTR _current_tag$[ebp], -30 ; ffffffe2H
$LN6@check_next:

; 557  : 
; 558  : 		// search system tags
; 559  : 
; 560  :       while (current_tag != FILE_TAG_INVALID)

  00122	83 bd ec fe ff
	ff ff		 cmp	 DWORD PTR _current_tag$[ebp], -1
  00129	74 37		 je	 SHORT $LN7@check_next

; 561  :       {
; 562  : 
; 563  :          if (strcmpi (line, system_tag_strings [-current_tag]) == 0)

  0012b	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  00131	f7 d8		 neg	 eax
  00133	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_tag_strings@@3PAPBDA[eax*4]
  0013a	51		 push	 ecx
  0013b	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _line$[ebp]
  00141	52		 push	 edx
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  00148	83 c4 08	 add	 esp, 8
  0014b	85 c0		 test	 eax, eax
  0014d	75 02		 jne	 SHORT $LN15@check_next

; 564  :          {
; 565  : 
; 566  :             break;

  0014f	eb 11		 jmp	 SHORT $LN7@check_next
$LN15@check_next:

; 567  :          }
; 568  : 
; 569  :          current_tag ++;

  00151	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  00157	83 c0 01	 add	 eax, 1
  0015a	89 85 ec fe ff
	ff		 mov	 DWORD PTR _current_tag$[ebp], eax

; 570  :       }

  00160	eb c0		 jmp	 SHORT $LN6@check_next
$LN7@check_next:

; 571  : 
; 572  : 		if ((current_tag == FILE_TAG_INVALID) && (application_enums))

  00162	83 bd ec fe ff
	ff ff		 cmp	 DWORD PTR _current_tag$[ebp], -1
  00169	75 4f		 jne	 SHORT $LN16@check_next
  0016b	83 7d 0c 00	 cmp	 DWORD PTR _application_enums$[ebp], 0
  0016f	74 49		 je	 SHORT $LN16@check_next

; 573  : 		{
; 574  : 
; 575  : 			current_tag = 0;

  00171	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _current_tag$[ebp], 0
$LN8@check_next:

; 576  : 	
; 577  : 			while (current_tag != last_application_enum)

  0017b	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  00181	3b 45 10	 cmp	 eax, DWORD PTR _last_application_enum$[ebp]
  00184	74 34		 je	 SHORT $LN16@check_next

; 578  : 			{
; 579  : 	
; 580  : 				if (strcmpi (line, application_enums [current_tag]) == 0)

  00186	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  0018c	8b 4d 0c	 mov	 ecx, DWORD PTR _application_enums$[ebp]
  0018f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00192	52		 push	 edx
  00193	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  00199	50		 push	 eax
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  001a0	83 c4 08	 add	 esp, 8
  001a3	85 c0		 test	 eax, eax
  001a5	75 02		 jne	 SHORT $LN17@check_next

; 581  : 				{
; 582  : 	
; 583  : 					break;

  001a7	eb 11		 jmp	 SHORT $LN16@check_next
$LN17@check_next:

; 584  : 				}
; 585  : 	
; 586  : 				current_tag ++;

  001a9	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  001af	83 c0 01	 add	 eax, 1
  001b2	89 85 ec fe ff
	ff		 mov	 DWORD PTR _current_tag$[ebp], eax

; 587  : 			}

  001b8	eb c1		 jmp	 SHORT $LN8@check_next
$LN16@check_next:

; 588  : 		}
; 589  : 
; 590  :       fseek (file_ptr, -((int)strlen (line) + 3), SEEK_CUR);

  001ba	6a 01		 push	 1
  001bc	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _strlen
  001c8	83 c4 04	 add	 esp, 4
  001cb	83 c0 03	 add	 eax, 3
  001ce	f7 d8		 neg	 eax
  001d0	50		 push	 eax
  001d1	8b 4d 08	 mov	 ecx, DWORD PTR _file_ptr$[ebp]
  001d4	51		 push	 ecx
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  001db	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@check_next:

; 591  :    }
; 592  : 
; 593  : 	#if DEBUG_MODULE
; 594  : 
; 595  : 	//ASSERT ((current_tag > FILE_TAG_INVALID) && (current_tag < FILE_TAG_UNKNOWN));
; 596  : 	debug_log ("FILE_TAG: check_next_file_tag = %s", tag_strings [current_tag]);
; 597  : 
; 598  : 	#endif
; 599  : 
; 600  :    return current_tag;

  001de	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]

; 601  : }

  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	5b		 pop	 ebx
  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c2 0c 00	 ret	 12			; 0000000cH
?check_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z ENDP	; check_next_file_tag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z
_TEXT	SEGMENT
_current_tag$ = -276					; size = 4
_line$ = -272						; size = 260
_c$ = -12						; size = 4
_last_c$ = -8						; size = 4
_c_count$ = -4						; size = 4
_file_ptr$ = 8						; size = 4
_application_enums$ = 12				; size = 4
_last_application_enum$ = 16				; size = 4
?get_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z PROC		; get_next_file_tag, COMDAT

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 342  : 
; 343  :    int
; 344  : 		c_count,
; 345  :       last_c,
; 346  :       c;
; 347  : 
; 348  :    char
; 349  :       line [260];
; 350  : 
; 351  :    int
; 352  :       current_tag = last_application_enum;

  0000c	8b 45 10	 mov	 eax, DWORD PTR _last_application_enum$[ebp]
  0000f	89 85 ec fe ff
	ff		 mov	 DWORD PTR _current_tag$[ebp], eax

; 353  : 
; 354  :    memset (line, 0, 260);

  00015	68 04 01 00 00	 push	 260			; 00000104H
  0001a	6a 00		 push	 0
  0001c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _memset
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 355  : 
; 356  :    //
; 357  :    // Search for next :
; 358  :    //
; 359  : 
; 360  : 	last_c = 0;

  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _last_c$[ebp], 0
$LN2@get_next_f:

; 361  : 
; 362  :    while ((c = fgetc (file_ptr)) != EOF)

  00032	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax
  00042	83 7d f4 ff	 cmp	 DWORD PTR _c$[ebp], -1
  00046	74 63		 je	 SHORT $LN3@get_next_f

; 363  :    {
; 364  : 
; 365  : 		//
; 366  : 		// skip lines starting with comments '//'
; 367  : 		//
; 368  : 
; 369  :       if ((c == '/') && (last_c == '/'))

  00048	83 7d f4 2f	 cmp	 DWORD PTR _c$[ebp], 47	; 0000002fH
  0004c	75 37		 jne	 SHORT $LN10@get_next_f
  0004e	83 7d f8 2f	 cmp	 DWORD PTR _last_c$[ebp], 47 ; 0000002fH
  00052	75 31		 jne	 SHORT $LN10@get_next_f

; 370  :       {
; 371  : 
; 372  :          fgets (line, 256, file_ptr);

  00054	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00057	50		 push	 eax
  00058	68 00 01 00 00	 push	 256			; 00000100H
  0005d	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _line$[ebp]
  00063	51		 push	 ecx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 373  : 
; 374  : 			memset (line, 0, 260);

  0006d	68 04 01 00 00	 push	 260			; 00000104H
  00072	6a 00		 push	 0
  00074	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _memset
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	eb 1e		 jmp	 SHORT $LN11@get_next_f
$LN10@get_next_f:

; 375  :       }
; 376  :       else if ((c == ':') && (last_c != '\\'))

  00085	83 7d f4 3a	 cmp	 DWORD PTR _c$[ebp], 58	; 0000003aH
  00089	75 18		 jne	 SHORT $LN11@get_next_f
  0008b	83 7d f8 5c	 cmp	 DWORD PTR _last_c$[ebp], 92 ; 0000005cH
  0008f	74 12		 je	 SHORT $LN11@get_next_f

; 377  :       {
; 378  : 
; 379  :          // read off :
; 380  : 
; 381  :          c = fgetc (file_ptr);

  00091	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0009b	83 c4 04	 add	 esp, 4
  0009e	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 382  : 
; 383  :          break;

  000a1	eb 08		 jmp	 SHORT $LN3@get_next_f
$LN11@get_next_f:

; 384  :       }
; 385  : 
; 386  :       last_c = c;

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _c$[ebp]
  000a6	89 45 f8	 mov	 DWORD PTR _last_c$[ebp], eax

; 387  :    }

  000a9	eb 87		 jmp	 SHORT $LN2@get_next_f
$LN3@get_next_f:

; 388  : 
; 389  :    //
; 390  :    // Read in next tag
; 391  :    //
; 392  : 
; 393  : 	c_count = 0;

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _c_count$[ebp], 0
$LN4@get_next_f:

; 394  : 
; 395  :    while ((c != EOF) && (c != '\n') && (c != ' ') && (c != '=') && (c != '	'))

  000b2	83 7d f4 ff	 cmp	 DWORD PTR _c$[ebp], -1
  000b6	74 5d		 je	 SHORT $LN5@get_next_f
  000b8	83 7d f4 0a	 cmp	 DWORD PTR _c$[ebp], 10	; 0000000aH
  000bc	74 57		 je	 SHORT $LN5@get_next_f
  000be	83 7d f4 20	 cmp	 DWORD PTR _c$[ebp], 32	; 00000020H
  000c2	74 51		 je	 SHORT $LN5@get_next_f
  000c4	83 7d f4 3d	 cmp	 DWORD PTR _c$[ebp], 61	; 0000003dH
  000c8	74 4b		 je	 SHORT $LN5@get_next_f
  000ca	83 7d f4 09	 cmp	 DWORD PTR _c$[ebp], 9
  000ce	74 45		 je	 SHORT $LN5@get_next_f

; 396  :    {
; 397  : 
; 398  : 		line [c_count] = c;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _c_count$[ebp]
  000d3	8a 4d f4	 mov	 cl, BYTE PTR _c$[ebp]
  000d6	88 8c 05 f0 fe
	ff ff		 mov	 BYTE PTR _line$[ebp+eax], cl

; 399  : 
; 400  : 		c_count ++;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _c_count$[ebp]
  000e0	83 c0 01	 add	 eax, 1
  000e3	89 45 fc	 mov	 DWORD PTR _c_count$[ebp], eax

; 401  : 
; 402  : 		if (c_count > sizeof (line))

  000e6	81 7d fc 04 01
	00 00		 cmp	 DWORD PTR _c_count$[ebp], 260 ; 00000104H
  000ed	76 14		 jbe	 SHORT $LN13@get_next_f

; 403  : 		{
; 404  : 
; 405  : 			debug_fatal ("FILE_TAG: tag too long %s", line);

  000ef	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  000f5	50		 push	 eax
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FEMOLBP@FILE_TAG?3?5tag?5too?5long?5?$CFs@
  000fb	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00100	83 c4 08	 add	 esp, 8
$LN13@get_next_f:

; 406  : 		}
; 407  : 
; 408  :       c = fgetc (file_ptr);

  00103	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00106	50		 push	 eax
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0010d	83 c4 04	 add	 esp, 4
  00110	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 409  :    }

  00113	eb 9d		 jmp	 SHORT $LN4@get_next_f
$LN5@get_next_f:

; 410  : 
; 411  :    //
; 412  :    // Compare tag with enums
; 413  :    //
; 414  : 
; 415  : 	#if DEBUG_MODULE
; 416  : 
; 417  : 	debug_log ("FILE_TAG: read in %s", line);
; 418  : 
; 419  : 	#endif
; 420  : 
; 421  :    if (c != EOF)

  00115	83 7d f4 ff	 cmp	 DWORD PTR _c$[ebp], -1
  00119	0f 84 a4 00 00
	00		 je	 $LN14@get_next_f

; 422  :    {
; 423  : 
; 424  :       current_tag = FILE_TAG_UNKNOWN;

  0011f	c7 85 ec fe ff
	ff e2 ff ff ff	 mov	 DWORD PTR _current_tag$[ebp], -30 ; ffffffe2H
$LN6@get_next_f:

; 425  : 
; 426  : 		// search system tags
; 427  : 
; 428  :       while (current_tag != FILE_TAG_INVALID)

  00129	83 bd ec fe ff
	ff ff		 cmp	 DWORD PTR _current_tag$[ebp], -1
  00130	74 37		 je	 SHORT $LN7@get_next_f

; 429  :       {
; 430  : 
; 431  :          if (strcmpi (line, system_tag_strings [-current_tag]) == 0)

  00132	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  00138	f7 d8		 neg	 eax
  0013a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_tag_strings@@3PAPBDA[eax*4]
  00141	51		 push	 ecx
  00142	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _line$[ebp]
  00148	52		 push	 edx
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0014f	83 c4 08	 add	 esp, 8
  00152	85 c0		 test	 eax, eax
  00154	75 02		 jne	 SHORT $LN16@get_next_f

; 432  :          {
; 433  : 
; 434  :             break;

  00156	eb 11		 jmp	 SHORT $LN7@get_next_f
$LN16@get_next_f:

; 435  :          }
; 436  : 
; 437  :          current_tag ++;

  00158	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  0015e	83 c0 01	 add	 eax, 1
  00161	89 85 ec fe ff
	ff		 mov	 DWORD PTR _current_tag$[ebp], eax

; 438  :       }

  00167	eb c0		 jmp	 SHORT $LN6@get_next_f
$LN7@get_next_f:

; 439  : 
; 440  : 		// search application tags
; 441  : 
; 442  : 		if ((current_tag == FILE_TAG_INVALID) && (application_enums))

  00169	83 bd ec fe ff
	ff ff		 cmp	 DWORD PTR _current_tag$[ebp], -1
  00170	75 4f		 jne	 SHORT $LN17@get_next_f
  00172	83 7d 0c 00	 cmp	 DWORD PTR _application_enums$[ebp], 0
  00176	74 49		 je	 SHORT $LN17@get_next_f

; 443  : 		{
; 444  : 
; 445  : 			current_tag = 0; 

  00178	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _current_tag$[ebp], 0
$LN8@get_next_f:

; 446  : 	
; 447  : 			while (current_tag != last_application_enum)

  00182	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  00188	3b 45 10	 cmp	 eax, DWORD PTR _last_application_enum$[ebp]
  0018b	74 34		 je	 SHORT $LN17@get_next_f

; 448  : 			{
; 449  : 	
; 450  : 				if (strcmpi (line, application_enums [current_tag]) == 0)

  0018d	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  00193	8b 4d 0c	 mov	 ecx, DWORD PTR _application_enums$[ebp]
  00196	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00199	52		 push	 edx
  0019a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  001a0	50		 push	 eax
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  001a7	83 c4 08	 add	 esp, 8
  001aa	85 c0		 test	 eax, eax
  001ac	75 02		 jne	 SHORT $LN18@get_next_f

; 451  : 				{
; 452  : 	
; 453  : 					break;

  001ae	eb 11		 jmp	 SHORT $LN17@get_next_f
$LN18@get_next_f:

; 454  : 				}
; 455  : 	
; 456  : 				current_tag ++;

  001b0	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]
  001b6	83 c0 01	 add	 eax, 1
  001b9	89 85 ec fe ff
	ff		 mov	 DWORD PTR _current_tag$[ebp], eax

; 457  : 			}

  001bf	eb c1		 jmp	 SHORT $LN8@get_next_f
$LN17@get_next_f:

; 458  : 		}
; 459  :    }
; 460  : 	else

  001c1	eb 0a		 jmp	 SHORT $LN15@get_next_f
$LN14@get_next_f:

; 461  : 	{
; 462  : 
; 463  : 		current_tag = FILE_TAG_END;

  001c3	c7 85 ec fe ff
	ff f6 ff ff ff	 mov	 DWORD PTR _current_tag$[ebp], -10 ; fffffff6H
$LN15@get_next_f:

; 464  : 	}
; 465  : 
; 466  : 	#if DEBUG_MODULE
; 467  : 
; 468  : 	//ASSERT ((current_tag > FILE_TAG_INVALID) && (current_tag < FILE_TAG_UNKNOWN));
; 469  : 	debug_log ("FILE_TAG: get_next_file_tag = %s", tag_strings [current_tag]);
; 470  : 
; 471  : 	#endif
; 472  : 
; 473  :    return current_tag;

  001cd	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _current_tag$[ebp]

; 474  : }

  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5b		 pop	 ebx
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c2 0c 00	 ret	 12			; 0000000cH
?get_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z ENDP		; get_next_file_tag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?get_file_tag@@YGHPBDQAPBDH@Z
_TEXT	SEGMENT
_current_tag$ = -4					; size = 4
_line$ = 8						; size = 4
_application_enums$ = 12				; size = 4
_last_application_enum$ = 16				; size = 4
?get_file_tag@@YGHPBDQAPBDH@Z PROC			; get_file_tag, COMDAT

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 284  : 
; 285  :    int
; 286  :       current_tag = last_application_enum;

  00009	8b 45 10	 mov	 eax, DWORD PTR _last_application_enum$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _current_tag$[ebp], eax

; 287  : 
; 288  :    if (*line == ':')

  0000f	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00012	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00015	83 f9 3a	 cmp	 ecx, 58			; 0000003aH
  00018	0f 85 82 00 00
	00		 jne	 $LN6@get_file_t

; 289  :    {
; 290  : 
; 291  :       line ++;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 08	 mov	 DWORD PTR _line$[ebp], eax

; 292  : 
; 293  :       current_tag = FILE_TAG_UNKNOWN;

  00027	c7 45 fc e2 ff
	ff ff		 mov	 DWORD PTR _current_tag$[ebp], -30 ; ffffffe2H
$LN2@get_file_t:

; 294  : 
; 295  :       while (current_tag != FILE_TAG_INVALID)

  0002e	83 7d fc ff	 cmp	 DWORD PTR _current_tag$[ebp], -1
  00032	74 29		 je	 SHORT $LN3@get_file_t

; 296  :       {
; 297  : 
; 298  :          if (strcmpi (line, system_tag_strings [current_tag]) == 0)

  00034	8b 45 fc	 mov	 eax, DWORD PTR _current_tag$[ebp]
  00037	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_tag_strings@@3PAPBDA[eax*4]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00042	52		 push	 edx
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  00049	83 c4 08	 add	 esp, 8
  0004c	85 c0		 test	 eax, eax
  0004e	75 02		 jne	 SHORT $LN7@get_file_t

; 299  :          {
; 300  : 
; 301  :             break;

  00050	eb 0b		 jmp	 SHORT $LN3@get_file_t
$LN7@get_file_t:

; 302  :          }
; 303  : 
; 304  :          current_tag ++;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _current_tag$[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 fc	 mov	 DWORD PTR _current_tag$[ebp], eax

; 305  :       }

  0005b	eb d1		 jmp	 SHORT $LN2@get_file_t
$LN3@get_file_t:

; 306  : 
; 307  : 		if ((current_tag == FILE_TAG_INVALID) && (application_enums))

  0005d	83 7d fc ff	 cmp	 DWORD PTR _current_tag$[ebp], -1
  00061	75 3d		 jne	 SHORT $LN6@get_file_t
  00063	83 7d 0c 00	 cmp	 DWORD PTR _application_enums$[ebp], 0
  00067	74 37		 je	 SHORT $LN6@get_file_t

; 308  : 		{
; 309  : 
; 310  : 			current_tag = 0; 

  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _current_tag$[ebp], 0
$LN4@get_file_t:

; 311  : 	
; 312  : 			while (current_tag != last_application_enum)

  00070	8b 45 fc	 mov	 eax, DWORD PTR _current_tag$[ebp]
  00073	3b 45 10	 cmp	 eax, DWORD PTR _last_application_enum$[ebp]
  00076	74 28		 je	 SHORT $LN6@get_file_t

; 313  : 			{
; 314  : 	
; 315  : 				if (strcmpi (line, application_enums [current_tag]) == 0)

  00078	8b 45 fc	 mov	 eax, DWORD PTR _current_tag$[ebp]
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _application_enums$[ebp]
  0007e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00081	52		 push	 edx
  00082	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0008c	83 c4 08	 add	 esp, 8
  0008f	85 c0		 test	 eax, eax
  00091	75 02		 jne	 SHORT $LN9@get_file_t

; 316  : 				{
; 317  : 	
; 318  : 					break;

  00093	eb 0b		 jmp	 SHORT $LN6@get_file_t
$LN9@get_file_t:

; 319  : 				}
; 320  : 	
; 321  : 				current_tag ++;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _current_tag$[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 fc	 mov	 DWORD PTR _current_tag$[ebp], eax

; 322  : 			}

  0009e	eb d0		 jmp	 SHORT $LN4@get_file_t
$LN6@get_file_t:

; 323  : 		}
; 324  :    }
; 325  : 
; 326  : 	#if DEBUG_MODULE
; 327  : 
; 328  : 	//ASSERT ((current_tag > FILE_TAG_INVALID) && (current_tag < FILE_TAG_UNKNOWN));
; 329  : 	debug_log ("FILE_TAG: get_file_tag = %s", tag_strings [current_tag]);
; 330  : 
; 331  : 	#endif
; 332  : 
; 333  :    return current_tag;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _current_tag$[ebp]

; 334  : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH
?get_file_tag@@YGHPBDQAPBDH@Z ENDP			; get_file_tag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_comment@@YGXPAU_iobuf@@PBD@Z
_TEXT	SEGMENT
_file_ptr$ = 8						; size = 4
_string$ = 12						; size = 4
?set_file_comment@@YGXPAU_iobuf@@PBD@Z PROC		; set_file_comment, COMDAT

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 268  : 
; 269  :    //debug_assert (file_ptr);
; 270  : 
; 271  : 	fprintf (file_ptr, "\n//%s", string);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_05GOPCNELJ@?6?1?1?$CFs@
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _file_ptr$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _fprintf
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 272  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?set_file_comment@@YGXPAU_iobuf@@PBD@Z ENDP		; set_file_comment
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_new_line@@YGXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_file_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
?set_file_new_line@@YGXPAU_iobuf@@H@Z PROC		; set_file_new_line, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@set_file_n:

; 250  : 
; 251  :    //debug_assert (file_ptr);
; 252  : 
; 253  : 	while (count)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _count$[ebp], 0
  0000d	74 1c		 je	 SHORT $LN1@set_file_n

; 254  : 	{
; 255  : 
; 256  : 		fprintf (file_ptr, "\n");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00014	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _fprintf
  0001d	83 c4 08	 add	 esp, 8

; 257  : 
; 258  : 		count --;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _count$[ebp]
  00023	83 e8 01	 sub	 eax, 1
  00026	89 45 0c	 mov	 DWORD PTR _count$[ebp], eax

; 259  : 	}

  00029	eb de		 jmp	 SHORT $LN2@set_file_n
$LN1@set_file_n:

; 260  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?set_file_new_line@@YGXPAU_iobuf@@H@Z ENDP		; set_file_new_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_enum@@YGXPAU_iobuf@@QAPBDH@Z
_TEXT	SEGMENT
_file_ptr$ = 8						; size = 4
_enum_strings$ = 12					; size = 4
_enum_value$ = 16					; size = 4
?set_file_enum@@YGXPAU_iobuf@@QAPBDH@Z PROC		; set_file_enum, COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 238  : 
; 239  :    //debug_assert (file_ptr);
; 240  : 
; 241  :    fprintf (file_ptr, "%s ", enum_strings [enum_value]);

  00009	8b 45 10	 mov	 eax, DWORD PTR _enum_value$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _enum_strings$[ebp]
  0000f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00012	52		 push	 edx
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_03IKGEINEE@?$CFs?5@
  00018	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _fprintf
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 242  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?set_file_enum@@YGXPAU_iobuf@@QAPBDH@Z ENDP		; set_file_enum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_string@@YGXPAU_iobuf@@PBD@Z
_TEXT	SEGMENT
_file_ptr$ = 8						; size = 4
_string$ = 12						; size = 4
?set_file_string@@YGXPAU_iobuf@@PBD@Z PROC		; set_file_string, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 226  : 
; 227  :    //debug_assert (file_ptr);
; 228  : 
; 229  :    fprintf (file_ptr, "%s\0 ", string);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_04NMPCIDEG@?$CFs?$AA?5@
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _file_ptr$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _fprintf
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 230  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?set_file_string@@YGXPAU_iobuf@@PBD@Z ENDP		; set_file_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_float@@YGXPAU_iobuf@@M@Z
_TEXT	SEGMENT
_file_ptr$ = 8						; size = 4
_value$ = 12						; size = 4
?set_file_float@@YGXPAU_iobuf@@M@Z PROC			; set_file_float, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 214  : 
; 215  :    //debug_assert (file_ptr);
; 216  : 
; 217  :    fprintf (file_ptr, "%.02f ", value);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _value$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_06OAGNEJGA@?$CF?402f?5@
  0001b	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _fprintf
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 218  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?set_file_float@@YGXPAU_iobuf@@M@Z ENDP			; set_file_float
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_int@@YGXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_file_ptr$ = 8						; size = 4
_value$ = 12						; size = 4
?set_file_int@@YGXPAU_iobuf@@H@Z PROC			; set_file_int, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 202  : 
; 203  :    //debug_assert (file_ptr);
; 204  : 
; 205  :    fprintf (file_ptr, "%d ", value);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_03JDANDILB@?$CFd?5@
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _file_ptr$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _fprintf
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?set_file_int@@YGXPAU_iobuf@@H@Z ENDP			; set_file_int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?set_file_tag@@YGXPAU_iobuf@@QAPBDH@Z
_TEXT	SEGMENT
_file_ptr$ = 8						; size = 4
_application_enums$ = 12				; size = 4
_tag$ = 16						; size = 4
?set_file_tag@@YGXPAU_iobuf@@QAPBDH@Z PROC		; set_file_tag, COMDAT

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 181  : 
; 182  :    //debug_assert (file_ptr);
; 183  : 
; 184  : 	if (tag < 0)

  00009	83 7d 10 00	 cmp	 DWORD PTR _tag$[ebp], 0
  0000d	7d 20		 jge	 SHORT $LN2@set_file_t

; 185  : 	{
; 186  : 
; 187  : 		fprintf (file_ptr, "\n:%s ", system_tag_strings [-tag]);

  0000f	8b 45 10	 mov	 eax, DWORD PTR _tag$[ebp]
  00012	f7 d8		 neg	 eax
  00014	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_tag_strings@@3PAPBDA[eax*4]
  0001b	51		 push	 ecx
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_05FAOIHALK@?6?3?$CFs?5@
  00021	8b 55 08	 mov	 edx, DWORD PTR _file_ptr$[ebp]
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 _fprintf
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 188  : 	}
; 189  : 	else

  0002d	eb 1b		 jmp	 SHORT $LN1@set_file_t
$LN2@set_file_t:

; 190  : 	{
; 191  : 
; 192  : 		fprintf (file_ptr, "\n:%s ", application_enums [tag]);

  0002f	8b 45 10	 mov	 eax, DWORD PTR _tag$[ebp]
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _application_enums$[ebp]
  00035	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00038	52		 push	 edx
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_05FAOIHALK@?6?3?$CFs?5@
  0003e	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _fprintf
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@set_file_t:

; 193  : 	}
; 194  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
?set_file_tag@@YGXPAU_iobuf@@QAPBDH@Z ENDP		; set_file_tag
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?deinitialise_file_tag_system@@YGXXZ
_TEXT	SEGMENT
?deinitialise_file_tag_system@@YGXXZ PROC		; deinitialise_file_tag_system, COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 167  : 
; 168  : 	initialise_file_tag_system ();

  00009	e8 00 00 00 00	 call	 ?initialise_file_tag_system@@YGXXZ ; initialise_file_tag_system

; 169  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?deinitialise_file_tag_system@@YGXXZ ENDP		; deinitialise_file_tag_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\misc\file_tag.c
;	COMDAT ?initialise_file_tag_system@@YGXXZ
_TEXT	SEGMENT
_destroy_file_tag_variable$ = -4			; size = 4
?initialise_file_tag_system@@YGXXZ PROC			; initialise_file_tag_system, COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@initialise:

; 134  : 
; 135  : 	file_tag_variable_type
; 136  : 		*destroy_file_tag_variable;
; 137  : 
; 138  : 	//tag_strings = application_tag_array;
; 139  : 
; 140  : 	//last_enum = application_last_enum - FILE_TAG_UNKNOWN; // FILE_TAG_APPLICATION_FIRST_TAG
; 141  : 
; 142  : 	while (file_tag_variables)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A, 0 ; file_tag_variables
  00010	74 3c		 je	 SHORT $LN3@initialise

; 143  : 	{
; 144  : 
; 145  : 		destroy_file_tag_variable = file_tag_variables;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  00017	89 45 fc	 mov	 DWORD PTR _destroy_file_tag_variable$[ebp], eax

; 146  : 
; 147  : 		file_tag_variables = file_tag_variables->next;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A ; file_tag_variables
  0001f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00022	89 0d 00 00 00
	00		 mov	 DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A, ecx ; file_tag_variables

; 148  : 
; 149  : 		if (destroy_file_tag_variable->name)

  00028	8b 45 fc	 mov	 eax, DWORD PTR _destroy_file_tag_variable$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	74 0f		 je	 SHORT $LN4@initialise

; 150  : 		{
; 151  : 
; 152  : 			free (destroy_file_tag_variable->name);

  00030	8b 45 fc	 mov	 eax, DWORD PTR _destroy_file_tag_variable$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003c	83 c4 04	 add	 esp, 4
$LN4@initialise:

; 153  : 		}
; 154  : 
; 155  : 		free (destroy_file_tag_variable);

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _destroy_file_tag_variable$[ebp]
  00042	50		 push	 eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00049	83 c4 04	 add	 esp, 4

; 156  : 	}

  0004c	eb bb		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 157  : 
; 158  : 	file_tag_variables = NULL;

  0004e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?file_tag_variables@@3PAUFILE_TAG_VARIABLE_TYPE@@A, 0 ; file_tag_variables

; 159  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?initialise_file_tag_system@@YGXXZ ENDP			; initialise_file_tag_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strchr@@YAPADQADH@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADQADH@Z PROC				; strchr, COMDAT

; 505  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 506  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _strchr
  00016	83 c4 08	 add	 esp, 8

; 507  :     }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?strchr@@YAPADQADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
