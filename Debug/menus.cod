; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\ui_menu\menus.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?initialise_ui_menus@@YGXXZ			; initialise_ui_menus
PUBLIC	?preprocess_translation_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z ; preprocess_translation_object_size
PUBLIC	?process_ingame_text_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z ; process_ingame_text_object_size
PUBLIC	?set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z ; set_ui_frontend_list_object_highlightable
PUBLIC	?set_text_option_backdrop_object@@YGXPAUUI_OBJECT@@0@Z ; set_text_option_backdrop_object
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$max@N@std@@YGABNABN0@Z			; std::max<double>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z@4JA ; `set_ui_frontend_list_object_highlightable'::`1'::__LINE__Var
PUBLIC	??_C@_0DM@KACMIBJF@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_03GJLPFLNF@obj@				; `string'
PUBLIC	??_C@_0BO@FFEFLDEB@MENUS?4C?3?5parent?5has?50?5x?5size?$CB@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d3851ec
PUBLIC	__real@3d6978d5
PUBLIC	__real@3ddd2f1b
PUBLIC	__real@3e2d0e56
PUBLIC	__real@3e989375
PUBLIC	__real@3ee66666
PUBLIC	__real@3ef74bc7
PUBLIC	__real@3fadf3b640000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff8000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?ui_get_string_length@@YGMPBD@Z:PROC		; ui_get_string_length
EXTRN	?set_ui_font_type@@YGXW4FONT_TYPES@@@Z:PROC	; set_ui_font_type
EXTRN	?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ:PROC	; get_ui_font_type
EXTRN	?initialise_dedicated_server_screen@@YGXXZ:PROC	; initialise_dedicated_server_screen
EXTRN	?initialise_title_screen@@YGXXZ:PROC		; initialise_title_screen
EXTRN	?initialise_main_screen@@YGXXZ:PROC		; initialise_main_screen
EXTRN	?initialise_select_player_screen@@YGXXZ:PROC	; initialise_select_player_screen
EXTRN	?initialise_game_type_screen@@YGXXZ:PROC	; initialise_game_type_screen
EXTRN	?initialise_exit_screen@@YGXXZ:PROC		; initialise_exit_screen
EXTRN	?initialise_session_screen@@YGXXZ:PROC		; initialise_session_screen
EXTRN	?initialise_gunships_screen@@YGXXZ:PROC		; initialise_gunships_screen
EXTRN	?initialise_combat_zone_screen@@YGXXZ:PROC	; initialise_combat_zone_screen
EXTRN	?initialise_loading_screen@@YGXXZ:PROC		; initialise_loading_screen
EXTRN	?initialise_ingame_screen@@YGXXZ:PROC		; initialise_ingame_screen
EXTRN	?initialise_campaign_screen@@YGXXZ:PROC		; initialise_campaign_screen
EXTRN	?initialise_free_flight_screen@@YGXXZ:PROC	; initialise_free_flight_screen
EXTRN	?initialise_options_screen@@YGXXZ:PROC		; initialise_options_screen
EXTRN	?initialise_credits_screen@@YGXXZ:PROC		; initialise_credits_screen
EXTRN	?initialise_modcredits_screen@@YGXXZ:PROC	; initialise_modcredits_screen
EXTRN	?fn_set_ui_object_x@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_x
EXTRN	?fn_set_ui_object_y@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_y
EXTRN	?fn_set_ui_object_x_end@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_x_end
EXTRN	?fn_get_ui_object_x_end@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_end
EXTRN	?fn_get_ui_object_y_end@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y_end
EXTRN	?fn_set_ui_object_x_start@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_x_start
EXTRN	?fn_get_ui_object_x_start@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_start
EXTRN	?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_size
EXTRN	?fn_set_ui_object_x_size_end@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_x_size_end
EXTRN	?fn_get_ui_object_x_size_end@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_size_end
EXTRN	?fn_set_ui_object_x_size_start@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_x_size_start
EXTRN	?fn_get_ui_object_x_size_start@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x_size_start
EXTRN	?fn_set_ui_object_virtual_x_size@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_virtual_x_size
EXTRN	?fn_get_ui_object_virtual_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_virtual_x_size
EXTRN	?fn_set_ui_object_virtual_y_size@@3PAP6GXPAUUI_OBJECT@@M@ZA:BYTE ; fn_set_ui_object_virtual_y_size
EXTRN	?fn_get_ui_object_virtual_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_virtual_y_size
EXTRN	?fn_set_ui_object_highlightable@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_highlightable
EXTRN	?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA:BYTE ; fn_get_ui_object_parent
EXTRN	?fn_set_ui_object_highlighted_notify_on@@3PAP6GXPAUUI_OBJECT@@W4NOTIFY_TYPES@@@ZA:BYTE ; fn_set_ui_object_highlighted_notify_on
EXTRN	?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_text
EXTRN	?fn_get_ui_object_text_justify@@3PAP6G?AW4TEXT_JUSTIFY_TYPES@@PAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_text_justify
EXTRN	?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_font_type
EXTRN	?fn_set_ui_object_highlighted_font_colour@@3PAP6GXPAUUI_OBJECT@@DDDD@ZA:BYTE ; fn_set_ui_object_highlighted_font_colour
EXTRN	?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA:BYTE ; fn_set_ui_object_texture_graphic
EXTRN	?fn_get_ui_object_texture_graphic@@3PAP6GPAUTEXTURE_GRAPHIC@@PAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_texture_graphic
EXTRN	?ui_list_text_hilite_colour@@3UREAL_COLOUR@@A:DWORD ; ui_list_text_hilite_colour
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?options_box_small@@3PAUTEXTURE_GRAPHIC@@A:DWORD ; options_box_small
EXTRN	?options_box_medium@@3PAUTEXTURE_GRAPHIC@@A:DWORD ; options_box_medium
EXTRN	?options_box_large@@3PAUTEXTURE_GRAPHIC@@A:DWORD ; options_box_large
EXTRN	?options_box_extra_large@@3PAUTEXTURE_GRAPHIC@@A:DWORD ; options_box_extra_large
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fadf3b640000000
CONST	SEGMENT
__real@3fadf3b640000000 DQ 03fadf3b640000000r	; 0.0585
CONST	ENDS
;	COMDAT __real@3ef74bc7
CONST	SEGMENT
__real@3ef74bc7 DD 03ef74bc7r			; 0.483
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3e989375
CONST	SEGMENT
__real@3e989375 DD 03e989375r			; 0.298
CONST	ENDS
;	COMDAT __real@3e2d0e56
CONST	SEGMENT
__real@3e2d0e56 DD 03e2d0e56r			; 0.169
CONST	ENDS
;	COMDAT __real@3ddd2f1b
CONST	SEGMENT
__real@3ddd2f1b DD 03ddd2f1br			; 0.108
CONST	ENDS
;	COMDAT __real@3d6978d5
CONST	SEGMENT
__real@3d6978d5 DD 03d6978d5r			; 0.057
CONST	ENDS
;	COMDAT __real@3d3851ec
CONST	SEGMENT
__real@3d3851ec DD 03d3851ecr			; 0.045
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FFEFLDEB@MENUS?4C?3?5parent?5has?50?5x?5size?$CB@
CONST	SEGMENT
??_C@_0BO@FFEFLDEB@MENUS?4C?3?5parent?5has?50?5x?5size?$CB@ DB 'MENUS.C: '
	DB	'parent has 0 x size!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJLPFLNF@obj@
CONST	SEGMENT
??_C@_03GJLPFLNF@obj@ DB 'obj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KACMIBJF@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0DM@KACMIBJF@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\ui_menu\menus.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z@4JA DD 079H ; `set_ui_frontend_list_object_highlightable'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@N@std@@YGABNABN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@N@std@@YGABNABN0@Z PROC				; std::max<double>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00013	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00017	76 65		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00019	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00023	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00027	77 02		 ja	 SHORT $LN9@max
  00029	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	6a 00		 push	 0
  00037	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	83 f8 01	 cmp	 eax, 1
  0004f	75 01		 jne	 SHORT $LN12@max
  00051	cc		 int	 3
$LN12@max:
  00052	6a 00		 push	 0
  00054	68 0e 15 00 00	 push	 5390			; 0000150eH
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	33 c0		 xor	 eax, eax
  00073	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00075	33 c0		 xor	 eax, eax
  00077	75 a0		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00079	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
??$max@N@std@@YGABNABN0@Z ENDP				; std::max<double>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\menus.c
;	COMDAT ?set_text_option_backdrop_object@@YGXPAUUI_OBJECT@@0@Z
_TEXT	SEGMENT
tv293 = -124						; size = 8
tv277 = -124						; size = 8
tv317 = -116						; size = 8
tv315 = -116						; size = 8
tv285 = -108						; size = 8
tv269 = -108						; size = 8
tv141 = -104						; size = 4
_text_length$ = -36					; size = 4
_parent_size$ = -32					; size = 4
_factor$ = -28						; size = 4
_y2$ = -24						; size = 4
_x2$ = -20						; size = 4
_y1$ = -16						; size = 4
_x1$ = -12						; size = 4
_old_font$ = -8						; size = 4
_new_font$ = -4						; size = 4
_bdrop_obj$ = 8						; size = 4
_check_obj$ = 12					; size = 4
?set_text_option_backdrop_object@@YGXPAUUI_OBJECT@@0@Z PROC ; set_text_option_backdrop_object, COMDAT

; 561  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 562  : 	font_types
; 563  : 		new_font,
; 564  : 		old_font;
; 565  : 
; 566  : 	float
; 567  : 		x1,
; 568  : 		y1,
; 569  : 		x2,
; 570  : 		y2,
; 571  : 		factor,
; 572  : 		parent_size,
; 573  : 		text_length;
; 574  : 
; 575  : 	// get correct position & size
; 576  : 	parent_size = get_ui_object_x_size (get_ui_object_parent (bdrop_obj));

  00009	8b 45 08	 mov	 eax, DWORD PTR _bdrop_obj$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _bdrop_obj$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00019	ff d0		 call	 eax
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _bdrop_obj$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 08	 mov	 edx, DWORD PTR _bdrop_obj$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[eax*4]
  0002c	ff d1		 call	 ecx
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00037	ff d0		 call	 eax
  00039	d9 5d e0	 fstp	 DWORD PTR _parent_size$[ebp]

; 577  : 	
; 578  : 	old_font = get_ui_font_type ();

  0003c	e8 00 00 00 00	 call	 ?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ ; get_ui_font_type
  00041	89 45 f8	 mov	 DWORD PTR _old_font$[ebp], eax

; 579  : 
; 580  : 	new_font = get_ui_object_font_type (check_obj);

  00044	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  00047	50		 push	 eax
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  0004b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  00054	ff d0		 call	 eax
  00056	89 45 fc	 mov	 DWORD PTR _new_font$[ebp], eax

; 581  : 
; 582  : 	set_ui_font_type (new_font);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _new_font$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 583  : 
; 584  : 	text_length = ui_get_string_length (get_ui_object_text (check_obj));

  00062	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  00065	50		 push	 eax
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  00069	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006b	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  00072	ff d0		 call	 eax
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  0007a	d9 5d dc	 fstp	 DWORD PTR _text_length$[ebp]

; 585  : 
; 586  : 	set_ui_font_type (old_font);

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _old_font$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 587  : 
; 588  : 	factor = ((int) UI_FONT_THICK_ARIAL_22) /  ((int) get_ui_object_font_type (check_obj));

  00086	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  0008d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  00096	ff d0		 call	 eax
  00098	8b c8		 mov	 ecx, eax
  0009a	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  0009f	99		 cdq
  000a0	f7 f9		 idiv	 ecx
  000a2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000a6	f3 0f 11 45 e4	 movss	 DWORD PTR _factor$[ebp], xmm0

; 589  : 
; 590  : 	x2 = TEXT_OPTION_BDROP_WIDTH * factor;

  000ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef74bc7
  000b3	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _factor$[ebp]
  000b8	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 591  : 
; 592  : 	// ensure x2 > text length
; 593  : 	if (parent_size)

  000bd	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _parent_size$[ebp]
  000c2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000c9	9f		 lahf
  000ca	f6 c4 44	 test	 ah, 68			; 00000044H
  000cd	7b 11		 jnp	 SHORT $LN4@set_text_o

; 594  : 	{
; 595  : 		text_length /= parent_size;

  000cf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _text_length$[ebp]
  000d4	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _parent_size$[ebp]
  000d9	f3 0f 11 45 dc	 movss	 DWORD PTR _text_length$[ebp], xmm0

; 596  : 	}
; 597  : 	else

  000de	eb 0d		 jmp	 SHORT $LN5@set_text_o
$LN4@set_text_o:

; 598  : 	{
; 599  : 		debug_fatal ("MENUS.C: parent has 0 x size!");

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FFEFLDEB@MENUS?4C?3?5parent?5has?50?5x?5size?$CB@
  000e5	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000ea	83 c4 04	 add	 esp, 4
$LN5@set_text_o:

; 600  : 	}
; 601  : 
; 602  : 	if (x2 < text_length)

  000ed	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _text_length$[ebp]
  000f2	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _x2$[ebp]
  000f6	76 16		 jbe	 SHORT $LN6@set_text_o

; 603  : 	{
; 604  : 		x2 = text_length * 1.5;

  000f8	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _text_length$[ebp]
  000fd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00105	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00109	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0
$LN6@set_text_o:

; 605  : 	}
; 606  : 	
; 607  : 	switch (new_font)

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _new_font$[ebp]
  00111	89 45 98	 mov	 DWORD PTR tv141[ebp], eax
  00114	8b 4d 98	 mov	 ecx, DWORD PTR tv141[ebp]
  00117	83 e9 05	 sub	 ecx, 5
  0011a	89 4d 98	 mov	 DWORD PTR tv141[ebp], ecx
  0011d	83 7d 98 06	 cmp	 DWORD PTR tv141[ebp], 6
  00121	77 37		 ja	 SHORT $LN10@set_text_o
  00123	8b 55 98	 mov	 edx, DWORD PTR tv141[ebp]
  00126	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN12@set_text_o[edx*4]
$LN7@set_text_o:

; 608  : 	{
; 609  : 		case UI_FONT_ARIAL_18:
; 610  : 		case UI_FONT_THICK_ARIAL_18:
; 611  : 		case UI_FONT_ITALIC_ARIAL_18:
; 612  : 		case UI_FONT_THICK_ITALIC_ARIAL_18:
; 613  : 		{
; 614  : 			y2 = 0.040;

  0012d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00135	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 615  : 
; 616  : 			break;

  0013a	eb 2b		 jmp	 SHORT $LN2@set_text_o
$LN8@set_text_o:

; 617  : 		}
; 618  : 		case UI_FONT_STRETCH_ITALIC_ARIAL_18:
; 619  : 		{
; 620  : 			y2 = 0.045;

  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d3851ec
  00144	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 621  : 
; 622  : 			break;

  00149	eb 1c		 jmp	 SHORT $LN2@set_text_o
$LN9@set_text_o:

; 623  : 		}
; 624  : 		case UI_FONT_ARIAL_22:
; 625  : 		case UI_FONT_THICK_ARIAL_22:
; 626  : 		{
; 627  : 			y2 = TEXT_OPTION_BDROP_HEIGHT;

  0014b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d6978d5
  00153	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 628  : 
; 629  : 			break;

  00158	eb 0d		 jmp	 SHORT $LN2@set_text_o
$LN10@set_text_o:

; 630  : 		}
; 631  : 		default:
; 632  : 		{
; 633  : 			y2 = TEXT_OPTION_BDROP_HEIGHT;

  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d6978d5
  00162	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0
$LN2@set_text_o:

; 634  : 		}
; 635  : 	}
; 636  : 
; 637  : 	x1 = (get_ui_object_x_end (check_obj) + get_ui_object_virtual_x_size (check_obj) * 0.5) - (x2 * 0.5);

  00167	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  0016e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00170	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_end@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00177	ff d0		 call	 eax
  00179	dd 5d 94	 fstp	 QWORD PTR tv269[ebp]
  0017c	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv269[ebp]
  00181	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  00184	51		 push	 ecx
  00185	8b 55 0c	 mov	 edx, DWORD PTR _check_obj$[ebp]
  00188	8b 02		 mov	 eax, DWORD PTR [edx]
  0018a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_virtual_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  00191	f2 0f 11 45 8c	 movsd	 QWORD PTR tv315[ebp], xmm0
  00196	ff d1		 call	 ecx
  00198	dd 5d 84	 fstp	 QWORD PTR tv277[ebp]
  0019b	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv277[ebp]
  001a0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001a8	f2 0f 10 4d 8c	 movsd	 xmm1, QWORD PTR tv315[ebp]
  001ad	f2 0f 58 c8	 addsd	 xmm1, xmm0
  001b1	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x2$[ebp]
  001b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001be	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001c2	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001c6	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 638  : 
; 639  : 	y1 = (get_ui_object_y_end (check_obj) + get_ui_object_virtual_y_size (check_obj) * 0.5) - (y2 * 0.5);

  001cb	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  001ce	50		 push	 eax
  001cf	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  001d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d4	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y_end@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  001db	ff d0		 call	 eax
  001dd	dd 5d 94	 fstp	 QWORD PTR tv285[ebp]
  001e0	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv285[ebp]
  001e5	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  001e8	51		 push	 ecx
  001e9	8b 55 0c	 mov	 edx, DWORD PTR _check_obj$[ebp]
  001ec	8b 02		 mov	 eax, DWORD PTR [edx]
  001ee	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_virtual_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  001f5	f2 0f 11 45 8c	 movsd	 QWORD PTR tv317[ebp], xmm0
  001fa	ff d1		 call	 ecx
  001fc	dd 5d 84	 fstp	 QWORD PTR tv293[ebp]
  001ff	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv293[ebp]
  00204	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0020c	f2 0f 10 4d 8c	 movsd	 xmm1, QWORD PTR tv317[ebp]
  00211	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00215	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _y2$[ebp]
  0021a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00222	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00226	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0022a	f3 0f 11 45 f0	 movss	 DWORD PTR _y1$[ebp], xmm0

; 640  : 
; 641  : 
; 642  : 	// set correct position & size
; 643  : 	set_ui_object_virtual_x_size (bdrop_obj, x2);

  0022f	51		 push	 ecx
  00230	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00235	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023a	8b 45 08	 mov	 eax, DWORD PTR _bdrop_obj$[ebp]
  0023d	50		 push	 eax
  0023e	8b 4d 08	 mov	 ecx, DWORD PTR _bdrop_obj$[ebp]
  00241	8b 11		 mov	 edx, DWORD PTR [ecx]
  00243	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_virtual_x_size@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  0024a	ff d0		 call	 eax

; 644  : 
; 645  : 	set_ui_object_virtual_y_size (bdrop_obj, y2);

  0024c	51		 push	 ecx
  0024d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	8b 45 08	 mov	 eax, DWORD PTR _bdrop_obj$[ebp]
  0025a	50		 push	 eax
  0025b	8b 4d 08	 mov	 ecx, DWORD PTR _bdrop_obj$[ebp]
  0025e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00260	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_virtual_y_size@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00267	ff d0		 call	 eax

; 646  : 
; 647  : 	set_ui_object_x (bdrop_obj, x1);

  00269	51		 push	 ecx
  0026a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0026f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00274	8b 45 08	 mov	 eax, DWORD PTR _bdrop_obj$[ebp]
  00277	50		 push	 eax
  00278	8b 4d 08	 mov	 ecx, DWORD PTR _bdrop_obj$[ebp]
  0027b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0027d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00284	ff d0		 call	 eax

; 648  : 
; 649  : 	set_ui_object_y (bdrop_obj, y1);

  00286	51		 push	 ecx
  00287	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0028c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00291	8b 45 08	 mov	 eax, DWORD PTR _bdrop_obj$[ebp]
  00294	50		 push	 eax
  00295	8b 4d 08	 mov	 ecx, DWORD PTR _bdrop_obj$[ebp]
  00298	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_y@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  002a1	ff d0		 call	 eax

; 650  : }

  002a3	5f		 pop	 edi
  002a4	5e		 pop	 esi
  002a5	5b		 pop	 ebx
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c2 08 00	 ret	 8
$LN12@set_text_o:
  002ac	00 00 00 00	 DD	 $LN7@set_text_o
  002b0	00 00 00 00	 DD	 $LN7@set_text_o
  002b4	00 00 00 00	 DD	 $LN7@set_text_o
  002b8	00 00 00 00	 DD	 $LN7@set_text_o
  002bc	00 00 00 00	 DD	 $LN8@set_text_o
  002c0	00 00 00 00	 DD	 $LN9@set_text_o
  002c4	00 00 00 00	 DD	 $LN9@set_text_o
?set_text_option_backdrop_object@@YGXPAUUI_OBJECT@@0@Z ENDP ; set_text_option_backdrop_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\menus.c
;	COMDAT ?set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z
_TEXT	SEGMENT
_col$ = -4						; size = 4
_obj$ = 8						; size = 4
?set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z PROC ; set_ui_frontend_list_object_highlightable, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 122  : 	rgb_colour
; 123  : 		*col;
; 124  : 
; 125  : 	ASSERT (obj);

  00009	83 7d 08 00	 cmp	 DWORD PTR _obj$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_ui_fro
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@KACMIBJF@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03GJLPFLNF@obj@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_ui_fro:

; 126  : 
; 127  : 	col = &ui_list_text_hilite_colour;

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], OFFSET ?ui_list_text_hilite_colour@@3UREAL_COLOUR@@A ; ui_list_text_hilite_colour

; 128  : 
; 129  : 	set_ui_object_highlighted_font_colour (obj, col->r, col->g, col->b, col->a);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _col$[ebp]
  00031	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _col$[ebp]
  00039	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0003c	50		 push	 eax
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _col$[ebp]
  00040	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00044	52		 push	 edx
  00045	8b 45 fc	 mov	 eax, DWORD PTR _col$[ebp]
  00048	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0004c	51		 push	 ecx
  0004d	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00050	52		 push	 edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_ui_object_highlighted_font_colour@@3PAP6GXPAUUI_OBJECT@@DDDD@ZA[ecx*4]
  0005d	ff d2		 call	 edx

; 130  : 
; 131  : 	set_ui_object_highlightable (obj, TRUE);

  0005f	6a 01		 push	 1
  00061	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_highlightable@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00071	ff d0		 call	 eax

; 132  : 
; 133  : 	set_ui_object_highlighted_notify_on (obj, NOTIFY_TYPE_CONTINUAL);

  00073	6a 06		 push	 6
  00075	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00078	50		 push	 eax
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_highlighted_notify_on@@3PAP6GXPAUUI_OBJECT@@W4NOTIFY_TYPES@@@ZA[edx*4]
  00085	ff d0		 call	 eax

; 134  : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
?set_ui_frontend_list_object_highlightable@@YGXPAUUI_OBJECT@@@Z ENDP ; set_ui_frontend_list_object_highlightable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\menus.c
;	COMDAT ?process_ingame_text_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z
_TEXT	SEGMENT
tv439 = -144						; size = 4
tv408 = -144						; size = 4
tv483 = -140						; size = 4
tv481 = -140						; size = 4
tv432 = -136						; size = 4
tv401 = -136						; size = 4
$T1 = -132						; size = 8
$T2 = -124						; size = 8
$T3 = -116						; size = 4
$T4 = -112						; size = 4
$T5 = -108						; size = 4
_current_x_size$ = -40					; size = 4
_x_origin$ = -36					; size = 4
_x2$ = -32						; size = 4
_x1$ = -28						; size = 4
_parent_size$ = -24					; size = 4
_length$ = -20						; size = 4
_old_font$ = -16					; size = 4
_current_font$ = -12					; size = 4
_justification$ = -8					; size = 4
_i$ = -4						; size = 4
_change_obj$ = 8					; size = 4
_check_obj$ = 12					; size = 4
_translations$ = 16					; size = 4
_num_trans$ = 20					; size = 4
_flag$ = 24						; size = 4
?process_ingame_text_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z PROC ; process_ingame_text_object_size, COMDAT

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 387  : 	int
; 388  : 		i,
; 389  : 		justification;
; 390  : 	font_types
; 391  : 		current_font,
; 392  : 		old_font;
; 393  : 
; 394  : 	float
; 395  : 		length,
; 396  : 		parent_size,
; 397  : 		x1,
; 398  : 		x2,
; 399  : 		x_origin,
; 400  : 		current_x_size;
; 401  : 
; 402  : 	x1 = x2 = x_origin = 0.0;

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 dc	 movss	 DWORD PTR _x_origin$[ebp], xmm0
  00014	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00019	f3 0f 11 45 e0	 movss	 DWORD PTR _x2$[ebp], xmm0
  0001e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00023	f3 0f 11 45 e4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 403  : 
; 404  : 	current_x_size = get_ui_object_x_size_end (change_obj);

  00028	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size_end@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00038	ff d0		 call	 eax
  0003a	d9 5d d8	 fstp	 DWORD PTR _current_x_size$[ebp]

; 405  : 
; 406  : 	////////////////////////////////////////////////////////////////
; 407  : 	// get new size for object(s)
; 408  : 
; 409  : 	length = 0.0;

  0003d	0f 57 c0	 xorps	 xmm0, xmm0
  00040	f3 0f 11 45 ec	 movss	 DWORD PTR _length$[ebp], xmm0

; 410  : 
; 411  : 	parent_size = get_ui_object_x_size (get_ui_object_parent (change_obj));

  00045	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00055	ff d0		 call	 eax
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[eax*4]
  00068	ff d1		 call	 ecx
  0006a	8b 10		 mov	 edx, DWORD PTR [eax]
  0006c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00073	ff d0		 call	 eax
  00075	d9 5d e8	 fstp	 DWORD PTR _parent_size$[ebp]

; 412  : 
; 413  : 	// set font so we get correct size returned from ui_get_string_length()
; 414  : 	old_font = get_ui_font_type ();

  00078	e8 00 00 00 00	 call	 ?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ ; get_ui_font_type
  0007d	89 45 f0	 mov	 DWORD PTR _old_font$[ebp], eax

; 415  : 
; 416  : 	if (check_obj != NULL)

  00080	83 7d 0c 00	 cmp	 DWORD PTR _check_obj$[ebp], 0
  00084	74 20		 je	 SHORT $LN5@process_in

; 417  : 	{
; 418  : 		current_font = get_ui_object_font_type (check_obj);

  00086	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  0008d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  00096	ff d0		 call	 eax
  00098	89 45 f4	 mov	 DWORD PTR _current_font$[ebp], eax

; 419  : 
; 420  : 		set_ui_font_type (current_font);

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _current_font$[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 421  : 	}
; 422  : 	else

  000a4	eb 1e		 jmp	 SHORT $LN6@process_in
$LN5@process_in:

; 423  : 	{
; 424  : 		current_font = get_ui_object_font_type (change_obj);

  000a6	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  000ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  000af	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  000b6	ff d0		 call	 eax
  000b8	89 45 f4	 mov	 DWORD PTR _current_font$[ebp], eax

; 425  : 
; 426  : 		set_ui_font_type (current_font);

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _current_font$[ebp]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type
$LN6@process_in:

; 427  : 	}
; 428  : 		
; 429  : 	// use translation array if set
; 430  : 	if (translations)

  000c4	83 7d 10 00	 cmp	 DWORD PTR _translations$[ebp], 0
  000c8	74 46		 je	 SHORT $LN7@process_in

; 431  : 	{
; 432  : 		for (i =0; i < num_trans; i++)

  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d1	eb 09		 jmp	 SHORT $LN4@process_in
$LN2@process_in:
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d6	83 c0 01	 add	 eax, 1
  000d9	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@process_in:
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000df	3b 45 14	 cmp	 eax, DWORD PTR _num_trans$[ebp]
  000e2	7d 2a		 jge	 SHORT $LN3@process_in

; 433  : 		{
; 434  : 			length = max (length, ui_get_string_length (translations[i]));

  000e4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e7	8b 4d 10	 mov	 ecx, DWORD PTR _translations$[ebp]
  000ea	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  000f3	d9 5d 94	 fstp	 DWORD PTR $T5[ebp]
  000f6	8d 45 94	 lea	 eax, DWORD PTR $T5[ebp]
  000f9	50		 push	 eax
  000fa	8d 4d ec	 lea	 ecx, DWORD PTR _length$[ebp]
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00103	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00107	f3 0f 11 45 ec	 movss	 DWORD PTR _length$[ebp], xmm0

; 435  : 		}

  0010c	eb c5		 jmp	 SHORT $LN2@process_in
$LN3@process_in:

; 436  : 	}
; 437  : 	// single word/phrase buttons
; 438  : 	else

  0010e	eb 3e		 jmp	 SHORT $LN10@process_in
$LN7@process_in:

; 439  : 	{
; 440  : 		if (check_obj != NULL)

  00110	83 7d 0c 00	 cmp	 DWORD PTR _check_obj$[ebp], 0
  00114	74 1d		 je	 SHORT $LN9@process_in

; 441  : 		{
; 442  : 			length = ui_get_string_length (get_ui_object_text (check_obj));

  00116	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  00119	50		 push	 eax
  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  0011d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  00126	ff d0		 call	 eax
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  0012e	d9 5d ec	 fstp	 DWORD PTR _length$[ebp]

; 443  : 		}
; 444  : 		else

  00131	eb 1b		 jmp	 SHORT $LN10@process_in
$LN9@process_in:

; 445  : 		{
; 446  : 			length = ui_get_string_length (get_ui_object_text (change_obj));

  00133	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00136	50		 push	 eax
  00137	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0013a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013c	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  00143	ff d0		 call	 eax
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  0014b	d9 5d ec	 fstp	 DWORD PTR _length$[ebp]
$LN10@process_in:

; 447  : 		}
; 448  : 	}
; 449  : 
; 450  : 	// ui get string length should take care of this itself:
; 451  : 
; 452  : //	length += 0.1 * length;
; 453  : 
; 454  : 	if (parent_size)

  0014e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _parent_size$[ebp]
  00153	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0015a	9f		 lahf
  0015b	f6 c4 44	 test	 ah, 68			; 00000044H
  0015e	7b 11		 jnp	 SHORT $LN11@process_in

; 455  : 	{
; 456  : 		length /= parent_size;

  00160	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  00165	f3 0f 5e 45 e8	 divss	 xmm0, DWORD PTR _parent_size$[ebp]
  0016a	f3 0f 11 45 ec	 movss	 DWORD PTR _length$[ebp], xmm0

; 457  : 	}
; 458  : 	else

  0016f	eb 0d		 jmp	 SHORT $LN12@process_in
$LN11@process_in:

; 459  : 	{
; 460  : 		debug_fatal ("MENUS.C: parent has 0 x size!");

  00171	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FFEFLDEB@MENUS?4C?3?5parent?5has?50?5x?5size?$CB@
  00176	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0017b	83 c4 04	 add	 esp, 4
$LN12@process_in:

; 461  : 	}
; 462  : 
; 463  : 	// reset font
; 464  : 	set_ui_font_type (old_font);	

  0017e	8b 45 f0	 mov	 eax, DWORD PTR _old_font$[ebp]
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 465  : 
; 466  : 	x2 = length;

  00187	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _length$[ebp]
  0018c	f3 0f 11 45 e0	 movss	 DWORD PTR _x2$[ebp], xmm0

; 467  : 
; 468  : 	////////////////////////////////////////////////////////////////
; 469  : 	// resize objects if x2 has recieved a value - i.e. a change is required
; 470  : 
; 471  : 	if (x2 != current_x_size)

  00191	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00196	0f 2e 45 d8	 ucomiss xmm0, DWORD PTR _current_x_size$[ebp]
  0019a	9f		 lahf
  0019b	f6 c4 44	 test	 ah, 68			; 00000044H
  0019e	0f 8b fb 02 00
	00		 jnp	 $LN32@process_in

; 472  : 	{
; 473  : 		// get x start of object, base on justification of text
; 474  : 
; 475  : 		if (check_obj == NULL)

  001a4	83 7d 0c 00	 cmp	 DWORD PTR _check_obj$[ebp], 0
  001a8	75 17		 jne	 SHORT $LN14@process_in

; 476  : 		{
; 477  : 			justification = get_ui_object_text_justify (change_obj);

  001aa	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  001b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b3	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text_justify@@3PAP6G?AW4TEXT_JUSTIFY_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  001ba	ff d0		 call	 eax
  001bc	89 45 f8	 mov	 DWORD PTR _justification$[ebp], eax

; 478  : 		}
; 479  : 		else

  001bf	eb 15		 jmp	 SHORT $LN15@process_in
$LN14@process_in:

; 480  : 		{
; 481  : 			justification = get_ui_object_text_justify (check_obj);

  001c1	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  001c4	50		 push	 eax
  001c5	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  001c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ca	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text_justify@@3PAP6G?AW4TEXT_JUSTIFY_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  001d1	ff d0		 call	 eax
  001d3	89 45 f8	 mov	 DWORD PTR _justification$[ebp], eax
$LN15@process_in:

; 482  : 		}
; 483  : 
; 484  : 		x_origin = get_ui_object_x_end (change_obj);

  001d6	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  001d9	50		 push	 eax
  001da	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  001dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  001df	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_end@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  001e6	ff d0		 call	 eax
  001e8	d9 5d dc	 fstp	 DWORD PTR _x_origin$[ebp]

; 485  : 
; 486  : 		// get new x position of object
; 487  : 
; 488  : 		if ((justification == TEXT_JUSTIFY_RIGHT_CENTRE) || (justification == TEXT_JUSTIFY_RIGHT_TOP) || (justification == TEXT_JUSTIFY_RIGHT_BOTTOM))

  001eb	83 7d f8 02	 cmp	 DWORD PTR _justification$[ebp], 2
  001ef	74 0c		 je	 SHORT $LN18@process_in
  001f1	83 7d f8 05	 cmp	 DWORD PTR _justification$[ebp], 5
  001f5	74 06		 je	 SHORT $LN18@process_in
  001f7	83 7d f8 08	 cmp	 DWORD PTR _justification$[ebp], 8
  001fb	75 34		 jne	 SHORT $LN16@process_in
$LN18@process_in:

; 489  : 		{
; 490  : 			x1 = max (0.0f, (x_origin + current_x_size - x2));

  001fd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00202	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _current_x_size$[ebp]
  00207	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _x2$[ebp]
  0020c	f3 0f 11 45 90	 movss	 DWORD PTR $T4[ebp], xmm0
  00211	0f 57 c0	 xorps	 xmm0, xmm0
  00214	f3 0f 11 45 8c	 movss	 DWORD PTR $T3[ebp], xmm0
  00219	8d 45 90	 lea	 eax, DWORD PTR $T4[ebp]
  0021c	50		 push	 eax
  0021d	8d 4d 8c	 lea	 ecx, DWORD PTR $T3[ebp]
  00220	51		 push	 ecx
  00221	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00226	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0022a	f3 0f 11 45 e4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 491  : 		}
; 492  : 		else

  0022f	eb 4c		 jmp	 SHORT $LN20@process_in
$LN16@process_in:

; 493  : 		{
; 494  : 			if (flag != RESIZE_SESSPARM_CYCLE_BUTTON)

  00231	83 7d 18 03	 cmp	 DWORD PTR _flag$[ebp], 3
  00235	74 0c		 je	 SHORT $LN19@process_in

; 495  : 			{
; 496  : 				x1 = x_origin;

  00237	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0023c	f3 0f 11 45 e4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 497  : 			}
; 498  : 			else

  00241	eb 3a		 jmp	 SHORT $LN20@process_in
$LN19@process_in:

; 499  : 			{
; 500  : 				x1 = max (0.0, (1.0 - x2));

  00243	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _x2$[ebp]
  00248	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00250	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00254	f2 0f 11 4d 84	 movsd	 QWORD PTR $T2[ebp], xmm1
  00259	0f 57 c0	 xorps	 xmm0, xmm0
  0025c	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR $T1[ebp], xmm0
  00264	8d 45 84	 lea	 eax, DWORD PTR $T2[ebp]
  00267	50		 push	 eax
  00268	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0026e	51		 push	 ecx
  0026f	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  00274	f2 0f 5a 00	 cvtsd2ss xmm0, QWORD PTR [eax]
  00278	f3 0f 11 45 e4	 movss	 DWORD PTR _x1$[ebp], xmm0
$LN20@process_in:

; 501  : 			}
; 502  : 		}
; 503  : 
; 504  : 		if (flag == RESIZE_OPTION_BOX_TITLE)

  0027d	83 7d 18 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00281	75 16		 jne	 SHORT $LN21@process_in

; 505  : 		{
; 506  : 			x1 += OPTION_TITLE_OFFSET_X * 0.5;

  00283	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00288	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fadf3b640000000
  00290	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00294	f3 0f 11 45 e4	 movss	 DWORD PTR _x1$[ebp], xmm0
$LN21@process_in:

; 507  : 		}
; 508  : 
; 509  : 		if (get_ui_object_x_size_start (change_obj) != get_ui_object_x_size_end (change_obj))

  00299	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0029c	50		 push	 eax
  0029d	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  002a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a2	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size_start@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  002a9	ff d0		 call	 eax
  002ab	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR tv401[ebp]
  002b1	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv401[ebp]
  002b9	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  002bc	51		 push	 ecx
  002bd	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  002c0	8b 02		 mov	 eax, DWORD PTR [edx]
  002c2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_x_size_end@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  002c9	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR tv481[ebp], xmm0
  002d1	ff d1		 call	 ecx
  002d3	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv408[ebp]
  002d9	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv481[ebp]
  002e1	0f 2e 85 70 ff
	ff ff		 ucomiss xmm0, DWORD PTR tv408[ebp]
  002e8	9f		 lahf
  002e9	f6 c4 44	 test	 ah, 68			; 00000044H
  002ec	7b 1f		 jnp	 SHORT $LN22@process_in

; 510  : 		{
; 511  : 			set_ui_object_x_size_end (change_obj, x2);

  002ee	51		 push	 ecx
  002ef	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  002f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f9	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  002fc	50		 push	 eax
  002fd	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00300	8b 11		 mov	 edx, DWORD PTR [ecx]
  00302	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_size_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00309	ff d0		 call	 eax

; 512  : 		}
; 513  : 		else

  0030b	eb 3a		 jmp	 SHORT $LN23@process_in
$LN22@process_in:

; 514  : 		{
; 515  : 			set_ui_object_x_size_start (change_obj, x2);

  0030d	51		 push	 ecx
  0030e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00318	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0031b	50		 push	 eax
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0031f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00321	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_size_start@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00328	ff d0		 call	 eax

; 516  : 
; 517  : 			set_ui_object_x_size_end (change_obj, x2);

  0032a	51		 push	 ecx
  0032b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00330	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00335	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00338	50		 push	 eax
  00339	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0033c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0033e	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_size_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00345	ff d0		 call	 eax
$LN23@process_in:

; 518  : 		}
; 519  : 
; 520  : 		if (get_ui_object_x_start (change_obj) != get_ui_object_x_end (change_obj))

  00347	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0034a	50		 push	 eax
  0034b	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0034e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00350	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_start@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00357	ff d0		 call	 eax
  00359	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR tv432[ebp]
  0035f	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv432[ebp]
  00367	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0036a	51		 push	 ecx
  0036b	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  0036e	8b 02		 mov	 eax, DWORD PTR [edx]
  00370	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_x_end@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  00377	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR tv483[ebp], xmm0
  0037f	ff d1		 call	 ecx
  00381	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv439[ebp]
  00387	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv483[ebp]
  0038f	0f 2e 85 70 ff
	ff ff		 ucomiss xmm0, DWORD PTR tv439[ebp]
  00396	9f		 lahf
  00397	f6 c4 44	 test	 ah, 68			; 00000044H
  0039a	7b 1f		 jnp	 SHORT $LN24@process_in

; 521  : 		{
; 522  : 			set_ui_object_x_end (change_obj, x1);

  0039c	51		 push	 ecx
  0039d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a7	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  003aa	50		 push	 eax
  003ab	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  003b0	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  003b7	ff d0		 call	 eax

; 523  : 		}
; 524  : 		else

  003b9	eb 3a		 jmp	 SHORT $LN25@process_in
$LN24@process_in:

; 525  : 		{
; 526  : 			set_ui_object_x_start (change_obj, x1);

  003bb	51		 push	 ecx
  003bc	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c6	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  003c9	50		 push	 eax
  003ca	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003cf	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_start@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  003d6	ff d0		 call	 eax

; 527  : 
; 528  : 			set_ui_object_x_end (change_obj, x1);

  003d8	51		 push	 ecx
  003d9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  003e6	50		 push	 eax
  003e7	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  003ec	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  003f3	ff d0		 call	 eax
$LN25@process_in:

; 529  : 		}
; 530  : 
; 531  : 		////////////////////////////////////////////////////////////////
; 532  : 		// change graphic
; 533  : 
; 534  : 		if (get_ui_object_texture_graphic (change_obj) != NULL)

  003f5	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  003f8	50		 push	 eax
  003f9	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  003fe	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_texture_graphic@@3PAP6GPAUTEXTURE_GRAPHIC@@PAUUI_OBJECT@@@ZA[edx*4]
  00405	ff d0		 call	 eax
  00407	85 c0		 test	 eax, eax
  00409	0f 84 90 00 00
	00		 je	 $LN32@process_in

; 535  : 		{
; 536  : 			if (x2 > OPTION_BOX_LARGE_WIDTH)

  0040f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00414	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e989375
  0041b	76 1a		 jbe	 SHORT $LN27@process_in

; 537  : 			{
; 538  : 				set_ui_object_texture_graphic (change_obj, options_box_extra_large);

  0041d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_extra_large@@3PAUTEXTURE_GRAPHIC@@A ; options_box_extra_large
  00422	50		 push	 eax
  00423	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00426	51		 push	 ecx
  00427	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  0042a	8b 02		 mov	 eax, DWORD PTR [edx]
  0042c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  00433	ff d1		 call	 ecx
  00435	eb 68		 jmp	 SHORT $LN32@process_in
$LN27@process_in:

; 539  : 			}
; 540  : 			else if (x2 > OPTION_BOX_MEDIUM_WIDTH)

  00437	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0043c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e2d0e56
  00443	76 1a		 jbe	 SHORT $LN29@process_in

; 541  : 			{
; 542  : 				set_ui_object_texture_graphic (change_obj, options_box_large);

  00445	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_large@@3PAUTEXTURE_GRAPHIC@@A ; options_box_large
  0044a	50		 push	 eax
  0044b	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0044e	51		 push	 ecx
  0044f	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  00452	8b 02		 mov	 eax, DWORD PTR [edx]
  00454	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  0045b	ff d1		 call	 ecx
  0045d	eb 40		 jmp	 SHORT $LN32@process_in
$LN29@process_in:

; 543  : 			}
; 544  : 			else if (x2 > OPTION_BOX_SMALL_WIDTH)

  0045f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00464	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3ddd2f1b
  0046b	76 1a		 jbe	 SHORT $LN31@process_in

; 545  : 			{
; 546  : 				set_ui_object_texture_graphic (change_obj, options_box_medium);

  0046d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_medium@@3PAUTEXTURE_GRAPHIC@@A ; options_box_medium
  00472	50		 push	 eax
  00473	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00476	51		 push	 ecx
  00477	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  0047a	8b 02		 mov	 eax, DWORD PTR [edx]
  0047c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  00483	ff d1		 call	 ecx

; 547  : 			}
; 548  : 			else

  00485	eb 18		 jmp	 SHORT $LN32@process_in
$LN31@process_in:

; 549  : 			{
; 550  : 				set_ui_object_texture_graphic (change_obj, options_box_small);

  00487	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_small@@3PAUTEXTURE_GRAPHIC@@A ; options_box_small
  0048c	50		 push	 eax
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00490	51		 push	 ecx
  00491	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  00494	8b 02		 mov	 eax, DWORD PTR [edx]
  00496	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  0049d	ff d1		 call	 ecx
$LN32@process_in:

; 551  : 			}
; 552  : 		}
; 553  : 	}
; 554  : }

  0049f	5f		 pop	 edi
  004a0	5e		 pop	 esi
  004a1	5b		 pop	 ebx
  004a2	8b e5		 mov	 esp, ebp
  004a4	5d		 pop	 ebp
  004a5	c2 14 00	 ret	 20			; 00000014H
?process_ingame_text_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z ENDP ; process_ingame_text_object_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\menus.c
;	COMDAT ?preprocess_translation_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z
_TEXT	SEGMENT
tv498 = -148						; size = 4
tv467 = -148						; size = 4
tv549 = -144						; size = 4
tv547 = -144						; size = 4
tv526 = -140						; size = 4
tv491 = -140						; size = 4
tv460 = -140						; size = 4
$T1 = -136						; size = 8
$T2 = -128						; size = 8
$T3 = -120						; size = 4
$T4 = -116						; size = 4
$T5 = -112						; size = 4
$T6 = -108						; size = 4
_graphic_size$7 = -40					; size = 4
_parent_size$8 = -36					; size = 4
_length$9 = -32						; size = 4
_old_font$10 = -28					; size = 4
_current_x_size$ = -24					; size = 4
_x_origin$ = -20					; size = 4
_x2$ = -16						; size = 4
_x1$ = -12						; size = 4
_justification$ = -8					; size = 4
_i$ = -4						; size = 4
_change_obj$ = 8					; size = 4
_check_obj$ = 12					; size = 4
_translations$ = 16					; size = 4
_num_trans$ = 20					; size = 4
_flag$ = 24						; size = 4
?preprocess_translation_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z PROC ; preprocess_translation_object_size, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 142  : 	int
; 143  : 		i,
; 144  : 		justification;
; 145  : 
; 146  : 	float
; 147  : 		x1,
; 148  : 		x2,
; 149  : 		x_origin,
; 150  : 		current_x_size;
; 151  : 
; 152  : 	x1 = x2 = x_origin = 0.0;

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 ec	 movss	 DWORD PTR _x_origin$[ebp], xmm0
  00014	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00019	f3 0f 11 45 f0	 movss	 DWORD PTR _x2$[ebp], xmm0
  0001e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00023	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 153  : 
; 154  : 	current_x_size = get_ui_object_x_size_end (change_obj);

  00028	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size_end@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00038	ff d0		 call	 eax
  0003a	d9 5d e8	 fstp	 DWORD PTR _current_x_size$[ebp]

; 155  : 
; 156  : 	////////////////////////////////////////////////////////////////
; 157  : 	// get new size for object(s)
; 158  : 
; 159  : 	// option box titles
; 160  : 	if (flag == RESIZE_OPTION_BOX_TITLE)

  0003d	83 7d 18 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00041	75 05		 jne	 SHORT $LN5@preprocess

; 161  : 	{
; 162  : #if 0	// Retro 17Jul2004 - FIXME
; 163  : 		if (get_global_current_language () != LANGUAGE_ENGLISH)
; 164  : 		{
; 165  : 			x2 = OPTION_BOX_EXTRA_LARGE_WIDTH;
; 166  : 		}
; 167  : #endif
; 168  : 	}
; 169  : 	else

  00043	e9 d3 01 00 00	 jmp	 $LN20@preprocess
$LN5@preprocess:

; 170  : 	{
; 171  : 		font_types
; 172  : 			old_font;
; 173  : 
; 174  : 		float
; 175  : 			length,
; 176  : 			parent_size;
; 177  : 
; 178  : 		length = 0.0;

  00048	0f 57 c0	 xorps	 xmm0, xmm0
  0004b	f3 0f 11 45 e0	 movss	 DWORD PTR _length$9[ebp], xmm0

; 179  : 
; 180  : 		parent_size = get_ui_object_x_size (get_ui_object_parent (change_obj));

  00050	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[edx*4]
  00060	ff d0		 call	 eax
  00062	50		 push	 eax
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  0006a	8b 02		 mov	 eax, DWORD PTR [edx]
  0006c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_parent@@3PAP6GPAUUI_OBJECT@@PAU1@@ZA[eax*4]
  00073	ff d1		 call	 ecx
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0007e	ff d0		 call	 eax
  00080	d9 5d dc	 fstp	 DWORD PTR _parent_size$8[ebp]

; 181  : 	
; 182  : 		// set font so we get correct size returned from ui_get_string_length()
; 183  : 		old_font = get_ui_font_type ();

  00083	e8 00 00 00 00	 call	 ?get_ui_font_type@@YG?AW4FONT_TYPES@@XZ ; get_ui_font_type
  00088	89 45 e4	 mov	 DWORD PTR _old_font$10[ebp], eax

; 184  : 	
; 185  : 		if (check_obj != NULL)

  0008b	83 7d 0c 00	 cmp	 DWORD PTR _check_obj$[ebp], 0
  0008f	74 1a		 je	 SHORT $LN7@preprocess

; 186  : 		{
; 187  : 			set_ui_font_type (get_ui_object_font_type (check_obj));

  00091	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  00098	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009a	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  000a1	ff d0		 call	 eax
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 188  : 		}
; 189  : 		else

  000a9	eb 18		 jmp	 SHORT $LN8@preprocess
$LN7@preprocess:

; 190  : 		{
; 191  : 			set_ui_font_type (get_ui_object_font_type (change_obj));

  000ab	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  000b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b4	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_font_type@@3PAP6G?AW4FONT_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  000bb	ff d0		 call	 eax
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type
$LN8@preprocess:

; 192  : 		}
; 193  : 			
; 194  : 		// option cycle buttons - uses translation array
; 195  : 		if ((flag == RESIZE_OPTION_CYCLE_BUTTON) || (flag == RESIZE_SESSPARM_CYCLE_BUTTON))

  000c3	83 7d 18 01	 cmp	 DWORD PTR _flag$[ebp], 1
  000c7	74 06		 je	 SHORT $LN11@preprocess
  000c9	83 7d 18 03	 cmp	 DWORD PTR _flag$[ebp], 3
  000cd	75 46		 jne	 SHORT $LN9@preprocess
$LN11@preprocess:

; 196  : 		{
; 197  : 			for (i =0; i < num_trans; i++)

  000cf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d6	eb 09		 jmp	 SHORT $LN4@preprocess
$LN2@preprocess:
  000d8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000db	83 c0 01	 add	 eax, 1
  000de	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@preprocess:
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e4	3b 45 14	 cmp	 eax, DWORD PTR _num_trans$[ebp]
  000e7	7d 2a		 jge	 SHORT $LN3@preprocess

; 198  : 			{
; 199  : 				length = max (length, ui_get_string_length (translations[i]));

  000e9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ec	8b 4d 10	 mov	 ecx, DWORD PTR _translations$[ebp]
  000ef	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  000f8	d9 5d 94	 fstp	 DWORD PTR $T6[ebp]
  000fb	8d 45 94	 lea	 eax, DWORD PTR $T6[ebp]
  000fe	50		 push	 eax
  000ff	8d 4d e0	 lea	 ecx, DWORD PTR _length$9[ebp]
  00102	51		 push	 ecx
  00103	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00108	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0010c	f3 0f 11 45 e0	 movss	 DWORD PTR _length$9[ebp], xmm0

; 200  : 			}

  00111	eb c5		 jmp	 SHORT $LN2@preprocess
$LN3@preprocess:

; 201  : 		}
; 202  : 
; 203  : 		// single word/phrase buttons
; 204  : 		else

  00113	eb 3e		 jmp	 SHORT $LN13@preprocess
$LN9@preprocess:

; 205  : 		{
; 206  : 			if (check_obj != NULL)

  00115	83 7d 0c 00	 cmp	 DWORD PTR _check_obj$[ebp], 0
  00119	74 1d		 je	 SHORT $LN12@preprocess

; 207  : 			{
; 208  : 				length = ui_get_string_length (get_ui_object_text (check_obj));

  0011b	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  0011e	50		 push	 eax
  0011f	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  00122	8b 11		 mov	 edx, DWORD PTR [ecx]
  00124	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  0012b	ff d0		 call	 eax
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  00133	d9 5d e0	 fstp	 DWORD PTR _length$9[ebp]

; 209  : 			}
; 210  : 			else

  00136	eb 1b		 jmp	 SHORT $LN13@preprocess
$LN12@preprocess:

; 211  : 			{
; 212  : 				length = ui_get_string_length (get_ui_object_text (change_obj));

  00138	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0013f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00141	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[edx*4]
  00148	ff d0		 call	 eax
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?ui_get_string_length@@YGMPBD@Z ; ui_get_string_length
  00150	d9 5d e0	 fstp	 DWORD PTR _length$9[ebp]
$LN13@preprocess:

; 213  : 			}
; 214  : 		}
; 215  : 
; 216  : 		length += 0.1 * length;

  00153	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _length$9[ebp]
  00158	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00160	f3 0f 5a 4d e0	 cvtss2sd xmm1, DWORD PTR _length$9[ebp]
  00165	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00169	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0016d	f3 0f 11 45 e0	 movss	 DWORD PTR _length$9[ebp], xmm0

; 217  : 
; 218  : 		// ui get string length should take care of this itself:
; 219  : 
; 220  : 		if (parent_size)

  00172	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _parent_size$8[ebp]
  00177	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0017e	9f		 lahf
  0017f	f6 c4 44	 test	 ah, 68			; 00000044H
  00182	7b 11		 jnp	 SHORT $LN14@preprocess

; 221  : 		{
; 222  : 			length /= parent_size;

  00184	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _length$9[ebp]
  00189	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _parent_size$8[ebp]
  0018e	f3 0f 11 45 e0	 movss	 DWORD PTR _length$9[ebp], xmm0

; 223  : 		}
; 224  : 		else

  00193	eb 0d		 jmp	 SHORT $LN15@preprocess
$LN14@preprocess:

; 225  : 		{
; 226  : 			debug_fatal ("MENUS.C: parent has 0 x size!");

  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FFEFLDEB@MENUS?4C?3?5parent?5has?50?5x?5size?$CB@
  0019a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0019f	83 c4 04	 add	 esp, 4
$LN15@preprocess:

; 227  : 		}
; 228  : 
; 229  : 		// reset font
; 230  : 		set_ui_font_type (old_font);	

  001a2	8b 45 e4	 mov	 eax, DWORD PTR _old_font$10[ebp]
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 231  : 
; 232  : 		// if the object to be resized is an option button, bound it to a defined size
; 233  : 		x2 = max (length, OPTION_BOX_SMALL_WIDTH);

  001ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ddd2f1b
  001b3	f3 0f 11 45 90	 movss	 DWORD PTR $T5[ebp], xmm0
  001b8	8d 45 90	 lea	 eax, DWORD PTR $T5[ebp]
  001bb	50		 push	 eax
  001bc	8d 4d e0	 lea	 ecx, DWORD PTR _length$9[ebp]
  001bf	51		 push	 ecx
  001c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001c5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001c9	f3 0f 11 45 f0	 movss	 DWORD PTR _x2$[ebp], xmm0

; 234  : 
; 235  : 		if (flag == RESIZE_OPTION_CYCLE_BUTTON)

  001ce	83 7d 18 01	 cmp	 DWORD PTR _flag$[ebp], 1
  001d2	75 47		 jne	 SHORT $LN20@preprocess

; 236  : 		{
; 237  : 			if (x2 > OPTION_BOX_LARGE_WIDTH)

  001d4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001d9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e989375
  001e0	76 0f		 jbe	 SHORT $LN17@preprocess

; 238  : 			{
; 239  : 				x2 = OPTION_BOX_EXTRA_LARGE_WIDTH;

  001e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  001ea	f3 0f 11 45 f0	 movss	 DWORD PTR _x2$[ebp], xmm0
  001ef	eb 2a		 jmp	 SHORT $LN20@preprocess
$LN17@preprocess:

; 240  : 			}
; 241  : 			else if (x2 > OPTION_BOX_MEDIUM_WIDTH)

  001f1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001f6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e2d0e56
  001fd	76 0f		 jbe	 SHORT $LN19@preprocess

; 242  : 			{
; 243  : 				x2 = OPTION_BOX_LARGE_WIDTH;

  001ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e989375
  00207	f3 0f 11 45 f0	 movss	 DWORD PTR _x2$[ebp], xmm0

; 244  : 			}
; 245  : 			else

  0020c	eb 0d		 jmp	 SHORT $LN20@preprocess
$LN19@preprocess:

; 246  : 			{
; 247  : 				x2 = OPTION_BOX_SMALL_WIDTH;

  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ddd2f1b
  00216	f3 0f 11 45 f0	 movss	 DWORD PTR _x2$[ebp], xmm0
$LN20@preprocess:

; 248  : 			}
; 249  : 		}
; 250  : 	}
; 251  : 
; 252  : 	////////////////////////////////////////////////////////////////
; 253  : 	// resize objects if x2 has recieved a value - i.e. a change is required
; 254  : 
; 255  : 	if (x2 > current_x_size)

  0021b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00220	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _current_x_size$[ebp]
  00224	0f 86 28 03 00
	00		 jbe	 $LN40@preprocess

; 256  : 	{
; 257  : 		// get x start of object, base on justification of text
; 258  : 
; 259  : 		if (check_obj == NULL)

  0022a	83 7d 0c 00	 cmp	 DWORD PTR _check_obj$[ebp], 0
  0022e	75 17		 jne	 SHORT $LN22@preprocess

; 260  : 		{
; 261  : 			justification = get_ui_object_text_justify (change_obj);

  00230	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00233	50		 push	 eax
  00234	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00237	8b 11		 mov	 edx, DWORD PTR [ecx]
  00239	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text_justify@@3PAP6G?AW4TEXT_JUSTIFY_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  00240	ff d0		 call	 eax
  00242	89 45 f8	 mov	 DWORD PTR _justification$[ebp], eax

; 262  : 		}
; 263  : 		else

  00245	eb 15		 jmp	 SHORT $LN23@preprocess
$LN22@preprocess:

; 264  : 		{
; 265  : 			justification = get_ui_object_text_justify (check_obj);

  00247	8b 45 0c	 mov	 eax, DWORD PTR _check_obj$[ebp]
  0024a	50		 push	 eax
  0024b	8b 4d 0c	 mov	 ecx, DWORD PTR _check_obj$[ebp]
  0024e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00250	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_text_justify@@3PAP6G?AW4TEXT_JUSTIFY_TYPES@@PAUUI_OBJECT@@@ZA[edx*4]
  00257	ff d0		 call	 eax
  00259	89 45 f8	 mov	 DWORD PTR _justification$[ebp], eax
$LN23@preprocess:

; 266  : 		}
; 267  : 
; 268  : 		x_origin = get_ui_object_x_end (change_obj);

  0025c	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0025f	50		 push	 eax
  00260	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00263	8b 11		 mov	 edx, DWORD PTR [ecx]
  00265	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_end@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0026c	ff d0		 call	 eax
  0026e	d9 5d ec	 fstp	 DWORD PTR _x_origin$[ebp]

; 269  : 
; 270  : 		// get new x position of object
; 271  : 
; 272  : 		if ((justification == TEXT_JUSTIFY_RIGHT_CENTRE) || (justification == TEXT_JUSTIFY_RIGHT_TOP) || (justification == TEXT_JUSTIFY_RIGHT_BOTTOM))

  00271	83 7d f8 02	 cmp	 DWORD PTR _justification$[ebp], 2
  00275	74 0c		 je	 SHORT $LN26@preprocess
  00277	83 7d f8 05	 cmp	 DWORD PTR _justification$[ebp], 5
  0027b	74 06		 je	 SHORT $LN26@preprocess
  0027d	83 7d f8 08	 cmp	 DWORD PTR _justification$[ebp], 8
  00281	75 34		 jne	 SHORT $LN24@preprocess
$LN26@preprocess:

; 273  : 		{
; 274  : 			x1 = max (0.0f, (x_origin + current_x_size - x2));

  00283	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00288	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _current_x_size$[ebp]
  0028d	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _x2$[ebp]
  00292	f3 0f 11 45 8c	 movss	 DWORD PTR $T4[ebp], xmm0
  00297	0f 57 c0	 xorps	 xmm0, xmm0
  0029a	f3 0f 11 45 88	 movss	 DWORD PTR $T3[ebp], xmm0
  0029f	8d 45 8c	 lea	 eax, DWORD PTR $T4[ebp]
  002a2	50		 push	 eax
  002a3	8d 4d 88	 lea	 ecx, DWORD PTR $T3[ebp]
  002a6	51		 push	 ecx
  002a7	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002ac	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002b0	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 275  : 		}
; 276  : //		else if ((justification == TEXT_JUSTIFY_CENTRE) || (justification == TEXT_JUSTIFY_CENTRE_TOP) || (justification == TEXT_JUSTIFY_CENTRE_BOTTOM))
; 277  : //		{
; 278  : //			x1 = max (0.0, x_origin - ((get_ui_object_virtual_x_size (change_obj) - x2) * 0.5));
; 279  : //		}
; 280  : 		else

  002b5	eb 4c		 jmp	 SHORT $LN28@preprocess
$LN24@preprocess:

; 281  : 		{
; 282  : 			if (flag != RESIZE_SESSPARM_CYCLE_BUTTON)

  002b7	83 7d 18 03	 cmp	 DWORD PTR _flag$[ebp], 3
  002bb	74 0c		 je	 SHORT $LN27@preprocess

; 283  : 			{
; 284  : 				x1 = x_origin;

  002bd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  002c2	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 285  : 			}
; 286  : 			else

  002c7	eb 3a		 jmp	 SHORT $LN28@preprocess
$LN27@preprocess:

; 287  : 			{
; 288  : 				x1 = max (0.0, (1.0 - x2));

  002c9	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _x2$[ebp]
  002ce	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002d6	f2 0f 5c c8	 subsd	 xmm1, xmm0
  002da	f2 0f 11 4d 80	 movsd	 QWORD PTR $T2[ebp], xmm1
  002df	0f 57 c0	 xorps	 xmm0, xmm0
  002e2	f2 0f 11 85 78
	ff ff ff	 movsd	 QWORD PTR $T1[ebp], xmm0
  002ea	8d 45 80	 lea	 eax, DWORD PTR $T2[ebp]
  002ed	50		 push	 eax
  002ee	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  002f4	51		 push	 ecx
  002f5	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  002fa	f2 0f 5a 00	 cvtsd2ss xmm0, QWORD PTR [eax]
  002fe	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0
$LN28@preprocess:

; 289  : 			}
; 290  : 		}
; 291  : 
; 292  : 		if (flag == RESIZE_OPTION_BOX_TITLE)

  00303	83 7d 18 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00307	75 16		 jne	 SHORT $LN29@preprocess

; 293  : 		{
; 294  : 			x1 += OPTION_TITLE_OFFSET_X * 0.5;

  00309	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0030e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fadf3b640000000
  00316	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031a	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0
$LN29@preprocess:

; 295  : 		}
; 296  : 
; 297  : 		// set size & new position - beware of animated parameters...
; 298  : 		// this is really the responsibility of the ui draw code,
; 299  : 		// which if the object parameter isn't animated should set
; 300  : 		// start & end values to be the same,
; 301  : 		// but a certain someone :) hasn't done it yet!
; 302  : 
; 303  : 		if (get_ui_object_x_size_start (change_obj) != get_ui_object_x_size_end (change_obj))

  0031f	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00322	50		 push	 eax
  00323	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00326	8b 11		 mov	 edx, DWORD PTR [ecx]
  00328	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size_start@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0032f	ff d0		 call	 eax
  00331	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR tv460[ebp]
  00337	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv460[ebp]
  0033f	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00342	51		 push	 ecx
  00343	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  00346	8b 02		 mov	 eax, DWORD PTR [edx]
  00348	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_x_size_end@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  0034f	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv547[ebp], xmm0
  00357	ff d1		 call	 ecx
  00359	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR tv467[ebp]
  0035f	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv547[ebp]
  00367	0f 2e 85 6c ff
	ff ff		 ucomiss xmm0, DWORD PTR tv467[ebp]
  0036e	9f		 lahf
  0036f	f6 c4 44	 test	 ah, 68			; 00000044H
  00372	7b 1f		 jnp	 SHORT $LN30@preprocess

; 304  : 		{
; 305  : 			set_ui_object_x_size_end (change_obj, x2);

  00374	51		 push	 ecx
  00375	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00382	50		 push	 eax
  00383	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00386	8b 11		 mov	 edx, DWORD PTR [ecx]
  00388	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_size_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  0038f	ff d0		 call	 eax

; 306  : 		}
; 307  : 		else

  00391	eb 3a		 jmp	 SHORT $LN31@preprocess
$LN30@preprocess:

; 308  : 		{
; 309  : 			set_ui_object_x_size_start (change_obj, x2);

  00393	51		 push	 ecx
  00394	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  003a1	50		 push	 eax
  003a2	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  003a7	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_size_start@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  003ae	ff d0		 call	 eax

; 310  : 
; 311  : 			set_ui_object_x_size_end (change_obj, x2);

  003b0	51		 push	 ecx
  003b1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bb	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  003be	50		 push	 eax
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003c4	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_size_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  003cb	ff d0		 call	 eax
$LN31@preprocess:

; 312  : 		}
; 313  : 
; 314  : 		if (get_ui_object_x_start (change_obj) != get_ui_object_x_end (change_obj))

  003cd	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  003d0	50		 push	 eax
  003d1	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d6	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_start@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  003dd	ff d0		 call	 eax
  003df	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR tv491[ebp]
  003e5	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv491[ebp]
  003ed	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  003f0	51		 push	 ecx
  003f1	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  003f4	8b 02		 mov	 eax, DWORD PTR [edx]
  003f6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_x_end@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  003fd	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv549[ebp], xmm0
  00405	ff d1		 call	 ecx
  00407	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR tv498[ebp]
  0040d	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv549[ebp]
  00415	0f 2e 85 6c ff
	ff ff		 ucomiss xmm0, DWORD PTR tv498[ebp]
  0041c	9f		 lahf
  0041d	f6 c4 44	 test	 ah, 68			; 00000044H
  00420	7b 1f		 jnp	 SHORT $LN32@preprocess

; 315  : 		{
; 316  : 			set_ui_object_x_end (change_obj, x1);

  00422	51		 push	 ecx
  00423	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00430	50		 push	 eax
  00431	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00434	8b 11		 mov	 edx, DWORD PTR [ecx]
  00436	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  0043d	ff d0		 call	 eax

; 317  : 		}
; 318  : 		else

  0043f	eb 3a		 jmp	 SHORT $LN33@preprocess
$LN32@preprocess:

; 319  : 		{
; 320  : 			set_ui_object_x_start (change_obj, x1);

  00441	51		 push	 ecx
  00442	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00447	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044c	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0044f	50		 push	 eax
  00450	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00453	8b 11		 mov	 edx, DWORD PTR [ecx]
  00455	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_start@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  0045c	ff d0		 call	 eax

; 321  : 
; 322  : 			set_ui_object_x_end (change_obj, x1);

  0045e	51		 push	 ecx
  0045f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00464	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00469	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0046c	50		 push	 eax
  0046d	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00470	8b 11		 mov	 edx, DWORD PTR [ecx]
  00472	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_x_end@@3PAP6GXPAUUI_OBJECT@@M@ZA[edx*4]
  00479	ff d0		 call	 eax
$LN33@preprocess:

; 323  : 		}
; 324  : 
; 325  : 
; 326  : 		if (get_ui_object_texture_graphic (change_obj) != NULL)

  0047b	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  0047e	50		 push	 eax
  0047f	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00482	8b 11		 mov	 edx, DWORD PTR [ecx]
  00484	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_texture_graphic@@3PAP6GPAUTEXTURE_GRAPHIC@@PAUUI_OBJECT@@@ZA[edx*4]
  0048b	ff d0		 call	 eax
  0048d	85 c0		 test	 eax, eax
  0048f	0f 84 bd 00 00
	00		 je	 $LN40@preprocess

; 327  : 		{
; 328  : 			float
; 329  : 				graphic_size;
; 330  : 
; 331  : 			graphic_size = get_ui_object_x_size (change_obj) / get_global_3d_visual_screen_width();

  00495	8b 45 08	 mov	 eax, DWORD PTR _change_obj$[ebp]
  00498	50		 push	 eax
  00499	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  0049c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0049e	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_x_size@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  004a5	ff d0		 call	 eax
  004a7	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR tv526[ebp]
  004ad	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv526[ebp]
  004b5	f3 0f 5e 05 c4
	01 00 00	 divss	 xmm0, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+452
  004bd	f3 0f 11 45 d8	 movss	 DWORD PTR _graphic_size$7[ebp], xmm0

; 332  : 
; 333  : 		////////////////////////////////////////////////////////////////
; 334  : 		// change graphic
; 335  : 
; 336  : 			if (graphic_size > OPTION_BOX_LARGE_WIDTH)

  004c2	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _graphic_size$7[ebp]
  004c7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e989375
  004ce	76 1a		 jbe	 SHORT $LN35@preprocess

; 337  : 			{
; 338  : 				set_ui_object_texture_graphic (change_obj, options_box_extra_large);

  004d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_extra_large@@3PAUTEXTURE_GRAPHIC@@A ; options_box_extra_large
  004d5	50		 push	 eax
  004d6	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  004d9	51		 push	 ecx
  004da	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  004dd	8b 02		 mov	 eax, DWORD PTR [edx]
  004df	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  004e6	ff d1		 call	 ecx
  004e8	eb 68		 jmp	 SHORT $LN40@preprocess
$LN35@preprocess:

; 339  : 			}
; 340  : 			else if (graphic_size > OPTION_BOX_MEDIUM_WIDTH)

  004ea	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _graphic_size$7[ebp]
  004ef	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e2d0e56
  004f6	76 1a		 jbe	 SHORT $LN37@preprocess

; 341  : 			{
; 342  : 				set_ui_object_texture_graphic (change_obj, options_box_large);

  004f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_large@@3PAUTEXTURE_GRAPHIC@@A ; options_box_large
  004fd	50		 push	 eax
  004fe	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00501	51		 push	 ecx
  00502	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  00505	8b 02		 mov	 eax, DWORD PTR [edx]
  00507	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  0050e	ff d1		 call	 ecx
  00510	eb 40		 jmp	 SHORT $LN40@preprocess
$LN37@preprocess:

; 343  : 			}
; 344  : 			else if (graphic_size > OPTION_BOX_SMALL_WIDTH)

  00512	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _graphic_size$7[ebp]
  00517	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3ddd2f1b
  0051e	76 1a		 jbe	 SHORT $LN39@preprocess

; 345  : 			{
; 346  : 				set_ui_object_texture_graphic (change_obj, options_box_medium);

  00520	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_medium@@3PAUTEXTURE_GRAPHIC@@A ; options_box_medium
  00525	50		 push	 eax
  00526	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00529	51		 push	 ecx
  0052a	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  0052d	8b 02		 mov	 eax, DWORD PTR [edx]
  0052f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  00536	ff d1		 call	 ecx

; 347  : 			}
; 348  : 			else

  00538	eb 18		 jmp	 SHORT $LN40@preprocess
$LN39@preprocess:

; 349  : 			{
; 350  : 				set_ui_object_texture_graphic (change_obj, options_box_small);

  0053a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?options_box_small@@3PAUTEXTURE_GRAPHIC@@A ; options_box_small
  0053f	50		 push	 eax
  00540	8b 4d 08	 mov	 ecx, DWORD PTR _change_obj$[ebp]
  00543	51		 push	 ecx
  00544	8b 55 08	 mov	 edx, DWORD PTR _change_obj$[ebp]
  00547	8b 02		 mov	 eax, DWORD PTR [edx]
  00549	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_ui_object_texture_graphic@@3PAP6GXPAUUI_OBJECT@@PAUTEXTURE_GRAPHIC@@@ZA[eax*4]
  00550	ff d1		 call	 ecx
$LN40@preprocess:

; 351  : 			}
; 352  : 		}
; 353  : 		
; 354  : 		/*
; 355  : 		////////////////////////////////////////////////////////////////
; 356  : 		// change graphic
; 357  : 
; 358  : 		if (get_ui_object_texture_graphic (change_obj) != NULL)
; 359  : 		{
; 360  : 			if (x2 > OPTION_BOX_LARGE_WIDTH)
; 361  : 			{
; 362  : 				set_ui_object_texture_graphic (change_obj, options_box_extra_large);
; 363  : 			}
; 364  : 			else if (x2 > OPTION_BOX_MEDIUM_WIDTH)
; 365  : 			{
; 366  : 				set_ui_object_texture_graphic (change_obj, options_box_large);
; 367  : 			}
; 368  : 			else if (x2 > OPTION_BOX_SMALL_WIDTH)
; 369  : 			{
; 370  : 				set_ui_object_texture_graphic (change_obj, options_box_medium);
; 371  : 			}
; 372  : 			else
; 373  : 			{
; 374  : 				set_ui_object_texture_graphic (change_obj, options_box_small);
; 375  : 			}
; 376  : 		}
; 377  : 		*/
; 378  : 	}
; 379  : }

  00552	5f		 pop	 edi
  00553	5e		 pop	 esi
  00554	5b		 pop	 ebx
  00555	8b e5		 mov	 esp, ebp
  00557	5d		 pop	 ebp
  00558	c2 14 00	 ret	 20			; 00000014H
?preprocess_translation_object_size@@YGXPAUUI_OBJECT@@0PAPBDHW4RESIZE_UI_OBJECT_TYPES@@@Z ENDP ; preprocess_translation_object_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ui_menu\menus.c
;	COMDAT ?initialise_ui_menus@@YGXXZ
_TEXT	SEGMENT
?initialise_ui_menus@@YGXXZ PROC			; initialise_ui_menus, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 
; 76   : 	initialise_title_screen ();

  00009	e8 00 00 00 00	 call	 ?initialise_title_screen@@YGXXZ ; initialise_title_screen

; 77   : 
; 78   : 	#if DEMO_VERSION
; 79   : 		initialise_advert_screen ();
; 80   : 	#endif
; 81   : 
; 82   : 	initialise_main_screen ();

  0000e	e8 00 00 00 00	 call	 ?initialise_main_screen@@YGXXZ ; initialise_main_screen

; 83   : 
; 84   : 	#if !DEMO_VERSION
; 85   : 		initialise_select_player_screen ();

  00013	e8 00 00 00 00	 call	 ?initialise_select_player_screen@@YGXXZ ; initialise_select_player_screen

; 86   : 	#endif
; 87   : 
; 88   : 	initialise_options_screen ();

  00018	e8 00 00 00 00	 call	 ?initialise_options_screen@@YGXXZ ; initialise_options_screen

; 89   : 
; 90   : 	initialise_credits_screen ();

  0001d	e8 00 00 00 00	 call	 ?initialise_credits_screen@@YGXXZ ; initialise_credits_screen

; 91   : 
; 92   : // GCsDriver  08-12-2007
; 93   : 	initialise_modcredits_screen ();

  00022	e8 00 00 00 00	 call	 ?initialise_modcredits_screen@@YGXXZ ; initialise_modcredits_screen

; 94   : 
; 95   : 	initialise_game_type_screen ();

  00027	e8 00 00 00 00	 call	 ?initialise_game_type_screen@@YGXXZ ; initialise_game_type_screen

; 96   : 
; 97   : 	initialise_session_screen ();

  0002c	e8 00 00 00 00	 call	 ?initialise_session_screen@@YGXXZ ; initialise_session_screen

; 98   : 
; 99   : 	initialise_exit_screen ();

  00031	e8 00 00 00 00	 call	 ?initialise_exit_screen@@YGXXZ ; initialise_exit_screen

; 100  : 
; 101  : 	initialise_gunships_screen ();

  00036	e8 00 00 00 00	 call	 ?initialise_gunships_screen@@YGXXZ ; initialise_gunships_screen

; 102  : 
; 103  : 	initialise_combat_zone_screen ();

  0003b	e8 00 00 00 00	 call	 ?initialise_combat_zone_screen@@YGXXZ ; initialise_combat_zone_screen

; 104  : 
; 105  : 	initialise_loading_screen ();

  00040	e8 00 00 00 00	 call	 ?initialise_loading_screen@@YGXXZ ; initialise_loading_screen

; 106  : 
; 107  : 	initialise_ingame_screen ();

  00045	e8 00 00 00 00	 call	 ?initialise_ingame_screen@@YGXXZ ; initialise_ingame_screen

; 108  : 
; 109  : 	initialise_campaign_screen ();

  0004a	e8 00 00 00 00	 call	 ?initialise_campaign_screen@@YGXXZ ; initialise_campaign_screen

; 110  : 
; 111  : 	initialise_free_flight_screen ();

  0004f	e8 00 00 00 00	 call	 ?initialise_free_flight_screen@@YGXXZ ; initialise_free_flight_screen

; 112  : 
; 113  : 	initialise_dedicated_server_screen ();

  00054	e8 00 00 00 00	 call	 ?initialise_dedicated_server_screen@@YGXXZ ; initialise_dedicated_server_screen

; 114  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?initialise_ui_menus@@YGXXZ ENDP			; initialise_ui_menus
_TEXT	ENDS
END
