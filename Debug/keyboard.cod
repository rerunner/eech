; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\system\keyboard.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?keyboard_handle@@3PAXA				; keyboard_handle
_BSS	SEGMENT
?keyboard_handle@@3PAXA DD 01H DUP (?)			; keyboard_handle
_BSS	ENDS
PUBLIC	?initialise_keyboard@@YGXXZ			; initialise_keyboard
PUBLIC	?deinitialise_keyboard@@YGXXZ			; deinitialise_keyboard
PUBLIC	?keyboard_activation_routine@@YGXH@Z		; keyboard_activation_routine
PUBLIC	?generate_keyboard_events@@YGXXZ		; generate_keyboard_events
PUBLIC	?check_key@@YGHF@Z				; check_key
PUBLIC	?wait_for_any_key@@YGHXZ			; wait_for_any_key
PUBLIC	?wait_for_key@@YGHH@Z				; wait_for_key
PUBLIC	?check_for_any_key@@YGHXZ			; check_for_any_key
PUBLIC	??_C@_0CL@GPLGLGMM@Unable?5to?5create?5a?5handle?5for?5t@ ; `string'
PUBLIC	??_C@_0DC@IKMKOHDI@Unable?5to?5set?5event?5notificatio@ ; `string'
PUBLIC	??_C@_0CH@JMPBDMDB@Unable?5to?5set?5the?5keyboard?5buff@ ; `string'
PUBLIC	??_C@_0BF@LIDIBPJI@Unacquiring?5keyboard@	; `string'
PUBLIC	??_C@_0BD@BGKAGCK@Acquiring?5keyboard@		; `string'
PUBLIC	??_C@_0CC@PMDNHKOE@Failed?5to?5acquire?5keyboard?5devi@ ; `string'
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__SetFocus@4:PROC
EXTRN	?register_system_message_function@@YGHHP6GJPAUHWND__@@IIJ@Z@Z:PROC ; register_system_message_function
EXTRN	?register_pre_activate_message_function@@YGHP6GXH@Z@Z:PROC ; register_pre_activate_message_function
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?reset_events@@YGXXZ:PROC			; reset_events
EXTRN	?create_key_event@@YGXHW4KEY_STATES@@@Z:PROC	; create_key_event
EXTRN	?get_event@@YGHPAUEVENT@@@Z:PROC		; get_event
EXTRN	_IID_IDirectInputDevice7A:BYTE
EXTRN	_GUID_SysKeyboard:BYTE
EXTRN	_c_dfDIKeyboard:BYTE
EXTRN	?application_window@@3PAUHWND__@@A:DWORD	; application_window
EXTRN	?direct_input@@3PAUIDirectInput7A@@A:DWORD	; direct_input
EXTRN	?input_system_type@@3W4INPUT_TYPES@@A:DWORD	; input_system_type
_BSS	SEGMENT
?key_states@@3PAEA DB 0100H DUP (?)			; key_states
?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A DD 01H DUP (?) ; direct_input_keyboard
?direct_input_key_events@@3PAUDIDEVICEOBJECTDATA@@A DB 01000H DUP (?) ; direct_input_key_events
_BSS	ENDS
;	COMDAT ??_C@_0CC@PMDNHKOE@Failed?5to?5acquire?5keyboard?5devi@
CONST	SEGMENT
??_C@_0CC@PMDNHKOE@Failed?5to?5acquire?5keyboard?5devi@ DB 'Failed to acq'
	DB	'uire keyboard device', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BGKAGCK@Acquiring?5keyboard@
CONST	SEGMENT
??_C@_0BD@BGKAGCK@Acquiring?5keyboard@ DB 'Acquiring keyboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LIDIBPJI@Unacquiring?5keyboard@
CONST	SEGMENT
??_C@_0BF@LIDIBPJI@Unacquiring?5keyboard@ DB 'Unacquiring keyboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JMPBDMDB@Unable?5to?5set?5the?5keyboard?5buff@
CONST	SEGMENT
??_C@_0CH@JMPBDMDB@Unable?5to?5set?5the?5keyboard?5buff@ DB 'Unable to se'
	DB	't the keyboard buffer size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IKMKOHDI@Unable?5to?5set?5event?5notificatio@
CONST	SEGMENT
??_C@_0DC@IKMKOHDI@Unable?5to?5set?5event?5notificatio@ DB 'Unable to set'
	DB	' event notification for the keyboard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GPLGLGMM@Unable?5to?5create?5a?5handle?5for?5t@
CONST	SEGMENT
??_C@_0CL@GPLGLGMM@Unable?5to?5create?5a?5handle?5for?5t@ DB 'Unable to c'
	DB	'reate a handle for the keyboard', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?windows_key_down_routine@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_key$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?windows_key_down_routine@@YGJPAUHWND__@@IIJ@Z PROC	; windows_key_down_routine, COMDAT

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 369  : 
; 370  : 	int
; 371  : 		key;
; 372  : 
; 373  : 	hWnd;
; 374  : 	message;
; 375  : 	wParam;
; 376  : 
; 377  : 	key = translate_windows_virtual_key_code_to_directinput ( wParam, lParam );

  00009	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?translate_windows_virtual_key_code_to_directinput@@YGHHH@Z ; translate_windows_virtual_key_code_to_directinput
  00016	89 45 fc	 mov	 DWORD PTR _key$[ebp], eax

; 378  : 
; 379  : 	key_states[key] = TRUE;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _key$[ebp]
  0001c	c6 80 00 00 00
	00 01		 mov	 BYTE PTR ?key_states@@3PAEA[eax], 1

; 380  : 
; 381  : 	create_key_event ( key, KEY_STATE_DOWN );

  00023	6a 02		 push	 2
  00025	8b 45 fc	 mov	 eax, DWORD PTR _key$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?create_key_event@@YGXHW4KEY_STATES@@@Z ; create_key_event

; 382  : 
; 383  : 	return ( 0 );

  0002e	33 c0		 xor	 eax, eax

; 384  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 10 00	 ret	 16			; 00000010H
?windows_key_down_routine@@YGJPAUHWND__@@IIJ@Z ENDP	; windows_key_down_routine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?windows_key_up_routine@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_key$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?windows_key_up_routine@@YGJPAUHWND__@@IIJ@Z PROC	; windows_key_up_routine, COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 346  : 
; 347  : 	int
; 348  : 		key;
; 349  : 
; 350  : 	hWnd;
; 351  : 	message;
; 352  : 	wParam;
; 353  : 
; 354  : 	key = translate_windows_virtual_key_code_to_directinput ( wParam, lParam );

  00009	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?translate_windows_virtual_key_code_to_directinput@@YGHHH@Z ; translate_windows_virtual_key_code_to_directinput
  00016	89 45 fc	 mov	 DWORD PTR _key$[ebp], eax

; 355  : 
; 356  : 	key_states[key] = FALSE;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _key$[ebp]
  0001c	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?key_states@@3PAEA[eax], 0

; 357  : 
; 358  : 	create_key_event ( key, KEY_STATE_UP );

  00023	6a 01		 push	 1
  00025	8b 45 fc	 mov	 eax, DWORD PTR _key$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?create_key_event@@YGXHW4KEY_STATES@@@Z ; create_key_event

; 359  : 
; 360  : 	return ( 0 );

  0002e	33 c0		 xor	 eax, eax

; 361  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 10 00	 ret	 16			; 00000010H
?windows_key_up_routine@@YGJPAUHWND__@@IIJ@Z ENDP	; windows_key_up_routine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?translate_windows_virtual_key_code_to_directinput@@YGHHH@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
_code2$ = -8						; size = 4
_code$ = -4						; size = 4
_virtual_$ = 8						; size = 4
_lparam$ = 12						; size = 4
?translate_windows_virtual_key_code_to_directinput@@YGHHH@Z PROC ; translate_windows_virtual_key_code_to_directinput, COMDAT

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 571  : 
; 572  : 	int
; 573  : 		code,
; 574  : 		code2;
; 575  : 
; 576  : 	code = ( ( lparam >> 16 ) & 0xff );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _lparam$[ebp]
  0000c	c1 f8 10	 sar	 eax, 16			; 00000010H
  0000f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00014	89 45 fc	 mov	 DWORD PTR _code$[ebp], eax

; 577  : 	code2 = ( ( lparam >> 16 ) & 0xfff );

  00017	8b 45 0c	 mov	 eax, DWORD PTR _lparam$[ebp]
  0001a	c1 f8 10	 sar	 eax, 16			; 00000010H
  0001d	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00022	89 45 f8	 mov	 DWORD PTR _code2$[ebp], eax

; 578  : 
; 579  : 	switch ( virtual_ )

  00025	8b 45 08	 mov	 eax, DWORD PTR _virtual_$[ebp]
  00028	89 45 b4	 mov	 DWORD PTR tv68[ebp], eax
  0002b	8b 4d b4	 mov	 ecx, DWORD PTR tv68[ebp]
  0002e	83 e9 01	 sub	 ecx, 1
  00031	89 4d b4	 mov	 DWORD PTR tv68[ebp], ecx
  00034	81 7d b4 fd 00
	00 00		 cmp	 DWORD PTR tv68[ebp], 253 ; 000000fdH
  0003b	0f 87 bd 06 00
	00		 ja	 $LN2@translate_
  00041	8b 55 b4	 mov	 edx, DWORD PTR tv68[ebp]
  00044	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN135@translate_[edx]
  0004b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN136@translate_[eax*4]
$LN4@translate_:

; 580  : 	{
; 581  : 
; 582  : 		case	VK_SHIFT:
; 583  : 		{
; 584  : 
; 585  : 			if ( code == 0x2a )	return ( DIK_LSHIFT );

  00052	83 7d fc 2a	 cmp	 DWORD PTR _code$[ebp], 42 ; 0000002aH
  00056	75 0c		 jne	 SHORT $LN5@translate_
  00058	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
  0005d	e9 9e 06 00 00	 jmp	 $LN1@translate_
  00062	eb 0a		 jmp	 SHORT $LN6@translate_
$LN5@translate_:

; 586  : 			else 						return ( DIK_RSHIFT );

  00064	b8 36 00 00 00	 mov	 eax, 54			; 00000036H
  00069	e9 92 06 00 00	 jmp	 $LN1@translate_
$LN6@translate_:

; 587  : 
; 588  : 			break;

  0006e	e9 8b 06 00 00	 jmp	 $LN2@translate_
$LN7@translate_:

; 589  : 		}
; 590  : 
; 591  : 		case	VK_CONTROL:
; 592  : 		{
; 593  : 
; 594  : 			if ( code2 == 0x1d ) return ( DIK_LCONTROL );

  00073	83 7d f8 1d	 cmp	 DWORD PTR _code2$[ebp], 29 ; 0000001dH
  00077	75 0c		 jne	 SHORT $LN8@translate_
  00079	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  0007e	e9 7d 06 00 00	 jmp	 $LN1@translate_
  00083	eb 0a		 jmp	 SHORT $LN9@translate_
$LN8@translate_:

; 595  : 			else						return ( DIK_RCONTROL );

  00085	b8 9d 00 00 00	 mov	 eax, 157		; 0000009dH
  0008a	e9 71 06 00 00	 jmp	 $LN1@translate_
$LN9@translate_:

; 596  : 
; 597  : 			break;

  0008f	e9 6a 06 00 00	 jmp	 $LN2@translate_
$LN10@translate_:

; 598  : 		}
; 599  : 		case	VK_MENU:
; 600  : 		{
; 601  : 
; 602  : 			if ( code2 == 0x38 )	return ( DIK_LMENU );

  00094	83 7d f8 38	 cmp	 DWORD PTR _code2$[ebp], 56 ; 00000038H
  00098	75 0c		 jne	 SHORT $LN11@translate_
  0009a	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0009f	e9 5c 06 00 00	 jmp	 $LN1@translate_
  000a4	eb 0a		 jmp	 SHORT $LN12@translate_
$LN11@translate_:

; 603  : 			else						return ( DIK_RMENU );

  000a6	b8 b8 00 00 00	 mov	 eax, 184		; 000000b8H
  000ab	e9 50 06 00 00	 jmp	 $LN1@translate_
$LN12@translate_:

; 604  : 
; 605  : 			break;

  000b0	e9 49 06 00 00	 jmp	 $LN2@translate_
$LN13@translate_:

; 606  : 		}
; 607  : 
; 608  : 		case	VK_BACK:				return ( DIK_BACK );	break;

  000b5	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  000ba	e9 41 06 00 00	 jmp	 $LN1@translate_
  000bf	e9 3a 06 00 00	 jmp	 $LN2@translate_
$LN14@translate_:

; 609  : 		case	VK_TAB:				return ( DIK_TAB );	break;

  000c4	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  000c9	e9 32 06 00 00	 jmp	 $LN1@translate_
  000ce	e9 2b 06 00 00	 jmp	 $LN2@translate_
$LN15@translate_:

; 610  : 		case	VK_RETURN:			return ( DIK_RETURN );	break;

  000d3	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  000d8	e9 23 06 00 00	 jmp	 $LN1@translate_
  000dd	e9 1c 06 00 00	 jmp	 $LN2@translate_
$LN16@translate_:

; 611  : 		case	VK_CAPITAL:			return ( DIK_CAPITAL );	break;

  000e2	b8 3a 00 00 00	 mov	 eax, 58			; 0000003aH
  000e7	e9 14 06 00 00	 jmp	 $LN1@translate_
  000ec	e9 0d 06 00 00	 jmp	 $LN2@translate_
$LN17@translate_:

; 612  : 		case	VK_ESCAPE:			return ( DIK_ESCAPE );	break;

  000f1	b8 01 00 00 00	 mov	 eax, 1
  000f6	e9 05 06 00 00	 jmp	 $LN1@translate_
  000fb	e9 fe 05 00 00	 jmp	 $LN2@translate_
$LN18@translate_:

; 613  : 		case	VK_SPACE:			return ( DIK_SPACE );	break;

  00100	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  00105	e9 f6 05 00 00	 jmp	 $LN1@translate_
  0010a	e9 ef 05 00 00	 jmp	 $LN2@translate_
$LN19@translate_:

; 614  : 		case	VK_PRIOR:			return ( DIK_PRIOR );	break;

  0010f	b8 c9 00 00 00	 mov	 eax, 201		; 000000c9H
  00114	e9 e7 05 00 00	 jmp	 $LN1@translate_
  00119	e9 e0 05 00 00	 jmp	 $LN2@translate_
$LN20@translate_:

; 615  : 		case	VK_NEXT:				return ( DIK_NEXT );	break;

  0011e	b8 d1 00 00 00	 mov	 eax, 209		; 000000d1H
  00123	e9 d8 05 00 00	 jmp	 $LN1@translate_
  00128	e9 d1 05 00 00	 jmp	 $LN2@translate_
$LN21@translate_:

; 616  : 		case	VK_END:				return ( DIK_END );	break;

  0012d	b8 cf 00 00 00	 mov	 eax, 207		; 000000cfH
  00132	e9 c9 05 00 00	 jmp	 $LN1@translate_
  00137	e9 c2 05 00 00	 jmp	 $LN2@translate_
$LN22@translate_:

; 617  : 		case	VK_HOME:				return ( DIK_HOME );	break;

  0013c	b8 c7 00 00 00	 mov	 eax, 199		; 000000c7H
  00141	e9 ba 05 00 00	 jmp	 $LN1@translate_
  00146	e9 b3 05 00 00	 jmp	 $LN2@translate_
$LN23@translate_:

; 618  : 		case	VK_LEFT:				return ( DIK_LEFT );	break;

  0014b	b8 cb 00 00 00	 mov	 eax, 203		; 000000cbH
  00150	e9 ab 05 00 00	 jmp	 $LN1@translate_
  00155	e9 a4 05 00 00	 jmp	 $LN2@translate_
$LN24@translate_:

; 619  : 		case	VK_UP:				return ( DIK_UP );	break;

  0015a	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  0015f	e9 9c 05 00 00	 jmp	 $LN1@translate_
  00164	e9 95 05 00 00	 jmp	 $LN2@translate_
$LN25@translate_:

; 620  : 		case	VK_RIGHT:			return ( DIK_RIGHT );	break;

  00169	b8 cd 00 00 00	 mov	 eax, 205		; 000000cdH
  0016e	e9 8d 05 00 00	 jmp	 $LN1@translate_
  00173	e9 86 05 00 00	 jmp	 $LN2@translate_
$LN26@translate_:

; 621  : 		case	VK_DOWN:				return ( DIK_DOWN );	break;

  00178	b8 d0 00 00 00	 mov	 eax, 208		; 000000d0H
  0017d	e9 7e 05 00 00	 jmp	 $LN1@translate_
  00182	e9 77 05 00 00	 jmp	 $LN2@translate_
$LN27@translate_:

; 622  : 		case	VK_INSERT:			return ( DIK_INSERT );	break;

  00187	b8 d2 00 00 00	 mov	 eax, 210		; 000000d2H
  0018c	e9 6f 05 00 00	 jmp	 $LN1@translate_
  00191	e9 68 05 00 00	 jmp	 $LN2@translate_
$LN28@translate_:

; 623  : 		case	VK_DELETE:			return ( DIK_DELETE );	break;

  00196	b8 d3 00 00 00	 mov	 eax, 211		; 000000d3H
  0019b	e9 60 05 00 00	 jmp	 $LN1@translate_
  001a0	e9 59 05 00 00	 jmp	 $LN2@translate_
$LN29@translate_:

; 624  : 
; 625  : 		case	VK_NUMPAD0:			return ( DIK_NUMPAD0 );	break;

  001a5	b8 52 00 00 00	 mov	 eax, 82			; 00000052H
  001aa	e9 51 05 00 00	 jmp	 $LN1@translate_
  001af	e9 4a 05 00 00	 jmp	 $LN2@translate_
$LN30@translate_:

; 626  : 		case	VK_NUMPAD1:			return ( DIK_NUMPAD1 );	break;

  001b4	b8 4f 00 00 00	 mov	 eax, 79			; 0000004fH
  001b9	e9 42 05 00 00	 jmp	 $LN1@translate_
  001be	e9 3b 05 00 00	 jmp	 $LN2@translate_
$LN31@translate_:

; 627  : 		case	VK_NUMPAD2:			return ( DIK_NUMPAD2 );	break;

  001c3	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  001c8	e9 33 05 00 00	 jmp	 $LN1@translate_
  001cd	e9 2c 05 00 00	 jmp	 $LN2@translate_
$LN32@translate_:

; 628  : 		case	VK_NUMPAD3:			return ( DIK_NUMPAD3 );	break;

  001d2	b8 51 00 00 00	 mov	 eax, 81			; 00000051H
  001d7	e9 24 05 00 00	 jmp	 $LN1@translate_
  001dc	e9 1d 05 00 00	 jmp	 $LN2@translate_
$LN33@translate_:

; 629  : 		case	VK_NUMPAD4:			return ( DIK_NUMPAD4 );	break;

  001e1	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  001e6	e9 15 05 00 00	 jmp	 $LN1@translate_
  001eb	e9 0e 05 00 00	 jmp	 $LN2@translate_
$LN34@translate_:

; 630  : 		case	VK_NUMPAD5:			return ( DIK_NUMPAD5 );	break;

  001f0	b8 4c 00 00 00	 mov	 eax, 76			; 0000004cH
  001f5	e9 06 05 00 00	 jmp	 $LN1@translate_
  001fa	e9 ff 04 00 00	 jmp	 $LN2@translate_
$LN35@translate_:

; 631  : 		case	VK_NUMPAD6:			return ( DIK_NUMPAD6 );	break;

  001ff	b8 4d 00 00 00	 mov	 eax, 77			; 0000004dH
  00204	e9 f7 04 00 00	 jmp	 $LN1@translate_
  00209	e9 f0 04 00 00	 jmp	 $LN2@translate_
$LN36@translate_:

; 632  : 		case	VK_NUMPAD7:			return ( DIK_NUMPAD7 );	break;

  0020e	b8 47 00 00 00	 mov	 eax, 71			; 00000047H
  00213	e9 e8 04 00 00	 jmp	 $LN1@translate_
  00218	e9 e1 04 00 00	 jmp	 $LN2@translate_
$LN37@translate_:

; 633  : 		case	VK_NUMPAD8:			return ( DIK_NUMPAD8 );	break;

  0021d	b8 48 00 00 00	 mov	 eax, 72			; 00000048H
  00222	e9 d9 04 00 00	 jmp	 $LN1@translate_
  00227	e9 d2 04 00 00	 jmp	 $LN2@translate_
$LN38@translate_:

; 634  : 		case	VK_NUMPAD9:			return ( DIK_NUMPAD9 );	break;

  0022c	b8 49 00 00 00	 mov	 eax, 73			; 00000049H
  00231	e9 ca 04 00 00	 jmp	 $LN1@translate_
  00236	e9 c3 04 00 00	 jmp	 $LN2@translate_
$LN39@translate_:

; 635  : 
; 636  : 		case	VK_MULTIPLY:		return ( DIK_MULTIPLY );	break;

  0023b	b8 37 00 00 00	 mov	 eax, 55			; 00000037H
  00240	e9 bb 04 00 00	 jmp	 $LN1@translate_
  00245	e9 b4 04 00 00	 jmp	 $LN2@translate_
$LN40@translate_:

; 637  : 		case	VK_ADD:				return ( DIK_ADD );	break;

  0024a	b8 4e 00 00 00	 mov	 eax, 78			; 0000004eH
  0024f	e9 ac 04 00 00	 jmp	 $LN1@translate_
  00254	e9 a5 04 00 00	 jmp	 $LN2@translate_
$LN41@translate_:

; 638  : 		case	VK_SUBTRACT:		return ( DIK_SUBTRACT );	break;

  00259	b8 4a 00 00 00	 mov	 eax, 74			; 0000004aH
  0025e	e9 9d 04 00 00	 jmp	 $LN1@translate_
  00263	e9 96 04 00 00	 jmp	 $LN2@translate_
$LN42@translate_:

; 639  : 		case	VK_DECIMAL:			return ( DIK_DECIMAL );	break;

  00268	b8 53 00 00 00	 mov	 eax, 83			; 00000053H
  0026d	e9 8e 04 00 00	 jmp	 $LN1@translate_
  00272	e9 87 04 00 00	 jmp	 $LN2@translate_
$LN43@translate_:

; 640  : 		case	VK_DIVIDE:			return ( DIK_DIVIDE );	break;

  00277	b8 b5 00 00 00	 mov	 eax, 181		; 000000b5H
  0027c	e9 7f 04 00 00	 jmp	 $LN1@translate_
  00281	e9 78 04 00 00	 jmp	 $LN2@translate_
$LN44@translate_:

; 641  : 
; 642  : 		case	VK_F1:				return ( DIK_F1 );	break;

  00286	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  0028b	e9 70 04 00 00	 jmp	 $LN1@translate_
  00290	e9 69 04 00 00	 jmp	 $LN2@translate_
$LN45@translate_:

; 643  : 		case	VK_F2:				return ( DIK_F2 );	break;

  00295	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  0029a	e9 61 04 00 00	 jmp	 $LN1@translate_
  0029f	e9 5a 04 00 00	 jmp	 $LN2@translate_
$LN46@translate_:

; 644  : 		case	VK_F3:				return ( DIK_F3 );	break;

  002a4	b8 3d 00 00 00	 mov	 eax, 61			; 0000003dH
  002a9	e9 52 04 00 00	 jmp	 $LN1@translate_
  002ae	e9 4b 04 00 00	 jmp	 $LN2@translate_
$LN47@translate_:

; 645  : 		case	VK_F4:				return ( DIK_F4 );	break;

  002b3	b8 3e 00 00 00	 mov	 eax, 62			; 0000003eH
  002b8	e9 43 04 00 00	 jmp	 $LN1@translate_
  002bd	e9 3c 04 00 00	 jmp	 $LN2@translate_
$LN48@translate_:

; 646  : 		case	VK_F5:				return ( DIK_F5 );	break;

  002c2	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  002c7	e9 34 04 00 00	 jmp	 $LN1@translate_
  002cc	e9 2d 04 00 00	 jmp	 $LN2@translate_
$LN49@translate_:

; 647  : 		case	VK_F6:				return ( DIK_F6 );	break;

  002d1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002d6	e9 25 04 00 00	 jmp	 $LN1@translate_
  002db	e9 1e 04 00 00	 jmp	 $LN2@translate_
$LN50@translate_:

; 648  : 		case	VK_F7:				return ( DIK_F7 );	break;

  002e0	b8 41 00 00 00	 mov	 eax, 65			; 00000041H
  002e5	e9 16 04 00 00	 jmp	 $LN1@translate_
  002ea	e9 0f 04 00 00	 jmp	 $LN2@translate_
$LN51@translate_:

; 649  : 		case	VK_F8:				return ( DIK_F8 );	break;

  002ef	b8 42 00 00 00	 mov	 eax, 66			; 00000042H
  002f4	e9 07 04 00 00	 jmp	 $LN1@translate_
  002f9	e9 00 04 00 00	 jmp	 $LN2@translate_
$LN52@translate_:

; 650  : 		case	VK_F9:				return ( DIK_F9 );	break;

  002fe	b8 43 00 00 00	 mov	 eax, 67			; 00000043H
  00303	e9 f8 03 00 00	 jmp	 $LN1@translate_
  00308	e9 f1 03 00 00	 jmp	 $LN2@translate_
$LN53@translate_:

; 651  : 		case	VK_F10:				return ( DIK_F10 );	break;

  0030d	b8 44 00 00 00	 mov	 eax, 68			; 00000044H
  00312	e9 e9 03 00 00	 jmp	 $LN1@translate_
  00317	e9 e2 03 00 00	 jmp	 $LN2@translate_
$LN54@translate_:

; 652  : 		case	VK_F11:				return ( DIK_F11 );	break;

  0031c	b8 57 00 00 00	 mov	 eax, 87			; 00000057H
  00321	e9 da 03 00 00	 jmp	 $LN1@translate_
  00326	e9 d3 03 00 00	 jmp	 $LN2@translate_
$LN55@translate_:

; 653  : 		case	VK_F12:				return ( DIK_F12 );	break;

  0032b	b8 58 00 00 00	 mov	 eax, 88			; 00000058H
  00330	e9 cb 03 00 00	 jmp	 $LN1@translate_
  00335	e9 c4 03 00 00	 jmp	 $LN2@translate_
$LN56@translate_:

; 654  : 		case	VK_F13:				return ( DIK_F13 );	break;

  0033a	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0033f	e9 bc 03 00 00	 jmp	 $LN1@translate_
  00344	e9 b5 03 00 00	 jmp	 $LN2@translate_
$LN57@translate_:

; 655  : 		case	VK_F14:				return ( DIK_F14 );	break;

  00349	b8 65 00 00 00	 mov	 eax, 101		; 00000065H
  0034e	e9 ad 03 00 00	 jmp	 $LN1@translate_
  00353	e9 a6 03 00 00	 jmp	 $LN2@translate_
$LN58@translate_:

; 656  : 		case	VK_F15:				return ( DIK_F15 );	break;

  00358	b8 66 00 00 00	 mov	 eax, 102		; 00000066H
  0035d	e9 9e 03 00 00	 jmp	 $LN1@translate_
  00362	e9 97 03 00 00	 jmp	 $LN2@translate_
$LN59@translate_:

; 657  : 
; 658  : 		case	VK_A:					return ( DIK_A ); break;

  00367	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  0036c	e9 8f 03 00 00	 jmp	 $LN1@translate_
  00371	e9 88 03 00 00	 jmp	 $LN2@translate_
$LN60@translate_:

; 659  : 		case	VK_B:					return ( DIK_B ); break;

  00376	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  0037b	e9 80 03 00 00	 jmp	 $LN1@translate_
  00380	e9 79 03 00 00	 jmp	 $LN2@translate_
$LN61@translate_:

; 660  : 		case	VK_C:					return ( DIK_C ); break;

  00385	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  0038a	e9 71 03 00 00	 jmp	 $LN1@translate_
  0038f	e9 6a 03 00 00	 jmp	 $LN2@translate_
$LN62@translate_:

; 661  : 		case	VK_D:					return ( DIK_D ); break;

  00394	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00399	e9 62 03 00 00	 jmp	 $LN1@translate_
  0039e	e9 5b 03 00 00	 jmp	 $LN2@translate_
$LN63@translate_:

; 662  : 		case	VK_E:					return ( DIK_E ); break;

  003a3	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  003a8	e9 53 03 00 00	 jmp	 $LN1@translate_
  003ad	e9 4c 03 00 00	 jmp	 $LN2@translate_
$LN64@translate_:

; 663  : 		case	VK_F:					return ( DIK_F ); break;

  003b2	b8 21 00 00 00	 mov	 eax, 33			; 00000021H
  003b7	e9 44 03 00 00	 jmp	 $LN1@translate_
  003bc	e9 3d 03 00 00	 jmp	 $LN2@translate_
$LN65@translate_:

; 664  : 		case	VK_G:					return ( DIK_G ); break;

  003c1	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  003c6	e9 35 03 00 00	 jmp	 $LN1@translate_
  003cb	e9 2e 03 00 00	 jmp	 $LN2@translate_
$LN66@translate_:

; 665  : 		case	VK_H:					return ( DIK_H ); break;

  003d0	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  003d5	e9 26 03 00 00	 jmp	 $LN1@translate_
  003da	e9 1f 03 00 00	 jmp	 $LN2@translate_
$LN67@translate_:

; 666  : 		case	VK_I:					return ( DIK_I ); break;

  003df	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  003e4	e9 17 03 00 00	 jmp	 $LN1@translate_
  003e9	e9 10 03 00 00	 jmp	 $LN2@translate_
$LN68@translate_:

; 667  : 		case	VK_J:					return ( DIK_J ); break;

  003ee	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  003f3	e9 08 03 00 00	 jmp	 $LN1@translate_
  003f8	e9 01 03 00 00	 jmp	 $LN2@translate_
$LN69@translate_:

; 668  : 		case	VK_K:					return ( DIK_K ); break;

  003fd	b8 25 00 00 00	 mov	 eax, 37			; 00000025H
  00402	e9 f9 02 00 00	 jmp	 $LN1@translate_
  00407	e9 f2 02 00 00	 jmp	 $LN2@translate_
$LN70@translate_:

; 669  : 		case	VK_L:					return ( DIK_L ); break;

  0040c	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
  00411	e9 ea 02 00 00	 jmp	 $LN1@translate_
  00416	e9 e3 02 00 00	 jmp	 $LN2@translate_
$LN71@translate_:

; 670  : 		case	VK_M:					return ( DIK_M ); break;

  0041b	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00420	e9 db 02 00 00	 jmp	 $LN1@translate_
  00425	e9 d4 02 00 00	 jmp	 $LN2@translate_
$LN72@translate_:

; 671  : 		case	VK_N:					return ( DIK_N ); break;

  0042a	b8 31 00 00 00	 mov	 eax, 49			; 00000031H
  0042f	e9 cc 02 00 00	 jmp	 $LN1@translate_
  00434	e9 c5 02 00 00	 jmp	 $LN2@translate_
$LN73@translate_:

; 672  : 		case	VK_O:					return ( DIK_O ); break;

  00439	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0043e	e9 bd 02 00 00	 jmp	 $LN1@translate_
  00443	e9 b6 02 00 00	 jmp	 $LN2@translate_
$LN74@translate_:

; 673  : 		case	VK_P:					return ( DIK_P ); break;

  00448	b8 19 00 00 00	 mov	 eax, 25			; 00000019H
  0044d	e9 ae 02 00 00	 jmp	 $LN1@translate_
  00452	e9 a7 02 00 00	 jmp	 $LN2@translate_
$LN75@translate_:

; 674  : 		case	VK_Q:					return ( DIK_Q ); break;

  00457	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0045c	e9 9f 02 00 00	 jmp	 $LN1@translate_
  00461	e9 98 02 00 00	 jmp	 $LN2@translate_
$LN76@translate_:

; 675  : 		case	VK_R:					return ( DIK_R ); break;

  00466	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
  0046b	e9 90 02 00 00	 jmp	 $LN1@translate_
  00470	e9 89 02 00 00	 jmp	 $LN2@translate_
$LN77@translate_:

; 676  : 		case	VK_S:					return ( DIK_S ); break;

  00475	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0047a	e9 81 02 00 00	 jmp	 $LN1@translate_
  0047f	e9 7a 02 00 00	 jmp	 $LN2@translate_
$LN78@translate_:

; 677  : 		case	VK_T:					return ( DIK_T ); break;

  00484	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00489	e9 72 02 00 00	 jmp	 $LN1@translate_
  0048e	e9 6b 02 00 00	 jmp	 $LN2@translate_
$LN79@translate_:

; 678  : 		case	VK_U:					return ( DIK_U ); break;

  00493	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00498	e9 63 02 00 00	 jmp	 $LN1@translate_
  0049d	e9 5c 02 00 00	 jmp	 $LN2@translate_
$LN80@translate_:

; 679  : 		case	VK_V:					return ( DIK_V ); break;

  004a2	b8 2f 00 00 00	 mov	 eax, 47			; 0000002fH
  004a7	e9 54 02 00 00	 jmp	 $LN1@translate_
  004ac	e9 4d 02 00 00	 jmp	 $LN2@translate_
$LN81@translate_:

; 680  : 		case	VK_W:					return ( DIK_W ); break;

  004b1	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  004b6	e9 45 02 00 00	 jmp	 $LN1@translate_
  004bb	e9 3e 02 00 00	 jmp	 $LN2@translate_
$LN82@translate_:

; 681  : 		case	VK_X:					return ( DIK_X ); break;

  004c0	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  004c5	e9 36 02 00 00	 jmp	 $LN1@translate_
  004ca	e9 2f 02 00 00	 jmp	 $LN2@translate_
$LN83@translate_:

; 682  : 		case	VK_Y:					return ( DIK_Y ); break;

  004cf	b8 15 00 00 00	 mov	 eax, 21			; 00000015H
  004d4	e9 27 02 00 00	 jmp	 $LN1@translate_
  004d9	e9 20 02 00 00	 jmp	 $LN2@translate_
$LN84@translate_:

; 683  : 		case	VK_Z:					return ( DIK_Z ); break;

  004de	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  004e3	e9 18 02 00 00	 jmp	 $LN1@translate_
  004e8	e9 11 02 00 00	 jmp	 $LN2@translate_
$LN85@translate_:

; 684  : 
; 685  : 		case	VK_0:					return ( DIK_0 ); break;

  004ed	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  004f2	e9 09 02 00 00	 jmp	 $LN1@translate_
  004f7	e9 02 02 00 00	 jmp	 $LN2@translate_
$LN86@translate_:

; 686  : 		case	VK_1:					return ( DIK_1 ); break;

  004fc	b8 02 00 00 00	 mov	 eax, 2
  00501	e9 fa 01 00 00	 jmp	 $LN1@translate_
  00506	e9 f3 01 00 00	 jmp	 $LN2@translate_
$LN87@translate_:

; 687  : 		case	VK_2:					return ( DIK_2 ); break;

  0050b	b8 03 00 00 00	 mov	 eax, 3
  00510	e9 eb 01 00 00	 jmp	 $LN1@translate_
  00515	e9 e4 01 00 00	 jmp	 $LN2@translate_
$LN88@translate_:

; 688  : 		case	VK_3:					return ( DIK_3 ); break;

  0051a	b8 04 00 00 00	 mov	 eax, 4
  0051f	e9 dc 01 00 00	 jmp	 $LN1@translate_
  00524	e9 d5 01 00 00	 jmp	 $LN2@translate_
$LN89@translate_:

; 689  : 		case	VK_4:					return ( DIK_4 ); break;

  00529	b8 05 00 00 00	 mov	 eax, 5
  0052e	e9 cd 01 00 00	 jmp	 $LN1@translate_
  00533	e9 c6 01 00 00	 jmp	 $LN2@translate_
$LN90@translate_:

; 690  : 		case	VK_5:					return ( DIK_5 ); break;

  00538	b8 06 00 00 00	 mov	 eax, 6
  0053d	e9 be 01 00 00	 jmp	 $LN1@translate_
  00542	e9 b7 01 00 00	 jmp	 $LN2@translate_
$LN91@translate_:

; 691  : 		case	VK_6:					return ( DIK_6 ); break;

  00547	b8 07 00 00 00	 mov	 eax, 7
  0054c	e9 af 01 00 00	 jmp	 $LN1@translate_
  00551	e9 a8 01 00 00	 jmp	 $LN2@translate_
$LN92@translate_:

; 692  : 		case	VK_7:					return ( DIK_7 ); break;

  00556	b8 08 00 00 00	 mov	 eax, 8
  0055b	e9 a0 01 00 00	 jmp	 $LN1@translate_
  00560	e9 99 01 00 00	 jmp	 $LN2@translate_
$LN93@translate_:

; 693  : 		case	VK_8:					return ( DIK_8 ); break;

  00565	b8 09 00 00 00	 mov	 eax, 9
  0056a	e9 91 01 00 00	 jmp	 $LN1@translate_
  0056f	e9 8a 01 00 00	 jmp	 $LN2@translate_
$LN94@translate_:

; 694  : 		case	VK_9:					return ( DIK_9 ); break;

  00574	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00579	e9 82 01 00 00	 jmp	 $LN1@translate_
  0057e	e9 7b 01 00 00	 jmp	 $LN2@translate_
$LN95@translate_:

; 695  : 
; 696  : 		case	VK_NUMLOCK:			return ( DIK_NUMLOCK );	break;

  00583	b8 45 00 00 00	 mov	 eax, 69			; 00000045H
  00588	e9 73 01 00 00	 jmp	 $LN1@translate_
  0058d	e9 6c 01 00 00	 jmp	 $LN2@translate_
$LN96@translate_:

; 697  : 		case	VK_SCROLL:			return ( DIK_SCROLL );	break;

  00592	b8 46 00 00 00	 mov	 eax, 70			; 00000046H
  00597	e9 64 01 00 00	 jmp	 $LN1@translate_
  0059c	e9 5d 01 00 00	 jmp	 $LN2@translate_
$LN97@translate_:

; 698  : 
; 699  : 		case	VK_LSHIFT:			return ( DIK_LSHIFT );	break;

  005a1	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
  005a6	e9 55 01 00 00	 jmp	 $LN1@translate_
  005ab	e9 4e 01 00 00	 jmp	 $LN2@translate_
$LN98@translate_:

; 700  : 		case	VK_RSHIFT:			return ( DIK_RSHIFT );	break;

  005b0	b8 36 00 00 00	 mov	 eax, 54			; 00000036H
  005b5	e9 46 01 00 00	 jmp	 $LN1@translate_
  005ba	e9 3f 01 00 00	 jmp	 $LN2@translate_
$LN99@translate_:

; 701  : 		case	VK_LCONTROL:		return ( DIK_LCONTROL );	break;

  005bf	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  005c4	e9 37 01 00 00	 jmp	 $LN1@translate_
  005c9	e9 30 01 00 00	 jmp	 $LN2@translate_
$LN100@translate_:

; 702  : 		case	VK_RCONTROL:		return ( DIK_RCONTROL );	break;

  005ce	b8 9d 00 00 00	 mov	 eax, 157		; 0000009dH
  005d3	e9 28 01 00 00	 jmp	 $LN1@translate_
  005d8	e9 21 01 00 00	 jmp	 $LN2@translate_
$LN101@translate_:

; 703  : 		case	VK_LMENU:			return ( DIK_LMENU );	break;

  005dd	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  005e2	e9 19 01 00 00	 jmp	 $LN1@translate_
  005e7	e9 12 01 00 00	 jmp	 $LN2@translate_
$LN102@translate_:

; 704  : 		case	VK_RMENU:			return ( DIK_RMENU );	break;

  005ec	b8 b8 00 00 00	 mov	 eax, 184		; 000000b8H
  005f1	e9 0a 01 00 00	 jmp	 $LN1@translate_
  005f6	e9 03 01 00 00	 jmp	 $LN2@translate_
$LN103@translate_:

; 705  : 
; 706  : 		case	VK_LSQBRACKET:		return ( DIK_LBRACKET );	break;

  005fb	b8 1a 00 00 00	 mov	 eax, 26			; 0000001aH
  00600	e9 fb 00 00 00	 jmp	 $LN1@translate_
  00605	e9 f4 00 00 00	 jmp	 $LN2@translate_
$LN104@translate_:

; 707  : 		case	VK_RSQBRACKET:		return ( DIK_RBRACKET );	break;

  0060a	b8 1b 00 00 00	 mov	 eax, 27			; 0000001bH
  0060f	e9 ec 00 00 00	 jmp	 $LN1@translate_
  00614	e9 e5 00 00 00	 jmp	 $LN2@translate_
$LN105@translate_:

; 708  : 
; 709  : 		case	VK_COMMA:			return ( DIK_COMMA ); break;

  00619	b8 33 00 00 00	 mov	 eax, 51			; 00000033H
  0061e	e9 dd 00 00 00	 jmp	 $LN1@translate_
  00623	e9 d6 00 00 00	 jmp	 $LN2@translate_
$LN106@translate_:

; 710  : 		case	VK_STOP:				return ( DIK_PERIOD ); break;

  00628	b8 34 00 00 00	 mov	 eax, 52			; 00000034H
  0062d	e9 ce 00 00 00	 jmp	 $LN1@translate_
  00632	e9 c7 00 00 00	 jmp	 $LN2@translate_
$LN107@translate_:

; 711  : 
; 712  : 		case	VK_MINUS:			return ( DIK_MINUS ); break;

  00637	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0063c	e9 bf 00 00 00	 jmp	 $LN1@translate_
  00641	e9 b8 00 00 00	 jmp	 $LN2@translate_
$LN108@translate_:

; 713  : 		case	VK_EQUALS:			return ( DIK_EQUALS ); break;

  00646	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
  0064b	e9 b0 00 00 00	 jmp	 $LN1@translate_
  00650	e9 a9 00 00 00	 jmp	 $LN2@translate_
$LN109@translate_:

; 714  : 
; 715  : 		case	VK_SEPARATOR:		return ( 0x00 );	break;

  00655	33 c0		 xor	 eax, eax
  00657	e9 a4 00 00 00	 jmp	 $LN1@translate_
  0065c	e9 9d 00 00 00	 jmp	 $LN2@translate_
$LN110@translate_:

; 716  : 		case	VK_PROCESSKEY:		return ( 0x00 );	break;

  00661	33 c0		 xor	 eax, eax
  00663	e9 98 00 00 00	 jmp	 $LN1@translate_
  00668	e9 91 00 00 00	 jmp	 $LN2@translate_
$LN111@translate_:

; 717  : 		case	VK_ATTN:				return ( 0x00 );	break;

  0066d	33 c0		 xor	 eax, eax
  0066f	e9 8c 00 00 00	 jmp	 $LN1@translate_
  00674	e9 85 00 00 00	 jmp	 $LN2@translate_
$LN112@translate_:

; 718  : 		case	VK_CRSEL:			return ( 0x00 );	break;

  00679	33 c0		 xor	 eax, eax
  0067b	e9 80 00 00 00	 jmp	 $LN1@translate_
  00680	eb 7c		 jmp	 SHORT $LN2@translate_
$LN113@translate_:

; 719  : 		case	VK_EXSEL:			return ( 0x00 );	break;

  00682	33 c0		 xor	 eax, eax
  00684	eb 7a		 jmp	 SHORT $LN1@translate_
  00686	eb 76		 jmp	 SHORT $LN2@translate_
$LN114@translate_:

; 720  : 		case	VK_EREOF:			return ( 0x00 );	break;

  00688	33 c0		 xor	 eax, eax
  0068a	eb 74		 jmp	 SHORT $LN1@translate_
  0068c	eb 70		 jmp	 SHORT $LN2@translate_
$LN115@translate_:

; 721  : 		case	VK_PLAY:				return ( 0x00 );	break;

  0068e	33 c0		 xor	 eax, eax
  00690	eb 6e		 jmp	 SHORT $LN1@translate_
  00692	eb 6a		 jmp	 SHORT $LN2@translate_
$LN116@translate_:

; 722  : 		case	VK_ZOOM:				return ( 0x00 );	break;

  00694	33 c0		 xor	 eax, eax
  00696	eb 68		 jmp	 SHORT $LN1@translate_
  00698	eb 64		 jmp	 SHORT $LN2@translate_
$LN117@translate_:

; 723  : 		case	VK_NONAME:			return ( 0x00 );	break;

  0069a	33 c0		 xor	 eax, eax
  0069c	eb 62		 jmp	 SHORT $LN1@translate_
  0069e	eb 5e		 jmp	 SHORT $LN2@translate_
$LN118@translate_:

; 724  : 		case	VK_PA1:				return ( 0x00 );	break;

  006a0	33 c0		 xor	 eax, eax
  006a2	eb 5c		 jmp	 SHORT $LN1@translate_
  006a4	eb 58		 jmp	 SHORT $LN2@translate_
$LN119@translate_:

; 725  : 		case	VK_OEM_CLEAR:		return ( 0x00 );	break;

  006a6	33 c0		 xor	 eax, eax
  006a8	eb 56		 jmp	 SHORT $LN1@translate_
  006aa	eb 52		 jmp	 SHORT $LN2@translate_
$LN120@translate_:

; 726  : 		case	VK_LBUTTON:			return ( 0x00 );	break;

  006ac	33 c0		 xor	 eax, eax
  006ae	eb 50		 jmp	 SHORT $LN1@translate_
  006b0	eb 4c		 jmp	 SHORT $LN2@translate_
$LN121@translate_:

; 727  : 		case	VK_RBUTTON:			return ( 0x00 );	break;

  006b2	33 c0		 xor	 eax, eax
  006b4	eb 4a		 jmp	 SHORT $LN1@translate_
  006b6	eb 46		 jmp	 SHORT $LN2@translate_
$LN122@translate_:

; 728  : 		case	VK_CANCEL:			return ( 0x00 );	break;

  006b8	33 c0		 xor	 eax, eax
  006ba	eb 44		 jmp	 SHORT $LN1@translate_
  006bc	eb 40		 jmp	 SHORT $LN2@translate_
$LN123@translate_:

; 729  : 		case	VK_MBUTTON:			return ( 0x00 );	break;

  006be	33 c0		 xor	 eax, eax
  006c0	eb 3e		 jmp	 SHORT $LN1@translate_
  006c2	eb 3a		 jmp	 SHORT $LN2@translate_
$LN124@translate_:

; 730  : 		case	VK_CLEAR:			return ( 0x00 );	break;

  006c4	33 c0		 xor	 eax, eax
  006c6	eb 38		 jmp	 SHORT $LN1@translate_
  006c8	eb 34		 jmp	 SHORT $LN2@translate_
$LN125@translate_:

; 731  : 		case	VK_SELECT:			return ( 0x00 );	break;

  006ca	33 c0		 xor	 eax, eax
  006cc	eb 32		 jmp	 SHORT $LN1@translate_
  006ce	eb 2e		 jmp	 SHORT $LN2@translate_
$LN126@translate_:

; 732  : 		case	VK_PRINT:			return ( 0x00 );	break;

  006d0	33 c0		 xor	 eax, eax
  006d2	eb 2c		 jmp	 SHORT $LN1@translate_
  006d4	eb 28		 jmp	 SHORT $LN2@translate_
$LN127@translate_:

; 733  : 		case	VK_EXECUTE:			return ( 0x00 );	break;

  006d6	33 c0		 xor	 eax, eax
  006d8	eb 26		 jmp	 SHORT $LN1@translate_
  006da	eb 22		 jmp	 SHORT $LN2@translate_
$LN128@translate_:

; 734  : 		case	VK_SNAPSHOT:		return ( 0x00 );	break;

  006dc	33 c0		 xor	 eax, eax
  006de	eb 20		 jmp	 SHORT $LN1@translate_
  006e0	eb 1c		 jmp	 SHORT $LN2@translate_
$LN129@translate_:

; 735  : 		case	VK_HELP:				return ( 0x00 );	break;

  006e2	33 c0		 xor	 eax, eax
  006e4	eb 1a		 jmp	 SHORT $LN1@translate_
  006e6	eb 16		 jmp	 SHORT $LN2@translate_
$LN130@translate_:

; 736  : 		case	VK_LWIN:				return ( 0x00 );	break;

  006e8	33 c0		 xor	 eax, eax
  006ea	eb 14		 jmp	 SHORT $LN1@translate_
  006ec	eb 10		 jmp	 SHORT $LN2@translate_
$LN131@translate_:

; 737  : 		case	VK_RWIN:				return ( 0x00 );	break;

  006ee	33 c0		 xor	 eax, eax
  006f0	eb 0e		 jmp	 SHORT $LN1@translate_
  006f2	eb 0a		 jmp	 SHORT $LN2@translate_
$LN132@translate_:

; 738  : 		case	VK_APPS:				return ( 0x00 );	break;

  006f4	33 c0		 xor	 eax, eax
  006f6	eb 08		 jmp	 SHORT $LN1@translate_
  006f8	eb 04		 jmp	 SHORT $LN2@translate_
$LN133@translate_:

; 739  : 		case	VK_PAUSE:			return ( 0x00 );	break;

  006fa	33 c0		 xor	 eax, eax
  006fc	eb 02		 jmp	 SHORT $LN1@translate_
$LN2@translate_:

; 740  : 	}
; 741  : 
; 742  : 	return ( 0 );

  006fe	33 c0		 xor	 eax, eax
$LN1@translate_:

; 743  : }

  00700	5f		 pop	 edi
  00701	5e		 pop	 esi
  00702	5b		 pop	 ebx
  00703	8b e5		 mov	 esp, ebp
  00705	5d		 pop	 ebp
  00706	c2 08 00	 ret	 8
  00709	0f 1f 00	 npad	 3
$LN136@translate_:
  0070c	00 00 00 00	 DD	 $LN120@translate_
  00710	00 00 00 00	 DD	 $LN121@translate_
  00714	00 00 00 00	 DD	 $LN122@translate_
  00718	00 00 00 00	 DD	 $LN123@translate_
  0071c	00 00 00 00	 DD	 $LN13@translate_
  00720	00 00 00 00	 DD	 $LN14@translate_
  00724	00 00 00 00	 DD	 $LN124@translate_
  00728	00 00 00 00	 DD	 $LN15@translate_
  0072c	00 00 00 00	 DD	 $LN4@translate_
  00730	00 00 00 00	 DD	 $LN7@translate_
  00734	00 00 00 00	 DD	 $LN10@translate_
  00738	00 00 00 00	 DD	 $LN133@translate_
  0073c	00 00 00 00	 DD	 $LN16@translate_
  00740	00 00 00 00	 DD	 $LN17@translate_
  00744	00 00 00 00	 DD	 $LN18@translate_
  00748	00 00 00 00	 DD	 $LN19@translate_
  0074c	00 00 00 00	 DD	 $LN20@translate_
  00750	00 00 00 00	 DD	 $LN21@translate_
  00754	00 00 00 00	 DD	 $LN22@translate_
  00758	00 00 00 00	 DD	 $LN23@translate_
  0075c	00 00 00 00	 DD	 $LN24@translate_
  00760	00 00 00 00	 DD	 $LN25@translate_
  00764	00 00 00 00	 DD	 $LN26@translate_
  00768	00 00 00 00	 DD	 $LN125@translate_
  0076c	00 00 00 00	 DD	 $LN126@translate_
  00770	00 00 00 00	 DD	 $LN127@translate_
  00774	00 00 00 00	 DD	 $LN128@translate_
  00778	00 00 00 00	 DD	 $LN27@translate_
  0077c	00 00 00 00	 DD	 $LN28@translate_
  00780	00 00 00 00	 DD	 $LN129@translate_
  00784	00 00 00 00	 DD	 $LN85@translate_
  00788	00 00 00 00	 DD	 $LN86@translate_
  0078c	00 00 00 00	 DD	 $LN87@translate_
  00790	00 00 00 00	 DD	 $LN88@translate_
  00794	00 00 00 00	 DD	 $LN89@translate_
  00798	00 00 00 00	 DD	 $LN90@translate_
  0079c	00 00 00 00	 DD	 $LN91@translate_
  007a0	00 00 00 00	 DD	 $LN92@translate_
  007a4	00 00 00 00	 DD	 $LN93@translate_
  007a8	00 00 00 00	 DD	 $LN94@translate_
  007ac	00 00 00 00	 DD	 $LN59@translate_
  007b0	00 00 00 00	 DD	 $LN60@translate_
  007b4	00 00 00 00	 DD	 $LN61@translate_
  007b8	00 00 00 00	 DD	 $LN62@translate_
  007bc	00 00 00 00	 DD	 $LN63@translate_
  007c0	00 00 00 00	 DD	 $LN64@translate_
  007c4	00 00 00 00	 DD	 $LN65@translate_
  007c8	00 00 00 00	 DD	 $LN66@translate_
  007cc	00 00 00 00	 DD	 $LN67@translate_
  007d0	00 00 00 00	 DD	 $LN68@translate_
  007d4	00 00 00 00	 DD	 $LN69@translate_
  007d8	00 00 00 00	 DD	 $LN70@translate_
  007dc	00 00 00 00	 DD	 $LN71@translate_
  007e0	00 00 00 00	 DD	 $LN72@translate_
  007e4	00 00 00 00	 DD	 $LN73@translate_
  007e8	00 00 00 00	 DD	 $LN74@translate_
  007ec	00 00 00 00	 DD	 $LN75@translate_
  007f0	00 00 00 00	 DD	 $LN76@translate_
  007f4	00 00 00 00	 DD	 $LN77@translate_
  007f8	00 00 00 00	 DD	 $LN78@translate_
  007fc	00 00 00 00	 DD	 $LN79@translate_
  00800	00 00 00 00	 DD	 $LN80@translate_
  00804	00 00 00 00	 DD	 $LN81@translate_
  00808	00 00 00 00	 DD	 $LN82@translate_
  0080c	00 00 00 00	 DD	 $LN83@translate_
  00810	00 00 00 00	 DD	 $LN84@translate_
  00814	00 00 00 00	 DD	 $LN130@translate_
  00818	00 00 00 00	 DD	 $LN131@translate_
  0081c	00 00 00 00	 DD	 $LN132@translate_
  00820	00 00 00 00	 DD	 $LN29@translate_
  00824	00 00 00 00	 DD	 $LN30@translate_
  00828	00 00 00 00	 DD	 $LN31@translate_
  0082c	00 00 00 00	 DD	 $LN32@translate_
  00830	00 00 00 00	 DD	 $LN33@translate_
  00834	00 00 00 00	 DD	 $LN34@translate_
  00838	00 00 00 00	 DD	 $LN35@translate_
  0083c	00 00 00 00	 DD	 $LN36@translate_
  00840	00 00 00 00	 DD	 $LN37@translate_
  00844	00 00 00 00	 DD	 $LN38@translate_
  00848	00 00 00 00	 DD	 $LN39@translate_
  0084c	00 00 00 00	 DD	 $LN40@translate_
  00850	00 00 00 00	 DD	 $LN109@translate_
  00854	00 00 00 00	 DD	 $LN41@translate_
  00858	00 00 00 00	 DD	 $LN42@translate_
  0085c	00 00 00 00	 DD	 $LN43@translate_
  00860	00 00 00 00	 DD	 $LN44@translate_
  00864	00 00 00 00	 DD	 $LN45@translate_
  00868	00 00 00 00	 DD	 $LN46@translate_
  0086c	00 00 00 00	 DD	 $LN47@translate_
  00870	00 00 00 00	 DD	 $LN48@translate_
  00874	00 00 00 00	 DD	 $LN49@translate_
  00878	00 00 00 00	 DD	 $LN50@translate_
  0087c	00 00 00 00	 DD	 $LN51@translate_
  00880	00 00 00 00	 DD	 $LN52@translate_
  00884	00 00 00 00	 DD	 $LN53@translate_
  00888	00 00 00 00	 DD	 $LN54@translate_
  0088c	00 00 00 00	 DD	 $LN55@translate_
  00890	00 00 00 00	 DD	 $LN56@translate_
  00894	00 00 00 00	 DD	 $LN57@translate_
  00898	00 00 00 00	 DD	 $LN58@translate_
  0089c	00 00 00 00	 DD	 $LN95@translate_
  008a0	00 00 00 00	 DD	 $LN96@translate_
  008a4	00 00 00 00	 DD	 $LN97@translate_
  008a8	00 00 00 00	 DD	 $LN98@translate_
  008ac	00 00 00 00	 DD	 $LN99@translate_
  008b0	00 00 00 00	 DD	 $LN100@translate_
  008b4	00 00 00 00	 DD	 $LN101@translate_
  008b8	00 00 00 00	 DD	 $LN102@translate_
  008bc	00 00 00 00	 DD	 $LN108@translate_
  008c0	00 00 00 00	 DD	 $LN105@translate_
  008c4	00 00 00 00	 DD	 $LN107@translate_
  008c8	00 00 00 00	 DD	 $LN106@translate_
  008cc	00 00 00 00	 DD	 $LN103@translate_
  008d0	00 00 00 00	 DD	 $LN104@translate_
  008d4	00 00 00 00	 DD	 $LN110@translate_
  008d8	00 00 00 00	 DD	 $LN111@translate_
  008dc	00 00 00 00	 DD	 $LN112@translate_
  008e0	00 00 00 00	 DD	 $LN113@translate_
  008e4	00 00 00 00	 DD	 $LN114@translate_
  008e8	00 00 00 00	 DD	 $LN115@translate_
  008ec	00 00 00 00	 DD	 $LN116@translate_
  008f0	00 00 00 00	 DD	 $LN117@translate_
  008f4	00 00 00 00	 DD	 $LN118@translate_
  008f8	00 00 00 00	 DD	 $LN119@translate_
  008fc	00 00 00 00	 DD	 $LN2@translate_
$LN135@translate_:
  00900	00		 DB	 0
  00901	01		 DB	 1
  00902	02		 DB	 2
  00903	03		 DB	 3
  00904	7c		 DB	 124			; 0000007cH
  00905	7c		 DB	 124			; 0000007cH
  00906	7c		 DB	 124			; 0000007cH
  00907	04		 DB	 4
  00908	05		 DB	 5
  00909	7c		 DB	 124			; 0000007cH
  0090a	7c		 DB	 124			; 0000007cH
  0090b	06		 DB	 6
  0090c	07		 DB	 7
  0090d	7c		 DB	 124			; 0000007cH
  0090e	7c		 DB	 124			; 0000007cH
  0090f	08		 DB	 8
  00910	09		 DB	 9
  00911	0a		 DB	 10			; 0000000aH
  00912	0b		 DB	 11			; 0000000bH
  00913	0c		 DB	 12			; 0000000cH
  00914	7c		 DB	 124			; 0000007cH
  00915	7c		 DB	 124			; 0000007cH
  00916	7c		 DB	 124			; 0000007cH
  00917	7c		 DB	 124			; 0000007cH
  00918	7c		 DB	 124			; 0000007cH
  00919	7c		 DB	 124			; 0000007cH
  0091a	0d		 DB	 13			; 0000000dH
  0091b	7c		 DB	 124			; 0000007cH
  0091c	7c		 DB	 124			; 0000007cH
  0091d	7c		 DB	 124			; 0000007cH
  0091e	7c		 DB	 124			; 0000007cH
  0091f	0e		 DB	 14			; 0000000eH
  00920	0f		 DB	 15			; 0000000fH
  00921	10		 DB	 16			; 00000010H
  00922	11		 DB	 17			; 00000011H
  00923	12		 DB	 18			; 00000012H
  00924	13		 DB	 19			; 00000013H
  00925	14		 DB	 20			; 00000014H
  00926	15		 DB	 21			; 00000015H
  00927	16		 DB	 22			; 00000016H
  00928	17		 DB	 23			; 00000017H
  00929	18		 DB	 24			; 00000018H
  0092a	19		 DB	 25			; 00000019H
  0092b	1a		 DB	 26			; 0000001aH
  0092c	1b		 DB	 27			; 0000001bH
  0092d	1c		 DB	 28			; 0000001cH
  0092e	1d		 DB	 29			; 0000001dH
  0092f	1e		 DB	 30			; 0000001eH
  00930	1f		 DB	 31			; 0000001fH
  00931	20		 DB	 32			; 00000020H
  00932	21		 DB	 33			; 00000021H
  00933	22		 DB	 34			; 00000022H
  00934	23		 DB	 35			; 00000023H
  00935	24		 DB	 36			; 00000024H
  00936	25		 DB	 37			; 00000025H
  00937	26		 DB	 38			; 00000026H
  00938	27		 DB	 39			; 00000027H
  00939	7c		 DB	 124			; 0000007cH
  0093a	7c		 DB	 124			; 0000007cH
  0093b	7c		 DB	 124			; 0000007cH
  0093c	7c		 DB	 124			; 0000007cH
  0093d	7c		 DB	 124			; 0000007cH
  0093e	7c		 DB	 124			; 0000007cH
  0093f	7c		 DB	 124			; 0000007cH
  00940	28		 DB	 40			; 00000028H
  00941	29		 DB	 41			; 00000029H
  00942	2a		 DB	 42			; 0000002aH
  00943	2b		 DB	 43			; 0000002bH
  00944	2c		 DB	 44			; 0000002cH
  00945	2d		 DB	 45			; 0000002dH
  00946	2e		 DB	 46			; 0000002eH
  00947	2f		 DB	 47			; 0000002fH
  00948	30		 DB	 48			; 00000030H
  00949	31		 DB	 49			; 00000031H
  0094a	32		 DB	 50			; 00000032H
  0094b	33		 DB	 51			; 00000033H
  0094c	34		 DB	 52			; 00000034H
  0094d	35		 DB	 53			; 00000035H
  0094e	36		 DB	 54			; 00000036H
  0094f	37		 DB	 55			; 00000037H
  00950	38		 DB	 56			; 00000038H
  00951	39		 DB	 57			; 00000039H
  00952	3a		 DB	 58			; 0000003aH
  00953	3b		 DB	 59			; 0000003bH
  00954	3c		 DB	 60			; 0000003cH
  00955	3d		 DB	 61			; 0000003dH
  00956	3e		 DB	 62			; 0000003eH
  00957	3f		 DB	 63			; 0000003fH
  00958	40		 DB	 64			; 00000040H
  00959	41		 DB	 65			; 00000041H
  0095a	42		 DB	 66			; 00000042H
  0095b	43		 DB	 67			; 00000043H
  0095c	44		 DB	 68			; 00000044H
  0095d	7c		 DB	 124			; 0000007cH
  0095e	7c		 DB	 124			; 0000007cH
  0095f	45		 DB	 69			; 00000045H
  00960	46		 DB	 70			; 00000046H
  00961	47		 DB	 71			; 00000047H
  00962	48		 DB	 72			; 00000048H
  00963	49		 DB	 73			; 00000049H
  00964	4a		 DB	 74			; 0000004aH
  00965	4b		 DB	 75			; 0000004bH
  00966	4c		 DB	 76			; 0000004cH
  00967	4d		 DB	 77			; 0000004dH
  00968	4e		 DB	 78			; 0000004eH
  00969	4f		 DB	 79			; 0000004fH
  0096a	50		 DB	 80			; 00000050H
  0096b	51		 DB	 81			; 00000051H
  0096c	52		 DB	 82			; 00000052H
  0096d	53		 DB	 83			; 00000053H
  0096e	54		 DB	 84			; 00000054H
  0096f	55		 DB	 85			; 00000055H
  00970	56		 DB	 86			; 00000056H
  00971	57		 DB	 87			; 00000057H
  00972	58		 DB	 88			; 00000058H
  00973	59		 DB	 89			; 00000059H
  00974	5a		 DB	 90			; 0000005aH
  00975	5b		 DB	 91			; 0000005bH
  00976	5c		 DB	 92			; 0000005cH
  00977	5d		 DB	 93			; 0000005dH
  00978	5e		 DB	 94			; 0000005eH
  00979	5f		 DB	 95			; 0000005fH
  0097a	60		 DB	 96			; 00000060H
  0097b	61		 DB	 97			; 00000061H
  0097c	62		 DB	 98			; 00000062H
  0097d	63		 DB	 99			; 00000063H
  0097e	7c		 DB	 124			; 0000007cH
  0097f	7c		 DB	 124			; 0000007cH
  00980	7c		 DB	 124			; 0000007cH
  00981	7c		 DB	 124			; 0000007cH
  00982	7c		 DB	 124			; 0000007cH
  00983	7c		 DB	 124			; 0000007cH
  00984	7c		 DB	 124			; 0000007cH
  00985	7c		 DB	 124			; 0000007cH
  00986	7c		 DB	 124			; 0000007cH
  00987	7c		 DB	 124			; 0000007cH
  00988	7c		 DB	 124			; 0000007cH
  00989	7c		 DB	 124			; 0000007cH
  0098a	7c		 DB	 124			; 0000007cH
  0098b	7c		 DB	 124			; 0000007cH
  0098c	7c		 DB	 124			; 0000007cH
  0098d	7c		 DB	 124			; 0000007cH
  0098e	7c		 DB	 124			; 0000007cH
  0098f	64		 DB	 100			; 00000064H
  00990	65		 DB	 101			; 00000065H
  00991	7c		 DB	 124			; 0000007cH
  00992	7c		 DB	 124			; 0000007cH
  00993	7c		 DB	 124			; 0000007cH
  00994	7c		 DB	 124			; 0000007cH
  00995	7c		 DB	 124			; 0000007cH
  00996	7c		 DB	 124			; 0000007cH
  00997	7c		 DB	 124			; 0000007cH
  00998	7c		 DB	 124			; 0000007cH
  00999	7c		 DB	 124			; 0000007cH
  0099a	7c		 DB	 124			; 0000007cH
  0099b	7c		 DB	 124			; 0000007cH
  0099c	7c		 DB	 124			; 0000007cH
  0099d	7c		 DB	 124			; 0000007cH
  0099e	7c		 DB	 124			; 0000007cH
  0099f	66		 DB	 102			; 00000066H
  009a0	67		 DB	 103			; 00000067H
  009a1	68		 DB	 104			; 00000068H
  009a2	69		 DB	 105			; 00000069H
  009a3	6a		 DB	 106			; 0000006aH
  009a4	6b		 DB	 107			; 0000006bH
  009a5	7c		 DB	 124			; 0000007cH
  009a6	7c		 DB	 124			; 0000007cH
  009a7	7c		 DB	 124			; 0000007cH
  009a8	7c		 DB	 124			; 0000007cH
  009a9	7c		 DB	 124			; 0000007cH
  009aa	7c		 DB	 124			; 0000007cH
  009ab	7c		 DB	 124			; 0000007cH
  009ac	7c		 DB	 124			; 0000007cH
  009ad	7c		 DB	 124			; 0000007cH
  009ae	7c		 DB	 124			; 0000007cH
  009af	7c		 DB	 124			; 0000007cH
  009b0	7c		 DB	 124			; 0000007cH
  009b1	7c		 DB	 124			; 0000007cH
  009b2	7c		 DB	 124			; 0000007cH
  009b3	7c		 DB	 124			; 0000007cH
  009b4	7c		 DB	 124			; 0000007cH
  009b5	7c		 DB	 124			; 0000007cH
  009b6	7c		 DB	 124			; 0000007cH
  009b7	7c		 DB	 124			; 0000007cH
  009b8	7c		 DB	 124			; 0000007cH
  009b9	7c		 DB	 124			; 0000007cH
  009ba	6c		 DB	 108			; 0000006cH
  009bb	6d		 DB	 109			; 0000006dH
  009bc	6e		 DB	 110			; 0000006eH
  009bd	6f		 DB	 111			; 0000006fH
  009be	7c		 DB	 124			; 0000007cH
  009bf	7c		 DB	 124			; 0000007cH
  009c0	7c		 DB	 124			; 0000007cH
  009c1	7c		 DB	 124			; 0000007cH
  009c2	7c		 DB	 124			; 0000007cH
  009c3	7c		 DB	 124			; 0000007cH
  009c4	7c		 DB	 124			; 0000007cH
  009c5	7c		 DB	 124			; 0000007cH
  009c6	7c		 DB	 124			; 0000007cH
  009c7	7c		 DB	 124			; 0000007cH
  009c8	7c		 DB	 124			; 0000007cH
  009c9	7c		 DB	 124			; 0000007cH
  009ca	7c		 DB	 124			; 0000007cH
  009cb	7c		 DB	 124			; 0000007cH
  009cc	7c		 DB	 124			; 0000007cH
  009cd	7c		 DB	 124			; 0000007cH
  009ce	7c		 DB	 124			; 0000007cH
  009cf	7c		 DB	 124			; 0000007cH
  009d0	7c		 DB	 124			; 0000007cH
  009d1	7c		 DB	 124			; 0000007cH
  009d2	7c		 DB	 124			; 0000007cH
  009d3	7c		 DB	 124			; 0000007cH
  009d4	7c		 DB	 124			; 0000007cH
  009d5	7c		 DB	 124			; 0000007cH
  009d6	7c		 DB	 124			; 0000007cH
  009d7	7c		 DB	 124			; 0000007cH
  009d8	7c		 DB	 124			; 0000007cH
  009d9	7c		 DB	 124			; 0000007cH
  009da	70		 DB	 112			; 00000070H
  009db	7c		 DB	 124			; 0000007cH
  009dc	71		 DB	 113			; 00000071H
  009dd	7c		 DB	 124			; 0000007cH
  009de	7c		 DB	 124			; 0000007cH
  009df	7c		 DB	 124			; 0000007cH
  009e0	7c		 DB	 124			; 0000007cH
  009e1	7c		 DB	 124			; 0000007cH
  009e2	7c		 DB	 124			; 0000007cH
  009e3	7c		 DB	 124			; 0000007cH
  009e4	72		 DB	 114			; 00000072H
  009e5	7c		 DB	 124			; 0000007cH
  009e6	7c		 DB	 124			; 0000007cH
  009e7	7c		 DB	 124			; 0000007cH
  009e8	7c		 DB	 124			; 0000007cH
  009e9	7c		 DB	 124			; 0000007cH
  009ea	7c		 DB	 124			; 0000007cH
  009eb	7c		 DB	 124			; 0000007cH
  009ec	7c		 DB	 124			; 0000007cH
  009ed	7c		 DB	 124			; 0000007cH
  009ee	7c		 DB	 124			; 0000007cH
  009ef	7c		 DB	 124			; 0000007cH
  009f0	7c		 DB	 124			; 0000007cH
  009f1	7c		 DB	 124			; 0000007cH
  009f2	7c		 DB	 124			; 0000007cH
  009f3	7c		 DB	 124			; 0000007cH
  009f4	7c		 DB	 124			; 0000007cH
  009f5	73		 DB	 115			; 00000073H
  009f6	74		 DB	 116			; 00000074H
  009f7	75		 DB	 117			; 00000075H
  009f8	76		 DB	 118			; 00000076H
  009f9	77		 DB	 119			; 00000077H
  009fa	78		 DB	 120			; 00000078H
  009fb	79		 DB	 121			; 00000079H
  009fc	7a		 DB	 122			; 0000007aH
  009fd	7b		 DB	 123			; 0000007bH
?translate_windows_virtual_key_code_to_directinput@@YGHHH@Z ENDP ; translate_windows_virtual_key_code_to_directinput
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?check_for_any_key@@YGHXZ
_TEXT	SEGMENT
_ev$ = -20						; size = 20
?check_for_any_key@@YGHXZ PROC				; check_for_any_key, COMDAT

; 498  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 499  : 
; 500  : 	event
; 501  : 		ev;
; 502  : 
; 503  : 	if ( get_event ( &ev ) )

  00009	8d 45 ec	 lea	 eax, DWORD PTR _ev$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_event@@YGHPAUEVENT@@@Z ; get_event
  00012	85 c0		 test	 eax, eax
  00014	74 15		 je	 SHORT $LN2@check_for_

; 504  : 	{
; 505  : 		if ( ev.type == EVENT_TYPE_KEY )

  00016	83 7d ec 01	 cmp	 DWORD PTR _ev$[ebp], 1
  0001a	75 0f		 jne	 SHORT $LN2@check_for_

; 506  : 		{
; 507  : 			if ( ev.state == KEY_STATE_DOWN )

  0001c	0f b7 45 f4	 movzx	 eax, WORD PTR _ev$[ebp+8]
  00020	83 f8 02	 cmp	 eax, 2
  00023	75 06		 jne	 SHORT $LN2@check_for_

; 508  : 			{
; 509  : 
; 510  : 				return ( ev.key );

  00025	0f b6 45 f2	 movzx	 eax, BYTE PTR _ev$[ebp+6]
  00029	eb 02		 jmp	 SHORT $LN1@check_for_
$LN2@check_for_:

; 511  : 			}
; 512  : 		}
; 513  : 	}
; 514  : 
; 515  : 	return FALSE;

  0002b	33 c0		 xor	 eax, eax
$LN1@check_for_:

; 516  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?check_for_any_key@@YGHXZ ENDP				; check_for_any_key
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?wait_for_key@@YGHH@Z
_TEXT	SEGMENT
_ev$ = -20						; size = 20
_key$ = 8						; size = 4
?wait_for_key@@YGHH@Z PROC				; wait_for_key, COMDAT

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@wait_for_k:

; 468  : 
; 469  : 	event
; 470  : 		ev;
; 471  : 
; 472  : 	while ( TRUE )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	74 29		 je	 SHORT $LN3@wait_for_k

; 473  : 	{
; 474  : 
; 475  : 		if ( get_event ( &ev ) )

  00012	8d 45 ec	 lea	 eax, DWORD PTR _ev$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?get_event@@YGHPAUEVENT@@@Z ; get_event
  0001b	85 c0		 test	 eax, eax
  0001d	74 1a		 je	 SHORT $LN4@wait_for_k

; 476  : 		{
; 477  : 
; 478  : 			if ( ev.type == EVENT_TYPE_KEY )

  0001f	83 7d ec 01	 cmp	 DWORD PTR _ev$[ebp], 1
  00023	75 14		 jne	 SHORT $LN4@wait_for_k

; 479  : 			{
; 480  : 
; 481  : 				if ( ( ev.key == key ) && ( ev.state == KEY_STATE_DOWN ) )

  00025	0f b6 45 f2	 movzx	 eax, BYTE PTR _ev$[ebp+6]
  00029	3b 45 08	 cmp	 eax, DWORD PTR _key$[ebp]
  0002c	75 0b		 jne	 SHORT $LN4@wait_for_k
  0002e	0f b7 45 f4	 movzx	 eax, WORD PTR _ev$[ebp+8]
  00032	83 f8 02	 cmp	 eax, 2
  00035	75 02		 jne	 SHORT $LN4@wait_for_k

; 482  : 				{
; 483  : 
; 484  : 					break;

  00037	eb 02		 jmp	 SHORT $LN3@wait_for_k
$LN4@wait_for_k:

; 485  : 				}
; 486  : 			}
; 487  : 		}
; 488  : 	}

  00039	eb ce		 jmp	 SHORT $LN2@wait_for_k
$LN3@wait_for_k:

; 489  : 
; 490  : 	return ( ev.key );

  0003b	0f b6 45 f2	 movzx	 eax, BYTE PTR _ev$[ebp+6]

; 491  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?wait_for_key@@YGHH@Z ENDP				; wait_for_key
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?wait_for_any_key@@YGHXZ
_TEXT	SEGMENT
_ev$ = -20						; size = 20
?wait_for_any_key@@YGHXZ PROC				; wait_for_any_key, COMDAT

; 436  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@wait_for_a:

; 437  : 
; 438  : 	event
; 439  : 		ev;
; 440  : 
; 441  : 	while ( TRUE )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	74 20		 je	 SHORT $LN3@wait_for_a

; 442  : 	{
; 443  : 
; 444  : 		if ( get_event ( &ev ) )

  00012	8d 45 ec	 lea	 eax, DWORD PTR _ev$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?get_event@@YGHPAUEVENT@@@Z ; get_event
  0001b	85 c0		 test	 eax, eax
  0001d	74 11		 je	 SHORT $LN4@wait_for_a

; 445  : 		{
; 446  : 
; 447  : 			if ( ev.type == EVENT_TYPE_KEY )

  0001f	83 7d ec 01	 cmp	 DWORD PTR _ev$[ebp], 1
  00023	75 0b		 jne	 SHORT $LN4@wait_for_a

; 448  : 			{
; 449  : 
; 450  : 				if ( ev.state == KEY_STATE_DOWN )

  00025	0f b7 45 f4	 movzx	 eax, WORD PTR _ev$[ebp+8]
  00029	83 f8 02	 cmp	 eax, 2
  0002c	75 02		 jne	 SHORT $LN4@wait_for_a

; 451  : 				{
; 452  : 
; 453  : 					break;

  0002e	eb 02		 jmp	 SHORT $LN3@wait_for_a
$LN4@wait_for_a:

; 454  : 				}
; 455  : 			}
; 456  : 		}
; 457  : 	}

  00030	eb d7		 jmp	 SHORT $LN2@wait_for_a
$LN3@wait_for_a:

; 458  : 
; 459  : 	return ( ev.key );

  00032	0f b6 45 f2	 movzx	 eax, BYTE PTR _ev$[ebp+6]

; 460  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?wait_for_any_key@@YGHXZ ENDP				; wait_for_any_key
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?check_key@@YGHF@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_key$ = 8						; size = 2
?check_key@@YGHF@Z PROC					; check_key, COMDAT

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 392  : 
; 393  : 	HRESULT
; 394  : 		ret;
; 395  : 
; 396  : 	if ( direct_input_keyboard )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A, 0
  00010	74 3d		 je	 SHORT $LN3@check_key

; 397  : 	{
; 398  : 
; 399  : 		IDirectInputDevice7_Acquire ( direct_input_keyboard );

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0001f	52		 push	 edx
  00020	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00023	ff d0		 call	 eax

; 400  : 
; 401  : 		//
; 402  : 		// Ignore return code here
; 403  : 		//
; 404  : 
; 405  : 		ret = IDirectInputDevice7_GetDeviceState ( direct_input_keyboard, 256, key_states );

  00025	68 00 00 00 00	 push	 OFFSET ?key_states@@3PAEA
  0002a	68 00 01 00 00	 push	 256			; 00000100H
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0003c	52		 push	 edx
  0003d	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00040	ff d0		 call	 eax
  00042	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 406  : 
; 407  : 		if ( ret != DI_OK )

  00045	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00049	74 04		 je	 SHORT $LN3@check_key

; 408  : 		{
; 409  : 
; 410  : 			return ( FALSE );

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 1a		 jmp	 SHORT $LN1@check_key
$LN3@check_key:

; 411  : 		}
; 412  : 	}
; 413  : 	else
; 414  : 	{
; 415  : 
; 416  : 
; 417  : 	}
; 418  : 
; 419  : 	if ( key_states[key] )

  0004f	0f bf 45 08	 movsx	 eax, WORD PTR _key$[ebp]
  00053	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?key_states@@3PAEA[eax]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 09		 je	 SHORT $LN5@check_key

; 420  : 	{
; 421  : 
; 422  : 		return ( TRUE );

  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	eb 04		 jmp	 SHORT $LN1@check_key

; 423  : 	}
; 424  : 	else

  00065	eb 02		 jmp	 SHORT $LN1@check_key
$LN5@check_key:

; 425  : 	{
; 426  : 
; 427  : 		return ( FALSE );

  00067	33 c0		 xor	 eax, eax
$LN1@check_key:

; 428  : 	}
; 429  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?check_key@@YGHF@Z ENDP					; check_key
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?generate_keyboard_events@@YGXXZ
_TEXT	SEGMENT
_count$ = -12						; size = 4
_items$ = -8						; size = 4
_ret$ = -4						; size = 4
?generate_keyboard_events@@YGXXZ PROC			; generate_keyboard_events, COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 288  : 
; 289  : 	HRESULT
; 290  : 		ret;
; 291  : 
; 292  : 	DWORD
; 293  : 		items,
; 294  : 		count;
; 295  : 
; 296  : 	if ( direct_input_keyboard )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A, 0
  00010	0f 84 c0 00 00
	00		 je	 $LN1@generate_k

; 297  : 	{
; 298  : 
; 299  : 		ret = IDirectInputDevice7_Acquire ( direct_input_keyboard );

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00023	52		 push	 edx
  00024	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00027	ff d0		 call	 eax
  00029	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 300  : 
; 301  : 		if ( ( ret == DI_OK ) || ( ret == S_FALSE ) )

  0002c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00030	74 0a		 je	 SHORT $LN9@generate_k
  00032	83 7d fc 01	 cmp	 DWORD PTR _ret$[ebp], 1
  00036	0f 85 9a 00 00
	00		 jne	 $LN1@generate_k
$LN9@generate_k:

; 302  : 		{
; 303  : 
; 304  : 			ret = DI_BUFFEROVERFLOW;

  0003c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1
$LN2@generate_k:

; 305  : 
; 306  : 			while ( ret == DI_BUFFEROVERFLOW )

  00043	83 7d fc 01	 cmp	 DWORD PTR _ret$[ebp], 1
  00047	0f 85 89 00 00
	00		 jne	 $LN1@generate_k

; 307  : 			{
; 308  : 
; 309  : 				//
; 310  : 				// Get the keyboard events.
; 311  : 				//
; 312  : 
; 313  : 				items = MAX_DI_KEY_EVENTS;

  0004d	c7 45 f8 00 01
	00 00		 mov	 DWORD PTR _items$[ebp], 256 ; 00000100H

; 314  : 
; 315  : 				ret = IDirectInputDevice7_GetDeviceData ( direct_input_keyboard,

  00054	6a 00		 push	 0
  00056	8d 45 f8	 lea	 eax, DWORD PTR _items$[ebp]
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ?direct_input_key_events@@3PAUDIDEVICEOBJECTDATA@@A
  0005f	6a 10		 push	 16			; 00000010H
  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00067	8b 11		 mov	 edx, DWORD PTR [ecx]
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0006e	50		 push	 eax
  0006f	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00072	ff d1		 call	 ecx
  00074	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 316  : 																			sizeof ( DIDEVICEOBJECTDATA ),
; 317  : 																			direct_input_key_events,
; 318  : 																			&items,
; 319  : 																			0 );
; 320  : 
; 321  : 				for ( count = 0; count < items; count++ )

  00077	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0007e	eb 09		 jmp	 SHORT $LN6@generate_k
$LN4@generate_k:
  00080	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  00083	83 c0 01	 add	 eax, 1
  00086	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN6@generate_k:
  00089	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0008c	3b 45 f8	 cmp	 eax, DWORD PTR _items$[ebp]
  0008f	73 40		 jae	 SHORT $LN5@generate_k

; 322  : 				{
; 323  : 
; 324  : 					if ( direct_input_key_events[count].dwData & 0x80 )	// & DIDFT_BUTTON )

  00091	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  00094	c1 e0 04	 shl	 eax, 4
  00097	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?direct_input_key_events@@3PAUDIDEVICEOBJECTDATA@@A[eax+4]
  0009d	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  000a3	74 16		 je	 SHORT $LN10@generate_k

; 325  : 					{
; 326  : 
; 327  : 						create_key_event ( direct_input_key_events[count].dwOfs, KEY_STATE_DOWN );

  000a5	6a 02		 push	 2
  000a7	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000aa	c1 e0 04	 shl	 eax, 4
  000ad	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?direct_input_key_events@@3PAUDIDEVICEOBJECTDATA@@A[eax]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ?create_key_event@@YGXHW4KEY_STATES@@@Z ; create_key_event

; 328  : 					}
; 329  : 					else

  000b9	eb 14		 jmp	 SHORT $LN11@generate_k
$LN10@generate_k:

; 330  : 					{
; 331  : 
; 332  : 						create_key_event ( direct_input_key_events[count].dwOfs, KEY_STATE_UP );

  000bb	6a 01		 push	 1
  000bd	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000c0	c1 e0 04	 shl	 eax, 4
  000c3	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?direct_input_key_events@@3PAUDIDEVICEOBJECTDATA@@A[eax]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ?create_key_event@@YGXHW4KEY_STATES@@@Z ; create_key_event
$LN11@generate_k:

; 333  : 					}
; 334  : 				}

  000cf	eb af		 jmp	 SHORT $LN4@generate_k
$LN5@generate_k:

; 335  : 			}

  000d1	e9 6d ff ff ff	 jmp	 $LN2@generate_k
$LN1@generate_k:

; 336  : 		}
; 337  : 	}
; 338  : }

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
?generate_keyboard_events@@YGXXZ ENDP			; generate_keyboard_events
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?keyboard_activation_routine@@YGXH@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_activate$ = 8						; size = 4
?keyboard_activation_routine@@YGXH@Z PROC		; keyboard_activation_routine, COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 234  : 
; 235  : 	HRESULT
; 236  : 		ret;
; 237  : 
; 238  : 	if ( direct_input_keyboard )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A, 0
  00010	74 6f		 je	 SHORT $LN1@keyboard_a

; 239  : 	{
; 240  : 
; 241  : 		if ( !activate )

  00012	83 7d 08 00	 cmp	 DWORD PTR _activate$[ebp], 0
  00016	75 22		 jne	 SHORT $LN3@keyboard_a

; 242  : 		{
; 243  : 
; 244  : 			//
; 245  : 			// About the LOSE focus
; 246  : 			//
; 247  : 
; 248  : 			debug_log ( "Unacquiring keyboard" );

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LIDIBPJI@Unacquiring?5keyboard@
  0001d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00022	83 c4 04	 add	 esp, 4

; 249  : 
; 250  : 			IDirectInputDevice7_Unacquire ( direct_input_keyboard );

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00032	52		 push	 edx
  00033	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00036	ff d0		 call	 eax

; 251  : 		}
; 252  : 		else

  00038	eb 47		 jmp	 SHORT $LN1@keyboard_a
$LN3@keyboard_a:

; 253  : 		{
; 254  : 
; 255  : 			//
; 256  : 			// About to GAIN focus
; 257  : 			//
; 258  : 
; 259  : 			debug_log ( "Acquiring keyboard" );

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BGKAGCK@Acquiring?5keyboard@
  0003f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00044	83 c4 04	 add	 esp, 4

; 260  : 
; 261  : 			ret = IDirectInputDevice7_Acquire ( direct_input_keyboard );

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00054	52		 push	 edx
  00055	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00058	ff d0		 call	 eax
  0005a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 262  : 
; 263  : 			if ( ret != DI_OK )

  0005d	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00061	74 0d		 je	 SHORT $LN5@keyboard_a

; 264  : 			{
; 265  : 
; 266  : 				debug_log ( "Failed to acquire keyboard device" );

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PMDNHKOE@Failed?5to?5acquire?5keyboard?5devi@
  00068	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0006d	83 c4 04	 add	 esp, 4
$LN5@keyboard_a:

; 267  : 			}
; 268  : 
; 269  : 			SetFocus ( application_window );

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00075	50		 push	 eax
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 270  : 
; 271  : 			//
; 272  : 			// Reset the events
; 273  : 			//
; 274  : 
; 275  : 			reset_events ();

  0007c	e8 00 00 00 00	 call	 ?reset_events@@YGXXZ	; reset_events
$LN1@keyboard_a:

; 276  : 
; 277  : 	//		SetEvent ( keyboard_handle );
; 278  : 		}
; 279  : 	}
; 280  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?keyboard_activation_routine@@YGXH@Z ENDP		; keyboard_activation_routine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?deinitialise_keyboard@@YGXXZ
_TEXT	SEGMENT
?deinitialise_keyboard@@YGXXZ PROC			; deinitialise_keyboard, COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 212  : 
; 213  : 	if ( direct_input_keyboard )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A, 0
  00010	74 46		 je	 SHORT $LN1@deinitiali

; 214  : 	{
; 215  : 
; 216  : 		IDirectInputDevice7_Unacquire ( direct_input_keyboard );

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0001f	52		 push	 edx
  00020	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00023	ff d0		 call	 eax

; 217  : 
; 218  : 		IDirectInputDevice7_Release ( direct_input_keyboard );

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00032	52		 push	 edx
  00033	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00036	ff d0		 call	 eax

; 219  : 
; 220  : 		CloseHandle ( keyboard_handle );

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?keyboard_handle@@3PAXA ; keyboard_handle
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 221  : 
; 222  : 		keyboard_handle = NULL;

  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?keyboard_handle@@3PAXA, 0 ; keyboard_handle

; 223  : 
; 224  : 		direct_input_keyboard = NULL;

  0004e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A, 0
$LN1@deinitiali:

; 225  : 	}
; 226  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?deinitialise_keyboard@@YGXXZ ENDP			; deinitialise_keyboard
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyboard.c
;	COMDAT ?initialise_keyboard@@YGXXZ
_TEXT	SEGMENT
_di_buffer_data$ = -24					; size = 20
_ret$ = -4						; size = 4
?initialise_keyboard@@YGXXZ PROC			; initialise_keyboard, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 117  : 
; 118  : 	HRESULT
; 119  : 		ret;
; 120  : 
; 121  : 	DIPROPDWORD
; 122  : 		di_buffer_data;
; 123  : 
; 124  : 	if ( input_system_type == INPUT_DIRECTINPUT )

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?input_system_type@@3W4INPUT_TYPES@@A, 1 ; input_system_type
  00010	0f 85 67 01 00
	00		 jne	 $LN2@initialise

; 125  : 	{
; 126  : 
; 127  : 		ret = IDirectInput7_CreateDeviceEx ( direct_input, GUID_PREFIX GUID_SysKeyboard, GUID_PREFIX IID_IDirectInputDevice7, (LPVOID *) &direct_input_keyboard, NULL );

  00016	6a 00		 push	 0
  00018	68 00 00 00 00	 push	 OFFSET ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0001d	68 00 00 00 00	 push	 OFFSET _IID_IDirectInputDevice7A
  00022	68 00 00 00 00	 push	 OFFSET _GUID_SysKeyboard
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input@@3PAUIDirectInput7A@@A ; direct_input
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input@@3PAUIDirectInput7A@@A ; direct_input
  00034	52		 push	 edx
  00035	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00038	ff d0		 call	 eax
  0003a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 128  : 
; 129  : 		if (ret != DI_OK )

  0003d	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00041	74 05		 je	 SHORT $LN4@initialise

; 130  : 		{
; 131  : 
; 132  : 			return;

  00043	e9 71 01 00 00	 jmp	 $LN1@initialise
$LN4@initialise:

; 133  : 		}
; 134  : 
; 135  : 		ret = IDirectInputDevice7_SetDataFormat ( direct_input_keyboard, &c_dfDIKeyboard );

  00048	68 00 00 00 00	 push	 OFFSET _c_dfDIKeyboard
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0005a	52		 push	 edx
  0005b	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0005e	ff d0		 call	 eax
  00060	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 136  : 
; 137  : 		if ( ret != DI_OK )

  00063	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00067	74 05		 je	 SHORT $LN5@initialise

; 138  : 		{
; 139  : 
; 140  : 			return;

  00069	e9 4b 01 00 00	 jmp	 $LN1@initialise
$LN5@initialise:

; 141  : 		}
; 142  : 
; 143  : 		ret = IDirectInputDevice7_SetCooperativeLevel ( direct_input_keyboard, application_window, DISCL_FOREGROUND | DISCL_NONEXCLUSIVE );

  0006e	6a 06		 push	 6
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00075	50		 push	 eax
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00083	50		 push	 eax
  00084	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  00087	ff d1		 call	 ecx
  00089	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 144  : 
; 145  : 		if ( ret != DI_OK )

  0008c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00090	74 05		 je	 SHORT $LN6@initialise

; 146  : 		{
; 147  : 
; 148  : 			return;

  00092	e9 22 01 00 00	 jmp	 $LN1@initialise
$LN6@initialise:

; 149  : 		}
; 150  : 
; 151  : 		keyboard_handle = CreateEvent ( 0, 0, 0, 0 );

  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  000a5	a3 00 00 00 00	 mov	 DWORD PTR ?keyboard_handle@@3PAXA, eax ; keyboard_handle

; 152  : 
; 153  : 		if ( keyboard_handle == NULL )

  000aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?keyboard_handle@@3PAXA, 0 ; keyboard_handle
  000b1	75 0d		 jne	 SHORT $LN7@initialise

; 154  : 		{
; 155  : 
; 156  : 			debug_fatal ( "Unable to create a handle for the keyboard" );

  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GPLGLGMM@Unable?5to?5create?5a?5handle?5for?5t@
  000b8	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000bd	83 c4 04	 add	 esp, 4
$LN7@initialise:

; 157  : 		}
; 158  : 
; 159  : 		ret = IDirectInputDevice7_SetEventNotification ( direct_input_keyboard, keyboard_handle );

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?keyboard_handle@@3PAXA ; keyboard_handle
  000c5	50		 push	 eax
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  000cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  000d3	50		 push	 eax
  000d4	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  000d7	ff d1		 call	 ecx
  000d9	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 160  : 
; 161  : 		if ( ret != DI_OK )

  000dc	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000e0	74 0d		 je	 SHORT $LN8@initialise

; 162  : 		{
; 163  : 
; 164  : 			debug_fatal ( "Unable to set event notification for the keyboard" );

  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@IKMKOHDI@Unable?5to?5set?5event?5notificatio@
  000e7	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000ec	83 c4 04	 add	 esp, 4
$LN8@initialise:

; 165  : 		}
; 166  : 
; 167  : 		//
; 168  : 		// Set the hardware buffering of the keyboard
; 169  : 		//
; 170  : 
; 171  : 		di_buffer_data.diph.dwSize = sizeof ( DIPROPDWORD );

  000ef	c7 45 e8 14 00
	00 00		 mov	 DWORD PTR _di_buffer_data$[ebp], 20 ; 00000014H

; 172  : 		di_buffer_data.diph.dwHeaderSize = sizeof ( DIPROPHEADER );

  000f6	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _di_buffer_data$[ebp+4], 16 ; 00000010H

; 173  : 		di_buffer_data.diph.dwObj = 0;

  000fd	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _di_buffer_data$[ebp+8], 0

; 174  : 		di_buffer_data.diph.dwHow = DIPH_DEVICE;

  00104	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _di_buffer_data$[ebp+12], 0

; 175  : 		di_buffer_data.dwData = KEYBOARD_BUFFER_SIZE;

  0010b	c7 45 f8 00 01
	00 00		 mov	 DWORD PTR _di_buffer_data$[ebp+16], 256 ; 00000100H

; 176  : 
; 177  : 		ret = IDirectInputDevice7_SetProperty ( direct_input_keyboard, DIPROP_BUFFERSIZE, &di_buffer_data.diph );

  00112	8d 45 e8	 lea	 eax, DWORD PTR _di_buffer_data$[ebp]
  00115	50		 push	 eax
  00116	6a 01		 push	 1
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0011e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00125	50		 push	 eax
  00126	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00129	ff d1		 call	 ecx
  0012b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 178  : 
; 179  : 		if ( ret != DI_OK )

  0012e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00132	74 0d		 je	 SHORT $LN9@initialise

; 180  : 		{
; 181  : 
; 182  : 			debug_fatal ( "Unable to set the keyboard buffer size" );

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JMPBDMDB@Unable?5to?5set?5the?5keyboard?5buff@
  00139	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0013e	83 c4 04	 add	 esp, 4
$LN9@initialise:

; 183  : 		}
; 184  : 
; 185  : 		register_pre_activate_message_function ( keyboard_activation_routine );

  00141	68 00 00 00 00	 push	 OFFSET ?keyboard_activation_routine@@YGXH@Z ; keyboard_activation_routine
  00146	e8 00 00 00 00	 call	 ?register_pre_activate_message_function@@YGHP6GXH@Z@Z ; register_pre_activate_message_function

; 186  : 
; 187  : 		IDirectInputDevice7_Acquire ( direct_input_keyboard );

  0014b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00150	8b 08		 mov	 ecx, DWORD PTR [eax]
  00152	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00158	52		 push	 edx
  00159	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0015c	ff d0		 call	 eax

; 188  : 
; 189  : 		IDirectInputDevice7_GetDeviceState ( direct_input_keyboard, 256, key_states );

  0015e	68 00 00 00 00	 push	 OFFSET ?key_states@@3PAEA
  00163	68 00 01 00 00	 push	 256			; 00000100H
  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  0016d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?direct_input_keyboard@@3PAUIDirectInputDevice7A@@A
  00175	52		 push	 edx
  00176	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00179	ff d0		 call	 eax

; 190  : 
; 191  : 	}
; 192  : 	else

  0017b	eb 3c		 jmp	 SHORT $LN1@initialise
$LN2@initialise:

; 193  : 	{
; 194  : 
; 195  : 		//
; 196  : 		// Assumes the only other input system is windows
; 197  : 		//
; 198  : 
; 199  : 		register_system_message_function ( WM_KEYUP, windows_key_up_routine );

  0017d	68 00 00 00 00	 push	 OFFSET ?windows_key_up_routine@@YGJPAUHWND__@@IIJ@Z ; windows_key_up_routine
  00182	68 01 01 00 00	 push	 257			; 00000101H
  00187	e8 00 00 00 00	 call	 ?register_system_message_function@@YGHHP6GJPAUHWND__@@IIJ@Z@Z ; register_system_message_function

; 200  : 		register_system_message_function ( WM_SYSKEYUP, windows_key_up_routine );

  0018c	68 00 00 00 00	 push	 OFFSET ?windows_key_up_routine@@YGJPAUHWND__@@IIJ@Z ; windows_key_up_routine
  00191	68 05 01 00 00	 push	 261			; 00000105H
  00196	e8 00 00 00 00	 call	 ?register_system_message_function@@YGHHP6GJPAUHWND__@@IIJ@Z@Z ; register_system_message_function

; 201  : 		register_system_message_function ( WM_KEYDOWN, windows_key_down_routine );

  0019b	68 00 00 00 00	 push	 OFFSET ?windows_key_down_routine@@YGJPAUHWND__@@IIJ@Z ; windows_key_down_routine
  001a0	68 00 01 00 00	 push	 256			; 00000100H
  001a5	e8 00 00 00 00	 call	 ?register_system_message_function@@YGHHP6GJPAUHWND__@@IIJ@Z@Z ; register_system_message_function

; 202  : 		register_system_message_function ( WM_SYSKEYDOWN, windows_key_down_routine );

  001aa	68 00 00 00 00	 push	 OFFSET ?windows_key_down_routine@@YGJPAUHWND__@@IIJ@Z ; windows_key_down_routine
  001af	68 04 01 00 00	 push	 260			; 00000104H
  001b4	e8 00 00 00 00	 call	 ?register_system_message_function@@YGHHP6GJPAUHWND__@@IIJ@Z@Z ; register_system_message_function
$LN1@initialise:

; 203  : 	}
; 204  : }

  001b9	5f		 pop	 edi
  001ba	5e		 pop	 esi
  001bb	5b		 pop	 ebx
  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c3		 ret	 0
?initialise_keyboard@@YGXXZ ENDP			; initialise_keyboard
_TEXT	ENDS
END
