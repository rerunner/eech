; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\terrain\terrdata.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A	; terrain_sectors
PUBLIC	?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
PUBLIC	?terrain_3d_sector_x_max@@3HA			; terrain_3d_sector_x_max
PUBLIC	?terrain_3d_sector_z_max@@3HA			; terrain_3d_sector_z_max
PUBLIC	?terrain_3d_min_map_x@@3MA			; terrain_3d_min_map_x
PUBLIC	?terrain_3d_min_map_z@@3MA			; terrain_3d_min_map_z
PUBLIC	?terrain_3d_max_map_x@@3MA			; terrain_3d_max_map_x
PUBLIC	?terrain_3d_max_map_z@@3MA			; terrain_3d_max_map_z
PUBLIC	?terrain_colour_conversion_table@@3PAMA		; terrain_colour_conversion_table
PUBLIC	?terrain_3d_alpha_start@@3MA			; terrain_3d_alpha_start
PUBLIC	?terrain_3d_alpha_end@@3MA			; terrain_3d_alpha_end
PUBLIC	?terrain_3d_alpha_distance@@3MA			; terrain_3d_alpha_distance
PUBLIC	?terrain_3d_alpha_constant@@3MA			; terrain_3d_alpha_constant
PUBLIC	?terrain_3d_alpha_factor@@3MA			; terrain_3d_alpha_factor
PUBLIC	?terrain_3d_map_minimum_height@@3MA		; terrain_3d_map_minimum_height
PUBLIC	?terrain_3d_map_maximum_height@@3MA		; terrain_3d_map_maximum_height
PUBLIC	?terrain_3d_map_scaled_height_difference@@3MA	; terrain_3d_map_scaled_height_difference
PUBLIC	?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_tree_object
PUBLIC	?terrain_3d_tree_rendering_enabled@@3HA		; terrain_3d_tree_rendering_enabled
PUBLIC	?terrain_types_in_sector@@3PAHA			; terrain_types_in_sector
PUBLIC	?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A ; current_terrain_version
PUBLIC	?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
PUBLIC	?terrain_3d_cloud_puff_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_cloud_puff_object
PUBLIC	?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A ; terrain_3d_cloud_puff_colours
PUBLIC	?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_memory
PUBLIC	?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
PUBLIC	?terrain_3d_map_width@@3HA			; terrain_3d_map_width
PUBLIC	?terrain_3d_map_height@@3HA			; terrain_3d_map_height
PUBLIC	?terrain_3d_tree_map_width@@3HA			; terrain_3d_tree_map_width
PUBLIC	?terrain_3d_tree_map_height@@3HA		; terrain_3d_tree_map_height
PUBLIC	?terrain_3d_number_of_sector_approximations@@3HA ; terrain_3d_number_of_sector_approximations
PUBLIC	?terrain_3d_alpha_fog_factor@@3MA		; terrain_3d_alpha_fog_factor
PUBLIC	?white_col@@3PAUTERRAIN_3D_COLOUR@@A		; white_col
_BSS	SEGMENT
?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A DD 01H DUP (?) ; terrain_sectors
?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A DD 01H DUP (?) ; terrain_tree_sectors
?terrain_3d_sector_x_max@@3HA DD 01H DUP (?)		; terrain_3d_sector_x_max
?terrain_3d_sector_z_max@@3HA DD 01H DUP (?)		; terrain_3d_sector_z_max
?terrain_3d_min_map_x@@3MA DD 01H DUP (?)		; terrain_3d_min_map_x
?terrain_3d_min_map_z@@3MA DD 01H DUP (?)		; terrain_3d_min_map_z
?terrain_3d_max_map_x@@3MA DD 01H DUP (?)		; terrain_3d_max_map_x
?terrain_3d_max_map_z@@3MA DD 01H DUP (?)		; terrain_3d_max_map_z
?terrain_colour_conversion_table@@3PAMA DD 0100H DUP (?) ; terrain_colour_conversion_table
?terrain_3d_alpha_start@@3MA DD 01H DUP (?)		; terrain_3d_alpha_start
?terrain_3d_alpha_end@@3MA DD 01H DUP (?)		; terrain_3d_alpha_end
?terrain_3d_alpha_distance@@3MA DD 01H DUP (?)		; terrain_3d_alpha_distance
?terrain_3d_alpha_constant@@3MA DD 01H DUP (?)		; terrain_3d_alpha_constant
?terrain_3d_alpha_factor@@3MA DD 01H DUP (?)		; terrain_3d_alpha_factor
?terrain_3d_map_minimum_height@@3MA DD 01H DUP (?)	; terrain_3d_map_minimum_height
?terrain_3d_map_maximum_height@@3MA DD 01H DUP (?)	; terrain_3d_map_maximum_height
?terrain_3d_map_scaled_height_difference@@3MA DD 01H DUP (?) ; terrain_3d_map_scaled_height_difference
?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A DD 01H DUP (?) ; terrain_3d_tree_object
?terrain_types_in_sector@@3PAHA DD 03eH DUP (?)		; terrain_types_in_sector
?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A DD 01H DUP (?) ; current_terrain_version
?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A DD 01H DUP (?) ; terrain_cloud_puff_sectors
?terrain_3d_cloud_puff_object@@3PAUOBJECT_3D_INSTANCE@@A DD 01H DUP (?) ; terrain_3d_cloud_puff_object
?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A DD 01H DUP (?) ; terrain_3d_cloud_puff_colours
?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A DD 01H DUP (?) ; terrain_sector_memory
?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A DD 01H DUP (?) ; terrain_sector_approximations
?terrain_3d_map_width@@3HA DD 01H DUP (?)		; terrain_3d_map_width
?terrain_3d_map_height@@3HA DD 01H DUP (?)		; terrain_3d_map_height
?terrain_3d_tree_map_width@@3HA DD 01H DUP (?)		; terrain_3d_tree_map_width
?terrain_3d_tree_map_height@@3HA DD 01H DUP (?)		; terrain_3d_tree_map_height
?terrain_3d_number_of_sector_approximations@@3HA DD 01H DUP (?) ; terrain_3d_number_of_sector_approximations
?terrain_3d_alpha_fog_factor@@3MA DD 01H DUP (?)	; terrain_3d_alpha_fog_factor
?white_col@@3PAUTERRAIN_3D_COLOUR@@A DB 02f70H DUP (?)	; white_col
_BSS	ENDS
_DATA	SEGMENT
?terrain_3d_tree_rendering_enabled@@3HA DD 01H		; terrain_3d_tree_rendering_enabled
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	?initialise_3d_terrain@@YGXXZ			; initialise_3d_terrain
PUBLIC	?set_3d_terrain_detail_blend_parameters@@YGXM@Z	; set_3d_terrain_detail_blend_parameters
PUBLIC	?set_3d_terrain_detail_blend_factors@@YGXXZ	; set_3d_terrain_detail_blend_factors
PUBLIC	?load_3d_terrain@@YGHPBD@Z			; load_3d_terrain
PUBLIC	?unload_3d_terrain@@YGXXZ			; unload_3d_terrain
PUBLIC	?save_terrain_sector_as_lw_3d_object@@YGXHHPBD@Z ; save_terrain_sector_as_lw_3d_object
PUBLIC	?get_terrain_3d_sector@@YGXMMPAH0@Z		; get_terrain_3d_sector
PUBLIC	?position_on_3d_terrain@@YGHMM@Z		; position_on_3d_terrain
PUBLIC	?animate_river_textures@@YGXXZ			; animate_river_textures
PUBLIC	?get_terrain_3d_point_sector_min_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_min_elevation
PUBLIC	?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_max_elevation
PUBLIC	?get_terrain_3d_point_sector_average_elevation@@YGMMM@Z ; get_terrain_3d_point_sector_average_elevation
PUBLIC	?get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z ; get_terrain_3d_tree_sector_data
PUBLIC	?get_terrain_3d_tree_scale@@YGMPAUTERRAIN_3D_TREE_DATA@@@Z ; get_terrain_3d_tree_scale
PUBLIC	?get_terrain_3d_types_in_sector@@YGHMM@Z	; get_terrain_3d_types_in_sector
PUBLIC	?get_terrain_3d_number_of_type_triangles_in_sector@@YGHMMH@Z ; get_terrain_3d_number_of_type_triangles_in_sector
PUBLIC	?get_terrain_3d_type_triangles_in_sector@@YGXMMHPAUTERRAIN_3D_TRIANGLE@@@Z ; get_terrain_3d_type_triangles_in_sector
PUBLIC	?set_terrain_3d_cloud_puffs_colours@@YGXXZ	; set_terrain_3d_cloud_puffs_colours
PUBLIC	?initialise_3d_terrain_colour_conversion_table@@YGXXZ ; initialise_3d_terrain_colour_conversion_table
PUBLIC	?set_all_types@@YGXH@Z				; set_all_types
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??load_3d_terrain@@YGHPBD@Z@4JA	; `load_3d_terrain'::`1'::__LINE__Var
PUBLIC	??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BF@NMLPDENP@?$CBterrain_initialised@	; `string'
PUBLIC	??_C@_0P@IPDOGKPJ@?$CFs?2terrain?4ffp@		; `string'
PUBLIC	??_C@_0P@DEMELBMO@?$CFs?2default?4sec@		; `string'
PUBLIC	??_C@_0P@JGOHDDIE@?$CFs?2default?4rgb@		; `string'
PUBLIC	??_C@_0BB@DLDMBPML@?$CFs?2default?9W?4sec@	; `string'
PUBLIC	??_C@_0BB@JJBPJNIB@?$CFs?2default?9W?4rgb@	; `string'
PUBLIC	??_C@_0BA@DGMIPHHP@?$CFs?2tree_pos?4sec@	; `string'
PUBLIC	??_C@_0BA@PJIMLEBD@?$CFs?2tree_pos?4dat@	; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0BL@BEJICLEB@Terrain?5minimum?5height?3?5?$CFf@ ; `string'
PUBLIC	??_C@_0BL@LDKMKLDI@Terrain?5maximum?5height?3?5?$CFf@ ; `string'
PUBLIC	??_C@_0EB@DNPGHNHO@terrain_sectors?$FLz?$FN?$FLx?$FN?4number_of@ ; `string'
PUBLIC	??_C@_0BM@KNDGDHLC@Got?5?$CFd?5approximated?5sectors@ ; `string'
PUBLIC	??_C@_0BG@EIOAAFPP@TERRAIN?5HAS?5?$CFd?5points@	; `string'
PUBLIC	??_C@_0DH@JMECDHE@?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD@ ; `string'
PUBLIC	??_C@_0DH@CIGFODFL@TREE?5DATA?5DOES?5NOT?5MATCH?5TERRAI@ ; `string'
PUBLIC	??_C@_0CO@DJDGKPCI@TREE?5SECTORS?3?5?$CFd?0?5?$CFd?5?9?5TERRAIN?5@ ; `string'
PUBLIC	??_C@_0BG@BHENJFKM@READ?5IN?5THE?5TREE?5DATA@	; `string'
PUBLIC	??_C@_0BD@GBAKOJAB@FOREST_TREE_OBJECT@		; `string'
PUBLIC	??_C@_0CA@OPOJCIGG@Cant?5find?5the?5terrain?5tree?5data@ ; `string'
PUBLIC	??_C@_05GHOHLNOH@CLOUD@				; `string'
PUBLIC	??_C@_0BG@HPLMODEG@Points?5in?5terrain?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BH@EEENEKCK@Points?5transformed?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BF@GDOCGBB@Faces?5considered?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BD@EMPNLHAK@Faces?5outcoded?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BG@GPPCEOFH@Faces?5constructed?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BD@NINPMBOH@Faces?5rejected?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BJ@NMFACPJ@Faces?5hither?5clipped?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BJ@EEMMDPEA@Faces?5screen?5clipped?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BF@JDILEJBP@Sectors?5inserted?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BM@JABAEDPM@Sectors?5totally?5visible?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BN@GCHKGONB@Sectors?5trivially?5culled?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BL@GLIFIJOD@Sectors?5complex?5culled?3?5?$CFd@ ; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_04HPGCGPG@FORM@				; `string'
PUBLIC	??_C@_04ELINGNML@LWOB@				; `string'
PUBLIC	??_C@_04MCOLIFDF@SRFS@				; `string'
PUBLIC	??_C@_04OAGCANIB@?$CF07d@			; `string'
PUBLIC	??_C@_04IACGGANM@PNTS@				; `string'
PUBLIC	??_C@_04CKKPPFHB@POLS@				; `string'
PUBLIC	??_C@_04HDKGFADE@SURF@				; `string'
PUBLIC	??_C@_04BEPECJGC@COLR@				; `string'
PUBLIC	?__LINE__Var@?0??get_terrain_3d_point_sector_min_elevation@@YGMMM@Z@4JA ; `get_terrain_3d_point_sector_min_elevation'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@JKHMMMJP@terrain_initialised@		; `string'
PUBLIC	??_C@_0DB@KOBGDPLC@Sector?5minimum?5terrain?5elevatio@ ; `string'
PUBLIC	?__LINE__Var@?0??get_terrain_3d_point_sector_max_elevation@@YGMMM@Z@4JA ; `get_terrain_3d_point_sector_max_elevation'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_terrain_3d_point_sector_average_elevation@@YGMMM@Z@4JA ; `get_terrain_3d_point_sector_average_elevation'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z@4JA ; `get_terrain_3d_tree_sector_data'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@NAGMKNCH@x?5?$DM?5terrain_3d_sector_x_max@ ; `string'
PUBLIC	??_C@_0BM@JOMPPGBG@z?5?$DM?5terrain_3d_sector_z_max@ ; `string'
PUBLIC	??_C@_06EBODONHD@x?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_06NGHMPMFK@z?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f800000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc3264c993264ca
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@4018000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40a0000000000000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40e0000000000000
PUBLIC	__real@437f0000
PUBLIC	__real@45000000
PUBLIC	__real@46fffe00
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	__imp__rand:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__isdigit:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?set_fpu_rounding_mode_zero@@YGXXZ:PROC		; set_fpu_rounding_mode_zero
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z:PROC ; debug_colour_watch
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?mclose@@YGHPAX@Z:PROC				; mclose
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?safe_mopen@@YGPAXPBD@Z:PROC			; safe_mopen
EXTRN	?safe_mclose@@YGHPAX@Z:PROC			; safe_mclose
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?destruct_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z:PROC ; destruct_3d_object
EXTRN	?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z:PROC ; construct_3d_object_by_name
EXTRN	?initialise_3d_terrain_rendering_routines@@YGXH@Z:PROC ; initialise_3d_terrain_rendering_routines
EXTRN	?initialise_3d_terrain_types@@YGXXZ:PROC	; initialise_3d_terrain_types
EXTRN	?initialise_3d_terrain_map_specific_texture_indices@@YGXXZ:PROC ; initialise_3d_terrain_map_specific_texture_indices
EXTRN	?initialise_3d_terrain_elevation@@YGXXZ:PROC	; initialise_3d_terrain_elevation
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?initialise_3d_terrain_normals@@YGXXZ:PROC	; initialise_3d_terrain_normals
EXTRN	?initialise_terrain_objects@@YGXXZ:PROC		; initialise_terrain_objects
EXTRN	?unload_terrain_simple_elevation_grid@@YGXXZ:PROC ; unload_terrain_simple_elevation_grid
EXTRN	?iff_float_write@@YGXMPAU_iobuf@@@Z:PROC	; iff_float_write
EXTRN	?iff_int_write@@YGXHPAU_iobuf@@@Z:PROC		; iff_int_write
EXTRN	?iff_short_int_write@@YGXFPAU_iobuf@@@Z:PROC	; iff_short_int_write
EXTRN	__chkstk:PROC
EXTRN	?d3d_fog_start@@3MA:DWORD			; d3d_fog_start
EXTRN	?d3d_fog_end@@3MA:DWORD				; d3d_fog_end
EXTRN	?system_textures@@3PAPAUSCREEN@@A:BYTE		; system_textures
EXTRN	?current_map_info@@3UCUSTOM_MAP_INFO@@A:BYTE	; current_map_info
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A:BYTE ; terrain_type_information
EXTRN	?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A:DWORD ; terrain_3d_sector_point_byte_references
EXTRN	?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A:DWORD ; terrain_3d_sector_point_word_references
EXTRN	?current_terrain_type@@3HA:DWORD		; current_terrain_type
EXTRN	?terrain_3d_xz_scale@@3MA:DWORD			; terrain_3d_xz_scale
EXTRN	?terrain_texture_mag_filter@@3HA:DWORD		; terrain_texture_mag_filter
EXTRN	?terrain_texture_min_filter@@3HA:DWORD		; terrain_texture_min_filter
EXTRN	?terrain_texture_mip_filter@@3HA:DWORD		; terrain_texture_mip_filter
EXTRN	?final_total_number_of_terrain_points@@3HA:DWORD ; final_total_number_of_terrain_points
EXTRN	?final_total_number_of_terrain_points_transformed@@3HA:DWORD ; final_total_number_of_terrain_points_transformed
EXTRN	?final_terrain_3d_faces_considered@@3HA:DWORD	; final_terrain_3d_faces_considered
EXTRN	?final_terrain_3d_faces_outcoded@@3HA:DWORD	; final_terrain_3d_faces_outcoded
EXTRN	?final_terrain_3d_faces_hither_clipped@@3HA:DWORD ; final_terrain_3d_faces_hither_clipped
EXTRN	?final_terrain_3d_faces_screen_clipped@@3HA:DWORD ; final_terrain_3d_faces_screen_clipped
EXTRN	?final_terrain_3d_faces_constructed@@3HA:DWORD	; final_terrain_3d_faces_constructed
EXTRN	?final_terrain_3d_faces_rejected@@3HA:DWORD	; final_terrain_3d_faces_rejected
EXTRN	?final_terrain_3d_sectors_inserted@@3HA:DWORD	; final_terrain_3d_sectors_inserted
EXTRN	?final_terrain_3d_sectors_totally_visible@@3HA:DWORD ; final_terrain_3d_sectors_totally_visible
EXTRN	?final_terrain_3d_sectors_trivially_culled@@3HA:DWORD ; final_terrain_3d_sectors_trivially_culled
EXTRN	?final_terrain_3d_sectors_complex_culled@@3HA:DWORD ; final_terrain_3d_sectors_complex_culled
EXTRN	?command_line_cloud_puffs@@3HA:DWORD		; command_line_cloud_puffs
EXTRN	?command_line_render_tree_shadows@@3HA:DWORD	; command_line_render_tree_shadows
EXTRN	?command_line_texture_colour@@3HA:DWORD		; command_line_texture_colour
EXTRN	?global_anisotropic@@3HA:DWORD			; global_anisotropic
EXTRN	?number_of_cloud_puffs_colours@@3HA:DWORD	; number_of_cloud_puffs_colours
EXTRN	?cloud_puffs_colours@@3PAUREAL_COLOUR@@A:DWORD	; cloud_puffs_colours
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?terrain_3d_geometry_data@@3PAEA DD 01H DUP (?)		; terrain_3d_geometry_data
?terrain_3d_colour_data@@3PAEA DD 01H DUP (?)		; terrain_3d_colour_data
?terrain_3d_trees_data@@3PAEA DD 01H DUP (?)		; terrain_3d_trees_data
?terrain_initialised@@3HA DD 01H DUP (?)		; terrain_initialised
_BSS	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40e0000000000000
CONST	SEGMENT
__real@40e0000000000000 DQ 040e0000000000000r	; 32768
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a0000000000000
CONST	SEGMENT
__real@40a0000000000000 DQ 040a0000000000000r	; 2048
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc3264c993264ca
CONST	SEGMENT
__real@3fc3264c993264ca DQ 03fc3264c993264car	; 0.149606
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGHMPMFK@z?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06NGHMPMFK@z?5?$DO?$DN?50@ DB 'z >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBODONHD@x?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06EBODONHD@x?5?$DO?$DN?50@ DB 'x >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JOMPPGBG@z?5?$DM?5terrain_3d_sector_z_max@
CONST	SEGMENT
??_C@_0BM@JOMPPGBG@z?5?$DM?5terrain_3d_sector_z_max@ DB 'z < terrain_3d_s'
	DB	'ector_z_max', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NAGMKNCH@x?5?$DM?5terrain_3d_sector_x_max@
CONST	SEGMENT
??_C@_0BM@NAGMKNCH@x?5?$DM?5terrain_3d_sector_x_max@ DB 'x < terrain_3d_s'
	DB	'ector_x_max', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z@4JA DD 0675H ; `get_terrain_3d_tree_sector_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_terrain_3d_point_sector_average_elevation@@YGMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_terrain_3d_point_sector_average_elevation@@YGMMM@Z@4JA DD 065dH ; `get_terrain_3d_point_sector_average_elevation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_terrain_3d_point_sector_max_elevation@@YGMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_terrain_3d_point_sector_max_elevation@@YGMMM@Z@4JA DD 0645H ; `get_terrain_3d_point_sector_max_elevation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DB@KOBGDPLC@Sector?5minimum?5terrain?5elevatio@
CONST	SEGMENT
??_C@_0DB@KOBGDPLC@Sector?5minimum?5terrain?5elevatio@ DB 'Sector minimum'
	DB	' terrain elevation off map: %f, %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JKHMMMJP@terrain_initialised@
CONST	SEGMENT
??_C@_0BE@JKHMMMJP@terrain_initialised@ DB 'terrain_initialised', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_terrain_3d_point_sector_min_elevation@@YGMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_terrain_3d_point_sector_min_elevation@@YGMMM@Z@4JA DD 062dH ; `get_terrain_3d_point_sector_min_elevation'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?river_texture_index@@3HA DD 01H			; river_texture_index
_DATA	ENDS
;	COMDAT ??_C@_04BEPECJGC@COLR@
CONST	SEGMENT
??_C@_04BEPECJGC@COLR@ DB 'COLR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDKGFADE@SURF@
CONST	SEGMENT
??_C@_04HDKGFADE@SURF@ DB 'SURF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKKPPFHB@POLS@
CONST	SEGMENT
??_C@_04CKKPPFHB@POLS@ DB 'POLS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IACGGANM@PNTS@
CONST	SEGMENT
??_C@_04IACGGANM@PNTS@ DB 'PNTS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OAGCANIB@?$CF07d@
CONST	SEGMENT
??_C@_04OAGCANIB@?$CF07d@ DB '%07d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCOLIFDF@SRFS@
CONST	SEGMENT
??_C@_04MCOLIFDF@SRFS@ DB 'SRFS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ELINGNML@LWOB@
CONST	SEGMENT
??_C@_04ELINGNML@LWOB@ DB 'LWOB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPGCGPG@FORM@
CONST	SEGMENT
??_C@_04HPGCGPG@FORM@ DB 'FORM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GLIFIJOD@Sectors?5complex?5culled?3?5?$CFd@
CONST	SEGMENT
??_C@_0BL@GLIFIJOD@Sectors?5complex?5culled?3?5?$CFd@ DB 'Sectors complex'
	DB	' culled: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GCHKGONB@Sectors?5trivially?5culled?3?5?$CFd@
CONST	SEGMENT
??_C@_0BN@GCHKGONB@Sectors?5trivially?5culled?3?5?$CFd@ DB 'Sectors trivi'
	DB	'ally culled: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JABAEDPM@Sectors?5totally?5visible?3?5?$CFd@
CONST	SEGMENT
??_C@_0BM@JABAEDPM@Sectors?5totally?5visible?3?5?$CFd@ DB 'Sectors totall'
	DB	'y visible: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDILEJBP@Sectors?5inserted?3?5?$CFd@
CONST	SEGMENT
??_C@_0BF@JDILEJBP@Sectors?5inserted?3?5?$CFd@ DB 'Sectors inserted: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EEMMDPEA@Faces?5screen?5clipped?3?5?$CFd@
CONST	SEGMENT
??_C@_0BJ@EEMMDPEA@Faces?5screen?5clipped?3?5?$CFd@ DB 'Faces screen clip'
	DB	'ped: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMFACPJ@Faces?5hither?5clipped?3?5?$CFd@
CONST	SEGMENT
??_C@_0BJ@NMFACPJ@Faces?5hither?5clipped?3?5?$CFd@ DB 'Faces hither clipp'
	DB	'ed: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NINPMBOH@Faces?5rejected?3?5?$CFd@
CONST	SEGMENT
??_C@_0BD@NINPMBOH@Faces?5rejected?3?5?$CFd@ DB 'Faces rejected: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GPPCEOFH@Faces?5constructed?3?5?$CFd@
CONST	SEGMENT
??_C@_0BG@GPPCEOFH@Faces?5constructed?3?5?$CFd@ DB 'Faces constructed: %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EMPNLHAK@Faces?5outcoded?3?5?$CFd@
CONST	SEGMENT
??_C@_0BD@EMPNLHAK@Faces?5outcoded?3?5?$CFd@ DB 'Faces outcoded: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GDOCGBB@Faces?5considered?3?5?$CFd@
CONST	SEGMENT
??_C@_0BF@GDOCGBB@Faces?5considered?3?5?$CFd@ DB 'Faces considered: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EEENEKCK@Points?5transformed?3?5?$CFd@
CONST	SEGMENT
??_C@_0BH@EEENEKCK@Points?5transformed?3?5?$CFd@ DB 'Points transformed: '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HPLMODEG@Points?5in?5terrain?3?5?$CFd@
CONST	SEGMENT
??_C@_0BG@HPLMODEG@Points?5in?5terrain?3?5?$CFd@ DB 'Points in terrain: %'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05GHOHLNOH@CLOUD@
CONST	SEGMENT
??_C@_05GHOHLNOH@CLOUD@ DB 'CLOUD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OPOJCIGG@Cant?5find?5the?5terrain?5tree?5data@
CONST	SEGMENT
??_C@_0CA@OPOJCIGG@Cant?5find?5the?5terrain?5tree?5data@ DB 'Cant find th'
	DB	'e terrain tree data', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBAKOJAB@FOREST_TREE_OBJECT@
CONST	SEGMENT
??_C@_0BD@GBAKOJAB@FOREST_TREE_OBJECT@ DB 'FOREST_TREE_OBJECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BHENJFKM@READ?5IN?5THE?5TREE?5DATA@
CONST	SEGMENT
??_C@_0BG@BHENJFKM@READ?5IN?5THE?5TREE?5DATA@ DB 'READ IN THE TREE DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DJDGKPCI@TREE?5SECTORS?3?5?$CFd?0?5?$CFd?5?9?5TERRAIN?5@
CONST	SEGMENT
??_C@_0CO@DJDGKPCI@TREE?5SECTORS?3?5?$CFd?0?5?$CFd?5?9?5TERRAIN?5@ DB 'TR'
	DB	'EE SECTORS: %d, %d - TERRAIN SECTORS %d, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CIGFODFL@TREE?5DATA?5DOES?5NOT?5MATCH?5TERRAI@
CONST	SEGMENT
??_C@_0DH@CIGFODFL@TREE?5DATA?5DOES?5NOT?5MATCH?5TERRAI@ DB 'TREE DATA DO'
	DB	'ES NOT MATCH TERRAIN DATA - DITCHING TREES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@JMECDHE@?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD@
CONST	SEGMENT
??_C@_0DH@JMECDHE@?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD@ DB '#'
	DB	'#####################################################', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EIOAAFPP@TERRAIN?5HAS?5?$CFd?5points@
CONST	SEGMENT
??_C@_0BG@EIOAAFPP@TERRAIN?5HAS?5?$CFd?5points@ DB 'TERRAIN HAS %d points'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KNDGDHLC@Got?5?$CFd?5approximated?5sectors@
CONST	SEGMENT
??_C@_0BM@KNDGDHLC@Got?5?$CFd?5approximated?5sectors@ DB 'Got %d approxim'
	DB	'ated sectors', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DNPGHNHO@terrain_sectors?$FLz?$FN?$FLx?$FN?4number_of@
CONST	SEGMENT
??_C@_0EB@DNPGHNHO@terrain_sectors?$FLz?$FN?$FLx?$FN?4number_of@ DB 'terr'
	DB	'ain_sectors[z][x].number_of_points < ARRAY_LENGTH(white_col)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LDKMKLDI@Terrain?5maximum?5height?3?5?$CFf@
CONST	SEGMENT
??_C@_0BL@LDKMKLDI@Terrain?5maximum?5height?3?5?$CFf@ DB 'Terrain maximum'
	DB	' height: %f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BEJICLEB@Terrain?5minimum?5height?3?5?$CFf@
CONST	SEGMENT
??_C@_0BL@BEJICLEB@Terrain?5minimum?5height?3?5?$CFf@ DB 'Terrain minimum'
	DB	' height: %f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PJIMLEBD@?$CFs?2tree_pos?4dat@
CONST	SEGMENT
??_C@_0BA@PJIMLEBD@?$CFs?2tree_pos?4dat@ DB '%s\tree_pos.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGMIPHHP@?$CFs?2tree_pos?4sec@
CONST	SEGMENT
??_C@_0BA@DGMIPHHP@?$CFs?2tree_pos?4sec@ DB '%s\tree_pos.sec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JJBPJNIB@?$CFs?2default?9W?4rgb@
CONST	SEGMENT
??_C@_0BB@JJBPJNIB@?$CFs?2default?9W?4rgb@ DB '%s\default-W.rgb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DLDMBPML@?$CFs?2default?9W?4sec@
CONST	SEGMENT
??_C@_0BB@DLDMBPML@?$CFs?2default?9W?4sec@ DB '%s\default-W.sec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JGOHDDIE@?$CFs?2default?4rgb@
CONST	SEGMENT
??_C@_0P@JGOHDDIE@?$CFs?2default?4rgb@ DB '%s\default.rgb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DEMELBMO@?$CFs?2default?4sec@
CONST	SEGMENT
??_C@_0P@DEMELBMO@?$CFs?2default?4sec@ DB '%s\default.sec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IPDOGKPJ@?$CFs?2terrain?4ffp@
CONST	SEGMENT
??_C@_0P@IPDOGKPJ@?$CFs?2terrain?4ffp@ DB '%s\terrain.ffp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NMLPDENP@?$CBterrain_initialised@
CONST	SEGMENT
??_C@_0BF@NMLPDENP@?$CBterrain_initialised@ DB '!terrain_initialised', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\terrain\terrdata.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??load_3d_terrain@@YGHPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??load_3d_terrain@@YGHPBD@Z@4JA DD 0aeH	; `load_3d_terrain'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?set_all_types@@YGXH@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_index$ = 8						; size = 4
?set_all_types@@YGXH@Z PROC				; set_all_types, COMDAT

; 1545 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1546 : 
; 1547 : 	int
; 1548 : 		count;
; 1549 : 
; 1550 : 	for ( count = ( TERRAIN_TYPE_INVALID + 1 ); count < TERRAIN_TYPE_LAST; count++ )

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  00010	eb 09		 jmp	 SHORT $LN4@set_all_ty
$LN2@set_all_ty:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@set_all_ty:
  0001b	83 7d fc 3e	 cmp	 DWORD PTR _count$[ebp], 62 ; 0000003eH
  0001f	7d 16		 jge	 SHORT $LN1@set_all_ty

; 1551 : 	{
; 1552 : 
; 1553 : 		terrain_type_information[count].texture = system_textures[index];

  00021	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00028	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  0002f	89 90 04 00 00
	00		 mov	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+4], edx

; 1554 : 	}

  00035	eb db		 jmp	 SHORT $LN2@set_all_ty
$LN1@set_all_ty:

; 1555 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?set_all_types@@YGXH@Z ENDP				; set_all_types
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?initialise_3d_terrain_colour_conversion_table@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?initialise_3d_terrain_colour_conversion_table@@YGXXZ PROC ; initialise_3d_terrain_colour_conversion_table, COMDAT

; 1150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1151 : 
; 1152 : 	int
; 1153 : 		count;
; 1154 : 
; 1155 : 	for ( count = 0; count < 256; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  0001b	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00022	7d 13		 jge	 SHORT $LN3@initialise

; 1156 : 	{
; 1157 : 
; 1158 : 		terrain_colour_conversion_table[count] = ( float ) count;

  00024	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _count$[ebp]
  00029	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002c	f3 0f 11 04 85
	00 00 00 00	 movss	 DWORD PTR ?terrain_colour_conversion_table@@3PAMA[eax*4], xmm0

; 1159 : 	}

  00035	eb db		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 1160 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?initialise_3d_terrain_colour_conversion_table@@YGXXZ ENDP ; initialise_3d_terrain_colour_conversion_table
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?set_terrain_3d_cloud_puffs_colours@@YGXXZ
_TEXT	SEGMENT
tv149 = -124						; size = 8
tv132 = -124						; size = 8
tv83 = -124						; size = 8
tv150 = -116						; size = 8
tv133 = -116						; size = 8
tv84 = -116						; size = 8
tv67 = -116						; size = 8
$T1 = -108						; size = 4
$T2 = -104						; size = 4
$T3 = -100						; size = 4
$T4 = -96						; size = 4
$T5 = -92						; size = 4
$T6 = -88						; size = 4
_count$ = -20						; size = 4
_colour_coef_blue$ = -16				; size = 4
_colour_coef_green$ = -12				; size = 4
_colour_coef_red$ = -8					; size = 4
_colour_coef$ = -4					; size = 4
?set_terrain_3d_cloud_puffs_colours@@YGXXZ PROC		; set_terrain_3d_cloud_puffs_colours, COMDAT

; 2185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2186 : 	float
; 2187 : 		colour_coef,
; 2188 : 		colour_coef_red,
; 2189 : 		colour_coef_green,
; 2190 : 		colour_coef_blue;
; 2191 : 	int
; 2192 : 		count;
; 2193 : 
; 2194 : 	if ( !terrain_3d_cloud_puff_colours )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A, 0 ; terrain_3d_cloud_puff_colours
  00010	75 05		 jne	 SHORT $LN5@set_terrai

; 2195 : 	{
; 2196 : 		return;

  00012	e9 f4 02 00 00	 jmp	 $LN1@set_terrai
$LN5@set_terrai:

; 2197 : 	}
; 2198 : 
; 2199 : 	colour_coef = active_3d_environment->render_filter == RENDER_INFRARED ? 6.0 : 6.0;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0001c	83 b8 d0 02 00
	00 02		 cmp	 DWORD PTR [eax+720], 2
  00023	75 0f		 jne	 SHORT $LN7@set_terrai
  00025	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4018000000000000
  0002d	f2 0f 11 45 8c	 movsd	 QWORD PTR tv67[ebp], xmm0
  00032	eb 0d		 jmp	 SHORT $LN8@set_terrai
$LN7@set_terrai:
  00034	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4018000000000000
  0003c	f2 0f 11 45 8c	 movsd	 QWORD PTR tv67[ebp], xmm0
$LN8@set_terrai:
  00041	f2 0f 5a 45 8c	 cvtsd2ss xmm0, QWORD PTR tv67[ebp]
  00046	f3 0f 11 45 fc	 movss	 DWORD PTR _colour_coef$[ebp], xmm0

; 2200 : 	colour_coef_red = bound ( active_3d_environment->ambient_light.red * colour_coef, 0.1, 1.0 );

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00050	f3 0f 10 80 d8
	01 00 00	 movss	 xmm0, DWORD PTR [eax+472]
  00058	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  0005d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00061	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  00069	66 0f 2f c8	 comisd	 xmm1, xmm0
  0006d	76 0f		 jbe	 SHORT $LN11@set_terrai
  0006f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00077	f2 0f 11 45 8c	 movsd	 QWORD PTR tv84[ebp], xmm0
  0007c	eb 56		 jmp	 SHORT $LN12@set_terrai
$LN11@set_terrai:
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00084	f3 0f 10 81 d8
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+472]
  0008c	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  00091	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00095	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0009d	76 0f		 jbe	 SHORT $LN9@set_terrai
  0009f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000a7	f2 0f 11 45 84	 movsd	 QWORD PTR tv83[ebp], xmm0
  000ac	eb 1c		 jmp	 SHORT $LN10@set_terrai
$LN9@set_terrai:
  000ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000b4	f3 0f 10 82 d8
	01 00 00	 movss	 xmm0, DWORD PTR [edx+472]
  000bc	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  000c1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000c5	f2 0f 11 45 84	 movsd	 QWORD PTR tv83[ebp], xmm0
$LN10@set_terrai:
  000ca	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv83[ebp]
  000cf	f2 0f 11 45 8c	 movsd	 QWORD PTR tv84[ebp], xmm0
$LN12@set_terrai:
  000d4	f2 0f 5a 45 8c	 cvtsd2ss xmm0, QWORD PTR tv84[ebp]
  000d9	f3 0f 11 45 f8	 movss	 DWORD PTR _colour_coef_red$[ebp], xmm0

; 2201 : 	colour_coef_green = bound ( active_3d_environment->ambient_light.green * colour_coef, 0.1, 1.0 );

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000e3	f3 0f 10 80 dc
	01 00 00	 movss	 xmm0, DWORD PTR [eax+476]
  000eb	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  000f0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000f4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  000fc	66 0f 2f c8	 comisd	 xmm1, xmm0
  00100	76 0f		 jbe	 SHORT $LN15@set_terrai
  00102	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0010a	f2 0f 11 45 8c	 movsd	 QWORD PTR tv133[ebp], xmm0
  0010f	eb 56		 jmp	 SHORT $LN16@set_terrai
$LN15@set_terrai:
  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00117	f3 0f 10 81 dc
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+476]
  0011f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  00124	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00128	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00130	76 0f		 jbe	 SHORT $LN13@set_terrai
  00132	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0013a	f2 0f 11 45 84	 movsd	 QWORD PTR tv132[ebp], xmm0
  0013f	eb 1c		 jmp	 SHORT $LN14@set_terrai
$LN13@set_terrai:
  00141	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00147	f3 0f 10 82 dc
	01 00 00	 movss	 xmm0, DWORD PTR [edx+476]
  0014f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  00154	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00158	f2 0f 11 45 84	 movsd	 QWORD PTR tv132[ebp], xmm0
$LN14@set_terrai:
  0015d	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv132[ebp]
  00162	f2 0f 11 45 8c	 movsd	 QWORD PTR tv133[ebp], xmm0
$LN16@set_terrai:
  00167	f2 0f 5a 45 8c	 cvtsd2ss xmm0, QWORD PTR tv133[ebp]
  0016c	f3 0f 11 45 f4	 movss	 DWORD PTR _colour_coef_green$[ebp], xmm0

; 2202 : 	colour_coef_blue = bound ( active_3d_environment->ambient_light.blue * colour_coef, 0.1, 1.0 );

  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00176	f3 0f 10 80 e0
	01 00 00	 movss	 xmm0, DWORD PTR [eax+480]
  0017e	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  00183	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00187	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  0018f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00193	76 0f		 jbe	 SHORT $LN19@set_terrai
  00195	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0019d	f2 0f 11 45 8c	 movsd	 QWORD PTR tv150[ebp], xmm0
  001a2	eb 56		 jmp	 SHORT $LN20@set_terrai
$LN19@set_terrai:
  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001aa	f3 0f 10 81 e0
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+480]
  001b2	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  001b7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001bb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  001c3	76 0f		 jbe	 SHORT $LN17@set_terrai
  001c5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001cd	f2 0f 11 45 84	 movsd	 QWORD PTR tv149[ebp], xmm0
  001d2	eb 1c		 jmp	 SHORT $LN18@set_terrai
$LN17@set_terrai:
  001d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001da	f3 0f 10 82 e0
	01 00 00	 movss	 xmm0, DWORD PTR [edx+480]
  001e2	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _colour_coef$[ebp]
  001e7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001eb	f2 0f 11 45 84	 movsd	 QWORD PTR tv149[ebp], xmm0
$LN18@set_terrai:
  001f0	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv149[ebp]
  001f5	f2 0f 11 45 8c	 movsd	 QWORD PTR tv150[ebp], xmm0
$LN20@set_terrai:
  001fa	f2 0f 5a 45 8c	 cvtsd2ss xmm0, QWORD PTR tv150[ebp]
  001ff	f3 0f 11 45 f0	 movss	 DWORD PTR _colour_coef_blue$[ebp], xmm0

; 2203 : 
; 2204 : 	for ( count = 0; count < number_of_cloud_puffs_colours; count++ )

  00204	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0020b	eb 09		 jmp	 SHORT $LN4@set_terrai
$LN2@set_terrai:
  0020d	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00210	83 c0 01	 add	 eax, 1
  00213	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN4@set_terrai:
  00216	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00219	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_cloud_puffs_colours@@3HA ; number_of_cloud_puffs_colours
  0021f	0f 8d e6 00 00
	00		 jge	 $LN3@set_terrai

; 2205 : 	{
; 2206 : 		terrain_3d_cloud_puff_colours[count].red = (unsigned char)min(cloud_puffs_colours[count].red * colour_coef_red, 255.0f);

  00225	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  0022d	f3 0f 11 45 a8	 movss	 DWORD PTR $T6[ebp], xmm0
  00232	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00235	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cloud_puffs_colours@@3PAUREAL_COLOUR@@A ; cloud_puffs_colours
  0023b	0f b6 54 81 02	 movzx	 edx, BYTE PTR [ecx+eax*4+2]
  00240	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00244	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _colour_coef_red$[ebp]
  00249	f3 0f 11 45 a4	 movss	 DWORD PTR $T5[ebp], xmm0
  0024e	8d 45 a8	 lea	 eax, DWORD PTR $T6[ebp]
  00251	50		 push	 eax
  00252	8d 4d a4	 lea	 ecx, DWORD PTR $T5[ebp]
  00255	51		 push	 ecx
  00256	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0025b	f3 0f 2c 10	 cvttss2si edx, DWORD PTR [eax]
  0025f	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00262	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A ; terrain_3d_cloud_puff_colours
  00268	88 54 81 02	 mov	 BYTE PTR [ecx+eax*4+2], dl

; 2207 : 		terrain_3d_cloud_puff_colours[count].green = (unsigned char)min(cloud_puffs_colours[count].green * colour_coef_green, 255.0f);

  0026c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  00274	f3 0f 11 45 a0	 movss	 DWORD PTR $T4[ebp], xmm0
  00279	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0027c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cloud_puffs_colours@@3PAUREAL_COLOUR@@A ; cloud_puffs_colours
  00282	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  00287	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0028b	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _colour_coef_green$[ebp]
  00290	f3 0f 11 45 9c	 movss	 DWORD PTR $T3[ebp], xmm0
  00295	8d 45 a0	 lea	 eax, DWORD PTR $T4[ebp]
  00298	50		 push	 eax
  00299	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp]
  0029c	51		 push	 ecx
  0029d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  002a2	f3 0f 2c 10	 cvttss2si edx, DWORD PTR [eax]
  002a6	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  002a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A ; terrain_3d_cloud_puff_colours
  002af	88 54 81 01	 mov	 BYTE PTR [ecx+eax*4+1], dl

; 2208 : 		terrain_3d_cloud_puff_colours[count].blue = (unsigned char)min(cloud_puffs_colours[count].blue * colour_coef_blue, 255.0f);

  002b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  002bb	f3 0f 11 45 98	 movss	 DWORD PTR $T2[ebp], xmm0
  002c0	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  002c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cloud_puffs_colours@@3PAUREAL_COLOUR@@A ; cloud_puffs_colours
  002c9	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  002cd	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  002d1	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _colour_coef_blue$[ebp]
  002d6	f3 0f 11 45 94	 movss	 DWORD PTR $T1[ebp], xmm0
  002db	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  002de	50		 push	 eax
  002df	8d 4d 94	 lea	 ecx, DWORD PTR $T1[ebp]
  002e2	51		 push	 ecx
  002e3	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  002e8	f3 0f 2c 10	 cvttss2si edx, DWORD PTR [eax]
  002ec	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  002ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A ; terrain_3d_cloud_puff_colours
  002f5	88 14 81	 mov	 BYTE PTR [ecx+eax*4], dl

; 2209 : 		terrain_3d_cloud_puff_colours[count].alpha = 255;

  002f8	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  002fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A ; terrain_3d_cloud_puff_colours
  00301	c6 44 81 03 ff	 mov	 BYTE PTR [ecx+eax*4+3], 255 ; 000000ffH

; 2210 : 	}

  00306	e9 02 ff ff ff	 jmp	 $LN2@set_terrai
$LN3@set_terrai:
$LN1@set_terrai:

; 2211 : }

  0030b	5f		 pop	 edi
  0030c	5e		 pop	 esi
  0030d	5b		 pop	 ebx
  0030e	8b e5		 mov	 esp, ebp
  00310	5d		 pop	 ebp
  00311	c3		 ret	 0
?set_terrain_3d_cloud_puffs_colours@@YGXXZ ENDP		; set_terrain_3d_cloud_puffs_colours
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_type_triangles_in_sector@@YGXMMHPAUTERRAIN_3D_TRIANGLE@@@Z
_TEXT	SEGMENT
_vector2$1 = -184					; size = 12
_vector1$2 = -172					; size = 12
_index$3 = -160						; size = 4
_flag$4 = -156						; size = 4
_vector2$5 = -152					; size = 12
_vector1$6 = -140					; size = 12
_index$7 = -128						; size = 4
_triangle_count$8 = -124				; size = 4
_number_of_triangles$9 = -120				; size = 4
_vector2$10 = -116					; size = 12
_vector1$11 = -104					; size = 12
_index$12 = -92						; size = 4
_flag$13 = -88						; size = 4
_vector2$14 = -84					; size = 12
_vector1$15 = -72					; size = 12
_index$16 = -60						; size = 4
_triangle_count$17 = -56				; size = 4
_number_of_triangles$18 = -52				; size = 4
_triangle$ = -48					; size = 4
_sector$ = -44						; size = 4
_surface$ = -40						; size = 4
_polygon$ = -36						; size = 4
_points_y$ = -32					; size = 4
_points_xz$ = -28					; size = 4
_sector_z_offset$ = -24					; size = 4
_sector_x_offset$ = -20					; size = 4
_count$ = -16						; size = 4
_z_sec$ = -12						; size = 4
_x_sec$ = -8						; size = 4
_triangle_index$ = -4					; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_type$ = 16						; size = 4
_triangles$ = 20					; size = 4
?get_terrain_3d_type_triangles_in_sector@@YGXMMHPAUTERRAIN_3D_TRIANGLE@@@Z PROC ; get_terrain_3d_type_triangles_in_sector, COMDAT

; 1821 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1822 : 
; 1823 : 	int
; 1824 : 		triangle_index,
; 1825 : 		x_sec,
; 1826 : 		z_sec,
; 1827 : 		count;
; 1828 : 
; 1829 : 	float
; 1830 : 		sector_x_offset,
; 1831 : 		sector_z_offset;
; 1832 : 
; 1833 : 	terrain_3d_point_xz
; 1834 : 		*points_xz;
; 1835 : 
; 1836 : 	terrain_3d_point_y
; 1837 : 		*points_y;
; 1838 : 
; 1839 : 	terrain_3d_face
; 1840 : 		*polygon;
; 1841 : 
; 1842 : 	terrain_3d_surface
; 1843 : 		*surface;
; 1844 : 
; 1845 : 	terrain_3d_sector
; 1846 : 		*sector;
; 1847 : 
; 1848 : 	terrain_3d_triangle
; 1849 : 		*triangle;
; 1850 : 
; 1851 : 	get_terrain_3d_sector ( x, z, &x_sec, &z_sec );

  0000c	8d 45 f4	 lea	 eax, DWORD PTR _z_sec$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d f8	 lea	 ecx, DWORD PTR _x_sec$[ebp]
  00013	51		 push	 ecx
  00014	51		 push	 ecx
  00015	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	51		 push	 ecx
  00020	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00025	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002a	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1852 : 
; 1853 : 	sector = &terrain_sectors[z_sec][x_sec];

  0002f	6b 45 f8 30	 imul	 eax, DWORD PTR _x_sec$[ebp], 48
  00033	8b 4d f4	 mov	 ecx, DWORD PTR _z_sec$[ebp]
  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0003c	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  0003f	89 45 d4	 mov	 DWORD PTR _sector$[ebp], eax

; 1854 : 	sector_x_offset = x_sec * TERRAIN_3D_SECTOR_SIDE_LENGTH + ( TERRAIN_3D_SECTOR_SIDE_LENGTH / 2 );

  00042	8b 45 f8	 mov	 eax, DWORD PTR _x_sec$[ebp]
  00045	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00048	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  0004d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00051	f3 0f 11 45 ec	 movss	 DWORD PTR _sector_x_offset$[ebp], xmm0

; 1855 : 	sector_z_offset = z_sec * TERRAIN_3D_SECTOR_SIDE_LENGTH + ( TERRAIN_3D_SECTOR_SIDE_LENGTH / 2 );

  00056	8b 45 f4	 mov	 eax, DWORD PTR _z_sec$[ebp]
  00059	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  0005c	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00061	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00065	f3 0f 11 45 e8	 movss	 DWORD PTR _sector_z_offset$[ebp], xmm0

; 1856 : 
; 1857 : 	points_xz = sector->points_xz;

  0006a	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  0006d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00070	89 4d e4	 mov	 DWORD PTR _points_xz$[ebp], ecx

; 1858 : 	points_y = sector->points_y;

  00073	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  00076	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00079	89 4d e0	 mov	 DWORD PTR _points_y$[ebp], ecx

; 1859 : 
; 1860 : 	polygon = sector->polygons;

  0007c	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  0007f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00082	89 4d dc	 mov	 DWORD PTR _polygon$[ebp], ecx

; 1861 : 	surface = sector->surface_changes;

  00085	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  00088	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0008b	89 4d d8	 mov	 DWORD PTR _surface$[ebp], ecx

; 1862 : 	current_terrain_type = surface->surface_id;

  0008e	8b 45 d8	 mov	 eax, DWORD PTR _surface$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_type@@3HA, ecx ; current_terrain_type

; 1863 : 
; 1864 : 	triangle_index = 0;

  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _triangle_index$[ebp], 0

; 1865 : 
; 1866 : 	triangle = triangles;

  000a1	8b 45 14	 mov	 eax, DWORD PTR _triangles$[ebp]
  000a4	89 45 d0	 mov	 DWORD PTR _triangle$[ebp], eax

; 1867 : 
; 1868 : 	if ( sector->number_of_points < 257 )

  000a7	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  000aa	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000ad	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  000b3	0f 8d dc 06 00
	00		 jge	 $LN24@get_terrai

; 1869 : 	{
; 1870 : 
; 1871 : 		terrain_3d_sector_point_byte_references = sector->point_byte_references;

  000b9	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  000bc	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000bf	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, ecx ; terrain_3d_sector_point_byte_references

; 1872 : 
; 1873 : 		for ( count = sector->number_of_polygons; count > 0; count-- )

  000c5	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  000c8	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000cc	89 4d f0	 mov	 DWORD PTR _count$[ebp], ecx
  000cf	eb 09		 jmp	 SHORT $LN4@get_terrai
$LN2@get_terrai:
  000d1	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  000d4	83 e8 01	 sub	 eax, 1
  000d7	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_terrai:
  000da	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  000de	0f 8e ac 06 00
	00		 jle	 $LN3@get_terrai

; 1874 : 		{
; 1875 : 
; 1876 : 			if ( current_terrain_type == type )

  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_type@@3HA ; current_terrain_type
  000e9	3b 45 10	 cmp	 eax, DWORD PTR _type$[ebp]
  000ec	0f 85 52 06 00
	00		 jne	 $LN26@get_terrai
$LN5@get_terrai:

; 1877 : 			{
; 1878 : 
; 1879 : 				while ( ( !polygon->surface_change ) && ( count > 0 ) )

  000f2	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  000f5	8a 08		 mov	 cl, BYTE PTR [eax]
  000f7	c0 e9 07	 shr	 cl, 7
  000fa	80 e1 01	 and	 cl, 1
  000fd	0f b6 d1	 movzx	 edx, cl
  00100	85 d2		 test	 edx, edx
  00102	0f 85 37 06 00
	00		 jne	 $LN6@get_terrai
  00108	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  0010c	0f 8e 2d 06 00
	00		 jle	 $LN6@get_terrai

; 1880 : 				{
; 1881 : 
; 1882 : 					int
; 1883 : 						number_of_triangles,
; 1884 : 						triangle_count;
; 1885 : 
; 1886 : 					number_of_triangles = polygon->number_of_points - 2;

  00112	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00115	8a 08		 mov	 cl, BYTE PTR [eax]
  00117	80 e1 7f	 and	 cl, 127			; 0000007fH
  0011a	0f b6 d1	 movzx	 edx, cl
  0011d	83 ea 02	 sub	 edx, 2
  00120	89 55 cc	 mov	 DWORD PTR _number_of_triangles$18[ebp], edx

; 1887 : 
; 1888 : 					if ( terrain_type_information[current_terrain_type].polygon_type == POLYGON_TYPE_FAN )

  00123	6b 05 00 00 00
	00 38		 imul	 eax, DWORD PTR ?current_terrain_type@@3HA, 56 ; current_terrain_type
  0012a	83 b8 30 00 00
	00 00		 cmp	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48], 0
  00131	0f 85 ad 02 00
	00		 jne	 $LN27@get_terrai

; 1889 : 					{
; 1890 : 
; 1891 : 						for ( triangle_count = 0; triangle_count < number_of_triangles; triangle_count++ )

  00137	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _triangle_count$17[ebp], 0
  0013e	eb 09		 jmp	 SHORT $LN9@get_terrai
$LN7@get_terrai:
  00140	8b 45 c8	 mov	 eax, DWORD PTR _triangle_count$17[ebp]
  00143	83 c0 01	 add	 eax, 1
  00146	89 45 c8	 mov	 DWORD PTR _triangle_count$17[ebp], eax
$LN9@get_terrai:
  00149	8b 45 c8	 mov	 eax, DWORD PTR _triangle_count$17[ebp]
  0014c	3b 45 cc	 cmp	 eax, DWORD PTR _number_of_triangles$18[ebp]
  0014f	0f 8d 8a 02 00
	00		 jge	 $LN8@get_terrai

; 1892 : 						{
; 1893 : 
; 1894 : 							int
; 1895 : 								index;
; 1896 : 
; 1897 : 							vec3d
; 1898 : 								vector1,
; 1899 : 								vector2;
; 1900 : 
; 1901 : 							index = terrain_3d_sector_point_byte_references[0].point;

  00155	b8 01 00 00 00	 mov	 eax, 1
  0015a	6b c8 00	 imul	 ecx, eax, 0
  0015d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  00163	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00167	89 45 c4	 mov	 DWORD PTR _index$16[ebp], eax

; 1902 : 							triangle->point1.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  0016a	8b 45 c4	 mov	 eax, DWORD PTR _index$16[ebp]
  0016d	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00170	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  00174	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00178	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00180	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00185	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00188	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1903 : 							triangle->point1.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  0018c	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00191	8b 4d c4	 mov	 ecx, DWORD PTR _index$16[ebp]
  00194	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00197	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  0019b	0f b7 c0	 movzx	 eax, ax
  0019e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001a2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  001aa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  001b2	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  001b5	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1904 : 							triangle->point1.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  001ba	8b 45 c4	 mov	 eax, DWORD PTR _index$16[ebp]
  001bd	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  001c0	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  001c5	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  001d1	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  001d6	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  001d9	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1905 : 
; 1906 : 							index = terrain_3d_sector_point_byte_references[triangle_count+1].point;

  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  001e3	03 45 c8	 add	 eax, DWORD PTR _triangle_count$17[ebp]
  001e6	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  001ea	89 4d c4	 mov	 DWORD PTR _index$16[ebp], ecx

; 1907 : 							triangle->point2.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  001ed	8b 45 c4	 mov	 eax, DWORD PTR _index$16[ebp]
  001f0	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  001f3	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  001f7	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001fb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00203	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00208	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0020b	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1908 : 							triangle->point2.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00210	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00215	8b 4d c4	 mov	 ecx, DWORD PTR _index$16[ebp]
  00218	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  0021b	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  0021f	0f b7 c0	 movzx	 eax, ax
  00222	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00226	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  0022e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00236	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00239	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 1909 : 							triangle->point2.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  0023e	8b 45 c4	 mov	 eax, DWORD PTR _index$16[ebp]
  00241	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00244	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  00249	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0024d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00255	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  0025a	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0025d	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 1910 : 
; 1911 : 							index = terrain_3d_sector_point_byte_references[triangle_count+2].point;

  00262	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  00267	03 45 c8	 add	 eax, DWORD PTR _triangle_count$17[ebp]
  0026a	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0026e	89 4d c4	 mov	 DWORD PTR _index$16[ebp], ecx

; 1912 : 							triangle->point3.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  00271	8b 45 c4	 mov	 eax, DWORD PTR _index$16[ebp]
  00274	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00277	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  0027b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0027f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00287	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  0028c	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0028f	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1913 : 							triangle->point3.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00294	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00299	8b 4d c4	 mov	 ecx, DWORD PTR _index$16[ebp]
  0029c	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  0029f	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  002a3	0f b7 c0	 movzx	 eax, ax
  002a6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002aa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  002b2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  002ba	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  002bd	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 1914 : 							triangle->point3.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  002c2	8b 45 c4	 mov	 eax, DWORD PTR _index$16[ebp]
  002c5	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  002c8	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  002cd	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  002d1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  002d9	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  002de	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  002e1	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1915 : 
; 1916 : 							vector2.x = triangle->point3.x - triangle->point2.x;

  002e6	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  002e9	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  002ec	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  002f1	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  002f6	f3 0f 11 45 ac	 movss	 DWORD PTR _vector2$14[ebp], xmm0

; 1917 : 							vector2.y = triangle->point3.y - triangle->point2.y;

  002fb	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  002fe	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00301	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00306	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  0030b	f3 0f 11 45 b0	 movss	 DWORD PTR _vector2$14[ebp+4], xmm0

; 1918 : 							vector2.z = triangle->point3.z - triangle->point2.z;

  00310	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00313	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00316	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0031b	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00320	f3 0f 11 45 b4	 movss	 DWORD PTR _vector2$14[ebp+8], xmm0

; 1919 : 
; 1920 : 							vector1.x = triangle->point2.x - triangle->point1.x;

  00325	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00328	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  0032b	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00330	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00334	f3 0f 11 45 b8	 movss	 DWORD PTR _vector1$15[ebp], xmm0

; 1921 : 							vector1.y = triangle->point2.y - triangle->point1.y;

  00339	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0033c	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  0033f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00344	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00349	f3 0f 11 45 bc	 movss	 DWORD PTR _vector1$15[ebp+4], xmm0

; 1922 : 							vector1.z = triangle->point2.z - triangle->point1.z;

  0034e	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00351	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00354	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00359	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0035e	f3 0f 11 45 c0	 movss	 DWORD PTR _vector1$15[ebp+8], xmm0

; 1923 : 
; 1924 : 							triangle->normal.x = ( vector1.y * vector2.z ) - ( vector1.z * vector2.y );

  00363	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _vector1$15[ebp+4]
  00368	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _vector2$14[ebp+8]
  0036d	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _vector1$15[ebp+8]
  00372	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _vector2$14[ebp+4]
  00377	f3 0f 5c c1	 subss	 xmm0, xmm1
  0037b	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0037e	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1925 : 							triangle->normal.y = ( vector1.z * vector2.x ) - ( vector1.x * vector2.z );

  00383	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _vector1$15[ebp+8]
  00388	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _vector2$14[ebp]
  0038d	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _vector1$15[ebp]
  00392	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _vector2$14[ebp+8]
  00397	f3 0f 5c c1	 subss	 xmm0, xmm1
  0039b	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0039e	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 1926 : 							triangle->normal.z = ( vector1.x * vector2.y ) - ( vector1.y * vector2.x );

  003a3	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vector1$15[ebp]
  003a8	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _vector2$14[ebp+4]
  003ad	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _vector1$15[ebp+4]
  003b2	f3 0f 59 4d ac	 mulss	 xmm1, DWORD PTR _vector2$14[ebp]
  003b7	f3 0f 5c c1	 subss	 xmm0, xmm1
  003bb	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  003be	f3 0f 11 40 2c	 movss	 DWORD PTR [eax+44], xmm0

; 1927 : 
; 1928 : 							normalise_any_3d_vector ( &triangle->normal );

  003c3	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  003c6	83 c0 24	 add	 eax, 36			; 00000024H
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  003cf	dd d8		 fstp	 ST(0)

; 1929 : 
; 1930 : 							triangle++;

  003d1	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  003d4	83 c0 30	 add	 eax, 48			; 00000030H
  003d7	89 45 d0	 mov	 DWORD PTR _triangle$[ebp], eax

; 1931 : 						}

  003da	e9 61 fd ff ff	 jmp	 $LN7@get_terrai
$LN8@get_terrai:

; 1932 : 					}
; 1933 : 					else

  003df	e9 36 03 00 00	 jmp	 $LN11@get_terrai
$LN27@get_terrai:

; 1934 : 					{
; 1935 : 
; 1936 : 						int
; 1937 : 							flag;
; 1938 : 
; 1939 : 						flag = TRUE;

  003e4	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _flag$13[ebp], 1

; 1940 : 
; 1941 : 						for ( triangle_count = 0; triangle_count < number_of_triangles; triangle_count++ )

  003eb	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _triangle_count$17[ebp], 0
  003f2	eb 09		 jmp	 SHORT $LN12@get_terrai
$LN10@get_terrai:
  003f4	8b 45 c8	 mov	 eax, DWORD PTR _triangle_count$17[ebp]
  003f7	83 c0 01	 add	 eax, 1
  003fa	89 45 c8	 mov	 DWORD PTR _triangle_count$17[ebp], eax
$LN12@get_terrai:
  003fd	8b 45 c8	 mov	 eax, DWORD PTR _triangle_count$17[ebp]
  00400	3b 45 cc	 cmp	 eax, DWORD PTR _number_of_triangles$18[ebp]
  00403	0f 8d 11 03 00
	00		 jge	 $LN11@get_terrai

; 1942 : 						{
; 1943 : 
; 1944 : 							int
; 1945 : 								index;
; 1946 : 
; 1947 : 							vec3d
; 1948 : 								vector1,
; 1949 : 								vector2;
; 1950 : 
; 1951 : 							index = terrain_3d_sector_point_byte_references[triangle_count].point;

  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  0040e	03 45 c8	 add	 eax, DWORD PTR _triangle_count$17[ebp]
  00411	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00414	89 4d a4	 mov	 DWORD PTR _index$12[ebp], ecx

; 1952 : 							triangle->point1.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  00417	8b 45 a4	 mov	 eax, DWORD PTR _index$12[ebp]
  0041a	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  0041d	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  00421	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00425	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  0042d	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00432	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00435	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1953 : 							triangle->point1.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00439	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0043e	8b 4d a4	 mov	 ecx, DWORD PTR _index$12[ebp]
  00441	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00444	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  00448	0f b7 c0	 movzx	 eax, ax
  0044b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0044f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00457	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  0045f	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00462	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1954 : 							triangle->point1.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  00467	8b 45 a4	 mov	 eax, DWORD PTR _index$12[ebp]
  0046a	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  0046d	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  00472	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00476	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  0047e	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  00483	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00486	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1955 : 
; 1956 : 							index = terrain_3d_sector_point_byte_references[triangle_count+1].point;

  0048b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  00490	03 45 c8	 add	 eax, DWORD PTR _triangle_count$17[ebp]
  00493	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00497	89 4d a4	 mov	 DWORD PTR _index$12[ebp], ecx

; 1957 : 							triangle->point2.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  0049a	8b 45 a4	 mov	 eax, DWORD PTR _index$12[ebp]
  0049d	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  004a0	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  004a4	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  004b0	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  004b5	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  004b8	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1958 : 							triangle->point2.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  004bd	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  004c2	8b 4d a4	 mov	 ecx, DWORD PTR _index$12[ebp]
  004c5	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  004c8	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  004cc	0f b7 c0	 movzx	 eax, ax
  004cf	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  004db	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  004e3	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  004e6	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 1959 : 							triangle->point2.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  004eb	8b 45 a4	 mov	 eax, DWORD PTR _index$12[ebp]
  004ee	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  004f1	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  004f6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  004fa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00502	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  00507	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0050a	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 1960 : 
; 1961 : 							index = terrain_3d_sector_point_byte_references[triangle_count+2].point;

  0050f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  00514	03 45 c8	 add	 eax, DWORD PTR _triangle_count$17[ebp]
  00517	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0051b	89 4d a4	 mov	 DWORD PTR _index$12[ebp], ecx

; 1962 : 							triangle->point3.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  0051e	8b 45 a4	 mov	 eax, DWORD PTR _index$12[ebp]
  00521	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00524	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  00528	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0052c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00534	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00539	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0053c	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1963 : 							triangle->point3.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00541	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00546	8b 4d a4	 mov	 ecx, DWORD PTR _index$12[ebp]
  00549	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  0054c	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  00550	0f b7 c0	 movzx	 eax, ax
  00553	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00557	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  0055f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00567	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  0056a	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 1964 : 							triangle->point3.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  0056f	8b 45 a4	 mov	 eax, DWORD PTR _index$12[ebp]
  00572	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00575	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  0057a	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0057e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00586	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  0058b	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0058e	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1965 : 
; 1966 : 							if ( flag )

  00593	83 7d a8 00	 cmp	 DWORD PTR _flag$13[ebp], 0
  00597	74 7f		 je	 SHORT $LN29@get_terrai

; 1967 : 							{
; 1968 : 
; 1969 : 								vector2.x = triangle->point3.x - triangle->point2.x;

  00599	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0059c	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  0059f	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  005a4	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  005a9	f3 0f 11 45 8c	 movss	 DWORD PTR _vector2$10[ebp], xmm0

; 1970 : 								vector2.y = triangle->point3.y - triangle->point2.y;

  005ae	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  005b1	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  005b4	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  005b9	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  005be	f3 0f 11 45 90	 movss	 DWORD PTR _vector2$10[ebp+4], xmm0

; 1971 : 								vector2.z = triangle->point3.z - triangle->point2.z;

  005c3	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  005c6	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  005c9	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  005ce	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  005d3	f3 0f 11 45 94	 movss	 DWORD PTR _vector2$10[ebp+8], xmm0

; 1972 : 
; 1973 : 								vector1.x = triangle->point2.x - triangle->point1.x;

  005d8	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  005db	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  005de	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  005e3	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  005e7	f3 0f 11 45 98	 movss	 DWORD PTR _vector1$11[ebp], xmm0

; 1974 : 								vector1.y = triangle->point2.y - triangle->point1.y;

  005ec	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  005ef	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  005f2	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  005f7	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  005fc	f3 0f 11 45 9c	 movss	 DWORD PTR _vector1$11[ebp+4], xmm0

; 1975 : 								vector1.z = triangle->point2.z - triangle->point1.z;

  00601	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00604	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00607	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0060c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00611	f3 0f 11 45 a0	 movss	 DWORD PTR _vector1$11[ebp+8], xmm0

; 1976 : 							}
; 1977 : 							else

  00616	eb 7d		 jmp	 SHORT $LN30@get_terrai
$LN29@get_terrai:

; 1978 : 							{
; 1979 : 
; 1980 : 								vector2.x = triangle->point1.x - triangle->point2.x;

  00618	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0061b	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  0061e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00622	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  00627	f3 0f 11 45 8c	 movss	 DWORD PTR _vector2$10[ebp], xmm0

; 1981 : 								vector2.y = triangle->point1.y - triangle->point2.y;

  0062c	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0062f	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00632	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00637	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  0063c	f3 0f 11 45 90	 movss	 DWORD PTR _vector2$10[ebp+4], xmm0

; 1982 : 								vector2.z = triangle->point1.z - triangle->point2.z;

  00641	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00644	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00647	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0064c	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00651	f3 0f 11 45 94	 movss	 DWORD PTR _vector2$10[ebp+8], xmm0

; 1983 : 
; 1984 : 								vector1.x = triangle->point2.x - triangle->point3.x;

  00656	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00659	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  0065c	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00661	f3 0f 5c 41 18	 subss	 xmm0, DWORD PTR [ecx+24]
  00666	f3 0f 11 45 98	 movss	 DWORD PTR _vector1$11[ebp], xmm0

; 1985 : 								vector1.y = triangle->point2.y - triangle->point3.y;

  0066b	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0066e	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00671	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00676	f3 0f 5c 41 1c	 subss	 xmm0, DWORD PTR [ecx+28]
  0067b	f3 0f 11 45 9c	 movss	 DWORD PTR _vector1$11[ebp+4], xmm0

; 1986 : 								vector1.z = triangle->point2.z - triangle->point3.z;

  00680	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00683	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00686	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0068b	f3 0f 5c 41 20	 subss	 xmm0, DWORD PTR [ecx+32]
  00690	f3 0f 11 45 a0	 movss	 DWORD PTR _vector1$11[ebp+8], xmm0
$LN30@get_terrai:

; 1987 : 							}
; 1988 : 
; 1989 : 							triangle->normal.x = ( vector1.y * vector2.z ) - ( vector1.z * vector2.y );

  00695	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _vector1$11[ebp+4]
  0069a	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _vector2$10[ebp+8]
  0069f	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _vector1$11[ebp+8]
  006a4	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _vector2$10[ebp+4]
  006a9	f3 0f 5c c1	 subss	 xmm0, xmm1
  006ad	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  006b0	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1990 : 							triangle->normal.y = ( vector1.z * vector2.x ) - ( vector1.x * vector2.z );

  006b5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _vector1$11[ebp+8]
  006ba	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _vector2$10[ebp]
  006bf	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _vector1$11[ebp]
  006c4	f3 0f 59 4d 94	 mulss	 xmm1, DWORD PTR _vector2$10[ebp+8]
  006c9	f3 0f 5c c1	 subss	 xmm0, xmm1
  006cd	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  006d0	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 1991 : 							triangle->normal.z = ( vector1.x * vector2.y ) - ( vector1.y * vector2.x );

  006d5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _vector1$11[ebp]
  006da	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _vector2$10[ebp+4]
  006df	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _vector1$11[ebp+4]
  006e4	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _vector2$10[ebp]
  006e9	f3 0f 5c c1	 subss	 xmm0, xmm1
  006ed	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  006f0	f3 0f 11 40 2c	 movss	 DWORD PTR [eax+44], xmm0

; 1992 : 
; 1993 : 							normalise_any_3d_vector ( &triangle->normal );

  006f5	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  006f8	83 c0 24	 add	 eax, 36			; 00000024H
  006fb	50		 push	 eax
  006fc	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00701	dd d8		 fstp	 ST(0)

; 1994 : 
; 1995 : 							triangle++;

  00703	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00706	83 c0 30	 add	 eax, 48			; 00000030H
  00709	89 45 d0	 mov	 DWORD PTR _triangle$[ebp], eax

; 1996 : 
; 1997 : 							flag ^= 1;

  0070c	8b 45 a8	 mov	 eax, DWORD PTR _flag$13[ebp]
  0070f	83 f0 01	 xor	 eax, 1
  00712	89 45 a8	 mov	 DWORD PTR _flag$13[ebp], eax

; 1998 : 						}

  00715	e9 da fc ff ff	 jmp	 $LN10@get_terrai
$LN11@get_terrai:

; 1999 : 					}
; 2000 : 
; 2001 : 					terrain_3d_sector_point_byte_references += polygon->number_of_points;

  0071a	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  0071d	8a 08		 mov	 cl, BYTE PTR [eax]
  0071f	80 e1 7f	 and	 cl, 127			; 0000007fH
  00722	0f b6 d1	 movzx	 edx, cl
  00725	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  0072b	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, edx ; terrain_3d_sector_point_byte_references

; 2002 : 
; 2003 : 					polygon++;

  00731	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00734	83 c0 01	 add	 eax, 1
  00737	89 45 dc	 mov	 DWORD PTR _polygon$[ebp], eax

; 2004 : 				}

  0073a	e9 b3 f9 ff ff	 jmp	 $LN5@get_terrai
$LN6@get_terrai:

; 2005 : 
; 2006 : 				return;

  0073f	e9 e8 07 00 00	 jmp	 $LN1@get_terrai
$LN26@get_terrai:

; 2007 : 			}
; 2008 : 
; 2009 : 			if ( polygon->surface_change )

  00744	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00747	8a 08		 mov	 cl, BYTE PTR [eax]
  00749	c0 e9 07	 shr	 cl, 7
  0074c	80 e1 01	 and	 cl, 1
  0074f	0f b6 d1	 movzx	 edx, cl
  00752	85 d2		 test	 edx, edx
  00754	74 15		 je	 SHORT $LN31@get_terrai

; 2010 : 			{
; 2011 : 
; 2012 : 				surface++;

  00756	8b 45 d8	 mov	 eax, DWORD PTR _surface$[ebp]
  00759	83 c0 01	 add	 eax, 1
  0075c	89 45 d8	 mov	 DWORD PTR _surface$[ebp], eax

; 2013 : 
; 2014 : 				current_terrain_type = surface->surface_id;

  0075f	8b 45 d8	 mov	 eax, DWORD PTR _surface$[ebp]
  00762	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00765	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_type@@3HA, ecx ; current_terrain_type
$LN31@get_terrai:

; 2015 : 			}
; 2016 : 
; 2017 : 			terrain_3d_sector_point_byte_references += polygon->number_of_points;

  0076b	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  0076e	8a 08		 mov	 cl, BYTE PTR [eax]
  00770	80 e1 7f	 and	 cl, 127			; 0000007fH
  00773	0f b6 d1	 movzx	 edx, cl
  00776	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A ; terrain_3d_sector_point_byte_references
  0077c	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, edx ; terrain_3d_sector_point_byte_references

; 2018 : 
; 2019 : 			polygon++;

  00782	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00785	83 c0 01	 add	 eax, 1
  00788	89 45 dc	 mov	 DWORD PTR _polygon$[ebp], eax

; 2020 : 		}

  0078b	e9 41 f9 ff ff	 jmp	 $LN2@get_terrai
$LN3@get_terrai:

; 2021 : 	}
; 2022 : 	else

  00790	e9 97 07 00 00	 jmp	 $LN14@get_terrai
$LN24@get_terrai:

; 2023 : 	{
; 2024 : 
; 2025 : 		terrain_3d_sector_point_word_references = sector->point_word_references;

  00795	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  00798	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0079b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, ecx ; terrain_3d_sector_point_word_references

; 2026 : 
; 2027 : 		for ( count = sector->number_of_polygons; count > 0; count-- )

  007a1	8b 45 d4	 mov	 eax, DWORD PTR _sector$[ebp]
  007a4	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  007a8	89 4d f0	 mov	 DWORD PTR _count$[ebp], ecx
  007ab	eb 09		 jmp	 SHORT $LN15@get_terrai
$LN13@get_terrai:
  007ad	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  007b0	83 e8 01	 sub	 eax, 1
  007b3	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN15@get_terrai:
  007b6	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  007ba	0f 8e 6c 07 00
	00		 jle	 $LN14@get_terrai

; 2028 : 		{
; 2029 : 
; 2030 : 			if ( current_terrain_type == type )

  007c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_type@@3HA ; current_terrain_type
  007c5	3b 45 10	 cmp	 eax, DWORD PTR _type$[ebp]
  007c8	0f 85 10 07 00
	00		 jne	 $LN32@get_terrai
$LN16@get_terrai:

; 2031 : 			{
; 2032 : 
; 2033 : 				while ( ( !polygon->surface_change ) && ( count > 0 ) )

  007ce	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  007d1	8a 08		 mov	 cl, BYTE PTR [eax]
  007d3	c0 e9 07	 shr	 cl, 7
  007d6	80 e1 01	 and	 cl, 1
  007d9	0f b6 d1	 movzx	 edx, cl
  007dc	85 d2		 test	 edx, edx
  007de	0f 85 f8 06 00
	00		 jne	 $LN17@get_terrai
  007e4	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  007e8	0f 8e ee 06 00
	00		 jle	 $LN17@get_terrai

; 2034 : 				{
; 2035 : 
; 2036 : 					int
; 2037 : 						number_of_triangles,
; 2038 : 						triangle_count;
; 2039 : 
; 2040 : 					number_of_triangles = polygon->number_of_points - 2;

  007ee	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  007f1	8a 08		 mov	 cl, BYTE PTR [eax]
  007f3	80 e1 7f	 and	 cl, 127			; 0000007fH
  007f6	0f b6 d1	 movzx	 edx, cl
  007f9	83 ea 02	 sub	 edx, 2
  007fc	89 55 88	 mov	 DWORD PTR _number_of_triangles$9[ebp], edx

; 2041 : 
; 2042 : 					if ( terrain_type_information[current_terrain_type].polygon_type == POLYGON_TYPE_FAN )

  007ff	6b 05 00 00 00
	00 38		 imul	 eax, DWORD PTR ?current_terrain_type@@3HA, 56 ; current_terrain_type
  00806	83 b8 30 00 00
	00 00		 cmp	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48], 0
  0080d	0f 85 e7 02 00
	00		 jne	 $LN33@get_terrai

; 2043 : 					{
; 2044 : 
; 2045 : 						for ( triangle_count = 0; triangle_count < number_of_triangles; triangle_count++ )

  00813	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _triangle_count$8[ebp], 0
  0081a	eb 09		 jmp	 SHORT $LN20@get_terrai
$LN18@get_terrai:
  0081c	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  0081f	83 c0 01	 add	 eax, 1
  00822	89 45 84	 mov	 DWORD PTR _triangle_count$8[ebp], eax
$LN20@get_terrai:
  00825	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  00828	3b 45 88	 cmp	 eax, DWORD PTR _number_of_triangles$9[ebp]
  0082b	0f 8d c4 02 00
	00		 jge	 $LN19@get_terrai

; 2046 : 						{
; 2047 : 
; 2048 : 							int
; 2049 : 								index;
; 2050 : 
; 2051 : 							vec3d
; 2052 : 								vector1,
; 2053 : 								vector2;
; 2054 : 
; 2055 : 							index = terrain_3d_sector_point_word_references[0].point;

  00831	b8 02 00 00 00	 mov	 eax, 2
  00836	6b c8 00	 imul	 ecx, eax, 0
  00839	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  0083f	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00843	89 45 80	 mov	 DWORD PTR _index$7[ebp], eax

; 2056 : 							triangle->point1.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  00846	8b 45 80	 mov	 eax, DWORD PTR _index$7[ebp]
  00849	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  0084c	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  00850	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00854	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  0085c	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00861	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00864	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 2057 : 							triangle->point1.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00868	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0086d	8b 4d 80	 mov	 ecx, DWORD PTR _index$7[ebp]
  00870	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00873	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  00877	0f b7 c0	 movzx	 eax, ax
  0087a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0087e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00886	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  0088e	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00891	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 2058 : 							triangle->point1.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  00896	8b 45 80	 mov	 eax, DWORD PTR _index$7[ebp]
  00899	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  0089c	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  008a1	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  008a5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  008ad	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  008b2	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  008b5	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 2059 : 
; 2060 : 							index = terrain_3d_sector_point_word_references[triangle_count+1].point;

  008ba	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  008bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  008c3	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  008c8	89 55 80	 mov	 DWORD PTR _index$7[ebp], edx

; 2061 : 							triangle->point2.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  008cb	8b 45 80	 mov	 eax, DWORD PTR _index$7[ebp]
  008ce	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  008d1	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  008d5	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  008d9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  008e1	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  008e6	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  008e9	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 2062 : 							triangle->point2.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  008ee	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  008f3	8b 4d 80	 mov	 ecx, DWORD PTR _index$7[ebp]
  008f6	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  008f9	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  008fd	0f b7 c0	 movzx	 eax, ax
  00900	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00904	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  0090c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00914	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00917	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 2063 : 							triangle->point2.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  0091c	8b 45 80	 mov	 eax, DWORD PTR _index$7[ebp]
  0091f	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00922	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  00927	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0092b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00933	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  00938	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0093b	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 2064 : 
; 2065 : 							index = terrain_3d_sector_point_word_references[triangle_count+2].point;

  00940	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  00943	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  00949	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  0094e	89 55 80	 mov	 DWORD PTR _index$7[ebp], edx

; 2066 : 							triangle->point3.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  00951	8b 45 80	 mov	 eax, DWORD PTR _index$7[ebp]
  00954	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00957	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  0095b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0095f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00967	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  0096c	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  0096f	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 2067 : 							triangle->point3.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00974	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00979	8b 4d 80	 mov	 ecx, DWORD PTR _index$7[ebp]
  0097c	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  0097f	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  00983	0f b7 c0	 movzx	 eax, ax
  00986	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0098a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00992	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  0099a	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  0099d	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 2068 : 							triangle->point3.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  009a2	8b 45 80	 mov	 eax, DWORD PTR _index$7[ebp]
  009a5	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  009a8	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  009ad	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  009b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  009b9	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  009be	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  009c1	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 2069 : 
; 2070 : 							vector2.x = triangle->point3.x - triangle->point2.x;

  009c6	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  009c9	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  009cc	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  009d1	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  009d6	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _vector2$5[ebp], xmm0

; 2071 : 							vector2.y = triangle->point3.y - triangle->point2.y;

  009de	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  009e1	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  009e4	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  009e9	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  009ee	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _vector2$5[ebp+4], xmm0

; 2072 : 							vector2.z = triangle->point3.z - triangle->point2.z;

  009f6	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  009f9	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  009fc	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00a01	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00a06	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _vector2$5[ebp+8], xmm0

; 2073 : 
; 2074 : 							vector1.x = triangle->point2.x - triangle->point1.x;

  00a0e	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00a11	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00a14	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00a19	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00a1d	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _vector1$6[ebp], xmm0

; 2075 : 							vector1.y = triangle->point2.y - triangle->point1.y;

  00a25	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00a28	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00a2b	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00a30	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00a35	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _vector1$6[ebp+4], xmm0

; 2076 : 							vector1.z = triangle->point2.z - triangle->point1.z;

  00a3d	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00a40	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00a43	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00a48	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00a4d	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _vector1$6[ebp+8], xmm0

; 2077 : 
; 2078 : 							triangle->normal.x = ( vector1.y * vector2.z ) - ( vector1.z * vector2.y );

  00a55	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _vector1$6[ebp+4]
  00a5d	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector2$5[ebp+8]
  00a65	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _vector1$6[ebp+8]
  00a6d	f3 0f 59 8d 6c
	ff ff ff	 mulss	 xmm1, DWORD PTR _vector2$5[ebp+4]
  00a75	f3 0f 5c c1	 subss	 xmm0, xmm1
  00a79	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00a7c	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 2079 : 							triangle->normal.y = ( vector1.z * vector2.x ) - ( vector1.x * vector2.z );

  00a81	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _vector1$6[ebp+8]
  00a89	f3 0f 59 85 68
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector2$5[ebp]
  00a91	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _vector1$6[ebp]
  00a99	f3 0f 59 8d 70
	ff ff ff	 mulss	 xmm1, DWORD PTR _vector2$5[ebp+8]
  00aa1	f3 0f 5c c1	 subss	 xmm0, xmm1
  00aa5	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00aa8	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 2080 : 							triangle->normal.z = ( vector1.x * vector2.y ) - ( vector1.y * vector2.x );

  00aad	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _vector1$6[ebp]
  00ab5	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector2$5[ebp+4]
  00abd	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _vector1$6[ebp+4]
  00ac5	f3 0f 59 8d 68
	ff ff ff	 mulss	 xmm1, DWORD PTR _vector2$5[ebp]
  00acd	f3 0f 5c c1	 subss	 xmm0, xmm1
  00ad1	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00ad4	f3 0f 11 40 2c	 movss	 DWORD PTR [eax+44], xmm0

; 2081 : 
; 2082 : 							normalise_any_3d_vector ( &triangle->normal );

  00ad9	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00adc	83 c0 24	 add	 eax, 36			; 00000024H
  00adf	50		 push	 eax
  00ae0	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00ae5	dd d8		 fstp	 ST(0)

; 2083 : 
; 2084 : 							triangle++;

  00ae7	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00aea	83 c0 30	 add	 eax, 48			; 00000030H
  00aed	89 45 d0	 mov	 DWORD PTR _triangle$[ebp], eax

; 2085 : 						}

  00af0	e9 27 fd ff ff	 jmp	 $LN18@get_terrai
$LN19@get_terrai:

; 2086 : 					}
; 2087 : 					else

  00af5	e9 bb 03 00 00	 jmp	 $LN22@get_terrai
$LN33@get_terrai:

; 2088 : 					{
; 2089 : 
; 2090 : 						int
; 2091 : 							flag;
; 2092 : 
; 2093 : 						flag = TRUE;

  00afa	c7 85 64 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _flag$4[ebp], 1

; 2094 : 
; 2095 : 						for ( triangle_count = 0; triangle_count < number_of_triangles; triangle_count++ )

  00b04	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _triangle_count$8[ebp], 0
  00b0b	eb 09		 jmp	 SHORT $LN23@get_terrai
$LN21@get_terrai:
  00b0d	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  00b10	83 c0 01	 add	 eax, 1
  00b13	89 45 84	 mov	 DWORD PTR _triangle_count$8[ebp], eax
$LN23@get_terrai:
  00b16	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  00b19	3b 45 88	 cmp	 eax, DWORD PTR _number_of_triangles$9[ebp]
  00b1c	0f 8d 93 03 00
	00		 jge	 $LN22@get_terrai

; 2096 : 						{
; 2097 : 
; 2098 : 							int
; 2099 : 								index;
; 2100 : 
; 2101 : 							vec3d
; 2102 : 								vector1,
; 2103 : 								vector2;
; 2104 : 
; 2105 : 							index = terrain_3d_sector_point_word_references[triangle_count].point;

  00b22	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  00b25	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  00b2b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00b2f	89 95 60 ff ff
	ff		 mov	 DWORD PTR _index$3[ebp], edx

; 2106 : 							triangle->point1.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  00b35	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _index$3[ebp]
  00b3b	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00b3e	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  00b42	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00b46	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00b4e	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00b53	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00b56	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 2107 : 							triangle->point1.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00b5a	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00b5f	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _index$3[ebp]
  00b65	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00b68	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  00b6c	0f b7 c0	 movzx	 eax, ax
  00b6f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b73	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00b7b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00b83	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00b86	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 2108 : 							triangle->point1.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  00b8b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _index$3[ebp]
  00b91	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00b94	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  00b99	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00b9d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00ba5	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  00baa	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00bad	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 2109 : 
; 2110 : 							index = terrain_3d_sector_point_word_references[triangle_count+1].point;

  00bb2	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  00bb5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  00bbb	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00bc0	89 95 60 ff ff
	ff		 mov	 DWORD PTR _index$3[ebp], edx

; 2111 : 							triangle->point2.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  00bc6	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _index$3[ebp]
  00bcc	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00bcf	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  00bd3	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00bd7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00bdf	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00be4	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00be7	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 2112 : 							triangle->point2.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00bec	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00bf1	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _index$3[ebp]
  00bf7	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00bfa	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  00bfe	0f b7 c0	 movzx	 eax, ax
  00c01	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00c05	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00c0d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00c15	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00c18	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 2113 : 							triangle->point2.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  00c1d	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _index$3[ebp]
  00c23	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00c26	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  00c2b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00c2f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00c37	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  00c3c	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00c3f	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 2114 : 
; 2115 : 							index = terrain_3d_sector_point_word_references[triangle_count+2].point;

  00c44	8b 45 84	 mov	 eax, DWORD PTR _triangle_count$8[ebp]
  00c47	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  00c4d	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  00c52	89 95 60 ff ff
	ff		 mov	 DWORD PTR _index$3[ebp], edx

; 2116 : 							triangle->point3.x = ( ( ( float ) points_xz[index].x ) * terrain_3d_xz_scale ) + sector_x_offset;

  00c58	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _index$3[ebp]
  00c5e	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00c61	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  00c65	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00c69	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00c71	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _sector_x_offset$[ebp]
  00c76	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00c79	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 2117 : 							triangle->point3.y = ( ( ( float ) points_y[index].y ) * terrain_3d_map_scaled_height_difference ) + terrain_3d_map_minimum_height;

  00c7e	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00c83	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _index$3[ebp]
  00c89	8b 55 e0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00c8c	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  00c90	0f b7 c0	 movzx	 eax, ax
  00c93	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00c97	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00c9f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00ca7	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00caa	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 2118 : 							triangle->point3.z = ( ( ( float ) points_xz[index].z ) * terrain_3d_xz_scale ) + sector_z_offset;

  00caf	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _index$3[ebp]
  00cb5	8b 4d e4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00cb8	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  00cbd	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00cc1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_xz_scale@@3MA
  00cc9	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sector_z_offset$[ebp]
  00cce	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00cd1	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 2119 : 
; 2120 : 							if ( flag )

  00cd6	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _flag$4[ebp], 0
  00cdd	0f 84 94 00 00
	00		 je	 $LN35@get_terrai

; 2121 : 							{
; 2122 : 
; 2123 : 								vector2.x = triangle->point3.x - triangle->point2.x;

  00ce3	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00ce6	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00ce9	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00cee	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  00cf3	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _vector2$1[ebp], xmm0

; 2124 : 								vector2.y = triangle->point3.y - triangle->point2.y;

  00cfb	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00cfe	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00d01	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00d06	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00d0b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _vector2$1[ebp+4], xmm0

; 2125 : 								vector2.z = triangle->point3.z - triangle->point2.z;

  00d13	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00d16	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00d19	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00d1e	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00d23	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _vector2$1[ebp+8], xmm0

; 2126 : 
; 2127 : 								vector1.x = triangle->point2.x - triangle->point1.x;

  00d2b	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00d2e	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00d31	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00d36	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00d3a	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _vector1$2[ebp], xmm0

; 2128 : 								vector1.y = triangle->point2.y - triangle->point1.y;

  00d42	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00d45	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00d48	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00d4d	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00d52	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _vector1$2[ebp+4], xmm0

; 2129 : 								vector1.z = triangle->point2.z - triangle->point1.z;

  00d5a	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00d5d	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00d60	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00d65	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00d6a	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _vector1$2[ebp+8], xmm0

; 2130 : 							}
; 2131 : 							else

  00d72	e9 8f 00 00 00	 jmp	 $LN36@get_terrai
$LN35@get_terrai:

; 2132 : 							{
; 2133 : 
; 2134 : 								vector2.x = triangle->point1.x - triangle->point2.x;

  00d77	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00d7a	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00d7d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00d81	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  00d86	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _vector2$1[ebp], xmm0

; 2135 : 								vector2.y = triangle->point1.y - triangle->point2.y;

  00d8e	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00d91	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00d94	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00d99	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00d9e	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _vector2$1[ebp+4], xmm0

; 2136 : 								vector2.z = triangle->point1.z - triangle->point2.z;

  00da6	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00da9	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00dac	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00db1	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00db6	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _vector2$1[ebp+8], xmm0

; 2137 : 
; 2138 : 								vector1.x = triangle->point2.x - triangle->point3.x;

  00dbe	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00dc1	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00dc4	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00dc9	f3 0f 5c 41 18	 subss	 xmm0, DWORD PTR [ecx+24]
  00dce	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _vector1$2[ebp], xmm0

; 2139 : 								vector1.y = triangle->point2.y - triangle->point3.y;

  00dd6	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00dd9	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00ddc	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00de1	f3 0f 5c 41 1c	 subss	 xmm0, DWORD PTR [ecx+28]
  00de6	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _vector1$2[ebp+4], xmm0

; 2140 : 								vector1.z = triangle->point2.z - triangle->point3.z;

  00dee	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00df1	8b 4d d0	 mov	 ecx, DWORD PTR _triangle$[ebp]
  00df4	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00df9	f3 0f 5c 41 20	 subss	 xmm0, DWORD PTR [ecx+32]
  00dfe	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _vector1$2[ebp+8], xmm0
$LN36@get_terrai:

; 2141 : 							}
; 2142 : 
; 2143 : 							triangle->normal.x = ( vector1.y * vector2.z ) - ( vector1.z * vector2.y );

  00e06	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _vector1$2[ebp+4]
  00e0e	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector2$1[ebp+8]
  00e16	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _vector1$2[ebp+8]
  00e1e	f3 0f 59 8d 4c
	ff ff ff	 mulss	 xmm1, DWORD PTR _vector2$1[ebp+4]
  00e26	f3 0f 5c c1	 subss	 xmm0, xmm1
  00e2a	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00e2d	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 2144 : 							triangle->normal.y = ( vector1.z * vector2.x ) - ( vector1.x * vector2.z );

  00e32	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _vector1$2[ebp+8]
  00e3a	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector2$1[ebp]
  00e42	f3 0f 10 8d 54
	ff ff ff	 movss	 xmm1, DWORD PTR _vector1$2[ebp]
  00e4a	f3 0f 59 8d 50
	ff ff ff	 mulss	 xmm1, DWORD PTR _vector2$1[ebp+8]
  00e52	f3 0f 5c c1	 subss	 xmm0, xmm1
  00e56	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00e59	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 2145 : 							triangle->normal.z = ( vector1.x * vector2.y ) - ( vector1.y * vector2.x );

  00e5e	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _vector1$2[ebp]
  00e66	f3 0f 59 85 4c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vector2$1[ebp+4]
  00e6e	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _vector1$2[ebp+4]
  00e76	f3 0f 59 8d 48
	ff ff ff	 mulss	 xmm1, DWORD PTR _vector2$1[ebp]
  00e7e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00e82	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00e85	f3 0f 11 40 2c	 movss	 DWORD PTR [eax+44], xmm0

; 2146 : 
; 2147 : 							normalise_any_3d_vector ( &triangle->normal );

  00e8a	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00e8d	83 c0 24	 add	 eax, 36			; 00000024H
  00e90	50		 push	 eax
  00e91	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00e96	dd d8		 fstp	 ST(0)

; 2148 : 
; 2149 : 							triangle++;

  00e98	8b 45 d0	 mov	 eax, DWORD PTR _triangle$[ebp]
  00e9b	83 c0 30	 add	 eax, 48			; 00000030H
  00e9e	89 45 d0	 mov	 DWORD PTR _triangle$[ebp], eax

; 2150 : 
; 2151 : 							flag ^= 1;

  00ea1	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _flag$4[ebp]
  00ea7	83 f0 01	 xor	 eax, 1
  00eaa	89 85 64 ff ff
	ff		 mov	 DWORD PTR _flag$4[ebp], eax

; 2152 : 						}

  00eb0	e9 58 fc ff ff	 jmp	 $LN21@get_terrai
$LN22@get_terrai:

; 2153 : 					}
; 2154 : 
; 2155 : 					terrain_3d_sector_point_word_references += polygon->number_of_points;

  00eb5	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00eb8	8a 08		 mov	 cl, BYTE PTR [eax]
  00eba	80 e1 7f	 and	 cl, 127			; 0000007fH
  00ebd	0f b6 d1	 movzx	 edx, cl
  00ec0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  00ec5	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00ec8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, ecx ; terrain_3d_sector_point_word_references

; 2156 : 
; 2157 : 					polygon++;

  00ece	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00ed1	83 c0 01	 add	 eax, 1
  00ed4	89 45 dc	 mov	 DWORD PTR _polygon$[ebp], eax

; 2158 : 				}

  00ed7	e9 f2 f8 ff ff	 jmp	 $LN16@get_terrai
$LN17@get_terrai:

; 2159 : 
; 2160 : 				return;

  00edc	eb 4e		 jmp	 SHORT $LN1@get_terrai
$LN32@get_terrai:

; 2161 : 			}
; 2162 : 
; 2163 : 			if ( polygon->surface_change )

  00ede	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00ee1	8a 08		 mov	 cl, BYTE PTR [eax]
  00ee3	c0 e9 07	 shr	 cl, 7
  00ee6	80 e1 01	 and	 cl, 1
  00ee9	0f b6 d1	 movzx	 edx, cl
  00eec	85 d2		 test	 edx, edx
  00eee	74 15		 je	 SHORT $LN37@get_terrai

; 2164 : 			{
; 2165 : 
; 2166 : 				surface++;

  00ef0	8b 45 d8	 mov	 eax, DWORD PTR _surface$[ebp]
  00ef3	83 c0 01	 add	 eax, 1
  00ef6	89 45 d8	 mov	 DWORD PTR _surface$[ebp], eax

; 2167 : 
; 2168 : 				current_terrain_type = surface->surface_id;

  00ef9	8b 45 d8	 mov	 eax, DWORD PTR _surface$[ebp]
  00efc	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00eff	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_type@@3HA, ecx ; current_terrain_type
$LN37@get_terrai:

; 2169 : 			}
; 2170 : 
; 2171 : 			terrain_3d_sector_point_word_references += polygon->number_of_points;

  00f05	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00f08	8a 08		 mov	 cl, BYTE PTR [eax]
  00f0a	80 e1 7f	 and	 cl, 127			; 0000007fH
  00f0d	0f b6 d1	 movzx	 edx, cl
  00f10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A ; terrain_3d_sector_point_word_references
  00f15	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00f18	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_sector_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, ecx ; terrain_3d_sector_point_word_references

; 2172 : 
; 2173 : 			polygon++;

  00f1e	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00f21	83 c0 01	 add	 eax, 1
  00f24	89 45 dc	 mov	 DWORD PTR _polygon$[ebp], eax

; 2174 : 		}

  00f27	e9 81 f8 ff ff	 jmp	 $LN13@get_terrai
$LN14@get_terrai:
$LN1@get_terrai:

; 2175 : 	}
; 2176 : }

  00f2c	5f		 pop	 edi
  00f2d	5e		 pop	 esi
  00f2e	5b		 pop	 ebx
  00f2f	8b e5		 mov	 esp, ebp
  00f31	5d		 pop	 ebp
  00f32	c2 10 00	 ret	 16			; 00000010H
?get_terrain_3d_type_triangles_in_sector@@YGXMMHPAUTERRAIN_3D_TRIANGLE@@@Z ENDP ; get_terrain_3d_type_triangles_in_sector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_number_of_type_triangles_in_sector@@YGHMMH@Z
_TEXT	SEGMENT
_sector$ = -28						; size = 4
_surface$ = -24						; size = 4
_polygon$ = -20						; size = 4
_z_sec$ = -16						; size = 4
_x_sec$ = -12						; size = 4
_count$ = -8						; size = 4
_total$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_type$ = 16						; size = 4
?get_terrain_3d_number_of_type_triangles_in_sector@@YGHMMH@Z PROC ; get_terrain_3d_number_of_type_triangles_in_sector, COMDAT

; 1763 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1764 : 
; 1765 : 	int
; 1766 : 		total,
; 1767 : 		count,
; 1768 : 		x_sec,
; 1769 : 		z_sec;
; 1770 : 
; 1771 : 	struct TERRAIN_3D_FACE
; 1772 : 		*polygon;
; 1773 : 
; 1774 : 	struct TERRAIN_3D_SURFACE
; 1775 : 		*surface;
; 1776 : 
; 1777 : 	terrain_3d_sector
; 1778 : 		*sector;
; 1779 : 
; 1780 : 	get_terrain_3d_sector ( x, z, &x_sec, &z_sec );

  00009	8d 45 f0	 lea	 eax, DWORD PTR _z_sec$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d f4	 lea	 ecx, DWORD PTR _x_sec$[ebp]
  00010	51		 push	 ecx
  00011	51		 push	 ecx
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1781 : 
; 1782 : 	sector = &terrain_sectors[z_sec][x_sec];

  0002c	6b 45 f4 30	 imul	 eax, DWORD PTR _x_sec$[ebp], 48
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _z_sec$[ebp]
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00039	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  0003c	89 45 e4	 mov	 DWORD PTR _sector$[ebp], eax

; 1783 : 
; 1784 : 	surface = sector->surface_changes;

  0003f	8b 45 e4	 mov	 eax, DWORD PTR _sector$[ebp]
  00042	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00045	89 4d e8	 mov	 DWORD PTR _surface$[ebp], ecx

; 1785 : 
; 1786 : 	polygon = sector->polygons;

  00048	8b 45 e4	 mov	 eax, DWORD PTR _sector$[ebp]
  0004b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004e	89 4d ec	 mov	 DWORD PTR _polygon$[ebp], ecx

; 1787 : 
; 1788 : 	total = 0;

  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 1789 : 
; 1790 : 	for ( count = sector->number_of_polygons; count > 0; count-- )

  00058	8b 45 e4	 mov	 eax, DWORD PTR _sector$[ebp]
  0005b	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0005f	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
  00062	eb 09		 jmp	 SHORT $LN4@get_terrai
$LN2@get_terrai:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00067	83 e8 01	 sub	 eax, 1
  0006a	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_terrai:
  0006d	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00071	7e 59		 jle	 SHORT $LN3@get_terrai

; 1791 : 	{
; 1792 : 
; 1793 : 		if ( polygon->surface_change )

  00073	8b 45 ec	 mov	 eax, DWORD PTR _polygon$[ebp]
  00076	8a 08		 mov	 cl, BYTE PTR [eax]
  00078	c0 e9 07	 shr	 cl, 7
  0007b	80 e1 01	 and	 cl, 1
  0007e	0f b6 d1	 movzx	 edx, cl
  00081	85 d2		 test	 edx, edx
  00083	74 1c		 je	 SHORT $LN5@get_terrai

; 1794 : 		{
; 1795 : 
; 1796 : 			surface++;

  00085	8b 45 e8	 mov	 eax, DWORD PTR _surface$[ebp]
  00088	83 c0 01	 add	 eax, 1
  0008b	89 45 e8	 mov	 DWORD PTR _surface$[ebp], eax

; 1797 : 
; 1798 : 			terrain_types_in_sector[surface->surface_id] = TRUE;

  0008e	8b 45 e8	 mov	 eax, DWORD PTR _surface$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	c7 04 8d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?terrain_types_in_sector@@3PAHA[ecx*4], 1

; 1799 : 		}
; 1800 : 		else

  0009f	eb 20		 jmp	 SHORT $LN7@get_terrai
$LN5@get_terrai:

; 1801 : 		{
; 1802 : 
; 1803 : 			if ( surface->surface_id == type )

  000a1	8b 45 e8	 mov	 eax, DWORD PTR _surface$[ebp]
  000a4	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a7	3b 4d 10	 cmp	 ecx, DWORD PTR _type$[ebp]
  000aa	75 15		 jne	 SHORT $LN7@get_terrai

; 1804 : 			{
; 1805 : 
; 1806 : 				total += ( polygon->number_of_points - 2 );

  000ac	8b 45 ec	 mov	 eax, DWORD PTR _polygon$[ebp]
  000af	8a 08		 mov	 cl, BYTE PTR [eax]
  000b1	80 e1 7f	 and	 cl, 127			; 0000007fH
  000b4	0f b6 d1	 movzx	 edx, cl
  000b7	8b 45 fc	 mov	 eax, DWORD PTR _total$[ebp]
  000ba	8d 4c 10 fe	 lea	 ecx, DWORD PTR [eax+edx-2]
  000be	89 4d fc	 mov	 DWORD PTR _total$[ebp], ecx
$LN7@get_terrai:

; 1807 : 			}
; 1808 : 		}
; 1809 : 
; 1810 : 		polygon++;

  000c1	8b 45 ec	 mov	 eax, DWORD PTR _polygon$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 ec	 mov	 DWORD PTR _polygon$[ebp], eax

; 1811 : 	}

  000ca	eb 98		 jmp	 SHORT $LN2@get_terrai
$LN3@get_terrai:

; 1812 : 
; 1813 : 	return ( total );

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _total$[ebp]

; 1814 : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH
?get_terrain_3d_number_of_type_triangles_in_sector@@YGHMMH@Z ENDP ; get_terrain_3d_number_of_type_triangles_in_sector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_types_in_sector@@YGHMM@Z
_TEXT	SEGMENT
_sector$ = -28						; size = 4
_surface$ = -24						; size = 4
_polygon$ = -20						; size = 4
_z_sec$ = -16						; size = 4
_x_sec$ = -12						; size = 4
_count$ = -8						; size = 4
_number_of_types$ = -4					; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?get_terrain_3d_types_in_sector@@YGHMM@Z PROC		; get_terrain_3d_types_in_sector, COMDAT

; 1708 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1709 : 
; 1710 : 	int
; 1711 : 		number_of_types,
; 1712 : 		count,
; 1713 : 		x_sec,
; 1714 : 		z_sec;
; 1715 : 
; 1716 : 	struct TERRAIN_3D_FACE
; 1717 : 		*polygon;
; 1718 : 
; 1719 : 	struct TERRAIN_3D_SURFACE
; 1720 : 		*surface;
; 1721 : 
; 1722 : 	terrain_3d_sector
; 1723 : 		*sector;
; 1724 : 
; 1725 : 	get_terrain_3d_sector ( x, z, &x_sec, &z_sec );

  00009	8d 45 f0	 lea	 eax, DWORD PTR _z_sec$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d f4	 lea	 ecx, DWORD PTR _x_sec$[ebp]
  00010	51		 push	 ecx
  00011	51		 push	 ecx
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1726 : 
; 1727 : 	sector = &terrain_sectors[z_sec][x_sec];

  0002c	6b 45 f4 30	 imul	 eax, DWORD PTR _x_sec$[ebp], 48
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _z_sec$[ebp]
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00039	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  0003c	89 45 e4	 mov	 DWORD PTR _sector$[ebp], eax

; 1728 : 
; 1729 : 	surface = sector->surface_changes;

  0003f	8b 45 e4	 mov	 eax, DWORD PTR _sector$[ebp]
  00042	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00045	89 4d e8	 mov	 DWORD PTR _surface$[ebp], ecx

; 1730 : 
; 1731 : 	polygon = sector->polygons;

  00048	8b 45 e4	 mov	 eax, DWORD PTR _sector$[ebp]
  0004b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004e	89 4d ec	 mov	 DWORD PTR _polygon$[ebp], ecx

; 1732 : 
; 1733 : 	memset (	terrain_types_in_sector, 0, sizeof ( int ) * TERRAIN_TYPE_LAST );

  00051	68 f8 00 00 00	 push	 248			; 000000f8H
  00056	6a 00		 push	 0
  00058	68 00 00 00 00	 push	 OFFSET ?terrain_types_in_sector@@3PAHA ; terrain_types_in_sector
  0005d	e8 00 00 00 00	 call	 _memset
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1734 : 
; 1735 : 	terrain_types_in_sector[surface->surface_id] = TRUE;

  00065	8b 45 e8	 mov	 eax, DWORD PTR _surface$[ebp]
  00068	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0006b	c7 04 8d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?terrain_types_in_sector@@3PAHA[ecx*4], 1

; 1736 : 
; 1737 : 	number_of_types = 1;

  00076	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _number_of_types$[ebp], 1

; 1738 : 
; 1739 : 	for ( count = sector->number_of_polygons; count > 0; count-- )

  0007d	8b 45 e4	 mov	 eax, DWORD PTR _sector$[ebp]
  00080	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00084	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
  00087	eb 09		 jmp	 SHORT $LN4@get_terrai
$LN2@get_terrai:
  00089	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0008c	83 e8 01	 sub	 eax, 1
  0008f	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_terrai:
  00092	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00096	7e 40		 jle	 SHORT $LN3@get_terrai

; 1740 : 	{
; 1741 : 
; 1742 : 		if ( polygon->surface_change )

  00098	8b 45 ec	 mov	 eax, DWORD PTR _polygon$[ebp]
  0009b	8a 08		 mov	 cl, BYTE PTR [eax]
  0009d	c0 e9 07	 shr	 cl, 7
  000a0	80 e1 01	 and	 cl, 1
  000a3	0f b6 d1	 movzx	 edx, cl
  000a6	85 d2		 test	 edx, edx
  000a8	74 23		 je	 SHORT $LN5@get_terrai

; 1743 : 		{
; 1744 : 
; 1745 : 			surface++;

  000aa	8b 45 e8	 mov	 eax, DWORD PTR _surface$[ebp]
  000ad	83 c0 01	 add	 eax, 1
  000b0	89 45 e8	 mov	 DWORD PTR _surface$[ebp], eax

; 1746 : 
; 1747 : 			terrain_types_in_sector[surface->surface_id] = TRUE;

  000b3	8b 45 e8	 mov	 eax, DWORD PTR _surface$[ebp]
  000b6	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000b9	c7 04 8d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?terrain_types_in_sector@@3PAHA[ecx*4], 1

; 1748 : 
; 1749 : 			number_of_types++;

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _number_of_types$[ebp]
  000c7	83 c0 01	 add	 eax, 1
  000ca	89 45 fc	 mov	 DWORD PTR _number_of_types$[ebp], eax
$LN5@get_terrai:

; 1750 : 		}
; 1751 : 
; 1752 : 		polygon++;

  000cd	8b 45 ec	 mov	 eax, DWORD PTR _polygon$[ebp]
  000d0	83 c0 01	 add	 eax, 1
  000d3	89 45 ec	 mov	 DWORD PTR _polygon$[ebp], eax

; 1753 : 	}

  000d6	eb b1		 jmp	 SHORT $LN2@get_terrai
$LN3@get_terrai:

; 1754 : 
; 1755 : 	return ( number_of_types );

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _number_of_types$[ebp]

; 1756 : }

  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
?get_terrain_3d_types_in_sector@@YGHMM@Z ENDP		; get_terrain_3d_types_in_sector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_tree_scale@@YGMPAUTERRAIN_3D_TREE_DATA@@@Z
_TEXT	SEGMENT
_scale$ = -4						; size = 4
_tree$ = 8						; size = 4
?get_terrain_3d_tree_scale@@YGMPAUTERRAIN_3D_TREE_DATA@@@Z PROC ; get_terrain_3d_tree_scale, COMDAT

; 1683 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1684 : 
; 1685 : 	float
; 1686 : 		scale;
; 1687 : 
; 1688 : 	scale = tree->height;

  00009	8b 45 08	 mov	 eax, DWORD PTR _tree$[ebp]
  0000c	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0000f	80 e1 7f	 and	 cl, 127			; 0000007fH
  00012	0f b6 d1	 movzx	 edx, cl
  00015	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00019	f3 0f 11 45 fc	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1689 : 	scale *= ( ( 25 - 6 ) / 127.0 );

  0001e	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  00023	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc3264c993264ca
  0002b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0002f	f3 0f 11 45 fc	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1690 : 	scale += 6;

  00034	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00039	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40c00000
  00041	f3 0f 11 45 fc	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1691 : 	scale *= 1.10;

  00046	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _scale$[ebp]
  0004b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  00053	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00057	f3 0f 11 45 fc	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1692 : 
; 1693 : 	return ( scale );

  0005c	d9 45 fc	 fld	 DWORD PTR _scale$[ebp]

; 1694 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?get_terrain_3d_tree_scale@@YGMPAUTERRAIN_3D_TREE_DATA@@@Z ENDP ; get_terrain_3d_tree_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_ptr$ = 16						; size = 4
?get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z PROC ; get_terrain_3d_tree_sector_data, COMDAT

; 1653 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1654 : 
; 1655 : 	ASSERT ( x < terrain_3d_sector_x_max );

  00009	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  00012	7c 18		 jl	 SHORT $LN2@get_terrai
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z@4JA
  00019	83 c0 02	 add	 eax, 2
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NAGMKNCH@x?5?$DM?5terrain_3d_sector_x_max@
  00027	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_terrai:

; 1656 : 	ASSERT ( z < terrain_3d_sector_z_max );

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _z$[ebp]
  0002f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  00035	7c 18		 jl	 SHORT $LN3@get_terrai
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z@4JA
  0003c	83 c0 03	 add	 eax, 3
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JOMPPGBG@z?5?$DM?5terrain_3d_sector_z_max@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_terrai:

; 1657 : 	ASSERT ( x >= 0 );

  0004f	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00053	7d 18		 jge	 SHORT $LN4@get_terrai
  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z@4JA
  0005a	83 c0 04	 add	 eax, 4
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_06EBODONHD@x?5?$DO?$DN?50@
  00068	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_terrai:

; 1658 : 	ASSERT ( z >= 0 );

  0006d	83 7d 0c 00	 cmp	 DWORD PTR _z$[ebp], 0
  00071	7d 18		 jge	 SHORT $LN5@get_terrai
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z@4JA
  00078	83 c0 05	 add	 eax, 5
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_06NGHMPMFK@z?5?$DO?$DN?50@
  00086	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_terrai:

; 1659 : 
; 1660 : 	if ( terrain_tree_sectors )

  0008b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A, 0 ; terrain_tree_sectors
  00092	74 2e		 je	 SHORT $LN6@get_terrai

; 1661 : 	{
; 1662 : 
; 1663 : 		*ptr = terrain_tree_sectors[z][x].trees;

  00094	8b 45 0c	 mov	 eax, DWORD PTR _z$[ebp]
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  0009d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000a0	8b 45 10	 mov	 eax, DWORD PTR _ptr$[ebp]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000a6	8b 54 ca 04	 mov	 edx, DWORD PTR [edx+ecx*8+4]
  000aa	89 10		 mov	 DWORD PTR [eax], edx

; 1664 : 
; 1665 : 		return ( terrain_tree_sectors[z][x].number_of_trees );

  000ac	8b 45 0c	 mov	 eax, DWORD PTR _z$[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  000b5	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000bb	8b 04 c2	 mov	 eax, DWORD PTR [edx+eax*8]
  000be	eb 04		 jmp	 SHORT $LN1@get_terrai

; 1666 : 	}
; 1667 : 	else

  000c0	eb 02		 jmp	 SHORT $LN1@get_terrai
$LN6@get_terrai:

; 1668 : 	{
; 1669 : 
; 1670 : 		return ( 0 );

  000c2	33 c0		 xor	 eax, eax
$LN1@get_terrai:

; 1671 : 	}
; 1672 : }

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 0c 00	 ret	 12			; 0000000cH
?get_terrain_3d_tree_sector_data@@YGHHHPAPAUTERRAIN_3D_TREE_DATA@@@Z ENDP ; get_terrain_3d_tree_sector_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_point_sector_average_elevation@@YGMMM@Z
_TEXT	SEGMENT
tv139 = -76						; size = 4
_sector_z$ = -8						; size = 4
_sector_x$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?get_terrain_3d_point_sector_average_elevation@@YGMMM@Z PROC ; get_terrain_3d_point_sector_average_elevation, COMDAT

; 1629 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1630 : 
; 1631 : 	int
; 1632 : 		sector_x,
; 1633 : 		sector_z;
; 1634 : 
; 1635 : 	ASSERT ( terrain_initialised );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_initialised@@3HA, 0
  00010	75 18		 jne	 SHORT $LN2@get_terrai
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_terrain_3d_point_sector_average_elevation@@YGMMM@Z@4JA
  00017	83 c0 06	 add	 eax, 6
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JKHMMMJP@terrain_initialised@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_terrai:

; 1636 : 
; 1637 : 	if ( ( x < terrain_3d_min_map_x ) || ( x > terrain_3d_max_map_x ) || ( z < terrain_3d_min_map_z ) || ( z > terrain_3d_max_map_z ) )

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_x@@3MA
  00032	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _x$[ebp]
  00036	77 2a		 ja	 SHORT $LN4@get_terrai
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0003d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_x@@3MA
  00044	77 1c		 ja	 SHORT $LN4@get_terrai
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_z@@3MA
  0004e	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _z$[ebp]
  00052	77 0e		 ja	 SHORT $LN4@get_terrai
  00054	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00059	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  00060	76 27		 jbe	 SHORT $LN3@get_terrai
$LN4@get_terrai:

; 1638 : 	{
; 1639 : 
; 1640 : 		debug_fatal ( "Sector minimum terrain elevation off map: %f, %f", x, z );

  00062	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00067	83 ec 08	 sub	 esp, 8
  0006a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00074	83 ec 08	 sub	 esp, 8
  00077	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KOBGDPLC@Sector?5minimum?5terrain?5elevatio@
  00081	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00086	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@get_terrai:

; 1641 : 	}
; 1642 : 
; 1643 : 	get_terrain_3d_sector ( x, z, &sector_x, &sector_z );

  00089	8d 45 f8	 lea	 eax, DWORD PTR _sector_z$[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d fc	 lea	 ecx, DWORD PTR _sector_x$[ebp]
  00090	51		 push	 ecx
  00091	51		 push	 ecx
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1644 : 
; 1645 : 	return ( ( float ) terrain_sectors[sector_z][sector_x].average_height );

  000ac	6b 45 fc 30	 imul	 eax, DWORD PTR _sector_x$[ebp], 48
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _sector_z$[ebp]
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  000b9	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  000bc	0f bf 54 01 0a	 movsx	 edx, WORD PTR [ecx+eax+10]
  000c1	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000c5	f3 0f 11 45 b4	 movss	 DWORD PTR tv139[ebp], xmm0
  000ca	d9 45 b4	 fld	 DWORD PTR tv139[ebp]

; 1646 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?get_terrain_3d_point_sector_average_elevation@@YGMMM@Z ENDP ; get_terrain_3d_point_sector_average_elevation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z
_TEXT	SEGMENT
tv139 = -76						; size = 4
_sector_z$ = -8						; size = 4
_sector_x$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z PROC ; get_terrain_3d_point_sector_max_elevation, COMDAT

; 1605 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 : 
; 1607 : 	int
; 1608 : 		sector_x,
; 1609 : 		sector_z;
; 1610 : 
; 1611 : 	ASSERT ( terrain_initialised );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_initialised@@3HA, 0
  00010	75 18		 jne	 SHORT $LN2@get_terrai
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_terrain_3d_point_sector_max_elevation@@YGMMM@Z@4JA
  00017	83 c0 06	 add	 eax, 6
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JKHMMMJP@terrain_initialised@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_terrai:

; 1612 : 
; 1613 : 	if ( ( x < terrain_3d_min_map_x ) || ( x > terrain_3d_max_map_x ) || ( z < terrain_3d_min_map_z ) || ( z > terrain_3d_max_map_z ) )

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_x@@3MA
  00032	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _x$[ebp]
  00036	77 2a		 ja	 SHORT $LN4@get_terrai
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0003d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_x@@3MA
  00044	77 1c		 ja	 SHORT $LN4@get_terrai
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_z@@3MA
  0004e	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _z$[ebp]
  00052	77 0e		 ja	 SHORT $LN4@get_terrai
  00054	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00059	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  00060	76 27		 jbe	 SHORT $LN3@get_terrai
$LN4@get_terrai:

; 1614 : 	{
; 1615 : 
; 1616 : 		debug_fatal ( "Sector minimum terrain elevation off map: %f, %f", x, z );

  00062	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00067	83 ec 08	 sub	 esp, 8
  0006a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00074	83 ec 08	 sub	 esp, 8
  00077	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KOBGDPLC@Sector?5minimum?5terrain?5elevatio@
  00081	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00086	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@get_terrai:

; 1617 : 	}
; 1618 : 
; 1619 : 	get_terrain_3d_sector ( x, z, &sector_x, &sector_z );

  00089	8d 45 f8	 lea	 eax, DWORD PTR _sector_z$[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d fc	 lea	 ecx, DWORD PTR _sector_x$[ebp]
  00090	51		 push	 ecx
  00091	51		 push	 ecx
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1620 : 
; 1621 : 	return ( ( float ) terrain_sectors[sector_z][sector_x].maximum_height );

  000ac	6b 45 fc 30	 imul	 eax, DWORD PTR _sector_x$[ebp], 48
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _sector_z$[ebp]
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  000b9	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  000bc	0f bf 54 01 08	 movsx	 edx, WORD PTR [ecx+eax+8]
  000c1	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000c5	f3 0f 11 45 b4	 movss	 DWORD PTR tv139[ebp], xmm0
  000ca	d9 45 b4	 fld	 DWORD PTR tv139[ebp]

; 1622 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?get_terrain_3d_point_sector_max_elevation@@YGMMM@Z ENDP ; get_terrain_3d_point_sector_max_elevation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_point_sector_min_elevation@@YGMMM@Z
_TEXT	SEGMENT
tv139 = -76						; size = 4
_sector_z$ = -8						; size = 4
_sector_x$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?get_terrain_3d_point_sector_min_elevation@@YGMMM@Z PROC ; get_terrain_3d_point_sector_min_elevation, COMDAT

; 1581 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1582 : 
; 1583 : 	int
; 1584 : 		sector_x,
; 1585 : 		sector_z;
; 1586 : 
; 1587 : 	ASSERT ( terrain_initialised );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_initialised@@3HA, 0
  00010	75 18		 jne	 SHORT $LN2@get_terrai
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_terrain_3d_point_sector_min_elevation@@YGMMM@Z@4JA
  00017	83 c0 06	 add	 eax, 6
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JKHMMMJP@terrain_initialised@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_terrai:

; 1588 : 
; 1589 : 	if ( ( x < terrain_3d_min_map_x ) || ( x > terrain_3d_max_map_x ) || ( z < terrain_3d_min_map_z ) || ( z > terrain_3d_max_map_z ) )

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_x@@3MA
  00032	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _x$[ebp]
  00036	77 2a		 ja	 SHORT $LN4@get_terrai
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0003d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_x@@3MA
  00044	77 1c		 ja	 SHORT $LN4@get_terrai
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_z@@3MA
  0004e	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _z$[ebp]
  00052	77 0e		 ja	 SHORT $LN4@get_terrai
  00054	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00059	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  00060	76 27		 jbe	 SHORT $LN3@get_terrai
$LN4@get_terrai:

; 1590 : 	{
; 1591 : 
; 1592 : 		debug_fatal ( "Sector minimum terrain elevation off map: %f, %f", x, z );

  00062	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00067	83 ec 08	 sub	 esp, 8
  0006a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00074	83 ec 08	 sub	 esp, 8
  00077	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KOBGDPLC@Sector?5minimum?5terrain?5elevatio@
  00081	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00086	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@get_terrai:

; 1593 : 	}
; 1594 : 
; 1595 : 	get_terrain_3d_sector ( x, z, &sector_x, &sector_z );

  00089	8d 45 f8	 lea	 eax, DWORD PTR _sector_z$[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d fc	 lea	 ecx, DWORD PTR _sector_x$[ebp]
  00090	51		 push	 ecx
  00091	51		 push	 ecx
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1596 : 
; 1597 : 	return ( ( float ) terrain_sectors[sector_z][sector_x].minimum_height );

  000ac	6b 45 fc 30	 imul	 eax, DWORD PTR _sector_x$[ebp], 48
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _sector_z$[ebp]
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  000b9	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  000bc	0f bf 54 01 06	 movsx	 edx, WORD PTR [ecx+eax+6]
  000c1	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000c5	f3 0f 11 45 b4	 movss	 DWORD PTR tv139[ebp], xmm0
  000ca	d9 45 b4	 fld	 DWORD PTR tv139[ebp]

; 1598 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?get_terrain_3d_point_sector_min_elevation@@YGMMM@Z ENDP ; get_terrain_3d_point_sector_min_elevation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?animate_river_textures@@YGXXZ
_TEXT	SEGMENT
?animate_river_textures@@YGXXZ PROC			; animate_river_textures, COMDAT

; 1507 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1508 : 
; 1509 : 	river_texture_index++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?river_texture_index@@3HA
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?river_texture_index@@3HA, eax

; 1510 : 
; 1511 : 	if ( river_texture_index > 16 )

  00016	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?river_texture_index@@3HA, 16 ; 00000010H
  0001d	7e 0a		 jle	 SHORT $LN1@animate_ri

; 1512 : 	{
; 1513 : 
; 1514 : 		river_texture_index = 1;

  0001f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?river_texture_index@@3HA, 1
$LN1@animate_ri:

; 1515 : 	}
; 1516 : /*
; 1517 : 	switch ( river_texture_index )
; 1518 : 	{
; 1519 : 
; 1520 : 		case 1: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER001]; break;
; 1521 : 		case 2: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER002]; break;
; 1522 : 		case 3: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER003]; break;
; 1523 : 		case 4: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER004]; break;
; 1524 : 		case 5: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER005]; break;
; 1525 : 		case 6: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER006]; break;
; 1526 : 		case 7: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER007]; break;
; 1527 : 		case 8: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER008]; break;
; 1528 : 		case 9: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER009]; break;
; 1529 : 		case 10: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER010]; break;
; 1530 : 		case 11: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER011]; break;
; 1531 : 		case 12: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER012]; break;
; 1532 : 		case 13: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER013]; break;
; 1533 : 		case 14: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER014]; break;
; 1534 : 		case 15: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER015]; break;
; 1535 : 		case 16: terrain_type_information[TERRAIN_TYPE_RIVER].texture = &system_textures[TEXTURE_INDEX_WATERLAYER016]; break;
; 1536 : 	}
; 1537 : 	*/
; 1538 : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?animate_river_textures@@YGXXZ ENDP			; animate_river_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?position_on_3d_terrain@@YGHMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?position_on_3d_terrain@@YGHMM@Z PROC			; position_on_3d_terrain, COMDAT

; 1562 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1563 : 
; 1564 : 	if ( ( x < terrain_3d_min_map_x ) || ( x > terrain_3d_max_map_x ) || ( z < terrain_3d_min_map_z ) || ( z > terrain_3d_max_map_z ) )

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_x@@3MA
  00011	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _x$[ebp]
  00015	77 2a		 ja	 SHORT $LN4@position_o
  00017	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0001c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_x@@3MA
  00023	77 1c		 ja	 SHORT $LN4@position_o
  00025	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_z@@3MA
  0002d	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _z$[ebp]
  00031	77 0e		 ja	 SHORT $LN4@position_o
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00038	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  0003f	76 06		 jbe	 SHORT $LN2@position_o
$LN4@position_o:

; 1565 : 	{
; 1566 : 
; 1567 : 		return ( FALSE );

  00041	33 c0		 xor	 eax, eax
  00043	eb 07		 jmp	 SHORT $LN3@position_o

; 1568 : 	}
; 1569 : 	else

  00045	eb 05		 jmp	 SHORT $LN3@position_o
$LN2@position_o:

; 1570 : 	{
; 1571 : 
; 1572 : 		return ( TRUE );

  00047	b8 01 00 00 00	 mov	 eax, 1
$LN3@position_o:

; 1573 : 	}
; 1574 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?position_on_3d_terrain@@YGHMM@Z ENDP			; position_on_3d_terrain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?get_terrain_3d_sector@@YGXMMPAH0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_sectorx$ = 16						; size = 4
_sectorz$ = 20						; size = 4
?get_terrain_3d_sector@@YGXMMPAH0@Z PROC		; get_terrain_3d_sector, COMDAT

; 1490 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1491 : 
; 1492 : 	set_fpu_rounding_mode_zero ();

  00009	e8 00 00 00 00	 call	 ?set_fpu_rounding_mode_zero@@YGXXZ ; set_fpu_rounding_mode_zero

; 1493 : 
; 1494 : 	convert_float_to_int ( ( x / TERRAIN_3D_SECTOR_SIDE_LENGTH ), sectorx );

  0000e	8b 45 10	 mov	 eax, DWORD PTR _sectorx$[ebp]
  00011	50		 push	 eax
  00012	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00017	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@45000000
  0001f	51		 push	 ecx
  00020	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00025	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1495 : 
; 1496 : 	convert_float_to_int ( ( z / TERRAIN_3D_SECTOR_SIDE_LENGTH ), sectorz );

  0002a	8b 45 14	 mov	 eax, DWORD PTR _sectorz$[ebp]
  0002d	50		 push	 eax
  0002e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00033	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@45000000
  0003b	51		 push	 ecx
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1497 : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
?get_terrain_3d_sector@@YGXMMPAH0@Z ENDP		; get_terrain_3d_sector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?save_terrain_sector_as_lw_3d_object@@YGXHHPBD@Z
_TEXT	SEGMENT
_value$1 = -73						; size = 1
_point_count$2 = -72					; size = 4
_surface$3 = -68					; size = 4
_points_offset$4 = -64					; size = 4
_z$5 = -60						; size = 4
_y$6 = -56						; size = 4
_x$7 = -52						; size = 4
_number_of_polygon_triangles$8 = -48			; size = 4
_points_y$ = -44					; size = 4
_points_xz$ = -40					; size = 4
_polygon$ = -36						; size = 4
_number_of_point_references$ = -32			; size = 4
_number_of_triangles$ = -28				; size = 4
_size$ = -24						; size = 4
_count$ = -20						; size = 4
_sector$ = -16						; size = 4
_id$ = -12						; size = 8
_fp$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_filename$ = 16						; size = 4
?save_terrain_sector_as_lw_3d_object@@YGXHHPBD@Z PROC	; save_terrain_sector_as_lw_3d_object, COMDAT

; 1167 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1168 : 
; 1169 : 	FILE
; 1170 : 		*fp;
; 1171 : 
; 1172 : 	char
; 1173 : 		id[8];
; 1174 : 
; 1175 : 	terrain_3d_sector
; 1176 : 		*sector;
; 1177 : 
; 1178 : 	int
; 1179 : 		count,
; 1180 : 		size,
; 1181 : 		number_of_triangles,
; 1182 : 		number_of_point_references;
; 1183 : 
; 1184 : 	terrain_3d_face
; 1185 : 		*polygon;
; 1186 : 
; 1187 : 	terrain_3d_point_xz
; 1188 : 		*points_xz;
; 1189 : 
; 1190 : 	terrain_3d_point_y
; 1191 : 		*points_y;
; 1192 : 
; 1193 : 	fp = safe_fopen ( filename, "wb" );

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00011	8b 45 10	 mov	 eax, DWORD PTR _filename$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0001a	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 1194 : 
; 1195 : 	sector = &terrain_sectors[z][x];

  0001d	6b 45 08 30	 imul	 eax, DWORD PTR _x$[ebp], 48
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _z$[ebp]
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0002a	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  0002d	89 45 f0	 mov	 DWORD PTR _sector$[ebp], eax

; 1196 : 
; 1197 : 	points_y = sector->points_y;

  00030	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  00033	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00036	89 4d d4	 mov	 DWORD PTR _points_y$[ebp], ecx

; 1198 : 
; 1199 : 	points_xz = ( terrain_3d_point_xz * ) points_y + sector->number_of_points;

  00039	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  0003c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0003f	8b 55 d4	 mov	 edx, DWORD PTR _points_y$[ebp]
  00042	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00045	89 45 d8	 mov	 DWORD PTR _points_xz$[ebp], eax

; 1200 : 
; 1201 : 	fwrite ( "FORM", 4, 1, fp );

  00048	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0004b	50		 push	 eax
  0004c	6a 01		 push	 1
  0004e	6a 04		 push	 4
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_04HPGCGPG@FORM@
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0005b	83 c4 10	 add	 esp, 16			; 00000010H

; 1202 : 
; 1203 : 	//
; 1204 : 	// Work out the size of the file.
; 1205 : 	//
; 1206 : 
; 1207 : 	//
; 1208 : 	//
; 1209 : 	//
; 1210 : 	// LWOB identifier
; 1211 : 	//			4 bytes
; 1212 : 	//
; 1213 : 	// Surface names:
; 1214 : 	//			8 bytes + 8 * number of surfaces
; 1215 : 	//
; 1216 : 	// Surface descriptions:
; 1217 : 	//			26 * number of surfaces
; 1218 : 	//
; 1219 : 	// Points:
; 1220 : 	//			8 bytes + 12 * number of points
; 1221 : 	//
; 1222 : 	// Faces:
; 1223 : 	//			8 bytes + 4 * number of faces + 2 * number of point references
; 1224 : 	//
; 1225 : 	// Total:
; 1226 : 	//			28 + 12 * Points + 4 * faces + 2 * point refs
; 1227 : 	//
; 1228 : 
; 1229 : 	polygon = sector->polygons;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  00061	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00064	89 4d dc	 mov	 DWORD PTR _polygon$[ebp], ecx

; 1230 : 
; 1231 : 	number_of_point_references = 0;

  00067	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _number_of_point_references$[ebp], 0

; 1232 : 
; 1233 : 	number_of_triangles = 0;

  0006e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _number_of_triangles$[ebp], 0

; 1234 : 
; 1235 : 	for ( count = 0; count < sector->number_of_polygons; count++ )

  00075	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0007c	eb 09		 jmp	 SHORT $LN4@save_terra
$LN2@save_terra:
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00081	83 c0 01	 add	 eax, 1
  00084	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN4@save_terra:
  00087	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  0008a	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0008e	39 4d ec	 cmp	 DWORD PTR _count$[ebp], ecx
  00091	7d 2f		 jge	 SHORT $LN3@save_terra

; 1236 : 	{
; 1237 : 
; 1238 : 		int
; 1239 : 			number_of_polygon_triangles;
; 1240 : 
; 1241 : 		number_of_polygon_triangles = ( polygon->number_of_points - 2 );

  00093	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00096	8a 08		 mov	 cl, BYTE PTR [eax]
  00098	80 e1 7f	 and	 cl, 127			; 0000007fH
  0009b	0f b6 d1	 movzx	 edx, cl
  0009e	83 ea 02	 sub	 edx, 2
  000a1	89 55 d0	 mov	 DWORD PTR _number_of_polygon_triangles$8[ebp], edx

; 1242 : 
; 1243 : 		number_of_triangles += number_of_polygon_triangles;

  000a4	8b 45 e4	 mov	 eax, DWORD PTR _number_of_triangles$[ebp]
  000a7	03 45 d0	 add	 eax, DWORD PTR _number_of_polygon_triangles$8[ebp]
  000aa	89 45 e4	 mov	 DWORD PTR _number_of_triangles$[ebp], eax

; 1244 : 
; 1245 : 		number_of_point_references += 3 * number_of_polygon_triangles;

  000ad	6b 45 d0 03	 imul	 eax, DWORD PTR _number_of_polygon_triangles$8[ebp], 3
  000b1	03 45 e0	 add	 eax, DWORD PTR _number_of_point_references$[ebp]
  000b4	89 45 e0	 mov	 DWORD PTR _number_of_point_references$[ebp], eax

; 1246 : 
; 1247 : 		polygon++;

  000b7	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  000ba	83 c0 01	 add	 eax, 1
  000bd	89 45 dc	 mov	 DWORD PTR _polygon$[ebp], eax

; 1248 : 	}

  000c0	eb bc		 jmp	 SHORT $LN2@save_terra
$LN3@save_terra:

; 1249 : 
; 1250 : 	size = 28 +

  000c2	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  000c5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000c8	6b d1 0c	 imul	 edx, ecx, 12
  000cb	8b 45 e4	 mov	 eax, DWORD PTR _number_of_triangles$[ebp]
  000ce	8d 8c 82 36 08
	00 00		 lea	 ecx, DWORD PTR [edx+eax*4+2102]
  000d5	8b 55 e0	 mov	 edx, DWORD PTR _number_of_point_references$[ebp]
  000d8	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]
  000db	89 45 e8	 mov	 DWORD PTR _size$[ebp], eax

; 1251 : 			( 26 * ( TERRAIN_TYPE_LAST - 1 ) ) +
; 1252 : 			( 8 * ( TERRAIN_TYPE_LAST - 1 ) ) +
; 1253 : 			( 12 * sector->number_of_points ) +
; 1254 : 			( 4 * number_of_triangles ) +
; 1255 : 			( 2 * number_of_point_references );
; 1256 : 
; 1257 : 	iff_int_write ( size, fp );

  000de	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d e8	 mov	 ecx, DWORD PTR _size$[ebp]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ?iff_int_write@@YGXHPAU_iobuf@@@Z ; iff_int_write

; 1258 : 
; 1259 : 	fwrite ( "LWOB", 4, 1, fp );

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  000ee	50		 push	 eax
  000ef	6a 01		 push	 1
  000f1	6a 04		 push	 4
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_04ELINGNML@LWOB@
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000fe	83 c4 10	 add	 esp, 16			; 00000010H

; 1260 : 
; 1261 : 	//
; 1262 : 	// Detail the surface names
; 1263 : 	//
; 1264 : 
; 1265 : 	fwrite ( "SRFS", 4, 1, fp );

  00101	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00104	50		 push	 eax
  00105	6a 01		 push	 1
  00107	6a 04		 push	 4
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_04MCOLIFDF@SRFS@
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00114	83 c4 10	 add	 esp, 16			; 00000010H

; 1266 : 
; 1267 : 	iff_int_write ( ( ( TERRAIN_TYPE_LAST -1 ) * 8 ), fp );

  00117	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0011a	50		 push	 eax
  0011b	68 e8 01 00 00	 push	 488			; 000001e8H
  00120	e8 00 00 00 00	 call	 ?iff_int_write@@YGXHPAU_iobuf@@@Z ; iff_int_write

; 1268 : 
; 1269 : 	for ( count = 1; count < TERRAIN_TYPE_LAST; count++ )

  00125	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  0012c	eb 09		 jmp	 SHORT $LN7@save_terra
$LN5@save_terra:
  0012e	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00131	83 c0 01	 add	 eax, 1
  00134	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN7@save_terra:
  00137	83 7d ec 3e	 cmp	 DWORD PTR _count$[ebp], 62 ; 0000003eH
  0013b	7d 2c		 jge	 SHORT $LN6@save_terra

; 1270 : 	{
; 1271 : 
; 1272 : 		sprintf ( id, "%07d", count );

  0013d	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00140	50		 push	 eax
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_04OAGCANIB@?$CF07d@
  00146	8d 4d f4	 lea	 ecx, DWORD PTR _id$[ebp]
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 _sprintf
  0014f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1273 : 
; 1274 : 		fwrite ( id, 8, 1, fp );

  00152	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00155	50		 push	 eax
  00156	6a 01		 push	 1
  00158	6a 08		 push	 8
  0015a	8d 4d f4	 lea	 ecx, DWORD PTR _id$[ebp]
  0015d	51		 push	 ecx
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00164	83 c4 10	 add	 esp, 16			; 00000010H

; 1275 : 	}

  00167	eb c5		 jmp	 SHORT $LN5@save_terra
$LN6@save_terra:

; 1276 : 
; 1277 : 	//
; 1278 : 	// Describe the 3d points
; 1279 : 	//
; 1280 : 
; 1281 : 	fwrite ( "PNTS", 4, 1, fp );

  00169	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0016c	50		 push	 eax
  0016d	6a 01		 push	 1
  0016f	6a 04		 push	 4
  00171	68 00 00 00 00	 push	 OFFSET ??_C@_04IACGGANM@PNTS@
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0017c	83 c4 10	 add	 esp, 16			; 00000010H

; 1282 : 
; 1283 : 	iff_int_write ( ( 12 * sector->number_of_points ), fp );

  0017f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00182	50		 push	 eax
  00183	8b 4d f0	 mov	 ecx, DWORD PTR _sector$[ebp]
  00186	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00189	6b c2 0c	 imul	 eax, edx, 12
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ?iff_int_write@@YGXHPAU_iobuf@@@Z ; iff_int_write

; 1284 : 
; 1285 : 	for ( count = 0; count < sector->number_of_points; count++ )

  00192	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00199	eb 09		 jmp	 SHORT $LN10@save_terra
$LN8@save_terra:
  0019b	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0019e	83 c0 01	 add	 eax, 1
  001a1	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN10@save_terra:
  001a4	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  001a7	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001aa	39 4d ec	 cmp	 DWORD PTR _count$[ebp], ecx
  001ad	0f 8d 83 00 00
	00		 jge	 $LN9@save_terra

; 1286 : 	{
; 1287 : 
; 1288 : 		float
; 1289 : 			x,
; 1290 : 			y,
; 1291 : 			z;
; 1292 : 
; 1293 : 		x = points_xz[count].x;

  001b3	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  001b6	8b 4d d8	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  001b9	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  001bd	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001c1	f3 0f 11 45 cc	 movss	 DWORD PTR _x$7[ebp], xmm0

; 1294 : 		y = points_y[count].y;

  001c6	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  001cb	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  001ce	8b 55 d4	 mov	 edx, DWORD PTR _points_y$[ebp]
  001d1	66 23 04 4a	 and	 ax, WORD PTR [edx+ecx*2]
  001d5	0f b7 c0	 movzx	 eax, ax
  001d8	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001dc	f3 0f 11 45 c8	 movss	 DWORD PTR _y$6[ebp], xmm0

; 1295 : 		z = points_xz[count].z;

  001e1	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  001e4	8b 4d d8	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  001e7	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  001ec	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001f0	f3 0f 11 45 c4	 movss	 DWORD PTR _z$5[ebp], xmm0

; 1296 : /*
; 1297 : 		x *= ( 2048.0 / 65535.0 );
; 1298 : 		z *= ( 2048.0 / 65535.0 );
; 1299 : 		y = ( sector->maximum_height - sector->minimum_height );
; 1300 : 
; 1301 : 		if ( y == 0 )
; 1302 : 		{
; 1303 : 
; 1304 : 			y = sector->maximum_height;
; 1305 : 		}
; 1306 : 		else
; 1307 : 		{
; 1308 : 
; 1309 : 			y = sector->minimum_height + ( ( float ) points_y[count].y / 32767.0 ) * y;
; 1310 : 		}
; 1311 : */
; 1312 : 
; 1313 : 		iff_float_write ( x, fp );

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  001f8	50		 push	 eax
  001f9	51		 push	 ecx
  001fa	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$7[ebp]
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	e8 00 00 00 00	 call	 ?iff_float_write@@YGXMPAU_iobuf@@@Z ; iff_float_write

; 1314 : 		iff_float_write ( y, fp );

  00209	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0020c	50		 push	 eax
  0020d	51		 push	 ecx
  0020e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$6[ebp]
  00213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00218	e8 00 00 00 00	 call	 ?iff_float_write@@YGXMPAU_iobuf@@@Z ; iff_float_write

; 1315 : 		iff_float_write ( z, fp );

  0021d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00220	50		 push	 eax
  00221	51		 push	 ecx
  00222	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _z$5[ebp]
  00227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022c	e8 00 00 00 00	 call	 ?iff_float_write@@YGXMPAU_iobuf@@@Z ; iff_float_write

; 1316 : 	}

  00231	e9 65 ff ff ff	 jmp	 $LN8@save_terra
$LN9@save_terra:

; 1317 : 
; 1318 : 	//
; 1319 : 	// Describe the polygons
; 1320 : 	//
; 1321 : 
; 1322 : 	{
; 1323 : 
; 1324 : 		int
; 1325 : 			points_offset;
; 1326 : 
; 1327 : 		terrain_3d_surface
; 1328 : 			*surface;
; 1329 : 
; 1330 : 		fwrite ( "POLS", 4, 1, fp );

  00236	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00239	50		 push	 eax
  0023a	6a 01		 push	 1
  0023c	6a 04		 push	 4
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_04CKKPPFHB@POLS@
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00249	83 c4 10	 add	 esp, 16			; 00000010H

; 1331 : 
; 1332 : 		iff_int_write ( ( ( 4 * number_of_triangles ) + ( 2 * number_of_point_references ) ), fp );

  0024c	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0024f	50		 push	 eax
  00250	8b 4d e0	 mov	 ecx, DWORD PTR _number_of_point_references$[ebp]
  00253	d1 e1		 shl	 ecx, 1
  00255	8b 55 e4	 mov	 edx, DWORD PTR _number_of_triangles$[ebp]
  00258	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?iff_int_write@@YGXHPAU_iobuf@@@Z ; iff_int_write

; 1333 : 
; 1334 : 		points_offset = 0;

  00261	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _points_offset$4[ebp], 0

; 1335 : 
; 1336 : 		polygon = sector->polygons;

  00268	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  0026b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0026e	89 4d dc	 mov	 DWORD PTR _polygon$[ebp], ecx

; 1337 : 
; 1338 : 		surface = sector->surface_changes;

  00271	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  00274	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00277	89 4d bc	 mov	 DWORD PTR _surface$3[ebp], ecx

; 1339 : 
; 1340 : 		for ( count = 0; count < sector->number_of_polygons; count++ )

  0027a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00281	eb 09		 jmp	 SHORT $LN13@save_terra
$LN11@save_terra:
  00283	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00286	83 c0 01	 add	 eax, 1
  00289	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN13@save_terra:
  0028c	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  0028f	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00293	39 4d ec	 cmp	 DWORD PTR _count$[ebp], ecx
  00296	0f 8d ff 03 00
	00		 jge	 $LN12@save_terra

; 1341 : 		{
; 1342 : 
; 1343 : 			int
; 1344 : 				point_count;
; 1345 : 
; 1346 : 			if ( polygon->surface_change )

  0029c	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  0029f	8a 08		 mov	 cl, BYTE PTR [eax]
  002a1	c0 e9 07	 shr	 cl, 7
  002a4	80 e1 01	 and	 cl, 1
  002a7	0f b6 d1	 movzx	 edx, cl
  002aa	85 d2		 test	 edx, edx
  002ac	74 09		 je	 SHORT $LN29@save_terra

; 1347 : 			{
; 1348 : 
; 1349 : 				surface++;

  002ae	8b 45 bc	 mov	 eax, DWORD PTR _surface$3[ebp]
  002b1	83 c0 01	 add	 eax, 1
  002b4	89 45 bc	 mov	 DWORD PTR _surface$3[ebp], eax
$LN29@save_terra:

; 1350 : 			}
; 1351 : 
; 1352 : 			if ( terrain_type_information[surface->surface_id].polygon_type == POLYGON_TYPE_FAN )

  002b7	8b 45 bc	 mov	 eax, DWORD PTR _surface$3[ebp]
  002ba	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  002bd	6b d1 38	 imul	 edx, ecx, 56
  002c0	83 ba 30 00 00
	00 00		 cmp	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[edx+48], 0
  002c7	0f 85 54 01 00
	00		 jne	 $LN30@save_terra

; 1353 : 			{
; 1354 : 
; 1355 : 				if ( sector->number_of_points < 257 )

  002cd	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  002d0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002d3	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  002d9	0f 8d a7 00 00
	00		 jge	 $LN32@save_terra

; 1356 : 				{
; 1357 : 
; 1358 : 					for ( point_count = 0; point_count < ( polygon->number_of_points - 2 ); point_count++ )

  002df	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _point_count$2[ebp], 0
  002e6	eb 09		 jmp	 SHORT $LN16@save_terra
$LN14@save_terra:
  002e8	8b 45 b8	 mov	 eax, DWORD PTR _point_count$2[ebp]
  002eb	83 c0 01	 add	 eax, 1
  002ee	89 45 b8	 mov	 DWORD PTR _point_count$2[ebp], eax
$LN16@save_terra:
  002f1	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  002f4	8a 08		 mov	 cl, BYTE PTR [eax]
  002f6	80 e1 7f	 and	 cl, 127			; 0000007fH
  002f9	0f b6 d1	 movzx	 edx, cl
  002fc	83 ea 02	 sub	 edx, 2
  002ff	39 55 b8	 cmp	 DWORD PTR _point_count$2[ebp], edx
  00302	7d 7d		 jge	 SHORT $LN15@save_terra

; 1359 : 					{
; 1360 : 
; 1361 : 						iff_short_int_write ( 3, fp );

  00304	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00307	50		 push	 eax
  00308	6a 03		 push	 3
  0030a	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1362 : 						iff_short_int_write ( sector->point_byte_references[points_offset].point, fp );

  0030f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00312	50		 push	 eax
  00313	8b 4d f0	 mov	 ecx, DWORD PTR _sector$[ebp]
  00316	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00319	8b 45 c0	 mov	 eax, DWORD PTR _points_offset$4[ebp]
  0031c	66 0f b6 0c 02	 movzx	 cx, BYTE PTR [edx+eax]
  00321	0f b7 d1	 movzx	 edx, cx
  00324	52		 push	 edx
  00325	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1363 : 						iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 1].point, fp );

  0032a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0032d	50		 push	 eax
  0032e	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  00331	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00334	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  00337	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0033a	66 0f b6 4c 08
	01		 movzx	 cx, BYTE PTR [eax+ecx+1]
  00340	0f b7 d1	 movzx	 edx, cx
  00343	52		 push	 edx
  00344	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1364 : 						iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 2].point, fp );

  00349	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0034c	50		 push	 eax
  0034d	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  00350	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00353	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  00356	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00359	66 0f b6 4c 08
	02		 movzx	 cx, BYTE PTR [eax+ecx+2]
  0035f	0f b7 d1	 movzx	 edx, cx
  00362	52		 push	 edx
  00363	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1365 : 						iff_short_int_write ( ( short int ) surface->surface_id, fp );

  00368	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0036b	50		 push	 eax
  0036c	8b 4d bc	 mov	 ecx, DWORD PTR _surface$3[ebp]
  0036f	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  00373	0f b7 c2	 movzx	 eax, dx
  00376	50		 push	 eax
  00377	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1366 : 					}

  0037c	e9 67 ff ff ff	 jmp	 $LN14@save_terra
$LN15@save_terra:

; 1367 : 				}
; 1368 : 				else

  00381	e9 96 00 00 00	 jmp	 $LN18@save_terra
$LN32@save_terra:

; 1369 : 				{
; 1370 : 
; 1371 : 					for ( point_count = 0; point_count < ( polygon->number_of_points - 2 ); point_count++ )

  00386	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _point_count$2[ebp], 0
  0038d	eb 09		 jmp	 SHORT $LN19@save_terra
$LN17@save_terra:
  0038f	8b 45 b8	 mov	 eax, DWORD PTR _point_count$2[ebp]
  00392	83 c0 01	 add	 eax, 1
  00395	89 45 b8	 mov	 DWORD PTR _point_count$2[ebp], eax
$LN19@save_terra:
  00398	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  0039b	8a 08		 mov	 cl, BYTE PTR [eax]
  0039d	80 e1 7f	 and	 cl, 127			; 0000007fH
  003a0	0f b6 d1	 movzx	 edx, cl
  003a3	83 ea 02	 sub	 edx, 2
  003a6	39 55 b8	 cmp	 DWORD PTR _point_count$2[ebp], edx
  003a9	7d 71		 jge	 SHORT $LN18@save_terra

; 1372 : 					{
; 1373 : 
; 1374 : 						iff_short_int_write ( 3, fp );

  003ab	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  003ae	50		 push	 eax
  003af	6a 03		 push	 3
  003b1	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1375 : 						iff_short_int_write ( sector->point_word_references[points_offset].point, fp );

  003b6	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  003b9	50		 push	 eax
  003ba	8b 4d f0	 mov	 ecx, DWORD PTR _sector$[ebp]
  003bd	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  003c0	8b 45 c0	 mov	 eax, DWORD PTR _points_offset$4[ebp]
  003c3	0f b7 0c 42	 movzx	 ecx, WORD PTR [edx+eax*2]
  003c7	51		 push	 ecx
  003c8	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1376 : 						iff_short_int_write ( sector->point_word_references[points_offset + point_count + 1].point, fp );

  003cd	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  003d0	50		 push	 eax
  003d1	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  003d4	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  003d7	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  003da	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003dd	0f b7 4c 48 02	 movzx	 ecx, WORD PTR [eax+ecx*2+2]
  003e2	51		 push	 ecx
  003e3	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1377 : 						iff_short_int_write ( sector->point_word_references[points_offset + point_count + 2].point, fp );

  003e8	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  003eb	50		 push	 eax
  003ec	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  003ef	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  003f2	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  003f5	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003f8	0f b7 4c 48 04	 movzx	 ecx, WORD PTR [eax+ecx*2+4]
  003fd	51		 push	 ecx
  003fe	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1378 : 						iff_short_int_write ( ( short int ) surface->surface_id, fp );

  00403	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00406	50		 push	 eax
  00407	8b 4d bc	 mov	 ecx, DWORD PTR _surface$3[ebp]
  0040a	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  0040e	0f b7 c2	 movzx	 eax, dx
  00411	50		 push	 eax
  00412	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1379 : 					}

  00417	e9 73 ff ff ff	 jmp	 $LN17@save_terra
$LN18@save_terra:

; 1380 : 				}
; 1381 : 			}
; 1382 : 			else

  0041c	e9 5b 02 00 00	 jmp	 $LN24@save_terra
$LN30@save_terra:

; 1383 : 			{
; 1384 : 
; 1385 : 				if ( sector->number_of_points < 257 )

  00421	8b 45 f0	 mov	 eax, DWORD PTR _sector$[ebp]
  00424	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00427	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  0042d	0f 8d 33 01 00
	00		 jge	 $LN34@save_terra

; 1386 : 				{
; 1387 : 
; 1388 : 					for ( point_count = 0; point_count < ( polygon->number_of_points - 2 ); point_count++ )

  00433	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _point_count$2[ebp], 0
  0043a	eb 09		 jmp	 SHORT $LN22@save_terra
$LN20@save_terra:
  0043c	8b 45 b8	 mov	 eax, DWORD PTR _point_count$2[ebp]
  0043f	83 c0 01	 add	 eax, 1
  00442	89 45 b8	 mov	 DWORD PTR _point_count$2[ebp], eax
$LN22@save_terra:
  00445	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00448	8a 08		 mov	 cl, BYTE PTR [eax]
  0044a	80 e1 7f	 and	 cl, 127			; 0000007fH
  0044d	0f b6 d1	 movzx	 edx, cl
  00450	83 ea 02	 sub	 edx, 2
  00453	39 55 b8	 cmp	 DWORD PTR _point_count$2[ebp], edx
  00456	0f 8d 05 01 00
	00		 jge	 $LN21@save_terra

; 1389 : 					{
; 1390 : 
; 1391 : 						if ( point_count & 1 )

  0045c	8b 45 b8	 mov	 eax, DWORD PTR _point_count$2[ebp]
  0045f	83 e0 01	 and	 eax, 1
  00462	74 7d		 je	 SHORT $LN36@save_terra

; 1392 : 						{
; 1393 : 
; 1394 : 							iff_short_int_write ( 3, fp );

  00464	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00467	50		 push	 eax
  00468	6a 03		 push	 3
  0046a	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1395 : 							iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 0].point, fp );

  0046f	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00472	50		 push	 eax
  00473	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  00476	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00479	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  0047c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0047f	66 0f b6 0c 08	 movzx	 cx, BYTE PTR [eax+ecx]
  00484	0f b7 d1	 movzx	 edx, cx
  00487	52		 push	 edx
  00488	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1396 : 							iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 2].point, fp );

  0048d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00490	50		 push	 eax
  00491	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  00494	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00497	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  0049a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0049d	66 0f b6 4c 08
	02		 movzx	 cx, BYTE PTR [eax+ecx+2]
  004a3	0f b7 d1	 movzx	 edx, cx
  004a6	52		 push	 edx
  004a7	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1397 : 							iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 1].point, fp );

  004ac	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004af	50		 push	 eax
  004b0	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  004b3	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  004b6	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  004b9	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  004bc	66 0f b6 4c 08
	01		 movzx	 cx, BYTE PTR [eax+ecx+1]
  004c2	0f b7 d1	 movzx	 edx, cx
  004c5	52		 push	 edx
  004c6	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1398 : 							iff_short_int_write ( ( short int ) surface->surface_id, fp );

  004cb	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004ce	50		 push	 eax
  004cf	8b 4d bc	 mov	 ecx, DWORD PTR _surface$3[ebp]
  004d2	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  004d6	0f b7 c2	 movzx	 eax, dx
  004d9	50		 push	 eax
  004da	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1399 : 						}
; 1400 : 						else

  004df	eb 7b		 jmp	 SHORT $LN37@save_terra
$LN36@save_terra:

; 1401 : 						{
; 1402 : 
; 1403 : 							iff_short_int_write ( 3, fp );

  004e1	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004e4	50		 push	 eax
  004e5	6a 03		 push	 3
  004e7	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1404 : 							iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 0].point, fp );

  004ec	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  004ef	50		 push	 eax
  004f0	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  004f3	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  004f6	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  004f9	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  004fc	66 0f b6 0c 08	 movzx	 cx, BYTE PTR [eax+ecx]
  00501	0f b7 d1	 movzx	 edx, cx
  00504	52		 push	 edx
  00505	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1405 : 							iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 1].point, fp );

  0050a	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0050d	50		 push	 eax
  0050e	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  00511	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00514	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  00517	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0051a	66 0f b6 4c 08
	01		 movzx	 cx, BYTE PTR [eax+ecx+1]
  00520	0f b7 d1	 movzx	 edx, cx
  00523	52		 push	 edx
  00524	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1406 : 							iff_short_int_write ( sector->point_byte_references[points_offset + point_count + 2].point, fp );

  00529	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0052c	50		 push	 eax
  0052d	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  00530	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00533	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  00536	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00539	66 0f b6 4c 08
	02		 movzx	 cx, BYTE PTR [eax+ecx+2]
  0053f	0f b7 d1	 movzx	 edx, cx
  00542	52		 push	 edx
  00543	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1407 : 							iff_short_int_write ( ( short int ) surface->surface_id, fp );

  00548	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0054b	50		 push	 eax
  0054c	8b 4d bc	 mov	 ecx, DWORD PTR _surface$3[ebp]
  0054f	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  00553	0f b7 c2	 movzx	 eax, dx
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write
$LN37@save_terra:

; 1408 : 						}
; 1409 : 					}

  0055c	e9 db fe ff ff	 jmp	 $LN20@save_terra
$LN21@save_terra:

; 1410 : 				}
; 1411 : 				else

  00561	e9 16 01 00 00	 jmp	 $LN24@save_terra
$LN34@save_terra:

; 1412 : 				{
; 1413 : 
; 1414 : 					for ( point_count = 0; point_count < ( polygon->number_of_points - 2 ); point_count++ )

  00566	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _point_count$2[ebp], 0
  0056d	eb 09		 jmp	 SHORT $LN25@save_terra
$LN23@save_terra:
  0056f	8b 45 b8	 mov	 eax, DWORD PTR _point_count$2[ebp]
  00572	83 c0 01	 add	 eax, 1
  00575	89 45 b8	 mov	 DWORD PTR _point_count$2[ebp], eax
$LN25@save_terra:
  00578	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  0057b	8a 08		 mov	 cl, BYTE PTR [eax]
  0057d	80 e1 7f	 and	 cl, 127			; 0000007fH
  00580	0f b6 d1	 movzx	 edx, cl
  00583	83 ea 02	 sub	 edx, 2
  00586	39 55 b8	 cmp	 DWORD PTR _point_count$2[ebp], edx
  00589	0f 8d ed 00 00
	00		 jge	 $LN24@save_terra

; 1415 : 					{
; 1416 : 
; 1417 : 						if ( point_count & 1 )

  0058f	8b 45 b8	 mov	 eax, DWORD PTR _point_count$2[ebp]
  00592	83 e0 01	 and	 eax, 1
  00595	74 71		 je	 SHORT $LN38@save_terra

; 1418 : 						{
; 1419 : 
; 1420 : 							iff_short_int_write ( 3, fp );

  00597	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0059a	50		 push	 eax
  0059b	6a 03		 push	 3
  0059d	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1421 : 							iff_short_int_write ( sector->point_word_references[points_offset + point_count + 0].point, fp );

  005a2	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  005a5	50		 push	 eax
  005a6	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  005a9	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  005ac	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  005af	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  005b2	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  005b6	51		 push	 ecx
  005b7	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1422 : 							iff_short_int_write ( sector->point_word_references[points_offset + point_count + 2].point, fp );

  005bc	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  005bf	50		 push	 eax
  005c0	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  005c3	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  005c6	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  005c9	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  005cc	0f b7 4c 48 04	 movzx	 ecx, WORD PTR [eax+ecx*2+4]
  005d1	51		 push	 ecx
  005d2	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1423 : 							iff_short_int_write ( sector->point_word_references[points_offset + point_count + 1].point, fp );

  005d7	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  005da	50		 push	 eax
  005db	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  005de	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  005e1	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  005e4	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  005e7	0f b7 4c 48 02	 movzx	 ecx, WORD PTR [eax+ecx*2+2]
  005ec	51		 push	 ecx
  005ed	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1424 : 							iff_short_int_write ( ( short int ) surface->surface_id, fp );

  005f2	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  005f5	50		 push	 eax
  005f6	8b 4d bc	 mov	 ecx, DWORD PTR _surface$3[ebp]
  005f9	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  005fd	0f b7 c2	 movzx	 eax, dx
  00600	50		 push	 eax
  00601	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1425 : 						}
; 1426 : 						else

  00606	eb 6f		 jmp	 SHORT $LN39@save_terra
$LN38@save_terra:

; 1427 : 						{
; 1428 : 
; 1429 : 							iff_short_int_write ( 3, fp );

  00608	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0060b	50		 push	 eax
  0060c	6a 03		 push	 3
  0060e	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1430 : 							iff_short_int_write ( sector->point_word_references[points_offset + point_count + 0].point, fp );

  00613	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00616	50		 push	 eax
  00617	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  0061a	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  0061d	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  00620	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00623	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  00627	51		 push	 ecx
  00628	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1431 : 							iff_short_int_write ( sector->point_word_references[points_offset + point_count + 1].point, fp );

  0062d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00630	50		 push	 eax
  00631	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  00634	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00637	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  0063a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0063d	0f b7 4c 48 02	 movzx	 ecx, WORD PTR [eax+ecx*2+2]
  00642	51		 push	 ecx
  00643	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1432 : 							iff_short_int_write ( sector->point_word_references[points_offset + point_count + 2].point, fp );

  00648	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0064b	50		 push	 eax
  0064c	8b 4d c0	 mov	 ecx, DWORD PTR _points_offset$4[ebp]
  0064f	03 4d b8	 add	 ecx, DWORD PTR _point_count$2[ebp]
  00652	8b 55 f0	 mov	 edx, DWORD PTR _sector$[ebp]
  00655	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00658	0f b7 4c 48 04	 movzx	 ecx, WORD PTR [eax+ecx*2+4]
  0065d	51		 push	 ecx
  0065e	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1433 : 							iff_short_int_write ( ( short int ) surface->surface_id, fp );

  00663	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00666	50		 push	 eax
  00667	8b 4d bc	 mov	 ecx, DWORD PTR _surface$3[ebp]
  0066a	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  0066e	0f b7 c2	 movzx	 eax, dx
  00671	50		 push	 eax
  00672	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write
$LN39@save_terra:

; 1434 : 						}
; 1435 : 					}

  00677	e9 f3 fe ff ff	 jmp	 $LN23@save_terra
$LN24@save_terra:

; 1436 : 				}
; 1437 : 			}
; 1438 : 
; 1439 : 
; 1440 : 
; 1441 : 			points_offset += polygon->number_of_points;

  0067c	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  0067f	8a 08		 mov	 cl, BYTE PTR [eax]
  00681	80 e1 7f	 and	 cl, 127			; 0000007fH
  00684	0f b6 d1	 movzx	 edx, cl
  00687	03 55 c0	 add	 edx, DWORD PTR _points_offset$4[ebp]
  0068a	89 55 c0	 mov	 DWORD PTR _points_offset$4[ebp], edx

; 1442 : 
; 1443 : 			polygon++;

  0068d	8b 45 dc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00690	83 c0 01	 add	 eax, 1
  00693	89 45 dc	 mov	 DWORD PTR _polygon$[ebp], eax

; 1444 : 		}

  00696	e9 e8 fb ff ff	 jmp	 $LN11@save_terra
$LN12@save_terra:

; 1445 : 	}
; 1446 : 
; 1447 : 	//
; 1448 : 	// Describe the surface colours
; 1449 : 	//
; 1450 : 
; 1451 : 	for ( count = 1; count < TERRAIN_TYPE_LAST; count++ )

  0069b	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  006a2	eb 09		 jmp	 SHORT $LN28@save_terra
$LN26@save_terra:
  006a4	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  006a7	83 c0 01	 add	 eax, 1
  006aa	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN28@save_terra:
  006ad	83 7d ec 3e	 cmp	 DWORD PTR _count$[ebp], 62 ; 0000003eH
  006b1	0f 8d f0 00 00
	00		 jge	 $LN27@save_terra

; 1452 : 	{
; 1453 : 
; 1454 : 		unsigned char
; 1455 : 			value;
; 1456 : 
; 1457 : 		fwrite ( "SURF", 4, 1, fp );

  006b7	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  006ba	50		 push	 eax
  006bb	6a 01		 push	 1
  006bd	6a 04		 push	 4
  006bf	68 00 00 00 00	 push	 OFFSET ??_C@_04HDKGFADE@SURF@
  006c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  006ca	83 c4 10	 add	 esp, 16			; 00000010H

; 1458 : 
; 1459 : 		iff_int_write ( 18, fp );

  006cd	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  006d0	50		 push	 eax
  006d1	6a 12		 push	 18			; 00000012H
  006d3	e8 00 00 00 00	 call	 ?iff_int_write@@YGXHPAU_iobuf@@@Z ; iff_int_write

; 1460 : 
; 1461 : 		sprintf ( id, "%07d", count );

  006d8	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  006db	50		 push	 eax
  006dc	68 00 00 00 00	 push	 OFFSET ??_C@_04OAGCANIB@?$CF07d@
  006e1	8d 4d f4	 lea	 ecx, DWORD PTR _id$[ebp]
  006e4	51		 push	 ecx
  006e5	e8 00 00 00 00	 call	 _sprintf
  006ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1462 : 
; 1463 : 		fwrite ( id, 8, 1, fp );

  006ed	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  006f0	50		 push	 eax
  006f1	6a 01		 push	 1
  006f3	6a 08		 push	 8
  006f5	8d 4d f4	 lea	 ecx, DWORD PTR _id$[ebp]
  006f8	51		 push	 ecx
  006f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  006ff	83 c4 10	 add	 esp, 16			; 00000010H

; 1464 : 
; 1465 : 		fwrite ( "COLR", 4, 1, fp );

  00702	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00705	50		 push	 eax
  00706	6a 01		 push	 1
  00708	6a 04		 push	 4
  0070a	68 00 00 00 00	 push	 OFFSET ??_C@_04BEPECJGC@COLR@
  0070f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00715	83 c4 10	 add	 esp, 16			; 00000010H

; 1466 : 
; 1467 : 		iff_short_int_write ( 4, fp );

  00718	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0071b	50		 push	 eax
  0071c	6a 04		 push	 4
  0071e	e8 00 00 00 00	 call	 ?iff_short_int_write@@YGXFPAU_iobuf@@@Z ; iff_short_int_write

; 1468 : 
; 1469 : 		value = terrain_type_information[count].red;

  00723	6b 45 ec 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  00727	8a 88 0c 00 00
	00		 mov	 cl, BYTE PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+12]
  0072d	88 4d b7	 mov	 BYTE PTR _value$1[ebp], cl

; 1470 : 		fwrite ( &value, 1, 1, fp );

  00730	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00733	50		 push	 eax
  00734	6a 01		 push	 1
  00736	6a 01		 push	 1
  00738	8d 4d b7	 lea	 ecx, DWORD PTR _value$1[ebp]
  0073b	51		 push	 ecx
  0073c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00742	83 c4 10	 add	 esp, 16			; 00000010H

; 1471 : 
; 1472 : 		value = terrain_type_information[count].green;

  00745	6b 45 ec 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  00749	8a 88 0d 00 00
	00		 mov	 cl, BYTE PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+13]
  0074f	88 4d b7	 mov	 BYTE PTR _value$1[ebp], cl

; 1473 : 		fwrite ( &value, 1, 1, fp );

  00752	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00755	50		 push	 eax
  00756	6a 01		 push	 1
  00758	6a 01		 push	 1
  0075a	8d 4d b7	 lea	 ecx, DWORD PTR _value$1[ebp]
  0075d	51		 push	 ecx
  0075e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00764	83 c4 10	 add	 esp, 16			; 00000010H

; 1474 : 
; 1475 : 		value = terrain_type_information[count].blue;

  00767	6b 45 ec 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  0076b	8a 88 0e 00 00
	00		 mov	 cl, BYTE PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+14]
  00771	88 4d b7	 mov	 BYTE PTR _value$1[ebp], cl

; 1476 : 		fwrite ( &value, 1, 1, fp );

  00774	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00777	50		 push	 eax
  00778	6a 01		 push	 1
  0077a	6a 01		 push	 1
  0077c	8d 4d b7	 lea	 ecx, DWORD PTR _value$1[ebp]
  0077f	51		 push	 ecx
  00780	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00786	83 c4 10	 add	 esp, 16			; 00000010H

; 1477 : 
; 1478 : 		value = 0;

  00789	c6 45 b7 00	 mov	 BYTE PTR _value$1[ebp], 0

; 1479 : 		fwrite ( &value, 1, 1, fp );

  0078d	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00790	50		 push	 eax
  00791	6a 01		 push	 1
  00793	6a 01		 push	 1
  00795	8d 4d b7	 lea	 ecx, DWORD PTR _value$1[ebp]
  00798	51		 push	 ecx
  00799	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0079f	83 c4 10	 add	 esp, 16			; 00000010H

; 1480 : 	}

  007a2	e9 fd fe ff ff	 jmp	 $LN26@save_terra
$LN27@save_terra:

; 1481 : 
; 1482 : 	fclose ( fp );

  007a7	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  007aa	50		 push	 eax
  007ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  007b1	83 c4 04	 add	 esp, 4

; 1483 : }

  007b4	5f		 pop	 edi
  007b5	5e		 pop	 esi
  007b6	5b		 pop	 ebx
  007b7	8b e5		 mov	 esp, ebp
  007b9	5d		 pop	 ebp
  007ba	c2 0c 00	 ret	 12			; 0000000cH
?save_terrain_sector_as_lw_3d_object@@YGXHHPBD@Z ENDP	; save_terrain_sector_as_lw_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?unload_3d_terrain@@YGXXZ
_TEXT	SEGMENT
_x$1 = -24						; size = 4
_z$2 = -20						; size = 4
_z$3 = -16						; size = 4
_object$4 = -12						; size = 4
_z$ = -8						; size = 4
_x$ = -4						; size = 4
?unload_3d_terrain@@YGXXZ PROC				; unload_3d_terrain, COMDAT

; 879  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 
; 881  : 	int
; 882  : 		x,
; 883  : 		z;
; 884  : 
; 885  : 	//
; 886  : 	// Destruct any terrain objects
; 887  : 	//
; 888  : 
; 889  : 	for ( z = 0; z < terrain_3d_sector_z_max; z++ )

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@unload_3d_
$LN2@unload_3d_:
  00012	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN4@unload_3d_:
  0001b	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  00024	7d 6b		 jge	 SHORT $LN3@unload_3d_

; 890  : 	{
; 891  : 
; 892  : 		for ( x = 0; x < terrain_3d_sector_x_max; x++ )

  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  0002d	eb 09		 jmp	 SHORT $LN7@unload_3d_
$LN5@unload_3d_:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN7@unload_3d_:
  00038	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0003b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  00041	7d 4c		 jge	 SHORT $LN6@unload_3d_

; 893  : 		{
; 894  : 
; 895  : 			if ( terrain_sectors[z][x].objects )

  00043	6b 45 fc 30	 imul	 eax, DWORD PTR _x$[ebp], 48
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00050	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00053	83 7c 01 2c 00	 cmp	 DWORD PTR [ecx+eax+44], 0
  00058	74 33		 je	 SHORT $LN19@unload_3d_

; 896  : 			{
; 897  : 
; 898  : 				terrain_3d_object
; 899  : 					*object;
; 900  : 
; 901  : 				object = terrain_sectors[z][x].objects;

  0005a	6b 45 fc 30	 imul	 eax, DWORD PTR _x$[ebp], 48
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00067	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  0006a	8b 54 01 2c	 mov	 edx, DWORD PTR [ecx+eax+44]
  0006e	89 55 f4	 mov	 DWORD PTR _object$4[ebp], edx
$LN8@unload_3d_:

; 902  : 
; 903  : 				while ( object )

  00071	83 7d f4 00	 cmp	 DWORD PTR _object$4[ebp], 0
  00075	74 16		 je	 SHORT $LN19@unload_3d_

; 904  : 				{
; 905  : 
; 906  : 					destruct_3d_object ( object->object );

  00077	8b 45 f4	 mov	 eax, DWORD PTR _object$4[ebp]
  0007a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 ?destruct_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; destruct_3d_object

; 907  : 
; 908  : 					object = object->next_object;

  00083	8b 45 f4	 mov	 eax, DWORD PTR _object$4[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	89 4d f4	 mov	 DWORD PTR _object$4[ebp], ecx

; 909  : 				}

  0008b	eb e4		 jmp	 SHORT $LN8@unload_3d_
$LN19@unload_3d_:

; 910  : 			}
; 911  : 
; 912  : 		}

  0008d	eb a0		 jmp	 SHORT $LN5@unload_3d_
$LN6@unload_3d_:

; 913  : 	}

  0008f	eb 81		 jmp	 SHORT $LN2@unload_3d_
$LN3@unload_3d_:

; 914  : 
; 915  : 	//
; 916  : 	// Now free up the memory
; 917  : 	//
; 918  : 
; 919  : 	if ( terrain_3d_geometry_data )

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, 0
  00098	74 15		 je	 SHORT $LN20@unload_3d_

; 920  : 	{
; 921  : 
; 922  : 		safe_mclose ( terrain_3d_geometry_data );

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 923  : 
; 924  : 		terrain_3d_geometry_data = NULL;

  000a5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, 0
$LN20@unload_3d_:

; 925  : 	}
; 926  : 
; 927  : 
; 928  : 	if ( terrain_3d_colour_data )

  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_colour_data@@3PAEA, 0
  000b6	74 15		 je	 SHORT $LN21@unload_3d_

; 929  : 	{
; 930  : 
; 931  : 		safe_mclose ( terrain_3d_colour_data );

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 932  : 
; 933  : 		terrain_3d_colour_data = NULL;

  000c3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_colour_data@@3PAEA, 0
$LN21@unload_3d_:

; 934  : 	}
; 935  : 
; 936  : 	//
; 937  : 	// Free up the memory for the sectors
; 938  : 	//
; 939  : 
; 940  : 	if ( terrain_sector_memory )

  000cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sector_memory
  000d4	74 15		 je	 SHORT $LN22@unload_3d_

; 941  : 	{
; 942  : 
; 943  : 		safe_free ( terrain_sector_memory );

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_memory
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 944  : 
; 945  : 		terrain_sector_memory = NULL;

  000e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sector_memory
$LN22@unload_3d_:

; 946  : 	}
; 947  : 
; 948  : 	if ( terrain_sectors )

  000eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sectors
  000f2	74 15		 je	 SHORT $LN23@unload_3d_

; 949  : 	{
; 950  : 
; 951  : 		safe_free ( terrain_sectors );

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 952  : 
; 953  : 		terrain_sectors = NULL;

  000ff	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sectors
$LN23@unload_3d_:

; 954  : 	}
; 955  : 
; 956  : 	if ( terrain_tree_sectors )

  00109	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A, 0 ; terrain_tree_sectors
  00110	74 65		 je	 SHORT $LN24@unload_3d_

; 957  : 	{
; 958  : 		int
; 959  : 			z;
; 960  : 
; 961  : 		for ( z = 0; z < terrain_3d_tree_map_height; z++ )

  00112	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _z$3[ebp], 0
  00119	eb 09		 jmp	 SHORT $LN12@unload_3d_
$LN10@unload_3d_:
  0011b	8b 45 f0	 mov	 eax, DWORD PTR _z$3[ebp]
  0011e	83 c0 01	 add	 eax, 1
  00121	89 45 f0	 mov	 DWORD PTR _z$3[ebp], eax
$LN12@unload_3d_:
  00124	8b 45 f0	 mov	 eax, DWORD PTR _z$3[ebp]
  00127	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  0012d	7d 33		 jge	 SHORT $LN11@unload_3d_

; 962  : 		{
; 963  : 			if ( terrain_tree_sectors[z] )

  0012f	8b 45 f0	 mov	 eax, DWORD PTR _z$3[ebp]
  00132	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  00138	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0013c	74 22		 je	 SHORT $LN25@unload_3d_

; 964  : 			{
; 965  : 				safe_free ( terrain_tree_sectors[z] );

  0013e	8b 45 f0	 mov	 eax, DWORD PTR _z$3[ebp]
  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  00147	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 966  : 				terrain_tree_sectors[z] = NULL;

  00150	8b 45 f0	 mov	 eax, DWORD PTR _z$3[ebp]
  00153	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  00159	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
$LN25@unload_3d_:

; 967  : 			}
; 968  : 		}

  00160	eb b9		 jmp	 SHORT $LN10@unload_3d_
$LN11@unload_3d_:

; 969  : 
; 970  : 		safe_free ( terrain_tree_sectors );

  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 971  : 
; 972  : 		terrain_tree_sectors = NULL;

  0016d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A, 0 ; terrain_tree_sectors
$LN24@unload_3d_:

; 973  : 	}
; 974  : 
; 975  : 	if ( terrain_3d_tree_object )

  00177	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; terrain_3d_tree_object
  0017e	74 15		 je	 SHORT $LN26@unload_3d_

; 976  : 	{
; 977  : 
; 978  : 		destruct_3d_object ( terrain_3d_tree_object );

  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_tree_object
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?destruct_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; destruct_3d_object

; 979  : 
; 980  : 		terrain_3d_tree_object = NULL;

  0018b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; terrain_3d_tree_object
$LN26@unload_3d_:

; 981  : 	}
; 982  : 
; 983  : 	if ( terrain_3d_trees_data )

  00195	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_trees_data@@3PAEA, 0
  0019c	74 15		 je	 SHORT $LN27@unload_3d_

; 984  : 	{
; 985  : 
; 986  : 		safe_mclose ( terrain_3d_trees_data );

  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_trees_data@@3PAEA
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 987  : 
; 988  : 		terrain_3d_trees_data = NULL;

  001a9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_trees_data@@3PAEA, 0
$LN27@unload_3d_:

; 989  : 	}
; 990  : 
; 991  : 	terrain_initialised = FALSE;

  001b3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_initialised@@3HA, 0

; 992  : 
; 993  : 	//
; 994  : 	// Unload the simple elevation map as well
; 995  : 	//
; 996  : 
; 997  : 	unload_terrain_simple_elevation_grid ();

  001bd	e8 00 00 00 00	 call	 ?unload_terrain_simple_elevation_grid@@YGXXZ ; unload_terrain_simple_elevation_grid

; 998  : 
; 999  : 	//VJ 060120 flag certain terrtain types to add textures
; 1000 : 	// free structure
; 1001 : 	//free_flag_terrain_types ();
; 1002 : 
; 1003 : 	// Casm 20MAY12 Cloud puffs
; 1004 : 	if ( terrain_3d_cloud_puff_object )

  001c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_cloud_puff_object@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; terrain_3d_cloud_puff_object
  001c9	74 15		 je	 SHORT $LN28@unload_3d_

; 1005 : 	{
; 1006 : 
; 1007 : 		destruct_3d_object ( terrain_3d_cloud_puff_object );

  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_cloud_puff_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_cloud_puff_object
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 ?destruct_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; destruct_3d_object

; 1008 : 
; 1009 : 		terrain_3d_cloud_puff_object = NULL;

  001d6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_cloud_puff_object@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; terrain_3d_cloud_puff_object
$LN28@unload_3d_:

; 1010 : 	}
; 1011 : 
; 1012 : 	if ( terrain_cloud_puff_sectors )

  001e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A, 0 ; terrain_cloud_puff_sectors
  001e7	0f 84 bb 00 00
	00		 je	 $LN1@unload_3d_

; 1013 : 	{
; 1014 : 		int
; 1015 : 			z,
; 1016 : 			x;
; 1017 : 
; 1018 : 		for ( z = 0; z < terrain_3d_tree_map_height; z++ )

  001ed	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _z$2[ebp], 0
  001f4	eb 09		 jmp	 SHORT $LN15@unload_3d_
$LN13@unload_3d_:
  001f6	8b 45 ec	 mov	 eax, DWORD PTR _z$2[ebp]
  001f9	83 c0 01	 add	 eax, 1
  001fc	89 45 ec	 mov	 DWORD PTR _z$2[ebp], eax
$LN15@unload_3d_:
  001ff	8b 45 ec	 mov	 eax, DWORD PTR _z$2[ebp]
  00202	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  00208	7d 74		 jge	 SHORT $LN14@unload_3d_

; 1019 : 		{
; 1020 : 			if ( terrain_cloud_puff_sectors[z] )

  0020a	8b 45 ec	 mov	 eax, DWORD PTR _z$2[ebp]
  0020d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  00213	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00217	74 60		 je	 SHORT $LN30@unload_3d_

; 1021 : 			{
; 1022 : 				for ( x = 0; x < terrain_3d_tree_map_width; x++ )

  00219	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _x$1[ebp], 0
  00220	eb 09		 jmp	 SHORT $LN18@unload_3d_
$LN16@unload_3d_:
  00222	8b 45 e8	 mov	 eax, DWORD PTR _x$1[ebp]
  00225	83 c0 01	 add	 eax, 1
  00228	89 45 e8	 mov	 DWORD PTR _x$1[ebp], eax
$LN18@unload_3d_:
  0022b	8b 45 e8	 mov	 eax, DWORD PTR _x$1[ebp]
  0022e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_tree_map_width@@3HA ; terrain_3d_tree_map_width
  00234	7d 31		 jge	 SHORT $LN17@unload_3d_

; 1023 : 				{
; 1024 : 					if ( terrain_cloud_puff_sectors[z][x].cloud_puffs )

  00236	8b 45 ec	 mov	 eax, DWORD PTR _z$2[ebp]
  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  0023f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00242	8b 45 e8	 mov	 eax, DWORD PTR _x$1[ebp]
  00245	83 7c c2 04 00	 cmp	 DWORD PTR [edx+eax*8+4], 0
  0024a	74 19		 je	 SHORT $LN31@unload_3d_

; 1025 : 					{
; 1026 : 						safe_free ( terrain_cloud_puff_sectors[z][x].cloud_puffs );

  0024c	8b 45 ec	 mov	 eax, DWORD PTR _z$2[ebp]
  0024f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  00255	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00258	8b 45 e8	 mov	 eax, DWORD PTR _x$1[ebp]
  0025b	8b 4c c2 04	 mov	 ecx, DWORD PTR [edx+eax*8+4]
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN31@unload_3d_:

; 1027 : 					}
; 1028 : 				}

  00265	eb bb		 jmp	 SHORT $LN16@unload_3d_
$LN17@unload_3d_:

; 1029 : 				safe_free ( terrain_cloud_puff_sectors[z] );

  00267	8b 45 ec	 mov	 eax, DWORD PTR _z$2[ebp]
  0026a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  00270	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00273	52		 push	 edx
  00274	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN30@unload_3d_:

; 1030 : 			}
; 1031 : 		}

  00279	e9 78 ff ff ff	 jmp	 $LN13@unload_3d_
$LN14@unload_3d_:

; 1032 : 
; 1033 : 		safe_free ( terrain_cloud_puff_sectors );

  0027e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1034 : 
; 1035 : 		terrain_cloud_puff_sectors = NULL;

  00289	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A, 0 ; terrain_cloud_puff_sectors

; 1036 : 
; 1037 : 		safe_free ( terrain_3d_cloud_puff_colours );

  00293	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A ; terrain_3d_cloud_puff_colours
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 1038 : 
; 1039 : 		terrain_3d_cloud_puff_colours = NULL;

  0029e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A, 0 ; terrain_3d_cloud_puff_colours
$LN1@unload_3d_:

; 1040 : 	}
; 1041 : }

  002a8	5f		 pop	 edi
  002a9	5e		 pop	 esi
  002aa	5b		 pop	 ebx
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c3		 ret	 0
?unload_3d_terrain@@YGXXZ ENDP				; unload_3d_terrain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?load_3d_terrain@@YGHPBD@Z
_TEXT	SEGMENT
tv1129 = -5724						; size = 8
tv1160 = -5716						; size = 8
tv1158 = -5716						; size = 8
tv1156 = -5716						; size = 8
tv1154 = -5716						; size = 8
tv1152 = -5716						; size = 8
tv1150 = -5716						; size = 8
tv604 = -5712						; size = 4
tv561 = -5712						; size = 4
_center_z$1 = -5196					; size = 4
_center_y$2 = -5192					; size = 4
_center_x$3 = -5188					; size = 4
_cloud_puffs$4 = -5184					; size = 4
_number_of_cloud_puffs$5 = -5180			; size = 4
_pack$6 = -5176						; size = 4
_base$7 = -5172						; size = 4
_offset$8 = -5168					; size = 4
_offset$9 = -5164					; size = 4
_offset$10 = -5160					; size = 4
_terrain_sector_ptr$ = -5156				; size = 4
_tree_data_file$ = -5152				; size = 1024
_tree_sector_file$ = -4128				; size = 1024
_colour_file$ = -3104					; size = 1024
_sector_file$ = -2080					; size = 1024
_free_form_polygon_file$ = -1056			; size = 1024
_map_number$ = -32					; size = 4
_terrain_3d_sector_data$ = -28				; size = 4
_terrain_3d_local_data$ = -24				; size = 4
_int_map_number$ = -20					; size = 4
_z$ = -16						; size = 4
_x$ = -12						; size = 4
_count$ = -8						; size = 4
_total_points$ = -4					; size = 4
_path$ = 8						; size = 4
?load_3d_terrain@@YGHPBD@Z PROC				; load_3d_terrain, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 5c 16 00 00	 mov	 eax, 5724		; 0000165cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 175  : 
; 176  : 	int
; 177  : 		total_points,
; 178  : 		count,
; 179  : 		x,
; 180  : 		z,
; 181  : 		int_map_number;
; 182  : 
; 183  : 	unsigned char
; 184  : 		*terrain_3d_local_data,
; 185  : 		*terrain_3d_sector_data;
; 186  : 	const char
; 187  : 		*map_number;
; 188  : 
; 189  : 	char
; 190  : 		free_form_polygon_file[1024],
; 191  : 		sector_file[1024],
; 192  : 		colour_file[1024],
; 193  : 		tree_sector_file[1024],
; 194  : 		tree_data_file[1024];
; 195  : 
; 196  : 	terrain_3d_sector
; 197  : 		*terrain_sector_ptr;
; 198  : 
; 199  : 	memset(white_col, 255, sizeof(white_col));

  00010	68 70 2f 00 00	 push	 12144			; 00002f70H
  00015	68 ff 00 00 00	 push	 255			; 000000ffH
  0001a	68 00 00 00 00	 push	 OFFSET ?white_col@@3PAUTERRAIN_3D_COLOUR@@A ; white_col
  0001f	e8 00 00 00 00	 call	 _memset
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 
; 201  : 	ASSERT ( !terrain_initialised );

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_initialised@@3HA, 0
  0002e	74 18		 je	 SHORT $LN38@load_3d_te
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_3d_terrain@@YGHPBD@Z@4JA
  00035	83 c0 1b	 add	 eax, 27			; 0000001bH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NMLPDENP@?$CBterrain_initialised@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN38@load_3d_te:

; 202  : 
; 203  : 	sprintf ( free_form_polygon_file, "%s\\terrain.ffp", path );

  00048	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IPDOGKPJ@?$CFs?2terrain?4ffp@
  00051	8d 8d e0 fb ff
	ff		 lea	 ecx, DWORD PTR _free_form_polygon_file$[ebp]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _sprintf
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 204  : 
; 205  : 	sprintf ( sector_file, "%s\\default.sec", path );

  00060	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DEMELBMO@?$CFs?2default?4sec@
  00069	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _sector_file$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _sprintf
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  : 
; 207  : 	sprintf ( colour_file, "%s\\default.rgb", path );

  00078	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JGOHDDIE@?$CFs?2default?4rgb@
  00081	8d 8d e0 f3 ff
	ff		 lea	 ecx, DWORD PTR _colour_file$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _sprintf
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 
; 209  : 	//VJ 040206 read different point colour files when available for winter,
; 210  : 	// made for skagway etc maps of craigmire and maverick
; 211  : 	if (get_global_season() == SESSION_SEASON_WINTER)

  00090	83 3d 14 04 00
	00 03		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 3
  00097	0f 85 80 00 00
	00		 jne	 $LN40@load_3d_te

; 212  : 	{
; 213  : 		sprintf ( sector_file, "%s\\default-W.sec", path );

  0009d	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  000a0	50		 push	 eax
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DLDMBPML@?$CFs?2default?9W?4sec@
  000a6	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _sector_file$[ebp]
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 _sprintf
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  : 		sprintf ( colour_file, "%s\\default-W.rgb", path );

  000b5	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  000b8	50		 push	 eax
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JJBPJNIB@?$CFs?2default?9W?4rgb@
  000be	8d 8d e0 f3 ff
	ff		 lea	 ecx, DWORD PTR _colour_file$[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 _sprintf
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  : 
; 216  : 		if (!file_exist(sector_file) || !file_exist(colour_file))

  000cd	8d 85 e0 f7 ff
	ff		 lea	 eax, DWORD PTR _sector_file$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  000d9	85 c0		 test	 eax, eax
  000db	74 10		 je	 SHORT $LN41@load_3d_te
  000dd	8d 85 e0 f3 ff
	ff		 lea	 eax, DWORD PTR _colour_file$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  000e9	85 c0		 test	 eax, eax
  000eb	75 30		 jne	 SHORT $LN40@load_3d_te
$LN41@load_3d_te:

; 217  : 		{
; 218  : 			sprintf ( sector_file, "%s\\default.sec", path );

  000ed	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  000f0	50		 push	 eax
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DEMELBMO@?$CFs?2default?4sec@
  000f6	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _sector_file$[ebp]
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 _sprintf
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH

; 219  : 			sprintf ( colour_file, "%s\\default.rgb", path );

  00105	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00108	50		 push	 eax
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JGOHDDIE@?$CFs?2default?4rgb@
  0010e	8d 8d e0 f3 ff
	ff		 lea	 ecx, DWORD PTR _colour_file$[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 _sprintf
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN40@load_3d_te:

; 220  : 		}
; 221  : 	}
; 222  : 
; 223  : 	sprintf ( tree_sector_file, "%s\\tree_pos.sec", path );

  0011d	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00120	50		 push	 eax
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGMIPHHP@?$CFs?2tree_pos?4sec@
  00126	8d 8d e0 ef ff
	ff		 lea	 ecx, DWORD PTR _tree_sector_file$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 _sprintf
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH

; 224  : 
; 225  : 	sprintf ( tree_data_file, "%s\\tree_pos.dat", path );

  00135	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00138	50		 push	 eax
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PJIMLEBD@?$CFs?2tree_pos?4dat@
  0013e	8d 8d e0 eb ff
	ff		 lea	 ecx, DWORD PTR _tree_data_file$[ebp]
  00144	51		 push	 ecx
  00145	e8 00 00 00 00	 call	 _sprintf
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 226  : 
; 227  : 	//
; 228  : 	// Find the map number
; 229  : 	//
; 230  : 	//
; 231  : 	// This assumes the path is in the format "path\map%d\terrain"
; 232  : 	//
; 233  : 	//
; 234  : 
; 235  : 	map_number = path + strlen ( path );

  0014d	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _strlen
  00156	83 c4 04	 add	 esp, 4
  00159	03 45 08	 add	 eax, DWORD PTR _path$[ebp]
  0015c	89 45 e0	 mov	 DWORD PTR _map_number$[ebp], eax
$LN2@load_3d_te:

; 236  : 
; 237  : 	while ( *map_number != '\\' )

  0015f	8b 45 e0	 mov	 eax, DWORD PTR _map_number$[ebp]
  00162	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00165	83 f9 5c	 cmp	 ecx, 92			; 0000005cH
  00168	74 0b		 je	 SHORT $LN3@load_3d_te

; 238  : 	{
; 239  : 
; 240  : 		map_number--;

  0016a	8b 45 e0	 mov	 eax, DWORD PTR _map_number$[ebp]
  0016d	83 e8 01	 sub	 eax, 1
  00170	89 45 e0	 mov	 DWORD PTR _map_number$[ebp], eax

; 241  : 	}

  00173	eb ea		 jmp	 SHORT $LN2@load_3d_te
$LN3@load_3d_te:

; 242  : 
; 243  : 	map_number--;

  00175	8b 45 e0	 mov	 eax, DWORD PTR _map_number$[ebp]
  00178	83 e8 01	 sub	 eax, 1
  0017b	89 45 e0	 mov	 DWORD PTR _map_number$[ebp], eax
$LN4@load_3d_te:

; 244  : 
; 245  : 	while ( isdigit ( *map_number ) )

  0017e	8b 45 e0	 mov	 eax, DWORD PTR _map_number$[ebp]
  00181	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00184	51		 push	 ecx
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  0018b	83 c4 04	 add	 esp, 4
  0018e	85 c0		 test	 eax, eax
  00190	74 0b		 je	 SHORT $LN5@load_3d_te

; 246  : 	{
; 247  : 
; 248  : 		map_number--;

  00192	8b 45 e0	 mov	 eax, DWORD PTR _map_number$[ebp]
  00195	83 e8 01	 sub	 eax, 1
  00198	89 45 e0	 mov	 DWORD PTR _map_number$[ebp], eax

; 249  : 	}

  0019b	eb e1		 jmp	 SHORT $LN4@load_3d_te
$LN5@load_3d_te:

; 250  : 
; 251  : 	map_number++;

  0019d	8b 45 e0	 mov	 eax, DWORD PTR _map_number$[ebp]
  001a0	83 c0 01	 add	 eax, 1
  001a3	89 45 e0	 mov	 DWORD PTR _map_number$[ebp], eax

; 252  : 
; 253  : 	sscanf ( map_number, "%d", &int_map_number );

  001a6	8d 45 ec	 lea	 eax, DWORD PTR _int_map_number$[ebp]
  001a9	50		 push	 eax
  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001af	8b 4d e0	 mov	 ecx, DWORD PTR _map_number$[ebp]
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 _sscanf
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 254  : 
; 255  : 	//
; 256  : 	// Memory map the ffp file
; 257  : 	//
; 258  : 
; 259  : 	terrain_3d_geometry_data = ( unsigned char * ) safe_mopen ( free_form_polygon_file );

  001bb	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _free_form_polygon_file$[ebp]
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?safe_mopen@@YGPAXPBD@Z	; safe_mopen
  001c7	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, eax

; 260  : 
; 261  : 	if ( !terrain_3d_geometry_data )

  001cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, 0
  001d3	75 07		 jne	 SHORT $LN42@load_3d_te

; 262  : 	{
; 263  : 
; 264  : 		return ( FALSE );

  001d5	33 c0		 xor	 eax, eax
  001d7	e9 7f 10 00 00	 jmp	 $LN1@load_3d_te
$LN42@load_3d_te:

; 265  : 	}
; 266  : 
; 267  : 	//
; 268  : 	// Memory map the colour palette file
; 269  : 	//
; 270  : 
; 271  : 	terrain_3d_colour_data = ( unsigned char * ) safe_mopen ( colour_file );

  001dc	8d 85 e0 f3 ff
	ff		 lea	 eax, DWORD PTR _colour_file$[ebp]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ?safe_mopen@@YGPAXPBD@Z	; safe_mopen
  001e8	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_colour_data@@3PAEA, eax

; 272  : 
; 273  : 	if ( !terrain_3d_colour_data )

  001ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_colour_data@@3PAEA, 0
  001f4	75 1c		 jne	 SHORT $LN43@load_3d_te

; 274  : 	{
; 275  : 
; 276  : 		safe_mclose ( terrain_3d_geometry_data );

  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 277  : 
; 278  : 		terrain_3d_geometry_data = NULL;

  00201	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, 0

; 279  : 
; 280  : 		return ( FALSE );

  0020b	33 c0		 xor	 eax, eax
  0020d	e9 49 10 00 00	 jmp	 $LN1@load_3d_te
$LN43@load_3d_te:

; 281  : 	}
; 282  : 
; 283  : 	//
; 284  : 	// Memory map the sector file
; 285  : 	//
; 286  : 
; 287  : 	terrain_3d_sector_data = ( unsigned char * ) safe_mopen ( sector_file );

  00212	8d 85 e0 f7 ff
	ff		 lea	 eax, DWORD PTR _sector_file$[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 ?safe_mopen@@YGPAXPBD@Z	; safe_mopen
  0021e	89 45 e4	 mov	 DWORD PTR _terrain_3d_sector_data$[ebp], eax

; 288  : 
; 289  : 	if ( !terrain_3d_sector_data )

  00221	83 7d e4 00	 cmp	 DWORD PTR _terrain_3d_sector_data$[ebp], 0
  00225	75 31		 jne	 SHORT $LN44@load_3d_te

; 290  : 	{
; 291  : 
; 292  : 		safe_mclose ( terrain_3d_colour_data );

  00227	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  0022c	50		 push	 eax
  0022d	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 293  : 		safe_mclose ( terrain_3d_geometry_data );

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 294  : 
; 295  : 		terrain_3d_colour_data = NULL;

  0023d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_colour_data@@3PAEA, 0

; 296  : 		terrain_3d_geometry_data = NULL;

  00247	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, 0

; 297  : 
; 298  : 		return ( FALSE );

  00251	33 c0		 xor	 eax, eax
  00253	e9 03 10 00 00	 jmp	 $LN1@load_3d_te
$LN44@load_3d_te:

; 299  : 	}
; 300  : 
; 301  : 	total_points = 0;

  00258	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _total_points$[ebp], 0

; 302  : 
; 303  : 	terrain_3d_local_data = terrain_3d_sector_data;

  0025f	8b 45 e4	 mov	 eax, DWORD PTR _terrain_3d_sector_data$[ebp]
  00262	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax

; 304  : 
; 305  : 	//
; 306  : 	// Read the version integer at the start of the sector data
; 307  : 	//
; 308  : 
; 309  : 	current_terrain_version.whole_value = get_list_item ( terrain_3d_local_data, int );

  00265	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00268	83 c0 04	 add	 eax, 4
  0026b	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0026e	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00271	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00274	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A, edx ; current_terrain_version

; 310  : 
; 311  : 	current_terrain_version.map_number = int_map_number;

  0027a	8b 45 ec	 mov	 eax, DWORD PTR _int_map_number$[ebp]
  0027d	83 e0 0f	 and	 eax, 15			; 0000000fH
  00280	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A ; current_terrain_version
  00286	83 e1 f0	 and	 ecx, -16		; fffffff0H
  00289	0b c8		 or	 ecx, eax
  0028b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A, ecx ; current_terrain_version

; 312  : 
; 313  : 	//
; 314  : 	// Initialise the terrain rendering routines ( sets the type of polygon )
; 315  : 	//
; 316  : 
; 317  : 	initialise_3d_terrain_rendering_routines ( FALSE );

  00291	6a 00		 push	 0
  00293	e8 00 00 00 00	 call	 ?initialise_3d_terrain_rendering_routines@@YGXH@Z ; initialise_3d_terrain_rendering_routines

; 318  : 
; 319  : 	//
; 320  : 	// Initialise the texture indices
; 321  : 	//
; 322  : 
; 323  : 	initialise_3d_terrain_map_specific_texture_indices ();

  00298	e8 00 00 00 00	 call	 ?initialise_3d_terrain_map_specific_texture_indices@@YGXXZ ; initialise_3d_terrain_map_specific_texture_indices

; 324  : 
; 325  : 	//
; 326  : 	// Initialise the default terrain types
; 327  : 	//
; 328  : 
; 329  : 	initialise_3d_terrain_types ();

  0029d	e8 00 00 00 00	 call	 ?initialise_3d_terrain_types@@YGXXZ ; initialise_3d_terrain_types

; 330  : 
; 331  : 	//
; 332  : 	// The sectors are listed going along each x axis in turn
; 333  : 	//
; 334  : 
; 335  : 	//
; 336  : 	// Find the dimensions of the terrain data
; 337  : 	//
; 338  : 
; 339  : 	terrain_3d_map_width = get_list_item ( terrain_3d_local_data, unsigned short int );

  002a2	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  002a5	83 c0 02	 add	 eax, 2
  002a8	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  002ab	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  002ae	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  002b2	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_map_width@@3HA, edx ; terrain_3d_map_width

; 340  : 
; 341  : 	terrain_3d_map_height = get_list_item ( terrain_3d_local_data, unsigned short int );

  002b8	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  002bb	83 c0 02	 add	 eax, 2
  002be	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  002c1	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  002c4	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  002c8	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_map_height@@3HA, edx ; terrain_3d_map_height

; 342  : 
; 343  : 	//
; 344  : 	// Set the dimensions globally
; 345  : 	//
; 346  : 
; 347  : 	terrain_3d_sector_x_max = terrain_3d_map_width;

  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_map_width@@3HA ; terrain_3d_map_width
  002d3	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_sector_x_max@@3HA, eax ; terrain_3d_sector_x_max

; 348  : 
; 349  : 	terrain_3d_sector_z_max = terrain_3d_map_height;

  002d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_map_height@@3HA ; terrain_3d_map_height
  002dd	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_sector_z_max@@3HA, eax ; terrain_3d_sector_z_max

; 350  : 
; 351  : 	terrain_3d_min_map_x = 0.0;

  002e2	0f 57 c0	 xorps	 xmm0, xmm0
  002e5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_min_map_x@@3MA, xmm0

; 352  : 
; 353  : 	terrain_3d_min_map_z = 0.0;

  002ed	0f 57 c0	 xorps	 xmm0, xmm0
  002f0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_min_map_z@@3MA, xmm0

; 354  : 
; 355  : 	terrain_3d_max_map_x = ( ( float ) ( terrain_3d_sector_x_max * TERRAIN_3D_SECTOR_SIDE_LENGTH ) - 1 );

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  002fd	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00300	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00304	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0030c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_max_map_x@@3MA, xmm0

; 356  : 
; 357  : 	terrain_3d_max_map_z = ( ( float ) ( terrain_3d_sector_z_max * TERRAIN_3D_SECTOR_SIDE_LENGTH ) - 1 );

  00314	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  00319	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  0031c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00320	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00328	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_max_map_z@@3MA, xmm0

; 358  : 
; 359  : 	//
; 360  : 	// Allocate the sectors themselves.
; 361  : 	//
; 362  : 
; 363  : 	terrain_sector_memory = ( terrain_3d_sector * ) safe_malloc ( terrain_3d_map_width * terrain_3d_map_height * sizeof ( terrain_3d_sector ) );

  00330	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_map_width@@3HA ; terrain_3d_map_width
  00335	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?terrain_3d_map_height@@3HA ; terrain_3d_map_height
  0033c	6b c8 30	 imul	 ecx, eax, 48
  0033f	51		 push	 ecx
  00340	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00345	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A, eax ; terrain_sector_memory

; 364  : 
; 365  : 	if ( !terrain_sector_memory )

  0034a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sector_memory
  00351	75 41		 jne	 SHORT $LN45@load_3d_te

; 366  : 	{
; 367  : 
; 368  : 		safe_mclose ( terrain_3d_sector_data );

  00353	8b 45 e4	 mov	 eax, DWORD PTR _terrain_3d_sector_data$[ebp]
  00356	50		 push	 eax
  00357	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 369  : 		safe_mclose ( terrain_3d_colour_data );

  0035c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  00361	50		 push	 eax
  00362	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 370  : 		safe_mclose ( terrain_3d_geometry_data );

  00367	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  0036c	50		 push	 eax
  0036d	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 371  : 
; 372  : 		terrain_3d_sector_data = NULL;

  00372	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _terrain_3d_sector_data$[ebp], 0

; 373  : 		terrain_3d_colour_data = NULL;

  00379	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_colour_data@@3PAEA, 0

; 374  : 		terrain_3d_geometry_data = NULL;

  00383	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, 0

; 375  : 
; 376  : 		return ( FALSE );

  0038d	33 c0		 xor	 eax, eax
  0038f	e9 c7 0e 00 00	 jmp	 $LN1@load_3d_te
$LN45@load_3d_te:

; 377  : 	}
; 378  : 
; 379  : 	terrain_sector_ptr = terrain_sector_memory;

  00394	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sector_memory@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_memory
  00399	89 85 dc eb ff
	ff		 mov	 DWORD PTR _terrain_sector_ptr$[ebp], eax

; 380  : 
; 381  : 	//
; 382  : 	// Allocate enough space for the arrays
; 383  : 	//
; 384  : 
; 385  : 	terrain_sectors = ( terrain_3d_sector * * ) safe_malloc ( terrain_3d_map_height * sizeof ( terrain_3d_sector * ) );

  0039f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_map_height@@3HA ; terrain_3d_map_height
  003a4	c1 e0 02	 shl	 eax, 2
  003a7	50		 push	 eax
  003a8	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  003ad	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A, eax ; terrain_sectors

; 386  : 
; 387  : 	if ( !terrain_sectors )

  003b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sectors
  003b9	75 56		 jne	 SHORT $LN46@load_3d_te

; 388  : 	{
; 389  : 
; 390  : 		safe_free ( terrain_sectors );

  003bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  003c0	50		 push	 eax
  003c1	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 391  : 		safe_mclose ( terrain_3d_sector_data );

  003c6	8b 45 e4	 mov	 eax, DWORD PTR _terrain_3d_sector_data$[ebp]
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 392  : 		safe_mclose ( terrain_3d_colour_data );

  003cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  003d4	50		 push	 eax
  003d5	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 393  : 		safe_mclose ( terrain_3d_geometry_data );

  003da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  003df	50		 push	 eax
  003e0	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 394  : 
; 395  : 		terrain_sectors = NULL;

  003e5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sectors

; 396  : 		terrain_3d_sector_data = NULL;

  003ef	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _terrain_3d_sector_data$[ebp], 0

; 397  : 		terrain_3d_colour_data = NULL;

  003f6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_colour_data@@3PAEA, 0

; 398  : 		terrain_3d_geometry_data = NULL;

  00400	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_geometry_data@@3PAEA, 0

; 399  : 
; 400  : 		return ( FALSE );

  0040a	33 c0		 xor	 eax, eax
  0040c	e9 4a 0e 00 00	 jmp	 $LN1@load_3d_te
$LN46@load_3d_te:

; 401  : 	}
; 402  : 
; 403  : 	terrain_3d_map_minimum_height = get_list_item ( terrain_3d_local_data, float );

  00411	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00414	83 c0 04	 add	 eax, 4
  00417	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0041a	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  0041d	f3 0f 10 41 fc	 movss	 xmm0, DWORD PTR [ecx-4]
  00422	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_map_minimum_height@@3MA, xmm0

; 404  : 
; 405  : 	terrain_3d_map_maximum_height = get_list_item ( terrain_3d_local_data, float );

  0042a	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0042d	83 c0 04	 add	 eax, 4
  00430	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00433	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00436	f3 0f 10 41 fc	 movss	 xmm0, DWORD PTR [ecx-4]
  0043b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_map_maximum_height@@3MA, xmm0

; 406  : 
; 407  : 	debug_log ( "Terrain minimum height: %f", terrain_3d_map_minimum_height );

  00443	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  0044b	83 ec 08	 sub	 esp, 8
  0044e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00453	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BEJICLEB@Terrain?5minimum?5height?3?5?$CFf@
  00458	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0045d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 408  : 
; 409  : 	debug_log ( "Terrain maximum height: %f", terrain_3d_map_maximum_height );

  00460	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?terrain_3d_map_maximum_height@@3MA
  00468	83 ec 08	 sub	 esp, 8
  0046b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00470	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LDKMKLDI@Terrain?5maximum?5height?3?5?$CFf@
  00475	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0047a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 410  : 
; 411  : 	terrain_3d_map_scaled_height_difference = ( terrain_3d_map_maximum_height - terrain_3d_map_minimum_height ) * TERRAIN_3D_Y_SCALE;

  0047d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_map_maximum_height@@3MA
  00485	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  0048d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00491	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00499	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0049d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA, xmm0

; 412  : 
; 413  : 	for ( z = 0; z < terrain_3d_map_height; z++ )

  004a5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  004ac	eb 09		 jmp	 SHORT $LN8@load_3d_te
$LN6@load_3d_te:
  004ae	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  004b1	83 c0 01	 add	 eax, 1
  004b4	89 45 f0	 mov	 DWORD PTR _z$[ebp], eax
$LN8@load_3d_te:
  004b7	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  004ba	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_map_height@@3HA ; terrain_3d_map_height
  004c0	0f 8d 7c 03 00
	00		 jge	 $LN7@load_3d_te

; 414  : 	{
; 415  : 
; 416  : 		//
; 417  : 		// First, allocate the sector array for this depth
; 418  : 		//
; 419  : 
; 420  : 		terrain_sectors[z] = terrain_sector_ptr;

  004c6	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  004c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  004cf	8b 95 dc eb ff
	ff		 mov	 edx, DWORD PTR _terrain_sector_ptr$[ebp]
  004d5	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 421  : 
; 422  : 		terrain_sector_ptr += terrain_3d_map_width;

  004d8	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?terrain_3d_map_width@@3HA, 48 ; terrain_3d_map_width
  004df	03 85 dc eb ff
	ff		 add	 eax, DWORD PTR _terrain_sector_ptr$[ebp]
  004e5	89 85 dc eb ff
	ff		 mov	 DWORD PTR _terrain_sector_ptr$[ebp], eax

; 423  : 
; 424  : 		for ( x = 0; x < terrain_3d_map_width; x++ )

  004eb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  004f2	eb 09		 jmp	 SHORT $LN11@load_3d_te
$LN9@load_3d_te:
  004f4	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  004f7	83 c0 01	 add	 eax, 1
  004fa	89 45 f4	 mov	 DWORD PTR _x$[ebp], eax
$LN11@load_3d_te:
  004fd	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00500	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_map_width@@3HA ; terrain_3d_map_width
  00506	0f 8d 31 03 00
	00		 jge	 $LN10@load_3d_te

; 425  : 		{
; 426  : 
; 427  : 			int
; 428  : 				offset;
; 429  : 
; 430  : 			//
; 431  : 			// First short int is the number of points in this sector
; 432  : 			//
; 433  : 
; 434  : 			terrain_sectors[z][x].number_of_points = get_list_item ( terrain_3d_local_data, unsigned short int );

  0050c	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0050f	83 c0 02	 add	 eax, 2
  00512	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00515	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  00519	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  0051c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00521	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00524	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00527	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  0052b	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 435  : 
; 436  : 			total_points += terrain_sectors[z][x].number_of_points;

  0052f	6b 45 f4 30	 imul	 eax, DWORD PTR _x$[ebp], 48
  00533	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  00536	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0053c	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  0053f	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00543	03 55 fc	 add	 edx, DWORD PTR _total_points$[ebp]
  00546	89 55 fc	 mov	 DWORD PTR _total_points$[ebp], edx

; 437  : 
; 438  : 			//
; 439  : 			// Next short int is the number of polys in this sector
; 440  : 			//
; 441  : 
; 442  : 			terrain_3d_local_data += 2;

  00549	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0054c	83 c0 02	 add	 eax, 2
  0054f	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax

; 443  : 
; 444  : 			terrain_sectors[z][x].number_of_polygons = get_list_item ( terrain_3d_local_data,  unsigned short int );

  00552	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00555	83 c0 02	 add	 eax, 2
  00558	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0055b	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  0055f	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  00562	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00567	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  0056a	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0056d	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  00571	66 89 44 0a 02	 mov	 WORD PTR [edx+ecx+2], ax

; 445  : 
; 446  : 			//
; 447  : 			// Next short int is the radius of the sector
; 448  : 			//
; 449  : 
; 450  : 			terrain_sectors[z][x].radius = get_list_item ( terrain_3d_local_data, unsigned short int );

  00576	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00579	83 c0 02	 add	 eax, 2
  0057c	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0057f	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  00583	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  00586	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0058b	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  0058e	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00591	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  00595	66 89 44 0a 04	 mov	 WORD PTR [edx+ecx+4], ax

; 451  : 
; 452  : 			//
; 453  : 			// Next short int is the minimum height of the sector
; 454  : 			//
; 455  : 
; 456  : 			terrain_sectors[z][x].minimum_height = get_list_item ( terrain_3d_local_data, short int );

  0059a	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0059d	83 c0 02	 add	 eax, 2
  005a0	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  005a3	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  005a7	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  005aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  005af	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  005b2	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  005b5	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  005b9	66 89 44 0a 06	 mov	 WORD PTR [edx+ecx+6], ax

; 457  : 
; 458  : 			//
; 459  : 			// Next short int is the maximum height of the sector
; 460  : 			//
; 461  : 
; 462  : 			terrain_sectors[z][x].maximum_height = get_list_item ( terrain_3d_local_data, short int );

  005be	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  005c1	83 c0 02	 add	 eax, 2
  005c4	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  005c7	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  005cb	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  005ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  005d3	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  005d6	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  005d9	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  005dd	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax

; 463  : 
; 464  : 			//
; 465  : 			// Next short int is the average height of the sector
; 466  : 			//
; 467  : 
; 468  : 			terrain_sectors[z][x].average_height = get_list_item ( terrain_3d_local_data, short int );

  005e2	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  005e5	83 c0 02	 add	 eax, 2
  005e8	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  005eb	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  005ef	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  005f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  005f7	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  005fa	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  005fd	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  00601	66 89 44 0a 0a	 mov	 WORD PTR [edx+ecx+10], ax

; 469  : 
; 470  : 			//
; 471  : 			// Read in padding word
; 472  : 			//
; 473  : 
; 474  : 			offset = get_list_item ( terrain_3d_local_data, short int );

  00606	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00609	83 c0 02	 add	 eax, 2
  0060c	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0060f	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00612	0f bf 51 fe	 movsx	 edx, WORD PTR [ecx-2]
  00616	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 475  : 
; 476  : 			//
; 477  : 			// Get the offsets into the geometry file
; 478  : 			//
; 479  : 
; 480  : 			offset = get_list_item ( terrain_3d_local_data, int );

  0061c	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0061f	83 c0 04	 add	 eax, 4
  00622	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00625	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00628	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0062b	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 481  : 
; 482  : 			terrain_sectors[z][x].points_y = ( terrain_3d_point_y * ) ( terrain_3d_geometry_data + offset );

  00631	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00636	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  0063c	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  00640	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  00643	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00649	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  0064c	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 483  : 
; 484  : 			offset = get_list_item ( terrain_3d_local_data, int );

  00650	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00653	83 c0 04	 add	 eax, 4
  00656	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00659	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  0065c	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0065f	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 485  : 
; 486  : 			terrain_sectors[z][x].points_xz = ( terrain_3d_point_xz * ) ( terrain_3d_geometry_data + offset );

  00665	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  0066a	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  00670	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  00674	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  00677	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0067d	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00680	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 487  : 
; 488  : 			offset = get_list_item ( terrain_3d_local_data, int );

  00684	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00687	83 c0 04	 add	 eax, 4
  0068a	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0068d	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00690	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00693	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 489  : 
; 490  : 			terrain_sectors[z][x].point_byte_references = ( terrain_3d_point_byte_reference * ) ( terrain_3d_geometry_data + offset );

  00699	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  0069e	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  006a4	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  006a8	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  006ab	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  006b1	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  006b4	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 491  : 
; 492  : 			offset = get_list_item ( terrain_3d_local_data, int );

  006b8	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  006bb	83 c0 04	 add	 eax, 4
  006be	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  006c1	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  006c4	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  006c7	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 493  : 
; 494  : 			terrain_sectors[z][x].polygons = ( terrain_3d_face * ) ( terrain_3d_geometry_data + offset );

  006cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  006d2	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  006d8	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  006dc	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  006df	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  006e5	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  006e8	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 495  : 
; 496  : 			offset = get_list_item ( terrain_3d_local_data, int );

  006ec	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  006ef	83 c0 04	 add	 eax, 4
  006f2	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  006f5	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  006f8	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  006fb	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 497  : 
; 498  : 			terrain_sectors[z][x].surface_changes = ( terrain_3d_surface * ) ( terrain_3d_geometry_data + offset );

  00701	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00706	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  0070c	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  00710	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  00713	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00719	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  0071c	89 44 0a 1c	 mov	 DWORD PTR [edx+ecx+28], eax

; 499  : 
; 500  : 			offset = get_list_item ( terrain_3d_local_data, int );

  00720	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00723	83 c0 04	 add	 eax, 4
  00726	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00729	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  0072c	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0072f	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 501  : 
; 502  : 			terrain_sectors[z][x].normal_changes = ( terrain_3d_normal_index * ) ( terrain_3d_geometry_data + offset );

  00735	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  0073a	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  00740	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  00744	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  00747	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0074d	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00750	89 44 0a 20	 mov	 DWORD PTR [edx+ecx+32], eax

; 503  : 
; 504  : 			//
; 505  : 			// OFFSET OF NORMAL BITSTREAM
; 506  : 			//
; 507  : 
; 508  : 			//
; 509  : 			// Get the offsets into the colours file
; 510  : 			//
; 511  : 			offset = get_list_item ( terrain_3d_local_data, int );

  00754	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00757	83 c0 04	 add	 eax, 4
  0075a	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0075d	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00760	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00763	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 512  : 
; 513  : 			terrain_sectors[z][x].colour_indices = ( terrain_3d_colour_index * ) ( terrain_3d_colour_data + offset );

  00769	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  0076e	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  00774	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  00778	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  0077b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00781	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00784	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 514  : 
; 515  : 			offset = get_list_item ( terrain_3d_local_data, int );

  00788	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0078b	83 c0 04	 add	 eax, 4
  0078e	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00791	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00794	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00797	89 95 d8 eb ff
	ff		 mov	 DWORD PTR _offset$10[ebp], edx

; 516  : 
; 517  : 			terrain_sectors[z][x].point_colours = ( terrain_3d_colour * ) ( terrain_3d_colour_data + offset );

  0079d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  007a2	03 85 d8 eb ff
	ff		 add	 eax, DWORD PTR _offset$10[ebp]
  007a8	6b 4d f4 30	 imul	 ecx, DWORD PTR _x$[ebp], 48
  007ac	8b 55 f0	 mov	 edx, DWORD PTR _z$[ebp]
  007af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  007b5	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  007b8	89 44 0a 24	 mov	 DWORD PTR [edx+ecx+36], eax

; 518  : 
; 519  :   // Craig start Feb. 2009
; 520  : 			////////////////////////////////////////////////////////////////////////////////////////
; 521  : 			// Changed the above if() to this so gouraud shading can be used as was originally
; 522  : 			// designed by Razorworks and still be able to use all the work VJ (Gotcha)
; 523  : 			// did on the external textures.
; 524  : 			// The gouraud_shading variable is set in mapinfo.txt, if the field exists,
; 525  : 			// and is set to the default zero if the field doesn't exist as in the existing
; 526  : 			// mapinfo.txt files  -  Craig
; 527  : 			////////////////////////////////////////////////////////////////////////////////////////
; 528  : 
; 529  : 			if (command_line_texture_colour && !current_map_info.gouraud_shading)

  007bc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_texture_colour@@3HA, 0 ; command_line_texture_colour
  007c3	74 73		 je	 SHORT $LN49@load_3d_te
  007c5	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+868, 0
  007cc	75 6a		 jne	 SHORT $LN49@load_3d_te

; 530  : 			{
; 531  : 				// the colour is mixed with the textures' colours.
; 532  : 				// This will however darken the texture substantially, so disable it
; 533  : 				// when texture colour is enabled by setting it to white
; 534  : 
; 535  : 				ASSERT(terrain_sectors[z][x].number_of_points < ARRAY_LENGTH(white_col));

  007ce	6b 45 f4 30	 imul	 eax, DWORD PTR _x$[ebp], 48
  007d2	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  007d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  007db	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  007de	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  007e2	81 fa d0 0f 00
	00		 cmp	 edx, 4048		; 00000fd0H
  007e8	72 1a		 jb	 SHORT $LN48@load_3d_te
  007ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_3d_terrain@@YGHPBD@Z@4JA
  007ef	05 69 01 00 00	 add	 eax, 361		; 00000169H
  007f4	50		 push	 eax
  007f5	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EHPAGCCL@c?3?2users?2nhv90?2projects?2eech?2mo@
  007fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@DNPGHNHO@terrain_sectors?$FLz?$FN?$FLx?$FN?4number_of@
  007ff	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN48@load_3d_te:

; 536  : 				if (terrain_sectors[z][x].number_of_points < ARRAY_LENGTH(white_col))

  00804	6b 45 f4 30	 imul	 eax, DWORD PTR _x$[ebp], 48
  00808	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  0080b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00811	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00814	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00818	81 fa d0 0f 00
	00		 cmp	 edx, 4048		; 00000fd0H
  0081e	73 18		 jae	 SHORT $LN49@load_3d_te

; 537  : 					terrain_sectors[z][x].point_colours = white_col;

  00820	6b 45 f4 30	 imul	 eax, DWORD PTR _x$[ebp], 48
  00824	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  00827	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0082d	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00830	c7 44 01 24 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+36], OFFSET ?white_col@@3PAUTERRAIN_3D_COLOUR@@A ; white_col
$LN49@load_3d_te:

; 538  : 			}
; 539  : 
; 540  : // Craig end
; 541  : 			//
; 542  : 			// Set the approximation to off
; 543  : 			//
; 544  : 
; 545  : //			terrain_sectors[z][x].approximation = NULL;
; 546  : 		}

  00838	e9 b7 fc ff ff	 jmp	 $LN9@load_3d_te
$LN10@load_3d_te:

; 547  : 	}

  0083d	e9 6c fc ff ff	 jmp	 $LN6@load_3d_te
$LN7@load_3d_te:

; 548  : 
; 549  : 	//
; 550  : 	// Now read in the number of sector approximations
; 551  : 	//
; 552  : 
; 553  : 	terrain_3d_number_of_sector_approximations = get_list_item ( terrain_3d_local_data, unsigned int );

  00842	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00845	83 c0 04	 add	 eax, 4
  00848	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0084b	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  0084e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00851	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_number_of_sector_approximations@@3HA, edx ; terrain_3d_number_of_sector_approximations

; 554  : 
; 555  : 	if ( terrain_3d_number_of_sector_approximations )

  00857	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_number_of_sector_approximations@@3HA, 0 ; terrain_3d_number_of_sector_approximations
  0085e	0f 84 d7 02 00
	00		 je	 $LN13@load_3d_te

; 556  : 	{
; 557  : 
; 558  : 		if ( terrain_sector_approximations )

  00864	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sector_approximations
  0086b	74 15		 je	 SHORT $LN51@load_3d_te

; 559  : 		{
; 560  : 
; 561  : 			safe_free ( terrain_sector_approximations );

  0086d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00872	50		 push	 eax
  00873	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 562  : 
; 563  : 			terrain_sector_approximations = NULL;

  00878	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A, 0 ; terrain_sector_approximations
$LN51@load_3d_te:

; 564  : 		}
; 565  : 
; 566  : 		terrain_sector_approximations = ( struct TERRAIN_3D_SECTOR * ) safe_malloc ( terrain_3d_number_of_sector_approximations * sizeof ( struct TERRAIN_3D_SECTOR ) );

  00882	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?terrain_3d_number_of_sector_approximations@@3HA, 48 ; terrain_3d_number_of_sector_approximations
  00889	50		 push	 eax
  0088a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0088f	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A, eax ; terrain_sector_approximations

; 567  : 
; 568  : 		debug_log ( "Got %d approximated sectors", terrain_3d_number_of_sector_approximations );

  00894	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_number_of_sector_approximations@@3HA ; terrain_3d_number_of_sector_approximations
  00899	50		 push	 eax
  0089a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@KNDGDHLC@Got?5?$CFd?5approximated?5sectors@
  0089f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  008a4	83 c4 08	 add	 esp, 8

; 569  : 
; 570  : 		//
; 571  : 		// Now read in the actual approximation data
; 572  : 		//
; 573  : 
; 574  : 		for ( count = 0; count < terrain_3d_number_of_sector_approximations; count++ )

  008a7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  008ae	eb 09		 jmp	 SHORT $LN14@load_3d_te
$LN12@load_3d_te:
  008b0	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  008b3	83 c0 01	 add	 eax, 1
  008b6	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN14@load_3d_te:
  008b9	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  008bc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_number_of_sector_approximations@@3HA ; terrain_3d_number_of_sector_approximations
  008c2	0f 8d 73 02 00
	00		 jge	 $LN13@load_3d_te

; 575  : 		{
; 576  : 
; 577  : 			x = get_list_item ( terrain_3d_local_data, unsigned short int );

  008c8	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  008cb	83 c0 02	 add	 eax, 2
  008ce	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  008d1	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  008d4	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  008d8	89 55 f4	 mov	 DWORD PTR _x$[ebp], edx

; 578  : 
; 579  : 			z = get_list_item ( terrain_3d_local_data, unsigned short int );

  008db	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  008de	83 c0 02	 add	 eax, 2
  008e1	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  008e4	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  008e7	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  008eb	89 55 f0	 mov	 DWORD PTR _z$[ebp], edx

; 580  : 
; 581  : //			terrain_sectors[z][x].approximation = &terrain_sector_approximations[count];
; 582  : 
; 583  : 			{
; 584  : 				int
; 585  : 					offset;
; 586  : 
; 587  : 				//
; 588  : 				// First short int is the number of points in this sector
; 589  : 				//
; 590  : 
; 591  : 				terrain_sector_approximations[count].number_of_points = get_list_item ( terrain_3d_local_data, unsigned short int );

  008ee	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  008f1	83 c0 02	 add	 eax, 2
  008f4	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  008f7	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  008fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00901	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00904	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  00908	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 592  : 
; 593  : 				//
; 594  : 				// Next short int is the number of polys in this sector
; 595  : 				//
; 596  : 
; 597  : 				terrain_3d_local_data += 2;

  0090c	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0090f	83 c0 02	 add	 eax, 2
  00912	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax

; 598  : 
; 599  : 				terrain_sector_approximations[count].number_of_polygons = get_list_item ( terrain_3d_local_data,  unsigned short int );

  00915	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00918	83 c0 02	 add	 eax, 2
  0091b	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0091e	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00922	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00928	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0092b	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  0092f	66 89 44 0a 02	 mov	 WORD PTR [edx+ecx+2], ax

; 600  : 
; 601  : 				//
; 602  : 				// Next set of data is the dimensions
; 603  : 				//
; 604  : 
; 605  : 				terrain_sector_approximations[count].radius = get_list_item ( terrain_3d_local_data, unsigned short int );

  00934	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00937	83 c0 02	 add	 eax, 2
  0093a	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0093d	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00941	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00947	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  0094a	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  0094e	66 89 44 0a 04	 mov	 WORD PTR [edx+ecx+4], ax

; 606  : 
; 607  : 				terrain_sector_approximations[count].minimum_height = get_list_item ( terrain_3d_local_data, short int );

  00953	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00956	83 c0 02	 add	 eax, 2
  00959	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0095c	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00960	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00966	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00969	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  0096d	66 89 44 0a 06	 mov	 WORD PTR [edx+ecx+6], ax

; 608  : 
; 609  : 				terrain_sector_approximations[count].maximum_height = get_list_item ( terrain_3d_local_data, short int );

  00972	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00975	83 c0 02	 add	 eax, 2
  00978	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0097b	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  0097f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00985	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00988	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  0098c	66 89 44 0a 08	 mov	 WORD PTR [edx+ecx+8], ax

; 610  : 
; 611  : 				terrain_sector_approximations[count].average_height = get_list_item ( terrain_3d_local_data, short int );

  00991	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00994	83 c0 02	 add	 eax, 2
  00997	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  0099a	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  0099e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  009a4	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  009a7	66 8b 40 fe	 mov	 ax, WORD PTR [eax-2]
  009ab	66 89 44 0a 0a	 mov	 WORD PTR [edx+ecx+10], ax

; 612  : 
; 613  : 				//
; 614  : 				// Read in padding word
; 615  : 				//
; 616  : 
; 617  : 				offset = get_list_item ( terrain_3d_local_data, short int );

  009b0	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  009b3	83 c0 02	 add	 eax, 2
  009b6	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  009b9	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  009bc	0f bf 51 fe	 movsx	 edx, WORD PTR [ecx-2]
  009c0	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 618  : 
; 619  : 				//
; 620  : 				// Get the offsets into the geometry file
; 621  : 				//
; 622  : 
; 623  : 				offset = get_list_item ( terrain_3d_local_data, int );

  009c6	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  009c9	83 c0 04	 add	 eax, 4
  009cc	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  009cf	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  009d2	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  009d5	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 624  : 
; 625  : 				terrain_sector_approximations[count].points_y = ( terrain_3d_point_y * ) ( terrain_3d_geometry_data + offset );

  009db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  009e0	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  009e6	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  009ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  009f0	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 626  : 
; 627  : 				offset = get_list_item ( terrain_3d_local_data, int );

  009f4	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  009f7	83 c0 04	 add	 eax, 4
  009fa	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  009fd	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00a00	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00a03	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 628  : 
; 629  : 				terrain_sector_approximations[count].points_xz = ( terrain_3d_point_xz * ) ( terrain_3d_geometry_data + offset );

  00a09	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00a0e	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  00a14	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00a18	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00a1e	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 630  : 
; 631  : 				offset = get_list_item ( terrain_3d_local_data, int );

  00a22	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00a25	83 c0 04	 add	 eax, 4
  00a28	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00a2b	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00a2e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00a31	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 632  : 
; 633  : 				terrain_sector_approximations[count].point_byte_references = ( terrain_3d_point_byte_reference * ) ( terrain_3d_geometry_data + offset );

  00a37	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00a3c	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  00a42	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00a46	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00a4c	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 634  : 
; 635  : 				offset = get_list_item ( terrain_3d_local_data, int );

  00a50	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00a53	83 c0 04	 add	 eax, 4
  00a56	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00a59	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00a5c	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00a5f	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 636  : 
; 637  : 				terrain_sector_approximations[count].polygons = ( terrain_3d_face * ) ( terrain_3d_geometry_data + offset );

  00a65	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00a6a	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  00a70	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00a74	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00a7a	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 638  : 
; 639  : 				offset = get_list_item ( terrain_3d_local_data, int );

  00a7e	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00a81	83 c0 04	 add	 eax, 4
  00a84	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00a87	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00a8a	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00a8d	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 640  : 
; 641  : 				terrain_sector_approximations[count].surface_changes = ( terrain_3d_surface * ) ( terrain_3d_geometry_data + offset );

  00a93	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00a98	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  00a9e	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00aa2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00aa8	89 44 0a 1c	 mov	 DWORD PTR [edx+ecx+28], eax

; 642  : 
; 643  : 				offset = get_list_item ( terrain_3d_local_data, int );

  00aac	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00aaf	83 c0 04	 add	 eax, 4
  00ab2	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00ab5	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00ab8	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00abb	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 644  : 
; 645  : 				terrain_sector_approximations[count].normal_changes = ( terrain_3d_normal_index * ) ( terrain_3d_geometry_data + offset );

  00ac1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_geometry_data@@3PAEA
  00ac6	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  00acc	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00ad0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00ad6	89 44 0a 20	 mov	 DWORD PTR [edx+ecx+32], eax

; 646  : 
; 647  : 				//
; 648  : 				// Get the offsets into the colours file
; 649  : 				//
; 650  : 
; 651  : 				offset = get_list_item ( terrain_3d_local_data, int );

  00ada	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00add	83 c0 04	 add	 eax, 4
  00ae0	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00ae3	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00ae6	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00ae9	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 652  : 
; 653  : 				terrain_sector_approximations[count].colour_indices = ( terrain_3d_colour_index * ) ( terrain_3d_colour_data + offset );

  00aef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  00af4	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  00afa	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00afe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00b04	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 654  : 
; 655  : 				offset = get_list_item ( terrain_3d_local_data, int );

  00b08	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00b0b	83 c0 04	 add	 eax, 4
  00b0e	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00b11	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00b14	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00b17	89 95 d4 eb ff
	ff		 mov	 DWORD PTR _offset$9[ebp], edx

; 656  : 
; 657  : 				terrain_sector_approximations[count].point_colours = ( terrain_3d_colour * ) ( terrain_3d_colour_data + offset );

  00b1d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_colour_data@@3PAEA
  00b22	03 85 d4 eb ff
	ff		 add	 eax, DWORD PTR _offset$9[ebp]
  00b28	6b 4d f8 30	 imul	 ecx, DWORD PTR _count$[ebp], 48
  00b2c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sector_approximations@@3PAUTERRAIN_3D_SECTOR@@A ; terrain_sector_approximations
  00b32	89 44 0a 24	 mov	 DWORD PTR [edx+ecx+36], eax

; 658  : 			}
; 659  : 		}

  00b36	e9 75 fd ff ff	 jmp	 $LN12@load_3d_te
$LN13@load_3d_te:

; 660  : 	}
; 661  : 
; 662  : 	safe_mclose ( terrain_3d_sector_data );

  00b3b	8b 45 e4	 mov	 eax, DWORD PTR _terrain_3d_sector_data$[ebp]
  00b3e	50		 push	 eax
  00b3f	e8 00 00 00 00	 call	 ?safe_mclose@@YGHPAX@Z	; safe_mclose

; 663  : 
; 664  : 	debug_log ( "TERRAIN HAS %d points", total_points );

  00b44	8b 45 fc	 mov	 eax, DWORD PTR _total_points$[ebp]
  00b47	50		 push	 eax
  00b48	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EIOAAFPP@TERRAIN?5HAS?5?$CFd?5points@
  00b4d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00b52	83 c4 08	 add	 esp, 8

; 665  : 
; 666  : 	//
; 667  : 	// initialise terrain elevation (it is essential to do this every time a new map is loaded)
; 668  : 	//
; 669  : 
; 670  : 	initialise_3d_terrain_elevation ();

  00b55	e8 00 00 00 00	 call	 ?initialise_3d_terrain_elevation@@YGXXZ ; initialise_3d_terrain_elevation

; 671  : 
; 672  : 	//
; 673  : 	// Initialise the objects in the terrain
; 674  : 	//
; 675  : 
; 676  : 	initialise_terrain_objects ();

  00b5a	e8 00 00 00 00	 call	 ?initialise_terrain_objects@@YGXXZ ; initialise_terrain_objects

; 677  : 
; 678  : 	terrain_initialised = TRUE;

  00b5f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?terrain_initialised@@3HA, 1

; 679  : 
; 680  : 	//
; 681  : 	// Initialise the terrain trees - if there are any
; 682  : 	//
; 683  : 
; 684  : 	if ( file_exist ( tree_sector_file ) && file_exist ( tree_data_file ) )

  00b69	8d 85 e0 ef ff
	ff		 lea	 eax, DWORD PTR _tree_sector_file$[ebp]
  00b6f	50		 push	 eax
  00b70	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00b75	85 c0		 test	 eax, eax
  00b77	0f 84 6e 02 00
	00		 je	 $LN52@load_3d_te
  00b7d	8d 85 e0 eb ff
	ff		 lea	 eax, DWORD PTR _tree_data_file$[ebp]
  00b83	50		 push	 eax
  00b84	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00b89	85 c0		 test	 eax, eax
  00b8b	0f 84 5a 02 00
	00		 je	 $LN52@load_3d_te

; 685  : 	{
; 686  : 
; 687  : 		//
; 688  : 		// Map the datafile
; 689  : 		//
; 690  : 
; 691  : 		terrain_3d_trees_data = ( unsigned char * ) safe_mopen ( tree_data_file );

  00b91	8d 85 e0 eb ff
	ff		 lea	 eax, DWORD PTR _tree_data_file$[ebp]
  00b97	50		 push	 eax
  00b98	e8 00 00 00 00	 call	 ?safe_mopen@@YGPAXPBD@Z	; safe_mopen
  00b9d	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_trees_data@@3PAEA, eax

; 692  : 
; 693  : 		if ( terrain_3d_trees_data )

  00ba2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?terrain_3d_trees_data@@3PAEA, 0
  00ba9	0f 84 3a 02 00
	00		 je	 $LN57@load_3d_te

; 694  : 		{
; 695  : 
; 696  : 			terrain_3d_sector_data = ( unsigned char * ) safe_mopen ( tree_sector_file );

  00baf	8d 85 e0 ef ff
	ff		 lea	 eax, DWORD PTR _tree_sector_file$[ebp]
  00bb5	50		 push	 eax
  00bb6	e8 00 00 00 00	 call	 ?safe_mopen@@YGPAXPBD@Z	; safe_mopen
  00bbb	89 45 e4	 mov	 DWORD PTR _terrain_3d_sector_data$[ebp], eax

; 697  : 
; 698  : 			if ( terrain_3d_sector_data )

  00bbe	83 7d e4 00	 cmp	 DWORD PTR _terrain_3d_sector_data$[ebp], 0
  00bc2	0f 84 21 02 00
	00		 je	 $LN57@load_3d_te

; 699  : 			{
; 700  : 
; 701  : 				terrain_3d_local_data = terrain_3d_sector_data;

  00bc8	8b 45 e4	 mov	 eax, DWORD PTR _terrain_3d_sector_data$[ebp]
  00bcb	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax

; 702  : 
; 703  : 				terrain_3d_tree_map_width = get_list_item ( terrain_3d_local_data, int );

  00bce	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00bd1	83 c0 04	 add	 eax, 4
  00bd4	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00bd7	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00bda	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00bdd	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_tree_map_width@@3HA, edx ; terrain_3d_tree_map_width

; 704  : 
; 705  : 				terrain_3d_tree_map_height = get_list_item ( terrain_3d_local_data, int );

  00be3	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00be6	83 c0 04	 add	 eax, 4
  00be9	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00bec	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00bef	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00bf2	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_3d_tree_map_height@@3HA, edx ; terrain_3d_tree_map_height

; 706  : 
; 707  : 				if (	( terrain_3d_tree_map_width != terrain_3d_map_width ) ||

  00bf8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_map_width@@3HA ; terrain_3d_tree_map_width
  00bfd	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_map_width@@3HA ; terrain_3d_map_width
  00c03	75 11		 jne	 SHORT $LN58@load_3d_te
  00c05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  00c0a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_map_height@@3HA ; terrain_3d_map_height
  00c10	0f 84 80 00 00
	00		 je	 $LN56@load_3d_te
$LN58@load_3d_te:

; 708  : 						( terrain_3d_tree_map_height != terrain_3d_map_height ) )
; 709  : 				{
; 710  : 
; 711  : 					debug_colour_log ( DEBUG_COLOUR_DARK_RED, "######################################################" );

  00c16	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@JMECDHE@?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD@
  00c1b	6a 11		 push	 17			; 00000011H
  00c1d	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00c22	83 c4 08	 add	 esp, 8

; 712  : 					debug_colour_log ( DEBUG_COLOUR_DARK_RED, "TREE DATA DOES NOT MATCH TERRAIN DATA - DITCHING TREES" );

  00c25	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@CIGFODFL@TREE?5DATA?5DOES?5NOT?5MATCH?5TERRAI@
  00c2a	6a 11		 push	 17			; 00000011H
  00c2c	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00c31	83 c4 08	 add	 esp, 8

; 713  : 					debug_colour_log ( DEBUG_COLOUR_DARK_RED, "######################################################" );

  00c34	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@JMECDHE@?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD@
  00c39	6a 11		 push	 17			; 00000011H
  00c3b	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00c40	83 c4 08	 add	 esp, 8

; 714  : 					debug_colour_log ( DEBUG_COLOUR_DARK_RED, "TREE SECTORS: %d, %d - TERRAIN SECTORS %d, %d",

  00c43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_map_height@@3HA ; terrain_3d_map_height
  00c48	50		 push	 eax
  00c49	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_map_width@@3HA ; terrain_3d_map_width
  00c4f	51		 push	 ecx
  00c50	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  00c56	52		 push	 edx
  00c57	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_map_width@@3HA ; terrain_3d_tree_map_width
  00c5c	50		 push	 eax
  00c5d	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@DJDGKPCI@TREE?5SECTORS?3?5?$CFd?0?5?$CFd?5?9?5TERRAIN?5@
  00c62	6a 11		 push	 17			; 00000011H
  00c64	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00c69	83 c4 18	 add	 esp, 24			; 00000018H

; 715  : 																				terrain_3d_tree_map_width, terrain_3d_tree_map_height,
; 716  : 																				terrain_3d_map_width, terrain_3d_map_height );
; 717  : 
; 718  : 
; 719  : 					mclose ( terrain_3d_sector_data );

  00c6c	8b 45 e4	 mov	 eax, DWORD PTR _terrain_3d_sector_data$[ebp]
  00c6f	50		 push	 eax
  00c70	e8 00 00 00 00	 call	 ?mclose@@YGHPAX@Z	; mclose

; 720  : 
; 721  : 					mclose ( terrain_3d_trees_data );

  00c75	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_trees_data@@3PAEA
  00c7a	50		 push	 eax
  00c7b	e8 00 00 00 00	 call	 ?mclose@@YGHPAX@Z	; mclose

; 722  : 
; 723  : 					terrain_3d_sector_data = NULL;

  00c80	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _terrain_3d_sector_data$[ebp], 0

; 724  : 
; 725  : 					terrain_3d_trees_data = NULL;

  00c87	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_trees_data@@3PAEA, 0

; 726  : 				}
; 727  : 				else

  00c91	e9 53 01 00 00	 jmp	 $LN57@load_3d_te
$LN56@load_3d_te:

; 728  : 				{
; 729  : 
; 730  : 
; 731  : 					terrain_tree_sectors = ( terrain_3d_tree_sector * * ) safe_malloc ( terrain_3d_tree_map_height * sizeof ( terrain_3d_tree_sector * ) );

  00c96	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  00c9b	c1 e0 02	 shl	 eax, 2
  00c9e	50		 push	 eax
  00c9f	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00ca4	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A, eax ; terrain_tree_sectors

; 732  : 
; 733  : 					for ( z = 0; z < terrain_3d_tree_map_height; z++ )

  00ca9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00cb0	eb 09		 jmp	 SHORT $LN17@load_3d_te
$LN15@load_3d_te:
  00cb2	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00cb5	83 c0 01	 add	 eax, 1
  00cb8	89 45 f0	 mov	 DWORD PTR _z$[ebp], eax
$LN17@load_3d_te:
  00cbb	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00cbe	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  00cc4	0f 8d 96 00 00
	00		 jge	 $LN16@load_3d_te

; 734  : 					{
; 735  : 
; 736  : 						terrain_tree_sectors[z] = ( terrain_3d_tree_sector * ) safe_malloc ( terrain_3d_tree_map_width * sizeof ( terrain_3d_tree_sector ) );

  00cca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_map_width@@3HA ; terrain_3d_tree_map_width
  00ccf	c1 e0 03	 shl	 eax, 3
  00cd2	50		 push	 eax
  00cd3	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00cd8	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  00cdb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  00ce1	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 737  : 
; 738  : 						for ( x = 0; x < terrain_3d_tree_map_width; x++ )

  00ce4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00ceb	eb 09		 jmp	 SHORT $LN20@load_3d_te
$LN18@load_3d_te:
  00ced	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00cf0	83 c0 01	 add	 eax, 1
  00cf3	89 45 f4	 mov	 DWORD PTR _x$[ebp], eax
$LN20@load_3d_te:
  00cf6	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00cf9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_tree_map_width@@3HA ; terrain_3d_tree_map_width
  00cff	7d 5a		 jge	 SHORT $LN19@load_3d_te

; 739  : 						{
; 740  : 
; 741  : 							int
; 742  : 								offset;
; 743  : 
; 744  : 							terrain_tree_sectors[z][x].number_of_trees = get_list_item ( terrain_3d_local_data, int );

  00d01	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00d04	83 c0 04	 add	 eax, 4
  00d07	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00d0a	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  00d0d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  00d13	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00d16	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00d19	8b 55 e8	 mov	 edx, DWORD PTR _terrain_3d_local_data$[ebp]
  00d1c	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  00d1f	89 14 c8	 mov	 DWORD PTR [eax+ecx*8], edx

; 745  : 
; 746  : 							offset = get_list_item ( terrain_3d_local_data, int );

  00d22	8b 45 e8	 mov	 eax, DWORD PTR _terrain_3d_local_data$[ebp]
  00d25	83 c0 04	 add	 eax, 4
  00d28	89 45 e8	 mov	 DWORD PTR _terrain_3d_local_data$[ebp], eax
  00d2b	8b 4d e8	 mov	 ecx, DWORD PTR _terrain_3d_local_data$[ebp]
  00d2e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00d31	89 95 d0 eb ff
	ff		 mov	 DWORD PTR _offset$8[ebp], edx

; 747  : 
; 748  : 							terrain_tree_sectors[z][x].trees = ( terrain_3d_tree_data * ) terrain_3d_trees_data + offset;

  00d37	8b 85 d0 eb ff
	ff		 mov	 eax, DWORD PTR _offset$8[ebp]
  00d3d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_3d_trees_data@@3PAEA
  00d43	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00d46	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00d49	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_tree_sectors@@3PAPAUTERRAIN_3D_TREE_SECTOR@@A ; terrain_tree_sectors
  00d4f	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00d52	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00d55	89 54 c8 04	 mov	 DWORD PTR [eax+ecx*8+4], edx

; 749  : 						}

  00d59	eb 92		 jmp	 SHORT $LN18@load_3d_te
$LN19@load_3d_te:

; 750  : 					}

  00d5b	e9 52 ff ff ff	 jmp	 $LN15@load_3d_te
$LN16@load_3d_te:

; 751  : 
; 752  : 					debug_log ( "READ IN THE TREE DATA" );

  00d60	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BHENJFKM@READ?5IN?5THE?5TREE?5DATA@
  00d65	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00d6a	83 c4 04	 add	 esp, 4

; 753  : 
; 754  : 					//
; 755  : 					// Construct a 3d object instance for the rendering of the terrain trees
; 756  : 					//
; 757  : 
; 758  : 					switch ( current_terrain_version.map_number )

  00d6d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A ; current_terrain_version
  00d72	83 e0 0f	 and	 eax, 15			; 0000000fH
  00d75	89 85 b0 e9 ff
	ff		 mov	 DWORD PTR tv561[ebp], eax
  00d7b	83 bd b0 e9 ff
	ff 06		 cmp	 DWORD PTR tv561[ebp], 6
  00d82	74 02		 je	 SHORT $LN59@load_3d_te
  00d84	eb 2e		 jmp	 SHORT $LN61@load_3d_te
$LN59@load_3d_te:

; 759  : 					{
; 760  : 
; 761  : 						case 6:
; 762  : 						{
; 763  : 
; 764  : 							//terrain_3d_tree_object = construct_3d_object_by_name ( "Y_DATE_PALM" );
; 765  : 							//VJ 051030 for Maverick, change to whole tree else only truncs of palms are shown
; 766  : 							terrain_3d_tree_object = construct_3d_object_by_name ( "FOREST_TREE_OBJECT" );

  00d86	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GBAKOJAB@FOREST_TREE_OBJECT@
  00d8b	e8 00 00 00 00	 call	 ?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z ; construct_3d_object_by_name
  00d90	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A, eax ; terrain_3d_tree_object

; 767  : 							// start render_tree_shadows-mod by GCsDriver 08-12-2007
; 768  : 							if ( !command_line_render_tree_shadows )

  00d95	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_render_tree_shadows@@3HA, 0 ; command_line_render_tree_shadows
  00d9c	75 14		 jne	 SHORT $LN60@load_3d_te

; 769  : 								terrain_3d_tree_object->object_has_shadow = FALSE;

  00d9e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_tree_object
  00da3	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00da6	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00da9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_tree_object
  00daf	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN60@load_3d_te:

; 770  : 
; 771  : 							break;

  00db2	eb 2c		 jmp	 SHORT $LN21@load_3d_te
$LN61@load_3d_te:

; 772  : 						}
; 773  : 
; 774  : 						default:
; 775  : 						{
; 776  : 
; 777  : 							terrain_3d_tree_object = construct_3d_object_by_name ( "FOREST_TREE_OBJECT" );

  00db4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GBAKOJAB@FOREST_TREE_OBJECT@
  00db9	e8 00 00 00 00	 call	 ?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z ; construct_3d_object_by_name
  00dbe	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A, eax ; terrain_3d_tree_object

; 778  : 
; 779  : 							if ( !command_line_render_tree_shadows )

  00dc3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_render_tree_shadows@@3HA, 0 ; command_line_render_tree_shadows
  00dca	75 14		 jne	 SHORT $LN62@load_3d_te

; 780  : 								terrain_3d_tree_object->object_has_shadow = FALSE;

  00dcc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_tree_object
  00dd1	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00dd4	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00dd7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_3d_tree_object@@3PAUOBJECT_3D_INSTANCE@@A ; terrain_3d_tree_object
  00ddd	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN62@load_3d_te:
$LN21@load_3d_te:

; 781  : 
; 782  : 							// end render_tree_shadows-mod by GCsDriver 08-12-2007
; 783  : 							break;
; 784  : 						}
; 785  : 					}
; 786  : 
; 787  : 					mclose ( terrain_3d_sector_data );

  00de0	8b 45 e4	 mov	 eax, DWORD PTR _terrain_3d_sector_data$[ebp]
  00de3	50		 push	 eax
  00de4	e8 00 00 00 00	 call	 ?mclose@@YGHPAX@Z	; mclose
$LN57@load_3d_te:

; 788  : 				}
; 789  : 			}
; 790  : 		}
; 791  : 	}
; 792  : 	else

  00de9	eb 1e		 jmp	 SHORT $LN53@load_3d_te
$LN52@load_3d_te:

; 793  : 	{
; 794  : 
; 795  : 		terrain_3d_trees_data = NULL;

  00deb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_trees_data@@3PAEA, 0

; 796  : 
; 797  : 		terrain_3d_sector_data = NULL;

  00df5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _terrain_3d_sector_data$[ebp], 0

; 798  : 
; 799  : 		debug_log ( "Cant find the terrain tree data" );

  00dfc	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OPOJCIGG@Cant?5find?5the?5terrain?5tree?5data@
  00e01	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00e06	83 c4 04	 add	 esp, 4
$LN53@load_3d_te:

; 800  : 	}
; 801  : 
; 802  : 	// Casm 20MAY12 Cloud puffs
; 803  : 	terrain_3d_cloud_puff_object = construct_3d_object_by_name ( "CLOUD" );

  00e09	68 00 00 00 00	 push	 OFFSET ??_C@_05GHOHLNOH@CLOUD@
  00e0e	e8 00 00 00 00	 call	 ?construct_3d_object_by_name@@YGPAUOBJECT_3D_INSTANCE@@PAD@Z ; construct_3d_object_by_name
  00e13	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_cloud_puff_object@@3PAUOBJECT_3D_INSTANCE@@A, eax ; terrain_3d_cloud_puff_object

; 804  : 
; 805  : 	if (command_line_cloud_puffs > 1 || command_line_cloud_puffs == 1 && get_global_season() != SESSION_SEASON_DESERT)

  00e18	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?command_line_cloud_puffs@@3HA, 1 ; command_line_cloud_puffs
  00e1f	7f 1a		 jg	 SHORT $LN65@load_3d_te
  00e21	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?command_line_cloud_puffs@@3HA, 1 ; command_line_cloud_puffs
  00e28	0f 85 14 04 00
	00		 jne	 $LN63@load_3d_te
  00e2e	83 3d 14 04 00
	00 04		 cmp	 DWORD PTR ?current_map_info@@3UCUSTOM_MAP_INFO@@A+1044, 4
  00e35	0f 84 07 04 00
	00		 je	 $LN63@load_3d_te
$LN65@load_3d_te:

; 806  : 	{
; 807  : 		terrain_cloud_puff_sectors = ( terrain_3d_cloud_puff_sector** ) safe_malloc ( terrain_3d_tree_map_height * sizeof ( *terrain_cloud_puff_sectors ) );

  00e3b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  00e40	c1 e0 02	 shl	 eax, 2
  00e43	50		 push	 eax
  00e44	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00e49	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A, eax ; terrain_cloud_puff_sectors

; 808  : 		for ( z = 0; z < terrain_3d_tree_map_height; z++ )

  00e4e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00e55	eb 09		 jmp	 SHORT $LN25@load_3d_te
$LN23@load_3d_te:
  00e57	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00e5a	83 c0 01	 add	 eax, 1
  00e5d	89 45 f0	 mov	 DWORD PTR _z$[ebp], eax
$LN25@load_3d_te:
  00e60	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00e63	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_tree_map_height@@3HA ; terrain_3d_tree_map_height
  00e69	0f 8d be 03 00
	00		 jge	 $LN24@load_3d_te

; 809  : 		{
; 810  : 			terrain_cloud_puff_sectors[z] = ( terrain_3d_cloud_puff_sector* ) safe_malloc ( terrain_3d_tree_map_width * sizeof ( **terrain_cloud_puff_sectors ) );

  00e6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_3d_tree_map_width@@3HA ; terrain_3d_tree_map_width
  00e74	c1 e0 03	 shl	 eax, 3
  00e77	50		 push	 eax
  00e78	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00e7d	8b 4d f0	 mov	 ecx, DWORD PTR _z$[ebp]
  00e80	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  00e86	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 811  : 			for ( x = 0; x < terrain_3d_tree_map_width; x++ )

  00e89	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00e90	eb 09		 jmp	 SHORT $LN28@load_3d_te
$LN26@load_3d_te:
  00e92	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00e95	83 c0 01	 add	 eax, 1
  00e98	89 45 f4	 mov	 DWORD PTR _x$[ebp], eax
$LN28@load_3d_te:
  00e9b	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00e9e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_tree_map_width@@3HA ; terrain_3d_tree_map_width
  00ea4	0f 8d 7e 03 00
	00		 jge	 $LN27@load_3d_te

; 812  : 			{
; 813  : 				int
; 814  : 					base,
; 815  : 					pack;
; 816  : 
; 817  : 				int
; 818  : 					number_of_cloud_puffs;
; 819  : 				terrain_3d_cloud_puff_data
; 820  : 					*cloud_puffs;
; 821  : 
; 822  : 				float
; 823  : 					center_x,
; 824  : 					center_y,
; 825  : 					center_z;
; 826  : 
; 827  : 				base = rand() % 10;

  00eaa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00eb0	99		 cdq
  00eb1	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00eb6	f7 f9		 idiv	 ecx
  00eb8	89 95 cc eb ff
	ff		 mov	 DWORD PTR _base$7[ebp], edx

; 828  : 				pack = rand() % 5 + 1;

  00ebe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00ec4	99		 cdq
  00ec5	b9 05 00 00 00	 mov	 ecx, 5
  00eca	f7 f9		 idiv	 ecx
  00ecc	83 c2 01	 add	 edx, 1
  00ecf	89 95 c8 eb ff
	ff		 mov	 DWORD PTR _pack$6[ebp], edx

; 829  : 
; 830  : 				number_of_cloud_puffs = base * pack;

  00ed5	8b 85 cc eb ff
	ff		 mov	 eax, DWORD PTR _base$7[ebp]
  00edb	0f af 85 c8 eb
	ff ff		 imul	 eax, DWORD PTR _pack$6[ebp]
  00ee2	89 85 c4 eb ff
	ff		 mov	 DWORD PTR _number_of_cloud_puffs$5[ebp], eax

; 831  : 				cloud_puffs = number_of_cloud_puffs ? ( terrain_3d_cloud_puff_data* ) safe_malloc ( number_of_cloud_puffs * sizeof ( *cloud_puffs ) ) : NULL;

  00ee8	83 bd c4 eb ff
	ff 00		 cmp	 DWORD PTR _number_of_cloud_puffs$5[ebp], 0
  00eef	74 15		 je	 SHORT $LN68@load_3d_te
  00ef1	6b 85 c4 eb ff
	ff 18		 imul	 eax, DWORD PTR _number_of_cloud_puffs$5[ebp], 24
  00ef8	50		 push	 eax
  00ef9	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00efe	89 85 b0 e9 ff
	ff		 mov	 DWORD PTR tv604[ebp], eax
  00f04	eb 0a		 jmp	 SHORT $LN69@load_3d_te
$LN68@load_3d_te:
  00f06	c7 85 b0 e9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv604[ebp], 0
$LN69@load_3d_te:
  00f10	8b 8d b0 e9 ff
	ff		 mov	 ecx, DWORD PTR tv604[ebp]
  00f16	89 8d c0 eb ff
	ff		 mov	 DWORD PTR _cloud_puffs$4[ebp], ecx

; 832  : 
; 833  : 				terrain_cloud_puff_sectors[z][x].number_of_cloud_puffs = number_of_cloud_puffs;

  00f1c	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00f1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  00f25	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00f28	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00f2b	8b 8d c4 eb ff
	ff		 mov	 ecx, DWORD PTR _number_of_cloud_puffs$5[ebp]
  00f31	89 0c c2	 mov	 DWORD PTR [edx+eax*8], ecx

; 834  : 				terrain_cloud_puff_sectors[z][x].cloud_puffs = cloud_puffs;

  00f34	8b 45 f0	 mov	 eax, DWORD PTR _z$[ebp]
  00f37	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A ; terrain_cloud_puff_sectors
  00f3d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00f40	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00f43	8b 8d c0 eb ff
	ff		 mov	 ecx, DWORD PTR _cloud_puffs$4[ebp]
  00f49	89 4c c2 04	 mov	 DWORD PTR [edx+eax*8+4], ecx

; 835  : 
; 836  : 				for ( count = 0; count < number_of_cloud_puffs; count++, cloud_puffs++ )

  00f4d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00f54	eb 18		 jmp	 SHORT $LN31@load_3d_te
$LN29@load_3d_te:
  00f56	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f59	83 c0 01	 add	 eax, 1
  00f5c	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
  00f5f	8b 8d c0 eb ff
	ff		 mov	 ecx, DWORD PTR _cloud_puffs$4[ebp]
  00f65	83 c1 18	 add	 ecx, 24			; 00000018H
  00f68	89 8d c0 eb ff
	ff		 mov	 DWORD PTR _cloud_puffs$4[ebp], ecx
$LN31@load_3d_te:
  00f6e	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f71	3b 85 c4 eb ff
	ff		 cmp	 eax, DWORD PTR _number_of_cloud_puffs$5[ebp]
  00f77	0f 8d a6 02 00
	00		 jge	 $LN30@load_3d_te

; 837  : 				{
; 838  : 					if ( !( count % pack ) )

  00f7d	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00f80	99		 cdq
  00f81	f7 bd c8 eb ff
	ff		 idiv	 DWORD PTR _pack$6[ebp]
  00f87	85 d2		 test	 edx, edx
  00f89	0f 85 35 01 00
	00		 jne	 $LN66@load_3d_te
$LN70@load_3d_te:

; 839  : 					{
; 840  : 						do
; 841  : 						{
; 842  : 							center_x = (x + rand() / (RAND_MAX + 1.0)) * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  00f8f	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR _x$[ebp]
  00f94	f2 0f 11 85 ac
	e9 ff ff	 movsd	 QWORD PTR tv1150[ebp], xmm0
  00f9c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00fa2	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00fa6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40e0000000000000
  00fae	f2 0f 10 8d ac
	e9 ff ff	 movsd	 xmm1, QWORD PTR tv1150[ebp]
  00fb6	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00fba	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@40a0000000000000
  00fc2	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00fc6	f3 0f 11 85 bc
	eb ff ff	 movss	 DWORD PTR _center_x$3[ebp], xmm0

; 843  : 						}
; 844  : 						while ( center_x < terrain_3d_min_map_x || center_x > terrain_3d_max_map_x );

  00fce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_x@@3MA
  00fd6	0f 2f 85 bc eb
	ff ff		 comiss	 xmm0, DWORD PTR _center_x$3[ebp]
  00fdd	77 b0		 ja	 SHORT $LN70@load_3d_te
  00fdf	f3 0f 10 85 bc
	eb ff ff	 movss	 xmm0, DWORD PTR _center_x$3[ebp]
  00fe7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_x@@3MA
  00fee	77 9f		 ja	 SHORT $LN70@load_3d_te
$LN33@load_3d_te:

; 845  : 						do
; 846  : 						{
; 847  : 							center_z = (z + rand() / (RAND_MAX + 1.0)) * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  00ff0	f2 0f 2a 45 f0	 cvtsi2sd xmm0, DWORD PTR _z$[ebp]
  00ff5	f2 0f 11 85 ac
	e9 ff ff	 movsd	 QWORD PTR tv1152[ebp], xmm0
  00ffd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  01003	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  01007	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40e0000000000000
  0100f	f2 0f 10 8d ac
	e9 ff ff	 movsd	 xmm1, QWORD PTR tv1152[ebp]
  01017	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0101b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@40a0000000000000
  01023	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01027	f3 0f 11 85 b4
	eb ff ff	 movss	 DWORD PTR _center_z$1[ebp], xmm0

; 848  : 						}
; 849  : 						while ( center_z < terrain_3d_min_map_z || center_z > terrain_3d_max_map_z );

  0102f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_z@@3MA
  01037	0f 2f 85 b4 eb
	ff ff		 comiss	 xmm0, DWORD PTR _center_z$1[ebp]
  0103e	77 b0		 ja	 SHORT $LN33@load_3d_te
  01040	f3 0f 10 85 b4
	eb ff ff	 movss	 xmm0, DWORD PTR _center_z$1[ebp]
  01048	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  0104f	77 9f		 ja	 SHORT $LN33@load_3d_te

; 850  : 						center_y = (float)rand() / RAND_MAX * TERRAIN_3D_CLOUD_Y_CENTER_MAX + TERRAIN_3D_CLOUD_Y_CENTER_MIN + get_3d_terrain_elevation ( center_x, center_z );

  01051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  01057	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0105b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  01063	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01067	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@409f400000000000
  0106f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@407f400000000000
  01077	6a 00		 push	 0
  01079	51		 push	 ecx
  0107a	f3 0f 10 8d b4
	eb ff ff	 movss	 xmm1, DWORD PTR _center_z$1[ebp]
  01082	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  01087	51		 push	 ecx
  01088	f3 0f 10 8d bc
	eb ff ff	 movss	 xmm1, DWORD PTR _center_x$3[ebp]
  01090	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  01095	f2 0f 11 85 ac
	e9 ff ff	 movsd	 QWORD PTR tv1154[ebp], xmm0
  0109d	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  010a2	dd 9d a4 e9 ff
	ff		 fstp	 QWORD PTR tv1129[ebp]
  010a8	f2 0f 10 85 ac
	e9 ff ff	 movsd	 xmm0, QWORD PTR tv1154[ebp]
  010b0	f2 0f 58 85 a4
	e9 ff ff	 addsd	 xmm0, QWORD PTR tv1129[ebp]
  010b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010bc	f3 0f 11 85 b8
	eb ff ff	 movss	 DWORD PTR _center_y$2[ebp], xmm0
$LN66@load_3d_te:

; 851  : 					}
; 852  : 
; 853  : 					cloud_puffs->x = center_x + ((float)rand() / RAND_MAX - 0.5) * 100.0;

  010c4	f3 0f 5a 85 bc
	eb ff ff	 cvtss2sd xmm0, DWORD PTR _center_x$3[ebp]
  010cc	f2 0f 11 85 ac
	e9 ff ff	 movsd	 QWORD PTR tv1156[ebp], xmm0
  010d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  010da	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  010de	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  010e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  010ea	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  010f2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  010fa	f2 0f 10 8d ac
	e9 ff ff	 movsd	 xmm1, QWORD PTR tv1156[ebp]
  01102	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01106	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0110a	8b 85 c0 eb ff
	ff		 mov	 eax, DWORD PTR _cloud_puffs$4[ebp]
  01110	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 854  : 					cloud_puffs->y = center_y + ((float)rand() / RAND_MAX - 0.5) * 100.0;

  01114	f3 0f 5a 85 b8
	eb ff ff	 cvtss2sd xmm0, DWORD PTR _center_y$2[ebp]
  0111c	f2 0f 11 85 ac
	e9 ff ff	 movsd	 QWORD PTR tv1158[ebp], xmm0
  01124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0112a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0112e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  01136	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0113a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01142	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  0114a	f2 0f 10 8d ac
	e9 ff ff	 movsd	 xmm1, QWORD PTR tv1158[ebp]
  01152	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01156	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0115a	8b 85 c0 eb ff
	ff		 mov	 eax, DWORD PTR _cloud_puffs$4[ebp]
  01160	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 855  : 					cloud_puffs->z = center_z + ((float)rand() / RAND_MAX - 0.5) * TERRAIN_3D_CLOUD_Y_DIFF;

  01165	f3 0f 5a 85 b4
	eb ff ff	 cvtss2sd xmm0, DWORD PTR _center_z$1[ebp]
  0116d	f2 0f 11 85 ac
	e9 ff ff	 movsd	 QWORD PTR tv1160[ebp], xmm0
  01175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0117b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0117f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  01187	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0118b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01193	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  0119b	f2 0f 10 8d ac
	e9 ff ff	 movsd	 xmm1, QWORD PTR tv1160[ebp]
  011a3	f2 0f 58 c8	 addsd	 xmm1, xmm0
  011a7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  011ab	8b 85 c0 eb ff
	ff		 mov	 eax, DWORD PTR _cloud_puffs$4[ebp]
  011b1	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 856  : 					cloud_puffs->heading = (float)rand() / RAND_MAX * PI2;

  011b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  011bc	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  011c0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  011c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40c90fdb
  011d0	8b 85 c0 eb ff
	ff		 mov	 eax, DWORD PTR _cloud_puffs$4[ebp]
  011d6	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 857  : 					cloud_puffs->scale = (float)rand() / RAND_MAX * 20.0;

  011db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  011e1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  011e5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  011ed	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  011f1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4034000000000000
  011f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011fd	8b 85 c0 eb ff
	ff		 mov	 eax, DWORD PTR _cloud_puffs$4[ebp]
  01203	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 858  : 					cloud_puffs->colour = rand() % number_of_cloud_puffs_colours;

  01208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0120e	99		 cdq
  0120f	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?number_of_cloud_puffs_colours@@3HA ; number_of_cloud_puffs_colours
  01215	8b 85 c0 eb ff
	ff		 mov	 eax, DWORD PTR _cloud_puffs$4[ebp]
  0121b	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 859  : 				}

  0121e	e9 33 fd ff ff	 jmp	 $LN29@load_3d_te
$LN30@load_3d_te:

; 860  : 			}

  01223	e9 6a fc ff ff	 jmp	 $LN26@load_3d_te
$LN27@load_3d_te:

; 861  : 		}

  01228	e9 2a fc ff ff	 jmp	 $LN23@load_3d_te
$LN24@load_3d_te:

; 862  : 		terrain_3d_cloud_puff_colours = ( real_colour* ) safe_malloc ( number_of_cloud_puffs_colours * sizeof ( *terrain_3d_cloud_puff_colours ) );

  0122d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_cloud_puffs_colours@@3HA ; number_of_cloud_puffs_colours
  01232	c1 e0 02	 shl	 eax, 2
  01235	50		 push	 eax
  01236	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0123b	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A, eax ; terrain_3d_cloud_puff_colours

; 863  : 	}
; 864  : 	else

  01240	eb 14		 jmp	 SHORT $LN64@load_3d_te
$LN63@load_3d_te:

; 865  : 	{
; 866  : 		terrain_cloud_puff_sectors = NULL;

  01242	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_cloud_puff_sectors@@3PAPAUTERRAIN_3D_CLOUD_PUFF_SECTOR@@A, 0 ; terrain_cloud_puff_sectors

; 867  : 		terrain_3d_cloud_puff_colours = NULL;

  0124c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_3d_cloud_puff_colours@@3PAUREAL_COLOUR@@A, 0 ; terrain_3d_cloud_puff_colours
$LN64@load_3d_te:

; 868  : 	}
; 869  : 
; 870  : 	return ( TRUE );

  01256	b8 01 00 00 00	 mov	 eax, 1
$LN1@load_3d_te:

; 871  : }

  0125b	5f		 pop	 edi
  0125c	5e		 pop	 esi
  0125d	5b		 pop	 ebx
  0125e	8b e5		 mov	 esp, ebp
  01260	5d		 pop	 ebp
  01261	c2 04 00	 ret	 4
?load_3d_terrain@@YGHPBD@Z ENDP				; load_3d_terrain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?set_3d_terrain_detail_blend_factors@@YGXXZ
_TEXT	SEGMENT
?set_3d_terrain_detail_blend_factors@@YGXXZ PROC	; set_3d_terrain_detail_blend_factors, COMDAT

; 1058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1059 : 
; 1060 : 	terrain_3d_alpha_start = d3d_fog_start * terrain_3d_alpha_fog_factor;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?d3d_fog_start@@3MA
  00011	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_alpha_fog_factor@@3MA
  00019	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_alpha_start@@3MA, xmm0

; 1061 : 
; 1062 : 	terrain_3d_alpha_end = d3d_fog_end * terrain_3d_alpha_fog_factor;

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?d3d_fog_end@@3MA
  00029	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_alpha_fog_factor@@3MA
  00031	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_alpha_end@@3MA, xmm0

; 1063 : 
; 1064 : 	terrain_3d_alpha_distance = terrain_3d_alpha_end - terrain_3d_alpha_start;

  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_alpha_end@@3MA
  00041	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_3d_alpha_start@@3MA
  00049	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_alpha_distance@@3MA, xmm0

; 1065 : 
; 1066 : 	terrain_3d_alpha_constant = terrain_3d_alpha_distance - terrain_3d_alpha_start;

  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_alpha_distance@@3MA
  00059	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?terrain_3d_alpha_start@@3MA
  00061	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_alpha_constant@@3MA, xmm0

; 1067 : 
; 1068 : 	terrain_3d_alpha_factor = ( ( 255.0 / terrain_3d_alpha_distance ) * 1.0 );

  00069	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?terrain_3d_alpha_distance@@3MA
  00071	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@406fe00000000000
  00079	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0007d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00085	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00089	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_alpha_factor@@3MA, xmm0

; 1069 : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?set_3d_terrain_detail_blend_factors@@YGXXZ ENDP	; set_3d_terrain_detail_blend_factors
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?set_3d_terrain_detail_blend_parameters@@YGXM@Z
_TEXT	SEGMENT
_fog_factor$ = 8					; size = 4
?set_3d_terrain_detail_blend_parameters@@YGXM@Z PROC	; set_3d_terrain_detail_blend_parameters, COMDAT

; 1048 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1049 : 
; 1050 : 	terrain_3d_alpha_fog_factor = fog_factor;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fog_factor$[ebp]
  0000e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?terrain_3d_alpha_fog_factor@@3MA, xmm0

; 1051 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_3d_terrain_detail_blend_parameters@@YGXM@Z ENDP	; set_3d_terrain_detail_blend_parameters
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrdata.c
;	COMDAT ?initialise_3d_terrain@@YGXXZ
_TEXT	SEGMENT
?initialise_3d_terrain@@YGXXZ PROC			; initialise_3d_terrain, COMDAT

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1077 : 
; 1078 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Points in terrain: %d", MT_INT, &final_total_number_of_terrain_points );

  00009	68 00 00 00 00	 push	 OFFSET ?final_total_number_of_terrain_points@@3HA ; final_total_number_of_terrain_points
  0000e	6a 01		 push	 1
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HPLMODEG@Points?5in?5terrain?3?5?$CFd@
  00015	6a 01		 push	 1
  00017	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1079 : 
; 1080 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Points transformed: %d", MT_INT, &final_total_number_of_terrain_points_transformed );

  0001c	68 00 00 00 00	 push	 OFFSET ?final_total_number_of_terrain_points_transformed@@3HA ; final_total_number_of_terrain_points_transformed
  00021	6a 01		 push	 1
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EEENEKCK@Points?5transformed?3?5?$CFd@
  00028	6a 01		 push	 1
  0002a	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1081 : 
; 1082 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Faces considered: %d", MT_INT, &final_terrain_3d_faces_considered );

  0002f	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_faces_considered@@3HA ; final_terrain_3d_faces_considered
  00034	6a 01		 push	 1
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GDOCGBB@Faces?5considered?3?5?$CFd@
  0003b	6a 01		 push	 1
  0003d	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1083 : 
; 1084 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Faces outcoded: %d", MT_INT, &final_terrain_3d_faces_outcoded );

  00042	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_faces_outcoded@@3HA ; final_terrain_3d_faces_outcoded
  00047	6a 01		 push	 1
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EMPNLHAK@Faces?5outcoded?3?5?$CFd@
  0004e	6a 01		 push	 1
  00050	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1085 : 
; 1086 : 	debug_colour_watch ( DEBUG_COLOUR_RED, "Faces constructed: %d", MT_INT, &final_terrain_3d_faces_constructed );

  00055	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_faces_constructed@@3HA ; final_terrain_3d_faces_constructed
  0005a	6a 01		 push	 1
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GPPCEOFH@Faces?5constructed?3?5?$CFd@
  00061	6a 04		 push	 4
  00063	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1087 : 
; 1088 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Faces rejected: %d", MT_INT, &final_terrain_3d_faces_rejected );

  00068	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_faces_rejected@@3HA ; final_terrain_3d_faces_rejected
  0006d	6a 01		 push	 1
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NINPMBOH@Faces?5rejected?3?5?$CFd@
  00074	6a 01		 push	 1
  00076	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1089 : 
; 1090 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Faces hither clipped: %d", MT_INT, &final_terrain_3d_faces_hither_clipped );

  0007b	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_faces_hither_clipped@@3HA ; final_terrain_3d_faces_hither_clipped
  00080	6a 01		 push	 1
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NMFACPJ@Faces?5hither?5clipped?3?5?$CFd@
  00087	6a 01		 push	 1
  00089	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1091 : 
; 1092 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Faces screen clipped: %d", MT_INT, &final_terrain_3d_faces_screen_clipped );

  0008e	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_faces_screen_clipped@@3HA ; final_terrain_3d_faces_screen_clipped
  00093	6a 01		 push	 1
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EEMMDPEA@Faces?5screen?5clipped?3?5?$CFd@
  0009a	6a 01		 push	 1
  0009c	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1093 : 
; 1094 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Sectors inserted: %d", MT_INT, &final_terrain_3d_sectors_inserted );

  000a1	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_sectors_inserted@@3HA ; final_terrain_3d_sectors_inserted
  000a6	6a 01		 push	 1
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JDILEJBP@Sectors?5inserted?3?5?$CFd@
  000ad	6a 01		 push	 1
  000af	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1095 : 
; 1096 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Sectors totally visible: %d", MT_INT, &final_terrain_3d_sectors_totally_visible );

  000b4	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_sectors_totally_visible@@3HA ; final_terrain_3d_sectors_totally_visible
  000b9	6a 01		 push	 1
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JABAEDPM@Sectors?5totally?5visible?3?5?$CFd@
  000c0	6a 01		 push	 1
  000c2	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1097 : 
; 1098 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Sectors trivially culled: %d", MT_INT, &final_terrain_3d_sectors_trivially_culled );

  000c7	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_sectors_trivially_culled@@3HA ; final_terrain_3d_sectors_trivially_culled
  000cc	6a 01		 push	 1
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GCHKGONB@Sectors?5trivially?5culled?3?5?$CFd@
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1099 : 
; 1100 : 	debug_colour_watch ( DEBUG_COLOUR_BLUE, "Sectors complex culled: %d", MT_INT, &final_terrain_3d_sectors_complex_culled );

  000da	68 00 00 00 00	 push	 OFFSET ?final_terrain_3d_sectors_complex_culled@@3HA ; final_terrain_3d_sectors_complex_culled
  000df	6a 01		 push	 1
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GLIFIJOD@Sectors?5complex?5culled?3?5?$CFd@
  000e6	6a 01		 push	 1
  000e8	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 1101 : 
; 1102 : 	initialise_3d_terrain_colour_conversion_table ();

  000ed	e8 00 00 00 00	 call	 ?initialise_3d_terrain_colour_conversion_table@@YGXXZ ; initialise_3d_terrain_colour_conversion_table

; 1103 : 
; 1104 : 	initialise_3d_terrain_types ();

  000f2	e8 00 00 00 00	 call	 ?initialise_3d_terrain_types@@YGXXZ ; initialise_3d_terrain_types

; 1105 : 
; 1106 : 	initialise_3d_terrain_normals ();

  000f7	e8 00 00 00 00	 call	 ?initialise_3d_terrain_normals@@YGXXZ ; initialise_3d_terrain_normals

; 1107 : 
; 1108 : 	//
; 1109 : 	// Set the terrain texture filtering states
; 1110 : 	//
; 1111 : 
; 1112 : 	//if ( d3d_trilinear_filtering )
; 1113 : 	{
; 1114 : 		terrain_texture_mag_filter = D3DTFG_LINEAR;

  000fc	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?terrain_texture_mag_filter@@3HA, 2 ; terrain_texture_mag_filter

; 1115 : 		terrain_texture_min_filter = D3DTFN_LINEAR;

  00106	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?terrain_texture_min_filter@@3HA, 2 ; terrain_texture_min_filter

; 1116 : 
; 1117 : 		//VJ 050619 if anisotropic is on set higher filter for blending
; 1118 : 		if( global_anisotropic )

  00110	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?global_anisotropic@@3HA, 0 ; global_anisotropic
  00117	74 0c		 je	 SHORT $LN2@initialise

; 1119 : 			{ terrain_texture_mip_filter = D3DTFP_LINEAR; }

  00119	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?terrain_texture_mip_filter@@3HA, 3 ; terrain_texture_mip_filter

; 1120 : 		else

  00123	eb 0a		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 1121 : 			{ terrain_texture_mip_filter = D3DTFP_POINT; }

  00125	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?terrain_texture_mip_filter@@3HA, 2 ; terrain_texture_mip_filter
$LN3@initialise:

; 1122 : //		terrain_texture_mip_filter = D3DTFP_POINT;
; 1123 : 	}
; 1124 : 	/*else
; 1125 : 	{
; 1126 : 
; 1127 : 		terrain_texture_mag_filter = D3DTFG_LINEAR;
; 1128 : 		terrain_texture_min_filter = D3DTFN_LINEAR;
; 1129 : 
; 1130 : 		//VJ 050619 if anisotropic is on set higher filter for blending
; 1131 : 		if( global_anisotropic )
; 1132 : 			{ terrain_texture_mip_filter = D3DTFP_LINEAR; }
; 1133 : 		else
; 1134 : 			{ terrain_texture_mip_filter = D3DTFP_POINT; }
; 1135 : //		terrain_texture_mip_filter = D3DTFP_POINT;
; 1136 : 	}*/
; 1137 : 
; 1138 : 	//
; 1139 : 	// Set the terrain initialised flag to FALSE - as no terrain is loaded.
; 1140 : 	//
; 1141 : 
; 1142 : 	terrain_initialised = FALSE;

  0012f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?terrain_initialised@@3HA, 0

; 1143 : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
?initialise_3d_terrain@@YGXXZ ENDP			; initialise_3d_terrain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2270 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2271 :         int _Result;
; 2272 :         va_list _ArgList;
; 2273 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2274 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2275 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2276 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2277 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2175 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2176 :         return __stdio_common_vsscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsscanf
  0002d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2177 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2178 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2179 :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
