; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\common\co_grstab.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?eo_ground_stabilisation_value_heading@@3MA	; eo_ground_stabilisation_value_heading
PUBLIC	?eo_ground_stabilisation_value_pitch@@3MA	; eo_ground_stabilisation_value_pitch
PUBLIC	?pitch@@3MA					; pitch
PUBLIC	?roll@@3MA					; roll
_BSS	SEGMENT
?eo_ground_stabilisation_value_heading@@3MA DD 01H DUP (?) ; eo_ground_stabilisation_value_heading
?eo_ground_stabilisation_value_pitch@@3MA DD 01H DUP (?) ; eo_ground_stabilisation_value_pitch
?pitch@@3MA DD	01H DUP (?)				; pitch
?roll@@3MA DD	01H DUP (?)				; roll
_BSS	ENDS
PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?toggle_ground_stabilisation@@YGXXZ		; toggle_ground_stabilisation
PUBLIC	?handle_ground_stabilisation@@YGXXZ		; handle_ground_stabilisation
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??toggle_ground_stabilisation@@YGXXZ@4JA ; `toggle_ground_stabilisation'::`1'::__LINE__Var
PUBLIC	??_C@_0FB@PKJAOJBP@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??handle_ground_stabilisation@@YGXXZ@4JA ; `handle_ground_stabilisation'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f32599ed7c6fbd2
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40490fdb
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__real@c0490fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?command_line_ground_stabilisation_available@@3HA:DWORD ; command_line_ground_stabilisation_available
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA:BYTE ; fn_get_local_entity_attitude_matrix
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_min_azimuth@@3MA:DWORD			; eo_min_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_max_elevation@@3MA:DWORD			; eo_max_elevation
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0490fdb
CONST	SEGMENT
__real@c0490fdb DD 0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f32599ed7c6fbd2
CONST	SEGMENT
__real@3f32599ed7c6fbd2 DQ 03f32599ed7c6fbd2r	; 0.00028
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??handle_ground_stabilisation@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??handle_ground_stabilisation@@YGXXZ@4JA DD 071H ; `handle_ground_stabilisation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FB@PKJAOJBP@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FB@PKJAOJBP@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\common\co_'
	DB	'grstab.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??toggle_ground_stabilisation@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??toggle_ground_stabilisation@@YGXXZ@4JA DD 056H ; `toggle_ground_stabilisation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_grstab.c
;	COMDAT ?handle_ground_stabilisation@@YGXXZ
_TEXT	SEGMENT
tv374 = -172						; size = 4
tv405 = -168						; size = 4
tv368 = -164						; size = 4
tv403 = -160						; size = 4
tv361 = -156						; size = 4
tv401 = -152						; size = 4
tv381 = -148						; size = 4
tv355 = -148						; size = 4
tv79 = -148						; size = 4
tv407 = -144						; size = 4
tv399 = -144						; size = 4
tv334 = -144						; size = 4
tv326 = -144						; size = 4
tv307 = -144						; size = 4
tv288 = -144						; size = 4
tv93 = -144						; size = 4
tv71 = -144						; size = 4
_vertical_pan_offset$1 = -76				; size = 4
_horizontal_pan_offset$2 = -72				; size = 4
_correctionx$3 = -68					; size = 4
_angley$4 = -64						; size = 4
_anglex$5 = -60						; size = 4
_heading$6 = -56					; size = 4
_delta_roll$7 = -52					; size = 4
_delta_pitch$8 = -48					; size = 4
_accel$9 = -44						; size = 4
_attitude$10 = -40					; size = 36
_velocity$11 = -4					; size = 4
?handle_ground_stabilisation@@YGXXZ PROC		; handle_ground_stabilisation, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 114  : 
; 115  : 	// loke 030322
; 116  : 	// handle the ground stabilisation
; 117  : 	// improved stabilization thealx 130218
; 118  : 
; 119  : 	if (eo_ground_stabilised)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  00013	0f 84 e0 05 00
	00		 je	 $LN2@handle_gro

; 120  : 	{
; 121  : 		vec3d
; 122  : 			*velocity;
; 123  : 
; 124  : 		matrix3x3
; 125  : 			attitude;
; 126  : 				
; 127  : 		float
; 128  : 			accel,
; 129  : 			delta_pitch,
; 130  : 			delta_roll,
; 131  : 			heading,
; 132  : 			anglex,
; 133  : 			angley,
; 134  : 			correctionx;
; 135  : 				
; 136  : 		float
; 137  : 			horizontal_pan_offset,
; 138  : 			vertical_pan_offset;
; 139  : 						
; 140  : 		velocity = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_MOTION_VECTOR);

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00020	74 0f		 je	 SHORT $LN15@handle_gro
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  0002f	eb 24		 jmp	 SHORT $LN16@handle_gro
$LN15@handle_gro:
  00031	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??handle_ground_stabilisation@@YGXXZ@4JA
  00037	83 c2 1b	 add	 edx, 27			; 0000001bH
  0003a	52		 push	 edx
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@PKJAOJBP@c?3?2users?2nhv90?2projects?2eech?2ap@
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004b	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN16@handle_gro:
  00055	b9 01 00 00 00	 mov	 ecx, 1
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0c		 je	 SHORT $LN17@handle_gro
  0005e	c7 85 6c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv79[ebp], 6
  00068	eb 24		 jmp	 SHORT $LN18@handle_gro
$LN17@handle_gro:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??handle_ground_stabilisation@@YGXXZ@4JA
  00070	83 c2 1b	 add	 edx, 27			; 0000001bH
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@PKJAOJBP@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN18@handle_gro:
  0008e	6a 06		 push	 6
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	51		 push	 ecx
  00097	6b 95 70 ff ff
	ff 60		 imul	 edx, DWORD PTR tv71[ebp], 96
  0009e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  000a4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000ab	ff d1		 call	 ecx
  000ad	89 45 fc	 mov	 DWORD PTR _velocity$11[ebp], eax

; 141  : 		accel = velocity->y * get_entity_movement_delta_time();

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _velocity$11[ebp]
  000b3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000b8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000c0	f3 0f 11 45 d4	 movss	 DWORD PTR _accel$9[ebp], xmm0

; 142  : 
; 143  : 
; 144  : 		get_local_entity_attitude_matrix (get_gunship_entity (), attitude);

  000c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000cc	74 0f		 je	 SHORT $LN19@handle_gro
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv93[ebp], ecx
  000db	eb 24		 jmp	 SHORT $LN20@handle_gro
$LN19@handle_gro:
  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??handle_ground_stabilisation@@YGXXZ@4JA
  000e3	83 c2 1f	 add	 edx, 31			; 0000001fH
  000e6	52		 push	 edx
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@PKJAOJBP@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f7	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv93[ebp], 0
$LN20@handle_gro:
  00101	8d 4d d8	 lea	 ecx, DWORD PTR _attitude$10[ebp]
  00104	51		 push	 ecx
  00105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0010b	52		 push	 edx
  0010c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv93[ebp]
  00112	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00119	ff d1		 call	 ecx

; 145  : 
; 146  : 		heading = atan2 (attitude [2][0], attitude [2][2]);

  0011b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00120	d1 e0		 shl	 eax, 1
  00122	8d 4c 05 d8	 lea	 ecx, DWORD PTR _attitude$10[ebp+eax]
  00126	ba 04 00 00 00	 mov	 edx, 4
  0012b	d1 e2		 shl	 edx, 1
  0012d	51		 push	 ecx
  0012e	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013d	d1 e0		 shl	 eax, 1
  0013f	8d 4c 05 d8	 lea	 ecx, DWORD PTR _attitude$10[ebp+eax]
  00143	ba 04 00 00 00	 mov	 edx, 4
  00148	6b c2 00	 imul	 eax, edx, 0
  0014b	51		 push	 ecx
  0014c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0015b	d9 5d c8	 fstp	 DWORD PTR _heading$6[ebp]

; 147  : 
; 148  : 		delta_pitch = pitch - asin (attitude [2][1]);

  0015e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00163	d1 e0		 shl	 eax, 1
  00165	8d 4c 05 d8	 lea	 ecx, DWORD PTR _attitude$10[ebp+eax]
  00169	ba 04 00 00 00	 mov	 edx, 4
  0016e	c1 e2 00	 shl	 edx, 0
  00171	51		 push	 ecx
  00172	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00181	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv288[ebp]
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pitch@@3MA
  0018f	f3 0f 5c 85 70
	ff ff ff	 subss	 xmm0, DWORD PTR tv288[ebp]
  00197	f3 0f 11 45 d0	 movss	 DWORD PTR _delta_pitch$8[ebp], xmm0

; 149  : 		pitch = asin (attitude [2][1]);

  0019c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001a1	d1 e0		 shl	 eax, 1
  001a3	8d 4c 05 d8	 lea	 ecx, DWORD PTR _attitude$10[ebp+eax]
  001a7	ba 04 00 00 00	 mov	 edx, 4
  001ac	c1 e2 00	 shl	 edx, 0
  001af	51		 push	 ecx
  001b0	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  001bf	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?pitch@@3MA	; pitch

; 150  : 
; 151  : 		delta_roll = roll - atan2 (-attitude [0][1], attitude [1][1]);

  001c5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ca	c1 e0 00	 shl	 eax, 0
  001cd	8d 4c 05 d8	 lea	 ecx, DWORD PTR _attitude$10[ebp+eax]
  001d1	ba 04 00 00 00	 mov	 edx, 4
  001d6	c1 e2 00	 shl	 edx, 0
  001d9	51		 push	 ecx
  001da	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e9	6b c8 00	 imul	 ecx, eax, 0
  001ec	8d 54 0d d8	 lea	 edx, DWORD PTR _attitude$10[ebp+ecx]
  001f0	b8 04 00 00 00	 mov	 eax, 4
  001f5	c1 e0 00	 shl	 eax, 0
  001f8	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  001fd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00204	51		 push	 ecx
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0020f	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv307[ebp]
  00215	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?roll@@3MA
  0021d	f3 0f 5c 85 70
	ff ff ff	 subss	 xmm0, DWORD PTR tv307[ebp]
  00225	f3 0f 11 45 cc	 movss	 DWORD PTR _delta_roll$7[ebp], xmm0

; 152  : 		roll = atan2 (-attitude [0][1], attitude [1][1]);

  0022a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0022f	c1 e0 00	 shl	 eax, 0
  00232	8d 4c 05 d8	 lea	 ecx, DWORD PTR _attitude$10[ebp+eax]
  00236	ba 04 00 00 00	 mov	 edx, 4
  0023b	c1 e2 00	 shl	 edx, 0
  0023e	51		 push	 ecx
  0023f	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00249	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0024e	6b c8 00	 imul	 ecx, eax, 0
  00251	8d 54 0d d8	 lea	 edx, DWORD PTR _attitude$10[ebp+ecx]
  00255	b8 04 00 00 00	 mov	 eax, 4
  0025a	c1 e0 00	 shl	 eax, 0
  0025d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00262	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00269	51		 push	 ecx
  0026a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026f	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00274	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?roll@@3MA	; roll

; 153  : 
; 154  : 		if (eo_azimuth > (PI / 2))

  0027a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00282	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00289	76 41		 jbe	 SHORT $LN3@handle_gro

; 155  : 		{
; 156  : 			anglex = PI - eo_azimuth;

  0028b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00293	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0029b	f3 0f 11 45 c4	 movss	 DWORD PTR _anglex$5[ebp], xmm0

; 157  : 			correctionx = - cos (anglex);

  002a0	51		 push	 ecx
  002a1	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _anglex$5[ebp]
  002a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ab	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  002b0	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv326[ebp]
  002b6	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv326[ebp]
  002be	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002c5	f3 0f 11 45 bc	 movss	 DWORD PTR _correctionx$3[ebp], xmm0
  002ca	eb 72		 jmp	 SHORT $LN6@handle_gro
$LN3@handle_gro:

; 158  : 		}
; 159  : 		else if (eo_azimuth < (- PI / 2))

  002cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  002d4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  002db	76 41		 jbe	 SHORT $LN5@handle_gro

; 160  : 		{
; 161  : 			anglex = - PI - eo_azimuth;

  002dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0490fdb
  002e5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  002ed	f3 0f 11 45 c4	 movss	 DWORD PTR _anglex$5[ebp], xmm0

; 162  : 			correctionx = - cos (anglex);

  002f2	51		 push	 ecx
  002f3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _anglex$5[ebp]
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00302	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv334[ebp]
  00308	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv334[ebp]
  00310	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00317	f3 0f 11 45 bc	 movss	 DWORD PTR _correctionx$3[ebp], xmm0

; 163  : 		}
; 164  : 		else

  0031c	eb 20		 jmp	 SHORT $LN6@handle_gro
$LN5@handle_gro:

; 165  : 		{
; 166  : 			anglex = eo_azimuth;

  0031e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00326	f3 0f 11 45 c4	 movss	 DWORD PTR _anglex$5[ebp], xmm0

; 167  : 			correctionx = cos (anglex);

  0032b	51		 push	 ecx
  0032c	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _anglex$5[ebp]
  00331	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00336	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0033b	d9 5d bc	 fstp	 DWORD PTR _correctionx$3[ebp]
$LN6@handle_gro:

; 168  : 		}
; 169  : 
; 170  : 		angley = eo_elevation;				

  0033e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00346	f3 0f 11 45 c0	 movss	 DWORD PTR _angley$4[ebp], xmm0

; 171  : 				 
; 172  : 		// GCsDriver start 180 deg. bug workaround
; 173  : 
; 174  : 		// problem :
; 175  : 		// when crossing 180 deg stabilised view switches focus to 109 or 250 deg
; 176  : 		// crossing 0 / 360 deg is fine
; 177  : 
; 178  : 		// solution : ?
; 179  : 		// sth like this should do but what`s the C equivalent ?
; 180  : 		// horizontal_pan_offset = mod((eo_ground_stabilisation_value_heading - heading), 2*pi);
; 181  : 
; 182  : 		// workaround :
; 183  : 		// if we cross border we have to invert the rad
; 184  : 		// this gives just a little "glitch" when crossing 180 AND 0/360 deg
; 185  : 		// glitch width depends on turn rate (and distance centered point to 180/0 line)
; 186  : 
; 187  : 		if ((eo_ground_stabilisation_value_heading > 0)&&(heading < 0))

  0034b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA
  00353	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0035a	76 35		 jbe	 SHORT $LN7@handle_gro
  0035c	0f 57 c0	 xorps	 xmm0, xmm0
  0035f	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _heading$6[ebp]
  00363	76 2c		 jbe	 SHORT $LN7@handle_gro

; 188  : 		{
; 189  : 			eo_ground_stabilisation_value_heading *= -1;

  00365	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA
  0036d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  00375	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA, xmm0

; 190  : 			anglex *= -1;

  0037d	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _anglex$5[ebp]
  00382	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  0038a	f3 0f 11 45 c4	 movss	 DWORD PTR _anglex$5[ebp], xmm0
  0038f	eb 44		 jmp	 SHORT $LN9@handle_gro
$LN7@handle_gro:

; 191  :  		}
; 192  : 		else if ((eo_ground_stabilisation_value_heading < 0)&&(heading > 0))

  00391	0f 57 c0	 xorps	 xmm0, xmm0
  00394	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA
  0039b	76 38		 jbe	 SHORT $LN9@handle_gro
  0039d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _heading$6[ebp]
  003a2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  003a9	76 2a		 jbe	 SHORT $LN9@handle_gro

; 193  : 		{
; 194  : 			eo_ground_stabilisation_value_heading *= -1;

  003ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA
  003b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  003bb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA, xmm0

; 195  : 			anglex *= -1;

  003c3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _anglex$5[ebp]
  003c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  003d0	f3 0f 11 45 c4	 movss	 DWORD PTR _anglex$5[ebp], xmm0
$LN9@handle_gro:

; 196  : 		}
; 197  : 				
; 198  : 		// GCsDriver end 180 deg. bug workaround
; 199  : 					
; 200  : 		horizontal_pan_offset = (eo_ground_stabilisation_value_heading - heading) * cos(angley) + delta_roll * sin(angley) * correctionx + sin(anglex) * sin(delta_pitch) * eo_elevation;

  003d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA
  003dd	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _heading$6[ebp]
  003e2	51		 push	 ecx
  003e3	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _angley$4[ebp]
  003e8	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003ed	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv399[ebp], xmm0
  003f5	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  003fa	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR tv355[ebp]
  00400	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv399[ebp]
  00408	f3 0f 59 85 6c
	ff ff ff	 mulss	 xmm0, DWORD PTR tv355[ebp]
  00410	51		 push	 ecx
  00411	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _angley$4[ebp]
  00416	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0041b	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR tv401[ebp], xmm0
  00423	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00428	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR tv361[ebp]
  0042e	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR tv361[ebp]
  00436	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _delta_roll$7[ebp]
  0043b	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _correctionx$3[ebp]
  00440	f3 0f 10 8d 68
	ff ff ff	 movss	 xmm1, DWORD PTR tv401[ebp]
  00448	f3 0f 58 c8	 addss	 xmm1, xmm0
  0044c	51		 push	 ecx
  0044d	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _anglex$5[ebp]
  00452	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00457	f3 0f 11 8d 60
	ff ff ff	 movss	 DWORD PTR tv403[ebp], xmm1
  0045f	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00464	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv368[ebp]
  0046a	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR tv368[ebp]
  00472	51		 push	 ecx
  00473	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _delta_pitch$8[ebp]
  00478	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0047d	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR tv405[ebp], xmm0
  00485	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0048a	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR tv374[ebp]
  00490	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv405[ebp]
  00498	f3 0f 59 85 54
	ff ff ff	 mulss	 xmm0, DWORD PTR tv374[ebp]
  004a0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  004a8	f3 0f 10 8d 60
	ff ff ff	 movss	 xmm1, DWORD PTR tv403[ebp]
  004b0	f3 0f 58 c8	 addss	 xmm1, xmm0
  004b4	f3 0f 11 4d b8	 movss	 DWORD PTR _horizontal_pan_offset$2[ebp], xmm1

; 201  : 		
; 202  : 		vertical_pan_offset = (eo_ground_stabilisation_value_pitch - pitch) * correctionx - delta_roll * sin(anglex) - 0.00028 * accel;

  004b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_ground_stabilisation_value_pitch@@3MA
  004c1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?pitch@@3MA
  004c9	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _correctionx$3[ebp]
  004ce	51		 push	 ecx
  004cf	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _anglex$5[ebp]
  004d4	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  004d9	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv407[ebp], xmm0
  004e1	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  004e6	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR tv381[ebp]
  004ec	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR tv381[ebp]
  004f4	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _delta_roll$7[ebp]
  004f9	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR tv407[ebp]
  00501	f3 0f 5c c8	 subss	 xmm1, xmm0
  00505	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00509	f3 0f 5a 4d d4	 cvtss2sd xmm1, DWORD PTR _accel$9[ebp]
  0050e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f32599ed7c6fbd2
  00516	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0051a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0051e	f3 0f 11 45 b4	 movss	 DWORD PTR _vertical_pan_offset$1[ebp], xmm0

; 203  : 
; 204  : 		eo_azimuth +=  horizontal_pan_offset;

  00523	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0052b	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _horizontal_pan_offset$2[ebp]
  00530	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_azimuth@@3MA, xmm0

; 205  : 
; 206  : 		if (eo_azimuth > 0)

  00538	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00540	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00547	76 1d		 jbe	 SHORT $LN10@handle_gro

; 207  : 		{
; 208  : 			eo_azimuth = min (eo_azimuth, eo_max_azimuth);

  00549	68 00 00 00 00	 push	 OFFSET ?eo_max_azimuth@@3MA ; eo_max_azimuth
  0054e	68 00 00 00 00	 push	 OFFSET ?eo_azimuth@@3MA	; eo_azimuth
  00553	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00558	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0055c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_azimuth@@3MA, xmm0

; 209  : 		}
; 210  : 		else

  00564	eb 1b		 jmp	 SHORT $LN11@handle_gro
$LN10@handle_gro:

; 211  : 		{
; 212  : 			eo_azimuth = max (eo_azimuth, eo_min_azimuth);

  00566	68 00 00 00 00	 push	 OFFSET ?eo_min_azimuth@@3MA ; eo_min_azimuth
  0056b	68 00 00 00 00	 push	 OFFSET ?eo_azimuth@@3MA	; eo_azimuth
  00570	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00575	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00579	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_azimuth@@3MA, xmm0
$LN11@handle_gro:

; 213  : 		}
; 214  : 				
; 215  : 		eo_elevation += vertical_pan_offset;

  00581	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00589	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _vertical_pan_offset$1[ebp]
  0058e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_elevation@@3MA, xmm0

; 216  : 
; 217  : 		if (vertical_pan_offset > 0)

  00596	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _vertical_pan_offset$1[ebp]
  0059b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  005a2	76 1d		 jbe	 SHORT $LN12@handle_gro

; 218  : 		{
; 219  : 			eo_elevation = min (eo_elevation, eo_max_elevation);

  005a4	68 00 00 00 00	 push	 OFFSET ?eo_max_elevation@@3MA ; eo_max_elevation
  005a9	68 00 00 00 00	 push	 OFFSET ?eo_elevation@@3MA ; eo_elevation
  005ae	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  005b3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005b7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_elevation@@3MA, xmm0

; 220  : 		}
; 221  : 		else

  005bf	eb 1b		 jmp	 SHORT $LN13@handle_gro
$LN12@handle_gro:

; 222  : 		{
; 223  : 			eo_elevation = max (eo_elevation, eo_min_elevation);

  005c1	68 00 00 00 00	 push	 OFFSET ?eo_min_elevation@@3MA ; eo_min_elevation
  005c6	68 00 00 00 00	 push	 OFFSET ?eo_elevation@@3MA ; eo_elevation
  005cb	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  005d0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005d4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_elevation@@3MA, xmm0
$LN13@handle_gro:

; 224  : 		}
; 225  : 
; 226  : 		eo_ground_stabilisation_value_heading = heading;

  005dc	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _heading$6[ebp]
  005e1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA, xmm0

; 227  : 
; 228  : 		eo_ground_stabilisation_value_pitch = pitch;

  005e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pitch@@3MA
  005f1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?eo_ground_stabilisation_value_pitch@@3MA, xmm0
$LN2@handle_gro:

; 229  : 	}
; 230  : }

  005f9	5f		 pop	 edi
  005fa	5e		 pop	 esi
  005fb	5b		 pop	 ebx
  005fc	8b e5		 mov	 esp, ebp
  005fe	5d		 pop	 ebp
  005ff	c3		 ret	 0
?handle_ground_stabilisation@@YGXXZ ENDP		; handle_ground_stabilisation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_grstab.c
;	COMDAT ?toggle_ground_stabilisation@@YGXXZ
_TEXT	SEGMENT
tv72 = -104						; size = 4
_attitude$1 = -36					; size = 36
?toggle_ground_stabilisation@@YGXXZ PROC		; toggle_ground_stabilisation, COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	if (command_line_ground_stabilisation_available)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_ground_stabilisation_available@@3HA, 0 ; command_line_ground_stabilisation_available
  00010	0f 84 de 00 00
	00		 je	 $LN4@toggle_gro

; 88   : 	{
; 89   : 		if (eo_ground_stabilised)

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  0001d	74 0f		 je	 SHORT $LN3@toggle_gro

; 90   : 		{
; 91   : 			eo_ground_stabilised = 0;

  0001f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised

; 92   : 		}
; 93   : 		else

  00029	e9 c6 00 00 00	 jmp	 $LN4@toggle_gro
$LN3@toggle_gro:

; 94   : 		{
; 95   : 			matrix3x3
; 96   : 				attitude;
; 97   : 
; 98   : 			eo_ground_stabilised = 1;

  0002e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?eo_ground_stabilised@@3HA, 1 ; eo_ground_stabilised

; 99   : 
; 100  : 			get_local_entity_attitude_matrix (get_gunship_entity (), attitude);

  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0003f	74 0c		 je	 SHORT $LN6@toggle_gro
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	89 4d 98	 mov	 DWORD PTR tv72[ebp], ecx
  0004b	eb 21		 jmp	 SHORT $LN7@toggle_gro
$LN6@toggle_gro:
  0004d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??toggle_ground_stabilisation@@YGXXZ@4JA
  00053	83 c2 0e	 add	 edx, 14			; 0000000eH
  00056	52		 push	 edx
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@PKJAOJBP@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00067	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN7@toggle_gro:
  0006e	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$1[ebp]
  00071	51		 push	 ecx
  00072	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00078	52		 push	 edx
  00079	8b 45 98	 mov	 eax, DWORD PTR tv72[ebp]
  0007c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00083	ff d1		 call	 ecx

; 101  : 
; 102  : 			eo_ground_stabilisation_value_heading = atan2 (attitude [2][0], attitude [2][2]);

  00085	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0008a	d1 e0		 shl	 eax, 1
  0008c	8d 4c 05 dc	 lea	 ecx, DWORD PTR _attitude$1[ebp+eax]
  00090	ba 04 00 00 00	 mov	 edx, 4
  00095	d1 e2		 shl	 edx, 1
  00097	51		 push	 ecx
  00098	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a7	d1 e0		 shl	 eax, 1
  000a9	8d 4c 05 dc	 lea	 ecx, DWORD PTR _attitude$1[ebp+eax]
  000ad	ba 04 00 00 00	 mov	 edx, 4
  000b2	6b c2 00	 imul	 eax, edx, 0
  000b5	51		 push	 ecx
  000b6	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  000c5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?eo_ground_stabilisation_value_heading@@3MA ; eo_ground_stabilisation_value_heading

; 103  : 
; 104  : 			eo_ground_stabilisation_value_pitch = asin (attitude [2][1]);

  000cb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000d0	d1 e0		 shl	 eax, 1
  000d2	8d 4c 05 dc	 lea	 ecx, DWORD PTR _attitude$1[ebp+eax]
  000d6	ba 04 00 00 00	 mov	 edx, 4
  000db	c1 e2 00	 shl	 edx, 0
  000de	51		 push	 ecx
  000df	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e9	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  000ee	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?eo_ground_stabilisation_value_pitch@@3MA ; eo_ground_stabilisation_value_pitch
$LN4@toggle_gro:

; 105  : 
; 106  : //			eo_ground_stabilisation_value_roll = atan2 (-attitude [0][1], attitude [1][1]);
; 107  : 		}
; 108  : 	}
; 109  : }

  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
?toggle_ground_stabilisation@@YGXXZ ENDP		; toggle_ground_stabilisation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
