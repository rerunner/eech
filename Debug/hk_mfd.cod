; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@KAMKKCPK@HOKUM_MFD_MODE_OFF@		; `string'
PUBLIC	??_C@_0BH@KHPKOFKN@HOKUM_MFD_MODE_DAMAGED@	; `string'
PUBLIC	??_C@_0BM@EMMAEMCL@HOKUM_MFD_MODE_GROUND_RADAR@	; `string'
PUBLIC	??_C@_0BJ@FLAMDDCI@HOKUM_MFD_MODE_AIR_RADAR@	; `string'
PUBLIC	??_C@_0BE@LMLECLFO@HOKUM_MFD_MODE_FLIR@		; `string'
PUBLIC	??_C@_0BF@PCEGJNOM@HOKUM_MFD_MODE_LLLTV@	; `string'
PUBLIC	??_C@_0BJ@PKAMJAL@HOKUM_MFD_MODE_PERISCOPE@	; `string'
PUBLIC	??_C@_0BD@PAJHBHN@HOKUM_MFD_MODE_TSD@		; `string'
PUBLIC	??_C@_0BD@HBNFOHJB@HOKUM_MFD_MODE_ASE@		; `string'
PUBLIC	??_C@_0BG@OBGHNIKA@HOKUM_MFD_MODE_WEAPON@	; `string'
PUBLIC	??_C@_0BG@NCMELLPD@HOKUM_MFD_MODE_SYSTEM@	; `string'
PUBLIC	??_C@_0BG@DLIGPLMN@HOKUM_MFD_MODE_ENGINE@	; `string'
PUBLIC	??_C@_0BG@EPBNNGKL@HOKUM_MFD_MODE_FLIGHT@	; `string'
PUBLIC	??_C@_0BH@LPABANIH@HOKUM_MFD_MODE_MISSION@	; `string'
PUBLIC	??_C@_0BN@BKIMPADE@HOKUM_MFD_LOCATION_PILOT_LHS@ ; `string'
PUBLIC	??_C@_0BN@KKEKNAJI@HOKUM_MFD_LOCATION_PILOT_RHS@ ; `string'
PUBLIC	??_C@_0CA@MFPLOHED@HOKUM_MFD_LOCATION_CO_PILOT_LHS@ ; `string'
PUBLIC	??_C@_0CA@HFDNMHOP@HOKUM_MFD_LOCATION_CO_PILOT_RHS@ ; `string'
_BSS	SEGMENT
?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A DD 01H DUP (?) ; pilot_lhs_mfd_mode
?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A DD 01H DUP (?) ; pilot_rhs_mfd_mode
?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_lhs_mfd_mode
?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_rhs_mfd_mode
_BSS	ENDS
;	COMDAT ??_C@_0CA@HFDNMHOP@HOKUM_MFD_LOCATION_CO_PILOT_RHS@
CONST	SEGMENT
??_C@_0CA@HFDNMHOP@HOKUM_MFD_LOCATION_CO_PILOT_RHS@ DB 'HOKUM_MFD_LOCATIO'
	DB	'N_CO_PILOT_RHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MFPLOHED@HOKUM_MFD_LOCATION_CO_PILOT_LHS@
CONST	SEGMENT
??_C@_0CA@MFPLOHED@HOKUM_MFD_LOCATION_CO_PILOT_LHS@ DB 'HOKUM_MFD_LOCATIO'
	DB	'N_CO_PILOT_LHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KKEKNAJI@HOKUM_MFD_LOCATION_PILOT_RHS@
CONST	SEGMENT
??_C@_0BN@KKEKNAJI@HOKUM_MFD_LOCATION_PILOT_RHS@ DB 'HOKUM_MFD_LOCATION_P'
	DB	'ILOT_RHS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BKIMPADE@HOKUM_MFD_LOCATION_PILOT_LHS@
CONST	SEGMENT
??_C@_0BN@BKIMPADE@HOKUM_MFD_LOCATION_PILOT_LHS@ DB 'HOKUM_MFD_LOCATION_P'
	DB	'ILOT_LHS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LPABANIH@HOKUM_MFD_MODE_MISSION@
CONST	SEGMENT
??_C@_0BH@LPABANIH@HOKUM_MFD_MODE_MISSION@ DB 'HOKUM_MFD_MODE_MISSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EPBNNGKL@HOKUM_MFD_MODE_FLIGHT@
CONST	SEGMENT
??_C@_0BG@EPBNNGKL@HOKUM_MFD_MODE_FLIGHT@ DB 'HOKUM_MFD_MODE_FLIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DLIGPLMN@HOKUM_MFD_MODE_ENGINE@
CONST	SEGMENT
??_C@_0BG@DLIGPLMN@HOKUM_MFD_MODE_ENGINE@ DB 'HOKUM_MFD_MODE_ENGINE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NCMELLPD@HOKUM_MFD_MODE_SYSTEM@
CONST	SEGMENT
??_C@_0BG@NCMELLPD@HOKUM_MFD_MODE_SYSTEM@ DB 'HOKUM_MFD_MODE_SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OBGHNIKA@HOKUM_MFD_MODE_WEAPON@
CONST	SEGMENT
??_C@_0BG@OBGHNIKA@HOKUM_MFD_MODE_WEAPON@ DB 'HOKUM_MFD_MODE_WEAPON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HBNFOHJB@HOKUM_MFD_MODE_ASE@
CONST	SEGMENT
??_C@_0BD@HBNFOHJB@HOKUM_MFD_MODE_ASE@ DB 'HOKUM_MFD_MODE_ASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PAJHBHN@HOKUM_MFD_MODE_TSD@
CONST	SEGMENT
??_C@_0BD@PAJHBHN@HOKUM_MFD_MODE_TSD@ DB 'HOKUM_MFD_MODE_TSD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKAMJAL@HOKUM_MFD_MODE_PERISCOPE@
CONST	SEGMENT
??_C@_0BJ@PKAMJAL@HOKUM_MFD_MODE_PERISCOPE@ DB 'HOKUM_MFD_MODE_PERISCOPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PCEGJNOM@HOKUM_MFD_MODE_LLLTV@
CONST	SEGMENT
??_C@_0BF@PCEGJNOM@HOKUM_MFD_MODE_LLLTV@ DB 'HOKUM_MFD_MODE_LLLTV', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMLECLFO@HOKUM_MFD_MODE_FLIR@
CONST	SEGMENT
??_C@_0BE@LMLECLFO@HOKUM_MFD_MODE_FLIR@ DB 'HOKUM_MFD_MODE_FLIR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FLAMDDCI@HOKUM_MFD_MODE_AIR_RADAR@
CONST	SEGMENT
??_C@_0BJ@FLAMDDCI@HOKUM_MFD_MODE_AIR_RADAR@ DB 'HOKUM_MFD_MODE_AIR_RADAR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EMMAEMCL@HOKUM_MFD_MODE_GROUND_RADAR@
CONST	SEGMENT
??_C@_0BM@EMMAEMCL@HOKUM_MFD_MODE_GROUND_RADAR@ DB 'HOKUM_MFD_MODE_GROUND'
	DB	'_RADAR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KHPKOFKN@HOKUM_MFD_MODE_DAMAGED@
CONST	SEGMENT
??_C@_0BH@KHPKOFKN@HOKUM_MFD_MODE_DAMAGED@ DB 'HOKUM_MFD_MODE_DAMAGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KAMKKCPK@HOKUM_MFD_MODE_OFF@
CONST	SEGMENT
??_C@_0BD@KAMKKCPK@HOKUM_MFD_MODE_OFF@ DB 'HOKUM_MFD_MODE_OFF', 00H ; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_hokum_mfd@@YGXXZ			; initialise_hokum_mfd
PUBLIC	?deinitialise_hokum_mfd@@YGXXZ			; deinitialise_hokum_mfd
PUBLIC	?draw_hokum_mfd@@YGXXZ				; draw_hokum_mfd
PUBLIC	?set_hokum_text_display_text@@YGXPAD00@Z	; set_hokum_text_display_text
PUBLIC	?draw_hokum_full_screen_display@@YGXXZ		; draw_hokum_full_screen_display
PUBLIC	?draw_hokum_virtual_cockpit_periscope_view@@YGXXZ ; draw_hokum_virtual_cockpit_periscope_view
PUBLIC	?draw_hokum_virtual_cockpit_periscope_symbology@@YGXXZ ; draw_hokum_virtual_cockpit_periscope_symbology
PUBLIC	?draw_overlaid_hokum_mfd@@YGXXZ			; draw_overlaid_hokum_mfd
PUBLIC	?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ; get_hokum_mfd_has_focus
PUBLIC	?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode
PUBLIC	?select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; select_next_hokum_mfd
PUBLIC	?select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; select_previous_hokum_mfd
PUBLIC	?toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; toggle_hokum_mfd_on_off
PUBLIC	?select_next_hokum_pilot_tsd_ase_range@@YGXXZ	; select_next_hokum_pilot_tsd_ase_range
PUBLIC	?select_next_hokum_co_pilot_tsd_ase_range@@YGXXZ ; select_next_hokum_co_pilot_tsd_ase_range
PUBLIC	?select_previous_hokum_pilot_tsd_ase_range@@YGXXZ ; select_previous_hokum_pilot_tsd_ase_range
PUBLIC	?select_previous_hokum_co_pilot_tsd_ase_range@@YGXXZ ; select_previous_hokum_co_pilot_tsd_ase_range
PUBLIC	?select_next_hokum_pilot_tsd_declutter_level@@YGXXZ ; select_next_hokum_pilot_tsd_declutter_level
PUBLIC	?select_next_hokum_co_pilot_tsd_declutter_level@@YGXXZ ; select_next_hokum_co_pilot_tsd_declutter_level
PUBLIC	?select_previous_hokum_pilot_tsd_declutter_level@@YGXXZ ; select_previous_hokum_pilot_tsd_declutter_level
PUBLIC	?select_previous_hokum_co_pilot_tsd_declutter_level@@YGXXZ ; select_previous_hokum_co_pilot_tsd_declutter_level
PUBLIC	?toggle_hokum_ase_auto_page@@YGXXZ		; toggle_hokum_ase_auto_page
PUBLIC	?auto_page_hokum_ase_mfd@@YGXXZ			; auto_page_hokum_ase_mfd
PUBLIC	?select_hokum_ground_radar_mfd@@YGXXZ		; select_hokum_ground_radar_mfd
PUBLIC	?select_hokum_air_radar_mfd@@YGXXZ		; select_hokum_air_radar_mfd
PUBLIC	?select_hokum_eo_mfd@@YGXXZ			; select_hokum_eo_mfd
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_01CBDEGOCN@j@				; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA ; `draw_heading_scale'::`1'::__LINE__Var
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03MDIFNIHN@360@				; `string'
PUBLIC	??_C@_06NBEADFGO@?$CF?40fKm@			; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA ; `display_radar_target_details'::`1'::__LINE__Var
PUBLIC	??_C@_05EMNNHGFM@radar@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	??_C@_06HCPKJKPH@NO?5LOS@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_06KODELPLK@LOCKED@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA ; `draw_ground_radar_clutter'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_range_arcs@@YGXM@Z@4JA ; `draw_radar_range_arcs'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA ; `draw_ground_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_06HMBFJLMK@MEDIUM@			; `string'
PUBLIC	??_C@_03FFIBGFCJ@MED@				; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_04MGKDMHFC@MARK@				; `string'
PUBLIC	?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA	; `draw_air_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_05EJJKHDCK@ENEMY@				; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_05PNDCLKDI@LLLTV@				; `string'
PUBLIC	??_C@_05PJLBNLAH@SCOPE@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f@			; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@ ; `string'
PUBLIC	??_C@_05IHJDDCGF@2?45KM@			; `string'
PUBLIC	??_C@_03CAFGHLBJ@5KM@				; `string'
PUBLIC	??_C@_04GMKPDCBM@10KM@				; `string'
PUBLIC	??_C@_04BMNBLIPO@25KM@				; `string'
PUBLIC	??_C@_08KFHEGLBA@COMBINED@			; `string'
PUBLIC	??_C@_09ECOKIFNI@TARGETING@			; `string'
PUBLIC	??_C@_0L@CNLPLFKK@NAVIGATION@			; `string'
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_07GIJJEIKP@FCR?5GND@			; `string'
PUBLIC	??_C@_07FECFLECB@FCR?5AIR@			; `string'
PUBLIC	??_C@_08JJGIEILB@EOS?5FLIR@			; `string'
PUBLIC	??_C@_09MCNGLOGG@EOS?5LLLTV@			; `string'
PUBLIC	??_C@_09MGFFNPFJ@EOS?5SCOPE@			; `string'
PUBLIC	??_C@_03GJMPEADF@HMS@				; `string'
PUBLIC	??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@		; `string'
PUBLIC	??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@	; `string'
PUBLIC	??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@	; `string'
PUBLIC	??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKIOJJOP@RD?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06JNKFDAHI@RD?5XXX@			; `string'
PUBLIC	??_C@_05BHAGAOGB@RD?5ON@			; `string'
PUBLIC	??_C@_06JCJCOOPL@RD?5OFF@			; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_03CBNMOHKF@C?1M@				; `string'
PUBLIC	??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@		; `string'
PUBLIC	??_C@_06CPHFAHEB@Cx?$CF02d@			; `string'
PUBLIC	??_C@_08FGBJBHLJ@CHAFFxXX@			; `string'
PUBLIC	??_C@_04JIMIAKFM@CxXX@				; `string'
PUBLIC	??_C@_0L@NONPILJE@FLAREx?$CF02d@		; `string'
PUBLIC	??_C@_06HNENCIOG@Fx?$CF02d@			; `string'
PUBLIC	??_C@_08EHCDGGFB@FLARExXX@			; `string'
PUBLIC	??_C@_04FACIIFCM@FxXX@				; `string'
PUBLIC	??_C@_07EPFBIBAD@HEx?$CF03d@			; `string'
PUBLIC	??_C@_07GFPICJEB@APx?$CF03d@			; `string'
PUBLIC	??_C@_05HGDIBGHI@x?$CF02d@			; `string'
PUBLIC	??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@		; `string'
PUBLIC	??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@	; `string'
PUBLIC	?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA ; `print_mfd_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_05IHELJBBC@RADAR@				; `string'
PUBLIC	??_C@_09EAHIBGMD@PERISCOPE@			; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_0N@JDBOFCJG@RADAR?5JAMMER@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_03HOHJDGGL@HUD@				; `string'
PUBLIC	??_C@_03HCHJIECN@NVG@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_08ICMALC@L?5ENGINE@			; `string'
PUBLIC	??_C@_03FGGDJIBK@APU@				; `string'
PUBLIC	??_C@_08GEIAFJFB@R?5ENGINE@			; `string'
PUBLIC	??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@		; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	??_C@_02MFICFPOF@NG@				; `string'
PUBLIC	??_C@_02MAABNLHD@NP@				; `string'
PUBLIC	??_C@_03FGEMCONN@TRQ@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_02PCDHLJPB@NR@				; `string'
PUBLIC	??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@	; `string'
PUBLIC	??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@		; `string'
PUBLIC	??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@		; `string'
PUBLIC	??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@ ; `string'
PUBLIC	??_C@_08PLAGFMEO@THROTTLE@			; `string'
PUBLIC	??_C@_04LMJCBFEL@OFF?5@				; `string'
PUBLIC	??_C@_04IMMGDCFE@IDLE@				; `string'
PUBLIC	??_C@_04MJEFHDBD@FLY?5@				; `string'
PUBLIC	??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@		; `string'
PUBLIC	??_C@_08EFKGPAPG@?5?$CFs?5IDLE@			; `string'
PUBLIC	??_C@_08CFLBLB@?5?$CFs?5FLY?5@			; `string'
PUBLIC	??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@	; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA	; `draw_pitch_ladder'::`1'::__LINE__Var
PUBLIC	??_C@_03NJMPCKOA@?$CFd0@			; `string'
PUBLIC	??_C@_04MLFODOCP@R?$CF3d@			; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@ ; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f@			; `string'
PUBLIC	?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA ; `display_waypoint_information'::`1'::__LINE__Var
PUBLIC	??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@		; `string'
PUBLIC	?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA ; `draw_flight_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA ; `print_mono_font_max_length_string'::`1'::__LINE__Var
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_05KEIIKJGB@?$CF?431s@			; `string'
PUBLIC	?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA ; `get_player_rank_and_name'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs@			; `string'
PUBLIC	?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA ; `print_target_position'::`1'::__LINE__Var
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA ; `draw_mission_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@		; `string'
PUBLIC	??_C@_07MLNBPDHK@company@			; `string'
PUBLIC	??_C@_03DKEJHHJP@?$CFs?3@			; `string'
PUBLIC	??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@	; `string'
PUBLIC	??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@		; `string'
PUBLIC	??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@		; `string'
PUBLIC	??_C@_06IAHIIHDD@?$CFc1?9?$CFd@			; `string'
PUBLIC	??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@		; `string'
PUBLIC	??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ ; `string'
PUBLIC	??_C@_07PPFPLHID@MISSION@			; `string'
PUBLIC	??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_09MMJDMDOM@OBJECT?3?$CFs@			; `string'
PUBLIC	??_C@_09NFLHCPML@STATUS?3?$CFs@			; `string'
PUBLIC	??_C@_09MDEJFDEL@START?5?3?$CFs@		; `string'
PUBLIC	??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ ; `string'
PUBLIC	??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `draw_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0L@DHCAJMOH@mfd_screen@			; `string'
PUBLIC	??_C@_0BN@EFPHELCO@hokum_mfd_mode_valid?5?$CI?$CKmode?$CJ@ ; `string'
PUBLIC	??_C@_0CE@BONEDLA@hokum_mfd_location_valid?5?$CIlocat@ ; `string'
PUBLIC	??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA ; `draw_text_display'::`1'::__LINE__Var
PUBLIC	??_C@_0M@CPFKEDIA@text_screen@			; `string'
PUBLIC	?__LINE__Var@?0??initialise_hokum_mfd@@YGXXZ@4JA ; `initialise_hokum_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@ ; `string'
PUBLIC	??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_hokum_mfd@@YGXXZ@4JA	; `draw_hokum_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_hokum_text_display_text@@YGXPAD00@Z@4JA ; `set_hokum_text_display_text'::`1'::__LINE__Var
PUBLIC	??_C@_02JAFEPHFG@s1@				; `string'
PUBLIC	??_C@_02LLHJKEJF@s2@				; `string'
PUBLIC	??_C@_02KCGCJFNE@s3@				; `string'
PUBLIC	??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_hokum_virtual_cockpit_periscope_view@@YGXXZ@4JA ; `draw_hokum_virtual_cockpit_periscope_view'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@IIDHEHMK@hokum_mfd_mode_valid?5?$CImode?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `get_hokum_mfd_has_focus'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `get_default_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `get_mfd_damage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `select_hokum_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@IOEECMNE@hokum_mfd_mode_valid?5?$CImfd_mode?$CJ@ ; `string'
PUBLIC	??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@		; `string'
PUBLIC	??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `get_next_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `get_previous_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `select_next_hokum_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ ; `string'
PUBLIC	?__LINE__Var@?0??select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `select_previous_hokum_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ ; `string'
PUBLIC	?__LINE__Var@?0??toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA ; `toggle_hokum_mfd_on_off'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c8efa35
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d23d70a
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3de38e39
PUBLIC	__real@3e0ccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e333333
PUBLIC	__real@3e3d70a4
PUBLIC	__real@3e400000
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e59999a
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e6e978d
PUBLIC	__real@3e733333
PUBLIC	__real@3e800000
PUBLIC	__real@3e91eb85
PUBLIC	__real@3e933333
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed9999a
PUBLIC	__real@3ee66666
PUBLIC	__real@3ef0a3d7
PUBLIC	__real@3effbe77
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f11eb85
PUBLIC	__real@3f133333
PUBLIC	__real@3f170a3d
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f233333
PUBLIC	__real@3f251eb8
PUBLIC	__real@3f266666
PUBLIC	__real@3f30cccd
PUBLIC	__real@3f31eb85
PUBLIC	__real@3f333333
PUBLIC	__real@3f3ae147
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f451eb8
PUBLIC	__real@3f47ae14
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4c0000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f4f5c29
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f547ae1
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5c987100000000
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6b851f
PUBLIC	__real@3f6e147b
PUBLIC	__real@3f733333
PUBLIC	__real@3f79999a
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f860a92
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fae9e8d
PUBLIC	__real@3faeb851eb851eb8
PUBLIC	__real@3fb3333333333333
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbc71c720000000
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd1111111111111
PUBLIC	__real@3fd6571848000000
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333333
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff3333340000000
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4016eb167e7d81e3
PUBLIC	__real@401921fb51000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@401c463abb200000
PUBLIC	__real@4020000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4026eb1686b280e6
PUBLIC	__real@402a000000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@4051400000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@405b800000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405f400000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@405fffef9db22d0e
PUBLIC	__real@4060000000000000
PUBLIC	__real@4062a00000000000
PUBLIC	__real@40666666
PUBLIC	__real@406f400000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@4079c00000000000
PUBLIC	__real@407e000000000000
PUBLIC	__real@407ec00000000000
PUBLIC	__real@40800000
PUBLIC	__real@4084000000000000
PUBLIC	__real@40845f306446f9b4
PUBLIC	__real@408f400000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c3878000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41300000
PUBLIC	__real@41400000
PUBLIC	__real@41900000
PUBLIC	__real@41980000
PUBLIC	__real@41c80000
PUBLIC	__real@41e00000
PUBLIC	__real@421c0000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee0
PUBLIC	__real@42c80000
PUBLIC	__real@43000000
PUBLIC	__real@437fffbe
PUBLIC	__real@43800000
PUBLIC	__real@44480000
PUBLIC	__real@447a0000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@80000000
PUBLIC	__real@bca3d70a
PUBLIC	__real@bccccccd
PUBLIC	__real@bd23d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd99999a
PUBLIC	__real@bdcccccd
PUBLIC	__real@bdf5c28f
PUBLIC	__real@be000000
PUBLIC	__real@be0ccccd
PUBLIC	__real@be0f5c29
PUBLIC	__real@be19999a
PUBLIC	__real@be23d70a
PUBLIC	__real@be28f5c3
PUBLIC	__real@be2e147b
PUBLIC	__real@be333333
PUBLIC	__real@be4ccccd
PUBLIC	__real@be59999a
PUBLIC	__real@be6147ae
PUBLIC	__real@be666666
PUBLIC	__real@be800000
PUBLIC	__real@be851eb8
PUBLIC	__real@be87ae14
PUBLIC	__real@be8a3d71
PUBLIC	__real@be8ccccd
PUBLIC	__real@be933333
PUBLIC	__real@be99999a
PUBLIC	__real@becccccd
PUBLIC	__real@bed70a3d
PUBLIC	__real@bed9999a
PUBLIC	__real@bee66666
PUBLIC	__real@bef0a3d7
PUBLIC	__real@bf000000
PUBLIC	__real@bf051eb8
PUBLIC	__real@bf11eb85
PUBLIC	__real@bf19999a
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf251eb8
PUBLIC	__real@bf266666
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf30cccd
PUBLIC	__real@bf31eb85
PUBLIC	__real@bf333333
PUBLIC	__real@bf3ae147
PUBLIC	__real@bf3eb852
PUBLIC	__real@bf400000
PUBLIC	__real@bf48f5c3
PUBLIC	__real@bf4c0000
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf566666
PUBLIC	__real@bf59999a
PUBLIC	__real@bf5eb852
PUBLIC	__real@bf6147ae
PUBLIC	__real@bf63d70a
PUBLIC	__real@bf666666
PUBLIC	__real@bf68f5c3
PUBLIC	__real@bf6b851f
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf733333
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__real@bfd3333333333333
PUBLIC	__real@bfd6571848000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe921fb51000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c0000000
PUBLIC	__real@c00921fb51000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1200000
PUBLIC	__real@c1400000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_abs:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?sfrand1norm@@YGNXZ:PROC			; sfrand1norm
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_approx_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_approx_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_user_texture_screen
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?set_hatched_pattern@@YGXPAI@Z:PROC		; set_hatched_pattern
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_position@@YGXMM@Z:PROC		; set_mono_font_position
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_mono_sprite
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z:PROC	; set_2d_pixel
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_filled_triangle
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_int_screen_coordinates@@YGXMMPAH0@Z:PROC ; get_2d_int_screen_coordinates
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z:PROC	; draw_2d_arc
EXTRN	?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_circle
EXTRN	?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z:PROC	; draw_2d_box
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?get_object_3d_number_of_poly_lines@@YGHH@Z:PROC ; get_object_3d_number_of_poly_lines
EXTRN	?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z:PROC ; get_object_3d_poly_line_data
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z:PROC ; get_local_entity_target_bearing
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z:PROC ; get_keysite_entity_mfd_display_name
EXTRN	?get_player_task@@YGPAUENTITY@@PAU1@@Z:PROC	; get_player_task
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z:PROC ; get_task_estimated_route_duration
EXTRN	?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z:PROC ; get_task_objective_mfd_display_string
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z:PROC ; convert_linear_view_value
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z:PROC ; draw_symbology_to_texture
EXTRN	?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_ground_radar
EXTRN	?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z:PROC ; get_target_matches_ground_radar_declutter_criteria
EXTRN	?ground_radar_is_active@@YGHXZ:PROC		; ground_radar_is_active
EXTRN	?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_air_radar
EXTRN	?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_target_matches_air_radar_declutter_criteria
EXTRN	?air_radar_is_active@@YGHXZ:PROC		; air_radar_is_active
EXTRN	?get_hokum_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z:PROC ; get_hokum_eo_relative_centred_viewpoint
EXTRN	?get_crew_role@@YG?AW4CREW_ROLES@@XZ:PROC	; get_crew_role
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?get_digital_clock_int_values@@YGXMPAH00@Z:PROC	; get_digital_clock_int_values
EXTRN	?get_untranslated_pilot_rank_short_name@@YGPBDH@Z:PROC ; get_untranslated_pilot_rank_short_name
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	__chkstk:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?sine_table@@3PAMA:BYTE				; sine_table
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_colour_mfd@@3HA:DWORD		; command_line_colour_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?formation_display_names@@3PAPBDA:BYTE		; formation_display_names
EXTRN	?task_status_names@@3PAPBDA:BYTE		; task_status_names
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA:BYTE ; fn_get_local_entity_ptr_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?full_screen_x_min@@3MA:DWORD			; full_screen_x_min
EXTRN	?full_screen_y_min@@3MA:DWORD			; full_screen_y_min
EXTRN	?full_screen_x_mid@@3MA:DWORD			; full_screen_x_mid
EXTRN	?full_screen_y_mid@@3MA:DWORD			; full_screen_y_mid
EXTRN	?full_screen_width_view_angle@@3MA:DWORD	; full_screen_width_view_angle
EXTRN	?full_screen_height_view_angle@@3MA:DWORD	; full_screen_height_view_angle
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_max_elevation@@3MA:DWORD			; eo_max_elevation
EXTRN	?eo_max_visual_range@@3MA:DWORD			; eo_max_visual_range
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?ground_radar@@3URADAR_PARAMS@@A:BYTE		; ground_radar
EXTRN	?air_radar@@3URADAR_PARAMS@@A:BYTE		; air_radar
EXTRN	?radar_clutter_hatch_pattern@@3PAIA:BYTE	; radar_clutter_hatch_pattern
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?gun_is_firing@@3HA:DWORD			; gun_is_firing
EXTRN	?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A:DWORD	; hokum_damage
EXTRN	?hokum_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; hokum_flir
EXTRN	?hokum_llltv@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; hokum_llltv
EXTRN	?hokum_periscope@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE ; hokum_periscope
EXTRN	?HOKUM_RADAR_SCAN_RANGE_1000@@3MA:DWORD		; HOKUM_RADAR_SCAN_RANGE_1000
EXTRN	?HOKUM_RADAR_SCAN_RANGE_2000@@3MA:DWORD		; HOKUM_RADAR_SCAN_RANGE_2000
EXTRN	?HOKUM_RADAR_SCAN_RANGE_4000@@3MA:DWORD		; HOKUM_RADAR_SCAN_RANGE_4000
EXTRN	?HOKUM_RADAR_SCAN_RANGE_6000@@3MA:DWORD		; HOKUM_RADAR_SCAN_RANGE_6000
EXTRN	?HOKUM_RADAR_SCAN_RANGE_10000@@3MA:DWORD	; HOKUM_RADAR_SCAN_RANGE_10000
EXTRN	?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A:DWORD ; virtual_cockpit_inst3d
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?mfd_colours@@3PAUREAL_COLOUR@@A DD 014H DUP (?)	; mfd_colours
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?text_display_colours@@3PAUREAL_COLOUR@@A DD 02H DUP (?) ; text_display_colours
?display_mask@@3HA DD 01H DUP (?)			; display_mask
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?int_mfd_viewport_size@@3HA DD 01H DUP (?)		; int_mfd_viewport_size
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?mfd_screen_x_min@@3MA DD 01H DUP (?)			; mfd_screen_x_min
?mfd_screen_y_min@@3MA DD 01H DUP (?)			; mfd_screen_y_min
?mfd_screen_x_max@@3MA DD 01H DUP (?)			; mfd_screen_x_max
?mfd_screen_y_max@@3MA DD 01H DUP (?)			; mfd_screen_y_max
?mfd_screen_width@@3MA DD 01H DUP (?)			; mfd_screen_width
?mfd_screen_height@@3MA DD 01H DUP (?)			; mfd_screen_height
?mfd_screen_x_scale@@3MA DD 01H DUP (?)			; mfd_screen_x_scale
?mfd_screen_y_scale@@3MA DD 01H DUP (?)			; mfd_screen_y_scale
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_lhs_mfd_texture_screen
?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_rhs_mfd_texture_screen
?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_lhs_mfd_texture_screen
?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_rhs_mfd_texture_screen
?ekran_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; ekran_display_texture_screen
?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_lhs_mfd_texture_screen
?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_rhs_mfd_texture_screen
?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_lhs_mfd_texture_screen
?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_rhs_mfd_texture_screen
?large_ekran_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_ekran_display_texture_screen
?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_lhs_mfd_texture_screen
?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_rhs_mfd_texture_screen
?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_lhs_mfd_texture_screen
?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_rhs_mfd_texture_screen
?small_ekran_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_ekran_display_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?full_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; full_mfd_texture_screen
?text_display_line1@@3PADA DB 0bH DUP (?)		; text_display_line1
	ALIGN	4

?text_display_line2@@3PADA DB 0bH DUP (?)		; text_display_line2
	ALIGN	4

?text_display_line3@@3PADA DB 0bH DUP (?)		; text_display_line3
	ALIGN	4

?pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; pilot_tsd_ase_range
?co_pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; co_pilot_tsd_ase_range
?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; pilot_tsd_declutter_level
?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; co_pilot_tsd_declutter_level
?pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_tsd_threat_line_flash_timer
?co_pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_tsd_threat_line_flash_timer
?pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_tsd_draw_threat_line_status
?co_pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_tsd_draw_threat_line_status
?pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_ase_threat_line_flash_timer
?co_pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_ase_threat_line_flash_timer
?pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_ase_draw_threat_line_status
?co_pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_ase_draw_threat_line_status
?main_horizon_mask@@3PADA DD 01H DUP (?)		; main_horizon_mask
?num_weapon_line_points@@3HA DD 01H DUP (?)		; num_weapon_line_points
?weapon_line_points@@3PAUVEC3D@@A DD 01H DUP (?)	; weapon_line_points
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c00921fb51000000
CONST	SEGMENT
__real@c00921fb51000000 DQ 0c00921fb51000000r	; -3.14159
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe921fb51000000
CONST	SEGMENT
__real@bfe921fb51000000 DQ 0bfe921fb51000000r	; -0.785398
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd6571848000000
CONST	SEGMENT
__real@bfd6571848000000 DQ 0bfd6571848000000r	; -0.349066
CONST	ENDS
;	COMDAT __real@bfd3333333333333
CONST	SEGMENT
__real@bfd3333333333333 DQ 0bfd3333333333333r	; -0.3
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf6b851f
CONST	SEGMENT
__real@bf6b851f DD 0bf6b851fr			; -0.92
CONST	ENDS
;	COMDAT __real@bf68f5c3
CONST	SEGMENT
__real@bf68f5c3 DD 0bf68f5c3r			; -0.91
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf63d70a
CONST	SEGMENT
__real@bf63d70a DD 0bf63d70ar			; -0.89
CONST	ENDS
;	COMDAT __real@bf6147ae
CONST	SEGMENT
__real@bf6147ae DD 0bf6147aer			; -0.88
CONST	ENDS
;	COMDAT __real@bf5eb852
CONST	SEGMENT
__real@bf5eb852 DD 0bf5eb852r			; -0.87
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf566666
CONST	SEGMENT
__real@bf566666 DD 0bf566666r			; -0.8375
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf4c0000
CONST	SEGMENT
__real@bf4c0000 DD 0bf4c0000r			; -0.796875
CONST	ENDS
;	COMDAT __real@bf48f5c3
CONST	SEGMENT
__real@bf48f5c3 DD 0bf48f5c3r			; -0.785
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf3eb852
CONST	SEGMENT
__real@bf3eb852 DD 0bf3eb852r			; -0.745
CONST	ENDS
;	COMDAT __real@bf3ae147
CONST	SEGMENT
__real@bf3ae147 DD 0bf3ae147r			; -0.73
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf31eb85
CONST	SEGMENT
__real@bf31eb85 DD 0bf31eb85r			; -0.695
CONST	ENDS
;	COMDAT __real@bf30cccd
CONST	SEGMENT
__real@bf30cccd DD 0bf30cccdr			; -0.690625
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf251eb8
CONST	SEGMENT
__real@bf251eb8 DD 0bf251eb8r			; -0.645
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf11eb85
CONST	SEGMENT
__real@bf11eb85 DD 0bf11eb85r			; -0.57
CONST	ENDS
;	COMDAT __real@bf051eb8
CONST	SEGMENT
__real@bf051eb8 DD 0bf051eb8r			; -0.52
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bef0a3d7
CONST	SEGMENT
__real@bef0a3d7 DD 0bef0a3d7r			; -0.47
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@bed9999a
CONST	SEGMENT
__real@bed9999a DD 0bed9999ar			; -0.425
CONST	ENDS
;	COMDAT __real@bed70a3d
CONST	SEGMENT
__real@bed70a3d DD 0bed70a3dr			; -0.42
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be933333
CONST	SEGMENT
__real@be933333 DD 0be933333r			; -0.2875
CONST	ENDS
;	COMDAT __real@be8ccccd
CONST	SEGMENT
__real@be8ccccd DD 0be8ccccdr			; -0.275
CONST	ENDS
;	COMDAT __real@be8a3d71
CONST	SEGMENT
__real@be8a3d71 DD 0be8a3d71r			; -0.27
CONST	ENDS
;	COMDAT __real@be87ae14
CONST	SEGMENT
__real@be87ae14 DD 0be87ae14r			; -0.265
CONST	ENDS
;	COMDAT __real@be851eb8
CONST	SEGMENT
__real@be851eb8 DD 0be851eb8r			; -0.26
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be666666
CONST	SEGMENT
__real@be666666 DD 0be666666r			; -0.225
CONST	ENDS
;	COMDAT __real@be6147ae
CONST	SEGMENT
__real@be6147ae DD 0be6147aer			; -0.22
CONST	ENDS
;	COMDAT __real@be59999a
CONST	SEGMENT
__real@be59999a DD 0be59999ar			; -0.2125
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be333333
CONST	SEGMENT
__real@be333333 DD 0be333333r			; -0.175
CONST	ENDS
;	COMDAT __real@be2e147b
CONST	SEGMENT
__real@be2e147b DD 0be2e147br			; -0.17
CONST	ENDS
;	COMDAT __real@be28f5c3
CONST	SEGMENT
__real@be28f5c3 DD 0be28f5c3r			; -0.165
CONST	ENDS
;	COMDAT __real@be23d70a
CONST	SEGMENT
__real@be23d70a DD 0be23d70ar			; -0.16
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@be0f5c29
CONST	SEGMENT
__real@be0f5c29 DD 0be0f5c29r			; -0.14
CONST	ENDS
;	COMDAT __real@be0ccccd
CONST	SEGMENT
__real@be0ccccd DD 0be0ccccdr			; -0.1375
CONST	ENDS
;	COMDAT __real@be000000
CONST	SEGMENT
__real@be000000 DD 0be000000r			; -0.125
CONST	ENDS
;	COMDAT __real@bdf5c28f
CONST	SEGMENT
__real@bdf5c28f DD 0bdf5c28fr			; -0.12
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd23d70a
CONST	SEGMENT
__real@bd23d70a DD 0bd23d70ar			; -0.04
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@bca3d70a
CONST	SEGMENT
__real@bca3d70a DD 0bca3d70ar			; -0.02
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fffbe
CONST	SEGMENT
__real@437fffbe DD 0437fffber			; 255.999
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@421c0000
CONST	SEGMENT
__real@421c0000 DD 0421c0000r			; 39
CONST	ENDS
;	COMDAT __real@41e00000
CONST	SEGMENT
__real@41e00000 DD 041e00000r			; 28
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41980000
CONST	SEGMENT
__real@41980000 DD 041980000r			; 19
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40845f306446f9b4
CONST	SEGMENT
__real@40845f306446f9b4 DQ 040845f306446f9b4r	; 651.899
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407ec00000000000
CONST	SEGMENT
__real@407ec00000000000 DQ 0407ec00000000000r	; 492
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@4079c00000000000
CONST	SEGMENT
__real@4079c00000000000 DQ 04079c00000000000r	; 412
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4062a00000000000
CONST	SEGMENT
__real@4062a00000000000 DQ 04062a00000000000r	; 149
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@405fffef9db22d0e
CONST	SEGMENT
__real@405fffef9db22d0e DQ 0405fffef9db22d0er	; 127.999
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405f400000000000
CONST	SEGMENT
__real@405f400000000000 DQ 0405f400000000000r	; 125
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@405b800000000000
CONST	SEGMENT
__real@405b800000000000 DQ 0405b800000000000r	; 110
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4051400000000000
CONST	SEGMENT
__real@4051400000000000 DQ 04051400000000000r	; 69
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4026eb1686b280e6
CONST	SEGMENT
__real@4026eb1686b280e6 DQ 04026eb1686b280e6r	; 11.4592
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@401c463abb200000
CONST	SEGMENT
__real@401c463abb200000 DQ 0401c463abb200000r	; 7.06858
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4016eb167e7d81e3
CONST	SEGMENT
__real@4016eb167e7d81e3 DQ 04016eb167e7d81e3r	; 5.72958
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff3333340000000
CONST	SEGMENT
__real@3ff3333340000000 DQ 03ff3333340000000r	; 1.2
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT __real@3fd6571848000000
CONST	SEGMENT
__real@3fd6571848000000 DQ 03fd6571848000000r	; 0.349066
CONST	ENDS
;	COMDAT __real@3fd1111111111111
CONST	SEGMENT
__real@3fd1111111111111 DQ 03fd1111111111111r	; 0.266667
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fbc71c720000000
CONST	SEGMENT
__real@3fbc71c720000000 DQ 03fbc71c720000000r	; 0.111111
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb3333333333333
CONST	SEGMENT
__real@3fb3333333333333 DQ 03fb3333333333333r	; 0.075
CONST	ENDS
;	COMDAT __real@3faeb851eb851eb8
CONST	SEGMENT
__real@3faeb851eb851eb8 DQ 03faeb851eb851eb8r	; 0.06
CONST	ENDS
;	COMDAT __real@3fae9e8d
CONST	SEGMENT
__real@3fae9e8d DD 03fae9e8dr			; 1.36421
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f6e147b
CONST	SEGMENT
__real@3f6e147b DD 03f6e147br			; 0.93
CONST	ENDS
;	COMDAT __real@3f6b851f
CONST	SEGMENT
__real@3f6b851f DD 03f6b851fr			; 0.92
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f5c987100000000
CONST	SEGMENT
__real@3f5c987100000000 DQ 03f5c987100000000r	; 0.00174533
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f547ae1
CONST	SEGMENT
__real@3f547ae1 DD 03f547ae1r			; 0.83
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4f5c29
CONST	SEGMENT
__real@3f4f5c29 DD 03f4f5c29r			; 0.81
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4c0000
CONST	SEGMENT
__real@3f4c0000 DD 03f4c0000r			; 0.796875
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f47ae14
CONST	SEGMENT
__real@3f47ae14 DD 03f47ae14r			; 0.78
CONST	ENDS
;	COMDAT __real@3f451eb8
CONST	SEGMENT
__real@3f451eb8 DD 03f451eb8r			; 0.77
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f3ae147
CONST	SEGMENT
__real@3f3ae147 DD 03f3ae147r			; 0.73
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f31eb85
CONST	SEGMENT
__real@3f31eb85 DD 03f31eb85r			; 0.695
CONST	ENDS
;	COMDAT __real@3f30cccd
CONST	SEGMENT
__real@3f30cccd DD 03f30cccdr			; 0.690625
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f251eb8
CONST	SEGMENT
__real@3f251eb8 DD 03f251eb8r			; 0.645
CONST	ENDS
;	COMDAT __real@3f233333
CONST	SEGMENT
__real@3f233333 DD 03f233333r			; 0.6375
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f170a3d
CONST	SEGMENT
__real@3f170a3d DD 03f170a3dr			; 0.59
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f11eb85
CONST	SEGMENT
__real@3f11eb85 DD 03f11eb85r			; 0.57
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3effbe77
CONST	SEGMENT
__real@3effbe77 DD 03effbe77r			; 0.4995
CONST	ENDS
;	COMDAT __real@3ef0a3d7
CONST	SEGMENT
__real@3ef0a3d7 DD 03ef0a3d7r			; 0.47
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3ed9999a
CONST	SEGMENT
__real@3ed9999a DD 03ed9999ar			; 0.425
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e933333
CONST	SEGMENT
__real@3e933333 DD 03e933333r			; 0.2875
CONST	ENDS
;	COMDAT __real@3e91eb85
CONST	SEGMENT
__real@3e91eb85 DD 03e91eb85r			; 0.285
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e733333
CONST	SEGMENT
__real@3e733333 DD 03e733333r			; 0.2375
CONST	ENDS
;	COMDAT __real@3e6e978d
CONST	SEGMENT
__real@3e6e978d DD 03e6e978dr			; 0.233
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e59999a
CONST	SEGMENT
__real@3e59999a DD 03e59999ar			; 0.2125
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e400000
CONST	SEGMENT
__real@3e400000 DD 03e400000r			; 0.1875
CONST	ENDS
;	COMDAT __real@3e3d70a4
CONST	SEGMENT
__real@3e3d70a4 DD 03e3d70a4r			; 0.185
CONST	ENDS
;	COMDAT __real@3e333333
CONST	SEGMENT
__real@3e333333 DD 03e333333r			; 0.175
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e0ccccd
CONST	SEGMENT
__real@3e0ccccd DD 03e0ccccdr			; 0.1375
CONST	ENDS
;	COMDAT __real@3de38e39
CONST	SEGMENT
__real@3de38e39 DD 03de38e39r			; 0.111111
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 029c5H ; `toggle_hokum_mfd_on_off'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
CONST	SEGMENT
??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ DB 'previo'
	DB	'us_mfd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 029a5H ; `select_previous_hokum_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
CONST	SEGMENT
??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ DB 'next_m'
	DB	'fd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02985H ; `select_next_hokum_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02916H ; `get_previous_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02899H ; `get_next_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
CONST	SEGMENT
??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ DB 'default_mfd_'
	DB	'mode != mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
CONST	SEGMENT
??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@ DB '%s = %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IOEECMNE@hokum_mfd_mode_valid?5?$CImfd_mode?$CJ@
CONST	SEGMENT
??_C@_0CA@IOEECMNE@hokum_mfd_mode_valid?5?$CImfd_mode?$CJ@ DB 'hokum_mfd_'
	DB	'mode_valid (mfd_mode)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02866H ; `select_hokum_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02834H ; `get_mfd_damage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02802H ; `get_default_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02796H ; `get_hokum_mfd_has_focus'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@IIDHEHMK@hokum_mfd_mode_valid?5?$CImode?$CJ@
CONST	SEGMENT
??_C@_0BM@IIDHEHMK@hokum_mfd_mode_valid?5?$CImode?$CJ@ DB 'hokum_mfd_mode'
	DB	'_valid (mode)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 02495H ; `draw_overlaid_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_hokum_virtual_cockpit_periscope_view@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_hokum_virtual_cockpit_periscope_view@@YGXXZ@4JA DD 02387H ; `draw_hokum_virtual_cockpit_periscope_view'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ DB 'Invalid view mod'
	DB	'e = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCGCJFNE@s3@
CONST	SEGMENT
??_C@_02KCGCJFNE@s3@ DB 's3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LLHJKEJF@s2@
CONST	SEGMENT
??_C@_02LLHJKEJF@s2@ DB 's2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JAFEPHFG@s1@
CONST	SEGMENT
??_C@_02JAFEPHFG@s1@ DB 's1', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_hokum_text_display_text@@YGXPAD00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_hokum_text_display_text@@YGXPAD00@Z@4JA DD 02252H ; `set_hokum_text_display_text'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_hokum_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_hokum_mfd@@YGXXZ@4JA DD 020e9H	; `draw_hokum_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@
CONST	SEGMENT
??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@ DB '('
	DB	'num_weapon_line_points & 1) == 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@
CONST	SEGMENT
??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@ DB 'num_weapon_line_p'
	DB	'oints > 0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_hokum_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_hokum_mfd@@YGXXZ@4JA DD 0203aH ; `initialise_hokum_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@CPFKEDIA@text_screen@
CONST	SEGMENT
??_C@_0M@CPFKEDIA@text_screen@ DB 'text_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA DD 01fc3H ; `draw_text_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ DB 'Invalid mai'
	DB	'n MFD mode = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BONEDLA@hokum_mfd_location_valid?5?$CIlocat@
CONST	SEGMENT
??_C@_0CE@BONEDLA@hokum_mfd_location_valid?5?$CIlocat@ DB 'hokum_mfd_loca'
	DB	'tion_valid (location)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EFPHELCO@hokum_mfd_mode_valid?5?$CI?$CKmode?$CJ@
CONST	SEGMENT
??_C@_0BN@EFPHELCO@hokum_mfd_mode_valid?5?$CI?$CKmode?$CJ@ DB 'hokum_mfd_'
	DB	'mode_valid (*mode)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHCAJMOH@mfd_screen@
CONST	SEGMENT
??_C@_0L@DHCAJMOH@mfd_screen@ DB 'mfd_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 01f23H ; `draw_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
CONST	SEGMENT
??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ DB 'T'
	DB	'IME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
CONST	SEGMENT
??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ DB 'COUNT :K'
	DB	'ills=%d Losses=%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@ DB 'END   :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MDEJFDEL@START?5?3?$CFs@
CONST	SEGMENT
??_C@_09MDEJFDEL@START?5?3?$CFs@ DB 'START :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFLHCPML@STATUS?3?$CFs@
CONST	SEGMENT
??_C@_09NFLHCPML@STATUS?3?$CFs@ DB 'STATUS:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
CONST	SEGMENT
??_C@_09MMJDMDOM@OBJECT?3?$CFs@ DB 'OBJECT:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@ DB 'TYPE  :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPFPLHID@MISSION@
CONST	SEGMENT
??_C@_07PPFPLHID@MISSION@ DB 'MISSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
CONST	SEGMENT
??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ DB 'get_local_ent'
	DB	'ity_int_value (task, INT_TYPE_VISIBLE_TASK)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
CONST	SEGMENT
??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@ DB 'FORMATION:%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
CONST	SEGMENT
??_C@_06IAHIIHDD@?$CFc1?9?$CFd@ DB '%c1-%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
CONST	SEGMENT
??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@ DB '%c%s 1-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@ DB '%c1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@ DB '%c%s 1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKEJHHJP@?$CFs?3@
CONST	SEGMENT
??_C@_03DKEJHHJP@?$CFs?3@ DB '%s:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MLNBPDHK@company@
CONST	SEGMENT
??_C@_07MLNBPDHK@company@ DB 'company', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
CONST	SEGMENT
??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@ DB 'FLIGHT GROUP', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA DD 01d2bH ; `draw_mission_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
CONST	SEGMENT
??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ DB ' '
	DB	'      <%03d,%03d> %6.1fKm %3d', 07fH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA DD 01cfeH ; `print_target_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA DD 01ccdH ; `get_player_rank_and_name'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05KEIIKJGB@?$CF?431s@
CONST	SEGMENT
??_C@_05KEIIKJGB@?$CF?431s@ DB '%.31s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA DD 01cbdH ; `print_mono_font_max_length_string'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA DD 01c9fH ; `draw_flight_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@
CONST	SEGMENT
??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@ DB '%c: %d M', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA DD 01c2eH ; `display_waypoint_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@
CONST	SEGMENT
??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@ DB 'min: %.02f, '
	DB	'max: %.02f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLFODOCP@R?$CF3d@
CONST	SEGMENT
??_C@_04MLFODOCP@R?$CF3d@ DB 'R%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJMPCKOA@?$CFd0@
CONST	SEGMENT
??_C@_03NJMPCKOA@?$CFd0@ DB '%d0', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA DD 019acH	; `draw_pitch_ladder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@ DB ' %s %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFLBLB@?5?$CFs?5FLY?5@
CONST	SEGMENT
??_C@_08CFLBLB@?5?$CFs?5FLY?5@ DB ' %s FLY ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFKGPAPG@?5?$CFs?5IDLE@
CONST	SEGMENT
??_C@_08EFKGPAPG@?5?$CFs?5IDLE@ DB ' %s IDLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@
CONST	SEGMENT
??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@ DB ' %s OFF ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@ DB '%03d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJEFHDBD@FLY?5@
CONST	SEGMENT
??_C@_04MJEFHDBD@FLY?5@ DB 'FLY ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMMGDCFE@IDLE@
CONST	SEGMENT
??_C@_04IMMGDCFE@IDLE@ DB 'IDLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMJCBFEL@OFF?5@
CONST	SEGMENT
??_C@_04LMJCBFEL@OFF?5@ DB 'OFF ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLAGFMEO@THROTTLE@
CONST	SEGMENT
??_C@_08PLAGFMEO@THROTTLE@ DB 'THROTTLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@
CONST	SEGMENT
??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@ DB 'APU       %3.0'
	DB	'f%%', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@
CONST	SEGMENT
??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@ DB 'OIL PRES. NORM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@
CONST	SEGMENT
??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@ DB 'OIL PRES. LOW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@
CONST	SEGMENT
??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@ DB 'FUEL      %4d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCDHLJPB@NR@
CONST	SEGMENT
??_C@_02PCDHLJPB@NR@ DB 'NR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGEMCONN@TRQ@
CONST	SEGMENT
??_C@_03FGEMCONN@TRQ@ DB 'TRQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MAABNLHD@NP@
CONST	SEGMENT
??_C@_02MAABNLHD@NP@ DB 'NP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MFICFPOF@NG@
CONST	SEGMENT
??_C@_02MFICFPOF@NG@ DB 'NG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
CONST	SEGMENT
??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@ DB 'HYDRAULIC PRESSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEIAFJFB@R?5ENGINE@
CONST	SEGMENT
??_C@_08GEIAFJFB@R?5ENGINE@ DB 'R ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGGDJIBK@APU@
CONST	SEGMENT
??_C@_03FGGDJIBK@APU@ DB 'APU', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICMALC@L?5ENGINE@
CONST	SEGMENT
??_C@_08ICMALC@L?5ENGINE@ DB 'L ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HCHJIECN@NVG@
CONST	SEGMENT
??_C@_03HCHJIECN@NVG@ DB 'NVG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HOHJDGGL@HUD@
CONST	SEGMENT
??_C@_03HOHJDGGL@HUD@ DB 'HUD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
CONST	SEGMENT
??_C@_0N@JDBOFCJG@RADAR?5JAMMER@ DB 'RADAR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EAHIBGMD@PERISCOPE@
CONST	SEGMENT
??_C@_09EAHIBGMD@PERISCOPE@ DB 'PERISCOPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHELJBBC@RADAR@
CONST	SEGMENT
??_C@_05IHELJBBC@RADAR@ DB 'RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA DD 0180cH ; `print_mfd_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
CONST	SEGMENT
??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@ DB 'ROCKET SALVOx%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
CONST	SEGMENT
??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@ DB 'ROCKET SALVOxALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGDIBGHI@x?$CF02d@
CONST	SEGMENT
??_C@_05HGDIBGHI@x?$CF02d@ DB 'x%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFPICJEB@APx?$CF03d@
CONST	SEGMENT
??_C@_07GFPICJEB@APx?$CF03d@ DB 'APx%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EPFBIBAD@HEx?$CF03d@
CONST	SEGMENT
??_C@_07EPFBIBAD@HEx?$CF03d@ DB 'HEx%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FACIIFCM@FxXX@
CONST	SEGMENT
??_C@_04FACIIFCM@FxXX@ DB 'FxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHCDGGFB@FLARExXX@
CONST	SEGMENT
??_C@_08EHCDGGFB@FLARExXX@ DB 'FLARExXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNENCIOG@Fx?$CF02d@
CONST	SEGMENT
??_C@_06HNENCIOG@Fx?$CF02d@ DB 'Fx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONPILJE@FLAREx?$CF02d@
CONST	SEGMENT
??_C@_0L@NONPILJE@FLAREx?$CF02d@ DB 'FLAREx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMIAKFM@CxXX@
CONST	SEGMENT
??_C@_04JIMIAKFM@CxXX@ DB 'CxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGBJBHLJ@CHAFFxXX@
CONST	SEGMENT
??_C@_08FGBJBHLJ@CHAFFxXX@ DB 'CHAFFxXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPHFAHEB@Cx?$CF02d@
CONST	SEGMENT
??_C@_06CPHFAHEB@Cx?$CF02d@ DB 'Cx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
CONST	SEGMENT
??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@ DB 'CHAFFx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBNMOHKF@C?1M@
CONST	SEGMENT
??_C@_03CBNMOHKF@C?1M@ DB 'C/M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA DD 014dfH ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJCOOPL@RD?5OFF@
CONST	SEGMENT
??_C@_06JCJCOOPL@RD?5OFF@ DB 'RD OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHAGAOGB@RD?5ON@
CONST	SEGMENT
??_C@_05BHAGAOGB@RD?5ON@ DB 'RD ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKFDAHI@RD?5XXX@
CONST	SEGMENT
??_C@_06JNKFDAHI@RD?5XXX@ DB 'RD XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@ DB 'RD JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKIOJJOP@RD?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKIOJJOP@RD?5JAM?5ON@ DB 'RD JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@ DB 'RD JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 01244H ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 011ddH ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@
CONST	SEGMENT
??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@ DB '%c: %d KM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@
CONST	SEGMENT
??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@ DB '%c: %.1f KM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@ DB 'SECTOR: %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@
CONST	SEGMENT
??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@ DB '%   4d M', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJMPEADF@HMS@
CONST	SEGMENT
??_C@_03GJMPEADF@HMS@ DB 'HMS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09MGFFNPFJ@EOS?5SCOPE@
CONST	SEGMENT
??_C@_09MGFFNPFJ@EOS?5SCOPE@ DB 'EOS SCOPE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MCNGLOGG@EOS?5LLLTV@
CONST	SEGMENT
??_C@_09MCNGLOGG@EOS?5LLLTV@ DB 'EOS LLLTV', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJGIEILB@EOS?5FLIR@
CONST	SEGMENT
??_C@_08JJGIEILB@EOS?5FLIR@ DB 'EOS FLIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FECFLECB@FCR?5AIR@
CONST	SEGMENT
??_C@_07FECFLECB@FCR?5AIR@ DB 'FCR AIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIJJEIKP@FCR?5GND@
CONST	SEGMENT
??_C@_07GIJJEIKP@FCR?5GND@ DB 'FCR GND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNLPLFKK@NAVIGATION@
CONST	SEGMENT
??_C@_0L@CNLPLFKK@NAVIGATION@ DB 'NAVIGATION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ECOKIFNI@TARGETING@
CONST	SEGMENT
??_C@_09ECOKIFNI@TARGETING@ DB 'TARGETING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFHEGLBA@COMBINED@
CONST	SEGMENT
??_C@_08KFHEGLBA@COMBINED@ DB 'COMBINED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMNBLIPO@25KM@
CONST	SEGMENT
??_C@_04BMNBLIPO@25KM@ DB '25KM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMKPDCBM@10KM@
CONST	SEGMENT
??_C@_04GMKPDCBM@10KM@ DB '10KM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CAFGHLBJ@5KM@
CONST	SEGMENT
??_C@_03CAFGHLBJ@5KM@ DB '5KM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHJDDCGF@2?45KM@
CONST	SEGMENT
??_C@_05IHJDDCGF@2?45KM@ DB '2.5KM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
CONST	SEGMENT
??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@ DB 'hokum_mfd_loc'
	DB	'ation_valid (mfd_location)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA DD 0ebcH ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PJLBNLAH@SCOPE@
CONST	SEGMENT
??_C@_05PJLBNLAH@SCOPE@ DB 'SCOPE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNDCLKDI@LLLTV@
CONST	SEGMENT
??_C@_05PNDCLKDI@LLLTV@ DB 'LLLTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA DD 0bebH ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA DD 0b48H ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0a92H ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05EJJKHDCK@ENEMY@
CONST	SEGMENT
??_C@_05EJJKHDCK@ENEMY@ DB 'ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA DD 0871H	; `draw_air_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04MGKDMHFC@MARK@
CONST	SEGMENT
??_C@_04MGKDMHFC@MARK@ DB 'MARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFIBGFCJ@MED@
CONST	SEGMENT
??_C@_03FFIBGFCJ@MED@ DB 'MED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMBFJLMK@MEDIUM@
CONST	SEGMENT
??_C@_06HMBFJLMK@MEDIUM@ DB 'MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA DD 075dH ; `draw_ground_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_range_arcs@@YGXM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_range_arcs@@YGXM@Z@4JA DD 071eH ; `draw_radar_range_arcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
CONST	SEGMENT
??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ DB 'get_local'
	DB	'_entity_type (target) == ENTITY_TYPE_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA DD 06f2H ; `draw_ground_radar_clutter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA DD 05e2H ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODELPLK@LOCKED@
CONST	SEGMENT
??_C@_06KODELPLK@LOCKED@ DB 'LOCKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPKJKPH@NO?5LOS@
CONST	SEGMENT
??_C@_06HCPKJKPH@NO?5LOS@ DB 'NO LOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNNHGFM@radar@
CONST	SEGMENT
??_C@_05EMNNHGFM@radar@ DB 'radar', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA DD 0503H ; `display_radar_target_details'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBEADFGO@?$CF?40fKm@
CONST	SEGMENT
??_C@_06NBEADFGO@?$CF?40fKm@ DB '%.0fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MDIFNIHN@360@
CONST	SEGMENT
??_C@_03MDIFNIHN@360@ DB '360', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA DD 0392H ; `draw_heading_scale'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CBDEGOCN@j@
CONST	SEGMENT
??_C@_01CBDEGOCN@j@ DB 'j', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_m'
	DB	'fd.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA DD 02e8H ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?hokum_mfd_mode_names@@3PAPADA DD FLAT:??_C@_0BD@KAMKKCPK@HOKUM_MFD_MODE_OFF@ ; hokum_mfd_mode_names
	DD	FLAT:??_C@_0BH@KHPKOFKN@HOKUM_MFD_MODE_DAMAGED@
	DD	FLAT:??_C@_0BM@EMMAEMCL@HOKUM_MFD_MODE_GROUND_RADAR@
	DD	FLAT:??_C@_0BJ@FLAMDDCI@HOKUM_MFD_MODE_AIR_RADAR@
	DD	FLAT:??_C@_0BE@LMLECLFO@HOKUM_MFD_MODE_FLIR@
	DD	FLAT:??_C@_0BF@PCEGJNOM@HOKUM_MFD_MODE_LLLTV@
	DD	FLAT:??_C@_0BJ@PKAMJAL@HOKUM_MFD_MODE_PERISCOPE@
	DD	FLAT:??_C@_0BD@PAJHBHN@HOKUM_MFD_MODE_TSD@
	DD	FLAT:??_C@_0BD@HBNFOHJB@HOKUM_MFD_MODE_ASE@
	DD	FLAT:??_C@_0BG@OBGHNIKA@HOKUM_MFD_MODE_WEAPON@
	DD	FLAT:??_C@_0BG@NCMELLPD@HOKUM_MFD_MODE_SYSTEM@
	DD	FLAT:??_C@_0BG@DLIGPLMN@HOKUM_MFD_MODE_ENGINE@
	DD	FLAT:??_C@_0BG@EPBNNGKL@HOKUM_MFD_MODE_FLIGHT@
	DD	FLAT:??_C@_0BH@LPABANIH@HOKUM_MFD_MODE_MISSION@
?hokum_mfd_location_names@@3PAPADA DD FLAT:??_C@_0BN@BKIMPADE@HOKUM_MFD_LOCATION_PILOT_LHS@ ; hokum_mfd_location_names
	DD	FLAT:??_C@_0BN@KKEKNAJI@HOKUM_MFD_LOCATION_PILOT_RHS@
	DD	FLAT:??_C@_0CA@MFPLOHED@HOKUM_MFD_LOCATION_CO_PILOT_LHS@
	DD	FLAT:??_C@_0CA@HFDNMHOP@HOKUM_MFD_LOCATION_CO_PILOT_RHS@
?mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A DD FLAT:?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A ; mfd_mode_ptrs
	DD	FLAT:?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
?opposite_mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A DD FLAT:?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A ; opposite_mfd_mode_ptrs
	DD	FLAT:?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
?opposite_mfd_locations@@3PAW4HOKUM_MFD_LOCATIONS@@A DD 01H ; opposite_mfd_locations
	DD	00H
	DD	03H
	DD	02H
?small_command_heading_carat@@3PADA DB 07H		; small_command_heading_carat
	DB	04H
	DB	0fdH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?large_azimuth_marker@@3PADA DB 05H			; large_azimuth_marker
	DB	0cH
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?small_azimuth_marker@@3PADA DB 03H			; small_azimuth_marker
	DB	08H
	DB	0ffH
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?small_elevation_marker@@3PADA DB 08H			; small_elevation_marker
	DB	03H
	DB	01H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?large_elevation_marker@@3PADA DB 0cH			; large_elevation_marker
	DB	05H
	DB	01H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?large_range_marker@@3PADA DB 0cH			; large_range_marker
	DB	05H
	DB	0f4H
	DB	0feH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?small_range_marker@@3PADA DB 08H			; small_range_marker
	DB	03H
	DB	0f8H
	DB	0ffH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?large_rate_of_climb_scale_pointer@@3PADA DB 05H	; large_rate_of_climb_scale_pointer
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0eeH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0f9H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+5
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?llltv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; llltv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?llltv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; llltv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?periscope_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; periscope_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?periscope_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; periscope_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z PROC ; get_previous_mfd_mode, COMDAT

; 10518: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10519: 	hokum_mfd_modes
; 10520: 		previous_mfd_mode;
; 10521: 
; 10522: 	ASSERT (hokum_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_previo
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN4@get_previo
$LN5@get_previo:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IOEECMNE@hokum_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_previo:

; 10523: 
; 10524: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_previo
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN6@get_previo
$LN7@get_previo:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_previo:

; 10525: 
; 10526: 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0d	 cmp	 DWORD PTR tv76[ebp], 13	; 0000000dH
  0005b	77 72		 ja	 SHORT $LN2@get_previo
  0005d	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00060	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN20@get_previo[ecx*4]
$LN8@get_previo:

; 10527: 	{
; 10528: 		////////////////////////////////////////
; 10529: 		case HOKUM_MFD_MODE_OFF:
; 10530: 		////////////////////////////////////////
; 10531: 		{
; 10532: 			previous_mfd_mode = get_default_mfd_mode (mfd_location);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  00070	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10533: 
; 10534: 			break;

  00073	eb 5a		 jmp	 SHORT $LN2@get_previo
$LN9@get_previo:

; 10535: 		}
; 10536: 		////////////////////////////////////////
; 10537: 		case HOKUM_MFD_MODE_DAMAGED:
; 10538: 		////////////////////////////////////////
; 10539: 		{
; 10540: 			previous_mfd_mode = HOKUM_MFD_MODE_DAMAGED;

  00075	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 10541: 
; 10542: 			break;

  0007c	eb 51		 jmp	 SHORT $LN2@get_previo
$LN10@get_previo:

; 10543: 		}
; 10544: 		////////////////////////////////////////
; 10545: 		case HOKUM_MFD_MODE_GROUND_RADAR:
; 10546: 		case HOKUM_MFD_MODE_AIR_RADAR:
; 10547: 		////////////////////////////////////////
; 10548: 		{
; 10549: 			previous_mfd_mode = HOKUM_MFD_MODE_MISSION;

  0007e	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 13 ; 0000000dH

; 10550: 
; 10551: 			break;

  00085	eb 48		 jmp	 SHORT $LN2@get_previo
$LN11@get_previo:

; 10552: 		}
; 10553: 		////////////////////////////////////////
; 10554: 		case HOKUM_MFD_MODE_FLIR:
; 10555: 		case HOKUM_MFD_MODE_LLLTV:
; 10556: 		case HOKUM_MFD_MODE_PERISCOPE:
; 10557: 		////////////////////////////////////////
; 10558: 		{
; 10559: 			previous_mfd_mode = get_mfd_mode_for_radar();

  00087	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_radar
  0008c	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10560: 
; 10561: 			break;

  0008f	eb 3e		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 10562: 		}
; 10563: 		////////////////////////////////////////
; 10564: 		case HOKUM_MFD_MODE_TSD:
; 10565: 		////////////////////////////////////////
; 10566: 		{
; 10567: 			previous_mfd_mode = get_mfd_mode_for_eo_sensor ();

  00091	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00096	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10568: 
; 10569: 			break;

  00099	eb 34		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 10570: 		}
; 10571: 		////////////////////////////////////////
; 10572: 		case HOKUM_MFD_MODE_ASE:
; 10573: 		////////////////////////////////////////
; 10574: 		{
; 10575: 			previous_mfd_mode = HOKUM_MFD_MODE_TSD;

  0009b	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 7

; 10576: 
; 10577: 			break;

  000a2	eb 2b		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 10578: 		}
; 10579: 		////////////////////////////////////////
; 10580: 		case HOKUM_MFD_MODE_WEAPON:
; 10581: 		////////////////////////////////////////
; 10582: 		{
; 10583: 			previous_mfd_mode = HOKUM_MFD_MODE_ASE;

  000a4	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 10584: 
; 10585: 			break;

  000ab	eb 22		 jmp	 SHORT $LN2@get_previo
$LN15@get_previo:

; 10586: 		}
; 10587: 		////////////////////////////////////////
; 10588: 		case HOKUM_MFD_MODE_SYSTEM:
; 10589: 		////////////////////////////////////////
; 10590: 		{
; 10591: 			previous_mfd_mode = HOKUM_MFD_MODE_WEAPON;

  000ad	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9

; 10592: 
; 10593: 			break;

  000b4	eb 19		 jmp	 SHORT $LN2@get_previo
$LN16@get_previo:

; 10594: 		}
; 10595: 		////////////////////////////////////////
; 10596: 		case HOKUM_MFD_MODE_ENGINE:
; 10597: 		////////////////////////////////////////
; 10598: 		{
; 10599: 			previous_mfd_mode = HOKUM_MFD_MODE_SYSTEM;

  000b6	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 10 ; 0000000aH

; 10600: 
; 10601: 			break;

  000bd	eb 10		 jmp	 SHORT $LN2@get_previo
$LN17@get_previo:

; 10602: 		}
; 10603: 		////////////////////////////////////////
; 10604: 		case HOKUM_MFD_MODE_FLIGHT:
; 10605: 		////////////////////////////////////////
; 10606: 		{
; 10607: 			previous_mfd_mode = HOKUM_MFD_MODE_ENGINE;

  000bf	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 11 ; 0000000bH

; 10608: 
; 10609: 			break;

  000c6	eb 07		 jmp	 SHORT $LN2@get_previo
$LN18@get_previo:

; 10610: 		}
; 10611: 		////////////////////////////////////////
; 10612: 		case HOKUM_MFD_MODE_MISSION:
; 10613: 		////////////////////////////////////////
; 10614: 		{
; 10615: 			previous_mfd_mode = HOKUM_MFD_MODE_FLIGHT;

  000c8	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH
$LN2@get_previo:

; 10616: 
; 10617: 			break;
; 10618: 		}
; 10619: 	}
; 10620: 
; 10621: 	return (previous_mfd_mode);

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 10622: }

  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
  000db	90		 npad	 1
$LN20@get_previo:
  000dc	00 00 00 00	 DD	 $LN8@get_previo
  000e0	00 00 00 00	 DD	 $LN9@get_previo
  000e4	00 00 00 00	 DD	 $LN10@get_previo
  000e8	00 00 00 00	 DD	 $LN10@get_previo
  000ec	00 00 00 00	 DD	 $LN11@get_previo
  000f0	00 00 00 00	 DD	 $LN11@get_previo
  000f4	00 00 00 00	 DD	 $LN11@get_previo
  000f8	00 00 00 00	 DD	 $LN12@get_previo
  000fc	00 00 00 00	 DD	 $LN13@get_previo
  00100	00 00 00 00	 DD	 $LN14@get_previo
  00104	00 00 00 00	 DD	 $LN15@get_previo
  00108	00 00 00 00	 DD	 $LN16@get_previo
  0010c	00 00 00 00	 DD	 $LN17@get_previo
  00110	00 00 00 00	 DD	 $LN18@get_previo
?get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z ENDP ; get_previous_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z PROC ; get_next_mfd_mode, COMDAT

; 10393: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10394: 	hokum_mfd_modes
; 10395: 		next_mfd_mode;
; 10396: 
; 10397: 	ASSERT (hokum_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_next_m
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN4@get_next_m
$LN5@get_next_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IOEECMNE@hokum_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_next_m:

; 10398: 
; 10399: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_next_m
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN6@get_next_m
$LN7@get_next_m:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W42@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_next_m:

; 10400: 
; 10401: 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0d	 cmp	 DWORD PTR tv76[ebp], 13	; 0000000dH
  0005b	0f 87 84 00 00
	00		 ja	 $LN2@get_next_m
  00061	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00064	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@get_next_m[ecx*4]
$LN8@get_next_m:

; 10402: 	{
; 10403: 		////////////////////////////////////////
; 10404: 		case HOKUM_MFD_MODE_OFF:
; 10405: 		////////////////////////////////////////
; 10406: 		{
; 10407: 			next_mfd_mode = get_default_mfd_mode (mfd_location);

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  00074	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10408: 
; 10409: 			break;

  00077	eb 6c		 jmp	 SHORT $LN2@get_next_m
$LN9@get_next_m:

; 10410: 		}
; 10411: 		////////////////////////////////////////
; 10412: 		case HOKUM_MFD_MODE_DAMAGED:
; 10413: 		////////////////////////////////////////
; 10414: 		{
; 10415: 			next_mfd_mode = HOKUM_MFD_MODE_DAMAGED;

  00079	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 10416: 
; 10417: 			break;

  00080	eb 63		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 10418: 		}
; 10419: 		////////////////////////////////////////
; 10420: 		case HOKUM_MFD_MODE_GROUND_RADAR:
; 10421: 		case HOKUM_MFD_MODE_AIR_RADAR:
; 10422: 		////////////////////////////////////////
; 10423: 		{
; 10424: 			next_mfd_mode = get_mfd_mode_for_eo_sensor ();

  00082	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00087	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10425: 
; 10426: 			break;

  0008a	eb 59		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 10427: 		}
; 10428: 		////////////////////////////////////////
; 10429: 		case HOKUM_MFD_MODE_FLIR:
; 10430: 		////////////////////////////////////////
; 10431: 		{
; 10432: 			next_mfd_mode = HOKUM_MFD_MODE_TSD;

  0008c	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 10433: 
; 10434: 			break;

  00093	eb 50		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 10435: 		}
; 10436: 		////////////////////////////////////////
; 10437: 		case HOKUM_MFD_MODE_LLLTV:
; 10438: 		////////////////////////////////////////
; 10439: 		{
; 10440: 			next_mfd_mode = HOKUM_MFD_MODE_TSD;

  00095	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 10441: 
; 10442: 			break;

  0009c	eb 47		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 10443: 		}
; 10444: 		////////////////////////////////////////
; 10445: 		case HOKUM_MFD_MODE_PERISCOPE:
; 10446: 		////////////////////////////////////////
; 10447: 		{
; 10448: 			next_mfd_mode = HOKUM_MFD_MODE_TSD;

  0009e	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 10449: 
; 10450: 			break;

  000a5	eb 3e		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 10451: 		}
; 10452: 		////////////////////////////////////////
; 10453: 		case HOKUM_MFD_MODE_TSD:
; 10454: 		////////////////////////////////////////
; 10455: 		{
; 10456: 			next_mfd_mode = HOKUM_MFD_MODE_ASE;

  000a7	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 10457: 
; 10458: 			break;

  000ae	eb 35		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 10459: 		}
; 10460: 		////////////////////////////////////////
; 10461: 		case HOKUM_MFD_MODE_ASE:
; 10462: 		////////////////////////////////////////
; 10463: 		{
; 10464: 			next_mfd_mode = HOKUM_MFD_MODE_WEAPON;

  000b0	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 10465: 
; 10466: 			break;

  000b7	eb 2c		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 10467: 		}
; 10468: 		////////////////////////////////////////
; 10469: 		case HOKUM_MFD_MODE_WEAPON:
; 10470: 		////////////////////////////////////////
; 10471: 		{
; 10472: 			next_mfd_mode = HOKUM_MFD_MODE_SYSTEM;

  000b9	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 10 ; 0000000aH

; 10473: 
; 10474: 			break;

  000c0	eb 23		 jmp	 SHORT $LN2@get_next_m
$LN17@get_next_m:

; 10475: 		}
; 10476: 		////////////////////////////////////////
; 10477: 		case HOKUM_MFD_MODE_SYSTEM:
; 10478: 		////////////////////////////////////////
; 10479: 		{
; 10480: 			next_mfd_mode = HOKUM_MFD_MODE_ENGINE;

  000c2	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 11 ; 0000000bH

; 10481: 
; 10482: 			break;

  000c9	eb 1a		 jmp	 SHORT $LN2@get_next_m
$LN18@get_next_m:

; 10483: 		}
; 10484: 		////////////////////////////////////////
; 10485: 		case HOKUM_MFD_MODE_ENGINE:
; 10486: 		////////////////////////////////////////
; 10487: 		{
; 10488: 			next_mfd_mode = HOKUM_MFD_MODE_FLIGHT;

  000cb	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 12 ; 0000000cH

; 10489: 
; 10490: 			break;

  000d2	eb 11		 jmp	 SHORT $LN2@get_next_m
$LN19@get_next_m:

; 10491: 		}
; 10492: 		////////////////////////////////////////
; 10493: 		case HOKUM_MFD_MODE_FLIGHT:
; 10494: 		////////////////////////////////////////
; 10495: 		{
; 10496: 			next_mfd_mode = HOKUM_MFD_MODE_MISSION;

  000d4	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 13 ; 0000000dH

; 10497: 
; 10498: 			break;

  000db	eb 08		 jmp	 SHORT $LN2@get_next_m
$LN20@get_next_m:

; 10499: 		}
; 10500: 		////////////////////////////////////////
; 10501: 		case HOKUM_MFD_MODE_MISSION:
; 10502: 		////////////////////////////////////////
; 10503: 		{
; 10504: 			next_mfd_mode = get_mfd_mode_for_radar();

  000dd	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_radar
  000e2	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN2@get_next_m:

; 10505: 
; 10506: 			break;
; 10507: 		}
; 10508: 	}
; 10509: 
; 10510: 	return (next_mfd_mode);

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 10511: }

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
  000f1	0f 1f 00	 npad	 3
$LN22@get_next_m:
  000f4	00 00 00 00	 DD	 $LN8@get_next_m
  000f8	00 00 00 00	 DD	 $LN9@get_next_m
  000fc	00 00 00 00	 DD	 $LN10@get_next_m
  00100	00 00 00 00	 DD	 $LN10@get_next_m
  00104	00 00 00 00	 DD	 $LN11@get_next_m
  00108	00 00 00 00	 DD	 $LN12@get_next_m
  0010c	00 00 00 00	 DD	 $LN13@get_next_m
  00110	00 00 00 00	 DD	 $LN14@get_next_m
  00114	00 00 00 00	 DD	 $LN15@get_next_m
  00118	00 00 00 00	 DD	 $LN16@get_next_m
  0011c	00 00 00 00	 DD	 $LN17@get_next_m
  00120	00 00 00 00	 DD	 $LN18@get_next_m
  00124	00 00 00 00	 DD	 $LN19@get_next_m
  00128	00 00 00 00	 DD	 $LN20@get_next_m
?get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z ENDP ; get_next_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_damage$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z PROC	; get_mfd_damage, COMDAT

; 10292: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10293: 	int
; 10294: 		damage;
; 10295: 
; 10296: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_mfd_da
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_mfd_da
$LN5@get_mfd_da:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_mfd_da:

; 10297: 
; 10298: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 03	 cmp	 DWORD PTR tv70[ebp], 3
  00037	77 48		 ja	 SHORT $LN2@get_mfd_da
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@get_mfd_da[ecx*4]
$LN6@get_mfd_da:

; 10299: 	{
; 10300: 		////////////////////////////////////////
; 10301: 		case HOKUM_MFD_LOCATION_PILOT_LHS:
; 10302: 		////////////////////////////////////////
; 10303: 		{
; 10304: 			damage = hokum_damage.pilot_lh_mfd;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00048	c1 e8 11	 shr	 eax, 17			; 00000011H
  0004b	83 e0 01	 and	 eax, 1
  0004e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10305: 
; 10306: 			break;

  00051	eb 2e		 jmp	 SHORT $LN2@get_mfd_da
$LN7@get_mfd_da:

; 10307: 		}
; 10308: 		////////////////////////////////////////
; 10309: 		case HOKUM_MFD_LOCATION_PILOT_RHS:
; 10310: 		////////////////////////////////////////
; 10311: 		{
; 10312: 			damage = hokum_damage.pilot_rh_mfd;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00058	c1 e8 12	 shr	 eax, 18			; 00000012H
  0005b	83 e0 01	 and	 eax, 1
  0005e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10313: 
; 10314: 			break;

  00061	eb 1e		 jmp	 SHORT $LN2@get_mfd_da
$LN8@get_mfd_da:

; 10315: 		}
; 10316: 		////////////////////////////////////////
; 10317: 		case HOKUM_MFD_LOCATION_CO_PILOT_LHS:
; 10318: 		////////////////////////////////////////
; 10319: 		{
; 10320: 			damage = hokum_damage.co_pilot_lh_mfd;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00068	c1 e8 13	 shr	 eax, 19			; 00000013H
  0006b	83 e0 01	 and	 eax, 1
  0006e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 10321: 
; 10322: 			break;

  00071	eb 0e		 jmp	 SHORT $LN2@get_mfd_da
$LN9@get_mfd_da:

; 10323: 		}
; 10324: 		////////////////////////////////////////
; 10325: 		case HOKUM_MFD_LOCATION_CO_PILOT_RHS:
; 10326: 		////////////////////////////////////////
; 10327: 		{
; 10328: 			damage = hokum_damage.co_pilot_rh_mfd;

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00078	c1 e8 15	 shr	 eax, 21			; 00000015H
  0007b	83 e0 01	 and	 eax, 1
  0007e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax
$LN2@get_mfd_da:

; 10329: 
; 10330: 			break;
; 10331: 		}
; 10332: 	}
; 10333: 
; 10334: 	return (damage);

  00081	8b 45 fc	 mov	 eax, DWORD PTR _damage$[ebp]

; 10335: }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
  0008d	0f 1f 00	 npad	 3
$LN11@get_mfd_da:
  00090	00 00 00 00	 DD	 $LN6@get_mfd_da
  00094	00 00 00 00	 DD	 $LN7@get_mfd_da
  00098	00 00 00 00	 DD	 $LN8@get_mfd_da
  0009c	00 00 00 00	 DD	 $LN9@get_mfd_da
?get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ENDP	; get_mfd_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_mfd_mode$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z PROC ; get_default_mfd_mode, COMDAT

; 10242: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10243: 	hokum_mfd_modes
; 10244: 		mfd_mode;
; 10245: 
; 10246: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_defaul
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_defaul
$LN5@get_defaul:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_defaul:

; 10247: 
; 10248: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 03	 cmp	 DWORD PTR tv70[ebp], 3
  00037	77 2c		 ja	 SHORT $LN2@get_defaul
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@get_defaul[ecx*4]
$LN6@get_defaul:

; 10249: 	{
; 10250: 		////////////////////////////////////////
; 10251: 		case HOKUM_MFD_LOCATION_PILOT_LHS:
; 10252: 		////////////////////////////////////////
; 10253: 		{
; 10254: 			mfd_mode = HOKUM_MFD_MODE_ENGINE;

  00043	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH

; 10255: 
; 10256: 			break;

  0004a	eb 19		 jmp	 SHORT $LN2@get_defaul
$LN7@get_defaul:

; 10257: 		}
; 10258: 		////////////////////////////////////////
; 10259: 		case HOKUM_MFD_LOCATION_PILOT_RHS:
; 10260: 		////////////////////////////////////////
; 10261: 		{
; 10262: 			mfd_mode = HOKUM_MFD_MODE_TSD;

  0004c	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 7

; 10263: 
; 10264: 			break;

  00053	eb 10		 jmp	 SHORT $LN2@get_defaul
$LN8@get_defaul:

; 10265: 		}
; 10266: 		////////////////////////////////////////
; 10267: 		case HOKUM_MFD_LOCATION_CO_PILOT_LHS:
; 10268: 		////////////////////////////////////////
; 10269: 		{
; 10270: 			mfd_mode = HOKUM_MFD_MODE_WEAPON;

  00055	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 9

; 10271: 
; 10272: 			break;

  0005c	eb 07		 jmp	 SHORT $LN2@get_defaul
$LN9@get_defaul:

; 10273: 		}
; 10274: 		////////////////////////////////////////
; 10275: 		case HOKUM_MFD_LOCATION_CO_PILOT_RHS:
; 10276: 		////////////////////////////////////////
; 10277: 		{
; 10278: 			mfd_mode = HOKUM_MFD_MODE_TSD;

  0005e	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 7
$LN2@get_defaul:

; 10279: 
; 10280: 			break;
; 10281: 		}
; 10282: 	}
; 10283: 
; 10284: 	return (mfd_mode);

  00065	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 10285: }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
  00071	0f 1f 00	 npad	 3
$LN11@get_defaul:
  00074	00 00 00 00	 DD	 $LN6@get_defaul
  00078	00 00 00 00	 DD	 $LN7@get_defaul
  0007c	00 00 00 00	 DD	 $LN8@get_defaul
  00080	00 00 00 00	 DD	 $LN9@get_defaul
?get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ENDP ; get_default_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_mfd_mode_for_radar@@YG?AW4HOKUM_MFD_MODES@@XZ
_TEXT	SEGMENT
?get_mfd_mode_for_radar@@YG?AW4HOKUM_MFD_MODES@@XZ PROC	; get_mfd_mode_for_radar, COMDAT

; 10230: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10231: 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR || air_radar_is_active())

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00010	74 09		 je	 SHORT $LN3@get_mfd_mo
  00012	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $LN2@get_mfd_mo
$LN3@get_mfd_mo:

; 10232: 		return HOKUM_MFD_MODE_AIR_RADAR;

  0001b	b8 03 00 00 00	 mov	 eax, 3
  00020	eb 05		 jmp	 SHORT $LN1@get_mfd_mo
$LN2@get_mfd_mo:

; 10233: 
; 10234: 	return HOKUM_MFD_MODE_GROUND_RADAR;

  00022	b8 02 00 00 00	 mov	 eax, 2
$LN1@get_mfd_mo:

; 10235: }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?get_mfd_mode_for_radar@@YG?AW4HOKUM_MFD_MODES@@XZ ENDP	; get_mfd_mode_for_radar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv290 = -380						; size = 4
tv90 = -380						; size = 4
_width$1 = -312						; size = 4
_specular$2 = -308					; size = 4
_colour$3 = -304					; size = 4
_quad$4 = -300						; size = 256
_store_background_colour$ = -44				; size = 4
_store_road_colour$ = -40				; size = 4
_store_river_colour$ = -36				; size = 4
_store_contour_colour$ = -32				; size = 4
_store_colour6$ = -28					; size = 4
_store_colour5$ = -24					; size = 4
_store_colour4$ = -20					; size = 4
_store_colour3$ = -16					; size = 4
_store_colour2$ = -12					; size = 4
_store_colour1$ = -8					; size = 4
_border_size$ = -4					; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z PROC ; draw_overlaid_mfd, COMDAT

; 9365 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9366 : 	float
; 9367 : 		border_size;
; 9368 : 
; 9369 : 	rgb_colour
; 9370 : 		store_colour1,
; 9371 : 		store_colour2,
; 9372 : 		store_colour3,
; 9373 : 		store_colour4,
; 9374 : 		store_colour5,
; 9375 : 		store_colour6,
; 9376 : 		store_contour_colour,
; 9377 : 		store_river_colour,
; 9378 : 		store_road_colour,
; 9379 : 		store_background_colour;
; 9380 : 
; 9381 : 	ASSERT (mfd_screen);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_overl
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00017	83 c0 10	 add	 eax, 16			; 00000010H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 9382 : 
; 9383 : 	ASSERT (hokum_mfd_mode_valid (mode));

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0002e	7c 06		 jl	 SHORT $LN8@draw_overl
  00030	83 7d 0c 0e	 cmp	 DWORD PTR _mode$[ebp], 14 ; 0000000eH
  00034	7c 18		 jl	 SHORT $LN7@draw_overl
$LN8@draw_overl:
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0003b	83 c0 12	 add	 eax, 18			; 00000012H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IIDHEHMK@hokum_mfd_mode_valid?5?$CImode?$CJ@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_overl:

; 9384 : 
; 9385 : 	ASSERT (hokum_mfd_location_valid (location));

  0004e	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00052	7c 06		 jl	 SHORT $LN10@draw_overl
  00054	83 7d 10 04	 cmp	 DWORD PTR _location$[ebp], 4
  00058	7c 18		 jl	 SHORT $LN9@draw_overl
$LN10@draw_overl:
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0005f	83 c0 14	 add	 eax, 20			; 00000014H
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BONEDLA@hokum_mfd_location_valid?5?$CIlocat@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@draw_overl:

; 9386 : 
; 9387 : 	if (mode == HOKUM_MFD_MODE_OFF)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00076	75 05		 jne	 SHORT $LN11@draw_overl

; 9388 : 	{
; 9389 : 		return;

  00078	e9 5a 15 00 00	 jmp	 $LN1@draw_overl
$LN11@draw_overl:

; 9390 : 	}
; 9391 : 
; 9392 : 	////////////////////////////////////////
; 9393 : 	//
; 9394 : 	// scale position and size wrt screen resolution
; 9395 : 	//
; 9396 : 	////////////////////////////////////////
; 9397 : 
; 9398 : 	border_size = 4.0 * full_screen_width * (1.0 / 640.0);

  0007d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00085	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  0008d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 fc	 movss	 DWORD PTR _border_size$[ebp], xmm0

; 9399 : 
; 9400 : 	if (get_global_unscaled_displays ())

  0009e	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  000a5	74 12		 je	 SHORT $LN12@draw_overl

; 9401 : 	{
; 9402 : 		mfd_screen_width = mfd_viewport_size;

  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  000af	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 9403 : 	}
; 9404 : 	else

  000b7	eb 1c		 jmp	 SHORT $LN13@draw_overl
$LN12@draw_overl:

; 9405 : 	{
; 9406 : 		mfd_screen_width = full_screen_width * (128.0 / 640.0);

  000b9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  000c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0
$LN13@draw_overl:

; 9407 : 	}
; 9408 : 
; 9409 : 	mfd_screen_height = mfd_screen_width;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  000dd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 9410 : 
; 9411 : 	switch (location)

  000e5	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  000e8	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  000ee	83 bd 84 fe ff
	ff 03		 cmp	 DWORD PTR tv90[ebp], 3
  000f5	77 73		 ja	 SHORT $LN2@draw_overl
  000f7	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  000fd	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN58@draw_overl[ecx*4]
$LN14@draw_overl:

; 9412 : 	{
; 9413 : 		////////////////////////////////////////
; 9414 : 		case HOKUM_MFD_LOCATION_PILOT_LHS:
; 9415 : 		case HOKUM_MFD_LOCATION_CO_PILOT_LHS:
; 9416 : 		////////////////////////////////////////
; 9417 : 		{
; 9418 : 			mfd_screen_x_min = border_size;

  00104	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _border_size$[ebp]
  00109	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 9419 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  00111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00119	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0011e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00126	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 9420 : 
; 9421 : 			break;

  0012e	eb 3a		 jmp	 SHORT $LN2@draw_overl
$LN15@draw_overl:

; 9422 : 		}
; 9423 : 		////////////////////////////////////////
; 9424 : 		case HOKUM_MFD_LOCATION_PILOT_RHS:
; 9425 : 		case HOKUM_MFD_LOCATION_CO_PILOT_RHS:
; 9426 : 		////////////////////////////////////////
; 9427 : 		{
; 9428 : 			mfd_screen_x_min = full_screen_width - border_size - mfd_screen_width;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_width@@3MA
  00138	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0013d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00145	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 9429 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  0014d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00155	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0015a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00162	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0
$LN2@draw_overl:

; 9430 : 
; 9431 : 			break;
; 9432 : 		}
; 9433 : 	}
; 9434 : 
; 9435 : 	mfd_screen_x_max = mfd_screen_x_min + mfd_screen_width - 0.0001;

  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00172	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  0017a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0017e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00186	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 9436 : 	mfd_screen_y_max = mfd_screen_y_min + mfd_screen_height - 0.0001;

  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0019a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001a2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001a6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  001ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 9437 : 
; 9438 : 	mfd_screen_x_scale = mfd_viewport_size / mfd_screen_width;

  001ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001c2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  001ca	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 9439 : 	mfd_screen_y_scale = mfd_viewport_size / mfd_screen_height;

  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001da	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001e2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 9440 : 
; 9441 : 	////////////////////////////////////////
; 9442 : 	//
; 9443 : 	// store colours
; 9444 : 	//
; 9445 : 	////////////////////////////////////////
; 9446 : 
; 9447 : 	store_colour1				= MFD_COLOUR1;

  001ea	b8 04 00 00 00	 mov	 eax, 4
  001ef	6b c8 00	 imul	 ecx, eax, 0
  001f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f8	89 55 f8	 mov	 DWORD PTR _store_colour1$[ebp], edx

; 9448 : 	store_colour2				= MFD_COLOUR2;

  001fb	b8 04 00 00 00	 mov	 eax, 4
  00200	c1 e0 00	 shl	 eax, 0
  00203	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00209	89 4d f4	 mov	 DWORD PTR _store_colour2$[ebp], ecx

; 9449 : 	store_colour3				= MFD_COLOUR3;

  0020c	b8 04 00 00 00	 mov	 eax, 4
  00211	d1 e0		 shl	 eax, 1
  00213	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00219	89 4d f0	 mov	 DWORD PTR _store_colour3$[ebp], ecx

; 9450 : 	store_colour4				= MFD_COLOUR4;

  0021c	b8 04 00 00 00	 mov	 eax, 4
  00221	6b c8 03	 imul	 ecx, eax, 3
  00224	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022a	89 55 ec	 mov	 DWORD PTR _store_colour4$[ebp], edx

; 9451 : 	store_colour5				= MFD_COLOUR5;

  0022d	b8 04 00 00 00	 mov	 eax, 4
  00232	c1 e0 02	 shl	 eax, 2
  00235	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0023b	89 4d e8	 mov	 DWORD PTR _store_colour5$[ebp], ecx

; 9452 : 	store_colour6				= MFD_COLOUR6;

  0023e	b8 04 00 00 00	 mov	 eax, 4
  00243	6b c8 05	 imul	 ecx, eax, 5
  00246	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0024c	89 55 e4	 mov	 DWORD PTR _store_colour6$[ebp], edx

; 9453 : 	store_contour_colour		= MFD_CONTOUR_COLOUR;

  0024f	b8 04 00 00 00	 mov	 eax, 4
  00254	6b c8 06	 imul	 ecx, eax, 6
  00257	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0025d	89 55 e0	 mov	 DWORD PTR _store_contour_colour$[ebp], edx

; 9454 : 	store_river_colour		= MFD_RIVER_COLOUR;

  00260	b8 04 00 00 00	 mov	 eax, 4
  00265	6b c8 07	 imul	 ecx, eax, 7
  00268	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0026e	89 55 dc	 mov	 DWORD PTR _store_river_colour$[ebp], edx

; 9455 : 	store_road_colour			= MFD_ROAD_COLOUR;

  00271	b8 04 00 00 00	 mov	 eax, 4
  00276	c1 e0 03	 shl	 eax, 3
  00279	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0027f	89 4d d8	 mov	 DWORD PTR _store_road_colour$[ebp], ecx

; 9456 : 	store_background_colour	= MFD_BACKGROUND_COLOUR;

  00282	b8 04 00 00 00	 mov	 eax, 4
  00287	6b c8 09	 imul	 ecx, eax, 9
  0028a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00290	89 55 d4	 mov	 DWORD PTR _store_background_colour$[ebp], edx

; 9457 : 
; 9458 : 	set_rgb_colour (MFD_COLOUR1,            255, 255,   0, 255);

  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	6b c8 00	 imul	 ecx, eax, 0
  0029b	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  002a2	b8 04 00 00 00	 mov	 eax, 4
  002a7	6b c8 00	 imul	 ecx, eax, 0
  002aa	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  002b1	b8 04 00 00 00	 mov	 eax, 4
  002b6	6b c8 00	 imul	 ecx, eax, 0
  002b9	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  002c0	b8 04 00 00 00	 mov	 eax, 4
  002c5	6b c8 00	 imul	 ecx, eax, 0
  002c8	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9459 : 	set_rgb_colour (MFD_COLOUR2,            200, 200,   0, 255);

  002cf	b8 04 00 00 00	 mov	 eax, 4
  002d4	c1 e0 00	 shl	 eax, 0
  002d7	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  002de	b8 04 00 00 00	 mov	 eax, 4
  002e3	c1 e0 00	 shl	 eax, 0
  002e6	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  002ed	b8 04 00 00 00	 mov	 eax, 4
  002f2	c1 e0 00	 shl	 eax, 0
  002f5	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  002fc	b8 04 00 00 00	 mov	 eax, 4
  00301	c1 e0 00	 shl	 eax, 0
  00304	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 9460 : 	set_rgb_colour (MFD_COLOUR3,            176, 176,   0, 255);

  0030b	b8 04 00 00 00	 mov	 eax, 4
  00310	d1 e0		 shl	 eax, 1
  00312	c6 80 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 176 ; 000000b0H
  00319	b8 04 00 00 00	 mov	 eax, 4
  0031e	d1 e0		 shl	 eax, 1
  00320	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  00327	b8 04 00 00 00	 mov	 eax, 4
  0032c	d1 e0		 shl	 eax, 1
  0032e	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00335	b8 04 00 00 00	 mov	 eax, 4
  0033a	d1 e0		 shl	 eax, 1
  0033c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 9461 : 	set_rgb_colour (MFD_COLOUR4,            151, 151,   0, 255);

  00343	b8 04 00 00 00	 mov	 eax, 4
  00348	6b c8 03	 imul	 ecx, eax, 3
  0034b	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  00352	b8 04 00 00 00	 mov	 eax, 4
  00357	6b c8 03	 imul	 ecx, eax, 3
  0035a	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00361	b8 04 00 00 00	 mov	 eax, 4
  00366	6b c8 03	 imul	 ecx, eax, 3
  00369	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 03	 imul	 ecx, eax, 3
  00378	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9462 : 	set_rgb_colour (MFD_COLOUR5,            140, 140,   0, 255);

  0037f	b8 04 00 00 00	 mov	 eax, 4
  00384	c1 e0 02	 shl	 eax, 2
  00387	c6 80 02 00 00
	00 8c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 140 ; 0000008cH
  0038e	b8 04 00 00 00	 mov	 eax, 4
  00393	c1 e0 02	 shl	 eax, 2
  00396	c6 80 01 00 00
	00 8c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 140 ; 0000008cH
  0039d	b8 04 00 00 00	 mov	 eax, 4
  003a2	c1 e0 02	 shl	 eax, 2
  003a5	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  003ac	b8 04 00 00 00	 mov	 eax, 4
  003b1	c1 e0 02	 shl	 eax, 2
  003b4	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 9463 : 	set_rgb_colour (MFD_COLOUR6,             80,  52,   8, 255);

  003bb	b8 04 00 00 00	 mov	 eax, 4
  003c0	6b c8 05	 imul	 ecx, eax, 5
  003c3	c6 81 02 00 00
	00 50		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 80 ; 00000050H
  003ca	b8 04 00 00 00	 mov	 eax, 4
  003cf	6b c8 05	 imul	 ecx, eax, 5
  003d2	c6 81 01 00 00
	00 34		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 52 ; 00000034H
  003d9	b8 04 00 00 00	 mov	 eax, 4
  003de	6b c8 05	 imul	 ecx, eax, 5
  003e1	c6 81 00 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 8
  003e8	b8 04 00 00 00	 mov	 eax, 4
  003ed	6b c8 05	 imul	 ecx, eax, 5
  003f0	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9464 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     151, 151,   0, 255);

  003f7	b8 04 00 00 00	 mov	 eax, 4
  003fc	6b c8 06	 imul	 ecx, eax, 6
  003ff	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  00406	b8 04 00 00 00	 mov	 eax, 4
  0040b	6b c8 06	 imul	 ecx, eax, 6
  0040e	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00415	b8 04 00 00 00	 mov	 eax, 4
  0041a	6b c8 06	 imul	 ecx, eax, 6
  0041d	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00424	b8 04 00 00 00	 mov	 eax, 4
  00429	6b c8 06	 imul	 ecx, eax, 6
  0042c	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9465 : 	set_rgb_colour (MFD_RIVER_COLOUR,       176, 176,   0, 255);

  00433	b8 04 00 00 00	 mov	 eax, 4
  00438	6b c8 07	 imul	 ecx, eax, 7
  0043b	c6 81 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 176 ; 000000b0H
  00442	b8 04 00 00 00	 mov	 eax, 4
  00447	6b c8 07	 imul	 ecx, eax, 7
  0044a	c6 81 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 176 ; 000000b0H
  00451	b8 04 00 00 00	 mov	 eax, 4
  00456	6b c8 07	 imul	 ecx, eax, 7
  00459	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00460	b8 04 00 00 00	 mov	 eax, 4
  00465	6b c8 07	 imul	 ecx, eax, 7
  00468	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 9466 : 	set_rgb_colour (MFD_ROAD_COLOUR,        200, 200,   0, 255);

  0046f	b8 04 00 00 00	 mov	 eax, 4
  00474	c1 e0 03	 shl	 eax, 3
  00477	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  0047e	b8 04 00 00 00	 mov	 eax, 4
  00483	c1 e0 03	 shl	 eax, 3
  00486	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  0048d	b8 04 00 00 00	 mov	 eax, 4
  00492	c1 e0 03	 shl	 eax, 3
  00495	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0049c	b8 04 00 00 00	 mov	 eax, 4
  004a1	c1 e0 03	 shl	 eax, 3
  004a4	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 9467 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,  255, 255, 255,   0);

  004ab	b8 04 00 00 00	 mov	 eax, 4
  004b0	6b c8 09	 imul	 ecx, eax, 9
  004b3	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  004ba	b8 04 00 00 00	 mov	 eax, 4
  004bf	6b c8 09	 imul	 ecx, eax, 9
  004c2	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  004c9	b8 04 00 00 00	 mov	 eax, 4
  004ce	6b c8 09	 imul	 ecx, eax, 9
  004d1	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  004d8	b8 04 00 00 00	 mov	 eax, 4
  004dd	6b c8 09	 imul	 ecx, eax, 9
  004e0	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 9468 : 
; 9469 : 	////////////////////////////////////////
; 9470 : 	//
; 9471 : 	// draw MFD display
; 9472 : 	//
; 9473 : 	////////////////////////////////////////
; 9474 : 
; 9475 : 	switch (mode)

  004e7	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  004ea	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  004f0	83 bd 84 fe ff
	ff 0d		 cmp	 DWORD PTR tv290[ebp], 13 ; 0000000dH
  004f7	0f 87 2d 0c 00
	00		 ja	 $LN50@draw_overl
  004fd	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  00503	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN59@draw_overl[ecx*4]
$LN16@draw_overl:

; 9476 : 	{
; 9477 : 		////////////////////////////////////////
; 9478 : 		case HOKUM_MFD_MODE_OFF:
; 9479 : 		////////////////////////////////////////
; 9480 : 		{
; 9481 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0050a	51		 push	 ecx
  0050b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	51		 push	 ecx
  00519	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00526	51		 push	 ecx
  00527	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0052f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00534	51		 push	 ecx
  00535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00547	50		 push	 eax
  00548	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9482 : 
; 9483 : 			set_active_screen (mfd_screen);

  0054d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00550	50		 push	 eax
  00551	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9484 : 
; 9485 : 			if (lock_screen (mfd_screen))

  00556	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00559	50		 push	 eax
  0055a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0055f	85 c0		 test	 eax, eax
  00561	74 3a		 je	 SHORT $LN17@draw_overl

; 9486 : 			{
; 9487 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00563	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00568	50		 push	 eax
  00569	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0056f	83 e9 01	 sub	 ecx, 1
  00572	51		 push	 ecx
  00573	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00579	83 ea 01	 sub	 edx, 1
  0057c	52		 push	 edx
  0057d	6a 00		 push	 0
  0057f	6a 00		 push	 0
  00581	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9488 : 
; 9489 : 				draw_layout_grid ();

  00586	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9490 : 
; 9491 : 				flush_screen_texture_graphics (mfd_screen);

  0058b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0058e	50		 push	 eax
  0058f	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9492 : 
; 9493 : 				unlock_screen (mfd_screen);

  00594	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_overl:

; 9494 : 			}
; 9495 : 
; 9496 : 			break;

  0059d	e9 99 0b 00 00	 jmp	 $LN4@draw_overl
$LN18@draw_overl:

; 9497 : 		}
; 9498 : 		////////////////////////////////////////
; 9499 : 		case HOKUM_MFD_MODE_DAMAGED:
; 9500 : 		////////////////////////////////////////
; 9501 : 		{
; 9502 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  005a2	51		 push	 ecx
  005a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  005ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b0	51		 push	 ecx
  005b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  005b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005be	51		 push	 ecx
  005bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  005c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cc	51		 push	 ecx
  005cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9503 : 
; 9504 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005df	51		 push	 ecx
  005e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ed	51		 push	 ecx
  005ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fb	51		 push	 ecx
  005fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00604	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00609	51		 push	 ecx
  0060a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0061c	50		 push	 eax
  0061d	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9505 : 
; 9506 : 			set_active_screen (mfd_screen);

  00622	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00625	50		 push	 eax
  00626	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9507 : 
; 9508 : 			if (lock_screen (mfd_screen))

  0062b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0062e	50		 push	 eax
  0062f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00634	85 c0		 test	 eax, eax
  00636	74 3f		 je	 SHORT $LN19@draw_overl

; 9509 : 			{
; 9510 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00638	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0063d	50		 push	 eax
  0063e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00644	83 e9 01	 sub	 ecx, 1
  00647	51		 push	 ecx
  00648	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0064e	83 ea 01	 sub	 edx, 1
  00651	52		 push	 edx
  00652	6a 00		 push	 0
  00654	6a 00		 push	 0
  00656	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9511 : 
; 9512 : 				draw_layout_grid ();

  0065b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9513 : 
; 9514 : 				draw_overlaid_damaged_mfd ();

  00660	e8 00 00 00 00	 call	 ?draw_overlaid_damaged_mfd@@YGXXZ ; draw_overlaid_damaged_mfd

; 9515 : 
; 9516 : 				flush_screen_texture_graphics (mfd_screen);

  00665	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00668	50		 push	 eax
  00669	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9517 : 
; 9518 : 				unlock_screen (mfd_screen);

  0066e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00671	50		 push	 eax
  00672	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_overl:

; 9519 : 			}
; 9520 : 
; 9521 : 			break;

  00677	e9 bf 0a 00 00	 jmp	 $LN4@draw_overl
$LN20@draw_overl:

; 9522 : 		}
; 9523 : 		////////////////////////////////////////
; 9524 : 		case HOKUM_MFD_MODE_GROUND_RADAR:
; 9525 : 		////////////////////////////////////////
; 9526 : 		{
; 9527 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0067c	51		 push	 ecx
  0067d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00685	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	51		 push	 ecx
  00699	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  006a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a6	51		 push	 ecx
  006a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  006af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b4	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9528 : 
; 9529 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  006b9	51		 push	 ecx
  006ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  006c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c7	51		 push	 ecx
  006c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	51		 push	 ecx
  006d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  006de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e3	51		 push	 ecx
  006e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  006ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006f6	50		 push	 eax
  006f7	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9530 : 
; 9531 : 			set_active_screen (mfd_screen);

  006fc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  006ff	50		 push	 eax
  00700	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9532 : 
; 9533 : 			if (lock_screen (mfd_screen))

  00705	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0070e	85 c0		 test	 eax, eax
  00710	74 3f		 je	 SHORT $LN21@draw_overl

; 9534 : 			{
; 9535 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00717	50		 push	 eax
  00718	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0071e	83 e9 01	 sub	 ecx, 1
  00721	51		 push	 ecx
  00722	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00728	83 ea 01	 sub	 edx, 1
  0072b	52		 push	 edx
  0072c	6a 00		 push	 0
  0072e	6a 00		 push	 0
  00730	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9536 : 
; 9537 : 				draw_layout_grid ();

  00735	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9538 : 
; 9539 : 				draw_ground_radar_mfd ();

  0073a	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 9540 : 
; 9541 : 				flush_screen_texture_graphics (mfd_screen);

  0073f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00742	50		 push	 eax
  00743	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9542 : 
; 9543 : 				unlock_screen (mfd_screen);

  00748	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0074b	50		 push	 eax
  0074c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN21@draw_overl:

; 9544 : 			}
; 9545 : 
; 9546 : 			break;

  00751	e9 e5 09 00 00	 jmp	 $LN4@draw_overl
$LN22@draw_overl:

; 9547 : 		}
; 9548 : 		////////////////////////////////////////
; 9549 : 		case HOKUM_MFD_MODE_AIR_RADAR:
; 9550 : 		////////////////////////////////////////
; 9551 : 		{
; 9552 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00756	51		 push	 ecx
  00757	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0075f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00764	51		 push	 ecx
  00765	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0076d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00772	51		 push	 ecx
  00773	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0077b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00780	51		 push	 ecx
  00781	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00789	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078e	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9553 : 
; 9554 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00793	51		 push	 ecx
  00794	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0079c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a1	51		 push	 ecx
  007a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007af	51		 push	 ecx
  007b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bd	51		 push	 ecx
  007be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007d0	50		 push	 eax
  007d1	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9555 : 
; 9556 : 			set_active_screen (mfd_screen);

  007d6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007d9	50		 push	 eax
  007da	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9557 : 
; 9558 : 			if (lock_screen (mfd_screen))

  007df	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007e2	50		 push	 eax
  007e3	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  007e8	85 c0		 test	 eax, eax
  007ea	74 3f		 je	 SHORT $LN23@draw_overl

; 9559 : 			{
; 9560 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  007ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  007f1	50		 push	 eax
  007f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  007f8	83 e9 01	 sub	 ecx, 1
  007fb	51		 push	 ecx
  007fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00802	83 ea 01	 sub	 edx, 1
  00805	52		 push	 edx
  00806	6a 00		 push	 0
  00808	6a 00		 push	 0
  0080a	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9561 : 
; 9562 : 				draw_layout_grid ();

  0080f	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9563 : 
; 9564 : 				draw_air_radar_mfd ();

  00814	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 9565 : 
; 9566 : 				flush_screen_texture_graphics (mfd_screen);

  00819	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0081c	50		 push	 eax
  0081d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9567 : 
; 9568 : 				unlock_screen (mfd_screen);

  00822	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00825	50		 push	 eax
  00826	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_overl:

; 9569 : 			}
; 9570 : 
; 9571 : 			break;

  0082b	e9 0b 09 00 00	 jmp	 $LN4@draw_overl
$LN24@draw_overl:

; 9572 : 		}
; 9573 : 		////////////////////////////////////////
; 9574 : 		case HOKUM_MFD_MODE_FLIR:
; 9575 : 		////////////////////////////////////////
; 9576 : 		{
; 9577 : 			if (!hokum_damage.flir)

  00830	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00835	d1 e8		 shr	 eax, 1
  00837	83 e0 01	 and	 eax, 1
  0083a	75 10		 jne	 SHORT $LN25@draw_overl

; 9578 : 			{
; 9579 : 				draw_full_screen_3d_eo_display (&hokum_flir, TARGET_ACQUISITION_SYSTEM_FLIR, DISPLAY_3D_TINT_AMBER);

  0083c	6a 01		 push	 1
  0083e	6a 03		 push	 3
  00840	68 00 00 00 00	 push	 OFFSET ?hokum_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_flir
  00845	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 9580 : 			}
; 9581 : 			else

  0084a	eb 3d		 jmp	 SHORT $LN26@draw_overl
$LN25@draw_overl:

; 9582 : 			{
; 9583 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0084c	51		 push	 ecx
  0084d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00855	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085a	51		 push	 ecx
  0085b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00863	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00868	51		 push	 ecx
  00869	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00871	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00876	51		 push	 ecx
  00877	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0087f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00884	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN26@draw_overl:

; 9584 : 			}
; 9585 : 
; 9586 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00889	51		 push	 ecx
  0088a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00892	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00897	51		 push	 ecx
  00898	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  008a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a5	51		 push	 ecx
  008a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  008ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b3	51		 push	 ecx
  008b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008c6	50		 push	 eax
  008c7	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9587 : 
; 9588 : 			set_active_screen (mfd_screen);

  008cc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008cf	50		 push	 eax
  008d0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9589 : 
; 9590 : 			if (lock_screen (mfd_screen))

  008d5	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008d8	50		 push	 eax
  008d9	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  008de	85 c0		 test	 eax, eax
  008e0	74 41		 je	 SHORT $LN27@draw_overl

; 9591 : 			{
; 9592 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  008e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008e7	50		 push	 eax
  008e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008ee	83 e9 01	 sub	 ecx, 1
  008f1	51		 push	 ecx
  008f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008f8	83 ea 01	 sub	 edx, 1
  008fb	52		 push	 edx
  008fc	6a 00		 push	 0
  008fe	6a 00		 push	 0
  00900	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9593 : 
; 9594 : 				draw_layout_grid ();

  00905	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9595 : 
; 9596 : 				draw_2d_flir_mfd (TRUE);

  0090a	6a 01		 push	 1
  0090c	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 9597 : 
; 9598 : 				flush_screen_texture_graphics (mfd_screen);

  00911	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00914	50		 push	 eax
  00915	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9599 : 
; 9600 : 				unlock_screen (mfd_screen);

  0091a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0091d	50		 push	 eax
  0091e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_overl:

; 9601 : 			}
; 9602 : 
; 9603 : 			set_pilots_full_screen_params (FALSE);

  00923	6a 00		 push	 0
  00925	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9604 : 
; 9605 : 			break;

  0092a	e9 0c 08 00 00	 jmp	 $LN4@draw_overl
$LN28@draw_overl:

; 9606 : 		}
; 9607 : 		////////////////////////////////////////
; 9608 : 		case HOKUM_MFD_MODE_LLLTV:
; 9609 : 		////////////////////////////////////////
; 9610 : 		{
; 9611 : 			if (!hokum_damage.llltv)

  0092f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00934	c1 e8 03	 shr	 eax, 3
  00937	83 e0 01	 and	 eax, 1
  0093a	75 10		 jne	 SHORT $LN29@draw_overl

; 9612 : 			{
; 9613 : 				draw_full_screen_3d_eo_display (&hokum_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV, DISPLAY_3D_TINT_AMBER);

  0093c	6a 01		 push	 1
  0093e	6a 06		 push	 6
  00940	68 00 00 00 00	 push	 OFFSET ?hokum_llltv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_llltv
  00945	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 9614 : 			}
; 9615 : 			else

  0094a	eb 3d		 jmp	 SHORT $LN30@draw_overl
$LN29@draw_overl:

; 9616 : 			{
; 9617 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0094c	51		 push	 ecx
  0094d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00955	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095a	51		 push	 ecx
  0095b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00963	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00968	51		 push	 ecx
  00969	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00971	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00976	51		 push	 ecx
  00977	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0097f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00984	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN30@draw_overl:

; 9618 : 			}
; 9619 : 
; 9620 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00989	51		 push	 ecx
  0098a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00992	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00997	51		 push	 ecx
  00998	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  009a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a5	51		 push	 ecx
  009a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  009ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b3	51		 push	 ecx
  009b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  009bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009c6	50		 push	 eax
  009c7	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9621 : 
; 9622 : 			set_active_screen (mfd_screen);

  009cc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009cf	50		 push	 eax
  009d0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9623 : 
; 9624 : 			if (lock_screen (mfd_screen))

  009d5	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009d8	50		 push	 eax
  009d9	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009de	85 c0		 test	 eax, eax
  009e0	74 41		 je	 SHORT $LN31@draw_overl

; 9625 : 			{
; 9626 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  009e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  009e7	50		 push	 eax
  009e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009ee	83 e9 01	 sub	 ecx, 1
  009f1	51		 push	 ecx
  009f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009f8	83 ea 01	 sub	 edx, 1
  009fb	52		 push	 edx
  009fc	6a 00		 push	 0
  009fe	6a 00		 push	 0
  00a00	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9627 : 
; 9628 : 				draw_layout_grid ();

  00a05	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9629 : 
; 9630 : 				draw_2d_llltv_mfd (TRUE);

  00a0a	6a 01		 push	 1
  00a0c	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXH@Z ; draw_2d_llltv_mfd

; 9631 : 
; 9632 : 				flush_screen_texture_graphics (mfd_screen);

  00a11	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a14	50		 push	 eax
  00a15	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9633 : 
; 9634 : 				unlock_screen (mfd_screen);

  00a1a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a1d	50		 push	 eax
  00a1e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_overl:

; 9635 : 			}
; 9636 : 
; 9637 : 			set_pilots_full_screen_params (FALSE);

  00a23	6a 00		 push	 0
  00a25	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9638 : 
; 9639 : 			break;

  00a2a	e9 0c 07 00 00	 jmp	 $LN4@draw_overl
$LN32@draw_overl:

; 9640 : 		}
; 9641 : 		////////////////////////////////////////
; 9642 : 		case HOKUM_MFD_MODE_PERISCOPE:
; 9643 : 		////////////////////////////////////////
; 9644 : 		{
; 9645 : 			if (!hokum_damage.periscope)

  00a2f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00a34	c1 e8 04	 shr	 eax, 4
  00a37	83 e0 01	 and	 eax, 1
  00a3a	75 10		 jne	 SHORT $LN33@draw_overl

; 9646 : 			{
; 9647 : 				draw_full_screen_3d_eo_display (&hokum_periscope, TARGET_ACQUISITION_SYSTEM_PERISCOPE, DISPLAY_3D_TINT_AMBER);

  00a3c	6a 01		 push	 1
  00a3e	6a 07		 push	 7
  00a40	68 00 00 00 00	 push	 OFFSET ?hokum_periscope@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_periscope
  00a45	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 9648 : 			}
; 9649 : 			else

  00a4a	eb 3d		 jmp	 SHORT $LN34@draw_overl
$LN33@draw_overl:

; 9650 : 			{
; 9651 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00a4c	51		 push	 ecx
  00a4d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00a55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5a	51		 push	 ecx
  00a5b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00a63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a68	51		 push	 ecx
  00a69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a76	51		 push	 ecx
  00a77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a84	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN34@draw_overl:

; 9652 : 			}
; 9653 : 
; 9654 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a89	51		 push	 ecx
  00a8a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a97	51		 push	 ecx
  00a98	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00aa0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa5	51		 push	 ecx
  00aa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00aae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab3	51		 push	 ecx
  00ab4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00abc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ac6	50		 push	 eax
  00ac7	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9655 : 
; 9656 : 			set_active_screen (mfd_screen);

  00acc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00acf	50		 push	 eax
  00ad0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9657 : 
; 9658 : 			if (lock_screen (mfd_screen))

  00ad5	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ad8	50		 push	 eax
  00ad9	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00ade	85 c0		 test	 eax, eax
  00ae0	74 41		 je	 SHORT $LN35@draw_overl

; 9659 : 			{
; 9660 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00ae2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00ae7	50		 push	 eax
  00ae8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00aee	83 e9 01	 sub	 ecx, 1
  00af1	51		 push	 ecx
  00af2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00af8	83 ea 01	 sub	 edx, 1
  00afb	52		 push	 edx
  00afc	6a 00		 push	 0
  00afe	6a 00		 push	 0
  00b00	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9661 : 
; 9662 : 				draw_layout_grid ();

  00b05	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9663 : 
; 9664 : 				draw_2d_periscope_mfd (TRUE);

  00b0a	6a 01		 push	 1
  00b0c	e8 00 00 00 00	 call	 ?draw_2d_periscope_mfd@@YGXH@Z ; draw_2d_periscope_mfd

; 9665 : 
; 9666 : 				flush_screen_texture_graphics (mfd_screen);

  00b11	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b14	50		 push	 eax
  00b15	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9667 : 
; 9668 : 				unlock_screen (mfd_screen);

  00b1a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b1d	50		 push	 eax
  00b1e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_overl:

; 9669 : 			}
; 9670 : 
; 9671 : 			set_pilots_full_screen_params (FALSE);

  00b23	6a 00		 push	 0
  00b25	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9672 : 
; 9673 : 			break;

  00b2a	e9 0c 06 00 00	 jmp	 $LN4@draw_overl
$LN36@draw_overl:

; 9674 : 		}
; 9675 : 		////////////////////////////////////////
; 9676 : 		case HOKUM_MFD_MODE_TSD:
; 9677 : 		////////////////////////////////////////
; 9678 : 		{
; 9679 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00b2f	51		 push	 ecx
  00b30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00b38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3d	51		 push	 ecx
  00b3e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00b46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4b	51		 push	 ecx
  00b4c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00b54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b59	51		 push	 ecx
  00b5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00b62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b67	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9680 : 
; 9681 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00b6c	51		 push	 ecx
  00b6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7a	51		 push	 ecx
  00b7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b88	51		 push	 ecx
  00b89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b96	51		 push	 ecx
  00b97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ba9	50		 push	 eax
  00baa	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9682 : 
; 9683 : 			set_active_screen (mfd_screen);

  00baf	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00bb2	50		 push	 eax
  00bb3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9684 : 
; 9685 : 			if (lock_screen (mfd_screen))

  00bb8	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00bbb	50		 push	 eax
  00bbc	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00bc1	85 c0		 test	 eax, eax
  00bc3	74 43		 je	 SHORT $LN37@draw_overl

; 9686 : 			{
; 9687 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00bc5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00bca	50		 push	 eax
  00bcb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00bd1	83 e9 01	 sub	 ecx, 1
  00bd4	51		 push	 ecx
  00bd5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00bdb	83 ea 01	 sub	 edx, 1
  00bde	52		 push	 edx
  00bdf	6a 00		 push	 0
  00be1	6a 00		 push	 0
  00be3	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9688 : 
; 9689 : 				draw_layout_grid ();

  00be8	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9690 : 
; 9691 : 				draw_tactical_situation_display_mfd (location);

  00bed	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00bf0	50		 push	 eax
  00bf1	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 9692 : 
; 9693 : 				flush_screen_texture_graphics (mfd_screen);

  00bf6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00bf9	50		 push	 eax
  00bfa	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9694 : 
; 9695 : 				unlock_screen (mfd_screen);

  00bff	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c02	50		 push	 eax
  00c03	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_overl:

; 9696 : 			}
; 9697 : 
; 9698 : 			break;

  00c08	e9 2e 05 00 00	 jmp	 $LN4@draw_overl
$LN38@draw_overl:

; 9699 : 		}
; 9700 : 		////////////////////////////////////////
; 9701 : 		case HOKUM_MFD_MODE_ASE:
; 9702 : 		////////////////////////////////////////
; 9703 : 		{
; 9704 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00c0d	51		 push	 ecx
  00c0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00c16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1b	51		 push	 ecx
  00c1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00c24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c29	51		 push	 ecx
  00c2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00c32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c37	51		 push	 ecx
  00c38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00c40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c45	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9705 : 
; 9706 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00c4a	51		 push	 ecx
  00c4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00c53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c58	51		 push	 ecx
  00c59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c66	51		 push	 ecx
  00c67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c74	51		 push	 ecx
  00c75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c87	50		 push	 eax
  00c88	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9707 : 
; 9708 : 			set_active_screen (mfd_screen);

  00c8d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c90	50		 push	 eax
  00c91	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9709 : 
; 9710 : 			if (lock_screen (mfd_screen))

  00c96	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c99	50		 push	 eax
  00c9a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00c9f	85 c0		 test	 eax, eax
  00ca1	74 43		 je	 SHORT $LN39@draw_overl

; 9711 : 			{
; 9712 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00ca3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00ca8	50		 push	 eax
  00ca9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00caf	83 e9 01	 sub	 ecx, 1
  00cb2	51		 push	 ecx
  00cb3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00cb9	83 ea 01	 sub	 edx, 1
  00cbc	52		 push	 edx
  00cbd	6a 00		 push	 0
  00cbf	6a 00		 push	 0
  00cc1	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9713 : 
; 9714 : 				draw_layout_grid ();

  00cc6	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9715 : 
; 9716 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  00ccb	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00cce	50		 push	 eax
  00ccf	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 9717 : 
; 9718 : 				flush_screen_texture_graphics (mfd_screen);

  00cd4	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00cd7	50		 push	 eax
  00cd8	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9719 : 
; 9720 : 				unlock_screen (mfd_screen);

  00cdd	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ce0	50		 push	 eax
  00ce1	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_overl:

; 9721 : 			}
; 9722 : 
; 9723 : 			break;

  00ce6	e9 50 04 00 00	 jmp	 $LN4@draw_overl
$LN40@draw_overl:

; 9724 : 		}
; 9725 : 		////////////////////////////////////////
; 9726 : 		case HOKUM_MFD_MODE_WEAPON:
; 9727 : 		////////////////////////////////////////
; 9728 : 		{
; 9729 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00ceb	51		 push	 ecx
  00cec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00cf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf9	51		 push	 ecx
  00cfa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00d02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d07	51		 push	 ecx
  00d08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00d10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d15	51		 push	 ecx
  00d16	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00d1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d23	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9730 : 
; 9731 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00d28	51		 push	 ecx
  00d29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00d31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d36	51		 push	 ecx
  00d37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00d3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d44	51		 push	 ecx
  00d45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00d4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d52	51		 push	 ecx
  00d53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00d5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00d65	50		 push	 eax
  00d66	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9732 : 
; 9733 : 			set_active_screen (mfd_screen);

  00d6b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d6e	50		 push	 eax
  00d6f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9734 : 
; 9735 : 			if (lock_screen (mfd_screen))

  00d74	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d77	50		 push	 eax
  00d78	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00d7d	85 c0		 test	 eax, eax
  00d7f	74 3f		 je	 SHORT $LN41@draw_overl

; 9736 : 			{
; 9737 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00d81	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00d86	50		 push	 eax
  00d87	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00d8d	83 e9 01	 sub	 ecx, 1
  00d90	51		 push	 ecx
  00d91	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00d97	83 ea 01	 sub	 edx, 1
  00d9a	52		 push	 edx
  00d9b	6a 00		 push	 0
  00d9d	6a 00		 push	 0
  00d9f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9738 : 
; 9739 : 				draw_layout_grid ();

  00da4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9740 : 
; 9741 : 				draw_weapon_display_mfd ();

  00da9	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 9742 : 
; 9743 : 				flush_screen_texture_graphics (mfd_screen);

  00dae	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00db1	50		 push	 eax
  00db2	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9744 : 
; 9745 : 				unlock_screen (mfd_screen);

  00db7	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00dba	50		 push	 eax
  00dbb	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_overl:

; 9746 : 			}
; 9747 : 
; 9748 : 			break;

  00dc0	e9 76 03 00 00	 jmp	 $LN4@draw_overl
$LN42@draw_overl:

; 9749 : 		}
; 9750 : 		////////////////////////////////////////
; 9751 : 		case HOKUM_MFD_MODE_SYSTEM:
; 9752 : 		////////////////////////////////////////
; 9753 : 		{
; 9754 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00dc5	51		 push	 ecx
  00dc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00dce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd3	51		 push	 ecx
  00dd4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00ddc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de1	51		 push	 ecx
  00de2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00dea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00def	51		 push	 ecx
  00df0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00df8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dfd	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9755 : 
; 9756 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00e02	51		 push	 ecx
  00e03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00e0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e10	51		 push	 ecx
  00e11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00e19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1e	51		 push	 ecx
  00e1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00e27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2c	51		 push	 ecx
  00e2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00e3f	50		 push	 eax
  00e40	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9757 : 
; 9758 : 			set_active_screen (mfd_screen);

  00e45	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00e48	50		 push	 eax
  00e49	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9759 : 
; 9760 : 			if (lock_screen (mfd_screen))

  00e4e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00e51	50		 push	 eax
  00e52	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00e57	85 c0		 test	 eax, eax
  00e59	74 3f		 je	 SHORT $LN43@draw_overl

; 9761 : 			{
; 9762 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00e5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00e60	50		 push	 eax
  00e61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00e67	83 e9 01	 sub	 ecx, 1
  00e6a	51		 push	 ecx
  00e6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00e71	83 ea 01	 sub	 edx, 1
  00e74	52		 push	 edx
  00e75	6a 00		 push	 0
  00e77	6a 00		 push	 0
  00e79	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9763 : 
; 9764 : 				draw_layout_grid ();

  00e7e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9765 : 
; 9766 : 				draw_system_display_mfd ();

  00e83	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 9767 : 
; 9768 : 				flush_screen_texture_graphics (mfd_screen);

  00e88	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00e8b	50		 push	 eax
  00e8c	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9769 : 
; 9770 : 				unlock_screen (mfd_screen);

  00e91	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00e94	50		 push	 eax
  00e95	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN43@draw_overl:

; 9771 : 			}
; 9772 : 
; 9773 : 			break;

  00e9a	e9 9c 02 00 00	 jmp	 $LN4@draw_overl
$LN44@draw_overl:

; 9774 : 		}
; 9775 : 		////////////////////////////////////////
; 9776 : 		case HOKUM_MFD_MODE_ENGINE:
; 9777 : 		////////////////////////////////////////
; 9778 : 		{
; 9779 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00e9f	51		 push	 ecx
  00ea0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00ea8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ead	51		 push	 ecx
  00eae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00eb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebb	51		 push	 ecx
  00ebc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00ec4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec9	51		 push	 ecx
  00eca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00ed2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed7	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9780 : 
; 9781 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00edc	51		 push	 ecx
  00edd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00ee5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eea	51		 push	 ecx
  00eeb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00ef3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef8	51		 push	 ecx
  00ef9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00f01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f06	51		 push	 ecx
  00f07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00f0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00f19	50		 push	 eax
  00f1a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9782 : 
; 9783 : 			set_active_screen (mfd_screen);

  00f1f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00f22	50		 push	 eax
  00f23	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9784 : 
; 9785 : 			if (lock_screen (mfd_screen))

  00f28	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00f2b	50		 push	 eax
  00f2c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00f31	85 c0		 test	 eax, eax
  00f33	74 3f		 je	 SHORT $LN45@draw_overl

; 9786 : 			{
; 9787 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00f35	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00f3a	50		 push	 eax
  00f3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00f41	83 e9 01	 sub	 ecx, 1
  00f44	51		 push	 ecx
  00f45	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00f4b	83 ea 01	 sub	 edx, 1
  00f4e	52		 push	 edx
  00f4f	6a 00		 push	 0
  00f51	6a 00		 push	 0
  00f53	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9788 : 
; 9789 : 				draw_layout_grid ();

  00f58	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9790 : 
; 9791 : 				draw_engine_display_mfd ();

  00f5d	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 9792 : 
; 9793 : 				flush_screen_texture_graphics (mfd_screen);

  00f62	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00f65	50		 push	 eax
  00f66	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9794 : 
; 9795 : 				unlock_screen (mfd_screen);

  00f6b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00f6e	50		 push	 eax
  00f6f	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN45@draw_overl:

; 9796 : 			}
; 9797 : 
; 9798 : 			break;

  00f74	e9 c2 01 00 00	 jmp	 $LN4@draw_overl
$LN46@draw_overl:

; 9799 : 		}
; 9800 : 		////////////////////////////////////////
; 9801 : 		case HOKUM_MFD_MODE_FLIGHT:
; 9802 : 		////////////////////////////////////////
; 9803 : 		{
; 9804 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00f79	51		 push	 ecx
  00f7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f87	51		 push	 ecx
  00f88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00f90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f95	51		 push	 ecx
  00f96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00f9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa3	51		 push	 ecx
  00fa4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00fac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb1	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9805 : 
; 9806 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00fb6	51		 push	 ecx
  00fb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00fbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc4	51		 push	 ecx
  00fc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00fcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd2	51		 push	 ecx
  00fd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00fdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe0	51		 push	 ecx
  00fe1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00fe9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ff3	50		 push	 eax
  00ff4	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9807 : 
; 9808 : 			set_active_screen (mfd_screen);

  00ff9	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ffc	50		 push	 eax
  00ffd	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9809 : 
; 9810 : 			if (lock_screen (mfd_screen))

  01002	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  01005	50		 push	 eax
  01006	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0100b	85 c0		 test	 eax, eax
  0100d	74 3f		 je	 SHORT $LN47@draw_overl

; 9811 : 			{
; 9812 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0100f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  01014	50		 push	 eax
  01015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0101b	83 e9 01	 sub	 ecx, 1
  0101e	51		 push	 ecx
  0101f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  01025	83 ea 01	 sub	 edx, 1
  01028	52		 push	 edx
  01029	6a 00		 push	 0
  0102b	6a 00		 push	 0
  0102d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9813 : 
; 9814 : 				draw_layout_grid ();

  01032	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9815 : 
; 9816 : 				draw_flight_display_mfd ();

  01037	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 9817 : 
; 9818 : 				flush_screen_texture_graphics (mfd_screen);

  0103c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0103f	50		 push	 eax
  01040	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9819 : 
; 9820 : 				unlock_screen (mfd_screen);

  01045	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  01048	50		 push	 eax
  01049	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN47@draw_overl:

; 9821 : 			}
; 9822 : 
; 9823 : 			break;

  0104e	e9 e8 00 00 00	 jmp	 $LN4@draw_overl
$LN48@draw_overl:

; 9824 : 		}
; 9825 : 		////////////////////////////////////////
; 9826 : 		case HOKUM_MFD_MODE_MISSION:
; 9827 : 		////////////////////////////////////////
; 9828 : 		{
; 9829 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  01053	51		 push	 ecx
  01054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0105c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01061	51		 push	 ecx
  01062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0106a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106f	51		 push	 ecx
  01070	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  01078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107d	51		 push	 ecx
  0107e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  01086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9830 : 
; 9831 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01090	51		 push	 ecx
  01091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0109e	51		 push	 ecx
  0109f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  010a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ac	51		 push	 ecx
  010ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  010b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ba	51		 push	 ecx
  010bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  010c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  010cd	50		 push	 eax
  010ce	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9832 : 
; 9833 : 			set_active_screen (mfd_screen);

  010d3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  010d6	50		 push	 eax
  010d7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9834 : 
; 9835 : 			if (lock_screen (mfd_screen))

  010dc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  010df	50		 push	 eax
  010e0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  010e5	85 c0		 test	 eax, eax
  010e7	74 3f		 je	 SHORT $LN49@draw_overl

; 9836 : 			{
; 9837 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  010e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  010ee	50		 push	 eax
  010ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  010f5	83 e9 01	 sub	 ecx, 1
  010f8	51		 push	 ecx
  010f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  010ff	83 ea 01	 sub	 edx, 1
  01102	52		 push	 edx
  01103	6a 00		 push	 0
  01105	6a 00		 push	 0
  01107	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9838 : 
; 9839 : 				draw_layout_grid ();

  0110c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9840 : 
; 9841 : 				draw_mission_display_mfd ();

  01111	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 9842 : 
; 9843 : 				flush_screen_texture_graphics (mfd_screen);

  01116	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  01119	50		 push	 eax
  0111a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9844 : 
; 9845 : 				unlock_screen (mfd_screen);

  0111f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  01122	50		 push	 eax
  01123	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN49@draw_overl:

; 9846 : 			}
; 9847 : 
; 9848 : 			break;

  01128	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN50@draw_overl:

; 9849 : 		}
; 9850 : 		////////////////////////////////////////
; 9851 : 		default:
; 9852 : 		////////////////////////////////////////
; 9853 : 		{
; 9854 : 			debug_fatal ("Invalid main MFD mode = %d", mode);

  0112a	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0112d	50		 push	 eax
  0112e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  01133	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  01138	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 9855 : 
; 9856 : 			break;
; 9857 : 		}
; 9858 : 	}
; 9859 : 
; 9860 : 	set_active_screen (video_screen);

  0113b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  01140	50		 push	 eax
  01141	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9861 : 
; 9862 : 	////////////////////////////////////////
; 9863 : 	//
; 9864 : 	// render MFD to screen
; 9865 : 	//
; 9866 : 	////////////////////////////////////////
; 9867 : 	{
; 9868 : 		vertex
; 9869 : 			quad[4];
; 9870 : 
; 9871 : 		real_colour
; 9872 : 			colour,
; 9873 : 			specular;
; 9874 : 
; 9875 : 		set_3d_active_environment (main_3d_env);

  01146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0114b	50		 push	 eax
  0114c	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9876 : 
; 9877 : 		if (begin_3d_scene ())

  01151	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  01156	85 c0		 test	 eax, eax
  01158	0f 84 d0 03 00
	00		 je	 $LN51@draw_overl

; 9878 : 		{
; 9879 : 			set_d3d_transparency_on ();

  0115e	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9880 : 
; 9881 : 			set_d3d_zbuffer_comparison (FALSE);

  01163	6a 00		 push	 0
  01165	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9882 : 
; 9883 : 			set_d3d_culling (FALSE);

  0116a	6a 00		 push	 0
  0116c	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9884 : 
; 9885 : 			set_d3d_texture_wrapping (0, FALSE);

  01171	6a 00		 push	 0
  01173	6a 00		 push	 0
  01175	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 9886 : 
; 9887 : 			{
; 9888 : 				int
; 9889 : 					width;
; 9890 : 
; 9891 :    			if (application_video_width >= 1280)

  0117a	81 3d 00 00 00
	00 00 05 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 1280 ; application_video_width, 00000500H
  01184	7c 0c		 jl	 SHORT $LN52@draw_overl

; 9892 : 				{
; 9893 : 					width = 1280;

  01186	c7 85 c8 fe ff
	ff 00 05 00 00	 mov	 DWORD PTR _width$1[ebp], 1280 ; 00000500H

; 9894 : 				}
; 9895 : 				else

  01190	eb 0a		 jmp	 SHORT $LN53@draw_overl
$LN52@draw_overl:

; 9896 : 				{
; 9897 : 					width = 640;

  01192	c7 85 c8 fe ff
	ff 80 02 00 00	 mov	 DWORD PTR _width$1[ebp], 640 ; 00000280H
$LN53@draw_overl:

; 9898 : 				}
; 9899 : 
; 9900 : 				if ((application_video_width == width) || (get_global_unscaled_displays ()))

  0119c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  011a1	3b 85 c8 fe ff
	ff		 cmp	 eax, DWORD PTR _width$1[ebp]
  011a7	74 09		 je	 SHORT $LN56@draw_overl
  011a9	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  011b0	74 17		 je	 SHORT $LN54@draw_overl
$LN56@draw_overl:

; 9901 : 				{
; 9902 : 					set_d3d_texture_mag_filtering (FALSE);

  011b2	6a 00		 push	 0
  011b4	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 9903 : 					set_d3d_texture_min_filtering (FALSE);

  011b9	6a 00		 push	 0
  011bb	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 9904 : 					set_d3d_texture_mip_filtering (FALSE);

  011c0	6a 00		 push	 0
  011c2	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 9905 : 				}
; 9906 : 				else

  011c7	eb 15		 jmp	 SHORT $LN55@draw_overl
$LN54@draw_overl:

; 9907 : 				{
; 9908 : 					set_d3d_texture_mag_filtering (TRUE);

  011c9	6a 01		 push	 1
  011cb	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 9909 : 					set_d3d_texture_min_filtering (TRUE);

  011d0	6a 01		 push	 1
  011d2	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 9910 : 					set_d3d_texture_mip_filtering (FALSE);

  011d7	6a 00		 push	 0
  011d9	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN55@draw_overl:

; 9911 : 				}
; 9912 : 			}
; 9913 : 
; 9914 : 			set_d3d_flat_shaded_textured_renderstate (mfd_screen);

  011de	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  011e1	50		 push	 eax
  011e2	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 9915 : 
; 9916 :       	////////////////////////////////////////
; 9917 :       	//
; 9918 : 
; 9919 : 			colour.red				= MFD_COLOUR1.r;

  011e7	b8 04 00 00 00	 mov	 eax, 4
  011ec	6b c8 00	 imul	 ecx, eax, 0
  011ef	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  011f5	88 95 d2 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+2], dl

; 9920 : 			colour.green			= MFD_COLOUR1.g;

  011fb	b8 04 00 00 00	 mov	 eax, 4
  01200	6b c8 00	 imul	 ecx, eax, 0
  01203	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  01209	88 95 d1 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+1], dl

; 9921 : 			colour.blue				= MFD_COLOUR1.b;

  0120f	b8 04 00 00 00	 mov	 eax, 4
  01214	6b c8 00	 imul	 ecx, eax, 0
  01217	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0121d	88 95 d0 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp], dl

; 9922 : 			colour.alpha			= MFD_COLOUR1.a;

  01223	b8 04 00 00 00	 mov	 eax, 4
  01228	6b c8 00	 imul	 ecx, eax, 0
  0122b	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  01231	88 95 d3 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+3], dl

; 9923 : 
; 9924 : 			specular.red			= 0;

  01237	c6 85 ce fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+2], 0

; 9925 : 			specular.green			= 0;

  0123e	c6 85 cd fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+1], 0

; 9926 : 			specular.blue			= 0;

  01245	c6 85 cc fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp], 0

; 9927 : 			specular.alpha			= 255;

  0124c	c6 85 cf fe ff
	ff ff		 mov	 BYTE PTR _specular$2[ebp+3], 255 ; 000000ffH

; 9928 : 
; 9929 : 			quad[0].i				= mfd_screen_x_min;

  01253	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01258	6b c8 00	 imul	 ecx, eax, 0
  0125b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  01263	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 9930 : 			quad[0].j	  			= mfd_screen_y_min;

  0126c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01271	6b c8 00	 imul	 ecx, eax, 0
  01274	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0127c	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 9931 : 			quad[0].z	  			= 0.5;

  01285	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0128a	6b c8 00	 imul	 ecx, eax, 0
  0128d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01295	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 9932 : 			quad[0].q	  			= 0.5;

  0129e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012a3	6b c8 00	 imul	 ecx, eax, 0
  012a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  012ae	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 9933 : 			quad[0].u	  			= 0.0;

  012b7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012bc	6b c8 00	 imul	 ecx, eax, 0
  012bf	0f 57 c0	 xorps	 xmm0, xmm0
  012c2	f3 0f 11 84 0d
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 9934 : 			quad[0].v	  			= 0.0;

  012cb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012d0	6b c8 00	 imul	 ecx, eax, 0
  012d3	0f 57 c0	 xorps	 xmm0, xmm0
  012d6	f3 0f 11 84 0d
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 9935 : 
; 9936 : 			quad[1].i				= mfd_screen_x_max;

  012df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012e4	c1 e0 00	 shl	 eax, 0
  012e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  012ef	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 9937 : 			quad[1].j  				= mfd_screen_y_min;

  012f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012fd	c1 e0 00	 shl	 eax, 0
  01300	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  01308	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 9938 : 			quad[1].z  				= 0.5;

  01311	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01316	c1 e0 00	 shl	 eax, 0
  01319	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01321	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 9939 : 			quad[1].q  				= 0.5;

  0132a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0132f	c1 e0 00	 shl	 eax, 0
  01332	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0133a	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 9940 : 			quad[1].u  				= 1.0;

  01343	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01348	c1 e0 00	 shl	 eax, 0
  0134b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01353	f3 0f 11 84 05
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 9941 : 			quad[1].v  				= 0.0;

  0135c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01361	c1 e0 00	 shl	 eax, 0
  01364	0f 57 c0	 xorps	 xmm0, xmm0
  01367	f3 0f 11 84 05
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 9942 : 
; 9943 : 			quad[2].i				= mfd_screen_x_max;

  01370	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01375	d1 e0		 shl	 eax, 1
  01377	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0137f	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 9944 : 			quad[2].j 				= mfd_screen_y_max;

  01388	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0138d	d1 e0		 shl	 eax, 1
  0138f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  01397	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 9945 : 			quad[2].z  				= 0.5;

  013a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  013a5	d1 e0		 shl	 eax, 1
  013a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  013af	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 9946 : 			quad[2].q  				= 0.5;

  013b8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  013bd	d1 e0		 shl	 eax, 1
  013bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  013c7	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 9947 : 			quad[2].u  				= 1.0;

  013d0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  013d5	d1 e0		 shl	 eax, 1
  013d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  013df	f3 0f 11 84 05
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 9948 : 			quad[2].v  				= 1.0;

  013e8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  013ed	d1 e0		 shl	 eax, 1
  013ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  013f7	f3 0f 11 84 05
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 9949 : 
; 9950 : 			quad[3].i				= mfd_screen_x_min;

  01400	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01405	6b c8 03	 imul	 ecx, eax, 3
  01408	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  01410	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 9951 : 			quad[3].j				= mfd_screen_y_max;

  01419	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0141e	6b c8 03	 imul	 ecx, eax, 3
  01421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  01429	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 9952 : 			quad[3].z				= 0.5;

  01432	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01437	6b c8 03	 imul	 ecx, eax, 3
  0143a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01442	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 9953 : 			quad[3].q				= 0.5;

  0144b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01450	6b c8 03	 imul	 ecx, eax, 3
  01453	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0145b	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 9954 : 			quad[3].u				= 0.0;

  01464	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01469	6b c8 03	 imul	 ecx, eax, 3
  0146c	0f 57 c0	 xorps	 xmm0, xmm0
  0146f	f3 0f 11 84 0d
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 9955 : 			quad[3].v				= 1.0;

  01478	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0147d	6b c8 03	 imul	 ecx, eax, 3
  01480	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01488	f3 0f 11 84 0d
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 9956 : 
; 9957 : 			quad[0].next_vertex	= &quad[1];

  01491	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01496	c1 e0 00	 shl	 eax, 0
  01499	8d 8c 05 d4 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  014a0	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  014a5	6b c2 00	 imul	 eax, edx, 0
  014a8	89 8c 05 fc fe
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], ecx

; 9958 : 			quad[1].next_vertex	= &quad[2];

  014af	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  014b4	d1 e0		 shl	 eax, 1
  014b6	8d 8c 05 d4 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  014bd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  014c2	c1 e2 00	 shl	 edx, 0
  014c5	89 8c 15 fc fe
	ff ff		 mov	 DWORD PTR _quad$4[ebp+edx+40], ecx

; 9959 : 			quad[2].next_vertex	= &quad[3];

  014cc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  014d1	6b c8 03	 imul	 ecx, eax, 3
  014d4	8d 94 0d d4 fe
	ff ff		 lea	 edx, DWORD PTR _quad$4[ebp+ecx]
  014db	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  014e0	d1 e0		 shl	 eax, 1
  014e2	89 94 05 fc fe
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], edx

; 9960 : 			quad[3].next_vertex	= NULL;

  014e9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  014ee	6b c8 03	 imul	 ecx, eax, 3
  014f1	c7 84 0d fc fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$4[ebp+ecx+40], 0

; 9961 : 
; 9962 :       	//
; 9963 :       	////////////////////////////////////////
; 9964 : 
; 9965 : 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  014fc	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _specular$2[ebp]
  01502	50		 push	 eax
  01503	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$3[ebp]
  01509	51		 push	 ecx
  0150a	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _quad$4[ebp]
  01510	52		 push	 edx
  01511	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 9966 : 
; 9967 : 			set_d3d_transparency_off ();

  01516	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9968 : 
; 9969 : 			set_d3d_zbuffer_comparison (TRUE);

  0151b	6a 01		 push	 1
  0151d	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9970 : 
; 9971 : 			set_d3d_culling (TRUE);

  01522	6a 01		 push	 1
  01524	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9972 : 
; 9973 : 			end_3d_scene ();

  01529	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN51@draw_overl:

; 9974 : 		}
; 9975 : 	}
; 9976 : 
; 9977 : 	////////////////////////////////////////
; 9978 : 	//
; 9979 : 	// restore colours
; 9980 : 	//
; 9981 : 	////////////////////////////////////////
; 9982 : 
; 9983 : 	MFD_COLOUR1					= store_colour1;

  0152e	b8 04 00 00 00	 mov	 eax, 4
  01533	6b c8 00	 imul	 ecx, eax, 0
  01536	8b 55 f8	 mov	 edx, DWORD PTR _store_colour1$[ebp]
  01539	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9984 : 	MFD_COLOUR2					= store_colour2;

  0153f	b8 04 00 00 00	 mov	 eax, 4
  01544	c1 e0 00	 shl	 eax, 0
  01547	8b 4d f4	 mov	 ecx, DWORD PTR _store_colour2$[ebp]
  0154a	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 9985 : 	MFD_COLOUR3					= store_colour3;

  01550	b8 04 00 00 00	 mov	 eax, 4
  01555	d1 e0		 shl	 eax, 1
  01557	8b 4d f0	 mov	 ecx, DWORD PTR _store_colour3$[ebp]
  0155a	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 9986 : 	MFD_COLOUR4					= store_colour4;

  01560	b8 04 00 00 00	 mov	 eax, 4
  01565	6b c8 03	 imul	 ecx, eax, 3
  01568	8b 55 ec	 mov	 edx, DWORD PTR _store_colour4$[ebp]
  0156b	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9987 : 	MFD_COLOUR5					= store_colour5;

  01571	b8 04 00 00 00	 mov	 eax, 4
  01576	c1 e0 02	 shl	 eax, 2
  01579	8b 4d e8	 mov	 ecx, DWORD PTR _store_colour5$[ebp]
  0157c	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 9988 : 	MFD_COLOUR6					= store_colour6;

  01582	b8 04 00 00 00	 mov	 eax, 4
  01587	6b c8 05	 imul	 ecx, eax, 5
  0158a	8b 55 e4	 mov	 edx, DWORD PTR _store_colour6$[ebp]
  0158d	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9989 : 	MFD_CONTOUR_COLOUR      = store_contour_colour;

  01593	b8 04 00 00 00	 mov	 eax, 4
  01598	6b c8 06	 imul	 ecx, eax, 6
  0159b	8b 55 e0	 mov	 edx, DWORD PTR _store_contour_colour$[ebp]
  0159e	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9990 : 	MFD_RIVER_COLOUR			= store_river_colour;

  015a4	b8 04 00 00 00	 mov	 eax, 4
  015a9	6b c8 07	 imul	 ecx, eax, 7
  015ac	8b 55 dc	 mov	 edx, DWORD PTR _store_river_colour$[ebp]
  015af	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 9991 : 	MFD_ROAD_COLOUR			= store_road_colour;

  015b5	b8 04 00 00 00	 mov	 eax, 4
  015ba	c1 e0 03	 shl	 eax, 3
  015bd	8b 4d d8	 mov	 ecx, DWORD PTR _store_road_colour$[ebp]
  015c0	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 9992 :    MFD_BACKGROUND_COLOUR	= store_background_colour;

  015c6	b8 04 00 00 00	 mov	 eax, 4
  015cb	6b c8 09	 imul	 ecx, eax, 9
  015ce	8b 55 d4	 mov	 edx, DWORD PTR _store_background_colour$[ebp]
  015d1	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx
$LN1@draw_overl:

; 9993 : }

  015d7	5f		 pop	 edi
  015d8	5e		 pop	 esi
  015d9	5b		 pop	 ebx
  015da	8b e5		 mov	 esp, ebp
  015dc	5d		 pop	 ebp
  015dd	c2 0c 00	 ret	 12			; 0000000cH
$LN58@draw_overl:
  015e0	00 00 00 00	 DD	 $LN14@draw_overl
  015e4	00 00 00 00	 DD	 $LN15@draw_overl
  015e8	00 00 00 00	 DD	 $LN14@draw_overl
  015ec	00 00 00 00	 DD	 $LN15@draw_overl
$LN59@draw_overl:
  015f0	00 00 00 00	 DD	 $LN16@draw_overl
  015f4	00 00 00 00	 DD	 $LN18@draw_overl
  015f8	00 00 00 00	 DD	 $LN20@draw_overl
  015fc	00 00 00 00	 DD	 $LN22@draw_overl
  01600	00 00 00 00	 DD	 $LN24@draw_overl
  01604	00 00 00 00	 DD	 $LN28@draw_overl
  01608	00 00 00 00	 DD	 $LN32@draw_overl
  0160c	00 00 00 00	 DD	 $LN36@draw_overl
  01610	00 00 00 00	 DD	 $LN38@draw_overl
  01614	00 00 00 00	 DD	 $LN40@draw_overl
  01618	00 00 00 00	 DD	 $LN42@draw_overl
  0161c	00 00 00 00	 DD	 $LN44@draw_overl
  01620	00 00 00 00	 DD	 $LN46@draw_overl
  01624	00 00 00 00	 DD	 $LN48@draw_overl
?draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 9296 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9297 : 	vertex
; 9298 : 		quad[4];
; 9299 : 
; 9300 : 	real_colour
; 9301 : 		colour,
; 9302 : 		specular;
; 9303 : 
; 9304 : 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9305 : 
; 9306 : 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 9307 : 	{
; 9308 : 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 9309 : 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 9310 : 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 9311 : 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 9312 : 
; 9313 : 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 9314 : 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 9315 : 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 9316 : 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 9317 : 
; 9318 : 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9319 : 
; 9320 : 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9321 : 
; 9322 : 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 9323 : 
; 9324 : 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9325 : 
; 9326 : 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9327 : 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9328 : 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9329 : 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9330 : 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 9331 : 
; 9332 : 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9333 : 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9334 : 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9335 : 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9336 : 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 9337 : 
; 9338 : 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9339 : 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9340 : 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9341 : 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9342 : 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 9343 : 
; 9344 : 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9345 : 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9346 : 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9347 : 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9348 : 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 9349 : 
; 9350 : 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 9351 : 
; 9352 : 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9353 : 
; 9354 : 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9355 : 
; 9356 : 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 9357 : 	}
; 9358 : }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?initalize_horizon_mask@@YGXHPAPAD@Z
_TEXT	SEGMENT
tv218 = -120						; size = 4
tv227 = -116						; size = 4
$T1 = -112						; size = 4
_x_limit$2 = -44					; size = 4
_height_val$3 = -40					; size = 4
_centre_y$ = -36					; size = 4
_radius$ = -32						; size = 4
_cutoff_width$ = -28					; size = 4
_circle_width$ = -24					; size = 4
_height$ = -20						; size = 4
_horizon_mask$ = -16					; size = 4
_row$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_width$ = 8						; size = 4
_mask$ = 12						; size = 4
?initalize_horizon_mask@@YGXHPAPAD@Z PROC		; initalize_horizon_mask, COMDAT

; 8209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8210 : 	int i,j;
; 8211 : 	char *row;
; 8212 : 	char* horizon_mask;
; 8213 : 	int height = LARGE_MFD_VIEWPORT_SIZE * 0.62;

  00009	c7 45 ec 9e 00
	00 00		 mov	 DWORD PTR _height$[ebp], 158 ; 0000009eH

; 8214 : 	int circle_width = height * 0.8;

  00010	f2 0f 2a 45 ec	 cvtsi2sd xmm0, DWORD PTR _height$[ebp]
  00015	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a
  0001d	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00021	89 45 e8	 mov	 DWORD PTR _circle_width$[ebp], eax

; 8215 : 	int cutoff_width = (height - circle_width) / 2;

  00024	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00027	2b 45 e8	 sub	 eax, DWORD PTR _circle_width$[ebp]
  0002a	99		 cdq
  0002b	2b c2		 sub	 eax, edx
  0002d	d1 f8		 sar	 eax, 1
  0002f	89 45 e4	 mov	 DWORD PTR _cutoff_width$[ebp], eax

; 8216 : 	int radius = (height / 2) - 2;

  00032	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00035	99		 cdq
  00036	2b c2		 sub	 eax, edx
  00038	d1 f8		 sar	 eax, 1
  0003a	83 e8 02	 sub	 eax, 2
  0003d	89 45 e0	 mov	 DWORD PTR _radius$[ebp], eax

; 8217 : 	int centre_y = height / 2;

  00040	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	89 45 dc	 mov	 DWORD PTR _centre_y$[ebp], eax

; 8218 : 
; 8219 : 	if (*mask)

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  0004e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00051	74 0b		 je	 SHORT $LN8@initalize_

; 8220 : 		safe_free(*mask);

  00053	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN8@initalize_:

; 8221 : 	horizon_mask = (char *) safe_malloc((width * height) + 4);

  0005e	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00061	0f af 45 ec	 imul	 eax, DWORD PTR _height$[ebp]
  00065	83 c0 04	 add	 eax, 4
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0006e	89 45 f0	 mov	 DWORD PTR _horizon_mask$[ebp], eax

; 8222 : 	*mask = horizon_mask;

  00071	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00077	89 08		 mov	 DWORD PTR [eax], ecx

; 8223 : 
; 8224 : 	horizon_mask[0] = width;

  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	6b c8 00	 imul	 ecx, eax, 0
  00081	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  00084	8a 45 08	 mov	 al, BYTE PTR _width$[ebp]
  00087	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 8225 : 	horizon_mask[1] = height;

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	c1 e0 00	 shl	 eax, 0
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00095	8a 55 ec	 mov	 dl, BYTE PTR _height$[ebp]
  00098	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 8226 : 	horizon_mask[2] = -(width / 2);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0009e	99		 cdq
  0009f	2b c2		 sub	 eax, edx
  000a1	d1 f8		 sar	 eax, 1
  000a3	f7 d8		 neg	 eax
  000a5	b9 01 00 00 00	 mov	 ecx, 1
  000aa	d1 e1		 shl	 ecx, 1
  000ac	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  000af	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 8227 : 	horizon_mask[3] = -(height / 2);

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  000b5	99		 cdq
  000b6	2b c2		 sub	 eax, edx
  000b8	d1 f8		 sar	 eax, 1
  000ba	f7 d8		 neg	 eax
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	6b d1 03	 imul	 edx, ecx, 3
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  000c7	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 8228 : 
; 8229 : 	for (i = 0; i < height; i++)

  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d1	eb 09		 jmp	 SHORT $LN4@initalize_
$LN2@initalize_:
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d6	83 c0 01	 add	 eax, 1
  000d9	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initalize_:
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000df	3b 45 ec	 cmp	 eax, DWORD PTR _height$[ebp]
  000e2	0f 8d ec 00 00
	00		 jge	 $LN3@initalize_

; 8230 : 	{
; 8231 : 		row = &horizon_mask[4 + (i*width)];

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000eb	0f af 45 08	 imul	 eax, DWORD PTR _width$[ebp]
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  000f2	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000f6	89 55 f4	 mov	 DWORD PTR _row$[ebp], edx

; 8232 : 		for (j = 0; j < width; j++)

  000f9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00100	eb 09		 jmp	 SHORT $LN7@initalize_
$LN5@initalize_:
  00102	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00105	83 c0 01	 add	 eax, 1
  00108	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initalize_:
  0010b	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0010e	3b 45 08	 cmp	 eax, DWORD PTR _width$[ebp]
  00111	0f 8d b8 00 00
	00		 jge	 $LN6@initalize_

; 8233 : 		{
; 8234 : 			{
; 8235 : 				float height_val = fabs(((float)i - centre_y));

  00117	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _i$[ebp]
  0011c	f3 0f 2a 4d dc	 cvtsi2ss xmm1, DWORD PTR _centre_y$[ebp]
  00121	f3 0f 5c c1	 subss	 xmm0, xmm1
  00125	51		 push	 ecx
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00130	d9 5d d8	 fstp	 DWORD PTR _height_val$3[ebp]

; 8236 : 				float x_limit = radius - sqrt((radius * radius) - (height_val * height_val));

  00133	f3 0f 2a 45 e0	 cvtsi2ss xmm0, DWORD PTR _radius$[ebp]
  00138	8b 45 e0	 mov	 eax, DWORD PTR _radius$[ebp]
  0013b	0f af 45 e0	 imul	 eax, DWORD PTR _radius$[ebp]
  0013f	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00143	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _height_val$3[ebp]
  00148	f3 0f 59 55 d8	 mulss	 xmm2, DWORD PTR _height_val$3[ebp]
  0014d	f3 0f 5c ca	 subss	 xmm1, xmm2
  00151	51		 push	 ecx
  00152	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00157	f3 0f 11 45 8c	 movss	 DWORD PTR tv227[ebp], xmm0
  0015c	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00161	d9 5d 88	 fstp	 DWORD PTR tv218[ebp]
  00164	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv227[ebp]
  00169	f3 0f 5c 45 88	 subss	 xmm0, DWORD PTR tv218[ebp]
  0016e	f3 0f 11 45 d4	 movss	 DWORD PTR _x_limit$2[ebp], xmm0

; 8237 : 
; 8238 : 				x_limit = max((float) cutoff_width, x_limit);

  00173	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _cutoff_width$[ebp]
  00178	f3 0f 11 45 90	 movss	 DWORD PTR $T1[ebp], xmm0
  0017d	8d 45 d4	 lea	 eax, DWORD PTR _x_limit$2[ebp]
  00180	50		 push	 eax
  00181	8d 4d 90	 lea	 ecx, DWORD PTR $T1[ebp]
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0018a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0018e	f3 0f 11 45 d4	 movss	 DWORD PTR _x_limit$2[ebp], xmm0

; 8239 : 
; 8240 : 				if (j < x_limit || j >= (width - x_limit))

  00193	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  00198	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _x_limit$2[ebp]
  0019d	0f 2f c8	 comiss	 xmm1, xmm0
  001a0	77 14		 ja	 SHORT $LN11@initalize_
  001a2	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001a7	f3 0f 2a 4d 08	 cvtsi2ss xmm1, DWORD PTR _width$[ebp]
  001ac	f3 0f 5c 4d d4	 subss	 xmm1, DWORD PTR _x_limit$2[ebp]
  001b1	0f 2f c1	 comiss	 xmm0, xmm1
  001b4	72 0b		 jb	 SHORT $LN9@initalize_
$LN11@initalize_:

; 8241 : 					row[j] = 1;

  001b6	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001b9	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001bc	c6 00 01	 mov	 BYTE PTR [eax], 1

; 8242 : 				else

  001bf	eb 09		 jmp	 SHORT $LN10@initalize_
$LN9@initalize_:

; 8243 : 					row[j] = 0;

  001c1	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001c4	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001c7	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN10@initalize_:

; 8244 : 			}
; 8245 : 		}

  001ca	e9 33 ff ff ff	 jmp	 $LN5@initalize_
$LN6@initalize_:

; 8246 : 	}

  001cf	e9 ff fe ff ff	 jmp	 $LN2@initalize_
$LN3@initalize_:

; 8247 : }

  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 08 00	 ret	 8
?initalize_horizon_mask@@YGXHPAPAD@Z ENDP		; initalize_horizon_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_text_display@@YGXPAUSCREEN@@@Z
_TEXT	SEGMENT
_text_screen$ = 8					; size = 4
?draw_text_display@@YGXPAUSCREEN@@@Z PROC		; draw_text_display, COMDAT

; 8131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8132 : 	ASSERT (text_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _text_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_text_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CPFKEDIA@text_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_text_:

; 8133 : 
; 8134 : 	set_active_screen (text_screen);

  00027	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8135 : 
; 8136 : 	if (lock_screen (text_screen))

  00030	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 3e 02 00
	00		 je	 $LN3@draw_text_

; 8137 : 	{
; 8138 : 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, TEXT_BACKGROUND_COLOUR);

  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	c1 e0 00	 shl	 eax, 0
  00049	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax]
  0004f	51		 push	 ecx
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00056	83 ea 01	 sub	 edx, 1
  00059	52		 push	 edx
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  0005f	83 e8 01	 sub	 eax, 1
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	6a 00		 push	 0
  00067	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8139 : 
; 8140 : 		draw_layout_grid ();

  0006c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8141 : 
; 8142 : 		set_mono_font_colour (TEXT_COLOUR1);

  00071	b8 04 00 00 00	 mov	 eax, 4
  00076	6b c8 00	 imul	 ecx, eax, 0
  00079	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8143 : 
; 8144 : 		if (draw_large_mfd)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0008c	0f 84 f0 00 00
	00		 je	 $LN4@draw_text_

; 8145 : 		{
; 8146 : 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00092	6a 05		 push	 5
  00094	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8147 : 
; 8148 : 			set_2d_mono_font_position (-1.0, 1.0);

  00099	51		 push	 ecx
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	51		 push	 ecx
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8149 : 
; 8150 : 			set_mono_font_rel_position (1.0, 11.0);

  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41300000
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8151 : 
; 8152 : 			print_mono_font_string (text_display_line1);

  000db	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  000e0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8153 : 
; 8154 : 			set_2d_mono_font_position (-1.0, 1.0);

  000e5	51		 push	 ecx
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8155 : 
; 8156 : 			set_mono_font_rel_position (1.0, 25.0);

  00106	51		 push	 ecx
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	51		 push	 ecx
  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8157 : 
; 8158 : 			print_mono_font_string (text_display_line2);

  00127	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  0012c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8159 : 
; 8160 : 			set_2d_mono_font_position (-1.0, 1.0);

  00131	51		 push	 ecx
  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	51		 push	 ecx
  00140	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8161 : 
; 8162 : 			set_mono_font_rel_position (1.0, 39.0);

  00152	51		 push	 ecx
  00153	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@421c0000
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	51		 push	 ecx
  00161	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00169	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8163 : 
; 8164 : 			print_mono_font_string (text_display_line3);

  00173	68 00 00 00 00	 push	 OFFSET ?text_display_line3@@3PADA
  00178	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8165 : 		}
; 8166 : 		else

  0017d	e9 eb 00 00 00	 jmp	 $LN5@draw_text_
$LN4@draw_text_:

; 8167 : 		{
; 8168 : 			set_mono_font_type (MONO_FONT_TYPE_3X6);

  00182	6a 00		 push	 0
  00184	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8169 : 
; 8170 : 			set_2d_mono_font_position (-1.0, 1.0);

  00189	51		 push	 ecx
  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8171 : 
; 8172 : 			set_mono_font_rel_position (1.0, 5.0);

  001aa	51		 push	 ecx
  001ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8173 : 
; 8174 : 			print_mono_font_string (text_display_line1);

  001cb	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  001d0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8175 : 
; 8176 : 			set_2d_mono_font_position (-1.0, 1.0);

  001d5	51		 push	 ecx
  001d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e3	51		 push	 ecx
  001e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8177 : 
; 8178 : 			set_mono_font_rel_position (1.0, 12.0);

  001f6	51		 push	 ecx
  001f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	51		 push	 ecx
  00205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8179 : 
; 8180 : 			print_mono_font_string (text_display_line2);

  00217	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  0021c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8181 : 
; 8182 : 			set_2d_mono_font_position (-1.0, 1.0);

  00221	51		 push	 ecx
  00222	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0022a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022f	51		 push	 ecx
  00230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8183 : 
; 8184 : 			set_mono_font_rel_position (1.0, 19.0);

  00242	51		 push	 ecx
  00243	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41980000
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	51		 push	 ecx
  00251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8185 : 
; 8186 : 			print_mono_font_string (text_display_line3);

  00263	68 00 00 00 00	 push	 OFFSET ?text_display_line3@@3PADA
  00268	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@draw_text_:

; 8187 : 		}
; 8188 : 
; 8189 : 		flush_screen_texture_graphics (text_screen);

  0026d	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8190 : 
; 8191 : 		unlock_screen (text_screen);

  00276	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN3@draw_text_:

; 8192 : 	}
; 8193 : 
; 8194 : 	set_active_screen (video_screen);

  0027f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8195 : }

  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 04 00	 ret	 4
?draw_text_display@@YGXPAUSCREEN@@@Z ENDP		; draw_text_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv134 = -68						; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z PROC ; draw_mfd, COMDAT

; 7971 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7972 : 	ASSERT (mfd_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@draw_mfd
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_mfd:

; 7973 : 
; 7974 : 	ASSERT (hokum_mfd_mode_valid (*mode));

  00027	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	7c 08		 jl	 SHORT $LN6@draw_mfd
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00032	83 38 0e	 cmp	 DWORD PTR [eax], 14	; 0000000eH
  00035	7c 18		 jl	 SHORT $LN5@draw_mfd
$LN6@draw_mfd:
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0003c	83 c0 03	 add	 eax, 3
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EFPHELCO@hokum_mfd_mode_valid?5?$CI?$CKmode?$CJ@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_mfd:

; 7975 : 
; 7976 : 	ASSERT (hokum_mfd_location_valid (location));

  0004f	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00053	7c 06		 jl	 SHORT $LN8@draw_mfd
  00055	83 7d 10 04	 cmp	 DWORD PTR _location$[ebp], 4
  00059	7c 18		 jl	 SHORT $LN7@draw_mfd
$LN8@draw_mfd:
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00060	83 c0 05	 add	 eax, 5
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BONEDLA@hokum_mfd_location_valid?5?$CIlocat@
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_mfd:

; 7977 : 
; 7978 : 	if ((get_undamaged_eo_display_mode (*mode) && d3d_can_render_to_texture))

  00073	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0007e	85 c0		 test	 eax, eax
  00080	74 0e		 je	 SHORT $LN9@draw_mfd
  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00089	74 05		 je	 SHORT $LN9@draw_mfd

; 7979 : 	{
; 7980 : 		return;

  0008b	e9 31 01 00 00	 jmp	 $LN1@draw_mfd
$LN9@draw_mfd:

; 7981 : 	}
; 7982 : 
; 7983 : 	set_active_screen (mfd_screen);

  00090	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7984 : 
; 7985 : 	if (lock_screen (mfd_screen))

  00099	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  000a2	85 c0		 test	 eax, eax
  000a4	0f 84 0c 01 00
	00		 je	 $LN10@draw_mfd

; 7986 : 	{
; 7987 : 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, MFD_BACKGROUND_COLOUR);

  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	6b c8 09	 imul	 ecx, eax, 9
  000b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000b8	52		 push	 edx
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  000be	83 e8 01	 sub	 eax, 1
  000c1	50		 push	 eax
  000c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  000c8	83 e9 01	 sub	 ecx, 1
  000cb	51		 push	 ecx
  000cc	6a 00		 push	 0
  000ce	6a 00		 push	 0
  000d0	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7988 : 
; 7989 : 		draw_layout_grid ();

  000d5	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7990 : 
; 7991 : 		if (*mode == HOKUM_MFD_MODE_AIR_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  000da	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000dd	83 38 03	 cmp	 DWORD PTR [eax], 3
  000e0	75 14		 jne	 SHORT $LN11@draw_mfd
  000e2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  000e9	75 0b		 jne	 SHORT $LN11@draw_mfd

; 7992 : 			*mode = HOKUM_MFD_MODE_GROUND_RADAR;

  000eb	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000ee	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  000f4	eb 1a		 jmp	 SHORT $LN12@draw_mfd
$LN11@draw_mfd:

; 7993 : 		else if (*mode == HOKUM_MFD_MODE_GROUND_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  000f6	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000f9	83 38 02	 cmp	 DWORD PTR [eax], 2
  000fc	75 12		 jne	 SHORT $LN12@draw_mfd
  000fe	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00105	75 09		 jne	 SHORT $LN12@draw_mfd

; 7994 : 			*mode = HOKUM_MFD_MODE_AIR_RADAR;

  00107	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0010a	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$LN12@draw_mfd:

; 7995 : 
; 7996 : 		switch (*mode)

  00110	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00113	8b 08		 mov	 ecx, DWORD PTR [eax]
  00115	89 4d bc	 mov	 DWORD PTR tv134[ebp], ecx
  00118	83 7d bc 0d	 cmp	 DWORD PTR tv134[ebp], 13 ; 0000000dH
  0011c	77 75		 ja	 SHORT $LN28@draw_mfd
  0011e	8b 55 bc	 mov	 edx, DWORD PTR tv134[ebp]
  00121	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN30@draw_mfd[edx*4]
$LN14@draw_mfd:

; 7997 : 		{
; 7998 : 			////////////////////////////////////////
; 7999 : 			case HOKUM_MFD_MODE_OFF:
; 8000 : 			////////////////////////////////////////
; 8001 : 			{
; 8002 : 				break;

  00128	eb 7a		 jmp	 SHORT $LN2@draw_mfd
$LN15@draw_mfd:

; 8003 : 			}
; 8004 : 			////////////////////////////////////////
; 8005 : 			case HOKUM_MFD_MODE_DAMAGED:
; 8006 : 			////////////////////////////////////////
; 8007 : 			{
; 8008 : 				draw_damaged_mfd ();

  0012a	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 8009 : 
; 8010 : 				break;

  0012f	eb 73		 jmp	 SHORT $LN2@draw_mfd
$LN16@draw_mfd:

; 8011 : 			}
; 8012 : 			////////////////////////////////////////
; 8013 : 			case HOKUM_MFD_MODE_GROUND_RADAR:
; 8014 : 			////////////////////////////////////////
; 8015 : 			{
; 8016 : 				draw_ground_radar_mfd ();

  00131	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 8017 : 
; 8018 : 				break;

  00136	eb 6c		 jmp	 SHORT $LN2@draw_mfd
$LN17@draw_mfd:

; 8019 : 			}
; 8020 : 			////////////////////////////////////////
; 8021 : 			case HOKUM_MFD_MODE_AIR_RADAR:
; 8022 : 			////////////////////////////////////////
; 8023 : 			{
; 8024 : 				draw_air_radar_mfd ();

  00138	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 8025 : 
; 8026 : 				break;

  0013d	eb 65		 jmp	 SHORT $LN2@draw_mfd
$LN18@draw_mfd:

; 8027 : 			}
; 8028 : 			////////////////////////////////////////
; 8029 : 			case HOKUM_MFD_MODE_FLIR:
; 8030 : 			////////////////////////////////////////
; 8031 : 			{
; 8032 : 				draw_2d_flir_mfd (FALSE);

  0013f	6a 00		 push	 0
  00141	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 8033 : 
; 8034 : 				break;

  00146	eb 5c		 jmp	 SHORT $LN2@draw_mfd
$LN19@draw_mfd:

; 8035 : 			}
; 8036 : 			////////////////////////////////////////
; 8037 : 			case HOKUM_MFD_MODE_LLLTV:
; 8038 : 			////////////////////////////////////////
; 8039 : 			{
; 8040 : 				draw_2d_llltv_mfd (FALSE);

  00148	6a 00		 push	 0
  0014a	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXH@Z ; draw_2d_llltv_mfd

; 8041 : 
; 8042 : 				break;

  0014f	eb 53		 jmp	 SHORT $LN2@draw_mfd
$LN20@draw_mfd:

; 8043 : 			}
; 8044 : 			////////////////////////////////////////
; 8045 : 			case HOKUM_MFD_MODE_PERISCOPE:
; 8046 : 			////////////////////////////////////////
; 8047 : 			{
; 8048 : 				draw_2d_periscope_mfd (FALSE);

  00151	6a 00		 push	 0
  00153	e8 00 00 00 00	 call	 ?draw_2d_periscope_mfd@@YGXH@Z ; draw_2d_periscope_mfd

; 8049 : 
; 8050 : 				break;

  00158	eb 4a		 jmp	 SHORT $LN2@draw_mfd
$LN21@draw_mfd:

; 8051 : 			}
; 8052 : 			////////////////////////////////////////
; 8053 : 			case HOKUM_MFD_MODE_TSD:
; 8054 : 			////////////////////////////////////////
; 8055 : 			{
; 8056 : 				draw_tactical_situation_display_mfd (location);

  0015a	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 8057 : 
; 8058 : 				break;

  00163	eb 3f		 jmp	 SHORT $LN2@draw_mfd
$LN22@draw_mfd:

; 8059 : 			}
; 8060 : 			////////////////////////////////////////
; 8061 : 			case HOKUM_MFD_MODE_ASE:
; 8062 : 			////////////////////////////////////////
; 8063 : 			{
; 8064 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  00165	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 8065 : 
; 8066 : 				break;

  0016e	eb 34		 jmp	 SHORT $LN2@draw_mfd
$LN23@draw_mfd:

; 8067 : 			}
; 8068 : 			////////////////////////////////////////
; 8069 : 			case HOKUM_MFD_MODE_WEAPON:
; 8070 : 			////////////////////////////////////////
; 8071 : 			{
; 8072 : 				draw_weapon_display_mfd ();

  00170	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 8073 : 
; 8074 : 				break;

  00175	eb 2d		 jmp	 SHORT $LN2@draw_mfd
$LN24@draw_mfd:

; 8075 : 			}
; 8076 : 			////////////////////////////////////////
; 8077 : 			case HOKUM_MFD_MODE_SYSTEM:
; 8078 : 			////////////////////////////////////////
; 8079 : 			{
; 8080 : 				draw_system_display_mfd ();

  00177	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 8081 : 
; 8082 : 				break;

  0017c	eb 26		 jmp	 SHORT $LN2@draw_mfd
$LN25@draw_mfd:

; 8083 : 			}
; 8084 : 			////////////////////////////////////////
; 8085 : 			case HOKUM_MFD_MODE_ENGINE:
; 8086 : 			////////////////////////////////////////
; 8087 : 			{
; 8088 : 				draw_engine_display_mfd ();

  0017e	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 8089 : 
; 8090 : 				break;

  00183	eb 1f		 jmp	 SHORT $LN2@draw_mfd
$LN26@draw_mfd:

; 8091 : 			}
; 8092 : 			////////////////////////////////////////
; 8093 : 			case HOKUM_MFD_MODE_FLIGHT:
; 8094 : 			////////////////////////////////////////
; 8095 : 			{
; 8096 : 				draw_flight_display_mfd ();

  00185	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 8097 : 
; 8098 : 				break;

  0018a	eb 18		 jmp	 SHORT $LN2@draw_mfd
$LN27@draw_mfd:

; 8099 : 			}
; 8100 : 			////////////////////////////////////////
; 8101 : 			case HOKUM_MFD_MODE_MISSION:
; 8102 : 			////////////////////////////////////////
; 8103 : 			{
; 8104 : 				draw_mission_display_mfd ();

  0018c	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 8105 : 
; 8106 : 				break;

  00191	eb 11		 jmp	 SHORT $LN2@draw_mfd
$LN28@draw_mfd:

; 8107 : 			}
; 8108 : 			////////////////////////////////////////
; 8109 : 			default:
; 8110 : 			////////////////////////////////////////
; 8111 : 			{
; 8112 : 				debug_fatal ("Invalid main MFD mode = %d", mode);

  00193	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00196	50		 push	 eax
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  0019c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  001a1	83 c4 08	 add	 esp, 8
$LN2@draw_mfd:

; 8113 : 
; 8114 : 				break;
; 8115 : 			}
; 8116 : 		}
; 8117 : 
; 8118 : 		flush_screen_texture_graphics (mfd_screen);

  001a4	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8119 : 
; 8120 : 		unlock_screen (mfd_screen);

  001ad	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN10@draw_mfd:

; 8121 : 	}
; 8122 : 
; 8123 : 	set_active_screen (video_screen);

  001b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN1@draw_mfd:

; 8124 : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 0c 00	 ret	 12			; 0000000cH
  001ca	66 90		 npad	 2
$LN30@draw_mfd:
  001cc	00 00 00 00	 DD	 $LN14@draw_mfd
  001d0	00 00 00 00	 DD	 $LN15@draw_mfd
  001d4	00 00 00 00	 DD	 $LN16@draw_mfd
  001d8	00 00 00 00	 DD	 $LN17@draw_mfd
  001dc	00 00 00 00	 DD	 $LN18@draw_mfd
  001e0	00 00 00 00	 DD	 $LN19@draw_mfd
  001e4	00 00 00 00	 DD	 $LN20@draw_mfd
  001e8	00 00 00 00	 DD	 $LN21@draw_mfd
  001ec	00 00 00 00	 DD	 $LN22@draw_mfd
  001f0	00 00 00 00	 DD	 $LN23@draw_mfd
  001f4	00 00 00 00	 DD	 $LN24@draw_mfd
  001f8	00 00 00 00	 DD	 $LN25@draw_mfd
  001fc	00 00 00 00	 DD	 $LN26@draw_mfd
  00200	00 00 00 00	 DD	 $LN27@draw_mfd
?draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ENDP ; draw_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_mission_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv813 = -4112						; size = 4
tv400 = -4112						; size = 4
tv327 = -4112						; size = 4
tv805 = -4108						; size = 4
tv392 = -4108						; size = 4
tv319 = -4108						; size = 4
tv1457 = -4104						; size = 8
tv1210 = -4104						; size = 8
tv1002 = -4104						; size = 8
tv902 = -4104						; size = 4
tv843 = -4104						; size = 4
tv792 = -4104						; size = 4
tv752 = -4104						; size = 4
tv681 = -4104						; size = 4
tv648 = -4104						; size = 4
tv609 = -4104						; size = 4
tv579 = -4104						; size = 4
tv509 = -4104						; size = 4
tv473 = -4104						; size = 4
tv453 = -4104						; size = 4
tv425 = -4104						; size = 4
tv379 = -4104						; size = 4
tv353 = -4104						; size = 4
tv306 = -4104						; size = 4
tv278 = -4104						; size = 4
tv259 = -4104						; size = 4
tv233 = -4104						; size = 4
tv207 = -4104						; size = 4
tv141 = -4104						; size = 4
tv894 = -4100						; size = 4
tv835 = -4100						; size = 4
tv784 = -4100						; size = 4
tv744 = -4100						; size = 4
tv673 = -4100						; size = 4
tv640 = -4100						; size = 4
tv601 = -4100						; size = 4
tv571 = -4100						; size = 4
tv501 = -4100						; size = 4
tv465 = -4100						; size = 4
tv445 = -4100						; size = 4
tv417 = -4100						; size = 4
tv371 = -4100						; size = 4
tv345 = -4100						; size = 4
tv298 = -4100						; size = 4
tv271 = -4100						; size = 4
tv251 = -4100						; size = 4
tv225 = -4100						; size = 4
tv199 = -4100						; size = 4
tv133 = -4100						; size = 4
_buffer$1 = -3584					; size = 1024
_buffer$2 = -2560					; size = 1024
_buffer$3 = -1536					; size = 1024
_objective$ = -512					; size = 4
_keysite$ = -508					; size = 4
_task$ = -504						; size = 4
_member$ = -500						; size = 4
_company$ = -496					; size = 4
_group$ = -492						; size = 4
_en$ = -488						; size = 4
_estimated_time$ = -484					; size = 4
_mission_time$ = -480					; size = 4
_time$ = -476						; size = 4
_x_max$ = -472						; size = 4
_x_mid$ = -468						; size = 4
_x_min$ = -464						; size = 4
_y_adjust$ = -460					; size = 4
_x_adjust$ = -456					; size = 4
_char_height$ = -452					; size = 4
_estimated_seconds$ = -448				; size = 4
_estimated_minutes$ = -444				; size = 4
_estimated_hours$ = -440				; size = 4
_mission_seconds$ = -436				; size = 4
_mission_minutes$ = -432				; size = 4
_mission_hours$ = -428					; size = 4
_seconds$ = -424					; size = 4
_minutes$ = -420					; size = 4
_hours$ = -416						; size = 4
_status_name$ = -412					; size = 4
_formation$ = -408					; size = 4
_s2$ = -404						; size = 200
_s1$ = -204						; size = 200
_c$ = -1						; size = 1
?draw_mission_display_mfd@@YGXXZ PROC			; draw_mission_display_mfd, COMDAT

; 7467 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 10 00 00	 mov	 eax, 4112		; 00001010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 7468 : 	char
; 7469 : 		c,
; 7470 : 		s1[200],
; 7471 : 		s2[200];
; 7472 : 
; 7473 : 	int
; 7474 : 		formation,
; 7475 : 		status_name,
; 7476 : 		hours,
; 7477 : 		minutes,
; 7478 : 		seconds,
; 7479 : 		mission_hours,
; 7480 : 		mission_minutes,
; 7481 : 		mission_seconds,
; 7482 : 		estimated_hours,
; 7483 : 		estimated_minutes,
; 7484 : 		estimated_seconds;
; 7485 : 
; 7486 : 	float
; 7487 : 		char_height,
; 7488 : 		x_adjust,
; 7489 : 		y_adjust,
; 7490 : 		x_min,
; 7491 : 		x_mid,
; 7492 : 		x_max,
; 7493 : 		time,
; 7494 : 		mission_time,
; 7495 : 		estimated_time;
; 7496 : 
; 7497 : 	entity
; 7498 : 		*en,
; 7499 : 		*group,
; 7500 : 		*company,
; 7501 : 		*member,
; 7502 : 		*task,
; 7503 : 		*keysite,
; 7504 : 		*objective;
; 7505 : 
; 7506 : 	en = get_gunship_entity ();

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00015	89 85 18 fe ff
	ff		 mov	 DWORD PTR _en$[ebp], eax

; 7507 : 
; 7508 : 	get_2d_float_screen_y_coordinate (1.0, &y_adjust);

  0001b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7509 : 
; 7510 : 	get_2d_float_screen_x_coordinate (-1.0, &x_min);

  00035	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _x_min$[ebp]
  0003b	50		 push	 eax
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7511 : 
; 7512 : 	get_2d_float_screen_x_coordinate (0.0, &x_mid);

  0004f	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _x_mid$[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7513 : 
; 7514 : 	get_2d_float_screen_x_coordinate (1.0, &x_max);

  00064	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _x_max$[ebp]
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7515 : 
; 7516 : 	if (draw_large_mfd)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00085	74 5d		 je	 SHORT $LN4@draw_missi

; 7517 : 	{
; 7518 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00087	6a 05		 push	 5
  00089	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7519 : 
; 7520 : 		y_adjust += 3.0;

  0008e	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00096	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0009e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7521 : 
; 7522 : 		x_min += 3.0;

  000aa	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  000b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  000ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000be	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 7523 : 
; 7524 : 		x_max -= 3.0;

  000c6	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  000ce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4008000000000000
  000d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000da	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 7525 : 	}
; 7526 : 	else

  000e2	eb 5b		 jmp	 SHORT $LN5@draw_missi
$LN4@draw_missi:

; 7527 : 	{
; 7528 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7529 : 
; 7530 : 		y_adjust += 2.0;

  000eb	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  000f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  000fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ff	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7531 : 
; 7532 : 		x_min += 2.0;

  00107	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  0010f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00117	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011b	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 7533 : 
; 7534 : 		x_max -= 2.0;

  00123	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  0012b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00133	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00137	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0
$LN5@draw_missi:

; 7535 : 	}
; 7536 : 
; 7537 : 	char_height = get_mono_font_char_height ('X');

  0013f	6a 58		 push	 88			; 00000058H
  00141	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00146	d9 9d 3c fe ff
	ff		 fstp	 DWORD PTR _char_height$[ebp]

; 7538 : 
; 7539 : 	////////////////////////////////////////
; 7540 : 	//
; 7541 : 	// flight group
; 7542 : 	//
; 7543 : 	////////////////////////////////////////
; 7544 : 
; 7545 : 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0014c	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR _en$[ebp], 0
  00153	74 10		 je	 SHORT $LN35@draw_missi
  00155	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv133[ebp], ecx
  00163	eb 24		 jmp	 SHORT $LN36@draw_missi
$LN35@draw_missi:
  00165	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0016b	83 c2 4e	 add	 edx, 78			; 0000004eH
  0016e	52		 push	 edx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN36@draw_missi:
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	85 c9		 test	 ecx, ecx
  00190	74 0c		 je	 SHORT $LN37@draw_missi
  00192	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv141[ebp], 25 ; 00000019H
  0019c	eb 24		 jmp	 SHORT $LN38@draw_missi
$LN37@draw_missi:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  001a4	83 c2 4e	 add	 edx, 78			; 0000004eH
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN38@draw_missi:
  001c2	6a 19		 push	 25			; 00000019H
  001c4	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  001ca	51		 push	 ecx
  001cb	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv133[ebp], 180
  001d5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  001db	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001e2	ff d1		 call	 ecx
  001e4	89 85 14 fe ff
	ff		 mov	 DWORD PTR _group$[ebp], eax

; 7546 : 
; 7547 : 	if (group)

  001ea	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  001f1	0f 84 39 0b 00
	00		 je	 $LN6@draw_missi

; 7548 : 	{
; 7549 : 		//
; 7550 : 		// title
; 7551 : 		//
; 7552 : 
; 7553 : 		set_mono_font_colour (MFD_COLOUR_GREEN);

  001f7	b8 04 00 00 00	 mov	 eax, 4
  001fc	6b c8 0d	 imul	 ecx, eax, 13
  001ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7554 : 
; 7555 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  0020b	b8 04 00 00 00	 mov	 eax, 4
  00210	6b c8 0d	 imul	 ecx, eax, 13
  00213	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00219	52		 push	 edx
  0021a	51		 push	 ecx
  0021b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	51		 push	 ecx
  00229	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	51		 push	 ecx
  00237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7556 : 
; 7557 : 		y_adjust += 2.0;

  00257	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0025f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00267	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7558 : 
; 7559 : 		x_adjust = get_mono_font_string_width ("FLIGHT GROUP") * 0.5;

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  00278	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0027d	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1002[ebp]
  00283	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1002[ebp]
  0028b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00293	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00297	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7560 : 
; 7561 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  0029f	51		 push	 ecx
  002a0	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  002b5	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002bd	51		 push	 ecx
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7562 : 
; 7563 : 		print_mono_font_string ("FLIGHT GROUP");

  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  002cd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7564 : 
; 7565 : 		y_adjust += char_height;

  002d2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002da	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  002e2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7566 : 
; 7567 : 		if (draw_large_mfd)

  002ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002f1	74 1c		 je	 SHORT $LN7@draw_missi

; 7568 : 		{
; 7569 : 			y_adjust -= 1.0;

  002f3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  002fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00303	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00307	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_missi:

; 7570 : 		}
; 7571 : 
; 7572 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  0030f	b8 04 00 00 00	 mov	 eax, 4
  00314	6b c8 0d	 imul	 ecx, eax, 13
  00317	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031d	52		 push	 edx
  0031e	51		 push	 ecx
  0031f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032c	51		 push	 ecx
  0032d	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033a	51		 push	 ecx
  0033b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00343	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00348	51		 push	 ecx
  00349	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00351	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00356	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7573 : 
; 7574 : 		if (draw_large_mfd)

  0035b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00362	74 1e		 je	 SHORT $LN8@draw_missi

; 7575 : 		{
; 7576 : 			y_adjust += 3.0;

  00364	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0036c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00374	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00378	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7577 : 		}
; 7578 : 		else

  00380	eb 1c		 jmp	 SHORT $LN9@draw_missi
$LN8@draw_missi:

; 7579 : 		{
; 7580 : 			y_adjust += 2.0;

  00382	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0038a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00392	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00396	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN9@draw_missi:

; 7581 : 		}
; 7582 : 
; 7583 : 		set_mono_font_colour (MFD_COLOUR3);

  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	d1 e0		 shl	 eax, 1
  003a5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  003ab	51		 push	 ecx
  003ac	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7584 : 
; 7585 : 		//
; 7586 : 		// division name
; 7587 : 		//
; 7588 : 
; 7589 : 		if (get_global_current_language () != LANGUAGE_RUSSIAN)

  003b1	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  003b8	0f 84 b4 01 00
	00		 je	 $LN10@draw_missi

; 7590 : 		{
; 7591 : 			company = get_local_entity_parent (group, LIST_TYPE_DIVISION);

  003be	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  003c5	74 10		 je	 SHORT $LN39@draw_missi
  003c7	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  003cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cf	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003d5	eb 24		 jmp	 SHORT $LN40@draw_missi
$LN39@draw_missi:
  003d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  003dd	83 c2 7c	 add	 edx, 124		; 0000007cH
  003e0	52		 push	 edx
  003e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003eb	50		 push	 eax
  003ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f1	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN40@draw_missi:
  003fb	b9 01 00 00 00	 mov	 ecx, 1
  00400	85 c9		 test	 ecx, ecx
  00402	74 0c		 je	 SHORT $LN41@draw_missi
  00404	c7 85 f8 ef ff
	ff 0b 00 00 00	 mov	 DWORD PTR tv207[ebp], 11 ; 0000000bH
  0040e	eb 24		 jmp	 SHORT $LN42@draw_missi
$LN41@draw_missi:
  00410	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00416	83 c2 7c	 add	 edx, 124		; 0000007cH
  00419	52		 push	 edx
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0041f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0042a	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN42@draw_missi:
  00434	6a 0b		 push	 11			; 0000000bH
  00436	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  0043c	51		 push	 ecx
  0043d	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00447	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  0044d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00454	ff d1		 call	 ecx
  00456	89 85 10 fe ff
	ff		 mov	 DWORD PTR _company$[ebp], eax

; 7592 : 
; 7593 : 			ASSERT (company);

  0045c	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00463	75 18		 jne	 SHORT $LN11@draw_missi
  00465	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0046a	83 c0 7e	 add	 eax, 126		; 0000007eH
  0046d	50		 push	 eax
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00473	68 00 00 00 00	 push	 OFFSET ??_C@_07MLNBPDHK@company@
  00478	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_missi:

; 7594 : 
; 7595 : 			sprintf (s1, "%s:", get_local_entity_string (company, STRING_TYPE_DIVISION_NAME));

  0047d	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00484	74 10		 je	 SHORT $LN43@draw_missi
  00486	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _company$[ebp]
  0048c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048e	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
  00494	eb 27		 jmp	 SHORT $LN44@draw_missi
$LN43@draw_missi:
  00496	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0049c	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004a2	52		 push	 edx
  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004ad	50		 push	 eax
  004ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b3	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN44@draw_missi:
  004bd	b9 01 00 00 00	 mov	 ecx, 1
  004c2	85 c9		 test	 ecx, ecx
  004c4	74 0c		 je	 SHORT $LN45@draw_missi
  004c6	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
  004d0	eb 27		 jmp	 SHORT $LN46@draw_missi
$LN45@draw_missi:
  004d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  004d8	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004de	52		 push	 edx
  004df	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  004e9	50		 push	 eax
  004ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ef	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$LN46@draw_missi:
  004f9	6a 00		 push	 0
  004fb	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR _company$[ebp]
  00501	51		 push	 ecx
  00502	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv225[ebp], 52
  00509	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv233[ebp]
  0050f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00516	ff d1		 call	 ecx
  00518	50		 push	 eax
  00519	68 00 00 00 00	 push	 OFFSET ??_C@_03DKEJHHJP@?$CFs?3@
  0051e	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00524	52		 push	 edx
  00525	e8 00 00 00 00	 call	 _sprintf
  0052a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7596 : 
; 7597 : 			set_mono_font_position (x_min, y_adjust);

  0052d	51		 push	 ecx
  0052e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00544	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00549	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7598 : 
; 7599 : 			print_mono_font_max_length_string (s1);

  0054e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00554	50		 push	 eax
  00555	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7600 : 
; 7601 : 			y_adjust += char_height;

  0055a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00562	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0056a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_missi:

; 7602 : 		}
; 7603 : 
; 7604 : 		//
; 7605 : 		// members (callsign, players' rank and name, group leader)
; 7606 : 		//
; 7607 : 
; 7608 : 		member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  00572	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  00579	74 10		 je	 SHORT $LN47@draw_missi
  0057b	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00581	8b 08		 mov	 ecx, DWORD PTR [eax]
  00583	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv251[ebp], ecx
  00589	eb 27		 jmp	 SHORT $LN48@draw_missi
$LN47@draw_missi:
  0058b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00591	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  00597	52		 push	 edx
  00598	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005a2	50		 push	 eax
  005a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005a8	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv251[ebp], 0
$LN48@draw_missi:
  005b2	b9 01 00 00 00	 mov	 ecx, 1
  005b7	85 c9		 test	 ecx, ecx
  005b9	74 0c		 je	 SHORT $LN49@draw_missi
  005bb	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv259[ebp], 25 ; 00000019H
  005c5	eb 27		 jmp	 SHORT $LN50@draw_missi
$LN49@draw_missi:
  005c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  005cd	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  005d3	52		 push	 edx
  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  005de	50		 push	 eax
  005df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005e4	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN50@draw_missi:
  005ee	6a 19		 push	 25			; 00000019H
  005f0	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  005f6	51		 push	 ecx
  005f7	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv251[ebp], 180
  00601	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00607	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0060e	ff d1		 call	 ecx
  00610	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax
$LN2@draw_missi:

; 7609 : 
; 7610 : 		while (member)

  00616	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0061d	0f 84 f2 05 00
	00		 je	 $LN3@draw_missi

; 7611 : 		{
; 7612 : 			if (get_local_entity_int_value (member, INT_TYPE_GROUP_LEADER))

  00623	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0062a	74 10		 je	 SHORT $LN51@draw_missi
  0062c	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00632	8b 08		 mov	 ecx, DWORD PTR [eax]
  00634	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv271[ebp], ecx
  0063a	eb 20		 jmp	 SHORT $LN52@draw_missi
$LN51@draw_missi:
  0063c	68 bc 1d 00 00	 push	 7612			; 00001dbcH
  00641	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00646	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064c	52		 push	 edx
  0064d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00652	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv271[ebp], 0
$LN52@draw_missi:
  0065c	b8 01 00 00 00	 mov	 eax, 1
  00661	85 c0		 test	 eax, eax
  00663	74 0c		 je	 SHORT $LN53@draw_missi
  00665	c7 85 f8 ef ff
	ff 48 00 00 00	 mov	 DWORD PTR tv278[ebp], 72 ; 00000048H
  0066f	eb 20		 jmp	 SHORT $LN54@draw_missi
$LN53@draw_missi:
  00671	68 bc 1d 00 00	 push	 7612			; 00001dbcH
  00676	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0067b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00681	51		 push	 ecx
  00682	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00687	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN54@draw_missi:
  00691	6a 48		 push	 72			; 00000048H
  00693	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  00699	52		 push	 edx
  0069a	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv271[ebp], 1116
  006a4	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  006aa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  006b1	ff d2		 call	 edx
  006b3	85 c0		 test	 eax, eax
  006b5	74 06		 je	 SHORT $LN12@draw_missi

; 7613 : 			{
; 7614 : 				c = '>';

  006b7	c6 45 ff 3e	 mov	 BYTE PTR _c$[ebp], 62	; 0000003eH

; 7615 : 			}
; 7616 : 			else

  006bb	eb 04		 jmp	 SHORT $LN13@draw_missi
$LN12@draw_missi:

; 7617 : 			{
; 7618 : 				c = ' ';

  006bd	c6 45 ff 20	 mov	 BYTE PTR _c$[ebp], 32	; 00000020H
$LN13@draw_missi:

; 7619 : 			}
; 7620 : 
; 7621 : 			if (get_player_rank_and_name (member, s2))

  006c1	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _s2$[ebp]
  006c7	50		 push	 eax
  006c8	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  006ce	51		 push	 ecx
  006cf	e8 00 00 00 00	 call	 ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ; get_player_rank_and_name
  006d4	85 c0		 test	 eax, eax
  006d6	0f 84 2f 02 00
	00		 je	 $LN14@draw_missi

; 7622 : 			{
; 7623 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  006dc	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  006e3	0f 84 5e 01 00
	00		 je	 $LN16@draw_missi

; 7624 : 				{
; 7625 : 					sprintf

  006e9	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  006f0	74 10		 je	 SHORT $LN55@draw_missi
  006f2	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  006f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fa	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv298[ebp], ecx
  00700	eb 27		 jmp	 SHORT $LN56@draw_missi
$LN55@draw_missi:
  00702	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00708	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0070e	52		 push	 edx
  0070f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00714	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00719	50		 push	 eax
  0071a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0071f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv298[ebp], 0
$LN56@draw_missi:
  00729	b9 01 00 00 00	 mov	 ecx, 1
  0072e	85 c9		 test	 ecx, ecx
  00730	74 0c		 je	 SHORT $LN57@draw_missi
  00732	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv306[ebp], 74 ; 0000004aH
  0073c	eb 27		 jmp	 SHORT $LN58@draw_missi
$LN57@draw_missi:
  0073e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00744	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0074a	52		 push	 edx
  0074b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00750	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00755	50		 push	 eax
  00756	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv306[ebp], 0
$LN58@draw_missi:
  00765	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0076c	74 10		 je	 SHORT $LN59@draw_missi
  0076e	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00774	8b 11		 mov	 edx, DWORD PTR [ecx]
  00776	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv319[ebp], edx
  0077c	eb 26		 jmp	 SHORT $LN60@draw_missi
$LN59@draw_missi:
  0077e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00783	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  00788	50		 push	 eax
  00789	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0078e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00794	51		 push	 ecx
  00795	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0079a	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv319[ebp], 0
$LN60@draw_missi:
  007a4	ba 01 00 00 00	 mov	 edx, 1
  007a9	85 d2		 test	 edx, edx
  007ab	74 0c		 je	 SHORT $LN61@draw_missi
  007ad	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv327[ebp], 4
  007b7	eb 26		 jmp	 SHORT $LN62@draw_missi
$LN61@draw_missi:
  007b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  007be	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  007c3	50		 push	 eax
  007c4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  007cf	51		 push	 ecx
  007d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007d5	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$LN62@draw_missi:
  007df	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _s2$[ebp]
  007e5	52		 push	 edx
  007e6	6a 4a		 push	 74			; 0000004aH
  007e8	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  007ee	50		 push	 eax
  007ef	69 8d fc ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv298[ebp], 1116
  007f9	8b 95 f8 ef ff
	ff		 mov	 edx, DWORD PTR tv306[ebp]
  007ff	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  00806	ff d0		 call	 eax
  00808	50		 push	 eax
  00809	6a 04		 push	 4
  0080b	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00811	51		 push	 ecx
  00812	6b 95 f4 ef ff
	ff 34		 imul	 edx, DWORD PTR tv319[ebp], 52
  00819	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR tv327[ebp]
  0081f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00826	ff d1		 call	 ecx
  00828	50		 push	 eax
  00829	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  0082d	52		 push	 edx
  0082e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
  00833	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00839	50		 push	 eax
  0083a	e8 00 00 00 00	 call	 _sprintf
  0083f	83 c4 18	 add	 esp, 24			; 00000018H

; 7626 : 					(
; 7627 : 						s1,
; 7628 : 						"%c%s 1-%d %s",
; 7629 : 						c,
; 7630 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 7631 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 7632 : 						s2
; 7633 : 					);
; 7634 : 				}
; 7635 : 				else

  00842	e9 bf 00 00 00	 jmp	 $LN17@draw_missi
$LN16@draw_missi:

; 7636 : 				{
; 7637 : 					sprintf

  00847	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0084e	74 10		 je	 SHORT $LN63@draw_missi
  00850	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00856	8b 08		 mov	 ecx, DWORD PTR [eax]
  00858	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv345[ebp], ecx
  0085e	eb 27		 jmp	 SHORT $LN64@draw_missi
$LN63@draw_missi:
  00860	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00866	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  0086c	52		 push	 edx
  0086d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00872	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00877	50		 push	 eax
  00878	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0087d	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv345[ebp], 0
$LN64@draw_missi:
  00887	b9 01 00 00 00	 mov	 ecx, 1
  0088c	85 c9		 test	 ecx, ecx
  0088e	74 0c		 je	 SHORT $LN65@draw_missi
  00890	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv353[ebp], 74 ; 0000004aH
  0089a	eb 27		 jmp	 SHORT $LN66@draw_missi
$LN65@draw_missi:
  0089c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  008a2	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  008a8	52		 push	 edx
  008a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008b3	50		 push	 eax
  008b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008b9	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN66@draw_missi:
  008c3	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _s2$[ebp]
  008c9	51		 push	 ecx
  008ca	6a 4a		 push	 74			; 0000004aH
  008cc	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  008d2	52		 push	 edx
  008d3	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv345[ebp], 1116
  008dd	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv353[ebp]
  008e3	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  008ea	ff d2		 call	 edx
  008ec	50		 push	 eax
  008ed	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$[ebp]
  008f1	50		 push	 eax
  008f2	68 00 00 00 00	 push	 OFFSET ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
  008f7	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  008fd	51		 push	 ecx
  008fe	e8 00 00 00 00	 call	 _sprintf
  00903	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@draw_missi:

; 7638 : 					(
; 7639 : 						s1,
; 7640 : 						"%c1-%d %s",
; 7641 : 						c,
; 7642 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 7643 : 						s2
; 7644 : 					);
; 7645 : 				}
; 7646 : 			}
; 7647 : 			else

  00906	e9 1c 02 00 00	 jmp	 $LN19@draw_missi
$LN14@draw_missi:

; 7648 : 			{
; 7649 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  0090b	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  00912	0f 84 57 01 00
	00		 je	 $LN18@draw_missi

; 7650 : 				{
; 7651 : 					sprintf

  00918	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0091f	74 10		 je	 SHORT $LN67@draw_missi
  00921	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00927	8b 08		 mov	 ecx, DWORD PTR [eax]
  00929	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv371[ebp], ecx
  0092f	eb 27		 jmp	 SHORT $LN68@draw_missi
$LN67@draw_missi:
  00931	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00937	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0093d	52		 push	 edx
  0093e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00943	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00948	50		 push	 eax
  00949	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0094e	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv371[ebp], 0
$LN68@draw_missi:
  00958	b9 01 00 00 00	 mov	 ecx, 1
  0095d	85 c9		 test	 ecx, ecx
  0095f	74 0c		 je	 SHORT $LN69@draw_missi
  00961	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv379[ebp], 74 ; 0000004aH
  0096b	eb 27		 jmp	 SHORT $LN70@draw_missi
$LN69@draw_missi:
  0096d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00973	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  00979	52		 push	 edx
  0097a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0097f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00984	50		 push	 eax
  00985	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0098a	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv379[ebp], 0
$LN70@draw_missi:
  00994	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0099b	74 10		 je	 SHORT $LN71@draw_missi
  0099d	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  009a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  009a5	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv392[ebp], edx
  009ab	eb 26		 jmp	 SHORT $LN72@draw_missi
$LN71@draw_missi:
  009ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009b2	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009b7	50		 push	 eax
  009b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009c3	51		 push	 ecx
  009c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009c9	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN72@draw_missi:
  009d3	ba 01 00 00 00	 mov	 edx, 1
  009d8	85 d2		 test	 edx, edx
  009da	74 0c		 je	 SHORT $LN73@draw_missi
  009dc	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv400[ebp], 4
  009e6	eb 26		 jmp	 SHORT $LN74@draw_missi
$LN73@draw_missi:
  009e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009ed	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009f2	50		 push	 eax
  009f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  009fe	51		 push	 ecx
  009ff	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a04	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN74@draw_missi:
  00a0e	6a 4a		 push	 74			; 0000004aH
  00a10	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  00a16	52		 push	 edx
  00a17	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv371[ebp], 1116
  00a21	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv379[ebp]
  00a27	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a2e	ff d2		 call	 edx
  00a30	50		 push	 eax
  00a31	6a 04		 push	 4
  00a33	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00a39	50		 push	 eax
  00a3a	6b 8d f4 ef ff
	ff 34		 imul	 ecx, DWORD PTR tv392[ebp], 52
  00a41	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv400[ebp]
  00a47	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[ecx+edx*4]
  00a4e	ff d0		 call	 eax
  00a50	50		 push	 eax
  00a51	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00a55	51		 push	 ecx
  00a56	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
  00a5b	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00a61	52		 push	 edx
  00a62	e8 00 00 00 00	 call	 _sprintf
  00a67	83 c4 14	 add	 esp, 20			; 00000014H

; 7652 : 					(
; 7653 : 						s1,
; 7654 : 						"%c%s 1-%d",
; 7655 : 						c,
; 7656 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 7657 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 7658 : 					);
; 7659 : 				}
; 7660 : 				else

  00a6a	e9 b8 00 00 00	 jmp	 $LN19@draw_missi
$LN18@draw_missi:

; 7661 : 				{
; 7662 : 					sprintf

  00a6f	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00a76	74 10		 je	 SHORT $LN75@draw_missi
  00a78	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00a7e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a80	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv417[ebp], ecx
  00a86	eb 27		 jmp	 SHORT $LN76@draw_missi
$LN75@draw_missi:
  00a88	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00a8e	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00a94	52		 push	 edx
  00a95	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a9f	50		 push	 eax
  00aa0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aa5	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv417[ebp], 0
$LN76@draw_missi:
  00aaf	b9 01 00 00 00	 mov	 ecx, 1
  00ab4	85 c9		 test	 ecx, ecx
  00ab6	74 0c		 je	 SHORT $LN77@draw_missi
  00ab8	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv425[ebp], 74 ; 0000004aH
  00ac2	eb 27		 jmp	 SHORT $LN78@draw_missi
$LN77@draw_missi:
  00ac4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00aca	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00ad0	52		 push	 edx
  00ad1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00adb	50		 push	 eax
  00adc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae1	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv425[ebp], 0
$LN78@draw_missi:
  00aeb	6a 4a		 push	 74			; 0000004aH
  00aed	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00af3	51		 push	 ecx
  00af4	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv417[ebp], 1116
  00afe	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv425[ebp]
  00b04	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b0b	ff d1		 call	 ecx
  00b0d	50		 push	 eax
  00b0e	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00b12	52		 push	 edx
  00b13	68 00 00 00 00	 push	 OFFSET ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
  00b18	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b1e	50		 push	 eax
  00b1f	e8 00 00 00 00	 call	 _sprintf
  00b24	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@draw_missi:

; 7663 : 					(
; 7664 : 						s1,
; 7665 : 						"%c1-%d",
; 7666 : 						c,
; 7667 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 7668 : 					);
; 7669 : 				}
; 7670 : 			}
; 7671 : 
; 7672 : 			set_mono_font_position (x_min, y_adjust);

  00b27	51		 push	 ecx
  00b28	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b35	51		 push	 ecx
  00b36	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00b3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b43	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7673 : 
; 7674 : 			print_mono_font_max_length_string (s1);

  00b48	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b4e	50		 push	 eax
  00b4f	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7675 : 
; 7676 : 			y_adjust += char_height;

  00b54	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b5c	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00b64	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7677 : 
; 7678 : 			member = get_local_entity_child_succ (member, LIST_TYPE_MEMBER);

  00b6c	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00b73	74 10		 je	 SHORT $LN79@draw_missi
  00b75	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00b7b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv445[ebp], ecx
  00b83	eb 27		 jmp	 SHORT $LN80@draw_missi
$LN79@draw_missi:
  00b85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00b8b	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00b91	52		 push	 edx
  00b92	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b97	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b9c	50		 push	 eax
  00b9d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ba2	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv445[ebp], 0
$LN80@draw_missi:
  00bac	b9 01 00 00 00	 mov	 ecx, 1
  00bb1	85 c9		 test	 ecx, ecx
  00bb3	74 0c		 je	 SHORT $LN81@draw_missi
  00bb5	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv453[ebp], 25 ; 00000019H
  00bbf	eb 27		 jmp	 SHORT $LN82@draw_missi
$LN81@draw_missi:
  00bc1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00bc7	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00bcd	52		 push	 edx
  00bce	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bd3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bd8	50		 push	 eax
  00bd9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bde	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv453[ebp], 0
$LN82@draw_missi:
  00be8	6a 19		 push	 25			; 00000019H
  00bea	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00bf0	51		 push	 ecx
  00bf1	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv445[ebp], 180
  00bfb	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv453[ebp]
  00c01	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c08	ff d1		 call	 ecx
  00c0a	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax

; 7679 : 		}

  00c10	e9 01 fa ff ff	 jmp	 $LN2@draw_missi
$LN3@draw_missi:

; 7680 : 
; 7681 : 		//
; 7682 : 		// formation
; 7683 : 		//
; 7684 : 
; 7685 : 		formation = get_local_entity_int_value (group, INT_TYPE_GROUP_FORMATION);

  00c15	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  00c1c	74 10		 je	 SHORT $LN83@draw_missi
  00c1e	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00c24	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c26	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv465[ebp], ecx
  00c2c	eb 27		 jmp	 SHORT $LN84@draw_missi
$LN83@draw_missi:
  00c2e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c34	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c3a	52		 push	 edx
  00c3b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c40	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c45	50		 push	 eax
  00c46	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c4b	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv465[ebp], 0
$LN84@draw_missi:
  00c55	b9 01 00 00 00	 mov	 ecx, 1
  00c5a	85 c9		 test	 ecx, ecx
  00c5c	74 0c		 je	 SHORT $LN85@draw_missi
  00c5e	c7 85 f8 ef ff
	ff 47 00 00 00	 mov	 DWORD PTR tv473[ebp], 71 ; 00000047H
  00c68	eb 27		 jmp	 SHORT $LN86@draw_missi
$LN85@draw_missi:
  00c6a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c70	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c76	52		 push	 edx
  00c77	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c7c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00c81	50		 push	 eax
  00c82	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c87	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
$LN86@draw_missi:
  00c91	6a 47		 push	 71			; 00000047H
  00c93	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00c99	51		 push	 ecx
  00c9a	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv465[ebp], 1116
  00ca4	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv473[ebp]
  00caa	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00cb1	ff d1		 call	 ecx
  00cb3	89 85 68 fe ff
	ff		 mov	 DWORD PTR _formation$[ebp], eax

; 7686 : 
; 7687 : 		sprintf (s1, "FORMATION:%s", formation_display_names[formation]);

  00cb9	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _formation$[ebp]
  00cbf	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?formation_display_names@@3PAPBDA[eax*4]
  00cc6	51		 push	 ecx
  00cc7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
  00ccc	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00cd2	52		 push	 edx
  00cd3	e8 00 00 00 00	 call	 _sprintf
  00cd8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7688 : 
; 7689 : 		set_mono_font_position (x_min, y_adjust);

  00cdb	51		 push	 ecx
  00cdc	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ce4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce9	51		 push	 ecx
  00cea	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00cf2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf7	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7690 : 
; 7691 : 		print_mono_font_max_length_string (s1);

  00cfc	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00d02	50		 push	 eax
  00d03	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7692 : 
; 7693 : 		y_adjust += char_height + 2.0;

  00d08	f3 0f 5a 85 3c
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _char_height$[ebp]
  00d10	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00d18	f3 0f 5a 8d 34
	fe ff ff	 cvtss2sd xmm1, DWORD PTR _y_adjust$[ebp]
  00d20	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00d24	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00d28	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@draw_missi:

; 7694 : 	}
; 7695 : 
; 7696 : 	////////////////////////////////////////
; 7697 : 	//
; 7698 : 	// mission
; 7699 : 	//
; 7700 : 	////////////////////////////////////////
; 7701 : 
; 7702 : 	task = get_player_task (NULL);

  00d30	6a 00		 push	 0
  00d32	e8 00 00 00 00	 call	 ?get_player_task@@YGPAUENTITY@@PAU1@@Z ; get_player_task
  00d37	89 85 08 fe ff
	ff		 mov	 DWORD PTR _task$[ebp], eax

; 7703 : 
; 7704 : 	if (task)

  00d3d	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d44	0f 84 ad 0c 00
	00		 je	 $LN20@draw_missi

; 7705 : 	{
; 7706 : 		ASSERT (get_local_entity_int_value (task, INT_TYPE_VISIBLE_TASK));

  00d4a	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d51	74 10		 je	 SHORT $LN87@draw_missi
  00d53	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00d59	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5b	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d61	eb 27		 jmp	 SHORT $LN88@draw_missi
$LN87@draw_missi:
  00d63	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00d69	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00d6f	52		 push	 edx
  00d70	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d75	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d7a	50		 push	 eax
  00d7b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d80	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN88@draw_missi:
  00d8a	b9 01 00 00 00	 mov	 ecx, 1
  00d8f	85 c9		 test	 ecx, ecx
  00d91	74 0c		 je	 SHORT $LN89@draw_missi
  00d93	c7 85 f8 ef ff
	ff fa 00 00 00	 mov	 DWORD PTR tv509[ebp], 250 ; 000000faH
  00d9d	eb 27		 jmp	 SHORT $LN90@draw_missi
$LN89@draw_missi:
  00d9f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00da5	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00dab	52		 push	 edx
  00dac	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00db1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00db6	50		 push	 eax
  00db7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dbc	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv509[ebp], 0
$LN90@draw_missi:
  00dc6	68 fa 00 00 00	 push	 250			; 000000faH
  00dcb	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  00dd1	51		 push	 ecx
  00dd2	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv501[ebp], 1116
  00ddc	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv509[ebp]
  00de2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00de9	ff d1		 call	 ecx
  00deb	85 c0		 test	 eax, eax
  00ded	75 1a		 jne	 SHORT $LN21@draw_missi
  00def	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00df4	05 ef 00 00 00	 add	 eax, 239		; 000000efH
  00df9	50		 push	 eax
  00dfa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dff	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
  00e04	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_missi:

; 7707 : 
; 7708 : 		//
; 7709 : 		// title
; 7710 : 		//
; 7711 : 
; 7712 : 		set_mono_font_colour (MFD_COLOUR_GREEN);

  00e09	b8 04 00 00 00	 mov	 eax, 4
  00e0e	6b c8 0d	 imul	 ecx, eax, 13
  00e11	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e17	52		 push	 edx
  00e18	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7713 : 
; 7714 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  00e1d	b8 04 00 00 00	 mov	 eax, 4
  00e22	6b c8 0d	 imul	 ecx, eax, 13
  00e25	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e2b	52		 push	 edx
  00e2c	51		 push	 ecx
  00e2d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	51		 push	 ecx
  00e3b	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00e43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e48	51		 push	 ecx
  00e49	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e56	51		 push	 ecx
  00e57	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00e5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e64	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7715 : 
; 7716 : 		y_adjust += 2.0;

  00e69	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00e71	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00e79	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e7d	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7717 : 
; 7718 : 		x_adjust = get_mono_font_string_width ("MISSION") * 0.5;

  00e85	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00e8a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e8f	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1210[ebp]
  00e95	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1210[ebp]
  00e9d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00ea5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ea9	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7719 : 
; 7720 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  00eb1	51		 push	 ecx
  00eb2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00eba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebf	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  00ec7	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ecf	51		 push	 ecx
  00ed0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed5	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7721 : 
; 7722 : 		print_mono_font_string ("MISSION");

  00eda	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00edf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7723 : 
; 7724 : 		y_adjust += char_height;

  00ee4	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00eec	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00ef4	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7725 : 
; 7726 : 		if (draw_large_mfd)

  00efc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f03	74 1c		 je	 SHORT $LN22@draw_missi

; 7727 : 		{
; 7728 : 			y_adjust -= 1.0;

  00f05	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f0d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00f15	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f19	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN22@draw_missi:

; 7729 : 		}
; 7730 : 
; 7731 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  00f21	b8 04 00 00 00	 mov	 eax, 4
  00f26	6b c8 0d	 imul	 ecx, eax, 13
  00f29	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f2f	52		 push	 edx
  00f30	51		 push	 ecx
  00f31	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3e	51		 push	 ecx
  00f3f	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00f47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4c	51		 push	 ecx
  00f4d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5a	51		 push	 ecx
  00f5b	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00f63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f68	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7732 : 
; 7733 : 		if (draw_large_mfd)

  00f6d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f74	74 1e		 je	 SHORT $LN23@draw_missi

; 7734 : 		{
; 7735 : 			y_adjust += 3.0;

  00f76	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f7e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00f86	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f8a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7736 : 		}
; 7737 : 		else

  00f92	eb 1c		 jmp	 SHORT $LN24@draw_missi
$LN23@draw_missi:

; 7738 : 		{
; 7739 : 			y_adjust += 2.0;

  00f94	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f9c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00fa4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fa8	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN24@draw_missi:

; 7740 : 		}
; 7741 : 
; 7742 : 		set_mono_font_colour (MFD_COLOUR3);

  00fb0	b8 04 00 00 00	 mov	 eax, 4
  00fb5	d1 e0		 shl	 eax, 1
  00fb7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00fbd	51		 push	 ecx
  00fbe	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7743 : 
; 7744 : 		//
; 7745 : 		// type
; 7746 : 		//
; 7747 : 
; 7748 : 		sprintf (s1, "TYPE  :%s", get_local_entity_string (task, STRING_TYPE_SHORT_DISPLAY_NAME));

  00fc3	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00fca	74 10		 je	 SHORT $LN91@draw_missi
  00fcc	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00fd2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd4	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv571[ebp], ecx
  00fda	eb 27		 jmp	 SHORT $LN92@draw_missi
$LN91@draw_missi:
  00fdc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00fe2	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  00fe8	52		 push	 edx
  00fe9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ff3	50		 push	 eax
  00ff4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ff9	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], 0
$LN92@draw_missi:
  01003	b9 01 00 00 00	 mov	 ecx, 1
  01008	85 c9		 test	 ecx, ecx
  0100a	74 0c		 je	 SHORT $LN93@draw_missi
  0100c	c7 85 f8 ef ff
	ff 0c 00 00 00	 mov	 DWORD PTR tv579[ebp], 12 ; 0000000cH
  01016	eb 27		 jmp	 SHORT $LN94@draw_missi
$LN93@draw_missi:
  01018	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0101e	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  01024	52		 push	 edx
  01025	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0102a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0102f	50		 push	 eax
  01030	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01035	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv579[ebp], 0
$LN94@draw_missi:
  0103f	6a 0c		 push	 12			; 0000000cH
  01041	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01047	51		 push	 ecx
  01048	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv571[ebp], 52
  0104f	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv579[ebp]
  01055	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0105c	ff d1		 call	 ecx
  0105e	50		 push	 eax
  0105f	68 00 00 00 00	 push	 OFFSET ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
  01064	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  0106a	52		 push	 edx
  0106b	e8 00 00 00 00	 call	 _sprintf
  01070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7749 : 
; 7750 : 		set_mono_font_position (x_min, y_adjust);

  01073	51		 push	 ecx
  01074	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0107c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01081	51		 push	 ecx
  01082	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0108a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108f	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7751 : 
; 7752 : 		print_mono_font_max_length_string (s1);

  01094	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0109a	50		 push	 eax
  0109b	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7753 : 
; 7754 : 		y_adjust += char_height;

  010a0	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  010a8	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  010b0	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7755 : 
; 7756 : 		if (draw_large_mfd)

  010b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  010bf	74 1c		 je	 SHORT $LN25@draw_missi

; 7757 : 		{
; 7758 : 			y_adjust += 2.0;

  010c1	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  010c9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  010d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d5	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_missi:

; 7759 : 		}
; 7760 : 
; 7761 : 		//
; 7762 : 		// objective
; 7763 : 		//
; 7764 : 
; 7765 : 		objective = get_local_entity_parent (task, LIST_TYPE_TASK_DEPENDENT);

  010dd	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  010e4	74 10		 je	 SHORT $LN95@draw_missi
  010e6	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  010ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  010ee	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv601[ebp], ecx
  010f4	eb 27		 jmp	 SHORT $LN96@draw_missi
$LN95@draw_missi:
  010f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  010fc	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01102	52		 push	 edx
  01103	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0110d	50		 push	 eax
  0110e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01113	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN96@draw_missi:
  0111d	b9 01 00 00 00	 mov	 ecx, 1
  01122	85 c9		 test	 ecx, ecx
  01124	74 0c		 je	 SHORT $LN97@draw_missi
  01126	c7 85 f8 ef ff
	ff 27 00 00 00	 mov	 DWORD PTR tv609[ebp], 39 ; 00000027H
  01130	eb 27		 jmp	 SHORT $LN98@draw_missi
$LN97@draw_missi:
  01132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01138	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  0113e	52		 push	 edx
  0113f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01144	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01149	50		 push	 eax
  0114a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0114f	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN98@draw_missi:
  01159	6a 27		 push	 39			; 00000027H
  0115b	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01161	51		 push	 ecx
  01162	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv601[ebp], 180
  0116c	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv609[ebp]
  01172	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01179	ff d1		 call	 ecx
  0117b	89 85 00 fe ff
	ff		 mov	 DWORD PTR _objective$[ebp], eax

; 7766 : 
; 7767 : 		if (objective)

  01181	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _objective$[ebp], 0
  01188	0f 84 e4 00 00
	00		 je	 $LN27@draw_missi

; 7768 : 		{
; 7769 : 			char
; 7770 : 				buffer[1024];
; 7771 : 
; 7772 : 			get_task_objective_mfd_display_string (task, buffer);

  0118e	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  01194	50		 push	 eax
  01195	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0119b	51		 push	 ecx
  0119c	e8 00 00 00 00	 call	 ?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z ; get_task_objective_mfd_display_string

; 7773 : 
; 7774 : 			sprintf (s1, "OBJECT:%s", buffer);

  011a1	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  011a7	50		 push	 eax
  011a8	68 00 00 00 00	 push	 OFFSET ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
  011ad	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  011b3	51		 push	 ecx
  011b4	e8 00 00 00 00	 call	 _sprintf
  011b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7775 : 
; 7776 : 			set_mono_font_position (x_min, y_adjust);

  011bc	51		 push	 ecx
  011bd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ca	51		 push	 ecx
  011cb	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  011d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7777 : 
; 7778 : 			print_mono_font_max_length_string (s1);

  011dd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  011e3	50		 push	 eax
  011e4	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7779 : 
; 7780 : 			y_adjust += char_height;

  011e9	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011f1	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  011f9	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7781 : 
; 7782 : 			set_mono_font_position (x_min, y_adjust);

  01201	51		 push	 ecx
  01202	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0120a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0120f	51		 push	 ecx
  01210	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01218	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121d	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7783 : 
; 7784 : 			print_target_position (en, objective);

  01222	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _objective$[ebp]
  01228	50		 push	 eax
  01229	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  0122f	51		 push	 ecx
  01230	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 7785 : 
; 7786 : 			y_adjust += char_height;

  01235	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0123d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01245	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7787 : 
; 7788 : 			if (draw_large_mfd)

  0124d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01254	74 1c		 je	 SHORT $LN27@draw_missi

; 7789 : 			{
; 7790 : 				y_adjust += 2.0;

  01256	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0125e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01266	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0126a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_missi:

; 7791 : 			}
; 7792 : 		}
; 7793 : 
; 7794 : 		//
; 7795 : 		// status
; 7796 : 		//
; 7797 : 
; 7798 : 		status_name = get_local_entity_int_value (task, INT_TYPE_TASK_COMPLETED);

  01272	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01279	74 10		 je	 SHORT $LN99@draw_missi
  0127b	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01281	8b 08		 mov	 ecx, DWORD PTR [eax]
  01283	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv640[ebp], ecx
  01289	eb 27		 jmp	 SHORT $LN100@draw_missi
$LN99@draw_missi:
  0128b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01291	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  01297	52		 push	 edx
  01298	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012a2	50		 push	 eax
  012a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012a8	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv640[ebp], 0
$LN100@draw_missi:
  012b2	b9 01 00 00 00	 mov	 ecx, 1
  012b7	85 c9		 test	 ecx, ecx
  012b9	74 0c		 je	 SHORT $LN101@draw_missi
  012bb	c7 85 f8 ef ff
	ff d9 00 00 00	 mov	 DWORD PTR tv648[ebp], 217 ; 000000d9H
  012c5	eb 27		 jmp	 SHORT $LN102@draw_missi
$LN101@draw_missi:
  012c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  012cd	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  012d3	52		 push	 edx
  012d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  012d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  012de	50		 push	 eax
  012df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e4	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv648[ebp], 0
$LN102@draw_missi:
  012ee	68 d9 00 00 00	 push	 217			; 000000d9H
  012f3	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  012f9	51		 push	 ecx
  012fa	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv640[ebp], 1116
  01304	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv648[ebp]
  0130a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01311	ff d1		 call	 ecx
  01313	89 85 64 fe ff
	ff		 mov	 DWORD PTR _status_name$[ebp], eax

; 7799 : 
; 7800 : 		sprintf (s1, "STATUS:%s", task_status_names[status_name]);

  01319	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _status_name$[ebp]
  0131f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?task_status_names@@3PAPBDA[eax*4]
  01326	51		 push	 ecx
  01327	68 00 00 00 00	 push	 OFFSET ??_C@_09NFLHCPML@STATUS?3?$CFs@
  0132c	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  01332	52		 push	 edx
  01333	e8 00 00 00 00	 call	 _sprintf
  01338	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7801 : 
; 7802 : 		set_mono_font_position (x_min, y_adjust);

  0133b	51		 push	 ecx
  0133c	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01349	51		 push	 ecx
  0134a	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01357	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7803 : 
; 7804 : 		print_mono_font_max_length_string (s1);

  0135c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01362	50		 push	 eax
  01363	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7805 : 
; 7806 : 		y_adjust += char_height;

  01368	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01370	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01378	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7807 : 
; 7808 : 		if (draw_large_mfd)

  01380	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01387	74 1c		 je	 SHORT $LN28@draw_missi

; 7809 : 		{
; 7810 : 			y_adjust += 2.0;

  01389	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01391	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01399	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139d	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN28@draw_missi:

; 7811 : 		}
; 7812 : 
; 7813 : 		//
; 7814 : 		// start base
; 7815 : 		//
; 7816 : 
; 7817 : 		keysite = get_local_entity_parent (task, LIST_TYPE_ASSIGNED_TASK);

  013a5	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  013ac	74 10		 je	 SHORT $LN103@draw_missi
  013ae	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  013b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b6	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv673[ebp], ecx
  013bc	eb 27		 jmp	 SHORT $LN104@draw_missi
$LN103@draw_missi:
  013be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  013c4	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  013ca	52		 push	 edx
  013cb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013d5	50		 push	 eax
  013d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013db	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv673[ebp], 0
$LN104@draw_missi:
  013e5	b9 01 00 00 00	 mov	 ecx, 1
  013ea	85 c9		 test	 ecx, ecx
  013ec	74 0c		 je	 SHORT $LN105@draw_missi
  013ee	c7 85 f8 ef ff
	ff 03 00 00 00	 mov	 DWORD PTR tv681[ebp], 3
  013f8	eb 27		 jmp	 SHORT $LN106@draw_missi
$LN105@draw_missi:
  013fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01400	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  01406	52		 push	 edx
  01407	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0140c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01411	50		 push	 eax
  01412	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01417	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv681[ebp], 0
$LN106@draw_missi:
  01421	6a 03		 push	 3
  01423	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01429	51		 push	 ecx
  0142a	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv673[ebp], 180
  01434	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv681[ebp]
  0143a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01441	ff d1		 call	 ecx
  01443	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 7818 : 
; 7819 : 		if (keysite)

  01449	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  01450	0f 84 e4 00 00
	00		 je	 $LN30@draw_missi

; 7820 : 		{
; 7821 : 			char
; 7822 : 				buffer[1024];
; 7823 : 
; 7824 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  01456	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0145c	50		 push	 eax
  0145d	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  01463	51		 push	 ecx
  01464	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 7825 : 
; 7826 : 			sprintf (s1, "START :%s", buffer);

  01469	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0146f	50		 push	 eax
  01470	68 00 00 00 00	 push	 OFFSET ??_C@_09MDEJFDEL@START?5?3?$CFs@
  01475	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0147b	51		 push	 ecx
  0147c	e8 00 00 00 00	 call	 _sprintf
  01481	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7827 : 
; 7828 : 			set_mono_font_position (x_min, y_adjust);

  01484	51		 push	 ecx
  01485	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0148d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01492	51		 push	 ecx
  01493	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0149b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a0	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7829 : 
; 7830 : 			print_mono_font_max_length_string (s1);

  014a5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  014ab	50		 push	 eax
  014ac	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7831 : 
; 7832 : 			y_adjust += char_height;

  014b1	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014b9	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  014c1	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7833 : 
; 7834 : 			set_mono_font_position (x_min, y_adjust);

  014c9	51		 push	 ecx
  014ca	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d7	51		 push	 ecx
  014d8	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  014e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e5	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7835 : 
; 7836 : 			print_target_position (en, keysite);

  014ea	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  014f0	50		 push	 eax
  014f1	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  014f7	51		 push	 ecx
  014f8	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 7837 : 
; 7838 : 			y_adjust += char_height;

  014fd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01505	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0150d	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7839 : 
; 7840 : 			if (draw_large_mfd)

  01515	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0151c	74 1c		 je	 SHORT $LN30@draw_missi

; 7841 : 			{
; 7842 : 				y_adjust += 2.0;

  0151e	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01526	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0152e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01532	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN30@draw_missi:

; 7843 : 			}
; 7844 : 		}
; 7845 : 
; 7846 : 		//
; 7847 : 		// end base
; 7848 : 		//
; 7849 : 
; 7850 : 		keysite = (entity *) get_local_entity_ptr_value (task, PTR_TYPE_RETURN_KEYSITE);

  0153a	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01541	74 10		 je	 SHORT $LN107@draw_missi
  01543	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01549	8b 08		 mov	 ecx, DWORD PTR [eax]
  0154b	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv744[ebp], ecx
  01551	eb 27		 jmp	 SHORT $LN108@draw_missi
$LN107@draw_missi:
  01553	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01559	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  0155f	52		 push	 edx
  01560	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01565	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0156a	50		 push	 eax
  0156b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01570	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN108@draw_missi:
  0157a	b9 01 00 00 00	 mov	 ecx, 1
  0157f	85 c9		 test	 ecx, ecx
  01581	74 0c		 je	 SHORT $LN109@draw_missi
  01583	c7 85 f8 ef ff
	ff 08 00 00 00	 mov	 DWORD PTR tv752[ebp], 8
  0158d	eb 27		 jmp	 SHORT $LN110@draw_missi
$LN109@draw_missi:
  0158f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01595	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  0159b	52		 push	 edx
  0159c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  015a6	50		 push	 eax
  015a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015ac	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN110@draw_missi:
  015b6	6a 08		 push	 8
  015b8	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  015be	51		 push	 ecx
  015bf	6b 95 fc ef ff
	ff 50		 imul	 edx, DWORD PTR tv744[ebp], 80
  015c6	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv752[ebp]
  015cc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  015d3	ff d1		 call	 ecx
  015d5	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 7851 : 
; 7852 : 		if (keysite)

  015db	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  015e2	0f 84 e4 00 00
	00		 je	 $LN32@draw_missi

; 7853 : 		{
; 7854 : 			char
; 7855 : 				buffer[1024];
; 7856 : 
; 7857 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  015e8	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  015ee	50		 push	 eax
  015ef	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  015f5	51		 push	 ecx
  015f6	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 7858 : 
; 7859 : 			sprintf (s1, "END   :%s", buffer);

  015fb	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  01601	50		 push	 eax
  01602	68 00 00 00 00	 push	 OFFSET ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
  01607	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0160d	51		 push	 ecx
  0160e	e8 00 00 00 00	 call	 _sprintf
  01613	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7860 : 
; 7861 : 			set_mono_font_position (x_min, y_adjust);

  01616	51		 push	 ecx
  01617	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0161f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01624	51		 push	 ecx
  01625	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0162d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01632	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7862 : 
; 7863 : 			print_mono_font_max_length_string (s1);

  01637	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0163d	50		 push	 eax
  0163e	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7864 : 
; 7865 : 			y_adjust += char_height;

  01643	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0164b	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01653	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7866 : 
; 7867 : 			set_mono_font_position (x_min, y_adjust);

  0165b	51		 push	 ecx
  0165c	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01664	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01669	51		 push	 ecx
  0166a	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01672	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01677	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7868 : 
; 7869 : 			print_target_position (en, keysite);

  0167c	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  01682	50		 push	 eax
  01683	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  01689	51		 push	 ecx
  0168a	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 7870 : 
; 7871 : 			y_adjust += char_height;

  0168f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01697	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0169f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7872 : 
; 7873 : 			if (draw_large_mfd)

  016a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  016ae	74 1c		 je	 SHORT $LN32@draw_missi

; 7874 : 			{
; 7875 : 				y_adjust += 2.0;

  016b0	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  016b8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  016c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016c4	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN32@draw_missi:

; 7876 : 			}
; 7877 : 		}
; 7878 : 
; 7879 : 		//
; 7880 : 		// count (kills and losses)
; 7881 : 		//
; 7882 : 
; 7883 : 		sprintf

  016cc	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  016d3	74 10		 je	 SHORT $LN111@draw_missi
  016d5	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  016db	8b 08		 mov	 ecx, DWORD PTR [eax]
  016dd	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv784[ebp], ecx
  016e3	eb 27		 jmp	 SHORT $LN112@draw_missi
$LN111@draw_missi:
  016e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  016eb	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  016f1	52		 push	 edx
  016f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  016f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016fc	50		 push	 eax
  016fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01702	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN112@draw_missi:
  0170c	b9 01 00 00 00	 mov	 ecx, 1
  01711	85 c9		 test	 ecx, ecx
  01713	74 0c		 je	 SHORT $LN113@draw_missi
  01715	c7 85 f8 ef ff
	ff 7f 00 00 00	 mov	 DWORD PTR tv792[ebp], 127 ; 0000007fH
  0171f	eb 27		 jmp	 SHORT $LN114@draw_missi
$LN113@draw_missi:
  01721	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01727	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  0172d	52		 push	 edx
  0172e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01733	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01738	50		 push	 eax
  01739	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0173e	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv792[ebp], 0
$LN114@draw_missi:
  01748	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0174f	74 10		 je	 SHORT $LN115@draw_missi
  01751	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01757	8b 11		 mov	 edx, DWORD PTR [ecx]
  01759	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv805[ebp], edx
  0175f	eb 26		 jmp	 SHORT $LN116@draw_missi
$LN115@draw_missi:
  01761	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01766	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  0176b	50		 push	 eax
  0176c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01771	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01777	51		 push	 ecx
  01778	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0177d	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv805[ebp], 0
$LN116@draw_missi:
  01787	ba 01 00 00 00	 mov	 edx, 1
  0178c	85 d2		 test	 edx, edx
  0178e	74 0c		 je	 SHORT $LN117@draw_missi
  01790	c7 85 f0 ef ff
	ff 72 00 00 00	 mov	 DWORD PTR tv813[ebp], 114 ; 00000072H
  0179a	eb 26		 jmp	 SHORT $LN118@draw_missi
$LN117@draw_missi:
  0179c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  017a1	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  017a6	50		 push	 eax
  017a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  017b2	51		 push	 ecx
  017b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017b8	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv813[ebp], 0
$LN118@draw_missi:
  017c2	6a 7f		 push	 127			; 0000007fH
  017c4	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _task$[ebp]
  017ca	52		 push	 edx
  017cb	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv784[ebp], 1116
  017d5	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv792[ebp]
  017db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  017e2	ff d2		 call	 edx
  017e4	50		 push	 eax
  017e5	6a 72		 push	 114			; 00000072H
  017e7	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  017ed	50		 push	 eax
  017ee	69 8d f4 ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv805[ebp], 1116
  017f8	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv813[ebp]
  017fe	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  01805	ff d0		 call	 eax
  01807	50		 push	 eax
  01808	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
  0180d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  01813	51		 push	 ecx
  01814	e8 00 00 00 00	 call	 _sprintf
  01819	83 c4 10	 add	 esp, 16			; 00000010H

; 7884 : 		(
; 7885 : 			s1,
; 7886 : 			"COUNT :Kills=%d Losses=%d",
; 7887 : 			get_local_entity_int_value (task, INT_TYPE_KILLS),
; 7888 : 			get_local_entity_int_value (task, INT_TYPE_LOSSES)
; 7889 : 		);
; 7890 : 
; 7891 : 		set_mono_font_position (x_min, y_adjust);

  0181c	51		 push	 ecx
  0181d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01825	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182a	51		 push	 ecx
  0182b	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01838	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7892 : 
; 7893 : 		print_mono_font_max_length_string (s1);

  0183d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01843	50		 push	 eax
  01844	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7894 : 
; 7895 : 		y_adjust += char_height;

  01849	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01851	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01859	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7896 : 
; 7897 : 		if (draw_large_mfd)

  01861	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01868	74 1c		 je	 SHORT $LN33@draw_missi

; 7898 : 		{
; 7899 : 			y_adjust += 2.0;

  0186a	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01872	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0187a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0187e	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN33@draw_missi:

; 7900 : 		}
; 7901 : 
; 7902 : 		//
; 7903 : 		// time
; 7904 : 		//
; 7905 : 
; 7906 : 		mission_time = get_local_entity_float_value (task, FLOAT_TYPE_ELAPSED_MISSION_TIME);

  01886	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0188d	74 10		 je	 SHORT $LN119@draw_missi
  0188f	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01895	8b 08		 mov	 ecx, DWORD PTR [eax]
  01897	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv835[ebp], ecx
  0189d	eb 27		 jmp	 SHORT $LN120@draw_missi
$LN119@draw_missi:
  0189f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018a5	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018ab	52		 push	 edx
  018ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  018b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018b6	50		 push	 eax
  018b7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018bc	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv835[ebp], 0
$LN120@draw_missi:
  018c6	b9 01 00 00 00	 mov	 ecx, 1
  018cb	85 c9		 test	 ecx, ecx
  018cd	74 0c		 je	 SHORT $LN121@draw_missi
  018cf	c7 85 f8 ef ff
	ff 22 00 00 00	 mov	 DWORD PTR tv843[ebp], 34 ; 00000022H
  018d9	eb 27		 jmp	 SHORT $LN122@draw_missi
$LN121@draw_missi:
  018db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018e1	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018e7	52		 push	 edx
  018e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  018ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  018f2	50		 push	 eax
  018f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018f8	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv843[ebp], 0
$LN122@draw_missi:
  01902	6a 22		 push	 34			; 00000022H
  01904	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0190a	51		 push	 ecx
  0190b	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv835[ebp], 700
  01915	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv843[ebp]
  0191b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01922	ff d1		 call	 ecx
  01924	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR _mission_time$[ebp]

; 7907 : 
; 7908 : 		get_digital_clock_int_values (mission_time, &mission_hours, &mission_minutes, &mission_seconds);

  0192a	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _mission_seconds$[ebp]
  01930	50		 push	 eax
  01931	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _mission_minutes$[ebp]
  01937	51		 push	 ecx
  01938	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR _mission_hours$[ebp]
  0193e	52		 push	 edx
  0193f	51		 push	 ecx
  01940	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR _mission_time$[ebp]
  01948	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194d	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 7909 : 
; 7910 : 		estimated_time = get_task_estimated_route_duration (task);

  01952	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01958	50		 push	 eax
  01959	e8 00 00 00 00	 call	 ?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z ; get_task_estimated_route_duration
  0195e	d9 9d 1c fe ff
	ff		 fstp	 DWORD PTR _estimated_time$[ebp]

; 7911 : 
; 7912 : 		get_digital_clock_int_values (estimated_time, &estimated_hours, &estimated_minutes, &estimated_seconds);

  01964	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _estimated_seconds$[ebp]
  0196a	50		 push	 eax
  0196b	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _estimated_minutes$[ebp]
  01971	51		 push	 ecx
  01972	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR _estimated_hours$[ebp]
  01978	52		 push	 edx
  01979	51		 push	 ecx
  0197a	f3 0f 10 85 1c
	fe ff ff	 movss	 xmm0, DWORD PTR _estimated_time$[ebp]
  01982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01987	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 7913 : 
; 7914 : 		sprintf

  0198c	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _estimated_seconds$[ebp]
  01992	50		 push	 eax
  01993	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _estimated_minutes$[ebp]
  01999	51		 push	 ecx
  0199a	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _estimated_hours$[ebp]
  019a0	52		 push	 edx
  019a1	8b 85 4c fe ff
	ff		 mov	 eax, DWORD PTR _mission_seconds$[ebp]
  019a7	50		 push	 eax
  019a8	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _mission_minutes$[ebp]
  019ae	51		 push	 ecx
  019af	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _mission_hours$[ebp]
  019b5	52		 push	 edx
  019b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
  019bb	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019c1	50		 push	 eax
  019c2	e8 00 00 00 00	 call	 _sprintf
  019c7	83 c4 20	 add	 esp, 32			; 00000020H

; 7915 : 		(
; 7916 : 			s1,
; 7917 : 			"TIME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d",
; 7918 : 			mission_hours,
; 7919 : 			mission_minutes,
; 7920 : 			mission_seconds,
; 7921 : 			estimated_hours,
; 7922 : 			estimated_minutes,
; 7923 : 			estimated_seconds
; 7924 : 		);
; 7925 : 
; 7926 : 		set_mono_font_position (x_min, y_adjust);

  019ca	51		 push	 ecx
  019cb	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  019d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d8	51		 push	 ecx
  019d9	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  019e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e6	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7927 : 
; 7928 : 		print_mono_font_max_length_string (s1);

  019eb	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019f1	50		 push	 eax
  019f2	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string
$LN20@draw_missi:

; 7929 : 	}
; 7930 : 
; 7931 : 	////////////////////////////////////////
; 7932 : 	//
; 7933 : 	// time of day
; 7934 : 	//
; 7935 : 	////////////////////////////////////////
; 7936 : 
; 7937 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  019f7	b8 04 00 00 00	 mov	 eax, 4
  019fc	6b c8 0d	 imul	 ecx, eax, 13
  019ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a05	52		 push	 edx
  01a06	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7938 : 
; 7939 : 	get_2d_float_screen_y_coordinate (-0.9, &y_adjust);

  01a0b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  01a11	50		 push	 eax
  01a12	51		 push	 ecx
  01a13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01a1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a20	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7940 : 
; 7941 : 	y_adjust -= 2.0;

  01a25	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a2d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  01a35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a39	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7942 : 
; 7943 : 	draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  01a41	b8 04 00 00 00	 mov	 eax, 4
  01a46	6b c8 0d	 imul	 ecx, eax, 13
  01a49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a4f	52		 push	 edx
  01a50	51		 push	 ecx
  01a51	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a5e	51		 push	 ecx
  01a5f	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  01a67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6c	51		 push	 ecx
  01a6d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7a	51		 push	 ecx
  01a7b	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01a83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a88	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7944 : 
; 7945 : 	y_adjust += 2.0;

  01a8d	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a95	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01a9d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aa1	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7946 : 
; 7947 : 	time = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  01aa9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  01ab0	74 0f		 je	 SHORT $LN123@draw_missi
  01ab2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01ab7	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ab9	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv894[ebp], ecx
  01abf	eb 27		 jmp	 SHORT $LN124@draw_missi
$LN123@draw_missi:
  01ac1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01ac7	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01acd	52		 push	 edx
  01ace	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ad8	50		 push	 eax
  01ad9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ade	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv894[ebp], 0
$LN124@draw_missi:
  01ae8	b9 01 00 00 00	 mov	 ecx, 1
  01aed	85 c9		 test	 ecx, ecx
  01aef	74 0c		 je	 SHORT $LN125@draw_missi
  01af1	c7 85 f8 ef ff
	ff 8e 00 00 00	 mov	 DWORD PTR tv902[ebp], 142 ; 0000008eH
  01afb	eb 27		 jmp	 SHORT $LN126@draw_missi
$LN125@draw_missi:
  01afd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01b03	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01b09	52		 push	 edx
  01b0a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b0f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01b14	50		 push	 eax
  01b15	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b1a	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv902[ebp], 0
$LN126@draw_missi:
  01b24	68 8e 00 00 00	 push	 142			; 0000008eH
  01b29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01b2f	51		 push	 ecx
  01b30	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv894[ebp], 700
  01b3a	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv902[ebp]
  01b40	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01b47	ff d1		 call	 ecx
  01b49	d9 9d 24 fe ff
	ff		 fstp	 DWORD PTR _time$[ebp]

; 7948 : 
; 7949 : 	get_digital_clock_int_values (time, &hours, &minutes, &seconds);

  01b4f	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$[ebp]
  01b55	50		 push	 eax
  01b56	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$[ebp]
  01b5c	51		 push	 ecx
  01b5d	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR _hours$[ebp]
  01b63	52		 push	 edx
  01b64	51		 push	 ecx
  01b65	f3 0f 10 85 24
	fe ff ff	 movss	 xmm0, DWORD PTR _time$[ebp]
  01b6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b72	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 7950 : 
; 7951 : 	sprintf (s1, "%02d:%02d:%02d", hours, minutes, seconds);

  01b77	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _seconds$[ebp]
  01b7d	50		 push	 eax
  01b7e	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _minutes$[ebp]
  01b84	51		 push	 ecx
  01b85	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR _hours$[ebp]
  01b8b	52		 push	 edx
  01b8c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  01b91	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01b97	50		 push	 eax
  01b98	e8 00 00 00 00	 call	 _sprintf
  01b9d	83 c4 14	 add	 esp, 20			; 00000014H

; 7952 : 
; 7953 : 	x_adjust = get_mono_font_string_width (s1) * 0.5;

  01ba0	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01ba6	50		 push	 eax
  01ba7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01bac	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1457[ebp]
  01bb2	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1457[ebp]
  01bba	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01bc2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc6	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7954 : 
; 7955 : 	set_mono_font_position (x_mid - x_adjust, y_adjust);

  01bce	51		 push	 ecx
  01bcf	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdc	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  01be4	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01bec	51		 push	 ecx
  01bed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf2	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 7956 : 
; 7957 : 	print_mono_font_string (s1);

  01bf7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01bfd	50		 push	 eax
  01bfe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7958 : }

  01c03	5f		 pop	 edi
  01c04	5e		 pop	 esi
  01c05	5b		 pop	 ebx
  01c06	8b e5		 mov	 esp, ebp
  01c08	5d		 pop	 ebp
  01c09	c3		 ret	 0
?draw_mission_display_mfd@@YGXXZ ENDP			; draw_mission_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?print_target_position@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv88 = -172						; size = 4
tv193 = -168						; size = 4
tv80 = -168						; size = 4
_position$ = -100					; size = 4
_range$ = -96						; size = 4
_bearing$ = -92						; size = 4
_z_sector$ = -88					; size = 4
_x_sector$ = -84					; size = 4
_s$ = -80						; size = 80
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?print_target_position@@YGXPAUENTITY@@0@Z PROC		; print_target_position, COMDAT

; 7422 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7423 : 	char
; 7424 : 		s[80];
; 7425 : 
; 7426 : 	int
; 7427 : 		x_sector,
; 7428 : 		z_sector,
; 7429 : 		bearing;
; 7430 : 
; 7431 : 	float
; 7432 : 		range;
; 7433 : 
; 7434 : 	vec3d
; 7435 : 		*position;
; 7436 : 
; 7437 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_targ
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_targ:

; 7438 : 
; 7439 : 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@print_targ
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_targ:

; 7440 : 
; 7441 : 	position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00048	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0004c	74 0d		 je	 SHORT $LN7@print_targ
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN8@print_targ
$LN7@print_targ:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00061	83 c2 13	 add	 edx, 19			; 00000013H
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN8@print_targ:
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	85 c9		 test	 ecx, ecx
  00086	74 0c		 je	 SHORT $LN9@print_targ
  00088	c7 85 54 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv88[ebp], 8
  00092	eb 24		 jmp	 SHORT $LN10@print_targ
$LN9@print_targ:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  0009a	83 c2 13	 add	 edx, 19			; 00000013H
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN10@print_targ:
  000b8	6a 08		 push	 8
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  000bd	51		 push	 ecx
  000be	6b 95 58 ff ff
	ff 60		 imul	 edx, DWORD PTR tv80[ebp], 96
  000c5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  000cb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d2	ff d1		 call	 ecx
  000d4	89 45 9c	 mov	 DWORD PTR _position$[ebp], eax

; 7442 : 
; 7443 : 	ASSERT (position);

  000d7	83 7d 9c 00	 cmp	 DWORD PTR _position$[ebp], 0
  000db	75 18		 jne	 SHORT $LN4@print_targ
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  000e2	83 c0 15	 add	 eax, 21			; 00000015H
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  000f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@print_targ:

; 7444 : 
; 7445 : 	get_x_sector (x_sector, position->x);

  000f5	8d 45 ac	 lea	 eax, DWORD PTR _x_sector$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  000fc	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00100	51		 push	 ecx
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0010b	8b 45 ac	 mov	 eax, DWORD PTR _x_sector$[ebp]
  0010e	99		 cdq
  0010f	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00115	89 45 ac	 mov	 DWORD PTR _x_sector$[ebp], eax

; 7446 : 	get_z_sector (z_sector, position->z);

  00118	8d 45 a8	 lea	 eax, DWORD PTR _z_sector$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  0011f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0012f	8b 45 a8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00132	99		 cdq
  00133	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00139	89 45 a8	 mov	 DWORD PTR _z_sector$[ebp], eax

; 7447 : 
; 7448 : 	bearing = (int) (deg (get_local_entity_target_bearing (source, target, &range)));

  0013c	8d 45 a0	 lea	 eax, DWORD PTR _range$[ebp]
  0013f	50		 push	 eax
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00143	51		 push	 ecx
  00144	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 ?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z ; get_local_entity_target_bearing
  0014d	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv193[ebp]
  00153	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv193[ebp]
  0015b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00163	f3 0f 2c c0	 cvttss2si eax, xmm0
  00167	89 45 a4	 mov	 DWORD PTR _bearing$[ebp], eax

; 7449 : 
; 7450 : 	if (bearing == 0)

  0016a	83 7d a4 00	 cmp	 DWORD PTR _bearing$[ebp], 0
  0016e	75 07		 jne	 SHORT $LN5@print_targ

; 7451 : 	{
; 7452 : 		bearing = 360;

  00170	c7 45 a4 68 01
	00 00		 mov	 DWORD PTR _bearing$[ebp], 360 ; 00000168H
$LN5@print_targ:

; 7453 : 	}
; 7454 : 
; 7455 : 	range *= (float) (1.0 / 1000.0);

  00177	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$[ebp]
  0017c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a83126f
  00184	f3 0f 11 45 a0	 movss	 DWORD PTR _range$[ebp], xmm0

; 7456 : 
; 7457 : 	sprintf (s, "       <%03d,%03d> %6.1fKm %3d\x7f", x_sector, z_sector, range, bearing);

  00189	8b 45 a4	 mov	 eax, DWORD PTR _bearing$[ebp]
  0018c	50		 push	 eax
  0018d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00192	83 ec 08	 sub	 esp, 8
  00195	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0019a	8b 4d a8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  0019d	51		 push	 ecx
  0019e	8b 55 ac	 mov	 edx, DWORD PTR _x_sector$[ebp]
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
  001a7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _sprintf
  001b0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7458 : 
; 7459 : 	print_mono_font_max_length_string (s);

  001b3	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 7460 : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
?print_target_position@@YGXPAUENTITY@@0@Z ENDP		; print_target_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z
_TEXT	SEGMENT
tv222 = -84						; size = 4
tv201 = -84						; size = 4
tv179 = -84						; size = 4
tv158 = -84						; size = 4
tv139 = -84						; size = 4
tv86 = -84						; size = 4
tv214 = -80						; size = 4
tv193 = -80						; size = 4
tv171 = -80						; size = 4
tv151 = -80						; size = 4
tv131 = -80						; size = 4
tv79 = -80						; size = 4
_aircrew$ = -12						; size = 4
_name$ = -8						; size = 4
_rank$ = -4						; size = 4
_en$ = 8						; size = 4
_buffer$ = 12						; size = 4
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z PROC	; get_player_rank_and_name, COMDAT

; 7373 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7374 : 	const char
; 7375 : 		*rank,
; 7376 : 		*name;
; 7377 : 
; 7378 : 	entity
; 7379 : 		*aircrew;
; 7380 : 
; 7381 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_player
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_player:

; 7382 : 
; 7383 : 	ASSERT (buffer);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN5@get_player
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00032	83 c0 0a	 add	 eax, 10			; 0000000aH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_player:

; 7384 : 
; 7385 : 	if (get_local_entity_int_value (en, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN11@get_player
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d b0	 mov	 DWORD PTR tv79[ebp], ecx
  00053	eb 1d		 jmp	 SHORT $LN12@get_player
$LN11@get_player:
  00055	68 d9 1c 00 00	 push	 7385			; 00001cd9H
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN12@get_player:
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN13@get_player
  0007b	c7 45 ac 9c 00
	00 00		 mov	 DWORD PTR tv86[ebp], 156 ; 0000009cH
  00082	eb 1d		 jmp	 SHORT $LN14@get_player
$LN13@get_player:
  00084	68 d9 1c 00 00	 push	 7385			; 00001cd9H
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN14@get_player:
  000a1	68 9c 00 00 00	 push	 156			; 0000009cH
  000a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a9	52		 push	 edx
  000aa	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv79[ebp], 1116
  000b1	8b 4d ac	 mov	 ecx, DWORD PTR tv86[ebp]
  000b4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000bb	ff d2		 call	 edx
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 e7 02 00
	00		 je	 $LN6@get_player

; 7386 : 	{
; 7387 : 		aircrew = get_local_entity_first_child (en, LIST_TYPE_AIRCREW);

  000c5	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000c9	74 0a		 je	 SHORT $LN15@get_player
  000cb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 4d b0	 mov	 DWORD PTR tv131[ebp], ecx
  000d3	eb 21		 jmp	 SHORT $LN16@get_player
$LN15@get_player:
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  000db	83 c2 0e	 add	 edx, 14			; 0000000eH
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ef	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN16@get_player:
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	85 c9		 test	 ecx, ecx
  000fd	74 09		 je	 SHORT $LN17@get_player
  000ff	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00106	eb 21		 jmp	 SHORT $LN18@get_player
$LN17@get_player:
  00108	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0010e	83 c2 0e	 add	 edx, 14			; 0000000eH
  00111	52		 push	 edx
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00122	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN18@get_player:
  00129	6a 01		 push	 1
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0012e	51		 push	 ecx
  0012f	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv131[ebp], 180
  00136	8b 45 ac	 mov	 eax, DWORD PTR tv139[ebp]
  00139	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00140	ff d1		 call	 ecx
  00142	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax
$LN2@get_player:

; 7388 : 
; 7389 : 		while (aircrew)

  00145	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00149	0f 84 03 01 00
	00		 je	 $LN3@get_player

; 7390 : 		{
; 7391 : 			if (get_local_entity_int_value (aircrew, INT_TYPE_ENTITY_SUB_TYPE) == ENTITY_SUB_TYPE_PILOT_PILOT)

  0014f	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00153	74 0a		 je	 SHORT $LN19@get_player
  00155	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	89 4d b0	 mov	 DWORD PTR tv151[ebp], ecx
  0015d	eb 1d		 jmp	 SHORT $LN20@get_player
$LN19@get_player:
  0015f	68 df 1c 00 00	 push	 7391			; 00001cdfH
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00169	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00175	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN20@get_player:
  0017c	b8 01 00 00 00	 mov	 eax, 1
  00181	85 c0		 test	 eax, eax
  00183	74 09		 je	 SHORT $LN21@get_player
  00185	c7 45 ac 34 00
	00 00		 mov	 DWORD PTR tv158[ebp], 52 ; 00000034H
  0018c	eb 1d		 jmp	 SHORT $LN22@get_player
$LN21@get_player:
  0018e	68 df 1c 00 00	 push	 7391			; 00001cdfH
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN22@get_player:
  001ab	6a 34		 push	 52			; 00000034H
  001ad	8b 55 f4	 mov	 edx, DWORD PTR _aircrew$[ebp]
  001b0	52		 push	 edx
  001b1	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv151[ebp], 1116
  001b8	8b 4d ac	 mov	 ecx, DWORD PTR tv158[ebp]
  001bb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001c2	ff d2		 call	 edx
  001c4	85 c0		 test	 eax, eax
  001c6	75 05		 jne	 SHORT $LN7@get_player

; 7392 : 			{
; 7393 : 				break;

  001c8	e9 85 00 00 00	 jmp	 $LN3@get_player
$LN7@get_player:

; 7394 : 			}
; 7395 : 
; 7396 : 			aircrew = get_local_entity_child_succ (aircrew, LIST_TYPE_AIRCREW);

  001cd	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  001d1	74 0a		 je	 SHORT $LN23@get_player
  001d3	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	89 4d b0	 mov	 DWORD PTR tv171[ebp], ecx
  001db	eb 21		 jmp	 SHORT $LN24@get_player
$LN23@get_player:
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  001e3	83 c2 17	 add	 edx, 23			; 00000017H
  001e6	52		 push	 edx
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], 0
$LN24@get_player:
  001fe	b9 01 00 00 00	 mov	 ecx, 1
  00203	85 c9		 test	 ecx, ecx
  00205	74 09		 je	 SHORT $LN25@get_player
  00207	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv179[ebp], 1
  0020e	eb 21		 jmp	 SHORT $LN26@get_player
$LN25@get_player:
  00210	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00216	83 c2 17	 add	 edx, 23			; 00000017H
  00219	52		 push	 edx
  0021a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN26@get_player:
  00231	6a 01		 push	 1
  00233	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  00236	51		 push	 ecx
  00237	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv171[ebp], 180
  0023e	8b 45 ac	 mov	 eax, DWORD PTR tv179[ebp]
  00241	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00248	ff d1		 call	 ecx
  0024a	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax

; 7397 : 		}

  0024d	e9 f3 fe ff ff	 jmp	 $LN2@get_player
$LN3@get_player:

; 7398 : 
; 7399 : 		if (aircrew)

  00252	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00256	0f 84 50 01 00
	00		 je	 $LN6@get_player

; 7400 : 		{
; 7401 : 			rank = get_untranslated_pilot_rank_short_name (get_local_entity_int_value (aircrew, INT_TYPE_PILOT_RANK));

  0025c	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00260	74 0a		 je	 SHORT $LN27@get_player
  00262	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	89 4d b0	 mov	 DWORD PTR tv193[ebp], ecx
  0026a	eb 21		 jmp	 SHORT $LN28@get_player
$LN27@get_player:
  0026c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00272	83 c2 1c	 add	 edx, 28			; 0000001cH
  00275	52		 push	 edx
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00286	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN28@get_player:
  0028d	b9 01 00 00 00	 mov	 ecx, 1
  00292	85 c9		 test	 ecx, ecx
  00294	74 09		 je	 SHORT $LN29@get_player
  00296	c7 45 ac 9a 00
	00 00		 mov	 DWORD PTR tv201[ebp], 154 ; 0000009aH
  0029d	eb 21		 jmp	 SHORT $LN30@get_player
$LN29@get_player:
  0029f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002a5	83 c2 1c	 add	 edx, 28			; 0000001cH
  002a8	52		 push	 edx
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN30@get_player:
  002c0	68 9a 00 00 00	 push	 154			; 0000009aH
  002c5	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  002c8	51		 push	 ecx
  002c9	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv193[ebp], 1116
  002d0	8b 45 ac	 mov	 eax, DWORD PTR tv201[ebp]
  002d3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  002da	ff d1		 call	 ecx
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 ?get_untranslated_pilot_rank_short_name@@YGPBDH@Z ; get_untranslated_pilot_rank_short_name
  002e2	89 45 fc	 mov	 DWORD PTR _rank$[ebp], eax

; 7402 : 
; 7403 : 			name = get_local_entity_string (aircrew, STRING_TYPE_PILOTS_NAME);

  002e5	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  002e9	74 0a		 je	 SHORT $LN31@get_player
  002eb	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	89 4d b0	 mov	 DWORD PTR tv214[ebp], ecx
  002f3	eb 21		 jmp	 SHORT $LN32@get_player
$LN31@get_player:
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002fb	83 c2 1e	 add	 edx, 30			; 0000001eH
  002fe	52		 push	 edx
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0030f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$LN32@get_player:
  00316	b9 01 00 00 00	 mov	 ecx, 1
  0031b	85 c9		 test	 ecx, ecx
  0031d	74 09		 je	 SHORT $LN33@get_player
  0031f	c7 45 ac 0a 00
	00 00		 mov	 DWORD PTR tv222[ebp], 10 ; 0000000aH
  00326	eb 21		 jmp	 SHORT $LN34@get_player
$LN33@get_player:
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0032e	83 c2 1e	 add	 edx, 30			; 0000001eH
  00331	52		 push	 edx
  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00342	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], 0
$LN34@get_player:
  00349	6a 0a		 push	 10			; 0000000aH
  0034b	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  0034e	51		 push	 ecx
  0034f	6b 55 b0 34	 imul	 edx, DWORD PTR tv214[ebp], 52
  00353	8b 45 ac	 mov	 eax, DWORD PTR tv222[ebp]
  00356	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0035d	ff d1		 call	 ecx
  0035f	89 45 f8	 mov	 DWORD PTR _name$[ebp], eax

; 7404 : 
; 7405 : 			if ((rank && strlen (rank)) && (name && strlen (name)))

  00362	83 7d fc 00	 cmp	 DWORD PTR _rank$[ebp], 0
  00366	74 44		 je	 SHORT $LN6@get_player
  00368	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 _strlen
  00371	83 c4 04	 add	 esp, 4
  00374	85 c0		 test	 eax, eax
  00376	74 34		 je	 SHORT $LN6@get_player
  00378	83 7d f8 00	 cmp	 DWORD PTR _name$[ebp], 0
  0037c	74 2e		 je	 SHORT $LN6@get_player
  0037e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 _strlen
  00387	83 c4 04	 add	 esp, 4
  0038a	85 c0		 test	 eax, eax
  0038c	74 1e		 je	 SHORT $LN6@get_player

; 7406 : 			{
; 7407 : 				sprintf (buffer, "%s %s", rank, name);

  0038e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00391	50		 push	 eax
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  00395	51		 push	 ecx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
  0039b	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  0039e	52		 push	 edx
  0039f	e8 00 00 00 00	 call	 _sprintf
  003a4	83 c4 10	 add	 esp, 16			; 00000010H

; 7408 : 
; 7409 : 				return (buffer);

  003a7	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  003aa	eb 02		 jmp	 SHORT $LN1@get_player
$LN6@get_player:

; 7410 : 			}
; 7411 : 		}
; 7412 : 	}
; 7413 : 
; 7414 : 	return (NULL);

  003ac	33 c0		 xor	 eax, eax
$LN1@get_player:

; 7415 : }

  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b e5		 mov	 esp, ebp
  003b3	5d		 pop	 ebp
  003b4	c2 08 00	 ret	 8
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ENDP	; get_player_rank_and_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?print_mono_font_max_length_string@@YGXPAD@Z
_TEXT	SEGMENT
_buffer$ = -200						; size = 200
_s$ = 8							; size = 4
?print_mono_font_max_length_string@@YGXPAD@Z PROC	; print_mono_font_max_length_string, COMDAT

; 7357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7358 : 	char
; 7359 : 		buffer[200];
; 7360 : 
; 7361 : 	ASSERT (s);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _s$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_mono
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mono:

; 7362 : 
; 7363 : 	sprintf (buffer, "%.31s", s);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_05KEIIKJGB@?$CF?431s@
  00033	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _sprintf
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7364 : 
; 7365 : 	print_mono_font_string (buffer);

  00042	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7366 : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?print_mono_font_max_length_string@@YGXPAD@Z ENDP	; print_mono_font_max_length_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_flight_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv138 = -76						; size = 4
tv82 = -72						; size = 4
tv74 = -68						; size = 4
?draw_flight_display_mfd@@YGXXZ PROC			; draw_flight_display_mfd, COMDAT

; 7327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7328 : 	set_mono_font_colour (MFD_COLOUR_LIGHT_BLUE);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 04	 shl	 eax, 4
  00011	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7329 : 
; 7330 : 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 7331 : 
; 7332 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN3@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN4@draw_fligh
$LN3@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  0003d	83 c2 05	 add	 edx, 5
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN5@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv82[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN6@draw_fligh
$LN5@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  00070	83 c2 05	 add	 edx, 5
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@draw_fligh:
  0008b	6a 01		 push	 1
  0008d	6a 34		 push	 52			; 00000034H
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00095	51		 push	 ecx
  00096	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv74[ebp], 700
  0009d	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  000a0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a7	ff d1		 call	 ecx
  000a9	d9 5d b4	 fstp	 DWORD PTR tv138[ebp]
  000ac	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv138[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 7333 : 
; 7334 : 	draw_airspeed_scale();

  000bc	e8 00 00 00 00	 call	 ?draw_airspeed_scale@@YGXXZ ; draw_airspeed_scale

; 7335 : 	draw_sideslip_scale();

  000c1	e8 00 00 00 00	 call	 ?draw_sideslip_scale@@YGXXZ ; draw_sideslip_scale

; 7336 : 
; 7337 : 	draw_altitude_scale();

  000c6	e8 00 00 00 00	 call	 ?draw_altitude_scale@@YGXXZ ; draw_altitude_scale

; 7338 : 
; 7339 : 	draw_rate_of_climb_scale ();

  000cb	e8 00 00 00 00	 call	 ?draw_rate_of_climb_scale@@YGXXZ ; draw_rate_of_climb_scale

; 7340 : 
; 7341 : 	display_waypoint_information ();

  000d0	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXXZ ; display_waypoint_information

; 7342 : 
; 7343 : 	draw_aircraft_datum();

  000d5	e8 00 00 00 00	 call	 ?draw_aircraft_datum@@YGXXZ ; draw_aircraft_datum

; 7344 : }

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
?draw_flight_display_mfd@@YGXXZ ENDP			; draw_flight_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?display_waypoint_information@@YGXXZ
_TEXT	SEGMENT
tv215 = -200						; size = 4
tv186 = -200						; size = 4
tv150 = -200						; size = 4
tv84 = -200						; size = 4
tv365 = -196						; size = 4
tv341 = -196						; size = 4
tv207 = -196						; size = 4
tv178 = -196						; size = 4
tv142 = -196						; size = 4
tv76 = -196						; size = 4
_seconds$1 = -128					; size = 4
_minutes$2 = -124					; size = 4
_hours$3 = -120						; size = 4
_time_to_go$4 = -116					; size = 4
_f$5 = -112						; size = 4
_i$6 = -108						; size = 4
_waypoint_range$ = -104					; size = 4
_waypoint_position$ = -100				; size = 12
_gunship_position$ = -88				; size = 4
_wp$ = -84						; size = 4
_buffer$ = -80						; size = 80
?display_waypoint_information@@YGXXZ PROC		; display_waypoint_information, COMDAT

; 7214 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7215 : 	char
; 7216 : 		buffer[80];
; 7217 : 
; 7218 : 	entity
; 7219 : 		*wp;
; 7220 : 
; 7221 : 	vec3d
; 7222 : 		*gunship_position,
; 7223 : 		waypoint_position;
; 7224 : 
; 7225 : 	float
; 7226 : 		waypoint_range;
; 7227 : 
; 7228 : 	wp = get_local_entity_current_waypoint (get_gunship_entity ());

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00017	89 45 ac	 mov	 DWORD PTR _wp$[ebp], eax

; 7229 : 
; 7230 : 	if (wp)

  0001a	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0001e	0f 84 c5 04 00
	00		 je	 $LN2@display_wa

; 7231 : 	{
; 7232 : 		if (draw_large_mfd)

  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0002b	74 09		 je	 SHORT $LN3@display_wa

; 7233 : 		{
; 7234 : 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  0002d	6a 02		 push	 2
  0002f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7235 : 		}
; 7236 : 		else

  00034	eb 07		 jmp	 SHORT $LN4@display_wa
$LN3@display_wa:

; 7237 : 		{
; 7238 : 			set_mono_font_type (MONO_FONT_TYPE_5X7);

  00036	6a 01		 push	 1
  00038	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN4@display_wa:

; 7239 : 		}
; 7240 : 
; 7241 : 		gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  0003d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00044	74 0f		 je	 SHORT $LN14@display_wa
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00053	eb 24		 jmp	 SHORT $LN15@display_wa
$LN14@display_wa:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  0005b	83 c2 1b	 add	 edx, 27			; 0000001bH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN15@display_wa:
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	85 c9		 test	 ecx, ecx
  00080	74 0c		 je	 SHORT $LN16@display_wa
  00082	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv84[ebp], 8
  0008c	eb 24		 jmp	 SHORT $LN17@display_wa
$LN16@display_wa:
  0008e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00094	83 c2 1b	 add	 edx, 27			; 0000001bH
  00097	52		 push	 edx
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a8	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN17@display_wa:
  000b2	6a 08		 push	 8
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ba	51		 push	 ecx
  000bb	6b 95 3c ff ff
	ff 60		 imul	 edx, DWORD PTR tv76[ebp], 96
  000c2	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000c8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000cf	ff d1		 call	 ecx
  000d1	89 45 a8	 mov	 DWORD PTR _gunship_position$[ebp], eax

; 7242 : 
; 7243 : 		get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  000d4	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  000db	51		 push	 ecx
  000dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 7244 : 
; 7245 : 		//
; 7246 : 		// waypoint id & range
; 7247 : 		//
; 7248 : 
; 7249 : 		waypoint_range = get_2d_range (gunship_position, &waypoint_position);

  000e8	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d a8	 mov	 ecx, DWORD PTR _gunship_position$[ebp]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  000f5	d9 5d 98	 fstp	 DWORD PTR _waypoint_range$[ebp]

; 7250 : 
; 7251 : 		if (!hokum_damage.navigation_computer)

  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000fd	c1 e8 09	 shr	 eax, 9
  00100	83 e0 01	 and	 eax, 1
  00103	0f 85 7a 02 00
	00		 jne	 $LN5@display_wa

; 7252 : 		{
; 7253 : 			if (waypoint_range < 1000.0)

  00109	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  0010e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00116	66 0f 2f c8	 comisd	 xmm1, xmm0
  0011a	0f 86 ae 00 00
	00		 jbe	 $LN7@display_wa

; 7254 : 			{
; 7255 : 				sprintf (buffer, "%c: %d M", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  00120	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00124	74 0d		 je	 SHORT $LN18@display_wa
  00126	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00129	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012b	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  00131	eb 24		 jmp	 SHORT $LN19@display_wa
$LN18@display_wa:
  00133	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00139	83 c2 29	 add	 edx, 41			; 00000029H
  0013c	52		 push	 edx
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0014d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN19@display_wa:
  00157	b9 01 00 00 00	 mov	 ecx, 1
  0015c	85 c9		 test	 ecx, ecx
  0015e	74 0c		 je	 SHORT $LN20@display_wa
  00160	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
  0016a	eb 24		 jmp	 SHORT $LN21@display_wa
$LN20@display_wa:
  0016c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00172	83 c2 29	 add	 edx, 41			; 00000029H
  00175	52		 push	 edx
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00186	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN21@display_wa:
  00190	f3 0f 2c 4d 98	 cvttss2si ecx, DWORD PTR _waypoint_range$[ebp]
  00195	51		 push	 ecx
  00196	6a 00		 push	 0
  00198	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  0019b	52		 push	 edx
  0019c	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001a2	c1 e0 02	 shl	 eax, 2
  001a5	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv142[ebp]
  001ab	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  001b2	ff d2		 call	 edx
  001b4	0f b6 c0	 movzx	 eax, al
  001b7	50		 push	 eax
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@
  001bd	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 _sprintf
  001c6	83 c4 10	 add	 esp, 16			; 00000010H
  001c9	e9 b3 01 00 00	 jmp	 $LN10@display_wa
$LN7@display_wa:

; 7256 : 			}
; 7257 : 			else if (waypoint_range < 100000.0)

  001ce	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  001d3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  001db	66 0f 2f c8	 comisd	 xmm1, xmm0
  001df	0f 86 e7 00 00
	00		 jbe	 $LN9@display_wa

; 7258 : 			{
; 7259 : 				int
; 7260 : 					i;
; 7261 : 
; 7262 : 				float
; 7263 : 					f;
; 7264 : 
; 7265 : 				//
; 7266 : 				// this is required to prevent rounding errors around the 100Km mark
; 7267 : 				//
; 7268 : 
; 7269 : 				i = (int) waypoint_range * (1.0 / 100.0);

  001e5	f3 0f 2c 45 98	 cvttss2si eax, DWORD PTR _waypoint_range$[ebp]
  001ea	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001ee	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  001f6	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  001fa	89 4d 94	 mov	 DWORD PTR _i$6[ebp], ecx

; 7270 : 
; 7271 : 				f = (float) i * (1.0 / 10.0);

  001fd	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00202	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00206	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0020e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00212	f3 0f 11 45 90	 movss	 DWORD PTR _f$5[ebp], xmm0

; 7272 : 
; 7273 : 				sprintf (buffer, "%c: %.1f KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  00217	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0021b	74 0d		 je	 SHORT $LN22@display_wa
  0021d	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00220	8b 08		 mov	 ecx, DWORD PTR [eax]
  00222	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv178[ebp], ecx
  00228	eb 24		 jmp	 SHORT $LN23@display_wa
$LN22@display_wa:
  0022a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00230	83 c2 3b	 add	 edx, 59			; 0000003bH
  00233	52		 push	 edx
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023e	50		 push	 eax
  0023f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00244	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN23@display_wa:
  0024e	b9 01 00 00 00	 mov	 ecx, 1
  00253	85 c9		 test	 ecx, ecx
  00255	74 0c		 je	 SHORT $LN24@display_wa
  00257	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
  00261	eb 24		 jmp	 SHORT $LN25@display_wa
$LN24@display_wa:
  00263	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00269	83 c2 3b	 add	 edx, 59			; 0000003bH
  0026c	52		 push	 edx
  0026d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00272	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0027d	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
$LN25@display_wa:
  00287	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  0028c	83 ec 08	 sub	 esp, 8
  0028f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00294	6a 00		 push	 0
  00296	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  00299	51		 push	 ecx
  0029a	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv186[ebp]
  002a0	c1 e2 02	 shl	 edx, 2
  002a3	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  002a9	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  002b0	ff d1		 call	 ecx
  002b2	0f b6 d0	 movzx	 edx, al
  002b5	52		 push	 edx
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@
  002bb	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 _sprintf
  002c4	83 c4 14	 add	 esp, 20			; 00000014H

; 7274 : 			}
; 7275 : 			else

  002c7	e9 b5 00 00 00	 jmp	 $LN10@display_wa
$LN9@display_wa:

; 7276 : 			{
; 7277 : 				sprintf (buffer, "%c: %d KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  002cc	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  002d0	74 0d		 je	 SHORT $LN26@display_wa
  002d2	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  002d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d7	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  002dd	eb 24		 jmp	 SHORT $LN27@display_wa
$LN26@display_wa:
  002df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  002e5	83 c2 3f	 add	 edx, 63			; 0000003fH
  002e8	52		 push	 edx
  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002f3	50		 push	 eax
  002f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f9	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN27@display_wa:
  00303	b9 01 00 00 00	 mov	 ecx, 1
  00308	85 c9		 test	 ecx, ecx
  0030a	74 0c		 je	 SHORT $LN28@display_wa
  0030c	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv215[ebp], 0
  00316	eb 24		 jmp	 SHORT $LN29@display_wa
$LN28@display_wa:
  00318	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  0031e	83 c2 3f	 add	 edx, 63			; 0000003fH
  00321	52		 push	 edx
  00322	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00332	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv215[ebp], 0
$LN29@display_wa:
  0033c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00341	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00349	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0034d	51		 push	 ecx
  0034e	6a 00		 push	 0
  00350	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  00353	52		 push	 edx
  00354	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv215[ebp]
  0035a	c1 e0 02	 shl	 eax, 2
  0035d	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv207[ebp]
  00363	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  0036a	ff d2		 call	 edx
  0036c	0f b6 c0	 movzx	 eax, al
  0036f	50		 push	 eax
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@
  00375	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00378	51		 push	 ecx
  00379	e8 00 00 00 00	 call	 _sprintf
  0037e	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@display_wa:

; 7278 : 			}
; 7279 : 		}
; 7280 : 		else

  00381	eb 11		 jmp	 SHORT $LN6@display_wa
$LN5@display_wa:

; 7281 : 		{
; 7282 : 			sprintf (buffer, "-:--.-");

  00383	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  00388	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 _sprintf
  00391	83 c4 08	 add	 esp, 8
$LN6@display_wa:

; 7283 : 		}
; 7284 : 
; 7285 : 		set_2d_mono_font_position (1.0, -0.7);

  00394	51		 push	 ecx
  00395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7286 : 
; 7287 : 		set_mono_font_rel_position (-get_mono_font_string_width(buffer) - 4, 0.0);

  003b5	51		 push	 ecx
  003b6	0f 57 c0	 xorps	 xmm0, xmm0
  003b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003be	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003c7	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv341[ebp]
  003cd	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv341[ebp]
  003d5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003dc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000
  003e4	51		 push	 ecx
  003e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ea	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7288 : 
; 7289 : 		print_mono_font_string (buffer);

  003ef	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7290 : 
; 7291 : 		//
; 7292 : 		// time to go
; 7293 : 		//
; 7294 : 
; 7295 : 		if ((current_flight_dynamics->velocity_z.value > 0.1) && (!hokum_damage.navigation_computer))

  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003fd	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  00405	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  0040d	76 65		 jbe	 SHORT $LN11@display_wa
  0040f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00414	c1 e8 09	 shr	 eax, 9
  00417	83 e0 01	 and	 eax, 1
  0041a	75 58		 jne	 SHORT $LN11@display_wa

; 7296 : 		{
; 7297 : 			float
; 7298 : 				time_to_go,
; 7299 : 				hours,
; 7300 : 				minutes,
; 7301 : 				seconds;
; 7302 : 
; 7303 : 			time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  0041c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00421	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _waypoint_range$[ebp]
  00426	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  0042e	f3 0f 11 45 8c	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 7304 : 
; 7305 : 			get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  00433	8d 45 80	 lea	 eax, DWORD PTR _seconds$1[ebp]
  00436	50		 push	 eax
  00437	8d 4d 84	 lea	 ecx, DWORD PTR _minutes$2[ebp]
  0043a	51		 push	 ecx
  0043b	8d 55 88	 lea	 edx, DWORD PTR _hours$3[ebp]
  0043e	52		 push	 edx
  0043f	51		 push	 ecx
  00440	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 7306 : 
; 7307 : 			sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  0044f	f3 0f 2c 45 80	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  00454	50		 push	 eax
  00455	f3 0f 2c 4d 84	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  0045a	51		 push	 ecx
  0045b	f3 0f 2c 55 88	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  00460	52		 push	 edx
  00461	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  00466	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 _sprintf
  0046f	83 c4 14	 add	 esp, 20			; 00000014H

; 7308 : 		}
; 7309 : 		else

  00472	eb 11		 jmp	 SHORT $LN12@display_wa
$LN11@display_wa:

; 7310 : 		{
; 7311 : 			strcpy (buffer, "--:--:--");

  00474	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  00479	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0047c	50		 push	 eax
  0047d	e8 00 00 00 00	 call	 _strcpy
  00482	83 c4 08	 add	 esp, 8
$LN12@display_wa:

; 7312 : 		}
; 7313 : 
; 7314 : 		set_2d_mono_font_position (1.0, -0.8);

  00485	51		 push	 ecx
  00486	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	51		 push	 ecx
  00494	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7315 : 
; 7316 : 		set_mono_font_rel_position (-get_mono_font_string_width(buffer) - 4, 0.0);

  004a6	51		 push	 ecx
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004af	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004b2	50		 push	 eax
  004b3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004b8	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv365[ebp]
  004be	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv365[ebp]
  004c6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004cd	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000
  004d5	51		 push	 ecx
  004d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004db	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7317 : 
; 7318 : 		print_mono_font_string (buffer);

  004e0	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004e3	50		 push	 eax
  004e4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_wa:

; 7319 : 	}
; 7320 : }

  004e9	5f		 pop	 edi
  004ea	5e		 pop	 esi
  004eb	5b		 pop	 ebx
  004ec	8b e5		 mov	 esp, ebp
  004ee	5d		 pop	 ebp
  004ef	c3		 ret	 0
?display_waypoint_information@@YGXXZ ENDP		; display_waypoint_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_rate_of_climb_scale@@YGXXZ
_TEXT	SEGMENT
tv213 = -88						; size = 8
tv214 = -80						; size = 8
_y$ = -8						; size = 4
_xpos$ = -4						; size = 4
?draw_rate_of_climb_scale@@YGXXZ PROC			; draw_rate_of_climb_scale, COMDAT

; 7175 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7176 : 	float
; 7177 : 		xpos = 0.47,

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _xpos$[ebp], xmm0

; 7178 : 		y;
; 7179 : 
; 7180 : 	//
; 7181 : 	// draw scale
; 7182 : 	//
; 7183 : 
; 7184 : 	draw_2d_line (+xpos, +0.500, xpos + 0.050, +0.500, MFD_COLOUR_LIGHT_BLUE);

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	c1 e0 04	 shl	 eax, 4
  0001e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00024	51		 push	 ecx
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00038	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00040	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00044	51		 push	 ecx
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	51		 push	 ecx
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	51		 push	 ecx
  00059	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7185 : 	draw_2d_line (+xpos, +0.400, xpos + 0.025, +0.400, MFD_COLOUR_LIGHT_BLUE);

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	c1 e0 04	 shl	 eax, 4
  00070	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00076	51		 push	 ecx
  00077	51		 push	 ecx
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0008a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00096	51		 push	 ecx
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	51		 push	 ecx
  000ab	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7186 : 	draw_2d_line (+xpos, +0.300, xpos + 0.025, +0.300, MFD_COLOUR_LIGHT_BLUE);

  000ba	b8 04 00 00 00	 mov	 eax, 4
  000bf	c1 e0 04	 shl	 eax, 4
  000c2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  000c8	51		 push	 ecx
  000c9	51		 push	 ecx
  000ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  000dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  000e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e8	51		 push	 ecx
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	51		 push	 ecx
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	51		 push	 ecx
  000fd	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00102	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00107	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7187 : 	draw_2d_line (+xpos, +0.200, xpos + 0.025, +0.200, MFD_COLOUR_LIGHT_BLUE);

  0010c	b8 04 00 00 00	 mov	 eax, 4
  00111	c1 e0 04	 shl	 eax, 4
  00114	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0011a	51		 push	 ecx
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0012e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00136	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013a	51		 push	 ecx
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	51		 push	 ecx
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	51		 push	 ecx
  0014f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7188 : 	draw_2d_line (+xpos, +0.100, xpos + 0.025, +0.100, MFD_COLOUR_LIGHT_BLUE);

  0015e	b8 04 00 00 00	 mov	 eax, 4
  00163	c1 e0 04	 shl	 eax, 4
  00166	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0016c	51		 push	 ecx
  0016d	51		 push	 ecx
  0016e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00180	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00188	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018c	51		 push	 ecx
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	51		 push	 ecx
  001a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  001a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7189 : 	draw_2d_line (+xpos, +0.000, xpos + 0.050, +0.000, MFD_COLOUR_LIGHT_BLUE);

  001b0	b8 04 00 00 00	 mov	 eax, 4
  001b5	c1 e0 04	 shl	 eax, 4
  001b8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  001be	51		 push	 ecx
  001bf	51		 push	 ecx
  001c0	0f 57 c0	 xorps	 xmm0, xmm0
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  001cd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  001d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d9	51		 push	 ecx
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	51		 push	 ecx
  001e0	0f 57 c0	 xorps	 xmm0, xmm0
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	51		 push	 ecx
  001e9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7190 : 	draw_2d_line (+xpos, -0.100, xpos + 0.025, -0.100, MFD_COLOUR_LIGHT_BLUE);

  001f8	b8 04 00 00 00	 mov	 eax, 4
  001fd	c1 e0 04	 shl	 eax, 4
  00200	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00206	51		 push	 ecx
  00207	51		 push	 ecx
  00208	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0021a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00222	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00226	51		 push	 ecx
  00227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022c	51		 push	 ecx
  0022d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00235	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023a	51		 push	 ecx
  0023b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00240	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00245	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7191 : 	draw_2d_line (+xpos, -0.200, xpos + 0.025, -0.200, MFD_COLOUR_LIGHT_BLUE);

  0024a	b8 04 00 00 00	 mov	 eax, 4
  0024f	c1 e0 04	 shl	 eax, 4
  00252	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00258	51		 push	 ecx
  00259	51		 push	 ecx
  0025a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0026c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00274	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00278	51		 push	 ecx
  00279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027e	51		 push	 ecx
  0027f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028c	51		 push	 ecx
  0028d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7192 : 	draw_2d_line (+xpos, -0.300, xpos + 0.025, -0.300, MFD_COLOUR_LIGHT_BLUE);

  0029c	b8 04 00 00 00	 mov	 eax, 4
  002a1	c1 e0 04	 shl	 eax, 4
  002a4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002aa	51		 push	 ecx
  002ab	51		 push	 ecx
  002ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  002be	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  002c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ca	51		 push	 ecx
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	51		 push	 ecx
  002d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  002d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002de	51		 push	 ecx
  002df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7193 : 	draw_2d_line (+xpos, -0.400, xpos + 0.025, -0.400, MFD_COLOUR_LIGHT_BLUE);

  002ee	b8 04 00 00 00	 mov	 eax, 4
  002f3	c1 e0 04	 shl	 eax, 4
  002f6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002fc	51		 push	 ecx
  002fd	51		 push	 ecx
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00310	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00318	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031c	51		 push	 ecx
  0031d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00322	51		 push	 ecx
  00323	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0032b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00330	51		 push	 ecx
  00331	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7194 : 	draw_2d_line (+xpos, -0.500, xpos + 0.050, -0.500, MFD_COLOUR_LIGHT_BLUE);

  00340	b8 04 00 00 00	 mov	 eax, 4
  00345	c1 e0 04	 shl	 eax, 4
  00348	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0034e	51		 push	 ecx
  0034f	51		 push	 ecx
  00350	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00362	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0036a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0036e	51		 push	 ecx
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	51		 push	 ecx
  00375	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0037d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00382	51		 push	 ecx
  00383	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7195 : 
; 7196 : 	//
; 7197 : 	// get indicator position (fsd +/- 10m/s)
; 7198 : 	//
; 7199 : 
; 7200 : 	y = current_flight_dynamics->world_velocity_y.value;

  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00397	f3 0f 10 80 14
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8468]
  0039f	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 7201 : 
; 7202 : 	y = bound (y, -10.0, 10.0);

  003a4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003a9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  003b1	66 0f 2f c8	 comisd	 xmm1, xmm0
  003b5	76 0f		 jbe	 SHORT $LN5@draw_rate_
  003b7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  003bf	f2 0f 11 45 b0	 movsd	 QWORD PTR tv214[ebp], xmm0
  003c4	eb 32		 jmp	 SHORT $LN6@draw_rate_
$LN5@draw_rate_:
  003c6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003cb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  003d3	76 0f		 jbe	 SHORT $LN3@draw_rate_
  003d5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  003dd	f2 0f 11 45 a8	 movsd	 QWORD PTR tv213[ebp], xmm0
  003e2	eb 0a		 jmp	 SHORT $LN4@draw_rate_
$LN3@draw_rate_:
  003e4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003e9	f2 0f 11 45 a8	 movsd	 QWORD PTR tv213[ebp], xmm0
$LN4@draw_rate_:
  003ee	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv213[ebp]
  003f3	f2 0f 11 45 b0	 movsd	 QWORD PTR tv214[ebp], xmm0
$LN6@draw_rate_:
  003f8	f2 0f 5a 45 b0	 cvtsd2ss xmm0, QWORD PTR tv214[ebp]
  003fd	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 7203 : 
; 7204 : 	y *= 0.05;

  00402	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00407	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0040f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00413	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 7205 : 
; 7206 : 	draw_2d_mono_sprite(large_rate_of_climb_scale_pointer, xpos + 0.05, y, MFD_COLOUR_LIGHT_BLUE);

  00418	b8 04 00 00 00	 mov	 eax, 4
  0041d	c1 e0 04	 shl	 eax, 4
  00420	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00426	51		 push	 ecx
  00427	51		 push	 ecx
  00428	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00437	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0043f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00443	51		 push	 ecx
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	68 00 00 00 00	 push	 OFFSET ?large_rate_of_climb_scale_pointer@@3PADA
  0044e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7207 : }

  00453	5f		 pop	 edi
  00454	5e		 pop	 esi
  00455	5b		 pop	 ebx
  00456	8b e5		 mov	 esp, ebp
  00458	5d		 pop	 ebp
  00459	c3		 ret	 0
?draw_rate_of_climb_scale@@YGXXZ ENDP			; draw_rate_of_climb_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_airspeed_scale@@YGXXZ
_TEXT	SEGMENT
tv456 = -192						; size = 4
tv361 = -192						; size = 4
_buffer$1 = -124					; size = 8
_x_adjust$2 = -116					; size = 4
_loop$3 = -112						; size = 4
_y$4 = -108						; size = 4
_mod_scale_step_5$5 = -104				; size = 4
_int_scale_step_5$6 = -100				; size = 4
_scale_step_5$7 = -96					; size = 4
_v2$ = -92						; size = 4
_v1$ = -88						; size = 4
_u2$ = -84						; size = 4
_u1$ = -80						; size = 4
_buffer$ = -76						; size = 8
_airspeed$ = -68					; size = 4
_y_adjust$ = -64					; size = 4
_x_adjust$ = -60					; size = 4
_mfd_vp_y_max$ = -56					; size = 4
_mfd_vp_y_min$ = -52					; size = 4
_v$ = -48						; size = 4
_scale_step$ = -44					; size = 4
_scale_bottom$ = -40					; size = 4
_scale_top$ = -36					; size = 4
_x4$ = -32						; size = 4
_x5$ = -28						; size = 4
_x1$ = -24						; size = 4
_box_bottom$ = -20					; size = 4
_box_top$ = -16						; size = 4
_box_end$ = -12						; size = 4
_box_start$ = -8					; size = 4
_y_centre$ = -4						; size = 4
?draw_airspeed_scale@@YGXXZ PROC			; draw_airspeed_scale, COMDAT

; 7024 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7025 : 	const float
; 7026 : 		y_centre = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 7027 : 		box_start = -0.95,

  00014	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0001c	f3 0f 11 45 f8	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 7028 : 		box_end = box_start + 0.25,

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00029	f3 0f 11 45 f4	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 7029 : 		box_top = y_centre + 0.04,

  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00036	f3 0f 11 45 f0	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 7030 : 		box_bottom = y_centre - 0.04,

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00043	f3 0f 11 45 ec	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 7031 : 		x1 = box_start,

  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00050	f3 0f 11 45 e8	 movss	 DWORD PTR _x1$[ebp], xmm0

; 7032 : //		x2 = x1 + 0.03,
; 7033 : //		x3 = x1 + 0.125,
; 7034 : 		x5 = box_end,

  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0005d	f3 0f 11 45 e4	 movss	 DWORD PTR _x5$[ebp], xmm0

; 7035 : 		x4 = x5 - 0.03,

  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3ae147
  0006a	f3 0f 11 45 e0	 movss	 DWORD PTR _x4$[ebp], xmm0

; 7036 : 		scale_top = y_centre + 0.6,

  0006f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00077	f3 0f 11 45 dc	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 7037 : 		scale_bottom = y_centre - 0.6,

  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00084	f3 0f 11 45 d8	 movss	 DWORD PTR _scale_bottom$[ebp], xmm0

; 7038 : 		scale_step = 1.0 / 9.0;

  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3de38e39
  00091	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_step$[ebp], xmm0

; 7039 : 
; 7040 : 	float
; 7041 : 		v,
; 7042 : 		mfd_vp_y_min,
; 7043 : 		mfd_vp_y_max,
; 7044 : 		x_adjust,
; 7045 : 		y_adjust = y_centre,

  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7046 : 		airspeed = kilometres_per_hour(current_flight_dynamics->velocity_z.value);

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000a3	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  000b3	f3 0f 11 45 bc	 movss	 DWORD PTR _airspeed$[ebp], xmm0

; 7047 : 
; 7048 : 
; 7049 : 	char
; 7050 : 		buffer[8];
; 7051 : 
; 7052 : 	int
; 7053 : 		u1, u2, v1, v2;
; 7054 : 
; 7055 : 
; 7056 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, TRUE, FALSE, MFD_COLOUR_BLUE);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 11	 imul	 ecx, eax, 17
  000c0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000c6	52		 push	 edx
  000c7	6a 00		 push	 0
  000c9	6a 01		 push	 1
  000cb	51		 push	 ecx
  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	51		 push	 ecx
  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	51		 push	 ecx
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 7057 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, FALSE, FALSE, MFD_COLOUR_LIGHT_BLUE);

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	c1 e0 04	 shl	 eax, 4
  00110	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00116	51		 push	 ecx
  00117	6a 00		 push	 0
  00119	6a 00		 push	 0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00145	51		 push	 ecx
  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0014e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00153	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 7058 : 
; 7059 : 	// draw scale
; 7060 : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  00158	8d 45 d0	 lea	 eax, DWORD PTR _v$[ebp]
  0015b	50		 push	 eax
  0015c	51		 push	 ecx
  0015d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7061 : 
; 7062 : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5);

  0016f	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00174	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0017c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00184	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  0018c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00194	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00198	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019c	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 7063 : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5) - 0.001;

  001a1	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001a6	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001ae	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001b6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  001be	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001c6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ca	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d6	f3 0f 11 45 c8	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 7064 : 
; 7065 : 	debug_log("min: %.02f, max: %.02f", mfd_vp_y_min, mfd_vp_y_max);

  001db	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  001e0	83 ec 08	 sub	 esp, 8
  001e3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001e8	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  001ed	83 ec 08	 sub	 esp, 8
  001f0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@
  001fa	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001ff	83 c4 14	 add	 esp, 20			; 00000014H

; 7066 : 
; 7067 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00202	51		 push	 ecx
  00203	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	51		 push	 ecx
  00227	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0022f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7068 : 
; 7069 : 	//
; 7070 : 	// draw scale
; 7071 : 	//
; 7072 : 
; 7073 : 	{
; 7074 : 		float scale_step_5 = airspeed * 0.4;

  0023f	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00244	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  0024c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00250	f3 0f 11 45 a0	 movss	 DWORD PTR _scale_step_5$7[ebp], xmm0

; 7075 : 		int int_scale_step_5 = (int) scale_step_5;

  00255	f3 0f 2c 45 a0	 cvttss2si eax, DWORD PTR _scale_step_5$7[ebp]
  0025a	89 45 9c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 7076 : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  0025d	f3 0f 2a 45 9c	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$6[ebp]
  00262	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _scale_step_5$7[ebp]
  00267	f3 0f 5c c8	 subss	 xmm1, xmm0
  0026b	f3 0f 11 4d 98	 movss	 DWORD PTR _mod_scale_step_5$5[ebp], xmm1

; 7077 : 
; 7078 : //		int tick_type = (int_scale_step_5 % 4) == 0;
; 7079 : 		float y = -(8.0 + mod_scale_step_5) * scale_step;

  00270	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$5[ebp]
  00275	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4020000000000000
  0027d	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00284	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fbc71c720000000
  0028c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00290	f3 0f 11 45 94	 movss	 DWORD PTR _y$4[ebp], xmm0

; 7080 : 		int loop;
; 7081 : 
; 7082 : 		int_scale_step_5 -= 8;

  00295	8b 45 9c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  00298	83 e8 08	 sub	 eax, 8
  0029b	89 45 9c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 7083 : 
; 7084 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  0029e	6a 02		 push	 2
  002a0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7085 : 		y_adjust = -2.0;

  002a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  002ad	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7086 : 
; 7087 : 		for (loop = 0; loop <= 25; loop++)

  002b2	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  002b9	eb 09		 jmp	 SHORT $LN4@draw_airsp
$LN2@draw_airsp:
  002bb	8b 45 90	 mov	 eax, DWORD PTR _loop$3[ebp]
  002be	83 c0 01	 add	 eax, 1
  002c1	89 45 90	 mov	 DWORD PTR _loop$3[ebp], eax
$LN4@draw_airsp:
  002c4	83 7d 90 19	 cmp	 DWORD PTR _loop$3[ebp], 25 ; 00000019H
  002c8	0f 8f 05 01 00
	00		 jg	 $LN3@draw_airsp

; 7088 : 		{
; 7089 : //			if (int_scale_step_5 > 0)
; 7090 : 			{
; 7091 : 				draw_2d_line (x4, y, x5, y, MFD_COLOUR_LIGHT_BLUE);

  002ce	b8 04 00 00 00	 mov	 eax, 4
  002d3	c1 e0 04	 shl	 eax, 4
  002d6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002dc	51		 push	 ecx
  002dd	51		 push	 ecx
  002de	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	51		 push	 ecx
  002e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	51		 push	 ecx
  002f7	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  002fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00301	51		 push	 ecx
  00302	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3ae147
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7092 : 
; 7093 : 				if ((int_scale_step_5 % 4) == 0)

  00314	8b 45 9c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  00317	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0031c	79 05		 jns	 SHORT $LN7@draw_airsp
  0031e	48		 dec	 eax
  0031f	83 c8 fc	 or	 eax, -4			; fffffffcH
  00322	40		 inc	 eax
$LN7@draw_airsp:
  00323	85 c0		 test	 eax, eax
  00325	0f 85 88 00 00
	00		 jne	 $LN5@draw_airsp

; 7094 : 				{
; 7095 : 					float x_adjust;
; 7096 : 					char buffer[8];
; 7097 : 
; 7098 : 					sprintf(buffer, "%4d", (int_scale_step_5 * 5 / 2));

  0032b	6b 45 9c 05	 imul	 eax, DWORD PTR _int_scale_step_5$6[ebp], 5
  0032f	99		 cdq
  00330	2b c2		 sub	 eax, edx
  00332	d1 f8		 sar	 eax, 1
  00334	50		 push	 eax
  00335	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  0033a	8d 45 84	 lea	 eax, DWORD PTR _buffer$1[ebp]
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 _sprintf
  00343	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7099 : 					x_adjust = get_mono_font_string_width(buffer) + 2;

  00346	8d 45 84	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0034f	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv361[ebp]
  00355	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv361[ebp]
  0035d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00365	f3 0f 11 45 8c	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 7100 : 
; 7101 : 					set_2d_mono_font_position (x4, y);

  0036a	51		 push	 ecx
  0036b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3ae147
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7102 : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  00388	51		 push	 ecx
  00389	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  00398	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0039f	51		 push	 ecx
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7103 : 					print_mono_font_string(buffer);

  003aa	8d 45 84	 lea	 eax, DWORD PTR _buffer$1[ebp]
  003ad	50		 push	 eax
  003ae	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@draw_airsp:

; 7104 : 				}
; 7105 : 			}
; 7106 : 
; 7107 : 			int_scale_step_5++;

  003b3	8b 45 9c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  003b6	83 c0 01	 add	 eax, 1
  003b9	89 45 9c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 7108 : 			y += scale_step;

  003bc	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  003c1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3de38e39
  003c9	f3 0f 11 45 94	 movss	 DWORD PTR _y$4[ebp], xmm0

; 7109 : 		}

  003ce	e9 e8 fe ff ff	 jmp	 $LN2@draw_airsp
$LN3@draw_airsp:

; 7110 : 	}
; 7111 : 
; 7112 : 	//
; 7113 : 	// restore 2D environment
; 7114 : 	//
; 7115 : 
; 7116 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  003d3	51		 push	 ecx
  003d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	51		 push	 ecx
  003f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fd	51		 push	 ecx
  003fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00406	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7117 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00416	51		 push	 ecx
  00417	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0041f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00424	51		 push	 ecx
  00425	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	51		 push	 ecx
  00433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7118 : 
; 7119 : 	// clear background area
; 7120 : 	get_2d_int_screen_coordinates (box_start, box_top, &u1, &v1);

  00459	8d 45 a8	 lea	 eax, DWORD PTR _v1$[ebp]
  0045c	50		 push	 eax
  0045d	8d 4d b0	 lea	 ecx, DWORD PTR _u1$[ebp]
  00460	51		 push	 ecx
  00461	51		 push	 ecx
  00462	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	51		 push	 ecx
  00470	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7121 : 	get_2d_int_screen_coordinates (box_end, box_bottom, &u2, &v2);

  00482	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  00485	50		 push	 eax
  00486	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  00489	51		 push	 ecx
  0048a	51		 push	 ecx
  0048b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	51		 push	 ecx
  00499	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7122 : 	set_block(u1, v1, u2, v2, MFD_COLOUR_BLUE);

  004ab	b8 04 00 00 00	 mov	 eax, 4
  004b0	6b c8 11	 imul	 ecx, eax, 17
  004b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b9	52		 push	 edx
  004ba	8b 45 a4	 mov	 eax, DWORD PTR _v2$[ebp]
  004bd	50		 push	 eax
  004be	8b 4d ac	 mov	 ecx, DWORD PTR _u2$[ebp]
  004c1	51		 push	 ecx
  004c2	8b 55 a8	 mov	 edx, DWORD PTR _v1$[ebp]
  004c5	52		 push	 edx
  004c6	8b 45 b0	 mov	 eax, DWORD PTR _u1$[ebp]
  004c9	50		 push	 eax
  004ca	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7123 : 
; 7124 : 	// draw surrounding box
; 7125 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR_LIGHT_BLUE);

  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	c1 e0 04	 shl	 eax, 4
  004d7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  004dd	51		 push	 ecx
  004de	51		 push	 ecx
  004df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  004e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ec	51		 push	 ecx
  004ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	51		 push	 ecx
  00509	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00511	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00516	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7126 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  0051b	b8 04 00 00 00	 mov	 eax, 4
  00520	c1 e0 04	 shl	 eax, 4
  00523	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00529	51		 push	 ecx
  0052a	51		 push	 ecx
  0052b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	51		 push	 ecx
  00539	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	51		 push	 ecx
  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	51		 push	 ecx
  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0055d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00562	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7127 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  00567	b8 04 00 00 00	 mov	 eax, 4
  0056c	c1 e0 04	 shl	 eax, 4
  0056f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00575	51		 push	 ecx
  00576	51		 push	 ecx
  00577	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0057f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00584	51		 push	 ecx
  00585	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0058d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00592	51		 push	 ecx
  00593	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  0059b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a0	51		 push	 ecx
  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  005a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ae	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7128 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  005b3	b8 04 00 00 00	 mov	 eax, 4
  005b8	c1 e0 04	 shl	 eax, 4
  005bb	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  005c1	51		 push	 ecx
  005c2	51		 push	 ecx
  005c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  005cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d0	51		 push	 ecx
  005d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	51		 push	 ecx
  005df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7129 : 
; 7130 : 	// print digital readout
; 7131 : 
; 7132 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  005ff	6a 04		 push	 4
  00601	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7133 : 	y_adjust = -2.0;

  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0060e	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7134 : 
; 7135 : 	sprintf(buffer, "%.0f", airspeed);

  00613	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00618	83 ec 08	 sub	 esp, 8
  0061b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00620	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00625	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 _sprintf
  0062e	83 c4 10	 add	 esp, 16			; 00000010H

; 7136 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  00631	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00634	50		 push	 eax
  00635	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0063a	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv456[ebp]
  00640	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv456[ebp]
  00648	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0064f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00657	f3 0f 11 45 c4	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7137 : 
; 7138 : 	set_2d_mono_font_position (box_end, y_centre);

  0065c	51		 push	 ecx
  0065d	0f 57 c0	 xorps	 xmm0, xmm0
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	51		 push	 ecx
  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7139 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  00678	51		 push	 ecx
  00679	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0067e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00683	51		 push	 ecx
  00684	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00689	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7140 : 	print_mono_font_string(buffer);

  00693	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00696	50		 push	 eax
  00697	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7141 : }

  0069c	5f		 pop	 edi
  0069d	5e		 pop	 esi
  0069e	5b		 pop	 ebx
  0069f	8b e5		 mov	 esp, ebp
  006a1	5d		 pop	 ebp
  006a2	c3		 ret	 0
?draw_airspeed_scale@@YGXXZ ENDP			; draw_airspeed_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv461 = -208						; size = 4
_buffer$1 = -140					; size = 8
_x_adjust$2 = -132					; size = 4
_loop$3 = -128						; size = 4
_y$4 = -124						; size = 4
_mod_scale_step_5$5 = -120				; size = 4
_int_scale_step_5$6 = -116				; size = 4
_scale_step_5$7 = -112					; size = 4
_displayed_altitude$ = -108				; size = 4
_v2$ = -104						; size = 4
_v1$ = -100						; size = 4
_u2$ = -96						; size = 4
_u1$ = -92						; size = 4
_buffer$ = -88						; size = 8
_format$ = -80						; size = 4
_altitude$ = -76					; size = 4
_barometric_altitude$ = -72				; size = 4
_radar_altitude$ = -68					; size = 4
_y_adjust$ = -64					; size = 4
_x_adjust$ = -60					; size = 4
_mfd_vp_y_max$ = -56					; size = 4
_mfd_vp_y_min$ = -52					; size = 4
_v$ = -48						; size = 4
_scale_step$ = -44					; size = 4
_scale_bottom$ = -40					; size = 4
_scale_top$ = -36					; size = 4
_x5$ = -32						; size = 4
_x2$ = -28						; size = 4
_x1$ = -24						; size = 4
_box_bottom$ = -20					; size = 4
_box_top$ = -16						; size = 4
_box_end$ = -12						; size = 4
_box_start$ = -8					; size = 4
_y_centre$ = -4						; size = 4
?draw_altitude_scale@@YGXXZ PROC			; draw_altitude_scale, COMDAT

; 6889 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6890 : 	const float
; 6891 : 		y_centre = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 6892 : 		box_start = 0.7,

  00014	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0001c	f3 0f 11 45 f8	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 6893 : 		box_end = box_start + 0.25,

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00029	f3 0f 11 45 f4	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 6894 : 		box_top = y_centre + 0.04,

  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00036	f3 0f 11 45 f0	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 6895 : 		box_bottom = y_centre - 0.04,

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00043	f3 0f 11 45 ec	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 6896 : 		x1 = box_start,

  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00050	f3 0f 11 45 e8	 movss	 DWORD PTR _x1$[ebp], xmm0

; 6897 : 		x2 = x1 + 0.03,

  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3ae147
  0005d	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 6898 : //		x3 = x1 + 0.125,
; 6899 : 		x5 = box_end,

  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0006a	f3 0f 11 45 e0	 movss	 DWORD PTR _x5$[ebp], xmm0

; 6900 : //		x4 = x5 - 0.03,
; 6901 : 		scale_top = y_centre + 0.6,

  0006f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00077	f3 0f 11 45 dc	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 6902 : 		scale_bottom = y_centre - 0.6,

  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00084	f3 0f 11 45 d8	 movss	 DWORD PTR _scale_bottom$[ebp], xmm0

; 6903 : 		scale_step = 1.0 / 9.0;

  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3de38e39
  00091	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_step$[ebp], xmm0

; 6904 : 
; 6905 : 	float
; 6906 : 		v,
; 6907 : 		mfd_vp_y_min,
; 6908 : 		mfd_vp_y_max,
; 6909 : 		x_adjust,
; 6910 : 		y_adjust = y_centre,

  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6911 : 		radar_altitude = current_flight_dynamics->radar_altitude.value,

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000a3	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  000ab	f3 0f 11 45 bc	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 6912 : 		barometric_altitude = current_flight_dynamics->barometric_altitude.value,

  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b5	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  000bd	f3 0f 11 45 b8	 movss	 DWORD PTR _barometric_altitude$[ebp], xmm0

; 6913 : 		altitude;
; 6914 : 
; 6915 : 
; 6916 : 	char
; 6917 : 		*format,
; 6918 : 		buffer[8];
; 6919 : 
; 6920 : 	int
; 6921 : 		u1, u2, v1, v2,
; 6922 : 		displayed_altitude = (int)((barometric_altitude + 5) / 10);

  000c2	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  000c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  000cf	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  000d7	f3 0f 2c c0	 cvttss2si eax, xmm0
  000db	89 45 94	 mov	 DWORD PTR _displayed_altitude$[ebp], eax

; 6923 : 
; 6924 : 
; 6925 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, TRUE, FALSE, MFD_COLOUR_BLUE);

  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	6b c8 11	 imul	 ecx, eax, 17
  000e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000ec	52		 push	 edx
  000ed	6a 00		 push	 0
  000ef	6a 01		 push	 1
  000f1	51		 push	 ecx
  000f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	51		 push	 ecx
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 6926 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, FALSE, FALSE, MFD_COLOUR_LIGHT_BLUE);

  0012e	b8 04 00 00 00	 mov	 eax, 4
  00133	c1 e0 04	 shl	 eax, 4
  00136	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0013c	51		 push	 ecx
  0013d	6a 00		 push	 0
  0013f	6a 00		 push	 0
  00141	51		 push	 ecx
  00142	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0014a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	51		 push	 ecx
  0016c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 6927 : 
; 6928 : 	// draw scale
; 6929 : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  0017e	8d 45 d0	 lea	 eax, DWORD PTR _v$[ebp]
  00181	50		 push	 eax
  00182	51		 push	 ecx
  00183	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  0018b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00190	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6930 : 
; 6931 : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5);

  00195	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  0019a	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001a2	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001aa	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  001b2	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001ba	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c2	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 6932 : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5) - 0.001;

  001c7	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001cc	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001d4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001dc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  001e4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001ec	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fc	f3 0f 11 45 c8	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 6933 : 
; 6934 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00201	51		 push	 ecx
  00202	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	51		 push	 ecx
  0020d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	51		 push	 ecx
  0021b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	51		 push	 ecx
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6935 : 
; 6936 : 	if (radar_altitude < 250.0)

  0023e	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00243	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@406f400000000000
  0024b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0024f	76 1b		 jbe	 SHORT $LN5@draw_altit

; 6937 : 	{
; 6938 : 		format = "R%3d";

  00251	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _format$[ebp], OFFSET ??_C@_04MLFODOCP@R?$CF3d@

; 6939 : 		altitude = radar_altitude;

  00258	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  0025d	f3 0f 11 45 b4	 movss	 DWORD PTR _altitude$[ebp], xmm0

; 6940 : 		displayed_altitude = altitude;

  00262	f3 0f 2c 45 b4	 cvttss2si eax, DWORD PTR _altitude$[ebp]
  00267	89 45 94	 mov	 DWORD PTR _displayed_altitude$[ebp], eax

; 6941 : 	}
; 6942 : 	else

  0026a	eb 30		 jmp	 SHORT $LN6@draw_altit
$LN5@draw_altit:

; 6943 : 	{
; 6944 : 		format = "%04d";

  0026c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _format$[ebp], OFFSET ??_C@_04OCCELDNI@?$CF04d@

; 6945 : 		altitude = barometric_altitude;

  00273	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  00278	f3 0f 11 45 b4	 movss	 DWORD PTR _altitude$[ebp], xmm0

; 6946 : 		displayed_altitude = (int)((barometric_altitude + 5) / 10) * 10;

  0027d	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  00282	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  0028a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  00292	f3 0f 2c c0	 cvttss2si eax, xmm0
  00296	6b c8 0a	 imul	 ecx, eax, 10
  00299	89 4d 94	 mov	 DWORD PTR _displayed_altitude$[ebp], ecx
$LN6@draw_altit:

; 6947 : 	}
; 6948 : 
; 6949 : 	//
; 6950 : 	// draw scale
; 6951 : 	//
; 6952 : 
; 6953 : 	{
; 6954 : 		float scale_step_5 = altitude * 0.4;

  0029c	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  002a1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  002a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ad	f3 0f 11 45 90	 movss	 DWORD PTR _scale_step_5$7[ebp], xmm0

; 6955 : 		int int_scale_step_5 = (int) scale_step_5;

  002b2	f3 0f 2c 45 90	 cvttss2si eax, DWORD PTR _scale_step_5$7[ebp]
  002b7	89 45 8c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 6956 : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  002ba	f3 0f 2a 45 8c	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$6[ebp]
  002bf	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _scale_step_5$7[ebp]
  002c4	f3 0f 5c c8	 subss	 xmm1, xmm0
  002c8	f3 0f 11 4d 88	 movss	 DWORD PTR _mod_scale_step_5$5[ebp], xmm1

; 6957 : 
; 6958 : //		int tick_type = (int_scale_step_5 % 4) == 0;
; 6959 : 		float y = -(8.0 + mod_scale_step_5) * scale_step;

  002cd	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$5[ebp]
  002d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4020000000000000
  002da	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fbc71c720000000
  002e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ed	f3 0f 11 45 84	 movss	 DWORD PTR _y$4[ebp], xmm0

; 6960 : 		int loop;
; 6961 : 
; 6962 : 		int_scale_step_5 -= 8;

  002f2	8b 45 8c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  002f5	83 e8 08	 sub	 eax, 8
  002f8	89 45 8c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 6963 : 
; 6964 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  002fb	6a 02		 push	 2
  002fd	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6965 : 		y_adjust = -2.0;

  00302	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0030a	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6966 : 
; 6967 : 		for (loop = 0; loop <= 25; loop++)

  0030f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  00316	eb 09		 jmp	 SHORT $LN4@draw_altit
$LN2@draw_altit:
  00318	8b 45 80	 mov	 eax, DWORD PTR _loop$3[ebp]
  0031b	83 c0 01	 add	 eax, 1
  0031e	89 45 80	 mov	 DWORD PTR _loop$3[ebp], eax
$LN4@draw_altit:
  00321	83 7d 80 19	 cmp	 DWORD PTR _loop$3[ebp], 25 ; 00000019H
  00325	0f 8f f9 00 00
	00		 jg	 $LN3@draw_altit

; 6968 : 		{
; 6969 : 			if (int_scale_step_5 >= 0)

  0032b	83 7d 8c 00	 cmp	 DWORD PTR _int_scale_step_5$6[ebp], 0
  0032f	0f 8c cf 00 00
	00		 jl	 $LN8@draw_altit

; 6970 : 			{
; 6971 : 				draw_2d_line (x1, y, x2, y, MFD_COLOUR_LIGHT_BLUE);

  00335	b8 04 00 00 00	 mov	 eax, 4
  0033a	c1 e0 04	 shl	 eax, 4
  0033d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00343	51		 push	 ecx
  00344	51		 push	 ecx
  00345	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  0034a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034f	51		 push	 ecx
  00350	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3ae147
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	51		 push	 ecx
  0035e	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  00363	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00368	51		 push	 ecx
  00369	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6972 : 
; 6973 : 				if ((int_scale_step_5 % 4) == 0)

  0037b	8b 45 8c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  0037e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00383	79 05		 jns	 SHORT $LN10@draw_altit
  00385	48		 dec	 eax
  00386	83 c8 fc	 or	 eax, -4			; fffffffcH
  00389	40		 inc	 eax
$LN10@draw_altit:
  0038a	85 c0		 test	 eax, eax
  0038c	75 76		 jne	 SHORT $LN8@draw_altit

; 6974 : 				{
; 6975 : 					float x_adjust;
; 6976 : 					char buffer[8];
; 6977 : 
; 6978 : 					sprintf(buffer, "%4d", (int_scale_step_5 * 5 / 2));

  0038e	6b 45 8c 05	 imul	 eax, DWORD PTR _int_scale_step_5$6[ebp], 5
  00392	99		 cdq
  00393	2b c2		 sub	 eax, edx
  00395	d1 f8		 sar	 eax, 1
  00397	50		 push	 eax
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  0039d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 _sprintf
  003a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6979 : 					x_adjust = 2.0; //get_mono_font_string_width(buffer) + 2;

  003ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  003b4	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 6980 : 
; 6981 : 					set_2d_mono_font_position (x2, y);

  003bc	51		 push	 ecx
  003bd	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	51		 push	 ecx
  003c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3ae147
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6982 : 					set_mono_font_rel_position (x_adjust, y_adjust);

  003da	51		 push	 ecx
  003db	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	51		 push	 ecx
  003e6	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6983 : 					print_mono_font_string(buffer);

  003f8	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  003fe	50		 push	 eax
  003ff	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN8@draw_altit:

; 6984 : 				}
; 6985 : 			}
; 6986 : 
; 6987 : 			int_scale_step_5++;

  00404	8b 45 8c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  00407	83 c0 01	 add	 eax, 1
  0040a	89 45 8c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 6988 : 			y += scale_step;

  0040d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  00412	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3de38e39
  0041a	f3 0f 11 45 84	 movss	 DWORD PTR _y$4[ebp], xmm0

; 6989 : 		}

  0041f	e9 f4 fe ff ff	 jmp	 $LN2@draw_altit
$LN3@draw_altit:

; 6990 : 	}
; 6991 : 
; 6992 : 	//
; 6993 : 	// restore 2D environment
; 6994 : 	//
; 6995 : 
; 6996 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00424	51		 push	 ecx
  00425	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	51		 push	 ecx
  00433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	51		 push	 ecx
  0044f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00461	50		 push	 eax
  00462	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 6997 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00467	51		 push	 ecx
  00468	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00470	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00475	51		 push	 ecx
  00476	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	51		 push	 ecx
  00484	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	51		 push	 ecx
  00492	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0049a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004a4	50		 push	 eax
  004a5	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6998 : 
; 6999 : 	// clear background area
; 7000 : 	get_2d_int_screen_coordinates (box_start, box_top, &u1, &v1);

  004aa	8d 45 9c	 lea	 eax, DWORD PTR _v1$[ebp]
  004ad	50		 push	 eax
  004ae	8d 4d a4	 lea	 ecx, DWORD PTR _u1$[ebp]
  004b1	51		 push	 ecx
  004b2	51		 push	 ecx
  004b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	51		 push	 ecx
  004c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  004c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ce	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7001 : 	get_2d_int_screen_coordinates (box_end, box_bottom, &u2, &v2);

  004d3	8d 45 98	 lea	 eax, DWORD PTR _v2$[ebp]
  004d6	50		 push	 eax
  004d7	8d 4d a0	 lea	 ecx, DWORD PTR _u2$[ebp]
  004da	51		 push	 ecx
  004db	51		 push	 ecx
  004dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  004e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e9	51		 push	 ecx
  004ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  004f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f7	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7002 : 	set_block(u1, v1, u2, v2, MFD_COLOUR_BLUE);

  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	6b c8 11	 imul	 ecx, eax, 17
  00504	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0050a	52		 push	 edx
  0050b	8b 45 98	 mov	 eax, DWORD PTR _v2$[ebp]
  0050e	50		 push	 eax
  0050f	8b 4d a0	 mov	 ecx, DWORD PTR _u2$[ebp]
  00512	51		 push	 ecx
  00513	8b 55 9c	 mov	 edx, DWORD PTR _v1$[ebp]
  00516	52		 push	 edx
  00517	8b 45 a4	 mov	 eax, DWORD PTR _u1$[ebp]
  0051a	50		 push	 eax
  0051b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7003 : 
; 7004 : 	// draw surrounding box
; 7005 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR_LIGHT_BLUE);

  00520	b8 04 00 00 00	 mov	 eax, 4
  00525	c1 e0 04	 shl	 eax, 4
  00528	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0052e	51		 push	 ecx
  0052f	51		 push	 ecx
  00530	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00538	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053d	51		 push	 ecx
  0053e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00546	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054b	51		 push	 ecx
  0054c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00554	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00559	51		 push	 ecx
  0055a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00562	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00567	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7006 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  0056c	b8 04 00 00 00	 mov	 eax, 4
  00571	c1 e0 04	 shl	 eax, 4
  00574	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0057a	51		 push	 ecx
  0057b	51		 push	 ecx
  0057c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	51		 push	 ecx
  005a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  005ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7007 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  005b8	b8 04 00 00 00	 mov	 eax, 4
  005bd	c1 e0 04	 shl	 eax, 4
  005c0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  005c6	51		 push	 ecx
  005c7	51		 push	 ecx
  005c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	51		 push	 ecx
  005e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  005ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f1	51		 push	 ecx
  005f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  005fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ff	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7008 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  00604	b8 04 00 00 00	 mov	 eax, 4
  00609	c1 e0 04	 shl	 eax, 4
  0060c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00612	51		 push	 ecx
  00613	51		 push	 ecx
  00614	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0061c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00621	51		 push	 ecx
  00622	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0062a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062f	51		 push	 ecx
  00630	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	51		 push	 ecx
  0063e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00646	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7009 : 
; 7010 : 	// print digital readout
; 7011 : 
; 7012 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  00650	6a 04		 push	 4
  00652	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7013 : 	y_adjust = -2.0;

  00657	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0065f	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7014 : 
; 7015 : 	sprintf(buffer, format, displayed_altitude);

  00664	8b 45 94	 mov	 eax, DWORD PTR _displayed_altitude$[ebp]
  00667	50		 push	 eax
  00668	8b 4d b0	 mov	 ecx, DWORD PTR _format$[ebp]
  0066b	51		 push	 ecx
  0066c	8d 55 a8	 lea	 edx, DWORD PTR _buffer$[ebp]
  0066f	52		 push	 edx
  00670	e8 00 00 00 00	 call	 _sprintf
  00675	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7016 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  00678	8d 45 a8	 lea	 eax, DWORD PTR _buffer$[ebp]
  0067b	50		 push	 eax
  0067c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00681	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv461[ebp]
  00687	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv461[ebp]
  0068f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00696	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0069e	f3 0f 11 45 c4	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7017 : 
; 7018 : 	set_2d_mono_font_position (box_end, y_centre);

  006a3	51		 push	 ecx
  006a4	0f 57 c0	 xorps	 xmm0, xmm0
  006a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ac	51		 push	 ecx
  006ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  006b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ba	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7019 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  006bf	51		 push	 ecx
  006c0	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ca	51		 push	 ecx
  006cb	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7020 : 	print_mono_font_string(buffer);

  006da	8d 45 a8	 lea	 eax, DWORD PTR _buffer$[ebp]
  006dd	50		 push	 eax
  006de	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7021 : }

  006e3	5f		 pop	 edi
  006e4	5e		 pop	 esi
  006e5	5b		 pop	 ebx
  006e6	8b e5		 mov	 esp, ebp
  006e8	5d		 pop	 ebp
  006e9	c3		 ret	 0
?draw_altitude_scale@@YGXXZ ENDP			; draw_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_aircraft_datum@@YGXXZ
_TEXT	SEGMENT
_y_centre$ = -4						; size = 4
?draw_aircraft_datum@@YGXXZ PROC			; draw_aircraft_datum, COMDAT

; 6869 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6870 : 	float y_centre = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 6871 : 
; 6872 : 	draw_2d_half_thick_line(0.15, y_centre, 0.4, y_centre, MFD_COLOUR_YELLOW);

  00011	b8 04 00 00 00	 mov	 eax, 4
  00016	6b c8 0f	 imul	 ecx, eax, 15
  00019	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001f	52		 push	 edx
  00020	51		 push	 ecx
  00021	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	51		 push	 ecx
  0002c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00034	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00039	51		 push	 ecx
  0003a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	51		 push	 ecx
  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6873 : 	draw_2d_half_thick_line(-0.15, y_centre, -0.4, y_centre, MFD_COLOUR_YELLOW);

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	6b c8 0f	 imul	 ecx, eax, 15
  0005f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00065	52		 push	 edx
  00066	51		 push	 ecx
  00067	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	51		 push	 ecx
  0008b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6874 : 
; 6875 : 	draw_2d_half_thick_line(0.15, y_centre, 0.15, y_centre - 0.05, MFD_COLOUR_YELLOW);

  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	6b c8 0f	 imul	 ecx, eax, 15
  000a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000ab	52		 push	 edx
  000ac	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  000b1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  000b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bd	51		 push	 ecx
  000be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c3	51		 push	 ecx
  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	51		 push	 ecx
  000d2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6876 : 	draw_2d_half_thick_line(-0.15, y_centre, -0.15, y_centre - 0.05, MFD_COLOUR_YELLOW);

  000ef	b8 04 00 00 00	 mov	 eax, 4
  000f4	6b c8 0f	 imul	 ecx, eax, 15
  000f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000fd	52		 push	 edx
  000fe	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  00103	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0010b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0010f	51		 push	 ecx
  00110	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00115	51		 push	 ecx
  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	51		 push	 ecx
  00124	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012e	51		 push	 ecx
  0012f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6877 : 
; 6878 : 	draw_2d_half_thick_line(0.5, y_centre, 0.7, y_centre, MFD_COLOUR_YELLOW);

  00141	b8 04 00 00 00	 mov	 eax, 4
  00146	6b c8 0f	 imul	 ecx, eax, 15
  00149	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0014f	52		 push	 edx
  00150	51		 push	 ecx
  00151	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00156	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015b	51		 push	 ecx
  0015c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	51		 push	 ecx
  0016a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	51		 push	 ecx
  00175	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0017d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00182	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6879 : 	draw_2d_half_thick_line(-0.5, y_centre, -0.7, y_centre, MFD_COLOUR_YELLOW);

  00187	b8 04 00 00 00	 mov	 eax, 4
  0018c	6b c8 0f	 imul	 ecx, eax, 15
  0018f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00195	52		 push	 edx
  00196	51		 push	 ecx
  00197	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	51		 push	 ecx
  001b0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	51		 push	 ecx
  001bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6880 : 
; 6881 : 	draw_2d_half_thick_line(0.0, y_centre - 0.6, 0.0, y_centre - 0.75, MFD_COLOUR_YELLOW);

  001cd	b8 04 00 00 00	 mov	 eax, 4
  001d2	6b c8 0f	 imul	 ecx, eax, 15
  001d5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001db	52		 push	 edx
  001dc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  001e1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe8000000000000
  001e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ed	51		 push	 ecx
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	51		 push	 ecx
  001f4	0f 57 c0	 xorps	 xmm0, xmm0
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  00201	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  00209	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00213	51		 push	 ecx
  00214	0f 57 c0	 xorps	 xmm0, xmm0
  00217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021c	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6882 : }

  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
?draw_aircraft_datum@@YGXXZ ENDP			; draw_aircraft_datum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_pitch_ladder@@YGXXZ
_TEXT	SEGMENT
tv855 = -264						; size = 8
tv665 = -264						; size = 8
tv659 = -264						; size = 8
tv651 = -264						; size = 8
tv229 = -264						; size = 4
tv92 = -264						; size = 4
tv644 = -260						; size = 4
tv638 = -260						; size = 4
tv626 = -260						; size = 4
tv398 = -260						; size = 4
tv189 = -260						; size = 4
tv182 = -260						; size = 4
tv84 = -260						; size = 4
_right_colour$1 = -192					; size = 4
_left_colour$2 = -188					; size = 4
_tmp$3 = -184						; size = 4
_end_x$4 = -180						; size = 4
_start_x$5 = -176					; size = 4
_right_y$6 = -172					; size = 4
_left_y$7 = -168					; size = 4
_incline$8 = -164					; size = 4
_inverted$9 = -160					; size = 4
_tan_pitch$10 = -156					; size = 4
_y_horizon_abs$11 = -152				; size = 4
_x_horizon_abs$12 = -148				; size = 4
_ground_colour$ = -144					; size = 4
_sky_colour$ = -140					; size = 4
_x_adjust$ = -136					; size = 4
_y_10_deg_step$ = -132					; size = 4
_x_10_deg_step$ = -128					; size = 4
_y_horizon$ = -124					; size = 4
_x_horizon$ = -120					; size = 4
_y_scale$ = -116					; size = 4
_x_scale$ = -112					; size = 4
_lower_edge$ = -108					; size = 4
_upper_edge$ = -104					; size = 4
_right_edge$ = -100					; size = 4
_left_edge$ = -96					; size = 4
_y$ = -92						; size = 4
_x$ = -88						; size = 4
_v$ = -84						; size = 4
_u$ = -80						; size = 4
_roll$ = -76						; size = 4
_pitch_bar_scale$ = -72					; size = 4
_tan_mod_pitch$ = -68					; size = 4
_mod_pitch$ = -64					; size = 4
_pitch$ = -60						; size = 4
_vp_size$ = -56						; size = 4
_size$ = -52						; size = 4
_y_centre$ = -48					; size = 4
_x_centre$ = -44					; size = 4
_y_adjust_below_line$ = -40				; size = 4
_y_adjust_above_line$ = -36				; size = 4
_loop$ = -32						; size = 4
_step_direction$ = -28					; size = 4
_int_pitch$ = -24					; size = 4
_s$ = -20						; size = 20
?draw_pitch_ladder@@YGXXZ PROC				; draw_pitch_ladder, COMDAT

; 6572 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6573 : 	char
; 6574 : 		s[20];
; 6575 : 
; 6576 : 	int
; 6577 : 		int_pitch,
; 6578 : 		step_direction,
; 6579 : 		loop;
; 6580 : 
; 6581 : 	float
; 6582 : 		y_adjust_above_line,
; 6583 : 		y_adjust_below_line,
; 6584 : 		x_centre,
; 6585 : 		y_centre = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 d0	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 6586 : 		size,
; 6587 : 		vp_size,
; 6588 : 		pitch,
; 6589 : 		mod_pitch,
; 6590 : 		tan_mod_pitch,
; 6591 : 		pitch_bar_scale,
; 6592 : 		roll,
; 6593 : 		u,
; 6594 : 		v,
; 6595 : 		x,
; 6596 : 		y,
; 6597 : 		left_edge,
; 6598 : 		right_edge,
; 6599 : 		upper_edge,
; 6600 : 		lower_edge,
; 6601 : 		x_scale,
; 6602 : 		y_scale,
; 6603 : 		x_horizon,
; 6604 : 		y_horizon,
; 6605 : 		x_10_deg_step,
; 6606 : 		y_10_deg_step,
; 6607 : 		x_adjust;
; 6608 : 
; 6609 : 	rgb_colour
; 6610 : 		sky_colour,
; 6611 : 		ground_colour;
; 6612 : 
; 6613 : 	if (command_line_colour_mfd)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0001b	74 3a		 je	 SHORT $LN7@draw_pitch

; 6614 : 	{
; 6615 : 		sky_colour.red = 0;

  0001d	c6 85 76 ff ff
	ff 00		 mov	 BYTE PTR _sky_colour$[ebp+2], 0

; 6616 : 		sky_colour.green = 120;

  00024	c6 85 75 ff ff
	ff 78		 mov	 BYTE PTR _sky_colour$[ebp+1], 120 ; 00000078H

; 6617 : 		sky_colour.blue = 192;

  0002b	c6 85 74 ff ff
	ff c0		 mov	 BYTE PTR _sky_colour$[ebp], 192 ; 000000c0H

; 6618 : 		sky_colour.alpha = 255;

  00032	c6 85 77 ff ff
	ff ff		 mov	 BYTE PTR _sky_colour$[ebp+3], 255 ; 000000ffH

; 6619 : 
; 6620 : 		ground_colour.red =   0;

  00039	c6 85 72 ff ff
	ff 00		 mov	 BYTE PTR _ground_colour$[ebp+2], 0

; 6621 : 		ground_colour.green =  90;

  00040	c6 85 71 ff ff
	ff 5a		 mov	 BYTE PTR _ground_colour$[ebp+1], 90 ; 0000005aH

; 6622 : 		ground_colour.blue =  10;

  00047	c6 85 70 ff ff
	ff 0a		 mov	 BYTE PTR _ground_colour$[ebp], 10 ; 0000000aH

; 6623 : 		ground_colour.alpha = 255;

  0004e	c6 85 73 ff ff
	ff ff		 mov	 BYTE PTR _ground_colour$[ebp+3], 255 ; 000000ffH

; 6624 : 	}
; 6625 : 	else

  00055	eb 28		 jmp	 SHORT $LN8@draw_pitch
$LN7@draw_pitch:

; 6626 : 	{
; 6627 : 		sky_colour = MFD_COLOUR2;

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	c1 e0 00	 shl	 eax, 0
  0005f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00065	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], ecx

; 6628 : 		ground_colour = MFD_COLOUR5;

  0006b	b8 04 00 00 00	 mov	 eax, 4
  00070	c1 e0 02	 shl	 eax, 2
  00073	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00079	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], ecx
$LN8@draw_pitch:

; 6629 : 	}
; 6630 : 
; 6631 : 	if (draw_large_mfd)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00086	74 23		 je	 SHORT $LN9@draw_pitch

; 6632 : 	{
; 6633 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00088	6a 02		 push	 2
  0008a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6634 : 
; 6635 : 		y_adjust_above_line = -3.0;

  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00097	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 6636 : 		y_adjust_below_line = -3.0;

  0009c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a4	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0

; 6637 : 	}
; 6638 : 	else

  000a9	eb 21		 jmp	 SHORT $LN10@draw_pitch
$LN9@draw_pitch:

; 6639 : 	{
; 6640 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000ab	6a 00		 push	 0
  000ad	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6641 : 
; 6642 : 		y_adjust_above_line = -3.0;

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ba	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 6643 : 		y_adjust_below_line = -1.0;

  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000c7	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0
$LN10@draw_pitch:

; 6644 : 	}
; 6645 : 
; 6646 : 	x_centre = 0.0;

  000cc	0f 57 c0	 xorps	 xmm0, xmm0
  000cf	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 6647 : 
; 6648 : 	size = 0.59;

  000d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f170a3d
  000dc	f3 0f 11 45 cc	 movss	 DWORD PTR _size$[ebp], xmm0

; 6649 : 	pitch_bar_scale = 0.8;

  000e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  000e9	f3 0f 11 45 b8	 movss	 DWORD PTR _pitch_bar_scale$[ebp], xmm0

; 6650 : 
; 6651 : 	//
; 6652 : 	//
; 6653 : 
; 6654 : 	get_2d_float_screen_coordinates (PITCH_DATUM_X, PITCH_DATUM_Y, &u, &v);

  000ee	8d 45 ac	 lea	 eax, DWORD PTR _v$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d b0	 lea	 ecx, DWORD PTR _u$[ebp]
  000f5	51		 push	 ecx
  000f6	51		 push	 ecx
  000f7	0f 57 c0	 xorps	 xmm0, xmm0
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	51		 push	 ecx
  00100	0f 57 c0	 xorps	 xmm0, xmm0
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 6655 : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  0010d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00114	74 0f		 je	 SHORT $LN22@draw_pitch
  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0011b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011d	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv84[ebp], ecx
  00123	eb 24		 jmp	 SHORT $LN23@draw_pitch
$LN22@draw_pitch:
  00125	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0012b	83 c2 53	 add	 edx, 83			; 00000053H
  0012e	52		 push	 edx
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0013f	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN23@draw_pitch:
  00149	b9 01 00 00 00	 mov	 ecx, 1
  0014e	85 c9		 test	 ecx, ecx
  00150	74 0c		 je	 SHORT $LN24@draw_pitch
  00152	c7 85 f8 fe ff
	ff 71 00 00 00	 mov	 DWORD PTR tv92[ebp], 113 ; 00000071H
  0015c	eb 24		 jmp	 SHORT $LN25@draw_pitch
$LN24@draw_pitch:
  0015e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00164	83 c2 53	 add	 edx, 83			; 00000053H
  00167	52		 push	 edx
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00178	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$LN25@draw_pitch:
  00182	6a 71		 push	 113			; 00000071H
  00184	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0018a	51		 push	 ecx
  0018b	69 95 fc fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv84[ebp], 700
  00195	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv92[ebp]
  0019b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001a2	ff d1		 call	 ecx
  001a4	d9 5d b4	 fstp	 DWORD PTR _roll$[ebp]

; 6656 : 
; 6657 : 	//
; 6658 : 	// set 2D environment
; 6659 : 	//
; 6660 : 
; 6661 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * size, MFD_WINDOW_Y_MIN * size, MFD_WINDOW_X_MAX * size, MFD_WINDOW_Y_MAX * size);

  001a7	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001ac	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001c3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001da	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  001e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001f1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 6662 : 
; 6663 : 	vp_size = mfd_viewport_size * size * 0.5;

  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00216	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _size$[ebp]
  0021b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0021f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00227	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022b	f3 0f 11 45 c8	 movss	 DWORD PTR _vp_size$[ebp], xmm0

; 6664 : 	set_2d_viewport (mfd_env, u - (vp_size), v - vp_size, u + (vp_size) - 0.001, v + vp_size - 0.001);

  00230	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  00235	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  0023a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0023e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00246	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00255	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  0025a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00266	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026a	51		 push	 ecx
  0026b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00270	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  00275	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  0027a	51		 push	 ecx
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00285	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  0028a	51		 push	 ecx
  0028b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00290	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6665 : 
; 6666 : 	upper_edge = 0.5 * size;

  0029b	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002a0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ac	f3 0f 11 45 98	 movss	 DWORD PTR _upper_edge$[ebp], xmm0

; 6667 : 	left_edge = -(size * 0.5);

  002b1	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002be	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c9	f3 0f 11 45 a0	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 6668 : 	right_edge = (size * 0.5);

  002ce	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002df	f3 0f 11 45 9c	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 6669 : 	lower_edge = -0.5 * size;

  002e4	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f5	f3 0f 11 45 94	 movss	 DWORD PTR _lower_edge$[ebp], xmm0

; 6670 : 
; 6671 : //	set_2d_viewport (mfd_env, u + left_edge, v + upper_edge, u + right_edge, v + lower_edge);
; 6672 : 
; 6673 : 
; 6674 : 	//
; 6675 : 	// pitch
; 6676 : 	//
; 6677 : 
; 6678 : 	{
; 6679 : 		float
; 6680 : 			x_horizon_abs,
; 6681 : 			y_horizon_abs,
; 6682 : 			tan_pitch;
; 6683 : 
; 6684 : 		int inverted = (roll < -rad(90)) || (roll > rad(90));

  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00302	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _roll$[ebp]
  00306	77 1a		 ja	 SHORT $LN26@draw_pitch
  00308	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0030d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00314	77 0c		 ja	 SHORT $LN26@draw_pitch
  00316	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv182[ebp], 0
  00320	eb 0a		 jmp	 SHORT $LN27@draw_pitch
$LN26@draw_pitch:
  00322	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv182[ebp], 1
$LN27@draw_pitch:
  0032c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR tv182[ebp]
  00332	89 85 60 ff ff
	ff		 mov	 DWORD PTR _inverted$9[ebp], eax

; 6685 : 
; 6686 : 		pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  00338	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0033f	74 0f		 je	 SHORT $LN28@draw_pitch
  00341	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00346	8b 08		 mov	 ecx, DWORD PTR [eax]
  00348	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv189[ebp], ecx
  0034e	eb 24		 jmp	 SHORT $LN29@draw_pitch
$LN28@draw_pitch:
  00350	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00356	83 c2 72	 add	 edx, 114		; 00000072H
  00359	52		 push	 edx
  0035a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0036a	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv189[ebp], 0
$LN29@draw_pitch:
  00374	b9 01 00 00 00	 mov	 ecx, 1
  00379	85 c9		 test	 ecx, ecx
  0037b	74 0c		 je	 SHORT $LN30@draw_pitch
  0037d	c7 85 f8 fe ff
	ff 54 00 00 00	 mov	 DWORD PTR tv229[ebp], 84 ; 00000054H
  00387	eb 24		 jmp	 SHORT $LN31@draw_pitch
$LN30@draw_pitch:
  00389	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0038f	83 c2 72	 add	 edx, 114		; 00000072H
  00392	52		 push	 edx
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00398	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a3	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv229[ebp], 0
$LN31@draw_pitch:
  003ad	6a 54		 push	 84			; 00000054H
  003af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003b5	51		 push	 ecx
  003b6	69 95 fc fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv189[ebp], 700
  003c0	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv229[ebp]
  003c6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  003cd	ff d1		 call	 ecx
  003cf	d9 5d c4	 fstp	 DWORD PTR _pitch$[ebp]

; 6687 : 		tan_pitch = -tan(pitch);

  003d2	51		 push	 ecx
  003d3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  003e2	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv626[ebp]
  003e8	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv626[ebp]
  003f0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003f7	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tan_pitch$10[ebp], xmm0

; 6688 : 		mod_pitch = fmod (pitch, rad (10.0f));

  003ff	51		 push	 ecx
  00400	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0041d	d9 5d c0	 fstp	 DWORD PTR _mod_pitch$[ebp]

; 6689 : 		tan_mod_pitch = -tan (mod_pitch);

  00420	51		 push	 ecx
  00421	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _mod_pitch$[ebp]
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00430	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv638[ebp]
  00436	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv638[ebp]
  0043e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00445	f3 0f 11 45 bc	 movss	 DWORD PTR _tan_mod_pitch$[ebp], xmm0

; 6690 : 		int_pitch = (int) (pitch * (1.0 / rad (10.0)));

  0044a	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  0044f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4016eb167e7d81e3
  00457	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0045b	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 6691 : 
; 6692 : 		//
; 6693 : 		// get x and y scale factors
; 6694 : 		//
; 6695 : 
; 6696 : 		x_scale = -sin (roll) * 1.5 * pitch_bar_scale;

  0045e	51		 push	 ecx
  0045f	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00464	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00469	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0046e	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv644[ebp]
  00474	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv644[ebp]
  0047c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00483	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00487	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0048f	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  00494	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00498	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0049c	f3 0f 11 45 90	 movss	 DWORD PTR _x_scale$[ebp], xmm0

; 6697 : 		y_scale = cos (roll) * 1.5 * pitch_bar_scale;

  004a1	51		 push	 ecx
  004a2	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ac	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  004b1	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv651[ebp]
  004b7	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv651[ebp]
  004bf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  004c7	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  004cc	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004d4	f3 0f 11 45 8c	 movss	 DWORD PTR _y_scale$[ebp], xmm0

; 6698 : 
; 6699 : 		x_horizon = tan_mod_pitch * x_scale;

  004d9	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  004de	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  004e3	f3 0f 11 45 88	 movss	 DWORD PTR _x_horizon$[ebp], xmm0

; 6700 : 		y_horizon = tan_mod_pitch * y_scale;

  004e8	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  004ed	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  004f2	f3 0f 11 45 84	 movss	 DWORD PTR _y_horizon$[ebp], xmm0

; 6701 : 
; 6702 : 		x_10_deg_step = tan (rad (10.0)) * x_scale;

  004f7	83 ec 08	 sub	 esp, 8
  004fa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00502	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00507	e8 00 00 00 00	 call	 _tan
  0050c	83 c4 08	 add	 esp, 8
  0050f	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv659[ebp]
  00515	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv659[ebp]
  0051d	f3 0f 5a 4d 90	 cvtss2sd xmm1, DWORD PTR _x_scale$[ebp]
  00522	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00526	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0052a	f3 0f 11 45 80	 movss	 DWORD PTR _x_10_deg_step$[ebp], xmm0

; 6703 : 		y_10_deg_step = tan (rad (10.0)) * y_scale;

  0052f	83 ec 08	 sub	 esp, 8
  00532	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  0053a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0053f	e8 00 00 00 00	 call	 _tan
  00544	83 c4 08	 add	 esp, 8
  00547	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv665[ebp]
  0054d	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv665[ebp]
  00555	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _y_scale$[ebp]
  0055a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0055e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00562	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y_10_deg_step$[ebp], xmm0

; 6704 : 
; 6705 : 		x_horizon_abs = tan_pitch * x_scale;

  0056a	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$10[ebp]
  00572	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  00577	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _x_horizon_abs$12[ebp], xmm0

; 6706 : 		y_horizon_abs = tan_pitch * y_scale;

  0057f	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$10[ebp]
  00587	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  0058c	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _y_horizon_abs$11[ebp], xmm0

; 6707 : 
; 6708 : 		// draw horizon
; 6709 : 		set_2d_pixel(x_horizon_abs, y_horizon_abs, MFD_COLOUR1);

  00594	b8 04 00 00 00	 mov	 eax, 4
  00599	6b c8 00	 imul	 ecx, eax, 0
  0059c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005a2	52		 push	 edx
  005a3	51		 push	 ecx
  005a4	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  005ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b1	51		 push	 ecx
  005b2	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  005ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bf	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel

; 6710 : 		if (roll != -rad(90) && roll != rad(90))

  005c4	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  005c9	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@bfc90fdb
  005d0	9f		 lahf
  005d1	f6 c4 44	 test	 ah, 68			; 00000044H
  005d4	0f 8b 58 03 00
	00		 jnp	 $LN11@draw_pitch
  005da	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  005df	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  005e6	9f		 lahf
  005e7	f6 c4 44	 test	 ah, 68			; 00000044H
  005ea	0f 8b 42 03 00
	00		 jnp	 $LN11@draw_pitch

; 6711 : 		{
; 6712 : 			float incline = tan(roll);

  005f0	51		 push	 ecx
  005f1	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  005f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fb	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00600	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR _incline$8[ebp]

; 6713 : 			float left_y, right_y;
; 6714 : 			float start_x = -1.0, end_x = 1.0;

  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0060e	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _start_x$5[ebp], xmm0
  00616	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0061e	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _end_x$4[ebp], xmm0

; 6715 : 
; 6716 : 			left_y = (x_horizon_abs - left_edge) * -incline;

  00626	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  0062e	f3 0f 5c 45 a0	 subss	 xmm0, DWORD PTR _left_edge$[ebp]
  00633	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _incline$8[ebp]
  0063b	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00642	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00646	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _left_y$7[ebp], xmm0

; 6717 : 			right_y = (right_edge - x_horizon_abs) * incline;

  0064e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  00653	f3 0f 5c 85 6c
	ff ff ff	 subss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  0065b	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _incline$8[ebp]
  00663	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _right_y$6[ebp], xmm0

; 6718 : 
; 6719 : 			if (incline < 0.0)

  0066b	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _incline$8[ebp]
  00673	0f 57 c9	 xorps	 xmm1, xmm1
  00676	66 0f 2f c8	 comisd	 xmm1, xmm0
  0067a	76 50		 jbe	 SHORT $LN13@draw_pitch

; 6720 : 			{
; 6721 : 				// find where horizon intersects top and bottom
; 6722 : 				start_x = x_horizon_abs + ((1 - y_horizon_abs) / incline);

  0067c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00684	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  0068c	f3 0f 5e 85 5c
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$8[ebp]
  00694	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  0069c	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _start_x$5[ebp], xmm0

; 6723 : 				end_x = x_horizon_abs + ((-2 - y_horizon_abs) / incline);

  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  006ac	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  006b4	f3 0f 5e 85 5c
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$8[ebp]
  006bc	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  006c4	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _end_x$4[ebp], xmm0
$LN13@draw_pitch:

; 6724 : 			}
; 6725 : 
; 6726 : 			draw_2d_line(left_edge, left_y, right_edge, right_y, sys_col_red);

  006cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  006d1	50		 push	 eax
  006d2	51		 push	 ecx
  006d3	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  006db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e0	51		 push	 ecx
  006e1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  006e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006eb	51		 push	 ecx
  006ec	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  006f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f9	51		 push	 ecx
  006fa	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _left_edge$[ebp]
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6727 : 
; 6728 : 			left_y = y_horizon_abs + (1.0 + x_horizon_abs) * -incline;

  00709	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  00711	f3 0f 5a 8d 6c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$12[ebp]
  00719	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00721	f3 0f 10 95 5c
	ff ff ff	 movss	 xmm2, DWORD PTR _incline$8[ebp]
  00729	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00730	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00734	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00738	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0073c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00740	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _left_y$7[ebp], xmm0

; 6729 : 			right_y = y_horizon_abs + (1.0 - x_horizon_abs) * incline;

  00748	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  00750	f3 0f 5a 8d 6c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$12[ebp]
  00758	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00760	f2 0f 5c d1	 subsd	 xmm2, xmm1
  00764	f3 0f 5a 8d 5c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _incline$8[ebp]
  0076c	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00770	f2 0f 58 c2	 addsd	 xmm0, xmm2
  00774	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00778	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _right_y$6[ebp], xmm0

; 6730 : 
; 6731 : 			if (inverted)

  00780	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _inverted$9[ebp], 0
  00787	74 24		 je	 SHORT $LN14@draw_pitch

; 6732 : 			{
; 6733 : 				rgb_colour tmp = sky_colour;

  00789	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  0078f	89 85 48 ff ff
	ff		 mov	 DWORD PTR _tmp$3[ebp], eax

; 6734 : 				sky_colour = ground_colour;

  00795	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  0079b	89 85 74 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], eax

; 6735 : 				ground_colour = tmp;

  007a1	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _tmp$3[ebp]
  007a7	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], eax
$LN14@draw_pitch:

; 6736 : 			}
; 6737 : 
; 6738 : 			draw_2d_filled_triangle(-1.0, left_y, -1.0, 1.0, 1.0, right_y, sky_colour);

  007ad	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  007b3	50		 push	 eax
  007b4	51		 push	 ecx
  007b5	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  007bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c2	51		 push	 ecx
  007c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	51		 push	 ecx
  007d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007de	51		 push	 ecx
  007df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	51		 push	 ecx
  007ed	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	51		 push	 ecx
  007fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6739 : 			draw_2d_filled_triangle(start_x, 1.0, 1.0, 1.0, 1.0, right_y, sky_colour);

  0080d	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  00813	50		 push	 eax
  00814	51		 push	 ecx
  00815	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  0081d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00822	51		 push	 ecx
  00823	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0082b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00830	51		 push	 ecx
  00831	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	51		 push	 ecx
  0083f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00847	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084c	51		 push	 ecx
  0084d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00855	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085a	51		 push	 ecx
  0085b	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _start_x$5[ebp]
  00863	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00868	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6740 : 
; 6741 : 			draw_2d_filled_triangle(-1.0, left_y, end_x, -2.0, -1.0, -2.0, ground_colour);

  0086d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  00873	50		 push	 eax
  00874	51		 push	 ecx
  00875	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0087d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00882	51		 push	 ecx
  00883	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0088b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00890	51		 push	 ecx
  00891	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00899	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089e	51		 push	 ecx
  0089f	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _end_x$4[ebp]
  008a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ac	51		 push	 ecx
  008ad	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6742 : 			draw_2d_filled_triangle(-1.0, left_y, 1.0, right_y, 1.0, -2.0, ground_colour);

  008cd	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  008d3	50		 push	 eax
  008d4	51		 push	 ecx
  008d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e2	51		 push	 ecx
  008e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f0	51		 push	 ecx
  008f1	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  008f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fe	51		 push	 ecx
  008ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00907	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090c	51		 push	 ecx
  0090d	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	51		 push	 ecx
  0091b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00923	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00928	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6743 : 		}
; 6744 : 		else  // 90 degree bank

  0092d	e9 cc 01 00 00	 jmp	 $LN12@draw_pitch
$LN11@draw_pitch:

; 6745 : 		{
; 6746 : 			rgb_colour
; 6747 : 				*left_colour,
; 6748 : 				*right_colour;
; 6749 : 
; 6750 : 			if (roll == rad(90))

  00932	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00937	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  0093e	9f		 lahf
  0093f	f6 c4 44	 test	 ah, 68			; 00000044H
  00942	7a 1a		 jp	 SHORT $LN15@draw_pitch

; 6751 : 			{
; 6752 : 				left_colour = &ground_colour;

  00944	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  0094a	89 85 44 ff ff
	ff		 mov	 DWORD PTR _left_colour$2[ebp], eax

; 6753 : 				right_colour = &sky_colour;

  00950	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  00956	89 85 40 ff ff
	ff		 mov	 DWORD PTR _right_colour$1[ebp], eax

; 6754 : 			}
; 6755 : 			else

  0095c	eb 18		 jmp	 SHORT $LN16@draw_pitch
$LN15@draw_pitch:

; 6756 : 			{
; 6757 : 				left_colour = &sky_colour;

  0095e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  00964	89 85 44 ff ff
	ff		 mov	 DWORD PTR _left_colour$2[ebp], eax

; 6758 : 				right_colour = &ground_colour;

  0096a	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  00970	89 85 40 ff ff
	ff		 mov	 DWORD PTR _right_colour$1[ebp], eax
$LN16@draw_pitch:

; 6759 : 			}
; 6760 : 
; 6761 : 			draw_2d_filled_triangle(x_horizon_abs, 1.0, 1.0, 1.0, 1.0, -1.0, *right_colour);

  00976	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$1[ebp]
  0097c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0097e	51		 push	 ecx
  0097f	51		 push	 ecx
  00980	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00988	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098d	51		 push	 ecx
  0098e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00996	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099b	51		 push	 ecx
  0099c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a9	51		 push	 ecx
  009aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b7	51		 push	 ecx
  009b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c5	51		 push	 ecx
  009c6	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  009ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d3	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6762 : 			draw_2d_filled_triangle(1.0, -1.0, x_horizon_abs, -1.0, x_horizon_abs, 1.0, *right_colour);

  009d8	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$1[ebp]
  009de	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e0	51		 push	 ecx
  009e1	51		 push	 ecx
  009e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ef	51		 push	 ecx
  009f0	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  009f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fd	51		 push	 ecx
  009fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0b	51		 push	 ecx
  00a0c	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a19	51		 push	 ecx
  00a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a27	51		 push	 ecx
  00a28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a35	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6763 : 
; 6764 : 			draw_2d_filled_triangle(-1.0, 1.0, x_horizon_abs, 1.0, x_horizon_abs, -1.0, *left_colour);

  00a3a	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$2[ebp]
  00a40	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a42	51		 push	 ecx
  00a43	51		 push	 ecx
  00a44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a51	51		 push	 ecx
  00a52	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00a5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5f	51		 push	 ecx
  00a60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6d	51		 push	 ecx
  00a6e	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00a76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7b	51		 push	 ecx
  00a7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a89	51		 push	 ecx
  00a8a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a97	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6765 : 			draw_2d_filled_triangle(x_horizon_abs, -1.0, -1.0, -1.0, -1.0, 1.0, *left_colour);

  00a9c	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$2[ebp]
  00aa2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00aa4	51		 push	 ecx
  00aa5	51		 push	 ecx
  00aa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00aae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab3	51		 push	 ecx
  00ab4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00abc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac1	51		 push	 ecx
  00ac2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acf	51		 push	 ecx
  00ad0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ad8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00add	51		 push	 ecx
  00ade	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ae6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aeb	51		 push	 ecx
  00aec	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN12@draw_pitch:

; 6766 : 		}
; 6767 : 
; 6768 : 		////////////////////////////////////////
; 6769 : 		//
; 6770 : 		// draw pitch ladder
; 6771 : 		//
; 6772 : 		////////////////////////////////////////
; 6773 : 
; 6774 : 		step_direction = -1;

  00afe	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _step_direction$[ebp], -1

; 6775 : 
; 6776 : 		int_pitch = limit_pitch (int_pitch + 3, &step_direction);

  00b05	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00b08	50		 push	 eax
  00b09	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00b0c	83 c1 03	 add	 ecx, 3
  00b0f	51		 push	 ecx
  00b10	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00b15	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 6777 : 
; 6778 : 		x = x_horizon + x_10_deg_step * 3.0;

  00b18	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _x_horizon$[ebp]
  00b1d	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _x_10_deg_step$[ebp]
  00b22	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b2a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b2e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b32	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 6779 : 		y = y_horizon + y_10_deg_step * 3.0;

  00b37	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _y_horizon$[ebp]
  00b3c	f3 0f 5a 8d 7c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _y_10_deg_step$[ebp]
  00b44	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b4c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b50	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b54	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 6780 : 
; 6781 : 		set_2d_instance_rotation (mfd_env, roll);

  00b59	51		 push	 ecx
  00b5a	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00b5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b69	50		 push	 eax
  00b6a	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6782 : 
; 6783 : 		for (loop = 0; loop < 7; loop++)

  00b6f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00b76	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  00b78	8b 45 e0	 mov	 eax, DWORD PTR _loop$[ebp]
  00b7b	83 c0 01	 add	 eax, 1
  00b7e	89 45 e0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  00b81	83 7d e0 07	 cmp	 DWORD PTR _loop$[ebp], 7
  00b85	0f 8d bd 03 00
	00		 jge	 $LN3@draw_pitch

; 6784 : 		{
; 6785 : 			set_2d_instance_position (mfd_env, x, y);

  00b8b	51		 push	 ecx
  00b8c	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00b91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b96	51		 push	 ecx
  00b97	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00b9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ba6	50		 push	 eax
  00ba7	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 6786 : 
; 6787 : 			switch (int_pitch)

  00bac	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00baf	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv398[ebp], eax
  00bb5	83 bd fc fe ff
	ff f7		 cmp	 DWORD PTR tv398[ebp], -9 ; fffffff7H
  00bbc	0f 84 c1 01 00
	00		 je	 $LN20@draw_pitch
  00bc2	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR tv398[ebp], 0
  00bc9	74 0f		 je	 SHORT $LN17@draw_pitch
  00bcb	83 bd fc fe ff
	ff 09		 cmp	 DWORD PTR tv398[ebp], 9
  00bd2	0f 84 22 01 00
	00		 je	 $LN19@draw_pitch
  00bd8	eb 05		 jmp	 SHORT $LN18@draw_pitch
$LN17@draw_pitch:

; 6788 : 			{
; 6789 : 				////////////////////////////////////////
; 6790 : 				case 0:
; 6791 : 				////////////////////////////////////////
; 6792 : 				{
; 6793 : 					break;

  00bda	e9 30 03 00 00	 jmp	 $LN5@draw_pitch
$LN18@draw_pitch:

; 6794 : 				}
; 6795 : 				////////////////////////////////////////
; 6796 : 				default:
; 6797 : 				////////////////////////////////////////
; 6798 : 				{
; 6799 : 					draw_2d_line (-PITCH_BAR_X2, PITCH_BAR_Y2, PITCH_BAR_X2, -PITCH_BAR_Y2, MFD_COLOUR_LIGHT_BLUE);

  00bdf	b8 04 00 00 00	 mov	 eax, 4
  00be4	c1 e0 04	 shl	 eax, 4
  00be7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00bed	51		 push	 ecx
  00bee	51		 push	 ecx
  00bef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  00bf7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfc	51		 push	 ecx
  00bfd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0ccccd
  00c05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0a	51		 push	 ecx
  00c0b	0f 57 c0	 xorps	 xmm0, xmm0
  00c0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c13	51		 push	 ecx
  00c14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0ccccd
  00c1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c21	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6800 : 
; 6801 : 					sprintf (s, "%d0", abs(int_pitch));

  00c26	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00c29	50		 push	 eax
  00c2a	e8 00 00 00 00	 call	 _abs
  00c2f	83 c4 04	 add	 esp, 4
  00c32	50		 push	 eax
  00c33	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  00c38	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00c3b	51		 push	 ecx
  00c3c	e8 00 00 00 00	 call	 _sprintf
  00c41	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6802 : 					x_adjust = get_mono_font_string_width (s) * -0.5;

  00c44	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00c47	50		 push	 eax
  00c48	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c4d	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv855[ebp]
  00c53	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv855[ebp]
  00c5b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c63	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c67	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6803 : 
; 6804 : 					set_2d_mono_font_position (+PITCH_BAR_X4, +PITCH_BAR_Y4);

  00c6f	51		 push	 ecx
  00c70	0f 57 c0	 xorps	 xmm0, xmm0
  00c73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c78	51		 push	 ecx
  00c79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e59999a
  00c81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c86	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6805 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00c8b	51		 push	 ecx
  00c8c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00c91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c96	51		 push	 ecx
  00c97	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6806 : 					print_mono_font_string (s);

  00ca9	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00cac	50		 push	 eax
  00cad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6807 : 
; 6808 : 					set_2d_mono_font_position (-PITCH_BAR_X4, +PITCH_BAR_Y4);

  00cb2	51		 push	 ecx
  00cb3	0f 57 c0	 xorps	 xmm0, xmm0
  00cb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbb	51		 push	 ecx
  00cbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be59999a
  00cc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6809 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00cce	51		 push	 ecx
  00ccf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd9	51		 push	 ecx
  00cda	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ce2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6810 : 					print_mono_font_string (s);

  00cec	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00cef	50		 push	 eax
  00cf0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6811 : 
; 6812 : 					break;

  00cf5	e9 15 02 00 00	 jmp	 $LN5@draw_pitch
$LN19@draw_pitch:

; 6813 : 				}
; 6814 : 				////////////////////////////////////////
; 6815 : 				case 9:
; 6816 : 				////////////////////////////////////////
; 6817 : 				{
; 6818 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00cfa	b8 04 00 00 00	 mov	 eax, 4
  00cff	c1 e0 04	 shl	 eax, 4
  00d02	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d08	51		 push	 ecx
  00d09	51		 push	 ecx
  00d0a	0f 57 c0	 xorps	 xmm0, xmm0
  00d0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d12	51		 push	 ecx
  00d13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00d1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d20	51		 push	 ecx
  00d21	0f 57 c0	 xorps	 xmm0, xmm0
  00d24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d29	51		 push	 ecx
  00d2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d37	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6819 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00d3c	b8 04 00 00 00	 mov	 eax, 4
  00d41	c1 e0 04	 shl	 eax, 4
  00d44	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d4a	51		 push	 ecx
  00d4b	51		 push	 ecx
  00d4c	0f 57 c0	 xorps	 xmm0, xmm0
  00d4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d54	51		 push	 ecx
  00d55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be933333
  00d5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d62	51		 push	 ecx
  00d63	0f 57 c0	 xorps	 xmm0, xmm0
  00d66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6b	51		 push	 ecx
  00d6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00d74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d79	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6820 : 
; 6821 : 					break;

  00d7e	e9 8c 01 00 00	 jmp	 $LN5@draw_pitch
$LN20@draw_pitch:

; 6822 : 				}
; 6823 : 				////////////////////////////////////////
; 6824 : 				case -9:
; 6825 : 				////////////////////////////////////////
; 6826 : 				{
; 6827 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_LIGHT_BLUE);

  00d83	b8 04 00 00 00	 mov	 eax, 4
  00d88	c1 e0 04	 shl	 eax, 4
  00d8b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d91	51		 push	 ecx
  00d92	51		 push	 ecx
  00d93	0f 57 c0	 xorps	 xmm0, xmm0
  00d96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9b	51		 push	 ecx
  00d9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0ccccd
  00da4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da9	51		 push	 ecx
  00daa	0f 57 c0	 xorps	 xmm0, xmm0
  00dad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db2	51		 push	 ecx
  00db3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00dbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6828 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_LIGHT_BLUE);

  00dc5	b8 04 00 00 00	 mov	 eax, 4
  00dca	c1 e0 04	 shl	 eax, 4
  00dcd	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00dd3	51		 push	 ecx
  00dd4	51		 push	 ecx
  00dd5	0f 57 c0	 xorps	 xmm0, xmm0
  00dd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ddd	51		 push	 ecx
  00dde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0ccccd
  00de6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00deb	51		 push	 ecx
  00dec	0f 57 c0	 xorps	 xmm0, xmm0
  00def	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df4	51		 push	 ecx
  00df5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00dfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e02	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6829 : 
; 6830 : 					draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_LIGHT_BLUE);

  00e07	b8 04 00 00 00	 mov	 eax, 4
  00e0c	c1 e0 04	 shl	 eax, 4
  00e0f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00e15	51		 push	 ecx
  00e16	51		 push	 ecx
  00e17	0f 57 c0	 xorps	 xmm0, xmm0
  00e1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1f	51		 push	 ecx
  00e20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e59999a
  00e28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2d	51		 push	 ecx
  00e2e	0f 57 c0	 xorps	 xmm0, xmm0
  00e31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e36	51		 push	 ecx
  00e37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  00e3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e44	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6831 : 					draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_LIGHT_BLUE);

  00e49	b8 04 00 00 00	 mov	 eax, 4
  00e4e	c1 e0 04	 shl	 eax, 4
  00e51	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00e57	51		 push	 ecx
  00e58	51		 push	 ecx
  00e59	0f 57 c0	 xorps	 xmm0, xmm0
  00e5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e61	51		 push	 ecx
  00e62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be59999a
  00e6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e6f	51		 push	 ecx
  00e70	0f 57 c0	 xorps	 xmm0, xmm0
  00e73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e78	51		 push	 ecx
  00e79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  00e81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e86	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6832 : 
; 6833 : 					draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00e8b	b8 04 00 00 00	 mov	 eax, 4
  00e90	c1 e0 04	 shl	 eax, 4
  00e93	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00e99	51		 push	 ecx
  00e9a	51		 push	 ecx
  00e9b	0f 57 c0	 xorps	 xmm0, xmm0
  00e9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea3	51		 push	 ecx
  00ea4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00eac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb1	51		 push	 ecx
  00eb2	0f 57 c0	 xorps	 xmm0, xmm0
  00eb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eba	51		 push	 ecx
  00ebb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00ec3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6834 : 					draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00ecd	b8 04 00 00 00	 mov	 eax, 4
  00ed2	c1 e0 04	 shl	 eax, 4
  00ed5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00edb	51		 push	 ecx
  00edc	51		 push	 ecx
  00edd	0f 57 c0	 xorps	 xmm0, xmm0
  00ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee5	51		 push	 ecx
  00ee6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be933333
  00eee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef3	51		 push	 ecx
  00ef4	0f 57 c0	 xorps	 xmm0, xmm0
  00ef7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00efc	51		 push	 ecx
  00efd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00f05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN5@draw_pitch:

; 6835 : 
; 6836 : 					break;
; 6837 : 				}
; 6838 : 			}
; 6839 : 
; 6840 : 			int_pitch = limit_pitch (int_pitch + step_direction, &step_direction);

  00f0f	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00f12	50		 push	 eax
  00f13	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00f16	03 4d e4	 add	 ecx, DWORD PTR _step_direction$[ebp]
  00f19	51		 push	 ecx
  00f1a	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00f1f	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 6841 : 
; 6842 : 			x -= x_10_deg_step;

  00f22	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00f27	f3 0f 5c 45 80	 subss	 xmm0, DWORD PTR _x_10_deg_step$[ebp]
  00f2c	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 6843 : 			y -= y_10_deg_step;

  00f31	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00f36	f3 0f 5c 85 7c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_10_deg_step$[ebp]
  00f3e	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 6844 : 		}

  00f43	e9 30 fc ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 6845 : 	}
; 6846 : 
; 6847 : 	//
; 6848 : 	// restore 2D environment
; 6849 : 	//
; 6850 : 
; 6851 : 	reset_2d_instance (mfd_env);

  00f48	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00f4d	50		 push	 eax
  00f4e	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 6852 : 
; 6853 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00f53	51		 push	 ecx
  00f54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00f5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f61	51		 push	 ecx
  00f62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00f6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f6f	51		 push	 ecx
  00f70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7d	51		 push	 ecx
  00f7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f8b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00f90	50		 push	 eax
  00f91	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 6854 : 
; 6855 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00f96	51		 push	 ecx
  00f97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00f9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa4	51		 push	 ecx
  00fa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	51		 push	 ecx
  00fb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00fbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc0	51		 push	 ecx
  00fc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00fc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00fd3	50		 push	 eax
  00fd4	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6856 : 
; 6857 : 	draw_2d_mono_sprite (main_horizon_mask, x_centre, y_centre, MFD_BACKGROUND_COLOUR);

  00fd9	b8 04 00 00 00	 mov	 eax, 4
  00fde	6b c8 09	 imul	 ecx, eax, 9
  00fe1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fe7	52		 push	 edx
  00fe8	51		 push	 ecx
  00fe9	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00fee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff3	51		 push	 ecx
  00ff4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00ff9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_horizon_mask@@3PADA
  01003	50		 push	 eax
  01004	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6858 : 
; 6859 : 	//
; 6860 : 	// restore 2D environment
; 6861 : 	//
; 6862 : 
; 6863 : 	reset_2d_instance (mfd_env);

  01009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0100e	50		 push	 eax
  0100f	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 6864 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01014	51		 push	 ecx
  01015	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0101d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01022	51		 push	 ecx
  01023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0102b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01030	51		 push	 ecx
  01031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103e	51		 push	 ecx
  0103f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01051	50		 push	 eax
  01052	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 6865 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01057	51		 push	 ecx
  01058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01065	51		 push	 ecx
  01066	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0106e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01073	51		 push	 ecx
  01074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0107c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01081	51		 push	 ecx
  01082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0108a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01094	50		 push	 eax
  01095	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6866 : }

  0109a	5f		 pop	 edi
  0109b	5e		 pop	 esi
  0109c	5b		 pop	 ebx
  0109d	8b e5		 mov	 esp, ebp
  0109f	5d		 pop	 ebp
  010a0	c3		 ret	 0
?draw_pitch_ladder@@YGXXZ ENDP				; draw_pitch_ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?limit_pitch@@YGHHPAH@Z
_TEXT	SEGMENT
_pitch$ = 8						; size = 4
_step_direction$ = 12					; size = 4
?limit_pitch@@YGHHPAH@Z PROC				; limit_pitch, COMDAT

; 6547 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6548 : 	if (pitch > 9)

  00009	83 7d 08 09	 cmp	 DWORD PTR _pitch$[ebp], 9
  0000d	7e 1f		 jle	 SHORT $LN2@limit_pitc

; 6549 : 	{
; 6550 : 		pitch -= 18;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00012	83 e8 12	 sub	 eax, 18			; 00000012H
  00015	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 6551 : 
; 6552 : 		pitch = -pitch;

  00018	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  0001b	f7 d8		 neg	 eax
  0001d	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 6553 : 
; 6554 : 		*step_direction = -(*step_direction);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	f7 d9		 neg	 ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	eb 23		 jmp	 SHORT $LN3@limit_pitc
$LN2@limit_pitc:

; 6555 : 	}
; 6556 : 	else if (pitch < -9)

  0002e	83 7d 08 f7	 cmp	 DWORD PTR _pitch$[ebp], -9 ; fffffff7H
  00032	7d 1d		 jge	 SHORT $LN3@limit_pitc

; 6557 : 	{
; 6558 : 		pitch += 18;

  00034	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00037	83 c0 12	 add	 eax, 18			; 00000012H
  0003a	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 6559 : 
; 6560 : 		pitch = -pitch;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00040	f7 d8		 neg	 eax
  00042	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 6561 : 
; 6562 : 		*step_direction = -(*step_direction);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	f7 d9		 neg	 ecx
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@limit_pitc:

; 6563 : 	}
; 6564 : 
; 6565 : 	return (pitch);

  00051	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]

; 6566 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?limit_pitch@@YGHHPAH@Z ENDP				; limit_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv454 = -272						; size = 8
tv423 = -272						; size = 8
tv399 = -272						; size = 8
tv364 = -272						; size = 8
tv336 = -272						; size = 8
tv313 = -272						; size = 8
tv290 = -272						; size = 8
tv267 = -272						; size = 8
tv244 = -272						; size = 8
tv221 = -272						; size = 8
tv198 = -272						; size = 8
tv175 = -272						; size = 8
tv152 = -272						; size = 8
tv129 = -272						; size = 8
tv808 = -264						; size = 8
tv455 = -264						; size = 8
tv424 = -264						; size = 8
tv400 = -264						; size = 8
tv365 = -264						; size = 8
tv337 = -264						; size = 8
tv314 = -264						; size = 8
tv291 = -264						; size = 8
tv268 = -264						; size = 8
tv245 = -264						; size = 8
tv222 = -264						; size = 8
tv199 = -264						; size = 8
tv176 = -264						; size = 8
tv153 = -264						; size = 8
tv130 = -264						; size = 8
tv380 = -260						; size = 4
_buffer2$1 = -192					; size = 64
_digital_readout$2 = -128				; size = 4
_x_adjust$3 = -124					; size = 4
_i$4 = -120						; size = 4
_digital_readout$5 = -116				; size = 4
_digital_readout$6 = -112				; size = 4
_i$7 = -108						; size = 4
_torque$8 = -104					; size = 4
_rpm$9 = -100						; size = 4
_temp$10 = -96						; size = 4
_torque$11 = -92					; size = 4
_rpm$12 = -88						; size = 4
_rpm$13 = -84						; size = 4
_s$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 6334 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6335 : 	char
; 6336 : 		s[80];
; 6337 : 
; 6338 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6339 : 
; 6340 : 	draw_2d_box(-0.9, 0.9, -0.4, -0.9, FALSE, FALSE, MFD_COLOUR1);

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	6b c8 00	 imul	 ecx, eax, 0
  00028	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0002e	52		 push	 edx
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	51		 push	 ecx
  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 6341 : 	draw_2d_box( 0.9, 0.9,  0.4, -0.9, FALSE, FALSE, MFD_COLOUR1);

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	6b c8 00	 imul	 ecx, eax, 0
  00078	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0007e	52		 push	 edx
  0007f	6a 00		 push	 0
  00081	6a 00		 push	 0
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	51		 push	 ecx
  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 6342 : 
; 6343 : 	set_mono_font_type(MONO_FONT_TYPE_6X10);

  000c0	6a 04		 push	 4
  000c2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6344 : 
; 6345 : 	// engine NG RPM
; 6346 : 	{
; 6347 : 		float rpm;
; 6348 : 
; 6349 : 		rpm = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000cc	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  000d4	0f 57 c9	 xorps	 xmm1, xmm1
  000d7	66 0f 2f c8	 comisd	 xmm1, xmm0
  000db	76 0d		 jbe	 SHORT $LN19@draw_engin
  000dd	0f 57 c0	 xorps	 xmm0, xmm0
  000e0	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv130[ebp], xmm0
  000e8	eb 50		 jmp	 SHORT $LN20@draw_engin
$LN19@draw_engin:
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000f0	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  000f8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00100	76 12		 jbe	 SHORT $LN17@draw_engin
  00102	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  0010a	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv129[ebp], xmm0
  00112	eb 16		 jmp	 SHORT $LN18@draw_engin
$LN17@draw_engin:
  00114	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0011a	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  00122	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv129[ebp], xmm0
$LN18@draw_engin:
  0012a	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv129[ebp]
  00132	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv130[ebp], xmm0
$LN20@draw_engin:
  0013a	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv130[ebp]
  00142	f3 0f 11 45 ac	 movss	 DWORD PTR _rpm$13[ebp], xmm0

; 6350 : 		draw_engine_dial("NG", -0.65, 0.65, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  00147	6a 01		 push	 1
  00149	6a 04		 push	 4
  0014b	68 c8 00 00 00	 push	 200			; 000000c8H
  00150	51		 push	 ecx
  00151	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	51		 push	 ecx
  0015f	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _rpm$13[ebp]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	51		 push	 ecx
  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	51		 push	 ecx
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00180	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00185	51		 push	 ecx
  00186	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00198	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6351 : 
; 6352 : 		rpm = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001a2	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  001aa	0f 57 c9	 xorps	 xmm1, xmm1
  001ad	66 0f 2f c8	 comisd	 xmm1, xmm0
  001b1	76 0d		 jbe	 SHORT $LN23@draw_engin
  001b3	0f 57 c0	 xorps	 xmm0, xmm0
  001b6	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv153[ebp], xmm0
  001be	eb 50		 jmp	 SHORT $LN24@draw_engin
$LN23@draw_engin:
  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001c6	f3 0f 5a 81 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7412]
  001ce	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  001d6	76 12		 jbe	 SHORT $LN21@draw_engin
  001d8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  001e0	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv152[ebp], xmm0
  001e8	eb 16		 jmp	 SHORT $LN22@draw_engin
$LN21@draw_engin:
  001ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001f0	f3 0f 5a 82 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7412]
  001f8	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv152[ebp], xmm0
$LN22@draw_engin:
  00200	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv152[ebp]
  00208	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv153[ebp], xmm0
$LN24@draw_engin:
  00210	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv153[ebp]
  00218	f3 0f 11 45 ac	 movss	 DWORD PTR _rpm$13[ebp], xmm0

; 6353 : 		draw_engine_dial("NG", 0.65, 0.65, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  0021d	6a 01		 push	 1
  0021f	6a 04		 push	 4
  00221	68 c8 00 00 00	 push	 200			; 000000c8H
  00226	51		 push	 ecx
  00227	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0022f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00234	51		 push	 ecx
  00235	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _rpm$13[ebp]
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024d	51		 push	 ecx
  0024e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025b	51		 push	 ecx
  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  0026e	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6354 : 	}
; 6355 : 
; 6356 : 	// engine NP RPM
; 6357 : 	{
; 6358 : 		float rpm;
; 6359 : 
; 6360 : 		rpm = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  00273	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00278	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  00280	0f 57 c9	 xorps	 xmm1, xmm1
  00283	66 0f 2f c8	 comisd	 xmm1, xmm0
  00287	76 0d		 jbe	 SHORT $LN27@draw_engin
  00289	0f 57 c0	 xorps	 xmm0, xmm0
  0028c	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
  00294	eb 50		 jmp	 SHORT $LN28@draw_engin
$LN27@draw_engin:
  00296	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0029c	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  002a4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  002ac	76 12		 jbe	 SHORT $LN25@draw_engin
  002ae	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  002b6	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv175[ebp], xmm0
  002be	eb 16		 jmp	 SHORT $LN26@draw_engin
$LN25@draw_engin:
  002c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c6	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  002ce	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv175[ebp], xmm0
$LN26@draw_engin:
  002d6	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv175[ebp]
  002de	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
$LN28@draw_engin:
  002e6	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv176[ebp]
  002ee	f3 0f 11 45 a8	 movss	 DWORD PTR _rpm$12[ebp], xmm0

; 6361 : 		draw_engine_dial("NP", -0.65, 0.22, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT | ARC_TOP_LEFT, ARC_TOP_RIGHT, 0);

  002f3	6a 00		 push	 0
  002f5	6a 01		 push	 1
  002f7	68 cc 00 00 00	 push	 204			; 000000ccH
  002fc	51		 push	 ecx
  002fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030a	51		 push	 ecx
  0030b	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _rpm$12[ebp]
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	51		 push	 ecx
  00316	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0031e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00323	51		 push	 ecx
  00324	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  0032c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00331	51		 push	 ecx
  00332	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0033a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033f	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00344	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6362 : 
; 6363 : 		rpm = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);

  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0034e	f3 0f 5a 80 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7388]
  00356	0f 57 c9	 xorps	 xmm1, xmm1
  00359	66 0f 2f c8	 comisd	 xmm1, xmm0
  0035d	76 0d		 jbe	 SHORT $LN31@draw_engin
  0035f	0f 57 c0	 xorps	 xmm0, xmm0
  00362	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv199[ebp], xmm0
  0036a	eb 50		 jmp	 SHORT $LN32@draw_engin
$LN31@draw_engin:
  0036c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00372	f3 0f 5a 81 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7388]
  0037a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00382	76 12		 jbe	 SHORT $LN29@draw_engin
  00384	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  0038c	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv198[ebp], xmm0
  00394	eb 16		 jmp	 SHORT $LN30@draw_engin
$LN29@draw_engin:
  00396	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0039c	f3 0f 5a 82 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7388]
  003a4	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv198[ebp], xmm0
$LN30@draw_engin:
  003ac	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv198[ebp]
  003b4	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv199[ebp], xmm0
$LN32@draw_engin:
  003bc	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv199[ebp]
  003c4	f3 0f 11 45 a8	 movss	 DWORD PTR _rpm$12[ebp], xmm0

; 6364 : 		draw_engine_dial("NP", 0.65, 0.22, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT | ARC_TOP_LEFT, ARC_TOP_RIGHT, 0);

  003c9	6a 00		 push	 0
  003cb	6a 01		 push	 1
  003cd	68 cc 00 00 00	 push	 204			; 000000ccH
  003d2	51		 push	 ecx
  003d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _rpm$12[ebp]
  003e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003eb	51		 push	 ecx
  003ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00415	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  0041a	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6365 : 	}
; 6366 : 
; 6367 : 	// engine torque
; 6368 : 	{
; 6369 : 		float torque;
; 6370 : 
; 6371 : 		torque = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  0041f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00424	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  0042c	0f 57 c9	 xorps	 xmm1, xmm1
  0042f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00433	76 0d		 jbe	 SHORT $LN35@draw_engin
  00435	0f 57 c0	 xorps	 xmm0, xmm0
  00438	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv222[ebp], xmm0
  00440	eb 50		 jmp	 SHORT $LN36@draw_engin
$LN35@draw_engin:
  00442	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00448	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  00450	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00458	76 12		 jbe	 SHORT $LN33@draw_engin
  0045a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00462	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv221[ebp], xmm0
  0046a	eb 16		 jmp	 SHORT $LN34@draw_engin
$LN33@draw_engin:
  0046c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00472	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  0047a	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv221[ebp], xmm0
$LN34@draw_engin:
  00482	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv221[ebp]
  0048a	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv222[ebp], xmm0
$LN36@draw_engin:
  00492	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv222[ebp]
  0049a	f3 0f 11 45 a4	 movss	 DWORD PTR _torque$11[ebp], xmm0

; 6372 : 		draw_engine_dial("TRQ", -0.65, -0.22, 0.2, torque, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  0049f	6a 01		 push	 1
  004a1	6a 04		 push	 4
  004a3	68 c8 00 00 00	 push	 200			; 000000c8H
  004a8	51		 push	 ecx
  004a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  004b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b6	51		 push	 ecx
  004b7	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _torque$11[ebp]
  004bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c1	51		 push	 ecx
  004c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  004ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cf	51		 push	 ecx
  004d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  004d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dd	51		 push	 ecx
  004de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_03FGEMCONN@TRQ@
  004f0	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6373 : 
; 6374 : 		torque = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  004f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004fa	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  00502	0f 57 c9	 xorps	 xmm1, xmm1
  00505	66 0f 2f c8	 comisd	 xmm1, xmm0
  00509	76 0d		 jbe	 SHORT $LN39@draw_engin
  0050b	0f 57 c0	 xorps	 xmm0, xmm0
  0050e	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv245[ebp], xmm0
  00516	eb 50		 jmp	 SHORT $LN40@draw_engin
$LN39@draw_engin:
  00518	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0051e	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  00526	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0052e	76 12		 jbe	 SHORT $LN37@draw_engin
  00530	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00538	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv244[ebp], xmm0
  00540	eb 16		 jmp	 SHORT $LN38@draw_engin
$LN37@draw_engin:
  00542	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00548	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  00550	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv244[ebp], xmm0
$LN38@draw_engin:
  00558	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv244[ebp]
  00560	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv245[ebp], xmm0
$LN40@draw_engin:
  00568	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv245[ebp]
  00570	f3 0f 11 45 a4	 movss	 DWORD PTR _torque$11[ebp], xmm0

; 6375 : 		draw_engine_dial("TRQ", 0.65, -0.22, 0.2, torque, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  00575	6a 01		 push	 1
  00577	6a 04		 push	 4
  00579	68 c8 00 00 00	 push	 200			; 000000c8H
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	51		 push	 ecx
  0058d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _torque$11[ebp]
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	51		 push	 ecx
  005a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  005ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b3	51		 push	 ecx
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  005bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c1	68 00 00 00 00	 push	 OFFSET ??_C@_03FGEMCONN@TRQ@
  005c6	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6376 : 	}
; 6377 : 
; 6378 : 	// engine temp
; 6379 : 	{
; 6380 : 		float temp;
; 6381 : 
; 6382 : 		temp = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 1000.0);

  005cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005d0	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  005d8	0f 57 c9	 xorps	 xmm1, xmm1
  005db	66 0f 2f c8	 comisd	 xmm1, xmm0
  005df	76 0d		 jbe	 SHORT $LN43@draw_engin
  005e1	0f 57 c0	 xorps	 xmm0, xmm0
  005e4	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv268[ebp], xmm0
  005ec	eb 50		 jmp	 SHORT $LN44@draw_engin
$LN43@draw_engin:
  005ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005f4	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  005fc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  00604	76 12		 jbe	 SHORT $LN41@draw_engin
  00606	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  0060e	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv267[ebp], xmm0
  00616	eb 16		 jmp	 SHORT $LN42@draw_engin
$LN41@draw_engin:
  00618	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0061e	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00626	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv267[ebp], xmm0
$LN42@draw_engin:
  0062e	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv267[ebp]
  00636	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv268[ebp], xmm0
$LN44@draw_engin:
  0063e	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv268[ebp]
  00646	f3 0f 11 45 a0	 movss	 DWORD PTR _temp$10[ebp], xmm0

; 6383 : 		draw_engine_dial("TGT", -0.65, -0.65, 0.2, temp, 800.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  0064b	6a 01		 push	 1
  0064d	6a 04		 push	 4
  0064f	68 c8 00 00 00	 push	 200			; 000000c8H
  00654	51		 push	 ecx
  00655	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44480000
  0065d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00662	51		 push	 ecx
  00663	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _temp$10[ebp]
  00668	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066d	51		 push	 ecx
  0066e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00676	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067b	51		 push	 ecx
  0067c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	51		 push	 ecx
  0068a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00697	68 00 00 00 00	 push	 OFFSET ??_C@_03DBNGLLAD@TGT@
  0069c	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6384 : 
; 6385 : 		temp = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 1000.0);

  006a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006a6	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  006ae	0f 57 c9	 xorps	 xmm1, xmm1
  006b1	66 0f 2f c8	 comisd	 xmm1, xmm0
  006b5	76 0d		 jbe	 SHORT $LN47@draw_engin
  006b7	0f 57 c0	 xorps	 xmm0, xmm0
  006ba	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
  006c2	eb 50		 jmp	 SHORT $LN48@draw_engin
$LN47@draw_engin:
  006c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006ca	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  006d2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  006da	76 12		 jbe	 SHORT $LN45@draw_engin
  006dc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  006e4	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
  006ec	eb 16		 jmp	 SHORT $LN46@draw_engin
$LN45@draw_engin:
  006ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006f4	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  006fc	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
$LN46@draw_engin:
  00704	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv290[ebp]
  0070c	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
$LN48@draw_engin:
  00714	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv291[ebp]
  0071c	f3 0f 11 45 a0	 movss	 DWORD PTR _temp$10[ebp], xmm0

; 6386 : 		draw_engine_dial("TGT", 0.65, -0.65, 0.2, temp, 800.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  00721	6a 01		 push	 1
  00723	6a 04		 push	 4
  00725	68 c8 00 00 00	 push	 200			; 000000c8H
  0072a	51		 push	 ecx
  0072b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44480000
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _temp$10[ebp]
  0073e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00743	51		 push	 ecx
  00744	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0074c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00751	51		 push	 ecx
  00752	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0075a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075f	51		 push	 ecx
  00760	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00768	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076d	68 00 00 00 00	 push	 OFFSET ??_C@_03DBNGLLAD@TGT@
  00772	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6387 : 	}
; 6388 : 
; 6389 : 	// rotor RPM
; 6390 : 	{
; 6391 : 		float rpm;
; 6392 : 
; 6393 : 		rpm = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 125.0);

  00777	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0077c	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  00784	0f 57 c9	 xorps	 xmm1, xmm1
  00787	66 0f 2f c8	 comisd	 xmm1, xmm0
  0078b	76 0d		 jbe	 SHORT $LN51@draw_engin
  0078d	0f 57 c0	 xorps	 xmm0, xmm0
  00790	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv314[ebp], xmm0
  00798	eb 50		 jmp	 SHORT $LN52@draw_engin
$LN51@draw_engin:
  0079a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007a0	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  007a8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  007b0	76 12		 jbe	 SHORT $LN49@draw_engin
  007b2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  007ba	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv313[ebp], xmm0
  007c2	eb 16		 jmp	 SHORT $LN50@draw_engin
$LN49@draw_engin:
  007c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007ca	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  007d2	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv313[ebp], xmm0
$LN50@draw_engin:
  007da	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv313[ebp]
  007e2	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv314[ebp], xmm0
$LN52@draw_engin:
  007ea	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv314[ebp]
  007f2	f3 0f 11 45 9c	 movss	 DWORD PTR _rpm$9[ebp], xmm0

; 6394 : 		draw_engine_dial("NR", 0.0, 0.55, 0.25, rpm, 100.0, ARC_TOP_LEFT, ARC_LEFT_UP | ARC_TOP_RIGHT, ARC_LEFT_DOWN | ARC_BOTTOM_LEFT);

  007f7	68 88 00 00 00	 push	 136			; 00000088H
  007fc	6a 41		 push	 65			; 00000041H
  007fe	6a 04		 push	 4
  00800	51		 push	 ecx
  00801	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00809	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080e	51		 push	 ecx
  0080f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _rpm$9[ebp]
  00814	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00819	51		 push	 ecx
  0081a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00827	51		 push	 ecx
  00828	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00830	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00835	51		 push	 ecx
  00836	0f 57 c0	 xorps	 xmm0, xmm0
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  00843	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6395 : 	}
; 6396 : 
; 6397 : 	// combined torque
; 6398 : 	{
; 6399 : 		float torque;
; 6400 : 
; 6401 : 		torque = bound (current_flight_dynamics->combined_engine_torque.value, 0.0, 120.0);

  00848	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0084d	f3 0f 5a 80 8c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9356]
  00855	0f 57 c9	 xorps	 xmm1, xmm1
  00858	66 0f 2f c8	 comisd	 xmm1, xmm0
  0085c	76 0d		 jbe	 SHORT $LN55@draw_engin
  0085e	0f 57 c0	 xorps	 xmm0, xmm0
  00861	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv337[ebp], xmm0
  00869	eb 50		 jmp	 SHORT $LN56@draw_engin
$LN55@draw_engin:
  0086b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00871	f3 0f 5a 81 8c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+9356]
  00879	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00881	76 12		 jbe	 SHORT $LN53@draw_engin
  00883	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  0088b	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv336[ebp], xmm0
  00893	eb 16		 jmp	 SHORT $LN54@draw_engin
$LN53@draw_engin:
  00895	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0089b	f3 0f 5a 82 8c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [edx+9356]
  008a3	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv336[ebp], xmm0
$LN54@draw_engin:
  008ab	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv336[ebp]
  008b3	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv337[ebp], xmm0
$LN56@draw_engin:
  008bb	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv337[ebp]
  008c3	f3 0f 11 45 98	 movss	 DWORD PTR _torque$8[ebp], xmm0

; 6402 : 		draw_engine_dial("TRQ", 0.0, 0.0, 0.25, torque, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  008c8	6a 01		 push	 1
  008ca	6a 04		 push	 4
  008cc	68 c8 00 00 00	 push	 200			; 000000c8H
  008d1	51		 push	 ecx
  008d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  008da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008df	51		 push	 ecx
  008e0	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _torque$8[ebp]
  008e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ea	51		 push	 ecx
  008eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  008f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f8	51		 push	 ecx
  008f9	0f 57 c0	 xorps	 xmm0, xmm0
  008fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00901	51		 push	 ecx
  00902	0f 57 c0	 xorps	 xmm0, xmm0
  00905	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090a	68 00 00 00 00	 push	 OFFSET ??_C@_03FGEMCONN@TRQ@
  0090f	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 6403 : 	}
; 6404 : 
; 6405 : 	set_mono_font_type(MONO_FONT_TYPE_5X9);

  00914	6a 02		 push	 2
  00916	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6406 : 
; 6407 : 	// fuel
; 6408 : 	{
; 6409 : 		int i;
; 6410 : 		float digital_readout;
; 6411 : 
; 6412 : 		set_2d_mono_font_position (-0.4, -0.4);

  0091b	51		 push	 ecx
  0091c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00924	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00929	51		 push	 ecx
  0092a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00937	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6413 : 		set_mono_font_rel_position (8.0, -8.0);

  0093c	51		 push	 ecx
  0093d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00945	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094a	51		 push	 ecx
  0094b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00953	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00958	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6414 : 
; 6415 : 		digital_readout = bound (current_flight_dynamics->fuel_weight.value, 0.0, 9999.0);

  0095d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00962	f3 0f 5a 80 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9380]
  0096a	0f 57 c9	 xorps	 xmm1, xmm1
  0096d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00971	76 0d		 jbe	 SHORT $LN59@draw_engin
  00973	0f 57 c0	 xorps	 xmm0, xmm0
  00976	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv365[ebp], xmm0
  0097e	eb 50		 jmp	 SHORT $LN60@draw_engin
$LN59@draw_engin:
  00980	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00986	f3 0f 5a 81 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+9380]
  0098e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  00996	76 12		 jbe	 SHORT $LN57@draw_engin
  00998	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  009a0	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv364[ebp], xmm0
  009a8	eb 16		 jmp	 SHORT $LN58@draw_engin
$LN57@draw_engin:
  009aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009b0	f3 0f 5a 82 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [edx+9380]
  009b8	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv364[ebp], xmm0
$LN58@draw_engin:
  009c0	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv364[ebp]
  009c8	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv365[ebp], xmm0
$LN60@draw_engin:
  009d0	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv365[ebp]
  009d8	f3 0f 11 45 90	 movss	 DWORD PTR _digital_readout$6[ebp], xmm0

; 6416 : 		convert_float_to_int (digital_readout, &i);

  009dd	8d 45 94	 lea	 eax, DWORD PTR _i$7[ebp]
  009e0	50		 push	 eax
  009e1	51		 push	 ecx
  009e2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _digital_readout$6[ebp]
  009e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ec	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6417 : 		sprintf (s, "FUEL      %4d", i);

  009f1	8b 45 94	 mov	 eax, DWORD PTR _i$7[ebp]
  009f4	50		 push	 eax
  009f5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@
  009fa	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  009fd	51		 push	 ecx
  009fe	e8 00 00 00 00	 call	 _sprintf
  00a03	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6418 : 
; 6419 : 		print_mono_font_string(s);

  00a06	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a09	50		 push	 eax
  00a0a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6420 : 	}
; 6421 : 
; 6422 : 	// oil pressure
; 6423 : 	{
; 6424 : 		set_2d_mono_font_position (-0.4, -0.5);

  00a0f	51		 push	 ecx
  00a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1d	51		 push	 ecx
  00a1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6425 : 		set_mono_font_rel_position (8.0, -8.0);

  00a30	51		 push	 ecx
  00a31	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00a39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3e	51		 push	 ecx
  00a3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00a47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6426 : 
; 6427 : 		if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  00a51	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a56	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00a5c	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00a62	74 0c		 je	 SHORT $LN61@draw_engin
  00a64	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv380[ebp], 1
  00a6e	eb 0a		 jmp	 SHORT $LN62@draw_engin
$LN61@draw_engin:
  00a70	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv380[ebp], 0
$LN62@draw_engin:
  00a7a	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR tv380[ebp], 0
  00a81	74 0c		 je	 SHORT $LN2@draw_engin

; 6428 : 			print_mono_font_string("OIL PRES. LOW");

  00a83	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@
  00a88	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6429 : 		else

  00a8d	eb 0a		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 6430 : 			print_mono_font_string("OIL PRES. NORM");

  00a8f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@
  00a94	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN3@draw_engin:

; 6431 : 	}
; 6432 : 
; 6433 : 	// APU
; 6434 : 	{
; 6435 : 		float digital_readout;
; 6436 : 
; 6437 : 		set_2d_mono_font_position (-0.4, -0.6);

  00a99	51		 push	 ecx
  00a9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00aa2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa7	51		 push	 ecx
  00aa8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00ab0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6438 : 		set_mono_font_rel_position (8.0, -8.0);

  00aba	51		 push	 ecx
  00abb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00ac3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac8	51		 push	 ecx
  00ac9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00ad1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6439 : 
; 6440 : 		digital_readout = bound (current_flight_dynamics->apu_rpm.value, 0.0, 100.0);

  00adb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ae0	f3 0f 5a 80 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7484]
  00ae8	0f 57 c9	 xorps	 xmm1, xmm1
  00aeb	66 0f 2f c8	 comisd	 xmm1, xmm0
  00aef	76 0d		 jbe	 SHORT $LN65@draw_engin
  00af1	0f 57 c0	 xorps	 xmm0, xmm0
  00af4	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
  00afc	eb 50		 jmp	 SHORT $LN66@draw_engin
$LN65@draw_engin:
  00afe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b04	f3 0f 5a 81 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7484]
  00b0c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  00b14	76 12		 jbe	 SHORT $LN63@draw_engin
  00b16	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  00b1e	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
  00b26	eb 16		 jmp	 SHORT $LN64@draw_engin
$LN63@draw_engin:
  00b28	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b2e	f3 0f 5a 82 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7484]
  00b36	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
$LN64@draw_engin:
  00b3e	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv399[ebp]
  00b46	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
$LN66@draw_engin:
  00b4e	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv400[ebp]
  00b56	f3 0f 11 45 8c	 movss	 DWORD PTR _digital_readout$5[ebp], xmm0

; 6441 : 		sprintf (s, "APU       %3.0f%%", digital_readout);

  00b5b	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _digital_readout$5[ebp]
  00b60	83 ec 08	 sub	 esp, 8
  00b63	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b68	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@
  00b6d	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b70	50		 push	 eax
  00b71	e8 00 00 00 00	 call	 _sprintf
  00b76	83 c4 10	 add	 esp, 16			; 00000010H

; 6442 : 
; 6443 : 		print_mono_font_string(s);

  00b79	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b7c	50		 push	 eax
  00b7d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6444 : 	}
; 6445 : 
; 6446 : 	// Throttle
; 6447 : 	{
; 6448 : 		int i;
; 6449 : 		float x_adjust;
; 6450 : 		float digital_readout;
; 6451 : 		char buffer2[64];
; 6452 : 
; 6453 : 		set_2d_mono_font_position (-0.4, -0.8);

  00b82	51		 push	 ecx
  00b83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00b8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b90	51		 push	 ecx
  00b91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00b99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b9e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6454 : 		set_mono_font_rel_position (28.0, -8.0);

  00ba3	51		 push	 ecx
  00ba4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00bac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb1	51		 push	 ecx
  00bb2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41e00000
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6455 : 
; 6456 : 		print_mono_font_string("THROTTLE");

  00bc4	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  00bc9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6457 : 
; 6458 : 		digital_readout = bound (current_flight_dynamics->left_engine_n1_rpm.max, 0.0, 110.0);

  00bce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bd3	f3 0f 5a 80 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7328]
  00bdb	0f 57 c9	 xorps	 xmm1, xmm1
  00bde	66 0f 2f c8	 comisd	 xmm1, xmm0
  00be2	76 0d		 jbe	 SHORT $LN69@draw_engin
  00be4	0f 57 c0	 xorps	 xmm0, xmm0
  00be7	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv424[ebp], xmm0
  00bef	eb 50		 jmp	 SHORT $LN70@draw_engin
$LN69@draw_engin:
  00bf1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bf7	f3 0f 5a 81 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7328]
  00bff	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  00c07	76 12		 jbe	 SHORT $LN67@draw_engin
  00c09	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  00c11	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv423[ebp], xmm0
  00c19	eb 16		 jmp	 SHORT $LN68@draw_engin
$LN67@draw_engin:
  00c1b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00c21	f3 0f 5a 82 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7328]
  00c29	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv423[ebp], xmm0
$LN68@draw_engin:
  00c31	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv423[ebp]
  00c39	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv424[ebp], xmm0
$LN70@draw_engin:
  00c41	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv424[ebp]
  00c49	f3 0f 11 45 80	 movss	 DWORD PTR _digital_readout$2[ebp], xmm0

; 6459 : 		convert_float_to_int (digital_readout, &i);

  00c4e	8d 45 88	 lea	 eax, DWORD PTR _i$4[ebp]
  00c51	50		 push	 eax
  00c52	51		 push	 ecx
  00c53	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _digital_readout$2[ebp]
  00c58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6460 : 
; 6461 : 		if (i < 60)

  00c62	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00c66	7d 16		 jge	 SHORT $LN4@draw_engin

; 6462 : 			sprintf(buffer2, "OFF ");

  00c68	68 00 00 00 00	 push	 OFFSET ??_C@_04LMJCBFEL@OFF?5@
  00c6d	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00c73	50		 push	 eax
  00c74	e8 00 00 00 00	 call	 _sprintf
  00c79	83 c4 08	 add	 esp, 8
  00c7c	eb 61		 jmp	 SHORT $LN9@draw_engin
$LN4@draw_engin:

; 6463 : 		else if (i == 60)

  00c7e	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00c82	75 16		 jne	 SHORT $LN6@draw_engin

; 6464 : 			sprintf(buffer2, "IDLE");

  00c84	68 00 00 00 00	 push	 OFFSET ??_C@_04IMMGDCFE@IDLE@
  00c89	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00c8f	50		 push	 eax
  00c90	e8 00 00 00 00	 call	 _sprintf
  00c95	83 c4 08	 add	 esp, 8
  00c98	eb 45		 jmp	 SHORT $LN9@draw_engin
$LN6@draw_engin:

; 6465 : 		else if (i == 110.0)

  00c9a	f2 0f 2a 45 88	 cvtsi2sd xmm0, DWORD PTR _i$4[ebp]
  00c9f	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  00ca7	9f		 lahf
  00ca8	f6 c4 44	 test	 ah, 68			; 00000044H
  00cab	7a 16		 jp	 SHORT $LN8@draw_engin

; 6466 : 			sprintf(buffer2, "FLY ");

  00cad	68 00 00 00 00	 push	 OFFSET ??_C@_04MJEFHDBD@FLY?5@
  00cb2	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00cb8	50		 push	 eax
  00cb9	e8 00 00 00 00	 call	 _sprintf
  00cbe	83 c4 08	 add	 esp, 8

; 6467 : 		else

  00cc1	eb 1c		 jmp	 SHORT $LN9@draw_engin
$LN8@draw_engin:

; 6468 : 			sprintf(buffer2, "%03d%%", (i-60) * 2);

  00cc3	8b 45 88	 mov	 eax, DWORD PTR _i$4[ebp]
  00cc6	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00cca	51		 push	 ecx
  00ccb	68 00 00 00 00	 push	 OFFSET ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
  00cd0	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _buffer2$1[ebp]
  00cd6	52		 push	 edx
  00cd7	e8 00 00 00 00	 call	 _sprintf
  00cdc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@draw_engin:

; 6469 : 
; 6470 : 		digital_readout = bound (current_flight_dynamics->right_engine_n1_rpm.max, 0.0, 110.0);

  00cdf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ce4	f3 0f 5a 80 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7424]
  00cec	0f 57 c9	 xorps	 xmm1, xmm1
  00cef	66 0f 2f c8	 comisd	 xmm1, xmm0
  00cf3	76 0d		 jbe	 SHORT $LN73@draw_engin
  00cf5	0f 57 c0	 xorps	 xmm0, xmm0
  00cf8	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv455[ebp], xmm0
  00d00	eb 50		 jmp	 SHORT $LN74@draw_engin
$LN73@draw_engin:
  00d02	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d08	f3 0f 5a 81 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7424]
  00d10	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  00d18	76 12		 jbe	 SHORT $LN71@draw_engin
  00d1a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  00d22	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv454[ebp], xmm0
  00d2a	eb 16		 jmp	 SHORT $LN72@draw_engin
$LN71@draw_engin:
  00d2c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d32	f3 0f 5a 82 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7424]
  00d3a	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv454[ebp], xmm0
$LN72@draw_engin:
  00d42	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv454[ebp]
  00d4a	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv455[ebp], xmm0
$LN74@draw_engin:
  00d52	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv455[ebp]
  00d5a	f3 0f 11 45 80	 movss	 DWORD PTR _digital_readout$2[ebp], xmm0

; 6471 : 		convert_float_to_int (digital_readout, &i);

  00d5f	8d 45 88	 lea	 eax, DWORD PTR _i$4[ebp]
  00d62	50		 push	 eax
  00d63	51		 push	 ecx
  00d64	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _digital_readout$2[ebp]
  00d69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 6472 : 
; 6473 : 		if (i< 60)

  00d73	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00d77	7d 1a		 jge	 SHORT $LN10@draw_engin

; 6474 : 			sprintf(s, " %s OFF ", buffer2);

  00d79	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00d7f	50		 push	 eax
  00d80	68 00 00 00 00	 push	 OFFSET ??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@
  00d85	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00d88	51		 push	 ecx
  00d89	e8 00 00 00 00	 call	 _sprintf
  00d8e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d91	eb 6d		 jmp	 SHORT $LN15@draw_engin
$LN10@draw_engin:

; 6475 : 		else if (i == 60)

  00d93	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00d97	75 1a		 jne	 SHORT $LN12@draw_engin

; 6476 : 			sprintf(s, " %s IDLE", buffer2);

  00d99	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00d9f	50		 push	 eax
  00da0	68 00 00 00 00	 push	 OFFSET ??_C@_08EFKGPAPG@?5?$CFs?5IDLE@
  00da5	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00da8	51		 push	 ecx
  00da9	e8 00 00 00 00	 call	 _sprintf
  00dae	83 c4 0c	 add	 esp, 12			; 0000000cH
  00db1	eb 4d		 jmp	 SHORT $LN15@draw_engin
$LN12@draw_engin:

; 6477 : 		else if (i == 110.0)

  00db3	f2 0f 2a 45 88	 cvtsi2sd xmm0, DWORD PTR _i$4[ebp]
  00db8	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  00dc0	9f		 lahf
  00dc1	f6 c4 44	 test	 ah, 68			; 00000044H
  00dc4	7a 1a		 jp	 SHORT $LN14@draw_engin

; 6478 : 			sprintf(s, " %s FLY ", buffer2);

  00dc6	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00dcc	50		 push	 eax
  00dcd	68 00 00 00 00	 push	 OFFSET ??_C@_08CFLBLB@?5?$CFs?5FLY?5@
  00dd2	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00dd5	51		 push	 ecx
  00dd6	e8 00 00 00 00	 call	 _sprintf
  00ddb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6479 : 		else

  00dde	eb 20		 jmp	 SHORT $LN15@draw_engin
$LN14@draw_engin:

; 6480 : 			sprintf(s, " %s %03d%%", buffer2, (i-60) * 2);

  00de0	8b 45 88	 mov	 eax, DWORD PTR _i$4[ebp]
  00de3	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00de7	51		 push	 ecx
  00de8	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _buffer2$1[ebp]
  00dee	52		 push	 edx
  00def	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@
  00df4	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00df7	50		 push	 eax
  00df8	e8 00 00 00 00	 call	 _sprintf
  00dfd	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@draw_engin:

; 6481 : 
; 6482 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00e00	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e03	50		 push	 eax
  00e04	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e09	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv808[ebp]
  00e0f	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv808[ebp]
  00e17	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00e1f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e23	f3 0f 11 45 84	 movss	 DWORD PTR _x_adjust$3[ebp], xmm0

; 6483 : 
; 6484 : 		set_2d_mono_font_position (0.0, -0.9);

  00e28	51		 push	 ecx
  00e29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00e31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e36	51		 push	 ecx
  00e37	0f 57 c0	 xorps	 xmm0, xmm0
  00e3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6485 : 		set_mono_font_rel_position (x_adjust, -8.0);

  00e44	51		 push	 ecx
  00e45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00e4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e52	51		 push	 ecx
  00e53	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _x_adjust$3[ebp]
  00e58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6486 : 		print_mono_font_string (s);

  00e62	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e65	50		 push	 eax
  00e66	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6487 : 	}
; 6488 : }

  00e6b	5f		 pop	 edi
  00e6c	5e		 pop	 esi
  00e6d	5b		 pop	 ebx
  00e6e	8b e5		 mov	 esp, ebp
  00e70	5d		 pop	 ebp
  00e71	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_engine_dial@@YGXPADMMMMMIII@Z
_TEXT	SEGMENT
tv159 = -120						; size = 8
tv160 = -112						; size = 8
tv251 = -108						; size = 4
tv244 = -108						; size = 4
tv216 = -108						; size = 4
_dial_y$1 = -40						; size = 4
_dial_x$2 = -36						; size = 4
_dial_angle$3 = -32					; size = 4
_s$ = -28						; size = 20
_y_adjust$ = -8						; size = 4
_x_adjust$ = -4						; size = 4
_name$ = 8						; size = 4
_x_pos$ = 12						; size = 4
_y_pos$ = 16						; size = 4
_size$ = 20						; size = 4
_value$ = 24						; size = 4
_top_value$ = 28					; size = 4
_green_zone$ = 32					; size = 4
_yellow_zone$ = 36					; size = 4
_red_zone$ = 40						; size = 4
?draw_engine_dial@@YGXPADMMMMMIII@Z PROC		; draw_engine_dial, COMDAT

; 6291 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6292 : 	float x_adjust, y_adjust;
; 6293 : 	char s[20];
; 6294 : 
; 6295 : 	draw_2d_arc(x_pos, y_pos, size, green_zone, MFD_COLOUR_GREEN);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 0d	 imul	 ecx, eax, 13
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	8b 45 20	 mov	 eax, DWORD PTR _green_zone$[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _size$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	51		 push	 ecx
  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	51		 push	 ecx
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z ; draw_2d_arc

; 6296 : 	if (yellow_zone)

  00042	83 7d 24 00	 cmp	 DWORD PTR _yellow_zone$[ebp], 0
  00046	74 39		 je	 SHORT $LN2@draw_engin

; 6297 : 		draw_2d_arc(x_pos, y_pos, size, yellow_zone, MFD_COLOUR_YELLOW);

  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 0f	 imul	 ecx, eax, 15
  00050	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00056	52		 push	 edx
  00057	8b 45 24	 mov	 eax, DWORD PTR _yellow_zone$[ebp]
  0005a	50		 push	 eax
  0005b	51		 push	 ecx
  0005c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _size$[ebp]
  00061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00066	51		 push	 ecx
  00067	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	e8 00 00 00 00	 call	 ?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z ; draw_2d_arc
$LN2@draw_engin:

; 6298 : 	if (red_zone)

  00081	83 7d 28 00	 cmp	 DWORD PTR _red_zone$[ebp], 0
  00085	74 39		 je	 SHORT $LN3@draw_engin

; 6299 : 		draw_2d_arc(x_pos, y_pos, size, red_zone, MFD_COLOUR_RED);

  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	6b c8 12	 imul	 ecx, eax, 18
  0008f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00095	52		 push	 edx
  00096	8b 45 28	 mov	 eax, DWORD PTR _red_zone$[ebp]
  00099	50		 push	 eax
  0009a	51		 push	 ecx
  0009b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _size$[ebp]
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	51		 push	 ecx
  000a6	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  000ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b0	51		 push	 ecx
  000b1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	e8 00 00 00 00	 call	 ?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z ; draw_2d_arc
$LN3@draw_engin:

; 6300 : 
; 6301 : 	// print value
; 6302 : 	sprintf (s, "%d", (int)(value + 0.5));

  000c0	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _value$[ebp]
  000c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000cd	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000d7	8d 4d e4	 lea	 ecx, DWORD PTR _s$[ebp]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _sprintf
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6303 : 	set_2d_mono_font_position (x_pos + size, y_pos - 0.1);

  000e3	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _y_pos$[ebp]
  000e8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f4	51		 push	 ecx
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  000ff	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _size$[ebp]
  00104	51		 push	 ecx
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6304 : 
; 6305 : 	x_adjust = -get_mono_font_string_width (s);

  0010f	8d 45 e4	 lea	 eax, DWORD PTR _s$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00118	d9 5d 94	 fstp	 DWORD PTR tv216[ebp]
  0011b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv216[ebp]
  00120	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00127	f3 0f 11 45 fc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6306 : 	y_adjust = -6.0;

  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  00134	f3 0f 11 45 f8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6307 : 
; 6308 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  00139	51		 push	 ecx
  0013a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	51		 push	 ecx
  00145	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0014a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6309 : 	print_mono_font_string (s);

  00154	8d 45 e4	 lea	 eax, DWORD PTR _s$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6310 : 
; 6311 : 	// print name
; 6312 : 	set_2d_mono_font_position (x_pos + 0.05, y_pos - 0.2);

  0015d	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _y_pos$[ebp]
  00162	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0016a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016e	51		 push	 ecx
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _x_pos$[ebp]
  00179	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00185	51		 push	 ecx
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6313 : 
; 6314 : 	x_adjust = 1.0;

  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00198	f3 0f 11 45 fc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6315 : 	y_adjust = -6.0;

  0019d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  001a5	f3 0f 11 45 f8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6316 : 
; 6317 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  001aa	51		 push	 ecx
  001ab	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b5	51		 push	 ecx
  001b6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6318 : 	print_mono_font_string (name);

  001c5	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6319 : 
; 6320 : 	// draw dial
; 6321 : 	{
; 6322 : 		float dial_angle = rad(180.0) + (PI * (value / top_value));

  001ce	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _value$[ebp]
  001d3	f3 0f 5e 45 1c	 divss	 xmm0, DWORD PTR _top_value$[ebp]
  001d8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  001e0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@400921fb51000000
  001ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f0	f3 0f 11 45 e0	 movss	 DWORD PTR _dial_angle$3[ebp], xmm0

; 6323 : 		float dial_x, dial_y;
; 6324 : 
; 6325 : 		dial_angle = bound(dial_angle, rad(180.0), rad(405.0));

  001f5	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dial_angle$3[ebp]
  001fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@400921fb51000000
  00202	66 0f 2f c8	 comisd	 xmm1, xmm0
  00206	76 0f		 jbe	 SHORT $LN7@draw_engin
  00208	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@400921fb51000000
  00210	f2 0f 11 45 90	 movsd	 QWORD PTR tv160[ebp], xmm0
  00215	eb 32		 jmp	 SHORT $LN8@draw_engin
$LN7@draw_engin:
  00217	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dial_angle$3[ebp]
  0021c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401c463abb200000
  00224	76 0f		 jbe	 SHORT $LN5@draw_engin
  00226	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401c463abb200000
  0022e	f2 0f 11 45 88	 movsd	 QWORD PTR tv159[ebp], xmm0
  00233	eb 0a		 jmp	 SHORT $LN6@draw_engin
$LN5@draw_engin:
  00235	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dial_angle$3[ebp]
  0023a	f2 0f 11 45 88	 movsd	 QWORD PTR tv159[ebp], xmm0
$LN6@draw_engin:
  0023f	f2 0f 10 45 88	 movsd	 xmm0, QWORD PTR tv159[ebp]
  00244	f2 0f 11 45 90	 movsd	 QWORD PTR tv160[ebp], xmm0
$LN8@draw_engin:
  00249	f2 0f 5a 45 90	 cvtsd2ss xmm0, QWORD PTR tv160[ebp]
  0024e	f3 0f 11 45 e0	 movss	 DWORD PTR _dial_angle$3[ebp], xmm0

; 6326 : 		dial_x = x_pos + sin(dial_angle) * size;

  00253	51		 push	 ecx
  00254	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dial_angle$3[ebp]
  00259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025e	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00263	d9 5d 94	 fstp	 DWORD PTR tv244[ebp]
  00266	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv244[ebp]
  0026b	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00270	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _x_pos$[ebp]
  00275	f3 0f 11 45 dc	 movss	 DWORD PTR _dial_x$2[ebp], xmm0

; 6327 : 		dial_y = y_pos + cos(dial_angle) * size;

  0027a	51		 push	 ecx
  0027b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dial_angle$3[ebp]
  00280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00285	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0028a	d9 5d 94	 fstp	 DWORD PTR tv251[ebp]
  0028d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv251[ebp]
  00292	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00297	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _y_pos$[ebp]
  0029c	f3 0f 11 45 d8	 movss	 DWORD PTR _dial_y$1[ebp], xmm0

; 6328 : 
; 6329 : 		draw_2d_half_thick_line(x_pos, y_pos, dial_x, dial_y, MFD_COLOUR1);

  002a1	b8 04 00 00 00	 mov	 eax, 4
  002a6	6b c8 00	 imul	 ecx, eax, 0
  002a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002af	52		 push	 edx
  002b0	51		 push	 ecx
  002b1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _dial_y$1[ebp]
  002b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bb	51		 push	 ecx
  002bc	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dial_x$2[ebp]
  002c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c6	51		 push	 ecx
  002c7	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  002cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d1	51		 push	 ecx
  002d2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  002d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dc	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6330 : 	}
; 6331 : }

  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	5b		 pop	 ebx
  002e4	8b e5		 mov	 esp, ebp
  002e6	5d		 pop	 ebp
  002e7	c2 24 00	 ret	 36			; 00000024H
?draw_engine_dial@@YGXPADMMMMMIII@Z ENDP		; draw_engine_dial
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv283 = -76						; size = 4
tv273 = -76						; size = 4
tv265 = -76						; size = 4
tv258 = -76						; size = 4
tv248 = -76						; size = 4
tv238 = -76						; size = 4
tv228 = -76						; size = 4
tv218 = -76						; size = 4
tv208 = -76						; size = 4
_width_adjust$ = -8					; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 6206 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6207 : 	float
; 6208 : 		y_adjust,
; 6209 : 		width_adjust;
; 6210 : 
; 6211 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	74 1e		 je	 SHORT $LN2@draw_syste

; 6212 : 	{
; 6213 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00012	6a 05		 push	 5
  00014	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6214 : 
; 6215 : 		y_adjust = 0.0;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6216 : 
; 6217 : 		width_adjust = 2.0;

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00029	f3 0f 11 45 f8	 movss	 DWORD PTR _width_adjust$[ebp], xmm0

; 6218 : 	}
; 6219 : 	else

  0002e	eb 1c		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 6220 : 	{
; 6221 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00030	6a 00		 push	 0
  00032	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6222 : 
; 6223 : 		y_adjust = 0.0;

  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6224 : 
; 6225 : 		width_adjust = 1.0;

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00047	f3 0f 11 45 f8	 movss	 DWORD PTR _width_adjust$[ebp], xmm0
$LN3@draw_syste:

; 6226 : 	}
; 6227 : 
; 6228 : 	y_adjust = print_mfd_system_message ("RADAR", "FAIL", hokum_damage.radar, y_adjust, width_adjust);

  0004c	51		 push	 ecx
  0004d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	51		 push	 ecx
  00058	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00067	83 e0 01	 and	 eax, 1
  0006a	50		 push	 eax
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  00075	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0007a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6229 : 
; 6230 : 	y_adjust = print_mfd_system_message ("FLIR", "FAIL", hokum_damage.flir, y_adjust, width_adjust);

  0007d	51		 push	 ecx
  0007e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	51		 push	 ecx
  00089	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00098	d1 e8		 shr	 eax, 1
  0009a	83 e0 01	 and	 eax, 1
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  000a8	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  000ad	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6231 : 
; 6232 : 	y_adjust = print_mfd_system_message ("LLLTV", "FAIL", hokum_damage.llltv, y_adjust, width_adjust);

  000b0	51		 push	 ecx
  000b1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	51		 push	 ecx
  000bc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000cb	c1 e8 03	 shr	 eax, 3
  000ce	83 e0 01	 and	 eax, 1
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_05PNDCLKDI@LLLTV@
  000dc	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  000e1	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6233 : 
; 6234 : 	y_adjust = print_mfd_system_message ("PERISCOPE", "FAIL", hokum_damage.periscope, y_adjust, width_adjust);

  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000ff	c1 e8 04	 shr	 eax, 4
  00102	83 e0 01	 and	 eax, 1
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_09EAHIBGMD@PERISCOPE@
  00110	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00115	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6235 : 
; 6236 : 	y_adjust = print_mfd_system_message ("LASER DESIGNATOR", "FAIL", hokum_damage.laser_designator, y_adjust, width_adjust);

  00118	51		 push	 ecx
  00119	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	51		 push	 ecx
  00124	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00133	c1 e8 06	 shr	 eax, 6
  00136	83 e0 01	 and	 eax, 1
  00139	50		 push	 eax
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  00144	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00149	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6237 : 
; 6238 : 	y_adjust = print_mfd_system_message ("RADAR JAMMER", "FAIL", hokum_damage.radar_jammer, y_adjust, width_adjust);

  0014c	51		 push	 ecx
  0014d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00167	c1 e8 07	 shr	 eax, 7
  0016a	83 e0 01	 and	 eax, 1
  0016d	50		 push	 eax
  0016e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
  00178	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0017d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6239 : 
; 6240 : 	y_adjust = print_mfd_system_message ("IR JAMMER", "FAIL", hokum_damage.infra_red_jammer, y_adjust, width_adjust);

  00180	51		 push	 ecx
  00181	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0019b	c1 e8 08	 shr	 eax, 8
  0019e	83 e0 01	 and	 eax, 1
  001a1	50		 push	 eax
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  001ac	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  001b1	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6241 : 
; 6242 : 	y_adjust = print_mfd_system_message ("NAVIGATION COMPUTER", "FAIL", hokum_damage.navigation_computer, y_adjust, width_adjust);

  001b4	51		 push	 ecx
  001b5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	51		 push	 ecx
  001c0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001cf	c1 e8 09	 shr	 eax, 9
  001d2	83 e0 01	 and	 eax, 1
  001d5	50		 push	 eax
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  001e0	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  001e5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6243 : 
; 6244 : 	y_adjust = print_mfd_system_message ("COMMUNICATIONS", "FAIL", hokum_damage.communications, y_adjust, width_adjust);

  001e8	51		 push	 ecx
  001e9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	51		 push	 ecx
  001f4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00203	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00206	83 e0 01	 and	 eax, 1
  00209	50		 push	 eax
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  00214	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00219	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6245 : 
; 6246 : 	y_adjust = print_mfd_system_message ("RADAR WARNING SYSTEM", "FAIL", hokum_damage.radar_warning_system, y_adjust, width_adjust);

  0021c	51		 push	 ecx
  0021d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	51		 push	 ecx
  00228	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0022d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00237	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  0023a	83 e0 01	 and	 eax, 1
  0023d	50		 push	 eax
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  00248	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0024d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6247 : 
; 6248 : 	y_adjust = print_mfd_system_message ("HUD", "FAIL", hokum_damage.head_up_display, y_adjust, width_adjust);

  00250	51		 push	 ecx
  00251	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025b	51		 push	 ecx
  0025c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00261	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00266	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0026b	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0026e	83 e0 01	 and	 eax, 1
  00271	50		 push	 eax
  00272	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_03HOHJDGGL@HUD@
  0027c	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00281	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6249 : 
; 6250 : 	y_adjust = print_mfd_system_message ("HMS", "FAIL", hokum_damage.helmet_mounted_sight, y_adjust, width_adjust);

  00284	51		 push	 ecx
  00285	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  0028a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028f	51		 push	 ecx
  00290	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00295	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0029f	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  002a2	83 e0 01	 and	 eax, 1
  002a5	50		 push	 eax
  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  002ab	68 00 00 00 00	 push	 OFFSET ??_C@_03GJMPEADF@HMS@
  002b0	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  002b5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6251 : 
; 6252 : 	y_adjust = print_mfd_system_message ("NVG", "FAIL", hokum_damage.night_vision_goggles, y_adjust, width_adjust);

  002b8	51		 push	 ecx
  002b9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	51		 push	 ecx
  002c4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  002d3	c1 e8 16	 shr	 eax, 22			; 00000016H
  002d6	83 e0 01	 and	 eax, 1
  002d9	50		 push	 eax
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  002df	68 00 00 00 00	 push	 OFFSET ??_C@_03HCHJIECN@NVG@
  002e4	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  002e9	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6253 : 
; 6254 : 	y_adjust = print_mfd_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust, width_adjust);

  002ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002f1	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002f7	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  002fd	74 09		 je	 SHORT $LN7@draw_syste
  002ff	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv208[ebp], 1
  00306	eb 07		 jmp	 SHORT $LN8@draw_syste
$LN7@draw_syste:
  00308	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv208[ebp], 0
$LN8@draw_syste:
  0030f	51		 push	 ecx
  00310	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00315	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031a	51		 push	 ecx
  0031b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00325	8b 55 b4	 mov	 edx, DWORD PTR tv208[ebp]
  00328	52		 push	 edx
  00329	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  00333	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00338	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6255 : 
; 6256 : 	y_adjust = print_mfd_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust, width_adjust);

  0033b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00340	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00346	83 e1 02	 and	 ecx, 2
  00349	74 09		 je	 SHORT $LN9@draw_syste
  0034b	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv218[ebp], 1
  00352	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  00354	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
$LN10@draw_syste:
  0035b	51		 push	 ecx
  0035c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00361	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00366	51		 push	 ecx
  00367	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	8b 55 b4	 mov	 edx, DWORD PTR tv218[ebp]
  00374	52		 push	 edx
  00375	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0037a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  0037f	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00384	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6257 : 
; 6258 : 	y_adjust = print_mfd_system_message ("L ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust, width_adjust);

  00387	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0038c	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00392	83 e1 08	 and	 ecx, 8
  00395	74 09		 je	 SHORT $LN11@draw_syste
  00397	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv228[ebp], 1
  0039e	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  003a0	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv228[ebp], 0
$LN12@draw_syste:
  003a7	51		 push	 ecx
  003a8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  003ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b2	51		 push	 ecx
  003b3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	8b 55 b4	 mov	 edx, DWORD PTR tv228[ebp]
  003c0	52		 push	 edx
  003c1	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  003cb	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  003d0	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6259 : 
; 6260 : 	y_adjust = print_mfd_system_message ("APU", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_APU), y_adjust, width_adjust);

  003d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003d8	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003de	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  003e4	74 09		 je	 SHORT $LN13@draw_syste
  003e6	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv238[ebp], 1
  003ed	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  003ef	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv238[ebp], 0
$LN14@draw_syste:
  003f6	51		 push	 ecx
  003f7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	51		 push	 ecx
  00402	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	8b 55 b4	 mov	 edx, DWORD PTR tv238[ebp]
  0040f	52		 push	 edx
  00410	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00415	68 00 00 00 00	 push	 OFFSET ??_C@_03FGGDJIBK@APU@
  0041a	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0041f	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6261 : 
; 6262 : 	y_adjust = print_mfd_system_message ("R ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust, width_adjust);

  00422	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00427	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0042d	83 e1 10	 and	 ecx, 16			; 00000010H
  00430	74 09		 je	 SHORT $LN15@draw_syste
  00432	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv248[ebp], 1
  00439	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  0043b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv248[ebp], 0
$LN16@draw_syste:
  00442	51		 push	 ecx
  00443	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00448	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044d	51		 push	 ecx
  0044e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00458	8b 55 b4	 mov	 edx, DWORD PTR tv248[ebp]
  0045b	52		 push	 edx
  0045c	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00461	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  00466	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0046b	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6263 : 
; 6264 : 	y_adjust = print_mfd_system_message ("HYDRAULIC PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust, width_adjust);

  0046e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00473	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00479	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0047f	74 09		 je	 SHORT $LN17@draw_syste
  00481	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv258[ebp], 1
  00488	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  0048a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv258[ebp], 0
$LN18@draw_syste:
  00491	51		 push	 ecx
  00492	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00497	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049c	51		 push	 ecx
  0049d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  004a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a7	8b 55 b4	 mov	 edx, DWORD PTR tv258[ebp]
  004aa	52		 push	 edx
  004ab	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  004b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
  004b5	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  004ba	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6265 : 
; 6266 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  004bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004c2	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  004c8	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  004ce	74 09		 je	 SHORT $LN19@draw_syste
  004d0	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv265[ebp], 1
  004d7	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  004d9	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv265[ebp], 0
$LN20@draw_syste:
  004e0	83 7d b4 00	 cmp	 DWORD PTR tv265[ebp], 0
  004e4	74 51		 je	 SHORT $LN4@draw_syste

; 6267 : 	{
; 6268 : 		y_adjust = print_mfd_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust, width_adjust);

  004e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004eb	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  004f1	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  004f7	74 09		 je	 SHORT $LN21@draw_syste
  004f9	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv273[ebp], 1
  00500	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  00502	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv273[ebp], 0
$LN22@draw_syste:
  00509	51		 push	 ecx
  0050a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  0050f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00514	51		 push	 ecx
  00515	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0051a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051f	8b 55 b4	 mov	 edx, DWORD PTR tv273[ebp]
  00522	52		 push	 edx
  00523	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  00528	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  0052d	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00532	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 6269 : 	}
; 6270 : 	else

  00535	eb 4f		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 6271 : 	{
; 6272 : 		y_adjust = print_mfd_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust, width_adjust);

  00537	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0053c	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00542	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00548	74 09		 je	 SHORT $LN23@draw_syste
  0054a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv283[ebp], 1
  00551	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  00553	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv283[ebp], 0
$LN24@draw_syste:
  0055a	51		 push	 ecx
  0055b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00560	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00565	51		 push	 ecx
  00566	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0056b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00570	8b 55 b4	 mov	 edx, DWORD PTR tv283[ebp]
  00573	52		 push	 edx
  00574	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  00579	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  0057e	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00583	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 6273 : 	}
; 6274 : }

  00586	5f		 pop	 edi
  00587	5e		 pop	 esi
  00588	5b		 pop	 ebx
  00589	8b e5		 mov	 esp, ebp
  0058b	5d		 pop	 ebp
  0058c	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?print_mfd_system_message@@YGMPAD0HMM@Z
_TEXT	SEGMENT
tv162 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
_width_adjust$ = 24					; size = 4
?print_mfd_system_message@@YGMPAD0HMM@Z PROC		; print_mfd_system_message, COMDAT

; 6156 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6157 : 	char
; 6158 : 		*status;
; 6159 : 
; 6160 : 	float
; 6161 : 		width;
; 6162 : 
; 6163 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_mfd_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mfd_:

; 6164 : 
; 6165 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_mfd_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_mfd_:

; 6166 : 
; 6167 : 	if (fail)

  00045	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00049	74 1c		 je	 SHORT $LN4@print_mfd_

; 6168 : 	{
; 6169 : 		set_mono_font_colour (MFD_COLOUR1);

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6170 : 
; 6171 : 		status = warning;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 6172 : 	}
; 6173 : 	else

  00065	eb 1b		 jmp	 SHORT $LN5@print_mfd_
$LN4@print_mfd_:

; 6174 : 	{
; 6175 : 		set_mono_font_colour (MFD_COLOUR4);

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 03	 imul	 ecx, eax, 3
  0006f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6176 : 
; 6177 : 		status = "OK";

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_mfd_:

; 6178 : 	}
; 6179 : 
; 6180 : 	set_2d_mono_font_position (-0.9, 0.975);

  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f79999a
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6181 : 
; 6182 : 	set_mono_font_rel_position (1.0, y_adjust);

  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6183 : 
; 6184 : 	print_mono_font_string (equipment);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6185 : 
; 6186 : 	width = get_mono_font_string_width (status);

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000d3	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 6187 : 
; 6188 : 	width += width_adjust;

  000d6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  000db	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _width_adjust$[ebp]
  000e0	f3 0f 11 45 f8	 movss	 DWORD PTR _width$[ebp], xmm0

; 6189 : 
; 6190 : 	set_2d_mono_font_position (0.9, 0.975);

  000e5	51		 push	 ecx
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f79999a
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6191 : 
; 6192 : 	set_mono_font_rel_position (-width, y_adjust);

  00106	51		 push	 ecx
  00107	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  00116	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0011d	51		 push	 ecx
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6193 : 
; 6194 : 	print_mono_font_string (status);

  00128	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6195 : 
; 6196 : 	y_adjust += get_mono_font_char_height ('X');

  00131	6a 58		 push	 88			; 00000058H
  00133	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00138	d9 5d b4	 fstp	 DWORD PTR tv162[ebp]
  0013b	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv162[ebp]
  00140	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00145	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6197 : 
; 6198 : 	return (y_adjust);

  0014a	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 6199 : }

  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 14 00	 ret	 20			; 00000014H
?print_mfd_system_message@@YGMPAD0HMM@Z ENDP		; print_mfd_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1785 = -188						; size = 8
tv1683 = -188						; size = 8
tv1461 = -188						; size = 8
tv1241 = -188						; size = 8
tv1214 = -188						; size = 8
tv1022 = -188						; size = 8
tv1009 = -188						; size = 8
tv994 = -188						; size = 8
tv981 = -188						; size = 8
tv964 = -188						; size = 8
tv951 = -188						; size = 8
tv78 = -188						; size = 4
tv1668 = -184						; size = 4
tv1446 = -184						; size = 4
tv1188 = -184						; size = 4
tv1180 = -184						; size = 4
tv1169 = -184						; size = 4
tv1111 = -184						; size = 4
tv1103 = -184						; size = 4
tv1092 = -184						; size = 4
tv70 = -184						; size = 4
_selected_weapon$ = -116				; size = 4
_weapon_sub_type$ = -112				; size = 4
_en$ = -108						; size = 4
_y_adjust$ = -104					; size = 4
_x_adjust$ = -100					; size = 4
_damaged$ = -96						; size = 4
_number$ = -92						; size = 4
_result$ = -88						; size = 4
_i$ = -84						; size = 4
_s$ = -80						; size = 80
?draw_weapon_display_mfd@@YGXXZ PROC			; draw_weapon_display_mfd, COMDAT

; 5343 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5344 : 	char
; 5345 : 		s[80];
; 5346 : 
; 5347 : 	int
; 5348 : 		i,
; 5349 : 		result,
; 5350 : 		number,
; 5351 : 		damaged;
; 5352 : 
; 5353 : 	float
; 5354 : 		x_adjust,
; 5355 : 		y_adjust;
; 5356 : 
; 5357 : 	entity
; 5358 : 		*en;
; 5359 : 
; 5360 : 	entity_sub_types
; 5361 : 		weapon_sub_type,
; 5362 : 		selected_weapon;
; 5363 : 
; 5364 : 	en = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 45 94	 mov	 DWORD PTR _en$[ebp], eax

; 5365 : 
; 5366 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00014	83 7d 94 00	 cmp	 DWORD PTR _en$[ebp], 0
  00018	74 0d		 je	 SHORT $LN94@draw_weapo
  0001a	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00025	eb 24		 jmp	 SHORT $LN95@draw_weapo
$LN94@draw_weapo:
  00027	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  0002d	83 c2 17	 add	 edx, 23			; 00000017H
  00030	52		 push	 edx
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00041	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN95@draw_weapo:
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 0c		 je	 SHORT $LN96@draw_weapo
  00054	c7 85 44 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005e	eb 24		 jmp	 SHORT $LN97@draw_weapo
$LN96@draw_weapo:
  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  00066	83 c2 17	 add	 edx, 23			; 00000017H
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN97@draw_weapo:
  00084	68 b8 00 00 00	 push	 184			; 000000b8H
  00089	8b 4d 94	 mov	 ecx, DWORD PTR _en$[ebp]
  0008c	51		 push	 ecx
  0008d	69 95 48 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 8c	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 5367 : 
; 5368 : 	////////////////////////////////////////
; 5369 : 	//
; 5370 : 	// draw outline
; 5371 : 	//
; 5372 : 	////////////////////////////////////////
; 5373 : 
; 5374 : 	i = 0;

  000a9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN2@draw_weapo:

; 5375 : 
; 5376 : 	while (i < num_weapon_line_points)

  000b0	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000b3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_weapon_line_points@@3HA
  000b9	0f 8d 81 00 00
	00		 jge	 $LN3@draw_weapo

; 5377 : 	{
; 5378 : 		draw_2d_line

  000bf	b8 04 00 00 00	 mov	 eax, 4
  000c4	6b c8 0f	 imul	 ecx, eax, 15
  000c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000cd	52		 push	 edx
  000ce	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000d1	83 c0 01	 add	 eax, 1
  000d4	6b c8 0c	 imul	 ecx, eax, 12
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  000dd	51		 push	 ecx
  000de	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  000e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e9	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	6b c8 0c	 imul	 ecx, eax, 12
  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  000f8	51		 push	 ecx
  000f9	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  0010d	51		 push	 ecx
  0010e	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00114	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00119	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00122	51		 push	 ecx
  00123	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5379 : 		(
; 5380 : 			weapon_line_points[i].x,
; 5381 : 			weapon_line_points[i].y,
; 5382 : 			weapon_line_points[i + 1].x,
; 5383 : 			weapon_line_points[i + 1].y,
; 5384 : 			MFD_COLOUR_YELLOW
; 5385 : 		);
; 5386 : 
; 5387 : 		i += 2;

  00132	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00135	83 c0 02	 add	 eax, 2
  00138	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 5388 : 	}

  0013b	e9 70 ff ff ff	 jmp	 $LN2@draw_weapo
$LN3@draw_weapo:

; 5389 : 
; 5390 : 	////////////////////////////////////////
; 5391 : 	//
; 5392 : 	// arm
; 5393 : 	//
; 5394 : 	////////////////////////////////////////
; 5395 : 
; 5396 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00140	83 7d 8c 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00144	74 16		 je	 SHORT $LN4@draw_weapo

; 5397 : 	{
; 5398 : 		set_mono_font_colour (MFD_COLOUR1);

  00146	b8 04 00 00 00	 mov	 eax, 4
  0014b	6b c8 00	 imul	 ecx, eax, 0
  0014e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5399 : 	}
; 5400 : 	else

  0015a	eb 14		 jmp	 SHORT $LN5@draw_weapo
$LN4@draw_weapo:

; 5401 : 	{
; 5402 : 		set_mono_font_colour (MFD_COLOUR4);

  0015c	b8 04 00 00 00	 mov	 eax, 4
  00161	6b c8 03	 imul	 ecx, eax, 3
  00164	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0016a	52		 push	 edx
  0016b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN5@draw_weapo:

; 5403 : 	}
; 5404 : 
; 5405 : 	if (draw_large_mfd)

  00170	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00177	74 71		 je	 SHORT $LN6@draw_weapo

; 5406 : 	{
; 5407 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00179	6a 05		 push	 5
  0017b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5408 : 
; 5409 : 		set_2d_mono_font_position (0.0, 0.2);

  00180	51		 push	 ecx
  00181	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018e	51		 push	 ecx
  0018f	0f 57 c0	 xorps	 xmm0, xmm0
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5410 : 
; 5411 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  001a1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  001a6	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv951[ebp]
  001ac	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv951[ebp]
  001b4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  001bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c0	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5412 : 
; 5413 : 		set_mono_font_rel_position (x_adjust, 0.0);

  001c5	51		 push	 ecx
  001c6	0f 57 c0	 xorps	 xmm0, xmm0
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	51		 push	 ecx
  001cf	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5414 : 
; 5415 : 		print_mono_font_string ("ARM");

  001de	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  001e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5416 : 	}
; 5417 : 	else

  001e8	eb 6f		 jmp	 SHORT $LN7@draw_weapo
$LN6@draw_weapo:

; 5418 : 	{
; 5419 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  001ea	6a 01		 push	 1
  001ec	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5420 : 
; 5421 : 		set_2d_mono_font_position (0.0, 0.2);

  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	0f 57 c0	 xorps	 xmm0, xmm0
  00203	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00208	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5422 : 
; 5423 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  00212	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00217	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv964[ebp]
  0021d	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv964[ebp]
  00225	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0022d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00231	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5424 : 
; 5425 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00236	51		 push	 ecx
  00237	0f 57 c0	 xorps	 xmm0, xmm0
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5426 : 
; 5427 : 		print_mono_font_string ("ARM");

  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  00254	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN7@draw_weapo:

; 5428 : 	}
; 5429 : 
; 5430 : 	////////////////////////////////////////
; 5431 : 	//
; 5432 : 	// auto-counter measures
; 5433 : 	//
; 5434 : 	////////////////////////////////////////
; 5435 : 
; 5436 : 	if (get_global_auto_counter_measures ())

  00259	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00260	74 16		 je	 SHORT $LN8@draw_weapo

; 5437 : 	{
; 5438 : 		set_mono_font_colour (MFD_COLOUR1);

  00262	b8 04 00 00 00	 mov	 eax, 4
  00267	6b c8 00	 imul	 ecx, eax, 0
  0026a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00270	52		 push	 edx
  00271	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5439 : 	}
; 5440 : 	else

  00276	eb 14		 jmp	 SHORT $LN9@draw_weapo
$LN8@draw_weapo:

; 5441 : 	{
; 5442 : 		set_mono_font_colour (MFD_COLOUR4);

  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 03	 imul	 ecx, eax, 3
  00280	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00286	52		 push	 edx
  00287	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN9@draw_weapo:

; 5443 : 	}
; 5444 : 
; 5445 : 	if (draw_large_mfd)

  0028c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00293	0f 84 d4 00 00
	00		 je	 $LN10@draw_weapo

; 5446 : 	{
; 5447 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00299	6a 04		 push	 4
  0029b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5448 : 
; 5449 : 		set_2d_mono_font_position (0.0, 0.0);

  002a0	51		 push	 ecx
  002a1	0f 57 c0	 xorps	 xmm0, xmm0
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	51		 push	 ecx
  002aa	0f 57 c0	 xorps	 xmm0, xmm0
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5450 : 
; 5451 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  002bc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002c1	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv981[ebp]
  002c7	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv981[ebp]
  002cf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002d7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002db	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5452 : 
; 5453 : 		set_mono_font_rel_position (x_adjust, 0.0);

  002e0	51		 push	 ecx
  002e1	0f 57 c0	 xorps	 xmm0, xmm0
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	51		 push	 ecx
  002ea	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5454 : 
; 5455 : 		print_mono_font_string ("AUTO");

  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  002fe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5456 : 
; 5457 : 		set_2d_mono_font_position (0.0, 0.0);

  00303	51		 push	 ecx
  00304	0f 57 c0	 xorps	 xmm0, xmm0
  00307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030c	51		 push	 ecx
  0030d	0f 57 c0	 xorps	 xmm0, xmm0
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5458 : 
; 5459 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  0031f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00324	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv994[ebp]
  0032a	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv994[ebp]
  00332	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0033a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033e	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5460 : 
; 5461 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00343	6a 58		 push	 88			; 00000058H
  00345	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0034a	51		 push	 ecx
  0034b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0034e	51		 push	 ecx
  0034f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5462 : 
; 5463 : 		print_mono_font_string ("C/M");

  0035e	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00363	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5464 : 	}
; 5465 : 	else

  00368	e9 cf 00 00 00	 jmp	 $LN11@draw_weapo
$LN10@draw_weapo:

; 5466 : 	{
; 5467 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0036d	6a 01		 push	 1
  0036f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5468 : 
; 5469 : 		set_2d_mono_font_position (0.0, 0.0);

  00374	51		 push	 ecx
  00375	0f 57 c0	 xorps	 xmm0, xmm0
  00378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037d	51		 push	 ecx
  0037e	0f 57 c0	 xorps	 xmm0, xmm0
  00381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00386	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5470 : 
; 5471 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  0038b	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  00390	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00395	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1009[ebp]
  0039b	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1009[ebp]
  003a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  003ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003af	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5472 : 
; 5473 : 		set_mono_font_rel_position (x_adjust, 0.0);

  003b4	51		 push	 ecx
  003b5	0f 57 c0	 xorps	 xmm0, xmm0
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	51		 push	 ecx
  003be	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5474 : 
; 5475 : 		print_mono_font_string ("AUTO");

  003cd	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  003d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5476 : 
; 5477 : 		set_2d_mono_font_position (0.0, 0.0);

  003d7	51		 push	 ecx
  003d8	0f 57 c0	 xorps	 xmm0, xmm0
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	0f 57 c0	 xorps	 xmm0, xmm0
  003e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5478 : 
; 5479 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  003f3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003f8	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1022[ebp]
  003fe	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1022[ebp]
  00406	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0040e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00412	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5480 : 
; 5481 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00417	6a 58		 push	 88			; 00000058H
  00419	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0041e	51		 push	 ecx
  0041f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00422	51		 push	 ecx
  00423	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5482 : 
; 5483 : 		print_mono_font_string ("C/M");

  00432	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00437	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN11@draw_weapo:

; 5484 : 	}
; 5485 : 
; 5486 : 	////////////////////////////////////////
; 5487 : 	//
; 5488 : 	// chaff and flares
; 5489 : 	//
; 5490 : 	////////////////////////////////////////
; 5491 : 
; 5492 : 	if (draw_large_mfd)

  0043c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00443	74 16		 je	 SHORT $LN12@draw_weapo

; 5493 : 	{
; 5494 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00445	6a 04		 push	 4
  00447	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5495 : 
; 5496 : 		y_adjust = -6.0;

  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  00454	f3 0f 11 45 98	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5497 : 	}
; 5498 : 	else

  00459	eb 14		 jmp	 SHORT $LN13@draw_weapo
$LN12@draw_weapo:

; 5499 : 	{
; 5500 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  0045b	6a 00		 push	 0
  0045d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5501 : 
; 5502 : 		y_adjust = -4.0;

  00462	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0046a	f3 0f 11 45 98	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN13@draw_weapo:

; 5503 : 	}
; 5504 : 
; 5505 : 	//
; 5506 : 	// lh chaff
; 5507 : 	//
; 5508 : 
; 5509 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_LHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  0046f	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00472	50		 push	 eax
  00473	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00476	51		 push	 ecx
  00477	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0047a	52		 push	 edx
  0047b	6a 43		 push	 67			; 00000043H
  0047d	6a 05		 push	 5
  0047f	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00482	50		 push	 eax
  00483	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00488	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5510 : 
; 5511 : 	if (result)

  0048b	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0048f	0f 84 ca 00 00
	00		 je	 $LN22@draw_weapo

; 5512 : 	{
; 5513 : 		set_2d_mono_font_position (-0.95, 0.3);

  00495	51		 push	 ecx
  00496	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	51		 push	 ecx
  004a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5514 : 
; 5515 : 		if (!damaged)

  004b6	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  004ba	75 70		 jne	 SHORT $LN15@draw_weapo

; 5516 : 		{
; 5517 : 			if (number > 0)

  004bc	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  004c0	7e 16		 jle	 SHORT $LN17@draw_weapo

; 5518 : 			{
; 5519 : 				set_mono_font_colour (MFD_COLOUR1);

  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	6b c8 00	 imul	 ecx, eax, 0
  004ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d0	52		 push	 edx
  004d1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5520 : 			}
; 5521 : 			else

  004d6	eb 14		 jmp	 SHORT $LN18@draw_weapo
$LN17@draw_weapo:

; 5522 : 			{
; 5523 : 				set_mono_font_colour (MFD_COLOUR4);

  004d8	b8 04 00 00 00	 mov	 eax, 4
  004dd	6b c8 03	 imul	 ecx, eax, 3
  004e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e6	52		 push	 edx
  004e7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN18@draw_weapo:

; 5524 : 			}
; 5525 : 
; 5526 : 			if (draw_large_mfd)

  004ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004f3	74 17		 je	 SHORT $LN19@draw_weapo

; 5527 : 			{
; 5528 : 				sprintf (s, "CHAFFx%02d", number);

  004f5	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  004f8	50		 push	 eax
  004f9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
  004fe	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00501	51		 push	 ecx
  00502	e8 00 00 00 00	 call	 _sprintf
  00507	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5529 : 			}
; 5530 : 			else

  0050a	eb 15		 jmp	 SHORT $LN20@draw_weapo
$LN19@draw_weapo:

; 5531 : 			{
; 5532 : 				sprintf (s, "Cx%02d", number);

  0050c	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  0050f	50		 push	 eax
  00510	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  00515	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00518	51		 push	 ecx
  00519	e8 00 00 00 00	 call	 _sprintf
  0051e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@draw_weapo:

; 5533 : 			}
; 5534 : 
; 5535 : 			print_mono_font_string (s);

  00521	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00524	50		 push	 eax
  00525	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5536 : 		}
; 5537 : 		else

  0052a	eb 33		 jmp	 SHORT $LN22@draw_weapo
$LN15@draw_weapo:

; 5538 : 		{
; 5539 : 			set_mono_font_colour (MFD_COLOUR4);

  0052c	b8 04 00 00 00	 mov	 eax, 4
  00531	6b c8 03	 imul	 ecx, eax, 3
  00534	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0053a	52		 push	 edx
  0053b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5540 : 
; 5541 : 			if (draw_large_mfd)

  00540	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00547	74 0c		 je	 SHORT $LN21@draw_weapo

; 5542 : 			{
; 5543 : 				print_mono_font_string ("CHAFFxXX");

  00549	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  0054e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5544 : 			}
; 5545 : 			else

  00553	eb 0a		 jmp	 SHORT $LN22@draw_weapo
$LN21@draw_weapo:

; 5546 : 			{
; 5547 : 				print_mono_font_string ("CxXX");

  00555	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  0055a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN22@draw_weapo:

; 5548 : 			}
; 5549 : 		}
; 5550 : 	}
; 5551 : 
; 5552 : 	//
; 5553 : 	// lh flare
; 5554 : 	//
; 5555 : 
; 5556 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_LHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  0055f	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00562	50		 push	 eax
  00563	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00566	51		 push	 ecx
  00567	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0056a	52		 push	 edx
  0056b	6a 44		 push	 68			; 00000044H
  0056d	6a 05		 push	 5
  0056f	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00578	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5557 : 
; 5558 : 	if (result)

  0057b	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0057f	0f 84 ca 00 00
	00		 je	 $LN31@draw_weapo

; 5559 : 	{
; 5560 : 		set_2d_mono_font_position (-0.95, 0.2);

  00585	51		 push	 ecx
  00586	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0058e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00593	51		 push	 ecx
  00594	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5561 : 
; 5562 : 		if (!damaged)

  005a6	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  005aa	75 70		 jne	 SHORT $LN24@draw_weapo

; 5563 : 		{
; 5564 : 			if (number > 0)

  005ac	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  005b0	7e 16		 jle	 SHORT $LN26@draw_weapo

; 5565 : 			{
; 5566 : 				set_mono_font_colour (MFD_COLOUR1);

  005b2	b8 04 00 00 00	 mov	 eax, 4
  005b7	6b c8 00	 imul	 ecx, eax, 0
  005ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005c0	52		 push	 edx
  005c1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5567 : 			}
; 5568 : 			else

  005c6	eb 14		 jmp	 SHORT $LN27@draw_weapo
$LN26@draw_weapo:

; 5569 : 			{
; 5570 : 				set_mono_font_colour (MFD_COLOUR4);

  005c8	b8 04 00 00 00	 mov	 eax, 4
  005cd	6b c8 03	 imul	 ecx, eax, 3
  005d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005d6	52		 push	 edx
  005d7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN27@draw_weapo:

; 5571 : 			}
; 5572 : 
; 5573 : 			if (draw_large_mfd)

  005dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  005e3	74 17		 je	 SHORT $LN28@draw_weapo

; 5574 : 			{
; 5575 : 				sprintf (s, "FLAREx%02d", number);

  005e5	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  005e8	50		 push	 eax
  005e9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NONPILJE@FLAREx?$CF02d@
  005ee	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  005f1	51		 push	 ecx
  005f2	e8 00 00 00 00	 call	 _sprintf
  005f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5576 : 			}
; 5577 : 			else

  005fa	eb 15		 jmp	 SHORT $LN29@draw_weapo
$LN28@draw_weapo:

; 5578 : 			{
; 5579 : 				sprintf (s, "Fx%02d", number);

  005fc	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  005ff	50		 push	 eax
  00600	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  00605	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00608	51		 push	 ecx
  00609	e8 00 00 00 00	 call	 _sprintf
  0060e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@draw_weapo:

; 5580 : 			}
; 5581 : 
; 5582 : 			print_mono_font_string (s);

  00611	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00614	50		 push	 eax
  00615	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5583 : 		}
; 5584 : 		else

  0061a	eb 33		 jmp	 SHORT $LN31@draw_weapo
$LN24@draw_weapo:

; 5585 : 		{
; 5586 : 			set_mono_font_colour (MFD_COLOUR4);

  0061c	b8 04 00 00 00	 mov	 eax, 4
  00621	6b c8 03	 imul	 ecx, eax, 3
  00624	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0062a	52		 push	 edx
  0062b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5587 : 
; 5588 : 			if (draw_large_mfd)

  00630	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00637	74 0c		 je	 SHORT $LN30@draw_weapo

; 5589 : 			{
; 5590 : 				print_mono_font_string ("FLARExXX");

  00639	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  0063e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5591 : 			}
; 5592 : 			else

  00643	eb 0a		 jmp	 SHORT $LN31@draw_weapo
$LN30@draw_weapo:

; 5593 : 			{
; 5594 : 				print_mono_font_string ("FxXX");

  00645	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  0064a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN31@draw_weapo:

; 5595 : 			}
; 5596 : 		}
; 5597 : 	}
; 5598 : 
; 5599 : 	//
; 5600 : 	// rh chaff
; 5601 : 	//
; 5602 : 
; 5603 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_RHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  0064f	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00652	50		 push	 eax
  00653	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00656	51		 push	 ecx
  00657	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0065a	52		 push	 edx
  0065b	6a 43		 push	 67			; 00000043H
  0065d	6a 06		 push	 6
  0065f	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00662	50		 push	 eax
  00663	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00668	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5604 : 
; 5605 : 	if (result)

  0066b	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0066f	0f 84 87 01 00
	00		 je	 $LN40@draw_weapo

; 5606 : 	{
; 5607 : 		set_2d_mono_font_position (0.95, 0.3);

  00675	51		 push	 ecx
  00676	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0067e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00683	51		 push	 ecx
  00684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0068c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00691	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5608 : 
; 5609 : 		if (!damaged)

  00696	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0069a	0f 85 af 00 00
	00		 jne	 $LN33@draw_weapo

; 5610 : 		{
; 5611 : 			if (number > 0)

  006a0	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  006a4	7e 16		 jle	 SHORT $LN35@draw_weapo

; 5612 : 			{
; 5613 : 				set_mono_font_colour (MFD_COLOUR1);

  006a6	b8 04 00 00 00	 mov	 eax, 4
  006ab	6b c8 00	 imul	 ecx, eax, 0
  006ae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006b4	52		 push	 edx
  006b5	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5614 : 			}
; 5615 : 			else

  006ba	eb 14		 jmp	 SHORT $LN36@draw_weapo
$LN35@draw_weapo:

; 5616 : 			{
; 5617 : 				set_mono_font_colour (MFD_COLOUR4);

  006bc	b8 04 00 00 00	 mov	 eax, 4
  006c1	6b c8 03	 imul	 ecx, eax, 3
  006c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN36@draw_weapo:

; 5618 : 			}
; 5619 : 
; 5620 : 			if (draw_large_mfd)

  006d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  006d7	74 17		 je	 SHORT $LN37@draw_weapo

; 5621 : 			{
; 5622 : 				sprintf (s, "CHAFFx%02d", number);

  006d9	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  006dc	50		 push	 eax
  006dd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
  006e2	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  006e5	51		 push	 ecx
  006e6	e8 00 00 00 00	 call	 _sprintf
  006eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5623 : 			}
; 5624 : 			else

  006ee	eb 15		 jmp	 SHORT $LN38@draw_weapo
$LN37@draw_weapo:

; 5625 : 			{
; 5626 : 				sprintf (s, "Cx%02d", number);

  006f0	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  006f3	50		 push	 eax
  006f4	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  006f9	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  006fc	51		 push	 ecx
  006fd	e8 00 00 00 00	 call	 _sprintf
  00702	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN38@draw_weapo:

; 5627 : 			}
; 5628 : 
; 5629 : 			x_adjust = -get_mono_font_string_width (s);

  00705	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0070e	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1092[ebp]
  00714	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1092[ebp]
  0071c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00723	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5630 : 
; 5631 : 			set_mono_font_rel_position (x_adjust, 0.0);

  00728	51		 push	 ecx
  00729	0f 57 c0	 xorps	 xmm0, xmm0
  0072c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00731	51		 push	 ecx
  00732	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00737	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5632 : 
; 5633 : 			print_mono_font_string (s);

  00741	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00744	50		 push	 eax
  00745	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5634 : 		}
; 5635 : 		else

  0074a	e9 ad 00 00 00	 jmp	 $LN40@draw_weapo
$LN33@draw_weapo:

; 5636 : 		{
; 5637 : 			set_mono_font_colour (MFD_COLOUR4);

  0074f	b8 04 00 00 00	 mov	 eax, 4
  00754	6b c8 03	 imul	 ecx, eax, 3
  00757	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075d	52		 push	 edx
  0075e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5638 : 
; 5639 : 			if (draw_large_mfd)

  00763	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0076a	74 49		 je	 SHORT $LN39@draw_weapo

; 5640 : 			{
; 5641 : 				x_adjust = -get_mono_font_string_width ("CHAFFxXX");

  0076c	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  00771	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00776	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1103[ebp]
  0077c	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1103[ebp]
  00784	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0078b	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5642 : 
; 5643 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00790	51		 push	 ecx
  00791	0f 57 c0	 xorps	 xmm0, xmm0
  00794	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00799	51		 push	 ecx
  0079a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0079f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5644 : 
; 5645 : 				print_mono_font_string ("CHAFFxXX");

  007a9	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  007ae	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5646 : 			}
; 5647 : 			else

  007b3	eb 47		 jmp	 SHORT $LN40@draw_weapo
$LN39@draw_weapo:

; 5648 : 			{
; 5649 : 				x_adjust = -get_mono_font_string_width ("CxXX");

  007b5	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  007ba	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007bf	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1111[ebp]
  007c5	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1111[ebp]
  007cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  007d4	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5650 : 
; 5651 : 				set_mono_font_rel_position (x_adjust, 0.0);

  007d9	51		 push	 ecx
  007da	0f 57 c0	 xorps	 xmm0, xmm0
  007dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e2	51		 push	 ecx
  007e3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  007e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ed	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5652 : 
; 5653 : 				print_mono_font_string ("CxXX");

  007f2	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  007f7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN40@draw_weapo:

; 5654 : 			}
; 5655 : 		}
; 5656 : 	}
; 5657 : 
; 5658 : 	//
; 5659 : 	// rh flare
; 5660 : 	//
; 5661 : 
; 5662 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_RHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  007fc	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  007ff	50		 push	 eax
  00800	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00803	51		 push	 ecx
  00804	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00807	52		 push	 edx
  00808	6a 44		 push	 68			; 00000044H
  0080a	6a 06		 push	 6
  0080c	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00815	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5663 : 
; 5664 : 	if (result)

  00818	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0081c	0f 84 87 01 00
	00		 je	 $LN49@draw_weapo

; 5665 : 	{
; 5666 : 		set_2d_mono_font_position (0.95, 0.2);

  00822	51		 push	 ecx
  00823	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0082b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00830	51		 push	 ecx
  00831	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5667 : 
; 5668 : 		if (!damaged)

  00843	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00847	0f 85 af 00 00
	00		 jne	 $LN42@draw_weapo

; 5669 : 		{
; 5670 : 			if (number > 0)

  0084d	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  00851	7e 16		 jle	 SHORT $LN44@draw_weapo

; 5671 : 			{
; 5672 : 				set_mono_font_colour (MFD_COLOUR1);

  00853	b8 04 00 00 00	 mov	 eax, 4
  00858	6b c8 00	 imul	 ecx, eax, 0
  0085b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00861	52		 push	 edx
  00862	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5673 : 			}
; 5674 : 			else

  00867	eb 14		 jmp	 SHORT $LN45@draw_weapo
$LN44@draw_weapo:

; 5675 : 			{
; 5676 : 				set_mono_font_colour (MFD_COLOUR4);

  00869	b8 04 00 00 00	 mov	 eax, 4
  0086e	6b c8 03	 imul	 ecx, eax, 3
  00871	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00877	52		 push	 edx
  00878	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN45@draw_weapo:

; 5677 : 			}
; 5678 : 
; 5679 : 			if (draw_large_mfd)

  0087d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00884	74 17		 je	 SHORT $LN46@draw_weapo

; 5680 : 			{
; 5681 : 				sprintf (s, "FLAREx%02d", number);

  00886	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00889	50		 push	 eax
  0088a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NONPILJE@FLAREx?$CF02d@
  0088f	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00892	51		 push	 ecx
  00893	e8 00 00 00 00	 call	 _sprintf
  00898	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5682 : 			}
; 5683 : 			else

  0089b	eb 15		 jmp	 SHORT $LN47@draw_weapo
$LN46@draw_weapo:

; 5684 : 			{
; 5685 : 				sprintf (s, "Fx%02d", number);

  0089d	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  008a0	50		 push	 eax
  008a1	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  008a6	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  008a9	51		 push	 ecx
  008aa	e8 00 00 00 00	 call	 _sprintf
  008af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@draw_weapo:

; 5686 : 			}
; 5687 : 
; 5688 : 			x_adjust = -get_mono_font_string_width (s);

  008b2	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  008b5	50		 push	 eax
  008b6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  008bb	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1169[ebp]
  008c1	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1169[ebp]
  008c9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008d0	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5689 : 
; 5690 : 			set_mono_font_rel_position (x_adjust, 0.0);

  008d5	51		 push	 ecx
  008d6	0f 57 c0	 xorps	 xmm0, xmm0
  008d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008de	51		 push	 ecx
  008df	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  008e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5691 : 
; 5692 : 			print_mono_font_string (s);

  008ee	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  008f1	50		 push	 eax
  008f2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5693 : 		}
; 5694 : 		else

  008f7	e9 ad 00 00 00	 jmp	 $LN49@draw_weapo
$LN42@draw_weapo:

; 5695 : 		{
; 5696 : 			set_mono_font_colour (MFD_COLOUR4);

  008fc	b8 04 00 00 00	 mov	 eax, 4
  00901	6b c8 03	 imul	 ecx, eax, 3
  00904	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0090a	52		 push	 edx
  0090b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5697 : 
; 5698 : 			if (draw_large_mfd)

  00910	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00917	74 49		 je	 SHORT $LN48@draw_weapo

; 5699 : 			{
; 5700 : 				x_adjust = -get_mono_font_string_width ("FLARExXX");

  00919	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  0091e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00923	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1180[ebp]
  00929	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1180[ebp]
  00931	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00938	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5701 : 
; 5702 : 				set_mono_font_rel_position (x_adjust, 0.0);

  0093d	51		 push	 ecx
  0093e	0f 57 c0	 xorps	 xmm0, xmm0
  00941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00946	51		 push	 ecx
  00947	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0094c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00951	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5703 : 
; 5704 : 				print_mono_font_string ("FLARExXX");

  00956	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  0095b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5705 : 			}
; 5706 : 			else

  00960	eb 47		 jmp	 SHORT $LN49@draw_weapo
$LN48@draw_weapo:

; 5707 : 			{
; 5708 : 				x_adjust = -get_mono_font_string_width ("FxXX");

  00962	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00967	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0096c	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1188[ebp]
  00972	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1188[ebp]
  0097a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00981	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5709 : 
; 5710 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00986	51		 push	 ecx
  00987	0f 57 c0	 xorps	 xmm0, xmm0
  0098a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098f	51		 push	 ecx
  00990	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00995	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5711 : 
; 5712 : 				print_mono_font_string ("FxXX");

  0099f	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  009a4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN49@draw_weapo:

; 5713 : 			}
; 5714 : 		}
; 5715 : 	}
; 5716 : 
; 5717 : 	////////////////////////////////////////
; 5718 : 	//
; 5719 : 	// cannon
; 5720 : 	//
; 5721 : 	////////////////////////////////////////
; 5722 : 
; 5723 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_2A42_30MM_HE_ROUND, &weapon_sub_type, &number, &damaged);

  009a9	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  009ac	50		 push	 eax
  009ad	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  009b0	51		 push	 ecx
  009b1	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  009b4	52		 push	 edx
  009b5	6a 13		 push	 19			; 00000013H
  009b7	6a 00		 push	 0
  009b9	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  009bc	50		 push	 eax
  009bd	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  009c2	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5724 : 
; 5725 : 	if (result)

  009c5	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  009c9	0f 84 af 00 00
	00		 je	 $LN50@draw_weapo

; 5726 : 	{
; 5727 : 		//
; 5728 : 		// selected weapon
; 5729 : 		//
; 5730 : 
; 5731 : 		if (weapon_sub_type == selected_weapon)

  009cf	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  009d2	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  009d5	75 16		 jne	 SHORT $LN51@draw_weapo

; 5732 : 		{
; 5733 : 			set_mono_font_colour (MFD_COLOUR1);

  009d7	b8 04 00 00 00	 mov	 eax, 4
  009dc	6b c8 00	 imul	 ecx, eax, 0
  009df	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e5	52		 push	 edx
  009e6	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5734 : 		}
; 5735 : 		else

  009eb	eb 14		 jmp	 SHORT $LN52@draw_weapo
$LN51@draw_weapo:

; 5736 : 		{
; 5737 : 			set_mono_font_colour (MFD_COLOUR4);

  009ed	b8 04 00 00 00	 mov	 eax, 4
  009f2	6b c8 03	 imul	 ecx, eax, 3
  009f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009fb	52		 push	 edx
  009fc	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN52@draw_weapo:

; 5738 : 		}
; 5739 : 
; 5740 : 		//
; 5741 : 		// weapon name and number
; 5742 : 		//
; 5743 : 
; 5744 : 		sprintf (s, "HEx%03d", number);

  00a01	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00a04	50		 push	 eax
  00a05	68 00 00 00 00	 push	 OFFSET ??_C@_07EPFBIBAD@HEx?$CF03d@
  00a0a	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00a0d	51		 push	 ecx
  00a0e	e8 00 00 00 00	 call	 _sprintf
  00a13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5745 : 
; 5746 : 		set_2d_mono_font_position (0.0, -0.4);

  00a16	51		 push	 ecx
  00a17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00a1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a24	51		 push	 ecx
  00a25	0f 57 c0	 xorps	 xmm0, xmm0
  00a28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5747 : 
; 5748 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00a32	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a35	50		 push	 eax
  00a36	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a3b	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1214[ebp]
  00a41	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1214[ebp]
  00a49	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00a51	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a55	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5749 : 
; 5750 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  00a5a	51		 push	 ecx
  00a5b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00a60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a65	51		 push	 ecx
  00a66	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00a6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a70	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5751 : 
; 5752 : 		print_mono_font_string (s);

  00a75	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a78	50		 push	 eax
  00a79	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN50@draw_weapo:

; 5753 : 	}
; 5754 : 
; 5755 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_2A42_30MM_AP_ROUND, &weapon_sub_type, &number, &damaged);

  00a7e	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00a81	50		 push	 eax
  00a82	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00a85	51		 push	 ecx
  00a86	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00a89	52		 push	 edx
  00a8a	6a 14		 push	 20			; 00000014H
  00a8c	6a 00		 push	 0
  00a8e	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00a91	50		 push	 eax
  00a92	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00a97	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5756 : 
; 5757 : 	if (result)

  00a9a	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00a9e	0f 84 43 03 00
	00		 je	 $LN59@draw_weapo

; 5758 : 	{
; 5759 : 		//
; 5760 : 		// selected weapon
; 5761 : 		//
; 5762 : 
; 5763 : 		if (weapon_sub_type == selected_weapon)

  00aa4	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00aa7	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00aaa	75 16		 jne	 SHORT $LN54@draw_weapo

; 5764 : 		{
; 5765 : 			set_mono_font_colour (MFD_COLOUR1);

  00aac	b8 04 00 00 00	 mov	 eax, 4
  00ab1	6b c8 00	 imul	 ecx, eax, 0
  00ab4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00aba	52		 push	 edx
  00abb	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5766 : 		}
; 5767 : 		else

  00ac0	eb 14		 jmp	 SHORT $LN55@draw_weapo
$LN54@draw_weapo:

; 5768 : 		{
; 5769 : 			set_mono_font_colour (MFD_COLOUR4);

  00ac2	b8 04 00 00 00	 mov	 eax, 4
  00ac7	6b c8 03	 imul	 ecx, eax, 3
  00aca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ad0	52		 push	 edx
  00ad1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN55@draw_weapo:

; 5770 : 		}
; 5771 : 
; 5772 : 		//
; 5773 : 		// weapon name and number
; 5774 : 		//
; 5775 : 
; 5776 : 		sprintf (s, "APx%03d", number);

  00ad6	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00ad9	50		 push	 eax
  00ada	68 00 00 00 00	 push	 OFFSET ??_C@_07GFPICJEB@APx?$CF03d@
  00adf	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00ae2	51		 push	 ecx
  00ae3	e8 00 00 00 00	 call	 _sprintf
  00ae8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5777 : 
; 5778 : 		set_2d_mono_font_position (0.0, -0.5);

  00aeb	51		 push	 ecx
  00aec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	51		 push	 ecx
  00afa	0f 57 c0	 xorps	 xmm0, xmm0
  00afd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b02	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5779 : 
; 5780 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00b07	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b0a	50		 push	 eax
  00b0b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b10	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1241[ebp]
  00b16	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1241[ebp]
  00b1e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b26	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b2a	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5781 : 
; 5782 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  00b2f	51		 push	 ecx
  00b30	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3a	51		 push	 ecx
  00b3b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b45	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5783 : 
; 5784 : 		print_mono_font_string (s);

  00b4a	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b4d	50		 push	 eax
  00b4e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5785 : 
; 5786 : 		//
; 5787 : 		// lines
; 5788 : 		//
; 5789 : 
; 5790 : 		if (draw_large_mfd)

  00b53	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b5a	0f 84 46 01 00
	00		 je	 $LN56@draw_weapo

; 5791 : 		{
; 5792 : 			draw_2d_half_thick_line (0.2375, -0.26, 0.2375, -0.425, MFD_COLOUR_YELLOW);

  00b60	b8 04 00 00 00	 mov	 eax, 4
  00b65	6b c8 0f	 imul	 ecx, eax, 15
  00b68	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b6e	52		 push	 edx
  00b6f	51		 push	 ecx
  00b70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed9999a
  00b78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7d	51		 push	 ecx
  00b7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  00b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8b	51		 push	 ecx
  00b8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  00b94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b99	51		 push	 ecx
  00b9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  00ba2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba7	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5793 : 
; 5794 : 			draw_2d_half_thick_line (0.1875, -0.425, 0.2375, -0.425, MFD_COLOUR_YELLOW);

  00bac	b8 04 00 00 00	 mov	 eax, 4
  00bb1	6b c8 0f	 imul	 ecx, eax, 15
  00bb4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bba	52		 push	 edx
  00bbb	51		 push	 ecx
  00bbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed9999a
  00bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc9	51		 push	 ecx
  00bca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  00bd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd7	51		 push	 ecx
  00bd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed9999a
  00be0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be5	51		 push	 ecx
  00be6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e400000
  00bee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf3	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5795 : 
; 5796 : 			if (hokum_damage.gun_jammed)

  00bf8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00bfd	c1 e8 17	 shr	 eax, 23			; 00000017H
  00c00	83 e0 01	 and	 eax, 1
  00c03	0f 84 98 00 00
	00		 je	 $LN58@draw_weapo

; 5797 : 			{
; 5798 : 				draw_2d_half_thick_line (0.2375 - 0.05, -0.215 - 0.05, 0.2375 + 0.05, -0.215 + 0.05, MFD_COLOUR1);

  00c09	b8 04 00 00 00	 mov	 eax, 4
  00c0e	6b c8 00	 imul	 ecx, eax, 0
  00c11	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c17	52		 push	 edx
  00c18	51		 push	 ecx
  00c19	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be28f5c3
  00c21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c26	51		 push	 ecx
  00c27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00c2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c34	51		 push	 ecx
  00c35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be87ae14
  00c3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c42	51		 push	 ecx
  00c43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e400000
  00c4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c50	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5799 : 
; 5800 : 				draw_2d_half_thick_line (0.2375 + 0.05, -0.215 - 0.05, 0.2375 - 0.05, -0.215 + 0.05, MFD_COLOUR1);

  00c55	b8 04 00 00 00	 mov	 eax, 4
  00c5a	6b c8 00	 imul	 ecx, eax, 0
  00c5d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c63	52		 push	 edx
  00c64	51		 push	 ecx
  00c65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be28f5c3
  00c6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c72	51		 push	 ecx
  00c73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e400000
  00c7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c80	51		 push	 ecx
  00c81	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be87ae14
  00c89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8e	51		 push	 ecx
  00c8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00c97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9c	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN58@draw_weapo:

; 5801 : 			}
; 5802 : 		}
; 5803 : 		else

  00ca1	e9 41 01 00 00	 jmp	 $LN59@draw_weapo
$LN56@draw_weapo:

; 5804 : 		{
; 5805 : 			draw_2d_line (0.233, -0.27, 0.233, -0.42, MFD_COLOUR_YELLOW);

  00ca6	b8 04 00 00 00	 mov	 eax, 4
  00cab	6b c8 0f	 imul	 ecx, eax, 15
  00cae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cb4	52		 push	 edx
  00cb5	51		 push	 ecx
  00cb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  00cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc3	51		 push	 ecx
  00cc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6e978d
  00ccc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd1	51		 push	 ecx
  00cd2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  00cda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdf	51		 push	 ecx
  00ce0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6e978d
  00ce8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ced	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5806 : 
; 5807 : 			draw_2d_line (0.2, -0.42, 0.233, -0.42, MFD_COLOUR_YELLOW);

  00cf2	b8 04 00 00 00	 mov	 eax, 4
  00cf7	6b c8 0f	 imul	 ecx, eax, 15
  00cfa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d00	52		 push	 edx
  00d01	51		 push	 ecx
  00d02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  00d0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0f	51		 push	 ecx
  00d10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6e978d
  00d18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1d	51		 push	 ecx
  00d1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  00d26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2b	51		 push	 ecx
  00d2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00d34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d39	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5808 : 
; 5809 : 			if (hokum_damage.gun_jammed)

  00d3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00d43	c1 e8 17	 shr	 eax, 23			; 00000017H
  00d46	83 e0 01	 and	 eax, 1
  00d49	0f 84 98 00 00
	00		 je	 $LN59@draw_weapo

; 5810 : 			{
; 5811 : 				draw_2d_line (0.235 - 0.05, -0.22 - 0.05, 0.235 + 0.05, -0.22 + 0.05, MFD_COLOUR1);

  00d4f	b8 04 00 00 00	 mov	 eax, 4
  00d54	6b c8 00	 imul	 ecx, eax, 0
  00d57	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d5d	52		 push	 edx
  00d5e	51		 push	 ecx
  00d5f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  00d67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6c	51		 push	 ecx
  00d6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e91eb85
  00d75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7a	51		 push	 ecx
  00d7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  00d83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d88	51		 push	 ecx
  00d89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3d70a4
  00d91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d96	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5812 : 
; 5813 : 				draw_2d_line (0.235 + 0.05, -0.22 - 0.05, 0.235 - 0.05, -0.22 + 0.05, MFD_COLOUR1);

  00d9b	b8 04 00 00 00	 mov	 eax, 4
  00da0	6b c8 00	 imul	 ecx, eax, 0
  00da3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00da9	52		 push	 edx
  00daa	51		 push	 ecx
  00dab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  00db3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db8	51		 push	 ecx
  00db9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3d70a4
  00dc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc6	51		 push	 ecx
  00dc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  00dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd4	51		 push	 ecx
  00dd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e91eb85
  00ddd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN59@draw_weapo:

; 5814 : 			}
; 5815 : 		}
; 5816 : 	}
; 5817 : 
; 5818 : 	////////////////////////////////////////
; 5819 : 	//
; 5820 : 	// lh inner pylon
; 5821 : 	//
; 5822 : 	////////////////////////////////////////
; 5823 : 
; 5824 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  00de7	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00dea	50		 push	 eax
  00deb	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00dee	51		 push	 ecx
  00def	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00df2	52		 push	 edx
  00df3	6a 00		 push	 0
  00df5	6a 01		 push	 1
  00df7	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00dfa	50		 push	 eax
  00dfb	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00e00	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5825 : 
; 5826 : 	if (result)

  00e03	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00e07	0f 84 f7 02 00
	00		 je	 $LN66@draw_weapo

; 5827 : 	{
; 5828 : 		//
; 5829 : 		// selected weapon
; 5830 : 		//
; 5831 : 
; 5832 : 		if (weapon_sub_type == selected_weapon)

  00e0d	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e10	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e13	75 16		 jne	 SHORT $LN61@draw_weapo

; 5833 : 		{
; 5834 : 			set_mono_font_colour (MFD_COLOUR1);

  00e15	b8 04 00 00 00	 mov	 eax, 4
  00e1a	6b c8 00	 imul	 ecx, eax, 0
  00e1d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e23	52		 push	 edx
  00e24	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5835 : 		}
; 5836 : 		else

  00e29	eb 14		 jmp	 SHORT $LN62@draw_weapo
$LN61@draw_weapo:

; 5837 : 		{
; 5838 : 			set_mono_font_colour (MFD_COLOUR4);

  00e2b	b8 04 00 00 00	 mov	 eax, 4
  00e30	6b c8 03	 imul	 ecx, eax, 3
  00e33	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e39	52		 push	 edx
  00e3a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN62@draw_weapo:

; 5839 : 		}
; 5840 : 
; 5841 : 		//
; 5842 : 		// number
; 5843 : 		//
; 5844 : 
; 5845 : 		sprintf (s, "x%02d", number);

  00e3f	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00e42	50		 push	 eax
  00e43	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  00e48	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00e4b	51		 push	 ecx
  00e4c	e8 00 00 00 00	 call	 _sprintf
  00e51	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5846 : 
; 5847 : 		set_2d_mono_font_position (-0.45, -0.6);

  00e54	51		 push	 ecx
  00e55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e62	51		 push	 ecx
  00e63	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00e6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e70	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5848 : 
; 5849 : 		print_mono_font_string (s);

  00e75	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e78	50		 push	 eax
  00e79	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5850 : 
; 5851 : 		//
; 5852 : 		// lines
; 5853 : 		//
; 5854 : 
; 5855 : 		if (draw_large_mfd)

  00e7e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00e85	0f 84 3f 01 00
	00		 je	 $LN63@draw_weapo

; 5856 : 		{
; 5857 : 			draw_2d_half_thick_line (-0.52, -0.14, -0.52, -0.63, MFD_COLOUR_YELLOW);

  00e8b	b8 04 00 00 00	 mov	 eax, 4
  00e90	6b c8 0f	 imul	 ecx, eax, 15
  00e93	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e99	52		 push	 edx
  00e9a	51		 push	 ecx
  00e9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00ea3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea8	51		 push	 ecx
  00ea9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00eb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb6	51		 push	 ecx
  00eb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  00ebf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec4	51		 push	 ecx
  00ec5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00ecd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed2	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5858 : 
; 5859 : 			draw_2d_half_thick_line (-0.47, -0.63, -0.52, -0.63, MFD_COLOUR_YELLOW);

  00ed7	b8 04 00 00 00	 mov	 eax, 4
  00edc	6b c8 0f	 imul	 ecx, eax, 15
  00edf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ee5	52		 push	 edx
  00ee6	51		 push	 ecx
  00ee7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00eef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef4	51		 push	 ecx
  00ef5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00efd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f02	51		 push	 ecx
  00f03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00f0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f10	51		 push	 ecx
  00f11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  00f19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1e	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5860 : 
; 5861 : 			if (damaged)

  00f23	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f27	0f 84 98 00 00
	00		 je	 $LN65@draw_weapo

; 5862 : 			{
; 5863 : 				draw_2d_half_thick_line (-0.52 - 0.05, -0.07 - 0.05, -0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  00f2d	b8 04 00 00 00	 mov	 eax, 4
  00f32	6b c8 00	 imul	 ecx, eax, 0
  00f35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f3b	52		 push	 edx
  00f3c	51		 push	 ecx
  00f3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  00f45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4a	51		 push	 ecx
  00f4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  00f53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f58	51		 push	 ecx
  00f59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  00f61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f66	51		 push	 ecx
  00f67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  00f6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f74	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5864 : 
; 5865 : 				draw_2d_half_thick_line (-0.52 + 0.05, -0.07 - 0.05, -0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  00f79	b8 04 00 00 00	 mov	 eax, 4
  00f7e	6b c8 00	 imul	 ecx, eax, 0
  00f81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f87	52		 push	 edx
  00f88	51		 push	 ecx
  00f89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  00f91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f96	51		 push	 ecx
  00f97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  00f9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa4	51		 push	 ecx
  00fa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	51		 push	 ecx
  00fb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  00fbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc0	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN65@draw_weapo:

; 5866 : 			}
; 5867 : 		}
; 5868 : 		else

  00fc5	e9 3a 01 00 00	 jmp	 $LN66@draw_weapo
$LN63@draw_weapo:

; 5869 : 		{
; 5870 : 			draw_2d_line (-0.52, -0.16, -0.52, -0.63, MFD_COLOUR_YELLOW);

  00fca	b8 04 00 00 00	 mov	 eax, 4
  00fcf	6b c8 0f	 imul	 ecx, eax, 15
  00fd2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fd8	52		 push	 edx
  00fd9	51		 push	 ecx
  00fda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00fe2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe7	51		 push	 ecx
  00fe8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00ff0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff5	51		 push	 ecx
  00ff6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00ffe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01003	51		 push	 ecx
  01004	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  0100c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01011	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5871 : 
; 5872 : 			draw_2d_line (-0.47, -0.63, -0.52, -0.63, MFD_COLOUR_YELLOW);

  01016	b8 04 00 00 00	 mov	 eax, 4
  0101b	6b c8 0f	 imul	 ecx, eax, 15
  0101e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01024	52		 push	 edx
  01025	51		 push	 ecx
  01026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0102e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01033	51		 push	 ecx
  01034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  0103c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01041	51		 push	 ecx
  01042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0104a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104f	51		 push	 ecx
  01050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0105d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5873 : 
; 5874 : 			if (damaged)

  01062	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01066	0f 84 98 00 00
	00		 je	 $LN66@draw_weapo

; 5875 : 			{
; 5876 : 				draw_2d_line (-0.52 - 0.05, -0.07 - 0.05, -0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0106c	b8 04 00 00 00	 mov	 eax, 4
  01071	6b c8 00	 imul	 ecx, eax, 0
  01074	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0107a	52		 push	 edx
  0107b	51		 push	 ecx
  0107c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01089	51		 push	 ecx
  0108a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01097	51		 push	 ecx
  01098	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  010a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a5	51		 push	 ecx
  010a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  010ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5877 : 
; 5878 : 				draw_2d_line (-0.52 + 0.05, -0.07 - 0.05, -0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  010b8	b8 04 00 00 00	 mov	 eax, 4
  010bd	6b c8 00	 imul	 ecx, eax, 0
  010c0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010c6	52		 push	 edx
  010c7	51		 push	 ecx
  010c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  010d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d5	51		 push	 ecx
  010d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  010de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e3	51		 push	 ecx
  010e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  010ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f1	51		 push	 ecx
  010f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  010fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ff	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN66@draw_weapo:

; 5879 : 			}
; 5880 : 		}
; 5881 : 	}
; 5882 : 
; 5883 : 	////////////////////////////////////////
; 5884 : 	//
; 5885 : 	// rh inner pylon
; 5886 : 	//
; 5887 : 	////////////////////////////////////////
; 5888 : 
; 5889 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01104	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01107	50		 push	 eax
  01108	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0110b	51		 push	 ecx
  0110c	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0110f	52		 push	 edx
  01110	6a 00		 push	 0
  01112	6a 02		 push	 2
  01114	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  01117	50		 push	 eax
  01118	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0111d	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5890 : 
; 5891 : 	if (result)

  01120	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01124	0f 84 ad 03 00
	00		 je	 $LN73@draw_weapo

; 5892 : 	{
; 5893 : 		//
; 5894 : 		// selected weapon
; 5895 : 		//
; 5896 : 
; 5897 : 		if (weapon_sub_type == selected_weapon)

  0112a	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0112d	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01130	75 16		 jne	 SHORT $LN68@draw_weapo

; 5898 : 		{
; 5899 : 			set_mono_font_colour (MFD_COLOUR1);

  01132	b8 04 00 00 00	 mov	 eax, 4
  01137	6b c8 00	 imul	 ecx, eax, 0
  0113a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01140	52		 push	 edx
  01141	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5900 : 		}
; 5901 : 		else

  01146	eb 14		 jmp	 SHORT $LN69@draw_weapo
$LN68@draw_weapo:

; 5902 : 		{
; 5903 : 			set_mono_font_colour (MFD_COLOUR4);

  01148	b8 04 00 00 00	 mov	 eax, 4
  0114d	6b c8 03	 imul	 ecx, eax, 3
  01150	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01156	52		 push	 edx
  01157	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN69@draw_weapo:

; 5904 : 		}
; 5905 : 
; 5906 : 		//
; 5907 : 		// number
; 5908 : 		//
; 5909 : 
; 5910 : 		sprintf (s, "x%02d", number);

  0115c	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  0115f	50		 push	 eax
  01160	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01165	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01168	51		 push	 ecx
  01169	e8 00 00 00 00	 call	 _sprintf
  0116e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5911 : 
; 5912 : 		set_2d_mono_font_position (0.45, -0.6);

  01171	51		 push	 ecx
  01172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0117a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117f	51		 push	 ecx
  01180	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5913 : 
; 5914 : 		x_adjust = -get_mono_font_string_width (s);

  01192	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01195	50		 push	 eax
  01196	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0119b	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1446[ebp]
  011a1	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1446[ebp]
  011a9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011b0	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5915 : 
; 5916 : 		set_mono_font_rel_position (x_adjust, 0.0);

  011b5	51		 push	 ecx
  011b6	0f 57 c0	 xorps	 xmm0, xmm0
  011b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011be	51		 push	 ecx
  011bf	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  011c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5917 : 
; 5918 : 		print_mono_font_string (s);

  011ce	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  011d1	50		 push	 eax
  011d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5919 : 
; 5920 : 		//
; 5921 : 		// weapon name
; 5922 : 		//
; 5923 : 
; 5924 : 		set_2d_mono_font_position (0.0, -0.6);

  011d7	51		 push	 ecx
  011d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  011e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e5	51		 push	 ecx
  011e6	0f 57 c0	 xorps	 xmm0, xmm0
  011e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ee	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5925 : 
; 5926 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  011f3	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  011fa	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01200	51		 push	 ecx
  01201	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01206	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1461[ebp]
  0120c	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1461[ebp]
  01214	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0121c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01220	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5927 : 
; 5928 : 		set_mono_font_rel_position (x_adjust, 0.0);

  01225	51		 push	 ecx
  01226	0f 57 c0	 xorps	 xmm0, xmm0
  01229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122e	51		 push	 ecx
  0122f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01239	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5929 : 
; 5930 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  0123e	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01245	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  0124b	51		 push	 ecx
  0124c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5931 : 
; 5932 : 		//
; 5933 : 		// lines
; 5934 : 		//
; 5935 : 
; 5936 : 		if (draw_large_mfd)

  01251	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01258	0f 84 3f 01 00
	00		 je	 $LN70@draw_weapo

; 5937 : 		{
; 5938 : 			draw_2d_half_thick_line (0.52, -0.14, 0.52, -0.63, MFD_COLOUR_YELLOW);

  0125e	b8 04 00 00 00	 mov	 eax, 4
  01263	6b c8 0f	 imul	 ecx, eax, 15
  01266	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0126c	52		 push	 edx
  0126d	51		 push	 ecx
  0126e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  01276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0127b	51		 push	 ecx
  0127c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  01284	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01289	51		 push	 ecx
  0128a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  01292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01297	51		 push	 ecx
  01298	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  012a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a5	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5939 : 
; 5940 : 			draw_2d_half_thick_line (0.47, -0.63, 0.52, -0.63, MFD_COLOUR_YELLOW);

  012aa	b8 04 00 00 00	 mov	 eax, 4
  012af	6b c8 0f	 imul	 ecx, eax, 15
  012b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012b8	52		 push	 edx
  012b9	51		 push	 ecx
  012ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  012c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c7	51		 push	 ecx
  012c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  012d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d5	51		 push	 ecx
  012d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  012de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e3	51		 push	 ecx
  012e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  012ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f1	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5941 : 
; 5942 : 			if (damaged)

  012f6	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  012fa	0f 84 98 00 00
	00		 je	 $LN72@draw_weapo

; 5943 : 			{
; 5944 : 				draw_2d_half_thick_line (0.52 - 0.05, -0.07 - 0.05, 0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01300	b8 04 00 00 00	 mov	 eax, 4
  01305	6b c8 00	 imul	 ecx, eax, 0
  01308	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0130e	52		 push	 edx
  0130f	51		 push	 ecx
  01310	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01318	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0131d	51		 push	 ecx
  0131e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  01326	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132b	51		 push	 ecx
  0132c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01339	51		 push	 ecx
  0133a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01347	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5945 : 
; 5946 : 				draw_2d_half_thick_line (0.52 + 0.05, -0.07 - 0.05, 0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0134c	b8 04 00 00 00	 mov	 eax, 4
  01351	6b c8 00	 imul	 ecx, eax, 0
  01354	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0135a	52		 push	 edx
  0135b	51		 push	 ecx
  0135c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01369	51		 push	 ecx
  0136a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01372	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01377	51		 push	 ecx
  01378	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01385	51		 push	 ecx
  01386	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  0138e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01393	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN72@draw_weapo:

; 5947 : 			}
; 5948 : 		}
; 5949 : 		else

  01398	e9 3a 01 00 00	 jmp	 $LN73@draw_weapo
$LN70@draw_weapo:

; 5950 : 		{
; 5951 : 			draw_2d_line (0.52, -0.16, 0.52, -0.63, MFD_COLOUR_YELLOW);

  0139d	b8 04 00 00 00	 mov	 eax, 4
  013a2	6b c8 0f	 imul	 ecx, eax, 15
  013a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013ab	52		 push	 edx
  013ac	51		 push	 ecx
  013ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  013b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ba	51		 push	 ecx
  013bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  013c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c8	51		 push	 ecx
  013c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  013d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d6	51		 push	 ecx
  013d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  013df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5952 : 
; 5953 : 			draw_2d_line (0.47, -0.63, 0.52, -0.63, MFD_COLOUR_YELLOW);

  013e9	b8 04 00 00 00	 mov	 eax, 4
  013ee	6b c8 0f	 imul	 ecx, eax, 15
  013f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013f7	52		 push	 edx
  013f8	51		 push	 ecx
  013f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  01401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01406	51		 push	 ecx
  01407	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  0140f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01414	51		 push	 ecx
  01415	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0141d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01422	51		 push	 ecx
  01423	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  0142b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01430	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5954 : 
; 5955 : 			if (damaged)

  01435	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01439	0f 84 98 00 00
	00		 je	 $LN73@draw_weapo

; 5956 : 			{
; 5957 : 				draw_2d_line (0.52 - 0.05, -0.07 - 0.05, 0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0143f	b8 04 00 00 00	 mov	 eax, 4
  01444	6b c8 00	 imul	 ecx, eax, 0
  01447	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0144d	52		 push	 edx
  0144e	51		 push	 ecx
  0144f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0145c	51		 push	 ecx
  0145d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  01465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146a	51		 push	 ecx
  0146b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01478	51		 push	 ecx
  01479	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01486	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5958 : 
; 5959 : 				draw_2d_line (0.52 + 0.05, -0.07 - 0.05, 0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0148b	b8 04 00 00 00	 mov	 eax, 4
  01490	6b c8 00	 imul	 ecx, eax, 0
  01493	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01499	52		 push	 edx
  0149a	51		 push	 ecx
  0149b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  014a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a8	51		 push	 ecx
  014a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  014b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b6	51		 push	 ecx
  014b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  014bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c4	51		 push	 ecx
  014c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  014cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN73@draw_weapo:

; 5960 : 			}
; 5961 : 		}
; 5962 : 	}
; 5963 : 
; 5964 : 	////////////////////////////////////////
; 5965 : 	//
; 5966 : 	// lh outer pylons
; 5967 : 	//
; 5968 : 	////////////////////////////////////////
; 5969 : 
; 5970 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  014d7	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  014da	50		 push	 eax
  014db	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  014de	51		 push	 ecx
  014df	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  014e2	52		 push	 edx
  014e3	6a 00		 push	 0
  014e5	6a 03		 push	 3
  014e7	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  014ea	50		 push	 eax
  014eb	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  014f0	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 5971 : 
; 5972 : 	if (result)

  014f3	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  014f7	0f 84 10 03 00
	00		 je	 $LN80@draw_weapo

; 5973 : 	{
; 5974 : 		//
; 5975 : 		// selected weapon
; 5976 : 		//
; 5977 : 
; 5978 : 		if (weapon_sub_type == selected_weapon)

  014fd	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01500	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01503	75 16		 jne	 SHORT $LN75@draw_weapo

; 5979 : 		{
; 5980 : 			set_mono_font_colour (MFD_COLOUR1);

  01505	b8 04 00 00 00	 mov	 eax, 4
  0150a	6b c8 00	 imul	 ecx, eax, 0
  0150d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01513	52		 push	 edx
  01514	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5981 : 		}
; 5982 : 		else

  01519	eb 14		 jmp	 SHORT $LN76@draw_weapo
$LN75@draw_weapo:

; 5983 : 		{
; 5984 : 			set_mono_font_colour (MFD_COLOUR4);

  0151b	b8 04 00 00 00	 mov	 eax, 4
  01520	6b c8 03	 imul	 ecx, eax, 3
  01523	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01529	52		 push	 edx
  0152a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN76@draw_weapo:

; 5985 : 		}
; 5986 : 
; 5987 : 		//
; 5988 : 		// number
; 5989 : 		//
; 5990 : 
; 5991 : 		sprintf (s, "x%02d", number);

  0152f	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01532	50		 push	 eax
  01533	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01538	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0153b	51		 push	 ecx
  0153c	e8 00 00 00 00	 call	 _sprintf
  01541	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5992 : 
; 5993 : 		set_2d_mono_font_position (-0.45, -0.8);

  01544	51		 push	 ecx
  01545	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0154d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01552	51		 push	 ecx
  01553	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  0155b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01560	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5994 : 
; 5995 : 		set_mono_font_rel_position (0.0, y_adjust);

  01565	51		 push	 ecx
  01566	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0156b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01570	51		 push	 ecx
  01571	0f 57 c0	 xorps	 xmm0, xmm0
  01574	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01579	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5996 : 
; 5997 : 		print_mono_font_string (s);

  0157e	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01581	50		 push	 eax
  01582	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5998 : 
; 5999 : 		//
; 6000 : 		// lines
; 6001 : 		//
; 6002 : 
; 6003 : 		if (draw_large_mfd)

  01587	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0158e	0f 84 3f 01 00
	00		 je	 $LN77@draw_weapo

; 6004 : 		{
; 6005 : 			draw_2d_half_thick_line (-0.695, -0.14, -0.695, -0.785, MFD_COLOUR_YELLOW);

  01594	b8 04 00 00 00	 mov	 eax, 4
  01599	6b c8 0f	 imul	 ecx, eax, 15
  0159c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015a2	52		 push	 edx
  015a3	51		 push	 ecx
  015a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  015ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b1	51		 push	 ecx
  015b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  015ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bf	51		 push	 ecx
  015c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  015c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015cd	51		 push	 ecx
  015ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  015d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015db	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6006 : 
; 6007 : 			draw_2d_half_thick_line (-0.47, -0.785, -0.695, -0.785, MFD_COLOUR_YELLOW);

  015e0	b8 04 00 00 00	 mov	 eax, 4
  015e5	6b c8 0f	 imul	 ecx, eax, 15
  015e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015ee	52		 push	 edx
  015ef	51		 push	 ecx
  015f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  015f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015fd	51		 push	 ecx
  015fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  01606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160b	51		 push	 ecx
  0160c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01619	51		 push	 ecx
  0161a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01627	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6008 : 
; 6009 : 			if (damaged)

  0162c	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01630	0f 84 98 00 00
	00		 je	 $LN79@draw_weapo

; 6010 : 			{
; 6011 : 				draw_2d_half_thick_line (-0.695 - 0.05, -0.07 - 0.05, -0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01636	b8 04 00 00 00	 mov	 eax, 4
  0163b	6b c8 00	 imul	 ecx, eax, 0
  0163e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01644	52		 push	 edx
  01645	51		 push	 ecx
  01646	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  0164e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01653	51		 push	 ecx
  01654	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  0165c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01661	51		 push	 ecx
  01662	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  0166a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166f	51		 push	 ecx
  01670	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  01678	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0167d	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6012 : 
; 6013 : 				draw_2d_half_thick_line (-0.695 + 0.05, -0.07 - 0.05, -0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01682	b8 04 00 00 00	 mov	 eax, 4
  01687	6b c8 00	 imul	 ecx, eax, 0
  0168a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01690	52		 push	 edx
  01691	51		 push	 ecx
  01692	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  0169a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169f	51		 push	 ecx
  016a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  016a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ad	51		 push	 ecx
  016ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  016b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016bb	51		 push	 ecx
  016bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  016c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c9	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN79@draw_weapo:

; 6014 : 			}
; 6015 : 		}
; 6016 : 		else

  016ce	e9 3a 01 00 00	 jmp	 $LN80@draw_weapo
$LN77@draw_weapo:

; 6017 : 		{
; 6018 : 			draw_2d_line (-0.695, -0.16, -0.695, -0.785, MFD_COLOUR_YELLOW);

  016d3	b8 04 00 00 00	 mov	 eax, 4
  016d8	6b c8 0f	 imul	 ecx, eax, 15
  016db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016e1	52		 push	 edx
  016e2	51		 push	 ecx
  016e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  016eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f0	51		 push	 ecx
  016f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  016f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016fe	51		 push	 ecx
  016ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01707	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0170c	51		 push	 ecx
  0170d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  01715	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6019 : 
; 6020 : 			draw_2d_line (-0.47, -0.785, -0.695, -0.785, MFD_COLOUR_YELLOW);

  0171f	b8 04 00 00 00	 mov	 eax, 4
  01724	6b c8 0f	 imul	 ecx, eax, 15
  01727	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0172d	52		 push	 edx
  0172e	51		 push	 ecx
  0172f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01737	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0173c	51		 push	 ecx
  0173d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  01745	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0174a	51		 push	 ecx
  0174b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01753	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01758	51		 push	 ecx
  01759	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01766	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6021 : 
; 6022 : 			if (damaged)

  0176b	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0176f	0f 84 98 00 00
	00		 je	 $LN80@draw_weapo

; 6023 : 			{
; 6024 : 				draw_2d_line (-0.695 - 0.05, -0.07 - 0.05, -0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01775	b8 04 00 00 00	 mov	 eax, 4
  0177a	6b c8 00	 imul	 ecx, eax, 0
  0177d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01783	52		 push	 edx
  01784	51		 push	 ecx
  01785	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  0178d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01792	51		 push	 ecx
  01793	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  0179b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a0	51		 push	 ecx
  017a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  017a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ae	51		 push	 ecx
  017af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  017b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017bc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6025 : 
; 6026 : 				draw_2d_line (-0.695 + 0.05, -0.07 - 0.05, -0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  017c1	b8 04 00 00 00	 mov	 eax, 4
  017c6	6b c8 00	 imul	 ecx, eax, 0
  017c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017cf	52		 push	 edx
  017d0	51		 push	 ecx
  017d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  017d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017de	51		 push	 ecx
  017df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  017e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ec	51		 push	 ecx
  017ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  017f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017fa	51		 push	 ecx
  017fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  01803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01808	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN80@draw_weapo:

; 6027 : 			}
; 6028 : 		}
; 6029 : 	}
; 6030 : 
; 6031 : 	////////////////////////////////////////
; 6032 : 	//
; 6033 : 	// rh outer pylon
; 6034 : 	//
; 6035 : 	////////////////////////////////////////
; 6036 : 
; 6037 : 	result = get_local_entity_weapon_hardpoint_info (en, HOKUM_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  0180d	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01810	50		 push	 eax
  01811	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01814	51		 push	 ecx
  01815	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01818	52		 push	 edx
  01819	6a 00		 push	 0
  0181b	6a 04		 push	 4
  0181d	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  01820	50		 push	 eax
  01821	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01826	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 6038 : 
; 6039 : 	if (result)

  01829	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0182d	0f 84 b1 03 00
	00		 je	 $LN87@draw_weapo

; 6040 : 	{
; 6041 : 		//
; 6042 : 		// selected weapon
; 6043 : 		//
; 6044 : 
; 6045 : 		if (weapon_sub_type == selected_weapon)

  01833	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01836	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01839	75 16		 jne	 SHORT $LN82@draw_weapo

; 6046 : 		{
; 6047 : 			set_mono_font_colour (MFD_COLOUR1);

  0183b	b8 04 00 00 00	 mov	 eax, 4
  01840	6b c8 00	 imul	 ecx, eax, 0
  01843	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01849	52		 push	 edx
  0184a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6048 : 		}
; 6049 : 		else

  0184f	eb 14		 jmp	 SHORT $LN83@draw_weapo
$LN82@draw_weapo:

; 6050 : 		{
; 6051 : 			set_mono_font_colour (MFD_COLOUR4);

  01851	b8 04 00 00 00	 mov	 eax, 4
  01856	6b c8 03	 imul	 ecx, eax, 3
  01859	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0185f	52		 push	 edx
  01860	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN83@draw_weapo:

; 6052 : 		}
; 6053 : 
; 6054 : 		//
; 6055 : 		// number
; 6056 : 		//
; 6057 : 
; 6058 : 		sprintf (s, "x%02d", number);

  01865	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01868	50		 push	 eax
  01869	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  0186e	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01871	51		 push	 ecx
  01872	e8 00 00 00 00	 call	 _sprintf
  01877	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6059 : 
; 6060 : 		set_2d_mono_font_position (0.45, -0.8);

  0187a	51		 push	 ecx
  0187b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01888	51		 push	 ecx
  01889	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01896	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6061 : 
; 6062 : 		x_adjust = -get_mono_font_string_width (s);

  0189b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0189e	50		 push	 eax
  0189f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  018a4	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1668[ebp]
  018aa	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1668[ebp]
  018b2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  018b9	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6063 : 
; 6064 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  018be	51		 push	 ecx
  018bf	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  018c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018c9	51		 push	 ecx
  018ca	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  018cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6065 : 
; 6066 : 		print_mono_font_string (s);

  018d9	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  018dc	50		 push	 eax
  018dd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6067 : 
; 6068 : 		//
; 6069 : 		// weapon name
; 6070 : 		//
; 6071 : 
; 6072 : 		set_2d_mono_font_position (0.0, -0.8);

  018e2	51		 push	 ecx
  018e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  018eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f0	51		 push	 ecx
  018f1	0f 57 c0	 xorps	 xmm0, xmm0
  018f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6073 : 
; 6074 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  018fe	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01905	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  0190b	51		 push	 ecx
  0190c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01911	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1683[ebp]
  01917	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1683[ebp]
  0191f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01927	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0192b	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6075 : 
; 6076 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  01930	51		 push	 ecx
  01931	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01936	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193b	51		 push	 ecx
  0193c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01946	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6077 : 
; 6078 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  0194b	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01952	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01958	51		 push	 ecx
  01959	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6079 : 
; 6080 : 		//
; 6081 : 		// lines
; 6082 : 		//
; 6083 : 
; 6084 : 		if (draw_large_mfd)

  0195e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01965	0f 84 3f 01 00
	00		 je	 $LN84@draw_weapo

; 6085 : 		{
; 6086 : 			draw_2d_half_thick_line (0.695, -0.14, 0.695, -0.785, MFD_COLOUR_YELLOW);

  0196b	b8 04 00 00 00	 mov	 eax, 4
  01970	6b c8 0f	 imul	 ecx, eax, 15
  01973	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01979	52		 push	 edx
  0197a	51		 push	 ecx
  0197b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01983	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01988	51		 push	 ecx
  01989	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01991	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01996	51		 push	 ecx
  01997	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  0199f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a4	51		 push	 ecx
  019a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  019ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b2	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6087 : 
; 6088 : 			draw_2d_half_thick_line (0.47, -0.785, 0.695, -0.785, MFD_COLOUR_YELLOW);

  019b7	b8 04 00 00 00	 mov	 eax, 4
  019bc	6b c8 0f	 imul	 ecx, eax, 15
  019bf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019c5	52		 push	 edx
  019c6	51		 push	 ecx
  019c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  019cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d4	51		 push	 ecx
  019d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  019dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e2	51		 push	 ecx
  019e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  019eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f0	51		 push	 ecx
  019f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  019f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019fe	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6089 : 
; 6090 : 			if (damaged)

  01a03	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01a07	0f 84 98 00 00
	00		 je	 $LN86@draw_weapo

; 6091 : 			{
; 6092 : 				draw_2d_half_thick_line (0.695 - 0.05, -0.07 - 0.05, 0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01a0d	b8 04 00 00 00	 mov	 eax, 4
  01a12	6b c8 00	 imul	 ecx, eax, 0
  01a15	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a1b	52		 push	 edx
  01a1c	51		 push	 ecx
  01a1d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01a25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2a	51		 push	 ecx
  01a2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a38	51		 push	 ecx
  01a39	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01a41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a46	51		 push	 ecx
  01a47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01a4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a54	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 6093 : 
; 6094 : 				draw_2d_half_thick_line (0.695 + 0.05, -0.07 - 0.05, 0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01a59	b8 04 00 00 00	 mov	 eax, 4
  01a5e	6b c8 00	 imul	 ecx, eax, 0
  01a61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a67	52		 push	 edx
  01a68	51		 push	 ecx
  01a69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a76	51		 push	 ecx
  01a77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a84	51		 push	 ecx
  01a85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01a8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a92	51		 push	 ecx
  01a93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01a9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa0	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN86@draw_weapo:

; 6095 : 			}
; 6096 : 		}
; 6097 : 		else

  01aa5	e9 3a 01 00 00	 jmp	 $LN87@draw_weapo
$LN84@draw_weapo:

; 6098 : 		{
; 6099 : 			draw_2d_line (0.695, -0.16, 0.695, -0.785, MFD_COLOUR_YELLOW);

  01aaa	b8 04 00 00 00	 mov	 eax, 4
  01aaf	6b c8 0f	 imul	 ecx, eax, 15
  01ab2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ab8	52		 push	 edx
  01ab9	51		 push	 ecx
  01aba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01ac2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac7	51		 push	 ecx
  01ac8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01ad0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad5	51		 push	 ecx
  01ad6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01ade	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae3	51		 push	 ecx
  01ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01aec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6100 : 
; 6101 : 			draw_2d_line (0.47, -0.785, 0.695, -0.785, MFD_COLOUR_YELLOW);

  01af6	b8 04 00 00 00	 mov	 eax, 4
  01afb	6b c8 0f	 imul	 ecx, eax, 15
  01afe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b04	52		 push	 edx
  01b05	51		 push	 ecx
  01b06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01b0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b13	51		 push	 ecx
  01b14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b21	51		 push	 ecx
  01b22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01b2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b2f	51		 push	 ecx
  01b30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01b38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b3d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6102 : 
; 6103 : 			if (damaged)

  01b42	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b46	0f 84 98 00 00
	00		 je	 $LN87@draw_weapo

; 6104 : 			{
; 6105 : 				draw_2d_line (0.695 - 0.05, -0.07 - 0.05, 0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01b4c	b8 04 00 00 00	 mov	 eax, 4
  01b51	6b c8 00	 imul	 ecx, eax, 0
  01b54	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b5a	52		 push	 edx
  01b5b	51		 push	 ecx
  01b5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01b64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b69	51		 push	 ecx
  01b6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01b72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b77	51		 push	 ecx
  01b78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b85	51		 push	 ecx
  01b86	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01b8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b93	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6106 : 
; 6107 : 				draw_2d_line (0.695 + 0.05, -0.07 - 0.05, 0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01b98	b8 04 00 00 00	 mov	 eax, 4
  01b9d	6b c8 00	 imul	 ecx, eax, 0
  01ba0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ba6	52		 push	 edx
  01ba7	51		 push	 ecx
  01ba8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01bb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb5	51		 push	 ecx
  01bb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01bbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc3	51		 push	 ecx
  01bc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01bcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd1	51		 push	 ecx
  01bd2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01bda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN87@draw_weapo:

; 6108 : 			}
; 6109 : 		}
; 6110 : 	}
; 6111 : 
; 6112 : 	////////////////////////////////////////
; 6113 : 	//
; 6114 : 	// rocket salvo
; 6115 : 	//
; 6116 : 	////////////////////////////////////////
; 6117 : 
; 6118 : 	if ((selected_weapon == ENTITY_SUB_TYPE_WEAPON_S8) || (selected_weapon == ENTITY_SUB_TYPE_WEAPON_S13))

  01be4	83 7d 8c 22	 cmp	 DWORD PTR _selected_weapon$[ebp], 34 ; 00000022H
  01be8	74 06		 je	 SHORT $LN90@draw_weapo
  01bea	83 7d 8c 23	 cmp	 DWORD PTR _selected_weapon$[ebp], 35 ; 00000023H
  01bee	75 16		 jne	 SHORT $LN88@draw_weapo
$LN90@draw_weapo:

; 6119 : 	{
; 6120 : 		set_mono_font_colour (MFD_COLOUR1);

  01bf0	b8 04 00 00 00	 mov	 eax, 4
  01bf5	6b c8 00	 imul	 ecx, eax, 0
  01bf8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bfe	52		 push	 edx
  01bff	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6121 : 	}
; 6122 : 	else

  01c04	eb 14		 jmp	 SHORT $LN89@draw_weapo
$LN88@draw_weapo:

; 6123 : 	{
; 6124 : 		set_mono_font_colour (MFD_COLOUR4);

  01c06	b8 04 00 00 00	 mov	 eax, 4
  01c0b	6b c8 03	 imul	 ecx, eax, 3
  01c0e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c14	52		 push	 edx
  01c15	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN89@draw_weapo:

; 6125 : 	}
; 6126 : 
; 6127 : 	set_2d_mono_font_position (0.0, -0.9);

  01c1a	51		 push	 ecx
  01c1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01c23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c28	51		 push	 ecx
  01c29	0f 57 c0	 xorps	 xmm0, xmm0
  01c2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c31	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6128 : 
; 6129 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  01c36	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  01c40	75 13		 jne	 SHORT $LN91@draw_weapo

; 6130 : 	{
; 6131 : 		sprintf (s, "ROCKET SALVOxALL");

  01c42	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
  01c47	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01c4a	50		 push	 eax
  01c4b	e8 00 00 00 00	 call	 _sprintf
  01c50	83 c4 08	 add	 esp, 8

; 6132 : 	}
; 6133 : 	else

  01c53	eb 17		 jmp	 SHORT $LN92@draw_weapo
$LN91@draw_weapo:

; 6134 : 	{
; 6135 : 		sprintf (s, "ROCKET SALVOx%02d", rocket_salvo_size);

  01c55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  01c5a	50		 push	 eax
  01c5b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
  01c60	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01c63	51		 push	 ecx
  01c64	e8 00 00 00 00	 call	 _sprintf
  01c69	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN92@draw_weapo:

; 6136 : 	}
; 6137 : 
; 6138 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01c6c	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01c6f	50		 push	 eax
  01c70	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01c75	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1785[ebp]
  01c7b	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1785[ebp]
  01c83	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01c8b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c8f	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6139 : 
; 6140 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01c94	51		 push	 ecx
  01c95	0f 57 c0	 xorps	 xmm0, xmm0
  01c98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c9d	51		 push	 ecx
  01c9e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01ca3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ca8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6141 : 
; 6142 : 	print_mono_font_string (s);

  01cad	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01cb0	50		 push	 eax
  01cb1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6143 : }

  01cb6	5f		 pop	 edi
  01cb7	5e		 pop	 esi
  01cb8	5b		 pop	 ebx
  01cb9	8b e5		 mov	 esp, ebp
  01cbb	5d		 pop	 ebp
  01cbc	c3		 ret	 0
?draw_weapon_display_mfd@@YGXXZ ENDP			; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1382 = -364						; size = 4
tv1060 = -360						; size = 4
tv1038 = -360						; size = 4
tv1010 = -360						; size = 4
tv988 = -360						; size = 4
tv822 = -360						; size = 4
tv769 = -360						; size = 4
tv746 = -360						; size = 4
tv725 = -360						; size = 4
tv705 = -360						; size = 4
tv670 = -360						; size = 4
tv649 = -360						; size = 4
tv628 = -360						; size = 4
tv609 = -360						; size = 4
tv590 = -360						; size = 4
tv569 = -360						; size = 4
tv548 = -360						; size = 4
tv527 = -360						; size = 4
tv508 = -360						; size = 4
tv489 = -360						; size = 4
tv470 = -360						; size = 4
tv450 = -360						; size = 4
tv422 = -360						; size = 4
tv401 = -360						; size = 4
tv382 = -360						; size = 4
tv363 = -360						; size = 4
tv343 = -360						; size = 4
tv316 = -360						; size = 4
tv288 = -360						; size = 4
tv266 = -360						; size = 4
tv245 = -360						; size = 4
tv226 = -360						; size = 4
tv207 = -360						; size = 4
tv178 = -360						; size = 4
tv158 = -360						; size = 4
tv138 = -360						; size = 4
tv86 = -360						; size = 4
tv1053 = -356						; size = 4
tv1031 = -356						; size = 4
tv1003 = -356						; size = 4
tv981 = -356						; size = 4
tv814 = -356						; size = 4
tv761 = -356						; size = 4
tv738 = -356						; size = 4
tv717 = -356						; size = 4
tv697 = -356						; size = 4
tv662 = -356						; size = 4
tv641 = -356						; size = 4
tv621 = -356						; size = 4
tv602 = -356						; size = 4
tv582 = -356						; size = 4
tv562 = -356						; size = 4
tv540 = -356						; size = 4
tv520 = -356						; size = 4
tv501 = -356						; size = 4
tv482 = -356						; size = 4
tv462 = -356						; size = 4
tv442 = -356						; size = 4
tv414 = -356						; size = 4
tv394 = -356						; size = 4
tv375 = -356						; size = 4
tv355 = -356						; size = 4
tv335 = -356						; size = 4
tv308 = -356						; size = 4
tv280 = -356						; size = 4
tv258 = -356						; size = 4
tv238 = -356						; size = 4
tv219 = -356						; size = 4
tv199 = -356						; size = 4
tv170 = -356						; size = 4
tv150 = -356						; size = 4
tv130 = -356						; size = 4
tv78 = -356						; size = 4
tv70 = -356						; size = 4
_time_to_impact$1 = -288				; size = 4
_closest_missile$2 = -284				; size = 4
_dy$3 = -280						; size = 4
_dx$4 = -276						; size = 4
_air_scan_range$5 = -272				; size = 4
_draw_threat_line$6 = -268				; size = 4
_threat_type$7 = -264					; size = 4
_threat_position$8 = -260				; size = 4
_launched_weapon$9 = -256				; size = 4
_threat$10 = -252					; size = 4
_source_position$ = -248				; size = 4
_source_target$ = -244					; size = 4
_source$ = -240						; size = 4
_ase_threat_line_flash_timer$ = -236			; size = 4
_tsd_ase_range$ = -232					; size = 4
_source_heading$ = -228					; size = 4
_y_adjust$ = -224					; size = 4
_width$ = -220						; size = 4
_scale$ = -216						; size = 4
_ase_draw_threat_line_status$ = -212			; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 4676 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4677 : 	char
; 4678 : 		*s,
; 4679 : 		buffer[200];
; 4680 : 
; 4681 : 	entity_sides
; 4682 : 		source_side;
; 4683 : 
; 4684 : 	int
; 4685 : 		*ase_draw_threat_line_status;
; 4686 : 
; 4687 : 	float
; 4688 : 		scale,
; 4689 : 		width,
; 4690 : 		y_adjust,
; 4691 : 		source_heading,
; 4692 : 		tsd_ase_range,
; 4693 : 		*ase_threat_line_flash_timer;
; 4694 : 
; 4695 : 	entity
; 4696 : 		*source,
; 4697 : 		*source_target;
; 4698 : 
; 4699 : 	vec3d
; 4700 : 		*source_position;
; 4701 : 
; 4702 : 	ASSERT (hokum_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN15@draw_aircr
  00012	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00016	7c 18		 jl	 SHORT $LN14@draw_aircr
$LN15@draw_aircr:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 1a	 add	 eax, 26			; 0000001aH
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@draw_aircr:

; 4703 : 
; 4704 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 9c fe ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  00040	77 57		 ja	 SHORT $LN2@draw_aircr
  00042	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv70[ebp]
  00048	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN243@draw_aircr[ecx*4]
$LN16@draw_aircr:

; 4705 : 	{
; 4706 : 		////////////////////////////////////////
; 4707 : 		case HOKUM_MFD_LOCATION_PILOT_LHS:
; 4708 : 		case HOKUM_MFD_LOCATION_PILOT_RHS:
; 4709 : 		////////////////////////////////////////
; 4710 : 		{
; 4711 : 			tsd_ase_range						= pilot_tsd_ase_range;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00057	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4712 : 			ase_threat_line_flash_timer	= &pilot_ase_threat_line_flash_timer;

  0005f	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?pilot_ase_threat_line_flash_timer@@3MA

; 4713 : 			ase_draw_threat_line_status	= &pilot_ase_draw_threat_line_status;

  00069	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?pilot_ase_draw_threat_line_status@@3HA

; 4714 : 
; 4715 : 			break;

  00073	eb 24		 jmp	 SHORT $LN2@draw_aircr
$LN17@draw_aircr:

; 4716 : 		}
; 4717 : 		////////////////////////////////////////
; 4718 : 		case HOKUM_MFD_LOCATION_CO_PILOT_LHS:
; 4719 : 		case HOKUM_MFD_LOCATION_CO_PILOT_RHS:
; 4720 : 		////////////////////////////////////////
; 4721 : 		{
; 4722 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  00075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0007d	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4723 : 			ase_threat_line_flash_timer	= &co_pilot_ase_threat_line_flash_timer;

  00085	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_ase_threat_line_flash_timer@@3MA

; 4724 : 			ase_draw_threat_line_status	= &co_pilot_ase_draw_threat_line_status;

  0008f	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?co_pilot_ase_draw_threat_line_status@@3HA
$LN2@draw_aircr:

; 4725 : 
; 4726 : 			break;
; 4727 : 		}
; 4728 : 	}
; 4729 : 
; 4730 : 	source = get_gunship_entity ();

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0009e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 4731 : 
; 4732 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000a4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000ab	74 10		 je	 SHORT $LN99@draw_aircr
  000ad	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b5	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  000bb	eb 24		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:
  000bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  000c3	83 c2 38	 add	 edx, 56			; 00000038H
  000c6	52		 push	 edx
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d7	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN100@draw_aircr:
  000e1	b9 01 00 00 00	 mov	 ecx, 1
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 0c		 je	 SHORT $LN101@draw_aircr
  000ea	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv86[ebp], 187 ; 000000bbH
  000f4	eb 24		 jmp	 SHORT $LN102@draw_aircr
$LN101@draw_aircr:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  000fc	83 c2 38	 add	 edx, 56			; 00000038H
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN102@draw_aircr:
  0011a	68 bb 00 00 00	 push	 187			; 000000bbH
  0011f	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00125	51		 push	 ecx
  00126	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv78[ebp], 1116
  00130	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  00136	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0013d	ff d1		 call	 ecx
  0013f	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 4733 : 
; 4734 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  00145	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0014c	74 10		 je	 SHORT $LN103@draw_aircr
  0014e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00154	8b 08		 mov	 ecx, DWORD PTR [eax]
  00156	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
  0015c	eb 24		 jmp	 SHORT $LN104@draw_aircr
$LN103@draw_aircr:
  0015e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00164	83 c2 3a	 add	 edx, 58			; 0000003aH
  00167	52		 push	 edx
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00178	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN104@draw_aircr:
  00182	b9 01 00 00 00	 mov	 ecx, 1
  00187	85 c9		 test	 ecx, ecx
  00189	74 0c		 je	 SHORT $LN105@draw_aircr
  0018b	c7 85 98 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv138[ebp], 52 ; 00000034H
  00195	eb 24		 jmp	 SHORT $LN106@draw_aircr
$LN105@draw_aircr:
  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0019d	83 c2 3a	 add	 edx, 58			; 0000003aH
  001a0	52		 push	 edx
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b1	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN106@draw_aircr:
  001bb	6a 34		 push	 52			; 00000034H
  001bd	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001c3	51		 push	 ecx
  001c4	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv130[ebp], 700
  001ce	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  001d4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001db	ff d1		 call	 ecx
  001dd	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 4735 : 
; 4736 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  001e3	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001ea	74 10		 je	 SHORT $LN107@draw_aircr
  001ec	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  001f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  001fa	eb 24		 jmp	 SHORT $LN108@draw_aircr
$LN107@draw_aircr:
  001fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00202	83 c2 3c	 add	 edx, 60			; 0000003cH
  00205	52		 push	 edx
  00206	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00216	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN108@draw_aircr:
  00220	b9 01 00 00 00	 mov	 ecx, 1
  00225	85 c9		 test	 ecx, ecx
  00227	74 0c		 je	 SHORT $LN109@draw_aircr
  00229	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  00233	eb 24		 jmp	 SHORT $LN110@draw_aircr
$LN109@draw_aircr:
  00235	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0023b	83 c2 3c	 add	 edx, 60			; 0000003cH
  0023e	52		 push	 edx
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00244	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0024f	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN110@draw_aircr:
  00259	6a 08		 push	 8
  0025b	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00261	51		 push	 ecx
  00262	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  00269	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  0026f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00276	ff d1		 call	 ecx
  00278	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 4737 : 
; 4738 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0027e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00285	74 10		 je	 SHORT $LN111@draw_aircr
  00287	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0028d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv170[ebp], ecx
  00295	eb 24		 jmp	 SHORT $LN112@draw_aircr
$LN111@draw_aircr:
  00297	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0029d	83 c2 3e	 add	 edx, 62			; 0000003eH
  002a0	52		 push	 edx
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b1	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN112@draw_aircr:
  002bb	b9 01 00 00 00	 mov	 ecx, 1
  002c0	85 c9		 test	 ecx, ecx
  002c2	74 0c		 je	 SHORT $LN113@draw_aircr
  002c4	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv178[ebp], 38 ; 00000026H
  002ce	eb 24		 jmp	 SHORT $LN114@draw_aircr
$LN113@draw_aircr:
  002d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  002d6	83 c2 3e	 add	 edx, 62			; 0000003eH
  002d9	52		 push	 edx
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002e4	50		 push	 eax
  002e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ea	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN114@draw_aircr:
  002f4	6a 26		 push	 38			; 00000026H
  002f6	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  002fc	51		 push	 ecx
  002fd	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv170[ebp], 180
  00307	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  0030d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00314	ff d1		 call	 ecx
  00316	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 4739 : 
; 4740 : 	scale = RADIUS / tsd_ase_range;

  0031c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00324	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0032c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00330	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00334	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 4741 : 
; 4742 : 	////////////////////////////////////////
; 4743 : 	//
; 4744 : 	// threats
; 4745 : 	//
; 4746 : 	////////////////////////////////////////
; 4747 : 
; 4748 : 	{
; 4749 : 		entity
; 4750 : 			*threat,
; 4751 : 			*launched_weapon;
; 4752 : 
; 4753 : 		vec3d
; 4754 : 			*threat_position;
; 4755 : 
; 4756 : 		threat_types
; 4757 : 			threat_type;
; 4758 : 
; 4759 : 		int
; 4760 : 			draw_threat_line;
; 4761 : 
; 4762 : 		float
; 4763 : 			air_scan_range,
; 4764 : 			dx,
; 4765 : 			dy;
; 4766 : 
; 4767 : 		*ase_threat_line_flash_timer -= get_delta_time ();

  0033c	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00342	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00346	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0034e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00354	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 4768 : 
; 4769 : 		if (*ase_threat_line_flash_timer < 0.0)

  00358	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  0035e	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00362	0f 57 c9	 xorps	 xmm1, xmm1
  00365	66 0f 2f c8	 comisd	 xmm1, xmm0
  00369	76 25		 jbe	 SHORT $LN18@draw_aircr

; 4770 : 		{
; 4771 : 			*ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  0036b	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00371	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00379	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4772 : 
; 4773 : 			*ase_draw_threat_line_status ^= 1;

  0037d	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  00383	8b 08		 mov	 ecx, DWORD PTR [eax]
  00385	83 f1 01	 xor	 ecx, 1
  00388	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ase_draw_threat_line_status$[ebp]
  0038e	89 0a		 mov	 DWORD PTR [edx], ecx
$LN18@draw_aircr:

; 4774 : 		}
; 4775 : 
; 4776 : 		set_2d_window_rotation (mfd_env, source_heading);

  00390	51		 push	 ecx
  00391	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4777 : 
; 4778 : 		//
; 4779 : 		// display enemy SAM and AAA threat range circles
; 4780 : 		//
; 4781 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 4782 : 		//
; 4783 : 
; 4784 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  003a9	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  003b0	74 10		 je	 SHORT $LN115@draw_aircr
  003b2	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  003b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ba	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003c0	eb 24		 jmp	 SHORT $LN116@draw_aircr
$LN115@draw_aircr:
  003c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  003c8	83 c2 6c	 add	 edx, 108		; 0000006cH
  003cb	52		 push	 edx
  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003d6	50		 push	 eax
  003d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003dc	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN116@draw_aircr:
  003e6	b9 01 00 00 00	 mov	 ecx, 1
  003eb	85 c9		 test	 ecx, ecx
  003ed	74 0c		 je	 SHORT $LN117@draw_aircr
  003ef	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv207[ebp], 18 ; 00000012H
  003f9	eb 24		 jmp	 SHORT $LN118@draw_aircr
$LN117@draw_aircr:
  003fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00401	83 c2 6c	 add	 edx, 108		; 0000006cH
  00404	52		 push	 edx
  00405	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0040a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00415	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN118@draw_aircr:
  0041f	6a 12		 push	 18			; 00000012H
  00421	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00427	51		 push	 ecx
  00428	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00432	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  00438	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0043f	ff d1		 call	 ecx
  00441	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 4785 : 
; 4786 : 		while (threat)

  00447	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0044e	0f 84 70 04 00
	00		 je	 $LN5@draw_aircr

; 4787 : 		{
; 4788 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00454	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0045b	74 10		 je	 SHORT $LN119@draw_aircr
  0045d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00463	8b 08		 mov	 ecx, DWORD PTR [eax]
  00465	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  0046b	eb 20		 jmp	 SHORT $LN120@draw_aircr
$LN119@draw_aircr:
  0046d	68 b4 12 00 00	 push	 4788			; 000012b4H
  00472	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00477	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0047d	52		 push	 edx
  0047e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00483	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$LN120@draw_aircr:
  0048d	b8 01 00 00 00	 mov	 eax, 1
  00492	85 c0		 test	 eax, eax
  00494	74 0c		 je	 SHORT $LN121@draw_aircr
  00496	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv226[ebp], 66 ; 00000042H
  004a0	eb 20		 jmp	 SHORT $LN122@draw_aircr
$LN121@draw_aircr:
  004a2	68 b4 12 00 00	 push	 4788			; 000012b4H
  004a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004b2	51		 push	 ecx
  004b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN122@draw_aircr:
  004c2	6a 42		 push	 66			; 00000042H
  004c4	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004ca	52		 push	 edx
  004cb	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv219[ebp], 1116
  004d5	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv226[ebp]
  004db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004e2	ff d2		 call	 edx
  004e4	85 c0		 test	 eax, eax
  004e6	0f 85 2f 03 00
	00		 jne	 $LN21@draw_aircr

; 4789 : 			{
; 4790 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  004ec	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  004f3	74 10		 je	 SHORT $LN123@draw_aircr
  004f5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  004fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004fd	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv238[ebp], ecx
  00503	eb 20		 jmp	 SHORT $LN124@draw_aircr
$LN123@draw_aircr:
  00505	68 b6 12 00 00	 push	 4790			; 000012b6H
  0050a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0050f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00515	52		 push	 edx
  00516	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0051b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv238[ebp], 0
$LN124@draw_aircr:
  00525	b8 01 00 00 00	 mov	 eax, 1
  0052a	85 c0		 test	 eax, eax
  0052c	74 0c		 je	 SHORT $LN125@draw_aircr
  0052e	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv245[ebp], 187 ; 000000bbH
  00538	eb 20		 jmp	 SHORT $LN126@draw_aircr
$LN125@draw_aircr:
  0053a	68 b6 12 00 00	 push	 4790			; 000012b6H
  0053f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00544	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0054a	51		 push	 ecx
  0054b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00550	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv245[ebp], 0
$LN126@draw_aircr:
  0055a	68 bb 00 00 00	 push	 187			; 000000bbH
  0055f	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00565	52		 push	 edx
  00566	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv238[ebp], 1116
  00570	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv245[ebp]
  00576	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0057d	ff d2		 call	 edx
  0057f	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00585	0f 84 90 02 00
	00		 je	 $LN21@draw_aircr

; 4791 : 				{
; 4792 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  0058b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00592	74 10		 je	 SHORT $LN127@draw_aircr
  00594	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0059a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv258[ebp], ecx
  005a2	eb 24		 jmp	 SHORT $LN128@draw_aircr
$LN127@draw_aircr:
  005a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  005aa	83 c2 74	 add	 edx, 116		; 00000074H
  005ad	52		 push	 edx
  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005b8	50		 push	 eax
  005b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005be	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN128@draw_aircr:
  005c8	b9 01 00 00 00	 mov	 ecx, 1
  005cd	85 c9		 test	 ecx, ecx
  005cf	74 0c		 je	 SHORT $LN129@draw_aircr
  005d1	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv266[ebp], 233 ; 000000e9H
  005db	eb 24		 jmp	 SHORT $LN130@draw_aircr
$LN129@draw_aircr:
  005dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  005e3	83 c2 74	 add	 edx, 116		; 00000074H
  005e6	52		 push	 edx
  005e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005f7	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv266[ebp], 0
$LN130@draw_aircr:
  00601	68 e9 00 00 00	 push	 233			; 000000e9H
  00606	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0060c	51		 push	 ecx
  0060d	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv258[ebp], 1116
  00617	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv266[ebp]
  0061d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00624	ff d1		 call	 ecx
  00626	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4793 : 
; 4794 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  0062c	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00633	74 0d		 je	 SHORT $LN22@draw_aircr
  00635	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  0063c	0f 85 d9 01 00
	00		 jne	 $LN21@draw_aircr
$LN22@draw_aircr:

; 4795 : 					{
; 4796 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  00642	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00649	74 10		 je	 SHORT $LN131@draw_aircr
  0064b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00651	8b 08		 mov	 ecx, DWORD PTR [eax]
  00653	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv280[ebp], ecx
  00659	eb 24		 jmp	 SHORT $LN132@draw_aircr
$LN131@draw_aircr:
  0065b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00661	83 c2 78	 add	 edx, 120		; 00000078H
  00664	52		 push	 edx
  00665	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0066a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00675	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv280[ebp], 0
$LN132@draw_aircr:
  0067f	b9 01 00 00 00	 mov	 ecx, 1
  00684	85 c9		 test	 ecx, ecx
  00686	74 0c		 je	 SHORT $LN133@draw_aircr
  00688	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv288[ebp], 8
  00692	eb 24		 jmp	 SHORT $LN134@draw_aircr
$LN133@draw_aircr:
  00694	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0069a	83 c2 78	 add	 edx, 120		; 00000078H
  0069d	52		 push	 edx
  0069e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ae	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv288[ebp], 0
$LN134@draw_aircr:
  006b8	6a 08		 push	 8
  006ba	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  006c0	51		 push	 ecx
  006c1	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv280[ebp], 96
  006c8	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  006ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  006d5	ff d1		 call	 ecx
  006d7	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4797 : 
; 4798 : 						dx = (threat_position->x - source_position->x) * scale;

  006dd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  006e3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  006e9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006ed	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  006f1	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  006f9	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4799 : 						dy = (threat_position->z - source_position->z) * scale;

  00701	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  00707	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0070d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00712	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00717	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0071f	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4800 : 
; 4801 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  00727	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0072e	74 10		 je	 SHORT $LN135@draw_aircr
  00730	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00736	8b 08		 mov	 ecx, DWORD PTR [eax]
  00738	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv308[ebp], ecx
  0073e	eb 24		 jmp	 SHORT $LN136@draw_aircr
$LN135@draw_aircr:
  00740	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00746	83 c2 7d	 add	 edx, 125		; 0000007dH
  00749	52		 push	 edx
  0074a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0074f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00754	50		 push	 eax
  00755	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN136@draw_aircr:
  00764	b9 01 00 00 00	 mov	 ecx, 1
  00769	85 c9		 test	 ecx, ecx
  0076b	74 0c		 je	 SHORT $LN137@draw_aircr
  0076d	c7 85 98 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv316[ebp], 5
  00777	eb 24		 jmp	 SHORT $LN138@draw_aircr
$LN137@draw_aircr:
  00779	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0077f	83 c2 7d	 add	 edx, 125		; 0000007dH
  00782	52		 push	 edx
  00783	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00788	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0078d	50		 push	 eax
  0078e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00793	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv316[ebp], 0
$LN138@draw_aircr:
  0079d	6a 05		 push	 5
  0079f	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  007a5	51		 push	 ecx
  007a6	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv308[ebp], 700
  007b0	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv316[ebp]
  007b6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007bd	ff d1		 call	 ecx
  007bf	d9 9d 94 fe ff
	ff		 fstp	 DWORD PTR tv1382[ebp]
  007c5	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR tv1382[ebp]
  007cd	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  007d5	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 4802 : 
; 4803 : 						draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_RED);

  007dd	b8 04 00 00 00	 mov	 eax, 4
  007e2	6b c8 12	 imul	 ecx, eax, 18
  007e5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007eb	52		 push	 edx
  007ec	51		 push	 ecx
  007ed	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	51		 push	 ecx
  007fb	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	51		 push	 ecx
  00809	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00811	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00816	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN21@draw_aircr:

; 4804 : 					}
; 4805 : 				}
; 4806 : 			}
; 4807 : 
; 4808 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  0081b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00822	74 10		 je	 SHORT $LN139@draw_aircr
  00824	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0082a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0082c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv335[ebp], ecx
  00832	eb 27		 jmp	 SHORT $LN140@draw_aircr
$LN139@draw_aircr:
  00834	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0083a	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  00840	52		 push	 edx
  00841	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00846	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0084b	50		 push	 eax
  0084c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00851	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv335[ebp], 0
$LN140@draw_aircr:
  0085b	b9 01 00 00 00	 mov	 ecx, 1
  00860	85 c9		 test	 ecx, ecx
  00862	74 0c		 je	 SHORT $LN141@draw_aircr
  00864	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv343[ebp], 18 ; 00000012H
  0086e	eb 27		 jmp	 SHORT $LN142@draw_aircr
$LN141@draw_aircr:
  00870	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00876	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  0087c	52		 push	 edx
  0087d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00882	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00887	50		 push	 eax
  00888	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0088d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv343[ebp], 0
$LN142@draw_aircr:
  00897	6a 12		 push	 18			; 00000012H
  00899	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0089f	51		 push	 ecx
  008a0	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv335[ebp], 180
  008aa	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp]
  008b0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008b7	ff d1		 call	 ecx
  008b9	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4809 : 		}

  008bf	e9 83 fb ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 4810 : 
; 4811 : 		//
; 4812 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 4813 : 		//
; 4814 : 
; 4815 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  008c4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  008cb	74 10		 je	 SHORT $LN143@draw_aircr
  008cd	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  008d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d5	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv355[ebp], ecx
  008db	eb 27		 jmp	 SHORT $LN144@draw_aircr
$LN143@draw_aircr:
  008dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  008e3	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  008e9	52		 push	 edx
  008ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008f4	50		 push	 eax
  008f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008fa	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv355[ebp], 0
$LN144@draw_aircr:
  00904	b9 01 00 00 00	 mov	 ecx, 1
  00909	85 c9		 test	 ecx, ecx
  0090b	74 0c		 je	 SHORT $LN145@draw_aircr
  0090d	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv363[ebp], 18 ; 00000012H
  00917	eb 27		 jmp	 SHORT $LN146@draw_aircr
$LN145@draw_aircr:
  00919	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0091f	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  00925	52		 push	 edx
  00926	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0092b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00930	50		 push	 eax
  00931	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00936	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv363[ebp], 0
$LN146@draw_aircr:
  00940	6a 12		 push	 18			; 00000012H
  00942	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00948	51		 push	 ecx
  00949	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv355[ebp], 180
  00953	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv363[ebp]
  00959	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00960	ff d1		 call	 ecx
  00962	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 4816 : 
; 4817 : 		while (threat)

  00968	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0096f	0f 84 c7 02 00
	00		 je	 $LN7@draw_aircr

; 4818 : 		{
; 4819 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00975	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0097c	74 10		 je	 SHORT $LN147@draw_aircr
  0097e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00984	8b 08		 mov	 ecx, DWORD PTR [eax]
  00986	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv375[ebp], ecx
  0098c	eb 20		 jmp	 SHORT $LN148@draw_aircr
$LN147@draw_aircr:
  0098e	68 d3 12 00 00	 push	 4819			; 000012d3H
  00993	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00998	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0099e	52		 push	 edx
  0099f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009a4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv375[ebp], 0
$LN148@draw_aircr:
  009ae	b8 01 00 00 00	 mov	 eax, 1
  009b3	85 c0		 test	 eax, eax
  009b5	74 0c		 je	 SHORT $LN149@draw_aircr
  009b7	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv382[ebp], 66 ; 00000042H
  009c1	eb 20		 jmp	 SHORT $LN150@draw_aircr
$LN149@draw_aircr:
  009c3	68 d3 12 00 00	 push	 4819			; 000012d3H
  009c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009d3	51		 push	 ecx
  009d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009d9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv382[ebp], 0
$LN150@draw_aircr:
  009e3	6a 42		 push	 66			; 00000042H
  009e5	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  009eb	52		 push	 edx
  009ec	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv375[ebp], 1116
  009f6	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv382[ebp]
  009fc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a03	ff d2		 call	 edx
  00a05	85 c0		 test	 eax, eax
  00a07	0f 85 86 01 00
	00		 jne	 $LN25@draw_aircr

; 4820 : 			{
; 4821 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00a0d	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a14	74 10		 je	 SHORT $LN151@draw_aircr
  00a16	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a1c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a1e	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv394[ebp], ecx
  00a24	eb 20		 jmp	 SHORT $LN152@draw_aircr
$LN151@draw_aircr:
  00a26	68 d5 12 00 00	 push	 4821			; 000012d5H
  00a2b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a30	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a36	52		 push	 edx
  00a37	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a3c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv394[ebp], 0
$LN152@draw_aircr:
  00a46	b8 01 00 00 00	 mov	 eax, 1
  00a4b	85 c0		 test	 eax, eax
  00a4d	74 0c		 je	 SHORT $LN153@draw_aircr
  00a4f	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv401[ebp], 187 ; 000000bbH
  00a59	eb 20		 jmp	 SHORT $LN154@draw_aircr
$LN153@draw_aircr:
  00a5b	68 d5 12 00 00	 push	 4821			; 000012d5H
  00a60	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a6b	51		 push	 ecx
  00a6c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a71	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv401[ebp], 0
$LN154@draw_aircr:
  00a7b	68 bb 00 00 00	 push	 187			; 000000bbH
  00a80	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00a86	52		 push	 edx
  00a87	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv394[ebp], 1116
  00a91	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv401[ebp]
  00a97	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a9e	ff d2		 call	 edx
  00aa0	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00aa6	0f 84 e7 00 00
	00		 je	 $LN25@draw_aircr

; 4822 : 				{
; 4823 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00aac	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ab3	74 10		 je	 SHORT $LN155@draw_aircr
  00ab5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00abb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00abd	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv414[ebp], ecx
  00ac3	eb 27		 jmp	 SHORT $LN156@draw_aircr
$LN155@draw_aircr:
  00ac5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00acb	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00ad1	52		 push	 edx
  00ad2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae2	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv414[ebp], 0
$LN156@draw_aircr:
  00aec	b9 01 00 00 00	 mov	 ecx, 1
  00af1	85 c9		 test	 ecx, ecx
  00af3	74 0c		 je	 SHORT $LN157@draw_aircr
  00af5	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv422[ebp], 233 ; 000000e9H
  00aff	eb 27		 jmp	 SHORT $LN158@draw_aircr
$LN157@draw_aircr:
  00b01	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00b07	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00b0d	52		 push	 edx
  00b0e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b18	50		 push	 eax
  00b19	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b1e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv422[ebp], 0
$LN158@draw_aircr:
  00b28	68 e9 00 00 00	 push	 233			; 000000e9H
  00b2d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b33	51		 push	 ecx
  00b34	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv414[ebp], 1116
  00b3e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv422[ebp]
  00b44	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b4b	ff d1		 call	 ecx
  00b4d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4824 : 
; 4825 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00b53	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00b5a	74 12		 je	 SHORT $LN26@draw_aircr
  00b5c	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00b63	74 09		 je	 SHORT $LN26@draw_aircr
  00b65	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00b6c	75 25		 jne	 SHORT $LN25@draw_aircr
$LN26@draw_aircr:

; 4826 : 					{
; 4827 : //VJ 030423 TSD render mod
; 4828 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE);

  00b6e	6a 00		 push	 0
  00b70	6a 00		 push	 0
  00b72	51		 push	 ecx
  00b73	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b80	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b86	50		 push	 eax
  00b87	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b8d	51		 push	 ecx
  00b8e	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN25@draw_aircr:

; 4829 : 					}
; 4830 : 				}
; 4831 : 			}
; 4832 : 
; 4833 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00b93	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00b9a	74 10		 je	 SHORT $LN159@draw_aircr
  00b9c	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ba2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ba4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv442[ebp], ecx
  00baa	eb 27		 jmp	 SHORT $LN160@draw_aircr
$LN159@draw_aircr:
  00bac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00bb2	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00bb8	52		 push	 edx
  00bb9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bbe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bc3	50		 push	 eax
  00bc4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bc9	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv442[ebp], 0
$LN160@draw_aircr:
  00bd3	b9 01 00 00 00	 mov	 ecx, 1
  00bd8	85 c9		 test	 ecx, ecx
  00bda	74 0c		 je	 SHORT $LN161@draw_aircr
  00bdc	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv450[ebp], 18 ; 00000012H
  00be6	eb 27		 jmp	 SHORT $LN162@draw_aircr
$LN161@draw_aircr:
  00be8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00bee	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00bf4	52		 push	 edx
  00bf5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bfa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bff	50		 push	 eax
  00c00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c05	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv450[ebp], 0
$LN162@draw_aircr:
  00c0f	6a 12		 push	 18			; 00000012H
  00c11	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00c17	51		 push	 ecx
  00c18	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv442[ebp], 180
  00c22	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv450[ebp]
  00c28	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c2f	ff d1		 call	 ecx
  00c31	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4834 : 		}

  00c37	e9 2c fd ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 4835 : 
; 4836 : 		//
; 4837 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 4838 : 		//
; 4839 : 
; 4840 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00c3c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00c43	74 10		 je	 SHORT $LN163@draw_aircr
  00c45	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00c4b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c4d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv462[ebp], ecx
  00c53	eb 27		 jmp	 SHORT $LN164@draw_aircr
$LN163@draw_aircr:
  00c55	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00c5b	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00c61	52		 push	 edx
  00c62	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c6c	50		 push	 eax
  00c6d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c72	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv462[ebp], 0
$LN164@draw_aircr:
  00c7c	b9 01 00 00 00	 mov	 ecx, 1
  00c81	85 c9		 test	 ecx, ecx
  00c83	74 0c		 je	 SHORT $LN165@draw_aircr
  00c85	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv470[ebp], 18 ; 00000012H
  00c8f	eb 27		 jmp	 SHORT $LN166@draw_aircr
$LN165@draw_aircr:
  00c91	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00c97	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00c9d	52		 push	 edx
  00c9e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ca3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00ca8	50		 push	 eax
  00ca9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cae	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv470[ebp], 0
$LN166@draw_aircr:
  00cb8	6a 12		 push	 18			; 00000012H
  00cba	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00cc0	51		 push	 ecx
  00cc1	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv462[ebp], 180
  00ccb	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv470[ebp]
  00cd1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00cd8	ff d1		 call	 ecx
  00cda	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN8@draw_aircr:

; 4841 : 
; 4842 : 		while (threat)

  00ce0	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ce7	0f 84 c1 07 00
	00		 je	 $LN9@draw_aircr

; 4843 : 		{
; 4844 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00ced	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00cf4	74 10		 je	 SHORT $LN167@draw_aircr
  00cf6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00cfc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cfe	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv482[ebp], ecx
  00d04	eb 20		 jmp	 SHORT $LN168@draw_aircr
$LN167@draw_aircr:
  00d06	68 ec 12 00 00	 push	 4844			; 000012ecH
  00d0b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d10	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d16	52		 push	 edx
  00d17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d1c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv482[ebp], 0
$LN168@draw_aircr:
  00d26	b8 01 00 00 00	 mov	 eax, 1
  00d2b	85 c0		 test	 eax, eax
  00d2d	74 0c		 je	 SHORT $LN169@draw_aircr
  00d2f	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv489[ebp], 66 ; 00000042H
  00d39	eb 20		 jmp	 SHORT $LN170@draw_aircr
$LN169@draw_aircr:
  00d3b	68 ec 12 00 00	 push	 4844			; 000012ecH
  00d40	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d4b	51		 push	 ecx
  00d4c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d51	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv489[ebp], 0
$LN170@draw_aircr:
  00d5b	6a 42		 push	 66			; 00000042H
  00d5d	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d63	52		 push	 edx
  00d64	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv482[ebp], 1116
  00d6e	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv489[ebp]
  00d74	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00d7b	ff d2		 call	 edx
  00d7d	85 c0		 test	 eax, eax
  00d7f	0f 85 80 06 00
	00		 jne	 $LN35@draw_aircr

; 4845 : 			{
; 4846 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00d85	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d8c	74 10		 je	 SHORT $LN171@draw_aircr
  00d8e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d94	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d96	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d9c	eb 20		 jmp	 SHORT $LN172@draw_aircr
$LN171@draw_aircr:
  00d9e	68 ee 12 00 00	 push	 4846			; 000012eeH
  00da3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00da8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00dae	52		 push	 edx
  00daf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00db4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN172@draw_aircr:
  00dbe	b8 01 00 00 00	 mov	 eax, 1
  00dc3	85 c0		 test	 eax, eax
  00dc5	74 0c		 je	 SHORT $LN173@draw_aircr
  00dc7	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv508[ebp], 187 ; 000000bbH
  00dd1	eb 20		 jmp	 SHORT $LN174@draw_aircr
$LN173@draw_aircr:
  00dd3	68 ee 12 00 00	 push	 4846			; 000012eeH
  00dd8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ddd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00de3	51		 push	 ecx
  00de4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00de9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv508[ebp], 0
$LN174@draw_aircr:
  00df3	68 bb 00 00 00	 push	 187			; 000000bbH
  00df8	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00dfe	52		 push	 edx
  00dff	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv501[ebp], 1116
  00e09	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv508[ebp]
  00e0f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e16	ff d2		 call	 edx
  00e18	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00e1e	0f 84 e1 05 00
	00		 je	 $LN35@draw_aircr

; 4847 : 				{
; 4848 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00e24	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e2b	74 10		 je	 SHORT $LN175@draw_aircr
  00e2d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e33	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e35	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv520[ebp], ecx
  00e3b	eb 20		 jmp	 SHORT $LN176@draw_aircr
$LN175@draw_aircr:
  00e3d	68 f0 12 00 00	 push	 4848			; 000012f0H
  00e42	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e47	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e4d	52		 push	 edx
  00e4e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e53	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv520[ebp], 0
$LN176@draw_aircr:
  00e5d	b8 01 00 00 00	 mov	 eax, 1
  00e62	85 c0		 test	 eax, eax
  00e64	74 0c		 je	 SHORT $LN177@draw_aircr
  00e66	c7 85 98 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv527[ebp], 169 ; 000000a9H
  00e70	eb 20		 jmp	 SHORT $LN178@draw_aircr
$LN177@draw_aircr:
  00e72	68 f0 12 00 00	 push	 4848			; 000012f0H
  00e77	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e7c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e82	51		 push	 ecx
  00e83	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e88	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv527[ebp], 0
$LN178@draw_aircr:
  00e92	68 a9 00 00 00	 push	 169			; 000000a9H
  00e97	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00e9d	52		 push	 edx
  00e9e	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv520[ebp], 1116
  00ea8	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv527[ebp]
  00eae	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00eb5	ff d2		 call	 edx
  00eb7	85 c0		 test	 eax, eax
  00eb9	0f 84 46 05 00
	00		 je	 $LN35@draw_aircr

; 4849 : 					{
; 4850 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00ebf	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ec6	74 10		 je	 SHORT $LN179@draw_aircr
  00ec8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ece	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ed0	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv540[ebp], ecx
  00ed6	eb 27		 jmp	 SHORT $LN180@draw_aircr
$LN179@draw_aircr:
  00ed8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00ede	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  00ee4	52		 push	 edx
  00ee5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00eea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00eef	50		 push	 eax
  00ef0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ef5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv540[ebp], 0
$LN180@draw_aircr:
  00eff	b9 01 00 00 00	 mov	 ecx, 1
  00f04	85 c9		 test	 ecx, ecx
  00f06	74 0c		 je	 SHORT $LN181@draw_aircr
  00f08	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv548[ebp], 233 ; 000000e9H
  00f12	eb 27		 jmp	 SHORT $LN182@draw_aircr
$LN181@draw_aircr:
  00f14	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00f1a	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  00f20	52		 push	 edx
  00f21	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f26	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00f2b	50		 push	 eax
  00f2c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f31	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv548[ebp], 0
$LN182@draw_aircr:
  00f3b	68 e9 00 00 00	 push	 233			; 000000e9H
  00f40	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00f46	51		 push	 ecx
  00f47	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv540[ebp], 1116
  00f51	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv548[ebp]
  00f57	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00f5e	ff d1		 call	 ecx
  00f60	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4851 : 
; 4852 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00f66	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00f6d	74 16		 je	 SHORT $LN31@draw_aircr
  00f6f	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00f76	74 0d		 je	 SHORT $LN31@draw_aircr
  00f78	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00f7f	0f 85 80 04 00
	00		 jne	 $LN35@draw_aircr
$LN31@draw_aircr:

; 4853 : 						{
; 4854 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00f85	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00f8c	74 10		 je	 SHORT $LN183@draw_aircr
  00f8e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f94	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f96	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv562[ebp], ecx
  00f9c	eb 20		 jmp	 SHORT $LN184@draw_aircr
$LN183@draw_aircr:
  00f9e	68 f6 12 00 00	 push	 4854			; 000012f6H
  00fa3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fa8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fae	52		 push	 edx
  00faf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fb4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv562[ebp], 0
$LN184@draw_aircr:
  00fbe	b8 01 00 00 00	 mov	 eax, 1
  00fc3	85 c0		 test	 eax, eax
  00fc5	74 0c		 je	 SHORT $LN185@draw_aircr
  00fc7	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv569[ebp], 38 ; 00000026H
  00fd1	eb 20		 jmp	 SHORT $LN186@draw_aircr
$LN185@draw_aircr:
  00fd3	68 f6 12 00 00	 push	 4854			; 000012f6H
  00fd8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fdd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00fe3	51		 push	 ecx
  00fe4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fe9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv569[ebp], 0
$LN186@draw_aircr:
  00ff3	6a 26		 push	 38			; 00000026H
  00ff5	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00ffb	52		 push	 edx
  00ffc	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv562[ebp], 180
  01006	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv569[ebp]
  0100c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01013	ff d2		 call	 edx
  01015	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0101b	0f 85 e4 03 00
	00		 jne	 $LN35@draw_aircr

; 4855 : 							{
; 4856 : 								draw_threat_line = TRUE;

  01021	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 4857 : 
; 4858 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  0102b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01032	74 10		 je	 SHORT $LN187@draw_aircr
  01034	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0103a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0103c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv582[ebp], ecx
  01042	eb 27		 jmp	 SHORT $LN188@draw_aircr
$LN187@draw_aircr:
  01044	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0104a	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  01050	52		 push	 edx
  01051	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0105b	50		 push	 eax
  0105c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01061	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv582[ebp], 0
$LN188@draw_aircr:
  0106b	b9 01 00 00 00	 mov	 ecx, 1
  01070	85 c9		 test	 ecx, ecx
  01072	74 0c		 je	 SHORT $LN189@draw_aircr
  01074	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv590[ebp], 24 ; 00000018H
  0107e	eb 27		 jmp	 SHORT $LN190@draw_aircr
$LN189@draw_aircr:
  01080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01086	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  0108c	52		 push	 edx
  0108d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01097	50		 push	 eax
  01098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0109d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv590[ebp], 0
$LN190@draw_aircr:
  010a7	6a 18		 push	 24			; 00000018H
  010a9	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  010af	51		 push	 ecx
  010b0	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv582[ebp], 180
  010ba	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv590[ebp]
  010c0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  010c7	ff d1		 call	 ecx
  010c9	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN10@draw_aircr:

; 4859 : 
; 4860 : 								while (launched_weapon)

  010cf	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010d6	0f 84 ef 01 00
	00		 je	 $LN11@draw_aircr

; 4861 : 								{
; 4862 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  010dc	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010e3	74 10		 je	 SHORT $LN191@draw_aircr
  010e5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  010eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  010ed	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv602[ebp], ecx
  010f3	eb 20		 jmp	 SHORT $LN192@draw_aircr
$LN191@draw_aircr:
  010f5	68 fe 12 00 00	 push	 4862			; 000012feH
  010fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  010ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01105	52		 push	 edx
  01106	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0110b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv602[ebp], 0
$LN192@draw_aircr:
  01115	b8 01 00 00 00	 mov	 eax, 1
  0111a	85 c0		 test	 eax, eax
  0111c	74 0c		 je	 SHORT $LN193@draw_aircr
  0111e	c7 85 98 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv609[ebp], 263 ; 00000107H
  01128	eb 20		 jmp	 SHORT $LN194@draw_aircr
$LN193@draw_aircr:
  0112a	68 fe 12 00 00	 push	 4862			; 000012feH
  0112f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0113a	51		 push	 ecx
  0113b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01140	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN194@draw_aircr:
  0114a	68 07 01 00 00	 push	 263			; 00000107H
  0114f	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  01155	52		 push	 edx
  01156	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv602[ebp], 1116
  01160	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv609[ebp]
  01166	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0116d	ff d2		 call	 edx
  0116f	85 c0		 test	 eax, eax
  01171	0f 84 ab 00 00
	00		 je	 $LN34@draw_aircr

; 4863 : 									{
; 4864 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01177	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  0117e	74 10		 je	 SHORT $LN195@draw_aircr
  01180	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01186	8b 08		 mov	 ecx, DWORD PTR [eax]
  01188	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv621[ebp], ecx
  0118e	eb 20		 jmp	 SHORT $LN196@draw_aircr
$LN195@draw_aircr:
  01190	68 00 13 00 00	 push	 4864			; 00001300H
  01195	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0119a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011a0	52		 push	 edx
  011a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011a6	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv621[ebp], 0
$LN196@draw_aircr:
  011b0	b8 01 00 00 00	 mov	 eax, 1
  011b5	85 c0		 test	 eax, eax
  011b7	74 0c		 je	 SHORT $LN197@draw_aircr
  011b9	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv628[ebp], 38 ; 00000026H
  011c3	eb 20		 jmp	 SHORT $LN198@draw_aircr
$LN197@draw_aircr:
  011c5	68 00 13 00 00	 push	 4864			; 00001300H
  011ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011d5	51		 push	 ecx
  011d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011db	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv628[ebp], 0
$LN198@draw_aircr:
  011e5	6a 26		 push	 38			; 00000026H
  011e7	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  011ed	52		 push	 edx
  011ee	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv621[ebp], 180
  011f8	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv628[ebp]
  011fe	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01205	ff d2		 call	 edx
  01207	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0120d	75 13		 jne	 SHORT $LN34@draw_aircr

; 4865 : 										{
; 4866 : 											draw_threat_line = *ase_draw_threat_line_status;

  0120f	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  01215	8b 08		 mov	 ecx, DWORD PTR [eax]
  01217	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], ecx

; 4867 : 
; 4868 : 											break;

  0121d	e9 a9 00 00 00	 jmp	 $LN11@draw_aircr
$LN34@draw_aircr:

; 4869 : 										}
; 4870 : 									}
; 4871 : 
; 4872 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01222	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01229	74 10		 je	 SHORT $LN199@draw_aircr
  0122b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01231	8b 08		 mov	 ecx, DWORD PTR [eax]
  01233	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv641[ebp], ecx
  01239	eb 27		 jmp	 SHORT $LN200@draw_aircr
$LN199@draw_aircr:
  0123b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01241	81 c2 c4 00 00
	00		 add	 edx, 196		; 000000c4H
  01247	52		 push	 edx
  01248	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0124d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01252	50		 push	 eax
  01253	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01258	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv641[ebp], 0
$LN200@draw_aircr:
  01262	b9 01 00 00 00	 mov	 ecx, 1
  01267	85 c9		 test	 ecx, ecx
  01269	74 0c		 je	 SHORT $LN201@draw_aircr
  0126b	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv649[ebp], 24 ; 00000018H
  01275	eb 27		 jmp	 SHORT $LN202@draw_aircr
$LN201@draw_aircr:
  01277	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0127d	81 c2 c4 00 00
	00		 add	 edx, 196		; 000000c4H
  01283	52		 push	 edx
  01284	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01289	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0128e	50		 push	 eax
  0128f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01294	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv649[ebp], 0
$LN202@draw_aircr:
  0129e	6a 18		 push	 24			; 00000018H
  012a0	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  012a6	51		 push	 ecx
  012a7	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv641[ebp], 180
  012b1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv649[ebp]
  012b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  012be	ff d1		 call	 ecx
  012c0	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 4873 : 								}

  012c6	e9 04 fe ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 4874 : 
; 4875 : 								if (draw_threat_line)

  012cb	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  012d2	0f 84 2d 01 00
	00		 je	 $LN35@draw_aircr

; 4876 : 								{
; 4877 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  012d8	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  012df	74 10		 je	 SHORT $LN203@draw_aircr
  012e1	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  012e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  012e9	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv662[ebp], ecx
  012ef	eb 27		 jmp	 SHORT $LN204@draw_aircr
$LN203@draw_aircr:
  012f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  012f7	81 c2 c9 00 00
	00		 add	 edx, 201		; 000000c9H
  012fd	52		 push	 edx
  012fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01308	50		 push	 eax
  01309	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0130e	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv662[ebp], 0
$LN204@draw_aircr:
  01318	b9 01 00 00 00	 mov	 ecx, 1
  0131d	85 c9		 test	 ecx, ecx
  0131f	74 0c		 je	 SHORT $LN205@draw_aircr
  01321	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv670[ebp], 8
  0132b	eb 27		 jmp	 SHORT $LN206@draw_aircr
$LN205@draw_aircr:
  0132d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01333	81 c2 c9 00 00
	00		 add	 edx, 201		; 000000c9H
  01339	52		 push	 edx
  0133a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0133f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01344	50		 push	 eax
  01345	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0134a	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv670[ebp], 0
$LN206@draw_aircr:
  01354	6a 08		 push	 8
  01356	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0135c	51		 push	 ecx
  0135d	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv662[ebp], 96
  01364	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  0136a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01371	ff d1		 call	 ecx
  01373	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4878 : 
; 4879 : 									dx = (threat_position->x - source_position->x) * scale;

  01379	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0137f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01385	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01389	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0138d	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01395	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4880 : 									dy = (threat_position->z - source_position->z) * scale;

  0139d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  013a3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013a9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  013ae	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  013b3	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  013bb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4881 : 
; 4882 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR_RED);

  013c3	b8 04 00 00 00	 mov	 eax, 4
  013c8	6b c8 12	 imul	 ecx, eax, 18
  013cb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013d1	52		 push	 edx
  013d2	51		 push	 ecx
  013d3	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  013db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e0	51		 push	 ecx
  013e1	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  013e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ee	51		 push	 ecx
  013ef	0f 57 c0	 xorps	 xmm0, xmm0
  013f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f7	51		 push	 ecx
  013f8	0f 57 c0	 xorps	 xmm0, xmm0
  013fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01400	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_aircr:

; 4883 : 								}
; 4884 : 							}
; 4885 : 						}
; 4886 : 					}
; 4887 : 				}
; 4888 : 			}
; 4889 : 
; 4890 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  01405	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0140c	74 10		 je	 SHORT $LN207@draw_aircr
  0140e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01414	8b 08		 mov	 ecx, DWORD PTR [eax]
  01416	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv697[ebp], ecx
  0141c	eb 27		 jmp	 SHORT $LN208@draw_aircr
$LN207@draw_aircr:
  0141e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01424	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  0142a	52		 push	 edx
  0142b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01435	50		 push	 eax
  01436	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0143b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN208@draw_aircr:
  01445	b9 01 00 00 00	 mov	 ecx, 1
  0144a	85 c9		 test	 ecx, ecx
  0144c	74 0c		 je	 SHORT $LN209@draw_aircr
  0144e	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv705[ebp], 18 ; 00000012H
  01458	eb 27		 jmp	 SHORT $LN210@draw_aircr
$LN209@draw_aircr:
  0145a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01460	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  01466	52		 push	 edx
  01467	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0146c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01471	50		 push	 eax
  01472	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01477	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv705[ebp], 0
$LN210@draw_aircr:
  01481	6a 12		 push	 18			; 00000012H
  01483	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01489	51		 push	 ecx
  0148a	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv697[ebp], 180
  01494	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv705[ebp]
  0149a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014a1	ff d1		 call	 ecx
  014a3	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4891 : 		}

  014a9	e9 32 f8 ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 4892 : 
; 4893 : 		//
; 4894 : 		// draw incoming missiles
; 4895 : 		//
; 4896 : 
; 4897 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  014ae	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  014b5	74 10		 je	 SHORT $LN211@draw_aircr
  014b7	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  014bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  014bf	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv717[ebp], ecx
  014c5	eb 27		 jmp	 SHORT $LN212@draw_aircr
$LN211@draw_aircr:
  014c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  014cd	81 c2 dd 00 00
	00		 add	 edx, 221		; 000000ddH
  014d3	52		 push	 edx
  014d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  014d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014de	50		 push	 eax
  014df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014e4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv717[ebp], 0
$LN212@draw_aircr:
  014ee	b9 01 00 00 00	 mov	 ecx, 1
  014f3	85 c9		 test	 ecx, ecx
  014f5	74 0c		 je	 SHORT $LN213@draw_aircr
  014f7	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv725[ebp], 38 ; 00000026H
  01501	eb 27		 jmp	 SHORT $LN214@draw_aircr
$LN213@draw_aircr:
  01503	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01509	81 c2 dd 00 00
	00		 add	 edx, 221		; 000000ddH
  0150f	52		 push	 edx
  01510	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0151a	50		 push	 eax
  0151b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01520	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv725[ebp], 0
$LN214@draw_aircr:
  0152a	6a 26		 push	 38			; 00000026H
  0152c	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01532	51		 push	 ecx
  01533	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv717[ebp], 180
  0153d	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv725[ebp]
  01543	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0154a	ff d1		 call	 ecx
  0154c	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN12@draw_aircr:

; 4898 : 
; 4899 : 		while (threat)

  01552	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01559	0f 84 39 03 00
	00		 je	 $LN13@draw_aircr

; 4900 : 		{
; 4901 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  0155f	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01566	74 10		 je	 SHORT $LN215@draw_aircr
  01568	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0156e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01570	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv738[ebp], ecx
  01576	eb 27		 jmp	 SHORT $LN216@draw_aircr
$LN215@draw_aircr:
  01578	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0157e	81 c2 e1 00 00
	00		 add	 edx, 225		; 000000e1H
  01584	52		 push	 edx
  01585	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0158a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0158f	50		 push	 eax
  01590	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01595	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv738[ebp], 0
$LN216@draw_aircr:
  0159f	b9 01 00 00 00	 mov	 ecx, 1
  015a4	85 c9		 test	 ecx, ecx
  015a6	74 0c		 je	 SHORT $LN217@draw_aircr
  015a8	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv746[ebp], 233 ; 000000e9H
  015b2	eb 27		 jmp	 SHORT $LN218@draw_aircr
$LN217@draw_aircr:
  015b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  015ba	81 c2 e1 00 00
	00		 add	 edx, 225		; 000000e1H
  015c0	52		 push	 edx
  015c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015cb	50		 push	 eax
  015cc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015d1	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv746[ebp], 0
$LN218@draw_aircr:
  015db	68 e9 00 00 00	 push	 233			; 000000e9H
  015e0	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  015e6	51		 push	 ecx
  015e7	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv738[ebp], 1116
  015f1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv746[ebp]
  015f7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  015fe	ff d1		 call	 ecx
  01600	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4902 : 
; 4903 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  01606	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  0160d	74 16		 je	 SHORT $LN37@draw_aircr
  0160f	83 bd f8 fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  01616	74 0d		 je	 SHORT $LN37@draw_aircr
  01618	83 bd f8 fe ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  0161f	0f 85 ca 01 00
	00		 jne	 $LN39@draw_aircr
$LN37@draw_aircr:

; 4904 : 			{
; 4905 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01625	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0162c	74 10		 je	 SHORT $LN219@draw_aircr
  0162e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01634	8b 08		 mov	 ecx, DWORD PTR [eax]
  01636	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv761[ebp], ecx
  0163c	eb 27		 jmp	 SHORT $LN220@draw_aircr
$LN219@draw_aircr:
  0163e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01644	81 c2 e5 00 00
	00		 add	 edx, 229		; 000000e5H
  0164a	52		 push	 edx
  0164b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01650	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01655	50		 push	 eax
  01656	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0165b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv761[ebp], 0
$LN220@draw_aircr:
  01665	b9 01 00 00 00	 mov	 ecx, 1
  0166a	85 c9		 test	 ecx, ecx
  0166c	74 0c		 je	 SHORT $LN221@draw_aircr
  0166e	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv769[ebp], 8
  01678	eb 27		 jmp	 SHORT $LN222@draw_aircr
$LN221@draw_aircr:
  0167a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01680	81 c2 e5 00 00
	00		 add	 edx, 229		; 000000e5H
  01686	52		 push	 edx
  01687	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0168c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01691	50		 push	 eax
  01692	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01697	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv769[ebp], 0
$LN222@draw_aircr:
  016a1	6a 08		 push	 8
  016a3	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  016a9	51		 push	 ecx
  016aa	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv761[ebp], 96
  016b1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv769[ebp]
  016b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  016be	ff d1		 call	 ecx
  016c0	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4906 : 
; 4907 : 				dx = (threat_position->x - source_position->x) * scale;

  016c6	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016cc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016d2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  016d6	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  016da	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016e2	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4908 : 				dy = (threat_position->z - source_position->z) * scale;

  016ea	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016f0	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016f6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  016fb	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01700	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01708	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4909 : 
; 4910 : 				if (draw_large_mfd)

  01710	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01717	74 6c		 je	 SHORT $LN38@draw_aircr

; 4911 : 				{
; 4912 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01719	b8 04 00 00 00	 mov	 eax, 4
  0171e	6b c8 05	 imul	 ecx, eax, 5
  01721	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01727	52		 push	 edx
  01728	51		 push	 ecx
  01729	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01736	51		 push	 ecx
  01737	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0173f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01744	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  01749	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4913 : 
; 4914 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, MFD_COLOUR1);

  0174e	b8 04 00 00 00	 mov	 eax, 4
  01753	6b c8 00	 imul	 ecx, eax, 0
  01756	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0175c	52		 push	 edx
  0175d	51		 push	 ecx
  0175e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01766	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0176b	51		 push	 ecx
  0176c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01779	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  0177e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4915 : 				}
; 4916 : 				else

  01783	eb 6a		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 4917 : 				{
; 4918 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01785	b8 04 00 00 00	 mov	 eax, 4
  0178a	6b c8 05	 imul	 ecx, eax, 5
  0178d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01793	52		 push	 edx
  01794	51		 push	 ecx
  01795	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0179d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a2	51		 push	 ecx
  017a3	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b0	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  017b5	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4919 : 
; 4920 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, MFD_COLOUR1);

  017ba	b8 04 00 00 00	 mov	 eax, 4
  017bf	6b c8 00	 imul	 ecx, eax, 0
  017c2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017c8	52		 push	 edx
  017c9	51		 push	 ecx
  017ca	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  017d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d7	51		 push	 ecx
  017d8	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e5	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  017ea	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN39@draw_aircr:

; 4921 : 				}
; 4922 : 			}
; 4923 : 
; 4924 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  017ef	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  017f6	74 10		 je	 SHORT $LN223@draw_aircr
  017f8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  017fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  01800	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv814[ebp], ecx
  01806	eb 27		 jmp	 SHORT $LN224@draw_aircr
$LN223@draw_aircr:
  01808	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0180e	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  01814	52		 push	 edx
  01815	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0181a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0181f	50		 push	 eax
  01820	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01825	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv814[ebp], 0
$LN224@draw_aircr:
  0182f	b9 01 00 00 00	 mov	 ecx, 1
  01834	85 c9		 test	 ecx, ecx
  01836	74 0c		 je	 SHORT $LN225@draw_aircr
  01838	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv822[ebp], 38 ; 00000026H
  01842	eb 27		 jmp	 SHORT $LN226@draw_aircr
$LN225@draw_aircr:
  01844	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0184a	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  01850	52		 push	 edx
  01851	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01856	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0185b	50		 push	 eax
  0185c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01861	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv822[ebp], 0
$LN226@draw_aircr:
  0186b	6a 26		 push	 38			; 00000026H
  0186d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01873	51		 push	 ecx
  01874	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv814[ebp], 180
  0187e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv822[ebp]
  01884	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0188b	ff d1		 call	 ecx
  0188d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4925 : 		}

  01893	e9 ba fc ff ff	 jmp	 $LN12@draw_aircr
$LN13@draw_aircr:

; 4926 : 
; 4927 : 		set_2d_window_rotation (mfd_env, 0.0);

  01898	51		 push	 ecx
  01899	0f 57 c0	 xorps	 xmm0, xmm0
  0189c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  018a6	50		 push	 eax
  018a7	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4928 : 	}
; 4929 : 
; 4930 : 	////////////////////////////////////////
; 4931 : 	//
; 4932 : 	// aircraft datum symbol
; 4933 : 	//
; 4934 : 	////////////////////////////////////////
; 4935 : 
; 4936 : 	if (draw_large_mfd)

  018ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018b3	74 58		 je	 SHORT $LN40@draw_aircr

; 4937 : 	{
; 4938 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  018b5	b8 04 00 00 00	 mov	 eax, 4
  018ba	6b c8 05	 imul	 ecx, eax, 5
  018bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018c3	52		 push	 edx
  018c4	51		 push	 ecx
  018c5	0f 57 c0	 xorps	 xmm0, xmm0
  018c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018cd	51		 push	 ecx
  018ce	0f 57 c0	 xorps	 xmm0, xmm0
  018d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d6	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  018db	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4939 : 
; 4940 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  018e0	b8 04 00 00 00	 mov	 eax, 4
  018e5	6b c8 00	 imul	 ecx, eax, 0
  018e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018ee	52		 push	 edx
  018ef	51		 push	 ecx
  018f0	0f 57 c0	 xorps	 xmm0, xmm0
  018f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f8	51		 push	 ecx
  018f9	0f 57 c0	 xorps	 xmm0, xmm0
  018fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01901	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  01906	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4941 : 	}
; 4942 : 	else

  0190b	eb 56		 jmp	 SHORT $LN41@draw_aircr
$LN40@draw_aircr:

; 4943 : 	{
; 4944 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  0190d	b8 04 00 00 00	 mov	 eax, 4
  01912	6b c8 05	 imul	 ecx, eax, 5
  01915	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0191b	52		 push	 edx
  0191c	51		 push	 ecx
  0191d	0f 57 c0	 xorps	 xmm0, xmm0
  01920	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01925	51		 push	 ecx
  01926	0f 57 c0	 xorps	 xmm0, xmm0
  01929	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0192e	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  01933	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4945 : 
; 4946 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  01938	b8 04 00 00 00	 mov	 eax, 4
  0193d	6b c8 00	 imul	 ecx, eax, 0
  01940	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01946	52		 push	 edx
  01947	51		 push	 ecx
  01948	0f 57 c0	 xorps	 xmm0, xmm0
  0194b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01950	51		 push	 ecx
  01951	0f 57 c0	 xorps	 xmm0, xmm0
  01954	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01959	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  0195e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_aircr:

; 4947 : 	}
; 4948 : 
; 4949 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  01963	b8 04 00 00 00	 mov	 eax, 4
  01968	6b c8 0d	 imul	 ecx, eax, 13
  0196b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01971	52		 push	 edx
  01972	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4950 : 
; 4951 : 	if (draw_large_mfd)

  01977	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0197e	74 09		 je	 SHORT $LN42@draw_aircr

; 4952 : 	{
; 4953 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  01980	6a 05		 push	 5
  01982	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4954 : 	}
; 4955 : 	else

  01987	eb 07		 jmp	 SHORT $LN43@draw_aircr
$LN42@draw_aircr:

; 4956 : 	{
; 4957 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  01989	6a 01		 push	 1
  0198b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN43@draw_aircr:

; 4958 : 	}
; 4959 : 
; 4960 : 	////////////////////////////////////////
; 4961 : 	//
; 4962 : 	// text
; 4963 : 	//
; 4964 : 	////////////////////////////////////////
; 4965 : 
; 4966 : 	//
; 4967 : 	// closest incoming missile
; 4968 : 	//
; 4969 : 
; 4970 : 	{
; 4971 : 		entity
; 4972 : 			*closest_missile;
; 4973 : 
; 4974 : 		float
; 4975 : 			time_to_impact;
; 4976 : 
; 4977 : 		if (draw_large_mfd)

  01990	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01997	74 12		 je	 SHORT $LN44@draw_aircr

; 4978 : 		{
; 4979 : 			y_adjust = 5.0;

  01999	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  019a1	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4980 : 		}
; 4981 : 		else

  019a9	eb 10		 jmp	 SHORT $LN45@draw_aircr
$LN44@draw_aircr:

; 4982 : 		{
; 4983 : 			y_adjust = 2.0;

  019ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  019b3	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN45@draw_aircr:

; 4984 : 		}
; 4985 : 
; 4986 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  019bb	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  019c1	50		 push	 eax
  019c2	6a 02		 push	 2
  019c4	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  019ca	51		 push	 ecx
  019cb	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  019d1	52		 push	 edx
  019d2	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  019d7	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 4987 : 
; 4988 : 		if (closest_missile)

  019dd	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  019e4	0f 84 b5 00 00
	00		 je	 $LN48@draw_aircr

; 4989 : 		{
; 4990 : 			set_2d_mono_font_position (-1.0, 1.0);

  019ea	51		 push	 ecx
  019eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  019f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f8	51		 push	 ecx
  019f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a06	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4991 : 
; 4992 : 			set_mono_font_rel_position (1.0, y_adjust);

  01a0b	51		 push	 ecx
  01a0c	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a19	51		 push	 ecx
  01a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a27	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4993 : 
; 4994 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  01a2c	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01a34	83 ec 08	 sub	 esp, 8
  01a37	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01a3c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  01a41	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a47	50		 push	 eax
  01a48	e8 00 00 00 00	 call	 _sprintf
  01a4d	83 c4 10	 add	 esp, 16			; 00000010H

; 4995 : 
; 4996 : 			print_mono_font_string (buffer);

  01a50	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a56	50		 push	 eax
  01a57	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4997 : 
; 4998 : 			if (draw_large_mfd)

  01a5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a63	74 1e		 je	 SHORT $LN47@draw_aircr

; 4999 : 			{
; 5000 : 				y_adjust += 13.0;

  01a65	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a6d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01a75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a79	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5001 : 			}
; 5002 : 			else

  01a81	eb 1c		 jmp	 SHORT $LN48@draw_aircr
$LN47@draw_aircr:

; 5003 : 			{
; 5004 : 				y_adjust += 7.0;

  01a83	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a8b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01a93	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a97	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN48@draw_aircr:

; 5005 : 			}
; 5006 : 		}
; 5007 : 
; 5008 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01a9f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01aa5	50		 push	 eax
  01aa6	6a 01		 push	 1
  01aa8	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01aae	51		 push	 ecx
  01aaf	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ab5	52		 push	 edx
  01ab6	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01abb	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5009 : 
; 5010 : 		if (closest_missile)

  01ac1	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01ac8	0f 84 b5 00 00
	00		 je	 $LN51@draw_aircr

; 5011 : 		{
; 5012 : 			set_2d_mono_font_position (-1.0, 1.0);

  01ace	51		 push	 ecx
  01acf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ad7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01adc	51		 push	 ecx
  01add	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aea	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5013 : 
; 5014 : 			set_mono_font_rel_position (1.0, y_adjust);

  01aef	51		 push	 ecx
  01af0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01af8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afd	51		 push	 ecx
  01afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b0b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5015 : 
; 5016 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01b10	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b18	83 ec 08	 sub	 esp, 8
  01b1b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b20	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01b25	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b2b	50		 push	 eax
  01b2c	e8 00 00 00 00	 call	 _sprintf
  01b31	83 c4 10	 add	 esp, 16			; 00000010H

; 5017 : 
; 5018 : 			print_mono_font_string (buffer);

  01b34	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b3a	50		 push	 eax
  01b3b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5019 : 
; 5020 : 			if (draw_large_mfd)

  01b40	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01b47	74 1e		 je	 SHORT $LN50@draw_aircr

; 5021 : 			{
; 5022 : 				y_adjust += 13.0;

  01b49	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b51	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01b59	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b5d	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5023 : 			}
; 5024 : 			else

  01b65	eb 1c		 jmp	 SHORT $LN51@draw_aircr
$LN50@draw_aircr:

; 5025 : 			{
; 5026 : 				y_adjust += 7.0;

  01b67	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b6f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01b77	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b7b	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN51@draw_aircr:

; 5027 : 			}
; 5028 : 		}
; 5029 : 
; 5030 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01b83	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01b89	50		 push	 eax
  01b8a	6a 03		 push	 3
  01b8c	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01b92	51		 push	 ecx
  01b93	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01b99	52		 push	 edx
  01b9a	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01b9f	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5031 : 
; 5032 : 		if (closest_missile)

  01ba5	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01bac	74 72		 je	 SHORT $LN52@draw_aircr

; 5033 : 		{
; 5034 : 			set_2d_mono_font_position (-1.0, 1.0);

  01bae	51		 push	 ecx
  01baf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01bb7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbc	51		 push	 ecx
  01bbd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01bc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5035 : 
; 5036 : 			set_mono_font_rel_position (1.0, y_adjust);

  01bcf	51		 push	 ecx
  01bd0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdd	51		 push	 ecx
  01bde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01be6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01beb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5037 : 
; 5038 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01bf0	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01bf8	83 ec 08	 sub	 esp, 8
  01bfb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01c00	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01c05	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c0b	50		 push	 eax
  01c0c	e8 00 00 00 00	 call	 _sprintf
  01c11	83 c4 10	 add	 esp, 16			; 00000010H

; 5039 : 
; 5040 : 			print_mono_font_string (buffer);

  01c14	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c1a	50		 push	 eax
  01c1b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN52@draw_aircr:

; 5041 : 		}
; 5042 : 	}
; 5043 : 
; 5044 : 	//
; 5045 : 	// ASE range
; 5046 : 	//
; 5047 : 
; 5048 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01c20	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c28	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01c2f	9f		 lahf
  01c30	f6 c4 44	 test	 ah, 68			; 00000044H
  01c33	7a 09		 jp	 SHORT $LN53@draw_aircr

; 5049 : 	{
; 5050 : 		s = "2.5KM";

  01c35	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05IHJDDCGF@2?45KM@
  01c3c	eb 61		 jmp	 SHORT $LN60@draw_aircr
$LN53@draw_aircr:

; 5051 : 	}
; 5052 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01c3e	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c46	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01c4d	9f		 lahf
  01c4e	f6 c4 44	 test	 ah, 68			; 00000044H
  01c51	7a 09		 jp	 SHORT $LN55@draw_aircr

; 5053 : 	{
; 5054 : 		s = "5KM";

  01c53	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CAFGHLBJ@5KM@
  01c5a	eb 43		 jmp	 SHORT $LN60@draw_aircr
$LN55@draw_aircr:

; 5055 : 	}
; 5056 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01c5c	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c64	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01c6b	9f		 lahf
  01c6c	f6 c4 44	 test	 ah, 68			; 00000044H
  01c6f	7a 09		 jp	 SHORT $LN57@draw_aircr

; 5057 : 	{
; 5058 : 		s = "10KM";

  01c71	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04GMKPDCBM@10KM@
  01c78	eb 25		 jmp	 SHORT $LN60@draw_aircr
$LN57@draw_aircr:

; 5059 : 	}
; 5060 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01c7a	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c82	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01c89	9f		 lahf
  01c8a	f6 c4 44	 test	 ah, 68			; 00000044H
  01c8d	7a 09		 jp	 SHORT $LN59@draw_aircr

; 5061 : 	{
; 5062 : 		s = "25KM";

  01c8f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04BMNBLIPO@25KM@

; 5063 : 	}
; 5064 : 	else

  01c96	eb 07		 jmp	 SHORT $LN60@draw_aircr
$LN59@draw_aircr:

; 5065 : 	{
; 5066 : 		s = "XXX";

  01c98	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN60@draw_aircr:

; 5067 : 	}
; 5068 : 
; 5069 : 	width = get_mono_font_string_width (s);

  01c9f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01ca2	50		 push	 eax
  01ca3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01ca8	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5070 : 
; 5071 : 	if (draw_large_mfd)

  01cae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01cb5	74 2e		 je	 SHORT $LN61@draw_aircr

; 5072 : 	{
; 5073 : 		width += 2.0;

  01cb7	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01cbf	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01cc7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ccb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5074 : 
; 5075 : 		y_adjust = 5.0;

  01cd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01cdb	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5076 : 	}
; 5077 : 	else

  01ce3	eb 2c		 jmp	 SHORT $LN62@draw_aircr
$LN61@draw_aircr:

; 5078 : 	{
; 5079 : 		width += 1.0;

  01ce5	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01ced	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01cf5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cf9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5080 : 
; 5081 : 		y_adjust = 2.0;

  01d01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01d09	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN62@draw_aircr:

; 5082 : 	}
; 5083 : 
; 5084 : 	set_2d_mono_font_position (1.0, 1.0);

  01d11	51		 push	 ecx
  01d12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d1f	51		 push	 ecx
  01d20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d2d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5085 : 
; 5086 : 	set_mono_font_rel_position (-width, y_adjust);

  01d32	51		 push	 ecx
  01d33	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01d3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d40	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01d48	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d4f	51		 push	 ecx
  01d50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d55	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5087 : 
; 5088 : 	print_mono_font_string (s);

  01d5a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01d5d	50		 push	 eax
  01d5e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5089 : 
; 5090 : 	//
; 5091 : 	// jammers
; 5092 : 	//
; 5093 : 
; 5094 : 	if (draw_large_mfd)

  01d63	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01d6a	0f 84 d2 00 00
	00		 je	 $LN63@draw_aircr

; 5095 : 	{
; 5096 : 		if (hokum_damage.infra_red_jammer)

  01d70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  01d75	c1 e8 08	 shr	 eax, 8
  01d78	83 e0 01	 and	 eax, 1
  01d7b	74 0c		 je	 SHORT $LN65@draw_aircr

; 5097 : 		{
; 5098 : 			s = "IR JAM XXX";

  01d7d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 5099 : 		}
; 5100 : 		else

  01d84	e9 a4 00 00 00	 jmp	 $LN68@draw_aircr
$LN65@draw_aircr:

; 5101 : 		{
; 5102 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01d89	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01d90	74 10		 je	 SHORT $LN227@draw_aircr
  01d92	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01d98	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d9a	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv981[ebp], ecx
  01da0	eb 20		 jmp	 SHORT $LN228@draw_aircr
$LN227@draw_aircr:
  01da2	68 ee 13 00 00	 push	 5102			; 000013eeH
  01da7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01db2	52		 push	 edx
  01db3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01db8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv981[ebp], 0
$LN228@draw_aircr:
  01dc2	b8 01 00 00 00	 mov	 eax, 1
  01dc7	85 c0		 test	 eax, eax
  01dc9	74 0c		 je	 SHORT $LN229@draw_aircr
  01dcb	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv988[ebp], 104 ; 00000068H
  01dd5	eb 20		 jmp	 SHORT $LN230@draw_aircr
$LN229@draw_aircr:
  01dd7	68 ee 13 00 00	 push	 5102			; 000013eeH
  01ddc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01de1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01de7	51		 push	 ecx
  01de8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ded	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv988[ebp], 0
$LN230@draw_aircr:
  01df7	6a 68		 push	 104			; 00000068H
  01df9	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01dff	52		 push	 edx
  01e00	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv981[ebp], 1116
  01e0a	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv988[ebp]
  01e10	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e17	ff d2		 call	 edx
  01e19	85 c0		 test	 eax, eax
  01e1b	74 09		 je	 SHORT $LN67@draw_aircr

; 5103 : 			{
; 5104 : 				s = "IR JAM ON";

  01e1d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 5105 : 			}
; 5106 : 			else

  01e24	eb 07		 jmp	 SHORT $LN68@draw_aircr
$LN67@draw_aircr:

; 5107 : 			{
; 5108 : 				s = "IR JAM OFF";

  01e26	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN68@draw_aircr:

; 5109 : 			}
; 5110 : 		}
; 5111 : 
; 5112 : 		y_adjust = -25.0;

  01e2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01e35	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5113 : 	}
; 5114 : 	else

  01e3d	e9 cd 00 00 00	 jmp	 $LN64@draw_aircr
$LN63@draw_aircr:

; 5115 : 	{
; 5116 : 		if (hokum_damage.infra_red_jammer)

  01e42	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  01e47	c1 e8 08	 shr	 eax, 8
  01e4a	83 e0 01	 and	 eax, 1
  01e4d	74 0c		 je	 SHORT $LN69@draw_aircr

; 5117 : 		{
; 5118 : 			s = "IR XXX";

  01e4f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 5119 : 		}
; 5120 : 		else

  01e56	e9 a4 00 00 00	 jmp	 $LN72@draw_aircr
$LN69@draw_aircr:

; 5121 : 		{
; 5122 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01e5b	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01e62	74 10		 je	 SHORT $LN231@draw_aircr
  01e64	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01e6a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e6c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1003[ebp], ecx
  01e72	eb 20		 jmp	 SHORT $LN232@draw_aircr
$LN231@draw_aircr:
  01e74	68 02 14 00 00	 push	 5122			; 00001402H
  01e79	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e7e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e84	52		 push	 edx
  01e85	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e8a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1003[ebp], 0
$LN232@draw_aircr:
  01e94	b8 01 00 00 00	 mov	 eax, 1
  01e99	85 c0		 test	 eax, eax
  01e9b	74 0c		 je	 SHORT $LN233@draw_aircr
  01e9d	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1010[ebp], 104 ; 00000068H
  01ea7	eb 20		 jmp	 SHORT $LN234@draw_aircr
$LN233@draw_aircr:
  01ea9	68 02 14 00 00	 push	 5122			; 00001402H
  01eae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01eb3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01eb9	51		 push	 ecx
  01eba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ebf	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1010[ebp], 0
$LN234@draw_aircr:
  01ec9	6a 68		 push	 104			; 00000068H
  01ecb	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ed1	52		 push	 edx
  01ed2	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1003[ebp], 1116
  01edc	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1010[ebp]
  01ee2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01ee9	ff d2		 call	 edx
  01eeb	85 c0		 test	 eax, eax
  01eed	74 09		 je	 SHORT $LN71@draw_aircr

; 5123 : 			{
; 5124 : 				s = "IR ON";

  01eef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 5125 : 			}
; 5126 : 			else

  01ef6	eb 07		 jmp	 SHORT $LN72@draw_aircr
$LN71@draw_aircr:

; 5127 : 			{
; 5128 : 				s = "IR OFF";

  01ef8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN72@draw_aircr:

; 5129 : 			}
; 5130 : 		}
; 5131 : 
; 5132 : 		y_adjust = -12.0;

  01eff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01f07	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN64@draw_aircr:

; 5133 : 	}
; 5134 : 
; 5135 : 	set_2d_mono_font_position (-1.0, -1.0);

  01f0f	51		 push	 ecx
  01f10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1d	51		 push	 ecx
  01f1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f2b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5136 : 
; 5137 : 	set_mono_font_rel_position (1.0, y_adjust);

  01f30	51		 push	 ecx
  01f31	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01f39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f3e	51		 push	 ecx
  01f3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01f47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f4c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5138 : 
; 5139 : 	print_mono_font_string (s);

  01f51	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01f54	50		 push	 eax
  01f55	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5140 : 
; 5141 : 	if (draw_large_mfd)

  01f5a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01f61	0f 84 d5 00 00
	00		 je	 $LN73@draw_aircr

; 5142 : 	{
; 5143 : 		if (hokum_damage.radar_jammer)

  01f67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  01f6c	c1 e8 07	 shr	 eax, 7
  01f6f	83 e0 01	 and	 eax, 1
  01f72	74 0c		 je	 SHORT $LN75@draw_aircr

; 5144 : 		{
; 5145 : 			s = "RD JAM XXX";

  01f74	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@

; 5146 : 		}
; 5147 : 		else

  01f7b	e9 a7 00 00 00	 jmp	 $LN78@draw_aircr
$LN75@draw_aircr:

; 5148 : 		{
; 5149 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01f80	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01f87	74 10		 je	 SHORT $LN235@draw_aircr
  01f89	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01f8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f91	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1031[ebp], ecx
  01f97	eb 20		 jmp	 SHORT $LN236@draw_aircr
$LN235@draw_aircr:
  01f99	68 1d 14 00 00	 push	 5149			; 0000141dH
  01f9e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fa3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01fa9	52		 push	 edx
  01faa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01faf	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1031[ebp], 0
$LN236@draw_aircr:
  01fb9	b8 01 00 00 00	 mov	 eax, 1
  01fbe	85 c0		 test	 eax, eax
  01fc0	74 0c		 je	 SHORT $LN237@draw_aircr
  01fc2	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1038[ebp], 168 ; 000000a8H
  01fcc	eb 20		 jmp	 SHORT $LN238@draw_aircr
$LN237@draw_aircr:
  01fce	68 1d 14 00 00	 push	 5149			; 0000141dH
  01fd3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fd8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01fde	51		 push	 ecx
  01fdf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fe4	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1038[ebp], 0
$LN238@draw_aircr:
  01fee	68 a8 00 00 00	 push	 168			; 000000a8H
  01ff3	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ff9	52		 push	 edx
  01ffa	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1031[ebp], 1116
  02004	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1038[ebp]
  0200a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  02011	ff d2		 call	 edx
  02013	85 c0		 test	 eax, eax
  02015	74 09		 je	 SHORT $LN77@draw_aircr

; 5150 : 			{
; 5151 : 				s = "RD JAM ON";

  02017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKIOJJOP@RD?5JAM?5ON@

; 5152 : 			}
; 5153 : 			else

  0201e	eb 07		 jmp	 SHORT $LN78@draw_aircr
$LN77@draw_aircr:

; 5154 : 			{
; 5155 : 				s = "RD JAM OFF";

  02020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
$LN78@draw_aircr:

; 5156 : 			}
; 5157 : 		}
; 5158 : 
; 5159 : 		y_adjust = -12.0;

  02027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0202f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5160 : 	}
; 5161 : 	else

  02037	e9 d0 00 00 00	 jmp	 $LN74@draw_aircr
$LN73@draw_aircr:

; 5162 : 	{
; 5163 : 		if (hokum_damage.radar_jammer)

  0203c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  02041	c1 e8 07	 shr	 eax, 7
  02044	83 e0 01	 and	 eax, 1
  02047	74 0c		 je	 SHORT $LN79@draw_aircr

; 5164 : 		{
; 5165 : 			s = "RD XXX";

  02049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JNKFDAHI@RD?5XXX@

; 5166 : 		}
; 5167 : 		else

  02050	e9 a7 00 00 00	 jmp	 $LN82@draw_aircr
$LN79@draw_aircr:

; 5168 : 		{
; 5169 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  02055	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0205c	74 10		 je	 SHORT $LN239@draw_aircr
  0205e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02064	8b 08		 mov	 ecx, DWORD PTR [eax]
  02066	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1053[ebp], ecx
  0206c	eb 20		 jmp	 SHORT $LN240@draw_aircr
$LN239@draw_aircr:
  0206e	68 31 14 00 00	 push	 5169			; 00001431H
  02073	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02078	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0207e	52		 push	 edx
  0207f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02084	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1053[ebp], 0
$LN240@draw_aircr:
  0208e	b8 01 00 00 00	 mov	 eax, 1
  02093	85 c0		 test	 eax, eax
  02095	74 0c		 je	 SHORT $LN241@draw_aircr
  02097	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1060[ebp], 168 ; 000000a8H
  020a1	eb 20		 jmp	 SHORT $LN242@draw_aircr
$LN241@draw_aircr:
  020a3	68 31 14 00 00	 push	 5169			; 00001431H
  020a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  020ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  020b3	51		 push	 ecx
  020b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020b9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1060[ebp], 0
$LN242@draw_aircr:
  020c3	68 a8 00 00 00	 push	 168			; 000000a8H
  020c8	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  020ce	52		 push	 edx
  020cf	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1053[ebp], 1116
  020d9	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1060[ebp]
  020df	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  020e6	ff d2		 call	 edx
  020e8	85 c0		 test	 eax, eax
  020ea	74 09		 je	 SHORT $LN81@draw_aircr

; 5170 : 			{
; 5171 : 				s = "RD ON";

  020ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BHAGAOGB@RD?5ON@

; 5172 : 			}
; 5173 : 			else

  020f3	eb 07		 jmp	 SHORT $LN82@draw_aircr
$LN81@draw_aircr:

; 5174 : 			{
; 5175 : 				s = "RD OFF";

  020f5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JCJCOOPL@RD?5OFF@
$LN82@draw_aircr:

; 5176 : 			}
; 5177 : 		}
; 5178 : 
; 5179 : 		y_adjust = -5.0;

  020fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02104	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN74@draw_aircr:

; 5180 : 	}
; 5181 : 
; 5182 : 	set_2d_mono_font_position (-1.0, -1.0);

  0210c	51		 push	 ecx
  0210d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0211a	51		 push	 ecx
  0211b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02128	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5183 : 
; 5184 : 	set_mono_font_rel_position (1.0, y_adjust);

  0212d	51		 push	 ecx
  0212e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0213b	51		 push	 ecx
  0213c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02149	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5185 : 
; 5186 : 	print_mono_font_string (s);

  0214e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02151	50		 push	 eax
  02152	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5187 : 
; 5188 : 	//
; 5189 : 	// auto-countermeasures
; 5190 : 	//
; 5191 : 
; 5192 : 	if (get_global_auto_counter_measures ())

  02157	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  0215e	0f 84 16 01 00
	00		 je	 $LN83@draw_aircr

; 5193 : 	{
; 5194 : 		s = "AUTO";

  02164	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 5195 : 
; 5196 : 		width = get_mono_font_string_width (s);

  0216b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0216e	50		 push	 eax
  0216f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02174	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5197 : 
; 5198 : 		if (draw_large_mfd)

  0217a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02181	74 2e		 je	 SHORT $LN84@draw_aircr

; 5199 : 		{
; 5200 : 			width += 2.0;

  02183	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0218b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02193	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02197	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5201 : 
; 5202 : 			y_adjust = -38.0;

  0219f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  021a7	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5203 : 		}
; 5204 : 		else

  021af	eb 2c		 jmp	 SHORT $LN85@draw_aircr
$LN84@draw_aircr:

; 5205 : 		{
; 5206 : 			width += 1.0;

  021b1	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  021b9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  021c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021c5	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5207 : 
; 5208 : 			y_adjust = -19.0;

  021cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  021d5	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN85@draw_aircr:

; 5209 : 		}
; 5210 : 
; 5211 : 		set_2d_mono_font_position (-1.0, -1.0);

  021dd	51		 push	 ecx
  021de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021eb	51		 push	 ecx
  021ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5212 : 
; 5213 : 		set_mono_font_rel_position (1.0, y_adjust);

  021fe	51		 push	 ecx
  021ff	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0220c	51		 push	 ecx
  0220d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0221a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5214 : 
; 5215 : 		print_mono_font_string (s);

  0221f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02222	50		 push	 eax
  02223	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5216 : 
; 5217 : 		set_2d_mono_font_position (1.0, -1.0);

  02228	51		 push	 ecx
  02229	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02236	51		 push	 ecx
  02237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0223f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02244	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5218 : 
; 5219 : 		set_mono_font_rel_position (-width, y_adjust);

  02249	51		 push	 ecx
  0224a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02257	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0225f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02266	51		 push	 ecx
  02267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0226c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5220 : 
; 5221 : 		print_mono_font_string (s);

  02271	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02274	50		 push	 eax
  02275	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN83@draw_aircr:

; 5222 : 	}
; 5223 : 
; 5224 : 	//
; 5225 : 	// chaff
; 5226 : 	//
; 5227 : 
; 5228 : 	if (draw_large_mfd)

  0227a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02281	0f 84 96 00 00
	00		 je	 $LN86@draw_aircr

; 5229 : 	{
; 5230 : 		if ((hokum_damage.lh_chaff_dispensers) && (hokum_damage.rh_chaff_dispensers))

  02287	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0228c	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  0228f	83 e0 01	 and	 eax, 1
  02292	74 23		 je	 SHORT $LN88@draw_aircr
  02294	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  02299	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  0229c	83 e0 01	 and	 eax, 1
  0229f	74 16		 je	 SHORT $LN88@draw_aircr

; 5231 : 		{
; 5232 : 			sprintf (buffer, "CHAFF:XX");

  022a1	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  022a6	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022ac	50		 push	 eax
  022ad	e8 00 00 00 00	 call	 _sprintf
  022b2	83 c4 08	 add	 esp, 8

; 5233 : 		}
; 5234 : 		else

  022b5	eb 23		 jmp	 SHORT $LN89@draw_aircr
$LN88@draw_aircr:

; 5235 : 		{
; 5236 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  022b7	6a 43		 push	 67			; 00000043H
  022b9	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  022bf	50		 push	 eax
  022c0	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  022c5	50		 push	 eax
  022c6	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  022cb	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  022d1	51		 push	 ecx
  022d2	e8 00 00 00 00	 call	 _sprintf
  022d7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN89@draw_aircr:

; 5237 : 		}
; 5238 : 
; 5239 : 		width = get_mono_font_string_width (buffer);

  022da	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022e0	50		 push	 eax
  022e1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  022e6	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5240 : 
; 5241 : 		width += 2.0;

  022ec	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  022f4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  022fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02300	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5242 : 
; 5243 : 		y_adjust = -25.0;

  02308	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02310	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5244 : 	}
; 5245 : 	else

  02318	e9 91 00 00 00	 jmp	 $LN87@draw_aircr
$LN86@draw_aircr:

; 5246 : 	{
; 5247 : 		if ((hokum_damage.lh_chaff_dispensers) && (hokum_damage.rh_chaff_dispensers))

  0231d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  02322	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  02325	83 e0 01	 and	 eax, 1
  02328	74 23		 je	 SHORT $LN90@draw_aircr
  0232a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0232f	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  02332	83 e0 01	 and	 eax, 1
  02335	74 16		 je	 SHORT $LN90@draw_aircr

; 5248 : 		{
; 5249 : 			sprintf (buffer, "C:XX");

  02337	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  0233c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02342	50		 push	 eax
  02343	e8 00 00 00 00	 call	 _sprintf
  02348	83 c4 08	 add	 esp, 8

; 5250 : 		}
; 5251 : 		else

  0234b	eb 23		 jmp	 SHORT $LN91@draw_aircr
$LN90@draw_aircr:

; 5252 : 		{
; 5253 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  0234d	6a 43		 push	 67			; 00000043H
  0234f	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02355	50		 push	 eax
  02356	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  0235b	50		 push	 eax
  0235c	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  02361	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02367	51		 push	 ecx
  02368	e8 00 00 00 00	 call	 _sprintf
  0236d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@draw_aircr:

; 5254 : 		}
; 5255 : 
; 5256 : 		width = get_mono_font_string_width (buffer);

  02370	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02376	50		 push	 eax
  02377	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0237c	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5257 : 
; 5258 : 		width += 1.0;

  02382	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0238a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02392	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02396	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5259 : 
; 5260 : 		y_adjust = -12.0;

  0239e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  023a6	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN87@draw_aircr:

; 5261 : 	}
; 5262 : 
; 5263 : 	set_2d_mono_font_position (1.0, -1.0);

  023ae	51		 push	 ecx
  023af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  023b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023bc	51		 push	 ecx
  023bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  023c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023ca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5264 : 
; 5265 : 	set_mono_font_rel_position (-width, y_adjust);

  023cf	51		 push	 ecx
  023d0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  023d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023dd	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  023e5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  023ec	51		 push	 ecx
  023ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023f2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5266 : 
; 5267 : 	print_mono_font_string (buffer);

  023f7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023fd	50		 push	 eax
  023fe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5268 : 
; 5269 : 	//
; 5270 : 	// flares
; 5271 : 	//
; 5272 : 
; 5273 : 	if (draw_large_mfd)

  02403	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0240a	0f 84 96 00 00
	00		 je	 $LN92@draw_aircr

; 5274 : 	{
; 5275 : 		if ((hokum_damage.lh_flare_dispensers) && (hokum_damage.rh_flare_dispensers))

  02410	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  02415	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  02418	83 e0 01	 and	 eax, 1
  0241b	74 23		 je	 SHORT $LN94@draw_aircr
  0241d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  02422	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02425	83 e0 01	 and	 eax, 1
  02428	74 16		 je	 SHORT $LN94@draw_aircr

; 5276 : 		{
; 5277 : 			sprintf (buffer, "FLARE:XX");

  0242a	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  0242f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02435	50		 push	 eax
  02436	e8 00 00 00 00	 call	 _sprintf
  0243b	83 c4 08	 add	 esp, 8

; 5278 : 		}
; 5279 : 		else

  0243e	eb 23		 jmp	 SHORT $LN95@draw_aircr
$LN94@draw_aircr:

; 5280 : 		{
; 5281 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  02440	6a 44		 push	 68			; 00000044H
  02442	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02448	50		 push	 eax
  02449	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  0244e	50		 push	 eax
  0244f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  02454	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0245a	51		 push	 ecx
  0245b	e8 00 00 00 00	 call	 _sprintf
  02460	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN95@draw_aircr:

; 5282 : 		}
; 5283 : 
; 5284 : 		width = get_mono_font_string_width (buffer);

  02463	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02469	50		 push	 eax
  0246a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0246f	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5285 : 
; 5286 : 		width += 2.0;

  02475	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0247d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02485	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02489	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5287 : 
; 5288 : 		y_adjust = -12.0;

  02491	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02499	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5289 : 	}
; 5290 : 	else

  024a1	e9 91 00 00 00	 jmp	 $LN93@draw_aircr
$LN92@draw_aircr:

; 5291 : 	{
; 5292 : 		if ((hokum_damage.lh_flare_dispensers) && (hokum_damage.rh_flare_dispensers))

  024a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  024ab	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  024ae	83 e0 01	 and	 eax, 1
  024b1	74 23		 je	 SHORT $LN96@draw_aircr
  024b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  024b8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  024bb	83 e0 01	 and	 eax, 1
  024be	74 16		 je	 SHORT $LN96@draw_aircr

; 5293 : 		{
; 5294 : 			sprintf (buffer, "F:XX");

  024c0	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  024c5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  024cb	50		 push	 eax
  024cc	e8 00 00 00 00	 call	 _sprintf
  024d1	83 c4 08	 add	 esp, 8

; 5295 : 		}
; 5296 : 		else

  024d4	eb 23		 jmp	 SHORT $LN97@draw_aircr
$LN96@draw_aircr:

; 5297 : 		{
; 5298 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  024d6	6a 44		 push	 68			; 00000044H
  024d8	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  024de	50		 push	 eax
  024df	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  024e4	50		 push	 eax
  024e5	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  024ea	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  024f0	51		 push	 ecx
  024f1	e8 00 00 00 00	 call	 _sprintf
  024f6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN97@draw_aircr:

; 5299 : 		}
; 5300 : 
; 5301 : 		width = get_mono_font_string_width (buffer);

  024f9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  024ff	50		 push	 eax
  02500	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02505	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5302 : 
; 5303 : 		width += 1.0;

  0250b	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02513	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0251b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0251f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5304 : 
; 5305 : 		y_adjust = -5.0;

  02527	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0252f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN93@draw_aircr:

; 5306 : 	}
; 5307 : 
; 5308 : 	set_2d_mono_font_position (1.0, -1.0);

  02537	51		 push	 ecx
  02538	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02540	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02545	51		 push	 ecx
  02546	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0254e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02553	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5309 : 
; 5310 : 	set_mono_font_rel_position (-width, y_adjust);

  02558	51		 push	 ecx
  02559	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02561	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02566	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0256e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02575	51		 push	 ecx
  02576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5311 : 
; 5312 : 	print_mono_font_string (buffer);

  02580	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02586	50		 push	 eax
  02587	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5313 : }

  0258c	5f		 pop	 edi
  0258d	5e		 pop	 esi
  0258e	5b		 pop	 ebx
  0258f	8b e5		 mov	 esp, ebp
  02591	5d		 pop	 ebp
  02592	c2 04 00	 ret	 4
  02595	0f 1f 00	 npad	 3
$LN243@draw_aircr:
  02598	00 00 00 00	 DD	 $LN16@draw_aircr
  0259c	00 00 00 00	 DD	 $LN16@draw_aircr
  025a0	00 00 00 00	 DD	 $LN17@draw_aircr
  025a4	00 00 00 00	 DD	 $LN17@draw_aircr
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 4573 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4574 : 	entity
; 4575 : 		*threat,
; 4576 : 		*closest_missile;
; 4577 : 
; 4578 : 	int
; 4579 : 		overshot;
; 4580 : 
; 4581 : 	float
; 4582 : 		threat_range,
; 4583 : 		threat_velocity,
; 4584 : 		time_to_impact,
; 4585 : 		length,
; 4586 : 		cos_error;
; 4587 : 
; 4588 : 	vec3d
; 4589 : 		*threat_position,
; 4590 : 		uvec_threat_to_target;
; 4591 : 
; 4592 : 	matrix3x3
; 4593 : 		*attitude;
; 4594 : 
; 4595 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 4596 : 
; 4597 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 4598 : 
; 4599 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 4600 : 
; 4601 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 4602 : 
; 4603 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4604 : 
; 4605 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 4606 : 
; 4607 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 4608 : 	{
; 4609 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 01 12 00 00	 push	 4609			; 00001201H
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 01 12 00 00	 push	 4609			; 00001201H
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 4610 : 		{
; 4611 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 4612 : 
; 4613 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 4614 : 
; 4615 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 4616 : 
; 4617 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 4618 : 
; 4619 : 			//
; 4620 : 			// guard against 'overshot target' to prevent spurious indications
; 4621 : 			//
; 4622 : 
; 4623 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 4624 : 
; 4625 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 4626 : 			{
; 4627 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 4628 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 4629 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 4630 : 
; 4631 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 4632 : 
; 4633 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 4634 : 				{
; 4635 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 4636 : 
; 4637 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 4638 : 
; 4639 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 4640 : 
; 4641 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 4642 : 					{
; 4643 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 4644 : 					}
; 4645 : 				}
; 4646 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 4647 : 				{
; 4648 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 4649 : 				}
; 4650 : 			}
; 4651 : 
; 4652 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 4653 : 			{
; 4654 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 4655 : 				{
; 4656 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 4657 : 
; 4658 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 4659 : 				}
; 4660 : 			}
; 4661 : 		}
; 4662 : 
; 4663 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 4664 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 4665 : 
; 4666 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 4667 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1960 = -472						; size = 4
tv1421 = -468						; size = 4
tv1392 = -468						; size = 4
tv1338 = -468						; size = 4
tv1318 = -468						; size = 4
tv1197 = -468						; size = 4
tv1162 = -468						; size = 4
tv1141 = -468						; size = 4
tv1120 = -468						; size = 4
tv1101 = -468						; size = 4
tv1082 = -468						; size = 4
tv1061 = -468						; size = 4
tv1040 = -468						; size = 4
tv1019 = -468						; size = 4
tv1000 = -468						; size = 4
tv981 = -468						; size = 4
tv962 = -468						; size = 4
tv930 = -468						; size = 4
tv898 = -468						; size = 4
tv879 = -468						; size = 4
tv859 = -468						; size = 4
tv832 = -468						; size = 4
tv772 = -468						; size = 4
tv750 = -468						; size = 4
tv729 = -468						; size = 4
tv710 = -468						; size = 4
tv691 = -468						; size = 4
tv654 = -468						; size = 4
tv633 = -468						; size = 4
tv542 = -468						; size = 4
tv497 = -468						; size = 4
tv178 = -468						; size = 4
tv158 = -468						; size = 4
tv138 = -468						; size = 4
tv86 = -468						; size = 4
tv1413 = -464						; size = 4
tv1384 = -464						; size = 4
tv1330 = -464						; size = 4
tv1310 = -464						; size = 4
tv1272 = -464						; size = 4
tv1189 = -464						; size = 4
tv1154 = -464						; size = 4
tv1133 = -464						; size = 4
tv1113 = -464						; size = 4
tv1094 = -464						; size = 4
tv1074 = -464						; size = 4
tv1054 = -464						; size = 4
tv1032 = -464						; size = 4
tv1012 = -464						; size = 4
tv993 = -464						; size = 4
tv974 = -464						; size = 4
tv954 = -464						; size = 4
tv922 = -464						; size = 4
tv891 = -464						; size = 4
tv871 = -464						; size = 4
tv851 = -464						; size = 4
tv792 = -464						; size = 4
tv764 = -464						; size = 4
tv742 = -464						; size = 4
tv722 = -464						; size = 4
tv703 = -464						; size = 4
tv683 = -464						; size = 4
tv646 = -464						; size = 4
tv625 = -464						; size = 4
tv534 = -464						; size = 4
tv489 = -464						; size = 4
tv170 = -464						; size = 4
tv150 = -464						; size = 4
tv130 = -464						; size = 4
tv78 = -464						; size = 4
tv70 = -464						; size = 4
_seconds$1 = -396					; size = 4
_minutes$2 = -392					; size = 4
_hours$3 = -388						; size = 4
_time_to_go$4 = -384					; size = 4
_f$5 = -380						; size = 4
_i$6 = -376						; size = 4
_sec$7 = -372						; size = 4
_sx$8 = -368						; size = 4
_sz$9 = -364						; size = 4
_waypoint_range$10 = -360				; size = 4
_waypoint_position$11 = -356				; size = 12
_wp$12 = -344						; size = 4
_target_range$13 = -340					; size = 4
_dy$14 = -336						; size = 4
_dx$15 = -332						; size = 4
_air_scan_range$16 = -328				; size = 4
_draw_threat_line$17 = -324				; size = 4
_threat_type$18 = -320					; size = 4
_target_position$19 = -316				; size = 4
_launched_weapon$20 = -312				; size = 4
_target$21 = -308					; size = 4
_wp2_rel_position$22 = -304				; size = 12
_wp1_rel_position$23 = -292				; size = 12
_wp2$24 = -280						; size = 4
_wp1$25 = -276						; size = 4
_radius$26 = -272					; size = 4
_source_position$ = -268				; size = 4
_source_target$ = -264					; size = 4
_source$ = -260						; size = 4
_tsd_threat_line_flash_timer$ = -256			; size = 4
_tsd_ase_range$ = -252					; size = 4
_source_heading$ = -248					; size = 4
_y_adjust$ = -244					; size = 4
_width$ = -240						; size = 4
_y_origin$ = -236					; size = 4
_x_origin$ = -232					; size = 4
_scale$ = -228						; size = 4
_v$ = -224						; size = 4
_u$ = -220						; size = 4
_tsd_declutter_level$ = -216				; size = 4
_source_side$ = -212					; size = 4
_tsd_draw_threat_line_status$ = -208			; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z PROC ; draw_tactical_situation_display_mfd, COMDAT

; 3772 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 01 00
	00		 sub	 esp, 472		; 000001d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3773 : 	char
; 3774 : 		*s,
; 3775 : 		buffer[200];
; 3776 : 
; 3777 : 	int
; 3778 : 		*tsd_draw_threat_line_status;
; 3779 : 
; 3780 : 	entity_sides
; 3781 : 		source_side;
; 3782 : 
; 3783 : 	tsd_declutter_levels
; 3784 : 		tsd_declutter_level;
; 3785 : 
; 3786 : 	float
; 3787 : 		u,
; 3788 : 		v,
; 3789 : 		scale,
; 3790 : 		x_origin,
; 3791 : 		y_origin,
; 3792 : 		width,
; 3793 : 		y_adjust,
; 3794 : 		source_heading,
; 3795 : 		tsd_ase_range,
; 3796 : 		*tsd_threat_line_flash_timer;
; 3797 : 
; 3798 : 	entity
; 3799 : 		*source,
; 3800 : 		*source_target;
; 3801 : 
; 3802 : 	vec3d
; 3803 : 		*source_position;
; 3804 : 
; 3805 : 	ASSERT (hokum_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN19@draw_tacti
  00012	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00016	7c 18		 jl	 SHORT $LN18@draw_tacti
$LN19@draw_tacti:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 21	 add	 eax, 33			; 00000021H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN18@draw_tacti:

; 3806 : 
; 3807 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 30 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 30 fe ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  00040	77 6d		 ja	 SHORT $LN2@draw_tacti
  00042	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR tv70[ebp]
  00048	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN239@draw_tacti[ecx*4]
$LN20@draw_tacti:

; 3808 : 	{
; 3809 : 		////////////////////////////////////////
; 3810 : 		case HOKUM_MFD_LOCATION_PILOT_LHS:
; 3811 : 		case HOKUM_MFD_LOCATION_PILOT_RHS:
; 3812 : 		////////////////////////////////////////
; 3813 : 		{
; 3814 : 			tsd_ase_range						= pilot_tsd_ase_range;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00057	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 3815 : 			tsd_declutter_level				= pilot_tsd_declutter_level;

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00064	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 3816 : 			tsd_threat_line_flash_timer	= &pilot_tsd_threat_line_flash_timer;

  0006a	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?pilot_tsd_threat_line_flash_timer@@3MA

; 3817 : 			tsd_draw_threat_line_status	= &pilot_tsd_draw_threat_line_status;

  00074	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?pilot_tsd_draw_threat_line_status@@3HA

; 3818 : 
; 3819 : 			break;

  0007e	eb 2f		 jmp	 SHORT $LN2@draw_tacti
$LN21@draw_tacti:

; 3820 : 		}
; 3821 : 		////////////////////////////////////////
; 3822 : 		case HOKUM_MFD_LOCATION_CO_PILOT_LHS:
; 3823 : 		case HOKUM_MFD_LOCATION_CO_PILOT_RHS:
; 3824 : 		////////////////////////////////////////
; 3825 : 		{
; 3826 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00088	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 3827 : 			tsd_declutter_level				= co_pilot_tsd_declutter_level;

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00095	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 3828 : 			tsd_threat_line_flash_timer	= &co_pilot_tsd_threat_line_flash_timer;

  0009b	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_tsd_threat_line_flash_timer@@3MA

; 3829 : 			tsd_draw_threat_line_status	= &co_pilot_tsd_draw_threat_line_status;

  000a5	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?co_pilot_tsd_draw_threat_line_status@@3HA
$LN2@draw_tacti:

; 3830 : 
; 3831 : 			break;
; 3832 : 		}
; 3833 : 	}
; 3834 : 
; 3835 : 	source = get_gunship_entity ();

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b4	89 85 fc fe ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 3836 : 
; 3837 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000ba	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000c1	74 10		 je	 SHORT $LN103@draw_tacti
  000c3	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cb	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  000d1	eb 24		 jmp	 SHORT $LN104@draw_tacti
$LN103@draw_tacti:
  000d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  000d9	83 c2 41	 add	 edx, 65			; 00000041H
  000dc	52		 push	 edx
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ed	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN104@draw_tacti:
  000f7	b9 01 00 00 00	 mov	 ecx, 1
  000fc	85 c9		 test	 ecx, ecx
  000fe	74 0c		 je	 SHORT $LN105@draw_tacti
  00100	c7 85 2c fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv86[ebp], 187 ; 000000bbH
  0010a	eb 24		 jmp	 SHORT $LN106@draw_tacti
$LN105@draw_tacti:
  0010c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00112	83 c2 41	 add	 edx, 65			; 00000041H
  00115	52		 push	 edx
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00126	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN106@draw_tacti:
  00130	68 bb 00 00 00	 push	 187			; 000000bbH
  00135	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0013b	51		 push	 ecx
  0013c	69 95 30 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv78[ebp], 1116
  00146	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  0014c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00153	ff d1		 call	 ecx
  00155	89 85 2c ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 3838 : 
; 3839 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0015b	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00162	74 10		 je	 SHORT $LN107@draw_tacti
  00164	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
  00172	eb 24		 jmp	 SHORT $LN108@draw_tacti
$LN107@draw_tacti:
  00174	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0017a	83 c2 43	 add	 edx, 67			; 00000043H
  0017d	52		 push	 edx
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0018e	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN108@draw_tacti:
  00198	b9 01 00 00 00	 mov	 ecx, 1
  0019d	85 c9		 test	 ecx, ecx
  0019f	74 0c		 je	 SHORT $LN109@draw_tacti
  001a1	c7 85 2c fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv138[ebp], 52 ; 00000034H
  001ab	eb 24		 jmp	 SHORT $LN110@draw_tacti
$LN109@draw_tacti:
  001ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  001b3	83 c2 43	 add	 edx, 67			; 00000043H
  001b6	52		 push	 edx
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c7	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN110@draw_tacti:
  001d1	6a 34		 push	 52			; 00000034H
  001d3	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001d9	51		 push	 ecx
  001da	69 95 30 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv130[ebp], 700
  001e4	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  001ea	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001f1	ff d1		 call	 ecx
  001f3	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 3840 : 
; 3841 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  001f9	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00200	74 10		 je	 SHORT $LN111@draw_tacti
  00202	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00208	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020a	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  00210	eb 24		 jmp	 SHORT $LN112@draw_tacti
$LN111@draw_tacti:
  00212	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00218	83 c2 45	 add	 edx, 69			; 00000045H
  0021b	52		 push	 edx
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00221	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022c	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN112@draw_tacti:
  00236	b9 01 00 00 00	 mov	 ecx, 1
  0023b	85 c9		 test	 ecx, ecx
  0023d	74 0c		 je	 SHORT $LN113@draw_tacti
  0023f	c7 85 2c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  00249	eb 24		 jmp	 SHORT $LN114@draw_tacti
$LN113@draw_tacti:
  0024b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00251	83 c2 45	 add	 edx, 69			; 00000045H
  00254	52		 push	 edx
  00255	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00265	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN114@draw_tacti:
  0026f	6a 08		 push	 8
  00271	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00277	51		 push	 ecx
  00278	6b 95 30 fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  0027f	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  00285	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0028c	ff d1		 call	 ecx
  0028e	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 3842 : 
; 3843 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00294	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0029b	74 10		 je	 SHORT $LN115@draw_tacti
  0029d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  002a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a5	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv170[ebp], ecx
  002ab	eb 24		 jmp	 SHORT $LN116@draw_tacti
$LN115@draw_tacti:
  002ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  002b3	83 c2 47	 add	 edx, 71			; 00000047H
  002b6	52		 push	 edx
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c7	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN116@draw_tacti:
  002d1	b9 01 00 00 00	 mov	 ecx, 1
  002d6	85 c9		 test	 ecx, ecx
  002d8	74 0c		 je	 SHORT $LN117@draw_tacti
  002da	c7 85 2c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv178[ebp], 38 ; 00000026H
  002e4	eb 24		 jmp	 SHORT $LN118@draw_tacti
$LN117@draw_tacti:
  002e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  002ec	83 c2 47	 add	 edx, 71			; 00000047H
  002ef	52		 push	 edx
  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00300	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN118@draw_tacti:
  0030a	6a 26		 push	 38			; 00000026H
  0030c	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00312	51		 push	 ecx
  00313	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv170[ebp], 180
  0031d	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  00323	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0032a	ff d1		 call	 ecx
  0032c	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 3844 : 
; 3845 : 	scale = RADIUS / tsd_ase_range;

  00332	f3 0f 5a 85 04
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0033a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  00342	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00346	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0034a	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 3846 : 
; 3847 : 	//
; 3848 : 	// match ground radar origin
; 3849 : 	//
; 3850 : 
; 3851 : 	if (draw_large_mfd)

  00352	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00359	74 1d		 je	 SHORT $LN22@draw_tacti

; 3852 : 	{
; 3853 : 		x_origin = 0.0;

  0035b	0f 57 c0	 xorps	 xmm0, xmm0
  0035e	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3854 : 		y_origin = -0.6;

  00366	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0036e	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 3855 : 	}
; 3856 : 	else

  00376	eb 1b		 jmp	 SHORT $LN23@draw_tacti
$LN22@draw_tacti:

; 3857 : 	{
; 3858 : 		x_origin = 0.0;

  00378	0f 57 c0	 xorps	 xmm0, xmm0
  0037b	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3859 : 		y_origin = -0.675;

  00383	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0038b	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN23@draw_tacti:

; 3860 : 	}
; 3861 : 
; 3862 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  00393	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  00399	50		 push	 eax
  0039a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  003a0	51		 push	 ecx
  003a1	51		 push	 ecx
  003a2	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	51		 push	 ecx
  003b0	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 3863 : 
; 3864 : 	u -= mfd_viewport_x_min;

  003c2	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  003ca	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003d2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 3865 : 	v -= mfd_viewport_y_min;

  003da	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  003e2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003ea	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 3866 : 
; 3867 : 	////////////////////////////////////////
; 3868 : 	//
; 3869 : 	//VJ 030423 TSD RENDER MOD
; 3870 : 	//
; 3871 : 	////////////////////////////////////////
; 3872 : 
; 3873 : 	if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE && !hokum_damage.navigation_computer)

  003f2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  003f9	0f 84 df 04 00
	00		 je	 $LN26@draw_tacti
  003ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00404	c1 e8 09	 shr	 eax, 9
  00407	83 e0 01	 and	 eax, 1
  0040a	0f 85 ce 04 00
	00		 jne	 $LN26@draw_tacti

; 3874 : 	{
; 3875 : 		//VJ 030423 TSD render mod
; 3876 : 		set_rgb_colour (MFD_COLOUR1,   0, 0,  96, 255);  //dark blue

  00410	b8 04 00 00 00	 mov	 eax, 4
  00415	6b c8 00	 imul	 ecx, eax, 0
  00418	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0041f	b8 04 00 00 00	 mov	 eax, 4
  00424	6b c8 00	 imul	 ecx, eax, 0
  00427	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  0042e	b8 04 00 00 00	 mov	 eax, 4
  00433	6b c8 00	 imul	 ecx, eax, 0
  00436	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  0043d	b8 04 00 00 00	 mov	 eax, 4
  00442	6b c8 00	 imul	 ecx, eax, 0
  00445	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3877 : 	   set_rgb_colour (MFD_COLOUR2,	32, 32,  164, 255); //light blue

  0044c	b8 04 00 00 00	 mov	 eax, 4
  00451	c1 e0 00	 shl	 eax, 0
  00454	c6 80 02 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 32 ; 00000020H
  0045b	b8 04 00 00 00	 mov	 eax, 4
  00460	c1 e0 00	 shl	 eax, 0
  00463	c6 80 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 32 ; 00000020H
  0046a	b8 04 00 00 00	 mov	 eax, 4
  0046f	c1 e0 00	 shl	 eax, 0
  00472	c6 80 00 00 00
	00 a4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 164 ; 000000a4H
  00479	b8 04 00 00 00	 mov	 eax, 4
  0047e	c1 e0 00	 shl	 eax, 0
  00481	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3878 : 		set_rgb_colour (MFD_COLOUR3, 220, 48,   0, 255); //bright red

  00488	b8 04 00 00 00	 mov	 eax, 4
  0048d	d1 e0		 shl	 eax, 1
  0048f	c6 80 02 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 220 ; 000000dcH
  00496	b8 04 00 00 00	 mov	 eax, 4
  0049b	d1 e0		 shl	 eax, 1
  0049d	c6 80 01 00 00
	00 30		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 48 ; 00000030H
  004a4	b8 04 00 00 00	 mov	 eax, 4
  004a9	d1 e0		 shl	 eax, 1
  004ab	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  004b2	b8 04 00 00 00	 mov	 eax, 4
  004b7	d1 e0		 shl	 eax, 1
  004b9	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3879 : 		set_rgb_colour (MFD_COLOUR4, 148, 32,   0, 255);//dark red

  004c0	b8 04 00 00 00	 mov	 eax, 4
  004c5	6b c8 03	 imul	 ecx, eax, 3
  004c8	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	6b c8 03	 imul	 ecx, eax, 3
  004d7	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 03	 imul	 ecx, eax, 3
  004e6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004ed	b8 04 00 00 00	 mov	 eax, 4
  004f2	6b c8 03	 imul	 ecx, eax, 3
  004f5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3880 : 
; 3881 : 		set_rgb_colour (MFD_COLOUR6,  255, 255,  0, 255);

  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	6b c8 05	 imul	 ecx, eax, 5
  00504	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0050b	b8 04 00 00 00	 mov	 eax, 4
  00510	6b c8 05	 imul	 ecx, eax, 5
  00513	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0051a	b8 04 00 00 00	 mov	 eax, 4
  0051f	6b c8 05	 imul	 ecx, eax, 5
  00522	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00529	b8 04 00 00 00	 mov	 eax, 4
  0052e	6b c8 05	 imul	 ecx, eax, 5
  00531	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3882 : 		//VJ 030511 colours 7 and 8 are grays when enemy colour option is off in eech.ini
; 3883 : 		//VJ 030530 colour tweaks: black and dark gray are best
; 3884 : 		set_rgb_colour (MFD_COLOUR7,    64, 64, 64, 255);

  00538	b8 04 00 00 00	 mov	 eax, 4
  0053d	6b c8 0b	 imul	 ecx, eax, 11
  00540	c6 81 02 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 64 ; 00000040H
  00547	b8 04 00 00 00	 mov	 eax, 4
  0054c	6b c8 0b	 imul	 ecx, eax, 11
  0054f	c6 81 01 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 64 ; 00000040H
  00556	b8 04 00 00 00	 mov	 eax, 4
  0055b	6b c8 0b	 imul	 ecx, eax, 11
  0055e	c6 81 00 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 64 ; 00000040H
  00565	b8 04 00 00 00	 mov	 eax, 4
  0056a	6b c8 0b	 imul	 ecx, eax, 11
  0056d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3885 : 		set_rgb_colour (MFD_COLOUR8,    0,   0,  0, 255);

  00574	b8 04 00 00 00	 mov	 eax, 4
  00579	6b c8 0c	 imul	 ecx, eax, 12
  0057c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00583	b8 04 00 00 00	 mov	 eax, 4
  00588	6b c8 0c	 imul	 ecx, eax, 12
  0058b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00592	b8 04 00 00 00	 mov	 eax, 4
  00597	6b c8 0c	 imul	 ecx, eax, 12
  0059a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005a1	b8 04 00 00 00	 mov	 eax, 4
  005a6	6b c8 0c	 imul	 ecx, eax, 12
  005a9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3886 : 
; 3887 : 	   draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  005b0	6a 00		 push	 0
  005b2	51		 push	 ecx
  005b3	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  005c6	50		 push	 eax
  005c7	51		 push	 ecx
  005c8	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  005eb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005f2	51		 push	 ecx
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005fe	51		 push	 ecx
  005ff	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map

; 3888 : 
; 3889 : 		if (command_line_colour_mfd)

  00604	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0060b	0f 84 69 01 00
	00		 je	 $LN25@draw_tacti

; 3890 : 		{
; 3891 : 		   	set_rgb_colour (MFD_COLOUR1,            255, 255, 255, 255);

  00611	b8 04 00 00 00	 mov	 eax, 4
  00616	6b c8 00	 imul	 ecx, eax, 0
  00619	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00620	b8 04 00 00 00	 mov	 eax, 4
  00625	6b c8 00	 imul	 ecx, eax, 0
  00628	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0062f	b8 04 00 00 00	 mov	 eax, 4
  00634	6b c8 00	 imul	 ecx, eax, 0
  00637	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  0063e	b8 04 00 00 00	 mov	 eax, 4
  00643	6b c8 00	 imul	 ecx, eax, 0
  00646	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3892 : 			set_rgb_colour (MFD_COLOUR2,            200, 200, 200, 255);

  0064d	b8 04 00 00 00	 mov	 eax, 4
  00652	c1 e0 00	 shl	 eax, 0
  00655	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  0065c	b8 04 00 00 00	 mov	 eax, 4
  00661	c1 e0 00	 shl	 eax, 0
  00664	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  0066b	b8 04 00 00 00	 mov	 eax, 4
  00670	c1 e0 00	 shl	 eax, 0
  00673	c6 80 00 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 200 ; 000000c8H
  0067a	b8 04 00 00 00	 mov	 eax, 4
  0067f	c1 e0 00	 shl	 eax, 0
  00682	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3893 : 			set_rgb_colour (MFD_COLOUR3,            176, 176, 176, 255);

  00689	b8 04 00 00 00	 mov	 eax, 4
  0068e	d1 e0		 shl	 eax, 1
  00690	c6 80 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 176 ; 000000b0H
  00697	b8 04 00 00 00	 mov	 eax, 4
  0069c	d1 e0		 shl	 eax, 1
  0069e	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  006a5	b8 04 00 00 00	 mov	 eax, 4
  006aa	d1 e0		 shl	 eax, 1
  006ac	c6 80 00 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 176 ; 000000b0H
  006b3	b8 04 00 00 00	 mov	 eax, 4
  006b8	d1 e0		 shl	 eax, 1
  006ba	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3894 : 			set_rgb_colour (MFD_COLOUR4,            151, 151, 151, 255);

  006c1	b8 04 00 00 00	 mov	 eax, 4
  006c6	6b c8 03	 imul	 ecx, eax, 3
  006c9	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  006d0	b8 04 00 00 00	 mov	 eax, 4
  006d5	6b c8 03	 imul	 ecx, eax, 3
  006d8	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  006df	b8 04 00 00 00	 mov	 eax, 4
  006e4	6b c8 03	 imul	 ecx, eax, 3
  006e7	c6 81 00 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 151 ; 00000097H
  006ee	b8 04 00 00 00	 mov	 eax, 4
  006f3	6b c8 03	 imul	 ecx, eax, 3
  006f6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3895 : 			set_rgb_colour (MFD_COLOUR5,            128, 128, 128, 255);

  006fd	b8 04 00 00 00	 mov	 eax, 4
  00702	c1 e0 02	 shl	 eax, 2
  00705	c6 80 02 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 128 ; 00000080H
  0070c	b8 04 00 00 00	 mov	 eax, 4
  00711	c1 e0 02	 shl	 eax, 2
  00714	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  0071b	b8 04 00 00 00	 mov	 eax, 4
  00720	c1 e0 02	 shl	 eax, 2
  00723	c6 80 00 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 128 ; 00000080H
  0072a	b8 04 00 00 00	 mov	 eax, 4
  0072f	c1 e0 02	 shl	 eax, 2
  00732	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3896 : 			set_rgb_colour (MFD_COLOUR6,             40,  40,  40, 255);

  00739	b8 04 00 00 00	 mov	 eax, 4
  0073e	6b c8 05	 imul	 ecx, eax, 5
  00741	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00748	b8 04 00 00 00	 mov	 eax, 4
  0074d	6b c8 05	 imul	 ecx, eax, 5
  00750	c6 81 01 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 40 ; 00000028H
  00757	b8 04 00 00 00	 mov	 eax, 4
  0075c	6b c8 05	 imul	 ecx, eax, 5
  0075f	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  00766	b8 04 00 00 00	 mov	 eax, 4
  0076b	6b c8 05	 imul	 ecx, eax, 5
  0076e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3897 : 		}
; 3898 : 		else

  00775	e9 64 01 00 00	 jmp	 $LN26@draw_tacti
$LN25@draw_tacti:

; 3899 : 		{
; 3900 : 			set_rgb_colour (MFD_COLOUR1,            255, 135,   0, 255);

  0077a	b8 04 00 00 00	 mov	 eax, 4
  0077f	6b c8 00	 imul	 ecx, eax, 0
  00782	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00789	b8 04 00 00 00	 mov	 eax, 4
  0078e	6b c8 00	 imul	 ecx, eax, 0
  00791	c6 81 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 135 ; 00000087H
  00798	b8 04 00 00 00	 mov	 eax, 4
  0079d	6b c8 00	 imul	 ecx, eax, 0
  007a0	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  007a7	b8 04 00 00 00	 mov	 eax, 4
  007ac	6b c8 00	 imul	 ecx, eax, 0
  007af	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3901 : 			set_rgb_colour (MFD_COLOUR2,            255,  90,   0, 255);

  007b6	b8 04 00 00 00	 mov	 eax, 4
  007bb	c1 e0 00	 shl	 eax, 0
  007be	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  007c5	b8 04 00 00 00	 mov	 eax, 4
  007ca	c1 e0 00	 shl	 eax, 0
  007cd	c6 80 01 00 00
	00 5a		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 90 ; 0000005aH
  007d4	b8 04 00 00 00	 mov	 eax, 4
  007d9	c1 e0 00	 shl	 eax, 0
  007dc	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  007e3	b8 04 00 00 00	 mov	 eax, 4
  007e8	c1 e0 00	 shl	 eax, 0
  007eb	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3902 : 			set_rgb_colour (MFD_COLOUR3,            200,  65,   0, 255);

  007f2	b8 04 00 00 00	 mov	 eax, 4
  007f7	d1 e0		 shl	 eax, 1
  007f9	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  00800	b8 04 00 00 00	 mov	 eax, 4
  00805	d1 e0		 shl	 eax, 1
  00807	c6 80 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 65 ; 00000041H
  0080e	b8 04 00 00 00	 mov	 eax, 4
  00813	d1 e0		 shl	 eax, 1
  00815	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0081c	b8 04 00 00 00	 mov	 eax, 4
  00821	d1 e0		 shl	 eax, 1
  00823	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3903 : 			set_rgb_colour (MFD_COLOUR4,            130,  50,   0, 255);

  0082a	b8 04 00 00 00	 mov	 eax, 4
  0082f	6b c8 03	 imul	 ecx, eax, 3
  00832	c6 81 02 00 00
	00 82		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 130 ; 00000082H
  00839	b8 04 00 00 00	 mov	 eax, 4
  0083e	6b c8 03	 imul	 ecx, eax, 3
  00841	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  00848	b8 04 00 00 00	 mov	 eax, 4
  0084d	6b c8 03	 imul	 ecx, eax, 3
  00850	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00857	b8 04 00 00 00	 mov	 eax, 4
  0085c	6b c8 03	 imul	 ecx, eax, 3
  0085f	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3904 : 			set_rgb_colour (MFD_COLOUR5,            100,  50,   0, 255);

  00866	b8 04 00 00 00	 mov	 eax, 4
  0086b	c1 e0 02	 shl	 eax, 2
  0086e	c6 80 02 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 100 ; 00000064H
  00875	b8 04 00 00 00	 mov	 eax, 4
  0087a	c1 e0 02	 shl	 eax, 2
  0087d	c6 80 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 50 ; 00000032H
  00884	b8 04 00 00 00	 mov	 eax, 4
  00889	c1 e0 02	 shl	 eax, 2
  0088c	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00893	b8 04 00 00 00	 mov	 eax, 4
  00898	c1 e0 02	 shl	 eax, 2
  0089b	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3905 : 			set_rgb_colour (MFD_COLOUR6,             50,  25,   0, 255);

  008a2	b8 04 00 00 00	 mov	 eax, 4
  008a7	6b c8 05	 imul	 ecx, eax, 5
  008aa	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  008b1	b8 04 00 00 00	 mov	 eax, 4
  008b6	6b c8 05	 imul	 ecx, eax, 5
  008b9	c6 81 01 00 00
	00 19		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 25 ; 00000019H
  008c0	b8 04 00 00 00	 mov	 eax, 4
  008c5	6b c8 05	 imul	 ecx, eax, 5
  008c8	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  008cf	b8 04 00 00 00	 mov	 eax, 4
  008d4	6b c8 05	 imul	 ecx, eax, 5
  008d7	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH
$LN26@draw_tacti:

; 3906 : 		}
; 3907 : 	}
; 3908 : 
; 3909 : 	////////////////////////////////////////
; 3910 : 	//
; 3911 : 	// contour map
; 3912 : 	//
; 3913 : 	////////////////////////////////////////
; 3914 : 
; 3915 : //VJ 030423 TSD render mod, added mfd_env
; 3916 : 	if (!hokum_damage.navigation_computer)

  008de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  008e3	c1 e8 09	 shr	 eax, 9
  008e6	83 e0 01	 and	 eax, 1
  008e9	75 5a		 jne	 SHORT $LN27@draw_tacti

; 3917 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  008eb	6a 00		 push	 0
  008ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  008f2	50		 push	 eax
  008f3	51		 push	 ecx
  008f4	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  008fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00901	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00907	51		 push	 ecx
  00908	51		 push	 ecx
  00909	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00911	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00916	51		 push	 ecx
  00917	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0091f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00924	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0092c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00933	51		 push	 ecx
  00934	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00939	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0093f	52		 push	 edx
  00940	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN27@draw_tacti:

; 3918 : 
; 3919 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00945	51		 push	 ecx
  00946	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0094e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00953	51		 push	 ecx
  00954	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0095c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00961	51		 push	 ecx
  00962	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0096a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096f	51		 push	 ecx
  00970	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00978	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00982	50		 push	 eax
  00983	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3920 : 
; 3921 : 	////////////////////////////////////////
; 3922 : 	//
; 3923 : 	// radar scan
; 3924 : 	//
; 3925 : 	////////////////////////////////////////
; 3926 : 
; 3927 : 	{
; 3928 : 		float radius;
; 3929 : 
; 3930 : 		radius = scale * tsd_ase_range;

  00988	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00990	f3 0f 59 85 04
	ff ff ff	 mulss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00998	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _radius$26[ebp], xmm0

; 3931 : 
; 3932 : 		set_2d_viewport_origin (mfd_env, u, v);

  009a0	51		 push	 ecx
  009a1	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  009a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ae	51		 push	 ecx
  009af	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  009b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009c1	50		 push	 eax
  009c2	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3933 : 		draw_radar_range_arcs(radius);

  009c7	51		 push	 ecx
  009c8	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$26[ebp]
  009d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d5	e8 00 00 00 00	 call	 ?draw_radar_range_arcs@@YGXM@Z ; draw_radar_range_arcs

; 3934 : 		set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  009da	51		 push	 ecx
  009db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  009e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e8	51		 push	 ecx
  009e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  009f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f6	51		 push	 ecx
  009f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  009ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a04	51		 push	 ecx
  00a05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a12	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a17	50		 push	 eax
  00a18	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3935 : 	}
; 3936 : 
; 3937 : 	////////////////////////////////////////
; 3938 : 	//
; 3939 : 	// waypoint route
; 3940 : 	//
; 3941 : 	////////////////////////////////////////
; 3942 : 
; 3943 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !hokum_damage.navigation_computer)

  00a1d	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  00a24	0f 84 a5 06 00
	00		 je	 $LN29@draw_tacti
  00a2a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00a2f	c1 e8 09	 shr	 eax, 9
  00a32	83 e0 01	 and	 eax, 1
  00a35	0f 85 94 06 00
	00		 jne	 $LN29@draw_tacti

; 3944 : 	{
; 3945 : 		entity
; 3946 : 			*wp1,
; 3947 : 			*wp2;
; 3948 : 
; 3949 : 		vec3d
; 3950 : 			wp1_rel_position,
; 3951 : 			wp2_rel_position;
; 3952 : 
; 3953 : 		wp1 = get_local_entity_first_waypoint (source);

  00a3b	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00a41	50		 push	 eax
  00a42	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00a47	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax

; 3954 : 
; 3955 : 		if (wp1)

  00a4d	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00a54	0f 84 75 06 00
	00		 je	 $LN29@draw_tacti

; 3956 : 		{
; 3957 : 			set_2d_viewport_origin (mfd_env, u, v);

  00a5a	51		 push	 ecx
  00a5b	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00a63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a68	51		 push	 ecx
  00a69	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a76	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a7b	50		 push	 eax
  00a7c	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3958 : 
; 3959 : 			set_2d_window_rotation (mfd_env, source_heading);

  00a81	51		 push	 ecx
  00a82	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00a8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a94	50		 push	 eax
  00a95	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3960 : 
; 3961 : 			//
; 3962 : 			// waypoint route
; 3963 : 			//
; 3964 : 
; 3965 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00a9a	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$23[ebp]
  00aa0	50		 push	 eax
  00aa1	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00aa7	51		 push	 ecx
  00aa8	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00aae	52		 push	 edx
  00aaf	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3966 : 
; 3967 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00ab4	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00aba	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00ac2	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00ac6	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00ace	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp], xmm0

; 3968 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00ad6	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00adc	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00ae4	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00ae9	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00af1	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp+8], xmm0

; 3969 : 
; 3970 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00af9	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00b00	74 10		 je	 SHORT $LN119@draw_tacti
  00b02	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  00b08	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b0a	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv489[ebp], ecx
  00b10	eb 27		 jmp	 SHORT $LN120@draw_tacti
$LN119@draw_tacti:
  00b12	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00b18	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  00b1e	52		 push	 edx
  00b1f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b24	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b29	50		 push	 eax
  00b2a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b2f	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv489[ebp], 0
$LN120@draw_tacti:
  00b39	b9 01 00 00 00	 mov	 ecx, 1
  00b3e	85 c9		 test	 ecx, ecx
  00b40	74 0c		 je	 SHORT $LN121@draw_tacti
  00b42	c7 85 2c fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv497[ebp], 44 ; 0000002cH
  00b4c	eb 27		 jmp	 SHORT $LN122@draw_tacti
$LN121@draw_tacti:
  00b4e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00b54	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  00b5a	52		 push	 edx
  00b5b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b65	50		 push	 eax
  00b66	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b6b	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv497[ebp], 0
$LN122@draw_tacti:
  00b75	6a 2c		 push	 44			; 0000002cH
  00b77	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00b7d	51		 push	 ecx
  00b7e	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv489[ebp], 180
  00b88	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv497[ebp]
  00b8e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00b95	ff d1		 call	 ecx
  00b97	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp2$24[ebp], eax
$LN4@draw_tacti:

; 3971 : 
; 3972 : 			while (wp2)

  00b9d	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp2$24[ebp], 0
  00ba4	0f 84 db 01 00
	00		 je	 $LN5@draw_tacti

; 3973 : 			{
; 3974 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  00baa	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$22[ebp]
  00bb0	50		 push	 eax
  00bb1	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$24[ebp]
  00bb7	51		 push	 ecx
  00bb8	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00bbe	52		 push	 edx
  00bbf	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3975 : 
; 3976 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00bc4	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00bca	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp]
  00bd2	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00bd6	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00bde	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$22[ebp], xmm0

; 3977 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  00be6	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00bec	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp+8]
  00bf4	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00bf9	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00c01	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$22[ebp+8], xmm0

; 3978 : 
; 3979 : 				if (draw_large_mfd)

  00c09	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c10	74 4e		 je	 SHORT $LN30@draw_tacti

; 3980 : 				{
; 3981 : 					draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR_BLUE);

  00c12	b8 04 00 00 00	 mov	 eax, 4
  00c17	6b c8 11	 imul	 ecx, eax, 17
  00c1a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c20	52		 push	 edx
  00c21	51		 push	 ecx
  00c22	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp+8]
  00c2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2f	51		 push	 ecx
  00c30	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp]
  00c38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3d	51		 push	 ecx
  00c3e	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00c46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4b	51		 push	 ecx
  00c4c	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00c54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c59	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 3982 : 				}
; 3983 : 				else

  00c5e	eb 4c		 jmp	 SHORT $LN31@draw_tacti
$LN30@draw_tacti:

; 3984 : 				{
; 3985 : 					draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR_BLUE);

  00c60	b8 04 00 00 00	 mov	 eax, 4
  00c65	6b c8 11	 imul	 ecx, eax, 17
  00c68	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c6e	52		 push	 edx
  00c6f	51		 push	 ecx
  00c70	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp+8]
  00c78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7d	51		 push	 ecx
  00c7e	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp]
  00c86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8b	51		 push	 ecx
  00c8c	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00c94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c99	51		 push	 ecx
  00c9a	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00ca2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN31@draw_tacti:

; 3986 : 				}
; 3987 : 
; 3988 : 				wp1 = wp2;

  00cac	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _wp2$24[ebp]
  00cb2	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax

; 3989 : 
; 3990 : 				wp1_rel_position = wp2_rel_position;

  00cb8	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$22[ebp]
  00cbe	89 85 dc fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$23[ebp], eax
  00cc4	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$22[ebp+4]
  00cca	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$23[ebp+4], ecx
  00cd0	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$22[ebp+8]
  00cd6	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$23[ebp+8], edx

; 3991 : 
; 3992 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00cdc	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00ce3	74 10		 je	 SHORT $LN123@draw_tacti
  00ce5	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  00ceb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ced	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv534[ebp], ecx
  00cf3	eb 27		 jmp	 SHORT $LN124@draw_tacti
$LN123@draw_tacti:
  00cf5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00cfb	81 c2 dc 00 00
	00		 add	 edx, 220		; 000000dcH
  00d01	52		 push	 edx
  00d02	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d07	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d0c	50		 push	 eax
  00d0d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d12	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv534[ebp], 0
$LN124@draw_tacti:
  00d1c	b9 01 00 00 00	 mov	 ecx, 1
  00d21	85 c9		 test	 ecx, ecx
  00d23	74 0c		 je	 SHORT $LN125@draw_tacti
  00d25	c7 85 2c fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv542[ebp], 44 ; 0000002cH
  00d2f	eb 27		 jmp	 SHORT $LN126@draw_tacti
$LN125@draw_tacti:
  00d31	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00d37	81 c2 dc 00 00
	00		 add	 edx, 220		; 000000dcH
  00d3d	52		 push	 edx
  00d3e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00d48	50		 push	 eax
  00d49	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d4e	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv542[ebp], 0
$LN126@draw_tacti:
  00d58	6a 2c		 push	 44			; 0000002cH
  00d5a	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00d60	51		 push	 ecx
  00d61	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv534[ebp], 180
  00d6b	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv542[ebp]
  00d71	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00d78	ff d1		 call	 ecx
  00d7a	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp2$24[ebp], eax

; 3993 : 			}

  00d80	e9 18 fe ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 3994 : 
; 3995 : 			//
; 3996 : 			// waypoint markers
; 3997 : 			//
; 3998 : 
; 3999 : 			set_mono_font_colour (MFD_COLOUR2);

  00d85	b8 04 00 00 00	 mov	 eax, 4
  00d8a	c1 e0 00	 shl	 eax, 0
  00d8d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d93	51		 push	 ecx
  00d94	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4000 : 
; 4001 : 			if (draw_large_mfd)

  00d99	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00da0	74 09		 je	 SHORT $LN32@draw_tacti

; 4002 : 			{
; 4003 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00da2	6a 05		 push	 5
  00da4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4004 : 			}
; 4005 : 			else

  00da9	eb 07		 jmp	 SHORT $LN33@draw_tacti
$LN32@draw_tacti:

; 4006 : 			{
; 4007 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00dab	6a 01		 push	 1
  00dad	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN33@draw_tacti:

; 4008 : 			}
; 4009 : 
; 4010 : 			wp1 = get_local_entity_first_waypoint (source);

  00db2	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00db8	50		 push	 eax
  00db9	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00dbe	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax
$LN6@draw_tacti:

; 4011 : 
; 4012 : 			while (wp1)

  00dc4	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00dcb	0f 84 a7 02 00
	00		 je	 $LN7@draw_tacti

; 4013 : 			{
; 4014 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00dd1	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$23[ebp]
  00dd7	50		 push	 eax
  00dd8	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00dde	51		 push	 ecx
  00ddf	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00de5	52		 push	 edx
  00de6	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4015 : 
; 4016 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00deb	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00df1	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00df9	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00dfd	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00e05	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp], xmm0

; 4017 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00e0d	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00e13	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00e1b	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00e20	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00e28	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp+8], xmm0

; 4018 : 
; 4019 : 				if (draw_large_mfd)

  00e30	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00e37	74 79		 je	 SHORT $LN34@draw_tacti

; 4020 : 				{
; 4021 : 					draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR_BLUE);

  00e39	b8 04 00 00 00	 mov	 eax, 4
  00e3e	6b c8 11	 imul	 ecx, eax, 17
  00e41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e47	52		 push	 edx
  00e48	51		 push	 ecx
  00e49	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00e51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e56	51		 push	 ecx
  00e57	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00e5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e64	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00e69	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4022 : 
; 4023 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00e6e	51		 push	 ecx
  00e6f	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00e77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7c	51		 push	 ecx
  00e7d	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00e85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4024 : 
; 4025 : 					set_mono_font_rel_position (-2.0, -4.0);

  00e8f	51		 push	 ecx
  00e90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00e98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9d	51		 push	 ecx
  00e9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00ea6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eab	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4026 : 				}
; 4027 : 				else

  00eb0	eb 77		 jmp	 SHORT $LN35@draw_tacti
$LN34@draw_tacti:

; 4028 : 				{
; 4029 : 					draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR_BLUE);

  00eb2	b8 04 00 00 00	 mov	 eax, 4
  00eb7	6b c8 11	 imul	 ecx, eax, 17
  00eba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ec0	52		 push	 edx
  00ec1	51		 push	 ecx
  00ec2	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00eca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ecf	51		 push	 ecx
  00ed0	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00ed8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00edd	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00ee2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4030 : 
; 4031 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00ee7	51		 push	 ecx
  00ee8	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00ef0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef5	51		 push	 ecx
  00ef6	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00efe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f03	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4032 : 
; 4033 : 					set_mono_font_rel_position (-2.0, -2.0);

  00f08	51		 push	 ecx
  00f09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00f11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f16	51		 push	 ecx
  00f17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00f1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f24	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN35@draw_tacti:

; 4034 : 				}
; 4035 : 
; 4036 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  00f29	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00f30	74 10		 je	 SHORT $LN127@draw_tacti
  00f32	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  00f38	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f3a	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv625[ebp], ecx
  00f40	eb 27		 jmp	 SHORT $LN128@draw_tacti
$LN127@draw_tacti:
  00f42	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00f48	81 c2 08 01 00
	00		 add	 edx, 264		; 00000108H
  00f4e	52		 push	 edx
  00f4f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f59	50		 push	 eax
  00f5a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f5f	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv625[ebp], 0
$LN128@draw_tacti:
  00f69	b9 01 00 00 00	 mov	 ecx, 1
  00f6e	85 c9		 test	 ecx, ecx
  00f70	74 0c		 je	 SHORT $LN129@draw_tacti
  00f72	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv633[ebp], 0
  00f7c	eb 27		 jmp	 SHORT $LN130@draw_tacti
$LN129@draw_tacti:
  00f7e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00f84	81 c2 08 01 00
	00		 add	 edx, 264		; 00000108H
  00f8a	52		 push	 edx
  00f8b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f90	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00f95	50		 push	 eax
  00f96	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f9b	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv633[ebp], 0
$LN130@draw_tacti:
  00fa5	6a 00		 push	 0
  00fa7	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00fad	51		 push	 ecx
  00fae	8b 95 2c fe ff
	ff		 mov	 edx, DWORD PTR tv633[ebp]
  00fb4	c1 e2 02	 shl	 edx, 2
  00fb7	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR tv625[ebp]
  00fbd	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  00fc4	ff d1		 call	 ecx
  00fc6	0f b6 d0	 movzx	 edx, al
  00fc9	52		 push	 edx
  00fca	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 4037 : 
; 4038 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00fcf	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00fd6	74 10		 je	 SHORT $LN131@draw_tacti
  00fd8	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  00fde	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fe0	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv646[ebp], ecx
  00fe6	eb 27		 jmp	 SHORT $LN132@draw_tacti
$LN131@draw_tacti:
  00fe8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00fee	81 c2 0a 01 00
	00		 add	 edx, 266		; 0000010aH
  00ff4	52		 push	 edx
  00ff5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ffa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fff	50		 push	 eax
  01000	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01005	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv646[ebp], 0
$LN132@draw_tacti:
  0100f	b9 01 00 00 00	 mov	 ecx, 1
  01014	85 c9		 test	 ecx, ecx
  01016	74 0c		 je	 SHORT $LN133@draw_tacti
  01018	c7 85 2c fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv654[ebp], 44 ; 0000002cH
  01022	eb 27		 jmp	 SHORT $LN134@draw_tacti
$LN133@draw_tacti:
  01024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0102a	81 c2 0a 01 00
	00		 add	 edx, 266		; 0000010aH
  01030	52		 push	 edx
  01031	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0103b	50		 push	 eax
  0103c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01041	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv654[ebp], 0
$LN134@draw_tacti:
  0104b	6a 2c		 push	 44			; 0000002cH
  0104d	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  01053	51		 push	 ecx
  01054	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv646[ebp], 180
  0105e	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv654[ebp]
  01064	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0106b	ff d1		 call	 ecx
  0106d	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax

; 4039 : 			}

  01073	e9 4c fd ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 4040 : 
; 4041 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01078	51		 push	 ecx
  01079	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01086	51		 push	 ecx
  01087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0108f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01094	51		 push	 ecx
  01095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0109d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a2	51		 push	 ecx
  010a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  010ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  010b5	50		 push	 eax
  010b6	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4042 : 
; 4043 : 			set_2d_window_rotation (mfd_env, 0.0);

  010bb	51		 push	 ecx
  010bc	0f 57 c0	 xorps	 xmm0, xmm0
  010bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  010c9	50		 push	 eax
  010ca	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN29@draw_tacti:

; 4044 : 		}
; 4045 : 	}
; 4046 : 
; 4047 : 	////////////////////////////////////////
; 4048 : 	//
; 4049 : 	// targets
; 4050 : 	//
; 4051 : 	////////////////////////////////////////
; 4052 : 
; 4053 : 	{
; 4054 : 		entity
; 4055 : 			*target,
; 4056 : 			*launched_weapon;
; 4057 : 
; 4058 : 		vec3d
; 4059 : 			*target_position;
; 4060 : 
; 4061 : 		threat_types
; 4062 : 			threat_type;
; 4063 : 
; 4064 : 		int
; 4065 : 			draw_threat_line;
; 4066 : 
; 4067 : 		float
; 4068 : 			air_scan_range,
; 4069 : 			dx,
; 4070 : 			dy;
; 4071 : 
; 4072 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  010cf	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  010d6	0f 84 31 11 00
	00		 je	 $LN36@draw_tacti

; 4073 : 		{
; 4074 : 			*tsd_threat_line_flash_timer -= get_delta_time ();

  010dc	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  010e2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  010e6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  010ee	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  010f4	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 4075 : 
; 4076 : 			if (*tsd_threat_line_flash_timer < 0.0)

  010f8	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  010fe	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  01102	0f 57 c9	 xorps	 xmm1, xmm1
  01105	66 0f 2f c8	 comisd	 xmm1, xmm0
  01109	76 25		 jbe	 SHORT $LN37@draw_tacti

; 4077 : 			{
; 4078 : 				*tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  0110b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  01111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01119	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4079 : 
; 4080 : 				*tsd_draw_threat_line_status ^= 1;

  0111d	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  01123	8b 08		 mov	 ecx, DWORD PTR [eax]
  01125	83 f1 01	 xor	 ecx, 1
  01128	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  0112e	89 0a		 mov	 DWORD PTR [edx], ecx
$LN37@draw_tacti:

; 4081 : 			}
; 4082 : 
; 4083 : 			set_2d_viewport_origin (mfd_env, u, v);

  01130	51		 push	 ecx
  01131	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  01139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0113e	51		 push	 ecx
  0113f	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  01147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0114c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01151	50		 push	 eax
  01152	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4084 : 
; 4085 : 			set_2d_window_rotation (mfd_env, source_heading);

  01157	51		 push	 ecx
  01158	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  01160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01165	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0116a	50		 push	 eax
  0116b	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4086 : 
; 4087 : 			//
; 4088 : 			// display enemy SAM and AAA threat range circles
; 4089 : 			//
; 4090 : 
; 4091 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01170	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01177	74 10		 je	 SHORT $LN135@draw_tacti
  01179	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0117f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01181	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv683[ebp], ecx
  01187	eb 27		 jmp	 SHORT $LN136@draw_tacti
$LN135@draw_tacti:
  01189	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0118f	81 c2 3f 01 00
	00		 add	 edx, 319		; 0000013fH
  01195	52		 push	 edx
  01196	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0119b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011a0	50		 push	 eax
  011a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011a6	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv683[ebp], 0
$LN136@draw_tacti:
  011b0	b9 01 00 00 00	 mov	 ecx, 1
  011b5	85 c9		 test	 ecx, ecx
  011b7	74 0c		 je	 SHORT $LN137@draw_tacti
  011b9	c7 85 2c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv691[ebp], 18 ; 00000012H
  011c3	eb 27		 jmp	 SHORT $LN138@draw_tacti
$LN137@draw_tacti:
  011c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  011cb	81 c2 3f 01 00
	00		 add	 edx, 319		; 0000013fH
  011d1	52		 push	 edx
  011d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011dc	50		 push	 eax
  011dd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011e2	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv691[ebp], 0
$LN138@draw_tacti:
  011ec	6a 12		 push	 18			; 00000012H
  011ee	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  011f4	51		 push	 ecx
  011f5	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv683[ebp], 180
  011ff	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv691[ebp]
  01205	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0120c	ff d1		 call	 ecx
  0120e	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax
$LN8@draw_tacti:

; 4092 : 
; 4093 : 			while (target)

  01214	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0121b	0f 84 82 04 00
	00		 je	 $LN9@draw_tacti

; 4094 : 			{
; 4095 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01221	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01228	74 10		 je	 SHORT $LN139@draw_tacti
  0122a	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01230	8b 08		 mov	 ecx, DWORD PTR [eax]
  01232	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv703[ebp], ecx
  01238	eb 20		 jmp	 SHORT $LN140@draw_tacti
$LN139@draw_tacti:
  0123a	68 ff 0f 00 00	 push	 4095			; 00000fffH
  0123f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01244	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0124a	52		 push	 edx
  0124b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01250	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv703[ebp], 0
$LN140@draw_tacti:
  0125a	b8 01 00 00 00	 mov	 eax, 1
  0125f	85 c0		 test	 eax, eax
  01261	74 0c		 je	 SHORT $LN141@draw_tacti
  01263	c7 85 2c fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv710[ebp], 66 ; 00000042H
  0126d	eb 20		 jmp	 SHORT $LN142@draw_tacti
$LN141@draw_tacti:
  0126f	68 ff 0f 00 00	 push	 4095			; 00000fffH
  01274	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01279	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0127f	51		 push	 ecx
  01280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01285	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv710[ebp], 0
$LN142@draw_tacti:
  0128f	6a 42		 push	 66			; 00000042H
  01291	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01297	52		 push	 edx
  01298	69 85 30 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv703[ebp], 1116
  012a2	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv710[ebp]
  012a8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  012af	ff d2		 call	 edx
  012b1	85 c0		 test	 eax, eax
  012b3	0f 85 41 03 00
	00		 jne	 $LN40@draw_tacti

; 4096 : 				{
; 4097 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  012b9	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  012c0	74 10		 je	 SHORT $LN143@draw_tacti
  012c2	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  012c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  012ca	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv722[ebp], ecx
  012d0	eb 20		 jmp	 SHORT $LN144@draw_tacti
$LN143@draw_tacti:
  012d2	68 01 10 00 00	 push	 4097			; 00001001H
  012d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  012dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012e2	52		 push	 edx
  012e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e8	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv722[ebp], 0
$LN144@draw_tacti:
  012f2	b8 01 00 00 00	 mov	 eax, 1
  012f7	85 c0		 test	 eax, eax
  012f9	74 0c		 je	 SHORT $LN145@draw_tacti
  012fb	c7 85 2c fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv729[ebp], 187 ; 000000bbH
  01305	eb 20		 jmp	 SHORT $LN146@draw_tacti
$LN145@draw_tacti:
  01307	68 01 10 00 00	 push	 4097			; 00001001H
  0130c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01311	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01317	51		 push	 ecx
  01318	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0131d	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv729[ebp], 0
$LN146@draw_tacti:
  01327	68 bb 00 00 00	 push	 187			; 000000bbH
  0132c	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01332	52		 push	 edx
  01333	69 85 30 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv722[ebp], 1116
  0133d	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv729[ebp]
  01343	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0134a	ff d2		 call	 edx
  0134c	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01352	0f 84 a2 02 00
	00		 je	 $LN40@draw_tacti

; 4098 : 					{
; 4099 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01358	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0135f	74 10		 je	 SHORT $LN147@draw_tacti
  01361	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01367	8b 08		 mov	 ecx, DWORD PTR [eax]
  01369	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv742[ebp], ecx
  0136f	eb 27		 jmp	 SHORT $LN148@draw_tacti
$LN147@draw_tacti:
  01371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01377	81 c2 47 01 00
	00		 add	 edx, 327		; 00000147H
  0137d	52		 push	 edx
  0137e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01383	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01388	50		 push	 eax
  01389	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0138e	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv742[ebp], 0
$LN148@draw_tacti:
  01398	b9 01 00 00 00	 mov	 ecx, 1
  0139d	85 c9		 test	 ecx, ecx
  0139f	74 0c		 je	 SHORT $LN149@draw_tacti
  013a1	c7 85 2c fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv750[ebp], 233 ; 000000e9H
  013ab	eb 27		 jmp	 SHORT $LN150@draw_tacti
$LN149@draw_tacti:
  013ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  013b3	81 c2 47 01 00
	00		 add	 edx, 327		; 00000147H
  013b9	52		 push	 edx
  013ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  013c4	50		 push	 eax
  013c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013ca	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv750[ebp], 0
$LN150@draw_tacti:
  013d4	68 e9 00 00 00	 push	 233			; 000000e9H
  013d9	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  013df	51		 push	 ecx
  013e0	69 95 30 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv742[ebp], 1116
  013ea	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv750[ebp]
  013f0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  013f7	ff d1		 call	 ecx
  013f9	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _threat_type$18[ebp], eax

; 4100 : 
; 4101 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  013ff	83 bd c0 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$18[ebp], 5
  01406	74 0d		 je	 SHORT $LN41@draw_tacti
  01408	83 bd c0 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$18[ebp], 6
  0140f	0f 85 e5 01 00
	00		 jne	 $LN40@draw_tacti
$LN41@draw_tacti:

; 4102 : 						{
; 4103 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01415	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0141c	74 10		 je	 SHORT $LN151@draw_tacti
  0141e	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01424	8b 08		 mov	 ecx, DWORD PTR [eax]
  01426	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv764[ebp], ecx
  0142c	eb 27		 jmp	 SHORT $LN152@draw_tacti
$LN151@draw_tacti:
  0142e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01434	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  0143a	52		 push	 edx
  0143b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01440	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01445	50		 push	 eax
  01446	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0144b	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv764[ebp], 0
$LN152@draw_tacti:
  01455	b9 01 00 00 00	 mov	 ecx, 1
  0145a	85 c9		 test	 ecx, ecx
  0145c	74 0c		 je	 SHORT $LN153@draw_tacti
  0145e	c7 85 2c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv772[ebp], 8
  01468	eb 27		 jmp	 SHORT $LN154@draw_tacti
$LN153@draw_tacti:
  0146a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01470	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  01476	52		 push	 edx
  01477	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0147c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01481	50		 push	 eax
  01482	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01487	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv772[ebp], 0
$LN154@draw_tacti:
  01491	6a 08		 push	 8
  01493	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01499	51		 push	 ecx
  0149a	6b 95 30 fe ff
	ff 60		 imul	 edx, DWORD PTR tv764[ebp], 96
  014a1	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv772[ebp]
  014a7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  014ae	ff d1		 call	 ecx
  014b0	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target_position$19[ebp], eax

; 4104 : 
; 4105 : 							dx = (target_position->x - source_position->x) * scale;

  014b6	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  014bc	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  014c2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  014c6	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  014ca	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  014d2	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dx$15[ebp], xmm0

; 4106 : 							dy = (target_position->z - source_position->z) * scale;

  014da	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  014e0	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  014e6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  014eb	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  014f0	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  014f8	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _dy$14[ebp], xmm0

; 4107 : 
; 4108 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  01500	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01507	74 10		 je	 SHORT $LN155@draw_tacti
  01509	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  0150f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01511	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv792[ebp], ecx
  01517	eb 27		 jmp	 SHORT $LN156@draw_tacti
$LN155@draw_tacti:
  01519	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0151f	81 c2 50 01 00
	00		 add	 edx, 336		; 00000150H
  01525	52		 push	 edx
  01526	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0152b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01530	50		 push	 eax
  01531	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01536	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv792[ebp], 0
$LN156@draw_tacti:
  01540	b9 01 00 00 00	 mov	 ecx, 1
  01545	85 c9		 test	 ecx, ecx
  01547	74 0c		 je	 SHORT $LN157@draw_tacti
  01549	c7 85 2c fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv832[ebp], 5
  01553	eb 27		 jmp	 SHORT $LN158@draw_tacti
$LN157@draw_tacti:
  01555	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0155b	81 c2 50 01 00
	00		 add	 edx, 336		; 00000150H
  01561	52		 push	 edx
  01562	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0156c	50		 push	 eax
  0156d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01572	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv832[ebp], 0
$LN158@draw_tacti:
  0157c	6a 05		 push	 5
  0157e	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01584	51		 push	 ecx
  01585	69 95 30 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv792[ebp], 700
  0158f	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv832[ebp]
  01595	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0159c	ff d1		 call	 ecx
  0159e	d9 9d 28 fe ff
	ff		 fstp	 DWORD PTR tv1960[ebp]
  015a4	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR tv1960[ebp]
  015ac	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  015b4	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _air_scan_range$16[ebp], xmm0

; 4109 : 
; 4110 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_RED);

  015bc	b8 04 00 00 00	 mov	 eax, 4
  015c1	6b c8 12	 imul	 ecx, eax, 18
  015c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015ca	52		 push	 edx
  015cb	51		 push	 ecx
  015cc	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$16[ebp]
  015d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015d9	51		 push	 ecx
  015da	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$14[ebp]
  015e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015e7	51		 push	 ecx
  015e8	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$15[ebp]
  015f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f5	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN40@draw_tacti:

; 4111 : 
; 4112 : 						}
; 4113 : 					}
; 4114 : 				}
; 4115 : 
; 4116 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  015fa	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01601	74 10		 je	 SHORT $LN159@draw_tacti
  01603	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01609	8b 08		 mov	 ecx, DWORD PTR [eax]
  0160b	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv851[ebp], ecx
  01611	eb 27		 jmp	 SHORT $LN160@draw_tacti
$LN159@draw_tacti:
  01613	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01619	81 c2 58 01 00
	00		 add	 edx, 344		; 00000158H
  0161f	52		 push	 edx
  01620	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01625	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0162a	50		 push	 eax
  0162b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01630	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv851[ebp], 0
$LN160@draw_tacti:
  0163a	b9 01 00 00 00	 mov	 ecx, 1
  0163f	85 c9		 test	 ecx, ecx
  01641	74 0c		 je	 SHORT $LN161@draw_tacti
  01643	c7 85 2c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv859[ebp], 18 ; 00000012H
  0164d	eb 27		 jmp	 SHORT $LN162@draw_tacti
$LN161@draw_tacti:
  0164f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01655	81 c2 58 01 00
	00		 add	 edx, 344		; 00000158H
  0165b	52		 push	 edx
  0165c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01661	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01666	50		 push	 eax
  01667	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0166c	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv859[ebp], 0
$LN162@draw_tacti:
  01676	6a 12		 push	 18			; 00000012H
  01678	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  0167e	51		 push	 ecx
  0167f	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv851[ebp], 180
  01689	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv859[ebp]
  0168f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01696	ff d1		 call	 ecx
  01698	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax

; 4117 : 			}

  0169e	e9 71 fb ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 4118 : 
; 4119 : 			//
; 4120 : 			// display all gunship targets (do not show ground radar clutter)
; 4121 : 			//
; 4122 : 
; 4123 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  016a3	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  016aa	74 10		 je	 SHORT $LN163@draw_tacti
  016ac	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  016b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  016b4	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv871[ebp], ecx
  016ba	eb 27		 jmp	 SHORT $LN164@draw_tacti
$LN163@draw_tacti:
  016bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  016c2	81 c2 5f 01 00
	00		 add	 edx, 351		; 0000015fH
  016c8	52		 push	 edx
  016c9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  016ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016d3	50		 push	 eax
  016d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016d9	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv871[ebp], 0
$LN164@draw_tacti:
  016e3	b9 01 00 00 00	 mov	 ecx, 1
  016e8	85 c9		 test	 ecx, ecx
  016ea	74 0c		 je	 SHORT $LN165@draw_tacti
  016ec	c7 85 2c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv879[ebp], 18 ; 00000012H
  016f6	eb 27		 jmp	 SHORT $LN166@draw_tacti
$LN165@draw_tacti:
  016f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  016fe	81 c2 5f 01 00
	00		 add	 edx, 351		; 0000015fH
  01704	52		 push	 edx
  01705	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0170a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0170f	50		 push	 eax
  01710	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01715	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv879[ebp], 0
$LN166@draw_tacti:
  0171f	6a 12		 push	 18			; 00000012H
  01721	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01727	51		 push	 ecx
  01728	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv871[ebp], 180
  01732	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv879[ebp]
  01738	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0173f	ff d1		 call	 ecx
  01741	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax
$LN10@draw_tacti:

; 4124 : 
; 4125 : 			while (target)

  01747	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0174e	0f 84 92 01 00
	00		 je	 $LN11@draw_tacti

; 4126 : 			{
; 4127 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01754	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0175b	74 10		 je	 SHORT $LN167@draw_tacti
  0175d	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01763	8b 08		 mov	 ecx, DWORD PTR [eax]
  01765	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv891[ebp], ecx
  0176b	eb 20		 jmp	 SHORT $LN168@draw_tacti
$LN167@draw_tacti:
  0176d	68 1f 10 00 00	 push	 4127			; 0000101fH
  01772	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01777	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0177d	52		 push	 edx
  0177e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01783	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv891[ebp], 0
$LN168@draw_tacti:
  0178d	b8 01 00 00 00	 mov	 eax, 1
  01792	85 c0		 test	 eax, eax
  01794	74 0c		 je	 SHORT $LN169@draw_tacti
  01796	c7 85 2c fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv898[ebp], 66 ; 00000042H
  017a0	eb 20		 jmp	 SHORT $LN170@draw_tacti
$LN169@draw_tacti:
  017a2	68 1f 10 00 00	 push	 4127			; 0000101fH
  017a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  017b2	51		 push	 ecx
  017b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017b8	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv898[ebp], 0
$LN170@draw_tacti:
  017c2	6a 42		 push	 66			; 00000042H
  017c4	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  017ca	52		 push	 edx
  017cb	69 85 30 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv891[ebp], 1116
  017d5	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv898[ebp]
  017db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  017e2	ff d2		 call	 edx
  017e4	85 c0		 test	 eax, eax
  017e6	75 55		 jne	 SHORT $LN44@draw_tacti

; 4128 : 				{
; 4129 : 					//VJ 030423 TSD render mod
; 4130 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  017e8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  017ef	75 27		 jne	 SHORT $LN43@draw_tacti

; 4131 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  017f1	6a 00		 push	 0
  017f3	6a 00		 push	 0
  017f5	51		 push	 ecx
  017f6	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  017fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01803	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01809	50		 push	 eax
  0180a	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01810	51		 push	 ecx
  01811	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 4132 : 					else

  01816	eb 25		 jmp	 SHORT $LN44@draw_tacti
$LN43@draw_tacti:

; 4133 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE);

  01818	6a 01		 push	 1
  0181a	6a 00		 push	 0
  0181c	51		 push	 ecx
  0181d	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01825	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01830	50		 push	 eax
  01831	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01837	51		 push	 ecx
  01838	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN44@draw_tacti:

; 4134 : 				}
; 4135 : 
; 4136 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0183d	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01844	74 10		 je	 SHORT $LN171@draw_tacti
  01846	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  0184c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0184e	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv922[ebp], ecx
  01854	eb 27		 jmp	 SHORT $LN172@draw_tacti
$LN171@draw_tacti:
  01856	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0185c	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  01862	52		 push	 edx
  01863	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01868	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0186d	50		 push	 eax
  0186e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01873	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv922[ebp], 0
$LN172@draw_tacti:
  0187d	b9 01 00 00 00	 mov	 ecx, 1
  01882	85 c9		 test	 ecx, ecx
  01884	74 0c		 je	 SHORT $LN173@draw_tacti
  01886	c7 85 2c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv930[ebp], 18 ; 00000012H
  01890	eb 27		 jmp	 SHORT $LN174@draw_tacti
$LN173@draw_tacti:
  01892	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01898	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  0189e	52		 push	 edx
  0189f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  018a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  018a9	50		 push	 eax
  018aa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018af	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv930[ebp], 0
$LN174@draw_tacti:
  018b9	6a 12		 push	 18			; 00000012H
  018bb	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  018c1	51		 push	 ecx
  018c2	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv922[ebp], 180
  018cc	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv930[ebp]
  018d2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  018d9	ff d1		 call	 ecx
  018db	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax

; 4137 : 			}

  018e1	e9 61 fe ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 4138 : 
; 4139 : 			//
; 4140 : 			// draw selected target last
; 4141 : 			//
; 4142 : 
; 4143 : 			if (source_target)

  018e6	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  018ed	74 55		 je	 SHORT $LN47@draw_tacti

; 4144 : 			{
; 4145 : 				//VJ 030423 TSD render mod
; 4146 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  018ef	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  018f6	75 27		 jne	 SHORT $LN46@draw_tacti

; 4147 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE);

  018f8	6a 00		 push	 0
  018fa	6a 01		 push	 1
  018fc	51		 push	 ecx
  018fd	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01905	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0190a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01910	50		 push	 eax
  01911	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01917	51		 push	 ecx
  01918	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 4148 : 				else

  0191d	eb 25		 jmp	 SHORT $LN47@draw_tacti
$LN46@draw_tacti:

; 4149 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE);

  0191f	6a 01		 push	 1
  01921	6a 01		 push	 1
  01923	51		 push	 ecx
  01924	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0192c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01931	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01937	50		 push	 eax
  01938	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  0193e	51		 push	 ecx
  0193f	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN47@draw_tacti:

; 4150 : 			}
; 4151 : 
; 4152 : 			//
; 4153 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 4154 : 			//
; 4155 : 
; 4156 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01944	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0194b	74 10		 je	 SHORT $LN175@draw_tacti
  0194d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01953	8b 08		 mov	 ecx, DWORD PTR [eax]
  01955	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv954[ebp], ecx
  0195b	eb 27		 jmp	 SHORT $LN176@draw_tacti
$LN175@draw_tacti:
  0195d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01963	81 c2 80 01 00
	00		 add	 edx, 384		; 00000180H
  01969	52		 push	 edx
  0196a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0196f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01974	50		 push	 eax
  01975	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0197a	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv954[ebp], 0
$LN176@draw_tacti:
  01984	b9 01 00 00 00	 mov	 ecx, 1
  01989	85 c9		 test	 ecx, ecx
  0198b	74 0c		 je	 SHORT $LN177@draw_tacti
  0198d	c7 85 2c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv962[ebp], 18 ; 00000012H
  01997	eb 27		 jmp	 SHORT $LN178@draw_tacti
$LN177@draw_tacti:
  01999	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0199f	81 c2 80 01 00
	00		 add	 edx, 384		; 00000180H
  019a5	52		 push	 edx
  019a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  019ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  019b0	50		 push	 eax
  019b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019b6	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv962[ebp], 0
$LN178@draw_tacti:
  019c0	6a 12		 push	 18			; 00000012H
  019c2	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  019c8	51		 push	 ecx
  019c9	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv954[ebp], 180
  019d3	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv962[ebp]
  019d9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  019e0	ff d1		 call	 ecx
  019e2	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax
$LN12@draw_tacti:

; 4157 : 
; 4158 : 			while (target)

  019e8	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  019ef	0f 84 c1 07 00
	00		 je	 $LN13@draw_tacti

; 4159 : 			{
; 4160 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  019f5	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  019fc	74 10		 je	 SHORT $LN179@draw_tacti
  019fe	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01a04	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a06	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv974[ebp], ecx
  01a0c	eb 20		 jmp	 SHORT $LN180@draw_tacti
$LN179@draw_tacti:
  01a0e	68 40 10 00 00	 push	 4160			; 00001040H
  01a13	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a18	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a1e	52		 push	 edx
  01a1f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a24	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv974[ebp], 0
$LN180@draw_tacti:
  01a2e	b8 01 00 00 00	 mov	 eax, 1
  01a33	85 c0		 test	 eax, eax
  01a35	74 0c		 je	 SHORT $LN181@draw_tacti
  01a37	c7 85 2c fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv981[ebp], 66 ; 00000042H
  01a41	eb 20		 jmp	 SHORT $LN182@draw_tacti
$LN181@draw_tacti:
  01a43	68 40 10 00 00	 push	 4160			; 00001040H
  01a48	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a4d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01a53	51		 push	 ecx
  01a54	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a59	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv981[ebp], 0
$LN182@draw_tacti:
  01a63	6a 42		 push	 66			; 00000042H
  01a65	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01a6b	52		 push	 edx
  01a6c	69 85 30 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv974[ebp], 1116
  01a76	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv981[ebp]
  01a7c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01a83	ff d2		 call	 edx
  01a85	85 c0		 test	 eax, eax
  01a87	0f 85 80 06 00
	00		 jne	 $LN56@draw_tacti

; 4161 : 				{
; 4162 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01a8d	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01a94	74 10		 je	 SHORT $LN183@draw_tacti
  01a96	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01a9c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a9e	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv993[ebp], ecx
  01aa4	eb 20		 jmp	 SHORT $LN184@draw_tacti
$LN183@draw_tacti:
  01aa6	68 42 10 00 00	 push	 4162			; 00001042H
  01aab	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ab0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ab6	52		 push	 edx
  01ab7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01abc	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv993[ebp], 0
$LN184@draw_tacti:
  01ac6	b8 01 00 00 00	 mov	 eax, 1
  01acb	85 c0		 test	 eax, eax
  01acd	74 0c		 je	 SHORT $LN185@draw_tacti
  01acf	c7 85 2c fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv1000[ebp], 187 ; 000000bbH
  01ad9	eb 20		 jmp	 SHORT $LN186@draw_tacti
$LN185@draw_tacti:
  01adb	68 42 10 00 00	 push	 4162			; 00001042H
  01ae0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ae5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01aeb	51		 push	 ecx
  01aec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01af1	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1000[ebp], 0
$LN186@draw_tacti:
  01afb	68 bb 00 00 00	 push	 187			; 000000bbH
  01b00	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01b06	52		 push	 edx
  01b07	69 85 30 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv993[ebp], 1116
  01b11	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv1000[ebp]
  01b17	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01b1e	ff d2		 call	 edx
  01b20	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01b26	0f 84 e1 05 00
	00		 je	 $LN56@draw_tacti

; 4163 : 					{
; 4164 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  01b2c	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01b33	74 10		 je	 SHORT $LN187@draw_tacti
  01b35	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01b3b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b3d	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1012[ebp], ecx
  01b43	eb 20		 jmp	 SHORT $LN188@draw_tacti
$LN187@draw_tacti:
  01b45	68 44 10 00 00	 push	 4164			; 00001044H
  01b4a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b4f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b55	52		 push	 edx
  01b56	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b5b	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1012[ebp], 0
$LN188@draw_tacti:
  01b65	b8 01 00 00 00	 mov	 eax, 1
  01b6a	85 c0		 test	 eax, eax
  01b6c	74 0c		 je	 SHORT $LN189@draw_tacti
  01b6e	c7 85 2c fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv1019[ebp], 169 ; 000000a9H
  01b78	eb 20		 jmp	 SHORT $LN190@draw_tacti
$LN189@draw_tacti:
  01b7a	68 44 10 00 00	 push	 4164			; 00001044H
  01b7f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b84	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01b8a	51		 push	 ecx
  01b8b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b90	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1019[ebp], 0
$LN190@draw_tacti:
  01b9a	68 a9 00 00 00	 push	 169			; 000000a9H
  01b9f	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01ba5	52		 push	 edx
  01ba6	69 85 30 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1012[ebp], 1116
  01bb0	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv1019[ebp]
  01bb6	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01bbd	ff d2		 call	 edx
  01bbf	85 c0		 test	 eax, eax
  01bc1	0f 84 46 05 00
	00		 je	 $LN56@draw_tacti

; 4165 : 						{
; 4166 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01bc7	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01bce	74 10		 je	 SHORT $LN191@draw_tacti
  01bd0	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01bd6	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bd8	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1032[ebp], ecx
  01bde	eb 27		 jmp	 SHORT $LN192@draw_tacti
$LN191@draw_tacti:
  01be0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01be6	81 c2 8a 01 00
	00		 add	 edx, 394		; 0000018aH
  01bec	52		 push	 edx
  01bed	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bf2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01bf7	50		 push	 eax
  01bf8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01bfd	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1032[ebp], 0
$LN192@draw_tacti:
  01c07	b9 01 00 00 00	 mov	 ecx, 1
  01c0c	85 c9		 test	 ecx, ecx
  01c0e	74 0c		 je	 SHORT $LN193@draw_tacti
  01c10	c7 85 2c fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv1040[ebp], 233 ; 000000e9H
  01c1a	eb 27		 jmp	 SHORT $LN194@draw_tacti
$LN193@draw_tacti:
  01c1c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01c22	81 c2 8a 01 00
	00		 add	 edx, 394		; 0000018aH
  01c28	52		 push	 edx
  01c29	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01c33	50		 push	 eax
  01c34	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c39	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1040[ebp], 0
$LN194@draw_tacti:
  01c43	68 e9 00 00 00	 push	 233			; 000000e9H
  01c48	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01c4e	51		 push	 ecx
  01c4f	69 95 30 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv1032[ebp], 1116
  01c59	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1040[ebp]
  01c5f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01c66	ff d1		 call	 ecx
  01c68	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _threat_type$18[ebp], eax

; 4167 : 
; 4168 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01c6e	83 bd c0 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$18[ebp], 5
  01c75	74 16		 je	 SHORT $LN52@draw_tacti
  01c77	83 bd c0 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$18[ebp], 6
  01c7e	74 0d		 je	 SHORT $LN52@draw_tacti
  01c80	83 bd c0 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$18[ebp], 4
  01c87	0f 85 80 04 00
	00		 jne	 $LN56@draw_tacti
$LN52@draw_tacti:

; 4169 : 							{
; 4170 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01c8d	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01c94	74 10		 je	 SHORT $LN195@draw_tacti
  01c96	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01c9c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c9e	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1054[ebp], ecx
  01ca4	eb 20		 jmp	 SHORT $LN196@draw_tacti
$LN195@draw_tacti:
  01ca6	68 4a 10 00 00	 push	 4170			; 0000104aH
  01cab	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01cb0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01cb6	52		 push	 edx
  01cb7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01cbc	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1054[ebp], 0
$LN196@draw_tacti:
  01cc6	b8 01 00 00 00	 mov	 eax, 1
  01ccb	85 c0		 test	 eax, eax
  01ccd	74 0c		 je	 SHORT $LN197@draw_tacti
  01ccf	c7 85 2c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1061[ebp], 38 ; 00000026H
  01cd9	eb 20		 jmp	 SHORT $LN198@draw_tacti
$LN197@draw_tacti:
  01cdb	68 4a 10 00 00	 push	 4170			; 0000104aH
  01ce0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ce5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01ceb	51		 push	 ecx
  01cec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01cf1	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1061[ebp], 0
$LN198@draw_tacti:
  01cfb	6a 26		 push	 38			; 00000026H
  01cfd	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01d03	52		 push	 edx
  01d04	69 85 30 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1054[ebp], 180
  01d0e	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv1061[ebp]
  01d14	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01d1b	ff d2		 call	 edx
  01d1d	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01d23	0f 85 e4 03 00
	00		 jne	 $LN56@draw_tacti

; 4171 : 								{
; 4172 : 									draw_threat_line = TRUE;

  01d29	c7 85 bc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$17[ebp], 1

; 4173 : 
; 4174 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01d33	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01d3a	74 10		 je	 SHORT $LN199@draw_tacti
  01d3c	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01d42	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d44	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1074[ebp], ecx
  01d4a	eb 27		 jmp	 SHORT $LN200@draw_tacti
$LN199@draw_tacti:
  01d4c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01d52	81 c2 92 01 00
	00		 add	 edx, 402		; 00000192H
  01d58	52		 push	 edx
  01d59	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d63	50		 push	 eax
  01d64	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d69	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1074[ebp], 0
$LN200@draw_tacti:
  01d73	b9 01 00 00 00	 mov	 ecx, 1
  01d78	85 c9		 test	 ecx, ecx
  01d7a	74 0c		 je	 SHORT $LN201@draw_tacti
  01d7c	c7 85 2c fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1082[ebp], 24 ; 00000018H
  01d86	eb 27		 jmp	 SHORT $LN202@draw_tacti
$LN201@draw_tacti:
  01d88	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01d8e	81 c2 92 01 00
	00		 add	 edx, 402		; 00000192H
  01d94	52		 push	 edx
  01d95	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01d9f	50		 push	 eax
  01da0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01da5	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1082[ebp], 0
$LN202@draw_tacti:
  01daf	6a 18		 push	 24			; 00000018H
  01db1	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01db7	51		 push	 ecx
  01db8	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1074[ebp], 180
  01dc2	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1082[ebp]
  01dc8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01dcf	ff d1		 call	 ecx
  01dd1	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$20[ebp], eax
$LN14@draw_tacti:

; 4175 : 
; 4176 : 									while (launched_weapon)

  01dd7	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01dde	0f 84 ef 01 00
	00		 je	 $LN15@draw_tacti

; 4177 : 									{
; 4178 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01de4	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01deb	74 10		 je	 SHORT $LN203@draw_tacti
  01ded	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$20[ebp]
  01df3	8b 08		 mov	 ecx, DWORD PTR [eax]
  01df5	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1094[ebp], ecx
  01dfb	eb 20		 jmp	 SHORT $LN204@draw_tacti
$LN203@draw_tacti:
  01dfd	68 52 10 00 00	 push	 4178			; 00001052H
  01e02	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e07	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e0d	52		 push	 edx
  01e0e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e13	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1094[ebp], 0
$LN204@draw_tacti:
  01e1d	b8 01 00 00 00	 mov	 eax, 1
  01e22	85 c0		 test	 eax, eax
  01e24	74 0c		 je	 SHORT $LN205@draw_tacti
  01e26	c7 85 2c fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv1101[ebp], 263 ; 00000107H
  01e30	eb 20		 jmp	 SHORT $LN206@draw_tacti
$LN205@draw_tacti:
  01e32	68 52 10 00 00	 push	 4178			; 00001052H
  01e37	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e3c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01e42	51		 push	 ecx
  01e43	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e48	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1101[ebp], 0
$LN206@draw_tacti:
  01e52	68 07 01 00 00	 push	 263			; 00000107H
  01e57	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$20[ebp]
  01e5d	52		 push	 edx
  01e5e	69 85 30 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1094[ebp], 1116
  01e68	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv1101[ebp]
  01e6e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e75	ff d2		 call	 edx
  01e77	85 c0		 test	 eax, eax
  01e79	0f 84 ab 00 00
	00		 je	 $LN55@draw_tacti

; 4179 : 										{
; 4180 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01e7f	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01e86	74 10		 je	 SHORT $LN207@draw_tacti
  01e88	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$20[ebp]
  01e8e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e90	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1113[ebp], ecx
  01e96	eb 20		 jmp	 SHORT $LN208@draw_tacti
$LN207@draw_tacti:
  01e98	68 54 10 00 00	 push	 4180			; 00001054H
  01e9d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ea2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ea8	52		 push	 edx
  01ea9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01eae	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1113[ebp], 0
$LN208@draw_tacti:
  01eb8	b8 01 00 00 00	 mov	 eax, 1
  01ebd	85 c0		 test	 eax, eax
  01ebf	74 0c		 je	 SHORT $LN209@draw_tacti
  01ec1	c7 85 2c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1120[ebp], 38 ; 00000026H
  01ecb	eb 20		 jmp	 SHORT $LN210@draw_tacti
$LN209@draw_tacti:
  01ecd	68 54 10 00 00	 push	 4180			; 00001054H
  01ed2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ed7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01edd	51		 push	 ecx
  01ede	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ee3	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1120[ebp], 0
$LN210@draw_tacti:
  01eed	6a 26		 push	 38			; 00000026H
  01eef	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$20[ebp]
  01ef5	52		 push	 edx
  01ef6	69 85 30 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1113[ebp], 180
  01f00	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR tv1120[ebp]
  01f06	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01f0d	ff d2		 call	 edx
  01f0f	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01f15	75 13		 jne	 SHORT $LN55@draw_tacti

; 4181 : 											{
; 4182 : 												draw_threat_line = *tsd_draw_threat_line_status;

  01f17	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  01f1d	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f1f	89 8d bc fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$17[ebp], ecx

; 4183 : 
; 4184 : 												break;

  01f25	e9 a9 00 00 00	 jmp	 $LN15@draw_tacti
$LN55@draw_tacti:

; 4185 : 											}
; 4186 : 										}
; 4187 : 
; 4188 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01f2a	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01f31	74 10		 je	 SHORT $LN211@draw_tacti
  01f33	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$20[ebp]
  01f39	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f3b	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1133[ebp], ecx
  01f41	eb 27		 jmp	 SHORT $LN212@draw_tacti
$LN211@draw_tacti:
  01f43	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01f49	81 c2 a0 01 00
	00		 add	 edx, 416		; 000001a0H
  01f4f	52		 push	 edx
  01f50	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f5a	50		 push	 eax
  01f5b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f60	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1133[ebp], 0
$LN212@draw_tacti:
  01f6a	b9 01 00 00 00	 mov	 ecx, 1
  01f6f	85 c9		 test	 ecx, ecx
  01f71	74 0c		 je	 SHORT $LN213@draw_tacti
  01f73	c7 85 2c fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1141[ebp], 24 ; 00000018H
  01f7d	eb 27		 jmp	 SHORT $LN214@draw_tacti
$LN213@draw_tacti:
  01f7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01f85	81 c2 a0 01 00
	00		 add	 edx, 416		; 000001a0H
  01f8b	52		 push	 edx
  01f8c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f91	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01f96	50		 push	 eax
  01f97	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f9c	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1141[ebp], 0
$LN214@draw_tacti:
  01fa6	6a 18		 push	 24			; 00000018H
  01fa8	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$20[ebp]
  01fae	51		 push	 ecx
  01faf	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1133[ebp], 180
  01fb9	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1141[ebp]
  01fbf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01fc6	ff d1		 call	 ecx
  01fc8	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$20[ebp], eax

; 4189 : 									}

  01fce	e9 04 fe ff ff	 jmp	 $LN14@draw_tacti
$LN15@draw_tacti:

; 4190 : 
; 4191 : 									if (draw_threat_line)

  01fd3	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$17[ebp], 0
  01fda	0f 84 2d 01 00
	00		 je	 $LN56@draw_tacti

; 4192 : 									{
; 4193 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01fe0	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01fe7	74 10		 je	 SHORT $LN215@draw_tacti
  01fe9	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01fef	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ff1	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1154[ebp], ecx
  01ff7	eb 27		 jmp	 SHORT $LN216@draw_tacti
$LN215@draw_tacti:
  01ff9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  01fff	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  02005	52		 push	 edx
  02006	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0200b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02010	50		 push	 eax
  02011	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02016	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1154[ebp], 0
$LN216@draw_tacti:
  02020	b9 01 00 00 00	 mov	 ecx, 1
  02025	85 c9		 test	 ecx, ecx
  02027	74 0c		 je	 SHORT $LN217@draw_tacti
  02029	c7 85 2c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1162[ebp], 8
  02033	eb 27		 jmp	 SHORT $LN218@draw_tacti
$LN217@draw_tacti:
  02035	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0203b	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  02041	52		 push	 edx
  02042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0204c	50		 push	 eax
  0204d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02052	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1162[ebp], 0
$LN218@draw_tacti:
  0205c	6a 08		 push	 8
  0205e	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  02064	51		 push	 ecx
  02065	6b 95 30 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1154[ebp], 96
  0206c	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1162[ebp]
  02072	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  02079	ff d1		 call	 ecx
  0207b	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target_position$19[ebp], eax

; 4194 : 
; 4195 : 										dx = (target_position->x - source_position->x) * scale;

  02081	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  02087	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0208d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  02091	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  02095	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0209d	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dx$15[ebp], xmm0

; 4196 : 										dy = (target_position->z - source_position->z) * scale;

  020a5	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  020ab	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  020b1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  020b6	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  020bb	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  020c3	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _dy$14[ebp], xmm0

; 4197 : 
; 4198 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  020cb	b8 04 00 00 00	 mov	 eax, 4
  020d0	6b c8 00	 imul	 ecx, eax, 0
  020d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020d9	52		 push	 edx
  020da	51		 push	 ecx
  020db	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$14[ebp]
  020e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020e8	51		 push	 ecx
  020e9	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$15[ebp]
  020f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020f6	51		 push	 ecx
  020f7	0f 57 c0	 xorps	 xmm0, xmm0
  020fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ff	51		 push	 ecx
  02100	0f 57 c0	 xorps	 xmm0, xmm0
  02103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02108	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN56@draw_tacti:

; 4199 : 									}
; 4200 : 								}
; 4201 : 							}
; 4202 : 						}
; 4203 : 					}
; 4204 : 				}
; 4205 : 
; 4206 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0210d	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  02114	74 10		 je	 SHORT $LN219@draw_tacti
  02116	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  0211c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0211e	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1189[ebp], ecx
  02124	eb 27		 jmp	 SHORT $LN220@draw_tacti
$LN219@draw_tacti:
  02126	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0212c	81 c2 b2 01 00
	00		 add	 edx, 434		; 000001b2H
  02132	52		 push	 edx
  02133	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0213d	50		 push	 eax
  0213e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02143	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1189[ebp], 0
$LN220@draw_tacti:
  0214d	b9 01 00 00 00	 mov	 ecx, 1
  02152	85 c9		 test	 ecx, ecx
  02154	74 0c		 je	 SHORT $LN221@draw_tacti
  02156	c7 85 2c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1197[ebp], 18 ; 00000012H
  02160	eb 27		 jmp	 SHORT $LN222@draw_tacti
$LN221@draw_tacti:
  02162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  02168	81 c2 b2 01 00
	00		 add	 edx, 434		; 000001b2H
  0216e	52		 push	 edx
  0216f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  02179	50		 push	 eax
  0217a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0217f	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1197[ebp], 0
$LN222@draw_tacti:
  02189	6a 12		 push	 18			; 00000012H
  0218b	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  02191	51		 push	 ecx
  02192	69 95 30 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1189[ebp], 180
  0219c	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1197[ebp]
  021a2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  021a9	ff d1		 call	 ecx
  021ab	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax

; 4207 : 			}

  021b1	e9 32 f8 ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 4208 : 
; 4209 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  021b6	51		 push	 ecx
  021b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  021bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021c4	51		 push	 ecx
  021c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  021cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021d2	51		 push	 ecx
  021d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  021db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e0	51		 push	 ecx
  021e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  021e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  021f3	50		 push	 eax
  021f4	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4210 : 
; 4211 : 			set_2d_window_rotation (mfd_env, 0.0);

  021f9	51		 push	 ecx
  021fa	0f 57 c0	 xorps	 xmm0, xmm0
  021fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  02207	50		 push	 eax
  02208	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN36@draw_tacti:

; 4212 : 		}
; 4213 : 	}
; 4214 : 
; 4215 : 	draw_2d_box(-1.0, 1.0, 1.0, 0.87, TRUE, FALSE, MFD_BACKGROUND_COLOUR);

  0220d	b8 04 00 00 00	 mov	 eax, 4
  02212	6b c8 09	 imul	 ecx, eax, 9
  02215	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0221b	52		 push	 edx
  0221c	6a 00		 push	 0
  0221e	6a 01		 push	 1
  02220	51		 push	 ecx
  02221	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5eb852
  02229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0222e	51		 push	 ecx
  0222f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0223c	51		 push	 ecx
  0223d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0224a	51		 push	 ecx
  0224b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02258	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 4216 : 	draw_2d_box(-1.0, -1.0, 1.0, y_origin, TRUE, FALSE, MFD_BACKGROUND_COLOUR);

  0225d	b8 04 00 00 00	 mov	 eax, 4
  02262	6b c8 09	 imul	 ecx, eax, 9
  02265	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0226b	52		 push	 edx
  0226c	6a 00		 push	 0
  0226e	6a 01		 push	 1
  02270	51		 push	 ecx
  02271	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0227e	51		 push	 ecx
  0227f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0228c	51		 push	 ecx
  0228d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02295	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0229a	51		 push	 ecx
  0229b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  022a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022a8	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 4217 : 
; 4218 : 	////////////////////////////////////////
; 4219 : 	//
; 4220 : 	// text
; 4221 : 	//
; 4222 : 	////////////////////////////////////////
; 4223 : 
; 4224 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  022ad	b8 04 00 00 00	 mov	 eax, 4
  022b2	6b c8 0d	 imul	 ecx, eax, 13
  022b5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  022bb	52		 push	 edx
  022bc	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4225 : 
; 4226 : 	if (draw_large_mfd)

  022c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  022c8	74 09		 je	 SHORT $LN57@draw_tacti

; 4227 : 	{
; 4228 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  022ca	6a 05		 push	 5
  022cc	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4229 : 	}
; 4230 : 	else

  022d1	eb 07		 jmp	 SHORT $LN58@draw_tacti
$LN57@draw_tacti:

; 4231 : 	{
; 4232 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  022d3	6a 01		 push	 1
  022d5	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN58@draw_tacti:

; 4233 : 	}
; 4234 : 
; 4235 : 
; 4236 : 	//
; 4237 : 	// TSD range
; 4238 : 	//
; 4239 : 
; 4240 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  022da	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  022e2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  022e9	9f		 lahf
  022ea	f6 c4 44	 test	 ah, 68			; 00000044H
  022ed	7a 09		 jp	 SHORT $LN59@draw_tacti

; 4241 : 	{
; 4242 : 		s = "2.5KM";

  022ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05IHJDDCGF@2?45KM@
  022f6	eb 61		 jmp	 SHORT $LN66@draw_tacti
$LN59@draw_tacti:

; 4243 : 	}
; 4244 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  022f8	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  02300	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  02307	9f		 lahf
  02308	f6 c4 44	 test	 ah, 68			; 00000044H
  0230b	7a 09		 jp	 SHORT $LN61@draw_tacti

; 4245 : 	{
; 4246 : 		s = "5KM";

  0230d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CAFGHLBJ@5KM@
  02314	eb 43		 jmp	 SHORT $LN66@draw_tacti
$LN61@draw_tacti:

; 4247 : 	}
; 4248 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  02316	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0231e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  02325	9f		 lahf
  02326	f6 c4 44	 test	 ah, 68			; 00000044H
  02329	7a 09		 jp	 SHORT $LN63@draw_tacti

; 4249 : 	{
; 4250 : 		s = "10KM";

  0232b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04GMKPDCBM@10KM@
  02332	eb 25		 jmp	 SHORT $LN66@draw_tacti
$LN63@draw_tacti:

; 4251 : 	}
; 4252 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  02334	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0233c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  02343	9f		 lahf
  02344	f6 c4 44	 test	 ah, 68			; 00000044H
  02347	7a 09		 jp	 SHORT $LN65@draw_tacti

; 4253 : 	{
; 4254 : 		s = "25KM";

  02349	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04BMNBLIPO@25KM@

; 4255 : 	}
; 4256 : 	else

  02350	eb 07		 jmp	 SHORT $LN66@draw_tacti
$LN65@draw_tacti:

; 4257 : 	{
; 4258 : 		s = "XXX";

  02352	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN66@draw_tacti:

; 4259 : 	}
; 4260 : 
; 4261 : 	width = get_mono_font_string_width (s);

  02359	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0235c	50		 push	 eax
  0235d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02362	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4262 : 
; 4263 : 	if (draw_large_mfd)

  02368	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0236f	74 2e		 je	 SHORT $LN67@draw_tacti

; 4264 : 	{
; 4265 : 		width += 2.0;

  02371	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02379	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02381	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02385	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4266 : 
; 4267 : 		y_adjust = 5.0;

  0238d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02395	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4268 : 	}
; 4269 : 	else

  0239d	eb 2c		 jmp	 SHORT $LN68@draw_tacti
$LN67@draw_tacti:

; 4270 : 	{
; 4271 : 		width += 1.0;

  0239f	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  023a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  023af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023b3	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4272 : 
; 4273 : 		y_adjust = 2.0;

  023bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  023c3	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN68@draw_tacti:

; 4274 : 	}
; 4275 : 
; 4276 : 	set_2d_mono_font_position (1.0, 1.0);

  023cb	51		 push	 ecx
  023cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  023d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d9	51		 push	 ecx
  023da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  023e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023e7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4277 : 
; 4278 : 	set_mono_font_rel_position (-width, y_adjust);

  023ec	51		 push	 ecx
  023ed	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  023f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023fa	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02402	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02409	51		 push	 ecx
  0240a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0240f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4279 : 
; 4280 : 	print_mono_font_string (s);

  02414	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02417	50		 push	 eax
  02418	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4281 : 
; 4282 : 	//
; 4283 : 	// TSD declutter level
; 4284 : 	//
; 4285 : 
; 4286 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  0241d	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  02424	75 09		 jne	 SHORT $LN69@draw_tacti

; 4287 : 	{
; 4288 : 		s = "COMBINED";

  02426	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_08KFHEGLBA@COMBINED@
  0242d	eb 2b		 jmp	 SHORT $LN74@draw_tacti
$LN69@draw_tacti:

; 4289 : 	}
; 4290 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0242f	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  02436	75 09		 jne	 SHORT $LN71@draw_tacti

; 4291 : 	{
; 4292 : 		s = "TARGETING";

  02438	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09ECOKIFNI@TARGETING@
  0243f	eb 19		 jmp	 SHORT $LN74@draw_tacti
$LN71@draw_tacti:

; 4293 : 	}
; 4294 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  02441	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02448	75 09		 jne	 SHORT $LN73@draw_tacti

; 4295 : 	{
; 4296 : 		s = "NAVIGATION";

  0244a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@CNLPLFKK@NAVIGATION@

; 4297 : 	}
; 4298 : 	else

  02451	eb 07		 jmp	 SHORT $LN74@draw_tacti
$LN73@draw_tacti:

; 4299 : 	{
; 4300 : 		s = "XXX";

  02453	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN74@draw_tacti:

; 4301 : 	}
; 4302 : 
; 4303 : 	if (draw_large_mfd)

  0245a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02461	74 2e		 je	 SHORT $LN75@draw_tacti

; 4304 : 	{
; 4305 : 		width += 2.0;

  02463	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0246b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02473	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02477	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4306 : 
; 4307 : 		y_adjust = 5.0;

  0247f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02487	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4308 : 	}
; 4309 : 	else

  0248f	eb 2c		 jmp	 SHORT $LN76@draw_tacti
$LN75@draw_tacti:

; 4310 : 	{
; 4311 : 		width += 1.0;

  02491	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02499	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  024a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024a5	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4312 : 
; 4313 : 		y_adjust = 5.0;

  024ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  024b5	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN76@draw_tacti:

; 4314 : 	}
; 4315 : 
; 4316 : 	set_2d_mono_font_position (-0.95, 1.0);

  024bd	51		 push	 ecx
  024be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024cb	51		 push	 ecx
  024cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  024d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024d9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4317 : 
; 4318 : 	set_mono_font_rel_position (2.0, y_adjust);

  024de	51		 push	 ecx
  024df	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  024e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ec	51		 push	 ecx
  024ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  024f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024fa	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4319 : 
; 4320 : 	print_mono_font_string (s);

  024ff	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02502	50		 push	 eax
  02503	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4321 : 	//
; 4322 : 	// sensor type
; 4323 : 	//
; 4324 : 
; 4325 : 	set_mono_font_colour (MFD_COLOUR3);

  02508	b8 04 00 00 00	 mov	 eax, 4
  0250d	d1 e0		 shl	 eax, 1
  0250f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  02515	51		 push	 ecx
  02516	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4326 : 	set_mono_font_type(MONO_FONT_TYPE_5X9);

  0251b	6a 02		 push	 2
  0251d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4327 : 
; 4328 : //	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)
; 4329 : 	{
; 4330 : 		switch (target_acquisition_system)

  02522	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  02527	89 85 30 fe ff
	ff		 mov	 DWORD PTR tv1272[ebp], eax
  0252d	83 bd 30 fe ff
	ff 0a		 cmp	 DWORD PTR tv1272[ebp], 10 ; 0000000aH
  02534	77 4c		 ja	 SHORT $LN84@draw_tacti
  02536	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR tv1272[ebp]
  0253c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN240@draw_tacti[ecx*4]
$LN77@draw_tacti:

; 4331 : 		{
; 4332 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 4333 : 			{
; 4334 : 				s = "NO ACQ";

  02543	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 4335 : 
; 4336 : 				break;

  0254a	eb 3d		 jmp	 SHORT $LN16@draw_tacti
$LN78@draw_tacti:

; 4337 : 			}
; 4338 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 4339 : 			{
; 4340 : 				s = "FCR GND";

  0254c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07GIJJEIKP@FCR?5GND@

; 4341 : 
; 4342 : 				break;

  02553	eb 34		 jmp	 SHORT $LN16@draw_tacti
$LN79@draw_tacti:

; 4343 : 			}
; 4344 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 4345 : 			{
; 4346 : 				s = "FCR AIR";

  02555	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07FECFLECB@FCR?5AIR@

; 4347 : 
; 4348 : 				break;

  0255c	eb 2b		 jmp	 SHORT $LN16@draw_tacti
$LN80@draw_tacti:

; 4349 : 			}
; 4350 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 4351 : 			{
; 4352 : 				s = "EOS FLIR";

  0255e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_08JJGIEILB@EOS?5FLIR@

; 4353 : 
; 4354 : 				break;

  02565	eb 22		 jmp	 SHORT $LN16@draw_tacti
$LN81@draw_tacti:

; 4355 : 			}
; 4356 : 			case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 4357 : 			{
; 4358 : 				s = "EOS LLLTV";

  02567	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09MCNGLOGG@EOS?5LLLTV@

; 4359 : 
; 4360 : 				break;

  0256e	eb 19		 jmp	 SHORT $LN16@draw_tacti
$LN82@draw_tacti:

; 4361 : 			}
; 4362 : 			case TARGET_ACQUISITION_SYSTEM_PERISCOPE:
; 4363 : 			{
; 4364 : 				s = "EOS SCOPE";

  02570	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09MGFFNPFJ@EOS?5SCOPE@

; 4365 : 
; 4366 : 				break;

  02577	eb 10		 jmp	 SHORT $LN16@draw_tacti
$LN83@draw_tacti:

; 4367 : 			}
; 4368 : 			case TARGET_ACQUISITION_SYSTEM_HMS:
; 4369 : 			{
; 4370 : 				s = "HMS";

  02579	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03GJMPEADF@HMS@

; 4371 : 
; 4372 : 				break;

  02580	eb 07		 jmp	 SHORT $LN16@draw_tacti
$LN84@draw_tacti:

; 4373 : 			}
; 4374 : 			default:
; 4375 : 			{
; 4376 : 				s = "XXX";

  02582	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN16@draw_tacti:

; 4377 : 
; 4378 : 				break;
; 4379 : 			}
; 4380 : 		}
; 4381 : 
; 4382 : 		if (draw_large_mfd)

  02589	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02590	74 12		 je	 SHORT $LN85@draw_tacti

; 4383 : 		{
; 4384 : 			y_adjust = 5.0;

  02592	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0259a	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4385 : 		}
; 4386 : 		else

  025a2	eb 10		 jmp	 SHORT $LN86@draw_tacti
$LN85@draw_tacti:

; 4387 : 		{
; 4388 : 			y_adjust = 2.0;

  025a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  025ac	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN86@draw_tacti:

; 4389 : 		}
; 4390 : 
; 4391 : 		set_2d_mono_font_position (0.5, -0.65);

  025b4	51		 push	 ecx
  025b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  025bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025c2	51		 push	 ecx
  025c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  025cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025d0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4392 : 
; 4393 : 		set_mono_font_rel_position (1.0, y_adjust);

  025d5	51		 push	 ecx
  025d6	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  025de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025e3	51		 push	 ecx
  025e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  025ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025f1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4394 : 
; 4395 : 		print_mono_font_string (s);

  025f6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  025f9	50		 push	 eax
  025fa	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4396 : 	}
; 4397 : 
; 4398 : 
; 4399 : 	//
; 4400 : 	// target range
; 4401 : 	//
; 4402 : 
; 4403 : 	{
; 4404 : 		float
; 4405 : 			target_range = get_range_to_target();

  025ff	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  02604	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR _target_range$13[ebp]

; 4406 : 
; 4407 : 		if (target_range > 0.0)

  0260a	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$13[ebp]
  02612	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0261a	0f 86 ce 00 00
	00		 jbe	 $LN87@draw_tacti

; 4408 : 		{
; 4409 : 			sprintf (buffer, "%   4d M", (int) target_range);

  02620	f3 0f 2c 85 ac
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$13[ebp]
  02628	50		 push	 eax
  02629	68 00 00 00 00	 push	 OFFSET ??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@
  0262e	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02634	51		 push	 ecx
  02635	e8 00 00 00 00	 call	 _sprintf
  0263a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4410 : 
; 4411 : 			if (draw_large_mfd)

  0263d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02644	74 2e		 je	 SHORT $LN88@draw_tacti

; 4412 : 			{
; 4413 : 				width += 2.0;

  02646	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0264e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02656	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0265a	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4414 : 
; 4415 : 				y_adjust = 5.0;

  02662	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0266a	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4416 : 			}
; 4417 : 			else

  02672	eb 2c		 jmp	 SHORT $LN89@draw_tacti
$LN88@draw_tacti:

; 4418 : 			{
; 4419 : 				width += 1.0;

  02674	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0267c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02684	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02688	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4420 : 
; 4421 : 				y_adjust = 2.0;

  02690	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02698	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN89@draw_tacti:

; 4422 : 			}
; 4423 : 
; 4424 : 			set_2d_mono_font_position (0.5, -0.75);

  026a0	51		 push	 ecx
  026a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  026a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026ae	51		 push	 ecx
  026af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  026b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026bc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4425 : 
; 4426 : 			set_mono_font_rel_position (1.0, y_adjust);

  026c1	51		 push	 ecx
  026c2	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  026ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026cf	51		 push	 ecx
  026d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  026d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026dd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4427 : 
; 4428 : 			print_mono_font_string (buffer);

  026e2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  026e8	50		 push	 eax
  026e9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN87@draw_tacti:

; 4429 : 		}
; 4430 : 	}
; 4431 : 
; 4432 : 	//
; 4433 : 	// waypoint information
; 4434 : 	//
; 4435 : 
; 4436 : //	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET)
; 4437 : 	if (!hokum_damage.navigation_computer)

  026ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  026f3	c1 e8 09	 shr	 eax, 9
  026f6	83 e0 01	 and	 eax, 1
  026f9	0f 85 d9 05 00
	00		 jne	 $LN91@draw_tacti

; 4438 : 	{
; 4439 : 		entity
; 4440 : 			*wp;
; 4441 : 
; 4442 : 		vec3d
; 4443 : 			waypoint_position;
; 4444 : 
; 4445 : 		float
; 4446 : 			waypoint_range;
; 4447 : 
; 4448 : 		// sector:
; 4449 : 		{
; 4450 : 			int sz, sx;
; 4451 : 			entity* sec = get_local_sector_entity(source_position);

  026ff	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  02705	50		 push	 eax
  02706	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  0270b	89 85 8c fe ff
	ff		 mov	 DWORD PTR _sec$7[ebp], eax

; 4452 : 
; 4453 : 			sx = get_local_entity_int_value(sec, INT_TYPE_X_SECTOR);

  02711	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _sec$7[ebp], 0
  02718	74 10		 je	 SHORT $LN223@draw_tacti
  0271a	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _sec$7[ebp]
  02720	8b 08		 mov	 ecx, DWORD PTR [eax]
  02722	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1310[ebp], ecx
  02728	eb 27		 jmp	 SHORT $LN224@draw_tacti
$LN223@draw_tacti:
  0272a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  02730	81 c2 a9 02 00
	00		 add	 edx, 681		; 000002a9H
  02736	52		 push	 edx
  02737	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0273c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02741	50		 push	 eax
  02742	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02747	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1310[ebp], 0
$LN224@draw_tacti:
  02751	b9 01 00 00 00	 mov	 ecx, 1
  02756	85 c9		 test	 ecx, ecx
  02758	74 0c		 je	 SHORT $LN225@draw_tacti
  0275a	c7 85 2c fe ff
	ff 15 01 00 00	 mov	 DWORD PTR tv1318[ebp], 277 ; 00000115H
  02764	eb 27		 jmp	 SHORT $LN226@draw_tacti
$LN225@draw_tacti:
  02766	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0276c	81 c2 a9 02 00
	00		 add	 edx, 681		; 000002a9H
  02772	52		 push	 edx
  02773	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02778	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0277d	50		 push	 eax
  0277e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02783	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1318[ebp], 0
$LN226@draw_tacti:
  0278d	68 15 01 00 00	 push	 277			; 00000115H
  02792	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _sec$7[ebp]
  02798	51		 push	 ecx
  02799	69 95 30 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv1310[ebp], 1116
  027a3	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1318[ebp]
  027a9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  027b0	ff d1		 call	 ecx
  027b2	89 85 90 fe ff
	ff		 mov	 DWORD PTR _sx$8[ebp], eax

; 4454 : 			sz = get_local_entity_int_value(sec, INT_TYPE_Z_SECTOR);

  027b8	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _sec$7[ebp], 0
  027bf	74 10		 je	 SHORT $LN227@draw_tacti
  027c1	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _sec$7[ebp]
  027c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  027c9	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1330[ebp], ecx
  027cf	eb 27		 jmp	 SHORT $LN228@draw_tacti
$LN227@draw_tacti:
  027d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  027d7	81 c2 aa 02 00
	00		 add	 edx, 682		; 000002aaH
  027dd	52		 push	 edx
  027de	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  027e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  027e8	50		 push	 eax
  027e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  027ee	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1330[ebp], 0
$LN228@draw_tacti:
  027f8	b9 01 00 00 00	 mov	 ecx, 1
  027fd	85 c9		 test	 ecx, ecx
  027ff	74 0c		 je	 SHORT $LN229@draw_tacti
  02801	c7 85 2c fe ff
	ff 16 01 00 00	 mov	 DWORD PTR tv1338[ebp], 278 ; 00000116H
  0280b	eb 27		 jmp	 SHORT $LN230@draw_tacti
$LN229@draw_tacti:
  0280d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  02813	81 c2 aa 02 00
	00		 add	 edx, 682		; 000002aaH
  02819	52		 push	 edx
  0281a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0281f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  02824	50		 push	 eax
  02825	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0282a	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1338[ebp], 0
$LN230@draw_tacti:
  02834	68 16 01 00 00	 push	 278			; 00000116H
  02839	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _sec$7[ebp]
  0283f	51		 push	 ecx
  02840	69 95 30 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv1330[ebp], 1116
  0284a	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1338[ebp]
  02850	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  02857	ff d1		 call	 ecx
  02859	89 85 94 fe ff
	ff		 mov	 DWORD PTR _sz$9[ebp], eax

; 4455 : 
; 4456 : 			sprintf(buffer, "SECTOR: %d,%d", sx, sz);

  0285f	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _sz$9[ebp]
  02865	50		 push	 eax
  02866	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _sx$8[ebp]
  0286c	51		 push	 ecx
  0286d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@
  02872	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  02878	52		 push	 edx
  02879	e8 00 00 00 00	 call	 _sprintf
  0287e	83 c4 10	 add	 esp, 16			; 00000010H

; 4457 : 			set_2d_mono_font_position (-1.0, -0.65);

  02881	51		 push	 ecx
  02882	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0288a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0288f	51		 push	 ecx
  02890	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02898	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0289d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4458 : 			set_mono_font_rel_position (5.0, 5.0);

  028a2	51		 push	 ecx
  028a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  028ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028b0	51		 push	 ecx
  028b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  028b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028be	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4459 : 			print_mono_font_string (buffer);

  028c3	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  028c9	50		 push	 eax
  028ca	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4460 : 		}
; 4461 : 
; 4462 : 		wp = get_local_entity_current_waypoint (source);

  028cf	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  028d5	50		 push	 eax
  028d6	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  028db	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _wp$12[ebp], eax

; 4463 : 
; 4464 : 		if (wp)

  028e1	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$12[ebp], 0
  028e8	0f 84 ea 03 00
	00		 je	 $LN91@draw_tacti

; 4465 : 		{
; 4466 : 			get_waypoint_display_position (source, wp, &waypoint_position);

  028ee	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$11[ebp]
  028f4	50		 push	 eax
  028f5	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$12[ebp]
  028fb	51		 push	 ecx
  028fc	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02902	52		 push	 edx
  02903	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4467 : 
; 4468 : 			//
; 4469 : 			// waypoint id & range
; 4470 : 			//
; 4471 : 
; 4472 : 			waypoint_range = get_2d_range (source_position, &waypoint_position);

  02908	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$11[ebp]
  0290e	50		 push	 eax
  0290f	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02915	51		 push	 ecx
  02916	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  0291b	d9 9d 98 fe ff
	ff		 fstp	 DWORD PTR _waypoint_range$10[ebp]

; 4473 : 
; 4474 : 			if (!hokum_damage.navigation_computer)

  02921	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  02926	c1 e8 09	 shr	 eax, 9
  02929	83 e0 01	 and	 eax, 1
  0292c	0f 85 ee 01 00
	00		 jne	 $LN92@draw_tacti

; 4475 : 			{
; 4476 : 				if (waypoint_range < 100000.0)

  02932	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$10[ebp]
  0293a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  02942	66 0f 2f c8	 comisd	 xmm1, xmm0
  02946	0f 86 08 01 00
	00		 jbe	 $LN94@draw_tacti

; 4477 : 				{
; 4478 : 					int
; 4479 : 						i;
; 4480 : 
; 4481 : 					float
; 4482 : 						f;
; 4483 : 
; 4484 : 					//
; 4485 : 					// this is required to prevent rounding errors around the 100Km mark
; 4486 : 					//
; 4487 : 
; 4488 : 					i = (int) waypoint_range * (1.0 / 100.0);

  0294c	f3 0f 2c 85 98
	fe ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$10[ebp]
  02954	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  02958	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  02960	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02964	89 8d 88 fe ff
	ff		 mov	 DWORD PTR _i$6[ebp], ecx

; 4489 : 
; 4490 : 					f = (float) i * (1.0 / 10.0);

  0296a	f3 0f 2a 85 88
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  02972	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02976	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0297e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02982	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _f$5[ebp], xmm0

; 4491 : 
; 4492 : 					sprintf (buffer, "%c: %.1f KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  0298a	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$12[ebp], 0
  02991	74 10		 je	 SHORT $LN231@draw_tacti
  02993	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$12[ebp]
  02999	8b 08		 mov	 ecx, DWORD PTR [eax]
  0299b	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1384[ebp], ecx
  029a1	eb 27		 jmp	 SHORT $LN232@draw_tacti
$LN231@draw_tacti:
  029a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  029a9	81 c2 d0 02 00
	00		 add	 edx, 720		; 000002d0H
  029af	52		 push	 edx
  029b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  029b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  029ba	50		 push	 eax
  029bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  029c0	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1384[ebp], 0
$LN232@draw_tacti:
  029ca	b9 01 00 00 00	 mov	 ecx, 1
  029cf	85 c9		 test	 ecx, ecx
  029d1	74 0c		 je	 SHORT $LN233@draw_tacti
  029d3	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1392[ebp], 0
  029dd	eb 27		 jmp	 SHORT $LN234@draw_tacti
$LN233@draw_tacti:
  029df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  029e5	81 c2 d0 02 00
	00		 add	 edx, 720		; 000002d0H
  029eb	52		 push	 edx
  029ec	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  029f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  029f6	50		 push	 eax
  029f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  029fc	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1392[ebp], 0
$LN234@draw_tacti:
  02a06	f3 0f 5a 85 84
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  02a0e	83 ec 08	 sub	 esp, 8
  02a11	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02a16	6a 00		 push	 0
  02a18	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$12[ebp]
  02a1e	51		 push	 ecx
  02a1f	8b 95 2c fe ff
	ff		 mov	 edx, DWORD PTR tv1392[ebp]
  02a25	c1 e2 02	 shl	 edx, 2
  02a28	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR tv1384[ebp]
  02a2e	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  02a35	ff d1		 call	 ecx
  02a37	0f b6 d0	 movzx	 edx, al
  02a3a	52		 push	 edx
  02a3b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@
  02a40	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02a46	50		 push	 eax
  02a47	e8 00 00 00 00	 call	 _sprintf
  02a4c	83 c4 14	 add	 esp, 20			; 00000014H

; 4493 : 				}
; 4494 : 				else

  02a4f	e9 ca 00 00 00	 jmp	 $LN95@draw_tacti
$LN94@draw_tacti:

; 4495 : 				{
; 4496 : 					sprintf (buffer, "%c: %d KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  02a54	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$12[ebp], 0
  02a5b	74 10		 je	 SHORT $LN235@draw_tacti
  02a5d	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$12[ebp]
  02a63	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a65	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1413[ebp], ecx
  02a6b	eb 27		 jmp	 SHORT $LN236@draw_tacti
$LN235@draw_tacti:
  02a6d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  02a73	81 c2 d4 02 00
	00		 add	 edx, 724		; 000002d4H
  02a79	52		 push	 edx
  02a7a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02a7f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02a84	50		 push	 eax
  02a85	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02a8a	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1413[ebp], 0
$LN236@draw_tacti:
  02a94	b9 01 00 00 00	 mov	 ecx, 1
  02a99	85 c9		 test	 ecx, ecx
  02a9b	74 0c		 je	 SHORT $LN237@draw_tacti
  02a9d	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1421[ebp], 0
  02aa7	eb 27		 jmp	 SHORT $LN238@draw_tacti
$LN237@draw_tacti:
  02aa9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  02aaf	81 c2 d4 02 00
	00		 add	 edx, 724		; 000002d4H
  02ab5	52		 push	 edx
  02ab6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02abb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02ac0	50		 push	 eax
  02ac1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02ac6	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1421[ebp], 0
$LN238@draw_tacti:
  02ad0	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$10[ebp]
  02ad8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02ae0	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02ae4	51		 push	 ecx
  02ae5	6a 00		 push	 0
  02ae7	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _wp$12[ebp]
  02aed	52		 push	 edx
  02aee	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv1421[ebp]
  02af4	c1 e0 02	 shl	 eax, 2
  02af7	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR tv1413[ebp]
  02afd	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02b04	ff d2		 call	 edx
  02b06	0f b6 c0	 movzx	 eax, al
  02b09	50		 push	 eax
  02b0a	68 00 00 00 00	 push	 OFFSET ??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@
  02b0f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02b15	51		 push	 ecx
  02b16	e8 00 00 00 00	 call	 _sprintf
  02b1b	83 c4 10	 add	 esp, 16			; 00000010H
$LN95@draw_tacti:

; 4497 : 				}
; 4498 : 			}
; 4499 : 			else

  02b1e	eb 14		 jmp	 SHORT $LN93@draw_tacti
$LN92@draw_tacti:

; 4500 : 			{
; 4501 : 				sprintf (buffer, "-:--.-");

  02b20	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  02b25	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02b2b	50		 push	 eax
  02b2c	e8 00 00 00 00	 call	 _sprintf
  02b31	83 c4 08	 add	 esp, 8
$LN93@draw_tacti:

; 4502 : 			}
; 4503 : 
; 4504 : 			if (draw_large_mfd)

  02b34	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02b3b	74 12		 je	 SHORT $LN96@draw_tacti

; 4505 : 			{
; 4506 : 				y_adjust = 5.0;

  02b3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02b45	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4507 : 			}
; 4508 : 			else

  02b4d	eb 10		 jmp	 SHORT $LN97@draw_tacti
$LN96@draw_tacti:

; 4509 : 			{
; 4510 : 				y_adjust = 2.0;

  02b4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02b57	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN97@draw_tacti:

; 4511 : 			}
; 4512 : 
; 4513 : 			set_2d_mono_font_position (-1.0, -0.75);

  02b5f	51		 push	 ecx
  02b60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  02b68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b6d	51		 push	 ecx
  02b6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02b76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b7b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4514 : 
; 4515 : 			set_mono_font_rel_position (5.0, y_adjust);

  02b80	51		 push	 ecx
  02b81	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02b89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b8e	51		 push	 ecx
  02b8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02b97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b9c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4516 : 
; 4517 : 			print_mono_font_string (buffer);

  02ba1	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02ba7	50		 push	 eax
  02ba8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4518 : 
; 4519 : 			//
; 4520 : 			// time to go
; 4521 : 			//
; 4522 : 
; 4523 : 			if ((current_flight_dynamics->velocity_z.value > 0.1) && (!hokum_damage.navigation_computer))

  02bad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02bb2	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  02bba	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  02bc2	0f 86 83 00 00
	00		 jbe	 $LN98@draw_tacti
  02bc8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  02bcd	c1 e8 09	 shr	 eax, 9
  02bd0	83 e0 01	 and	 eax, 1
  02bd3	75 76		 jne	 SHORT $LN98@draw_tacti

; 4524 : 			{
; 4525 : 				float
; 4526 : 					time_to_go,
; 4527 : 					hours,
; 4528 : 					minutes,
; 4529 : 					seconds;
; 4530 : 
; 4531 : 				time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  02bd5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02bda	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$10[ebp]
  02be2	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  02bea	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 4532 : 
; 4533 : 				get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  02bf2	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$1[ebp]
  02bf8	50		 push	 eax
  02bf9	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$2[ebp]
  02bff	51		 push	 ecx
  02c00	8d 95 7c fe ff
	ff		 lea	 edx, DWORD PTR _hours$3[ebp]
  02c06	52		 push	 edx
  02c07	51		 push	 ecx
  02c08	f3 0f 10 85 80
	fe ff ff	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  02c10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c15	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 4534 : 
; 4535 : 				sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  02c1a	f3 0f 2c 85 74
	fe ff ff	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  02c22	50		 push	 eax
  02c23	f3 0f 2c 8d 78
	fe ff ff	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  02c2b	51		 push	 ecx
  02c2c	f3 0f 2c 95 7c
	fe ff ff	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  02c34	52		 push	 edx
  02c35	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  02c3a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02c40	50		 push	 eax
  02c41	e8 00 00 00 00	 call	 _sprintf
  02c46	83 c4 14	 add	 esp, 20			; 00000014H

; 4536 : 			}
; 4537 : 			else

  02c49	eb 14		 jmp	 SHORT $LN99@draw_tacti
$LN98@draw_tacti:

; 4538 : 			{
; 4539 : 				strcpy (buffer, "--:--:--");

  02c4b	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  02c50	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02c56	50		 push	 eax
  02c57	e8 00 00 00 00	 call	 _strcpy
  02c5c	83 c4 08	 add	 esp, 8
$LN99@draw_tacti:

; 4540 : 			}
; 4541 : 
; 4542 : 			if (draw_large_mfd)

  02c5f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02c66	74 12		 je	 SHORT $LN100@draw_tacti

; 4543 : 			{
; 4544 : 				y_adjust = 5.0;

  02c68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02c70	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4545 : 			}
; 4546 : 			else

  02c78	eb 10		 jmp	 SHORT $LN101@draw_tacti
$LN100@draw_tacti:

; 4547 : 			{
; 4548 : 				y_adjust = 2.0;

  02c7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02c82	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN101@draw_tacti:

; 4549 : 			}
; 4550 : 
; 4551 : 			set_2d_mono_font_position (-1.0, -0.85);

  02c8a	51		 push	 ecx
  02c8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  02c93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c98	51		 push	 ecx
  02c99	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02ca1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ca6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4552 : 
; 4553 : 			set_mono_font_rel_position (5.0, y_adjust);

  02cab	51		 push	 ecx
  02cac	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cb9	51		 push	 ecx
  02cba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02cc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cc7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4554 : 
; 4555 : 			print_mono_font_string (buffer);

  02ccc	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02cd2	50		 push	 eax
  02cd3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN91@draw_tacti:

; 4556 : 		}
; 4557 : 	}
; 4558 : }

  02cd8	5f		 pop	 edi
  02cd9	5e		 pop	 esi
  02cda	5b		 pop	 ebx
  02cdb	8b e5		 mov	 esp, ebp
  02cdd	5d		 pop	 ebp
  02cde	c2 04 00	 ret	 4
  02ce1	0f 1f 00	 npad	 3
$LN239@draw_tacti:
  02ce4	00 00 00 00	 DD	 $LN20@draw_tacti
  02ce8	00 00 00 00	 DD	 $LN20@draw_tacti
  02cec	00 00 00 00	 DD	 $LN21@draw_tacti
  02cf0	00 00 00 00	 DD	 $LN21@draw_tacti
$LN240@draw_tacti:
  02cf4	00 00 00 00	 DD	 $LN77@draw_tacti
  02cf8	00 00 00 00	 DD	 $LN78@draw_tacti
  02cfc	00 00 00 00	 DD	 $LN79@draw_tacti
  02d00	00 00 00 00	 DD	 $LN80@draw_tacti
  02d04	00 00 00 00	 DD	 $LN84@draw_tacti
  02d08	00 00 00 00	 DD	 $LN84@draw_tacti
  02d0c	00 00 00 00	 DD	 $LN81@draw_tacti
  02d10	00 00 00 00	 DD	 $LN82@draw_tacti
  02d14	00 00 00 00	 DD	 $LN84@draw_tacti
  02d18	00 00 00 00	 DD	 $LN84@draw_tacti
  02d1c	00 00 00 00	 DD	 $LN83@draw_tacti
?draw_tactical_situation_display_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ENDP ; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_2d_periscope_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_periscope_mfd@@YGXH@Z PROC			; draw_2d_periscope_mfd, COMDAT

; 3747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3748 : 	draw_2d_eo_display (&hokum_periscope, TARGET_ACQUISITION_SYSTEM_PERISCOPE, hokum_damage.periscope, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00013	c1 e9 04	 shr	 ecx, 4
  00016	83 e1 01	 and	 ecx, 1
  00019	51		 push	 ecx
  0001a	6a 07		 push	 7
  0001c	68 00 00 00 00	 push	 OFFSET ?hokum_periscope@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_periscope
  00021	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 3749 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_2d_periscope_mfd@@YGXH@Z ENDP			; draw_2d_periscope_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_3d_periscope_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_periscope_mfd@@YGXH@Z PROC			; draw_3d_periscope_mfd, COMDAT

; 3728 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3729 : 	if (!hokum_damage.periscope)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0000e	c1 e8 04	 shr	 eax, 4
  00011	83 e0 01	 and	 eax, 1
  00014	75 22		 jne	 SHORT $LN1@draw_3d_pe

; 3730 : 	{
; 3731 : 		if (full_screen)

  00016	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  0001a	74 10		 je	 SHORT $LN3@draw_3d_pe

; 3732 : 		{
; 3733 : 			draw_full_screen_3d_eo_display (&hokum_periscope, TARGET_ACQUISITION_SYSTEM_PERISCOPE, DISPLAY_3D_TINT_ORANGE);

  0001c	6a 05		 push	 5
  0001e	6a 07		 push	 7
  00020	68 00 00 00 00	 push	 OFFSET ?hokum_periscope@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_periscope
  00025	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 3734 : 		}
; 3735 : 		else

  0002a	eb 0c		 jmp	 SHORT $LN1@draw_3d_pe
$LN3@draw_3d_pe:

; 3736 : 		{
; 3737 : 			draw_3d_eo_display (&hokum_periscope, TARGET_ACQUISITION_SYSTEM_PERISCOPE);

  0002c	6a 07		 push	 7
  0002e	68 00 00 00 00	 push	 OFFSET ?hokum_periscope@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_periscope
  00033	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_pe:

; 3738 : 		}
; 3739 : 	}
; 3740 : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?draw_3d_periscope_mfd@@YGXH@Z ENDP			; draw_3d_periscope_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_2d_llltv_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_llltv_mfd@@YGXH@Z PROC				; draw_2d_llltv_mfd, COMDAT

; 3713 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3714 : 	draw_2d_eo_display (&hokum_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV, hokum_damage.llltv, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00013	c1 e9 03	 shr	 ecx, 3
  00016	83 e1 01	 and	 ecx, 1
  00019	51		 push	 ecx
  0001a	6a 06		 push	 6
  0001c	68 00 00 00 00	 push	 OFFSET ?hokum_llltv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_llltv
  00021	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 3715 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_2d_llltv_mfd@@YGXH@Z ENDP				; draw_2d_llltv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_3d_llltv_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_llltv_mfd@@YGXH@Z PROC				; draw_3d_llltv_mfd, COMDAT

; 3694 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3695 : 	if (!hokum_damage.llltv)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0000e	c1 e8 03	 shr	 eax, 3
  00011	83 e0 01	 and	 eax, 1
  00014	75 22		 jne	 SHORT $LN1@draw_3d_ll

; 3696 : 	{
; 3697 : 		if (full_screen)

  00016	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  0001a	74 10		 je	 SHORT $LN3@draw_3d_ll

; 3698 : 		{
; 3699 : 			draw_full_screen_3d_eo_display (&hokum_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV, DISPLAY_3D_TINT_ORANGE);

  0001c	6a 05		 push	 5
  0001e	6a 06		 push	 6
  00020	68 00 00 00 00	 push	 OFFSET ?hokum_llltv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_llltv
  00025	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 3700 : 		}
; 3701 : 		else

  0002a	eb 0c		 jmp	 SHORT $LN1@draw_3d_ll
$LN3@draw_3d_ll:

; 3702 : 		{
; 3703 : 			draw_3d_eo_display (&hokum_llltv, TARGET_ACQUISITION_SYSTEM_LLLTV);

  0002c	6a 06		 push	 6
  0002e	68 00 00 00 00	 push	 OFFSET ?hokum_llltv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_llltv
  00033	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_ll:

; 3704 : 		}
; 3705 : 	}
; 3706 : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?draw_3d_llltv_mfd@@YGXH@Z ENDP				; draw_3d_llltv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_flir_mfd@@YGXH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 3679 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3680 : 	draw_2d_eo_display (&hokum_flir, TARGET_ACQUISITION_SYSTEM_FLIR, hokum_damage.flir, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00013	d1 e9		 shr	 ecx, 1
  00015	83 e1 01	 and	 ecx, 1
  00018	51		 push	 ecx
  00019	6a 03		 push	 3
  0001b	68 00 00 00 00	 push	 OFFSET ?hokum_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_flir
  00020	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 3681 : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?draw_2d_flir_mfd@@YGXH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_flir_mfd@@YGXH@Z PROC				; draw_3d_flir_mfd, COMDAT

; 3660 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3661 : 	if (!hokum_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0000e	d1 e8		 shr	 eax, 1
  00010	83 e0 01	 and	 eax, 1
  00013	75 22		 jne	 SHORT $LN1@draw_3d_fl

; 3662 : 	{
; 3663 : 		if (full_screen)

  00015	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  00019	74 10		 je	 SHORT $LN3@draw_3d_fl

; 3664 : 		{
; 3665 : 			draw_full_screen_3d_eo_display (&hokum_flir, TARGET_ACQUISITION_SYSTEM_FLIR, DISPLAY_3D_TINT_ORANGE);

  0001b	6a 05		 push	 5
  0001d	6a 03		 push	 3
  0001f	68 00 00 00 00	 push	 OFFSET ?hokum_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_flir
  00024	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 3666 : 		}
; 3667 : 		else

  00029	eb 0c		 jmp	 SHORT $LN1@draw_3d_fl
$LN3@draw_3d_fl:

; 3668 : 		{
; 3669 : 			draw_3d_eo_display (&hokum_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  0002b	6a 03		 push	 3
  0002d	68 00 00 00 00	 push	 OFFSET ?hokum_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_flir
  00032	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 3670 : 		}
; 3671 : 	}
; 3672 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXH@Z ENDP				; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z
_TEXT	SEGMENT
tv1074 = -400						; size = 8
tv336 = -400						; size = 4
tv317 = -400						; size = 4
tv135 = -400						; size = 4
tv83 = -400						; size = 4
tv329 = -396						; size = 4
tv309 = -396						; size = 4
tv157 = -396						; size = 4
tv143 = -396						; size = 4
tv95 = -396						; size = 4
tv75 = -396						; size = 4
_level$1 = -328						; size = 4
_visibility$ = -324					; size = 4
_tmp$ = -320						; size = 48
_target_point$ = -272					; size = 12
_source_position$ = -260				; size = 4
_target$ = -256						; size = 4
_source$ = -252						; size = 4
_y$ = -248						; size = 4
_x$ = -244						; size = 4
_j$ = -240						; size = 4
_i$ = -236						; size = 4
_y_adjust$ = -232					; size = 4
_target_range$ = -228					; size = 4
_marker_position$ = -224				; size = 4
_heading$ = -220					; size = 4
_width$ = -216						; size = 4
_has_range$ = -212					; size = 4
_heading_readout$ = -208				; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z PROC ; draw_2d_eo_display, COMDAT

; 3051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3052 : 	const char
; 3053 : 		*s;
; 3054 : 	char
; 3055 : 		buffer[200];
; 3056 : 
; 3057 : 	int
; 3058 : 		heading_readout,
; 3059 : 		has_range;
; 3060 : 
; 3061 : 	float
; 3062 : 		width,
; 3063 : 		heading,
; 3064 : 		marker_position,
; 3065 : 		target_range = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _target_range$[ebp], xmm0

; 3066 : 		y_adjust,
; 3067 : 		i,
; 3068 : 		j,
; 3069 : 		x,
; 3070 : 		y;
; 3071 : 
; 3072 : 	entity
; 3073 : 		*source,
; 3074 : 		*target;
; 3075 : 
; 3076 : 	vec3d
; 3077 : 		*source_position,
; 3078 : 		target_point;
; 3079 : 
; 3080 : 	viewpoint
; 3081 : 		tmp;
; 3082 : 
; 3083 : 	object_3d_visibility
; 3084 : 		visibility;
; 3085 : 
; 3086 : 	ASSERT (eo);

  00017	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0001b	75 18		 jne	 SHORT $LN4@draw_2d_eo
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00022	83 c0 23	 add	 eax, 35			; 00000023H
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00030	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_2d_eo:

; 3087 : 
; 3088 : 	source = get_gunship_entity ();

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0003a	89 85 04 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 3089 : 
; 3090 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00040	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00047	74 10		 je	 SHORT $LN63@draw_2d_eo
  00049	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00057	eb 24		 jmp	 SHORT $LN64@draw_2d_eo
$LN63@draw_2d_eo:
  00059	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0005f	83 c2 27	 add	 edx, 39			; 00000027H
  00062	52		 push	 edx
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00073	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN64@draw_2d_eo:
  0007d	b9 01 00 00 00	 mov	 ecx, 1
  00082	85 c9		 test	 ecx, ecx
  00084	74 0c		 je	 SHORT $LN65@draw_2d_eo
  00086	c7 85 70 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv83[ebp], 8
  00090	eb 24		 jmp	 SHORT $LN66@draw_2d_eo
$LN65@draw_2d_eo:
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00098	83 c2 27	 add	 edx, 39			; 00000027H
  0009b	52		 push	 edx
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ac	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN66@draw_2d_eo:
  000b6	6a 08		 push	 8
  000b8	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000be	51		 push	 ecx
  000bf	6b 95 74 fe ff
	ff 60		 imul	 edx, DWORD PTR tv75[ebp], 96
  000c6	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000cc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d3	ff d1		 call	 ecx
  000d5	89 85 fc fe ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 3091 : 
; 3092 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000db	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000e2	74 10		 je	 SHORT $LN67@draw_2d_eo
  000e4	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv95[ebp], ecx
  000f2	eb 24		 jmp	 SHORT $LN68@draw_2d_eo
$LN67@draw_2d_eo:
  000f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  000fa	83 c2 29	 add	 edx, 41			; 00000029H
  000fd	52		 push	 edx
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010e	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv95[ebp], 0
$LN68@draw_2d_eo:
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	85 c9		 test	 ecx, ecx
  0011f	74 0c		 je	 SHORT $LN69@draw_2d_eo
  00121	c7 85 70 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv135[ebp], 38 ; 00000026H
  0012b	eb 24		 jmp	 SHORT $LN70@draw_2d_eo
$LN69@draw_2d_eo:
  0012d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00133	83 c2 29	 add	 edx, 41			; 00000029H
  00136	52		 push	 edx
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00147	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN70@draw_2d_eo:
  00151	6a 26		 push	 38			; 00000026H
  00153	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00159	51		 push	 ecx
  0015a	69 95 74 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv95[ebp], 180
  00164	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  0016a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00171	ff d1		 call	 ecx
  00173	89 85 00 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 3093 : 
; 3094 : 	has_range = get_range_finder() != RANGEFINDER_TRIANGULATION;

  00179	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  0017e	83 f8 02	 cmp	 eax, 2
  00181	74 0c		 je	 SHORT $LN71@draw_2d_eo
  00183	c7 85 74 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv143[ebp], 1
  0018d	eb 0a		 jmp	 SHORT $LN72@draw_2d_eo
$LN71@draw_2d_eo:
  0018f	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv143[ebp], 0
$LN72@draw_2d_eo:
  00199	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv143[ebp]
  0019f	89 85 2c ff ff
	ff		 mov	 DWORD PTR _has_range$[ebp], eax

; 3095 : 
; 3096 : 	if (has_range)

  001a5	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _has_range$[ebp], 0
  001ac	74 0b		 je	 SHORT $LN5@draw_2d_eo

; 3097 : 		target_range = get_range_to_target();

  001ae	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  001b3	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]
$LN5@draw_2d_eo:

; 3098 : /*
; 3099 : 	if (has_range && eo_is_tracking_point())
; 3100 : 	{
; 3101 : 		vec3d* tracking_point = get_eo_tracking_point();
; 3102 : 
; 3103 : 	}
; 3104 : 	else if (target && has_range)
; 3105 : 	{
; 3106 : 		vec3d* target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);
; 3107 : 
; 3108 : 		target_range = get_3d_range (source_position, target_position);
; 3109 : 	}
; 3110 : */
; 3111 : 	////////////////////////////////////////
; 3112 : 	//
; 3113 : 	// text
; 3114 : 	//
; 3115 : 	////////////////////////////////////////
; 3116 : 
; 3117 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  001b9	b8 04 00 00 00	 mov	 eax, 4
  001be	6b c8 0d	 imul	 ecx, eax, 13
  001c1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3118 : 
; 3119 : 	if (draw_large_mfd)

  001cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001d4	74 09		 je	 SHORT $LN6@draw_2d_eo

; 3120 : 	{
; 3121 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  001d6	6a 05		 push	 5
  001d8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3122 : 	}
; 3123 : 	else

  001dd	eb 07		 jmp	 SHORT $LN7@draw_2d_eo
$LN6@draw_2d_eo:

; 3124 : 	{
; 3125 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  001df	6a 01		 push	 1
  001e1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN7@draw_2d_eo:

; 3126 : 	}
; 3127 : 
; 3128 : 	//
; 3129 : 	// sensor type
; 3130 : 	//
; 3131 : 
; 3132 : 	if (draw_large_mfd)

  001e6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001ed	74 12		 je	 SHORT $LN8@draw_2d_eo

; 3133 : 	{
; 3134 : 		y_adjust = 5.0;

  001ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  001f7	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3135 : 	}
; 3136 : 	else

  001ff	eb 10		 jmp	 SHORT $LN9@draw_2d_eo
$LN8@draw_2d_eo:

; 3137 : 	{
; 3138 : 		y_adjust = 2.0;

  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00209	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN9@draw_2d_eo:

; 3139 : 	}
; 3140 : 
; 3141 : 	set_2d_mono_font_position (-1.0, 1.0);

  00211	51		 push	 ecx
  00212	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0021a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021f	51		 push	 ecx
  00220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3142 : 
; 3143 : 	set_mono_font_rel_position (1.0, y_adjust);

  00232	51		 push	 ecx
  00233	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	51		 push	 ecx
  00241	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00249	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3144 : 
; 3145 : 	switch (system)

  00253	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00256	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  0025c	83 bd 74 fe ff
	ff 03		 cmp	 DWORD PTR tv157[ebp], 3
  00263	74 14		 je	 SHORT $LN10@draw_2d_eo
  00265	83 bd 74 fe ff
	ff 06		 cmp	 DWORD PTR tv157[ebp], 6
  0026c	74 17		 je	 SHORT $LN11@draw_2d_eo
  0026e	83 bd 74 fe ff
	ff 07		 cmp	 DWORD PTR tv157[ebp], 7
  00275	74 1a		 je	 SHORT $LN12@draw_2d_eo
  00277	eb 24		 jmp	 SHORT $LN13@draw_2d_eo
$LN10@draw_2d_eo:

; 3146 : 	{
; 3147 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3148 : 		{
; 3149 : 			print_mono_font_string ("FLIR");

  00279	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  0027e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3150 : 
; 3151 : 			break;

  00283	eb 22		 jmp	 SHORT $LN2@draw_2d_eo
$LN11@draw_2d_eo:

; 3152 : 		}
; 3153 : 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 3154 : 		{
; 3155 : 			print_mono_font_string ("LLLTV");

  00285	68 00 00 00 00	 push	 OFFSET ??_C@_05PNDCLKDI@LLLTV@
  0028a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3156 : 
; 3157 : 			break;

  0028f	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN12@draw_2d_eo:

; 3158 : 		}
; 3159 : 		case TARGET_ACQUISITION_SYSTEM_PERISCOPE:
; 3160 : 		{
; 3161 : 			print_mono_font_string ("SCOPE");

  00291	68 00 00 00 00	 push	 OFFSET ??_C@_05PJLBNLAH@SCOPE@
  00296	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3162 : 
; 3163 : 			break;

  0029b	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 3164 : 		}
; 3165 : 		default:
; 3166 : 		{
; 3167 : 			print_mono_font_string ("XXX");

  0029d	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  002a2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 3168 : 
; 3169 : 			break;
; 3170 : 		}
; 3171 : 	}
; 3172 : 
; 3173 : 	//
; 3174 : 	// damaged
; 3175 : 	//
; 3176 : 
; 3177 : 	if (damaged)

  002a7	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  002ab	0f 84 9d 00 00
	00		 je	 $LN14@draw_2d_eo

; 3178 : 	{
; 3179 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  002b1	b8 04 00 00 00	 mov	 eax, 4
  002b6	6b c8 00	 imul	 ecx, eax, 0
  002b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002bf	52		 push	 edx
  002c0	51		 push	 ecx
  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	51		 push	 ecx
  002cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dc	51		 push	 ecx
  002dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ea	51		 push	 ecx
  002eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3180 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  002fd	b8 04 00 00 00	 mov	 eax, 4
  00302	6b c8 00	 imul	 ecx, eax, 0
  00305	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0030b	52		 push	 edx
  0030c	51		 push	 ecx
  0030d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00315	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031a	51		 push	 ecx
  0031b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00323	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00328	51		 push	 ecx
  00329	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00331	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00336	51		 push	 ecx
  00337	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0033f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00344	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3181 : 
; 3182 : 		return;

  00349	e9 94 1b 00 00	 jmp	 $LN1@draw_2d_eo
$LN14@draw_2d_eo:

; 3183 : 	}
; 3184 : 
; 3185 : 	//
; 3186 : 	// heading
; 3187 : 	//
; 3188 : 
; 3189 : 	heading = get_heading_from_attitude_matrix (eo_vp.attitude);

  0034e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00353	d1 e0		 shl	 eax, 1
  00355	b9 04 00 00 00	 mov	 ecx, 4
  0035a	d1 e1		 shl	 ecx, 1
  0035c	51		 push	 ecx
  0035d	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00370	d1 e2		 shl	 edx, 1
  00372	b8 04 00 00 00	 mov	 eax, 4
  00377	6b c8 00	 imul	 ecx, eax, 0
  0037a	51		 push	 ecx
  0037b	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  00384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00389	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0038e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _heading$[ebp]

; 3190 : 
; 3191 : 	if (heading < 0.0)

  00394	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  0039c	0f 57 c9	 xorps	 xmm1, xmm1
  0039f	66 0f 2f c8	 comisd	 xmm1, xmm0
  003a3	76 1c		 jbe	 SHORT $LN15@draw_2d_eo

; 3192 : 	{
; 3193 : 		heading += rad (360.0);

  003a5	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  003ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  003b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _heading$[ebp], xmm0
$LN15@draw_2d_eo:

; 3194 : 	}
; 3195 : 
; 3196 : 	heading_readout = (int) deg (heading);

  003c1	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _heading$[ebp]
  003c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  003d1	f3 0f 2c c0	 cvttss2si eax, xmm0
  003d5	89 85 30 ff ff
	ff		 mov	 DWORD PTR _heading_readout$[ebp], eax

; 3197 : 
; 3198 : 	if (heading_readout == 0)

  003db	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR _heading_readout$[ebp], 0
  003e2	75 0a		 jne	 SHORT $LN16@draw_2d_eo

; 3199 : 	{
; 3200 : 		heading_readout = 360;

  003e4	c7 85 30 ff ff
	ff 68 01 00 00	 mov	 DWORD PTR _heading_readout$[ebp], 360 ; 00000168H
$LN16@draw_2d_eo:

; 3201 : 	}
; 3202 : 
; 3203 : 	sprintf (buffer, "%d", heading_readout);

  003ee	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _heading_readout$[ebp]
  003f4	50		 push	 eax
  003f5	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003fa	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00400	51		 push	 ecx
  00401	e8 00 00 00 00	 call	 _sprintf
  00406	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3204 : 
; 3205 : 	width = get_mono_font_string_width (buffer);

  00409	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00415	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3206 : 
; 3207 : 	set_2d_mono_font_position (0.0, 1.0);

  0041b	51		 push	 ecx
  0041c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00424	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00429	51		 push	 ecx
  0042a	0f 57 c0	 xorps	 xmm0, xmm0
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3208 : 
; 3209 : 	set_mono_font_rel_position ((-width * 0.5) + 1.0, y_adjust);

  00437	51		 push	 ecx
  00438	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00445	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0044d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00454	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00458	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00460	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00468	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0046c	51		 push	 ecx
  0046d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00472	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3210 : 
; 3211 : 	print_mono_font_string (buffer);

  00477	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3212 : 
; 3213 : 	//
; 3214 : 	// low light
; 3215 : 	//
; 3216 : 
; 3217 : 	if (eo_low_light)

  00483	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  0048a	0f 84 8c 00 00
	00		 je	 $LN21@draw_2d_eo

; 3218 : 	{
; 3219 : 		if (draw_large_mfd)

  00490	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00497	74 12		 je	 SHORT $LN18@draw_2d_eo

; 3220 : 		{
; 3221 : 			y_adjust = 18.0;

  00499	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  004a1	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3222 : 		}
; 3223 : 		else

  004a9	eb 10		 jmp	 SHORT $LN19@draw_2d_eo
$LN18@draw_2d_eo:

; 3224 : 		{
; 3225 : 			y_adjust = 9.0;

  004ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  004b3	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN19@draw_2d_eo:

; 3226 : 		}
; 3227 : 
; 3228 : 		set_2d_mono_font_position (-1.0, 1.0);

  004bb	51		 push	 ecx
  004bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c9	51		 push	 ecx
  004ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3229 : 
; 3230 : 		set_mono_font_rel_position (1.0, y_adjust);

  004dc	51		 push	 ecx
  004dd	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  004e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ea	51		 push	 ecx
  004eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3231 : 
; 3232 : 		if (draw_large_mfd)

  004fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00504	74 0c		 je	 SHORT $LN20@draw_2d_eo

; 3233 : 		{
; 3234 : 			print_mono_font_string ("LO LIGHT");

  00506	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  0050b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3235 : 		}
; 3236 : 		else

  00510	eb 0a		 jmp	 SHORT $LN21@draw_2d_eo
$LN20@draw_2d_eo:

; 3237 : 		{
; 3238 : 			print_mono_font_string ("LO");

  00512	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  00517	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN21@draw_2d_eo:

; 3239 : 		}
; 3240 : 	}
; 3241 : 
; 3242 : 	//
; 3243 : 	// field of view
; 3244 : 	//
; 3245 : 
; 3246 : #ifdef OLD_EO
; 3247 : 	switch (eo->field_of_view)
; 3248 : 	{
; 3249 : 		case EO_FOV_NARROW:
; 3250 : 		{
; 3251 : 			if (draw_large_mfd)
; 3252 : 			{
; 3253 : 				s = "NARROW";
; 3254 : 			}
; 3255 : 			else
; 3256 : 			{
; 3257 : 				s = "NAR";
; 3258 : 			}
; 3259 : 
; 3260 : 			break;
; 3261 : 		}
; 3262 : 		case EO_FOV_MEDIUM:
; 3263 : 		{
; 3264 : 			if (draw_large_mfd)
; 3265 : 			{
; 3266 : 				s = "MEDIUM";
; 3267 : 			}
; 3268 : 			else
; 3269 : 			{
; 3270 : 				s = "MED";
; 3271 : 			}
; 3272 : 
; 3273 : 			break;
; 3274 : 		}
; 3275 : 		case EO_FOV_WIDE:
; 3276 : 		{
; 3277 : 			s = "WIDE";
; 3278 : 
; 3279 : 			break;
; 3280 : 		}
; 3281 : 		default:
; 3282 : 		{
; 3283 : 			s = "XXX";
; 3284 : 
; 3285 : 			break;
; 3286 : 		}
; 3287 : 	}
; 3288 : #else
; 3289 : 	{
; 3290 : 		float level = 1.0 / convert_linear_view_value (eo);

  0051c	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0051f	50		 push	 eax
  00520	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00525	dd 9d 70 fe ff
	ff		 fstp	 QWORD PTR tv1074[ebp]
  0052b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00533	f2 0f 5e 85 70
	fe ff ff	 divsd	 xmm0, QWORD PTR tv1074[ebp]
  0053b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0053f	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _level$1[ebp], xmm0

; 3291 : 
; 3292 : 		if (level < 10)

  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0054f	0f 2f 85 b8 fe
	ff ff		 comiss	 xmm0, DWORD PTR _level$1[ebp]
  00556	76 26		 jbe	 SHORT $LN22@draw_2d_eo

; 3293 : 		{
; 3294 : 			sprintf (buffer, "%.1f", level);

  00558	f3 0f 5a 85 b8
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _level$1[ebp]
  00560	83 ec 08	 sub	 esp, 8
  00563	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00568	68 00 00 00 00	 push	 OFFSET ??_C@_04GGBPDDBN@?$CF?41f@
  0056d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00573	50		 push	 eax
  00574	e8 00 00 00 00	 call	 _sprintf
  00579	83 c4 10	 add	 esp, 16			; 00000010H

; 3295 : 		}
; 3296 : 		else

  0057c	eb 1d		 jmp	 SHORT $LN23@draw_2d_eo
$LN22@draw_2d_eo:

; 3297 : 		{
; 3298 : 			sprintf (buffer, "%d", (int)level);

  0057e	f3 0f 2c 85 b8
	fe ff ff	 cvttss2si eax, DWORD PTR _level$1[ebp]
  00586	50		 push	 eax
  00587	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0058c	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00592	51		 push	 ecx
  00593	e8 00 00 00 00	 call	 _sprintf
  00598	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@draw_2d_eo:

; 3299 : 		}
; 3300 : 
; 3301 : 		s = buffer;

  0059b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  005a1	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3302 : 	}
; 3303 : #endif
; 3304 : 
; 3305 : 	width = get_mono_font_string_width (s);

  005a4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005a7	50		 push	 eax
  005a8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  005ad	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3306 : 
; 3307 : 	if (draw_large_mfd)

  005b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  005ba	74 2e		 je	 SHORT $LN24@draw_2d_eo

; 3308 : 	{
; 3309 : 		width += 2.0;

  005bc	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  005c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  005cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d0	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3310 : 
; 3311 : 		y_adjust = 5.0;

  005d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  005e0	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3312 : 	}
; 3313 : 	else

  005e8	eb 2c		 jmp	 SHORT $LN25@draw_2d_eo
$LN24@draw_2d_eo:

; 3314 : 	{
; 3315 : 		width += 1.0;

  005ea	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  005f2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005fe	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3316 : 
; 3317 : 		y_adjust = 2.0;

  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0060e	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_2d_eo:

; 3318 : 	}
; 3319 : 
; 3320 : 	set_2d_mono_font_position (1.0, 1.0);

  00616	51		 push	 ecx
  00617	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0061f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00624	51		 push	 ecx
  00625	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0062d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00632	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3321 : 
; 3322 : 	set_mono_font_rel_position (-width, y_adjust);

  00637	51		 push	 ecx
  00638	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00640	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00645	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0064d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00654	51		 push	 ecx
  00655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3323 : 
; 3324 : 	print_mono_font_string (s);

  0065f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00662	50		 push	 eax
  00663	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3325 : 
; 3326 : 	//
; 3327 : 	// target name
; 3328 : 	//
; 3329 : 
; 3330 : 	if (draw_large_mfd)

  00668	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0066f	74 12		 je	 SHORT $LN26@draw_2d_eo

; 3331 : 	{
; 3332 : 		y_adjust = -12.0;

  00671	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00679	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3333 : 	}
; 3334 : 	else

  00681	eb 10		 jmp	 SHORT $LN27@draw_2d_eo
$LN26@draw_2d_eo:

; 3335 : 	{
; 3336 : 		y_adjust = -5.0;

  00683	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0068b	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_2d_eo:

; 3337 : 	}
; 3338 : 
; 3339 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00693	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00698	50		 push	 eax
  00699	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0069f	51		 push	 ecx
  006a0	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  006a6	52		 push	 edx
  006a7	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  006ac	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3340 : 
; 3341 : 	if (s)

  006af	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  006b3	74 4b		 je	 SHORT $LN28@draw_2d_eo

; 3342 : 	{
; 3343 : 		set_2d_mono_font_position (-1.0, -1.0);

  006b5	51		 push	 ecx
  006b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c3	51		 push	 ecx
  006c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3344 : 
; 3345 : 		set_mono_font_rel_position (1.0, y_adjust);

  006d6	51		 push	 ecx
  006d7	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e4	51		 push	 ecx
  006e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3346 : 
; 3347 : 		print_mono_font_string (s);

  006f7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006fa	50		 push	 eax
  006fb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN28@draw_2d_eo:

; 3348 : 	}
; 3349 : 
; 3350 : 	//
; 3351 : 	// target range
; 3352 : 	//
; 3353 : 
; 3354 : 	if (target_range > 0.0)

  00700	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00708	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00710	0f 86 18 01 00
	00		 jbe	 $LN29@draw_2d_eo

; 3355 : 	{
; 3356 : 		if ((target_range < 1000.0) && (!hokum_damage.laser_designator))

  00716	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0071e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00726	66 0f 2f c8	 comisd	 xmm1, xmm0
  0072a	76 2c		 jbe	 SHORT $LN30@draw_2d_eo
  0072c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00731	c1 e8 06	 shr	 eax, 6
  00734	83 e0 01	 and	 eax, 1
  00737	75 1f		 jne	 SHORT $LN30@draw_2d_eo

; 3357 : 		{
; 3358 : 			sprintf (buffer, "%dm", (int) target_range);

  00739	f3 0f 2c 85 1c
	ff ff ff	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  00741	50		 push	 eax
  00742	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  00747	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0074d	51		 push	 ecx
  0074e	e8 00 00 00 00	 call	 _sprintf
  00753	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3359 : 		}
; 3360 : 		else

  00756	eb 2c		 jmp	 SHORT $LN31@draw_2d_eo
$LN30@draw_2d_eo:

; 3361 : 		{
; 3362 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00758	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00760	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00768	83 ec 08	 sub	 esp, 8
  0076b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00770	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  00775	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0077b	50		 push	 eax
  0077c	e8 00 00 00 00	 call	 _sprintf
  00781	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@draw_2d_eo:

; 3363 : 		}
; 3364 : 
; 3365 : 		width = get_mono_font_string_width (buffer);

  00784	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0078a	50		 push	 eax
  0078b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00790	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3366 : 
; 3367 : 		set_2d_mono_font_position (1.0, -1.0);

  00796	51		 push	 ecx
  00797	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0079f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a4	51		 push	 ecx
  007a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3368 : 
; 3369 : 		if (draw_large_mfd)

  007b7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  007be	74 1e		 je	 SHORT $LN32@draw_2d_eo

; 3370 : 		{
; 3371 : 			width += 2.0;

  007c0	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  007c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  007d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d4	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3372 : 		}
; 3373 : 		else

  007dc	eb 1c		 jmp	 SHORT $LN33@draw_2d_eo
$LN32@draw_2d_eo:

; 3374 : 		{
; 3375 : 			width += 1.0;

  007de	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  007e6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  007ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007f2	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0
$LN33@draw_2d_eo:

; 3376 : 		}
; 3377 : 
; 3378 : 		set_mono_font_rel_position (-width, y_adjust);

  007fa	51		 push	 ecx
  007fb	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00810	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00817	51		 push	 ecx
  00818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3379 : 
; 3380 : 		print_mono_font_string (buffer);

  00822	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00828	50		 push	 eax
  00829	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN29@draw_2d_eo:

; 3381 : 	}
; 3382 : 
; 3383 : 	//
; 3384 : 	// locked
; 3385 : 	//
; 3386 : 
; 3387 : 	if (eo_is_locked())

  0082e	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  00833	85 c0		 test	 eax, eax
  00835	74 77		 je	 SHORT $LN34@draw_2d_eo

; 3388 : 	{
; 3389 : 		if (draw_large_mfd)

  00837	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0083e	74 12		 je	 SHORT $LN35@draw_2d_eo

; 3390 : 		{
; 3391 : 			y_adjust = -25.0;

  00840	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00848	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3392 : 		}
; 3393 : 		else

  00850	eb 10		 jmp	 SHORT $LN36@draw_2d_eo
$LN35@draw_2d_eo:

; 3394 : 		{
; 3395 : 			y_adjust = -12.0;

  00852	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0085a	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN36@draw_2d_eo:

; 3396 : 		}
; 3397 : 
; 3398 : 		set_2d_mono_font_position (-1.0, -1.0);

  00862	51		 push	 ecx
  00863	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0086b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00870	51		 push	 ecx
  00871	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00879	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3399 : 
; 3400 : 		set_mono_font_rel_position (1.0, y_adjust);

  00883	51		 push	 ecx
  00884	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0088c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00891	51		 push	 ecx
  00892	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0089a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3401 : 
; 3402 : 		print_mono_font_string ("LOCKED");

  008a4	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  008a9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN34@draw_2d_eo:

; 3403 : 	}
; 3404 : 
; 3405 : // Jabberwock 031107 Designated targets
; 3406 : 
; 3407 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  008ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  008b5	74 0f		 je	 SHORT $LN73@draw_2d_eo
  008b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  008bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  008be	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv309[ebp], ecx
  008c4	eb 27		 jmp	 SHORT $LN74@draw_2d_eo
$LN73@draw_2d_eo:
  008c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  008cc	81 c2 64 01 00
	00		 add	 edx, 356		; 00000164H
  008d2	52		 push	 edx
  008d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008dd	50		 push	 eax
  008de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008e3	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv309[ebp], 0
$LN74@draw_2d_eo:
  008ed	b9 01 00 00 00	 mov	 ecx, 1
  008f2	85 c9		 test	 ecx, ecx
  008f4	74 0c		 je	 SHORT $LN75@draw_2d_eo
  008f6	c7 85 70 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv317[ebp], 38 ; 00000026H
  00900	eb 27		 jmp	 SHORT $LN76@draw_2d_eo
$LN75@draw_2d_eo:
  00902	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00908	81 c2 64 01 00
	00		 add	 edx, 356		; 00000164H
  0090e	52		 push	 edx
  0090f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00914	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00919	50		 push	 eax
  0091a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0091f	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv317[ebp], 0
$LN76@draw_2d_eo:
  00929	6a 26		 push	 38			; 00000026H
  0092b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00931	51		 push	 ecx
  00932	69 95 74 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv309[ebp], 180
  0093c	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv317[ebp]
  00942	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00949	ff d1		 call	 ecx
  0094b	89 85 00 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 3408 : 
; 3409 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00951	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00958	0f 84 36 01 00
	00		 je	 $LN37@draw_2d_eo
  0095e	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00965	74 10		 je	 SHORT $LN77@draw_2d_eo
  00967	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  0096d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0096f	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv329[ebp], ecx
  00975	eb 20		 jmp	 SHORT $LN78@draw_2d_eo
$LN77@draw_2d_eo:
  00977	68 51 0d 00 00	 push	 3409			; 00000d51H
  0097c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00981	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00987	52		 push	 edx
  00988	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0098d	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], 0
$LN78@draw_2d_eo:
  00997	b8 01 00 00 00	 mov	 eax, 1
  0099c	85 c0		 test	 eax, eax
  0099e	74 0c		 je	 SHORT $LN79@draw_2d_eo
  009a0	c7 85 70 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv336[ebp], 10 ; 0000000aH
  009aa	eb 20		 jmp	 SHORT $LN80@draw_2d_eo
$LN79@draw_2d_eo:
  009ac	68 51 0d 00 00	 push	 3409			; 00000d51H
  009b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  009bc	51		 push	 ecx
  009bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009c2	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv336[ebp], 0
$LN80@draw_2d_eo:
  009cc	6a 0a		 push	 10			; 0000000aH
  009ce	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  009d4	52		 push	 edx
  009d5	69 85 74 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv329[ebp], 180
  009df	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv336[ebp]
  009e5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  009ec	ff d2		 call	 edx
  009ee	85 c0		 test	 eax, eax
  009f0	0f 84 9e 00 00
	00		 je	 $LN37@draw_2d_eo

; 3410 : 	{
; 3411 : 		if (draw_large_mfd)

  009f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  009fd	74 12		 je	 SHORT $LN38@draw_2d_eo

; 3412 : 		{
; 3413 : 			y_adjust = -25.0;

  009ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00a07	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3414 : 		}
; 3415 : 		else

  00a0f	eb 10		 jmp	 SHORT $LN39@draw_2d_eo
$LN38@draw_2d_eo:

; 3416 : 		{
; 3417 : 			y_adjust = -12.0;

  00a11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00a19	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN39@draw_2d_eo:

; 3418 : 		}
; 3419 : 
; 3420 : 		width = get_mono_font_string_width ("MARKED");

  00a21	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00a26	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a2b	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3421 : 
; 3422 : 		set_2d_mono_font_position (1.0, -1.0);

  00a31	51		 push	 ecx
  00a32	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3f	51		 push	 ecx
  00a40	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3423 : 
; 3424 : 		set_mono_font_rel_position (-width - 1.0, y_adjust);

  00a52	51		 push	 ecx
  00a53	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a60	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00a68	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00a6f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a73	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a7b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a85	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3425 : 
; 3426 : 		print_mono_font_string ("MARKED");

  00a8a	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00a8f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN37@draw_2d_eo:

; 3427 : 	}
; 3428 : // Jabberwock 031107 ends
; 3429 : 
; 3430 : // added ground stabi by GCsDriver 08-12-2007
; 3431 : 	//
; 3432 : 	// 030418 loke
; 3433 : 	// draw an indication if ground stablisation is enabled
; 3434 : 	//
; 3435 : 
; 3436 : 	if (eo_ground_stabilised)

  00a94	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  00a9b	0f 84 8e 00 00
	00		 je	 $LN40@draw_2d_eo

; 3437 : 	{
; 3438 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  00aa1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00aa8	74 12		 je	 SHORT $LN41@draw_2d_eo

; 3439 : 		{
; 3440 : 			y_adjust = -38.0;

  00aaa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  00ab2	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3441 : 		}
; 3442 : 		else

  00aba	eb 10		 jmp	 SHORT $LN42@draw_2d_eo
$LN41@draw_2d_eo:

; 3443 : 		{
; 3444 : 			y_adjust = -19.0;

  00abc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  00ac4	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN42@draw_2d_eo:

; 3445 : 		}
; 3446 : 
; 3447 : 		width = get_mono_font_string_width ("S");

  00acc	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  00ad1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ad6	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3448 : 
; 3449 : 		set_2d_mono_font_position (1.0, -1.0);

  00adc	51		 push	 ecx
  00add	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aea	51		 push	 ecx
  00aeb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00af3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3450 : 
; 3451 : 		set_mono_font_rel_position (-width, y_adjust);

  00afd	51		 push	 ecx
  00afe	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00b13	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b1a	51		 push	 ecx
  00b1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b20	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3452 : 
; 3453 : 		print_mono_font_string ("S");

  00b25	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  00b2a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN40@draw_2d_eo:

; 3454 : 	}
; 3455 : 	////////////////////////////////////////
; 3456 : 	//
; 3457 : 	// line graphics
; 3458 : 	//
; 3459 : 	////////////////////////////////////////
; 3460 : 
; 3461 : 	//
; 3462 : 	// datum
; 3463 : 	//
; 3464 : 
; 3465 : 	if (draw_large_mfd)

  00b2f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b36	0f 84 0d 01 00
	00		 je	 $LN43@draw_2d_eo

; 3466 : 	{
; 3467 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR_GREEN);

  00b3c	b8 04 00 00 00	 mov	 eax, 4
  00b41	6b c8 0d	 imul	 ecx, eax, 13
  00b44	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b4a	52		 push	 edx
  00b4b	51		 push	 ecx
  00b4c	0f 57 c0	 xorps	 xmm0, xmm0
  00b4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b54	51		 push	 ecx
  00b55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b62	51		 push	 ecx
  00b63	0f 57 c0	 xorps	 xmm0, xmm0
  00b66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b6b	51		 push	 ecx
  00b6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00b74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b79	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3468 : 
; 3469 : 		draw_2d_line (0.035, 0.0, 0.08, 0.0, MFD_COLOUR_GREEN);

  00b7e	b8 04 00 00 00	 mov	 eax, 4
  00b83	6b c8 0d	 imul	 ecx, eax, 13
  00b86	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b8c	52		 push	 edx
  00b8d	51		 push	 ecx
  00b8e	0f 57 c0	 xorps	 xmm0, xmm0
  00b91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b96	51		 push	 ecx
  00b97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00b9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba4	51		 push	 ecx
  00ba5	0f 57 c0	 xorps	 xmm0, xmm0
  00ba8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bad	51		 push	 ecx
  00bae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00bb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbb	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3470 : 
; 3471 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR_GREEN);

  00bc0	b8 04 00 00 00	 mov	 eax, 4
  00bc5	6b c8 0d	 imul	 ecx, eax, 13
  00bc8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bce	52		 push	 edx
  00bcf	51		 push	 ecx
  00bd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bdd	51		 push	 ecx
  00bde	0f 57 c0	 xorps	 xmm0, xmm0
  00be1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be6	51		 push	 ecx
  00be7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf4	51		 push	 ecx
  00bf5	0f 57 c0	 xorps	 xmm0, xmm0
  00bf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3472 : 
; 3473 : 		draw_2d_line (0.0, 0.035, 0.0, 0.08, MFD_COLOUR_GREEN);

  00c02	b8 04 00 00 00	 mov	 eax, 4
  00c07	6b c8 0d	 imul	 ecx, eax, 13
  00c0a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c10	52		 push	 edx
  00c11	51		 push	 ecx
  00c12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00c1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1f	51		 push	 ecx
  00c20	0f 57 c0	 xorps	 xmm0, xmm0
  00c23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c28	51		 push	 ecx
  00c29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	51		 push	 ecx
  00c37	0f 57 c0	 xorps	 xmm0, xmm0
  00c3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3474 : 	}
; 3475 : 	else

  00c44	e9 08 01 00 00	 jmp	 $LN44@draw_2d_eo
$LN43@draw_2d_eo:

; 3476 : 	{
; 3477 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR_GREEN);

  00c49	b8 04 00 00 00	 mov	 eax, 4
  00c4e	6b c8 0d	 imul	 ecx, eax, 13
  00c51	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c57	52		 push	 edx
  00c58	51		 push	 ecx
  00c59	0f 57 c0	 xorps	 xmm0, xmm0
  00c5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c61	51		 push	 ecx
  00c62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00c6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6f	51		 push	 ecx
  00c70	0f 57 c0	 xorps	 xmm0, xmm0
  00c73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c78	51		 push	 ecx
  00c79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00c81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c86	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3478 : 
; 3479 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR_GREEN);

  00c8b	b8 04 00 00 00	 mov	 eax, 4
  00c90	6b c8 0d	 imul	 ecx, eax, 13
  00c93	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c99	52		 push	 edx
  00c9a	51		 push	 ecx
  00c9b	0f 57 c0	 xorps	 xmm0, xmm0
  00c9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca3	51		 push	 ecx
  00ca4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00cac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb1	51		 push	 ecx
  00cb2	0f 57 c0	 xorps	 xmm0, xmm0
  00cb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cba	51		 push	 ecx
  00cbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00cc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3480 : 
; 3481 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR_GREEN);

  00ccd	b8 04 00 00 00	 mov	 eax, 4
  00cd2	6b c8 0d	 imul	 ecx, eax, 13
  00cd5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cdb	52		 push	 edx
  00cdc	51		 push	 ecx
  00cdd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00ce5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cea	51		 push	 ecx
  00ceb	0f 57 c0	 xorps	 xmm0, xmm0
  00cee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf3	51		 push	 ecx
  00cf4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00cfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d01	51		 push	 ecx
  00d02	0f 57 c0	 xorps	 xmm0, xmm0
  00d05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3482 : 
; 3483 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR_GREEN);

  00d0f	b8 04 00 00 00	 mov	 eax, 4
  00d14	6b c8 0d	 imul	 ecx, eax, 13
  00d17	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d1d	52		 push	 edx
  00d1e	51		 push	 ecx
  00d1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00d27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2c	51		 push	 ecx
  00d2d	0f 57 c0	 xorps	 xmm0, xmm0
  00d30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d35	51		 push	 ecx
  00d36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00d3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d43	51		 push	 ecx
  00d44	0f 57 c0	 xorps	 xmm0, xmm0
  00d47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN44@draw_2d_eo:

; 3484 : 	}
; 3485 : 
; 3486 : 	//
; 3487 : 	// azimuth
; 3488 : 	//
; 3489 : 
; 3490 : 	draw_2d_line (-0.5, 0.8, 0.5, 0.8, MFD_COLOUR_GREEN);

  00d51	b8 04 00 00 00	 mov	 eax, 4
  00d56	6b c8 0d	 imul	 ecx, eax, 13
  00d59	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d5f	52		 push	 edx
  00d60	51		 push	 ecx
  00d61	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00d69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6e	51		 push	 ecx
  00d6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7c	51		 push	 ecx
  00d7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00d85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d8a	51		 push	 ecx
  00d8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d98	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3491 : 
; 3492 : 	marker_position = (eo_azimuth / eo_max_azimuth) * 0.5;

  00d9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00da5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  00dad	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00db1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00db9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00dbd	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 3493 : 
; 3494 : 	if (draw_large_mfd)

  00dc5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00dcc	0f 84 14 01 00
	00		 je	 $LN45@draw_2d_eo

; 3495 : 	{
; 3496 : 		draw_2d_line (-0.5, 0.8 - 0.02, -0.5, 0.8 + 0.02, MFD_COLOUR_GREEN);

  00dd2	b8 04 00 00 00	 mov	 eax, 4
  00dd7	6b c8 0d	 imul	 ecx, eax, 13
  00dda	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00de0	52		 push	 edx
  00de1	51		 push	 ecx
  00de2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00dea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00def	51		 push	 ecx
  00df0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00df8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dfd	51		 push	 ecx
  00dfe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00e06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e0b	51		 push	 ecx
  00e0c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00e14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e19	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3497 : 
; 3498 : 		draw_2d_line (0.5, 0.8 - 0.02, 0.5, 0.8 + 0.02, MFD_COLOUR_GREEN);

  00e1e	b8 04 00 00 00	 mov	 eax, 4
  00e23	6b c8 0d	 imul	 ecx, eax, 13
  00e26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e2c	52		 push	 edx
  00e2d	51		 push	 ecx
  00e2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00e36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3b	51		 push	 ecx
  00e3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e49	51		 push	 ecx
  00e4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e57	51		 push	 ecx
  00e58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e65	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3499 : 
; 3500 : 		draw_2d_line (0.0, 0.8 - 0.01, 0.0, 0.8 + 0.01, MFD_COLOUR_GREEN);

  00e6a	b8 04 00 00 00	 mov	 eax, 4
  00e6f	6b c8 0d	 imul	 ecx, eax, 13
  00e72	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e78	52		 push	 edx
  00e79	51		 push	 ecx
  00e7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4f5c29
  00e82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e87	51		 push	 ecx
  00e88	0f 57 c0	 xorps	 xmm0, xmm0
  00e8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e90	51		 push	 ecx
  00e91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00e99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9e	51		 push	 ecx
  00e9f	0f 57 c0	 xorps	 xmm0, xmm0
  00ea2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3501 : 
; 3502 : 		draw_2d_mono_sprite (large_azimuth_marker, marker_position, 0.8, MFD_COLOUR_GREEN);

  00eac	b8 04 00 00 00	 mov	 eax, 4
  00eb1	6b c8 0d	 imul	 ecx, eax, 13
  00eb4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00eba	52		 push	 edx
  00ebb	51		 push	 ecx
  00ebc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00ec4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec9	51		 push	 ecx
  00eca	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  00ed2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed7	68 00 00 00 00	 push	 OFFSET ?large_azimuth_marker@@3PADA
  00edc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3503 : 	}
; 3504 : 	else

  00ee1	e9 0f 01 00 00	 jmp	 $LN46@draw_2d_eo
$LN45@draw_2d_eo:

; 3505 : 	{
; 3506 : 		draw_2d_line (-0.5, 0.8 - 0.03, -0.5, 0.8 + 0.03, MFD_COLOUR_GREEN);

  00ee6	b8 04 00 00 00	 mov	 eax, 4
  00eeb	6b c8 0d	 imul	 ecx, eax, 13
  00eee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ef4	52		 push	 edx
  00ef5	51		 push	 ecx
  00ef6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  00efe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f03	51		 push	 ecx
  00f04	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00f0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f11	51		 push	 ecx
  00f12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  00f1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1f	51		 push	 ecx
  00f20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00f28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f2d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3507 : 
; 3508 : 		draw_2d_line (0.5, 0.8 - 0.03, 0.5, 0.8 + 0.03, MFD_COLOUR_GREEN);

  00f32	b8 04 00 00 00	 mov	 eax, 4
  00f37	6b c8 0d	 imul	 ecx, eax, 13
  00f3a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f40	52		 push	 edx
  00f41	51		 push	 ecx
  00f42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  00f4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4f	51		 push	 ecx
  00f50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5d	51		 push	 ecx
  00f5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  00f66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f6b	51		 push	 ecx
  00f6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f79	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3509 : 
; 3510 : 		draw_2d_line (0.0, 0.8 - 0.02, 0.0, 0.8 + 0.02, MFD_COLOUR_GREEN);

  00f7e	b8 04 00 00 00	 mov	 eax, 4
  00f83	6b c8 0d	 imul	 ecx, eax, 13
  00f86	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f8c	52		 push	 edx
  00f8d	51		 push	 ecx
  00f8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00f96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f9b	51		 push	 ecx
  00f9c	0f 57 c0	 xorps	 xmm0, xmm0
  00f9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa4	51		 push	 ecx
  00fa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	51		 push	 ecx
  00fb3	0f 57 c0	 xorps	 xmm0, xmm0
  00fb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fbb	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3511 : 
; 3512 : 		draw_2d_mono_sprite (small_azimuth_marker, marker_position, 0.8, MFD_COLOUR_GREEN);

  00fc0	b8 04 00 00 00	 mov	 eax, 4
  00fc5	6b c8 0d	 imul	 ecx, eax, 13
  00fc8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fce	52		 push	 edx
  00fcf	51		 push	 ecx
  00fd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00fd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fdd	51		 push	 ecx
  00fde	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  00fe6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00feb	68 00 00 00 00	 push	 OFFSET ?small_azimuth_marker@@3PADA
  00ff0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN46@draw_2d_eo:

; 3513 : 	}
; 3514 : 
; 3515 : 	//
; 3516 : 	// elevation
; 3517 : 	//
; 3518 : 
; 3519 : 	draw_2d_line (-0.9, 0.4, -0.9, -0.3, MFD_COLOUR_GREEN);

  00ff5	b8 04 00 00 00	 mov	 eax, 4
  00ffa	6b c8 0d	 imul	 ecx, eax, 13
  00ffd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01003	52		 push	 edx
  01004	51		 push	 ecx
  01005	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0100d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01012	51		 push	 ecx
  01013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0101b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01020	51		 push	 ecx
  01021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  01029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102e	51		 push	 ecx
  0102f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3520 : 
; 3521 : 	if (eo_elevation < 0.0)

  01041	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_elevation@@3MA
  01049	0f 57 c9	 xorps	 xmm1, xmm1
  0104c	66 0f 2f c8	 comisd	 xmm1, xmm0
  01050	76 2a		 jbe	 SHORT $LN47@draw_2d_eo

; 3522 : 	{
; 3523 : 		marker_position = (eo_elevation / eo_min_elevation) * -0.3;

  01052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  0105a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  01062	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01066	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd3333333333333
  0106e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01072	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 3524 : 	}
; 3525 : 	else

  0107a	eb 28		 jmp	 SHORT $LN48@draw_2d_eo
$LN47@draw_2d_eo:

; 3526 : 	{
; 3527 : 		marker_position = (eo_elevation / eo_max_elevation) * 0.4;

  0107c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  01084	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_elevation@@3MA
  0108c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01090	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  01098	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0109c	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0
$LN48@draw_2d_eo:

; 3528 : 	}
; 3529 : 
; 3530 : 	if (draw_large_mfd)

  010a4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  010ab	0f 84 14 01 00
	00		 je	 $LN49@draw_2d_eo

; 3531 : 	{
; 3532 : 		draw_2d_line (-0.9 - 0.02, 0.4, -0.9 + 0.02, 0.4, MFD_COLOUR_GREEN);

  010b1	b8 04 00 00 00	 mov	 eax, 4
  010b6	6b c8 0d	 imul	 ecx, eax, 13
  010b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010bf	52		 push	 edx
  010c0	51		 push	 ecx
  010c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  010c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ce	51		 push	 ecx
  010cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  010d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010dc	51		 push	 ecx
  010dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  010e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ea	51		 push	 ecx
  010eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  010f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3533 : 
; 3534 : 		draw_2d_line (-0.9 - 0.02, -0.3, -0.9 + 0.02, -0.3, MFD_COLOUR_GREEN);

  010fd	b8 04 00 00 00	 mov	 eax, 4
  01102	6b c8 0d	 imul	 ecx, eax, 13
  01105	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0110b	52		 push	 edx
  0110c	51		 push	 ecx
  0110d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  01115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111a	51		 push	 ecx
  0111b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  01123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01128	51		 push	 ecx
  01129	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  01131	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01136	51		 push	 ecx
  01137	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  0113f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01144	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3535 : 
; 3536 : 		draw_2d_line (-0.9 - 0.01, 0.0, -0.9 + 0.01, 0.0, MFD_COLOUR_GREEN);

  01149	b8 04 00 00 00	 mov	 eax, 4
  0114e	6b c8 0d	 imul	 ecx, eax, 13
  01151	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01157	52		 push	 edx
  01158	51		 push	 ecx
  01159	0f 57 c0	 xorps	 xmm0, xmm0
  0115c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01161	51		 push	 ecx
  01162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  0116a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0116f	51		 push	 ecx
  01170	0f 57 c0	 xorps	 xmm0, xmm0
  01173	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01178	51		 push	 ecx
  01179	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf68f5c3
  01181	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01186	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3537 : 
; 3538 : 		draw_2d_mono_sprite (large_elevation_marker, -0.9, marker_position, MFD_COLOUR_GREEN);

  0118b	b8 04 00 00 00	 mov	 eax, 4
  01190	6b c8 0d	 imul	 ecx, eax, 13
  01193	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01199	52		 push	 edx
  0119a	51		 push	 ecx
  0119b	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  011a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a8	51		 push	 ecx
  011a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  011b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b6	68 00 00 00 00	 push	 OFFSET ?large_elevation_marker@@3PADA
  011bb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3539 : 	}
; 3540 : 	else

  011c0	e9 0f 01 00 00	 jmp	 $LN50@draw_2d_eo
$LN49@draw_2d_eo:

; 3541 : 	{
; 3542 : 		draw_2d_line (-0.9 - 0.03, 0.2, -0.9 + 0.03, 0.2, MFD_COLOUR_GREEN);

  011c5	b8 04 00 00 00	 mov	 eax, 4
  011ca	6b c8 0d	 imul	 ecx, eax, 13
  011cd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011d3	52		 push	 edx
  011d4	51		 push	 ecx
  011d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e2	51		 push	 ecx
  011e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  011eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f0	51		 push	 ecx
  011f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011fe	51		 push	 ecx
  011ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  01207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0120c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3543 : 
; 3544 : 		draw_2d_line (-0.9 - 0.03, -0.6, -0.9 + 0.03, -0.6, MFD_COLOUR_GREEN);

  01211	b8 04 00 00 00	 mov	 eax, 4
  01216	6b c8 0d	 imul	 ecx, eax, 13
  01219	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0121f	52		 push	 edx
  01220	51		 push	 ecx
  01221	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122e	51		 push	 ecx
  0122f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  01237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0123c	51		 push	 ecx
  0123d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124a	51		 push	 ecx
  0124b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  01253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01258	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3545 : 
; 3546 : 		draw_2d_line (-0.9 - 0.02, 0.0, -0.9 + 0.02, 0.0, MFD_COLOUR_GREEN);

  0125d	b8 04 00 00 00	 mov	 eax, 4
  01262	6b c8 0d	 imul	 ecx, eax, 13
  01265	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0126b	52		 push	 edx
  0126c	51		 push	 ecx
  0126d	0f 57 c0	 xorps	 xmm0, xmm0
  01270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01275	51		 push	 ecx
  01276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0127e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01283	51		 push	 ecx
  01284	0f 57 c0	 xorps	 xmm0, xmm0
  01287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0128c	51		 push	 ecx
  0128d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  01295	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3547 : 
; 3548 : 		draw_2d_mono_sprite (small_elevation_marker, -0.9, marker_position, MFD_COLOUR_GREEN);

  0129f	b8 04 00 00 00	 mov	 eax, 4
  012a4	6b c8 0d	 imul	 ecx, eax, 13
  012a7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012ad	52		 push	 edx
  012ae	51		 push	 ecx
  012af	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  012b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012bc	51		 push	 ecx
  012bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  012c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ca	68 00 00 00 00	 push	 OFFSET ?small_elevation_marker@@3PADA
  012cf	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN50@draw_2d_eo:

; 3549 : 	}
; 3550 : 
; 3551 : 	//
; 3552 : 	// range
; 3553 : 	//
; 3554 : 
; 3555 : 	draw_2d_line (0.9, 0.0, 0.9, -0.5, MFD_COLOUR_GREEN);

  012d4	b8 04 00 00 00	 mov	 eax, 4
  012d9	6b c8 0d	 imul	 ecx, eax, 13
  012dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012e2	52		 push	 edx
  012e3	51		 push	 ecx
  012e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  012ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f1	51		 push	 ecx
  012f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  012fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ff	51		 push	 ecx
  01300	0f 57 c0	 xorps	 xmm0, xmm0
  01303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01308	51		 push	 ecx
  01309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01316	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3556 : 
; 3557 : 	if (draw_large_mfd)

  0131b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01322	0f 84 6f 04 00
	00		 je	 $LN51@draw_2d_eo

; 3558 : 	{
; 3559 : 		draw_2d_line (0.9,  0.000, 0.9 + 0.02,  0.000, MFD_COLOUR_GREEN);

  01328	b8 04 00 00 00	 mov	 eax, 4
  0132d	6b c8 0d	 imul	 ecx, eax, 13
  01330	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01336	52		 push	 edx
  01337	51		 push	 ecx
  01338	0f 57 c0	 xorps	 xmm0, xmm0
  0133b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01340	51		 push	 ecx
  01341	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134e	51		 push	 ecx
  0134f	0f 57 c0	 xorps	 xmm0, xmm0
  01352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01357	51		 push	 ecx
  01358	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01360	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01365	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3560 : 		draw_2d_line (0.9, -0.025, 0.9 + 0.01, -0.025, MFD_COLOUR_GREEN);

  0136a	b8 04 00 00 00	 mov	 eax, 4
  0136f	6b c8 0d	 imul	 ecx, eax, 13
  01372	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01378	52		 push	 edx
  01379	51		 push	 ecx
  0137a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  01382	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01387	51		 push	 ecx
  01388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01395	51		 push	 ecx
  01396	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  0139e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a3	51		 push	 ecx
  013a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  013ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3561 : 		draw_2d_line (0.9, -0.050, 0.9 + 0.01, -0.050, MFD_COLOUR_GREEN);

  013b6	b8 04 00 00 00	 mov	 eax, 4
  013bb	6b c8 0d	 imul	 ecx, eax, 13
  013be	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013c4	52		 push	 edx
  013c5	51		 push	 ecx
  013c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  013ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d3	51		 push	 ecx
  013d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  013dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e1	51		 push	 ecx
  013e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  013ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ef	51		 push	 ecx
  013f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  013f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3562 : 		draw_2d_line (0.9, -0.075, 0.9 + 0.01, -0.075, MFD_COLOUR_GREEN);

  01402	b8 04 00 00 00	 mov	 eax, 4
  01407	6b c8 0d	 imul	 ecx, eax, 13
  0140a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01410	52		 push	 edx
  01411	51		 push	 ecx
  01412	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  0141a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141f	51		 push	 ecx
  01420	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142d	51		 push	 ecx
  0142e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  01436	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143b	51		 push	 ecx
  0143c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01449	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3563 : 
; 3564 : 		draw_2d_line (0.9, -0.100, 0.9 + 0.02, -0.100, MFD_COLOUR_GREEN);

  0144e	b8 04 00 00 00	 mov	 eax, 4
  01453	6b c8 0d	 imul	 ecx, eax, 13
  01456	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0145c	52		 push	 edx
  0145d	51		 push	 ecx
  0145e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  01466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146b	51		 push	 ecx
  0146c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01474	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01479	51		 push	 ecx
  0147a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  01482	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01487	51		 push	 ecx
  01488	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01490	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01495	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3565 : 		draw_2d_line (0.9, -0.125, 0.9 + 0.01, -0.125, MFD_COLOUR_GREEN);

  0149a	b8 04 00 00 00	 mov	 eax, 4
  0149f	6b c8 0d	 imul	 ecx, eax, 13
  014a2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014a8	52		 push	 edx
  014a9	51		 push	 ecx
  014aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  014b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b7	51		 push	 ecx
  014b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  014c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c5	51		 push	 ecx
  014c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  014ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d3	51		 push	 ecx
  014d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  014dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3566 : 		draw_2d_line (0.9, -0.150, 0.9 + 0.01, -0.150, MFD_COLOUR_GREEN);

  014e6	b8 04 00 00 00	 mov	 eax, 4
  014eb	6b c8 0d	 imul	 ecx, eax, 13
  014ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014f4	52		 push	 edx
  014f5	51		 push	 ecx
  014f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  014fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01503	51		 push	 ecx
  01504	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  0150c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01511	51		 push	 ecx
  01512	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0151a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0151f	51		 push	 ecx
  01520	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01528	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3567 : 		draw_2d_line (0.9, -0.175, 0.9 + 0.01, -0.175, MFD_COLOUR_GREEN);

  01532	b8 04 00 00 00	 mov	 eax, 4
  01537	6b c8 0d	 imul	 ecx, eax, 13
  0153a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01540	52		 push	 edx
  01541	51		 push	 ecx
  01542	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  0154a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0154f	51		 push	 ecx
  01550	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01558	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0155d	51		 push	 ecx
  0155e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  01566	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0156b	51		 push	 ecx
  0156c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01574	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01579	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3568 : 
; 3569 : 		draw_2d_line (0.9, -0.200, 0.9 + 0.02, -0.200, MFD_COLOUR_GREEN);

  0157e	b8 04 00 00 00	 mov	 eax, 4
  01583	6b c8 0d	 imul	 ecx, eax, 13
  01586	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0158c	52		 push	 edx
  0158d	51		 push	 ecx
  0158e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  01596	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0159b	51		 push	 ecx
  0159c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  015a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a9	51		 push	 ecx
  015aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  015b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b7	51		 push	 ecx
  015b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  015c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3570 : 		draw_2d_line (0.9, -0.225, 0.9 + 0.01, -0.225, MFD_COLOUR_GREEN);

  015ca	b8 04 00 00 00	 mov	 eax, 4
  015cf	6b c8 0d	 imul	 ecx, eax, 13
  015d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015d8	52		 push	 edx
  015d9	51		 push	 ecx
  015da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  015e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015e7	51		 push	 ecx
  015e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  015f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f5	51		 push	 ecx
  015f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  015fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01603	51		 push	 ecx
  01604	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0160c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01611	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3571 : 		draw_2d_line (0.9, -0.250, 0.9 + 0.01, -0.250, MFD_COLOUR_GREEN);

  01616	b8 04 00 00 00	 mov	 eax, 4
  0161b	6b c8 0d	 imul	 ecx, eax, 13
  0161e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01624	52		 push	 edx
  01625	51		 push	 ecx
  01626	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  0162e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01633	51		 push	 ecx
  01634	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  0163c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01641	51		 push	 ecx
  01642	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  0164a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0164f	51		 push	 ecx
  01650	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01658	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0165d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3572 : 		draw_2d_line (0.9, -0.275, 0.9 + 0.01, -0.275, MFD_COLOUR_GREEN);

  01662	b8 04 00 00 00	 mov	 eax, 4
  01667	6b c8 0d	 imul	 ecx, eax, 13
  0166a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01670	52		 push	 edx
  01671	51		 push	 ecx
  01672	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8ccccd
  0167a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0167f	51		 push	 ecx
  01680	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01688	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0168d	51		 push	 ecx
  0168e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8ccccd
  01696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169b	51		 push	 ecx
  0169c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  016a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3573 : 
; 3574 : 		draw_2d_line (0.9, -0.300, 0.9 + 0.02, -0.300, MFD_COLOUR_GREEN);

  016ae	b8 04 00 00 00	 mov	 eax, 4
  016b3	6b c8 0d	 imul	 ecx, eax, 13
  016b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016bc	52		 push	 edx
  016bd	51		 push	 ecx
  016be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  016c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016cb	51		 push	 ecx
  016cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  016d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016d9	51		 push	 ecx
  016da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  016e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016e7	51		 push	 ecx
  016e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  016f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3575 : 
; 3576 : 		draw_2d_line (0.9, -0.400, 0.9 + 0.02, -0.400, MFD_COLOUR_GREEN);

  016fa	b8 04 00 00 00	 mov	 eax, 4
  016ff	6b c8 0d	 imul	 ecx, eax, 13
  01702	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01708	52		 push	 edx
  01709	51		 push	 ecx
  0170a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  01712	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01717	51		 push	 ecx
  01718	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01720	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01725	51		 push	 ecx
  01726	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0172e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01733	51		 push	 ecx
  01734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0173c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01741	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3577 : 
; 3578 : 		draw_2d_line (0.9, -0.500, 0.9 + 0.02, -0.500, MFD_COLOUR_GREEN);

  01746	b8 04 00 00 00	 mov	 eax, 4
  0174b	6b c8 0d	 imul	 ecx, eax, 13
  0174e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01754	52		 push	 edx
  01755	51		 push	 ecx
  01756	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0175e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01763	51		 push	 ecx
  01764	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  0176c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01771	51		 push	 ecx
  01772	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0177a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0177f	51		 push	 ecx
  01780	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01788	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0178d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3579 : 	}
; 3580 : 	else

  01792	e9 be 01 00 00	 jmp	 $LN52@draw_2d_eo
$LN51@draw_2d_eo:

; 3581 : 	{
; 3582 : 		draw_2d_line (0.9,  0.000, 0.9 + 0.03,  0.000, MFD_COLOUR_GREEN);

  01797	b8 04 00 00 00	 mov	 eax, 4
  0179c	6b c8 0d	 imul	 ecx, eax, 13
  0179f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017a5	52		 push	 edx
  017a6	51		 push	 ecx
  017a7	0f 57 c0	 xorps	 xmm0, xmm0
  017aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017af	51		 push	 ecx
  017b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  017b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017bd	51		 push	 ecx
  017be	0f 57 c0	 xorps	 xmm0, xmm0
  017c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017c6	51		 push	 ecx
  017c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  017cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3583 : 
; 3584 : 		draw_2d_line (0.9, -0.100, 0.9 + 0.03, -0.100, MFD_COLOUR_GREEN);

  017d9	b8 04 00 00 00	 mov	 eax, 4
  017de	6b c8 0d	 imul	 ecx, eax, 13
  017e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017e7	52		 push	 edx
  017e8	51		 push	 ecx
  017e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  017f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017f6	51		 push	 ecx
  017f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  017ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01804	51		 push	 ecx
  01805	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0180d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01812	51		 push	 ecx
  01813	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0181b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01820	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3585 : 
; 3586 : 		draw_2d_line (0.9, -0.200, 0.9 + 0.03, -0.200, MFD_COLOUR_GREEN);

  01825	b8 04 00 00 00	 mov	 eax, 4
  0182a	6b c8 0d	 imul	 ecx, eax, 13
  0182d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01833	52		 push	 edx
  01834	51		 push	 ecx
  01835	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0183d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01842	51		 push	 ecx
  01843	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0184b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01850	51		 push	 ecx
  01851	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  01859	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0185e	51		 push	 ecx
  0185f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01867	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0186c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3587 : 
; 3588 : 		draw_2d_line (0.9, -0.300, 0.9 + 0.03, -0.300, MFD_COLOUR_GREEN);

  01871	b8 04 00 00 00	 mov	 eax, 4
  01876	6b c8 0d	 imul	 ecx, eax, 13
  01879	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0187f	52		 push	 edx
  01880	51		 push	 ecx
  01881	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  01889	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0188e	51		 push	 ecx
  0188f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01897	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0189c	51		 push	 ecx
  0189d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  018a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018aa	51		 push	 ecx
  018ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  018b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3589 : 
; 3590 : 		draw_2d_line (0.9, -0.400, 0.9 + 0.03, -0.400, MFD_COLOUR_GREEN);

  018bd	b8 04 00 00 00	 mov	 eax, 4
  018c2	6b c8 0d	 imul	 ecx, eax, 13
  018c5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018cb	52		 push	 edx
  018cc	51		 push	 ecx
  018cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  018d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018da	51		 push	 ecx
  018db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  018e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018e8	51		 push	 ecx
  018e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  018f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f6	51		 push	 ecx
  018f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  018ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01904	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3591 : 
; 3592 : 		draw_2d_line (0.9, -0.500, 0.9 + 0.03, -0.500, MFD_COLOUR_GREEN);

  01909	b8 04 00 00 00	 mov	 eax, 4
  0190e	6b c8 0d	 imul	 ecx, eax, 13
  01911	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01917	52		 push	 edx
  01918	51		 push	 ecx
  01919	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01921	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01926	51		 push	 ecx
  01927	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0192f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01934	51		 push	 ecx
  01935	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0193d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01942	51		 push	 ecx
  01943	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0194b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01950	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN52@draw_2d_eo:

; 3593 : 	}
; 3594 : 
; 3595 : 	if (target_range > 0.0)

  01955	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0195d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  01965	0f 86 aa 00 00
	00		 jbe	 $LN55@draw_2d_eo

; 3596 : 	{
; 3597 : 		marker_position = (min (target_range, eo_max_visual_range) / eo_max_visual_range) * -0.5;

  0196b	68 00 00 00 00	 push	 OFFSET ?eo_max_visual_range@@3MA ; eo_max_visual_range
  01970	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _target_range$[ebp]
  01976	50		 push	 eax
  01977	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0197c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01980	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_visual_range@@3MA
  01988	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0198c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01994	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01998	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 3598 : 
; 3599 : 		if (draw_large_mfd)

  019a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  019a7	74 37		 je	 SHORT $LN54@draw_2d_eo

; 3600 : 		{
; 3601 : 			draw_2d_mono_sprite (large_range_marker, 0.9, marker_position, MFD_COLOUR_GREEN);

  019a9	b8 04 00 00 00	 mov	 eax, 4
  019ae	6b c8 0d	 imul	 ecx, eax, 13
  019b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019b7	52		 push	 edx
  019b8	51		 push	 ecx
  019b9	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  019c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019c6	51		 push	 ecx
  019c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  019cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d4	68 00 00 00 00	 push	 OFFSET ?large_range_marker@@3PADA
  019d9	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3602 : 		}
; 3603 : 		else

  019de	eb 35		 jmp	 SHORT $LN55@draw_2d_eo
$LN54@draw_2d_eo:

; 3604 : 		{
; 3605 : 			draw_2d_mono_sprite (small_range_marker, 0.9, marker_position, MFD_COLOUR_GREEN);

  019e0	b8 04 00 00 00	 mov	 eax, 4
  019e5	6b c8 0d	 imul	 ecx, eax, 13
  019e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019ee	52		 push	 edx
  019ef	51		 push	 ecx
  019f0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  019f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019fd	51		 push	 ecx
  019fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01a06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0b	68 00 00 00 00	 push	 OFFSET ?small_range_marker@@3PADA
  01a10	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN55@draw_2d_eo:

; 3606 : 		}
; 3607 : 	}
; 3608 : 
; 3609 : 	//
; 3610 : 	// target gates
; 3611 : 	//
; 3612 : 
; 3613 : 	if (valid_3d)

  01a15	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  01a19	0f 84 c3 04 00
	00		 je	 $LN58@draw_2d_eo

; 3614 : 	{
; 3615 : 		if (target)

  01a1f	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  01a26	0f 84 b6 04 00
	00		 je	 $LN58@draw_2d_eo

; 3616 : 		{
; 3617 : 			if (!((!d3d_can_render_to_texture) && (!draw_large_mfd)))

  01a2c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  01a33	75 0d		 jne	 SHORT $LN59@draw_2d_eo
  01a35	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a3c	0f 84 a0 04 00
	00		 je	 $LN58@draw_2d_eo
$LN59@draw_2d_eo:

; 3618 : 			{
; 3619 : 				tmp = main_vp;

  01a42	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01a47	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01a4c	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR _tmp$[ebp]
  01a52	f3 a5		 rep movsd

; 3620 : 
; 3621 : 				main_vp = eo_vp;

  01a54	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01a59	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  01a5e	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01a63	f3 a5		 rep movsd

; 3622 : 
; 3623 : 				get_local_entity_target_point (target, &target_point);

  01a65	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _target_point$[ebp]
  01a6b	50		 push	 eax
  01a6c	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  01a72	51		 push	 ecx
  01a73	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 3624 : 
; 3625 : 				visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  01a78	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  01a7e	50		 push	 eax
  01a7f	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  01a85	51		 push	 ecx
  01a86	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _target_point$[ebp]
  01a8c	52		 push	 edx
  01a8d	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  01a92	89 85 bc fe ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 3626 : 
; 3627 : 				if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  01a98	83 bd bc fe ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  01a9f	74 0d		 je	 SHORT $LN61@draw_2d_eo
  01aa1	83 bd bc fe ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  01aa8	0f 85 22 04 00
	00		 jne	 $LN60@draw_2d_eo
$LN61@draw_2d_eo:

; 3628 : 				{
; 3629 : 					transform_mfd_screen_co_ords_to_mfd_texture_co_ords (&i, &j);

  01aae	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  01ab4	50		 push	 eax
  01ab5	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  01abb	51		 push	 ecx
  01abc	e8 00 00 00 00	 call	 ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords

; 3630 : 
; 3631 : 					get_2d_world_position (i, j, &x, &y);

  01ac1	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  01ac7	50		 push	 eax
  01ac8	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _x$[ebp]
  01ace	51		 push	 ecx
  01acf	51		 push	 ecx
  01ad0	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  01ad8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01add	51		 push	 ecx
  01ade	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  01ae6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aeb	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 3632 : 
; 3633 : 					draw_2d_line (x - 0.20, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR_GREEN);

  01af0	b8 04 00 00 00	 mov	 eax, 4
  01af5	6b c8 0d	 imul	 ecx, eax, 13
  01af8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01afe	52		 push	 edx
  01aff	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b07	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b0f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b13	51		 push	 ecx
  01b14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b19	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b21	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01b29	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b2d	51		 push	 ecx
  01b2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b33	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b3b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b43	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b47	51		 push	 ecx
  01b48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b4d	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b55	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b5d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b61	51		 push	 ecx
  01b62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b67	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3634 : 					draw_2d_line (x + 0.20, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR_GREEN);

  01b6c	b8 04 00 00 00	 mov	 eax, 4
  01b71	6b c8 0d	 imul	 ecx, eax, 13
  01b74	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b7a	52		 push	 edx
  01b7b	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b83	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b8b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b8f	51		 push	 ecx
  01b90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b95	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b9d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01ba5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ba9	51		 push	 ecx
  01baa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01baf	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01bb7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01bbf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc3	51		 push	 ecx
  01bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc9	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01bd1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01bd9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bdd	51		 push	 ecx
  01bde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3635 : 					draw_2d_line (x - 0.20, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR_GREEN);

  01be8	b8 04 00 00 00	 mov	 eax, 4
  01bed	6b c8 0d	 imul	 ecx, eax, 13
  01bf0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bf6	52		 push	 edx
  01bf7	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01bff	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c07	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c0b	51		 push	 ecx
  01c0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c11	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c19	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01c21	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c25	51		 push	 ecx
  01c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c2b	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01c33	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c3b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c3f	51		 push	 ecx
  01c40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c45	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c4d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c55	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c59	51		 push	 ecx
  01c5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3636 : 					draw_2d_line (x + 0.20, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR_GREEN);

  01c64	b8 04 00 00 00	 mov	 eax, 4
  01c69	6b c8 0d	 imul	 ecx, eax, 13
  01c6c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c72	52		 push	 edx
  01c73	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01c7b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c83	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c87	51		 push	 ecx
  01c88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c8d	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c95	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01c9d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ca1	51		 push	 ecx
  01ca2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ca7	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01caf	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01cb7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cbb	51		 push	 ecx
  01cbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cc1	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01cc9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01cd1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cd5	51		 push	 ecx
  01cd6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cdb	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3637 : 					draw_2d_line (x - 0.20, y + 0.20, x - 0.20, y + 0.15, MFD_COLOUR_GREEN);

  01ce0	b8 04 00 00 00	 mov	 eax, 4
  01ce5	6b c8 0d	 imul	 ecx, eax, 13
  01ce8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cee	52		 push	 edx
  01cef	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01cf7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01cff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d03	51		 push	 ecx
  01d04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d09	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d11	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d19	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d1d	51		 push	 ecx
  01d1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d23	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01d2b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d33	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d37	51		 push	 ecx
  01d38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d3d	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d45	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d4d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d51	51		 push	 ecx
  01d52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d57	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3638 : 					draw_2d_line (x - 0.20, y - 0.20, x - 0.20, y - 0.15, MFD_COLOUR_GREEN);

  01d5c	b8 04 00 00 00	 mov	 eax, 4
  01d61	6b c8 0d	 imul	 ecx, eax, 13
  01d64	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d6a	52		 push	 edx
  01d6b	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01d73	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01d7b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d7f	51		 push	 ecx
  01d80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d85	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d8d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d95	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d99	51		 push	 ecx
  01d9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d9f	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01da7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01daf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01db3	51		 push	 ecx
  01db4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db9	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01dc1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01dc9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01dcd	51		 push	 ecx
  01dce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3639 : 					draw_2d_line (x + 0.20, y + 0.20, x + 0.20, y + 0.15, MFD_COLOUR_GREEN);

  01dd8	b8 04 00 00 00	 mov	 eax, 4
  01ddd	6b c8 0d	 imul	 ecx, eax, 13
  01de0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01de6	52		 push	 edx
  01de7	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01def	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01df7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01dfb	51		 push	 ecx
  01dfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e01	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01e09	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e11	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e15	51		 push	 ecx
  01e16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e1b	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01e23	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e2b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e2f	51		 push	 ecx
  01e30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e35	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01e3d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e45	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e49	51		 push	 ecx
  01e4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e4f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3640 : 					draw_2d_line (x + 0.20, y - 0.20, x + 0.20, y - 0.15, MFD_COLOUR_GREEN);

  01e54	b8 04 00 00 00	 mov	 eax, 4
  01e59	6b c8 0d	 imul	 ecx, eax, 13
  01e5c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e62	52		 push	 edx
  01e63	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01e6b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01e73	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e77	51		 push	 ecx
  01e78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e7d	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01e85	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e8d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e91	51		 push	 ecx
  01e92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e97	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01e9f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01ea7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01eab	51		 push	 ecx
  01eac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eb1	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01eb9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01ec1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ec5	51		 push	 ecx
  01ec6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ecb	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN60@draw_2d_eo:

; 3641 : 				}
; 3642 : 
; 3643 : 				main_vp = tmp;

  01ed0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01ed5	8d b5 c0 fe ff
	ff		 lea	 esi, DWORD PTR _tmp$[ebp]
  01edb	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01ee0	f3 a5		 rep movsd
$LN58@draw_2d_eo:
$LN1@draw_2d_eo:

; 3644 : 			}
; 3645 : 		}
; 3646 : 	}
; 3647 : }

  01ee2	5f		 pop	 edi
  01ee3	5e		 pop	 esi
  01ee4	5b		 pop	 ebx
  01ee5	8b e5		 mov	 esp, ebp
  01ee7	5d		 pop	 ebp
  01ee8	c2 10 00	 ret	 16			; 00000010H
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z
_TEXT	SEGMENT
tv234 = -288						; size = 4
tv145 = -288						; size = 4
tv85 = -288						; size = 4
tv226 = -284						; size = 4
tv157 = -284						; size = 4
tv137 = -284						; size = 4
tv77 = -284						; size = 4
_m$1 = -216						; size = 36
_tmp_vp$2 = -180					; size = 48
_rotated_eo_vp$3 = -132					; size = 48
_centered_eo_vp$4 = -84					; size = 48
_position$5 = -36					; size = 12
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_tint$ = 16						; size = 4
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z PROC ; draw_full_screen_3d_eo_display, COMDAT

; 2888 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2889 : 	float
; 2890 : 		zoom;
; 2891 : 
; 2892 : 	display_3d_light_levels
; 2893 : 		light_level;
; 2894 : 
; 2895 : 	display_3d_noise_levels
; 2896 : 		noise_level;
; 2897 : 
; 2898 : 	vec3d
; 2899 : 		*position;
; 2900 : 
; 2901 : 	weathermodes
; 2902 : 		weather_mode;
; 2903 : 
; 2904 : 	day_segment_types
; 2905 : 		day_segment_type;
; 2906 : 
; 2907 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_full_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00017	83 c0 13	 add	 eax, 19			; 00000013H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_full_:

; 2908 : 
; 2909 : #ifdef OLD_EO
; 2910 : 	switch (eo->field_of_view)
; 2911 : 	{
; 2912 : 		case EO_FOV_NARROW:
; 2913 : 		{
; 2914 : 			zoom = 1.0 / 128.0;
; 2915 : 
; 2916 : 			break;
; 2917 : 		}
; 2918 : 		case EO_FOV_MEDIUM:
; 2919 : 		{
; 2920 : 			zoom = 1.0 / 8.0;
; 2921 : 
; 2922 : 			break;
; 2923 : 		}
; 2924 : 		case EO_FOV_WIDE:
; 2925 : 		{
; 2926 : 			zoom = 1.0;
; 2927 : 
; 2928 : 			break;
; 2929 : 		}
; 2930 : 		default:
; 2931 : 		{
; 2932 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 2933 : 
; 2934 : 			break;
; 2935 : 		}
; 2936 : 	}
; 2937 : #else
; 2938 : 	zoom = convert_linear_view_value (eo);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00033	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 2939 : #endif
; 2940 : 
; 2941 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0003d	74 0f		 je	 SHORT $LN14@draw_full_
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  0004c	eb 24		 jmp	 SHORT $LN15@draw_full_
$LN14@draw_full_:
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00054	83 c2 35	 add	 edx, 53			; 00000035H
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00068	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN15@draw_full_:
  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	85 c9		 test	 ecx, ecx
  00079	74 0c		 je	 SHORT $LN16@draw_full_
  0007b	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  00085	eb 24		 jmp	 SHORT $LN17@draw_full_
$LN16@draw_full_:
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  0008d	83 c2 35	 add	 edx, 53			; 00000035H
  00090	52		 push	 edx
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a1	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN17@draw_full_:
  000ab	6a 08		 push	 8
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b3	51		 push	 ecx
  000b4	6b 95 e4 fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000bb	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000c8	ff d1		 call	 ecx
  000ca	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2942 : 
; 2943 : 	weather_mode = get_simple_session_weather_at_point (position);

  000cd	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000d6	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2944 : 
; 2945 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000d9	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000dd	7e 06		 jle	 SHORT $LN6@draw_full_
  000df	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  000e3	7c 18		 jl	 SHORT $LN5@draw_full_
$LN6@draw_full_:
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  000ea	83 c0 39	 add	 eax, 57			; 00000039H
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  000f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_full_:

; 2946 : 
; 2947 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00104	74 0f		 je	 SHORT $LN18@draw_full_
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  00113	eb 24		 jmp	 SHORT $LN19@draw_full_
$LN18@draw_full_:
  00115	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  0011b	83 c2 3b	 add	 edx, 59			; 0000003bH
  0011e	52		 push	 edx
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012f	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN19@draw_full_:
  00139	b9 01 00 00 00	 mov	 ecx, 1
  0013e	85 c9		 test	 ecx, ecx
  00140	74 0c		 je	 SHORT $LN20@draw_full_
  00142	c7 85 e0 fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv145[ebp], 39 ; 00000027H
  0014c	eb 24		 jmp	 SHORT $LN21@draw_full_
$LN20@draw_full_:
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00154	83 c2 3b	 add	 edx, 59			; 0000003bH
  00157	52		 push	 edx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00168	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN21@draw_full_:
  00172	6a 27		 push	 39			; 00000027H
  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0017a	51		 push	 ecx
  0017b	69 95 e4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv137[ebp], 1116
  00185	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  0018b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00192	ff d1		 call	 ecx
  00194	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2948 : 
; 2949 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00197	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  0019b	7c 06		 jl	 SHORT $LN8@draw_full_
  0019d	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001a1	7c 18		 jl	 SHORT $LN7@draw_full_
$LN8@draw_full_:
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  001a8	83 c0 3d	 add	 eax, 61			; 0000003dH
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_full_:

; 2950 : 
; 2951 : 	switch (system)

  001bb	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001be	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  001c4	83 bd e4 fe ff
	ff 03		 cmp	 DWORD PTR tv157[ebp], 3
  001cb	74 14		 je	 SHORT $LN9@draw_full_
  001cd	83 bd e4 fe ff
	ff 06		 cmp	 DWORD PTR tv157[ebp], 6
  001d4	74 33		 je	 SHORT $LN10@draw_full_
  001d6	83 bd e4 fe ff
	ff 07		 cmp	 DWORD PTR tv157[ebp], 7
  001dd	74 52		 je	 SHORT $LN11@draw_full_
  001df	eb 78		 jmp	 SHORT $LN12@draw_full_
$LN9@draw_full_:

; 2952 : 	{
; 2953 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2954 : 		{
; 2955 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001e1	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001e4	c1 e0 04	 shl	 eax, 4
  001e7	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001ea	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  001f1	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2956 : 
; 2957 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  001f4	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001f7	c1 e0 04	 shl	 eax, 4
  001fa	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001fd	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00204	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2958 : 
; 2959 : 			break;

  00207	eb 61		 jmp	 SHORT $LN2@draw_full_
$LN10@draw_full_:

; 2960 : 		}
; 2961 : 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 2962 : 		{
; 2963 : 			light_level = llltv_light_levels[weather_mode][day_segment_type];

  00209	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020c	c1 e0 04	 shl	 eax, 4
  0020f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00212	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00219	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2964 : 
; 2965 : 			noise_level = llltv_noise_levels[weather_mode][day_segment_type];

  0021c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0021f	c1 e0 04	 shl	 eax, 4
  00222	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00225	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0022c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2966 : 
; 2967 : 			break;

  0022f	eb 39		 jmp	 SHORT $LN2@draw_full_
$LN11@draw_full_:

; 2968 : 		}
; 2969 : 		case TARGET_ACQUISITION_SYSTEM_PERISCOPE:
; 2970 : 		{
; 2971 : 			light_level = periscope_light_levels[weather_mode][day_segment_type];

  00231	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00234	c1 e0 04	 shl	 eax, 4
  00237	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0023a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?periscope_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00241	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2972 : 
; 2973 : 			noise_level = periscope_noise_levels[weather_mode][day_segment_type];

  00244	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00247	c1 e0 04	 shl	 eax, 4
  0024a	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0024d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?periscope_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00254	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2974 : 
; 2975 : 			break;

  00257	eb 11		 jmp	 SHORT $LN2@draw_full_
$LN12@draw_full_:

; 2976 : 		}
; 2977 : 		default:
; 2978 : 		{
; 2979 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00259	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0025c	50		 push	 eax
  0025d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00262	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00267	83 c4 08	 add	 esp, 8
$LN2@draw_full_:

; 2980 : 
; 2981 : 			break;
; 2982 : 		}
; 2983 : 	}
; 2984 : 
; 2985 : 	set_main_3d_params

  0026a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0026f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00277	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0027b	51		 push	 ecx
  0027c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00281	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00286	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0028e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00292	51		 push	 ecx
  00293	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00298	51		 push	 ecx
  00299	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  002a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a6	51		 push	 ecx
  002a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  002af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b4	51		 push	 ecx
  002b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  002bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c2	51		 push	 ecx
  002c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002d3	50		 push	 eax
  002d4	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002d7	51		 push	 ecx
  002d8	8b 55 10	 mov	 edx, DWORD PTR _tint$[ebp]
  002db	52		 push	 edx
  002dc	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2986 : 	(
; 2987 : 		tint,
; 2988 : 		light_level,
; 2989 : 		noise_level,
; 2990 : 		mfd_screen_x_min,
; 2991 : 		mfd_screen_y_min,
; 2992 : 		mfd_screen_width,
; 2993 : 		mfd_screen_height,
; 2994 : 		rad (59.99) * zoom,
; 2995 : 		rad (59.99) * zoom
; 2996 : 	);
; 2997 : 
; 2998 : 	//
; 2999 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 3000 : 	//
; 3001 : 
; 3002 : 	{
; 3003 : 		vec3d
; 3004 : 			position;
; 3005 : 
; 3006 : 		viewpoint
; 3007 : 			centered_eo_vp,
; 3008 : 			rotated_eo_vp,
; 3009 : 			tmp_vp;
; 3010 : 
; 3011 : 		matrix3x3
; 3012 : 			m;
; 3013 : 
; 3014 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  002e1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  002e7	83 c6 08	 add	 esi, 8
  002ea	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002ef	8d bd 4c ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  002f5	f3 a5		 rep movsd

; 3015 : 
; 3016 : 		get_hokum_eo_relative_centred_viewpoint (&centered_eo_vp);

  002f7	8d 45 ac	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ?get_hokum_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_hokum_eo_relative_centred_viewpoint

; 3017 : 
; 3018 : 		rotated_eo_vp.position = centered_eo_vp.position;

  00300	8b 45 ac	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  00303	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  00309	8b 4d b0	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  0030c	89 4d 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  0030f	8b 55 b4	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  00312	89 55 84	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 3019 : 
; 3020 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  00315	51		 push	 ecx
  00316	0f 57 c0	 xorps	 xmm0, xmm0
  00319	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031e	51		 push	 ecx
  0031f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032c	51		 push	 ecx
  0032d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033a	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  00340	50		 push	 eax
  00341	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 3021 : 
; 3022 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  00346	8d 45 b8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  00349	50		 push	 eax
  0034a	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  00350	51		 push	 ecx
  00351	8d 55 88	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00354	52		 push	 edx
  00355	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 3023 : 
; 3024 : 		position.x = -rotated_eo_vp.x;

  0035a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  00362	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00369	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp], xmm0

; 3025 : 		position.y = -rotated_eo_vp.y;

  0036e	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00373	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0037a	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 3026 : 		position.z = -rotated_eo_vp.z;

  0037f	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00384	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0038b	f3 0f 11 45 e4	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 3027 : 
; 3028 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  00390	8d 45 dc	 lea	 eax, DWORD PTR _position$5[ebp]
  00393	50		 push	 eax
  00394	8d 4d 88	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00397	51		 push	 ecx
  00398	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0039e	83 c2 08	 add	 edx, 8
  003a1	52		 push	 edx
  003a2	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 3029 : 
; 3030 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  003a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003ae	74 0f		 je	 SHORT $LN22@draw_full_
  003b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b7	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv226[ebp], ecx
  003bd	eb 27		 jmp	 SHORT $LN23@draw_full_
$LN22@draw_full_:
  003bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  003c5	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  003cb	52		 push	 edx
  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003d6	50		 push	 eax
  003d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003dc	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN23@draw_full_:
  003e6	b9 01 00 00 00	 mov	 ecx, 1
  003eb	85 c9		 test	 ecx, ecx
  003ed	74 0c		 je	 SHORT $LN24@draw_full_
  003ef	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv234[ebp], 8
  003f9	eb 27		 jmp	 SHORT $LN25@draw_full_
$LN24@draw_full_:
  003fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00401	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  00407	52		 push	 edx
  00408	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0040d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00418	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN25@draw_full_:
  00422	8d 4d dc	 lea	 ecx, DWORD PTR _position$5[ebp]
  00425	51		 push	 ecx
  00426	6a 08		 push	 8
  00428	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0042e	52		 push	 edx
  0042f	6b 85 e4 fe ff
	ff 60		 imul	 eax, DWORD PTR tv226[ebp], 96
  00436	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv234[ebp]
  0043c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00443	ff d2		 call	 edx

; 3031 : 
; 3032 : 		rotated_eo_vp.x += position.x;

  00445	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0044d	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp]
  00452	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 3033 : 		rotated_eo_vp.y += position.y;

  0045a	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  0045f	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  00464	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 3034 : 		rotated_eo_vp.z += position.z;

  00469	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  0046e	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  00473	f3 0f 11 45 84	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 3035 : 
; 3036 : 		draw_eo_3d_scene = TRUE;

  00478	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3037 : 
; 3038 : 		draw_main_3d_scene (&rotated_eo_vp);

  00482	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  00488	50		 push	 eax
  00489	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3039 : 
; 3040 : 		draw_eo_3d_scene = FALSE;

  0048e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3041 : 
; 3042 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  00498	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0049e	83 c7 08	 add	 edi, 8
  004a1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004a6	8d b5 4c ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  004ac	f3 a5		 rep movsd

; 3043 : 	}
; 3044 : }

  004ae	5f		 pop	 edi
  004af	5e		 pop	 esi
  004b0	5b		 pop	 ebx
  004b1	8b e5		 mov	 esp, ebp
  004b3	5d		 pop	 ebp
  004b4	c2 0c 00	 ret	 12			; 0000000cH
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ENDP ; draw_full_screen_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv423 = -316						; size = 8
tv470 = -308						; size = 8
tv419 = -300						; size = 8
tv468 = -292						; size = 8
tv258 = -292						; size = 4
tv150 = -292						; size = 4
tv90 = -292						; size = 4
tv250 = -288						; size = 4
tv162 = -288						; size = 4
tv142 = -288						; size = 4
tv82 = -288						; size = 4
_m$1 = -220						; size = 36
_tmp_vp$2 = -184					; size = 48
_rotated_eo_vp$3 = -136					; size = 48
_centered_eo_vp$4 = -88					; size = 48
_position$5 = -40					; size = 12
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 2706 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2707 : 	float
; 2708 : 		zoom;
; 2709 : 
; 2710 : 	display_3d_light_levels
; 2711 : 		light_level;
; 2712 : 
; 2713 : 	display_3d_noise_levels
; 2714 : 		noise_level;
; 2715 : 
; 2716 : 	vec3d
; 2717 : 		*position;
; 2718 : 
; 2719 : 	weathermodes
; 2720 : 		weather_mode;
; 2721 : 
; 2722 : 	day_segment_types
; 2723 : 		day_segment_type;
; 2724 : 
; 2725 : 	display_3d_tints
; 2726 : 		tint;
; 2727 : 
; 2728 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_3d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_3d_eo:

; 2729 : 
; 2730 : 	ASSERT (eo_3d_texture_screen);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00031	75 18		 jne	 SHORT $LN5@draw_3d_eo
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00038	83 c0 18	 add	 eax, 24			; 00000018H
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_3d_eo:

; 2731 : 
; 2732 : #ifdef OLD_EO
; 2733 : 	switch (eo->field_of_view)
; 2734 : 	{
; 2735 : 		case EO_FOV_NARROW:
; 2736 : 		{
; 2737 : 			zoom = 1.0 / 128.0;
; 2738 : 
; 2739 : 			break;
; 2740 : 		}
; 2741 : 		case EO_FOV_MEDIUM:
; 2742 : 		{
; 2743 : 			zoom = 1.0 / 8.0;
; 2744 : 
; 2745 : 			break;
; 2746 : 		}
; 2747 : 		case EO_FOV_WIDE:
; 2748 : 		{
; 2749 : 			zoom = 1.0;
; 2750 : 
; 2751 : 			break;
; 2752 : 		}
; 2753 : 		default:
; 2754 : 		{
; 2755 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 2756 : 
; 2757 : 			break;
; 2758 : 		}
; 2759 : 	}
; 2760 : #else
; 2761 : 	zoom = convert_linear_view_value (eo);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00054	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 2762 : #endif
; 2763 : 
; 2764 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0005e	74 0f		 je	 SHORT $LN21@draw_3d_eo
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  0006d	eb 24		 jmp	 SHORT $LN22@draw_3d_eo
$LN21@draw_3d_eo:
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00075	83 c2 3a	 add	 edx, 58			; 0000003aH
  00078	52		 push	 edx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00089	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN22@draw_3d_eo:
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	85 c9		 test	 ecx, ecx
  0009a	74 0c		 je	 SHORT $LN23@draw_3d_eo
  0009c	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000a6	eb 24		 jmp	 SHORT $LN24@draw_3d_eo
$LN23@draw_3d_eo:
  000a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ae	83 c2 3a	 add	 edx, 58			; 0000003aH
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c2	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN24@draw_3d_eo:
  000cc	6a 08		 push	 8
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d4	51		 push	 ecx
  000d5	6b 95 e0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv82[ebp], 96
  000dc	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  000e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000e9	ff d1		 call	 ecx
  000eb	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2765 : 
; 2766 : 	weather_mode = get_simple_session_weather_at_point (position);

  000ee	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000f7	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2767 : 
; 2768 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000fa	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000fe	7e 06		 jle	 SHORT $LN7@draw_3d_eo
  00100	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00104	7c 18		 jl	 SHORT $LN6@draw_3d_eo
$LN7@draw_3d_eo:
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0010b	83 c0 3e	 add	 eax, 62			; 0000003eH
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00119	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 2769 : 
; 2770 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  0011e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00125	74 0f		 je	 SHORT $LN25@draw_3d_eo
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  00134	eb 24		 jmp	 SHORT $LN26@draw_3d_eo
$LN25@draw_3d_eo:
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0013c	83 c2 40	 add	 edx, 64			; 00000040H
  0013f	52		 push	 edx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00150	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN26@draw_3d_eo:
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	85 c9		 test	 ecx, ecx
  00161	74 0c		 je	 SHORT $LN27@draw_3d_eo
  00163	c7 85 dc fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv150[ebp], 39 ; 00000027H
  0016d	eb 24		 jmp	 SHORT $LN28@draw_3d_eo
$LN27@draw_3d_eo:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00175	83 c2 40	 add	 edx, 64			; 00000040H
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN28@draw_3d_eo:
  00193	6a 27		 push	 39			; 00000027H
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0019b	51		 push	 ecx
  0019c	69 95 e0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv142[ebp], 1116
  001a6	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001b3	ff d1		 call	 ecx
  001b5	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2771 : 
; 2772 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001b8	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001bc	7c 06		 jl	 SHORT $LN9@draw_3d_eo
  001be	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001c2	7c 18		 jl	 SHORT $LN8@draw_3d_eo
$LN9@draw_3d_eo:
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001c9	83 c0 42	 add	 eax, 66			; 00000042H
  001cc	50		 push	 eax
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 2773 : 
; 2774 : 	switch (system)

  001dc	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001df	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  001e5	83 bd e0 fe ff
	ff 03		 cmp	 DWORD PTR tv162[ebp], 3
  001ec	74 1b		 je	 SHORT $LN10@draw_3d_eo
  001ee	83 bd e0 fe ff
	ff 06		 cmp	 DWORD PTR tv162[ebp], 6
  001f5	74 56		 je	 SHORT $LN13@draw_3d_eo
  001f7	83 bd e0 fe ff
	ff 07		 cmp	 DWORD PTR tv162[ebp], 7
  001fe	0f 84 8a 00 00
	00		 je	 $LN16@draw_3d_eo
  00204	e9 b4 00 00 00	 jmp	 $LN17@draw_3d_eo
$LN10@draw_3d_eo:

; 2775 : 	{
; 2776 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2777 : 		{
; 2778 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  00209	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020c	c1 e0 04	 shl	 eax, 4
  0020f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00212	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00219	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2779 : 
; 2780 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0021c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0021f	c1 e0 04	 shl	 eax, 4
  00222	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00225	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0022c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2781 : 
; 2782 : 			if (command_line_colour_mfd)

  0022f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00236	74 09		 je	 SHORT $LN11@draw_3d_eo

; 2783 : 				tint = DISPLAY_3D_TINT_GREEN;

  00238	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 2784 : 			else

  0023f	eb 07		 jmp	 SHORT $LN12@draw_3d_eo
$LN11@draw_3d_eo:

; 2785 : 				tint = DISPLAY_3D_TINT_AMBER;

  00241	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 1
$LN12@draw_3d_eo:

; 2786 : 
; 2787 : 			break;

  00248	e9 81 00 00 00	 jmp	 $LN2@draw_3d_eo
$LN13@draw_3d_eo:

; 2788 : 		}
; 2789 : 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 2790 : 		{
; 2791 : 			light_level = llltv_light_levels[weather_mode][day_segment_type];

  0024d	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00250	c1 e0 04	 shl	 eax, 4
  00253	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00256	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0025d	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2792 : 
; 2793 : 			noise_level = llltv_noise_levels[weather_mode][day_segment_type];

  00260	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00263	c1 e0 04	 shl	 eax, 4
  00266	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00269	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?llltv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00270	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2794 : 
; 2795 : 			if (command_line_colour_mfd)

  00273	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0027a	74 09		 je	 SHORT $LN14@draw_3d_eo

; 2796 : 				tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  0027c	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 2797 : 			else

  00283	eb 07		 jmp	 SHORT $LN15@draw_3d_eo
$LN14@draw_3d_eo:

; 2798 : 				tint = DISPLAY_3D_TINT_AMBER_VISUAL;

  00285	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 2
$LN15@draw_3d_eo:

; 2799 : 
; 2800 : 			break;

  0028c	eb 40		 jmp	 SHORT $LN2@draw_3d_eo
$LN16@draw_3d_eo:

; 2801 : 		}
; 2802 : 		case TARGET_ACQUISITION_SYSTEM_PERISCOPE:
; 2803 : 		{
; 2804 : 			light_level = periscope_light_levels[weather_mode][day_segment_type];

  0028e	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00291	c1 e0 04	 shl	 eax, 4
  00294	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00297	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?periscope_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0029e	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2805 : 
; 2806 : 			noise_level = periscope_noise_levels[weather_mode][day_segment_type];

  002a1	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002a4	c1 e0 04	 shl	 eax, 4
  002a7	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002aa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?periscope_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002b1	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2807 : 
; 2808 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  002b4	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 2809 : 
; 2810 : 			break;

  002bb	eb 11		 jmp	 SHORT $LN2@draw_3d_eo
$LN17@draw_3d_eo:

; 2811 : 		}
; 2812 : 		default:
; 2813 : 		{
; 2814 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  002bd	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  002c6	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002cb	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 2815 : 
; 2816 : 			break;
; 2817 : 		}
; 2818 : 	}
; 2819 : 
; 2820 : 	set_3d_render_target (eo_3d_texture_screen);

  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2821 : 
; 2822 : 	set_active_screen (eo_3d_texture_screen);

  002d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2823 : 
; 2824 : 	set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (59.99) * zoom, rad (59.99) * zoom);

  002e4	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f5	51		 push	 ecx
  002f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00300	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00308	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030c	51		 push	 ecx
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	51		 push	 ecx
  00321	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00329	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032e	51		 push	 ecx
  0032f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033c	51		 push	 ecx
  0033d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0034d	50		 push	 eax
  0034e	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00351	51		 push	 ecx
  00352	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  00355	52		 push	 edx
  00356	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2825 : 
; 2826 : 	//
; 2827 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 2828 : 	//
; 2829 : 
; 2830 : 	{
; 2831 : 		vec3d
; 2832 : 			position;
; 2833 : 
; 2834 : 		viewpoint
; 2835 : 			centered_eo_vp,
; 2836 : 			rotated_eo_vp,
; 2837 : 			tmp_vp;
; 2838 : 
; 2839 : 		matrix3x3
; 2840 : 			m;
; 2841 : 
; 2842 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  0035b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00361	83 c6 08	 add	 esi, 8
  00364	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00369	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  0036f	f3 a5		 rep movsd

; 2843 : 
; 2844 : 		get_hokum_eo_relative_centred_viewpoint (&centered_eo_vp);

  00371	8d 45 a8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?get_hokum_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_hokum_eo_relative_centred_viewpoint

; 2845 : 
; 2846 : 		rotated_eo_vp.position = centered_eo_vp.position;

  0037a	8b 45 a8	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  0037d	89 85 78 ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  00383	8b 4d ac	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  00386	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  0038c	8b 55 b0	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  0038f	89 55 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 2847 : 
; 2848 : 		if (gun_is_firing)

  00392	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gun_is_firing@@3HA, 0 ; gun_is_firing
  00399	0f 84 99 00 00
	00		 je	 $LN18@draw_3d_eo

; 2849 : 			get_3d_transformation_matrix (m, eo_azimuth + sfrand1norm() * MAX_GUN_SHAKE_DEFLECTION, eo_elevation + sfrand1norm() * MAX_GUN_SHAKE_DEFLECTION, 0.0);

  0039f	51		 push	 ecx
  003a0	0f 57 c0	 xorps	 xmm0, xmm0
  003a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_elevation@@3MA
  003b0	f2 0f 11 85 dc
	fe ff ff	 movsd	 QWORD PTR tv468[ebp], xmm0
  003b8	e8 00 00 00 00	 call	 ?sfrand1norm@@YGNXZ	; sfrand1norm
  003bd	dd 9d d4 fe ff
	ff		 fstp	 QWORD PTR tv419[ebp]
  003c3	f2 0f 10 85 d4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv419[ebp]
  003cb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5c987100000000
  003d3	f2 0f 10 8d dc
	fe ff ff	 movsd	 xmm1, QWORD PTR tv468[ebp]
  003db	f2 0f 58 c8	 addsd	 xmm1, xmm0
  003df	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003e3	51		 push	 ecx
  003e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_azimuth@@3MA
  003f1	f2 0f 11 85 cc
	fe ff ff	 movsd	 QWORD PTR tv470[ebp], xmm0
  003f9	e8 00 00 00 00	 call	 ?sfrand1norm@@YGNXZ	; sfrand1norm
  003fe	dd 9d c4 fe ff
	ff		 fstp	 QWORD PTR tv423[ebp]
  00404	f2 0f 10 85 c4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv423[ebp]
  0040c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5c987100000000
  00414	f2 0f 10 8d cc
	fe ff ff	 movsd	 xmm1, QWORD PTR tv470[ebp]
  0041c	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00420	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00424	51		 push	 ecx
  00425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042a	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  00430	50		 push	 eax
  00431	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 2850 : 		else

  00436	eb 31		 jmp	 SHORT $LN19@draw_3d_eo
$LN18@draw_3d_eo:

; 2851 : 			get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  00438	51		 push	 ecx
  00439	0f 57 c0	 xorps	 xmm0, xmm0
  0043c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00441	51		 push	 ecx
  00442	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  0044a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044f	51		 push	 ecx
  00450	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00458	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045d	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  00463	50		 push	 eax
  00464	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix
$LN19@draw_3d_eo:

; 2852 : 
; 2853 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  00469	8d 45 b4	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  0046c	50		 push	 eax
  0046d	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  00473	51		 push	 ecx
  00474	8d 55 84	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00477	52		 push	 edx
  00478	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 2854 : 
; 2855 : 		position.x = -rotated_eo_vp.x;

  0047d	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  00485	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0048c	f3 0f 11 45 d8	 movss	 DWORD PTR _position$5[ebp], xmm0

; 2856 : 		position.y = -rotated_eo_vp.y;

  00491	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00499	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004a0	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 2857 : 		position.z = -rotated_eo_vp.z;

  004a5	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  004aa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004b1	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 2858 : 
; 2859 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  004b6	8d 45 d8	 lea	 eax, DWORD PTR _position$5[ebp]
  004b9	50		 push	 eax
  004ba	8d 4d 84	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  004bd	51		 push	 ecx
  004be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  004c4	83 c2 08	 add	 edx, 8
  004c7	52		 push	 edx
  004c8	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 2860 : 
; 2861 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  004cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  004d4	74 0f		 je	 SHORT $LN29@draw_3d_eo
  004d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  004db	8b 08		 mov	 ecx, DWORD PTR [eax]
  004dd	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv250[ebp], ecx
  004e3	eb 27		 jmp	 SHORT $LN30@draw_3d_eo
$LN29@draw_3d_eo:
  004e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  004eb	81 c2 9b 00 00
	00		 add	 edx, 155		; 0000009bH
  004f1	52		 push	 edx
  004f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004fc	50		 push	 eax
  004fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00502	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
$LN30@draw_3d_eo:
  0050c	b9 01 00 00 00	 mov	 ecx, 1
  00511	85 c9		 test	 ecx, ecx
  00513	74 0c		 je	 SHORT $LN31@draw_3d_eo
  00515	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv258[ebp], 8
  0051f	eb 27		 jmp	 SHORT $LN32@draw_3d_eo
$LN31@draw_3d_eo:
  00521	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00527	81 c2 9b 00 00
	00		 add	 edx, 155		; 0000009bH
  0052d	52		 push	 edx
  0052e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00533	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00538	50		 push	 eax
  00539	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0053e	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN32@draw_3d_eo:
  00548	8d 4d d8	 lea	 ecx, DWORD PTR _position$5[ebp]
  0054b	51		 push	 ecx
  0054c	6a 08		 push	 8
  0054e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00554	52		 push	 edx
  00555	6b 85 e0 fe ff
	ff 60		 imul	 eax, DWORD PTR tv250[ebp], 96
  0055c	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv258[ebp]
  00562	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00569	ff d2		 call	 edx

; 2862 : 
; 2863 : 		rotated_eo_vp.x += position.x;

  0056b	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  00573	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _position$5[ebp]
  00578	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 2864 : 		rotated_eo_vp.y += position.y;

  00580	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00588	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  0058d	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 2865 : 		rotated_eo_vp.z += position.z;

  00595	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  0059a	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  0059f	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 2866 : 
; 2867 : 		draw_eo_3d_scene = TRUE;

  005a4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2868 : 
; 2869 : 		draw_main_3d_scene (&rotated_eo_vp);

  005ae	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2870 : 
; 2871 : 		draw_eo_3d_scene = FALSE;

  005ba	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2872 : 
; 2873 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  005c4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  005ca	83 c7 08	 add	 edi, 8
  005cd	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005d2	8d b5 48 ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  005d8	f3 a5		 rep movsd

; 2874 : 	}
; 2875 : 
; 2876 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 2877 : 
; 2878 : 	set_3d_render_target (video_screen);

  005e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  005ea	50		 push	 eax
  005eb	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2879 : 
; 2880 : 	set_active_screen (video_screen);

  005f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  005f5	50		 push	 eax
  005f6	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2881 : }

  005fb	5f		 pop	 edi
  005fc	5e		 pop	 esi
  005fd	5b		 pop	 ebx
  005fe	8b e5		 mov	 esp, ebp
  00600	5d		 pop	 ebp
  00601	c2 08 00	 ret	 8
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z PROC ; get_undamaged_eo_display_mode, COMDAT

; 2682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2683 : 	if ((mode == HOKUM_MFD_MODE_FLIR) && (!hokum_damage.flir))

  00009	83 7d 08 04	 cmp	 DWORD PTR _mode$[ebp], 4
  0000d	75 13		 jne	 SHORT $LN2@get_undama
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00014	d1 e8		 shr	 eax, 1
  00016	83 e0 01	 and	 eax, 1
  00019	75 07		 jne	 SHORT $LN2@get_undama

; 2684 : 	{
; 2685 : 		return (TRUE);

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	eb 36		 jmp	 SHORT $LN1@get_undama
$LN2@get_undama:

; 2686 : 	}
; 2687 : 
; 2688 : 	if ((mode == HOKUM_MFD_MODE_LLLTV) && (!hokum_damage.llltv))

  00022	83 7d 08 05	 cmp	 DWORD PTR _mode$[ebp], 5
  00026	75 14		 jne	 SHORT $LN3@get_undama
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0002d	c1 e8 03	 shr	 eax, 3
  00030	83 e0 01	 and	 eax, 1
  00033	75 07		 jne	 SHORT $LN3@get_undama

; 2689 : 	{
; 2690 : 		return (TRUE);

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	eb 1c		 jmp	 SHORT $LN1@get_undama
$LN3@get_undama:

; 2691 : 	}
; 2692 : 
; 2693 : 	if ((mode == HOKUM_MFD_MODE_PERISCOPE) && (!hokum_damage.periscope))

  0003c	83 7d 08 06	 cmp	 DWORD PTR _mode$[ebp], 6
  00040	75 14		 jne	 SHORT $LN4@get_undama
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00047	c1 e8 04	 shr	 eax, 4
  0004a	83 e0 01	 and	 eax, 1
  0004d	75 07		 jne	 SHORT $LN4@get_undama

; 2694 : 	{
; 2695 : 		return (TRUE);

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	eb 02		 jmp	 SHORT $LN1@get_undama
$LN4@get_undama:

; 2696 : 	}
; 2697 : 
; 2698 : 	return (FALSE);

  00056	33 c0		 xor	 eax, eax
$LN1@get_undama:

; 2699 : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z ENDP ; get_undamaged_eo_display_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv416 = -108						; size = 4
tv395 = -108						; size = 4
tv362 = -108						; size = 4
tv337 = -108						; size = 4
tv187 = -108						; size = 4
tv166 = -108						; size = 4
tv130 = -108						; size = 4
tv78 = -108						; size = 4
tv408 = -104						; size = 4
tv387 = -104						; size = 4
tv354 = -104						; size = 4
tv329 = -104						; size = 4
tv179 = -104						; size = 4
tv158 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_target_position$ = -36					; size = 4
_source_position$ = -32					; size = 4
_target$ = -28						; size = 4
_source$ = -24						; size = 4
_y_adjust$ = -20					; size = 4
_target_range$ = -16					; size = 4
_scale$ = -12						; size = 4
_source_heading$ = -8					; size = 4
_source_side$ = -4					; size = 4
?draw_air_radar_mfd@@YGXXZ PROC				; draw_air_radar_mfd, COMDAT

; 2161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2162 : 	entity_sides
; 2163 : 		source_side;
; 2164 : 
; 2165 : 	float
; 2166 : 		source_heading,
; 2167 : 		scale,
; 2168 : 		target_range,
; 2169 : 		y_adjust;
; 2170 : 
; 2171 : 	entity
; 2172 : 		*source,
; 2173 : 		*target;
; 2174 : 
; 2175 : 	vec3d
; 2176 : 		*source_position,
; 2177 : 		*target_position;
; 2178 : 
; 2179 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e8	 mov	 DWORD PTR _source$[ebp], eax

; 2180 : 
; 2181 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN23@draw_air_r
  00017	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN24@draw_air_r
$LN23@draw_air_r:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00027	83 c2 14	 add	 edx, 20			; 00000014H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN24@draw_air_r:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN25@draw_air_r
  0004b	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN26@draw_air_r
$LN25@draw_air_r:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 14	 add	 edx, 20			; 00000014H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN26@draw_air_r:
  00075	6a 08		 push	 8
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 98 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 94	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 e0	 mov	 DWORD PTR _source_position$[ebp], eax

; 2182 : 
; 2183 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0008e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN27@draw_air_r
  00094	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN28@draw_air_r
$LN27@draw_air_r:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 16	 add	 edx, 22			; 00000016H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN28@draw_air_r:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN29@draw_air_r
  000c8	c7 45 94 bb 00
	00 00		 mov	 DWORD PTR tv130[ebp], 187 ; 000000bbH
  000cf	eb 21		 jmp	 SHORT $LN30@draw_air_r
$LN29@draw_air_r:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 16	 add	 edx, 22			; 00000016H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN30@draw_air_r:
  000f2	68 bb 00 00 00	 push	 187			; 000000bbH
  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  000fa	51		 push	 ecx
  000fb	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 1116
  00102	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 fc	 mov	 DWORD PTR _source_side$[ebp], eax

; 2184 : 
; 2185 : 	////////////////////////////////////////
; 2186 : 	//
; 2187 : 	// text
; 2188 : 	//
; 2189 : 	////////////////////////////////////////
; 2190 : 
; 2191 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  00111	b8 04 00 00 00	 mov	 eax, 4
  00116	6b c8 0d	 imul	 ecx, eax, 13
  00119	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2192 : 
; 2193 : 	if (draw_large_mfd)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012c	74 09		 je	 SHORT $LN4@draw_air_r

; 2194 : 	{
; 2195 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0012e	6a 05		 push	 5
  00130	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2196 : 	}
; 2197 : 	else

  00135	eb 07		 jmp	 SHORT $LN5@draw_air_r
$LN4@draw_air_r:

; 2198 : 	{
; 2199 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00137	6a 01		 push	 1
  00139	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN5@draw_air_r:

; 2200 : 	}
; 2201 : 
; 2202 : 	//
; 2203 : 	// declutter status
; 2204 : 	//
; 2205 : 
; 2206 : 	if (draw_large_mfd)

  0013e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00145	74 0f		 je	 SHORT $LN6@draw_air_r

; 2207 : 	{
; 2208 : 		y_adjust = 5.0;

  00147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0014f	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2209 : 	}
; 2210 : 	else

  00154	eb 0d		 jmp	 SHORT $LN7@draw_air_r
$LN6@draw_air_r:

; 2211 : 	{
; 2212 : 		y_adjust = 2.0;

  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0015e	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_air_r:

; 2213 : 	}
; 2214 : 
; 2215 : 	set_2d_mono_font_position (-1.0, 1.0);

  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2216 : 
; 2217 : 	set_mono_font_rel_position (1.0, y_adjust);

  00184	51		 push	 ecx
  00185	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2218 : 
; 2219 : 	if (air_radar.show_allied_targets)

  001a2	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+28, 0
  001a9	74 0c		 je	 SHORT $LN8@draw_air_r

; 2220 : 	{
; 2221 : 		print_mono_font_string ("ALL");

  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  001b0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2222 : 	}
; 2223 : 	else

  001b5	eb 0a		 jmp	 SHORT $LN9@draw_air_r
$LN8@draw_air_r:

; 2224 : 	{
; 2225 : 		print_mono_font_string ("ENEMY");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_05EJJKHDCK@ENEMY@
  001bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@draw_air_r:

; 2226 : 	}
; 2227 : 
; 2228 : 	//
; 2229 : 	// scan range
; 2230 : 	//
; 2231 : 
; 2232 : 	display_radar_scan_range (air_radar.scan_range);

  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 2233 : 
; 2234 : 	//
; 2235 : 	// target details
; 2236 : 	//
; 2237 : 
; 2238 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  001d4	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  001db	0f 85 3a 01 00
	00		 jne	 $LN10@draw_air_r

; 2239 : 	{
; 2240 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001e1	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  001e5	74 0a		 je	 SHORT $LN31@draw_air_r
  001e7	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  001ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ec	89 4d 98	 mov	 DWORD PTR tv158[ebp], ecx
  001ef	eb 21		 jmp	 SHORT $LN32@draw_air_r
$LN31@draw_air_r:
  001f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  001f7	83 c2 4f	 add	 edx, 79			; 0000004fH
  001fa	52		 push	 edx
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN32@draw_air_r:
  00212	b9 01 00 00 00	 mov	 ecx, 1
  00217	85 c9		 test	 ecx, ecx
  00219	74 09		 je	 SHORT $LN33@draw_air_r
  0021b	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv166[ebp], 38 ; 00000026H
  00222	eb 21		 jmp	 SHORT $LN34@draw_air_r
$LN33@draw_air_r:
  00224	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0022a	83 c2 4f	 add	 edx, 79			; 0000004fH
  0022d	52		 push	 edx
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0023e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$LN34@draw_air_r:
  00245	6a 26		 push	 38			; 00000026H
  00247	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0024a	51		 push	 ecx
  0024b	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv158[ebp], 180
  00252	8b 45 94	 mov	 eax, DWORD PTR tv166[ebp]
  00255	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0025c	ff d1		 call	 ecx
  0025e	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2241 : 
; 2242 : 		if (target)

  00261	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00265	0f 84 8f 00 00
	00		 je	 $LN11@draw_air_r

; 2243 : 		{
; 2244 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0026b	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0026f	74 0a		 je	 SHORT $LN35@draw_air_r
  00271	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	89 4d 98	 mov	 DWORD PTR tv179[ebp], ecx
  00279	eb 21		 jmp	 SHORT $LN36@draw_air_r
$LN35@draw_air_r:
  0027b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00281	83 c2 53	 add	 edx, 83			; 00000053H
  00284	52		 push	 edx
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00295	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN36@draw_air_r:
  0029c	b9 01 00 00 00	 mov	 ecx, 1
  002a1	85 c9		 test	 ecx, ecx
  002a3	74 09		 je	 SHORT $LN37@draw_air_r
  002a5	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv187[ebp], 8
  002ac	eb 21		 jmp	 SHORT $LN38@draw_air_r
$LN37@draw_air_r:
  002ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  002b4	83 c2 53	 add	 edx, 83			; 00000053H
  002b7	52		 push	 edx
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN38@draw_air_r:
  002cf	6a 08		 push	 8
  002d1	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  002d4	51		 push	 ecx
  002d5	6b 55 98 60	 imul	 edx, DWORD PTR tv179[ebp], 96
  002d9	8b 45 94	 mov	 eax, DWORD PTR tv187[ebp]
  002dc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002e3	ff d1		 call	 ecx
  002e5	89 45 dc	 mov	 DWORD PTR _target_position$[ebp], eax

; 2245 : 
; 2246 : 			target_range = get_3d_range (source_position, target_position);

  002e8	8b 45 dc	 mov	 eax, DWORD PTR _target_position$[ebp]
  002eb	50		 push	 eax
  002ec	8b 4d e0	 mov	 ecx, DWORD PTR _source_position$[ebp]
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  002f5	d9 5d f0	 fstp	 DWORD PTR _target_range$[ebp]

; 2247 : 		}
; 2248 : 		else

  002f8	eb 08		 jmp	 SHORT $LN12@draw_air_r
$LN11@draw_air_r:

; 2249 : 		{
; 2250 : 			target_range = 0.0;

  002fa	0f 57 c0	 xorps	 xmm0, xmm0
  002fd	f3 0f 11 45 f0	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN12@draw_air_r:

; 2251 : 		}
; 2252 : 
; 2253 : 		display_radar_target_details (target, target_range, &air_radar);

  00302	68 00 00 00 00	 push	 OFFSET ?air_radar@@3URADAR_PARAMS@@A ; air_radar
  00307	51		 push	 ecx
  00308	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN10@draw_air_r:

; 2254 : 	}
; 2255 : 
; 2256 : 	////////////////////////////////////////
; 2257 : 	//
; 2258 : 	// line graphics
; 2259 : 	//
; 2260 : 	////////////////////////////////////////
; 2261 : 
; 2262 : 	//
; 2263 : 	// datum markers
; 2264 : 	//
; 2265 : 
; 2266 : 	draw_2d_line ( 0.00,  TICK1,  0.00,  TICK2, MFD_COLOUR_YELLOW);

  0031b	b8 04 00 00 00	 mov	 eax, 4
  00320	6b c8 0f	 imul	 ecx, eax, 15
  00323	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00329	52		 push	 edx
  0032a	51		 push	 ecx
  0032b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4c0000
  00333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00338	51		 push	 ecx
  00339	0f 57 c0	 xorps	 xmm0, xmm0
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	51		 push	 ecx
  00342	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f30cccd
  0034a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034f	51		 push	 ecx
  00350	0f 57 c0	 xorps	 xmm0, xmm0
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2267 : 	draw_2d_line ( TICK1,  0.00,  TICK2,  0.00, MFD_COLOUR_YELLOW);

  0035d	b8 04 00 00 00	 mov	 eax, 4
  00362	6b c8 0f	 imul	 ecx, eax, 15
  00365	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036b	52		 push	 edx
  0036c	51		 push	 ecx
  0036d	0f 57 c0	 xorps	 xmm0, xmm0
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4c0000
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	0f 57 c0	 xorps	 xmm0, xmm0
  00387	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038c	51		 push	 ecx
  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f30cccd
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2268 : 	draw_2d_line ( 0.00, -TICK1,  0.00, -TICK2, MFD_COLOUR_YELLOW);

  0039f	b8 04 00 00 00	 mov	 eax, 4
  003a4	6b c8 0f	 imul	 ecx, eax, 15
  003a7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ad	52		 push	 edx
  003ae	51		 push	 ecx
  003af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4c0000
  003b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bc	51		 push	 ecx
  003bd	0f 57 c0	 xorps	 xmm0, xmm0
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30cccd
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	51		 push	 ecx
  003d4	0f 57 c0	 xorps	 xmm0, xmm0
  003d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2269 : 	draw_2d_line (-TICK1,  0.00, -TICK2,  0.00, MFD_COLOUR_YELLOW);

  003e1	b8 04 00 00 00	 mov	 eax, 4
  003e6	6b c8 0f	 imul	 ecx, eax, 15
  003e9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ef	52		 push	 edx
  003f0	51		 push	 ecx
  003f1	0f 57 c0	 xorps	 xmm0, xmm0
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4c0000
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	0f 57 c0	 xorps	 xmm0, xmm0
  0040b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00410	51		 push	 ecx
  00411	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30cccd
  00419	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2270 : 
; 2271 : 	//
; 2272 : 	// range markers
; 2273 : 	//
; 2274 : 
; 2275 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.25, MFD_COLOUR_YELLOW);

  00423	b8 04 00 00 00	 mov	 eax, 4
  00428	6b c8 0f	 imul	 ecx, eax, 15
  0042b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00431	52		 push	 edx
  00432	51		 push	 ecx
  00433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e59999a
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	0f 57 c0	 xorps	 xmm0, xmm0
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	51		 push	 ecx
  0044a	0f 57 c0	 xorps	 xmm0, xmm0
  0044d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00452	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2276 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.50, MFD_COLOUR_YELLOW);

  00457	b8 04 00 00 00	 mov	 eax, 4
  0045c	6b c8 0f	 imul	 ecx, eax, 15
  0045f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00465	52		 push	 edx
  00466	51		 push	 ecx
  00467	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed9999a
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	51		 push	 ecx
  00475	0f 57 c0	 xorps	 xmm0, xmm0
  00478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047d	51		 push	 ecx
  0047e	0f 57 c0	 xorps	 xmm0, xmm0
  00481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00486	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2277 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.75, MFD_COLOUR_YELLOW);

  0048b	b8 04 00 00 00	 mov	 eax, 4
  00490	6b c8 0f	 imul	 ecx, eax, 15
  00493	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00499	52		 push	 edx
  0049a	51		 push	 ecx
  0049b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f233333
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	51		 push	 ecx
  004a9	0f 57 c0	 xorps	 xmm0, xmm0
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	51		 push	 ecx
  004b2	0f 57 c0	 xorps	 xmm0, xmm0
  004b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ba	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2278 : 
; 2279 : 	//
; 2280 : 	// scan limits
; 2281 : 	//
; 2282 : 
; 2283 : 	if (air_radar.scan_arc_size == HOKUM_RADAR_SCAN_ARC_SIZE_360)

  004bf	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  004c7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  004ce	9f		 lahf
  004cf	f6 c4 44	 test	 ah, 68			; 00000044H
  004d2	7a 39		 jp	 SHORT $LN13@draw_air_r

; 2284 : 	{
; 2285 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR_YELLOW);

  004d4	b8 04 00 00 00	 mov	 eax, 4
  004d9	6b c8 0f	 imul	 ecx, eax, 15
  004dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e2	52		 push	 edx
  004e3	51		 push	 ecx
  004e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  004ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f1	51		 push	 ecx
  004f2	0f 57 c0	 xorps	 xmm0, xmm0
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	0f 57 c0	 xorps	 xmm0, xmm0
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2286 : 	}
; 2287 : 	else

  00508	e9 ab 01 00 00	 jmp	 $LN14@draw_air_r
$LN13@draw_air_r:

; 2288 : 	{
; 2289 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR_YELLOW);

  0050d	b8 04 00 00 00	 mov	 eax, 4
  00512	6b c8 0f	 imul	 ecx, eax, 15
  00515	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0051b	52		 push	 edx
  0051c	51		 push	 ecx
  0051d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00525	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052a	51		 push	 ecx
  0052b	0f 57 c0	 xorps	 xmm0, xmm0
  0052e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00533	51		 push	 ecx
  00534	0f 57 c0	 xorps	 xmm0, xmm0
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2290 : 
; 2291 : 		set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  00541	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00549	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00550	51		 push	 ecx
  00551	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00556	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0055b	50		 push	 eax
  0055c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2292 : 
; 2293 : 		draw_radar_arc (air_radar.scan_arc_size, RADIUS, MFD_COLOUR_YELLOW);

  00561	b8 04 00 00 00	 mov	 eax, 4
  00566	6b c8 0f	 imul	 ecx, eax, 15
  00569	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0056f	52		 push	 edx
  00570	51		 push	 ecx
  00571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2294 : 
; 2295 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR_YELLOW);

  00591	b8 04 00 00 00	 mov	 eax, 4
  00596	6b c8 0f	 imul	 ecx, eax, 15
  00599	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0059f	52		 push	 edx
  005a0	51		 push	 ecx
  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  005a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ae	51		 push	 ecx
  005af	0f 57 c0	 xorps	 xmm0, xmm0
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	51		 push	 ecx
  005b8	0f 57 c0	 xorps	 xmm0, xmm0
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	51		 push	 ecx
  005c1	0f 57 c0	 xorps	 xmm0, xmm0
  005c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2296 : 
; 2297 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  005ce	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  005d6	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  005de	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  005e6	f2 0f 5c c1	 subsd	 xmm0, xmm1
  005ea	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005f5	51		 push	 ecx
  005f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00600	50		 push	 eax
  00601	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2298 : 
; 2299 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR_YELLOW);

  00606	b8 04 00 00 00	 mov	 eax, 4
  0060b	6b c8 0f	 imul	 ecx, eax, 15
  0060e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00614	52		 push	 edx
  00615	51		 push	 ecx
  00616	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0061e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00623	51		 push	 ecx
  00624	0f 57 c0	 xorps	 xmm0, xmm0
  00627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062c	51		 push	 ecx
  0062d	0f 57 c0	 xorps	 xmm0, xmm0
  00630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00635	51		 push	 ecx
  00636	0f 57 c0	 xorps	 xmm0, xmm0
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2300 : 
; 2301 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  00643	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0064b	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00653	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0065b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0065f	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00666	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0066a	51		 push	 ecx
  0066b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00670	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00675	50		 push	 eax
  00676	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2302 : 
; 2303 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR_YELLOW);

  0067b	b8 04 00 00 00	 mov	 eax, 4
  00680	6b c8 0f	 imul	 ecx, eax, 15
  00683	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00689	52		 push	 edx
  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	51		 push	 ecx
  00699	0f 57 c0	 xorps	 xmm0, xmm0
  0069c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a1	51		 push	 ecx
  006a2	0f 57 c0	 xorps	 xmm0, xmm0
  006a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006aa	51		 push	 ecx
  006ab	0f 57 c0	 xorps	 xmm0, xmm0
  006ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN14@draw_air_r:

; 2304 : 	}
; 2305 : 
; 2306 : 	//
; 2307 : 	// sweep
; 2308 : 	//
; 2309 : 
; 2310 : 	if (air_radar_is_active())

  006b8	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  006bd	85 c0		 test	 eax, eax
  006bf	74 65		 je	 SHORT $LN15@draw_air_r

; 2311 : 	{
; 2312 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + air_radar.sweep_offset));

  006c1	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  006c9	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+12
  006d1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006d8	51		 push	 ecx
  006d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e3	50		 push	 eax
  006e4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2313 : 
; 2314 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR_YELLOW);

  006e9	b8 04 00 00 00	 mov	 eax, 4
  006ee	6b c8 0f	 imul	 ecx, eax, 15
  006f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006f7	52		 push	 edx
  006f8	51		 push	 ecx
  006f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00706	51		 push	 ecx
  00707	0f 57 c0	 xorps	 xmm0, xmm0
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	51		 push	 ecx
  00710	0f 57 c0	 xorps	 xmm0, xmm0
  00713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00718	51		 push	 ecx
  00719	0f 57 c0	 xorps	 xmm0, xmm0
  0071c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00721	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN15@draw_air_r:

; 2315 : 	}
; 2316 : 
; 2317 : 	set_2d_window_rotation (mfd_env, 0.0);

  00726	51		 push	 ecx
  00727	0f 57 c0	 xorps	 xmm0, xmm0
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00734	50		 push	 eax
  00735	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2318 : 
; 2319 : 	////////////////////////////////////////
; 2320 : 	//
; 2321 : 	// draw targets
; 2322 : 	//
; 2323 : 	////////////////////////////////////////
; 2324 : 
; 2325 : 	if (!hokum_damage.radar)

  0073a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0073f	83 e0 01	 and	 eax, 1
  00742	0f 85 d7 02 00
	00		 jne	 $LN16@draw_air_r

; 2326 : 	{
; 2327 : 		source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  00748	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  0074c	74 0a		 je	 SHORT $LN39@draw_air_r
  0074e	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00751	8b 08		 mov	 ecx, DWORD PTR [eax]
  00753	89 4d 98	 mov	 DWORD PTR tv329[ebp], ecx
  00756	eb 24		 jmp	 SHORT $LN40@draw_air_r
$LN39@draw_air_r:
  00758	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0075e	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  00764	52		 push	 edx
  00765	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0076a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0076f	50		 push	 eax
  00770	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00775	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv329[ebp], 0
$LN40@draw_air_r:
  0077c	b9 01 00 00 00	 mov	 ecx, 1
  00781	85 c9		 test	 ecx, ecx
  00783	74 09		 je	 SHORT $LN41@draw_air_r
  00785	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv337[ebp], 52 ; 00000034H
  0078c	eb 24		 jmp	 SHORT $LN42@draw_air_r
$LN41@draw_air_r:
  0078e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00794	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  0079a	52		 push	 edx
  0079b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  007a5	50		 push	 eax
  007a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007ab	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv337[ebp], 0
$LN42@draw_air_r:
  007b2	6a 34		 push	 52			; 00000034H
  007b4	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  007b7	51		 push	 ecx
  007b8	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv329[ebp], 700
  007bf	8b 45 94	 mov	 eax, DWORD PTR tv337[ebp]
  007c2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007c9	ff d1		 call	 ecx
  007cb	d9 5d f8	 fstp	 DWORD PTR _source_heading$[ebp]

; 2328 : 
; 2329 : 		set_2d_window_rotation (mfd_env, source_heading);

  007ce	51		 push	 ecx
  007cf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007de	50		 push	 eax
  007df	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2330 : 
; 2331 : 		scale = RADIUS / air_radar.scan_range;

  007e4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  007ec	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feb333333333333
  007f4	f2 0f 5e c8	 divsd	 xmm1, xmm0
  007f8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  007fc	f3 0f 11 45 f4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2332 : 
; 2333 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00801	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00805	74 0a		 je	 SHORT $LN43@draw_air_r
  00807	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0080a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0080c	89 4d 98	 mov	 DWORD PTR tv354[ebp], ecx
  0080f	eb 24		 jmp	 SHORT $LN44@draw_air_r
$LN43@draw_air_r:
  00811	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00817	81 c2 ac 00 00
	00		 add	 edx, 172		; 000000acH
  0081d	52		 push	 edx
  0081e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00823	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00828	50		 push	 eax
  00829	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0082e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv354[ebp], 0
$LN44@draw_air_r:
  00835	b9 01 00 00 00	 mov	 ecx, 1
  0083a	85 c9		 test	 ecx, ecx
  0083c	74 09		 je	 SHORT $LN45@draw_air_r
  0083e	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv362[ebp], 18 ; 00000012H
  00845	eb 24		 jmp	 SHORT $LN46@draw_air_r
$LN45@draw_air_r:
  00847	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0084d	81 c2 ac 00 00
	00		 add	 edx, 172		; 000000acH
  00853	52		 push	 edx
  00854	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00859	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00864	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv362[ebp], 0
$LN46@draw_air_r:
  0086b	6a 12		 push	 18			; 00000012H
  0086d	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00870	51		 push	 ecx
  00871	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv354[ebp], 180
  00878	8b 45 94	 mov	 eax, DWORD PTR tv362[ebp]
  0087b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00882	ff d1		 call	 ecx
  00884	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_air_r:

; 2334 : 
; 2335 : 		while (target)

  00887	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0088b	0f 84 c5 00 00
	00		 je	 $LN3@draw_air_r

; 2336 : 		{
; 2337 : 			if (get_gunship_target_valid_for_air_radar (target))

  00891	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00894	50		 push	 eax
  00895	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_air_radar
  0089a	85 c0		 test	 eax, eax
  0089c	74 2d		 je	 SHORT $LN18@draw_air_r

; 2338 : 			{
; 2339 : 				if (get_target_matches_air_radar_declutter_criteria (target, source_side))

  0089e	8b 45 fc	 mov	 eax, DWORD PTR _source_side$[ebp]
  008a1	50		 push	 eax
  008a2	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  008a5	51		 push	 ecx
  008a6	e8 00 00 00 00	 call	 ?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_target_matches_air_radar_declutter_criteria
  008ab	85 c0		 test	 eax, eax
  008ad	74 1c		 je	 SHORT $LN18@draw_air_r

; 2340 : 				{
; 2341 : //VJ 030423 TSD render mod
; 2342 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  008af	6a 00		 push	 0
  008b1	6a 00		 push	 0
  008b3	51		 push	 ecx
  008b4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  008b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008be	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  008c1	50		 push	 eax
  008c2	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  008c5	51		 push	 ecx
  008c6	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN18@draw_air_r:

; 2343 : 				}
; 2344 : 			}
; 2345 : 
; 2346 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  008cb	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  008cf	74 0a		 je	 SHORT $LN47@draw_air_r
  008d1	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  008d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d6	89 4d 98	 mov	 DWORD PTR tv387[ebp], ecx
  008d9	eb 24		 jmp	 SHORT $LN48@draw_air_r
$LN47@draw_air_r:
  008db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  008e1	81 c2 b9 00 00
	00		 add	 edx, 185		; 000000b9H
  008e7	52		 push	 edx
  008e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008f2	50		 push	 eax
  008f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008f8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv387[ebp], 0
$LN48@draw_air_r:
  008ff	b9 01 00 00 00	 mov	 ecx, 1
  00904	85 c9		 test	 ecx, ecx
  00906	74 09		 je	 SHORT $LN49@draw_air_r
  00908	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv395[ebp], 18 ; 00000012H
  0090f	eb 24		 jmp	 SHORT $LN50@draw_air_r
$LN49@draw_air_r:
  00911	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00917	81 c2 b9 00 00
	00		 add	 edx, 185		; 000000b9H
  0091d	52		 push	 edx
  0091e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00923	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00928	50		 push	 eax
  00929	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0092e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv395[ebp], 0
$LN50@draw_air_r:
  00935	6a 12		 push	 18			; 00000012H
  00937	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  0093a	51		 push	 ecx
  0093b	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv387[ebp], 180
  00942	8b 45 94	 mov	 eax, DWORD PTR tv395[ebp]
  00945	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0094c	ff d1		 call	 ecx
  0094e	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2347 : 		}

  00951	e9 31 ff ff ff	 jmp	 $LN2@draw_air_r
$LN3@draw_air_r:

; 2348 : 
; 2349 : 		//
; 2350 : 		// draw selected target last
; 2351 : 		//
; 2352 : 
; 2353 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00956	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0095d	0f 85 a8 00 00
	00		 jne	 $LN20@draw_air_r

; 2354 : 		{
; 2355 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00963	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00967	74 0a		 je	 SHORT $LN51@draw_air_r
  00969	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0096c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0096e	89 4d 98	 mov	 DWORD PTR tv408[ebp], ecx
  00971	eb 24		 jmp	 SHORT $LN52@draw_air_r
$LN51@draw_air_r:
  00973	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00979	81 c2 c2 00 00
	00		 add	 edx, 194		; 000000c2H
  0097f	52		 push	 edx
  00980	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00985	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0098a	50		 push	 eax
  0098b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00990	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv408[ebp], 0
$LN52@draw_air_r:
  00997	b9 01 00 00 00	 mov	 ecx, 1
  0099c	85 c9		 test	 ecx, ecx
  0099e	74 09		 je	 SHORT $LN53@draw_air_r
  009a0	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv416[ebp], 38 ; 00000026H
  009a7	eb 24		 jmp	 SHORT $LN54@draw_air_r
$LN53@draw_air_r:
  009a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  009af	81 c2 c2 00 00
	00		 add	 edx, 194		; 000000c2H
  009b5	52		 push	 edx
  009b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  009c0	50		 push	 eax
  009c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009c6	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv416[ebp], 0
$LN54@draw_air_r:
  009cd	6a 26		 push	 38			; 00000026H
  009cf	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  009d2	51		 push	 ecx
  009d3	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv408[ebp], 180
  009da	8b 45 94	 mov	 eax, DWORD PTR tv416[ebp]
  009dd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  009e4	ff d1		 call	 ecx
  009e6	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2356 : 
; 2357 : 			if (target)

  009e9	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  009ed	74 1c		 je	 SHORT $LN20@draw_air_r

; 2358 : 			{
; 2359 : //VJ 030423 TSD render mod
; 2360 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE);

  009ef	6a 00		 push	 0
  009f1	6a 01		 push	 1
  009f3	51		 push	 ecx
  009f4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  009f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fe	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  00a01	50		 push	 eax
  00a02	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00a05	51		 push	 ecx
  00a06	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN20@draw_air_r:

; 2361 : 			}
; 2362 : 		}
; 2363 : 
; 2364 : 		set_2d_window_rotation (mfd_env, 0.0);

  00a0b	51		 push	 ecx
  00a0c	0f 57 c0	 xorps	 xmm0, xmm0
  00a0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN16@draw_air_r:

; 2365 : 	}
; 2366 : 
; 2367 : 	////////////////////////////////////////
; 2368 : 	//
; 2369 : 	// damaged
; 2370 : 	//
; 2371 : 	////////////////////////////////////////
; 2372 : 
; 2373 : 	if (hokum_damage.radar)

  00a1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00a24	83 e0 01	 and	 eax, 1
  00a27	0f 84 98 00 00
	00		 je	 $LN21@draw_air_r

; 2374 : 	{
; 2375 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR_YELLOW);

  00a2d	b8 04 00 00 00	 mov	 eax, 4
  00a32	6b c8 0f	 imul	 ecx, eax, 15
  00a35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a3b	52		 push	 edx
  00a3c	51		 push	 ecx
  00a3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4a	51		 push	 ecx
  00a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a58	51		 push	 ecx
  00a59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	51		 push	 ecx
  00a67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a74	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2376 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR_YELLOW);

  00a79	b8 04 00 00 00	 mov	 eax, 4
  00a7e	6b c8 0f	 imul	 ecx, eax, 15
  00a81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a87	52		 push	 edx
  00a88	51		 push	 ecx
  00a89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a96	51		 push	 ecx
  00a97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa4	51		 push	 ecx
  00aa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab2	51		 push	 ecx
  00ab3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN21@draw_air_r:

; 2377 : 	}
; 2378 : }

  00ac5	5f		 pop	 edi
  00ac6	5e		 pop	 esi
  00ac7	5b		 pop	 ebx
  00ac8	8b e5		 mov	 esp, ebp
  00aca	5d		 pop	 ebp
  00acb	c3		 ret	 0
?draw_air_radar_mfd@@YGXXZ ENDP				; draw_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv420 = -112						; size = 4
tv399 = -112						; size = 4
tv367 = -112						; size = 4
tv317 = -112						; size = 4
tv296 = -112						; size = 4
tv215 = -112						; size = 4
tv191 = -112						; size = 4
tv172 = -112						; size = 4
tv130 = -112						; size = 4
tv78 = -112						; size = 4
tv412 = -108						; size = 4
tv391 = -108						; size = 4
tv359 = -108						; size = 4
tv309 = -108						; size = 4
tv288 = -108						; size = 4
tv239 = -108						; size = 4
tv207 = -108						; size = 4
tv184 = -108						; size = 4
tv164 = -108						; size = 4
tv90 = -108						; size = 4
tv70 = -108						; size = 4
_target_position$ = -40					; size = 4
_source_position$ = -36					; size = 4
_target$ = -32						; size = 4
_source$ = -28						; size = 4
_target_range$ = -24					; size = 4
_scale$ = -20						; size = 4
_source_heading$ = -16					; size = 4
_v$ = -12						; size = 4
_u$ = -8						; size = 4
_y_adjust$ = -4						; size = 4
?draw_ground_radar_mfd@@YGXXZ PROC			; draw_ground_radar_mfd, COMDAT

; 1885 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1886 : 	float
; 1887 : 		y_adjust,
; 1888 : 		u,
; 1889 : 		v,
; 1890 : 		source_heading,
; 1891 : 		scale,
; 1892 : 		target_range;
; 1893 : 
; 1894 : 	entity
; 1895 : 		*source,
; 1896 : 		*target;
; 1897 : 
; 1898 : 	vec3d
; 1899 : 		*source_position,
; 1900 : 		*target_position;
; 1901 : 
; 1902 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e4	 mov	 DWORD PTR _source$[ebp], eax

; 1903 : 
; 1904 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN34@draw_groun
  00017	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 94	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN35@draw_groun
$LN34@draw_groun:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00027	83 c2 13	 add	 edx, 19			; 00000013H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN35@draw_groun:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN36@draw_groun
  0004b	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN37@draw_groun
$LN36@draw_groun:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 13	 add	 edx, 19			; 00000013H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN37@draw_groun:
  00075	6a 08		 push	 8
  00077	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 94 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 90	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 dc	 mov	 DWORD PTR _source_position$[ebp], eax

; 1905 : 
; 1906 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0008e	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN38@draw_groun
  00094	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 94	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN39@draw_groun
$LN38@draw_groun:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 15	 add	 edx, 21			; 00000015H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN39@draw_groun:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN40@draw_groun
  000c8	c7 45 90 34 00
	00 00		 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  000cf	eb 21		 jmp	 SHORT $LN41@draw_groun
$LN40@draw_groun:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 15	 add	 edx, 21			; 00000015H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN41@draw_groun:
  000f2	6a 34		 push	 52			; 00000034H
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  000f7	51		 push	 ecx
  000f8	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000ff	8b 45 90	 mov	 eax, DWORD PTR tv130[ebp]
  00102	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00109	ff d1		 call	 ecx
  0010b	d9 5d f0	 fstp	 DWORD PTR _source_heading$[ebp]

; 1907 : 
; 1908 : 	scale = RADIUS / ground_radar.scan_range;

  0010e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  00116	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0011e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00122	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00126	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1909 : 
; 1910 : 	if (draw_large_mfd)

  0012b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00132	74 26		 je	 SHORT $LN8@draw_groun

; 1911 : 	{
; 1912 : 		get_2d_float_screen_coordinates (0.0, -0.6, &u, &v);

  00134	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  00137	50		 push	 eax
  00138	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  0013b	51		 push	 ecx
  0013c	51		 push	 ecx
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	51		 push	 ecx
  0014b	0f 57 c0	 xorps	 xmm0, xmm0
  0014e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00153	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1913 : 	}
; 1914 : 	else

  00158	eb 24		 jmp	 SHORT $LN9@draw_groun
$LN8@draw_groun:

; 1915 : 	{
; 1916 : 		get_2d_float_screen_coordinates (0.0, -0.675, &u, &v);

  0015a	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  0015d	50		 push	 eax
  0015e	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  00161	51		 push	 ecx
  00162	51		 push	 ecx
  00163	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	51		 push	 ecx
  00171	0f 57 c0	 xorps	 xmm0, xmm0
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates
$LN9@draw_groun:

; 1917 : 	}
; 1918 : 
; 1919 : 	u -= mfd_viewport_x_min;

  0017e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00183	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0018b	f3 0f 11 45 f8	 movss	 DWORD PTR _u$[ebp], xmm0

; 1920 : 	v -= mfd_viewport_y_min;

  00190	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00195	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0019d	f3 0f 11 45 f4	 movss	 DWORD PTR _v$[ebp], xmm0

; 1921 : 
; 1922 : 	////////////////////////////////////////
; 1923 : 	//
; 1924 : 	// draw radar clutter
; 1925 : 	//
; 1926 : 	////////////////////////////////////////
; 1927 : 
; 1928 : 	if (!hokum_damage.radar)

  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001a7	83 e0 01	 and	 eax, 1
  001aa	0f 85 38 02 00
	00		 jne	 $LN10@draw_groun

; 1929 : 	{
; 1930 : 		set_hatched_pattern (radar_clutter_hatch_pattern);

  001b0	68 00 00 00 00	 push	 OFFSET ?radar_clutter_hatch_pattern@@3PAIA ; radar_clutter_hatch_pattern
  001b5	e8 00 00 00 00	 call	 ?set_hatched_pattern@@YGXPAI@Z ; set_hatched_pattern

; 1931 : 
; 1932 : 		set_2d_viewport_origin (mfd_env, u, v);

  001ba	51		 push	 ecx
  001bb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  001c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c5	51		 push	 ecx
  001c6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 1933 : 
; 1934 : 		set_2d_window_rotation (mfd_env, source_heading);

  001db	51		 push	 ecx
  001dc	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  001e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1935 : 
; 1936 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  001f1	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  001f5	74 0a		 je	 SHORT $LN42@draw_groun
  001f7	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  001fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fc	89 4d 94	 mov	 DWORD PTR tv164[ebp], ecx
  001ff	eb 21		 jmp	 SHORT $LN43@draw_groun
$LN42@draw_groun:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00207	83 c2 33	 add	 edx, 51			; 00000033H
  0020a	52		 push	 edx
  0020b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00210	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
$LN43@draw_groun:
  00222	b9 01 00 00 00	 mov	 ecx, 1
  00227	85 c9		 test	 ecx, ecx
  00229	74 09		 je	 SHORT $LN44@draw_groun
  0022b	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv172[ebp], 18 ; 00000012H
  00232	eb 21		 jmp	 SHORT $LN45@draw_groun
$LN44@draw_groun:
  00234	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0023a	83 c2 33	 add	 edx, 51			; 00000033H
  0023d	52		 push	 edx
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0024e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN45@draw_groun:
  00255	6a 12		 push	 18			; 00000012H
  00257	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0025a	51		 push	 ecx
  0025b	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv164[ebp], 180
  00262	8b 45 90	 mov	 eax, DWORD PTR tv172[ebp]
  00265	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0026c	ff d1		 call	 ecx
  0026e	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_groun:

; 1937 : 
; 1938 : 		while (target)

  00271	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00275	0f 84 16 01 00
	00		 je	 $LN3@draw_groun

; 1939 : 		{
; 1940 : 			if (get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  0027b	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  0027f	74 0a		 je	 SHORT $LN46@draw_groun
  00281	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00284	8b 08		 mov	 ecx, DWORD PTR [eax]
  00286	89 4d 94	 mov	 DWORD PTR tv184[ebp], ecx
  00289	eb 1d		 jmp	 SHORT $LN47@draw_groun
$LN46@draw_groun:
  0028b	68 94 07 00 00	 push	 1940			; 00000794H
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00295	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0029b	52		 push	 edx
  0029c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002a1	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN47@draw_groun:
  002a8	b8 01 00 00 00	 mov	 eax, 1
  002ad	85 c0		 test	 eax, eax
  002af	74 09		 je	 SHORT $LN48@draw_groun
  002b1	c7 45 90 42 00
	00 00		 mov	 DWORD PTR tv191[ebp], 66 ; 00000042H
  002b8	eb 1d		 jmp	 SHORT $LN49@draw_groun
$LN48@draw_groun:
  002ba	68 94 07 00 00	 push	 1940			; 00000794H
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002ca	51		 push	 ecx
  002cb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d0	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv191[ebp], 0
$LN49@draw_groun:
  002d7	6a 42		 push	 66			; 00000042H
  002d9	8b 55 e0	 mov	 edx, DWORD PTR _target$[ebp]
  002dc	52		 push	 edx
  002dd	69 45 94 5c 04
	00 00		 imul	 eax, DWORD PTR tv184[ebp], 1116
  002e4	8b 4d 90	 mov	 ecx, DWORD PTR tv191[ebp]
  002e7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002ee	ff d2		 call	 edx
  002f0	85 c0		 test	 eax, eax
  002f2	74 18		 je	 SHORT $LN11@draw_groun

; 1941 : 			{
; 1942 : 				draw_ground_radar_clutter (target, source_position, scale);

  002f4	51		 push	 ecx
  002f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  002fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ff	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00302	50		 push	 eax
  00303	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00306	51		 push	 ecx
  00307	e8 00 00 00 00	 call	 ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ; draw_ground_radar_clutter
$LN11@draw_groun:

; 1943 : 			}
; 1944 : 
; 1945 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0030c	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00310	74 0a		 je	 SHORT $LN50@draw_groun
  00312	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00315	8b 08		 mov	 ecx, DWORD PTR [eax]
  00317	89 4d 94	 mov	 DWORD PTR tv207[ebp], ecx
  0031a	eb 21		 jmp	 SHORT $LN51@draw_groun
$LN50@draw_groun:
  0031c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00322	83 c2 3c	 add	 edx, 60			; 0000003cH
  00325	52		 push	 edx
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0032b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00336	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv207[ebp], 0
$LN51@draw_groun:
  0033d	b9 01 00 00 00	 mov	 ecx, 1
  00342	85 c9		 test	 ecx, ecx
  00344	74 09		 je	 SHORT $LN52@draw_groun
  00346	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv215[ebp], 18 ; 00000012H
  0034d	eb 21		 jmp	 SHORT $LN53@draw_groun
$LN52@draw_groun:
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00355	83 c2 3c	 add	 edx, 60			; 0000003cH
  00358	52		 push	 edx
  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00369	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$LN53@draw_groun:
  00370	6a 12		 push	 18			; 00000012H
  00372	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00375	51		 push	 ecx
  00376	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv207[ebp], 180
  0037d	8b 45 90	 mov	 eax, DWORD PTR tv215[ebp]
  00380	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00387	ff d1		 call	 ecx
  00389	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 1946 : 		}

  0038c	e9 e0 fe ff ff	 jmp	 $LN2@draw_groun
$LN3@draw_groun:

; 1947 : 
; 1948 : 		set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00391	51		 push	 ecx
  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0039a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039f	51		 push	 ecx
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	51		 push	 ecx
  003ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bb	51		 push	 ecx
  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1949 : 
; 1950 : 		set_2d_window_rotation (mfd_env, 0.0);

  003d4	51		 push	 ecx
  003d5	0f 57 c0	 xorps	 xmm0, xmm0
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003e2	50		 push	 eax
  003e3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN10@draw_groun:

; 1951 : 	}
; 1952 : 
; 1953 : 	////////////////////////////////////////
; 1954 : 	//
; 1955 : 	// text
; 1956 : 	//
; 1957 : 	////////////////////////////////////////
; 1958 : 
; 1959 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  003e8	b8 04 00 00 00	 mov	 eax, 4
  003ed	6b c8 0d	 imul	 ecx, eax, 13
  003f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003f6	52		 push	 edx
  003f7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1960 : 
; 1961 : 	if (draw_large_mfd)

  003fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00403	74 09		 je	 SHORT $LN12@draw_groun

; 1962 : 	{
; 1963 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00405	6a 05		 push	 5
  00407	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1964 : 	}
; 1965 : 	else

  0040c	eb 07		 jmp	 SHORT $LN13@draw_groun
$LN12@draw_groun:

; 1966 : 	{
; 1967 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0040e	6a 01		 push	 1
  00410	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN13@draw_groun:

; 1968 : 	}
; 1969 : 
; 1970 : 	//
; 1971 : 	// declutter status
; 1972 : 	//
; 1973 : 
; 1974 : 	if (draw_large_mfd)

  00415	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0041c	74 0f		 je	 SHORT $LN14@draw_groun

; 1975 : 	{
; 1976 : 		y_adjust = 5.0;

  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00426	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1977 : 	}
; 1978 : 	else

  0042b	eb 0d		 jmp	 SHORT $LN15@draw_groun
$LN14@draw_groun:

; 1979 : 	{
; 1980 : 		y_adjust = 2.0;

  0042d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00435	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@draw_groun:

; 1981 : 	}
; 1982 : 
; 1983 : 	set_2d_mono_font_position (-1.0, 1.0);

  0043a	51		 push	 ecx
  0043b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00448	51		 push	 ecx
  00449	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1984 : 
; 1985 : 	set_mono_font_rel_position (1.0, y_adjust);

  0045b	51		 push	 ecx
  0045c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00461	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00466	51		 push	 ecx
  00467	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1986 : 
; 1987 : 	switch (ground_radar.target_priority_type)

  00479	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+44
  0047e	89 45 94	 mov	 DWORD PTR tv239[ebp], eax
  00481	83 7d 94 04	 cmp	 DWORD PTR tv239[ebp], 4
  00485	77 59		 ja	 SHORT $LN4@draw_groun
  00487	8b 4d 94	 mov	 ecx, DWORD PTR tv239[ebp]
  0048a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN74@draw_groun[ecx*4]
$LN16@draw_groun:

; 1988 : 	{
; 1989 : 		case TARGET_PRIORITY_UNKNOWN:
; 1990 : 		{
; 1991 : 			print_mono_font_string ("ALL");

  00491	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  00496	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1992 : 
; 1993 : 			break;

  0049b	eb 43		 jmp	 SHORT $LN4@draw_groun
$LN17@draw_groun:

; 1994 : 		}
; 1995 : 		case TARGET_PRIORITY_LOW:
; 1996 : 		{
; 1997 : 			print_mono_font_string ("LOW");

  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  004a2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1998 : 
; 1999 : 			break;

  004a7	eb 37		 jmp	 SHORT $LN4@draw_groun
$LN18@draw_groun:

; 2000 : 		}
; 2001 : 		case TARGET_PRIORITY_MEDIUM:
; 2002 : 		{
; 2003 : 			if (draw_large_mfd)

  004a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004b0	74 0c		 je	 SHORT $LN19@draw_groun

; 2004 : 			{
; 2005 : 				print_mono_font_string ("MEDIUM");

  004b2	68 00 00 00 00	 push	 OFFSET ??_C@_06HMBFJLMK@MEDIUM@
  004b7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2006 : 			}
; 2007 : 			else

  004bc	eb 0a		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:

; 2008 : 			{
; 2009 : 				print_mono_font_string ("MED");

  004be	68 00 00 00 00	 push	 OFFSET ??_C@_03FFIBGFCJ@MED@
  004c3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN20@draw_groun:

; 2010 : 			}
; 2011 : 
; 2012 : 			break;

  004c8	eb 16		 jmp	 SHORT $LN4@draw_groun
$LN21@draw_groun:

; 2013 : 		}
; 2014 : 		case TARGET_PRIORITY_HIGH:
; 2015 : 		{
; 2016 : 			print_mono_font_string ("HIGH");

  004ca	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  004cf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2017 : 
; 2018 : 			break;

  004d4	eb 0a		 jmp	 SHORT $LN4@draw_groun
$LN22@draw_groun:

; 2019 : 		}
; 2020 : 		// Jabberwock 031107 Designated targets
; 2021 : 		case TARGET_PRIORITY_DESIGNATED:
; 2022 : 		{
; 2023 : 			print_mono_font_string ("MARK");

  004d6	68 00 00 00 00	 push	 OFFSET ??_C@_04MGKDMHFC@MARK@
  004db	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN4@draw_groun:

; 2024 : 
; 2025 : 			break;
; 2026 : 		}
; 2027 : 		// Jabberwock 031107 ends
; 2028 : 	}
; 2029 : 
; 2030 : 	//
; 2031 : 	// scan range
; 2032 : 	//
; 2033 : 
; 2034 : 	display_radar_scan_range (ground_radar.scan_range);

  004e0	51		 push	 ecx
  004e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  004e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ee	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 2035 : 
; 2036 : 	//
; 2037 : 	// target details
; 2038 : 	//
; 2039 : 
; 2040 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  004f3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  004fa	0f 85 46 01 00
	00		 jne	 $LN23@draw_groun

; 2041 : 	{
; 2042 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00500	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00504	74 0a		 je	 SHORT $LN54@draw_groun
  00506	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00509	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050b	89 4d 94	 mov	 DWORD PTR tv288[ebp], ecx
  0050e	eb 24		 jmp	 SHORT $LN55@draw_groun
$LN54@draw_groun:
  00510	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00516	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  0051c	52		 push	 edx
  0051d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00522	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0052d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN55@draw_groun:
  00534	b9 01 00 00 00	 mov	 ecx, 1
  00539	85 c9		 test	 ecx, ecx
  0053b	74 09		 je	 SHORT $LN56@draw_groun
  0053d	c7 45 90 26 00
	00 00		 mov	 DWORD PTR tv296[ebp], 38 ; 00000026H
  00544	eb 24		 jmp	 SHORT $LN57@draw_groun
$LN56@draw_groun:
  00546	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0054c	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00552	52		 push	 edx
  00553	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00558	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00563	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv296[ebp], 0
$LN57@draw_groun:
  0056a	6a 26		 push	 38			; 00000026H
  0056c	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0056f	51		 push	 ecx
  00570	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv288[ebp], 180
  00577	8b 45 90	 mov	 eax, DWORD PTR tv296[ebp]
  0057a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00581	ff d1		 call	 ecx
  00583	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2043 : 
; 2044 : 		if (target)

  00586	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  0058a	0f 84 95 00 00
	00		 je	 $LN24@draw_groun

; 2045 : 		{
; 2046 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00590	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00594	74 0a		 je	 SHORT $LN58@draw_groun
  00596	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00599	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059b	89 4d 94	 mov	 DWORD PTR tv309[ebp], ecx
  0059e	eb 24		 jmp	 SHORT $LN59@draw_groun
$LN58@draw_groun:
  005a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  005a6	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  005ac	52		 push	 edx
  005ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005b7	50		 push	 eax
  005b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005bd	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv309[ebp], 0
$LN59@draw_groun:
  005c4	b9 01 00 00 00	 mov	 ecx, 1
  005c9	85 c9		 test	 ecx, ecx
  005cb	74 09		 je	 SHORT $LN60@draw_groun
  005cd	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv317[ebp], 8
  005d4	eb 24		 jmp	 SHORT $LN61@draw_groun
$LN60@draw_groun:
  005d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  005dc	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  005e2	52		 push	 edx
  005e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  005ed	50		 push	 eax
  005ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005f3	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv317[ebp], 0
$LN61@draw_groun:
  005fa	6a 08		 push	 8
  005fc	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  005ff	51		 push	 ecx
  00600	6b 55 94 60	 imul	 edx, DWORD PTR tv309[ebp], 96
  00604	8b 45 90	 mov	 eax, DWORD PTR tv317[ebp]
  00607	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0060e	ff d1		 call	 ecx
  00610	89 45 d8	 mov	 DWORD PTR _target_position$[ebp], eax

; 2047 : 
; 2048 : 			target_range = get_3d_range (source_position, target_position);

  00613	8b 45 d8	 mov	 eax, DWORD PTR _target_position$[ebp]
  00616	50		 push	 eax
  00617	8b 4d dc	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0061a	51		 push	 ecx
  0061b	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00620	d9 5d e8	 fstp	 DWORD PTR _target_range$[ebp]

; 2049 : 		}
; 2050 : 		else

  00623	eb 08		 jmp	 SHORT $LN25@draw_groun
$LN24@draw_groun:

; 2051 : 		{
; 2052 : 			target_range = 0.0;

  00625	0f 57 c0	 xorps	 xmm0, xmm0
  00628	f3 0f 11 45 e8	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN25@draw_groun:

; 2053 : 		}
; 2054 : 
; 2055 : 		display_radar_target_details (target, target_range, &ground_radar);

  0062d	68 00 00 00 00	 push	 OFFSET ?ground_radar@@3URADAR_PARAMS@@A ; ground_radar
  00632	51		 push	 ecx
  00633	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00640	50		 push	 eax
  00641	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN23@draw_groun:

; 2056 : 	}
; 2057 : 
; 2058 : 	////////////////////////////////////////
; 2059 : 	//
; 2060 : 	// line graphics
; 2061 : 	//
; 2062 : 	////////////////////////////////////////
; 2063 : 
; 2064 : 	set_2d_viewport_origin (mfd_env, u, v);

  00646	51		 push	 ecx
  00647	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0064c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00651	51		 push	 ecx
  00652	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00657	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00661	50		 push	 eax
  00662	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2065 : 
; 2066 : 	//
; 2067 : 	// max scan limits
; 2068 : 	//
; 2069 : 
; 2070 : 	draw_radar_range_arcs(RADIUS);

  00667	51		 push	 ecx
  00668	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  00670	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00675	e8 00 00 00 00	 call	 ?draw_radar_range_arcs@@YGXM@Z ; draw_radar_range_arcs

; 2071 : 
; 2072 : 	//
; 2073 : 	// sweep
; 2074 : 	//
; 2075 : 
; 2076 : 	if (ground_radar_is_active())

  0067a	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  0067f	85 c0		 test	 eax, eax
  00681	74 65		 je	 SHORT $LN26@draw_groun

; 2077 : 	{
; 2078 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + ground_radar.sweep_offset));

  00683	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0068b	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+12
  00693	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0069a	51		 push	 ecx
  0069b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006a5	50		 push	 eax
  006a6	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2079 : 
; 2080 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR_YELLOW);

  006ab	b8 04 00 00 00	 mov	 eax, 4
  006b0	6b c8 0f	 imul	 ecx, eax, 15
  006b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006b9	52		 push	 edx
  006ba	51		 push	 ecx
  006bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  006c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c8	51		 push	 ecx
  006c9	0f 57 c0	 xorps	 xmm0, xmm0
  006cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d1	51		 push	 ecx
  006d2	0f 57 c0	 xorps	 xmm0, xmm0
  006d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006da	51		 push	 ecx
  006db	0f 57 c0	 xorps	 xmm0, xmm0
  006de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN26@draw_groun:

; 2081 : 	}
; 2082 : 
; 2083 : 	set_2d_window_rotation (mfd_env, 0.0);

  006e8	51		 push	 ecx
  006e9	0f 57 c0	 xorps	 xmm0, xmm0
  006ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006f6	50		 push	 eax
  006f7	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2084 : 
; 2085 : 	////////////////////////////////////////
; 2086 : 	//
; 2087 : 	// targets
; 2088 : 	//
; 2089 : 	////////////////////////////////////////
; 2090 : 
; 2091 : 	if (!hokum_damage.radar)

  006fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00701	83 e0 01	 and	 eax, 1
  00704	0f 85 30 02 00
	00		 jne	 $LN27@draw_groun

; 2092 : 	{
; 2093 : 		set_2d_window_rotation (mfd_env, source_heading);

  0070a	51		 push	 ecx
  0070b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00710	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00715	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0071a	50		 push	 eax
  0071b	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2094 : 
; 2095 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00720	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00724	74 0a		 je	 SHORT $LN62@draw_groun
  00726	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00729	8b 08		 mov	 ecx, DWORD PTR [eax]
  0072b	89 4d 94	 mov	 DWORD PTR tv359[ebp], ecx
  0072e	eb 24		 jmp	 SHORT $LN63@draw_groun
$LN62@draw_groun:
  00730	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00736	81 c2 d2 00 00
	00		 add	 edx, 210		; 000000d2H
  0073c	52		 push	 edx
  0073d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00742	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00747	50		 push	 eax
  00748	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0074d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv359[ebp], 0
$LN63@draw_groun:
  00754	b9 01 00 00 00	 mov	 ecx, 1
  00759	85 c9		 test	 ecx, ecx
  0075b	74 09		 je	 SHORT $LN64@draw_groun
  0075d	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv367[ebp], 18 ; 00000012H
  00764	eb 24		 jmp	 SHORT $LN65@draw_groun
$LN64@draw_groun:
  00766	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0076c	81 c2 d2 00 00
	00		 add	 edx, 210		; 000000d2H
  00772	52		 push	 edx
  00773	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00778	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0077d	50		 push	 eax
  0077e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00783	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv367[ebp], 0
$LN65@draw_groun:
  0078a	6a 12		 push	 18			; 00000012H
  0078c	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0078f	51		 push	 ecx
  00790	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv359[ebp], 180
  00797	8b 45 90	 mov	 eax, DWORD PTR tv367[ebp]
  0079a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  007a1	ff d1		 call	 ecx
  007a3	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax
$LN6@draw_groun:

; 2096 : 
; 2097 : 		while (target)

  007a6	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  007aa	0f 84 c1 00 00
	00		 je	 $LN7@draw_groun

; 2098 : 		{
; 2099 : 			if (get_gunship_target_valid_for_ground_radar (target))

  007b0	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  007b3	50		 push	 eax
  007b4	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_ground_radar
  007b9	85 c0		 test	 eax, eax
  007bb	74 29		 je	 SHORT $LN29@draw_groun

; 2100 : 			{
; 2101 : 				if (get_target_matches_ground_radar_declutter_criteria (target))

  007bd	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  007c0	50		 push	 eax
  007c1	e8 00 00 00 00	 call	 ?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z ; get_target_matches_ground_radar_declutter_criteria
  007c6	85 c0		 test	 eax, eax
  007c8	74 1c		 je	 SHORT $LN29@draw_groun

; 2102 : 				{
; 2103 : //VJ 030423 TSD render mod
; 2104 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  007ca	6a 00		 push	 0
  007cc	6a 00		 push	 0
  007ce	51		 push	 ecx
  007cf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  007dc	50		 push	 eax
  007dd	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  007e0	51		 push	 ecx
  007e1	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN29@draw_groun:

; 2105 : 				}
; 2106 : 			}
; 2107 : 
; 2108 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  007e6	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  007ea	74 0a		 je	 SHORT $LN66@draw_groun
  007ec	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  007ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  007f1	89 4d 94	 mov	 DWORD PTR tv391[ebp], ecx
  007f4	eb 24		 jmp	 SHORT $LN67@draw_groun
$LN66@draw_groun:
  007f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  007fc	81 c2 df 00 00
	00		 add	 edx, 223		; 000000dfH
  00802	52		 push	 edx
  00803	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00808	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0080d	50		 push	 eax
  0080e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00813	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv391[ebp], 0
$LN67@draw_groun:
  0081a	b9 01 00 00 00	 mov	 ecx, 1
  0081f	85 c9		 test	 ecx, ecx
  00821	74 09		 je	 SHORT $LN68@draw_groun
  00823	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv399[ebp], 18 ; 00000012H
  0082a	eb 24		 jmp	 SHORT $LN69@draw_groun
$LN68@draw_groun:
  0082c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00832	81 c2 df 00 00
	00		 add	 edx, 223		; 000000dfH
  00838	52		 push	 edx
  00839	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0083e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00843	50		 push	 eax
  00844	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00849	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv399[ebp], 0
$LN69@draw_groun:
  00850	6a 12		 push	 18			; 00000012H
  00852	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00855	51		 push	 ecx
  00856	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv391[ebp], 180
  0085d	8b 45 90	 mov	 eax, DWORD PTR tv399[ebp]
  00860	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00867	ff d1		 call	 ecx
  00869	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2109 : 		}

  0086c	e9 35 ff ff ff	 jmp	 $LN6@draw_groun
$LN7@draw_groun:

; 2110 : 
; 2111 : 		//
; 2112 : 		// draw selected target last
; 2113 : 		//
; 2114 : 
; 2115 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00871	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  00878	0f 85 a8 00 00
	00		 jne	 $LN31@draw_groun

; 2116 : 		{
; 2117 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0087e	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00882	74 0a		 je	 SHORT $LN70@draw_groun
  00884	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00887	8b 08		 mov	 ecx, DWORD PTR [eax]
  00889	89 4d 94	 mov	 DWORD PTR tv412[ebp], ecx
  0088c	eb 24		 jmp	 SHORT $LN71@draw_groun
$LN70@draw_groun:
  0088e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00894	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  0089a	52		 push	 edx
  0089b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008a5	50		 push	 eax
  008a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ab	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv412[ebp], 0
$LN71@draw_groun:
  008b2	b9 01 00 00 00	 mov	 ecx, 1
  008b7	85 c9		 test	 ecx, ecx
  008b9	74 09		 je	 SHORT $LN72@draw_groun
  008bb	c7 45 90 26 00
	00 00		 mov	 DWORD PTR tv420[ebp], 38 ; 00000026H
  008c2	eb 24		 jmp	 SHORT $LN73@draw_groun
$LN72@draw_groun:
  008c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  008ca	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  008d0	52		 push	 edx
  008d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008db	50		 push	 eax
  008dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008e1	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv420[ebp], 0
$LN73@draw_groun:
  008e8	6a 26		 push	 38			; 00000026H
  008ea	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  008ed	51		 push	 ecx
  008ee	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv412[ebp], 180
  008f5	8b 45 90	 mov	 eax, DWORD PTR tv420[ebp]
  008f8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008ff	ff d1		 call	 ecx
  00901	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2118 : 
; 2119 : 			if (target)

  00904	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00908	74 1c		 je	 SHORT $LN31@draw_groun

; 2120 : 			{
; 2121 : //VJ 030423 TSD render mod
; 2122 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE);

  0090a	6a 00		 push	 0
  0090c	6a 01		 push	 1
  0090e	51		 push	 ecx
  0090f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00914	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00919	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  0091c	50		 push	 eax
  0091d	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00920	51		 push	 ecx
  00921	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN31@draw_groun:

; 2123 : 			}
; 2124 : 		}
; 2125 : 
; 2126 : 		set_2d_window_rotation (mfd_env, 0.0);

  00926	51		 push	 ecx
  00927	0f 57 c0	 xorps	 xmm0, xmm0
  0092a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00934	50		 push	 eax
  00935	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN27@draw_groun:

; 2127 : 	}
; 2128 : 
; 2129 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0093a	51		 push	 ecx
  0093b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00943	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00948	51		 push	 ecx
  00949	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00951	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00956	51		 push	 ecx
  00957	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0095f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00964	51		 push	 ecx
  00965	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0096d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00972	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00977	50		 push	 eax
  00978	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2130 : 
; 2131 : 	////////////////////////////////////////
; 2132 : 	//
; 2133 : 	// damaged
; 2134 : 	//
; 2135 : 	////////////////////////////////////////
; 2136 : 
; 2137 : 	if (hokum_damage.radar)

  0097d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00982	83 e0 01	 and	 eax, 1
  00985	0f 84 98 00 00
	00		 je	 $LN32@draw_groun

; 2138 : 	{
; 2139 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR_YELLOW);

  0098b	b8 04 00 00 00	 mov	 eax, 4
  00990	6b c8 0f	 imul	 ecx, eax, 15
  00993	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00999	52		 push	 edx
  0099a	51		 push	 ecx
  0099b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a8	51		 push	 ecx
  009a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b6	51		 push	 ecx
  009b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  009bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c4	51		 push	 ecx
  009c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  009cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2140 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR_YELLOW);

  009d7	b8 04 00 00 00	 mov	 eax, 4
  009dc	6b c8 0f	 imul	 ecx, eax, 15
  009df	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e5	52		 push	 edx
  009e6	51		 push	 ecx
  009e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f4	51		 push	 ecx
  009f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  009fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a02	51		 push	 ecx
  00a03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a10	51		 push	 ecx
  00a11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN32@draw_groun:

; 2141 : 	}
; 2142 : }

  00a23	5f		 pop	 edi
  00a24	5e		 pop	 esi
  00a25	5b		 pop	 ebx
  00a26	8b e5		 mov	 esp, ebp
  00a28	5d		 pop	 ebp
  00a29	c3		 ret	 0
  00a2a	66 90		 npad	 2
$LN74@draw_groun:
  00a2c	00 00 00 00	 DD	 $LN16@draw_groun
  00a30	00 00 00 00	 DD	 $LN17@draw_groun
  00a34	00 00 00 00	 DD	 $LN18@draw_groun
  00a38	00 00 00 00	 DD	 $LN21@draw_groun
  00a3c	00 00 00 00	 DD	 $LN22@draw_groun
?draw_ground_radar_mfd@@YGXXZ ENDP			; draw_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_radar_range_arcs@@YGXM@Z
_TEXT	SEGMENT
tv240 = -116						; size = 4
tv87 = -112						; size = 4
tv264 = -108						; size = 4
tv79 = -108						; size = 4
_x_adjust$1 = -40					; size = 4
_s$2 = -36						; size = 20
_relative_heading$3 = -16				; size = 4
_mod_heading$4 = -12					; size = 4
_int_heading$5 = -8					; size = 4
_heading$6 = -4						; size = 4
_radius$ = 8						; size = 4
?draw_radar_range_arcs@@YGXM@Z PROC			; draw_radar_range_arcs, COMDAT

; 1822 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1823 : 	draw_radar_arc (HOKUM_RADAR_SCAN_ARC_SIZE_90, radius, MFD_COLOUR_YELLOW);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 0f	 imul	 ecx, eax, 15
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	51		 push	 ecx
  00019	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _radius$[ebp]
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	51		 push	 ecx
  00024	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1824 : 
; 1825 : 	// heading scale
; 1826 : 	set_mono_font_type(MONO_FONT_TYPE_5X7);

  00036	6a 01		 push	 1
  00038	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1827 : 	set_mono_font_colour(MFD_COLOUR_YELLOW);

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 0f	 imul	 ecx, eax, 15
  00045	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1828 : 
; 1829 : 	{
; 1830 : 		float heading = deg(get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING));

  00051	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00058	74 0c		 je	 SHORT $LN8@draw_radar
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	89 4d 94	 mov	 DWORD PTR tv79[ebp], ecx
  00064	eb 21		 jmp	 SHORT $LN9@draw_radar
$LN8@draw_radar:
  00066	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_range_arcs@@YGXM@Z@4JA
  0006c	83 c2 08	 add	 edx, 8
  0006f	52		 push	 edx
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00080	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN9@draw_radar:
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	85 c9		 test	 ecx, ecx
  0008e	74 09		 je	 SHORT $LN10@draw_radar
  00090	c7 45 90 34 00
	00 00		 mov	 DWORD PTR tv87[ebp], 52	; 00000034H
  00097	eb 21		 jmp	 SHORT $LN11@draw_radar
$LN10@draw_radar:
  00099	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_range_arcs@@YGXM@Z@4JA
  0009f	83 c2 08	 add	 edx, 8
  000a2	52		 push	 edx
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b3	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN11@draw_radar:
  000ba	6a 34		 push	 52			; 00000034H
  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000c2	51		 push	 ecx
  000c3	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv79[ebp], 700
  000ca	8b 45 90	 mov	 eax, DWORD PTR tv87[ebp]
  000cd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000d4	ff d1		 call	 ecx
  000d6	d9 5d 8c	 fstp	 DWORD PTR tv240[ebp]
  000d9	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv240[ebp]
  000de	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  000e6	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$6[ebp], xmm0

; 1831 : 		int int_heading = (int)((heading + 0.5) / 10.0) * 10;

  000eb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading$6[ebp]
  000f0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000f8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  00100	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00104	6b c8 0a	 imul	 ecx, eax, 10
  00107	89 4d f8	 mov	 DWORD PTR _int_heading$5[ebp], ecx

; 1832 : 		float mod_heading = rad(heading - int_heading);

  0010a	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _int_heading$5[ebp]
  0010f	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _heading$6[ebp]
  00114	f3 0f 5c c8	 subss	 xmm1, xmm0
  00118	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3c8efa35
  00120	f3 0f 11 4d f4	 movss	 DWORD PTR _mod_heading$4[ebp], xmm1

; 1833 : 		float relative_heading = mod_heading + rad(60);

  00125	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mod_heading$4[ebp]
  0012a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f860a92
  00132	f3 0f 11 45 f0	 movss	 DWORD PTR _relative_heading$3[ebp], xmm0

; 1834 : 
; 1835 : 		int_heading -= 60;

  00137	8b 45 f8	 mov	 eax, DWORD PTR _int_heading$5[ebp]
  0013a	83 e8 3c	 sub	 eax, 60			; 0000003cH
  0013d	89 45 f8	 mov	 DWORD PTR _int_heading$5[ebp], eax

; 1836 : 		if (int_heading <= 0)

  00140	83 7d f8 00	 cmp	 DWORD PTR _int_heading$5[ebp], 0
  00144	7f 0b		 jg	 SHORT $LN4@draw_radar

; 1837 : 			int_heading += 360;

  00146	8b 45 f8	 mov	 eax, DWORD PTR _int_heading$5[ebp]
  00149	05 68 01 00 00	 add	 eax, 360		; 00000168H
  0014e	89 45 f8	 mov	 DWORD PTR _int_heading$5[ebp], eax
$LN4@draw_radar:

; 1838 : 
; 1839 : 		while (relative_heading > -rad(45.0))

  00151	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _relative_heading$3[ebp]
  00156	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfe921fb51000000
  0015e	0f 86 2e 01 00
	00		 jbe	 $LN3@draw_radar

; 1840 : 		{
; 1841 : 			char s[20];
; 1842 : 			float x_adjust;
; 1843 : 
; 1844 : 			if (relative_heading <= rad(45))

  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  0016c	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _relative_heading$3[ebp]
  00170	0f 82 e4 00 00
	00		 jb	 $LN5@draw_radar

; 1845 : 			{
; 1846 : 				set_2d_window_rotation (mfd_env, relative_heading);

  00176	51		 push	 ecx
  00177	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _relative_heading$3[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1847 : 				draw_2d_line(0.0, radius, 0.0, radius + 0.03, MFD_COLOUR_YELLOW);

  0018c	b8 04 00 00 00	 mov	 eax, 4
  00191	6b c8 0f	 imul	 ecx, eax, 15
  00194	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0019a	52		 push	 edx
  0019b	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  001a0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b2	51		 push	 ecx
  001b3	0f 57 c0	 xorps	 xmm0, xmm0
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	51		 push	 ecx
  001bc	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _radius$[ebp]
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	51		 push	 ecx
  001c7	0f 57 c0	 xorps	 xmm0, xmm0
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1848 : 
; 1849 : 				sprintf(s, "%d", int_heading);

  001d4	8b 45 f8	 mov	 eax, DWORD PTR _int_heading$5[ebp]
  001d7	50		 push	 eax
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001dd	8d 4d dc	 lea	 ecx, DWORD PTR _s$2[ebp]
  001e0	51		 push	 ecx
  001e1	e8 00 00 00 00	 call	 _sprintf
  001e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1850 : 				x_adjust = -get_mono_font_string_width(s) / 2;

  001e9	8d 45 dc	 lea	 eax, DWORD PTR _s$2[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  001f2	d9 5d 94	 fstp	 DWORD PTR tv264[ebp]
  001f5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv264[ebp]
  001fa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00201	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00209	f3 0f 11 45 d8	 movss	 DWORD PTR _x_adjust$1[ebp], xmm0

; 1851 : 
; 1852 : 				set_2d_mono_font_position(0.0, radius + 0.06);

  0020e	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00213	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  0021b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021f	51		 push	 ecx
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	51		 push	 ecx
  00226	0f 57 c0	 xorps	 xmm0, xmm0
  00229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1853 : 				set_mono_font_rel_position(x_adjust, -2.0);

  00233	51		 push	 ecx
  00234	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0023c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00241	51		 push	 ecx
  00242	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x_adjust$1[ebp]
  00247	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1854 : 
; 1855 : 				print_mono_font_string(s);

  00251	8d 45 dc	 lea	 eax, DWORD PTR _s$2[ebp]
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@draw_radar:

; 1856 : 			}
; 1857 : 
; 1858 : 			int_heading += 10;

  0025a	8b 45 f8	 mov	 eax, DWORD PTR _int_heading$5[ebp]
  0025d	83 c0 0a	 add	 eax, 10			; 0000000aH
  00260	89 45 f8	 mov	 DWORD PTR _int_heading$5[ebp], eax

; 1859 : 			if (int_heading > 360)

  00263	81 7d f8 68 01
	00 00		 cmp	 DWORD PTR _int_heading$5[ebp], 360 ; 00000168H
  0026a	7e 0b		 jle	 SHORT $LN6@draw_radar

; 1860 : 				int_heading -= 360;

  0026c	8b 45 f8	 mov	 eax, DWORD PTR _int_heading$5[ebp]
  0026f	2d 68 01 00 00	 sub	 eax, 360		; 00000168H
  00274	89 45 f8	 mov	 DWORD PTR _int_heading$5[ebp], eax
$LN6@draw_radar:

; 1861 : 			relative_heading -= rad(10.0);

  00277	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _relative_heading$3[ebp]
  0027c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00284	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00288	f3 0f 11 45 f0	 movss	 DWORD PTR _relative_heading$3[ebp], xmm0

; 1862 : 		}

  0028d	e9 bf fe ff ff	 jmp	 $LN4@draw_radar
$LN3@draw_radar:

; 1863 : 	}
; 1864 : 
; 1865 : 	//
; 1866 : 	// scan limits and range markers
; 1867 : 	//
; 1868 : 
; 1869 : 	set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  00292	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0029a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002a1	51		 push	 ecx
  002a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1870 : 
; 1871 : 	draw_radar_arc (ground_radar.scan_arc_size, radius, MFD_COLOUR_YELLOW);

  002b2	b8 04 00 00 00	 mov	 eax, 4
  002b7	6b c8 0f	 imul	 ecx, eax, 15
  002ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002c0	52		 push	 edx
  002c1	51		 push	 ecx
  002c2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _radius$[ebp]
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	51		 push	 ecx
  002cd	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  002d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002da	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1872 : 
; 1873 : 	draw_radar_arc (ground_radar.scan_arc_size, radius * 0.25, MFD_COLOUR_YELLOW);

  002df	b8 04 00 00 00	 mov	 eax, 4
  002e4	6b c8 0f	 imul	 ecx, eax, 15
  002e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002ed	52		 push	 edx
  002ee	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  002f3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  002fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ff	51		 push	 ecx
  00300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00305	51		 push	 ecx
  00306	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0030e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00313	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1874 : 	draw_radar_arc (ground_radar.scan_arc_size, radius * 0.50, MFD_COLOUR_YELLOW);

  00318	b8 04 00 00 00	 mov	 eax, 4
  0031d	6b c8 0f	 imul	 ecx, eax, 15
  00320	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00326	52		 push	 edx
  00327	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  0032c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00334	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00338	51		 push	 ecx
  00339	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033e	51		 push	 ecx
  0033f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00347	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1875 : 	draw_radar_arc (ground_radar.scan_arc_size, radius * 0.75, MFD_COLOUR_YELLOW);

  00351	b8 04 00 00 00	 mov	 eax, 4
  00356	6b c8 0f	 imul	 ecx, eax, 15
  00359	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0035f	52		 push	 edx
  00360	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00365	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  0036d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00371	51		 push	 ecx
  00372	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00377	51		 push	 ecx
  00378	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1876 : 
; 1877 : 	set_2d_window_rotation (mfd_env, 0.0);

  0038a	51		 push	 ecx
  0038b	0f 57 c0	 xorps	 xmm0, xmm0
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1878 : 
; 1879 : 	draw_2d_line(0.0, 0.0, 0.0, radius, MFD_COLOUR_YELLOW);

  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	6b c8 0f	 imul	 ecx, eax, 15
  003a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ac	52		 push	 edx
  003ad	51		 push	 ecx
  003ae	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _radius$[ebp]
  003b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b8	51		 push	 ecx
  003b9	0f 57 c0	 xorps	 xmm0, xmm0
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	51		 push	 ecx
  003c2	0f 57 c0	 xorps	 xmm0, xmm0
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	0f 57 c0	 xorps	 xmm0, xmm0
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1880 : }

  003d8	5f		 pop	 edi
  003d9	5e		 pop	 esi
  003da	5b		 pop	 ebx
  003db	8b e5		 mov	 esp, ebp
  003dd	5d		 pop	 ebp
  003de	c2 04 00	 ret	 4
?draw_radar_range_arcs@@YGXM@Z ENDP			; draw_radar_range_arcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z
_TEXT	SEGMENT
tv180 = -100						; size = 4
tv160 = -100						; size = 4
tv132 = -100						; size = 4
tv172 = -96						; size = 4
tv152 = -96						; size = 4
tv92 = -96						; size = 4
tv80 = -96						; size = 4
$T1 = -92						; size = 4
_bounding_box_max$ = -24				; size = 4
_bounding_box_min$ = -20				; size = 4
_target_position$ = -16					; size = 4
_radius$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z PROC ; draw_ground_radar_clutter, COMDAT

; 1778 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1779 : 	float
; 1780 : 		dx,
; 1781 : 		dy,
; 1782 : 		radius;
; 1783 : 
; 1784 : 	vec3d
; 1785 : 		*target_position,
; 1786 : 		*bounding_box_min,
; 1787 : 		*bounding_box_max;
; 1788 : 
; 1789 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_groun
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_groun:

; 1790 : 
; 1791 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_groun
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00032	83 c0 0d	 add	 eax, 13			; 0000000dH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_groun:

; 1792 : 
; 1793 : 	ASSERT (get_local_entity_type (target) == ENTITY_TYPE_CITY);

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN7@draw_groun
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN8@draw_groun
$LN7@draw_groun:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0005b	83 c2 0f	 add	 edx, 15			; 0000000fH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN8@draw_groun:
  00076	83 7d a0 05	 cmp	 DWORD PTR tv80[ebp], 5
  0007a	74 18		 je	 SHORT $LN4@draw_groun
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00081	83 c0 0f	 add	 eax, 15			; 0000000fH
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
  0008f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_groun:

; 1794 : 
; 1795 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00094	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00098	74 0a		 je	 SHORT $LN9@draw_groun
  0009a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d a0	 mov	 DWORD PTR tv92[ebp], ecx
  000a2	eb 21		 jmp	 SHORT $LN10@draw_groun
$LN9@draw_groun:
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000aa	83 c2 11	 add	 edx, 17			; 00000011H
  000ad	52		 push	 edx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000be	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN10@draw_groun:
  000c5	b9 01 00 00 00	 mov	 ecx, 1
  000ca	85 c9		 test	 ecx, ecx
  000cc	74 09		 je	 SHORT $LN11@draw_groun
  000ce	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv132[ebp], 8
  000d5	eb 21		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000dd	83 c2 11	 add	 edx, 17			; 00000011H
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN12@draw_groun:
  000f8	6a 08		 push	 8
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000fd	51		 push	 ecx
  000fe	6b 55 a0 60	 imul	 edx, DWORD PTR tv92[ebp], 96
  00102	8b 45 9c	 mov	 eax, DWORD PTR tv132[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1796 : 
; 1797 : 	dx = (target_position->x - source_position->x) * scale;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00114	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00117	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0011f	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00124	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1798 : 	dy = (target_position->z - source_position->z) * scale;

  00129	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0012f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00134	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00139	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0013e	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1799 : 
; 1800 : 	bounding_box_min = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MIN);

  00143	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00147	74 0a		 je	 SHORT $LN13@draw_groun
  00149	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	89 4d a0	 mov	 DWORD PTR tv152[ebp], ecx
  00151	eb 21		 jmp	 SHORT $LN14@draw_groun
$LN13@draw_groun:
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00159	83 c2 16	 add	 edx, 22			; 00000016H
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN14@draw_groun:
  00174	b9 01 00 00 00	 mov	 ecx, 1
  00179	85 c9		 test	 ecx, ecx
  0017b	74 09		 je	 SHORT $LN15@draw_groun
  0017d	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv160[ebp], 1
  00184	eb 21		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0018c	83 c2 16	 add	 edx, 22			; 00000016H
  0018f	52		 push	 edx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN16@draw_groun:
  001a7	6a 01		 push	 1
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001ac	51		 push	 ecx
  001ad	6b 55 a0 60	 imul	 edx, DWORD PTR tv152[ebp], 96
  001b1	8b 45 9c	 mov	 eax, DWORD PTR tv160[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 ec	 mov	 DWORD PTR _bounding_box_min$[ebp], eax

; 1801 : 	bounding_box_max = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MAX);

  001c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001c4	74 0a		 je	 SHORT $LN17@draw_groun
  001c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	89 4d a0	 mov	 DWORD PTR tv172[ebp], ecx
  001ce	eb 21		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:
  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  001d6	83 c2 17	 add	 edx, 23			; 00000017H
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ea	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN18@draw_groun:
  001f1	b9 01 00 00 00	 mov	 ecx, 1
  001f6	85 c9		 test	 ecx, ecx
  001f8	74 09		 je	 SHORT $LN19@draw_groun
  001fa	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  00201	eb 21		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00209	83 c2 17	 add	 edx, 23			; 00000017H
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN20@draw_groun:
  00224	6a 00		 push	 0
  00226	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00229	51		 push	 ecx
  0022a	6b 55 a0 60	 imul	 edx, DWORD PTR tv172[ebp], 96
  0022e	8b 45 9c	 mov	 eax, DWORD PTR tv180[ebp]
  00231	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00238	ff d1		 call	 ecx
  0023a	89 45 e8	 mov	 DWORD PTR _bounding_box_max$[ebp], eax

; 1802 : 
; 1803 : 	radius = get_approx_2d_range (bounding_box_min, bounding_box_max);

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box_max$[ebp]
  00240	50		 push	 eax
  00241	8b 4d ec	 mov	 ecx, DWORD PTR _bounding_box_min$[ebp]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 ?get_approx_2d_range@@YGMPBUVEC3D@@0@Z ; get_approx_2d_range
  0024a	d9 5d f4	 fstp	 DWORD PTR _radius$[ebp]

; 1804 : 
; 1805 : 	//
; 1806 : 	// radius check to ignore oil pipelines and overly large city blocks
; 1807 : 	//
; 1808 : 
; 1809 : 	if (radius < 2000.0)

  0024d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00252	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@409f400000000000
  0025a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0025e	76 5d		 jbe	 SHORT $LN5@draw_groun

; 1810 : 	{
; 1811 : 		radius = max (50.0f, radius);

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00268	f3 0f 11 45 a4	 movss	 DWORD PTR $T1[ebp], xmm0
  0026d	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00270	50		 push	 eax
  00271	8d 4d a4	 lea	 ecx, DWORD PTR $T1[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0027a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027e	f3 0f 11 45 f4	 movss	 DWORD PTR _radius$[ebp], xmm0

; 1812 : 
; 1813 : 		draw_2d_hatched_circle (dx, dy, radius * scale, MFD_COLOUR5);

  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	c1 e0 02	 shl	 eax, 2
  0028b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00291	51		 push	 ecx
  00292	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00297	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0029c	51		 push	 ecx
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	51		 push	 ecx
  002ae	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  002b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b8	e8 00 00 00 00	 call	 ?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_circle
$LN5@draw_groun:

; 1814 : 	}
; 1815 : }

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	5b		 pop	 ebx
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 0c 00	 ret	 12			; 0000000cH
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ENDP ; draw_ground_radar_clutter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z
_TEXT	SEGMENT
tv367 = -100						; size = 4
tv288 = -100						; size = 4
tv256 = -100						; size = 4
tv223 = -100						; size = 4
tv193 = -100						; size = 4
tv165 = -100						; size = 4
tv145 = -100						; size = 4
tv88 = -100						; size = 4
tv360 = -96						; size = 4
tv281 = -96						; size = 4
tv249 = -96						; size = 4
tv216 = -96						; size = 4
tv185 = -96						; size = 4
tv157 = -96						; size = 4
tv137 = -96						; size = 4
tv80 = -96						; size = 4
_target_position$ = -28					; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_source$ = -16						; size = 4
_source_side$ = -12					; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 1506 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1507 : 	target_symbol_types
; 1508 : 		target_symbol_type;
; 1509 : 
; 1510 : 	rgb_colour
; 1511 : 		target_symbol_colour;
; 1512 : 
; 1513 : //VJ 030423 TSD render mod
; 1514 : 	entity_sides
; 1515 : 		source_side;
; 1516 : 	entity
; 1517 : 		*source;
; 1518 : 
; 1519 : 	float
; 1520 : 		dx,
; 1521 : 		dy;
; 1522 : 
; 1523 : 	vec3d
; 1524 : 		*target_position;
; 1525 : 
; 1526 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00014	83 c0 14	 add	 eax, 20			; 00000014H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 1527 : 
; 1528 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00032	83 c0 16	 add	 eax, 22			; 00000016H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 1529 : 
; 1530 : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN46@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN47@draw_radar
$LN46@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0005b	83 c2 18	 add	 edx, 24			; 00000018H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN47@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN48@draw_radar
  0007f	c7 45 9c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN49@draw_radar
$LN48@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0008e	83 c2 18	 add	 edx, 24			; 00000018H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN49@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 9c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000cb	83 c0 18	 add	 eax, 24			; 00000018H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 1531 : 
; 1532 : //VJ 030423 TSD render mod
; 1533 : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 f0	 mov	 DWORD PTR _source$[ebp], eax

; 1534 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000e6	83 7d f0 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN50@draw_radar
  000ec	8b 45 f0	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d a0	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN51@draw_radar
$LN50@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000fc	83 c2 1c	 add	 edx, 28			; 0000001cH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN51@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN52@draw_radar
  00120	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN53@draw_radar
$LN52@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0012f	83 c2 1c	 add	 edx, 28			; 0000001cH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN53@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 9c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f4	 mov	 DWORD PTR _source_side$[ebp], eax

; 1535 : 
; 1536 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN54@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d a0	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN55@draw_radar
$LN54@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0017f	83 c2 1e	 add	 edx, 30			; 0000001eH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN55@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN56@draw_radar
  001a3	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN57@draw_radar
$LN56@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  001b2	83 c2 1e	 add	 edx, 30			; 0000001eH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN57@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 a0 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 9c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e4	 mov	 DWORD PTR _target_position$[ebp], eax

; 1537 : 
; 1538 : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1539 : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1540 : 
; 1541 : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN58@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d a0	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN59@draw_radar
$LN58@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0022e	83 c2 23	 add	 edx, 35			; 00000023H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN59@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN60@draw_radar
  00252	c7 45 9c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN61@draw_radar
$LN60@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00261	83 c2 23	 add	 edx, 35			; 00000023H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN61@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 9c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 1542 : 
; 1543 : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  002ac	83 c0 25	 add	 eax, 37			; 00000025H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 1544 : 
; 1545 : 	if (get_local_entity_index (target) & 1)

  002bf	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002c2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  002c8	c1 f8 04	 sar	 eax, 4
  002cb	83 e0 01	 and	 eax, 1
  002ce	0f 84 e3 00 00
	00		 je	 $LN7@draw_radar

; 1546 : 	{
; 1547 : //VJ 030423 TSD render mod
; 1548 : 		if (display_on_tsd)

  002d4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002d8	0f 84 c3 00 00
	00		 je	 $LN9@draw_radar

; 1549 : 		{
; 1550 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1551 : 			if (command_line_tsd_enemy_colours)

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002e5	0f 84 a3 00 00
	00		 je	 $LN11@draw_radar

; 1552 : 			{
; 1553 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002eb	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002ef	74 0a		 je	 SHORT $LN62@draw_radar
  002f1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	89 4d a0	 mov	 DWORD PTR tv216[ebp], ecx
  002f9	eb 1d		 jmp	 SHORT $LN63@draw_radar
$LN62@draw_radar:
  002fb	68 11 06 00 00	 push	 1553			; 00000611H
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN63@draw_radar:
  00318	b8 01 00 00 00	 mov	 eax, 1
  0031d	85 c0		 test	 eax, eax
  0031f	74 09		 je	 SHORT $LN64@draw_radar
  00321	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv223[ebp], 187 ; 000000bbH
  00328	eb 1d		 jmp	 SHORT $LN65@draw_radar
$LN64@draw_radar:
  0032a	68 11 06 00 00	 push	 1553			; 00000611H
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00334	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00340	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN65@draw_radar:
  00347	68 bb 00 00 00	 push	 187			; 000000bbH
  0034c	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0034f	52		 push	 edx
  00350	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv216[ebp], 1116
  00357	8b 4d 9c	 mov	 ecx, DWORD PTR tv223[ebp]
  0035a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00361	ff d2		 call	 edx
  00363	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00366	75 13		 jne	 SHORT $LN13@draw_radar

; 1554 : 					target_symbol_colour = MFD_COLOUR_YELLOW;

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 0f	 imul	 ecx, eax, 15
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1555 : 				else

  00379	eb 11		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 1556 : 					target_symbol_colour = MFD_COLOUR_RED;

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	6b c8 12	 imul	 ecx, eax, 18
  00383	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00389	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN14@draw_radar:

; 1557 : 			}
; 1558 : 			else

  0038c	eb 11		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 1559 : 			{
; 1560 : 					target_symbol_colour = MFD_COLOUR_RED;

  0038e	b8 04 00 00 00	 mov	 eax, 4
  00393	6b c8 12	 imul	 ecx, eax, 18
  00396	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0039c	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN12@draw_radar:

; 1561 : 			}
; 1562 : 		}
; 1563 : 		else

  0039f	eb 11		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 1564 : 			target_symbol_colour = MFD_COLOUR_RED;

  003a1	b8 04 00 00 00	 mov	 eax, 4
  003a6	6b c8 12	 imul	 ecx, eax, 18
  003a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003af	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN10@draw_radar:

; 1565 : 	}
; 1566 : 	else

  003b2	e9 de 00 00 00	 jmp	 $LN16@draw_radar
$LN7@draw_radar:

; 1567 : 	{
; 1568 : //VJ 030423 TSD render mod
; 1569 : 		if (display_on_tsd)

  003b7	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  003bb	0f 84 c3 00 00
	00		 je	 $LN15@draw_radar

; 1570 : 		{
; 1571 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1572 : 			if (command_line_tsd_enemy_colours)

  003c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  003c8	0f 84 a3 00 00
	00		 je	 $LN17@draw_radar

; 1573 : 			{
; 1574 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  003ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d2	74 0a		 je	 SHORT $LN66@draw_radar
  003d4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d9	89 4d a0	 mov	 DWORD PTR tv249[ebp], ecx
  003dc	eb 1d		 jmp	 SHORT $LN67@draw_radar
$LN66@draw_radar:
  003de	68 26 06 00 00	 push	 1574			; 00000626H
  003e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ee	52		 push	 edx
  003ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN67@draw_radar:
  003fb	b8 01 00 00 00	 mov	 eax, 1
  00400	85 c0		 test	 eax, eax
  00402	74 09		 je	 SHORT $LN68@draw_radar
  00404	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv256[ebp], 187 ; 000000bbH
  0040b	eb 1d		 jmp	 SHORT $LN69@draw_radar
$LN68@draw_radar:
  0040d	68 26 06 00 00	 push	 1574			; 00000626H
  00412	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00417	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00423	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv256[ebp], 0
$LN69@draw_radar:
  0042a	68 bb 00 00 00	 push	 187			; 000000bbH
  0042f	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00432	52		 push	 edx
  00433	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv249[ebp], 1116
  0043a	8b 4d 9c	 mov	 ecx, DWORD PTR tv256[ebp]
  0043d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00444	ff d2		 call	 edx
  00446	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00449	75 13		 jne	 SHORT $LN19@draw_radar

; 1575 : 					target_symbol_colour = MFD_COLOUR_YELLOW;

  0044b	b8 04 00 00 00	 mov	 eax, 4
  00450	6b c8 0f	 imul	 ecx, eax, 15
  00453	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00459	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1576 : 				else

  0045c	eb 11		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 1577 : 					target_symbol_colour = MFD_COLOUR_RED;

  0045e	b8 04 00 00 00	 mov	 eax, 4
  00463	6b c8 12	 imul	 ecx, eax, 18
  00466	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0046c	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN20@draw_radar:

; 1578 : 			}
; 1579 : 			else

  0046f	eb 11		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:

; 1580 : 			{
; 1581 : 					target_symbol_colour = MFD_COLOUR_RED;

  00471	b8 04 00 00 00	 mov	 eax, 4
  00476	6b c8 12	 imul	 ecx, eax, 18
  00479	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047f	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN18@draw_radar:

; 1582 : 			}
; 1583 : 		}
; 1584 : 		else

  00482	eb 11		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 1585 : 			target_symbol_colour = MFD_COLOUR_RED;

  00484	b8 04 00 00 00	 mov	 eax, 4
  00489	6b c8 12	 imul	 ecx, eax, 18
  0048c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00492	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN16@draw_radar:

; 1586 : 	}
; 1587 : 
; 1588 : 	if (draw_large_mfd)

  00495	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049c	0f 84 44 02 00
	00		 je	 $LN21@draw_radar

; 1589 : 	{
; 1590 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004a2	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004a6	74 0a		 je	 SHORT $LN70@draw_radar
  004a8	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ad	89 4d a0	 mov	 DWORD PTR tv281[ebp], ecx
  004b0	eb 1d		 jmp	 SHORT $LN71@draw_radar
$LN70@draw_radar:
  004b2	68 36 06 00 00	 push	 1590			; 00000636H
  004b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004c2	52		 push	 edx
  004c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c8	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv281[ebp], 0
$LN71@draw_radar:
  004cf	b8 01 00 00 00	 mov	 eax, 1
  004d4	85 c0		 test	 eax, eax
  004d6	74 09		 je	 SHORT $LN72@draw_radar
  004d8	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv288[ebp], 80 ; 00000050H
  004df	eb 1d		 jmp	 SHORT $LN73@draw_radar
$LN72@draw_radar:
  004e1	68 36 06 00 00	 push	 1590			; 00000636H
  004e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004f1	51		 push	 ecx
  004f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f7	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN73@draw_radar:
  004fe	6a 50		 push	 80			; 00000050H
  00500	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00503	52		 push	 edx
  00504	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv281[ebp], 1116
  0050b	8b 4d 9c	 mov	 ecx, DWORD PTR tv288[ebp]
  0050e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00515	ff d2		 call	 edx
  00517	85 c0		 test	 eax, eax
  00519	0f 84 9e 00 00
	00		 je	 $LN23@draw_radar

; 1591 : 		{
; 1592 : 			if (selected_target)

  0051f	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00523	74 69		 je	 SHORT $LN27@draw_radar

; 1593 : 			{
; 1594 : //VJ 030423 TSD render mod
; 1595 : 				if (display_on_tsd)

  00525	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00529	74 2e		 je	 SHORT $LN26@draw_radar

; 1596 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0052b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00530	50		 push	 eax
  00531	51		 push	 ecx
  00532	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	51		 push	 ecx
  0053d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00547	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0054a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00551	52		 push	 edx
  00552	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1597 : 				else

  00557	eb 35		 jmp	 SHORT $LN27@draw_radar
$LN26@draw_radar:

; 1598 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  00559	b8 04 00 00 00	 mov	 eax, 4
  0055e	6b c8 05	 imul	 ecx, eax, 5
  00561	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00567	52		 push	 edx
  00568	51		 push	 ecx
  00569	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0056e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00573	51		 push	 ecx
  00574	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00581	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  00588	51		 push	 ecx
  00589	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 1599 : 			}
; 1600 : 
; 1601 : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  0058e	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00591	50		 push	 eax
  00592	51		 push	 ecx
  00593	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00598	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059d	51		 push	 ecx
  0059e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005ab	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  005b2	52		 push	 edx
  005b3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1602 : 		}
; 1603 : 		else

  005b8	e9 99 00 00 00	 jmp	 $LN24@draw_radar
$LN23@draw_radar:

; 1604 : 		{
; 1605 : 			if (selected_target)

  005bd	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  005c1	74 69		 je	 SHORT $LN30@draw_radar

; 1606 : 			{
; 1607 : //VJ 030423 TSD render mod
; 1608 : 				if (display_on_tsd)

  005c3	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  005c7	74 2e		 je	 SHORT $LN29@draw_radar

; 1609 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  005c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005ce	50		 push	 eax
  005cf	51		 push	 ecx
  005d0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	51		 push	 ecx
  005db	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e5	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005e8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  005ef	52		 push	 edx
  005f0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1610 : 				else

  005f5	eb 35		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:

; 1611 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  005f7	b8 04 00 00 00	 mov	 eax, 4
  005fc	6b c8 05	 imul	 ecx, eax, 5
  005ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00605	52		 push	 edx
  00606	51		 push	 ecx
  00607	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00611	51		 push	 ecx
  00612	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00617	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061c	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  0061f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00626	51		 push	 ecx
  00627	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN30@draw_radar:

; 1612 : 			}
; 1613 : 
; 1614 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062c	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0062f	50		 push	 eax
  00630	51		 push	 ecx
  00631	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063b	51		 push	 ecx
  0063c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00641	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00646	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00649	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00650	52		 push	 edx
  00651	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 1615 : 		}
; 1616 : 
; 1617 : 		if (selected_target)

  00656	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0065a	0f 84 81 00 00
	00		 je	 $LN31@draw_radar

; 1618 : 		{
; 1619 : //VJ 030423 TSD render mod
; 1620 : 			if (display_on_tsd)

  00660	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00664	74 28		 je	 SHORT $LN32@draw_radar

; 1621 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  00666	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0066b	50		 push	 eax
  0066c	51		 push	 ecx
  0066d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00672	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00677	51		 push	 ecx
  00678	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0067d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00682	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00687	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1622 : 			else

  0068c	eb 2f		 jmp	 SHORT $LN33@draw_radar
$LN32@draw_radar:

; 1623 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  0068e	b8 04 00 00 00	 mov	 eax, 4
  00693	6b c8 05	 imul	 ecx, eax, 5
  00696	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069c	52		 push	 edx
  0069d	51		 push	 ecx
  0069e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a8	51		 push	 ecx
  006a9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b3	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  006b8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_radar:

; 1624 : 
; 1625 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  006bd	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  006c0	50		 push	 eax
  006c1	51		 push	 ecx
  006c2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cc	51		 push	 ecx
  006cd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d7	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  006dc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN31@draw_radar:

; 1626 : 		}
; 1627 : 	}
; 1628 : 	else

  006e1	e9 3f 02 00 00	 jmp	 $LN42@draw_radar
$LN21@draw_radar:

; 1629 : 	{
; 1630 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  006e6	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  006ea	74 0a		 je	 SHORT $LN74@draw_radar
  006ec	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  006ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f1	89 4d a0	 mov	 DWORD PTR tv360[ebp], ecx
  006f4	eb 1d		 jmp	 SHORT $LN75@draw_radar
$LN74@draw_radar:
  006f6	68 5e 06 00 00	 push	 1630			; 0000065eH
  006fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00700	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00706	52		 push	 edx
  00707	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0070c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv360[ebp], 0
$LN75@draw_radar:
  00713	b8 01 00 00 00	 mov	 eax, 1
  00718	85 c0		 test	 eax, eax
  0071a	74 09		 je	 SHORT $LN76@draw_radar
  0071c	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv367[ebp], 80 ; 00000050H
  00723	eb 1d		 jmp	 SHORT $LN77@draw_radar
$LN76@draw_radar:
  00725	68 5e 06 00 00	 push	 1630			; 0000065eH
  0072a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00735	51		 push	 ecx
  00736	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0073b	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv367[ebp], 0
$LN77@draw_radar:
  00742	6a 50		 push	 80			; 00000050H
  00744	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00747	52		 push	 edx
  00748	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv360[ebp], 1116
  0074f	8b 4d 9c	 mov	 ecx, DWORD PTR tv367[ebp]
  00752	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00759	ff d2		 call	 edx
  0075b	85 c0		 test	 eax, eax
  0075d	0f 84 9e 00 00
	00		 je	 $LN34@draw_radar

; 1631 : 		{
; 1632 : 			if (selected_target)

  00763	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00767	74 69		 je	 SHORT $LN38@draw_radar

; 1633 : 			{
; 1634 : //VJ 030423 TSD render mod
; 1635 : 				if (display_on_tsd)

  00769	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0076d	74 2e		 je	 SHORT $LN37@draw_radar

; 1636 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0076f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00774	50		 push	 eax
  00775	51		 push	 ecx
  00776	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0077b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00780	51		 push	 ecx
  00781	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00786	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078b	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0078e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00795	52		 push	 edx
  00796	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1637 : 				else

  0079b	eb 35		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:

; 1638 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0079d	b8 04 00 00 00	 mov	 eax, 4
  007a2	6b c8 05	 imul	 ecx, eax, 5
  007a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007ab	52		 push	 edx
  007ac	51		 push	 ecx
  007ad	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b7	51		 push	 ecx
  007b8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c2	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  007c5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  007cc	51		 push	 ecx
  007cd	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN38@draw_radar:

; 1639 : 			}
; 1640 : 
; 1641 : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d2	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d5	50		 push	 eax
  007d6	51		 push	 ecx
  007d7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e1	51		 push	 ecx
  007e2	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ef	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f6	52		 push	 edx
  007f7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1642 : 		}
; 1643 : 		else

  007fc	e9 99 00 00 00	 jmp	 $LN35@draw_radar
$LN34@draw_radar:

; 1644 : 		{
; 1645 : 			if (selected_target)

  00801	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00805	74 69		 je	 SHORT $LN41@draw_radar

; 1646 : 			{
; 1647 : //VJ 030423 TSD render mod
; 1648 : 				if (display_on_tsd)

  00807	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0080b	74 2e		 je	 SHORT $LN40@draw_radar

; 1649 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0080d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00812	50		 push	 eax
  00813	51		 push	 ecx
  00814	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00824	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00829	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0082c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00833	52		 push	 edx
  00834	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1650 : 				else

  00839	eb 35		 jmp	 SHORT $LN41@draw_radar
$LN40@draw_radar:

; 1651 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0083b	b8 04 00 00 00	 mov	 eax, 4
  00840	6b c8 05	 imul	 ecx, eax, 5
  00843	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00849	52		 push	 edx
  0084a	51		 push	 ecx
  0084b	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00850	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00855	51		 push	 ecx
  00856	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0085b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00860	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00863	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  0086a	51		 push	 ecx
  0086b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_radar:

; 1652 : 			}
; 1653 : 
; 1654 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  00870	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00873	50		 push	 eax
  00874	51		 push	 ecx
  00875	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0087a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087f	51		 push	 ecx
  00880	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00885	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088a	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0088d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00894	52		 push	 edx
  00895	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_radar:

; 1655 : 		}
; 1656 : 
; 1657 : 		if (selected_target)

  0089a	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0089e	0f 84 81 00 00
	00		 je	 $LN42@draw_radar

; 1658 : 		{
; 1659 : //VJ 030423 TSD render mod
; 1660 : 			if (display_on_tsd)

  008a4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  008a8	74 28		 je	 SHORT $LN43@draw_radar

; 1661 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  008aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008af	50		 push	 eax
  008b0	51		 push	 ecx
  008b1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bb	51		 push	 ecx
  008bc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008cb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1662 : 			else

  008d0	eb 2f		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:

; 1663 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  008d2	b8 04 00 00 00	 mov	 eax, 4
  008d7	6b c8 05	 imul	 ecx, eax, 5
  008da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e0	52		 push	 edx
  008e1	51		 push	 ecx
  008e2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ec	51		 push	 ecx
  008ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f7	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008fc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_radar:

; 1664 : 
; 1665 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00901	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00904	50		 push	 eax
  00905	51		 push	 ecx
  00906	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0090b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00910	51		 push	 ecx
  00911	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00916	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091b	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  00920	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN42@draw_radar:

; 1666 : 		}
; 1667 : 	}
; 1668 : }

  00925	5f		 pop	 edi
  00926	5e		 pop	 esi
  00927	5b		 pop	 ebx
  00928	8b e5		 mov	 esp, ebp
  0092a	5d		 pop	 ebp
  0092b	c2 14 00	 ret	 20			; 00000014H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv90 = -108						; size = 4
_index$1 = -40						; size = 4
_index$2 = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_num_segments$ = -4					; size = 4
_arc_size$ = 8						; size = 4
_radius$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z PROC		; draw_radar_arc, COMDAT

; 1459 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 : 	int
; 1461 : 		num_segments;
; 1462 : 
; 1463 : 	float
; 1464 : 		theta,
; 1465 : 		sin_theta,
; 1466 : 		cos_theta,
; 1467 : 		x1,
; 1468 : 		y1,
; 1469 : 		x2,
; 1470 : 		y2;
; 1471 : 
; 1472 : 	num_segments = (int) (arc_size * (1.0 / HOKUM_RADAR_SCAN_ARC_SEGMENT_SIZE));

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0000e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4026eb1686b280e6
  00016	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0001a	89 45 fc	 mov	 DWORD PTR _num_segments$[ebp], eax

; 1473 : 
; 1474 : 	if (num_segments > 0)

  0001d	83 7d fc 00	 cmp	 DWORD PTR _num_segments$[ebp], 0
  00021	0f 8e 9f 01 00
	00		 jle	 $LN3@draw_radar

; 1475 : 	{
; 1476 : 		theta = arc_size * 0.5;

  00027	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1477 : 
; 1478 : 		sine_cosine (theta, &sin_theta, &cos_theta);

  0003d	8d 45 dc	 lea	 eax, DWORD PTR _index$2[ebp]
  00040	50		 push	 eax
  00041	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00046	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  0004e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00052	51		 push	 ecx
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0005d	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00060	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00065	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00068	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0006b	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00074	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  00079	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0007c	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00081	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00084	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00087	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0008c	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00092	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1479 : 
; 1480 : 		x1 = -radius * sin_theta;

  000a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ac	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  000b1	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1481 : 		y1 = radius * cos_theta;

  000b6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000bb	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  000c0	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0
$LN2@draw_radar:

; 1482 : 
; 1483 : 		while (num_segments--)

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _num_segments$[ebp]
  000c8	89 45 94	 mov	 DWORD PTR tv90[ebp], eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _num_segments$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d fc	 mov	 DWORD PTR _num_segments$[ebp], ecx
  000d4	83 7d 94 00	 cmp	 DWORD PTR tv90[ebp], 0
  000d8	0f 84 e8 00 00
	00		 je	 $LN3@draw_radar

; 1484 : 		{
; 1485 : 			theta -= HOKUM_RADAR_SCAN_ARC_SEGMENT_SIZE;

  000de	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  000e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3db2b8c2
  000eb	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1486 : 
; 1487 : 			sine_cosine (theta, &sin_theta, &cos_theta);

  000f0	8d 45 d8	 lea	 eax, DWORD PTR _index$1[ebp]
  000f3	50		 push	 eax
  000f4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  000f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  00101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00105	51		 push	 ecx
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00110	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00113	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00118	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  0011b	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0011e	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00127	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  0012c	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0012f	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00134	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00137	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0013a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0013f	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00142	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00145	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1488 : 
; 1489 : 			x2 = -radius * sin_theta;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00158	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00164	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1490 : 			y2 = radius * cos_theta;

  00169	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  0016e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  00173	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1491 : 
; 1492 : 			draw_2d_line (x1, y1, x2, y2, colour);

  00178	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	50		 push	 eax
  0017c	51		 push	 ecx
  0017d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	51		 push	 ecx
  00188	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1493 : 
; 1494 : 			x1 = x2;

  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b2	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1495 : 			y1 = y2;

  001b7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001bc	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1496 : 		}

  001c1	e9 ff fe ff ff	 jmp	 $LN2@draw_radar
$LN3@draw_radar:

; 1497 : 	}
; 1498 : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 0c 00	 ret	 12			; 0000000cH
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ENDP		; draw_radar_arc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z
_TEXT	SEGMENT
tv227 = -284						; size = 4
tv208 = -284						; size = 4
tv156 = -284						; size = 4
tv220 = -280						; size = 4
tv200 = -280						; size = 4
tv149 = -280						; size = 4
_width$ = -212						; size = 4
_y_adjust$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_target_range$ = 12					; size = 4
_radar$ = 16						; size = 4
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z PROC ; display_radar_target_details, COMDAT

; 1283 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1284 : 	const char
; 1285 : 		*s;
; 1286 : 	char
; 1287 : 		buffer[200];
; 1288 : 
; 1289 : 	float
; 1290 : 		y_adjust,
; 1291 : 		width;
; 1292 : 
; 1293 : 	ASSERT (radar);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _radar$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@display_ra
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  00017	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05EMNNHGFM@radar@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@display_ra:

; 1294 : 
; 1295 : 	if (hokum_damage.radar)

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0002f	83 e0 01	 and	 eax, 1
  00032	74 05		 je	 SHORT $LN3@display_ra

; 1296 : 	{
; 1297 : 		return;

  00034	e9 da 05 00 00	 jmp	 $LN1@display_ra
$LN3@display_ra:

; 1298 : 	}
; 1299 : 
; 1300 : 	if (draw_large_mfd)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00040	74 12		 je	 SHORT $LN4@display_ra

; 1301 : 	{
; 1302 : 		y_adjust = -12.0;

  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0004a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1303 : 	}
; 1304 : 	else

  00052	eb 10		 jmp	 SHORT $LN5@display_ra
$LN4@display_ra:

; 1305 : 	{
; 1306 : 		y_adjust = -5.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0005c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN5@display_ra:

; 1307 : 	}
; 1308 : 
; 1309 : 	//
; 1310 : 	// name
; 1311 : 	//
; 1312 : 
; 1313 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00069	50		 push	 eax
  0006a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0007a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1314 : 
; 1315 : 	if (s)

  0007d	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00081	74 4b		 je	 SHORT $LN6@display_ra

; 1316 : 	{
; 1317 : 		set_2d_mono_font_position (-1.0, -1.0);

  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1318 : 
; 1319 : 		set_mono_font_rel_position (1.0, y_adjust);

  000a4	51		 push	 ecx
  000a5	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	51		 push	 ecx
  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1320 : 
; 1321 : 		print_mono_font_string (s);

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN6@display_ra:

; 1322 : 	}
; 1323 : 
; 1324 : 	if (target)

  000ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  000d2	0f 84 64 02 00
	00		 je	 $LN12@display_ra

; 1325 : 	{
; 1326 : 		//
; 1327 : 		// range
; 1328 : 		//
; 1329 : 
; 1330 : 		if ((target_range < 1000.0) && (!hokum_damage.laser_designator))

  000d8	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  000dd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  000e5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e9	76 29		 jbe	 SHORT $LN8@display_ra
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000f0	c1 e8 06	 shr	 eax, 6
  000f3	83 e0 01	 and	 eax, 1
  000f6	75 1c		 jne	 SHORT $LN8@display_ra

; 1331 : 		{
; 1332 : 			sprintf (buffer, "%dm", (int) target_range);

  000f8	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  00103	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _sprintf
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1333 : 		}
; 1334 : 		else

  00112	eb 29		 jmp	 SHORT $LN9@display_ra
$LN8@display_ra:

; 1335 : 		{
; 1336 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00114	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00119	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00121	83 ec 08	 sub	 esp, 8
  00124	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0012e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _sprintf
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@display_ra:

; 1337 : 		}
; 1338 : 
; 1339 : 		width = get_mono_font_string_width (buffer);

  0013d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00149	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1340 : 
; 1341 : 		if (draw_large_mfd)

  0014f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00156	74 1e		 je	 SHORT $LN10@display_ra

; 1342 : 		{
; 1343 : 			width += 2.0;

  00158	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  00160	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00168	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016c	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1344 : 		}
; 1345 : 		else

  00174	eb 1c		 jmp	 SHORT $LN11@display_ra
$LN10@display_ra:

; 1346 : 		{
; 1347 : 			width += 1.0;

  00176	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0017e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00186	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018a	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0
$LN11@display_ra:

; 1348 : 		}
; 1349 : 
; 1350 : 		set_2d_mono_font_position (1.0, -1.0);

  00192	51		 push	 ecx
  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	51		 push	 ecx
  001a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ae	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1351 : 
; 1352 : 		set_mono_font_rel_position (-width, y_adjust);

  001b3	51		 push	 ecx
  001b4	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  001c9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001d0	51		 push	 ecx
  001d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1353 : 
; 1354 : 		print_mono_font_string (buffer);

  001db	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1355 : 
; 1356 : 		//
; 1357 : 		// no line of sight
; 1358 : 		//
; 1359 : 
; 1360 : 		if (!get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  001e7	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001eb	74 0d		 je	 SHORT $LN25@display_ra
  001ed	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f2	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv149[ebp], ecx
  001f8	eb 20		 jmp	 SHORT $LN26@display_ra
$LN25@display_ra:
  001fa	68 50 05 00 00	 push	 1360			; 00000550H
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00204	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0020a	52		 push	 edx
  0020b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00210	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv149[ebp], 0
$LN26@display_ra:
  0021a	b8 01 00 00 00	 mov	 eax, 1
  0021f	85 c0		 test	 eax, eax
  00221	74 0c		 je	 SHORT $LN27@display_ra
  00223	c7 85 e4 fe ff
	ff 50 00 00 00	 mov	 DWORD PTR tv156[ebp], 80 ; 00000050H
  0022d	eb 20		 jmp	 SHORT $LN28@display_ra
$LN27@display_ra:
  0022f	68 50 05 00 00	 push	 1360			; 00000550H
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00245	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN28@display_ra:
  0024f	6a 50		 push	 80			; 00000050H
  00251	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00254	52		 push	 edx
  00255	69 85 e8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv149[ebp], 1116
  0025f	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv156[ebp]
  00265	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0026c	ff d2		 call	 edx
  0026e	85 c0		 test	 eax, eax
  00270	0f 85 c6 00 00
	00		 jne	 $LN12@display_ra

; 1361 : 		{
; 1362 : 			width = get_mono_font_string_width ("NO LOS");

  00276	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  0027b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00280	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1363 : 
; 1364 : 			if (draw_large_mfd)

  00286	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0028d	74 2e		 je	 SHORT $LN13@display_ra

; 1365 : 			{
; 1366 : 				width += 2.0;

  0028f	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  00297	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0029f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a3	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1367 : 
; 1368 : 				y_adjust = -25.0;

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  002b3	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1369 : 			}
; 1370 : 			else

  002bb	eb 2c		 jmp	 SHORT $LN14@display_ra
$LN13@display_ra:

; 1371 : 			{
; 1372 : 				width += 1.0;

  002bd	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  002c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  002cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d1	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1373 : 
; 1374 : 				y_adjust = -12.0;

  002d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  002e1	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN14@display_ra:

; 1375 : 			}
; 1376 : 
; 1377 : 			set_2d_mono_font_position (1.0, -1.0);

  002e9	51		 push	 ecx
  002ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f7	51		 push	 ecx
  002f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00305	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1378 : 
; 1379 : 			set_mono_font_rel_position (-width, y_adjust);

  0030a	51		 push	 ecx
  0030b	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00318	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00320	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00327	51		 push	 ecx
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1380 : 
; 1381 : 			print_mono_font_string ("NO LOS");

  00332	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  00337	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN12@display_ra:

; 1382 : 		}
; 1383 : 	}
; 1384 : 
; 1385 : 	//
; 1386 : 	// auto
; 1387 : 	//
; 1388 : 
; 1389 : 	if (radar->auto_target)

  0033c	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  0033f	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00343	74 77		 je	 SHORT $LN15@display_ra

; 1390 : 	{
; 1391 : 		if (draw_large_mfd)

  00345	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0034c	74 12		 je	 SHORT $LN16@display_ra

; 1392 : 		{
; 1393 : 			y_adjust = 18.0;

  0034e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  00356	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1394 : 		}
; 1395 : 		else

  0035e	eb 10		 jmp	 SHORT $LN17@display_ra
$LN16@display_ra:

; 1396 : 		{
; 1397 : 			y_adjust = 9.0;

  00360	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  00368	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN17@display_ra:

; 1398 : 		}
; 1399 : 
; 1400 : 		set_2d_mono_font_position (-1.0, 1.0);

  00370	51		 push	 ecx
  00371	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00379	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037e	51		 push	 ecx
  0037f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00387	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1401 : 
; 1402 : 		set_mono_font_rel_position (1.0, y_adjust);

  00391	51		 push	 ecx
  00392	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0039a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039f	51		 push	 ecx
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1403 : 
; 1404 : 		print_mono_font_string ("AUTO");

  003b2	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  003b7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN15@display_ra:

; 1405 : 	}
; 1406 : 
; 1407 : 	//
; 1408 : 	// locked
; 1409 : 	//
; 1410 : 
; 1411 : 	if (radar->target_locked)

  003bc	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  003bf	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  003c3	74 77		 je	 SHORT $LN18@display_ra

; 1412 : 	{
; 1413 : 		if (draw_large_mfd)

  003c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003cc	74 12		 je	 SHORT $LN19@display_ra

; 1414 : 		{
; 1415 : 			y_adjust = -25.0;

  003ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  003d6	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1416 : 		}
; 1417 : 		else

  003de	eb 10		 jmp	 SHORT $LN20@display_ra
$LN19@display_ra:

; 1418 : 		{
; 1419 : 			y_adjust = -12.0;

  003e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  003e8	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN20@display_ra:

; 1420 : 		}
; 1421 : 
; 1422 : 		set_2d_mono_font_position (-1.0, -1.0);

  003f0	51		 push	 ecx
  003f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	51		 push	 ecx
  003ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1423 : 
; 1424 : 		set_mono_font_rel_position (1.0, y_adjust);

  00411	51		 push	 ecx
  00412	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0041a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041f	51		 push	 ecx
  00420	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1425 : 
; 1426 : 		print_mono_font_string ("LOCKED");

  00432	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  00437	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN18@display_ra:

; 1427 : 	}
; 1428 : // Jabberwock 031107 Designated targets
; 1429 : 
; 1430 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  0043c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00443	74 0f		 je	 SHORT $LN29@display_ra
  00445	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0044a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044c	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv200[ebp], ecx
  00452	eb 27		 jmp	 SHORT $LN30@display_ra
$LN29@display_ra:
  00454	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  0045a	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00460	52		 push	 edx
  00461	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00466	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0046b	50		 push	 eax
  0046c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00471	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv200[ebp], 0
$LN30@display_ra:
  0047b	b9 01 00 00 00	 mov	 ecx, 1
  00480	85 c9		 test	 ecx, ecx
  00482	74 0c		 je	 SHORT $LN31@display_ra
  00484	c7 85 e4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv208[ebp], 38 ; 00000026H
  0048e	eb 27		 jmp	 SHORT $LN32@display_ra
$LN31@display_ra:
  00490	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  00496	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  0049c	52		 push	 edx
  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004a7	50		 push	 eax
  004a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ad	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN32@display_ra:
  004b7	6a 26		 push	 38			; 00000026H
  004b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  004bf	51		 push	 ecx
  004c0	69 95 e8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv200[ebp], 180
  004ca	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv208[ebp]
  004d0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  004d7	ff d1		 call	 ecx
  004d9	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 1431 : 
; 1432 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  004dc	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004e0	0f 84 2d 01 00
	00		 je	 $LN21@display_ra
  004e6	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004ea	74 0d		 je	 SHORT $LN33@display_ra
  004ec	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  004f1	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv220[ebp], ecx
  004f7	eb 20		 jmp	 SHORT $LN34@display_ra
$LN33@display_ra:
  004f9	68 98 05 00 00	 push	 1432			; 00000598H
  004fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00503	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00509	52		 push	 edx
  0050a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0050f	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv220[ebp], 0
$LN34@display_ra:
  00519	b8 01 00 00 00	 mov	 eax, 1
  0051e	85 c0		 test	 eax, eax
  00520	74 0c		 je	 SHORT $LN35@display_ra
  00522	c7 85 e4 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv227[ebp], 10 ; 0000000aH
  0052c	eb 20		 jmp	 SHORT $LN36@display_ra
$LN35@display_ra:
  0052e	68 98 05 00 00	 push	 1432			; 00000598H
  00533	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00538	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0053e	51		 push	 ecx
  0053f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00544	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv227[ebp], 0
$LN36@display_ra:
  0054e	6a 0a		 push	 10			; 0000000aH
  00550	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00553	52		 push	 edx
  00554	69 85 e8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv220[ebp], 180
  0055e	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv227[ebp]
  00564	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  0056b	ff d2		 call	 edx
  0056d	85 c0		 test	 eax, eax
  0056f	0f 84 9e 00 00
	00		 je	 $LN21@display_ra

; 1433 : 	{
; 1434 : 		if (draw_large_mfd)

  00575	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0057c	74 12		 je	 SHORT $LN22@display_ra

; 1435 : 		{
; 1436 : 			y_adjust = -25.0;

  0057e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00586	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1437 : 		}
; 1438 : 		else

  0058e	eb 10		 jmp	 SHORT $LN23@display_ra
$LN22@display_ra:

; 1439 : 		{
; 1440 : 			y_adjust = -12.0;

  00590	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00598	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN23@display_ra:

; 1441 : 		}
; 1442 : 
; 1443 : 		width = get_mono_font_string_width ("MARKED");

  005a0	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  005a5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  005aa	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1444 : 
; 1445 : 		set_2d_mono_font_position (1.0, -1.0);

  005b0	51		 push	 ecx
  005b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  005b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005be	51		 push	 ecx
  005bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1446 : 
; 1447 : 		set_mono_font_rel_position (-width -1.0, y_adjust);

  005d1	51		 push	 ecx
  005d2	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  005da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005df	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  005e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005ee	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  005f2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005fe	51		 push	 ecx
  005ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00604	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1448 : 
; 1449 : 		print_mono_font_string ("MARKED");

  00609	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0060e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN21@display_ra:
$LN1@display_ra:

; 1450 : 	}
; 1451 : // Jabberwock 031107 ends
; 1452 : }

  00613	5f		 pop	 edi
  00614	5e		 pop	 esi
  00615	5b		 pop	 ebx
  00616	8b e5		 mov	 esp, ebp
  00618	5d		 pop	 ebp
  00619	c2 0c 00	 ret	 12			; 0000000cH
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ENDP ; display_radar_target_details
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?display_radar_scan_range@@YGXM@Z
_TEXT	SEGMENT
_y_adjust$ = -16					; size = 4
_width$ = -12						; size = 4
_s$ = -8						; size = 8
_scan_range$ = 8					; size = 4
?display_radar_scan_range@@YGXM@Z PROC			; display_radar_scan_range, COMDAT

; 1215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1216 : //VJ 030807 radar range adjustable
; 1217 : 	char
; 1218 : 		s[8];
; 1219 : //		*s;
; 1220 : 
; 1221 : 	float
; 1222 : 		width,
; 1223 : 		y_adjust;
; 1224 : 
; 1225 : 	if (scan_range == HOKUM_RADAR_SCAN_RANGE_1000)

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0000e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_1000@@3MA
  00015	9f		 lahf
  00016	f6 c4 44	 test	 ah, 68			; 00000044H
  00019	7a 32		 jp	 SHORT $LN2@display_ra

; 1226 : 	{
; 1227 : //		s = "1Km";
; 1228 : 		sprintf(s,"%.0fKm",HOKUM_RADAR_SCAN_RANGE_1000/1000);

  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_1000@@3MA
  00023	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0002b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0002f	83 ec 08	 sub	 esp, 8
  00032	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  0003c	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _sprintf
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	e9 1b 01 00 00	 jmp	 $LN11@display_ra
$LN2@display_ra:

; 1229 : 	}
; 1230 : 	else if (scan_range == HOKUM_RADAR_SCAN_RANGE_2000)

  0004d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00052	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_2000@@3MA
  00059	9f		 lahf
  0005a	f6 c4 44	 test	 ah, 68			; 00000044H
  0005d	7a 32		 jp	 SHORT $LN4@display_ra

; 1231 : 	{
; 1232 : //		s = "2Km";
; 1233 : 		sprintf(s,"%.0fKm",HOKUM_RADAR_SCAN_RANGE_2000/1000);

  0005f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_2000@@3MA
  00067	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0006f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00073	83 ec 08	 sub	 esp, 8
  00076	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00080	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _sprintf
  00089	83 c4 10	 add	 esp, 16			; 00000010H
  0008c	e9 d7 00 00 00	 jmp	 $LN11@display_ra
$LN4@display_ra:

; 1234 : 	}
; 1235 : 	else if (scan_range == HOKUM_RADAR_SCAN_RANGE_4000)

  00091	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00096	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_4000@@3MA
  0009d	9f		 lahf
  0009e	f6 c4 44	 test	 ah, 68			; 00000044H
  000a1	7a 32		 jp	 SHORT $LN6@display_ra

; 1236 : 	{
; 1237 : //		s = "4Km";
; 1238 : 		sprintf(s,"%.0fKm",HOKUM_RADAR_SCAN_RANGE_4000/1000);

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_4000@@3MA
  000ab	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000b3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b7	83 ec 08	 sub	 esp, 8
  000ba	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000c4	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _sprintf
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	e9 93 00 00 00	 jmp	 $LN11@display_ra
$LN6@display_ra:

; 1239 : 	}
; 1240 : 	else if (scan_range == HOKUM_RADAR_SCAN_RANGE_6000)

  000d5	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000da	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_6000@@3MA
  000e1	9f		 lahf
  000e2	f6 c4 44	 test	 ah, 68			; 00000044H
  000e5	7a 2f		 jp	 SHORT $LN8@display_ra

; 1241 : 	{
; 1242 : //		s = "6Km";
; 1243 : 		sprintf(s,"%.0fKm",HOKUM_RADAR_SCAN_RANGE_6000/1000);

  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_6000@@3MA
  000ef	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000f7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000fb	83 ec 08	 sub	 esp, 8
  000fe	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00108	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _sprintf
  00111	83 c4 10	 add	 esp, 16			; 00000010H
  00114	eb 52		 jmp	 SHORT $LN11@display_ra
$LN8@display_ra:

; 1244 : 	}
; 1245 : 	else if (scan_range == HOKUM_RADAR_SCAN_RANGE_10000)

  00116	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0011b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_10000@@3MA
  00122	9f		 lahf
  00123	f6 c4 44	 test	 ah, 68			; 00000044H
  00126	7a 2f		 jp	 SHORT $LN10@display_ra

; 1246 : 	{
; 1247 : //		s = "10Km";
; 1248 : 		sprintf(s,"%.0fKm",HOKUM_RADAR_SCAN_RANGE_10000/1000);

  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?HOKUM_RADAR_SCAN_RANGE_10000@@3MA
  00130	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00138	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0013c	83 ec 08	 sub	 esp, 8
  0013f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00149	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _sprintf
  00152	83 c4 10	 add	 esp, 16			; 00000010H

; 1249 : 	}
; 1250 : 	else

  00155	eb 11		 jmp	 SHORT $LN11@display_ra
$LN10@display_ra:

; 1251 : 	{
; 1252 : //		s = "XXX";
; 1253 : 		sprintf(s,"XXX");

  00157	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  0015c	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _sprintf
  00165	83 c4 08	 add	 esp, 8
$LN11@display_ra:

; 1254 : 	}
; 1255 : 
; 1256 : 	width = get_mono_font_string_width (s);

  00168	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00171	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 1257 : 
; 1258 : 	if (draw_large_mfd)

  00174	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0017b	74 25		 je	 SHORT $LN12@display_ra

; 1259 : 	{
; 1260 : 		width += 2.0;

  0017d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  00182	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0018a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018e	f3 0f 11 45 f4	 movss	 DWORD PTR _width$[ebp], xmm0

; 1261 : 
; 1262 : 		y_adjust = 5.0;

  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0019b	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1263 : 	}
; 1264 : 	else

  001a0	eb 23		 jmp	 SHORT $LN13@display_ra
$LN12@display_ra:

; 1265 : 	{
; 1266 : 		width += 1.0;

  001a2	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  001a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b3	f3 0f 11 45 f4	 movss	 DWORD PTR _width$[ebp], xmm0

; 1267 : 
; 1268 : 		y_adjust = 2.0;

  001b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  001c0	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN13@display_ra:

; 1269 : 	}
; 1270 : 
; 1271 : 	set_2d_mono_font_position (1.0, 1.0);

  001c5	51		 push	 ecx
  001c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d3	51		 push	 ecx
  001d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1272 : 
; 1273 : 	set_mono_font_rel_position (-width, y_adjust);

  001e6	51		 push	 ecx
  001e7	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  001f6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1274 : 
; 1275 : 	print_mono_font_string (s);

  00208	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1276 : }

  00211	5f		 pop	 edi
  00212	5e		 pop	 esi
  00213	5b		 pop	 ebx
  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c2 04 00	 ret	 4
?display_radar_scan_range@@YGXM@Z ENDP			; display_radar_scan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_sideslip_scale@@YGXXZ
_TEXT	SEGMENT
_s$ = -64						; size = 20
_int_heading_step_10$ = -44				; size = 4
_loop$ = -40						; size = 4
_j$ = -36						; size = 4
_i$ = -32						; size = 4
_width$ = -28						; size = 4
_x$ = -24						; size = 4
_mod_heading_step_10$ = -20				; size = 4
_mfd_vp_x_max$ = -16					; size = 4
_mfd_vp_x_min$ = -12					; size = 4
_y_position$ = -8					; size = 4
_sideslip$ = -4						; size = 4
?draw_sideslip_scale@@YGXXZ PROC			; draw_sideslip_scale, COMDAT

; 1112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1113 : 	float
; 1114 : 		sideslip = kilometres_per_hour(current_flight_dynamics->velocity_x.value),

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00011	f3 0f 10 80 6c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8300]
  00019	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00021	f3 0f 11 45 fc	 movss	 DWORD PTR _sideslip$[ebp], xmm0

; 1115 : 		y_position,
; 1116 : 		mfd_vp_x_min,
; 1117 : 		mfd_vp_x_max,
; 1118 : 		mod_heading_step_10,
; 1119 : 		x,
; 1120 : 		width,
; 1121 : 		i,
; 1122 : 		j;
; 1123 : 
; 1124 : 	int
; 1125 : 		loop,
; 1126 : 		int_heading_step_10;
; 1127 : 
; 1128 : 	char
; 1129 : 		s[20];
; 1130 : 
; 1131 : 	//
; 1132 : 	// adjust 2D environment for heading scale clipping
; 1133 : 	//
; 1134 : 
; 1135 : 	y_position = -0.65;

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0002e	f3 0f 11 45 f8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 1136 : 
; 1137 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * 0.5, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * 0.5, MFD_WINDOW_Y_MAX);

  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3effbe77
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	51		 push	 ecx
  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1138 : 
; 1139 : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (0.5 * 0.5));

  00076	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  0007e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00086	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  0008e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00096	f3 0f 11 45 f4	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1140 : 
; 1141 : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (0.5 * 0.5)) - 0.001;

  0009b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  000a3	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  000ab	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  000b3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000b7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c3	f3 0f 11 45 f0	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1142 : 
; 1143 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  000c8	51		 push	 ecx
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	51		 push	 ecx
  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1144 : 
; 1145 : 
; 1146 : 	get_2d_float_screen_coordinates (0.0, y_position, &i, &j);

  00105	8d 45 dc	 lea	 eax, DWORD PTR _j$[ebp]
  00108	50		 push	 eax
  00109	8d 4d e0	 lea	 ecx, DWORD PTR _i$[ebp]
  0010c	51		 push	 ecx
  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	51		 push	 ecx
  00119	0f 57 c0	 xorps	 xmm0, xmm0
  0011c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00121	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1147 : 
; 1148 : 	set_mono_font_type (MONO_FONT_TYPE_5X7);

  00126	6a 01		 push	 1
  00128	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1149 : 
; 1150 : 
; 1151 : 	//
; 1152 : 	// sort first major tick position (draw 2 major ticks either side of centre)
; 1153 : 	//
; 1154 : 
; 1155 : 	mod_heading_step_10 = fmod (sideslip, 10.0f);

  0012d	51		 push	 ecx
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sideslip$[ebp]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0014b	d9 5d ec	 fstp	 DWORD PTR _mod_heading_step_10$[ebp]

; 1156 : 	int_heading_step_10 = ((int) (sideslip * 0.1) * 10);

  0014e	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _sideslip$[ebp]
  00153	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0015b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0015f	6b c8 0a	 imul	 ecx, eax, 10
  00162	89 4d d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], ecx

; 1157 : 	int_heading_step_10 -= 40;

  00165	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00168	83 e8 28	 sub	 eax, 40			; 00000028H
  0016b	89 45 d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1158 : 
; 1159 : 	x = - (40.0 + mod_heading_step_10) * 0.025;

  0016e	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  00173	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4044000000000000
  0017b	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00182	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0018a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018e	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1160 : 
; 1161 : 	//
; 1162 : 	// draw heading scale ticks and heading value
; 1163 : 	//
; 1164 : 
; 1165 : 	for (loop = 0; loop < 20; loop++)

  00193	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0019a	eb 09		 jmp	 SHORT $LN4@draw_sides
$LN2@draw_sides:
  0019c	8b 45 d8	 mov	 eax, DWORD PTR _loop$[ebp]
  0019f	83 c0 01	 add	 eax, 1
  001a2	89 45 d8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_sides:
  001a5	83 7d d8 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  001a9	0f 8d 2f 01 00
	00		 jge	 $LN3@draw_sides

; 1166 : 	{
; 1167 : 		//
; 1168 : 		// minor tick every 5 kph
; 1169 : 		//
; 1170 : 
; 1171 : 		draw_2d_line (x + 0.125, y_position + 0.025, x + 0.125, y_position - 0.025, MFD_COLOUR_LIGHT_BLUE);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	c1 e0 04	 shl	 eax, 4
  001b7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  001bd	51		 push	 ecx
  001be	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  001c3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  001da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  001e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  001f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00208	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00210	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00214	51		 push	 ecx
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1172 : 
; 1173 : 		sprintf (s, "%d", abs(int_heading_step_10));

  0021f	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 _abs
  00228	83 c4 04	 add	 esp, 4
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00231	8d 4d c0	 lea	 ecx, DWORD PTR _s$[ebp]
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 _sprintf
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1174 : 
; 1175 : 		set_2d_mono_font_position (x, y_position);

  0023d	51		 push	 ecx
  0023e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  00243	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00248	51		 push	 ecx
  00249	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0024e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00253	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1176 : 		width = get_mono_font_string_width (s);

  00258	8d 45 c0	 lea	 eax, DWORD PTR _s$[ebp]
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00261	d9 5d e4	 fstp	 DWORD PTR _width$[ebp]

; 1177 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, -3.0);

  00264	51		 push	 ecx
  00265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0026d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00272	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _width$[ebp]
  00277	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0027e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00282	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0028a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00292	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00296	51		 push	 ecx
  00297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1178 : 
; 1179 : 		print_mono_font_string (s);

  002a1	8d 45 c0	 lea	 eax, DWORD PTR _s$[ebp]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1180 : 
; 1181 : 		//
; 1182 : 		// next heading value
; 1183 : 		//
; 1184 : 
; 1185 : 		int_heading_step_10 += 10;

  002aa	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002ad	83 c0 0a	 add	 eax, 10			; 0000000aH
  002b0	89 45 d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1186 : 
; 1187 : 		if (int_heading_step_10 == 360)

  002b3	81 7d d4 68 01
	00 00		 cmp	 DWORD PTR _int_heading_step_10$[ebp], 360 ; 00000168H
  002ba	75 07		 jne	 SHORT $LN5@draw_sides

; 1188 : 		{
; 1189 : 			int_heading_step_10 = 0;

  002bc	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _int_heading_step_10$[ebp], 0
$LN5@draw_sides:

; 1190 : 		}
; 1191 : 
; 1192 : 		x += 0.25;

  002c3	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  002d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d4	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1193 : 	}

  002d9	e9 be fe ff ff	 jmp	 $LN2@draw_sides
$LN3@draw_sides:

; 1194 : 
; 1195 : 	//
; 1196 : 	// restore 2D environment
; 1197 : 	//
; 1198 : 
; 1199 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  002de	51		 push	 ecx
  002df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  002e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ec	51		 push	 ecx
  002ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	51		 push	 ecx
  002fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00308	51		 push	 ecx
  00309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1200 : 
; 1201 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00321	51		 push	 ecx
  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	51		 push	 ecx
  00330	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034b	51		 push	 ecx
  0034c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1202 : }

  00364	5f		 pop	 edi
  00365	5e		 pop	 esi
  00366	5b		 pop	 ebx
  00367	8b e5		 mov	 esp, ebp
  00369	5d		 pop	 ebp
  0036a	c3		 ret	 0
?draw_sideslip_scale@@YGXXZ ENDP			; draw_sideslip_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_heading_scale@@YGXMH@Z
_TEXT	SEGMENT
tv206 = -176						; size = 8
tv207 = -168						; size = 8
tv174 = -168						; size = 4
tv166 = -164						; size = 4
_command_heading$1 = -96				; size = 4
_bearing$2 = -92					; size = 4
_dz$3 = -88						; size = 4
_dx$4 = -84						; size = 4
_waypoint_position$5 = -80				; size = 12
_gunship_position$6 = -68				; size = 4
_wp$7 = -64						; size = 4
_s$ = -60						; size = 20
_int_heading_step_10$ = -40				; size = 4
_loop$ = -36						; size = 4
_j$ = -32						; size = 4
_i$ = -28						; size = 4
_width$ = -24						; size = 4
_x$ = -20						; size = 4
_mod_heading_step_10$ = -16				; size = 4
_mfd_vp_x_max$ = -12					; size = 4
_mfd_vp_x_min$ = -8					; size = 4
_y_position$ = -4					; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale@@YGXMH@Z PROC			; draw_heading_scale, COMDAT

; 914  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 915  : 	float
; 916  : 		y_position,
; 917  : 		mfd_vp_x_min,
; 918  : 		mfd_vp_x_max,
; 919  : 		mod_heading_step_10,
; 920  : 		x,
; 921  : 		width,
; 922  : 		i,
; 923  : 		j;
; 924  : 
; 925  : 	int
; 926  : 		loop,
; 927  : 		int_heading_step_10;
; 928  : 
; 929  : 	char
; 930  : 		s[20];
; 931  : 
; 932  : 	//
; 933  : 	// adjust 2D environment for heading scale clipping
; 934  : 	//
; 935  : 
; 936  : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	74 0f		 je	 SHORT $LN5@draw_headi

; 937  : 	{
; 938  : 		y_position = -0.85;

  00015	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0001d	f3 0f 11 45 fc	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 939  : 	}
; 940  : 	else

  00022	eb 0d		 jmp	 SHORT $LN6@draw_headi
$LN5@draw_headi:

; 941  : 	{
; 942  : 		y_position = -0.8375;

  00024	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf566666
  0002c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_position$[ebp], xmm0
$LN6@draw_headi:

; 943  : 	}
; 944  : 
; 945  : 	draw_2d_box(-0.5, y_position - 0.1, 0.5, y_position + 0.1, TRUE, FALSE, MFD_COLOUR_BLUE);

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	6b c8 11	 imul	 ecx, eax, 17
  00039	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0003f	52		 push	 edx
  00040	6a 00		 push	 0
  00042	6a 01		 push	 1
  00044	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  00049	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00051	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00055	51		 push	 ecx
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	51		 push	 ecx
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  0006e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00076	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007a	51		 push	 ecx
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 946  : 	draw_2d_box(-0.5, y_position - 0.1, 0.5, y_position + 0.1, FALSE, FALSE, MFD_COLOUR_LIGHT_BLUE);

  00093	b8 04 00 00 00	 mov	 eax, 4
  00098	c1 e0 04	 shl	 eax, 4
  0009b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  000a1	51		 push	 ecx
  000a2	6a 00		 push	 0
  000a4	6a 00		 push	 0
  000a6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  000ab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000b3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b7	51		 push	 ecx
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  000d0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000dc	51		 push	 ecx
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 947  : 
; 948  : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * 0.5, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * 0.5, MFD_WINDOW_Y_MAX);

  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3effbe77
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	51		 push	 ecx
  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	51		 push	 ecx
  00120	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 949  : 
; 950  : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (0.5 * 0.5));

  00138	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00140	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00148	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00150	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00154	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00158	f3 0f 11 45 f8	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 951  : 
; 952  : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (0.5 * 0.5)) - 0.001;

  0015d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00165	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0016d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00175	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00179	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00185	f3 0f 11 45 f4	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 953  : 
; 954  : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  0018a	51		 push	 ecx
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	51		 push	 ecx
  00199	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	51		 push	 ecx
  001b2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  001b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 955  : 
; 956  : 	//
; 957  : 	// large and small MFD position
; 958  : 	//
; 959  : 
; 960  : 
; 961  : 	//
; 962  : 	// draw heading scale line
; 963  : 	//
; 964  : 
; 965  : //	draw_2d_line (-0.5, y_position, 0.5, y_position, MFD_COLOUR1);
; 966  : 
; 967  : 	//
; 968  : 	// large and small MFD differences
; 969  : 	//
; 970  : 
; 971  : 	get_2d_float_screen_coordinates (0.0, y_position, &i, &j);

  001c7	8d 45 e0	 lea	 eax, DWORD PTR _j$[ebp]
  001ca	50		 push	 eax
  001cb	8d 4d e4	 lea	 ecx, DWORD PTR _i$[ebp]
  001ce	51		 push	 ecx
  001cf	51		 push	 ecx
  001d0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	51		 push	 ecx
  001db	0f 57 c0	 xorps	 xmm0, xmm0
  001de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e3	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 972  : 
; 973  : 	set_mono_font_type (MONO_FONT_TYPE_5X9);

  001e8	6a 02		 push	 2
  001ea	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 974  : 
; 975  : 	//
; 976  : 	// draw command heading carat
; 977  : 	//
; 978  : 
; 979  : 	if (draw_command_heading)

  001ef	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  001f3	0f 84 66 02 00
	00		 je	 $LN9@draw_headi

; 980  : 	{
; 981  : 		if (!hokum_damage.navigation_computer)

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001fe	c1 e8 09	 shr	 eax, 9
  00201	83 e0 01	 and	 eax, 1
  00204	0f 85 55 02 00
	00		 jne	 $LN9@draw_headi

; 982  : 		{
; 983  : 			entity
; 984  : 				*wp;
; 985  : 
; 986  : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00215	89 45 c0	 mov	 DWORD PTR _wp$7[ebp], eax

; 987  : 
; 988  : 			if (wp)

  00218	83 7d c0 00	 cmp	 DWORD PTR _wp$7[ebp], 0
  0021c	0f 84 3d 02 00
	00		 je	 $LN9@draw_headi

; 989  : 			{
; 990  : 				vec3d
; 991  : 					*gunship_position,
; 992  : 					waypoint_position;
; 993  : 
; 994  : 				float
; 995  : 					dx,
; 996  : 					dz,
; 997  : 					bearing,
; 998  : 					command_heading;
; 999  : 
; 1000 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00222	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00229	74 0f		 je	 SHORT $LN18@draw_headi
  0022b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00230	8b 08		 mov	 ecx, DWORD PTR [eax]
  00232	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv166[ebp], ecx
  00238	eb 24		 jmp	 SHORT $LN19@draw_headi
$LN18@draw_headi:
  0023a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00240	83 c2 56	 add	 edx, 86			; 00000056H
  00243	52		 push	 edx
  00244	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00249	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00254	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv166[ebp], 0
$LN19@draw_headi:
  0025e	b9 01 00 00 00	 mov	 ecx, 1
  00263	85 c9		 test	 ecx, ecx
  00265	74 0c		 je	 SHORT $LN20@draw_headi
  00267	c7 85 58 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv174[ebp], 8
  00271	eb 24		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  00273	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00279	83 c2 56	 add	 edx, 86			; 00000056H
  0027c	52		 push	 edx
  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00282	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0028d	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv174[ebp], 0
$LN21@draw_headi:
  00297	6a 08		 push	 8
  00299	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0029f	51		 push	 ecx
  002a0	6b 95 5c ff ff
	ff 60		 imul	 edx, DWORD PTR tv166[ebp], 96
  002a7	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv174[ebp]
  002ad	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002b4	ff d1		 call	 ecx
  002b6	89 45 bc	 mov	 DWORD PTR _gunship_position$6[ebp], eax

; 1001 : 
; 1002 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  002b9	8d 45 b0	 lea	 eax, DWORD PTR _waypoint_position$5[ebp]
  002bc	50		 push	 eax
  002bd	8b 4d c0	 mov	 ecx, DWORD PTR _wp$7[ebp]
  002c0	51		 push	 ecx
  002c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002c7	52		 push	 edx
  002c8	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1003 : 
; 1004 : 				dx = waypoint_position.x - gunship_position->x;

  002cd	8b 45 bc	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  002d0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp]
  002d5	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  002d9	f3 0f 11 45 ac	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 1005 : 				dz = waypoint_position.z - gunship_position->z;

  002de	8b 45 bc	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  002e1	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp+8]
  002e6	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  002eb	f3 0f 11 45 a8	 movss	 DWORD PTR _dz$3[ebp], xmm0

; 1006 : 
; 1007 : 				bearing = atan2 (dx, dz);

  002f0	51		 push	 ecx
  002f1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _dz$3[ebp]
  002f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fb	51		 push	 ecx
  002fc	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0030b	d9 5d a4	 fstp	 DWORD PTR _bearing$2[ebp]

; 1008 : 
; 1009 : 				command_heading = bearing - heading;

  0030e	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bearing$2[ebp]
  00313	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  00318	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 1010 : 
; 1011 : 				if (command_heading > rad (180.0))

  0031d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00322	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  0032a	76 18		 jbe	 SHORT $LN10@draw_headi

; 1012 : 				{
; 1013 : 					command_heading -= rad (360.0);

  0032c	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00331	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00339	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033d	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
  00342	eb 29		 jmp	 SHORT $LN12@draw_headi
$LN10@draw_headi:

; 1014 : 				}
; 1015 : 				else if (command_heading < rad (-180.0))

  00344	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00349	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  00351	66 0f 2f c8	 comisd	 xmm1, xmm0
  00355	76 16		 jbe	 SHORT $LN12@draw_headi

; 1016 : 				{
; 1017 : 					command_heading += rad (360.0);

  00357	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0035c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  00364	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00368	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
$LN12@draw_headi:

; 1018 : 				}
; 1019 : 
; 1020 : 				command_heading = bound (command_heading, rad (-20.0), rad (20.0));

  0036d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00372	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd6571848000000
  0037a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0037e	76 12		 jbe	 SHORT $LN24@draw_headi
  00380	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfd6571848000000
  00388	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
  00390	eb 3e		 jmp	 SHORT $LN25@draw_headi
$LN24@draw_headi:
  00392	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00397	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd6571848000000
  0039f	76 12		 jbe	 SHORT $LN22@draw_headi
  003a1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd6571848000000
  003a9	f2 0f 11 85 50
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
  003b1	eb 0d		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  003b3	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003b8	f2 0f 11 85 50
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
$LN23@draw_headi:
  003c0	f2 0f 10 85 50
	ff ff ff	 movsd	 xmm0, QWORD PTR tv206[ebp]
  003c8	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
$LN25@draw_headi:
  003d0	f2 0f 5a 85 58
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv207[ebp]
  003d8	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 1021 : 
; 1022 : 				get_2d_float_screen_coordinates (deg(command_heading) * (0.025), y_position + 0.05, &i, &j);

  003dd	8d 45 e0	 lea	 eax, DWORD PTR _j$[ebp]
  003e0	50		 push	 eax
  003e1	8d 4d e4	 lea	 ecx, DWORD PTR _i$[ebp]
  003e4	51		 push	 ecx
  003e5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  003ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  003f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f6	51		 push	 ecx
  003f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fc	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _command_heading$1[ebp]
  00401	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00409	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0040d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00415	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00419	51		 push	 ecx
  0041a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041f	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1023 : 
; 1024 : 				draw_mono_sprite (small_command_heading_carat, i, j + 1.0, MFD_COLOUR1);

  00424	b8 04 00 00 00	 mov	 eax, 4
  00429	6b c8 00	 imul	 ecx, eax, 0
  0042c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00432	52		 push	 edx
  00433	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _j$[ebp]
  00438	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00440	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00444	51		 push	 ecx
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	51		 push	 ecx
  0044b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _i$[ebp]
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	68 00 00 00 00	 push	 OFFSET ?small_command_heading_carat@@3PADA
  0045a	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN9@draw_headi:

; 1025 : 			}
; 1026 : 		}
; 1027 : 	}
; 1028 : 
; 1029 : 	//
; 1030 : 	// sort first major tick position (draw 2 major ticks either side of centre)
; 1031 : 	//
; 1032 : 
; 1033 : 	heading = deg (heading);

  0045f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00464	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  0046c	f3 0f 11 45 08	 movss	 DWORD PTR _heading$[ebp], xmm0

; 1034 : 
; 1035 : 	mod_heading_step_10 = fmod (heading, 10.0f);

  00471	51		 push	 ecx
  00472	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0047a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047f	51		 push	 ecx
  00480	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00485	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048a	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0048f	d9 5d f0	 fstp	 DWORD PTR _mod_heading_step_10$[ebp]

; 1036 : 
; 1037 : 	int_heading_step_10 = ((int) (heading * 0.1) * 10);

  00492	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00497	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0049f	f2 0f 2c c0	 cvttsd2si eax, xmm0
  004a3	6b c8 0a	 imul	 ecx, eax, 10
  004a6	89 4d d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], ecx

; 1038 : 
; 1039 : 	int_heading_step_10 -= 40;

  004a9	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004ac	83 e8 28	 sub	 eax, 40			; 00000028H
  004af	89 45 d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1040 : 
; 1041 : 	if (int_heading_step_10 < 0)

  004b2	79 0b		 jns	 SHORT $LN13@draw_headi

; 1042 : 	{
; 1043 : 		int_heading_step_10 += 360;

  004b4	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004b7	05 68 01 00 00	 add	 eax, 360		; 00000168H
  004bc	89 45 d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN13@draw_headi:

; 1044 : 	}
; 1045 : 
; 1046 : 	x = - (40.0 + mod_heading_step_10) * 0.025;

  004bf	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  004c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4044000000000000
  004cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  004d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9999999999999a
  004db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004df	f3 0f 11 45 ec	 movss	 DWORD PTR _x$[ebp], xmm0

; 1047 : 
; 1048 : 	//
; 1049 : 	// draw heading scale ticks and heading value
; 1050 : 	//
; 1051 : 
; 1052 : 	for (loop = 0; loop < 20; loop++)

  004e4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  004eb	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  004ed	8b 45 dc	 mov	 eax, DWORD PTR _loop$[ebp]
  004f0	83 c0 01	 add	 eax, 1
  004f3	89 45 dc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  004f6	83 7d dc 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  004fa	0f 8d a3 01 00
	00		 jge	 $LN3@draw_headi

; 1053 : 	{
; 1054 : 		//
; 1055 : 		// major tick every 10 degrees
; 1056 : 		//
; 1057 : 
; 1058 : 		draw_2d_line (x, y_position + 0.1, x, y_position + 0.05, MFD_COLOUR_LIGHT_BLUE);

  00500	b8 04 00 00 00	 mov	 eax, 4
  00505	c1 e0 04	 shl	 eax, 4
  00508	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0050e	51		 push	 ecx
  0050f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  00514	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0051c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00520	51		 push	 ecx
  00521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00526	51		 push	 ecx
  00527	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$[ebp]
  0052c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00531	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  00536	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0053e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00542	51		 push	 ecx
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	51		 push	 ecx
  00549	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$[ebp]
  0054e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00553	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1059 : 
; 1060 : 		//
; 1061 : 		// minor tick every 5 degrees
; 1062 : 		//
; 1063 : 
; 1064 : 		draw_2d_line (x + 0.125, y_position + 0.1, x + 0.125, y_position + 0.075, MFD_COLOUR_LIGHT_BLUE);

  00558	b8 04 00 00 00	 mov	 eax, 4
  0055d	c1 e0 04	 shl	 eax, 4
  00560	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00566	51		 push	 ecx
  00567	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  0056c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  00574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00578	51		 push	 ecx
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00583	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  0058b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0058f	51		 push	 ecx
  00590	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00595	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  0059a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  005a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a6	51		 push	 ecx
  005a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ac	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  005b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  005b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005bd	51		 push	 ecx
  005be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1065 : 
; 1066 : 		//
; 1067 : 		// heading value ('0' displayed as '360')
; 1068 : 		//
; 1069 : 
; 1070 : 		if (int_heading_step_10 != 0)

  005c8	83 7d d8 00	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 0
  005cc	74 17		 je	 SHORT $LN14@draw_headi

; 1071 : 		{
; 1072 : 			sprintf (s, "%d", int_heading_step_10);

  005ce	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  005d1	50		 push	 eax
  005d2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  005d7	8d 4d c4	 lea	 ecx, DWORD PTR _s$[ebp]
  005da	51		 push	 ecx
  005db	e8 00 00 00 00	 call	 _sprintf
  005e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1073 : 		}
; 1074 : 		else

  005e3	eb 11		 jmp	 SHORT $LN15@draw_headi
$LN14@draw_headi:

; 1075 : 		{
; 1076 : 			sprintf (s, "360");

  005e5	68 00 00 00 00	 push	 OFFSET ??_C@_03MDIFNIHN@360@
  005ea	8d 45 c4	 lea	 eax, DWORD PTR _s$[ebp]
  005ed	50		 push	 eax
  005ee	e8 00 00 00 00	 call	 _sprintf
  005f3	83 c4 08	 add	 esp, 8
$LN15@draw_headi:

; 1077 : 		}
; 1078 : 
; 1079 : 		set_2d_mono_font_position (x, y_position - 0.1);

  005f6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  005fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00603	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00607	51		 push	 ecx
  00608	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060d	51		 push	 ecx
  0060e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$[ebp]
  00613	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00618	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1080 : 
; 1081 : 		width = get_mono_font_string_width (s);

  0061d	8d 45 c4	 lea	 eax, DWORD PTR _s$[ebp]
  00620	50		 push	 eax
  00621	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00626	d9 5d e8	 fstp	 DWORD PTR _width$[ebp]

; 1082 : 
; 1083 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, -10.0);

  00629	51		 push	 ecx
  0062a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1200000
  00632	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00637	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _width$[ebp]
  0063c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00643	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00647	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0064f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00657	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0065b	51		 push	 ecx
  0065c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00661	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1084 : 
; 1085 : 		print_mono_font_string (s);

  00666	8d 45 c4	 lea	 eax, DWORD PTR _s$[ebp]
  00669	50		 push	 eax
  0066a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1086 : 
; 1087 : 		//
; 1088 : 		// next heading value
; 1089 : 		//
; 1090 : 
; 1091 : 		int_heading_step_10 += 10;

  0066f	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00672	83 c0 0a	 add	 eax, 10			; 0000000aH
  00675	89 45 d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1092 : 
; 1093 : 		if (int_heading_step_10 == 360)

  00678	81 7d d8 68 01
	00 00		 cmp	 DWORD PTR _int_heading_step_10$[ebp], 360 ; 00000168H
  0067f	75 07		 jne	 SHORT $LN16@draw_headi

; 1094 : 		{
; 1095 : 			int_heading_step_10 = 0;

  00681	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _int_heading_step_10$[ebp], 0
$LN16@draw_headi:

; 1096 : 		}
; 1097 : 
; 1098 : 		x += 0.25;

  00688	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0068d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00695	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00699	f3 0f 11 45 ec	 movss	 DWORD PTR _x$[ebp], xmm0

; 1099 : 	}

  0069e	e9 4a fe ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1100 : 
; 1101 : 	//
; 1102 : 	// restore 2D environment
; 1103 : 	//
; 1104 : 
; 1105 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  006a3	51		 push	 ecx
  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	51		 push	 ecx
  006b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  006ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bf	51		 push	 ecx
  006c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	51		 push	 ecx
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e0	50		 push	 eax
  006e1	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1106 : 
; 1107 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  006e6	51		 push	 ecx
  006e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  006ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f4	51		 push	 ecx
  006f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  006fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00702	51		 push	 ecx
  00703	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	51		 push	 ecx
  00711	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00719	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00723	50		 push	 eax
  00724	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1108 : }

  00729	5f		 pop	 edi
  0072a	5e		 pop	 esi
  0072b	5b		 pop	 ebx
  0072c	8b e5		 mov	 esp, ebp
  0072e	5d		 pop	 ebp
  0072f	c2 08 00	 ret	 8
?draw_heading_scale@@YGXMH@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_overlaid_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_overlaid_damaged_mfd@@YGXXZ PROC			; draw_overlaid_damaged_mfd, COMDAT

; 852  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 853  : 	int
; 854  : 		count,
; 855  : 		max_lines,
; 856  : 		i;
; 857  : 
; 858  : 	rgb_colour
; 859  : 		col;
; 860  : 
; 861  : 	float
; 862  : 		x_centre,
; 863  : 		x_delta,
; 864  : 		x_left,
; 865  : 		x_right,
; 866  : 		y;
; 867  : 
; 868  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 869  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 870  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 871  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 872  : 
; 873  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_overl

; 874  : 	{
; 875  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 876  : 	}
; 877  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_overl
$LN5@draw_overl:

; 878  : 	{
; 879  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_overl:

; 880  : 	}
; 881  : 
; 882  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_overl
$LN2@draw_overl:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_overl:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 7c 01 00
	00		 jge	 $LN3@draw_overl

; 883  : 	{
; 884  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 885  : 
; 886  : 		col.r = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f2	 mov	 BYTE PTR _col$[ebp+2], al

; 887  : 		col.g = i + 128;

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000ad	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 888  : 
; 889  : 		x_centre = sfrand1 ();

  000b0	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ba	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000ca	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000cd	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000d3	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000d9	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000dd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 890  : 
; 891  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000ee	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000f8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000fd	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00108	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0010b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00111	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00115	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00125	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  0012d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00131	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 892  : 
; 893  : 		x_left = x_centre - x_delta;

  00136	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013b	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00140	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 894  : 
; 895  : 		x_right = x_centre + x_delta;

  00145	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0014a	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  0014f	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 896  : 
; 897  : 		y = sfrand1 ();

  00154	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0015e	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00163	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0016e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00171	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00177	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0017d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00181	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 898  : 
; 899  : 		draw_2d_line (x_left, y, x_right, y, col);

  00192	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  00195	50		 push	 eax
  00196	51		 push	 ecx
  00197	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	51		 push	 ecx
  001b8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 900  : 	}

  001c7	e9 6f fe ff ff	 jmp	 $LN2@draw_overl
$LN3@draw_overl:

; 901  : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
?draw_overlaid_damaged_mfd@@YGXXZ ENDP			; draw_overlaid_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 796  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 797  : 	int
; 798  : 		count,
; 799  : 		max_lines,
; 800  : 		i;
; 801  : 
; 802  : 	rgb_colour
; 803  : 		col;
; 804  : 
; 805  : 	float
; 806  : 		x_centre,
; 807  : 		x_delta,
; 808  : 		x_left,
; 809  : 		x_right,
; 810  : 		y;
; 811  : 
; 812  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 813  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 814  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 815  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 816  : 
; 817  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 818  : 	{
; 819  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 820  : 	}
; 821  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 822  : 	{
; 823  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 824  : 	}
; 825  : 
; 826  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 7c 01 00
	00		 jge	 $LN3@draw_damag

; 827  : 	{
; 828  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 829  : 
; 830  : 		col.r = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f2	 mov	 BYTE PTR _col$[ebp+2], al

; 831  : 		col.g = (i >> 1) + 64;

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	d1 f8		 sar	 eax, 1
  000aa	83 c0 40	 add	 eax, 64			; 00000040H
  000ad	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 832  : 
; 833  : 		x_centre = sfrand1 ();

  000b0	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ba	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000ca	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000cd	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000d3	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000d9	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000dd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 834  : 
; 835  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000ee	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000f8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000fd	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00108	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0010b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00111	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00115	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00125	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  0012d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00131	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 836  : 
; 837  : 		x_left = x_centre - x_delta;

  00136	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013b	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00140	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 838  : 
; 839  : 		x_right = x_centre + x_delta;

  00145	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0014a	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  0014f	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 840  : 
; 841  : 		y = sfrand1 ();

  00154	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0015e	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00163	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0016e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00171	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00177	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0017d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00181	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 842  : 
; 843  : 		draw_2d_line (x_left, y, x_right, y, col);

  00192	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  00195	50		 push	 eax
  00196	51		 push	 ecx
  00197	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	51		 push	 ecx
  001b8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 844  : 	}

  001c7	e9 6f fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 845  : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 767  : 	float
; 768  : 		x,
; 769  : 		y;
; 770  : 
; 771  : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 772  : 	{
; 773  : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 774  : 		{
; 775  : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 776  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 777  : 
; 778  : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 779  : 		{
; 780  : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 781  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 782  : 	}
; 783  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z PROC ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords, COMDAT

; 744  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 745  : 	ASSERT (i);

  00009	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@transform_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@transform_:

; 746  : 	ASSERT (j);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _j$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@transform_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01CBDEGOCN@j@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@transform_:

; 747  : 
; 748  : 	*i -= mfd_screen_x_min;

  00045	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 749  : 	*j -= mfd_screen_y_min;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0005e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00062	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  0006d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 750  : 
; 751  : 	*i *= mfd_screen_x_scale;

  00071	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00074	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00078	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_x_scale@@3MA
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 752  : 	*j *= mfd_screen_y_scale;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_y_scale@@3MA
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  00099	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 753  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ENDP ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ PROC ; get_mfd_mode_for_eo_sensor, COMDAT

; 10205: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10206: 	hokum_mfd_modes
; 10207: 		mfd_mode;
; 10208: 
; 10209: 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_mfd_mo

; 10210: 	{
; 10211: 		mfd_mode = HOKUM_MFD_MODE_FLIR;

  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4
  00019	eb 37		 jmp	 SHORT $LN3@get_mfd_mo
$LN2@get_mfd_mo:

; 10212: 	}
; 10213: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_LLLTV)

  0001b	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 6 ; eo_sensor
  00022	75 09		 jne	 SHORT $LN4@get_mfd_mo

; 10214: 	{
; 10215: 		mfd_mode = HOKUM_MFD_MODE_LLLTV;

  00024	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 5
  0002b	eb 25		 jmp	 SHORT $LN3@get_mfd_mo
$LN4@get_mfd_mo:

; 10216: 	}
; 10217: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_PERISCOPE)

  0002d	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 7 ; eo_sensor
  00034	75 09		 jne	 SHORT $LN6@get_mfd_mo

; 10218: 	{
; 10219: 		mfd_mode = HOKUM_MFD_MODE_PERISCOPE;

  00036	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 6

; 10220: 	}
; 10221: 	else

  0003d	eb 13		 jmp	 SHORT $LN3@get_mfd_mo
$LN6@get_mfd_mo:

; 10222: 	{
; 10223: 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  0004a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0004f	83 c4 08	 add	 esp, 8
$LN3@get_mfd_mo:

; 10224: 	}
; 10225: 
; 10226: 	return (mfd_mode);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 10227: }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ENDP ; get_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_hokum_eo_mfd@@YGXXZ
_TEXT	SEGMENT
?select_hokum_eo_mfd@@YGXXZ PROC			; select_hokum_eo_mfd, COMDAT

; 11353: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11354: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 3d 01 00
	00		 jne	 $LN2@select_hok

; 11355: 	{
; 11356: 		////////////////////////////////////////
; 11357: 		//
; 11358: 		// PILOT
; 11359: 		//
; 11360: 		////////////////////////////////////////
; 11361: 
; 11362: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!hokum_damage.pilot_lh_mfd))

  00016	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0001d	75 1f		 jne	 SHORT $LN4@select_hok
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00024	c1 e8 11	 shr	 eax, 17			; 00000011H
  00027	83 e0 01	 and	 eax, 1
  0002a	75 12		 jne	 SHORT $LN4@select_hok

; 11363: 		{
; 11364: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_LHS);

  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11365: 
; 11366: 			return;

  00039	e9 3f 02 00 00	 jmp	 $LN1@select_hok
$LN4@select_hok:

; 11367: 		}
; 11368: 
; 11369: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!hokum_damage.pilot_rh_mfd))

  0003e	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  00045	75 1f		 jne	 SHORT $LN5@select_hok
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0004c	c1 e8 12	 shr	 eax, 18			; 00000012H
  0004f	83 e0 01	 and	 eax, 1
  00052	75 12		 jne	 SHORT $LN5@select_hok

; 11370: 		{
; 11371: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_RHS);

  00054	6a 01		 push	 1
  00056	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11372: 
; 11373: 			return;

  00061	e9 17 02 00 00	 jmp	 $LN1@select_hok
$LN5@select_hok:

; 11374: 		}
; 11375: 
; 11376: 		if
; 11377: 		(
; 11378: 			(pilot_lhs_mfd_mode == HOKUM_MFD_MODE_FLIR) ||
; 11379: 			(pilot_lhs_mfd_mode == HOKUM_MFD_MODE_LLLTV) ||

  00066	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 4
  0006d	74 12		 je	 SHORT $LN7@select_hok
  0006f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 5
  00076	74 09		 je	 SHORT $LN7@select_hok
  00078	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 6
  0007f	75 12		 jne	 SHORT $LN6@select_hok
$LN7@select_hok:

; 11380: 			(pilot_lhs_mfd_mode == HOKUM_MFD_MODE_PERISCOPE)
; 11381: 		)
; 11382: 		{
; 11383: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_LHS);

  00081	6a 00		 push	 0
  00083	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11384: 
; 11385: 			return;

  0008e	e9 ea 01 00 00	 jmp	 $LN1@select_hok
$LN6@select_hok:

; 11386: 		}
; 11387: 
; 11388: 		if
; 11389: 		(
; 11390: 			(pilot_rhs_mfd_mode == HOKUM_MFD_MODE_FLIR) ||
; 11391: 			(pilot_rhs_mfd_mode == HOKUM_MFD_MODE_LLLTV) ||

  00093	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 4
  0009a	74 12		 je	 SHORT $LN9@select_hok
  0009c	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 5
  000a3	74 09		 je	 SHORT $LN9@select_hok
  000a5	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 6
  000ac	75 12		 jne	 SHORT $LN8@select_hok
$LN9@select_hok:

; 11392: 			(pilot_rhs_mfd_mode == HOKUM_MFD_MODE_PERISCOPE)
; 11393: 		)
; 11394: 		{
; 11395: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_RHS);

  000ae	6a 01		 push	 1
  000b0	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11396: 
; 11397: 			return;

  000bb	e9 bd 01 00 00	 jmp	 $LN1@select_hok
$LN8@select_hok:

; 11398: 		}
; 11399: 
; 11400: 		if ((pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_lh_mfd))

  000c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  000c7	75 1f		 jne	 SHORT $LN10@select_hok
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000ce	c1 e8 11	 shr	 eax, 17			; 00000011H
  000d1	83 e0 01	 and	 eax, 1
  000d4	75 12		 jne	 SHORT $LN10@select_hok

; 11401: 		{
; 11402: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_LHS);

  000d6	6a 00		 push	 0
  000d8	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11403: 
; 11404: 			return;

  000e3	e9 95 01 00 00	 jmp	 $LN1@select_hok
$LN10@select_hok:

; 11405: 		}
; 11406: 
; 11407: 		if ((pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_rh_mfd))

  000e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  000ef	75 1f		 jne	 SHORT $LN11@select_hok
  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000f6	c1 e8 12	 shr	 eax, 18			; 00000012H
  000f9	83 e0 01	 and	 eax, 1
  000fc	75 12		 jne	 SHORT $LN11@select_hok

; 11408: 		{
; 11409: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_RHS);

  000fe	6a 01		 push	 1
  00100	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11410: 
; 11411: 			return;

  0010b	e9 6d 01 00 00	 jmp	 $LN1@select_hok
$LN11@select_hok:

; 11412: 		}
; 11413: 
; 11414: 		if (!hokum_damage.pilot_lh_mfd)

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00115	c1 e8 11	 shr	 eax, 17			; 00000011H
  00118	83 e0 01	 and	 eax, 1
  0011b	75 12		 jne	 SHORT $LN12@select_hok

; 11415: 		{
; 11416: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_LHS);

  0011d	6a 00		 push	 0
  0011f	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11417: 
; 11418: 			return;

  0012a	e9 4e 01 00 00	 jmp	 $LN1@select_hok
$LN12@select_hok:

; 11419: 		}
; 11420: 
; 11421: 		if (!hokum_damage.pilot_rh_mfd)

  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00134	c1 e8 12	 shr	 eax, 18			; 00000012H
  00137	83 e0 01	 and	 eax, 1
  0013a	75 12		 jne	 SHORT $LN13@select_hok

; 11422: 		{
; 11423: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_PILOT_RHS);

  0013c	6a 01		 push	 1
  0013e	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11424: 
; 11425: 			return;

  00149	e9 2f 01 00 00	 jmp	 $LN1@select_hok
$LN13@select_hok:

; 11426: 		}
; 11427: 	}
; 11428: 	else

  0014e	e9 2a 01 00 00	 jmp	 $LN1@select_hok
$LN2@select_hok:

; 11429: 	{
; 11430: 		////////////////////////////////////////
; 11431: 		//
; 11432: 		// CO-PILOT
; 11433: 		//
; 11434: 		////////////////////////////////////////
; 11435: 
; 11436: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!hokum_damage.co_pilot_lh_mfd))

  00153	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  0015a	75 1f		 jne	 SHORT $LN14@select_hok
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00161	c1 e8 13	 shr	 eax, 19			; 00000013H
  00164	83 e0 01	 and	 eax, 1
  00167	75 12		 jne	 SHORT $LN14@select_hok

; 11437: 		{
; 11438: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00169	6a 02		 push	 2
  0016b	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11439: 
; 11440: 			return;

  00176	e9 02 01 00 00	 jmp	 $LN1@select_hok
$LN14@select_hok:

; 11441: 		}
; 11442: 
; 11443: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!hokum_damage.co_pilot_rh_mfd))

  0017b	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00182	75 1f		 jne	 SHORT $LN15@select_hok
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00189	c1 e8 15	 shr	 eax, 21			; 00000015H
  0018c	83 e0 01	 and	 eax, 1
  0018f	75 12		 jne	 SHORT $LN15@select_hok

; 11444: 		{
; 11445: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00191	6a 03		 push	 3
  00193	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11446: 
; 11447: 			return;

  0019e	e9 da 00 00 00	 jmp	 $LN1@select_hok
$LN15@select_hok:

; 11448: 		}
; 11449: 
; 11450: 		if
; 11451: 		(
; 11452: 			(co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_FLIR) ||
; 11453: 			(co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_LLLTV) ||

  001a3	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 4
  001aa	74 12		 je	 SHORT $LN17@select_hok
  001ac	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 5
  001b3	74 09		 je	 SHORT $LN17@select_hok
  001b5	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 6
  001bc	75 12		 jne	 SHORT $LN16@select_hok
$LN17@select_hok:

; 11454: 			(co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_PERISCOPE)
; 11455: 		)
; 11456: 		{
; 11457: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  001be	6a 02		 push	 2
  001c0	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11458: 
; 11459: 			return;

  001cb	e9 ad 00 00 00	 jmp	 $LN1@select_hok
$LN16@select_hok:

; 11460: 		}
; 11461: 
; 11462: 		if
; 11463: 		(
; 11464: 			(co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_FLIR) ||
; 11465: 			(co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_LLLTV) ||

  001d0	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 4
  001d7	74 12		 je	 SHORT $LN19@select_hok
  001d9	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 5
  001e0	74 09		 je	 SHORT $LN19@select_hok
  001e2	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 6
  001e9	75 12		 jne	 SHORT $LN18@select_hok
$LN19@select_hok:

; 11466: 			(co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_PERISCOPE)
; 11467: 		)
; 11468: 		{
; 11469: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  001eb	6a 03		 push	 3
  001ed	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11470: 
; 11471: 			return;

  001f8	e9 80 00 00 00	 jmp	 $LN1@select_hok
$LN18@select_hok:

; 11472: 		}
; 11473: 
; 11474: 		if ((co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_lh_mfd))

  001fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  00204	75 1c		 jne	 SHORT $LN20@select_hok
  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0020b	c1 e8 13	 shr	 eax, 19			; 00000013H
  0020e	83 e0 01	 and	 eax, 1
  00211	75 0f		 jne	 SHORT $LN20@select_hok

; 11475: 		{
; 11476: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00213	6a 02		 push	 2
  00215	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11477: 
; 11478: 			return;

  00220	eb 5b		 jmp	 SHORT $LN1@select_hok
$LN20@select_hok:

; 11479: 		}
; 11480: 
; 11481: 		if ((co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_rh_mfd))

  00222	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  00229	75 1c		 jne	 SHORT $LN21@select_hok
  0022b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00230	c1 e8 15	 shr	 eax, 21			; 00000015H
  00233	83 e0 01	 and	 eax, 1
  00236	75 0f		 jne	 SHORT $LN21@select_hok

; 11482: 		{
; 11483: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00238	6a 03		 push	 3
  0023a	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11484: 
; 11485: 			return;

  00245	eb 36		 jmp	 SHORT $LN1@select_hok
$LN21@select_hok:

; 11486: 		}
; 11487: 
; 11488: 		if (!hokum_damage.co_pilot_lh_mfd)

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0024c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0024f	83 e0 01	 and	 eax, 1
  00252	75 0f		 jne	 SHORT $LN22@select_hok

; 11489: 		{
; 11490: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00254	6a 02		 push	 2
  00256	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11491: 
; 11492: 			return;

  00261	eb 1a		 jmp	 SHORT $LN1@select_hok
$LN22@select_hok:

; 11493: 		}
; 11494: 
; 11495: 		if (!hokum_damage.co_pilot_rh_mfd)

  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00268	c1 e8 15	 shr	 eax, 21			; 00000015H
  0026b	83 e0 01	 and	 eax, 1
  0026e	75 0d		 jne	 SHORT $LN1@select_hok

; 11496: 		{
; 11497: 			select_hokum_mfd_mode (get_mfd_mode_for_eo_sensor (), HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00270	6a 03		 push	 3
  00272	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode
$LN1@select_hok:

; 11498: 
; 11499: 			return;
; 11500: 		}
; 11501: 	}
; 11502: }

  0027d	5f		 pop	 edi
  0027e	5e		 pop	 esi
  0027f	5b		 pop	 ebx
  00280	8b e5		 mov	 esp, ebp
  00282	5d		 pop	 ebp
  00283	c3		 ret	 0
?select_hokum_eo_mfd@@YGXXZ ENDP			; select_hokum_eo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_hokum_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_hokum_air_radar_mfd@@YGXXZ PROC			; select_hokum_air_radar_mfd, COMDAT

; 11197: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11198: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 15 01 00
	00		 jne	 $LN2@select_hok

; 11199: 	{
; 11200: 		////////////////////////////////////////
; 11201: 		//
; 11202: 		// PILOT
; 11203: 		//
; 11204: 		////////////////////////////////////////
; 11205: 
; 11206: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!hokum_damage.pilot_lh_mfd))

  00016	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0001d	75 1b		 jne	 SHORT $LN4@select_hok
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00024	c1 e8 11	 shr	 eax, 17			; 00000011H
  00027	83 e0 01	 and	 eax, 1
  0002a	75 0e		 jne	 SHORT $LN4@select_hok

; 11207: 		{
; 11208: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  0002c	6a 00		 push	 0
  0002e	6a 03		 push	 3
  00030	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11209: 
; 11210: 			return;

  00035	e9 f0 01 00 00	 jmp	 $LN1@select_hok
$LN4@select_hok:

; 11211: 		}
; 11212: 
; 11213: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!hokum_damage.pilot_rh_mfd))

  0003a	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  00041	75 1b		 jne	 SHORT $LN5@select_hok
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00048	c1 e8 12	 shr	 eax, 18			; 00000012H
  0004b	83 e0 01	 and	 eax, 1
  0004e	75 0e		 jne	 SHORT $LN5@select_hok

; 11214: 		{
; 11215: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  00050	6a 01		 push	 1
  00052	6a 03		 push	 3
  00054	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11216: 
; 11217: 			return;

  00059	e9 cc 01 00 00	 jmp	 $LN1@select_hok
$LN5@select_hok:

; 11218: 		}
; 11219: 
; 11220: 		if (pilot_lhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  0005e	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  00065	75 05		 jne	 SHORT $LN6@select_hok

; 11221: 		{
; 11222: 			return;

  00067	e9 be 01 00 00	 jmp	 $LN1@select_hok
$LN6@select_hok:

; 11223: 		}
; 11224: 
; 11225: 		if (pilot_rhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  0006c	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  00073	75 05		 jne	 SHORT $LN7@select_hok

; 11226: 		{
; 11227: 			return;

  00075	e9 b0 01 00 00	 jmp	 $LN1@select_hok
$LN7@select_hok:

; 11228: 		}
; 11229: 
; 11230: 		if (pilot_lhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  0007a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  00081	75 0e		 jne	 SHORT $LN8@select_hok

; 11231: 		{
; 11232: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  00083	6a 00		 push	 0
  00085	6a 03		 push	 3
  00087	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11233: 
; 11234: 			return;

  0008c	e9 99 01 00 00	 jmp	 $LN1@select_hok
$LN8@select_hok:

; 11235: 		}
; 11236: 
; 11237: 		if (pilot_rhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  00091	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  00098	75 0e		 jne	 SHORT $LN9@select_hok

; 11238: 		{
; 11239: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  0009a	6a 01		 push	 1
  0009c	6a 03		 push	 3
  0009e	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11240: 
; 11241: 			return;

  000a3	e9 82 01 00 00	 jmp	 $LN1@select_hok
$LN9@select_hok:

; 11242: 		}
; 11243: 
; 11244: 		if ((pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_lh_mfd))

  000a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  000af	75 1b		 jne	 SHORT $LN10@select_hok
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000b6	c1 e8 11	 shr	 eax, 17			; 00000011H
  000b9	83 e0 01	 and	 eax, 1
  000bc	75 0e		 jne	 SHORT $LN10@select_hok

; 11245: 		{
; 11246: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  000be	6a 00		 push	 0
  000c0	6a 03		 push	 3
  000c2	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11247: 
; 11248: 			return;

  000c7	e9 5e 01 00 00	 jmp	 $LN1@select_hok
$LN10@select_hok:

; 11249: 		}
; 11250: 
; 11251: 		if ((pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_rh_mfd))

  000cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  000d3	75 1b		 jne	 SHORT $LN11@select_hok
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000da	c1 e8 12	 shr	 eax, 18			; 00000012H
  000dd	83 e0 01	 and	 eax, 1
  000e0	75 0e		 jne	 SHORT $LN11@select_hok

; 11252: 		{
; 11253: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  000e2	6a 01		 push	 1
  000e4	6a 03		 push	 3
  000e6	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11254: 
; 11255: 			return;

  000eb	e9 3a 01 00 00	 jmp	 $LN1@select_hok
$LN11@select_hok:

; 11256: 		}
; 11257: 
; 11258: 		if (!hokum_damage.pilot_lh_mfd)

  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000f5	c1 e8 11	 shr	 eax, 17			; 00000011H
  000f8	83 e0 01	 and	 eax, 1
  000fb	75 0e		 jne	 SHORT $LN12@select_hok

; 11259: 		{
; 11260: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  000fd	6a 00		 push	 0
  000ff	6a 03		 push	 3
  00101	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11261: 
; 11262: 			return;

  00106	e9 1f 01 00 00	 jmp	 $LN1@select_hok
$LN12@select_hok:

; 11263: 		}
; 11264: 
; 11265: 		if (!hokum_damage.pilot_rh_mfd)

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00110	c1 e8 12	 shr	 eax, 18			; 00000012H
  00113	83 e0 01	 and	 eax, 1
  00116	75 0e		 jne	 SHORT $LN13@select_hok

; 11266: 		{
; 11267: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  00118	6a 01		 push	 1
  0011a	6a 03		 push	 3
  0011c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11268: 
; 11269: 			return;

  00121	e9 04 01 00 00	 jmp	 $LN1@select_hok
$LN13@select_hok:

; 11270: 		}
; 11271: 	}
; 11272: 	else

  00126	e9 ff 00 00 00	 jmp	 $LN1@select_hok
$LN2@select_hok:

; 11273: 	{
; 11274: 		////////////////////////////////////////
; 11275: 		//
; 11276: 		// CO-PILOT
; 11277: 		//
; 11278: 		////////////////////////////////////////
; 11279: 
; 11280: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!hokum_damage.co_pilot_lh_mfd))

  0012b	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  00132	75 1b		 jne	 SHORT $LN14@select_hok
  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00139	c1 e8 13	 shr	 eax, 19			; 00000013H
  0013c	83 e0 01	 and	 eax, 1
  0013f	75 0e		 jne	 SHORT $LN14@select_hok

; 11281: 		{
; 11282: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00141	6a 02		 push	 2
  00143	6a 03		 push	 3
  00145	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11283: 
; 11284: 			return;

  0014a	e9 db 00 00 00	 jmp	 $LN1@select_hok
$LN14@select_hok:

; 11285: 		}
; 11286: 
; 11287: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!hokum_damage.co_pilot_rh_mfd))

  0014f	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00156	75 1b		 jne	 SHORT $LN15@select_hok
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0015d	c1 e8 15	 shr	 eax, 21			; 00000015H
  00160	83 e0 01	 and	 eax, 1
  00163	75 0e		 jne	 SHORT $LN15@select_hok

; 11288: 		{
; 11289: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00165	6a 03		 push	 3
  00167	6a 03		 push	 3
  00169	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11290: 
; 11291: 			return;

  0016e	e9 b7 00 00 00	 jmp	 $LN1@select_hok
$LN15@select_hok:

; 11292: 		}
; 11293: 
; 11294: 		if (co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  00173	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  0017a	75 05		 jne	 SHORT $LN16@select_hok

; 11295: 		{
; 11296: 			return;

  0017c	e9 a9 00 00 00	 jmp	 $LN1@select_hok
$LN16@select_hok:

; 11297: 		}
; 11298: 
; 11299: 		if (co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  00181	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  00188	75 05		 jne	 SHORT $LN17@select_hok

; 11300: 		{
; 11301: 			return;

  0018a	e9 9b 00 00 00	 jmp	 $LN1@select_hok
$LN17@select_hok:

; 11302: 		}
; 11303: 
; 11304: 		if (co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  0018f	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  00196	75 0e		 jne	 SHORT $LN18@select_hok

; 11305: 		{
; 11306: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00198	6a 02		 push	 2
  0019a	6a 03		 push	 3
  0019c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11307: 
; 11308: 			return;

  001a1	e9 84 00 00 00	 jmp	 $LN1@select_hok
$LN18@select_hok:

; 11309: 		}
; 11310: 
; 11311: 		if (co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  001a6	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  001ad	75 0b		 jne	 SHORT $LN19@select_hok

; 11312: 		{
; 11313: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  001af	6a 03		 push	 3
  001b1	6a 03		 push	 3
  001b3	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11314: 
; 11315: 			return;

  001b8	eb 70		 jmp	 SHORT $LN1@select_hok
$LN19@select_hok:

; 11316: 		}
; 11317: 
; 11318: 		if ((co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_lh_mfd))

  001ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  001c1	75 18		 jne	 SHORT $LN20@select_hok
  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001c8	c1 e8 13	 shr	 eax, 19			; 00000013H
  001cb	83 e0 01	 and	 eax, 1
  001ce	75 0b		 jne	 SHORT $LN20@select_hok

; 11319: 		{
; 11320: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  001d0	6a 02		 push	 2
  001d2	6a 03		 push	 3
  001d4	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11321: 
; 11322: 			return;

  001d9	eb 4f		 jmp	 SHORT $LN1@select_hok
$LN20@select_hok:

; 11323: 		}
; 11324: 
; 11325: 		if ((co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_rh_mfd))

  001db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  001e2	75 18		 jne	 SHORT $LN21@select_hok
  001e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001e9	c1 e8 15	 shr	 eax, 21			; 00000015H
  001ec	83 e0 01	 and	 eax, 1
  001ef	75 0b		 jne	 SHORT $LN21@select_hok

; 11326: 		{
; 11327: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  001f1	6a 03		 push	 3
  001f3	6a 03		 push	 3
  001f5	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11328: 
; 11329: 			return;

  001fa	eb 2e		 jmp	 SHORT $LN1@select_hok
$LN21@select_hok:

; 11330: 		}
; 11331: 
; 11332: 		if (!hokum_damage.co_pilot_lh_mfd)

  001fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00201	c1 e8 13	 shr	 eax, 19			; 00000013H
  00204	83 e0 01	 and	 eax, 1
  00207	75 0b		 jne	 SHORT $LN22@select_hok

; 11333: 		{
; 11334: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00209	6a 02		 push	 2
  0020b	6a 03		 push	 3
  0020d	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11335: 
; 11336: 			return;

  00212	eb 16		 jmp	 SHORT $LN1@select_hok
$LN22@select_hok:

; 11337: 		}
; 11338: 
; 11339: 		if (!hokum_damage.co_pilot_rh_mfd)

  00214	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00219	c1 e8 15	 shr	 eax, 21			; 00000015H
  0021c	83 e0 01	 and	 eax, 1
  0021f	75 09		 jne	 SHORT $LN1@select_hok

; 11340: 		{
; 11341: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_AIR_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00221	6a 03		 push	 3
  00223	6a 03		 push	 3
  00225	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode
$LN1@select_hok:

; 11342: 
; 11343: 			return;
; 11344: 		}
; 11345: 	}
; 11346: }

  0022a	5f		 pop	 edi
  0022b	5e		 pop	 esi
  0022c	5b		 pop	 ebx
  0022d	8b e5		 mov	 esp, ebp
  0022f	5d		 pop	 ebp
  00230	c3		 ret	 0
?select_hokum_air_radar_mfd@@YGXXZ ENDP			; select_hokum_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_hokum_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_hokum_ground_radar_mfd@@YGXXZ PROC		; select_hokum_ground_radar_mfd, COMDAT

; 11041: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11042: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 15 01 00
	00		 jne	 $LN2@select_hok

; 11043: 	{
; 11044: 		////////////////////////////////////////
; 11045: 		//
; 11046: 		// PILOT
; 11047: 		//
; 11048: 		////////////////////////////////////////
; 11049: 
; 11050: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!hokum_damage.pilot_lh_mfd))

  00016	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0001d	75 1b		 jne	 SHORT $LN4@select_hok
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00024	c1 e8 11	 shr	 eax, 17			; 00000011H
  00027	83 e0 01	 and	 eax, 1
  0002a	75 0e		 jne	 SHORT $LN4@select_hok

; 11051: 		{
; 11052: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  0002c	6a 00		 push	 0
  0002e	6a 02		 push	 2
  00030	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11053: 
; 11054: 			return;

  00035	e9 f0 01 00 00	 jmp	 $LN1@select_hok
$LN4@select_hok:

; 11055: 		}
; 11056: 
; 11057: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!hokum_damage.pilot_rh_mfd))

  0003a	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  00041	75 1b		 jne	 SHORT $LN5@select_hok
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00048	c1 e8 12	 shr	 eax, 18			; 00000012H
  0004b	83 e0 01	 and	 eax, 1
  0004e	75 0e		 jne	 SHORT $LN5@select_hok

; 11058: 		{
; 11059: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  00050	6a 01		 push	 1
  00052	6a 02		 push	 2
  00054	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11060: 
; 11061: 			return;

  00059	e9 cc 01 00 00	 jmp	 $LN1@select_hok
$LN5@select_hok:

; 11062: 		}
; 11063: 
; 11064: 		if (pilot_lhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  0005e	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  00065	75 05		 jne	 SHORT $LN6@select_hok

; 11065: 		{
; 11066: 			return;

  00067	e9 be 01 00 00	 jmp	 $LN1@select_hok
$LN6@select_hok:

; 11067: 		}
; 11068: 
; 11069: 		if (pilot_rhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  0006c	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  00073	75 05		 jne	 SHORT $LN7@select_hok

; 11070: 		{
; 11071: 			return;

  00075	e9 b0 01 00 00	 jmp	 $LN1@select_hok
$LN7@select_hok:

; 11072: 		}
; 11073: 
; 11074: 		if (pilot_lhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  0007a	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  00081	75 0e		 jne	 SHORT $LN8@select_hok

; 11075: 		{
; 11076: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  00083	6a 00		 push	 0
  00085	6a 02		 push	 2
  00087	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11077: 
; 11078: 			return;

  0008c	e9 99 01 00 00	 jmp	 $LN1@select_hok
$LN8@select_hok:

; 11079: 		}
; 11080: 
; 11081: 		if (pilot_rhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  00091	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  00098	75 0e		 jne	 SHORT $LN9@select_hok

; 11082: 		{
; 11083: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  0009a	6a 01		 push	 1
  0009c	6a 02		 push	 2
  0009e	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11084: 
; 11085: 			return;

  000a3	e9 82 01 00 00	 jmp	 $LN1@select_hok
$LN9@select_hok:

; 11086: 		}
; 11087: 
; 11088: 		if ((pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_lh_mfd))

  000a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  000af	75 1b		 jne	 SHORT $LN10@select_hok
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000b6	c1 e8 11	 shr	 eax, 17			; 00000011H
  000b9	83 e0 01	 and	 eax, 1
  000bc	75 0e		 jne	 SHORT $LN10@select_hok

; 11089: 		{
; 11090: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  000be	6a 00		 push	 0
  000c0	6a 02		 push	 2
  000c2	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11091: 
; 11092: 			return;

  000c7	e9 5e 01 00 00	 jmp	 $LN1@select_hok
$LN10@select_hok:

; 11093: 		}
; 11094: 
; 11095: 		if ((pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_rh_mfd))

  000cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  000d3	75 1b		 jne	 SHORT $LN11@select_hok
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000da	c1 e8 12	 shr	 eax, 18			; 00000012H
  000dd	83 e0 01	 and	 eax, 1
  000e0	75 0e		 jne	 SHORT $LN11@select_hok

; 11096: 		{
; 11097: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  000e2	6a 01		 push	 1
  000e4	6a 02		 push	 2
  000e6	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11098: 
; 11099: 			return;

  000eb	e9 3a 01 00 00	 jmp	 $LN1@select_hok
$LN11@select_hok:

; 11100: 		}
; 11101: 
; 11102: 		if (!hokum_damage.pilot_lh_mfd)

  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000f5	c1 e8 11	 shr	 eax, 17			; 00000011H
  000f8	83 e0 01	 and	 eax, 1
  000fb	75 0e		 jne	 SHORT $LN12@select_hok

; 11103: 		{
; 11104: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_LHS);

  000fd	6a 00		 push	 0
  000ff	6a 02		 push	 2
  00101	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11105: 
; 11106: 			return;

  00106	e9 1f 01 00 00	 jmp	 $LN1@select_hok
$LN12@select_hok:

; 11107: 		}
; 11108: 
; 11109: 		if (!hokum_damage.pilot_rh_mfd)

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00110	c1 e8 12	 shr	 eax, 18			; 00000012H
  00113	83 e0 01	 and	 eax, 1
  00116	75 0e		 jne	 SHORT $LN13@select_hok

; 11110: 		{
; 11111: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_PILOT_RHS);

  00118	6a 01		 push	 1
  0011a	6a 02		 push	 2
  0011c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11112: 
; 11113: 			return;

  00121	e9 04 01 00 00	 jmp	 $LN1@select_hok
$LN13@select_hok:

; 11114: 		}
; 11115: 	}
; 11116: 	else

  00126	e9 ff 00 00 00	 jmp	 $LN1@select_hok
$LN2@select_hok:

; 11117: 	{
; 11118: 		////////////////////////////////////////
; 11119: 		//
; 11120: 		// CO-PILOT
; 11121: 		//
; 11122: 		////////////////////////////////////////
; 11123: 
; 11124: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!hokum_damage.co_pilot_lh_mfd))

  0012b	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  00132	75 1b		 jne	 SHORT $LN14@select_hok
  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00139	c1 e8 13	 shr	 eax, 19			; 00000013H
  0013c	83 e0 01	 and	 eax, 1
  0013f	75 0e		 jne	 SHORT $LN14@select_hok

; 11125: 		{
; 11126: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00141	6a 02		 push	 2
  00143	6a 02		 push	 2
  00145	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11127: 
; 11128: 			return;

  0014a	e9 db 00 00 00	 jmp	 $LN1@select_hok
$LN14@select_hok:

; 11129: 		}
; 11130: 
; 11131: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!hokum_damage.co_pilot_rh_mfd))

  0014f	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00156	75 1b		 jne	 SHORT $LN15@select_hok
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0015d	c1 e8 15	 shr	 eax, 21			; 00000015H
  00160	83 e0 01	 and	 eax, 1
  00163	75 0e		 jne	 SHORT $LN15@select_hok

; 11132: 		{
; 11133: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00165	6a 03		 push	 3
  00167	6a 02		 push	 2
  00169	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11134: 
; 11135: 			return;

  0016e	e9 b7 00 00 00	 jmp	 $LN1@select_hok
$LN15@select_hok:

; 11136: 		}
; 11137: 
; 11138: 		if (co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  00173	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  0017a	75 05		 jne	 SHORT $LN16@select_hok

; 11139: 		{
; 11140: 			return;

  0017c	e9 a9 00 00 00	 jmp	 $LN1@select_hok
$LN16@select_hok:

; 11141: 		}
; 11142: 
; 11143: 		if (co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR)

  00181	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 2
  00188	75 05		 jne	 SHORT $LN17@select_hok

; 11144: 		{
; 11145: 			return;

  0018a	e9 9b 00 00 00	 jmp	 $LN1@select_hok
$LN17@select_hok:

; 11146: 		}
; 11147: 
; 11148: 		if (co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  0018f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  00196	75 0e		 jne	 SHORT $LN18@select_hok

; 11149: 		{
; 11150: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00198	6a 02		 push	 2
  0019a	6a 02		 push	 2
  0019c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11151: 
; 11152: 			return;

  001a1	e9 84 00 00 00	 jmp	 $LN1@select_hok
$LN18@select_hok:

; 11153: 		}
; 11154: 
; 11155: 		if (co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_AIR_RADAR)

  001a6	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 3
  001ad	75 0b		 jne	 SHORT $LN19@select_hok

; 11156: 		{
; 11157: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  001af	6a 03		 push	 3
  001b1	6a 02		 push	 2
  001b3	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11158: 
; 11159: 			return;

  001b8	eb 70		 jmp	 SHORT $LN1@select_hok
$LN19@select_hok:

; 11160: 		}
; 11161: 
; 11162: 		if ((co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_lh_mfd))

  001ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  001c1	75 18		 jne	 SHORT $LN20@select_hok
  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001c8	c1 e8 13	 shr	 eax, 19			; 00000013H
  001cb	83 e0 01	 and	 eax, 1
  001ce	75 0b		 jne	 SHORT $LN20@select_hok

; 11163: 		{
; 11164: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  001d0	6a 02		 push	 2
  001d2	6a 02		 push	 2
  001d4	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11165: 
; 11166: 			return;

  001d9	eb 4f		 jmp	 SHORT $LN1@select_hok
$LN20@select_hok:

; 11167: 		}
; 11168: 
; 11169: 		if ((co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_rh_mfd))

  001db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  001e2	75 18		 jne	 SHORT $LN21@select_hok
  001e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001e9	c1 e8 15	 shr	 eax, 21			; 00000015H
  001ec	83 e0 01	 and	 eax, 1
  001ef	75 0b		 jne	 SHORT $LN21@select_hok

; 11170: 		{
; 11171: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  001f1	6a 03		 push	 3
  001f3	6a 02		 push	 2
  001f5	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11172: 
; 11173: 			return;

  001fa	eb 2e		 jmp	 SHORT $LN1@select_hok
$LN21@select_hok:

; 11174: 		}
; 11175: 
; 11176: 		if (!hokum_damage.co_pilot_lh_mfd)

  001fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00201	c1 e8 13	 shr	 eax, 19			; 00000013H
  00204	83 e0 01	 and	 eax, 1
  00207	75 0b		 jne	 SHORT $LN22@select_hok

; 11177: 		{
; 11178: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00209	6a 02		 push	 2
  0020b	6a 02		 push	 2
  0020d	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11179: 
; 11180: 			return;

  00212	eb 16		 jmp	 SHORT $LN1@select_hok
$LN22@select_hok:

; 11181: 		}
; 11182: 
; 11183: 		if (!hokum_damage.co_pilot_rh_mfd)

  00214	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00219	c1 e8 15	 shr	 eax, 21			; 00000015H
  0021c	83 e0 01	 and	 eax, 1
  0021f	75 09		 jne	 SHORT $LN1@select_hok

; 11184: 		{
; 11185: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_GROUND_RADAR, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00221	6a 03		 push	 3
  00223	6a 02		 push	 2
  00225	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode
$LN1@select_hok:

; 11186: 
; 11187: 			return;
; 11188: 		}
; 11189: 	}
; 11190: }

  0022a	5f		 pop	 edi
  0022b	5e		 pop	 esi
  0022c	5b		 pop	 ebx
  0022d	8b e5		 mov	 esp, ebp
  0022f	5d		 pop	 ebp
  00230	c3		 ret	 0
?select_hokum_ground_radar_mfd@@YGXXZ ENDP		; select_hokum_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?auto_page_hokum_ase_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_hokum_ase_mfd@@YGXXZ PROC			; auto_page_hokum_ase_mfd, COMDAT

; 10880: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10881: 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 05		 jne	 SHORT $LN2@auto_page_

; 10882: 	{
; 10883: 		return;

  00012	e9 5d 02 00 00	 jmp	 $LN1@auto_page_
$LN2@auto_page_:

; 10884: 	}
; 10885: 
; 10886: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00017	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0001c	85 c0		 test	 eax, eax
  0001e	0f 85 33 01 00
	00		 jne	 $LN3@auto_page_

; 10887: 	{
; 10888: 		////////////////////////////////////////
; 10889: 		//
; 10890: 		// PILOT
; 10891: 		//
; 10892: 		////////////////////////////////////////
; 10893: 
; 10894: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!hokum_damage.pilot_lh_mfd))

  00024	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0002b	75 1b		 jne	 SHORT $LN5@auto_page_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00032	c1 e8 11	 shr	 eax, 17			; 00000011H
  00035	83 e0 01	 and	 eax, 1
  00038	75 0e		 jne	 SHORT $LN5@auto_page_

; 10895: 		{
; 10896: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_LHS);

  0003a	6a 00		 push	 0
  0003c	6a 08		 push	 8
  0003e	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10897: 
; 10898: 			return;

  00043	e9 2c 02 00 00	 jmp	 $LN1@auto_page_
$LN5@auto_page_:

; 10899: 		}
; 10900: 
; 10901: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!hokum_damage.pilot_rh_mfd))

  00048	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  0004f	75 1b		 jne	 SHORT $LN6@auto_page_
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00056	c1 e8 12	 shr	 eax, 18			; 00000012H
  00059	83 e0 01	 and	 eax, 1
  0005c	75 0e		 jne	 SHORT $LN6@auto_page_

; 10902: 		{
; 10903: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_RHS);

  0005e	6a 01		 push	 1
  00060	6a 08		 push	 8
  00062	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10904: 
; 10905: 			return;

  00067	e9 08 02 00 00	 jmp	 $LN1@auto_page_
$LN6@auto_page_:

; 10906: 		}
; 10907: 
; 10908: 		if (pilot_lhs_mfd_mode == HOKUM_MFD_MODE_ASE)

  0006c	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 8
  00073	75 05		 jne	 SHORT $LN7@auto_page_

; 10909: 		{
; 10910: 			return;

  00075	e9 fa 01 00 00	 jmp	 $LN1@auto_page_
$LN7@auto_page_:

; 10911: 		}
; 10912: 
; 10913: 		if (pilot_rhs_mfd_mode == HOKUM_MFD_MODE_ASE)

  0007a	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 8
  00081	75 05		 jne	 SHORT $LN8@auto_page_

; 10914: 		{
; 10915: 			return;

  00083	e9 ec 01 00 00	 jmp	 $LN1@auto_page_
$LN8@auto_page_:

; 10916: 		}
; 10917: 
; 10918: 		if ((pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_lh_mfd))

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  0008f	75 1b		 jne	 SHORT $LN9@auto_page_
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00096	c1 e8 11	 shr	 eax, 17			; 00000011H
  00099	83 e0 01	 and	 eax, 1
  0009c	75 0e		 jne	 SHORT $LN9@auto_page_

; 10919: 		{
; 10920: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_LHS);

  0009e	6a 00		 push	 0
  000a0	6a 08		 push	 8
  000a2	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10921: 
; 10922: 			return;

  000a7	e9 c8 01 00 00	 jmp	 $LN1@auto_page_
$LN9@auto_page_:

; 10923: 		}
; 10924: 
; 10925: 		if ((pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.pilot_rh_mfd))

  000ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  000b3	75 1b		 jne	 SHORT $LN10@auto_page_
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000ba	c1 e8 12	 shr	 eax, 18			; 00000012H
  000bd	83 e0 01	 and	 eax, 1
  000c0	75 0e		 jne	 SHORT $LN10@auto_page_

; 10926: 		{
; 10927: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_RHS);

  000c2	6a 01		 push	 1
  000c4	6a 08		 push	 8
  000c6	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10928: 
; 10929: 			return;

  000cb	e9 a4 01 00 00	 jmp	 $LN1@auto_page_
$LN10@auto_page_:

; 10930: 		}
; 10931: 
; 10932: 		if ((!get_hokum_mfd_has_focus (HOKUM_MFD_LOCATION_PILOT_LHS)) && (!hokum_damage.pilot_lh_mfd))

  000d0	6a 00		 push	 0
  000d2	e8 00 00 00 00	 call	 ?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ; get_hokum_mfd_has_focus
  000d7	85 c0		 test	 eax, eax
  000d9	75 1b		 jne	 SHORT $LN11@auto_page_
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  000e0	c1 e8 11	 shr	 eax, 17			; 00000011H
  000e3	83 e0 01	 and	 eax, 1
  000e6	75 0e		 jne	 SHORT $LN11@auto_page_

; 10933: 		{
; 10934: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_LHS);

  000e8	6a 00		 push	 0
  000ea	6a 08		 push	 8
  000ec	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10935: 
; 10936: 			return;

  000f1	e9 7e 01 00 00	 jmp	 $LN1@auto_page_
$LN11@auto_page_:

; 10937: 		}
; 10938: 
; 10939: 		if ((!get_hokum_mfd_has_focus (HOKUM_MFD_LOCATION_PILOT_RHS)) && (!hokum_damage.pilot_rh_mfd))

  000f6	6a 01		 push	 1
  000f8	e8 00 00 00 00	 call	 ?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ; get_hokum_mfd_has_focus
  000fd	85 c0		 test	 eax, eax
  000ff	75 1b		 jne	 SHORT $LN12@auto_page_
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00106	c1 e8 12	 shr	 eax, 18			; 00000012H
  00109	83 e0 01	 and	 eax, 1
  0010c	75 0e		 jne	 SHORT $LN12@auto_page_

; 10940: 		{
; 10941: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_RHS);

  0010e	6a 01		 push	 1
  00110	6a 08		 push	 8
  00112	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10942: 
; 10943: 			return;

  00117	e9 58 01 00 00	 jmp	 $LN1@auto_page_
$LN12@auto_page_:

; 10944: 		}
; 10945: 
; 10946: 		if (!hokum_damage.pilot_lh_mfd)

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00121	c1 e8 11	 shr	 eax, 17			; 00000011H
  00124	83 e0 01	 and	 eax, 1
  00127	75 0e		 jne	 SHORT $LN13@auto_page_

; 10947: 		{
; 10948: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_LHS);

  00129	6a 00		 push	 0
  0012b	6a 08		 push	 8
  0012d	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10949: 
; 10950: 			return;

  00132	e9 3d 01 00 00	 jmp	 $LN1@auto_page_
$LN13@auto_page_:

; 10951: 		}
; 10952: 
; 10953: 		if (!hokum_damage.pilot_rh_mfd)

  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0013c	c1 e8 12	 shr	 eax, 18			; 00000012H
  0013f	83 e0 01	 and	 eax, 1
  00142	75 0e		 jne	 SHORT $LN14@auto_page_

; 10954: 		{
; 10955: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_PILOT_RHS);

  00144	6a 01		 push	 1
  00146	6a 08		 push	 8
  00148	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10956: 
; 10957: 			return;

  0014d	e9 22 01 00 00	 jmp	 $LN1@auto_page_
$LN14@auto_page_:

; 10958: 		}
; 10959: 	}
; 10960: 	else

  00152	e9 1d 01 00 00	 jmp	 $LN1@auto_page_
$LN3@auto_page_:

; 10961: 	{
; 10962: 		////////////////////////////////////////
; 10963: 		//
; 10964: 		// CO-PILOT
; 10965: 		//
; 10966: 		////////////////////////////////////////
; 10967: 
; 10968: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!hokum_damage.co_pilot_lh_mfd))

  00157	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  0015e	75 1b		 jne	 SHORT $LN15@auto_page_
  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00165	c1 e8 13	 shr	 eax, 19			; 00000013H
  00168	83 e0 01	 and	 eax, 1
  0016b	75 0e		 jne	 SHORT $LN15@auto_page_

; 10969: 		{
; 10970: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  0016d	6a 02		 push	 2
  0016f	6a 08		 push	 8
  00171	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10971: 
; 10972: 			return;

  00176	e9 f9 00 00 00	 jmp	 $LN1@auto_page_
$LN15@auto_page_:

; 10973: 		}
; 10974: 
; 10975: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!hokum_damage.co_pilot_rh_mfd))

  0017b	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00182	75 1b		 jne	 SHORT $LN16@auto_page_
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00189	c1 e8 15	 shr	 eax, 21			; 00000015H
  0018c	83 e0 01	 and	 eax, 1
  0018f	75 0e		 jne	 SHORT $LN16@auto_page_

; 10976: 		{
; 10977: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00191	6a 03		 push	 3
  00193	6a 08		 push	 8
  00195	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10978: 
; 10979: 			return;

  0019a	e9 d5 00 00 00	 jmp	 $LN1@auto_page_
$LN16@auto_page_:

; 10980: 		}
; 10981: 
; 10982: 		if (co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_ASE)

  0019f	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 8
  001a6	75 05		 jne	 SHORT $LN17@auto_page_

; 10983: 		{
; 10984: 			return;

  001a8	e9 c7 00 00 00	 jmp	 $LN1@auto_page_
$LN17@auto_page_:

; 10985: 		}
; 10986: 
; 10987: 		if (co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_ASE)

  001ad	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 8
  001b4	75 05		 jne	 SHORT $LN18@auto_page_

; 10988: 		{
; 10989: 			return;

  001b6	e9 b9 00 00 00	 jmp	 $LN1@auto_page_
$LN18@auto_page_:

; 10990: 		}
; 10991: 
; 10992: 		if ((co_pilot_lhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_lh_mfd))

  001bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  001c2	75 1b		 jne	 SHORT $LN19@auto_page_
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001c9	c1 e8 13	 shr	 eax, 19			; 00000013H
  001cc	83 e0 01	 and	 eax, 1
  001cf	75 0e		 jne	 SHORT $LN19@auto_page_

; 10993: 		{
; 10994: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  001d1	6a 02		 push	 2
  001d3	6a 08		 push	 8
  001d5	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10995: 
; 10996: 			return;

  001da	e9 95 00 00 00	 jmp	 $LN1@auto_page_
$LN19@auto_page_:

; 10997: 		}
; 10998: 
; 10999: 		if ((co_pilot_rhs_mfd_mode == HOKUM_MFD_MODE_OFF) && (!hokum_damage.co_pilot_rh_mfd))

  001df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A, 0
  001e6	75 18		 jne	 SHORT $LN20@auto_page_
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  001ed	c1 e8 15	 shr	 eax, 21			; 00000015H
  001f0	83 e0 01	 and	 eax, 1
  001f3	75 0b		 jne	 SHORT $LN20@auto_page_

; 11000: 		{
; 11001: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  001f5	6a 03		 push	 3
  001f7	6a 08		 push	 8
  001f9	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11002: 
; 11003: 			return;

  001fe	eb 74		 jmp	 SHORT $LN1@auto_page_
$LN20@auto_page_:

; 11004: 		}
; 11005: 
; 11006: 		if ((!get_hokum_mfd_has_focus (HOKUM_MFD_LOCATION_CO_PILOT_LHS)) && (!hokum_damage.co_pilot_lh_mfd))

  00200	6a 02		 push	 2
  00202	e8 00 00 00 00	 call	 ?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ; get_hokum_mfd_has_focus
  00207	85 c0		 test	 eax, eax
  00209	75 18		 jne	 SHORT $LN21@auto_page_
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00210	c1 e8 13	 shr	 eax, 19			; 00000013H
  00213	83 e0 01	 and	 eax, 1
  00216	75 0b		 jne	 SHORT $LN21@auto_page_

; 11007: 		{
; 11008: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00218	6a 02		 push	 2
  0021a	6a 08		 push	 8
  0021c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11009: 
; 11010: 			return;

  00221	eb 51		 jmp	 SHORT $LN1@auto_page_
$LN21@auto_page_:

; 11011: 		}
; 11012: 
; 11013: 		if ((!get_hokum_mfd_has_focus (HOKUM_MFD_LOCATION_CO_PILOT_RHS)) && (!hokum_damage.co_pilot_rh_mfd))

  00223	6a 03		 push	 3
  00225	e8 00 00 00 00	 call	 ?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ; get_hokum_mfd_has_focus
  0022a	85 c0		 test	 eax, eax
  0022c	75 18		 jne	 SHORT $LN22@auto_page_
  0022e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00233	c1 e8 15	 shr	 eax, 21			; 00000015H
  00236	83 e0 01	 and	 eax, 1
  00239	75 0b		 jne	 SHORT $LN22@auto_page_

; 11014: 		{
; 11015: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  0023b	6a 03		 push	 3
  0023d	6a 08		 push	 8
  0023f	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11016: 
; 11017: 			return;

  00244	eb 2e		 jmp	 SHORT $LN1@auto_page_
$LN22@auto_page_:

; 11018: 		}
; 11019: 
; 11020: 		if (!hokum_damage.co_pilot_lh_mfd)

  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  0024b	c1 e8 13	 shr	 eax, 19			; 00000013H
  0024e	83 e0 01	 and	 eax, 1
  00251	75 0b		 jne	 SHORT $LN23@auto_page_

; 11021: 		{
; 11022: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00253	6a 02		 push	 2
  00255	6a 08		 push	 8
  00257	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 11023: 
; 11024: 			return;

  0025c	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN23@auto_page_:

; 11025: 		}
; 11026: 
; 11027: 		if (!hokum_damage.co_pilot_rh_mfd)

  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hokum_damage@@3THOKUM_DAMAGE_FLAGS@@A ; hokum_damage
  00263	c1 e8 15	 shr	 eax, 21			; 00000015H
  00266	83 e0 01	 and	 eax, 1
  00269	75 09		 jne	 SHORT $LN1@auto_page_

; 11028: 		{
; 11029: 			select_hokum_mfd_mode (HOKUM_MFD_MODE_ASE, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  0026b	6a 03		 push	 3
  0026d	6a 08		 push	 8
  0026f	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode
$LN1@auto_page_:

; 11030: 
; 11031: 			return;
; 11032: 		}
; 11033: 	}
; 11034: }

  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c3		 ret	 0
?auto_page_hokum_ase_mfd@@YGXXZ ENDP			; auto_page_hokum_ase_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?toggle_hokum_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_hokum_ase_auto_page@@YGXXZ PROC			; toggle_hokum_ase_auto_page, COMDAT

; 10871: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10872: 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 10873: }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_hokum_ase_auto_page@@YGXXZ ENDP			; toggle_hokum_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_previous_hokum_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_hokum_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_hokum_co_pilot_tsd_declutter_level, COMDAT

; 10851: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10852: 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 10853: 	{
; 10854: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 10855: 	}
; 10856: 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 10857: 	{
; 10858: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 10859: 	}
; 10860: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 10861: 	{
; 10862: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 10863: 	}
; 10864: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_hokum_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_hokum_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_previous_hokum_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_hokum_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_hokum_pilot_tsd_declutter_level, COMDAT

; 10831: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10832: 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 10833: 	{
; 10834: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 10835: 	}
; 10836: 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 10837: 	{
; 10838: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 10839: 	}
; 10840: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 10841: 	{
; 10842: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 10843: 	}
; 10844: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_hokum_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_hokum_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_next_hokum_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_hokum_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_hokum_co_pilot_tsd_declutter_level, COMDAT

; 10811: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10812: 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 10813: 	{
; 10814: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 10815: 	}
; 10816: 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 10817: 	{
; 10818: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 10819: 	}
; 10820: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 10821: 	{
; 10822: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 10823: 	}
; 10824: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_hokum_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_hokum_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_next_hokum_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_hokum_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_hokum_pilot_tsd_declutter_level, COMDAT

; 10791: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10792: 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 10793: 	{
; 10794: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 10795: 	}
; 10796: 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 10797: 	{
; 10798: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 10799: 	}
; 10800: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 10801: 	{
; 10802: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 10803: 	}
; 10804: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_hokum_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_hokum_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_previous_hokum_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_hokum_co_pilot_tsd_ase_range@@YGXXZ PROC ; select_previous_hokum_co_pilot_tsd_ase_range, COMDAT

; 10771: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10772: 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 10773: 	{
; 10774: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 10775: 	}
; 10776: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 10777: 	{
; 10778: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 10779: 	}
; 10780: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 10781: 	{
; 10782: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 10783: 	}
; 10784: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_hokum_co_pilot_tsd_ase_range@@YGXXZ ENDP ; select_previous_hokum_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_previous_hokum_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_hokum_pilot_tsd_ase_range@@YGXXZ PROC	; select_previous_hokum_pilot_tsd_ase_range, COMDAT

; 10751: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10752: 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 10753: 	{
; 10754: 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 10755: 	}
; 10756: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 10757: 	{
; 10758: 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 10759: 	}
; 10760: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 10761: 	{
; 10762: 		pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 10763: 	}
; 10764: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_hokum_pilot_tsd_ase_range@@YGXXZ ENDP	; select_previous_hokum_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_next_hokum_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_hokum_co_pilot_tsd_ase_range@@YGXXZ PROC	; select_next_hokum_co_pilot_tsd_ase_range, COMDAT

; 10731: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10732: 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 10733: 	{
; 10734: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 10735: 	}
; 10736: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 10737: 	{
; 10738: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 10739: 	}
; 10740: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 10741: 	{
; 10742: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 10743: 	}
; 10744: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_hokum_co_pilot_tsd_ase_range@@YGXXZ ENDP	; select_next_hokum_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_next_hokum_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_hokum_pilot_tsd_ase_range@@YGXXZ PROC	; select_next_hokum_pilot_tsd_ase_range, COMDAT

; 10711: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10712: 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 10713: 	{
; 10714: 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 10715: 	}
; 10716: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 10717: 	{
; 10718: 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 10719: 	}
; 10720: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 10721: 	{
; 10722: 		pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 10723: 	}
; 10724: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_hokum_pilot_tsd_ase_range@@YGXXZ ENDP	; select_next_hokum_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_location$ = 8					; size = 4
?toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z PROC ; toggle_hokum_mfd_on_off, COMDAT

; 10693: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10694: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@toggle_hok
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@toggle_hok
$LN3@toggle_hok:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@toggle_hok:

; 10695: 
; 10696: 	if (*mfd_mode_ptrs[mfd_location] != HOKUM_MFD_MODE_OFF)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  00037	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003a	74 0d		 je	 SHORT $LN4@toggle_hok

; 10697: 	{
; 10698: 		select_hokum_mfd_mode (HOKUM_MFD_MODE_OFF, mfd_location);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10699: 	}
; 10700: 	else

  00047	eb 09		 jmp	 SHORT $LN1@toggle_hok
$LN4@toggle_hok:

; 10701: 	{
; 10702: 		select_next_hokum_mfd (mfd_location);

  00049	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ; select_next_hokum_mfd
$LN1@toggle_hok:

; 10703: 	}
; 10704: }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?toggle_hokum_mfd_on_off@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ENDP ; toggle_hokum_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_previous_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z PROC ; select_previous_hokum_mfd, COMDAT

; 10661: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10662: 	hokum_mfd_modes
; 10663: 		*mfd_mode_ptr1,
; 10664: 		*mfd_mode_ptr2,
; 10665: 		previous_mfd_mode;
; 10666: 
; 10667: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_pre
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@select_pre
$LN3@select_pre:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 10668: 
; 10669: 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 10670: 
; 10671: 	mfd_mode_ptr2 = opposite_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 10672: 
; 10673: 	previous_mfd_mode = get_previous_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z ; get_previous_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10674: 
; 10675: 	if (previous_mfd_mode != HOKUM_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_pre

; 10676: 	{
; 10677: 		if (previous_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_pre

; 10678: 		{
; 10679: 			previous_mfd_mode = get_previous_mfd_mode (previous_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z ; get_previous_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN5@select_pre:

; 10680: 		}
; 10681: 
; 10682: 		ASSERT (previous_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_pre
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_pre:

; 10683: 	}
; 10684: 
; 10685: 	select_hokum_mfd_mode (previous_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10686: }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_previous_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ENDP ; select_previous_hokum_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -12					; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z PROC ; select_next_hokum_mfd, COMDAT

; 10629: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10630: 	hokum_mfd_modes
; 10631: 		*mfd_mode_ptr1,
; 10632: 		*mfd_mode_ptr2,
; 10633: 		next_mfd_mode;
; 10634: 
; 10635: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_nex
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@select_nex
$LN3@select_nex:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 10636: 
; 10637: 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 10638: 
; 10639: 	mfd_mode_ptr2 = opposite_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 10640: 
; 10641: 	next_mfd_mode = get_next_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z ; get_next_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10642: 
; 10643: 	if (next_mfd_mode != HOKUM_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_nex

; 10644: 	{
; 10645: 		if (next_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_nex

; 10646: 		{
; 10647: 			next_mfd_mode = get_next_mfd_mode (next_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W41@W4HOKUM_MFD_LOCATIONS@@@Z ; get_next_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN5@select_nex:

; 10648: 		}
; 10649: 
; 10650: 		ASSERT (next_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_nex
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_nex:

; 10651: 	}
; 10652: 
; 10653: 	select_hokum_mfd_mode (next_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 10654: }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_next_hokum_mfd@@YGXW4HOKUM_MFD_LOCATIONS@@@Z ENDP ; select_next_hokum_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_default_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z PROC ; select_hokum_mfd_mode, COMDAT

; 10342: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10343: 	hokum_mfd_modes
; 10344: 		*mfd_mode_ptr1,
; 10345: 		*mfd_mode_ptr2,
; 10346: 		default_mfd_mode;
; 10347: 
; 10348: 	ASSERT (hokum_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_hok
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN2@select_hok
$LN3@select_hok:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IOEECMNE@hokum_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_hok:

; 10349: 
; 10350: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@select_hok
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN4@select_hok
$LN5@select_hok:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 08	 add	 eax, 8
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_hok:

; 10351: 
; 10352: 	debug_colour_log (DEBUG_COLOUR_AMBER, "%s = %s", hokum_mfd_location_names[mfd_location], hokum_mfd_mode_names[mfd_mode]);

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?hokum_mfd_mode_names@@3PAPADA[eax*4]
  0005b	51		 push	 ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _mfd_location$[ebp]
  0005f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?hokum_mfd_location_names@@3PAPADA[edx*4]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
  0006c	6a 17		 push	 23			; 00000017H
  0006e	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 10353: 
; 10354: 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  00076	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00079	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  00080	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 10355: 
; 10356: 	mfd_mode_ptr2 = opposite_mfd_mode_ptrs[mfd_location];

  00083	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00086	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  0008d	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 10357: 
; 10358: 	if ((mfd_mode == HOKUM_MFD_MODE_DAMAGED) && (*mfd_mode_ptr1 == HOKUM_MFD_MODE_OFF))

  00090	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00094	75 0f		 jne	 SHORT $LN6@select_hok
  00096	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	75 07		 jne	 SHORT $LN6@select_hok

; 10359: 	{
; 10360: 		mfd_mode = HOKUM_MFD_MODE_OFF;

  0009e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN6@select_hok:

; 10361: 	}
; 10362: 
; 10363: 	if (get_mfd_damage (mfd_location))

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?get_mfd_damage@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ; get_mfd_damage
  000ae	85 c0		 test	 eax, eax
  000b0	74 0d		 je	 SHORT $LN7@select_hok

; 10364: 	{
; 10365: 		if (mfd_mode != HOKUM_MFD_MODE_OFF)

  000b2	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000b6	74 07		 je	 SHORT $LN7@select_hok

; 10366: 		{
; 10367: 			mfd_mode = HOKUM_MFD_MODE_DAMAGED;

  000b8	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN7@select_hok:

; 10368: 		}
; 10369: 	}
; 10370: 
; 10371: 	if ((mfd_mode != HOKUM_MFD_MODE_OFF) && (mfd_mode != HOKUM_MFD_MODE_DAMAGED) && (mfd_mode == *mfd_mode_ptr2))

  000bf	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000c3	74 5f		 je	 SHORT $LN9@select_hok
  000c5	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000c9	74 59		 je	 SHORT $LN9@select_hok
  000cb	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  000d1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000d3	75 4f		 jne	 SHORT $LN9@select_hok

; 10372: 	{
; 10373: 		default_mfd_mode = get_default_mfd_mode (opposite_mfd_locations[mfd_location]);

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000d8	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_mfd_locations@@3PAW4HOKUM_MFD_LOCATIONS@@A[eax*4]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  000e5	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 10374: 
; 10375: 		if (default_mfd_mode == mfd_mode)

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  000eb	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  000ee	75 2c		 jne	 SHORT $LN10@select_hok

; 10376: 		{
; 10377: 			default_mfd_mode = get_default_mfd_mode (mfd_location);

  000f0	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  000f9	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 10378: 
; 10379: 			ASSERT (default_mfd_mode != mfd_mode);

  000fc	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  000ff	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  00102	75 18		 jne	 SHORT $LN10@select_hok
  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z@4JA
  00109	83 c0 25	 add	 eax, 37			; 00000025H
  0010c	50		 push	 eax
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
  00117	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@select_hok:

; 10380: 		}
; 10381: 
; 10382: 		*mfd_mode_ptr2 = default_mfd_mode;

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR _default_mfd_mode$[ebp]
  00122	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@select_hok:

; 10383: 	}
; 10384: 
; 10385: 	*mfd_mode_ptr1 = mfd_mode;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  0012a	89 08		 mov	 DWORD PTR [eax], ecx

; 10386: }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 08 00	 ret	 8
?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ENDP ; select_hokum_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv83 = -76						; size = 4
tv81 = -76						; size = 4
tv79 = -76						; size = 4
tv77 = -76						; size = 4
tv75 = -76						; size = 4
tv73 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_result$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z PROC ; get_hokum_mfd_has_focus, COMDAT

; 10134: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10135: 	int
; 10136: 		result;
; 10137: 
; 10138: 	hokum_mfd_modes
; 10139: 		mfd_mode;
; 10140: 
; 10141: 	ASSERT (hokum_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_hokum_
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_hokum_
$LN5@get_hokum_:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 07	 add	 eax, 7
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EAJLOPIO@hokum_mfd_location_valid?5?$CImfd_l@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_hokum_:

; 10142: 
; 10143: 	mfd_mode = *mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4HOKUM_MFD_MODES@@A[eax*4]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	89 55 f8	 mov	 DWORD PTR _mfd_mode$[ebp], edx

; 10144: 
; 10145: 	switch (target_acquisition_system)

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  00041	89 45 b4	 mov	 DWORD PTR tv73[ebp], eax
  00044	8b 4d b4	 mov	 ecx, DWORD PTR tv73[ebp]
  00047	83 e9 01	 sub	 ecx, 1
  0004a	89 4d b4	 mov	 DWORD PTR tv73[ebp], ecx
  0004d	83 7d b4 06	 cmp	 DWORD PTR tv73[ebp], 6
  00051	0f 87 a0 00 00
	00		 ja	 $LN11@get_hokum_
  00057	8b 55 b4	 mov	 edx, DWORD PTR tv73[ebp]
  0005a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN23@get_hokum_[edx*4]
$LN6@get_hokum_:

; 10146: 	{
; 10147: 		////////////////////////////////////////
; 10148: 		case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 10149: 		////////////////////////////////////////
; 10150: 		{
; 10151: 			result = (mfd_mode == HOKUM_MFD_MODE_GROUND_RADAR);

  00061	83 7d f8 02	 cmp	 DWORD PTR _mfd_mode$[ebp], 2
  00065	75 09		 jne	 SHORT $LN13@get_hokum_
  00067	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  0006e	eb 07		 jmp	 SHORT $LN14@get_hokum_
$LN13@get_hokum_:
  00070	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN14@get_hokum_:
  00077	8b 45 b4	 mov	 eax, DWORD PTR tv75[ebp]
  0007a	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10152: 
; 10153: 			break;

  0007d	eb 7f		 jmp	 SHORT $LN2@get_hokum_
$LN7@get_hokum_:

; 10154: 		}
; 10155: 		////////////////////////////////////////
; 10156: 		case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 10157: 		////////////////////////////////////////
; 10158: 		{
; 10159: 			result = (mfd_mode == HOKUM_MFD_MODE_AIR_RADAR);

  0007f	83 7d f8 03	 cmp	 DWORD PTR _mfd_mode$[ebp], 3
  00083	75 09		 jne	 SHORT $LN15@get_hokum_
  00085	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0008c	eb 07		 jmp	 SHORT $LN16@get_hokum_
$LN15@get_hokum_:
  0008e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN16@get_hokum_:
  00095	8b 45 b4	 mov	 eax, DWORD PTR tv77[ebp]
  00098	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10160: 
; 10161: 			break;

  0009b	eb 61		 jmp	 SHORT $LN2@get_hokum_
$LN8@get_hokum_:

; 10162: 		}
; 10163: 		////////////////////////////////////////
; 10164: 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 10165: 		////////////////////////////////////////
; 10166: 		{
; 10167: 			result = (mfd_mode == HOKUM_MFD_MODE_FLIR);

  0009d	83 7d f8 04	 cmp	 DWORD PTR _mfd_mode$[ebp], 4
  000a1	75 09		 jne	 SHORT $LN17@get_hokum_
  000a3	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  000aa	eb 07		 jmp	 SHORT $LN18@get_hokum_
$LN17@get_hokum_:
  000ac	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN18@get_hokum_:
  000b3	8b 45 b4	 mov	 eax, DWORD PTR tv79[ebp]
  000b6	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10168: 
; 10169: 			break;

  000b9	eb 43		 jmp	 SHORT $LN2@get_hokum_
$LN9@get_hokum_:

; 10170: 		}
; 10171: 		////////////////////////////////////////
; 10172: 		case TARGET_ACQUISITION_SYSTEM_LLLTV:
; 10173: 		////////////////////////////////////////
; 10174: 		{
; 10175: 			result = (mfd_mode == HOKUM_MFD_MODE_LLLTV);

  000bb	83 7d f8 05	 cmp	 DWORD PTR _mfd_mode$[ebp], 5
  000bf	75 09		 jne	 SHORT $LN19@get_hokum_
  000c1	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  000c8	eb 07		 jmp	 SHORT $LN20@get_hokum_
$LN19@get_hokum_:
  000ca	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN20@get_hokum_:
  000d1	8b 45 b4	 mov	 eax, DWORD PTR tv81[ebp]
  000d4	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10176: 
; 10177: 			break;

  000d7	eb 25		 jmp	 SHORT $LN2@get_hokum_
$LN10@get_hokum_:

; 10178: 		}
; 10179: 		////////////////////////////////////////
; 10180: 		case TARGET_ACQUISITION_SYSTEM_PERISCOPE:
; 10181: 		////////////////////////////////////////
; 10182: 		{
; 10183: 			result = (mfd_mode == HOKUM_MFD_MODE_PERISCOPE);

  000d9	83 7d f8 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  000dd	75 09		 jne	 SHORT $LN21@get_hokum_
  000df	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  000e6	eb 07		 jmp	 SHORT $LN22@get_hokum_
$LN21@get_hokum_:
  000e8	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN22@get_hokum_:
  000ef	8b 45 b4	 mov	 eax, DWORD PTR tv83[ebp]
  000f2	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10184: 
; 10185: 			break;

  000f5	eb 07		 jmp	 SHORT $LN2@get_hokum_
$LN11@get_hokum_:

; 10186: 		}
; 10187: 		////////////////////////////////////////
; 10188: 		default:
; 10189: 		////////////////////////////////////////
; 10190: 		{
; 10191: 			result = FALSE;

  000f7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@get_hokum_:

; 10192: 
; 10193: 			break;
; 10194: 		}
; 10195: 	}
; 10196: 
; 10197: 	return (result);

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 10198: }

  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
  0010a	66 90		 npad	 2
$LN23@get_hokum_:
  0010c	00 00 00 00	 DD	 $LN6@get_hokum_
  00110	00 00 00 00	 DD	 $LN7@get_hokum_
  00114	00 00 00 00	 DD	 $LN8@get_hokum_
  00118	00 00 00 00	 DD	 $LN11@get_hokum_
  0011c	00 00 00 00	 DD	 $LN11@get_hokum_
  00120	00 00 00 00	 DD	 $LN9@get_hokum_
  00124	00 00 00 00	 DD	 $LN10@get_hokum_
?get_hokum_mfd_has_focus@@YGHW4HOKUM_MFD_LOCATIONS@@@Z ENDP ; get_hokum_mfd_has_focus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_overlaid_hokum_mfd@@YGXXZ
_TEXT	SEGMENT
?draw_overlaid_hokum_mfd@@YGXXZ PROC			; draw_overlaid_hokum_mfd, COMDAT

; 10000: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10001: 	////////////////////////////////////////
; 10002: 	//
; 10003: 	// SELECT LARGE OR SMALL MFD TEXTURES
; 10004: 	//
; 10005: 	////////////////////////////////////////
; 10006: 
; 10007:    if (application_video_width >= 1280)

  00009	81 3d 00 00 00
	00 00 05 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 1280 ; application_video_width, 00000500H
  00013	7c 48		 jl	 SHORT $LN2@draw_overl

; 10008:    {
; 10009: 		draw_large_mfd = TRUE;

  00015	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 10010: 
; 10011: 		pilot_lhs_mfd_texture_screen = large_pilot_lhs_mfd_texture_screen;

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00024	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10012: 		pilot_rhs_mfd_texture_screen = large_pilot_rhs_mfd_texture_screen;

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0002e	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10013: 		co_pilot_lhs_mfd_texture_screen = large_co_pilot_lhs_mfd_texture_screen;

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10014: 		co_pilot_rhs_mfd_texture_screen = large_co_pilot_rhs_mfd_texture_screen;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10015: 		ekran_display_texture_screen = large_ekran_display_texture_screen;

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A
  0004c	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 10016: 
; 10017: 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 10018:    }
; 10019:    else

  0005b	eb 46		 jmp	 SHORT $LN3@draw_overl
$LN2@draw_overl:

; 10020:    {
; 10021: 		draw_large_mfd = FALSE;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 10022: 
; 10023: 		pilot_lhs_mfd_texture_screen = small_pilot_lhs_mfd_texture_screen;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10024: 		pilot_rhs_mfd_texture_screen = small_pilot_rhs_mfd_texture_screen;

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10025: 		co_pilot_lhs_mfd_texture_screen = small_co_pilot_lhs_mfd_texture_screen;

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10026: 		co_pilot_rhs_mfd_texture_screen = small_co_pilot_rhs_mfd_texture_screen;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0008a	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 10027: 		ekran_display_texture_screen = small_ekran_display_texture_screen;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A
  00094	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 10028: 
; 10029: 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN3@draw_overl:

; 10030:    }
; 10031: 
; 10032: 	set_system_texture_screen (pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_2);

  000a3	68 36 05 00 00	 push	 1334			; 00000536H
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10033: 	set_system_texture_screen (pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_1);

  000b3	68 35 05 00 00	 push	 1333			; 00000535H
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10034: 	set_system_texture_screen (co_pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_RHS_1);

  000c3	68 37 05 00 00	 push	 1335			; 00000537H
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10035: 	set_system_texture_screen (co_pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_RHS_2);

  000d3	68 38 05 00 00	 push	 1336			; 00000538H
  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10036: 	set_system_texture_screen (ekran_display_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_EKRAN);

  000e3	68 d0 04 00 00	 push	 1232			; 000004d0H
  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10037: 
; 10038: 	////////////////////////////////////////
; 10039: 	//
; 10040: 	// SELECT VISIBLE DISPLAYS
; 10041: 	//
; 10042: 	////////////////////////////////////////
; 10043: 
; 10044:    if (get_crew_role () == CREW_ROLE_PILOT)

  000f3	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  000f8	85 c0		 test	 eax, eax
  000fa	75 0c		 jne	 SHORT $LN4@draw_overl

; 10045:    {
; 10046:       display_mask = PILOT_LHS_MFD | PILOT_RHS_MFD;

  000fc	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 3

; 10047:    }
; 10048:    else

  00106	eb 0a		 jmp	 SHORT $LN5@draw_overl
$LN4@draw_overl:

; 10049:    {
; 10050:       display_mask = CO_PILOT_LHS_MFD | CO_PILOT_RHS_MFD;

  00108	c7 05 00 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 12 ; 0000000cH
$LN5@draw_overl:

; 10051:    }
; 10052: 
; 10053: 	////////////////////////////////////////
; 10054: 	//
; 10055: 	// SET UP MFD 2D ENVIRONMENT
; 10056: 	//
; 10057: 	////////////////////////////////////////
; 10058: 
; 10059: 	set_2d_active_environment (mfd_env);

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 10060: 
; 10061: 	//
; 10062: 	// window
; 10063: 	//
; 10064: 
; 10065: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0011d	51		 push	 ecx
  0011e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	51		 push	 ecx
  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	51		 push	 ecx
  0013a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	51		 push	 ecx
  00148	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10066: 
; 10067: 	//
; 10068: 	// viewport
; 10069: 	//
; 10070: 
; 10071: 	if (draw_large_mfd)

  00160	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00167	74 1c		 je	 SHORT $LN6@draw_overl

; 10072: 	{
; 10073: 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00171	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 10074: 
; 10075: 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00179	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 10076: 	}
; 10077: 	else

  00183	eb 1a		 jmp	 SHORT $LN7@draw_overl
$LN6@draw_overl:

; 10078: 	{
; 10079: 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0018d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 10080: 
; 10081: 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00195	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN7@draw_overl:

; 10082: 	}
; 10083: 
; 10084: 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  0019f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001a7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 10085: 
; 10086: 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  001bb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001c3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 10087: 
; 10088: 	mfd_viewport_x_min = 0.0;

  001d7	0f 57 c0	 xorps	 xmm0, xmm0
  001da	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 10089: 
; 10090: 	mfd_viewport_y_min = 0.0;

  001e2	0f 57 c0	 xorps	 xmm0, xmm0
  001e5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 10091: 
; 10092: 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  001ed	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001f5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00201	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 10093: 
; 10094: 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  00209	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00211	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00219	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 10095: 
; 10096: 	////////////////////////////////////////
; 10097: 	//
; 10098: 	// DRAW DISPLAYS
; 10099: 	//
; 10100: 	////////////////////////////////////////
; 10101: 
; 10102: 	if (display_mask & PILOT_LHS_MFD)

  00225	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0022a	83 e0 01	 and	 eax, 1
  0022d	74 14		 je	 SHORT $LN8@draw_overl

; 10103: 	{
; 10104: 		draw_overlaid_mfd (pilot_lhs_mfd_texture_screen, pilot_lhs_mfd_mode, HOKUM_MFD_LOCATION_PILOT_LHS);

  0022f	6a 00		 push	 0
  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  00236	50		 push	 eax
  00237	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0023d	51		 push	 ecx
  0023e	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN8@draw_overl:

; 10105: 	}
; 10106: 
; 10107: 	if (display_mask & PILOT_RHS_MFD)

  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00248	83 e0 02	 and	 eax, 2
  0024b	74 14		 je	 SHORT $LN9@draw_overl

; 10108: 	{
; 10109: 		draw_overlaid_mfd (pilot_rhs_mfd_texture_screen, pilot_rhs_mfd_mode, HOKUM_MFD_LOCATION_PILOT_RHS);

  0024d	6a 01		 push	 1
  0024f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  00254	50		 push	 eax
  00255	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0025b	51		 push	 ecx
  0025c	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN9@draw_overl:

; 10110: 	}
; 10111: 
; 10112: 	if (display_mask & CO_PILOT_LHS_MFD)

  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00266	83 e0 04	 and	 eax, 4
  00269	74 14		 je	 SHORT $LN10@draw_overl

; 10113: 	{
; 10114: 		draw_overlaid_mfd (co_pilot_lhs_mfd_texture_screen, co_pilot_lhs_mfd_mode, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  0026b	6a 02		 push	 2
  0026d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  00272	50		 push	 eax
  00273	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00279	51		 push	 ecx
  0027a	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN10@draw_overl:

; 10115: 	}
; 10116: 
; 10117: 	if (display_mask & CO_PILOT_RHS_MFD)

  0027f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00284	83 e0 08	 and	 eax, 8
  00287	74 14		 je	 SHORT $LN11@draw_overl

; 10118: 	{
; 10119: 		draw_overlaid_mfd (co_pilot_rhs_mfd_texture_screen, co_pilot_rhs_mfd_mode, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00289	6a 03		 push	 3
  0028b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  00290	50		 push	 eax
  00291	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00297	51		 push	 ecx
  00298	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd
$LN11@draw_overl:

; 10120: 	}
; 10121: }

  0029d	5f		 pop	 edi
  0029e	5e		 pop	 esi
  0029f	5b		 pop	 ebx
  002a0	8b e5		 mov	 esp, ebp
  002a2	5d		 pop	 ebp
  002a3	c3		 ret	 0
?draw_overlaid_hokum_mfd@@YGXXZ ENDP			; draw_overlaid_hokum_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_hokum_virtual_cockpit_periscope_symbology@@YGXXZ
_TEXT	SEGMENT
_colour$ = -4						; size = 4
?draw_hokum_virtual_cockpit_periscope_symbology@@YGXXZ PROC ; draw_hokum_virtual_cockpit_periscope_symbology, COMDAT

; 9200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9201 : 	real_colour
; 9202 : 		colour;
; 9203 : 
; 9204 : 	//
; 9205 : 	// set active 3D environment now else 2D clipping will be affected
; 9206 : 	//
; 9207 : 
; 9208 : 	set_3d_active_environment (main_3d_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9209 : 
; 9210 : 	//
; 9211 : 	// set up MFD 2D environment
; 9212 : 	//
; 9213 : 
; 9214 : 	set_2d_active_environment (mfd_env);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 9215 : 
; 9216 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0001f	51		 push	 ecx
  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002d	51		 push	 ecx
  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	51		 push	 ecx
  0003c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9217 : 
; 9218 : 	draw_large_mfd = TRUE;

  00062	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 9219 : 
; 9220 : 	mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 9221 : 
; 9222 : 	int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  0007c	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 9223 : 
; 9224 : 	mfd_viewport_x_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  00086	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0008e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 9225 : 
; 9226 : 	mfd_viewport_y_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  00096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0009e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 9227 : 
; 9228 : 	mfd_viewport_x_min = 0.0;

  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 9229 : 
; 9230 : 	mfd_viewport_y_min = 0.0;

  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 9231 : 
; 9232 : 	mfd_viewport_x_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  000c4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 9233 : 
; 9234 : 	mfd_viewport_y_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  000d4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 9235 : 
; 9236 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	51		 push	 ecx
  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	51		 push	 ecx
  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	51		 push	 ecx
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9237 : 
; 9238 : 	//
; 9239 : 	// get screen co-ords (scaled to keep MFD size constant)
; 9240 : 	//
; 9241 : 
; 9242 : 	if (get_global_unscaled_displays ())

  0011f	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00126	0f 84 95 00 00
	00		 je	 $LN2@draw_hokum

; 9243 : 	{
; 9244 : 		mfd_screen_x_min = full_screen_x_mid - 128.0;

  0012c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00134	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4060000000000000
  0013c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00140	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 9245 : 		mfd_screen_y_min = full_screen_y_mid - 128.0;

  00148	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  00150	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4060000000000000
  00158	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 9246 : 
; 9247 : 		mfd_screen_x_max = full_screen_x_mid + 127.999;

  00164	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  0016c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@405fffef9db22d0e
  00174	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00178	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 9248 : 		mfd_screen_y_max = full_screen_y_mid + 127.999;

  00180	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  00188	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@405fffef9db22d0e
  00190	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00194	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 9249 : 
; 9250 : 		mfd_screen_x_scale = 1.0;

  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001a4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 9251 : 		mfd_screen_y_scale = 1.0;

  001ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001b4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 9252 : 	}
; 9253 : 	else

  001bc	e9 f0 00 00 00	 jmp	 $LN3@draw_hokum
$LN2@draw_hokum:

; 9254 : 	{
; 9255 : 		mfd_screen_x_min = full_screen_x_mid - ((256.0 / (640.0 * 2.0)) * full_screen_width);

  001c1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  001c9	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  001d1	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  001d9	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 9256 : 		mfd_screen_y_min = full_screen_y_mid - ((256.0 / (480.0 * 2.0)) * full_screen_height);

  001e9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  001f1	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  001f9	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  00201	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00205	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00209	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 9257 : 
; 9258 : 		mfd_screen_x_max = full_screen_x_mid + ((256.0 / (640.0 * 2.0)) * full_screen_width) - 0.001;

  00211	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00219	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  00221	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00229	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0022d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00235	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00239	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 9259 : 		mfd_screen_y_max = full_screen_y_mid + ((256.0 / (480.0 * 2.0)) * full_screen_height) - 0.001;

  00241	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  00249	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  00251	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  00259	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00265	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00269	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 9260 : 
; 9261 : 		mfd_screen_x_scale = 640.0 / full_screen_width;

  00271	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00279	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4084000000000000
  00281	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00285	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00289	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 9262 : 		mfd_screen_y_scale = 480.0 / full_screen_height;

  00291	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00299	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407e000000000000
  002a1	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002a5	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002a9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0
$LN3@draw_hokum:

; 9263 : 	}
; 9264 : 
; 9265 : 	//
; 9266 : 	// draw MFD on texture
; 9267 : 	//
; 9268 : 
; 9269 : 	set_rgb_colour(colour, 255, 255, 255, 255);

  002b1	c6 45 fe ff	 mov	 BYTE PTR _colour$[ebp+2], 255 ; 000000ffH
  002b5	c6 45 fd ff	 mov	 BYTE PTR _colour$[ebp+1], 255 ; 000000ffH
  002b9	c6 45 fc ff	 mov	 BYTE PTR _colour$[ebp], 255 ; 000000ffH
  002bd	c6 45 ff ff	 mov	 BYTE PTR _colour$[ebp+3], 255 ; 000000ffH

; 9270 : 
; 9271 : 	draw_symbology_to_texture(

  002c1	68 00 00 00 00	 push	 OFFSET ?draw_2d_periscope_mfd@@YGXH@Z ; draw_2d_periscope_mfd
  002c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  002cb	50		 push	 eax
  002cc	8b 4d fc	 mov	 ecx, DWORD PTR _colour$[ebp]
  002cf	51		 push	 ecx
  002d0	f3 0f 2c 15 00
	00 00 00	 cvttss2si edx, DWORD PTR ?mfd_screen_y_max@@3MA
  002d8	52		 push	 edx
  002d9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_screen_x_max@@3MA
  002e1	50		 push	 eax
  002e2	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?mfd_screen_y_min@@3MA
  002ea	51		 push	 ecx
  002eb	f3 0f 2c 15 00
	00 00 00	 cvttss2si edx, DWORD PTR ?mfd_screen_x_min@@3MA
  002f3	52		 push	 edx
  002f4	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_size@@3MA
  002fc	50		 push	 eax
  002fd	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?mfd_viewport_size@@3MA
  00305	51		 push	 ecx
  00306	68 f9 00 00 00	 push	 249			; 000000f9H
  0030b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00311	52		 push	 edx
  00312	e8 00 00 00 00	 call	 ?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z ; draw_symbology_to_texture

; 9272 : 		full_mfd_texture_screen,
; 9273 : 		TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD,
; 9274 : 		mfd_viewport_size,
; 9275 : 		mfd_viewport_size,
; 9276 : 		mfd_screen_x_min,
; 9277 : 		mfd_screen_y_min,
; 9278 : 		mfd_screen_x_max,
; 9279 : 		mfd_screen_y_max,
; 9280 : 		colour,
; 9281 : 		clear_mfd_colour,
; 9282 : 		draw_2d_periscope_mfd);
; 9283 : }

  00317	5f		 pop	 edi
  00318	5e		 pop	 esi
  00319	5b		 pop	 ebx
  0031a	8b e5		 mov	 esp, ebp
  0031c	5d		 pop	 ebp
  0031d	c3		 ret	 0
?draw_hokum_virtual_cockpit_periscope_symbology@@YGXXZ ENDP ; draw_hokum_virtual_cockpit_periscope_symbology
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_hokum_virtual_cockpit_periscope_view@@YGXXZ
_TEXT	SEGMENT
tv200 = -292						; size = 8
tv276 = -284						; size = 8
tv196 = -276						; size = 8
tv274 = -268						; size = 8
tv156 = -268						; size = 4
tv148 = -264						; size = 4
_m$1 = -196						; size = 36
_tmp_vp$2 = -160					; size = 48
_rotated_eo_vp$3 = -112					; size = 48
_centered_eo_vp$4 = -64					; size = 48
_position$5 = -16					; size = 12
_zoom$ = -4						; size = 4
?draw_hokum_virtual_cockpit_periscope_view@@YGXXZ PROC	; draw_hokum_virtual_cockpit_periscope_view, COMDAT

; 9095 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9096 : 	float
; 9097 : 		zoom;
; 9098 : 
; 9099 : #ifdef OLD_EO
; 9100 : 	switch (hokum_periscope.field_of_view)
; 9101 : 	{
; 9102 : 		case EO_FOV_NARROW:
; 9103 : 		{
; 9104 : 			zoom = 1.0 / 128.0;
; 9105 : 
; 9106 : 			break;
; 9107 : 		}
; 9108 : 		case EO_FOV_MEDIUM:
; 9109 : 		{
; 9110 : 			zoom = 1.0 / 8.0;
; 9111 : 
; 9112 : 			break;
; 9113 : 		}
; 9114 : 		case EO_FOV_WIDE:
; 9115 : 		{
; 9116 : 			zoom = 1.0;
; 9117 : 
; 9118 : 			break;
; 9119 : 		}
; 9120 : 		default:
; 9121 : 		{
; 9122 : 			debug_fatal ("Invalid field of view = %d", hokum_periscope.field_of_view);
; 9123 : 
; 9124 : 			break;
; 9125 : 		}
; 9126 : 	}
; 9127 : #else
; 9128 : 	zoom = convert_linear_view_value (&hokum_periscope);

  0000c	68 00 00 00 00	 push	 OFFSET ?hokum_periscope@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; hokum_periscope
  00011	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00016	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 9129 : #endif
; 9130 : 
; 9131 : 	set_main_3d_params

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height_view_angle@@3MA
  00021	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _zoom$[ebp]
  00026	51		 push	 ecx
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_width_view_angle@@3MA
  00034	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _zoom$[ebp]
  00039	51		 push	 ecx
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	51		 push	 ecx
  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_width@@3MA
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	51		 push	 ecx
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_y_min@@3MA
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	51		 push	 ecx
  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_x_min@@3MA
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	6a 00		 push	 0
  00079	6a 02		 push	 2
  0007b	6a 00		 push	 0
  0007d	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 9132 : 	(
; 9133 : 		DISPLAY_3D_TINT_CLEAR,
; 9134 : 		DISPLAY_3D_LIGHT_LEVEL_HIGH,
; 9135 : 		DISPLAY_3D_NOISE_LEVEL_NONE,
; 9136 : 		full_screen_x_min,
; 9137 : 		full_screen_y_min,
; 9138 : 		full_screen_width,
; 9139 : 		full_screen_height,
; 9140 : 		full_screen_width_view_angle * zoom,
; 9141 : 		full_screen_height_view_angle * zoom
; 9142 : 	);
; 9143 : 
; 9144 : 	//
; 9145 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 9146 : 	//
; 9147 : 
; 9148 : 	{
; 9149 : 		vec3d
; 9150 : 			position;
; 9151 : 
; 9152 : 		viewpoint
; 9153 : 			centered_eo_vp,
; 9154 : 			rotated_eo_vp,
; 9155 : 			tmp_vp;
; 9156 : 
; 9157 : 		matrix3x3
; 9158 : 			m;
; 9159 : 
; 9160 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  00082	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00088	83 c6 08	 add	 esi, 8
  0008b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00090	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  00096	f3 a5		 rep movsd

; 9161 : 
; 9162 : 		get_hokum_eo_relative_centred_viewpoint (&centered_eo_vp);

  00098	8d 45 c0	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?get_hokum_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_hokum_eo_relative_centred_viewpoint

; 9163 : 
; 9164 : 		rotated_eo_vp.position = centered_eo_vp.position;

  000a1	8b 45 c0	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  000a4	89 45 90	 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  000a7	8b 4d c4	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  000aa	89 4d 94	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  000ad	8b 55 c8	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  000b0	89 55 98	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 9165 : 
; 9166 : 		if (gun_is_firing)

  000b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gun_is_firing@@3HA, 0 ; gun_is_firing
  000ba	0f 84 99 00 00
	00		 je	 $LN2@draw_hokum

; 9167 : 			get_3d_transformation_matrix (m, eo_azimuth + sfrand1norm() * MAX_GUN_SHAKE_DEFLECTION, eo_elevation + sfrand1norm() * MAX_GUN_SHAKE_DEFLECTION, 0.0);

  000c0	51		 push	 ecx
  000c1	0f 57 c0	 xorps	 xmm0, xmm0
  000c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_elevation@@3MA
  000d1	f2 0f 11 85 f4
	fe ff ff	 movsd	 QWORD PTR tv274[ebp], xmm0
  000d9	e8 00 00 00 00	 call	 ?sfrand1norm@@YGNXZ	; sfrand1norm
  000de	dd 9d ec fe ff
	ff		 fstp	 QWORD PTR tv196[ebp]
  000e4	f2 0f 10 85 ec
	fe ff ff	 movsd	 xmm0, QWORD PTR tv196[ebp]
  000ec	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5c987100000000
  000f4	f2 0f 10 8d f4
	fe ff ff	 movsd	 xmm1, QWORD PTR tv274[ebp]
  000fc	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00100	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00104	51		 push	 ecx
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_azimuth@@3MA
  00112	f2 0f 11 85 e4
	fe ff ff	 movsd	 QWORD PTR tv276[ebp], xmm0
  0011a	e8 00 00 00 00	 call	 ?sfrand1norm@@YGNXZ	; sfrand1norm
  0011f	dd 9d dc fe ff
	ff		 fstp	 QWORD PTR tv200[ebp]
  00125	f2 0f 10 85 dc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv200[ebp]
  0012d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5c987100000000
  00135	f2 0f 10 8d e4
	fe ff ff	 movsd	 xmm1, QWORD PTR tv276[ebp]
  0013d	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00141	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00145	51		 push	 ecx
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 9168 : 		else

  00157	eb 31		 jmp	 SHORT $LN3@draw_hokum
$LN2@draw_hokum:

; 9169 : 			get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  00159	51		 push	 ecx
  0015a	0f 57 c0	 xorps	 xmm0, xmm0
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	51		 push	 ecx
  00163	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	51		 push	 ecx
  00171	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix
$LN3@draw_hokum:

; 9170 : 
; 9171 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  0018a	8d 45 cc	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  0018d	50		 push	 eax
  0018e	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  00194	51		 push	 ecx
  00195	8d 55 9c	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00198	52		 push	 edx
  00199	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 9172 : 
; 9173 : 		position.x = -rotated_eo_vp.x;

  0019e	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  001a3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001aa	f3 0f 11 45 f0	 movss	 DWORD PTR _position$5[ebp], xmm0

; 9174 : 		position.y = -rotated_eo_vp.y;

  001af	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  001b4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001bb	f3 0f 11 45 f4	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 9175 : 		position.z = -rotated_eo_vp.z;

  001c0	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  001c5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001cc	f3 0f 11 45 f8	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 9176 : 
; 9177 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  001d1	8d 45 f0	 lea	 eax, DWORD PTR _position$5[ebp]
  001d4	50		 push	 eax
  001d5	8d 4d 9c	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  001d8	51		 push	 ecx
  001d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  001df	83 c2 08	 add	 edx, 8
  001e2	52		 push	 edx
  001e3	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 9178 : 
; 9179 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  001e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  001ef	74 0f		 je	 SHORT $LN5@draw_hokum
  001f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  001f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f8	89 8d f8 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  001fe	eb 24		 jmp	 SHORT $LN6@draw_hokum
$LN5@draw_hokum:
  00200	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_hokum_virtual_cockpit_periscope_view@@YGXXZ@4JA
  00206	83 c2 54	 add	 edx, 84			; 00000054H
  00209	52		 push	 edx
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021a	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN6@draw_hokum:
  00224	b9 01 00 00 00	 mov	 ecx, 1
  00229	85 c9		 test	 ecx, ecx
  0022b	74 0c		 je	 SHORT $LN7@draw_hokum
  0022d	c7 85 f4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv156[ebp], 8
  00237	eb 24		 jmp	 SHORT $LN8@draw_hokum
$LN7@draw_hokum:
  00239	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_hokum_virtual_cockpit_periscope_view@@YGXXZ@4JA
  0023f	83 c2 54	 add	 edx, 84			; 00000054H
  00242	52		 push	 edx
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00253	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN8@draw_hokum:
  0025d	8d 4d f0	 lea	 ecx, DWORD PTR _position$5[ebp]
  00260	51		 push	 ecx
  00261	6a 08		 push	 8
  00263	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00269	52		 push	 edx
  0026a	6b 85 f8 fe ff
	ff 60		 imul	 eax, DWORD PTR tv148[ebp], 96
  00271	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR tv156[ebp]
  00277	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  0027e	ff d2		 call	 edx

; 9180 : 
; 9181 : 		rotated_eo_vp.x += position.x;

  00280	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  00285	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _position$5[ebp]
  0028a	f3 0f 11 45 90	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 9182 : 		rotated_eo_vp.y += position.y;

  0028f	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00294	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  00299	f3 0f 11 45 94	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 9183 : 		rotated_eo_vp.z += position.z;

  0029e	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  002a3	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  002a8	f3 0f 11 45 98	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 9184 : 
; 9185 : 		draw_eo_3d_scene = TRUE;

  002ad	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 9186 : 
; 9187 : 		draw_main_3d_scene (&rotated_eo_vp);

  002b7	8d 45 90	 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 9188 : 
; 9189 : 		draw_eo_3d_scene = FALSE;

  002c0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 9190 : 
; 9191 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  002ca	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  002d0	83 c7 08	 add	 edi, 8
  002d3	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002d8	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  002de	f3 a5		 rep movsd

; 9192 : 	}
; 9193 : }

  002e0	5f		 pop	 edi
  002e1	5e		 pop	 esi
  002e2	5b		 pop	 ebx
  002e3	8b e5		 mov	 esp, ebp
  002e5	5d		 pop	 ebp
  002e6	c3		 ret	 0
?draw_hokum_virtual_cockpit_periscope_view@@YGXXZ ENDP	; draw_hokum_virtual_cockpit_periscope_view
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_hokum_full_screen_display@@YGXXZ
_TEXT	SEGMENT
tv197 = -340						; size = 4
tv155 = -340						; size = 4
tv65 = -340						; size = 4
_store_mfd_colour$1 = -272				; size = 4
_specular$ = -268					; size = 4
_colour$ = -264						; size = 4
_quad$ = -260						; size = 256
_mode$ = -4						; size = 4
?draw_hokum_full_screen_display@@YGXXZ PROC		; draw_hokum_full_screen_display, COMDAT

; 8811 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8812 : 	hokum_mfd_modes
; 8813 : 		mode;
; 8814 : 
; 8815 : 	vertex
; 8816 : 		quad[4];
; 8817 : 
; 8818 : 	real_colour
; 8819 : 		colour,
; 8820 : 		specular;
; 8821 : 
; 8822 : 	////////////////////////////////////////
; 8823 : 	//
; 8824 : 	// determine if full screen display is required
; 8825 : 	//
; 8826 : 	////////////////////////////////////////
; 8827 : 
; 8828 : 	if (d3d_can_render_to_texture)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00013	74 05		 je	 SHORT $LN8@draw_hokum

; 8829 : 	{
; 8830 : 		return;

  00015	e9 3b 08 00 00	 jmp	 $LN1@draw_hokum
$LN8@draw_hokum:

; 8831 : 	}
; 8832 : 
; 8833 : 	switch (get_view_mode ())

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0001f	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00025	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  0002b	83 e9 26	 sub	 ecx, 38			; 00000026H
  0002e	89 8d ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00034	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv65[ebp], 3
  0003b	77 35		 ja	 SHORT $LN13@draw_hokum
  0003d	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00043	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN24@draw_hokum[edx*4]
$LN9@draw_hokum:

; 8834 : 	{
; 8835 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 8836 : 		{
; 8837 : 			mode = pilot_lhs_mfd_mode;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  0004f	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 8838 : 
; 8839 : 			break;

  00052	eb 31		 jmp	 SHORT $LN2@draw_hokum
$LN10@draw_hokum:

; 8840 : 		}
; 8841 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 8842 : 		{
; 8843 : 			mode = pilot_rhs_mfd_mode;

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  00059	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 8844 : 
; 8845 : 			break;

  0005c	eb 27		 jmp	 SHORT $LN2@draw_hokum
$LN11@draw_hokum:

; 8846 : 		}
; 8847 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 8848 : 		{
; 8849 : 			mode = co_pilot_lhs_mfd_mode;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  00063	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 8850 : 
; 8851 : 			break;

  00066	eb 1d		 jmp	 SHORT $LN2@draw_hokum
$LN12@draw_hokum:

; 8852 : 		}
; 8853 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 8854 : 		{
; 8855 : 			mode = co_pilot_rhs_mfd_mode;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  0006d	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 8856 : 
; 8857 : 			break;

  00070	eb 13		 jmp	 SHORT $LN2@draw_hokum
$LN13@draw_hokum:

; 8858 : 		}
; 8859 : 		default:
; 8860 : 		{
; 8861 : 			debug_fatal ("Invalid view mode = %d", get_view_mode ());

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
  0007d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00082	83 c4 08	 add	 esp, 8
$LN2@draw_hokum:

; 8862 : 
; 8863 : 			break;
; 8864 : 		}
; 8865 : 	}
; 8866 : 
; 8867 : 	if (!get_undamaged_eo_display_mode (mode))

  00085	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0008e	85 c0		 test	 eax, eax
  00090	75 05		 jne	 SHORT $LN14@draw_hokum

; 8868 : 	{
; 8869 : 		return;

  00092	e9 be 07 00 00	 jmp	 $LN1@draw_hokum
$LN14@draw_hokum:

; 8870 : 	}
; 8871 : 
; 8872 : 	////////////////////////////////////////
; 8873 : 	//
; 8874 : 	// render 3D display
; 8875 : 	//
; 8876 : 	////////////////////////////////////////
; 8877 : 
; 8878 : 	mfd_screen_x_min = floor ((149.0 * full_screen_width) / 640.0);

  00097	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  0009f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4062a00000000000
  000a7	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  000af	83 ec 08	 sub	 esp, 8
  000b2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  000bd	83 c4 08	 add	 esp, 8
  000c0	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 8879 : 	mfd_screen_y_min = floor ((69.0 * full_screen_height) / 480.0);

  000c6	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  000ce	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051400000000000
  000d6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  000de	83 ec 08	 sub	 esp, 8
  000e1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  000ec	83 c4 08	 add	 esp, 8
  000ef	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 8880 : 
; 8881 : 	mfd_screen_x_max = ceil ((492.0 * full_screen_width) / 640.0);

  000f5	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000fd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407ec00000000000
  00105	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  0010d	83 ec 08	 sub	 esp, 8
  00110	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0011b	83 c4 08	 add	 esp, 8
  0011e	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 8882 : 	mfd_screen_y_max = ceil ((412.0 * full_screen_height) / 480.0);

  00124	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  0012c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4079c00000000000
  00134	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  0013c	83 ec 08	 sub	 esp, 8
  0013f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0014a	83 c4 08	 add	 esp, 8
  0014d	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 8883 : 
; 8884 : 	//
; 8885 : 	// widen by 1 pixel either side to ensure the MFD is covered at all resolutions
; 8886 : 	//
; 8887 : 
; 8888 : 	mfd_screen_x_min -= 1.0;

  00153	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0015b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00163	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00167	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 8889 : 	mfd_screen_y_min -= 1.0;

  0016f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00177	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0017f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00183	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 8890 : 
; 8891 : 	mfd_screen_x_max += 1.0;

  0018b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00193	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0019b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 8892 : 	mfd_screen_y_max += 1.0;

  001a7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  001af	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001bb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 8893 : 
; 8894 : 	mfd_screen_width = mfd_screen_x_max - mfd_screen_x_min;

  001c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  001cb	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  001d3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 8895 : 	mfd_screen_height = mfd_screen_y_max - mfd_screen_y_min;

  001db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  001e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  001eb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 8896 : 
; 8897 : 	mfd_screen_x_max -= 0.001;

  001f3	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  001fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00203	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00207	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 8898 : 	mfd_screen_y_max -= 0.001;

  0020f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00217	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0021f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00223	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 8899 : 
; 8900 : 	mfd_screen_x_scale = 256.0 / mfd_screen_width;

  0022b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00233	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  0023b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0023f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00243	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 8901 : 	mfd_screen_y_scale = 256.0 / mfd_screen_height;

  0024b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00253	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  0025b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0025f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00263	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 8902 : 
; 8903 : 	switch (mode)

  0026b	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  0026e	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  00274	83 bd ac fe ff
	ff 04		 cmp	 DWORD PTR tv155[ebp], 4
  0027b	74 14		 je	 SHORT $LN15@draw_hokum
  0027d	83 bd ac fe ff
	ff 05		 cmp	 DWORD PTR tv155[ebp], 5
  00284	74 14		 je	 SHORT $LN16@draw_hokum
  00286	83 bd ac fe ff
	ff 06		 cmp	 DWORD PTR tv155[ebp], 6
  0028d	74 14		 je	 SHORT $LN17@draw_hokum
  0028f	eb 19		 jmp	 SHORT $LN4@draw_hokum
$LN15@draw_hokum:

; 8904 : 	{
; 8905 : 		case HOKUM_MFD_MODE_FLIR:
; 8906 : 		{
; 8907 : 			draw_3d_flir_mfd (TRUE);

  00291	6a 01		 push	 1
  00293	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 8908 : 
; 8909 : 			break;

  00298	eb 10		 jmp	 SHORT $LN4@draw_hokum
$LN16@draw_hokum:

; 8910 : 		}
; 8911 : 		case HOKUM_MFD_MODE_LLLTV:
; 8912 : 		{
; 8913 : 			draw_3d_llltv_mfd (TRUE);

  0029a	6a 01		 push	 1
  0029c	e8 00 00 00 00	 call	 ?draw_3d_llltv_mfd@@YGXH@Z ; draw_3d_llltv_mfd

; 8914 : 
; 8915 : 			break;

  002a1	eb 07		 jmp	 SHORT $LN4@draw_hokum
$LN17@draw_hokum:

; 8916 : 		}
; 8917 : 		case HOKUM_MFD_MODE_PERISCOPE:
; 8918 : 		{
; 8919 : 			draw_3d_periscope_mfd (TRUE);

  002a3	6a 01		 push	 1
  002a5	e8 00 00 00 00	 call	 ?draw_3d_periscope_mfd@@YGXH@Z ; draw_3d_periscope_mfd
$LN4@draw_hokum:

; 8920 : 
; 8921 : 			break;
; 8922 : 		}
; 8923 : 	}
; 8924 : 
; 8925 : 	////////////////////////////////////////
; 8926 : 	//
; 8927 : 	// render 2D display
; 8928 : 	//
; 8929 : 	////////////////////////////////////////
; 8930 : 
; 8931 : 	set_2d_active_environment (mfd_env);

  002aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002af	50		 push	 eax
  002b0	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 8932 : 
; 8933 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  002b5	51		 push	 ecx
  002b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	51		 push	 ecx
  002c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  002cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d1	51		 push	 ecx
  002d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002df	51		 push	 ecx
  002e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002f2	50		 push	 eax
  002f3	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 8934 : 
; 8935 : 	draw_large_mfd = TRUE;

  002f8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 8936 : 
; 8937 : 	mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00302	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0030a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8938 : 
; 8939 : 	int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00312	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 8940 : 
; 8941 : 	mfd_viewport_x_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  0031c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00324	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 8942 : 
; 8943 : 	mfd_viewport_y_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  0032c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00334	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 8944 : 
; 8945 : 	mfd_viewport_x_min = 0.0;

  0033c	0f 57 c0	 xorps	 xmm0, xmm0
  0033f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 8946 : 
; 8947 : 	mfd_viewport_y_min = 0.0;

  00347	0f 57 c0	 xorps	 xmm0, xmm0
  0034a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 8948 : 
; 8949 : 	mfd_viewport_x_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  00352	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  0035a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 8950 : 
; 8951 : 	mfd_viewport_y_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  00362	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  0036a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 8952 : 
; 8953 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00372	51		 push	 ecx
  00373	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0037b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00380	51		 push	 ecx
  00381	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038e	51		 push	 ecx
  0038f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039c	51		 push	 ecx
  0039d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003af	50		 push	 eax
  003b0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8954 : 
; 8955 : 	//
; 8956 : 	// draw MFD on texture
; 8957 : 	//
; 8958 : 
; 8959 : 	set_active_screen (full_mfd_texture_screen);

  003b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  003ba	50		 push	 eax
  003bb	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8960 : 
; 8961 : 	if (lock_screen (full_mfd_texture_screen))

  003c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  003c5	50		 push	 eax
  003c6	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  003cb	85 c0		 test	 eax, eax
  003cd	0f 84 d7 00 00
	00		 je	 $LN18@draw_hokum

; 8962 : 	{
; 8963 :       rgb_colour
; 8964 :          store_mfd_colour;
; 8965 : 
; 8966 :       store_mfd_colour = MFD_COLOUR1;

  003d3	b8 04 00 00 00	 mov	 eax, 4
  003d8	6b c8 00	 imul	 ecx, eax, 0
  003db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003e1	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _store_mfd_colour$1[ebp], edx

; 8967 : 
; 8968 :       set_rgb_colour (MFD_COLOUR1, 255, 255, 255, 255);

  003e7	b8 04 00 00 00	 mov	 eax, 4
  003ec	6b c8 00	 imul	 ecx, eax, 0
  003ef	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  003f6	b8 04 00 00 00	 mov	 eax, 4
  003fb	6b c8 00	 imul	 ecx, eax, 0
  003fe	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00405	b8 04 00 00 00	 mov	 eax, 4
  0040a	6b c8 00	 imul	 ecx, eax, 0
  0040d	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00414	b8 04 00 00 00	 mov	 eax, 4
  00419	6b c8 00	 imul	 ecx, eax, 0
  0041c	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8969 : 
; 8970 :       set_block (0, 0, LARGE_MFD_VIEWPORT_SIZE - 1, LARGE_MFD_VIEWPORT_SIZE - 1, clear_mfd_colour);

  00423	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00428	50		 push	 eax
  00429	68 ff 00 00 00	 push	 255			; 000000ffH
  0042e	68 ff 00 00 00	 push	 255			; 000000ffH
  00433	6a 00		 push	 0
  00435	6a 00		 push	 0
  00437	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8971 : 
; 8972 : 		draw_layout_grid ();

  0043c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8973 : 
; 8974 : 		switch (mode)

  00441	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00444	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv197[ebp], eax
  0044a	83 bd ac fe ff
	ff 04		 cmp	 DWORD PTR tv197[ebp], 4
  00451	74 14		 je	 SHORT $LN19@draw_hokum
  00453	83 bd ac fe ff
	ff 05		 cmp	 DWORD PTR tv197[ebp], 5
  0045a	74 14		 je	 SHORT $LN20@draw_hokum
  0045c	83 bd ac fe ff
	ff 06		 cmp	 DWORD PTR tv197[ebp], 6
  00463	74 14		 je	 SHORT $LN21@draw_hokum
  00465	eb 19		 jmp	 SHORT $LN6@draw_hokum
$LN19@draw_hokum:

; 8975 : 		{
; 8976 : 			case HOKUM_MFD_MODE_FLIR:
; 8977 : 			{
; 8978 : 				draw_2d_flir_mfd (TRUE);

  00467	6a 01		 push	 1
  00469	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 8979 : 
; 8980 : 				break;

  0046e	eb 10		 jmp	 SHORT $LN6@draw_hokum
$LN20@draw_hokum:

; 8981 : 			}
; 8982 : 			case HOKUM_MFD_MODE_LLLTV:
; 8983 : 			{
; 8984 : 				draw_2d_llltv_mfd (TRUE);

  00470	6a 01		 push	 1
  00472	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXH@Z ; draw_2d_llltv_mfd

; 8985 : 
; 8986 : 				break;

  00477	eb 07		 jmp	 SHORT $LN6@draw_hokum
$LN21@draw_hokum:

; 8987 : 			}
; 8988 : 			case HOKUM_MFD_MODE_PERISCOPE:
; 8989 : 			{
; 8990 : 				draw_2d_periscope_mfd (TRUE);

  00479	6a 01		 push	 1
  0047b	e8 00 00 00 00	 call	 ?draw_2d_periscope_mfd@@YGXH@Z ; draw_2d_periscope_mfd
$LN6@draw_hokum:

; 8991 : 
; 8992 : 				break;
; 8993 : 			}
; 8994 : 		}
; 8995 : 
; 8996 : 		MFD_COLOUR1 = store_mfd_colour;

  00480	b8 04 00 00 00	 mov	 eax, 4
  00485	6b c8 00	 imul	 ecx, eax, 0
  00488	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _store_mfd_colour$1[ebp]
  0048e	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 8997 : 
; 8998 : 		flush_screen_texture_graphics (full_mfd_texture_screen);

  00494	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00499	50		 push	 eax
  0049a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8999 : 
; 9000 : 		unlock_screen (full_mfd_texture_screen);

  0049f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  004a4	50		 push	 eax
  004a5	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN18@draw_hokum:

; 9001 : 	}
; 9002 : 
; 9003 : 	set_active_screen (video_screen);

  004aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  004af	50		 push	 eax
  004b0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9004 : 
; 9005 : 	////////////////////////////////////////
; 9006 : 	//
; 9007 : 	// render MFD to screen
; 9008 : 	//
; 9009 : 	////////////////////////////////////////
; 9010 : 
; 9011 : 	set_3d_active_environment (main_3d_env);

  004b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  004ba	50		 push	 eax
  004bb	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9012 : 
; 9013 : 	if (begin_3d_scene ())

  004c0	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  004c5	85 c0		 test	 eax, eax
  004c7	0f 84 88 03 00
	00		 je	 $LN22@draw_hokum

; 9014 : 	{
; 9015 : 		set_d3d_transparency_on ();

  004cd	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9016 : 
; 9017 : 		set_d3d_zbuffer_comparison (FALSE);

  004d2	6a 00		 push	 0
  004d4	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9018 : 
; 9019 : 		set_d3d_culling (FALSE);

  004d9	6a 00		 push	 0
  004db	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9020 : 
; 9021 : 		set_d3d_texture_wrapping (0, FALSE);

  004e0	6a 00		 push	 0
  004e2	6a 00		 push	 0
  004e4	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 9022 : 
; 9023 :       set_d3d_texture_mag_filtering (TRUE);

  004e9	6a 01		 push	 1
  004eb	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 9024 :       set_d3d_texture_min_filtering (TRUE);

  004f0	6a 01		 push	 1
  004f2	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 9025 :       set_d3d_texture_mip_filtering (FALSE);

  004f7	6a 00		 push	 0
  004f9	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 9026 : 
; 9027 : 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD));

  004fe	68 f9 00 00 00	 push	 249			; 000000f9H
  00503	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00508	50		 push	 eax
  00509	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 9028 : 
; 9029 :       ////////////////////////////////////////
; 9030 :       //
; 9031 : 
; 9032 : 		colour.red				= MFD_COLOUR1.r;

  0050e	b8 04 00 00 00	 mov	 eax, 4
  00513	6b c8 00	 imul	 ecx, eax, 0
  00516	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  0051c	88 95 fa fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+2], dl

; 9033 : 		colour.green			= MFD_COLOUR1.g;

  00522	b8 04 00 00 00	 mov	 eax, 4
  00527	6b c8 00	 imul	 ecx, eax, 0
  0052a	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  00530	88 95 f9 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+1], dl

; 9034 : 		colour.blue				= MFD_COLOUR1.b;

  00536	b8 04 00 00 00	 mov	 eax, 4
  0053b	6b c8 00	 imul	 ecx, eax, 0
  0053e	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00544	88 95 f8 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp], dl

; 9035 : 		colour.alpha			= MFD_COLOUR1.a;

  0054a	b8 04 00 00 00	 mov	 eax, 4
  0054f	6b c8 00	 imul	 ecx, eax, 0
  00552	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  00558	88 95 fb fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+3], dl

; 9036 : 
; 9037 : 		specular.red			= 0;

  0055e	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 9038 : 		specular.green			= 0;

  00565	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 9039 : 		specular.blue			= 0;

  0056c	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 9040 : 		specular.alpha			= 255;

  00573	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 9041 : 
; 9042 : 		quad[0].i				= mfd_screen_x_min;

  0057a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0057f	6b c8 00	 imul	 ecx, eax, 0
  00582	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0058a	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9043 : 		quad[0].j	  			= mfd_screen_y_min;

  00593	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00598	6b c8 00	 imul	 ecx, eax, 0
  0059b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  005a3	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9044 : 		quad[0].z	  			= 0.5;

  005ac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005b1	6b c8 00	 imul	 ecx, eax, 0
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005bc	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9045 : 		quad[0].q	  			= 0.5;

  005c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005ca	6b c8 00	 imul	 ecx, eax, 0
  005cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005d5	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9046 : 		quad[0].u	  			= 0.0;

  005de	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005e3	6b c8 00	 imul	 ecx, eax, 0
  005e6	0f 57 c0	 xorps	 xmm0, xmm0
  005e9	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 9047 : 		quad[0].v	  			= 0.0;

  005f2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005f7	6b c8 00	 imul	 ecx, eax, 0
  005fa	0f 57 c0	 xorps	 xmm0, xmm0
  005fd	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 9048 : 
; 9049 : 		quad[1].i				= mfd_screen_x_max;

  00606	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0060b	c1 e0 00	 shl	 eax, 0
  0060e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00616	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9050 : 		quad[1].j  				= mfd_screen_y_min;

  0061f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00624	c1 e0 00	 shl	 eax, 0
  00627	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0062f	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9051 : 		quad[1].z  				= 0.5;

  00638	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0063d	c1 e0 00	 shl	 eax, 0
  00640	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00648	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9052 : 		quad[1].q  				= 0.5;

  00651	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00656	c1 e0 00	 shl	 eax, 0
  00659	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00661	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9053 : 		quad[1].u  				= 1.0;

  0066a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0066f	c1 e0 00	 shl	 eax, 0
  00672	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0067a	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 9054 : 		quad[1].v  				= 0.0;

  00683	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00688	c1 e0 00	 shl	 eax, 0
  0068b	0f 57 c0	 xorps	 xmm0, xmm0
  0068e	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 9055 : 
; 9056 : 		quad[2].i				= mfd_screen_x_max;

  00697	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0069c	d1 e0		 shl	 eax, 1
  0069e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  006a6	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9057 : 		quad[2].j 				= mfd_screen_y_max;

  006af	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006b4	d1 e0		 shl	 eax, 1
  006b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  006be	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9058 : 		quad[2].z  				= 0.5;

  006c7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006cc	d1 e0		 shl	 eax, 1
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  006d6	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9059 : 		quad[2].q  				= 0.5;

  006df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006e4	d1 e0		 shl	 eax, 1
  006e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  006ee	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9060 : 		quad[2].u  				= 1.0;

  006f7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006fc	d1 e0		 shl	 eax, 1
  006fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00706	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 9061 : 		quad[2].v  				= 1.0;

  0070f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00714	d1 e0		 shl	 eax, 1
  00716	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0071e	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 9062 : 
; 9063 : 		quad[3].i				= mfd_screen_x_min;

  00727	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0072c	6b c8 03	 imul	 ecx, eax, 3
  0072f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00737	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9064 : 		quad[3].j				= mfd_screen_y_max;

  00740	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00745	6b c8 03	 imul	 ecx, eax, 3
  00748	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00750	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9065 : 		quad[3].z				= 0.5;

  00759	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0075e	6b c8 03	 imul	 ecx, eax, 3
  00761	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00769	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9066 : 		quad[3].q				= 0.5;

  00772	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00777	6b c8 03	 imul	 ecx, eax, 3
  0077a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00782	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9067 : 		quad[3].u				= 0.0;

  0078b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00790	6b c8 03	 imul	 ecx, eax, 3
  00793	0f 57 c0	 xorps	 xmm0, xmm0
  00796	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 9068 : 		quad[3].v				= 1.0;

  0079f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007a4	6b c8 03	 imul	 ecx, eax, 3
  007a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007af	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 9069 : 
; 9070 : 		quad[0].next_vertex	= &quad[1];

  007b8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007bd	c1 e0 00	 shl	 eax, 0
  007c0	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  007c7	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  007cc	6b c2 00	 imul	 eax, edx, 0
  007cf	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 9071 : 		quad[1].next_vertex	= &quad[2];

  007d6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007db	d1 e0		 shl	 eax, 1
  007dd	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  007e4	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  007e9	c1 e2 00	 shl	 edx, 0
  007ec	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 9072 : 		quad[2].next_vertex	= &quad[3];

  007f3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007f8	6b c8 03	 imul	 ecx, eax, 3
  007fb	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00802	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00807	d1 e0		 shl	 eax, 1
  00809	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 9073 : 		quad[3].next_vertex	= NULL;

  00810	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00815	6b c8 03	 imul	 ecx, eax, 3
  00818	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 9074 : 
; 9075 :       //
; 9076 :       ////////////////////////////////////////
; 9077 : 
; 9078 : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00823	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00829	50		 push	 eax
  0082a	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00830	51		 push	 ecx
  00831	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00837	52		 push	 edx
  00838	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 9079 : 
; 9080 : 		set_d3d_transparency_off ();

  0083d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9081 : 
; 9082 : 		set_d3d_zbuffer_comparison (TRUE);

  00842	6a 01		 push	 1
  00844	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9083 : 
; 9084 : 		set_d3d_culling (TRUE);

  00849	6a 01		 push	 1
  0084b	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9085 : 
; 9086 : 		end_3d_scene ();

  00850	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN22@draw_hokum:
$LN1@draw_hokum:

; 9087 : 	}
; 9088 : }

  00855	5f		 pop	 edi
  00856	5e		 pop	 esi
  00857	5b		 pop	 ebx
  00858	8b e5		 mov	 esp, ebp
  0085a	5d		 pop	 ebp
  0085b	c3		 ret	 0
$LN24@draw_hokum:
  0085c	00 00 00 00	 DD	 $LN9@draw_hokum
  00860	00 00 00 00	 DD	 $LN10@draw_hokum
  00864	00 00 00 00	 DD	 $LN11@draw_hokum
  00868	00 00 00 00	 DD	 $LN12@draw_hokum
?draw_hokum_full_screen_display@@YGXXZ ENDP		; draw_hokum_full_screen_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?set_hokum_text_display_text@@YGXPAD00@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_s3$ = 16						; size = 4
?set_hokum_text_display_text@@YGXPAD00@Z PROC		; set_hokum_text_display_text, COMDAT

; 8786 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8787 : 	ASSERT (s1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _s1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_hokum_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_hokum_text_display_text@@YGXPAD00@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JAFEPHFG@s1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_hokum_:

; 8788 : 
; 8789 : 	ASSERT (s2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _s2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@set_hokum_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_hokum_text_display_text@@YGXPAD00@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LLHJKEJF@s2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_hokum_:

; 8790 : 
; 8791 : 	ASSERT (s3);

  00045	83 7d 10 00	 cmp	 DWORD PTR _s3$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@set_hokum_
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_hokum_text_display_text@@YGXPAD00@Z@4JA
  00050	83 c0 05	 add	 eax, 5
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02KCGCJFNE@s3@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_hokum_:

; 8792 : 
; 8793 : 	strncpy (text_display_line1, s1, TEXT_DISPLAY_MAX_STRING_LENGTH);

  00063	6a 0a		 push	 10			; 0000000aH
  00065	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  00068	50		 push	 eax
  00069	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8794 : 
; 8795 : 	strncpy (text_display_line2, s2, TEXT_DISPLAY_MAX_STRING_LENGTH);

  00077	6a 0a		 push	 10			; 0000000aH
  00079	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  0007c	50		 push	 eax
  0007d	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8796 : 
; 8797 : 	strncpy (text_display_line3, s3, TEXT_DISPLAY_MAX_STRING_LENGTH);

  0008b	6a 0a		 push	 10			; 0000000aH
  0008d	8b 45 10	 mov	 eax, DWORD PTR _s3$[ebp]
  00090	50		 push	 eax
  00091	68 00 00 00 00	 push	 OFFSET ?text_display_line3@@3PADA
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8798 : 
; 8799 : 	text_display_line1[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	6b c8 0a	 imul	 ecx, eax, 10
  000a7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line1@@3PADA[ecx], 0

; 8800 : 
; 8801 : 	text_display_line2[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	6b c8 0a	 imul	 ecx, eax, 10
  000b6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line2@@3PADA[ecx], 0

; 8802 : 
; 8803 : 	text_display_line3[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	6b c8 0a	 imul	 ecx, eax, 10
  000c5	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line3@@3PADA[ecx], 0

; 8804 : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
?set_hokum_text_display_text@@YGXPAD00@Z ENDP		; set_hokum_text_display_text
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?draw_hokum_mfd@@YGXXZ
_TEXT	SEGMENT
tv234 = -84						; size = 4
tv222 = -84						; size = 4
tv81 = -84						; size = 4
tv65 = -84						; size = 4
_draw_eo_display$1 = -16				; size = 4
_large_mfd$ = -12					; size = 4
_export_right$ = -8					; size = 4
_export_left$ = -4					; size = 4
?draw_hokum_mfd@@YGXXZ PROC				; draw_hokum_mfd, COMDAT

; 8425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8426 : 	screen *export_left, *export_right;
; 8427 : 	////////////////////////////////////////
; 8428 : 	//
; 8429 : 	// SELECT LARGE OR SMALL MFD TEXTURES
; 8430 : 	//
; 8431 : 	////////////////////////////////////////
; 8432 : 
; 8433 : 	// loke 030420
; 8434 : 	// support for high resolution mfd's
; 8435 : 	int
; 8436 : 		large_mfd;
; 8437 : 
; 8438 : 	if (!command_line_high_res_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00010	75 28		 jne	 SHORT $LN10@draw_hokum

; 8439 : 	{
; 8440 : 		switch (get_view_mode ())

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00017	89 45 ac	 mov	 DWORD PTR tv65[ebp], eax
  0001a	83 7d ac 26	 cmp	 DWORD PTR tv65[ebp], 38	; 00000026H
  0001e	7c 11		 jl	 SHORT $LN13@draw_hokum
  00020	83 7d ac 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  00024	7e 02		 jle	 SHORT $LN12@draw_hokum
  00026	eb 09		 jmp	 SHORT $LN13@draw_hokum
$LN12@draw_hokum:

; 8441 : 		{
; 8442 : 			////////////////////////////////////////
; 8443 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 8444 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 8445 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 8446 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 8447 : 			////////////////////////////////////////
; 8448 : 			{
; 8449 : 
; 8450 : 				large_mfd = 1;

  00028	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1

; 8451 : 
; 8452 : 				break;

  0002f	eb 07		 jmp	 SHORT $LN2@draw_hokum
$LN13@draw_hokum:

; 8453 : 			}
; 8454 : 			////////////////////////////////////////
; 8455 : 			default:
; 8456 : 			////////////////////////////////////////
; 8457 : 			{
; 8458 : 
; 8459 : 				large_mfd = 0;

  00031	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 0
$LN2@draw_hokum:

; 8460 : 
; 8461 : 				break;
; 8462 : 			}
; 8463 : 		}
; 8464 : 	}
; 8465 : 	else

  00038	eb 07		 jmp	 SHORT $LN11@draw_hokum
$LN10@draw_hokum:

; 8466 : 	{
; 8467 : 		large_mfd = 1;

  0003a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1
$LN11@draw_hokum:

; 8468 : 	}
; 8469 : 
; 8470 : 	if (large_mfd)

  00041	83 7d f4 00	 cmp	 DWORD PTR _large_mfd$[ebp], 0
  00045	74 48		 je	 SHORT $LN14@draw_hokum

; 8471 : 	{
; 8472 : 		draw_large_mfd = TRUE;

  00047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 8473 : 
; 8474 : 		pilot_lhs_mfd_texture_screen = large_pilot_lhs_mfd_texture_screen;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8475 : 		pilot_rhs_mfd_texture_screen = large_pilot_rhs_mfd_texture_screen;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8476 : 		co_pilot_lhs_mfd_texture_screen = large_co_pilot_lhs_mfd_texture_screen;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0006a	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8477 : 		co_pilot_rhs_mfd_texture_screen = large_co_pilot_rhs_mfd_texture_screen;

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00074	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8478 : 		ekran_display_texture_screen = large_ekran_display_texture_screen;

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A
  0007e	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 8479 : 
; 8480 : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00088	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 8481 : 	}
; 8482 : 	else

  0008d	eb 46		 jmp	 SHORT $LN15@draw_hokum
$LN14@draw_hokum:

; 8483 : 	{
; 8484 : 		draw_large_mfd = FALSE;

  0008f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 8485 : 
; 8486 : 		pilot_lhs_mfd_texture_screen = small_pilot_lhs_mfd_texture_screen;

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8487 : 		pilot_rhs_mfd_texture_screen = small_pilot_rhs_mfd_texture_screen;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000a8	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8488 : 		co_pilot_lhs_mfd_texture_screen = small_co_pilot_lhs_mfd_texture_screen;

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000b2	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8489 : 		co_pilot_rhs_mfd_texture_screen = small_co_pilot_rhs_mfd_texture_screen;

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000bc	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8490 : 		ekran_display_texture_screen = small_ekran_display_texture_screen;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A
  000c6	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 8491 : 
; 8492 : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  000d0	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN15@draw_hokum:

; 8493 : 	}
; 8494 : 
; 8495 : 	if (get_crew_role () == CREW_ROLE_PILOT)

  000d5	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  000da	85 c0		 test	 eax, eax
  000dc	75 12		 jne	 SHORT $LN16@draw_hokum

; 8496 : 	{
; 8497 : 		export_left=pilot_lhs_mfd_texture_screen;

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000e3	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 8498 : 		export_right=pilot_rhs_mfd_texture_screen;

  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000eb	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 8499 : 	}
; 8500 : 	else

  000ee	eb 10		 jmp	 SHORT $LN17@draw_hokum
$LN16@draw_hokum:

; 8501 : 	{
; 8502 : 		export_left=co_pilot_lhs_mfd_texture_screen;

  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000f5	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 8503 : 		export_right=co_pilot_rhs_mfd_texture_screen;

  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  000fd	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax
$LN17@draw_hokum:

; 8504 : 	}
; 8505 : 
; 8506 : 	set_system_texture_screen (pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_2);

  00100	68 36 05 00 00	 push	 1334			; 00000536H
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8507 : 	set_system_texture_screen (pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_1);

  00110	68 35 05 00 00	 push	 1333			; 00000535H
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8508 : 	set_system_texture_screen (co_pilot_lhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_RHS_1);

  00120	68 37 05 00 00	 push	 1335			; 00000537H
  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8509 : 	set_system_texture_screen (co_pilot_rhs_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_RHS_2);

  00130	68 38 05 00 00	 push	 1336			; 00000538H
  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8510 : 	set_system_texture_screen (ekran_display_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_EKRAN);

  00140	68 d0 04 00 00	 push	 1232			; 000004d0H
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8511 : 
; 8512 : 	////////////////////////////////////////
; 8513 : 	//
; 8514 : 	// SELECT VISIBLE DISPLAYS
; 8515 : 	//
; 8516 : 	////////////////////////////////////////
; 8517 : 
; 8518 : 	switch (get_view_mode ())

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00155	89 45 ac	 mov	 DWORD PTR tv81[ebp], eax
  00158	8b 4d ac	 mov	 ecx, DWORD PTR tv81[ebp]
  0015b	83 e9 26	 sub	 ecx, 38			; 00000026H
  0015e	89 4d ac	 mov	 DWORD PTR tv81[ebp], ecx
  00161	83 7d ac 03	 cmp	 DWORD PTR tv81[ebp], 3
  00165	77 3a		 ja	 SHORT $LN22@draw_hokum
  00167	8b 55 ac	 mov	 edx, DWORD PTR tv81[ebp]
  0016a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN50@draw_hokum[edx*4]
$LN18@draw_hokum:

; 8519 : 	{
; 8520 : 		////////////////////////////////////////
; 8521 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 8522 : 		////////////////////////////////////////
; 8523 : 		{
; 8524 : 			display_mask =

  00171	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 3

; 8525 : 				PILOT_LHS_MFD |
; 8526 : 				PILOT_RHS_MFD;
; 8527 : 
; 8528 : 			break;

  0017b	eb 2e		 jmp	 SHORT $LN4@draw_hokum
$LN19@draw_hokum:

; 8529 : 		}
; 8530 : 		////////////////////////////////////////
; 8531 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 8532 : 		////////////////////////////////////////
; 8533 : 		{
; 8534 : 			display_mask =

  0017d	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 3

; 8535 : 				PILOT_LHS_MFD |
; 8536 : 				PILOT_RHS_MFD;
; 8537 : 
; 8538 : 			break;

  00187	eb 22		 jmp	 SHORT $LN4@draw_hokum
$LN20@draw_hokum:

; 8539 : 		}
; 8540 : 		////////////////////////////////////////
; 8541 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 8542 : 		////////////////////////////////////////
; 8543 : 		{
; 8544 : 			display_mask =

  00189	c7 05 00 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 28 ; 0000001cH

; 8545 : 				CO_PILOT_LHS_MFD |
; 8546 : 				CO_PILOT_RHS_MFD |
; 8547 : 				EKRAN_DISPLAY;
; 8548 : 
; 8549 : 			break;

  00193	eb 16		 jmp	 SHORT $LN4@draw_hokum
$LN21@draw_hokum:

; 8550 : 		}
; 8551 : 		////////////////////////////////////////
; 8552 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 8553 : 		////////////////////////////////////////
; 8554 : 		{
; 8555 : 			display_mask =

  00195	c7 05 00 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 12 ; 0000000cH

; 8556 : 				CO_PILOT_LHS_MFD |
; 8557 : 				CO_PILOT_RHS_MFD;
; 8558 : 
; 8559 : 			break;

  0019f	eb 0a		 jmp	 SHORT $LN4@draw_hokum
$LN22@draw_hokum:

; 8560 : 		}
; 8561 : 		////////////////////////////////////////
; 8562 : 		default:
; 8563 : 		////////////////////////////////////////
; 8564 : 		{
; 8565 : 			display_mask =

  001a1	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 31 ; 0000001fH
$LN4@draw_hokum:

; 8566 : 				PILOT_LHS_MFD |
; 8567 : 				PILOT_RHS_MFD |
; 8568 : 				CO_PILOT_LHS_MFD |
; 8569 : 				CO_PILOT_RHS_MFD |
; 8570 : 				EKRAN_DISPLAY;
; 8571 : 
; 8572 : 			break;
; 8573 : 		}
; 8574 : 	}
; 8575 : 
; 8576 : 	////////////////////////////////////////
; 8577 : 	//
; 8578 : 	// SET UP MFD 2D ENVIRONMENT
; 8579 : 	//
; 8580 : 	////////////////////////////////////////
; 8581 : 
; 8582 : 	set_2d_active_environment (mfd_env);

  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 8583 : 
; 8584 : 	//
; 8585 : 	// window
; 8586 : 	//
; 8587 : 
; 8588 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  001b6	51		 push	 ecx
  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	51		 push	 ecx
  001c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  001cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d2	51		 push	 ecx
  001d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	51		 push	 ecx
  001e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 8589 : 
; 8590 : 	//
; 8591 : 	// viewport
; 8592 : 	//
; 8593 : 
; 8594 : 	if (draw_large_mfd)

  001f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00200	74 1c		 je	 SHORT $LN23@draw_hokum

; 8595 : 	{
; 8596 : 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00202	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0020a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8597 : 
; 8598 : 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00212	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 8599 : 	}
; 8600 : 	else

  0021c	eb 1a		 jmp	 SHORT $LN24@draw_hokum
$LN23@draw_hokum:

; 8601 : 	{
; 8602 : 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  0021e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00226	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8603 : 
; 8604 : 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  0022e	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN24@draw_hokum:

; 8605 : 	}
; 8606 : 
; 8607 : 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  00238	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00240	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00248	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 8608 : 
; 8609 : 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00254	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0025c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00264	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00268	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 8610 : 
; 8611 : 	mfd_viewport_x_min = 0.0;

  00270	0f 57 c0	 xorps	 xmm0, xmm0
  00273	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 8612 : 
; 8613 : 	mfd_viewport_y_min = 0.0;

  0027b	0f 57 c0	 xorps	 xmm0, xmm0
  0027e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 8614 : 
; 8615 : 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  00286	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0028e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00296	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 8616 : 
; 8617 : 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  002a2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002aa	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  002b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 8618 : 
; 8619 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  002be	51		 push	 ecx
  002bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	51		 push	 ecx
  002cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  002d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002da	51		 push	 ecx
  002db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	51		 push	 ecx
  002e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8620 : 
; 8621 : 	mfd_screen_x_min = 0.0;

  00301	0f 57 c0	 xorps	 xmm0, xmm0
  00304	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 8622 : 	mfd_screen_y_min = 0.0;

  0030c	0f 57 c0	 xorps	 xmm0, xmm0
  0030f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 8623 : 
; 8624 : 	mfd_screen_x_max = mfd_viewport_size - 0.001;

  00317	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0031f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00327	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 8625 : 	mfd_screen_y_max = mfd_viewport_size - 0.001;

  00333	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0033b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00343	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00347	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 8626 : 
; 8627 : 	mfd_screen_width = mfd_viewport_size;

  0034f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00357	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 8628 : 	mfd_screen_height = mfd_viewport_size;

  0035f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00367	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 8629 : 
; 8630 : 	mfd_screen_x_scale = 1.0;

  0036f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00377	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 8631 : 	mfd_screen_y_scale = 1.0;

  0037f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00387	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 8632 : 
; 8633 : 	////////////////////////////////////////
; 8634 : 	//
; 8635 : 	// render EO 3D display (if required)
; 8636 : 	//
; 8637 : 	////////////////////////////////////////
; 8638 : 
; 8639 : 	{
; 8640 : 		int
; 8641 : 			draw_eo_display;
; 8642 : 
; 8643 : 		if (d3d_can_render_to_texture)

  0038f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00396	0f 84 e4 01 00
	00		 je	 $LN35@draw_hokum

; 8644 : 		{
; 8645 : 			ASSERT (eo_3d_texture_screen);

  0039c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  003a3	75 1a		 jne	 SHORT $LN26@draw_hokum
  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_hokum_mfd@@YGXXZ@4JA
  003aa	05 dc 00 00 00	 add	 eax, 220		; 000000dcH
  003af	50		 push	 eax
  003b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  003ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN26@draw_hokum:

; 8646 : 
; 8647 : 			draw_eo_display = FALSE;

  003bf	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 0

; 8648 : 
; 8649 : 			if (get_undamaged_eo_display_mode (pilot_lhs_mfd_mode) && (display_mask & PILOT_LHS_MFD))

  003c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  003cb	50		 push	 eax
  003cc	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  003d1	85 c0		 test	 eax, eax
  003d3	74 32		 je	 SHORT $LN27@draw_hokum
  003d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  003da	83 e0 01	 and	 eax, 1
  003dd	74 28		 je	 SHORT $LN27@draw_hokum

; 8650 : 			{
; 8651 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_2);

  003df	68 36 05 00 00	 push	 1334			; 00000536H
  003e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8652 : 				if (get_crew_role () == CREW_ROLE_PILOT)

  003ef	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  003f4	85 c0		 test	 eax, eax
  003f6	75 08		 jne	 SHORT $LN28@draw_hokum

; 8653 : 					export_left=eo_3d_texture_screen;

  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003fd	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax
$LN28@draw_hokum:

; 8654 : 
; 8655 : 				draw_eo_display = TRUE;

  00400	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN27@draw_hokum:

; 8656 : 			}
; 8657 : 
; 8658 : 			if (get_undamaged_eo_display_mode (pilot_rhs_mfd_mode) && (display_mask & PILOT_RHS_MFD))

  00407	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  0040c	50		 push	 eax
  0040d	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00412	85 c0		 test	 eax, eax
  00414	74 32		 je	 SHORT $LN29@draw_hokum
  00416	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0041b	83 e0 02	 and	 eax, 2
  0041e	74 28		 je	 SHORT $LN29@draw_hokum

; 8659 : 			{
; 8660 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_1);

  00420	68 35 05 00 00	 push	 1333			; 00000535H
  00425	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8661 : 				if (get_crew_role () == CREW_ROLE_PILOT)

  00430	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  00435	85 c0		 test	 eax, eax
  00437	75 08		 jne	 SHORT $LN30@draw_hokum

; 8662 : 					export_right=eo_3d_texture_screen;

  00439	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0043e	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax
$LN30@draw_hokum:

; 8663 : 
; 8664 : 				draw_eo_display = TRUE;

  00441	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN29@draw_hokum:

; 8665 : 			}
; 8666 : 
; 8667 : 			if (get_undamaged_eo_display_mode (co_pilot_lhs_mfd_mode) && (display_mask & CO_PILOT_LHS_MFD))

  00448	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  0044d	50		 push	 eax
  0044e	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00453	85 c0		 test	 eax, eax
  00455	74 33		 je	 SHORT $LN31@draw_hokum
  00457	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0045c	83 e0 04	 and	 eax, 4
  0045f	74 29		 je	 SHORT $LN31@draw_hokum

; 8668 : 			{
; 8669 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_RHS_1);

  00461	68 37 05 00 00	 push	 1335			; 00000537H
  00466	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0046b	50		 push	 eax
  0046c	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8670 : 				if (get_crew_role () == CREW_ROLE_CO_PILOT)

  00471	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  00476	83 f8 01	 cmp	 eax, 1
  00479	75 08		 jne	 SHORT $LN32@draw_hokum

; 8671 : 					export_left=eo_3d_texture_screen;

  0047b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00480	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax
$LN32@draw_hokum:

; 8672 : 
; 8673 : 				draw_eo_display = TRUE;

  00483	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN31@draw_hokum:

; 8674 : 			}
; 8675 : 
; 8676 : 			if (get_undamaged_eo_display_mode (co_pilot_rhs_mfd_mode) && (display_mask & CO_PILOT_RHS_MFD))

  0048a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  0048f	50		 push	 eax
  00490	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4HOKUM_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00495	85 c0		 test	 eax, eax
  00497	74 33		 je	 SHORT $LN33@draw_hokum
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0049e	83 e0 08	 and	 eax, 8
  004a1	74 29		 je	 SHORT $LN33@draw_hokum

; 8677 : 			{
; 8678 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_RHS_2);

  004a3	68 38 05 00 00	 push	 1336			; 00000538H
  004a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004ad	50		 push	 eax
  004ae	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8679 : 				if (get_crew_role () == CREW_ROLE_CO_PILOT)

  004b3	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  004b8	83 f8 01	 cmp	 eax, 1
  004bb	75 08		 jne	 SHORT $LN34@draw_hokum

; 8680 : 					export_right=eo_3d_texture_screen;

  004bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004c2	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax
$LN34@draw_hokum:

; 8681 : 
; 8682 : 				draw_eo_display = TRUE;

  004c5	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN33@draw_hokum:

; 8683 : 			}
; 8684 : 
; 8685 : 			if (draw_eo_display)

  004cc	83 7d f0 00	 cmp	 DWORD PTR _draw_eo_display$1[ebp], 0
  004d0	0f 84 aa 00 00
	00		 je	 $LN35@draw_hokum

; 8686 : 			{
; 8687 : 				switch (get_mfd_mode_for_eo_sensor ())

  004d6	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  004db	89 45 ac	 mov	 DWORD PTR tv222[ebp], eax
  004de	83 7d ac 04	 cmp	 DWORD PTR tv222[ebp], 4
  004e2	74 0e		 je	 SHORT $LN36@draw_hokum
  004e4	83 7d ac 05	 cmp	 DWORD PTR tv222[ebp], 5
  004e8	74 11		 je	 SHORT $LN37@draw_hokum
  004ea	83 7d ac 06	 cmp	 DWORD PTR tv222[ebp], 6
  004ee	74 14		 je	 SHORT $LN38@draw_hokum
  004f0	eb 19		 jmp	 SHORT $LN6@draw_hokum
$LN36@draw_hokum:

; 8688 : 				{
; 8689 : 					case HOKUM_MFD_MODE_FLIR:
; 8690 : 					{
; 8691 : 						draw_3d_flir_mfd (FALSE);

  004f2	6a 00		 push	 0
  004f4	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 8692 : 
; 8693 : 						break;

  004f9	eb 10		 jmp	 SHORT $LN6@draw_hokum
$LN37@draw_hokum:

; 8694 : 					}
; 8695 : 					case HOKUM_MFD_MODE_LLLTV:
; 8696 : 					{
; 8697 : 						draw_3d_llltv_mfd (FALSE);

  004fb	6a 00		 push	 0
  004fd	e8 00 00 00 00	 call	 ?draw_3d_llltv_mfd@@YGXH@Z ; draw_3d_llltv_mfd

; 8698 : 
; 8699 : 						break;

  00502	eb 07		 jmp	 SHORT $LN6@draw_hokum
$LN38@draw_hokum:

; 8700 : 					}
; 8701 : 					case HOKUM_MFD_MODE_PERISCOPE:
; 8702 : 					{
; 8703 : 						draw_3d_periscope_mfd (FALSE);

  00504	6a 00		 push	 0
  00506	e8 00 00 00 00	 call	 ?draw_3d_periscope_mfd@@YGXH@Z ; draw_3d_periscope_mfd
$LN6@draw_hokum:

; 8704 : 
; 8705 : 						break;
; 8706 : 					}
; 8707 : 				}
; 8708 : 
; 8709 : 				set_active_screen (eo_3d_texture_screen);

  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00510	50		 push	 eax
  00511	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8710 : 
; 8711 : 				if (lock_screen (eo_3d_texture_screen))

  00516	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0051b	50		 push	 eax
  0051c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00521	85 c0		 test	 eax, eax
  00523	74 50		 je	 SHORT $LN39@draw_hokum

; 8712 : 				{
; 8713 : 					draw_layout_grid ();

  00525	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8714 : 
; 8715 : 					switch (get_mfd_mode_for_eo_sensor ())

  0052a	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4HOKUM_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0052f	89 45 ac	 mov	 DWORD PTR tv234[ebp], eax
  00532	83 7d ac 04	 cmp	 DWORD PTR tv234[ebp], 4
  00536	74 0e		 je	 SHORT $LN40@draw_hokum
  00538	83 7d ac 05	 cmp	 DWORD PTR tv234[ebp], 5
  0053c	74 11		 je	 SHORT $LN41@draw_hokum
  0053e	83 7d ac 06	 cmp	 DWORD PTR tv234[ebp], 6
  00542	74 14		 je	 SHORT $LN42@draw_hokum
  00544	eb 19		 jmp	 SHORT $LN8@draw_hokum
$LN40@draw_hokum:

; 8716 : 					{
; 8717 : 						case HOKUM_MFD_MODE_FLIR:
; 8718 : 						{
; 8719 : 							draw_2d_flir_mfd (TRUE);

  00546	6a 01		 push	 1
  00548	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 8720 : 
; 8721 : 							break;

  0054d	eb 10		 jmp	 SHORT $LN8@draw_hokum
$LN41@draw_hokum:

; 8722 : 						}
; 8723 : 						case HOKUM_MFD_MODE_LLLTV:
; 8724 : 						{
; 8725 : 							draw_2d_llltv_mfd (TRUE);

  0054f	6a 01		 push	 1
  00551	e8 00 00 00 00	 call	 ?draw_2d_llltv_mfd@@YGXH@Z ; draw_2d_llltv_mfd

; 8726 : 
; 8727 : 							break;

  00556	eb 07		 jmp	 SHORT $LN8@draw_hokum
$LN42@draw_hokum:

; 8728 : 						}
; 8729 : 						case HOKUM_MFD_MODE_PERISCOPE:
; 8730 : 						{
; 8731 : 							draw_2d_periscope_mfd (TRUE);

  00558	6a 01		 push	 1
  0055a	e8 00 00 00 00	 call	 ?draw_2d_periscope_mfd@@YGXH@Z ; draw_2d_periscope_mfd
$LN8@draw_hokum:

; 8732 : 
; 8733 : 							break;
; 8734 : 						}
; 8735 : 					}
; 8736 : 
; 8737 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  0055f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8738 : 
; 8739 : 					unlock_screen (eo_3d_texture_screen);

  0056a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_hokum:

; 8740 : 				}
; 8741 : 
; 8742 : 				set_active_screen (video_screen);

  00575	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0057a	50		 push	 eax
  0057b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN35@draw_hokum:

; 8743 : 			}
; 8744 : 		}
; 8745 : 	}
; 8746 : 
; 8747 : 	////////////////////////////////////////
; 8748 : 	//
; 8749 : 	// DRAW DISPLAYS
; 8750 : 	//
; 8751 : 	////////////////////////////////////////
; 8752 : 
; 8753 : 	if (display_mask & PILOT_LHS_MFD)

  00580	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00585	83 e0 01	 and	 eax, 1
  00588	74 12		 je	 SHORT $LN43@draw_hokum

; 8754 : 	{
; 8755 : 		draw_mfd (pilot_lhs_mfd_texture_screen, &pilot_lhs_mfd_mode, HOKUM_MFD_LOCATION_PILOT_LHS);

  0058a	6a 00		 push	 0
  0058c	68 00 00 00 00	 push	 OFFSET ?pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  00591	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00596	50		 push	 eax
  00597	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_mfd
$LN43@draw_hokum:

; 8756 : 	}
; 8757 : 
; 8758 : 	if (display_mask & PILOT_RHS_MFD)

  0059c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005a1	83 e0 02	 and	 eax, 2
  005a4	74 12		 je	 SHORT $LN44@draw_hokum

; 8759 : 	{
; 8760 : 		draw_mfd (pilot_rhs_mfd_texture_screen, &pilot_rhs_mfd_mode, HOKUM_MFD_LOCATION_PILOT_RHS);

  005a6	6a 01		 push	 1
  005a8	68 00 00 00 00	 push	 OFFSET ?pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  005ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  005b2	50		 push	 eax
  005b3	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_mfd
$LN44@draw_hokum:

; 8761 : 	}
; 8762 : 
; 8763 : 	if (display_mask & CO_PILOT_LHS_MFD)

  005b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005bd	83 e0 04	 and	 eax, 4
  005c0	74 12		 je	 SHORT $LN45@draw_hokum

; 8764 : 	{
; 8765 : 		draw_mfd (co_pilot_lhs_mfd_texture_screen, &co_pilot_lhs_mfd_mode, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  005c2	6a 02		 push	 2
  005c4	68 00 00 00 00	 push	 OFFSET ?co_pilot_lhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  005c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  005ce	50		 push	 eax
  005cf	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_mfd
$LN45@draw_hokum:

; 8766 : 	}
; 8767 : 
; 8768 : 	if (display_mask & CO_PILOT_RHS_MFD)

  005d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005d9	83 e0 08	 and	 eax, 8
  005dc	74 12		 je	 SHORT $LN46@draw_hokum

; 8769 : 	{
; 8770 : 		draw_mfd (co_pilot_rhs_mfd_texture_screen, &co_pilot_rhs_mfd_mode, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  005de	6a 03		 push	 3
  005e0	68 00 00 00 00	 push	 OFFSET ?co_pilot_rhs_mfd_mode@@3W4HOKUM_MFD_MODES@@A
  005e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  005ea	50		 push	 eax
  005eb	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; draw_mfd
$LN46@draw_hokum:

; 8771 : 	}
; 8772 : 
; 8773 : 	if (display_mask & EKRAN_DISPLAY)

  005f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  005f5	83 e0 10	 and	 eax, 16			; 00000010H
  005f8	74 0b		 je	 SHORT $LN47@draw_hokum

; 8774 : 	{
; 8775 : 		draw_text_display (ekran_display_texture_screen);

  005fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A
  005ff	50		 push	 eax
  00600	e8 00 00 00 00	 call	 ?draw_text_display@@YGXPAUSCREEN@@@Z ; draw_text_display
$LN47@draw_hokum:

; 8776 : 	}
; 8777 : 	if(command_line_export_mfd)

  00605	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  0060c	74 0d		 je	 SHORT $LN48@draw_hokum

; 8778 : 		copy_export_mfd(export_left,export_right);

  0060e	8b 45 f8	 mov	 eax, DWORD PTR _export_right$[ebp]
  00611	50		 push	 eax
  00612	8b 4d fc	 mov	 ecx, DWORD PTR _export_left$[ebp]
  00615	51		 push	 ecx
  00616	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN48@draw_hokum:

; 8779 : }

  0061b	5f		 pop	 edi
  0061c	5e		 pop	 esi
  0061d	5b		 pop	 ebx
  0061e	8b e5		 mov	 esp, ebp
  00620	5d		 pop	 ebp
  00621	c3		 ret	 0
  00622	66 90		 npad	 2
$LN50@draw_hokum:
  00624	00 00 00 00	 DD	 $LN18@draw_hokum
  00628	00 00 00 00	 DD	 $LN19@draw_hokum
  0062c	00 00 00 00	 DD	 $LN20@draw_hokum
  00630	00 00 00 00	 DD	 $LN21@draw_hokum
?draw_hokum_mfd@@YGXXZ ENDP				; draw_hokum_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?deinitialise_hokum_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_hokum_mfd@@YGXXZ PROC			; deinitialise_hokum_mfd, COMDAT

; 8392 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8393 : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 8394 : 
; 8395 : 	////////////////////////////////////////
; 8396 : 
; 8397 : 	destroy_screen (large_pilot_lhs_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8398 : 	destroy_screen (large_pilot_rhs_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8399 : 	destroy_screen (large_co_pilot_lhs_mfd_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8400 : 	destroy_screen (large_co_pilot_rhs_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8401 : 	destroy_screen (large_ekran_display_texture_screen);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8402 : 
; 8403 : 	destroy_screen (small_pilot_lhs_mfd_texture_screen);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8404 : 	destroy_screen (small_pilot_rhs_mfd_texture_screen);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8405 : 	destroy_screen (small_co_pilot_lhs_mfd_texture_screen);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8406 : 	destroy_screen (small_co_pilot_rhs_mfd_texture_screen);

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8407 : 	destroy_screen (small_ekran_display_texture_screen);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8408 : 
; 8409 : 	destroy_screen (full_mfd_texture_screen);

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 8410 : 
; 8411 : 	////////////////////////////////////////
; 8412 : 	//
; 8413 : 	// weapon display lines
; 8414 : 	//
; 8415 : 	////////////////////////////////////////
; 8416 : 
; 8417 : 	safe_free (weapon_line_points);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 8418 : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?deinitialise_hokum_mfd@@YGXXZ ENDP			; deinitialise_hokum_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\hokum\hk_mfd.c
;	COMDAT ?initialise_hokum_mfd@@YGXXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?initialise_hokum_mfd@@YGXXZ PROC			; initialise_hokum_mfd, COMDAT

; 8250 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8251 : 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 14		 je	 SHORT $LN5@initialise

; 8252 : 	{
; 8253 : 		select_hokum_mfd_mode (HOKUM_MFD_MODE_OFF, HOKUM_MFD_LOCATION_PILOT_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 8254 : 		select_hokum_mfd_mode (HOKUM_MFD_MODE_OFF, HOKUM_MFD_LOCATION_PILOT_RHS);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 8255 : 	}
; 8256 : 	else

  00024	eb 12		 jmp	 SHORT $LN6@initialise
$LN5@initialise:

; 8257 : 	{
; 8258 : 		select_hokum_mfd_mode (HOKUM_MFD_MODE_ENGINE, HOKUM_MFD_LOCATION_PILOT_LHS);

  00026	6a 00		 push	 0
  00028	6a 0b		 push	 11			; 0000000bH
  0002a	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 8259 : 		select_hokum_mfd_mode (HOKUM_MFD_MODE_TSD, HOKUM_MFD_LOCATION_PILOT_RHS);

  0002f	6a 01		 push	 1
  00031	6a 07		 push	 7
  00033	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode
$LN6@initialise:

; 8260 : 	}
; 8261 : 
; 8262 : 	select_hokum_mfd_mode (HOKUM_MFD_MODE_MISSION, HOKUM_MFD_LOCATION_CO_PILOT_LHS);

  00038	6a 02		 push	 2
  0003a	6a 0d		 push	 13			; 0000000dH
  0003c	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 8263 : 	select_hokum_mfd_mode (HOKUM_MFD_MODE_TSD, HOKUM_MFD_LOCATION_CO_PILOT_RHS);

  00041	6a 03		 push	 3
  00043	6a 07		 push	 7
  00045	e8 00 00 00 00	 call	 ?select_hokum_mfd_mode@@YGXW4HOKUM_MFD_MODES@@W4HOKUM_MFD_LOCATIONS@@@Z ; select_hokum_mfd_mode

; 8264 : 
; 8265 : 	////////////////////////////////////////
; 8266 : 
; 8267 : 	set_hokum_text_display_text ("", "", "");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00059	e8 00 00 00 00	 call	 ?set_hokum_text_display_text@@YGXPAD00@Z ; set_hokum_text_display_text

; 8268 : 
; 8269 : 	////////////////////////////////////////
; 8270 : 
; 8271 : 	pilot_tsd_ase_range							= TSD_ASE_RANGE_5000;

  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00066	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0

; 8272 : 	pilot_tsd_declutter_level					= TSD_DECLUTTER_LEVEL_NAVIGATION;

  0006e	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 8273 : 	pilot_tsd_threat_line_flash_timer		= TSD_THREAT_LINE_FLASH_RATE;

  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00080	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 8274 : 	pilot_tsd_draw_threat_line_status		= 0;

  00088	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_draw_threat_line_status@@3HA, 0

; 8275 : 	pilot_ase_threat_line_flash_timer		= ASE_THREAT_LINE_FLASH_RATE;

  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0009a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 8276 : 	pilot_ase_draw_threat_line_status		= 0;

  000a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_ase_draw_threat_line_status@@3HA, 0

; 8277 : 
; 8278 : 	co_pilot_tsd_ase_range						= TSD_ASE_RANGE_5000;

  000ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  000b4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0

; 8279 : 	co_pilot_tsd_declutter_level				= TSD_DECLUTTER_LEVEL_TARGET;

  000bc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1

; 8280 : 	co_pilot_tsd_threat_line_flash_timer	= TSD_THREAT_LINE_FLASH_RATE;

  000c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000ce	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 8281 : 	co_pilot_tsd_draw_threat_line_status	= 0;

  000d6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_draw_threat_line_status@@3HA, 0

; 8282 : 	co_pilot_ase_threat_line_flash_timer	= ASE_THREAT_LINE_FLASH_RATE;

  000e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000e8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 8283 : 	co_pilot_ase_draw_threat_line_status	= 0;

  000f0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_ase_draw_threat_line_status@@3HA, 0

; 8284 : 
; 8285 : 	////////////////////////////////////////
; 8286 : 
; 8287 : 	mfd_env = create_2d_environment ();

  000fa	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 8288 : 
; 8289 : 	////////////////////////////////////////
; 8290 : 
; 8291 : 	large_pilot_lhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00104	6a 00		 push	 0
  00106	6a 02		 push	 2
  00108	68 00 01 00 00	 push	 256			; 00000100H
  0010d	68 00 01 00 00	 push	 256			; 00000100H
  00112	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00117	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8292 : 	large_pilot_rhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0011c	6a 00		 push	 0
  0011e	6a 02		 push	 2
  00120	68 00 01 00 00	 push	 256			; 00000100H
  00125	68 00 01 00 00	 push	 256			; 00000100H
  0012a	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0012f	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8293 : 	large_co_pilot_lhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00134	6a 00		 push	 0
  00136	6a 02		 push	 2
  00138	68 00 01 00 00	 push	 256			; 00000100H
  0013d	68 00 01 00 00	 push	 256			; 00000100H
  00142	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00147	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8294 : 	large_co_pilot_rhs_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0014c	6a 00		 push	 0
  0014e	6a 02		 push	 2
  00150	68 00 01 00 00	 push	 256			; 00000100H
  00155	68 00 01 00 00	 push	 256			; 00000100H
  0015a	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0015f	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8295 : 	large_ekran_display_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00164	6a 00		 push	 0
  00166	6a 02		 push	 2
  00168	68 00 01 00 00	 push	 256			; 00000100H
  0016d	68 00 01 00 00	 push	 256			; 00000100H
  00172	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00177	a3 00 00 00 00	 mov	 DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 8296 : 
; 8297 : 	small_pilot_lhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0017c	6a 00		 push	 0
  0017e	6a 02		 push	 2
  00180	68 80 00 00 00	 push	 128			; 00000080H
  00185	68 80 00 00 00	 push	 128			; 00000080H
  0018a	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0018f	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8298 : 	small_pilot_rhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00194	6a 00		 push	 0
  00196	6a 02		 push	 2
  00198	68 80 00 00 00	 push	 128			; 00000080H
  0019d	68 80 00 00 00	 push	 128			; 00000080H
  001a2	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001a7	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8299 : 	small_co_pilot_lhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001ac	6a 00		 push	 0
  001ae	6a 02		 push	 2
  001b0	68 80 00 00 00	 push	 128			; 00000080H
  001b5	68 80 00 00 00	 push	 128			; 00000080H
  001ba	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001bf	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8300 : 	small_co_pilot_rhs_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001c4	6a 00		 push	 0
  001c6	6a 02		 push	 2
  001c8	68 80 00 00 00	 push	 128			; 00000080H
  001cd	68 80 00 00 00	 push	 128			; 00000080H
  001d2	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001d7	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8301 : 	small_ekran_display_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001dc	6a 00		 push	 0
  001de	6a 02		 push	 2
  001e0	68 80 00 00 00	 push	 128			; 00000080H
  001e5	68 80 00 00 00	 push	 128			; 00000080H
  001ea	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001ef	a3 00 00 00 00	 mov	 DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 8302 : 
; 8303 : 	full_mfd_texture_screen = create_system_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  001f4	6a 02		 push	 2
  001f6	68 f9 00 00 00	 push	 249			; 000000f9H
  001fb	68 00 01 00 00	 push	 256			; 00000100H
  00200	68 00 01 00 00	 push	 256			; 00000100H
  00205	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  0020a	a3 00 00 00 00	 mov	 DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8304 : 
; 8305 : 	if (command_line_colour_mfd)

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00216	0f 84 d1 02 00
	00		 je	 $LN7@initialise

; 8306 : 	{
; 8307 : 		set_rgb_colour (MFD_COLOUR1,            255, 255, 255, 255);

  0021c	b8 04 00 00 00	 mov	 eax, 4
  00221	6b c8 00	 imul	 ecx, eax, 0
  00224	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0022b	b8 04 00 00 00	 mov	 eax, 4
  00230	6b c8 00	 imul	 ecx, eax, 0
  00233	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0023a	b8 04 00 00 00	 mov	 eax, 4
  0023f	6b c8 00	 imul	 ecx, eax, 0
  00242	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00249	b8 04 00 00 00	 mov	 eax, 4
  0024e	6b c8 00	 imul	 ecx, eax, 0
  00251	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8308 : 		set_rgb_colour (MFD_COLOUR2,            200, 200, 200, 255);

  00258	b8 04 00 00 00	 mov	 eax, 4
  0025d	c1 e0 00	 shl	 eax, 0
  00260	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  00267	b8 04 00 00 00	 mov	 eax, 4
  0026c	c1 e0 00	 shl	 eax, 0
  0026f	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00276	b8 04 00 00 00	 mov	 eax, 4
  0027b	c1 e0 00	 shl	 eax, 0
  0027e	c6 80 00 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 200 ; 000000c8H
  00285	b8 04 00 00 00	 mov	 eax, 4
  0028a	c1 e0 00	 shl	 eax, 0
  0028d	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8309 : 		set_rgb_colour (MFD_COLOUR3,            176, 176, 176, 255);

  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	d1 e0		 shl	 eax, 1
  0029b	c6 80 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 176 ; 000000b0H
  002a2	b8 04 00 00 00	 mov	 eax, 4
  002a7	d1 e0		 shl	 eax, 1
  002a9	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  002b0	b8 04 00 00 00	 mov	 eax, 4
  002b5	d1 e0		 shl	 eax, 1
  002b7	c6 80 00 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 176 ; 000000b0H
  002be	b8 04 00 00 00	 mov	 eax, 4
  002c3	d1 e0		 shl	 eax, 1
  002c5	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8310 : 		set_rgb_colour (MFD_COLOUR4,            151, 151, 151, 255);

  002cc	b8 04 00 00 00	 mov	 eax, 4
  002d1	6b c8 03	 imul	 ecx, eax, 3
  002d4	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  002db	b8 04 00 00 00	 mov	 eax, 4
  002e0	6b c8 03	 imul	 ecx, eax, 3
  002e3	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  002ea	b8 04 00 00 00	 mov	 eax, 4
  002ef	6b c8 03	 imul	 ecx, eax, 3
  002f2	c6 81 00 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 151 ; 00000097H
  002f9	b8 04 00 00 00	 mov	 eax, 4
  002fe	6b c8 03	 imul	 ecx, eax, 3
  00301	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8311 : 		set_rgb_colour (MFD_COLOUR5,            128, 128, 128, 255);

  00308	b8 04 00 00 00	 mov	 eax, 4
  0030d	c1 e0 02	 shl	 eax, 2
  00310	c6 80 02 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 128 ; 00000080H
  00317	b8 04 00 00 00	 mov	 eax, 4
  0031c	c1 e0 02	 shl	 eax, 2
  0031f	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  00326	b8 04 00 00 00	 mov	 eax, 4
  0032b	c1 e0 02	 shl	 eax, 2
  0032e	c6 80 00 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 128 ; 00000080H
  00335	b8 04 00 00 00	 mov	 eax, 4
  0033a	c1 e0 02	 shl	 eax, 2
  0033d	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8312 : 		set_rgb_colour (MFD_COLOUR6,             40,  40,  40, 255);

  00344	b8 04 00 00 00	 mov	 eax, 4
  00349	6b c8 05	 imul	 ecx, eax, 5
  0034c	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00353	b8 04 00 00 00	 mov	 eax, 4
  00358	6b c8 05	 imul	 ecx, eax, 5
  0035b	c6 81 01 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 40 ; 00000028H
  00362	b8 04 00 00 00	 mov	 eax, 4
  00367	6b c8 05	 imul	 ecx, eax, 5
  0036a	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  00371	b8 04 00 00 00	 mov	 eax, 4
  00376	6b c8 05	 imul	 ecx, eax, 5
  00379	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8313 : 
; 8314 : 		set_rgb_colour (MFD_COLOUR_GREEN,        40, 220,  40, 255);

  00380	b8 04 00 00 00	 mov	 eax, 4
  00385	6b c8 0d	 imul	 ecx, eax, 13
  00388	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  0038f	b8 04 00 00 00	 mov	 eax, 4
  00394	6b c8 0d	 imul	 ecx, eax, 13
  00397	c6 81 01 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 220 ; 000000dcH
  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	6b c8 0d	 imul	 ecx, eax, 13
  003a6	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  003ad	b8 04 00 00 00	 mov	 eax, 4
  003b2	6b c8 0d	 imul	 ecx, eax, 13
  003b5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8315 : 		set_rgb_colour (MFD_COLOUR_DARK_GREEN,    0, 120,   0, 255);

  003bc	b8 04 00 00 00	 mov	 eax, 4
  003c1	6b c8 0e	 imul	 ecx, eax, 14
  003c4	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  003cb	b8 04 00 00 00	 mov	 eax, 4
  003d0	6b c8 0e	 imul	 ecx, eax, 14
  003d3	c6 81 01 00 00
	00 78		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 120 ; 00000078H
  003da	b8 04 00 00 00	 mov	 eax, 4
  003df	6b c8 0e	 imul	 ecx, eax, 14
  003e2	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  003e9	b8 04 00 00 00	 mov	 eax, 4
  003ee	6b c8 0e	 imul	 ecx, eax, 14
  003f1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8316 : 		set_rgb_colour (MFD_COLOUR_YELLOW,      220, 220,  20, 255);

  003f8	b8 04 00 00 00	 mov	 eax, 4
  003fd	6b c8 0f	 imul	 ecx, eax, 15
  00400	c6 81 02 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 220 ; 000000dcH
  00407	b8 04 00 00 00	 mov	 eax, 4
  0040c	6b c8 0f	 imul	 ecx, eax, 15
  0040f	c6 81 01 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 220 ; 000000dcH
  00416	b8 04 00 00 00	 mov	 eax, 4
  0041b	6b c8 0f	 imul	 ecx, eax, 15
  0041e	c6 81 00 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 20 ; 00000014H
  00425	b8 04 00 00 00	 mov	 eax, 4
  0042a	6b c8 0f	 imul	 ecx, eax, 15
  0042d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8317 : 		set_rgb_colour (MFD_COLOUR_LIGHT_BLUE,  192, 192, 255, 255);

  00434	b8 04 00 00 00	 mov	 eax, 4
  00439	c1 e0 04	 shl	 eax, 4
  0043c	c6 80 02 00 00
	00 c0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 192 ; 000000c0H
  00443	b8 04 00 00 00	 mov	 eax, 4
  00448	c1 e0 04	 shl	 eax, 4
  0044b	c6 80 01 00 00
	00 c0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 192 ; 000000c0H
  00452	b8 04 00 00 00	 mov	 eax, 4
  00457	c1 e0 04	 shl	 eax, 4
  0045a	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 255 ; 000000ffH
  00461	b8 04 00 00 00	 mov	 eax, 4
  00466	c1 e0 04	 shl	 eax, 4
  00469	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8318 : 		set_rgb_colour (MFD_COLOUR_BLUE,         20,  20, 180, 255);

  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 11	 imul	 ecx, eax, 17
  00478	c6 81 02 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 20 ; 00000014H
  0047f	b8 04 00 00 00	 mov	 eax, 4
  00484	6b c8 11	 imul	 ecx, eax, 17
  00487	c6 81 01 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 20 ; 00000014H
  0048e	b8 04 00 00 00	 mov	 eax, 4
  00493	6b c8 11	 imul	 ecx, eax, 17
  00496	c6 81 00 00 00
	00 b4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 180 ; 000000b4H
  0049d	b8 04 00 00 00	 mov	 eax, 4
  004a2	6b c8 11	 imul	 ecx, eax, 17
  004a5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8319 : 		set_rgb_colour (MFD_COLOUR_RED,         200,  50,  50, 255);

  004ac	b8 04 00 00 00	 mov	 eax, 4
  004b1	6b c8 12	 imul	 ecx, eax, 18
  004b4	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  004bb	b8 04 00 00 00	 mov	 eax, 4
  004c0	6b c8 12	 imul	 ecx, eax, 18
  004c3	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  004ca	b8 04 00 00 00	 mov	 eax, 4
  004cf	6b c8 12	 imul	 ecx, eax, 18
  004d2	c6 81 00 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 50 ; 00000032H
  004d9	b8 04 00 00 00	 mov	 eax, 4
  004de	6b c8 12	 imul	 ecx, eax, 18
  004e1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8320 : 	}
; 8321 : 	else

  004e8	e9 cc 02 00 00	 jmp	 $LN8@initialise
$LN7@initialise:

; 8322 : 	{
; 8323 : 		set_rgb_colour (MFD_COLOUR1,            255, 135,   0, 255);

  004ed	b8 04 00 00 00	 mov	 eax, 4
  004f2	6b c8 00	 imul	 ecx, eax, 0
  004f5	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	6b c8 00	 imul	 ecx, eax, 0
  00504	c6 81 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 135 ; 00000087H
  0050b	b8 04 00 00 00	 mov	 eax, 4
  00510	6b c8 00	 imul	 ecx, eax, 0
  00513	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0051a	b8 04 00 00 00	 mov	 eax, 4
  0051f	6b c8 00	 imul	 ecx, eax, 0
  00522	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8324 : 		set_rgb_colour (MFD_COLOUR2,            255,  90,   0, 255);

  00529	b8 04 00 00 00	 mov	 eax, 4
  0052e	c1 e0 00	 shl	 eax, 0
  00531	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00538	b8 04 00 00 00	 mov	 eax, 4
  0053d	c1 e0 00	 shl	 eax, 0
  00540	c6 80 01 00 00
	00 5a		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 90 ; 0000005aH
  00547	b8 04 00 00 00	 mov	 eax, 4
  0054c	c1 e0 00	 shl	 eax, 0
  0054f	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00556	b8 04 00 00 00	 mov	 eax, 4
  0055b	c1 e0 00	 shl	 eax, 0
  0055e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8325 : 		set_rgb_colour (MFD_COLOUR3,            200,  65,   0, 255);

  00565	b8 04 00 00 00	 mov	 eax, 4
  0056a	d1 e0		 shl	 eax, 1
  0056c	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  00573	b8 04 00 00 00	 mov	 eax, 4
  00578	d1 e0		 shl	 eax, 1
  0057a	c6 80 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 65 ; 00000041H
  00581	b8 04 00 00 00	 mov	 eax, 4
  00586	d1 e0		 shl	 eax, 1
  00588	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0058f	b8 04 00 00 00	 mov	 eax, 4
  00594	d1 e0		 shl	 eax, 1
  00596	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8326 : 		set_rgb_colour (MFD_COLOUR4,            130,  50,   0, 255);

  0059d	b8 04 00 00 00	 mov	 eax, 4
  005a2	6b c8 03	 imul	 ecx, eax, 3
  005a5	c6 81 02 00 00
	00 82		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 130 ; 00000082H
  005ac	b8 04 00 00 00	 mov	 eax, 4
  005b1	6b c8 03	 imul	 ecx, eax, 3
  005b4	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  005bb	b8 04 00 00 00	 mov	 eax, 4
  005c0	6b c8 03	 imul	 ecx, eax, 3
  005c3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005ca	b8 04 00 00 00	 mov	 eax, 4
  005cf	6b c8 03	 imul	 ecx, eax, 3
  005d2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8327 : 		set_rgb_colour (MFD_COLOUR5,            100,  50,   0, 255);

  005d9	b8 04 00 00 00	 mov	 eax, 4
  005de	c1 e0 02	 shl	 eax, 2
  005e1	c6 80 02 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 100 ; 00000064H
  005e8	b8 04 00 00 00	 mov	 eax, 4
  005ed	c1 e0 02	 shl	 eax, 2
  005f0	c6 80 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 50 ; 00000032H
  005f7	b8 04 00 00 00	 mov	 eax, 4
  005fc	c1 e0 02	 shl	 eax, 2
  005ff	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00606	b8 04 00 00 00	 mov	 eax, 4
  0060b	c1 e0 02	 shl	 eax, 2
  0060e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8328 : 		set_rgb_colour (MFD_COLOUR6,             50,  25,   0, 255);

  00615	b8 04 00 00 00	 mov	 eax, 4
  0061a	6b c8 05	 imul	 ecx, eax, 5
  0061d	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  00624	b8 04 00 00 00	 mov	 eax, 4
  00629	6b c8 05	 imul	 ecx, eax, 5
  0062c	c6 81 01 00 00
	00 19		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 25 ; 00000019H
  00633	b8 04 00 00 00	 mov	 eax, 4
  00638	6b c8 05	 imul	 ecx, eax, 5
  0063b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00642	b8 04 00 00 00	 mov	 eax, 4
  00647	6b c8 05	 imul	 ecx, eax, 5
  0064a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8329 : 
; 8330 : 		set_rgb_colour (MFD_COLOUR_GREEN,       200,  65,   0, 255);

  00651	b8 04 00 00 00	 mov	 eax, 4
  00656	6b c8 0d	 imul	 ecx, eax, 13
  00659	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  00660	b8 04 00 00 00	 mov	 eax, 4
  00665	6b c8 0d	 imul	 ecx, eax, 13
  00668	c6 81 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 65 ; 00000041H
  0066f	b8 04 00 00 00	 mov	 eax, 4
  00674	6b c8 0d	 imul	 ecx, eax, 13
  00677	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0067e	b8 04 00 00 00	 mov	 eax, 4
  00683	6b c8 0d	 imul	 ecx, eax, 13
  00686	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8331 : 		set_rgb_colour (MFD_COLOUR_DARK_GREEN,  100,  50,   0, 255);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 0e	 imul	 ecx, eax, 14
  00695	c6 81 02 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 100 ; 00000064H
  0069c	b8 04 00 00 00	 mov	 eax, 4
  006a1	6b c8 0e	 imul	 ecx, eax, 14
  006a4	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  006ab	b8 04 00 00 00	 mov	 eax, 4
  006b0	6b c8 0e	 imul	 ecx, eax, 14
  006b3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006ba	b8 04 00 00 00	 mov	 eax, 4
  006bf	6b c8 0e	 imul	 ecx, eax, 14
  006c2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8332 : 		set_rgb_colour (MFD_COLOUR_YELLOW,      255, 135,   0, 255);

  006c9	b8 04 00 00 00	 mov	 eax, 4
  006ce	6b c8 0f	 imul	 ecx, eax, 15
  006d1	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  006d8	b8 04 00 00 00	 mov	 eax, 4
  006dd	6b c8 0f	 imul	 ecx, eax, 15
  006e0	c6 81 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 135 ; 00000087H
  006e7	b8 04 00 00 00	 mov	 eax, 4
  006ec	6b c8 0f	 imul	 ecx, eax, 15
  006ef	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006f6	b8 04 00 00 00	 mov	 eax, 4
  006fb	6b c8 0f	 imul	 ecx, eax, 15
  006fe	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8333 : 		set_rgb_colour (MFD_COLOUR_LIGHT_BLUE,  255, 135,   0, 255);

  00705	b8 04 00 00 00	 mov	 eax, 4
  0070a	c1 e0 04	 shl	 eax, 4
  0070d	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00714	b8 04 00 00 00	 mov	 eax, 4
  00719	c1 e0 04	 shl	 eax, 4
  0071c	c6 80 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 135 ; 00000087H
  00723	b8 04 00 00 00	 mov	 eax, 4
  00728	c1 e0 04	 shl	 eax, 4
  0072b	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00732	b8 04 00 00 00	 mov	 eax, 4
  00737	c1 e0 04	 shl	 eax, 4
  0073a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8334 : 		set_rgb_colour (MFD_COLOUR_BLUE,        200,  65,   0, 255);

  00741	b8 04 00 00 00	 mov	 eax, 4
  00746	6b c8 11	 imul	 ecx, eax, 17
  00749	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  00750	b8 04 00 00 00	 mov	 eax, 4
  00755	6b c8 11	 imul	 ecx, eax, 17
  00758	c6 81 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 65 ; 00000041H
  0075f	b8 04 00 00 00	 mov	 eax, 4
  00764	6b c8 11	 imul	 ecx, eax, 17
  00767	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0076e	b8 04 00 00 00	 mov	 eax, 4
  00773	6b c8 11	 imul	 ecx, eax, 17
  00776	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8335 : 		set_rgb_colour (MFD_COLOUR_RED,         200,  65,   0, 255);

  0077d	b8 04 00 00 00	 mov	 eax, 4
  00782	6b c8 12	 imul	 ecx, eax, 18
  00785	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  0078c	b8 04 00 00 00	 mov	 eax, 4
  00791	6b c8 12	 imul	 ecx, eax, 18
  00794	c6 81 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 65 ; 00000041H
  0079b	b8 04 00 00 00	 mov	 eax, 4
  007a0	6b c8 12	 imul	 ecx, eax, 18
  007a3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  007aa	b8 04 00 00 00	 mov	 eax, 4
  007af	6b c8 12	 imul	 ecx, eax, 18
  007b2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH
$LN8@initialise:

; 8336 : 	}
; 8337 : 
; 8338 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     200,  35,   0, 255);

  007b9	b8 04 00 00 00	 mov	 eax, 4
  007be	6b c8 06	 imul	 ecx, eax, 6
  007c1	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  007c8	b8 04 00 00 00	 mov	 eax, 4
  007cd	6b c8 06	 imul	 ecx, eax, 6
  007d0	c6 81 01 00 00
	00 23		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 35 ; 00000023H
  007d7	b8 04 00 00 00	 mov	 eax, 4
  007dc	6b c8 06	 imul	 ecx, eax, 6
  007df	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  007e6	b8 04 00 00 00	 mov	 eax, 4
  007eb	6b c8 06	 imul	 ecx, eax, 6
  007ee	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8339 : 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  007f5	b8 04 00 00 00	 mov	 eax, 4
  007fa	6b c8 07	 imul	 ecx, eax, 7
  007fd	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  00804	b8 04 00 00 00	 mov	 eax, 4
  00809	6b c8 07	 imul	 ecx, eax, 7
  0080c	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  00813	b8 04 00 00 00	 mov	 eax, 4
  00818	6b c8 07	 imul	 ecx, eax, 7
  0081b	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  00822	b8 04 00 00 00	 mov	 eax, 4
  00827	6b c8 07	 imul	 ecx, eax, 7
  0082a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8340 : 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 225,   0, 255);

  00831	b8 04 00 00 00	 mov	 eax, 4
  00836	c1 e0 03	 shl	 eax, 3
  00839	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00840	b8 04 00 00 00	 mov	 eax, 4
  00845	c1 e0 03	 shl	 eax, 3
  00848	c6 80 01 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 225 ; 000000e1H
  0084f	b8 04 00 00 00	 mov	 eax, 4
  00854	c1 e0 03	 shl	 eax, 3
  00857	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0085e	b8 04 00 00 00	 mov	 eax, 4
  00863	c1 e0 03	 shl	 eax, 3
  00866	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8341 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   20,  20,  30, 255);

  0086d	b8 04 00 00 00	 mov	 eax, 4
  00872	6b c8 09	 imul	 ecx, eax, 9
  00875	c6 81 02 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 20 ; 00000014H
  0087c	b8 04 00 00 00	 mov	 eax, 4
  00881	6b c8 09	 imul	 ecx, eax, 9
  00884	c6 81 01 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 20 ; 00000014H
  0088b	b8 04 00 00 00	 mov	 eax, 4
  00890	6b c8 09	 imul	 ecx, eax, 9
  00893	c6 81 00 00 00
	00 1e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 30 ; 0000001eH
  0089a	b8 04 00 00 00	 mov	 eax, 4
  0089f	6b c8 09	 imul	 ecx, eax, 9
  008a2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8342 : 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0, 255);

  008a9	b8 04 00 00 00	 mov	 eax, 4
  008ae	6b c8 0a	 imul	 ecx, eax, 10
  008b1	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  008b8	b8 04 00 00 00	 mov	 eax, 4
  008bd	6b c8 0a	 imul	 ecx, eax, 10
  008c0	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  008c7	b8 04 00 00 00	 mov	 eax, 4
  008cc	6b c8 0a	 imul	 ecx, eax, 10
  008cf	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  008d6	b8 04 00 00 00	 mov	 eax, 4
  008db	6b c8 0a	 imul	 ecx, eax, 10
  008de	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8343 : 
; 8344 : 	set_rgb_colour (TEXT_COLOUR1,             0, 243,  97, 255);

  008e5	b8 04 00 00 00	 mov	 eax, 4
  008ea	6b c8 00	 imul	 ecx, eax, 0
  008ed	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  008f4	b8 04 00 00 00	 mov	 eax, 4
  008f9	6b c8 00	 imul	 ecx, eax, 0
  008fc	c6 81 01 00 00
	00 f3		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+1], 243 ; 000000f3H
  00903	b8 04 00 00 00	 mov	 eax, 4
  00908	6b c8 00	 imul	 ecx, eax, 0
  0090b	c6 81 00 00 00
	00 61		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx], 97 ; 00000061H
  00912	b8 04 00 00 00	 mov	 eax, 4
  00917	6b c8 00	 imul	 ecx, eax, 0
  0091a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8345 : 	set_rgb_colour (TEXT_BACKGROUND_COLOUR,   0,  60,  34, 255);

  00921	b8 04 00 00 00	 mov	 eax, 4
  00926	c1 e0 00	 shl	 eax, 0
  00929	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00930	b8 04 00 00 00	 mov	 eax, 4
  00935	c1 e0 00	 shl	 eax, 0
  00938	c6 80 01 00 00
	00 3c		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+1], 60 ; 0000003cH
  0093f	b8 04 00 00 00	 mov	 eax, 4
  00944	c1 e0 00	 shl	 eax, 0
  00947	c6 80 00 00 00
	00 22		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax], 34 ; 00000022H
  0094e	b8 04 00 00 00	 mov	 eax, 4
  00953	c1 e0 00	 shl	 eax, 0
  00956	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8346 : 
; 8347 :     set_rgb_colour (clear_mfd_colour, 255, 255, 255, 0);

  0095d	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  00964	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  0096b	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  00972	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0

; 8348 : 
; 8349 : 	////////////////////////////////////////
; 8350 : 	//
; 8351 : 	// weapon display lines
; 8352 : 	//
; 8353 : 	////////////////////////////////////////
; 8354 : 
; 8355 : 	num_weapon_line_points = get_object_3d_number_of_poly_lines (OBJECT_3D_HOKUM_COCKPIT_WEAPONS_DISPLAY);

  00979	68 e6 09 00 00	 push	 2534			; 000009e6H
  0097e	e8 00 00 00 00	 call	 ?get_object_3d_number_of_poly_lines@@YGHH@Z ; get_object_3d_number_of_poly_lines
  00983	a3 00 00 00 00	 mov	 DWORD PTR ?num_weapon_line_points@@3HA, eax

; 8356 : 
; 8357 : 	ASSERT (num_weapon_line_points > 0);

  00988	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_weapon_line_points@@3HA, 0
  0098f	7f 18		 jg	 SHORT $LN9@initialise
  00991	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_hokum_mfd@@YGXXZ@4JA
  00996	83 c0 6b	 add	 eax, 107		; 0000006bH
  00999	50		 push	 eax
  0099a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0099f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@
  009a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@initialise:

; 8358 : 
; 8359 : 	ASSERT ((num_weapon_line_points & 1) == 0);

  009a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_weapon_line_points@@3HA
  009ae	83 e0 01	 and	 eax, 1
  009b1	74 18		 je	 SHORT $LN10@initialise
  009b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_hokum_mfd@@YGXXZ@4JA
  009b8	83 c0 6d	 add	 eax, 109		; 0000006dH
  009bb	50		 push	 eax
  009bc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBGGPPEC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009c1	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@
  009c6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@initialise:

; 8360 : 
; 8361 : 	weapon_line_points = (vec3d *) safe_malloc (sizeof (vec3d) * num_weapon_line_points);

  009cb	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?num_weapon_line_points@@3HA, 12
  009d2	50		 push	 eax
  009d3	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  009d8	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A, eax

; 8362 : 
; 8363 : 	get_object_3d_poly_line_data (OBJECT_3D_HOKUM_COCKPIT_WEAPONS_DISPLAY, weapon_line_points);

  009dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  009e2	50		 push	 eax
  009e3	68 e6 09 00 00	 push	 2534			; 000009e6H
  009e8	e8 00 00 00 00	 call	 ?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z ; get_object_3d_poly_line_data

; 8364 : 
; 8365 : 	{
; 8366 : 		int
; 8367 : 			i;
; 8368 : 
; 8369 : 		for (i = 0; i < num_weapon_line_points; i++)

  009ed	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  009f4	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  009f6	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  009f9	83 c0 01	 add	 eax, 1
  009fc	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@initialise:
  009ff	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00a02	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_weapon_line_points@@3HA
  00a08	0f 8d 9d 00 00
	00		 jge	 $LN3@initialise

; 8370 : 		{
; 8371 : 			weapon_line_points[i].x *= WEAPON_LINE_POINT_SCALE;

  00a0e	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00a12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00a18	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00a1d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00a25	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00a29	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00a2e	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 8372 : 			weapon_line_points[i].y *= WEAPON_LINE_POINT_SCALE;

  00a33	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00a37	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00a3d	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00a43	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00a4b	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00a4f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00a54	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 8373 : 
; 8374 : 			weapon_line_points[i].x += WEAPON_LINE_POINT_X_TRANSLATE;

  00a5a	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00a5e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00a64	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00a69	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  00a71	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00a75	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00a7a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 8375 : 			weapon_line_points[i].y += WEAPON_LINE_POINT_Y_TRANSLATE;

  00a7f	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00a83	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00a89	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00a8f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f133333
  00a97	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00a9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00aa0	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 8376 : 		}

  00aa6	e9 4b ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 8377 : 	}
; 8378 : 
; 8379 : 	initalize_horizon_mask(LARGE_MFD_VIEWPORT_SIZE * 0.6, &main_horizon_mask);

  00aab	68 00 00 00 00	 push	 OFFSET ?main_horizon_mask@@3PADA
  00ab0	68 99 00 00 00	 push	 153			; 00000099H
  00ab5	e8 00 00 00 00	 call	 ?initalize_horizon_mask@@YGXHPAPAD@Z ; initalize_horizon_mask

; 8380 : 
; 8381 : //VJ 030423 TSd render mod
; 8382 : 
; 8383 :    Initialise_TSD_render_terrain();

  00aba	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 8384 : 
; 8385 : }

  00abf	5f		 pop	 edi
  00ac0	5e		 pop	 esi
  00ac1	5b		 pop	 ebx
  00ac2	8b e5		 mov	 esp, ebp
  00ac4	5d		 pop	 ebp
  00ac5	c3		 ret	 0
?initialise_hokum_mfd@@YGXXZ ENDP			; initialise_hokum_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
