; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\screens.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?video_screen@@3PAUSCREEN@@A			; video_screen
PUBLIC	?display_screen@@3PAUSCREEN@@A			; display_screen
PUBLIC	?active_screen@@3PAUSCREEN@@A			; active_screen
PUBLIC	?active_screen_red_mask@@3HA			; active_screen_red_mask
PUBLIC	?active_screen_red_shift@@3HA			; active_screen_red_shift
PUBLIC	?active_screen_green_mask@@3HA			; active_screen_green_mask
PUBLIC	?active_screen_green_shift@@3HA			; active_screen_green_shift
PUBLIC	?active_screen_blue_mask@@3HA			; active_screen_blue_mask
PUBLIC	?active_screen_blue_shift@@3HA			; active_screen_blue_shift
PUBLIC	?active_screen_alpha_mask@@3HA			; active_screen_alpha_mask
PUBLIC	?active_screen_alpha_shift@@3HA			; active_screen_alpha_shift
PUBLIC	?user_screen_red_mask@@3HA			; user_screen_red_mask
PUBLIC	?user_screen_red_shift@@3HA			; user_screen_red_shift
PUBLIC	?user_screen_green_mask@@3HA			; user_screen_green_mask
PUBLIC	?user_screen_green_shift@@3HA			; user_screen_green_shift
PUBLIC	?user_screen_blue_mask@@3HA			; user_screen_blue_mask
PUBLIC	?user_screen_blue_shift@@3HA			; user_screen_blue_shift
PUBLIC	?user_screen_alpha_mask@@3HA			; user_screen_alpha_mask
PUBLIC	?user_screen_alpha_shift@@3HA			; user_screen_alpha_shift
PUBLIC	?screen_array@@3PAUSCREEN@@A			; screen_array
PUBLIC	?video_screen_edge_x@@3HA			; video_screen_edge_x
PUBLIC	?video_screen_edge_y@@3HA			; video_screen_edge_y
PUBLIC	?video_screen_edge_width@@3HA			; video_screen_edge_width
PUBLIC	?video_screen_edge_height@@3HA			; video_screen_edge_height
PUBLIC	?video_edge_colour@@3GA				; video_edge_colour
_BSS	SEGMENT
?video_screen@@3PAUSCREEN@@A DD 01H DUP (?)		; video_screen
?display_screen@@3PAUSCREEN@@A DD 01H DUP (?)		; display_screen
?active_screen@@3PAUSCREEN@@A DD 01H DUP (?)		; active_screen
?active_screen_red_mask@@3HA DD 01H DUP (?)		; active_screen_red_mask
?active_screen_red_shift@@3HA DD 01H DUP (?)		; active_screen_red_shift
?active_screen_green_mask@@3HA DD 01H DUP (?)		; active_screen_green_mask
?active_screen_green_shift@@3HA DD 01H DUP (?)		; active_screen_green_shift
?active_screen_blue_mask@@3HA DD 01H DUP (?)		; active_screen_blue_mask
?active_screen_blue_shift@@3HA DD 01H DUP (?)		; active_screen_blue_shift
?active_screen_alpha_mask@@3HA DD 01H DUP (?)		; active_screen_alpha_mask
?active_screen_alpha_shift@@3HA DD 01H DUP (?)		; active_screen_alpha_shift
?user_screen_red_mask@@3HA DD 01H DUP (?)		; user_screen_red_mask
?user_screen_red_shift@@3HA DD 01H DUP (?)		; user_screen_red_shift
?user_screen_green_mask@@3HA DD 01H DUP (?)		; user_screen_green_mask
?user_screen_green_shift@@3HA DD 01H DUP (?)		; user_screen_green_shift
?user_screen_blue_mask@@3HA DD 01H DUP (?)		; user_screen_blue_mask
?user_screen_blue_shift@@3HA DD 01H DUP (?)		; user_screen_blue_shift
?user_screen_alpha_mask@@3HA DD 01H DUP (?)		; user_screen_alpha_mask
?user_screen_alpha_shift@@3HA DD 01H DUP (?)		; user_screen_alpha_shift
?screen_array@@3PAUSCREEN@@A DB 060000H DUP (?)		; screen_array
?video_screen_edge_x@@3HA DD 01H DUP (?)		; video_screen_edge_x
?video_screen_edge_y@@3HA DD 01H DUP (?)		; video_screen_edge_y
?video_screen_edge_width@@3HA DD 01H DUP (?)		; video_screen_edge_width
?video_screen_edge_height@@3HA DD 01H DUP (?)		; video_screen_edge_height
?video_edge_colour@@3GA DW 01H DUP (?)			; video_edge_colour
_BSS	ENDS
PUBLIC	?initialise_system_graphics_screens@@YGXXZ	; initialise_system_graphics_screens
PUBLIC	?create_screen@@YGPAUSCREEN@@HHH@Z		; create_screen
PUBLIC	?get_free_screen@@YGPAUSCREEN@@XZ		; get_free_screen
PUBLIC	?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
PUBLIC	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
PUBLIC	?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
PUBLIC	?create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z ; create_user_3dvisual_texture_screen
PUBLIC	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z	; set_system_texture_screen
PUBLIC	?destroy_screen@@YGHPAUSCREEN@@@Z		; destroy_screen
PUBLIC	?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z ; create_video_screen
PUBLIC	?get_screen_pixel_format@@YGXPAH000@Z		; get_screen_pixel_format
PUBLIC	?get_screen_pixel_width@@YGHPAUSCREEN@@@Z	; get_screen_pixel_width
PUBLIC	?get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z	; get_screen_rgba_masks
PUBLIC	?lock_screen@@YGHPAUSCREEN@@@Z			; lock_screen
PUBLIC	?unlock_screen@@YGHPAUSCREEN@@@Z		; unlock_screen
PUBLIC	?set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z	; set_user_screen_pixel_format
PUBLIC	?set_active_screen@@YGHPAUSCREEN@@@Z		; set_active_screen
PUBLIC	?get_active_screen@@YGPAUSCREEN@@XZ		; get_active_screen
PUBLIC	?get_screen_data@@YGPAEPAUSCREEN@@@Z		; get_screen_data
PUBLIC	?get_screen_pitch@@YGHPAUSCREEN@@@Z		; get_screen_pitch
PUBLIC	?get_screen_pixel_length@@YGHPAUSCREEN@@@Z	; get_screen_pixel_length
PUBLIC	?get_screen_width@@YGHPAUSCREEN@@@Z		; get_screen_width
PUBLIC	?get_screen_height@@YGHPAUSCREEN@@@Z		; get_screen_height
PUBLIC	?get_screen_locked@@YGHPAUSCREEN@@@Z		; get_screen_locked
PUBLIC	?clear_screen@@YGXXZ				; clear_screen
PUBLIC	?set_3d_render_target@@YGHPAUSCREEN@@@Z		; set_3d_render_target
PUBLIC	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture
PUBLIC	?set_block@@YGXHHHHUREAL_COLOUR@@@Z		; set_block
PUBLIC	?blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z	; blit_screens
PUBLIC	?set_video_screen_edge@@YGXHHHH@Z		; set_video_screen_edge
PUBLIC	?check_video_screen_edge@@YGXXZ			; check_video_screen_edge
PUBLIC	?restore_graphics_screens@@YGXXZ		; restore_graphics_screens
PUBLIC	?set_screen_pixel_format@@YGXXZ			; set_screen_pixel_format
PUBLIC	?__LINE__Var@?0??create_screen@@YGPAUSCREEN@@HHH@Z@4JA ; `create_screen'::`1'::__LINE__Var
PUBLIC	??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_05IGKADHGO@width@				; `string'
PUBLIC	??_C@_06LNLHEAAG@height@			; `string'
PUBLIC	??_C@_0N@OOBGIFBC@video_screen@			; `string'
PUBLIC	??_C@_0BN@BDMMBHCE@Run?5out?5of?5available?5screens@ ; `string'
PUBLIC	??_C@_0BP@MDKCMJBC@Unable?5to?5create?5a?5free?5screen@ ; `string'
PUBLIC	?__LINE__Var@?0??create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA ; `create_user_texture_screen'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA ; `create_system_texture_screen'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z@4JA ; `create_user_3dvisual_texture_screen'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_system_texture_screen@@YGXPAUSCREEN@@H@Z@4JA ; `set_system_texture_screen'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@DDJNNIE@texture_index?5?$DO?$DN?50@	; `string'
PUBLIC	?__LINE__Var@?0??create_screen_for_system_texture@@YGPAUSCREEN@@H@Z@4JA ; `create_screen_for_system_texture'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_screen_pixel_format@@YGXXZ@4JA ; `set_screen_pixel_format'::`1'::__LINE__Var
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@	; `string'
PUBLIC	?__LINE__Var@?0??set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z@4JA ; `set_user_screen_pixel_format'::`1'::__LINE__Var
PUBLIC	??_C@_03PAKJEBJM@scr@				; `string'
PUBLIC	??_C@_0N@EPPBFCPI@scr?9?$DOsurface@		; `string'
PUBLIC	?__LINE__Var@?0??get_screen_pixel_format@@YGXPAH000@Z@4JA ; `get_screen_pixel_format'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_screen_pixel_width@@YGHPAUSCREEN@@@Z@4JA ; `get_screen_pixel_width'::`1'::__LINE__Var
PUBLIC	??_C@_0M@EIMDIJJI@this_screen@			; `string'
PUBLIC	??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@	; `string'
PUBLIC	?__LINE__Var@?0??get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z@4JA ; `get_screen_rgba_masks'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??lock_screen@@YGHPAUSCREEN@@@Z@4JA ; `lock_screen'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@HDKCOCOF@?$CBthis_screen?9?$DOlocked@	; `string'
PUBLIC	?__LINE__Var@?0??unlock_screen@@YGHPAUSCREEN@@@Z@4JA ; `unlock_screen'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@DFGBBKKF@this_screen?9?$DOlocked@	; `string'
PUBLIC	?__LINE__Var@?0??set_active_screen@@YGHPAUSCREEN@@@Z@4JA ; `set_active_screen'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_active_screen@@YGPAUSCREEN@@XZ@4JA ; `get_active_screen'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_screen_pitch@@YGHPAUSCREEN@@@Z@4JA ; `get_screen_pitch'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_screen_data@@YGPAEPAUSCREEN@@@Z@4JA ; `get_screen_data'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_screen_pixel_length@@YGHPAUSCREEN@@@Z@4JA ; `get_screen_pixel_length'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_screen_width@@YGHPAUSCREEN@@@Z@4JA ; `get_screen_width'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_screen_height@@YGHPAUSCREEN@@@Z@4JA ; `get_screen_height'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_screen_locked@@YGHPAUSCREEN@@@Z@4JA ; `get_screen_locked'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z@4JA ; `finalise_3d_render_target_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@FOOFMOHB@this_screen?9?$DOrender_texture_sur@ ; `string'
PUBLIC	?__LINE__Var@?0??set_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA ; `set_block'::`1'::__LINE__Var
PUBLIC	??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@		; `string'
PUBLIC	??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@		; `string'
PUBLIC	?__LINE__Var@?0??blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z@4JA ; `blit_screens'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0M@BLMAJMLK@destination@			; `string'
PUBLIC	?__LINE__Var@?0??set_video_screen_edge@@YGXHHHH@Z@4JA ; `set_video_screen_edge'::`1'::__LINE__Var
PUBLIC	??_C@_0CB@HIGHOEDL@video_screen?9?$DOpixel_length?5?$DM?$DN?51@ ; `string'
PUBLIC	?__LINE__Var@?0??check_video_screen_edge@@YGXXZ@4JA ; `check_video_screen_edge'::`1'::__LINE__Var
PUBLIC	??_C@_0BJ@PFMGDBMI@col?5?$DN?$DN?5video_edge_colour@ ; `string'
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?register_exit_function@@YGXP6GXXZ@Z:PROC	; register_exit_function
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?ddraw_create_surface@@YGPAUIDirectDrawSurface7@@HHH@Z:PROC ; ddraw_create_surface
EXTRN	?get_packed_pixel@@YGGHH@Z:PROC			; get_packed_pixel
EXTRN	?set_pixel_format@@YGXXZ:PROC			; set_pixel_format
EXTRN	?create_system_indexed_texture_map@@YGHPAUSCREEN@@HHHW4SCREEN_FORMAT_TYPES@@@Z:PROC ; create_system_indexed_texture_map
EXTRN	?create_texture_screen_data@@YGXPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HH@Z:PROC ; create_texture_screen_data
EXTRN	?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z:PROC ; f3d_surface_description
EXTRN	?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ:PROC ; f3d_surface_front
EXTRN	?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z:PROC ; f3d_surface_blt
EXTRN	?f3d_clear_screen@@YGXXZ:PROC			; f3d_clear_screen
EXTRN	?f3d_set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC ; f3d_set_3d_render_target
EXTRN	?f3d_texture_lock@@YGHPAUSCREEN@@H@Z:PROC	; f3d_texture_lock
EXTRN	?f3d_texture_unlock@@YGHPAUSCREEN@@@Z:PROC	; f3d_texture_unlock
EXTRN	?f3d_texture_release@@YGHPAUSCREEN@@@Z:PROC	; f3d_texture_release
EXTRN	?f3d_texture_restore@@YGXPAUSCREEN@@@Z:PROC	; f3d_texture_restore
EXTRN	?f3d_context_set@@YGXXZ:PROC			; f3d_context_set
EXTRN	?f3d_context_leave@@YGXXZ:PROC			; f3d_context_leave
EXTRN	?system_textures@@3PAPAUSCREEN@@A:BYTE		; system_textures
_BSS	SEGMENT
	ALIGN	4

?video_screen_structure@@3USCREEN@@A DB 030H DUP (?)	; video_screen_structure
?display_screen_structure@@3USCREEN@@A DB 030H DUP (?)	; display_screen_structure
_BSS	ENDS
;	COMDAT ??_C@_0BJ@PFMGDBMI@col?5?$DN?$DN?5video_edge_colour@
CONST	SEGMENT
??_C@_0BJ@PFMGDBMI@col?5?$DN?$DN?5video_edge_colour@ DB 'col == video_edg'
	DB	'e_colour', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??check_video_screen_edge@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??check_video_screen_edge@@YGXXZ@4JA DD 0453H ; `check_video_screen_edge'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@HIGHOEDL@video_screen?9?$DOpixel_length?5?$DM?$DN?51@
CONST	SEGMENT
??_C@_0CB@HIGHOEDL@video_screen?9?$DOpixel_length?5?$DM?$DN?51@ DB 'video'
	DB	'_screen->pixel_length <= 16', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_video_screen_edge@@YGXHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_video_screen_edge@@YGXHHHH@Z@4JA DD 0426H ; `set_video_screen_edge'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@BLMAJMLK@destination@
CONST	SEGMENT
??_C@_0M@BLMAJMLK@destination@ DB 'destination', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z@4JA DD 03d8H ; `blit_screens'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@
CONST	SEGMENT
??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@ DB 'y2 >= y1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@
CONST	SEGMENT
??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@ DB 'x2 >= x1', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA DD 0376H ; `set_block'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@FOOFMOHB@this_screen?9?$DOrender_texture_sur@
CONST	SEGMENT
??_C@_0CE@FOOFMOHB@this_screen?9?$DOrender_texture_sur@ DB 'this_screen->'
	DB	'render_texture_surface', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z@4JA DD 0369H ; `finalise_3d_render_target_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_locked@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_locked@@YGHPAUSCREEN@@@Z@4JA DD 034bH ; `get_screen_locked'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_height@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_height@@YGHPAUSCREEN@@@Z@4JA DD 033fH ; `get_screen_height'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_width@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_width@@YGHPAUSCREEN@@@Z@4JA DD 0333H ; `get_screen_width'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_pixel_length@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_pixel_length@@YGHPAUSCREEN@@@Z@4JA DD 0327H ; `get_screen_pixel_length'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_data@@YGPAEPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_data@@YGPAEPAUSCREEN@@@Z@4JA DD 031aH ; `get_screen_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_pitch@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_pitch@@YGHPAUSCREEN@@@Z@4JA DD 030dH ; `get_screen_pitch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_active_screen@@YGPAUSCREEN@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_active_screen@@YGPAUSCREEN@@XZ@4JA DD 0301H ; `get_active_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??set_active_screen@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_active_screen@@YGHPAUSCREEN@@@Z@4JA DD 02edH ; `set_active_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BE@DFGBBKKF@this_screen?9?$DOlocked@
CONST	SEGMENT
??_C@_0BE@DFGBBKKF@this_screen?9?$DOlocked@ DB 'this_screen->locked', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unlock_screen@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unlock_screen@@YGHPAUSCREEN@@@Z@4JA DD 02aaH ; `unlock_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@HDKCOCOF@?$CBthis_screen?9?$DOlocked@
CONST	SEGMENT
??_C@_0BF@HDKCOCOF@?$CBthis_screen?9?$DOlocked@ DB '!this_screen->locked', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??lock_screen@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??lock_screen@@YGHPAUSCREEN@@@Z@4JA DD 0295H ; `lock_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z@4JA DD 0270H ; `get_screen_rgba_masks'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@
CONST	SEGMENT
??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@ DB 'this_screen->surface', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EIMDIJJI@this_screen@
CONST	SEGMENT
??_C@_0M@EIMDIJJI@this_screen@ DB 'this_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_pixel_width@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_pixel_width@@YGHPAUSCREEN@@@Z@4JA DD 0223H ; `get_screen_pixel_width'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_screen_pixel_format@@YGXPAH000@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_screen_pixel_format@@YGXPAH000@Z@4JA DD 020cH ; `get_screen_pixel_format'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@EPPBFCPI@scr?9?$DOsurface@
CONST	SEGMENT
??_C@_0N@EPPBFCPI@scr?9?$DOsurface@ DB 'scr->surface', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PAKJEBJM@scr@
CONST	SEGMENT
??_C@_03PAKJEBJM@scr@ DB 'scr', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z@4JA DD 01daH ; `set_user_screen_pixel_format'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@
CONST	SEGMENT
??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@ DB 'active_screen->surface'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_screen_pixel_format@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_screen_pixel_format@@YGXXZ@4JA DD 01c0H ; `set_screen_pixel_format'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??create_screen_for_system_texture@@YGPAUSCREEN@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_screen_for_system_texture@@YGPAUSCREEN@@H@Z@4JA DD 0172H ; `create_screen_for_system_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@DDJNNIE@texture_index?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BD@DDJNNIE@texture_index?5?$DO?$DN?50@ DB 'texture_index >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_system_texture_screen@@YGXPAUSCREEN@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_system_texture_screen@@YGXPAUSCREEN@@H@Z@4JA DD 0166H ; `set_system_texture_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z@4JA DD 0139H ; `create_user_3dvisual_texture_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA DD 010eH ; `create_system_texture_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA DD 0e2H ; `create_user_texture_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@MDKCMJBC@Unable?5to?5create?5a?5free?5screen@
CONST	SEGMENT
??_C@_0BP@MDKCMJBC@Unable?5to?5create?5a?5free?5screen@ DB 'Unable to cre'
	DB	'ate a free screen', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BDMMBHCE@Run?5out?5of?5available?5screens@
CONST	SEGMENT
??_C@_0BN@BDMMBHCE@Run?5out?5of?5available?5screens@ DB 'Run out of avail'
	DB	'able screens', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OOBGIFBC@video_screen@
CONST	SEGMENT
??_C@_0N@OOBGIFBC@video_screen@ DB 'video_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNLHEAAG@height@
CONST	SEGMENT
??_C@_06LNLHEAAG@height@ DB 'height', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGKADHGO@width@
CONST	SEGMENT
??_C@_05IGKADHGO@width@ DB 'width', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\screens.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??create_screen@@YGPAUSCREEN@@HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_screen@@YGPAUSCREEN@@HHH@Z@4JA DD 096H ; `create_screen'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_screen_pixel_format@@YGXXZ
_TEXT	SEGMENT
_ddsd$ = -124						; size = 124
?set_screen_pixel_format@@YGXXZ PROC			; set_screen_pixel_format, COMDAT

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 449  : 
; 450  : 	DDSURFACEDESC2
; 451  : 		ddsd;
; 452  : 
; 453  : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN2@set_screen
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_screen_pixel_format@@YGXXZ@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_screen:

; 454  : 	ASSERT ( active_screen->surface );

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00036	75 18		 jne	 SHORT $LN3@set_screen
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_screen_pixel_format@@YGXXZ@4JA
  0003d	83 c0 06	 add	 eax, 6
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@
  0004b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_screen:

; 455  : 
; 456  : 	ddsd.dwSize = sizeof ( ddsd );

  00050	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 457  : 
; 458  : 	f3d_surface_description ( active_screen->surface, &ddsd );

  00057	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0005a	50		 push	 eax
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00061	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 459  : 
; 460  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwRBitMask, &active_screen_red_mask, &active_screen_red_shift );

  0006a	68 00 00 00 00	 push	 OFFSET ?active_screen_red_shift@@3HA ; active_screen_red_shift
  0006f	68 00 00 00 00	 push	 OFFSET ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00074	8b 45 dc	 mov	 eax, DWORD PTR _ddsd$[ebp+88]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 461  : 
; 462  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwGBitMask, &active_screen_green_mask, &active_screen_green_shift );

  0007d	68 00 00 00 00	 push	 OFFSET ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00082	68 00 00 00 00	 push	 OFFSET ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00087	8b 45 e0	 mov	 eax, DWORD PTR _ddsd$[ebp+92]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 463  : 
; 464  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwBBitMask, &active_screen_blue_mask, &active_screen_blue_shift );

  00090	68 00 00 00 00	 push	 OFFSET ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00095	68 00 00 00 00	 push	 OFFSET ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0009a	8b 45 e4	 mov	 eax, DWORD PTR _ddsd$[ebp+96]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 465  : 
; 466  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwRGBAlphaBitMask, &active_screen_alpha_mask, &active_screen_alpha_shift );

  000a3	68 00 00 00 00	 push	 OFFSET ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  000a8	68 00 00 00 00	 push	 OFFSET ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  000ad	8b 45 e8	 mov	 eax, DWORD PTR _ddsd$[ebp+100]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 467  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
?set_screen_pixel_format@@YGXXZ ENDP			; set_screen_pixel_format
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_surface_shift_and_mask@@YGXHPAH0@Z
_TEXT	SEGMENT
_shiftcount$ = -4					; size = 4
_source_mask$ = 8					; size = 4
_mask$ = 12						; size = 4
_shift$ = 16						; size = 4
?set_surface_shift_and_mask@@YGXHPAH0@Z PROC		; set_surface_shift_and_mask, COMDAT

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 498  : 
; 499  : 	int
; 500  : 		shiftcount;
; 501  : 
; 502  : 	shiftcount = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _shiftcount$[ebp], 0

; 503  : 
; 504  : 	if ( source_mask )

  00010	83 7d 08 00	 cmp	 DWORD PTR _source_mask$[ebp], 0
  00014	74 26		 je	 SHORT $LN5@set_surfac

; 505  : 	{
; 506  : 
; 507  : 		for ( shiftcount = 0; !( source_mask & 0x80000000 ); shiftcount++ )

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _shiftcount$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@set_surfac
$LN2@set_surfac:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _shiftcount$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _shiftcount$[ebp], eax
$LN4@set_surfac:
  00028	8b 45 08	 mov	 eax, DWORD PTR _source_mask$[ebp]
  0002b	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00030	75 0a		 jne	 SHORT $LN5@set_surfac

; 508  : 		{
; 509  : 
; 510  : 			source_mask <<= 1;

  00032	8b 45 08	 mov	 eax, DWORD PTR _source_mask$[ebp]
  00035	d1 e0		 shl	 eax, 1
  00037	89 45 08	 mov	 DWORD PTR _source_mask$[ebp], eax

; 511  : 		}

  0003a	eb e3		 jmp	 SHORT $LN2@set_surfac
$LN5@set_surfac:

; 512  : 	}
; 513  : 
; 514  : 	*shift = shiftcount;

  0003c	8b 45 10	 mov	 eax, DWORD PTR _shift$[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _shiftcount$[ebp]
  00042	89 08		 mov	 DWORD PTR [eax], ecx

; 515  : 
; 516  : 	*mask = source_mask;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _source_mask$[ebp]
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 517  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
?set_surface_shift_and_mask@@YGXHPAH0@Z ENDP		; set_surface_shift_and_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?destroy_all_screens@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?destroy_all_screens@@YGXXZ PROC			; destroy_all_screens, COMDAT

; 1010 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1011 : 
; 1012 : 	int
; 1013 : 		count;
; 1014 : 
; 1015 : 	f3d_context_set();

  00009	e8 00 00 00 00	 call	 ?f3d_context_set@@YGXXZ	; f3d_context_set

; 1016 : 
; 1017 : 	//
; 1018 : 	// Destroy all the direct draw surfaces - but in reverse order to their creation, as its a lot faster
; 1019 : 	//
; 1020 : 
; 1021 : 	for ( count = ( MAX_INTERNAL_SCREENS - 1 ); count >= 0; count-- )

  0000e	c7 45 fc ff 1f
	00 00		 mov	 DWORD PTR _count$[ebp], 8191 ; 00001fffH
  00015	eb 09		 jmp	 SHORT $LN4@destroy_al
$LN2@destroy_al:
  00017	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001a	83 e8 01	 sub	 eax, 1
  0001d	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@destroy_al:
  00020	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00024	7c 6a		 jl	 SHORT $LN3@destroy_al

; 1022 : 	{
; 1023 : 
; 1024 : 		if ( screen_array[count].used )

  00026	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  0002a	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  00031	66 d1 e9	 shr	 cx, 1
  00034	66 83 e1 01	 and	 cx, 1
  00038	0f b7 d1	 movzx	 edx, cx
  0003b	85 d2		 test	 edx, edx
  0003d	74 4f		 je	 SHORT $LN5@destroy_al

; 1025 : 		{
; 1026 : 
; 1027 : 			if ( screen_array[count].locked )

  0003f	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00043	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  0004a	66 83 e1 01	 and	 cx, 1
  0004e	0f b7 d1	 movzx	 edx, cx
  00051	85 d2		 test	 edx, edx
  00053	74 0f		 je	 SHORT $LN6@destroy_al

; 1028 : 			{
; 1029 : 
; 1030 : 				unlock_screen ( &screen_array[count] );

  00055	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00059	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN6@destroy_al:

; 1031 : 			}
; 1032 : 
; 1033 : 
; 1034 : 			screen_array[count].do_not_destroy = FALSE;

  00064	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00068	b9 bf ff 00 00	 mov	 ecx, 65471		; 0000ffbfH
  0006d	66 23 88 0a 00
	00 00		 and	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  00074	6b 55 fc 30	 imul	 edx, DWORD PTR _count$[ebp], 48
  00078	66 89 8a 0a 00
	00 00		 mov	 WORD PTR ?screen_array@@3PAUSCREEN@@A[edx+10], cx

; 1035 : 
; 1036 : 			destroy_screen ( &screen_array[count] );

  0007f	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00083	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen
$LN5@destroy_al:

; 1037 : 		}
; 1038 : 	}

  0008e	eb 87		 jmp	 SHORT $LN2@destroy_al
$LN3@destroy_al:

; 1039 : 
; 1040 : 	f3d_context_leave();

  00090	e8 00 00 00 00	 call	 ?f3d_context_leave@@YGXXZ ; f3d_context_leave

; 1041 : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?destroy_all_screens@@YGXXZ ENDP			; destroy_all_screens
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?restore_graphics_screens@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?restore_graphics_screens@@YGXXZ PROC			; restore_graphics_screens, COMDAT

; 1139 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1140 : 	int
; 1141 : 		count;
; 1142 : 
; 1143 : 	//if ( !d3d_use_rgb_device )
; 1144 : 	{
; 1145 : 		for ( count = 0; count < MAX_INTERNAL_SCREENS; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@restore_gr
$LN2@restore_gr:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@restore_gr:
  0001b	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  00022	7d 44		 jge	 SHORT $LN1@restore_gr

; 1146 : 		{
; 1147 : 			if ( ( screen_array[count].used ) && ( !screen_array[count].clone_screen ) )

  00024	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00028	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  0002f	66 d1 e9	 shr	 cx, 1
  00032	66 83 e1 01	 and	 cx, 1
  00036	0f b7 d1	 movzx	 edx, cx
  00039	85 d2		 test	 edx, edx
  0003b	74 29		 je	 SHORT $LN5@restore_gr
  0003d	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00041	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  00048	66 c1 e9 03	 shr	 cx, 3
  0004c	66 83 e1 01	 and	 cx, 1
  00050	0f b7 d1	 movzx	 edx, cx
  00053	85 d2		 test	 edx, edx
  00055	75 0f		 jne	 SHORT $LN5@restore_gr

; 1148 : 			{
; 1149 : 				f3d_texture_restore ( &screen_array[count] );

  00057	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  0005b	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?f3d_texture_restore@@YGXPAUSCREEN@@@Z ; f3d_texture_restore
$LN5@restore_gr:

; 1150 : 			}
; 1151 : 		}

  00066	eb aa		 jmp	 SHORT $LN2@restore_gr
$LN1@restore_gr:

; 1152 : 	}
; 1153 : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?restore_graphics_screens@@YGXXZ ENDP			; restore_graphics_screens
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?check_video_screen_edge@@YGXXZ
_TEXT	SEGMENT
_col$ = -8						; size = 2
_count$ = -4						; size = 4
?check_video_screen_edge@@YGXXZ PROC			; check_video_screen_edge, COMDAT

; 1107 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1108 : 
; 1109 : 	int
; 1110 : 		count;
; 1111 : 
; 1112 : 	rgb_packed
; 1113 : 		col;
; 1114 : 
; 1115 : 	ASSERT ( video_screen->pixel_length <= 16 );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0000e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00015	7e 18		 jle	 SHORT $LN8@check_vide
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_video_screen_edge@@YGXXZ@4JA
  0001c	83 c0 08	 add	 eax, 8
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HIGHOEDL@video_screen?9?$DOpixel_length?5?$DM?$DN?51@
  0002a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@check_vide:

; 1116 : 
; 1117 : 	for ( count = 0; count < video_screen_edge_width; count++ )

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00036	eb 09		 jmp	 SHORT $LN4@check_vide
$LN2@check_vide:
  00038	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@check_vide:
  00041	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00044	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?video_screen_edge_width@@3HA ; video_screen_edge_width
  0004a	7d 3c		 jge	 SHORT $LN3@check_vide

; 1118 : 	{
; 1119 : 
; 1120 : 		col = get_packed_pixel ( count, video_screen_edge_y );

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen_edge_y@@3HA ; video_screen_edge_y
  00051	50		 push	 eax
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ?get_packed_pixel@@YGGHH@Z ; get_packed_pixel
  0005b	66 89 45 f8	 mov	 WORD PTR _col$[ebp], ax

; 1121 : 
; 1122 : 		ASSERT ( col == video_edge_colour );

  0005f	0f b7 45 f8	 movzx	 eax, WORD PTR _col$[ebp]
  00063	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?video_edge_colour@@3GA ; video_edge_colour
  0006a	3b c1		 cmp	 eax, ecx
  0006c	74 18		 je	 SHORT $LN9@check_vide
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_video_screen_edge@@YGXXZ@4JA
  00073	83 c0 0f	 add	 eax, 15			; 0000000fH
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PFMGDBMI@col?5?$DN?$DN?5video_edge_colour@
  00081	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@check_vide:

; 1123 : 	}

  00086	eb b0		 jmp	 SHORT $LN2@check_vide
$LN3@check_vide:

; 1124 : 
; 1125 : 	for ( count = 0; count < video_screen_edge_height; count++ )

  00088	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0008f	eb 09		 jmp	 SHORT $LN7@check_vide
$LN5@check_vide:
  00091	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00094	83 c0 01	 add	 eax, 1
  00097	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@check_vide:
  0009a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0009d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?video_screen_edge_height@@3HA ; video_screen_edge_height
  000a3	7d 3d		 jge	 SHORT $LN1@check_vide

; 1126 : 	{
; 1127 : 
; 1128 : 		col = get_packed_pixel ( video_screen_edge_x, count );

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000a8	50		 push	 eax
  000a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?video_screen_edge_x@@3HA ; video_screen_edge_x
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ?get_packed_pixel@@YGGHH@Z ; get_packed_pixel
  000b5	66 89 45 f8	 mov	 WORD PTR _col$[ebp], ax

; 1129 : 
; 1130 : 		ASSERT ( col == video_edge_colour );

  000b9	0f b7 45 f8	 movzx	 eax, WORD PTR _col$[ebp]
  000bd	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?video_edge_colour@@3GA ; video_edge_colour
  000c4	3b c1		 cmp	 eax, ecx
  000c6	74 18		 je	 SHORT $LN10@check_vide
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_video_screen_edge@@YGXXZ@4JA
  000cd	83 c0 17	 add	 eax, 23			; 00000017H
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PFMGDBMI@col?5?$DN?$DN?5video_edge_colour@
  000db	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@check_vide:

; 1131 : 	}

  000e0	eb af		 jmp	 SHORT $LN5@check_vide
$LN1@check_vide:

; 1132 : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
?check_video_screen_edge@@YGXXZ ENDP			; check_video_screen_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_video_screen_edge@@YGXHHHH@Z
_TEXT	SEGMENT
_col$ = -8						; size = 4
_count$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
?set_video_screen_edge@@YGXHHHH@Z PROC			; set_video_screen_edge, COMDAT

; 1062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1063 : 
; 1064 : 	int
; 1065 : 		count;
; 1066 : 
; 1067 : 	rgb_colour
; 1068 : 		col;
; 1069 : 
; 1070 : 	ASSERT ( video_screen->pixel_length <= 16 );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0000e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00015	7e 18		 jle	 SHORT $LN8@set_video_
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_video_screen_edge@@YGXHHHH@Z@4JA
  0001c	83 c0 08	 add	 eax, 8
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HIGHOEDL@video_screen?9?$DOpixel_length?5?$DM?$DN?51@
  0002a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@set_video_:

; 1071 : 
; 1072 : 	video_screen_edge_x = x;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00032	a3 00 00 00 00	 mov	 DWORD PTR ?video_screen_edge_x@@3HA, eax ; video_screen_edge_x

; 1073 : 
; 1074 : 	video_screen_edge_y = y;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?video_screen_edge_y@@3HA, eax ; video_screen_edge_y

; 1075 : 
; 1076 : 	video_screen_edge_width = width;

  0003f	8b 45 10	 mov	 eax, DWORD PTR _width$[ebp]
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?video_screen_edge_width@@3HA, eax ; video_screen_edge_width

; 1077 : 
; 1078 : 	video_screen_edge_height = height;

  00047	8b 45 14	 mov	 eax, DWORD PTR _height$[ebp]
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?video_screen_edge_height@@3HA, eax ; video_screen_edge_height

; 1079 : 
; 1080 : 	col.r = 255;

  0004f	c6 45 fa ff	 mov	 BYTE PTR _col$[ebp+2], 255 ; 000000ffH

; 1081 : 	col.g = 255;

  00053	c6 45 f9 ff	 mov	 BYTE PTR _col$[ebp+1], 255 ; 000000ffH

; 1082 : 	col.b = 255;

  00057	c6 45 f8 ff	 mov	 BYTE PTR _col$[ebp], 255 ; 000000ffH

; 1083 : 	col.a = 255;

  0005b	c6 45 fb ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 1084 : 
; 1085 : 	set_active_screen ( video_screen );

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 1086 : 
; 1087 : 	video_edge_colour = get_packed_colour ( col );

  0006a	0f b6 45 fa	 movzx	 eax, BYTE PTR _col$[ebp+2]
  0006e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00071	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  0007d	d3 e8		 shr	 eax, cl
  0007f	0f b6 55 f9	 movzx	 edx, BYTE PTR _col$[ebp+1]
  00083	c1 e2 18	 shl	 edx, 24			; 00000018H
  00086	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00092	d3 ea		 shr	 edx, cl
  00094	0b c2		 or	 eax, edx
  00096	0f b6 55 f8	 movzx	 edx, BYTE PTR _col$[ebp]
  0009a	c1 e2 18	 shl	 edx, 24			; 00000018H
  0009d	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  000a9	d3 ea		 shr	 edx, cl
  000ab	0b c2		 or	 eax, edx
  000ad	0f b6 55 fb	 movzx	 edx, BYTE PTR _col$[ebp+3]
  000b1	c1 e2 18	 shl	 edx, 24			; 00000018H
  000b4	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  000c0	d3 ea		 shr	 edx, cl
  000c2	0b c2		 or	 eax, edx
  000c4	66 a3 00 00 00
	00		 mov	 WORD PTR ?video_edge_colour@@3GA, ax ; video_edge_colour

; 1088 : 
; 1089 : 	for ( count = 0; count < width; count++ )

  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000d1	eb 09		 jmp	 SHORT $LN4@set_video_
$LN2@set_video_:
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000d6	83 c0 01	 add	 eax, 1
  000d9	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@set_video_:
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000df	3b 45 10	 cmp	 eax, DWORD PTR _width$[ebp]
  000e2	7d 02		 jge	 SHORT $LN3@set_video_

; 1090 : 	{
; 1091 : 
; 1092 : 	//	set_packed_pixel ( count, y, video_edge_colour );
; 1093 : 	}

  000e4	eb ed		 jmp	 SHORT $LN2@set_video_
$LN3@set_video_:

; 1094 : 
; 1095 : 	for ( count = 0; count < height; count++ )

  000e6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000ed	eb 09		 jmp	 SHORT $LN7@set_video_
$LN5@set_video_:
  000ef	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000f2	83 c0 01	 add	 eax, 1
  000f5	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@set_video_:
  000f8	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000fb	3b 45 14	 cmp	 eax, DWORD PTR _height$[ebp]
  000fe	7d 02		 jge	 SHORT $LN1@set_video_

; 1096 : 	{
; 1097 : 
; 1098 : 	//	set_packed_pixel ( x, count, video_edge_colour );
; 1099 : 	}

  00100	eb ed		 jmp	 SHORT $LN5@set_video_
$LN1@set_video_:

; 1100 : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 10 00	 ret	 16			; 00000010H
?set_video_screen_edge@@YGXHHHH@Z ENDP			; set_video_screen_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z
_TEXT	SEGMENT
_dst_rect$ = -32					; size = 16
_src_rect$ = -16					; size = 16
_source$ = 8						; size = 4
_destination$ = 12					; size = 4
_sx1$ = 16						; size = 4
_sy1$ = 20						; size = 4
_sx2$ = 24						; size = 4
_sy2$ = 28						; size = 4
_dx1$ = 32						; size = 4
_dy1$ = 36						; size = 4
_dx2$ = 40						; size = 4
_dy2$ = 44						; size = 4
?blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z PROC		; blit_screens, COMDAT

; 984  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 985  : 	RECT
; 986  : 		src_rect,
; 987  : 		dst_rect;
; 988  : 
; 989  : 	ASSERT ( source );

  00009	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@blit_scree
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@blit_scree:

; 990  : 	ASSERT ( destination );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _destination$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@blit_scree
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BLMAJMLK@destination@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@blit_scree:

; 991  : 
; 992  : 	src_rect.top = sy1;

  00045	8b 45 14	 mov	 eax, DWORD PTR _sy1$[ebp]
  00048	89 45 f4	 mov	 DWORD PTR _src_rect$[ebp+4], eax

; 993  : 	src_rect.bottom = sy2;

  0004b	8b 45 1c	 mov	 eax, DWORD PTR _sy2$[ebp]
  0004e	89 45 fc	 mov	 DWORD PTR _src_rect$[ebp+12], eax

; 994  : 	src_rect.left = sx1;

  00051	8b 45 10	 mov	 eax, DWORD PTR _sx1$[ebp]
  00054	89 45 f0	 mov	 DWORD PTR _src_rect$[ebp], eax

; 995  : 	src_rect.right = sx2;

  00057	8b 45 18	 mov	 eax, DWORD PTR _sx2$[ebp]
  0005a	89 45 f8	 mov	 DWORD PTR _src_rect$[ebp+8], eax

; 996  : 
; 997  : 	dst_rect.top = dy1;

  0005d	8b 45 24	 mov	 eax, DWORD PTR _dy1$[ebp]
  00060	89 45 e4	 mov	 DWORD PTR _dst_rect$[ebp+4], eax

; 998  : 	dst_rect.bottom = dy2;

  00063	8b 45 2c	 mov	 eax, DWORD PTR _dy2$[ebp]
  00066	89 45 ec	 mov	 DWORD PTR _dst_rect$[ebp+12], eax

; 999  : 	dst_rect.left = dx1;

  00069	8b 45 20	 mov	 eax, DWORD PTR _dx1$[ebp]
  0006c	89 45 e0	 mov	 DWORD PTR _dst_rect$[ebp], eax

; 1000 : 	dst_rect.right = dx2;

  0006f	8b 45 28	 mov	 eax, DWORD PTR _dx2$[ebp]
  00072	89 45 e8	 mov	 DWORD PTR _dst_rect$[ebp+8], eax

; 1001 : 
; 1002 : 	f3d_surface_blt ( destination->surface, &dst_rect, source->surface, &src_rect, DDBLT_WAIT, NULL );

  00075	6a 00		 push	 0
  00077	68 00 00 00 01	 push	 16777216		; 01000000H
  0007c	8d 45 f0	 lea	 eax, DWORD PTR _src_rect$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00083	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00086	52		 push	 edx
  00087	8d 45 e0	 lea	 eax, DWORD PTR _dst_rect$[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _destination$[ebp]
  0008e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt

; 1003 : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 28 00	 ret	 40			; 00000028H
?blit_screens@@YGXPAUSCREEN@@0HHHHHHHH@Z ENDP		; blit_screens
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_block@@YGXHHHHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv183 = -212						; size = 4
_rect$1 = -144						; size = 16
_fx$2 = -128						; size = 100
_line$3 = -28						; size = 4
_line$4 = -24						; size = 4
_col$5 = -20						; size = 2
_ptr$6 = -16						; size = 4
_pitch$7 = -12						; size = 4
_y$8 = -8						; size = 4
_x$9 = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_colour$ = 24						; size = 4
?set_block@@YGXHHHHUREAL_COLOUR@@@Z PROC		; set_block, COMDAT

; 886  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 887  : 
; 888  : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN14@set_block
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
  0001a	83 c0 02	 add	 eax, 2
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@set_block:

; 889  : 	ASSERT ( x2 >= x1 );

  0002d	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00030	3b 45 08	 cmp	 eax, DWORD PTR _x1$[ebp]
  00033	7d 18		 jge	 SHORT $LN15@set_block
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
  0003a	83 c0 03	 add	 eax, 3
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_08BJEGMIO@x2?5?$DO?$DN?5x1@
  00048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@set_block:

; 890  : 	ASSERT ( y2 >= y1 );

  0004d	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00050	3b 45 0c	 cmp	 eax, DWORD PTR _y1$[ebp]
  00053	7d 18		 jge	 SHORT $LN16@set_block
  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_block@@YGXHHHHUREAL_COLOUR@@@Z@4JA
  0005a	83 c0 04	 add	 eax, 4
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_08BHCNBCPK@y2?5?$DO?$DN?5y1@
  00068	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@set_block:

; 891  : 
; 892  : 	if ( active_screen->locked )

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00072	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00076	66 83 e1 01	 and	 cx, 1
  0007a	0f b7 d1	 movzx	 edx, cx
  0007d	85 d2		 test	 edx, edx
  0007f	0f 84 3e 01 00
	00		 je	 $LN17@set_block

; 893  : 	{
; 894  : 		//
; 895  : 		// Perform the blit using the CPU
; 896  : 		//
; 897  : 
; 898  : 		int
; 899  : 			x,
; 900  : 			y,
; 901  : 			pitch;
; 902  : 
; 903  : 		unsigned char
; 904  : 			*ptr;
; 905  : 
; 906  : 		pitch = get_screen_pitch ( active_screen );

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00090	89 45 f4	 mov	 DWORD PTR _pitch$7[ebp], eax

; 907  : 
; 908  : 		ptr = get_screen_data ( active_screen );

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0009e	89 45 f0	 mov	 DWORD PTR _ptr$6[ebp], eax

; 909  : 
; 910  : 		if ( active_screen->pixel_length <= 16 )

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  000a6	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  000aa	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ad	0f 8f b1 00 00
	00		 jg	 $LN19@set_block

; 911  : 		{
; 912  : 			unsigned short int
; 913  : 				col,
; 914  : 				*line;
; 915  : 
; 916  : 			col = get_packed_colour ( colour );

  000b3	0f b6 45 1a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  000b7	c1 e0 18	 shl	 eax, 24			; 00000018H
  000ba	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  000c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  000c6	d3 e8		 shr	 eax, cl
  000c8	0f b6 55 19	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  000cc	c1 e2 18	 shl	 edx, 24			; 00000018H
  000cf	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  000db	d3 ea		 shr	 edx, cl
  000dd	0b c2		 or	 eax, edx
  000df	0f b6 55 18	 movzx	 edx, BYTE PTR _colour$[ebp]
  000e3	c1 e2 18	 shl	 edx, 24			; 00000018H
  000e6	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  000f2	d3 ea		 shr	 edx, cl
  000f4	0b c2		 or	 eax, edx
  000f6	0f b6 55 1b	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  000fa	c1 e2 18	 shl	 edx, 24			; 00000018H
  000fd	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  00109	d3 ea		 shr	 edx, cl
  0010b	0b c2		 or	 eax, edx
  0010d	66 89 45 ec	 mov	 WORD PTR _col$5[ebp], ax

; 917  : 
; 918  : 			for ( y = y1; y <= y2; y++ )

  00111	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00114	89 45 f8	 mov	 DWORD PTR _y$8[ebp], eax
  00117	eb 09		 jmp	 SHORT $LN4@set_block
$LN2@set_block:
  00119	8b 45 f8	 mov	 eax, DWORD PTR _y$8[ebp]
  0011c	83 c0 01	 add	 eax, 1
  0011f	89 45 f8	 mov	 DWORD PTR _y$8[ebp], eax
$LN4@set_block:
  00122	8b 45 f8	 mov	 eax, DWORD PTR _y$8[ebp]
  00125	3b 45 14	 cmp	 eax, DWORD PTR _y2$[ebp]
  00128	7f 38		 jg	 SHORT $LN3@set_block

; 919  : 			{
; 920  : 				line = ( unsigned short int * ) ( ptr + ( y * pitch ) );

  0012a	8b 45 f8	 mov	 eax, DWORD PTR _y$8[ebp]
  0012d	0f af 45 f4	 imul	 eax, DWORD PTR _pitch$7[ebp]
  00131	03 45 f0	 add	 eax, DWORD PTR _ptr$6[ebp]
  00134	89 45 e8	 mov	 DWORD PTR _line$4[ebp], eax

; 921  : 
; 922  : 				for ( x = x1; x <= x2; x++ )

  00137	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  0013a	89 45 fc	 mov	 DWORD PTR _x$9[ebp], eax
  0013d	eb 09		 jmp	 SHORT $LN7@set_block
$LN5@set_block:
  0013f	8b 45 fc	 mov	 eax, DWORD PTR _x$9[ebp]
  00142	83 c0 01	 add	 eax, 1
  00145	89 45 fc	 mov	 DWORD PTR _x$9[ebp], eax
$LN7@set_block:
  00148	8b 45 fc	 mov	 eax, DWORD PTR _x$9[ebp]
  0014b	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  0014e	7f 10		 jg	 SHORT $LN6@set_block

; 923  : 				{
; 924  : 					line[x] = col;

  00150	8b 45 fc	 mov	 eax, DWORD PTR _x$9[ebp]
  00153	8b 4d e8	 mov	 ecx, DWORD PTR _line$4[ebp]
  00156	66 8b 55 ec	 mov	 dx, WORD PTR _col$5[ebp]
  0015a	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 925  : 				}

  0015e	eb df		 jmp	 SHORT $LN5@set_block
$LN6@set_block:

; 926  : 			}

  00160	eb b7		 jmp	 SHORT $LN2@set_block
$LN3@set_block:

; 927  : 		}
; 928  : 		else

  00162	eb 5a		 jmp	 SHORT $LN20@set_block
$LN19@set_block:

; 929  : 		{
; 930  : 			unsigned long int
; 931  : 				*line;
; 932  : 
; 933  : 			for ( y = y1; y <= y2; y++ )

  00164	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00167	89 45 f8	 mov	 DWORD PTR _y$8[ebp], eax
  0016a	eb 09		 jmp	 SHORT $LN10@set_block
$LN8@set_block:
  0016c	8b 45 f8	 mov	 eax, DWORD PTR _y$8[ebp]
  0016f	83 c0 01	 add	 eax, 1
  00172	89 45 f8	 mov	 DWORD PTR _y$8[ebp], eax
$LN10@set_block:
  00175	8b 45 f8	 mov	 eax, DWORD PTR _y$8[ebp]
  00178	3b 45 14	 cmp	 eax, DWORD PTR _y2$[ebp]
  0017b	7f 41		 jg	 SHORT $LN20@set_block

; 934  : 			{
; 935  : 				line = ( unsigned long int * ) ( ptr + ( y * pitch ) ) + x1;

  0017d	8b 45 f8	 mov	 eax, DWORD PTR _y$8[ebp]
  00180	0f af 45 f4	 imul	 eax, DWORD PTR _pitch$7[ebp]
  00184	03 45 f0	 add	 eax, DWORD PTR _ptr$6[ebp]
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  0018a	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0018d	89 55 e4	 mov	 DWORD PTR _line$3[ebp], edx

; 936  : 
; 937  : 				for ( x = x1; x <= x2; x++ )

  00190	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00193	89 45 fc	 mov	 DWORD PTR _x$9[ebp], eax
  00196	eb 09		 jmp	 SHORT $LN13@set_block
$LN11@set_block:
  00198	8b 45 fc	 mov	 eax, DWORD PTR _x$9[ebp]
  0019b	83 c0 01	 add	 eax, 1
  0019e	89 45 fc	 mov	 DWORD PTR _x$9[ebp], eax
$LN13@set_block:
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _x$9[ebp]
  001a4	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  001a7	7f 13		 jg	 SHORT $LN12@set_block

; 938  : 				{
; 939  : 					*line++ = colour.colour;

  001a9	8b 45 e4	 mov	 eax, DWORD PTR _line$3[ebp]
  001ac	8b 4d 18	 mov	 ecx, DWORD PTR _colour$[ebp]
  001af	89 08		 mov	 DWORD PTR [eax], ecx
  001b1	8b 55 e4	 mov	 edx, DWORD PTR _line$3[ebp]
  001b4	83 c2 04	 add	 edx, 4
  001b7	89 55 e4	 mov	 DWORD PTR _line$3[ebp], edx

; 940  : 				}

  001ba	eb dc		 jmp	 SHORT $LN11@set_block
$LN12@set_block:

; 941  : 			}

  001bc	eb ae		 jmp	 SHORT $LN8@set_block
$LN20@set_block:

; 942  : 		}
; 943  : 	}
; 944  : 	else

  001be	e9 09 01 00 00	 jmp	 $LN1@set_block
$LN17@set_block:

; 945  : 	{
; 946  : 
; 947  : 		DDBLTFX
; 948  : 			fx;
; 949  : 
; 950  : 		RECT
; 951  : 			rect;
; 952  : 
; 953  : 		//
; 954  : 		// Perform the blit using the blitter
; 955  : 		//
; 956  : 
; 957  : 		fx.dwSize = sizeof ( fx );

  001c3	c7 45 80 64 00
	00 00		 mov	 DWORD PTR _fx$2[ebp], 100 ; 00000064H

; 958  : 		fx.dwFillColor = active_screen->pixel_length <= 16 ? get_packed_colour ( colour ) : colour.colour;

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  001cf	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  001d3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001d6	7f 65		 jg	 SHORT $LN24@set_block
  001d8	0f b6 55 1a	 movzx	 edx, BYTE PTR _colour$[ebp+2]
  001dc	c1 e2 18	 shl	 edx, 24			; 00000018H
  001df	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  001e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  001eb	d3 ea		 shr	 edx, cl
  001ed	0f b6 45 19	 movzx	 eax, BYTE PTR _colour$[ebp+1]
  001f1	c1 e0 18	 shl	 eax, 24			; 00000018H
  001f4	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  001fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00200	d3 e8		 shr	 eax, cl
  00202	0b d0		 or	 edx, eax
  00204	0f b6 45 18	 movzx	 eax, BYTE PTR _colour$[ebp]
  00208	c1 e0 18	 shl	 eax, 24			; 00000018H
  0020b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00211	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00217	d3 e8		 shr	 eax, cl
  00219	0b d0		 or	 edx, eax
  0021b	0f b6 45 1b	 movzx	 eax, BYTE PTR _colour$[ebp+3]
  0021f	c1 e0 18	 shl	 eax, 24			; 00000018H
  00222	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00228	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  0022e	d3 e8		 shr	 eax, cl
  00230	0b d0		 or	 edx, eax
  00232	0f b7 ca	 movzx	 ecx, dx
  00235	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv183[ebp], ecx
  0023b	eb 09		 jmp	 SHORT $LN25@set_block
$LN24@set_block:
  0023d	8b 55 18	 mov	 edx, DWORD PTR _colour$[ebp]
  00240	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv183[ebp], edx
$LN25@set_block:
  00246	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv183[ebp]
  0024c	89 45 d0	 mov	 DWORD PTR _fx$2[ebp+80], eax

; 959  : 
; 960  : 		rect.left = x1;

  0024f	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00252	89 85 70 ff ff
	ff		 mov	 DWORD PTR _rect$1[ebp], eax

; 961  : 		rect.right = x2 + 1;

  00258	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  0025b	83 c0 01	 add	 eax, 1
  0025e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _rect$1[ebp+8], eax

; 962  : 
; 963  : 		rect.top = y1;

  00264	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00267	89 85 74 ff ff
	ff		 mov	 DWORD PTR _rect$1[ebp+4], eax

; 964  : 		rect.bottom = y2 + 1;

  0026d	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00270	83 c0 01	 add	 eax, 1
  00273	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rect$1[ebp+12], eax

; 965  : 
; 966  : 		if ( active_screen->render_texture_surface )

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0027e	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00282	74 25		 je	 SHORT $LN21@set_block

; 967  : 		{
; 968  : 
; 969  : 			f3d_surface_blt ( active_screen->render_texture_surface, &rect, NULL, NULL, DDBLT_COLORFILL | DDBLT_WAIT, &fx );

  00284	8d 45 80	 lea	 eax, DWORD PTR _fx$2[ebp]
  00287	50		 push	 eax
  00288	68 00 04 00 01	 push	 16778240		; 01000400H
  0028d	6a 00		 push	 0
  0028f	6a 00		 push	 0
  00291	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$1[ebp]
  00297	51		 push	 ecx
  00298	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0029e	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002a1	50		 push	 eax
  002a2	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt

; 970  : 		}
; 971  : 		else

  002a7	eb 23		 jmp	 SHORT $LN1@set_block
$LN21@set_block:

; 972  : 		{
; 973  : 
; 974  : 			f3d_surface_blt ( active_screen->surface, &rect, NULL, NULL, DDBLT_COLORFILL | DDBLT_WAIT, &fx );

  002a9	8d 45 80	 lea	 eax, DWORD PTR _fx$2[ebp]
  002ac	50		 push	 eax
  002ad	68 00 04 00 01	 push	 16778240		; 01000400H
  002b2	6a 00		 push	 0
  002b4	6a 00		 push	 0
  002b6	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$1[ebp]
  002bc	51		 push	 ecx
  002bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  002c3	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  002c6	50		 push	 eax
  002c7	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@set_block:

; 975  : 		}
; 976  : 	}
; 977  : }

  002cc	5f		 pop	 edi
  002cd	5e		 pop	 esi
  002ce	5b		 pop	 ebx
  002cf	8b e5		 mov	 esp, ebp
  002d1	5d		 pop	 ebp
  002d2	c2 14 00	 ret	 20			; 00000014H
?set_block@@YGXHHHHUREAL_COLOUR@@@Z ENDP		; set_block
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z PROC ; finalise_3d_render_target_texture, COMDAT

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 874  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@finalise_3
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@finalise_3:

; 875  : 	ASSERT ( this_screen->surface );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0002e	75 18		 jne	 SHORT $LN3@finalise_3
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z@4JA
  00035	83 c0 02	 add	 eax, 2
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@finalise_3:

; 876  : 	ASSERT ( this_screen->render_texture_surface );

  00048	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0004b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0004f	75 18		 jne	 SHORT $LN4@finalise_3
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z@4JA
  00056	83 c0 03	 add	 eax, 3
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FOOFMOHB@this_screen?9?$DOrender_texture_sur@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@finalise_3:

; 877  : 
; 878  : 	f3d_surface_blt ( this_screen->surface, NULL, this_screen->render_texture_surface, NULL, DDBLT_WAIT, NULL );

  00069	6a 00		 push	 0
  0006b	68 00 00 00 01	 push	 16777216		; 01000000H
  00070	6a 00		 push	 0
  00072	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00075	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00078	51		 push	 ecx
  00079	6a 00		 push	 0
  0007b	8b 55 08	 mov	 edx, DWORD PTR _this_screen$[ebp]
  0007e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt

; 879  : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ENDP ; finalise_3d_render_target_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_3d_render_target@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?set_3d_render_target@@YGHPAUSCREEN@@@Z PROC		; set_3d_render_target, COMDAT

; 864  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 865  : 	return f3d_set_3d_render_target ( this_screen );

  00009	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?f3d_set_3d_render_target@@YGHPAUSCREEN@@@Z ; f3d_set_3d_render_target

; 866  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?set_3d_render_target@@YGHPAUSCREEN@@@Z ENDP		; set_3d_render_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?clear_screen@@YGXXZ
_TEXT	SEGMENT
?clear_screen@@YGXXZ PROC				; clear_screen, COMDAT

; 855  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 856  : 	f3d_clear_screen ();

  00009	e8 00 00 00 00	 call	 ?f3d_clear_screen@@YGXXZ ; f3d_clear_screen

; 857  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?clear_screen@@YGXXZ ENDP				; clear_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_locked@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?get_screen_locked@@YGHPAUSCREEN@@@Z PROC		; get_screen_locked, COMDAT

; 843  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 844  : 
; 845  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_screen
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_locked@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 846  : 
; 847  : 	return ( this_screen->locked );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0002e	66 83 e1 01	 and	 cx, 1
  00032	0f b7 c1	 movzx	 eax, cx

; 848  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?get_screen_locked@@YGHPAUSCREEN@@@Z ENDP		; get_screen_locked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_height@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?get_screen_height@@YGHPAUSCREEN@@@Z PROC		; get_screen_height, COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 832  : 
; 833  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_screen
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_height@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 834  : 
; 835  : 	return ( this_screen->height );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]

; 836  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?get_screen_height@@YGHPAUSCREEN@@@Z ENDP		; get_screen_height
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_width@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?get_screen_width@@YGHPAUSCREEN@@@Z PROC		; get_screen_width, COMDAT

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 820  : 
; 821  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_screen
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_width@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 822  : 
; 823  : 	return ( this_screen->width );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	0f b7 40 04	 movzx	 eax, WORD PTR [eax+4]

; 824  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?get_screen_width@@YGHPAUSCREEN@@@Z ENDP		; get_screen_width
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_pixel_length@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?get_screen_pixel_length@@YGHPAUSCREEN@@@Z PROC		; get_screen_pixel_length, COMDAT

; 807  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 808  : 
; 809  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_screen
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_pixel_length@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 810  : 
; 811  : 	return ( this_screen->pixel_length );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]

; 812  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?get_screen_pixel_length@@YGHPAUSCREEN@@@Z ENDP		; get_screen_pixel_length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_pitch@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?get_screen_pitch@@YGHPAUSCREEN@@@Z PROC		; get_screen_pitch, COMDAT

; 781  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 782  : 
; 783  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_screen
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_pitch@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 784  : 	ASSERT ( this_screen->locked );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0002e	66 83 e1 01	 and	 cx, 1
  00032	0f b7 d1	 movzx	 edx, cx
  00035	85 d2		 test	 edx, edx
  00037	75 18		 jne	 SHORT $LN3@get_screen
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_pitch@@YGHPAUSCREEN@@@Z@4JA
  0003e	83 c0 03	 add	 eax, 3
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DFGBBKKF@this_screen?9?$DOlocked@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_screen:

; 785  : 
; 786  : 	return ( this_screen->pitch );

  00051	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00054	8b 40 28	 mov	 eax, DWORD PTR [eax+40]

; 787  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?get_screen_pitch@@YGHPAUSCREEN@@@Z ENDP		; get_screen_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_data@@YGPAEPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?get_screen_data@@YGPAEPAUSCREEN@@@Z PROC		; get_screen_data, COMDAT

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 795  : 
; 796  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_screen
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_data@@YGPAEPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 797  : 	ASSERT ( this_screen->locked );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0002e	66 83 e1 01	 and	 cx, 1
  00032	0f b7 d1	 movzx	 edx, cx
  00035	85 d2		 test	 edx, edx
  00037	75 18		 jne	 SHORT $LN3@get_screen
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_data@@YGPAEPAUSCREEN@@@Z@4JA
  0003e	83 c0 03	 add	 eax, 3
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DFGBBKKF@this_screen?9?$DOlocked@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_screen:

; 798  : 
; 799  : 	return ( unsigned char * ) this_screen->data;

  00051	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00054	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]

; 800  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?get_screen_data@@YGPAEPAUSCREEN@@@Z ENDP		; get_screen_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_active_screen@@YGPAUSCREEN@@XZ
_TEXT	SEGMENT
?get_active_screen@@YGPAUSCREEN@@XZ PROC		; get_active_screen, COMDAT

; 769  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 770  : 
; 771  : 	ASSERT ( active_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00010	75 18		 jne	 SHORT $LN2@get_active
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_active_screen@@YGPAUSCREEN@@XZ@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_active:

; 772  : 
; 773  : 	return ( active_screen );

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen

; 774  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?get_active_screen@@YGPAUSCREEN@@XZ ENDP		; get_active_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_active_screen@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?set_active_screen@@YGHPAUSCREEN@@@Z PROC		; set_active_screen, COMDAT

; 749  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  : 
; 751  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_active
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_active_screen@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_active:

; 752  : 
; 753  : 	active_screen = this_screen;

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	a3 00 00 00 00	 mov	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, eax ; active_screen

; 754  : 
; 755  : 	//
; 756  : 	// Have to realise the pixel format here.
; 757  : 	//
; 758  : 
; 759  : 	set_screen_pixel_format ();

  0002f	e8 00 00 00 00	 call	 ?set_screen_pixel_format@@YGXXZ ; set_screen_pixel_format

; 760  : 
; 761  : 	return ( TRUE );

  00034	b8 01 00 00 00	 mov	 eax, 1

; 762  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?set_active_screen@@YGHPAUSCREEN@@@Z ENDP		; set_active_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z
_TEXT	SEGMENT
_ddsd$ = -124						; size = 124
_scr$ = 8						; size = 4
?set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z PROC	; set_user_screen_pixel_format, COMDAT

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 475  : 
; 476  : 	DDSURFACEDESC2
; 477  : 		ddsd;
; 478  : 
; 479  : 	ASSERT ( scr );

  0000c	83 7d 08 00	 cmp	 DWORD PTR _scr$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@set_user_s
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03PAKJEBJM@scr@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_user_s:

; 480  : 	ASSERT ( scr->surface );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _scr$[ebp]
  0002d	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00031	75 18		 jne	 SHORT $LN3@set_user_s
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z@4JA
  00038	83 c0 06	 add	 eax, 6
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EPPBFCPI@scr?9?$DOsurface@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_user_s:

; 481  : 
; 482  : 	ddsd.dwSize = sizeof ( ddsd );

  0004b	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 483  : 
; 484  : 	f3d_surface_description ( scr->surface, &ddsd );

  00052	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _scr$[ebp]
  00059	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 485  : 
; 486  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwRBitMask, &user_screen_red_mask, &user_screen_red_shift );

  00062	68 00 00 00 00	 push	 OFFSET ?user_screen_red_shift@@3HA ; user_screen_red_shift
  00067	68 00 00 00 00	 push	 OFFSET ?user_screen_red_mask@@3HA ; user_screen_red_mask
  0006c	8b 45 dc	 mov	 eax, DWORD PTR _ddsd$[ebp+88]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 487  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwGBitMask, &user_screen_green_mask, &user_screen_green_shift );

  00075	68 00 00 00 00	 push	 OFFSET ?user_screen_green_shift@@3HA ; user_screen_green_shift
  0007a	68 00 00 00 00	 push	 OFFSET ?user_screen_green_mask@@3HA ; user_screen_green_mask
  0007f	8b 45 e0	 mov	 eax, DWORD PTR _ddsd$[ebp+92]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 488  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwBBitMask, &user_screen_blue_mask, &user_screen_blue_shift );

  00088	68 00 00 00 00	 push	 OFFSET ?user_screen_blue_shift@@3HA ; user_screen_blue_shift
  0008d	68 00 00 00 00	 push	 OFFSET ?user_screen_blue_mask@@3HA ; user_screen_blue_mask
  00092	8b 45 e4	 mov	 eax, DWORD PTR _ddsd$[ebp+96]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 489  : 	set_surface_shift_and_mask ( ddsd.ddpfPixelFormat.dwRGBAlphaBitMask, &user_screen_alpha_mask, &user_screen_alpha_shift );

  0009b	68 00 00 00 00	 push	 OFFSET ?user_screen_alpha_shift@@3HA ; user_screen_alpha_shift
  000a0	68 00 00 00 00	 push	 OFFSET ?user_screen_alpha_mask@@3HA ; user_screen_alpha_mask
  000a5	8b 45 e8	 mov	 eax, DWORD PTR _ddsd$[ebp+100]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?set_surface_shift_and_mask@@YGXHPAH0@Z ; set_surface_shift_and_mask

; 490  : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?set_user_screen_pixel_format@@YGXPAUSCREEN@@@Z ENDP	; set_user_screen_pixel_format
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?unlock_screen@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?unlock_screen@@YGHPAUSCREEN@@@Z PROC			; unlock_screen, COMDAT

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 
; 684  : 	/*BOOL
; 685  : 		ret;*/
; 686  : 
; 687  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@unlock_scr
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unlock_screen@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@unlock_scr:

; 688  : 	ASSERT ( this_screen->surface );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0002e	75 18		 jne	 SHORT $LN3@unlock_scr
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unlock_screen@@YGHPAUSCREEN@@@Z@4JA
  00035	83 c0 06	 add	 eax, 6
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@unlock_scr:

; 689  : 	ASSERT ( this_screen->locked );

  00048	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0004b	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0004f	66 83 e1 01	 and	 cx, 1
  00053	0f b7 d1	 movzx	 edx, cx
  00056	85 d2		 test	 edx, edx
  00058	75 18		 jne	 SHORT $LN4@unlock_scr
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unlock_screen@@YGHPAUSCREEN@@@Z@4JA
  0005f	83 c0 07	 add	 eax, 7
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DFGBBKKF@this_screen?9?$DOlocked@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@unlock_scr:

; 690  : 
; 691  : 	/*ret = ddraw_unlock_surface ( this_screen->surface, this_screen->data );
; 692  : 
; 693  : 	if ( ret )
; 694  : 	{
; 695  : 
; 696  : 		this_screen->locked = FALSE;
; 697  : 
; 698  : 		this_screen->data = NULL;
; 699  : 
; 700  : 		return ( TRUE );
; 701  : 	}
; 702  : 	else
; 703  : 	{
; 704  : 
; 705  : 		return ( FALSE );
; 706  : 	}*/
; 707  : 
; 708  : 	f3d_texture_unlock ( this_screen );

  00072	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?f3d_texture_unlock@@YGHPAUSCREEN@@@Z ; f3d_texture_unlock

; 709  : 	return TRUE;

  0007b	b8 01 00 00 00	 mov	 eax, 1

; 710  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?unlock_screen@@YGHPAUSCREEN@@@Z ENDP			; unlock_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?lock_screen@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?lock_screen@@YGHPAUSCREEN@@@Z PROC			; lock_screen, COMDAT

; 661  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 662  : 
; 663  : 	ASSERT ( this_screen );

  00009	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@lock_scree
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??lock_screen@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@lock_scree:

; 664  : 	ASSERT ( this_screen->surface );

  00027	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0002e	75 18		 jne	 SHORT $LN3@lock_scree
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??lock_screen@@YGHPAUSCREEN@@@Z@4JA
  00035	83 c0 03	 add	 eax, 3
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@lock_scree:

; 665  : 	ASSERT ( !this_screen->locked );

  00048	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0004b	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0004f	66 83 e1 01	 and	 cx, 1
  00053	0f b7 d1	 movzx	 edx, cx
  00056	85 d2		 test	 edx, edx
  00058	74 18		 je	 SHORT $LN4@lock_scree
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??lock_screen@@YGHPAUSCREEN@@@Z@4JA
  0005f	83 c0 04	 add	 eax, 4
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HDKCOCOF@?$CBthis_screen?9?$DOlocked@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@lock_scree:

; 666  : 
; 667  : 	/*if ( ddraw_lock_surface ( this_screen->surface, &this_screen->data, &this_screen->pitch ) )
; 668  : 	{
; 669  : 
; 670  : 		this_screen->locked = TRUE;
; 671  : 	}*/
; 672  : 	f3d_texture_lock ( this_screen, 0 );

  00072	6a 00		 push	 0
  00074	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?f3d_texture_lock@@YGHPAUSCREEN@@H@Z ; f3d_texture_lock

; 673  : 
; 674  : 	return ( this_screen->locked );

  0007d	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00080	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00084	66 83 e1 01	 and	 cx, 1
  00088	0f b7 c1	 movzx	 eax, cx

; 675  : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?lock_screen@@YGHPAUSCREEN@@@Z ENDP			; lock_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z
_TEXT	SEGMENT
_ddsd$ = -124						; size = 124
_this_screen$ = 8					; size = 4
_rm$ = 12						; size = 4
_gm$ = 16						; size = 4
_bm$ = 20						; size = 4
_am$ = 24						; size = 4
?get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z PROC	; get_screen_rgba_masks, COMDAT

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 625  : 
; 626  : 	DDSURFACEDESC2
; 627  : 		ddsd;
; 628  : 
; 629  : 	ASSERT ( this_screen );

  0000c	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@get_screen
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 630  : 	ASSERT ( this_screen->surface );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002d	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00031	75 18		 jne	 SHORT $LN3@get_screen
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z@4JA
  00038	83 c0 06	 add	 eax, 6
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_screen:

; 631  : 
; 632  : 	*rm = 0;

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _rm$[ebp]
  0004e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 633  : 	*gm = 0;

  00054	8b 45 10	 mov	 eax, DWORD PTR _gm$[ebp]
  00057	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 634  : 	*bm = 0;

  0005d	8b 45 14	 mov	 eax, DWORD PTR _bm$[ebp]
  00060	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 635  : 	*am = 0;

  00066	8b 45 18	 mov	 eax, DWORD PTR _am$[ebp]
  00069	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 636  : 
; 637  : 	ddsd.dwSize = sizeof ( ddsd );

  0006f	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 638  : 
; 639  : 	f3d_surface_description ( this_screen->surface, &ddsd );

  00076	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  0007d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00080	52		 push	 edx
  00081	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 640  : 
; 641  : 	if ( ddsd.ddpfPixelFormat.dwFlags & DDPF_RGB )

  00086	8b 45 d0	 mov	 eax, DWORD PTR _ddsd$[ebp+76]
  00089	83 e0 40	 and	 eax, 64			; 00000040H
  0008c	74 26		 je	 SHORT $LN1@get_screen

; 642  : 	{
; 643  : 
; 644  : 		*rm = ddsd.ddpfPixelFormat.dwRBitMask;

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _rm$[ebp]
  00091	8b 4d dc	 mov	 ecx, DWORD PTR _ddsd$[ebp+88]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 645  : 		*gm = ddsd.ddpfPixelFormat.dwGBitMask;

  00096	8b 45 10	 mov	 eax, DWORD PTR _gm$[ebp]
  00099	8b 4d e0	 mov	 ecx, DWORD PTR _ddsd$[ebp+92]
  0009c	89 08		 mov	 DWORD PTR [eax], ecx

; 646  : 		*bm = ddsd.ddpfPixelFormat.dwBBitMask;

  0009e	8b 45 14	 mov	 eax, DWORD PTR _bm$[ebp]
  000a1	8b 4d e4	 mov	 ecx, DWORD PTR _ddsd$[ebp+96]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx

; 647  : 
; 648  : 		if ( ddsd.ddpfPixelFormat.dwRGBAlphaBitMask )

  000a6	83 7d e8 00	 cmp	 DWORD PTR _ddsd$[ebp+100], 0
  000aa	74 08		 je	 SHORT $LN1@get_screen

; 649  : 		{
; 650  : 
; 651  : 			*am = ddsd.ddpfPixelFormat.dwRGBAlphaBitMask;

  000ac	8b 45 18	 mov	 eax, DWORD PTR _am$[ebp]
  000af	8b 4d e8	 mov	 ecx, DWORD PTR _ddsd$[ebp+100]
  000b2	89 08		 mov	 DWORD PTR [eax], ecx
$LN1@get_screen:

; 652  : 		}
; 653  : 	}
; 654  : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 14 00	 ret	 20			; 00000014H
?get_screen_rgba_masks@@YGXPAUSCREEN@@PAI111@Z ENDP	; get_screen_rgba_masks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_pixel_width@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_m$ = -144						; size = 4
_a$ = -140						; size = 4
_b$ = -136						; size = 4
_g$ = -132						; size = 4
_r$ = -128						; size = 4
_ddsd$ = -124						; size = 124
_this_screen$ = 8					; size = 4
?get_screen_pixel_width@@YGHPAUSCREEN@@@Z PROC		; get_screen_pixel_width, COMDAT

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 548  : 
; 549  : 	DDSURFACEDESC2
; 550  : 		ddsd;
; 551  : 
; 552  : 	int
; 553  : 		r,
; 554  : 		g,
; 555  : 		b,
; 556  : 		a;
; 557  : 
; 558  : 	unsigned long
; 559  : 		m;
; 560  : 
; 561  : 	ASSERT ( this_screen );

  0000c	83 7d 08 00	 cmp	 DWORD PTR _this_screen$[ebp], 0
  00010	75 18		 jne	 SHORT $LN26@get_screen
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_pixel_width@@YGHPAUSCREEN@@@Z@4JA
  00017	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIMDIJJI@this_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN26@get_screen:

; 562  : 	ASSERT ( this_screen->surface );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0002d	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00031	75 18		 jne	 SHORT $LN27@get_screen
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_pixel_width@@YGHPAUSCREEN@@@Z@4JA
  00038	83 c0 0f	 add	 eax, 15			; 0000000fH
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GCABNNMF@this_screen?9?$DOsurface@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN27@get_screen:

; 563  : 
; 564  : 	ddsd.dwSize = sizeof ( ddsd );

  0004b	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 565  : 
; 566  : 	f3d_surface_description ( this_screen->surface, &ddsd );

  00052	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00059	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 567  : 
; 568  : 	if ( ddsd.ddpfPixelFormat.dwFlags & DDPF_RGB )

  00062	8b 45 d0	 mov	 eax, DWORD PTR _ddsd$[ebp+76]
  00065	83 e0 40	 and	 eax, 64			; 00000040H
  00068	0f 84 fe 01 00
	00		 je	 $LN28@get_screen

; 569  : 	{
; 570  : 
; 571  : 		for ( r=0, m=ddsd.ddpfPixelFormat.dwRBitMask; !(m & 1); r++, m >>= 1)

  0006e	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0
  00075	8b 45 dc	 mov	 eax, DWORD PTR _ddsd$[ebp+88]
  00078	89 85 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], eax
  0007e	eb 17		 jmp	 SHORT $LN4@get_screen
$LN2@get_screen:
  00080	8b 45 80	 mov	 eax, DWORD PTR _r$[ebp]
  00083	83 c0 01	 add	 eax, 1
  00086	89 45 80	 mov	 DWORD PTR _r$[ebp], eax
  00089	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  0008f	d1 e9		 shr	 ecx, 1
  00091	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN4@get_screen:
  00097	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  0009d	83 e0 01	 and	 eax, 1
  000a0	75 02		 jne	 SHORT $LN3@get_screen

; 572  : 				;

  000a2	eb dc		 jmp	 SHORT $LN2@get_screen
$LN3@get_screen:

; 573  : 
; 574  : 		for ( r=0; m & 1; r++, m >>= 1)

  000a4	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0
  000ab	eb 17		 jmp	 SHORT $LN7@get_screen
$LN5@get_screen:
  000ad	8b 45 80	 mov	 eax, DWORD PTR _r$[ebp]
  000b0	83 c0 01	 add	 eax, 1
  000b3	89 45 80	 mov	 DWORD PTR _r$[ebp], eax
  000b6	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  000bc	d1 e9		 shr	 ecx, 1
  000be	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN7@get_screen:
  000c4	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  000ca	83 e0 01	 and	 eax, 1
  000cd	74 02		 je	 SHORT $LN6@get_screen

; 575  : 				;

  000cf	eb dc		 jmp	 SHORT $LN5@get_screen
$LN6@get_screen:

; 576  : 
; 577  : 		for ( g=0, m=ddsd.ddpfPixelFormat.dwGBitMask; !(m & 1); g++, m >>= 1)

  000d1	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _g$[ebp], 0
  000db	8b 45 e0	 mov	 eax, DWORD PTR _ddsd$[ebp+92]
  000de	89 85 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], eax
  000e4	eb 1d		 jmp	 SHORT $LN10@get_screen
$LN8@get_screen:
  000e6	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _g$[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 85 7c ff ff
	ff		 mov	 DWORD PTR _g$[ebp], eax
  000f5	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  000fb	d1 e9		 shr	 ecx, 1
  000fd	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN10@get_screen:
  00103	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  00109	83 e0 01	 and	 eax, 1
  0010c	75 02		 jne	 SHORT $LN9@get_screen

; 578  : 				;

  0010e	eb d6		 jmp	 SHORT $LN8@get_screen
$LN9@get_screen:

; 579  : 
; 580  : 		for ( g=0; m & 1; g++, m >>= 1)

  00110	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _g$[ebp], 0
  0011a	eb 1d		 jmp	 SHORT $LN13@get_screen
$LN11@get_screen:
  0011c	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _g$[ebp]
  00122	83 c0 01	 add	 eax, 1
  00125	89 85 7c ff ff
	ff		 mov	 DWORD PTR _g$[ebp], eax
  0012b	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  00131	d1 e9		 shr	 ecx, 1
  00133	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN13@get_screen:
  00139	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  0013f	83 e0 01	 and	 eax, 1
  00142	74 02		 je	 SHORT $LN12@get_screen

; 581  : 				;

  00144	eb d6		 jmp	 SHORT $LN11@get_screen
$LN12@get_screen:

; 582  : 
; 583  : 		for ( b=0, m=ddsd.ddpfPixelFormat.dwBBitMask; !(m & 1); b++, m >>= 1)

  00146	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _b$[ebp], 0
  00150	8b 45 e4	 mov	 eax, DWORD PTR _ddsd$[ebp+96]
  00153	89 85 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], eax
  00159	eb 1d		 jmp	 SHORT $LN16@get_screen
$LN14@get_screen:
  0015b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  00161	83 c0 01	 add	 eax, 1
  00164	89 85 78 ff ff
	ff		 mov	 DWORD PTR _b$[ebp], eax
  0016a	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  00170	d1 e9		 shr	 ecx, 1
  00172	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN16@get_screen:
  00178	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  0017e	83 e0 01	 and	 eax, 1
  00181	75 02		 jne	 SHORT $LN15@get_screen

; 584  : 				;

  00183	eb d6		 jmp	 SHORT $LN14@get_screen
$LN15@get_screen:

; 585  : 
; 586  : 		for ( b=0; m & 1; b++, m >>= 1)

  00185	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _b$[ebp], 0
  0018f	eb 1d		 jmp	 SHORT $LN19@get_screen
$LN17@get_screen:
  00191	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  00197	83 c0 01	 add	 eax, 1
  0019a	89 85 78 ff ff
	ff		 mov	 DWORD PTR _b$[ebp], eax
  001a0	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  001a6	d1 e9		 shr	 ecx, 1
  001a8	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN19@get_screen:
  001ae	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  001b4	83 e0 01	 and	 eax, 1
  001b7	74 02		 je	 SHORT $LN18@get_screen

; 587  : 				;

  001b9	eb d6		 jmp	 SHORT $LN17@get_screen
$LN18@get_screen:

; 588  : 
; 589  : 		a = 0;

  001bb	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _a$[ebp], 0

; 590  : 
; 591  : 		if ( ddsd.ddpfPixelFormat.dwRGBAlphaBitMask )

  001c5	83 7d e8 00	 cmp	 DWORD PTR _ddsd$[ebp+100], 0
  001c9	74 75		 je	 SHORT $LN30@get_screen

; 592  : 		{
; 593  : 
; 594  : 			for ( a=0, m=ddsd.ddpfPixelFormat.dwRGBAlphaBitMask; !(m & 1); a++, m >>= 1)

  001cb	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _a$[ebp], 0
  001d5	8b 45 e8	 mov	 eax, DWORD PTR _ddsd$[ebp+100]
  001d8	89 85 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], eax
  001de	eb 1d		 jmp	 SHORT $LN22@get_screen
$LN20@get_screen:
  001e0	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _a$[ebp]
  001e6	83 c0 01	 add	 eax, 1
  001e9	89 85 74 ff ff
	ff		 mov	 DWORD PTR _a$[ebp], eax
  001ef	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  001f5	d1 e9		 shr	 ecx, 1
  001f7	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN22@get_screen:
  001fd	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  00203	83 e0 01	 and	 eax, 1
  00206	75 02		 jne	 SHORT $LN21@get_screen

; 595  : 					;

  00208	eb d6		 jmp	 SHORT $LN20@get_screen
$LN21@get_screen:

; 596  : 
; 597  : 			for ( a=0; m & 1; a++, m >>= 1)

  0020a	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _a$[ebp], 0
  00214	eb 1d		 jmp	 SHORT $LN25@get_screen
$LN23@get_screen:
  00216	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _a$[ebp]
  0021c	83 c0 01	 add	 eax, 1
  0021f	89 85 74 ff ff
	ff		 mov	 DWORD PTR _a$[ebp], eax
  00225	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _m$[ebp]
  0022b	d1 e9		 shr	 ecx, 1
  0022d	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], ecx
$LN25@get_screen:
  00233	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  00239	83 e0 01	 and	 eax, 1
  0023c	74 02		 je	 SHORT $LN30@get_screen

; 598  : 					;

  0023e	eb d6		 jmp	 SHORT $LN23@get_screen
$LN30@get_screen:

; 599  : 		}
; 600  : 
; 601  : 		if ( ( r + g + b + a ) <= 16 )

  00240	8b 45 80	 mov	 eax, DWORD PTR _r$[ebp]
  00243	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _g$[ebp]
  00249	03 85 78 ff ff
	ff		 add	 eax, DWORD PTR _b$[ebp]
  0024f	03 85 74 ff ff
	ff		 add	 eax, DWORD PTR _a$[ebp]
  00255	83 f8 10	 cmp	 eax, 16			; 00000010H
  00258	7f 09		 jg	 SHORT $LN31@get_screen

; 602  : 		{
; 603  : 
; 604  : 			return ( 2 );

  0025a	b8 02 00 00 00	 mov	 eax, 2
  0025f	eb 10		 jmp	 SHORT $LN1@get_screen

; 605  : 		}
; 606  : 		else

  00261	eb 07		 jmp	 SHORT $LN32@get_screen
$LN31@get_screen:

; 607  : 		{
; 608  : 
; 609  : 			return ( 4 );

  00263	b8 04 00 00 00	 mov	 eax, 4
  00268	eb 07		 jmp	 SHORT $LN1@get_screen
$LN32@get_screen:

; 610  : 		}
; 611  : 	}
; 612  : 	else

  0026a	eb 05		 jmp	 SHORT $LN1@get_screen
$LN28@get_screen:

; 613  : 	{
; 614  : 
; 615  : 		return ( 1 );

  0026c	b8 01 00 00 00	 mov	 eax, 1
$LN1@get_screen:

; 616  : 	}
; 617  : }

  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	5b		 pop	 ebx
  00274	8b e5		 mov	 esp, ebp
  00276	5d		 pop	 ebp
  00277	c2 04 00	 ret	 4
?get_screen_pixel_width@@YGHPAUSCREEN@@@Z ENDP		; get_screen_pixel_width
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_screen_pixel_format@@YGXPAH000@Z
_TEXT	SEGMENT
_ddsd$ = -124						; size = 124
_red_mask$ = 8						; size = 4
_green_mask$ = 12					; size = 4
_blue_mask$ = 16					; size = 4
_alpha_mask$ = 20					; size = 4
?get_screen_pixel_format@@YGXPAH000@Z PROC		; get_screen_pixel_format, COMDAT

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 525  : 
; 526  : 	DDSURFACEDESC2
; 527  : 		ddsd;
; 528  : 
; 529  : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN2@get_screen
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_pixel_format@@YGXPAH000@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_screen:

; 530  : 	ASSERT ( active_screen->surface );

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00036	75 18		 jne	 SHORT $LN3@get_screen
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_screen_pixel_format@@YGXPAH000@Z@4JA
  0003d	83 c0 06	 add	 eax, 6
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@
  0004b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_screen:

; 531  : 
; 532  : 	ddsd.dwSize = sizeof ( ddsd );

  00050	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 533  : 
; 534  : 	f3d_surface_description ( active_screen->surface, &ddsd );

  00057	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0005a	50		 push	 eax
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00061	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 535  : 
; 536  : 	*red_mask = ddsd.ddpfPixelFormat.dwRBitMask;

  0006a	8b 45 08	 mov	 eax, DWORD PTR _red_mask$[ebp]
  0006d	8b 4d dc	 mov	 ecx, DWORD PTR _ddsd$[ebp+88]
  00070	89 08		 mov	 DWORD PTR [eax], ecx

; 537  : 	*green_mask = ddsd.ddpfPixelFormat.dwGBitMask;

  00072	8b 45 0c	 mov	 eax, DWORD PTR _green_mask$[ebp]
  00075	8b 4d e0	 mov	 ecx, DWORD PTR _ddsd$[ebp+92]
  00078	89 08		 mov	 DWORD PTR [eax], ecx

; 538  : 	*blue_mask = ddsd.ddpfPixelFormat.dwBBitMask;

  0007a	8b 45 10	 mov	 eax, DWORD PTR _blue_mask$[ebp]
  0007d	8b 4d e4	 mov	 ecx, DWORD PTR _ddsd$[ebp+96]
  00080	89 08		 mov	 DWORD PTR [eax], ecx

; 539  : 	*alpha_mask = ddsd.ddpfPixelFormat.dwRGBAlphaBitMask;

  00082	8b 45 14	 mov	 eax, DWORD PTR _alpha_mask$[ebp]
  00085	8b 4d e8	 mov	 ecx, DWORD PTR _ddsd$[ebp+100]
  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 10 00	 ret	 16			; 00000010H
?get_screen_pixel_format@@YGXPAH000@Z ENDP		; get_screen_pixel_format
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_ddsd$ = -124						; size = 124
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_surface$ = 16						; size = 4
?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z PROC ; create_video_screen, COMDAT

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 392  : 
; 393  : 	DDSURFACEDESC2
; 394  : 		ddsd;
; 395  : 
; 396  : 	//
; 397  : 	// Create a screen for the render buffer
; 398  : 	//
; 399  : 
; 400  : 	memset ( &ddsd, 0, sizeof ( ddsd ) );

  0000c	6a 7c		 push	 124			; 0000007cH
  0000e	6a 00		 push	 0
  00010	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 
; 402  : 	ddsd.dwSize = sizeof ( ddsd );

  0001c	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 403  : 
; 404  : 	f3d_surface_description ( surface, &ddsd );

  00023	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR _surface$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 405  : 
; 406  : 	video_screen_structure.width = width;

  00030	66 8b 45 08	 mov	 ax, WORD PTR _width$[ebp]
  00034	66 a3 04 00 00
	00		 mov	 WORD PTR ?video_screen_structure@@3USCREEN@@A+4, ax

; 407  : 
; 408  : 	video_screen_structure.height = height;

  0003a	66 8b 45 0c	 mov	 ax, WORD PTR _height$[ebp]
  0003e	66 a3 06 00 00
	00		 mov	 WORD PTR ?video_screen_structure@@3USCREEN@@A+6, ax

; 409  : 
; 410  : 	video_screen_structure.surface = surface;

  00044	8b 45 10	 mov	 eax, DWORD PTR _surface$[ebp]
  00047	a3 18 00 00 00	 mov	 DWORD PTR ?video_screen_structure@@3USCREEN@@A+24, eax

; 411  : 
; 412  : 	video_screen_structure.video_memory = TRUE;

  0004c	66 a1 0a 00 00
	00		 mov	 ax, WORD PTR ?video_screen_structure@@3USCREEN@@A+10
  00052	66 83 c8 04	 or	 ax, 4
  00056	66 a3 0a 00 00
	00		 mov	 WORD PTR ?video_screen_structure@@3USCREEN@@A+10, ax

; 413  : 
; 414  : 	video_screen = &video_screen_structure;

  0005c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?video_screen@@3PAUSCREEN@@A, OFFSET ?video_screen_structure@@3USCREEN@@A ; video_screen

; 415  : 
; 416  : 	video_screen_structure.pixel_length = ddsd.ddpfPixelFormat.dwRGBBitCount;

  00066	66 8b 45 d8	 mov	 ax, WORD PTR _ddsd$[ebp+84]
  0006a	66 a3 08 00 00
	00		 mov	 WORD PTR ?video_screen_structure@@3USCREEN@@A+8, ax

; 417  : 
; 418  : 	//
; 419  : 	// Create a screen for the display buffer ( possibly the same as the render buffer )
; 420  : 	//
; 421  : 
; 422  : 	memset ( &ddsd, 0, sizeof ( ddsd ) );

  00070	6a 7c		 push	 124			; 0000007cH
  00072	6a 00		 push	 0
  00074	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 423  : 
; 424  : 	ddsd.dwSize = sizeof ( ddsd );

  00080	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 425  : 
; 426  : 	f3d_surface_description ( f3d_surface_front(), &ddsd );

  00087	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ ; f3d_surface_front
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 427  : 
; 428  : 	display_screen_structure.width = width;

  00096	66 8b 45 08	 mov	 ax, WORD PTR _width$[ebp]
  0009a	66 a3 04 00 00
	00		 mov	 WORD PTR ?display_screen_structure@@3USCREEN@@A+4, ax

; 429  : 
; 430  : 	display_screen_structure.height = height;

  000a0	66 8b 45 0c	 mov	 ax, WORD PTR _height$[ebp]
  000a4	66 a3 06 00 00
	00		 mov	 WORD PTR ?display_screen_structure@@3USCREEN@@A+6, ax

; 431  : 
; 432  : 	display_screen_structure.surface = f3d_surface_front ();

  000aa	e8 00 00 00 00	 call	 ?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ ; f3d_surface_front
  000af	a3 18 00 00 00	 mov	 DWORD PTR ?display_screen_structure@@3USCREEN@@A+24, eax

; 433  : 
; 434  : 	display_screen_structure.video_memory = TRUE;

  000b4	66 a1 0a 00 00
	00		 mov	 ax, WORD PTR ?display_screen_structure@@3USCREEN@@A+10
  000ba	66 83 c8 04	 or	 ax, 4
  000be	66 a3 0a 00 00
	00		 mov	 WORD PTR ?display_screen_structure@@3USCREEN@@A+10, ax

; 435  : 
; 436  : 	display_screen = &display_screen_structure;

  000c4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?display_screen@@3PAUSCREEN@@A, OFFSET ?display_screen_structure@@3USCREEN@@A ; display_screen

; 437  : 
; 438  : 	display_screen_structure.pixel_length = ddsd.ddpfPixelFormat.dwRGBBitCount;

  000ce	66 8b 45 d8	 mov	 ax, WORD PTR _ddsd$[ebp+84]
  000d2	66 a3 08 00 00
	00		 mov	 WORD PTR ?display_screen_structure@@3USCREEN@@A+8, ax

; 439  : 
; 440  : 	set_pixel_format ();

  000d8	e8 00 00 00 00	 call	 ?set_pixel_format@@YGXXZ ; set_pixel_format

; 441  : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 0c 00	 ret	 12			; 0000000cH
?create_video_screen@@YGXHHPAUIDirectDrawSurface7@@@Z ENDP ; create_video_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?destroy_screen@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
?destroy_screen@@YGHPAUSCREEN@@@Z PROC			; destroy_screen, COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 383  : 	return f3d_texture_release ( this_screen );

  00009	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?f3d_texture_release@@YGHPAUSCREEN@@@Z ; f3d_texture_release

; 384  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?destroy_screen@@YGHPAUSCREEN@@@Z ENDP			; destroy_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z
_TEXT	SEGMENT
_this_screen$ = 8					; size = 4
_texture_index$ = 12					; size = 4
?set_system_texture_screen@@YGXPAUSCREEN@@H@Z PROC	; set_system_texture_screen, COMDAT

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 359  : 
; 360  : 	ASSERT ( texture_index >= 0 );

  00009	83 7d 0c 00	 cmp	 DWORD PTR _texture_index$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@set_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_texture_screen@@YGXPAUSCREEN@@H@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DDJNNIE@texture_index?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_system:

; 361  : 
; 362  : 	system_textures[texture_index] = this_screen;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _texture_index$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  0002d	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4], ecx

; 363  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ENDP	; set_system_texture_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z
_TEXT	SEGMENT
_this_screen$ = -8					; size = 4
_count$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_type$ = 16						; size = 4
?create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z PROC ; create_user_3dvisual_texture_screen, COMDAT

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 314  : 
; 315  : 	int
; 316  : 		count;
; 317  : 
; 318  : 	screen
; 319  : 		*this_screen;
; 320  : 
; 321  : 	ASSERT ( width );

  00009	83 7d 08 00	 cmp	 DWORD PTR _width$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN5@create_use
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_05IGKADHGO@width@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@create_use:

; 322  : 	ASSERT ( height );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _height$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN6@create_use
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06LNLHEAAG@height@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@create_use:

; 323  : //	ASSERT ( width == height );
; 324  : 	ASSERT ( video_screen );

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?video_screen@@3PAUSCREEN@@A, 0 ; video_screen
  0004c	75 18		 jne	 SHORT $LN7@create_use
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z@4JA
  00053	83 c0 0b	 add	 eax, 11			; 0000000bH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OOBGIFBC@video_screen@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@create_use:

; 325  : 
; 326  : 	for ( count = 0; count < MAX_INTERNAL_SCREENS; count++ )

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $LN4@create_use
$LN2@create_use:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@create_use:
  00078	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  0007f	0f 8d ae 00 00
	00		 jge	 $LN3@create_use

; 327  : 	{
; 328  : 
; 329  : 		if ( !screen_array[count].used )

  00085	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00089	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  00090	66 d1 e9	 shr	 cx, 1
  00093	66 83 e1 01	 and	 cx, 1
  00097	0f b7 d1	 movzx	 edx, cx
  0009a	85 d2		 test	 edx, edx
  0009c	0f 85 8c 00 00
	00		 jne	 $LN8@create_use

; 330  : 		{
; 331  : 
; 332  : 			this_screen = &screen_array[count];

  000a2	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  000a6	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  000ab	89 45 f8	 mov	 DWORD PTR _this_screen$[ebp], eax

; 333  : 
; 334  : 			this_screen->width = width;

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000b1	66 8b 4d 08	 mov	 cx, WORD PTR _width$[ebp]
  000b5	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 335  : 			this_screen->height = height;

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000bc	66 8b 4d 0c	 mov	 cx, WORD PTR _height$[ebp]
  000c0	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 336  : 			this_screen->locked = FALSE;

  000c4	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000cc	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  000d0	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000d3	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 337  : 			this_screen->video_memory = FALSE;

  000d7	b8 fb ff 00 00	 mov	 eax, 65531		; 0000fffbH
  000dc	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000df	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  000e3	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000e6	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 338  : 			this_screen->pitch = 0;

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000ed	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 339  : 			this_screen->data = NULL;

  000f4	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000f7	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 340  : 			this_screen->used = TRUE;

  000fe	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00101	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00105	66 83 c9 02	 or	 cx, 2
  00109	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  0010c	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 341  : 
; 342  : 			create_texture_screen_data ( this_screen, width, height, (texture_map_types) type, 0, TRUE );

  00110	6a 01		 push	 1
  00112	6a 00		 push	 0
  00114	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0011f	52		 push	 edx
  00120	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?create_texture_screen_data@@YGXPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HH@Z ; create_texture_screen_data

; 343  : 
; 344  : 			return ( this_screen );

  00129	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0012c	eb 14		 jmp	 SHORT $LN1@create_use
$LN8@create_use:

; 345  : 		}
; 346  : 	}

  0012e	e9 3c ff ff ff	 jmp	 $LN2@create_use
$LN3@create_use:

; 347  : 
; 348  : 	debug_fatal ( "Run out of available screens" );

  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BDMMBHCE@Run?5out?5of?5available?5screens@
  00138	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0013d	83 c4 04	 add	 esp, 4

; 349  : 
; 350  : 	return ( NULL );

  00140	33 c0		 xor	 eax, eax
$LN1@create_use:

; 351  : }

  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 0c 00	 ret	 12			; 0000000cH
?create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z ENDP ; create_user_3dvisual_texture_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z
_TEXT	SEGMENT
_texture_index$ = 8					; size = 4
?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z PROC ; create_screen_for_system_texture, COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 371  : 
; 372  : 	ASSERT ( video_screen );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?video_screen@@3PAUSCREEN@@A, 0 ; video_screen
  00010	75 18		 jne	 SHORT $LN2@create_scr
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_screen_for_system_texture@@YGPAUSCREEN@@H@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OOBGIFBC@video_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@create_scr:

; 373  : 
; 374  : 	return ( system_textures[texture_index] );

  0002a	8b 45 08	 mov	 eax, DWORD PTR _texture_index$[ebp]
  0002d	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]

; 375  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ENDP ; create_screen_for_system_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z
_TEXT	SEGMENT
_this_screen$ = -8					; size = 4
_count$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_texture_index$ = 16					; size = 4
_type$ = 20						; size = 4
?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z PROC	; create_system_texture_screen, COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 271  : 
; 272  : 	int
; 273  : 		count;
; 274  : 
; 275  : 	screen
; 276  : 		*this_screen;
; 277  : 
; 278  : 	ASSERT ( width );

  00009	83 7d 08 00	 cmp	 DWORD PTR _width$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN5@create_sys
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_05IGKADHGO@width@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@create_sys:

; 279  : 	ASSERT ( height );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _height$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN6@create_sys
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06LNLHEAAG@height@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@create_sys:

; 280  : 	ASSERT ( video_screen );

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?video_screen@@3PAUSCREEN@@A, 0 ; video_screen
  0004c	75 18		 jne	 SHORT $LN7@create_sys
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
  00053	83 c0 0a	 add	 eax, 10			; 0000000aH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OOBGIFBC@video_screen@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@create_sys:

; 281  : 
; 282  : 	for ( count = 0; count < MAX_INTERNAL_SCREENS; count++ )

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $LN4@create_sys
$LN2@create_sys:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@create_sys:
  00078	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  0007f	7d 4f		 jge	 SHORT $LN3@create_sys

; 283  : 	{
; 284  : 
; 285  : 		if ( !screen_array[count].used )

  00081	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00085	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  0008c	66 d1 e9	 shr	 cx, 1
  0008f	66 83 e1 01	 and	 cx, 1
  00093	0f b7 d1	 movzx	 edx, cx
  00096	85 d2		 test	 edx, edx
  00098	75 34		 jne	 SHORT $LN8@create_sys

; 286  : 		{
; 287  : 
; 288  : 			this_screen = &screen_array[count];

  0009a	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  0009e	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  000a3	89 45 f8	 mov	 DWORD PTR _this_screen$[ebp], eax

; 289  : 
; 290  : 			if ( create_system_indexed_texture_map ( this_screen, width, height, texture_index, (screen_format_types) type ) )

  000a6	8b 45 14	 mov	 eax, DWORD PTR _type$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d 10	 mov	 ecx, DWORD PTR _texture_index$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  000b1	52		 push	 edx
  000b2	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?create_system_indexed_texture_map@@YGHPAUSCREEN@@HHHW4SCREEN_FORMAT_TYPES@@@Z ; create_system_indexed_texture_map
  000bf	85 c0		 test	 eax, eax
  000c1	74 07		 je	 SHORT $LN9@create_sys

; 291  : 			{
; 292  : 
; 293  : 				return ( this_screen );

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000c6	eb 17		 jmp	 SHORT $LN1@create_sys

; 294  : 			}
; 295  : 			else

  000c8	eb 04		 jmp	 SHORT $LN8@create_sys
$LN9@create_sys:

; 296  : 			{
; 297  : 
; 298  : 				return ( NULL );

  000ca	33 c0		 xor	 eax, eax
  000cc	eb 11		 jmp	 SHORT $LN1@create_sys
$LN8@create_sys:

; 299  : 			}
; 300  : 		}
; 301  : 	}

  000ce	eb 9f		 jmp	 SHORT $LN2@create_sys
$LN3@create_sys:

; 302  : 
; 303  : 	debug_fatal ( "Run out of available screens" );

  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BDMMBHCE@Run?5out?5of?5available?5screens@
  000d5	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000da	83 c4 04	 add	 esp, 4

; 304  : 
; 305  : 	return ( NULL );

  000dd	33 c0		 xor	 eax, eax
$LN1@create_sys:

; 306  : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 10 00	 ret	 16			; 00000010H
?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ENDP	; create_system_texture_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z
_TEXT	SEGMENT
_this_screen$ = -8					; size = 4
_count$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_type$ = 16						; size = 4
_number_of_mipmaps$ = 20				; size = 4
?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z PROC	; create_user_texture_screen, COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 227  : 
; 228  : 	int
; 229  : 		count;
; 230  : 
; 231  : 	screen
; 232  : 		*this_screen;
; 233  : 
; 234  : 	ASSERT ( width );

  00009	83 7d 08 00	 cmp	 DWORD PTR _width$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN5@create_use
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_05IGKADHGO@width@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@create_use:

; 235  : 	ASSERT ( height );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _height$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN6@create_use
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06LNLHEAAG@height@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@create_use:

; 236  : 	ASSERT ( video_screen );

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?video_screen@@3PAUSCREEN@@A, 0 ; video_screen
  0004c	75 18		 jne	 SHORT $LN7@create_use
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z@4JA
  00053	83 c0 0a	 add	 eax, 10			; 0000000aH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OOBGIFBC@video_screen@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@create_use:

; 237  : 
; 238  : 	for ( count = 0; count < MAX_INTERNAL_SCREENS; count++ )

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $LN4@create_use
$LN2@create_use:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@create_use:
  00078	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  0007f	0f 8d b0 00 00
	00		 jge	 $LN3@create_use

; 239  : 	{
; 240  : 
; 241  : 		if ( !screen_array[count].used )

  00085	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00089	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  00090	66 d1 e9	 shr	 cx, 1
  00093	66 83 e1 01	 and	 cx, 1
  00097	0f b7 d1	 movzx	 edx, cx
  0009a	85 d2		 test	 edx, edx
  0009c	0f 85 8e 00 00
	00		 jne	 $LN8@create_use

; 242  : 		{
; 243  : 
; 244  : 			this_screen = &screen_array[count];

  000a2	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  000a6	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  000ab	89 45 f8	 mov	 DWORD PTR _this_screen$[ebp], eax

; 245  : 
; 246  : 			this_screen->width = width;

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000b1	66 8b 4d 08	 mov	 cx, WORD PTR _width$[ebp]
  000b5	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 247  : 			this_screen->height = height;

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000bc	66 8b 4d 0c	 mov	 cx, WORD PTR _height$[ebp]
  000c0	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 248  : 			this_screen->locked = FALSE;

  000c4	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000cc	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  000d0	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000d3	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 249  : 			this_screen->video_memory = FALSE;

  000d7	b8 fb ff 00 00	 mov	 eax, 65531		; 0000fffbH
  000dc	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000df	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  000e3	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000e6	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 250  : 			this_screen->pitch = 0;

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000ed	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 251  : 			this_screen->data = NULL;

  000f4	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000f7	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 252  : 			this_screen->used = TRUE;

  000fe	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00101	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00105	66 83 c9 02	 or	 cx, 2
  00109	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  0010c	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 253  : 
; 254  : 			create_texture_screen_data ( this_screen, width, height, (texture_map_types) type, number_of_mipmaps, FALSE );

  00110	6a 00		 push	 0
  00112	8b 45 14	 mov	 eax, DWORD PTR _number_of_mipmaps$[ebp]
  00115	50		 push	 eax
  00116	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  00119	51		 push	 ecx
  0011a	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0011d	52		 push	 edx
  0011e	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00121	50		 push	 eax
  00122	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 ?create_texture_screen_data@@YGXPAUSCREEN@@HHW4TEXTURE_MAP_TYPES@@HH@Z ; create_texture_screen_data

; 255  : 
; 256  : 			return ( this_screen );

  0012b	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0012e	eb 14		 jmp	 SHORT $LN1@create_use
$LN8@create_use:

; 257  : 		}
; 258  : 	}

  00130	e9 3a ff ff ff	 jmp	 $LN2@create_use
$LN3@create_use:

; 259  : 
; 260  : 	debug_fatal ( "Run out of available screens" );

  00135	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BDMMBHCE@Run?5out?5of?5available?5screens@
  0013a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0013f	83 c4 04	 add	 esp, 4

; 261  : 
; 262  : 	return ( NULL );

  00142	33 c0		 xor	 eax, eax
$LN1@create_use:

; 263  : }

  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 10 00	 ret	 16			; 00000010H
?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ENDP	; create_user_texture_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?get_free_screen@@YGPAUSCREEN@@XZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?get_free_screen@@YGPAUSCREEN@@XZ PROC			; get_free_screen, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 202  : 
; 203  : 	int
; 204  : 		count;
; 205  : 
; 206  : 	for ( count = 0; count < MAX_INTERNAL_SCREENS; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@get_free_s
$LN2@get_free_s:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_free_s:
  0001b	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  00022	7d 26		 jge	 SHORT $LN3@get_free_s

; 207  : 	{
; 208  : 
; 209  : 		if ( !screen_array[count].used )

  00024	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00028	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  0002f	66 d1 e9	 shr	 cx, 1
  00032	66 83 e1 01	 and	 cx, 1
  00036	0f b7 d1	 movzx	 edx, cx
  00039	85 d2		 test	 edx, edx
  0003b	75 0b		 jne	 SHORT $LN5@get_free_s

; 210  : 		{
; 211  : 
; 212  : 			return ( &screen_array[count] );

  0003d	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00041	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  00046	eb 11		 jmp	 SHORT $LN1@get_free_s
$LN5@get_free_s:

; 213  : 		}
; 214  : 	}

  00048	eb c8		 jmp	 SHORT $LN2@get_free_s
$LN3@get_free_s:

; 215  : 
; 216  : 	debug_fatal ( "Unable to create a free screen" );

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MDKCMJBC@Unable?5to?5create?5a?5free?5screen@
  0004f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00054	83 c4 04	 add	 esp, 4

; 217  : 
; 218  : 	return ( NULL );

  00057	33 c0		 xor	 eax, eax
$LN1@get_free_s:

; 219  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?get_free_screen@@YGPAUSCREEN@@XZ ENDP			; get_free_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?create_screen@@YGPAUSCREEN@@HHH@Z
_TEXT	SEGMENT
_this_screen$ = -8					; size = 4
_count$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_video_memory$ = 16					; size = 4
?create_screen@@YGPAUSCREEN@@HHH@Z PROC			; create_screen, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 151  : 
; 152  : 	int
; 153  : 		count;
; 154  : 
; 155  : 	screen
; 156  : 		*this_screen;
; 157  : 
; 158  : 	ASSERT ( width );

  00009	83 7d 08 00	 cmp	 DWORD PTR _width$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN5@create_scr
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_screen@@YGPAUSCREEN@@HHH@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_05IGKADHGO@width@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@create_scr:

; 159  : 	ASSERT ( height );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _height$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN6@create_scr
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_screen@@YGPAUSCREEN@@HHH@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06LNLHEAAG@height@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@create_scr:

; 160  : 	ASSERT ( video_screen );

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?video_screen@@3PAUSCREEN@@A, 0 ; video_screen
  0004c	75 18		 jne	 SHORT $LN7@create_scr
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_screen@@YGPAUSCREEN@@HHH@Z@4JA
  00053	83 c0 0a	 add	 eax, 10			; 0000000aH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMMAPAKC@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OOBGIFBC@video_screen@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@create_scr:

; 161  : 
; 162  : 	for ( count = 0; count < MAX_INTERNAL_SCREENS; count++ )

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $LN4@create_scr
$LN2@create_scr:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@create_scr:
  00078	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  0007f	0f 8d 05 01 00
	00		 jge	 $LN3@create_scr

; 163  : 	{
; 164  : 
; 165  : 		if ( !screen_array[count].used )

  00085	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00089	66 8b 88 0a 00
	00 00		 mov	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  00090	66 d1 e9	 shr	 cx, 1
  00093	66 83 e1 01	 and	 cx, 1
  00097	0f b7 d1	 movzx	 edx, cx
  0009a	85 d2		 test	 edx, edx
  0009c	0f 85 e3 00 00
	00		 jne	 $LN8@create_scr

; 166  : 		{
; 167  : 
; 168  : 			this_screen = &screen_array[count];

  000a2	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  000a6	05 00 00 00 00	 add	 eax, OFFSET ?screen_array@@3PAUSCREEN@@A ; screen_array
  000ab	89 45 f8	 mov	 DWORD PTR _this_screen$[ebp], eax

; 169  : 
; 170  : 			this_screen->width = width;

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000b1	66 8b 4d 08	 mov	 cx, WORD PTR _width$[ebp]
  000b5	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 171  : 			this_screen->height = height;

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000bc	66 8b 4d 0c	 mov	 cx, WORD PTR _height$[ebp]
  000c0	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 172  : 			this_screen->locked = FALSE;

  000c4	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  000cc	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  000d0	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000d3	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 173  : 			this_screen->video_memory = video_memory;

  000d7	66 8b 45 10	 mov	 ax, WORD PTR _video_memory$[ebp]
  000db	66 83 e0 01	 and	 ax, 1
  000df	66 c1 e0 02	 shl	 ax, 2
  000e3	b9 fb ff 00 00	 mov	 ecx, 65531		; 0000fffbH
  000e8	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  000eb	66 23 4a 0a	 and	 cx, WORD PTR [edx+10]
  000ef	66 0b c8	 or	 cx, ax
  000f2	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000f5	66 89 48 0a	 mov	 WORD PTR [eax+10], cx

; 174  : 			this_screen->pitch = 0;

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  000fc	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 175  : 			this_screen->data = NULL;

  00103	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00106	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 176  : 
; 177  : 			this_screen->clone_screen = FALSE;

  0010d	b8 f7 ff 00 00	 mov	 eax, 65527		; 0000fff7H
  00112	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00115	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  00119	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  0011c	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 178  : 			this_screen->do_not_destroy = FALSE;

  00120	b8 bf ff 00 00	 mov	 eax, 65471		; 0000ffbfH
  00125	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  00128	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  0012c	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  0012f	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 179  : 			this_screen->usable_as_texture = FALSE;

  00133	b8 ef ff 00 00	 mov	 eax, 65519		; 0000ffefH
  00138	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  0013b	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  0013f	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  00142	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 180  : 
; 181  : 			this_screen->pixel_length = video_screen->pixel_length;

  00146	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0014f	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  00153	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 182  : 
; 183  : 			this_screen->used = TRUE;

  00157	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0015a	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0015e	66 83 c9 02	 or	 cx, 2
  00162	8b 55 f8	 mov	 edx, DWORD PTR _this_screen$[ebp]
  00165	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 184  : 
; 185  : 			this_screen->surface = ddraw_create_surface ( width, height, video_memory );

  00169	8b 45 10	 mov	 eax, DWORD PTR _video_memory$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00170	51		 push	 ecx
  00171	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00174	52		 push	 edx
  00175	e8 00 00 00 00	 call	 ?ddraw_create_surface@@YGPAUIDirectDrawSurface7@@HHH@Z ; ddraw_create_surface
  0017a	8b 4d f8	 mov	 ecx, DWORD PTR _this_screen$[ebp]
  0017d	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 186  : 
; 187  : 			return ( this_screen );

  00180	8b 45 f8	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00183	eb 14		 jmp	 SHORT $LN1@create_scr
$LN8@create_scr:

; 188  : 		}
; 189  : 	}

  00185	e9 e5 fe ff ff	 jmp	 $LN2@create_scr
$LN3@create_scr:

; 190  : 
; 191  : 	debug_fatal ( "Run out of available screens" );

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BDMMBHCE@Run?5out?5of?5available?5screens@
  0018f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00194	83 c4 04	 add	 esp, 4

; 192  : 
; 193  : 	return ( NULL );

  00197	33 c0		 xor	 eax, eax
$LN1@create_scr:

; 194  : }

  00199	5f		 pop	 edi
  0019a	5e		 pop	 esi
  0019b	5b		 pop	 ebx
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c2 0c 00	 ret	 12			; 0000000cH
?create_screen@@YGPAUSCREEN@@HHH@Z ENDP			; create_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\screens.c
;	COMDAT ?initialise_system_graphics_screens@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?initialise_system_graphics_screens@@YGXXZ PROC		; initialise_system_graphics_screens, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 132  : 
; 133  : 	int
; 134  : 		count;
; 135  : 
; 136  : 	for ( count = 0; count < MAX_INTERNAL_SCREENS; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  0001b	81 7d fc 00 20
	00 00		 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  00022	7d 1d		 jge	 SHORT $LN3@initialise

; 137  : 	{
; 138  : 
; 139  : 		screen_array[count].used = FALSE;

  00024	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  00028	b9 fd ff 00 00	 mov	 ecx, 65533		; 0000fffdH
  0002d	66 23 88 0a 00
	00 00		 and	 cx, WORD PTR ?screen_array@@3PAUSCREEN@@A[eax+10]
  00034	6b 55 fc 30	 imul	 edx, DWORD PTR _count$[ebp], 48
  00038	66 89 8a 0a 00
	00 00		 mov	 WORD PTR ?screen_array@@3PAUSCREEN@@A[edx+10], cx

; 140  : 	}

  0003f	eb d1		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 141  : 
; 142  : 	register_exit_function ( destroy_all_screens );

  00041	68 00 00 00 00	 push	 OFFSET ?destroy_all_screens@@YGXXZ ; destroy_all_screens
  00046	e8 00 00 00 00	 call	 ?register_exit_function@@YGXP6GXXZ@Z ; register_exit_function

; 143  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?initialise_system_graphics_screens@@YGXXZ ENDP		; initialise_system_graphics_screens
_TEXT	ENDS
END
