; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\camera\cm_build.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_fmodf
PUBLIC	_sqrtf
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?reset_building_camera@@YGXPAUCAMERA@@@Z	; reset_building_camera
PUBLIC	?reset_building_camera_values@@YGXPAUENTITY@@@Z	; reset_building_camera_values
PUBLIC	?update_building_camera@@YGXPAUCAMERA@@@Z	; update_building_camera
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??reset_building_camera@@YGXPAUCAMERA@@@Z@4JA ; `reset_building_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_03DGOGAGNC@raw@				; `string'
PUBLIC	?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA ; `reset_building_camera_values'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@	; `string'
PUBLIC	?__LINE__Var@?0??update_building_camera@@YGXPAUCAMERA@@@Z@4JA ; `update_building_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3eaa7efa
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@be860a92
PUBLIC	__real@bfc90fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fmod:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z:PROC ; get_object_3d_bounding_box
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?camera_entity@@3PAUENTITY@@A:DWORD		; camera_entity
EXTRN	?adjust_view_left_key@@3HA:DWORD		; adjust_view_left_key
EXTRN	?adjust_view_right_key@@3HA:DWORD		; adjust_view_right_key
EXTRN	?adjust_view_up_key@@3HA:DWORD			; adjust_view_up_key
EXTRN	?adjust_view_down_key@@3HA:DWORD		; adjust_view_down_key
EXTRN	?adjust_view_zoom_in_key@@3HA:DWORD		; adjust_view_zoom_in_key
EXTRN	?adjust_view_zoom_out_key@@3HA:DWORD		; adjust_view_zoom_out_key
EXTRN	?joystick_pov_left@@3HA:DWORD			; joystick_pov_left
EXTRN	?joystick_pov_right@@3HA:DWORD			; joystick_pov_right
EXTRN	?joystick_pov_up@@3HA:DWORD			; joystick_pov_up
EXTRN	?joystick_pov_down@@3HA:DWORD			; joystick_pov_down
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eaa7efa
CONST	SEGMENT
__real@3eaa7efa DD 03eaa7efar			; 0.333
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_building_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_building_camera@@YGXPAUCAMERA@@@Z@4JA DD 0aeH ; `update_building_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
CONST	SEGMENT
??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@ DB 'get_camera_entity ()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA DD 069H ; `reset_building_camera_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\camera\cm_bui'
	DB	'ld.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??reset_building_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_building_camera@@YGXPAUCAMERA@@@Z@4JA DD 05cH ; `reset_building_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_build.c
;	COMDAT ?update_building_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv346 = -108						; size = 4
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
_rel_camera_position$ = -20				; size = 12
_z_max$ = -8						; size = 4
_z_min$ = -4						; size = 4
_raw$ = 8						; size = 4
?update_building_camera@@YGXPAUCAMERA@@@Z PROC		; update_building_camera, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 175  : 	float
; 176  : 		z_min,
; 177  : 		z_max;
; 178  : 
; 179  : 	vec3d
; 180  : 		rel_camera_position;
; 181  : 
; 182  : 	//
; 183  : 	// pre-amble
; 184  : 	//
; 185  : 
; 186  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@update_bui
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_building_camera@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_bui:

; 187  : 
; 188  : 	raw->position = raw->building_camera_position;

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00039	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 189  : 
; 190  : 	//
; 191  : 	// adjust camera heading
; 192  : 	//
; 193  : 
; 194  : 	if (adjust_view_left_key || joystick_pov_left)

  00042	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_left_key@@3HA, 0 ; adjust_view_left_key
  00049	75 09		 jne	 SHORT $LN5@update_bui
  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_left@@3HA, 0 ; joystick_pov_left
  00052	74 28		 je	 SHORT $LN3@update_bui
$LN5@update_bui:

; 195  : 	{
; 196  : 		raw->building_camera_heading += BUILDING_CAMERA_ROTATE_RATE * get_delta_time ();

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0005c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00064	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00067	f3 0f 58 80 c4
	00 00 00	 addss	 xmm0, DWORD PTR [eax+196]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00072	f3 0f 11 81 c4
	00 00 00	 movss	 DWORD PTR [ecx+196], xmm0
  0007a	eb 3c		 jmp	 SHORT $LN6@update_bui
$LN3@update_bui:

; 197  : 	}
; 198  : 	else if (adjust_view_right_key || joystick_pov_right)

  0007c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_right_key@@3HA, 0 ; adjust_view_right_key
  00083	75 09		 jne	 SHORT $LN7@update_bui
  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_right@@3HA, 0 ; joystick_pov_right
  0008c	74 2a		 je	 SHORT $LN6@update_bui
$LN7@update_bui:

; 199  : 	{
; 200  : 		raw->building_camera_heading -= BUILDING_CAMERA_ROTATE_RATE * get_delta_time ();

  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00096	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0009e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000a1	f3 0f 10 88 c4
	00 00 00	 movss	 xmm1, DWORD PTR [eax+196]
  000a9	f3 0f 5c c8	 subss	 xmm1, xmm0
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000b0	f3 0f 11 89 c4
	00 00 00	 movss	 DWORD PTR [ecx+196], xmm1
$LN6@update_bui:

; 201  : 	}
; 202  : 
; 203  : 	raw->building_camera_heading = wrap_angle (raw->building_camera_heading);

  000b8	51		 push	 ecx
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000c9	f3 0f 10 80 c4
	00 00 00	 movss	 xmm0, DWORD PTR [eax+196]
  000d1	51		 push	 ecx
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000df	d9 99 c4 00 00
	00		 fstp	 DWORD PTR [ecx+196]

; 204  : 
; 205  : 	//
; 206  : 	// adjust camera pitch
; 207  : 	//
; 208  : 
; 209  : 	if (adjust_view_up_key || joystick_pov_up)

  000e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_up_key@@3HA, 0 ; adjust_view_up_key
  000ec	75 09		 jne	 SHORT $LN10@update_bui
  000ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_up@@3HA, 0 ; joystick_pov_up
  000f5	74 56		 je	 SHORT $LN8@update_bui
$LN10@update_bui:

; 210  : 	{
; 211  : 		raw->building_camera_pitch -= BUILDING_CAMERA_ROTATE_RATE * get_delta_time ();

  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  000ff	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00107	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0010a	f3 0f 10 88 c8
	00 00 00	 movss	 xmm1, DWORD PTR [eax+200]
  00112	f3 0f 5c c8	 subss	 xmm1, xmm0
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00119	f3 0f 11 89 c8
	00 00 00	 movss	 DWORD PTR [ecx+200], xmm1

; 212  : 
; 213  : 		raw->building_camera_pitch = max (BUILDING_CAMERA_ROTATE_DOWN_LIMIT, raw->building_camera_pitch);

  00121	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00129	f3 0f 11 45 a8	 movss	 DWORD PTR $T5[ebp], xmm0
  0012e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00131	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  00136	50		 push	 eax
  00137	8d 4d a8	 lea	 ecx, DWORD PTR $T5[ebp]
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00140	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00143	8b 00		 mov	 eax, DWORD PTR [eax]
  00145	89 82 c8 00 00
	00		 mov	 DWORD PTR [edx+200], eax
  0014b	eb 62		 jmp	 SHORT $LN11@update_bui
$LN8@update_bui:

; 214  : 	}
; 215  : 	else if (adjust_view_down_key || joystick_pov_down)

  0014d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_down_key@@3HA, 0 ; adjust_view_down_key
  00154	75 09		 jne	 SHORT $LN12@update_bui
  00156	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?joystick_pov_down@@3HA, 0 ; joystick_pov_down
  0015d	74 50		 je	 SHORT $LN11@update_bui
$LN12@update_bui:

; 216  : 	{
; 217  : 		raw->building_camera_pitch += BUILDING_CAMERA_ROTATE_RATE * get_delta_time ();

  0015f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00167	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0016f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00172	f3 0f 58 80 c8
	00 00 00	 addss	 xmm0, DWORD PTR [eax+200]
  0017a	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0017d	f3 0f 11 81 c8
	00 00 00	 movss	 DWORD PTR [ecx+200], xmm0

; 218  : 
; 219  : 		raw->building_camera_pitch = min (BUILDING_CAMERA_ROTATE_UP_LIMIT, raw->building_camera_pitch);

  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0018d	f3 0f 11 45 a4	 movss	 DWORD PTR $T4[ebp], xmm0
  00192	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00195	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  0019a	50		 push	 eax
  0019b	8d 4d a4	 lea	 ecx, DWORD PTR $T4[ebp]
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001a4	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  001a7	8b 00		 mov	 eax, DWORD PTR [eax]
  001a9	89 82 c8 00 00
	00		 mov	 DWORD PTR [edx+200], eax
$LN11@update_bui:

; 220  : 	}
; 221  : 
; 222  : 	//
; 223  : 	// adjust camera zoom
; 224  : 	//
; 225  : 
; 226  : 	if (adjust_view_zoom_in_key)

  001af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_zoom_in_key@@3HA, 0 ; adjust_view_zoom_in_key
  001b6	74 51		 je	 SHORT $LN13@update_bui

; 227  : 	{
; 228  : 		raw->building_camera_zoom -= BUILDING_CAMERA_ZOOM_RATE * get_delta_time ();

  001b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001c0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  001c8	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001cb	f3 0f 10 88 cc
	00 00 00	 movss	 xmm1, DWORD PTR [eax+204]
  001d3	f3 0f 5c c8	 subss	 xmm1, xmm0
  001d7	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001da	f3 0f 11 89 cc
	00 00 00	 movss	 DWORD PTR [ecx+204], xmm1

; 229  : 
; 230  : 		raw->building_camera_zoom = max (BUILDING_CAMERA_ZOOM_IN_LIMIT, raw->building_camera_zoom);

  001e2	0f 57 c0	 xorps	 xmm0, xmm0
  001e5	f3 0f 11 45 a0	 movss	 DWORD PTR $T3[ebp], xmm0
  001ea	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001ed	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  001f2	50		 push	 eax
  001f3	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  001f6	51		 push	 ecx
  001f7	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001fc	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  001ff	8b 00		 mov	 eax, DWORD PTR [eax]
  00201	89 82 cc 00 00
	00		 mov	 DWORD PTR [edx+204], eax
  00207	eb 59		 jmp	 SHORT $LN15@update_bui
$LN13@update_bui:

; 231  : 	}
; 232  : 	else if (adjust_view_zoom_out_key)

  00209	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?adjust_view_zoom_out_key@@3HA, 0 ; adjust_view_zoom_out_key
  00210	74 50		 je	 SHORT $LN15@update_bui

; 233  : 	{
; 234  : 		raw->building_camera_zoom += BUILDING_CAMERA_ZOOM_RATE * get_delta_time ();

  00212	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00222	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00225	f3 0f 58 80 cc
	00 00 00	 addss	 xmm0, DWORD PTR [eax+204]
  0022d	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00230	f3 0f 11 81 cc
	00 00 00	 movss	 DWORD PTR [ecx+204], xmm0

; 235  : 
; 236  : 		raw->building_camera_zoom = min (BUILDING_CAMERA_ZOOM_OUT_LIMIT, raw->building_camera_zoom);

  00238	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00240	f3 0f 11 45 9c	 movss	 DWORD PTR $T2[ebp], xmm0
  00245	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00248	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  0024d	50		 push	 eax
  0024e	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00251	51		 push	 ecx
  00252	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00257	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  0025a	8b 00		 mov	 eax, DWORD PTR [eax]
  0025c	89 82 cc 00 00
	00		 mov	 DWORD PTR [edx+204], eax
$LN15@update_bui:

; 237  : 	}
; 238  : 
; 239  : 	//
; 240  : 	// get camera attitude
; 241  : 	//
; 242  : 
; 243  : 	get_3d_transformation_matrix (raw->attitude, raw->building_camera_heading, raw->building_camera_pitch, 0.0);

  00262	51		 push	 ecx
  00263	0f 57 c0	 xorps	 xmm0, xmm0
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0026e	51		 push	 ecx
  0026f	f3 0f 10 80 c8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+200]
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0027f	51		 push	 ecx
  00280	f3 0f 10 81 c4
	00 00 00	 movss	 xmm0, DWORD PTR [ecx+196]
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00290	83 c2 18	 add	 edx, 24			; 00000018H
  00293	52		 push	 edx
  00294	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 244  : 
; 245  : 	//
; 246  : 	// get camera position
; 247  : 	//
; 248  : 
; 249  : 	z_min = raw->building_camera_radius * 0.25;

  00299	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0029c	f3 0f 5a 80 c0
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+192]
  002a4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  002ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b0	f3 0f 11 45 fc	 movss	 DWORD PTR _z_min$[ebp], xmm0

; 250  : 
; 251  : 	z_max = raw->building_camera_radius;

  002b5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002b8	f3 0f 10 80 c0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+192]
  002c0	f3 0f 11 45 f8	 movss	 DWORD PTR _z_max$[ebp], xmm0

; 252  : 
; 253  : 	rel_camera_position.x = 0.0;

  002c5	0f 57 c0	 xorps	 xmm0, xmm0
  002c8	f3 0f 11 45 ec	 movss	 DWORD PTR _rel_camera_position$[ebp], xmm0

; 254  : 	rel_camera_position.y = 0.0;

  002cd	0f 57 c0	 xorps	 xmm0, xmm0
  002d0	f3 0f 11 45 f0	 movss	 DWORD PTR _rel_camera_position$[ebp+4], xmm0

; 255  : 	rel_camera_position.z = -(((z_max - z_min) * raw->building_camera_zoom * raw->building_camera_zoom) + z_min);

  002d5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z_max$[ebp]
  002da	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _z_min$[ebp]
  002df	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002e2	f3 0f 59 80 cc
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+204]
  002ea	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  002ed	f3 0f 59 81 cc
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+204]
  002f5	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _z_min$[ebp]
  002fa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00301	f3 0f 11 45 f4	 movss	 DWORD PTR _rel_camera_position$[ebp+8], xmm0

; 256  : 
; 257  : 	multiply_matrix3x3_vec3d (&rel_camera_position, raw->attitude, &rel_camera_position);

  00306	8d 45 ec	 lea	 eax, DWORD PTR _rel_camera_position$[ebp]
  00309	50		 push	 eax
  0030a	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0030d	83 c1 18	 add	 ecx, 24			; 00000018H
  00310	51		 push	 ecx
  00311	8d 55 ec	 lea	 edx, DWORD PTR _rel_camera_position$[ebp]
  00314	52		 push	 edx
  00315	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 258  : 
; 259  : 	raw->position.x = raw->building_camera_position.x + rel_camera_position.x;

  0031a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0031d	f3 0f 10 80 b4
	00 00 00	 movss	 xmm0, DWORD PTR [eax+180]
  00325	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _rel_camera_position$[ebp]
  0032a	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0032d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 260  : 	raw->position.y = raw->building_camera_position.y + rel_camera_position.y;

  00331	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00334	f3 0f 10 80 b8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+184]
  0033c	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _rel_camera_position$[ebp+4]
  00341	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00344	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 261  : 	raw->position.z = raw->building_camera_position.z + rel_camera_position.z;

  00349	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0034c	f3 0f 10 80 bc
	00 00 00	 movss	 xmm0, DWORD PTR [eax+188]
  00354	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _rel_camera_position$[ebp+8]
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0035c	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 262  : 
; 263  : 	//
; 264  : 	// keep point above ground (unless point off map)
; 265  : 	//
; 266  : 
; 267  : 	if (point_inside_map_area (&raw->position))

  00361	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00364	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00368	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  0036f	0f 82 86 00 00
	00		 jb	 $LN16@update_bui
  00375	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00378	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00380	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00383	72 76		 jb	 SHORT $LN16@update_bui
  00385	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00388	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0038d	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00394	72 65		 jb	 SHORT $LN16@update_bui
  00396	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00399	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  003a1	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  003a5	72 54		 jb	 SHORT $LN16@update_bui

; 268  : 	{
; 269  : 		raw->position.y = max (raw->position.y, get_3d_terrain_point_data (raw->position.x, raw->position.z, &raw->terrain_info) + CAMERA_MIN_HEIGHT_ABOVE_GROUND);

  003a7	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  003aa	83 c0 50	 add	 eax, 80			; 00000050H
  003ad	50		 push	 eax
  003ae	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  003b1	51		 push	 ecx
  003b2	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  003b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bc	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  003bf	51		 push	 ecx
  003c0	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  003ce	d9 5d 94	 fstp	 DWORD PTR tv346[ebp]
  003d1	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv346[ebp]
  003d6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f8ccccd
  003de	f3 0f 11 45 98	 movss	 DWORD PTR $T1[ebp], xmm0
  003e3	8d 45 98	 lea	 eax, DWORD PTR $T1[ebp]
  003e6	50		 push	 eax
  003e7	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  003ea	83 c1 04	 add	 ecx, 4
  003ed	51		 push	 ecx
  003ee	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  003f3	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  003f6	8b 00		 mov	 eax, DWORD PTR [eax]
  003f8	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN16@update_bui:

; 270  : 	}
; 271  : }

  003fb	5f		 pop	 edi
  003fc	5e		 pop	 esi
  003fd	5b		 pop	 ebx
  003fe	8b e5		 mov	 esp, ebp
  00400	5d		 pop	 ebp
  00401	c2 04 00	 ret	 4
?update_building_camera@@YGXPAUCAMERA@@@Z ENDP		; update_building_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_build.c
;	COMDAT ?reset_building_camera_values@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv219 = -96						; size = 8
tv165 = -96						; size = 4
tv92 = -96						; size = 4
tv157 = -92						; size = 4
tv84 = -92						; size = 4
_bounding_box$ = -24					; size = 4
_object_3d_index$ = -20					; size = 4
_dz$ = -16						; size = 4
_dy$ = -12						; size = 4
_dx$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?reset_building_camera_values@@YGXPAUENTITY@@@Z PROC	; reset_building_camera_values, COMDAT

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 106  : 	camera
; 107  : 		*raw;
; 108  : 
; 109  : 	float
; 110  : 		dx,
; 111  : 		dy,
; 112  : 		dz;
; 113  : 
; 114  : 	object_3d_index_numbers
; 115  : 		object_3d_index;
; 116  : 
; 117  : 	object_3d_bounds
; 118  : 		*bounding_box;
; 119  : 
; 120  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@reset_buil
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 0f	 add	 eax, 15			; 0000000fH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@reset_buil:

; 121  : 
; 122  : 	ASSERT (get_camera_entity ());

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?camera_entity@@3PAUENTITY@@A, 0 ; camera_entity
  0002e	75 18		 jne	 SHORT $LN3@reset_buil
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ODENDPAE@get_camera_entity?5?$CI?$CJ@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@reset_buil:

; 123  : 
; 124  : 	raw = (camera *) get_local_entity_data (get_camera_entity ());

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  0004d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00050	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 125  : 
; 126  : 	//
; 127  : 	// position
; 128  : 	//
; 129  : 
; 130  : 	get_local_entity_target_point (en, &raw->building_camera_position);

  00053	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00056	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  0005b	50		 push	 eax
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 131  : 
; 132  : 	//
; 133  : 	// radius
; 134  : 	//
; 135  : 
; 136  : 	object_3d_index = get_local_entity_int_value (en, INT_TYPE_OBJECT_3D_SHAPE);

  00065	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00069	74 0a		 je	 SHORT $LN5@reset_buil
  0006b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	89 4d a4	 mov	 DWORD PTR tv84[ebp], ecx
  00073	eb 21		 jmp	 SHORT $LN6@reset_buil
$LN5@reset_buil:
  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA
  0007b	83 c2 1f	 add	 edx, 31			; 0000001fH
  0007e	52		 push	 edx
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0008f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN6@reset_buil:
  00096	b9 01 00 00 00	 mov	 ecx, 1
  0009b	85 c9		 test	 ecx, ecx
  0009d	74 09		 je	 SHORT $LN7@reset_buil
  0009f	c7 45 a0 92 00
	00 00		 mov	 DWORD PTR tv92[ebp], 146 ; 00000092H
  000a6	eb 21		 jmp	 SHORT $LN8@reset_buil
$LN7@reset_buil:
  000a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA
  000ae	83 c2 1f	 add	 edx, 31			; 0000001fH
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN8@reset_buil:
  000c9	68 92 00 00 00	 push	 146			; 00000092H
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000d1	51		 push	 ecx
  000d2	69 55 a4 5c 04
	00 00		 imul	 edx, DWORD PTR tv84[ebp], 1116
  000d9	8b 45 a0	 mov	 eax, DWORD PTR tv92[ebp]
  000dc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000e3	ff d1		 call	 ecx
  000e5	89 45 ec	 mov	 DWORD PTR _object_3d_index$[ebp], eax

; 137  : 
; 138  : 	bounding_box = get_object_3d_bounding_box (object_3d_index);

  000e8	8b 45 ec	 mov	 eax, DWORD PTR _object_3d_index$[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box
  000f1	89 45 e8	 mov	 DWORD PTR _bounding_box$[ebp], eax

; 139  : 
; 140  : 	dx = bounding_box->xmax - bounding_box->xmin;

  000f4	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box$[ebp]
  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  000fa	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ff	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00103	f3 0f 11 45 f8	 movss	 DWORD PTR _dx$[ebp], xmm0

; 141  : 	dy = bounding_box->ymax;

  00108	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box$[ebp]
  0010b	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00110	f3 0f 11 45 f4	 movss	 DWORD PTR _dy$[ebp], xmm0

; 142  : 	dz = bounding_box->zmax - bounding_box->zmin;

  00115	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box$[ebp]
  00118	8b 4d e8	 mov	 ecx, DWORD PTR _bounding_box$[ebp]
  0011b	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00120	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00125	f3 0f 11 45 f0	 movss	 DWORD PTR _dz$[ebp], xmm0

; 143  : 
; 144  : 	raw->building_camera_radius = sqrt ((dx * dx) + (dy * dy) + (dz * dz)) * 4.0;

  0012a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0012f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  00134	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _dy$[ebp]
  00139	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _dy$[ebp]
  0013e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00142	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _dz$[ebp]
  00147	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  0014c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00150	51		 push	 ecx
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0015b	dd 5d a0	 fstp	 QWORD PTR tv219[ebp]
  0015e	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv219[ebp]
  00163	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  0016b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00172	f3 0f 11 80 c0
	00 00 00	 movss	 DWORD PTR [eax+192], xmm0

; 145  : 
; 146  : 	//
; 147  : 	// heading
; 148  : 	//
; 149  : 
; 150  : 	raw->building_camera_heading = get_local_entity_float_value (en, FLOAT_TYPE_HEADING);

  0017a	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0017e	74 0a		 je	 SHORT $LN9@reset_buil
  00180	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00183	8b 08		 mov	 ecx, DWORD PTR [eax]
  00185	89 4d a4	 mov	 DWORD PTR tv157[ebp], ecx
  00188	eb 21		 jmp	 SHORT $LN10@reset_buil
$LN9@reset_buil:
  0018a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA
  00190	83 c2 2d	 add	 edx, 45			; 0000002dH
  00193	52		 push	 edx
  00194	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN10@reset_buil:
  001ab	b9 01 00 00 00	 mov	 ecx, 1
  001b0	85 c9		 test	 ecx, ecx
  001b2	74 09		 je	 SHORT $LN11@reset_buil
  001b4	c7 45 a0 34 00
	00 00		 mov	 DWORD PTR tv165[ebp], 52 ; 00000034H
  001bb	eb 21		 jmp	 SHORT $LN12@reset_buil
$LN11@reset_buil:
  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_building_camera_values@@YGXPAUENTITY@@@Z@4JA
  001c3	83 c2 2d	 add	 edx, 45			; 0000002dH
  001c6	52		 push	 edx
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001d7	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN12@reset_buil:
  001de	6a 34		 push	 52			; 00000034H
  001e0	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001e3	51		 push	 ecx
  001e4	69 55 a4 bc 02
	00 00		 imul	 edx, DWORD PTR tv157[ebp], 700
  001eb	8b 45 a0	 mov	 eax, DWORD PTR tv165[ebp]
  001ee	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001f5	ff d1		 call	 ecx
  001f7	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  001fa	d9 9a c4 00 00
	00		 fstp	 DWORD PTR [edx+196]

; 151  : 
; 152  : 	raw->building_camera_heading += rad (180.0);

  00200	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00203	f3 0f 5a 80 c4
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+196]
  0020b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@400921fb51000000
  00213	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00217	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0021a	f3 0f 11 81 c4
	00 00 00	 movss	 DWORD PTR [ecx+196], xmm0

; 153  : 
; 154  : 	raw->building_camera_heading = wrap_angle (raw->building_camera_heading);

  00222	51		 push	 ecx
  00223	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0022b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00230	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00233	f3 0f 10 80 c4
	00 00 00	 movss	 xmm0, DWORD PTR [eax+196]
  0023b	51		 push	 ecx
  0023c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00241	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00246	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00249	d9 99 c4 00 00
	00		 fstp	 DWORD PTR [ecx+196]

; 155  : 
; 156  : 	//
; 157  : 	// pitch
; 158  : 	//
; 159  : 
; 160  : 	raw->building_camera_pitch = rad (-15.0);

  0024f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be860a92
  0025a	f3 0f 11 80 c8
	00 00 00	 movss	 DWORD PTR [eax+200], xmm0

; 161  : 
; 162  : 	//
; 163  : 	// zoom
; 164  : 	//
; 165  : 
; 166  : 	raw->building_camera_zoom = 0.333;

  00262	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaa7efa
  0026d	f3 0f 11 80 cc
	00 00 00	 movss	 DWORD PTR [eax+204], xmm0

; 167  : }

  00275	5f		 pop	 edi
  00276	5e		 pop	 esi
  00277	5b		 pop	 ebx
  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c2 04 00	 ret	 4
?reset_building_camera_values@@YGXPAUENTITY@@@Z ENDP	; reset_building_camera_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_build.c
;	COMDAT ?reset_building_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
_raw$ = 8						; size = 4
?reset_building_camera@@YGXPAUCAMERA@@@Z PROC		; reset_building_camera, COMDAT

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 93   : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@reset_buil
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_building_camera@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGKNDAPJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@reset_buil:

; 94   : 
; 95   : 	raw->motion_vector.x = 0.0;

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 96   : 	raw->motion_vector.y = 0.0;

  00032	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 97   : 	raw->motion_vector.z = 0.0;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00040	0f 57 c0	 xorps	 xmm0, xmm0
  00043	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 98   : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?reset_building_camera@@YGXPAUCAMERA@@@Z ENDP		; reset_building_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
END
