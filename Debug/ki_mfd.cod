; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BI@EFJJIEHC@KIOWA_MAIN_MFD_MODE_OFF@	; `string'
PUBLIC	??_C@_0BM@PCCBFJEL@KIOWA_MAIN_MFD_MODE_DAMAGED@	; `string'
PUBLIC	??_C@_0BJ@FPDCHDGK@KIOWA_MAIN_MFD_MODE_FLIR@	; `string'
PUBLIC	??_C@_0BI@MHPIGGDM@KIOWA_MAIN_MFD_MODE_DTV@	; `string'
PUBLIC	??_C@_0BI@OKFKFHPF@KIOWA_MAIN_MFD_MODE_TSD@	; `string'
PUBLIC	??_C@_0BI@JEIGMBBJ@KIOWA_MAIN_MFD_MODE_ASE@	; `string'
PUBLIC	??_C@_0BL@DPPNBBBH@KIOWA_MAIN_MFD_MODE_WEAPON@	; `string'
PUBLIC	??_C@_0BL@MFOHCEE@KIOWA_MAIN_MFD_MODE_SYSTEM@	; `string'
PUBLIC	??_C@_0BL@OFBMDCHK@KIOWA_MAIN_MFD_MODE_ENGINE@	; `string'
PUBLIC	??_C@_0BL@JBIHBPBM@KIOWA_MAIN_MFD_MODE_FLIGHT@	; `string'
PUBLIC	??_C@_0BM@OKNKLBGB@KIOWA_MAIN_MFD_MODE_MISSION@	; `string'
PUBLIC	??_C@_0CB@NLBPPAKP@KIOWA_MAIN_MFD_LOCATION_CO_PILO@ ; `string'
PUBLIC	??_C@_0BO@NKEBPJAG@KIOWA_MAIN_MFD_LOCATION_PILOT@ ; `string'
PUBLIC	??_C@_0BP@KAPMNHIL@KIOWA_MAIN_MFD_LOCATION_CENTER@ ; `string'
_BSS	SEGMENT
?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_main_mfd_mode
?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A DD 01H DUP (?) ; pilot_main_mfd_mode
?center_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A DD 01H DUP (?) ; center_main_mfd_mode
_BSS	ENDS
;	COMDAT ??_C@_0BP@KAPMNHIL@KIOWA_MAIN_MFD_LOCATION_CENTER@
CONST	SEGMENT
??_C@_0BP@KAPMNHIL@KIOWA_MAIN_MFD_LOCATION_CENTER@ DB 'KIOWA_MAIN_MFD_LOC'
	DB	'ATION_CENTER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NKEBPJAG@KIOWA_MAIN_MFD_LOCATION_PILOT@
CONST	SEGMENT
??_C@_0BO@NKEBPJAG@KIOWA_MAIN_MFD_LOCATION_PILOT@ DB 'KIOWA_MAIN_MFD_LOCA'
	DB	'TION_PILOT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NLBPPAKP@KIOWA_MAIN_MFD_LOCATION_CO_PILO@
CONST	SEGMENT
??_C@_0CB@NLBPPAKP@KIOWA_MAIN_MFD_LOCATION_CO_PILO@ DB 'KIOWA_MAIN_MFD_LO'
	DB	'CATION_CO_PILOT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OKNKLBGB@KIOWA_MAIN_MFD_MODE_MISSION@
CONST	SEGMENT
??_C@_0BM@OKNKLBGB@KIOWA_MAIN_MFD_MODE_MISSION@ DB 'KIOWA_MAIN_MFD_MODE_M'
	DB	'ISSION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JBIHBPBM@KIOWA_MAIN_MFD_MODE_FLIGHT@
CONST	SEGMENT
??_C@_0BL@JBIHBPBM@KIOWA_MAIN_MFD_MODE_FLIGHT@ DB 'KIOWA_MAIN_MFD_MODE_FL'
	DB	'IGHT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OFBMDCHK@KIOWA_MAIN_MFD_MODE_ENGINE@
CONST	SEGMENT
??_C@_0BL@OFBMDCHK@KIOWA_MAIN_MFD_MODE_ENGINE@ DB 'KIOWA_MAIN_MFD_MODE_EN'
	DB	'GINE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFOHCEE@KIOWA_MAIN_MFD_MODE_SYSTEM@
CONST	SEGMENT
??_C@_0BL@MFOHCEE@KIOWA_MAIN_MFD_MODE_SYSTEM@ DB 'KIOWA_MAIN_MFD_MODE_SYS'
	DB	'TEM', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DPPNBBBH@KIOWA_MAIN_MFD_MODE_WEAPON@
CONST	SEGMENT
??_C@_0BL@DPPNBBBH@KIOWA_MAIN_MFD_MODE_WEAPON@ DB 'KIOWA_MAIN_MFD_MODE_WE'
	DB	'APON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JEIGMBBJ@KIOWA_MAIN_MFD_MODE_ASE@
CONST	SEGMENT
??_C@_0BI@JEIGMBBJ@KIOWA_MAIN_MFD_MODE_ASE@ DB 'KIOWA_MAIN_MFD_MODE_ASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OKFKFHPF@KIOWA_MAIN_MFD_MODE_TSD@
CONST	SEGMENT
??_C@_0BI@OKFKFHPF@KIOWA_MAIN_MFD_MODE_TSD@ DB 'KIOWA_MAIN_MFD_MODE_TSD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MHPIGGDM@KIOWA_MAIN_MFD_MODE_DTV@
CONST	SEGMENT
??_C@_0BI@MHPIGGDM@KIOWA_MAIN_MFD_MODE_DTV@ DB 'KIOWA_MAIN_MFD_MODE_DTV', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FPDCHDGK@KIOWA_MAIN_MFD_MODE_FLIR@
CONST	SEGMENT
??_C@_0BJ@FPDCHDGK@KIOWA_MAIN_MFD_MODE_FLIR@ DB 'KIOWA_MAIN_MFD_MODE_FLIR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PCCBFJEL@KIOWA_MAIN_MFD_MODE_DAMAGED@
CONST	SEGMENT
??_C@_0BM@PCCBFJEL@KIOWA_MAIN_MFD_MODE_DAMAGED@ DB 'KIOWA_MAIN_MFD_MODE_D'
	DB	'AMAGED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFJJIEHC@KIOWA_MAIN_MFD_MODE_OFF@
CONST	SEGMENT
??_C@_0BI@EFJJIEHC@KIOWA_MAIN_MFD_MODE_OFF@ DB 'KIOWA_MAIN_MFD_MODE_OFF', 00H ; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_kiowa_mfd@@YGXXZ			; initialise_kiowa_mfd
PUBLIC	?deinitialise_kiowa_mfd@@YGXXZ			; deinitialise_kiowa_mfd
PUBLIC	?draw_kiowa_mfd@@YGXXZ				; draw_kiowa_mfd
PUBLIC	?draw_kiowa_full_screen_display@@YGXXZ		; draw_kiowa_full_screen_display
PUBLIC	?draw_overlaid_kiowa_mfd@@YGXXZ			; draw_overlaid_kiowa_mfd
PUBLIC	?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_kiowa_main_mfd_has_focus
PUBLIC	?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode
PUBLIC	?select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_next_kiowa_main_mfd
PUBLIC	?select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_previous_kiowa_main_mfd
PUBLIC	?toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; toggle_kiowa_main_mfd_on_off
PUBLIC	?select_next_kiowa_pilot_tsd_ase_range@@YGXXZ	; select_next_kiowa_pilot_tsd_ase_range
PUBLIC	?select_next_kiowa_co_pilot_tsd_ase_range@@YGXXZ ; select_next_kiowa_co_pilot_tsd_ase_range
PUBLIC	?select_previous_kiowa_pilot_tsd_ase_range@@YGXXZ ; select_previous_kiowa_pilot_tsd_ase_range
PUBLIC	?select_previous_kiowa_co_pilot_tsd_ase_range@@YGXXZ ; select_previous_kiowa_co_pilot_tsd_ase_range
PUBLIC	?select_next_kiowa_pilot_tsd_declutter_level@@YGXXZ ; select_next_kiowa_pilot_tsd_declutter_level
PUBLIC	?select_next_kiowa_co_pilot_tsd_declutter_level@@YGXXZ ; select_next_kiowa_co_pilot_tsd_declutter_level
PUBLIC	?select_previous_kiowa_pilot_tsd_declutter_level@@YGXXZ ; select_previous_kiowa_pilot_tsd_declutter_level
PUBLIC	?select_previous_kiowa_co_pilot_tsd_declutter_level@@YGXXZ ; select_previous_kiowa_co_pilot_tsd_declutter_level
PUBLIC	?toggle_kiowa_ase_auto_page@@YGXXZ		; toggle_kiowa_ase_auto_page
PUBLIC	?auto_page_kiowa_ase_main_mfd@@YGXXZ		; auto_page_kiowa_ase_main_mfd
PUBLIC	?select_kiowa_tads_main_mfd@@YGXXZ		; select_kiowa_tads_main_mfd
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_01CBDEGOCN@j@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03GOOLIKIF@?$CF3d@			; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	??_C@_04HPNJOLEN@?$CF3do@			; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA ; `draw_heading_scale'::`1'::__LINE__Var
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA ; `display_navigation_info'::`1'::__LINE__Var
PUBLIC	??_C@_06JCIGMCHD@?$CFc?3?$CFdm@			; `string'
PUBLIC	??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@		; `string'
PUBLIC	??_C@_07CFANIJPM@?$CFc?3?$CFdKm@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	??_C@_05KABNCBHK@?$CFd?0?$CFd@			; `string'
PUBLIC	??_C@_05MDNKIPAL@?$CFd?5lb@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_03ENJJJDDH@DTV@				; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	??_C@_06BLLIFECI@?$CF3d?5FT@			; `string'
PUBLIC	??_C@_07FGFCMGOE@?$CF3d?5KTS@			; `string'
PUBLIC	??_C@_09ICGCKLLB@LOW?5LIGHT@			; `string'
PUBLIC	??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@		; `string'
PUBLIC	??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA ; `draw_heading_scale_tsd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@ ; `string'
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_04DBODHFDK@TADS@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03CIAFGHAC@2Km@				; `string'
PUBLIC	??_C@_03LFNCFPLL@5Km@				; `string'
PUBLIC	??_C@_04PJCLBGLO@10Km@				; `string'
PUBLIC	??_C@_04IJFFJMFM@25Km@				; `string'
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_03DIMJBCMI@NAV@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_03CBNMOHKF@C?1M@				; `string'
PUBLIC	??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@		; `string'
PUBLIC	??_C@_06CPHFAHEB@Cx?$CF02d@			; `string'
PUBLIC	??_C@_08FGBJBHLJ@CHAFFxXX@			; `string'
PUBLIC	??_C@_04JIMIAKFM@CxXX@				; `string'
PUBLIC	??_C@_0L@NONPILJE@FLAREx?$CF02d@		; `string'
PUBLIC	??_C@_06HNENCIOG@Fx?$CF02d@			; `string'
PUBLIC	??_C@_08EHCDGGFB@FLARExXX@			; `string'
PUBLIC	??_C@_04FACIIFCM@FxXX@				; `string'
PUBLIC	??_C@_05HGDIBGHI@x?$CF02d@			; `string'
PUBLIC	??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@		; `string'
PUBLIC	??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@	; `string'
PUBLIC	?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA ; `print_main_mfd_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_04IDKCLELC@PNVS@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_0L@MCBINMPD@TAIL?5ROTOR@			; `string'
PUBLIC	??_C@_06LKDHJJCH@ENGINE@			; `string'
PUBLIC	??_C@_03KMHDAHAO@SPU@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@		; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_08HFKNNLAF@FUEL?5QTY@			; `string'
PUBLIC	??_C@_07MGEFOJJP@?$CF04d?5lb@			; `string'
PUBLIC	??_C@_08PLAGFMEO@THROTTLE@			; `string'
PUBLIC	??_C@_04LMJCBFEL@OFF?5@				; `string'
PUBLIC	??_C@_04IMMGDCFE@IDLE@				; `string'
PUBLIC	??_C@_04MJEFHDBD@FLY?5@				; `string'
PUBLIC	??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_02PCDHLJPB@NR@				; `string'
PUBLIC	??_C@_02MAABNLHD@NP@				; `string'
PUBLIC	??_C@_02MFICFPOF@NG@				; `string'
PUBLIC	??_C@_02MIKLMMJE@TQ@				; `string'
PUBLIC	??_C@_02NEDDHJED@TG@				; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA	; `draw_pitch_ladder'::`1'::__LINE__Var
PUBLIC	??_C@_03NJMPCKOA@?$CFd0@			; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE@				; `string'
PUBLIC	?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA ; `draw_flight_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA ; `print_mono_font_max_length_string'::`1'::__LINE__Var
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_05KEIIKJGB@?$CF?431s@			; `string'
PUBLIC	?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA ; `get_player_rank_and_name'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs@			; `string'
PUBLIC	?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA ; `print_target_position'::`1'::__LINE__Var
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA ; `draw_mission_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@		; `string'
PUBLIC	??_C@_07MLNBPDHK@company@			; `string'
PUBLIC	??_C@_03DKEJHHJP@?$CFs?3@			; `string'
PUBLIC	??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@	; `string'
PUBLIC	??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@		; `string'
PUBLIC	??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@		; `string'
PUBLIC	??_C@_06IAHIIHDD@?$CFc1?9?$CFd@			; `string'
PUBLIC	??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@		; `string'
PUBLIC	??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ ; `string'
PUBLIC	??_C@_07PPFPLHID@MISSION@			; `string'
PUBLIC	??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_09MMJDMDOM@OBJECT?3?$CFs@			; `string'
PUBLIC	??_C@_09NFLHCPML@STATUS?3?$CFs@			; `string'
PUBLIC	??_C@_09MDEJFDEL@START?5?3?$CFs@		; `string'
PUBLIC	??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ ; `string'
PUBLIC	??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_main_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0L@DHCAJMOH@mfd_screen@			; `string'
PUBLIC	??_C@_0CC@OCHCBDPI@kiowa_main_mfd_mode_valid?5?$CI?$CKmod@ ; `string'
PUBLIC	??_C@_0CJ@IAJJOBAL@kiowa_main_mfd_location_valid?5?$CI@ ; `string'
PUBLIC	??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_kiowa_mfd@@YGXXZ@4JA	; `draw_kiowa_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_main_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CB@GKEJPACO@kiowa_main_mfd_mode_valid?5?$CImode@ ; `string'
PUBLIC	?__LINE__Var@?0??get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_kiowa_main_mfd_has_focus'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_default_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_main_mfd_damage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `select_kiowa_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0CF@OIPAMFAC@kiowa_main_mfd_mode_valid?5?$CImfd_@ ; `string'
PUBLIC	??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@		; `string'
PUBLIC	??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_next_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_previous_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `select_next_kiowa_main_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ ; `string'
PUBLIC	?__LINE__Var@?0??select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `select_previous_kiowa_main_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ ; `string'
PUBLIC	?__LINE__Var@?0??toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA ; `toggle_kiowa_main_mfd_on_off'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3ccccccd
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d75c290
PUBLIC	__real@3d7c0fc1
PUBLIC	__real@3d99999a
PUBLIC	__real@3d9f49f5
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3df5c28f
PUBLIC	__real@3e000000
PUBLIC	__real@3e0f5c29
PUBLIC	__real@3e19999a
PUBLIC	__real@3e23d70a
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e6b851f
PUBLIC	__real@3e75c28f
PUBLIC	__real@3e800000
PUBLIC	__real@3e851eb8
PUBLIC	__real@3e87ae14
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3e99999a
PUBLIC	__real@3eaaa64c
PUBLIC	__real@3eb2b8c2
PUBLIC	__real@3eb33333
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed1eb85
PUBLIC	__real@3edc28f6
PUBLIC	__real@3ee66666
PUBLIC	__real@3ee66667
PUBLIC	__real@3eeb851f
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3efae148
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f060a92
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f1c28f6
PUBLIC	__real@3f266666
PUBLIC	__real@3f333333
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f400000
PUBLIC	__real@3f466666
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4b851f
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f500000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f50a3d7
PUBLIC	__real@3f570a3d
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5d70a4
PUBLIC	__real@3f600000
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6bd70a
PUBLIC	__real@3f6ccccd
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f860a92
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa1eb851eb851ec
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb1eb851eb851ec
PUBLIC	__real@3fb3333333333333
PUBLIC	__real@3fb3333340000000
PUBLIC	__real@3fb3e93ea0000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc0a3d70a3d70a4
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc3333340000000
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc70a3d70a3d70a
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd0a3d70a3d70a4
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd51eb851eb851f
PUBLIC	__real@3fd6666666666666
PUBLIC	__real@3fd893011c000000
PUBLIC	__real@3fdbecde5a000000
PUBLIC	__real@3fdeb851eb851eb8
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333333
PUBLIC	__real@3fe6666660000000
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff0c15236000000
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff85d84
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@3fff0bb080000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@400d1eb8
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4016eb167e7d81e3
PUBLIC	__real@401921fb51000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@402a000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4044000000000000
PUBLIC	__real@404ca5dc00000000
PUBLIC	__real@4051f948
PUBLIC	__real@4059000000000000
PUBLIC	__real@405b800000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4061a00000000000
PUBLIC	__real@40666666
PUBLIC	__real@4069000000000000
PUBLIC	__real@406e600000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@4072800000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@4078d00000000000
PUBLIC	__real@407e000000000000
PUBLIC	__real@407f300000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@40800000
PUBLIC	__real@4084000000000000
PUBLIC	__real@408f380000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c3878000000000
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41900000
PUBLIC	__real@42652ee0
PUBLIC	__real@43000000
PUBLIC	__real@437fffbe
PUBLIC	__real@43800000
PUBLIC	__real@43960000
PUBLIC	__real@43fa0000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@bccccccd
PUBLIC	__real@bcf5c28f
PUBLIC	__real@bd0f5c29
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd99999a
PUBLIC	__real@bdcccccd
PUBLIC	__real@be2e147b
PUBLIC	__real@be32b8c2
PUBLIC	__real@be4ccccd
PUBLIC	__real@be6b851f
PUBLIC	__real@be75c28f
PUBLIC	__real@be800000
PUBLIC	__real@be851eb8
PUBLIC	__real@beaaa64c
PUBLIC	__real@beb2b8c2
PUBLIC	__real@bebd70a4
PUBLIC	__real@bec28f5c
PUBLIC	__real@becccccd
PUBLIC	__real@bed1eb85
PUBLIC	__real@bedc28f6
PUBLIC	__real@beeb851f
PUBLIC	__real@beed3a07
PUBLIC	__real@bef5c28f
PUBLIC	__real@befae148
PUBLIC	__real@bf000000
PUBLIC	__real@bf060a92
PUBLIC	__real@bf0f5c29
PUBLIC	__real@bf11eb85
PUBLIC	__real@bf11eb86
PUBLIC	__real@bf19999a
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf2bf259
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf333333
PUBLIC	__real@bf3d70a4
PUBLIC	__real@bf428f5c
PUBLIC	__real@bf43d70a
PUBLIC	__real@bf451eb8
PUBLIC	__real@bf451eb9
PUBLIC	__real@bf47ae14
PUBLIC	__real@bf47ae15
PUBLIC	__real@bf490fdb
PUBLIC	__real@bf4a3d70
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf4e147b
PUBLIC	__real@bf4f5c28
PUBLIC	__real@bf4f5c29
PUBLIC	__real@bf533333
PUBLIC	__real@bf547ae1
PUBLIC	__real@bf570a3e
PUBLIC	__real@bf59999a
PUBLIC	__real@bf5ae148
PUBLIC	__real@bf5eb852
PUBLIC	__real@bf6147ae
PUBLIC	__real@bf63d70a
PUBLIC	__real@bf666666
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf70a3d7
PUBLIC	__real@bf733333
PUBLIC	__real@bf7ae148
PUBLIC	__real@bf800000
PUBLIC	__real@bf860a92
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfc90fdb
PUBLIC	__real@bfc999999999999a
PUBLIC	__real@bfd893011c000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfec28f5c0000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff0c15236000000
PUBLIC	__real@bff921fb51000000
PUBLIC	__real@c0000000
PUBLIC	__real@c00921fb51000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c034000000000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_user_texture_screen
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_position@@YGXMM@Z:PROC		; set_mono_font_position
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z:PROC	; set_2d_pixel
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_filled_triangle
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_int_screen_coordinates@@YGXMMPAH0@Z:PROC ; get_2d_int_screen_coordinates
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_area
EXTRN	?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z:PROC	; draw_2d_box
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z:PROC ; get_local_entity_target_bearing
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z:PROC ; get_keysite_entity_mfd_display_name
EXTRN	?get_player_task@@YGPAUENTITY@@PAU1@@Z:PROC	; get_player_task
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z:PROC ; get_task_estimated_route_duration
EXTRN	?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z:PROC ; get_task_objective_mfd_display_string
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z:PROC ; convert_linear_view_value
EXTRN	?get_eo_tracking_point@@YGPAUVEC3D@@XZ:PROC	; get_eo_tracking_point
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_kiowa_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z:PROC ; get_kiowa_eo_relative_centred_viewpoint
EXTRN	?get_crew_role@@YG?AW4CREW_ROLES@@XZ:PROC	; get_crew_role
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?get_digital_clock_int_values@@YGXMPAH00@Z:PROC	; get_digital_clock_int_values
EXTRN	?get_untranslated_pilot_rank_short_name@@YGPBDH@Z:PROC ; get_untranslated_pilot_rank_short_name
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	__chkstk:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_colour_mfd@@3HA:DWORD		; command_line_colour_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?formation_display_names@@3PAPBDA:BYTE		; formation_display_names
EXTRN	?task_status_names@@3PAPBDA:BYTE		; task_status_names
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA:BYTE ; fn_get_local_entity_ptr_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A:DWORD	; kiowa_damage
EXTRN	?kiowa_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; kiowa_flir
EXTRN	?kiowa_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; kiowa_dtv
EXTRN	?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A:DWORD ; virtual_cockpit_inst3d
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?mfd_colours@@3PAUREAL_COLOUR@@A DD 014H DUP (?)	; mfd_colours
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?text_display_colours@@3PAUREAL_COLOUR@@A DD 02H DUP (?) ; text_display_colours
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?int_mfd_viewport_size@@3HA DD 01H DUP (?)		; int_mfd_viewport_size
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?mfd_screen_x_min@@3MA DD 01H DUP (?)			; mfd_screen_x_min
?mfd_screen_y_min@@3MA DD 01H DUP (?)			; mfd_screen_y_min
?mfd_screen_x_max@@3MA DD 01H DUP (?)			; mfd_screen_x_max
?mfd_screen_y_max@@3MA DD 01H DUP (?)			; mfd_screen_y_max
?mfd_screen_width@@3MA DD 01H DUP (?)			; mfd_screen_width
?mfd_screen_height@@3MA DD 01H DUP (?)			; mfd_screen_height
?mfd_screen_x_scale@@3MA DD 01H DUP (?)			; mfd_screen_x_scale
?mfd_screen_y_scale@@3MA DD 01H DUP (?)			; mfd_screen_y_scale
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?draw_main_display@@3HA DD 01H DUP (?)			; draw_main_display
?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_main_mfd_texture_screen
?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_main_mfd_texture_screen
?center_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; center_mfd_texture_screen
?large_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_main_mfd_texture_screen
?large_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_main_mfd_texture_screen
?large_center_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_center_mfd_texture_screen
?small_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_main_mfd_texture_screen
?small_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_main_mfd_texture_screen
?small_center_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_center_mfd_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?full_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; full_mfd_texture_screen
?pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; pilot_tsd_ase_range
?co_pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; co_pilot_tsd_ase_range
?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; pilot_tsd_declutter_level
?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; co_pilot_tsd_declutter_level
?pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_tsd_threat_line_flash_timer
?co_pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_tsd_threat_line_flash_timer
?pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_tsd_draw_threat_line_status
?co_pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_tsd_draw_threat_line_status
?pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_ase_threat_line_flash_timer
?co_pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_ase_threat_line_flash_timer
?pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_ase_draw_threat_line_status
?co_pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_ase_draw_threat_line_status
?main_horizon_mask@@3PADA DD 01H DUP (?)		; main_horizon_mask
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c034000000000000
CONST	SEGMENT
__real@c034000000000000 DQ 0c034000000000000r	; -20
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c00921fb51000000
CONST	SEGMENT
__real@c00921fb51000000 DQ 0c00921fb51000000r	; -3.14159
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb51000000
CONST	SEGMENT
__real@bff921fb51000000 DQ 0bff921fb51000000r	; -1.5708
CONST	ENDS
;	COMDAT __real@bff0c15236000000
CONST	SEGMENT
__real@bff0c15236000000 DQ 0bff0c15236000000r	; -1.0472
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfec28f5c0000000
CONST	SEGMENT
__real@bfec28f5c0000000 DQ 0bfec28f5c0000000r	; -0.88
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd893011c000000
CONST	SEGMENT
__real@bfd893011c000000 DQ 0bfd893011c000000r	; -0.383972
CONST	ENDS
;	COMDAT __real@bfc999999999999a
CONST	SEGMENT
__real@bfc999999999999a DQ 0bfc999999999999ar	; -0.2
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bf860a92
CONST	SEGMENT
__real@bf860a92 DD 0bf860a92r			; -1.0472
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf7ae148
CONST	SEGMENT
__real@bf7ae148 DD 0bf7ae148r			; -0.98
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf70a3d7
CONST	SEGMENT
__real@bf70a3d7 DD 0bf70a3d7r			; -0.94
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf63d70a
CONST	SEGMENT
__real@bf63d70a DD 0bf63d70ar			; -0.89
CONST	ENDS
;	COMDAT __real@bf6147ae
CONST	SEGMENT
__real@bf6147ae DD 0bf6147aer			; -0.88
CONST	ENDS
;	COMDAT __real@bf5eb852
CONST	SEGMENT
__real@bf5eb852 DD 0bf5eb852r			; -0.87
CONST	ENDS
;	COMDAT __real@bf5ae148
CONST	SEGMENT
__real@bf5ae148 DD 0bf5ae148r			; -0.855
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf570a3e
CONST	SEGMENT
__real@bf570a3e DD 0bf570a3er			; -0.84
CONST	ENDS
;	COMDAT __real@bf547ae1
CONST	SEGMENT
__real@bf547ae1 DD 0bf547ae1r			; -0.83
CONST	ENDS
;	COMDAT __real@bf533333
CONST	SEGMENT
__real@bf533333 DD 0bf533333r			; -0.825
CONST	ENDS
;	COMDAT __real@bf4f5c29
CONST	SEGMENT
__real@bf4f5c29 DD 0bf4f5c29r			; -0.81
CONST	ENDS
;	COMDAT __real@bf4f5c28
CONST	SEGMENT
__real@bf4f5c28 DD 0bf4f5c28r			; -0.81
CONST	ENDS
;	COMDAT __real@bf4e147b
CONST	SEGMENT
__real@bf4e147b DD 0bf4e147br			; -0.805
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf4a3d70
CONST	SEGMENT
__real@bf4a3d70 DD 0bf4a3d70r			; -0.79
CONST	ENDS
;	COMDAT __real@bf490fdb
CONST	SEGMENT
__real@bf490fdb DD 0bf490fdbr			; -0.785398
CONST	ENDS
;	COMDAT __real@bf47ae15
CONST	SEGMENT
__real@bf47ae15 DD 0bf47ae15r			; -0.78
CONST	ENDS
;	COMDAT __real@bf47ae14
CONST	SEGMENT
__real@bf47ae14 DD 0bf47ae14r			; -0.78
CONST	ENDS
;	COMDAT __real@bf451eb9
CONST	SEGMENT
__real@bf451eb9 DD 0bf451eb9r			; -0.77
CONST	ENDS
;	COMDAT __real@bf451eb8
CONST	SEGMENT
__real@bf451eb8 DD 0bf451eb8r			; -0.77
CONST	ENDS
;	COMDAT __real@bf43d70a
CONST	SEGMENT
__real@bf43d70a DD 0bf43d70ar			; -0.765
CONST	ENDS
;	COMDAT __real@bf428f5c
CONST	SEGMENT
__real@bf428f5c DD 0bf428f5cr			; -0.76
CONST	ENDS
;	COMDAT __real@bf3d70a4
CONST	SEGMENT
__real@bf3d70a4 DD 0bf3d70a4r			; -0.74
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf2bf259
CONST	SEGMENT
__real@bf2bf259 DD 0bf2bf259r			; -0.671667
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf11eb86
CONST	SEGMENT
__real@bf11eb86 DD 0bf11eb86r			; -0.57
CONST	ENDS
;	COMDAT __real@bf11eb85
CONST	SEGMENT
__real@bf11eb85 DD 0bf11eb85r			; -0.57
CONST	ENDS
;	COMDAT __real@bf0f5c29
CONST	SEGMENT
__real@bf0f5c29 DD 0bf0f5c29r			; -0.56
CONST	ENDS
;	COMDAT __real@bf060a92
CONST	SEGMENT
__real@bf060a92 DD 0bf060a92r			; -0.523599
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@befae148
CONST	SEGMENT
__real@befae148 DD 0befae148r			; -0.49
CONST	ENDS
;	COMDAT __real@bef5c28f
CONST	SEGMENT
__real@bef5c28f DD 0bef5c28fr			; -0.48
CONST	ENDS
;	COMDAT __real@beed3a07
CONST	SEGMENT
__real@beed3a07 DD 0beed3a07r			; -0.463333
CONST	ENDS
;	COMDAT __real@beeb851f
CONST	SEGMENT
__real@beeb851f DD 0beeb851fr			; -0.46
CONST	ENDS
;	COMDAT __real@bedc28f6
CONST	SEGMENT
__real@bedc28f6 DD 0bedc28f6r			; -0.43
CONST	ENDS
;	COMDAT __real@bed1eb85
CONST	SEGMENT
__real@bed1eb85 DD 0bed1eb85r			; -0.41
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@bec28f5c
CONST	SEGMENT
__real@bec28f5c DD 0bec28f5cr			; -0.38
CONST	ENDS
;	COMDAT __real@bebd70a4
CONST	SEGMENT
__real@bebd70a4 DD 0bebd70a4r			; -0.37
CONST	ENDS
;	COMDAT __real@beb2b8c2
CONST	SEGMENT
__real@beb2b8c2 DD 0beb2b8c2r			; -0.349066
CONST	ENDS
;	COMDAT __real@beaaa64c
CONST	SEGMENT
__real@beaaa64c DD 0beaaa64cr			; -0.3333
CONST	ENDS
;	COMDAT __real@be851eb8
CONST	SEGMENT
__real@be851eb8 DD 0be851eb8r			; -0.26
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be75c28f
CONST	SEGMENT
__real@be75c28f DD 0be75c28fr			; -0.24
CONST	ENDS
;	COMDAT __real@be6b851f
CONST	SEGMENT
__real@be6b851f DD 0be6b851fr			; -0.23
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be32b8c2
CONST	SEGMENT
__real@be32b8c2 DD 0be32b8c2r			; -0.174533
CONST	ENDS
;	COMDAT __real@be2e147b
CONST	SEGMENT
__real@be2e147b DD 0be2e147br			; -0.17
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd0f5c29
CONST	SEGMENT
__real@bd0f5c29 DD 0bd0f5c29r			; -0.035
CONST	ENDS
;	COMDAT __real@bcf5c28f
CONST	SEGMENT
__real@bcf5c28f DD 0bcf5c28fr			; -0.03
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fffbe
CONST	SEGMENT
__real@437fffbe DD 0437fffber			; 255.999
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@408f380000000000
CONST	SEGMENT
__real@408f380000000000 DQ 0408f380000000000r	; 999
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@407f300000000000
CONST	SEGMENT
__real@407f300000000000 DQ 0407f300000000000r	; 499
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@4078d00000000000
CONST	SEGMENT
__real@4078d00000000000 DQ 04078d00000000000r	; 397
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@4072800000000000
CONST	SEGMENT
__real@4072800000000000 DQ 04072800000000000r	; 296
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406e600000000000
CONST	SEGMENT
__real@406e600000000000 DQ 0406e600000000000r	; 243
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4061a00000000000
CONST	SEGMENT
__real@4061a00000000000 DQ 04061a00000000000r	; 141
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@405b800000000000
CONST	SEGMENT
__real@405b800000000000 DQ 0405b800000000000r	; 110
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4051f948
CONST	SEGMENT
__real@4051f948 DD 04051f948r			; 3.28084
CONST	ENDS
;	COMDAT __real@404ca5dc00000000
CONST	SEGMENT
__real@404ca5dc00000000 DQ 0404ca5dc00000000r	; 57.2958
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4016eb167e7d81e3
CONST	SEGMENT
__real@4016eb167e7d81e3 DQ 04016eb167e7d81e3r	; 5.72958
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400d1eb8
CONST	SEGMENT
__real@400d1eb8 DD 0400d1eb8r			; 2.205
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fff0bb080000000
CONST	SEGMENT
__real@3fff0bb080000000 DQ 03fff0bb080000000r	; 1.94035
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff85d84
CONST	SEGMENT
__real@3ff85d84 DD 03ff85d84r			; 1.94035
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff0c15236000000
CONST	SEGMENT
__real@3ff0c15236000000 DQ 03ff0c15236000000r	; 1.0472
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe6666660000000
CONST	SEGMENT
__real@3fe6666660000000 DQ 03fe6666660000000r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdeb851eb851eb8
CONST	SEGMENT
__real@3fdeb851eb851eb8 DQ 03fdeb851eb851eb8r	; 0.48
CONST	ENDS
;	COMDAT __real@3fdbecde5a000000
CONST	SEGMENT
__real@3fdbecde5a000000 DQ 03fdbecde5a000000r	; 0.436332
CONST	ENDS
;	COMDAT __real@3fd893011c000000
CONST	SEGMENT
__real@3fd893011c000000 DQ 03fd893011c000000r	; 0.383972
CONST	ENDS
;	COMDAT __real@3fd6666666666666
CONST	SEGMENT
__real@3fd6666666666666 DQ 03fd6666666666666r	; 0.35
CONST	ENDS
;	COMDAT __real@3fd51eb851eb851f
CONST	SEGMENT
__real@3fd51eb851eb851f DQ 03fd51eb851eb851fr	; 0.33
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0a3d70a3d70a4
CONST	SEGMENT
__real@3fd0a3d70a3d70a4 DQ 03fd0a3d70a3d70a4r	; 0.26
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc70a3d70a3d70a
CONST	SEGMENT
__real@3fc70a3d70a3d70a DQ 03fc70a3d70a3d70ar	; 0.18
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fc3333340000000
CONST	SEGMENT
__real@3fc3333340000000 DQ 03fc3333340000000r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0a3d70a3d70a4
CONST	SEGMENT
__real@3fc0a3d70a3d70a4 DQ 03fc0a3d70a3d70a4r	; 0.13
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb3e93ea0000000
CONST	SEGMENT
__real@3fb3e93ea0000000 DQ 03fb3e93ea0000000r	; 0.0777778
CONST	ENDS
;	COMDAT __real@3fb3333340000000
CONST	SEGMENT
__real@3fb3333340000000 DQ 03fb3333340000000r	; 0.075
CONST	ENDS
;	COMDAT __real@3fb3333333333333
CONST	SEGMENT
__real@3fb3333333333333 DQ 03fb3333333333333r	; 0.075
CONST	ENDS
;	COMDAT __real@3fb1eb851eb851ec
CONST	SEGMENT
__real@3fb1eb851eb851ec DQ 03fb1eb851eb851ecr	; 0.07
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3fa1eb851eb851ec
CONST	SEGMENT
__real@3fa1eb851eb851ec DQ 03fa1eb851eb851ecr	; 0.035
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f6ccccd
CONST	SEGMENT
__real@3f6ccccd DD 03f6ccccdr			; 0.925
CONST	ENDS
;	COMDAT __real@3f6bd70a
CONST	SEGMENT
__real@3f6bd70a DD 03f6bd70ar			; 0.92125
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f5d70a4
CONST	SEGMENT
__real@3f5d70a4 DD 03f5d70a4r			; 0.865
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f570a3d
CONST	SEGMENT
__real@3f570a3d DD 03f570a3dr			; 0.84
CONST	ENDS
;	COMDAT __real@3f50a3d7
CONST	SEGMENT
__real@3f50a3d7 DD 03f50a3d7r			; 0.815
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f500000
CONST	SEGMENT
__real@3f500000 DD 03f500000r			; 0.8125
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4b851f
CONST	SEGMENT
__real@3f4b851f DD 03f4b851fr			; 0.795
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f466666
CONST	SEGMENT
__real@3f466666 DD 03f466666r			; 0.775
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f1c28f6
CONST	SEGMENT
__real@3f1c28f6 DD 03f1c28f6r			; 0.61
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3efae148
CONST	SEGMENT
__real@3efae148 DD 03efae148r			; 0.49
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3eeb851f
CONST	SEGMENT
__real@3eeb851f DD 03eeb851fr			; 0.46
CONST	ENDS
;	COMDAT __real@3ee66667
CONST	SEGMENT
__real@3ee66667 DD 03ee66667r			; 0.45
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3edc28f6
CONST	SEGMENT
__real@3edc28f6 DD 03edc28f6r			; 0.43
CONST	ENDS
;	COMDAT __real@3ed1eb85
CONST	SEGMENT
__real@3ed1eb85 DD 03ed1eb85r			; 0.41
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eb2b8c2
CONST	SEGMENT
__real@3eb2b8c2 DD 03eb2b8c2r			; 0.349066
CONST	ENDS
;	COMDAT __real@3eaaa64c
CONST	SEGMENT
__real@3eaaa64c DD 03eaaa64cr			; 0.3333
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e87ae14
CONST	SEGMENT
__real@3e87ae14 DD 03e87ae14r			; 0.265
CONST	ENDS
;	COMDAT __real@3e851eb8
CONST	SEGMENT
__real@3e851eb8 DD 03e851eb8r			; 0.26
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e75c28f
CONST	SEGMENT
__real@3e75c28f DD 03e75c28fr			; 0.24
CONST	ENDS
;	COMDAT __real@3e6b851f
CONST	SEGMENT
__real@3e6b851f DD 03e6b851fr			; 0.23
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e0f5c29
CONST	SEGMENT
__real@3e0f5c29 DD 03e0f5c29r			; 0.14
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3df5c28f
CONST	SEGMENT
__real@3df5c28f DD 03df5c28fr			; 0.12
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d9f49f5
CONST	SEGMENT
__real@3d9f49f5 DD 03d9f49f5r			; 0.0777778
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d7c0fc1
CONST	SEGMENT
__real@3d7c0fc1 DD 03d7c0fc1r			; 0.0615385
CONST	ENDS
;	COMDAT __real@3d75c290
CONST	SEGMENT
__real@3d75c290 DD 03d75c290r			; 0.06
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ccccccd
CONST	SEGMENT
__real@3ccccccd DD 03ccccccdr			; 0.025
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 02313H ; `toggle_kiowa_main_mfd_on_off'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
CONST	SEGMENT
??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ DB 'previo'
	DB	'us_mfd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 022f3H ; `select_previous_kiowa_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
CONST	SEGMENT
??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ DB 'next_m'
	DB	'fd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 022d3H ; `select_next_kiowa_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 0226eH ; `get_previous_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 02202H ; `get_next_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
CONST	SEGMENT
??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ DB 'default_mfd_'
	DB	'mode != mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
CONST	SEGMENT
??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@ DB '%s = %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OIPAMFAC@kiowa_main_mfd_mode_valid?5?$CImfd_@
CONST	SEGMENT
??_C@_0CF@OIPAMFAC@kiowa_main_mfd_mode_valid?5?$CImfd_@ DB 'kiowa_main_mf'
	DB	'd_mode_valid (mfd_mode)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 021ceH ; `select_kiowa_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 021a3H ; `get_main_mfd_damage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 02178H ; `get_default_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 02130H ; `get_kiowa_main_mfd_has_focus'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@GKEJPACO@kiowa_main_mfd_mode_valid?5?$CImode@
CONST	SEGMENT
??_C@_0CB@GKEJPACO@kiowa_main_mfd_mode_valid?5?$CImode@ DB 'kiowa_main_mf'
	DB	'd_mode_valid (mode)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 01ec7H ; `draw_overlaid_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ DB 'Invalid view mod'
	DB	'e = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_kiowa_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_kiowa_mfd@@YGXXZ@4JA DD 01c58H	; `draw_kiowa_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ DB 'Invalid mai'
	DB	'n MFD mode = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IAJJOBAL@kiowa_main_mfd_location_valid?5?$CI@
CONST	SEGMENT
??_C@_0CJ@IAJJOBAL@kiowa_main_mfd_location_valid?5?$CI@ DB 'kiowa_main_mf'
	DB	'd_location_valid (location)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OCHCBDPI@kiowa_main_mfd_mode_valid?5?$CI?$CKmod@
CONST	SEGMENT
??_C@_0CC@OCHCBDPI@kiowa_main_mfd_mode_valid?5?$CI?$CKmod@ DB 'kiowa_main'
	DB	'_mfd_mode_valid (*mode)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHCAJMOH@mfd_screen@
CONST	SEGMENT
??_C@_0L@DHCAJMOH@mfd_screen@ DB 'mfd_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 01b23H ; `draw_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
CONST	SEGMENT
??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ DB 'T'
	DB	'IME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
CONST	SEGMENT
??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ DB 'COUNT :K'
	DB	'ills=%d Losses=%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@ DB 'END   :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MDEJFDEL@START?5?3?$CFs@
CONST	SEGMENT
??_C@_09MDEJFDEL@START?5?3?$CFs@ DB 'START :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFLHCPML@STATUS?3?$CFs@
CONST	SEGMENT
??_C@_09NFLHCPML@STATUS?3?$CFs@ DB 'STATUS:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
CONST	SEGMENT
??_C@_09MMJDMDOM@OBJECT?3?$CFs@ DB 'OBJECT:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@ DB 'TYPE  :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPFPLHID@MISSION@
CONST	SEGMENT
??_C@_07PPFPLHID@MISSION@ DB 'MISSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
CONST	SEGMENT
??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ DB 'get_local_ent'
	DB	'ity_int_value (task, INT_TYPE_VISIBLE_TASK)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
CONST	SEGMENT
??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@ DB 'FORMATION:%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
CONST	SEGMENT
??_C@_06IAHIIHDD@?$CFc1?9?$CFd@ DB '%c1-%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
CONST	SEGMENT
??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@ DB '%c%s 1-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@ DB '%c1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@ DB '%c%s 1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKEJHHJP@?$CFs?3@
CONST	SEGMENT
??_C@_03DKEJHHJP@?$CFs?3@ DB '%s:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MLNBPDHK@company@
CONST	SEGMENT
??_C@_07MLNBPDHK@company@ DB 'company', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
CONST	SEGMENT
??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@ DB 'FLIGHT GROUP', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA DD 0192bH ; `draw_mission_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
CONST	SEGMENT
??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ DB ' '
	DB	'      <%03d,%03d> %6.1fKm %3d', 07fH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA DD 018feH ; `print_target_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA DD 018cdH ; `get_player_rank_and_name'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05KEIIKJGB@?$CF?431s@
CONST	SEGMENT
??_C@_05KEIIKJGB@?$CF?431s@ DB '%.31s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA DD 018bdH ; `print_mono_font_max_length_string'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA DD 018a4H ; `draw_flight_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE@ DB 'FALSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJMPCKOA@?$CFd0@
CONST	SEGMENT
??_C@_03NJMPCKOA@?$CFd0@ DB '%d0', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA DD 016e2H	; `draw_pitch_ladder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02NEDDHJED@TG@
CONST	SEGMENT
??_C@_02NEDDHJED@TG@ DB 'TG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MIKLMMJE@TQ@
CONST	SEGMENT
??_C@_02MIKLMMJE@TQ@ DB 'TQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MFICFPOF@NG@
CONST	SEGMENT
??_C@_02MFICFPOF@NG@ DB 'NG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MAABNLHD@NP@
CONST	SEGMENT
??_C@_02MAABNLHD@NP@ DB 'NP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCDHLJPB@NR@
CONST	SEGMENT
??_C@_02PCDHLJPB@NR@ DB 'NR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@ DB 'SPU %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@ DB '%03d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJEFHDBD@FLY?5@
CONST	SEGMENT
??_C@_04MJEFHDBD@FLY?5@ DB 'FLY ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMMGDCFE@IDLE@
CONST	SEGMENT
??_C@_04IMMGDCFE@IDLE@ DB 'IDLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMJCBFEL@OFF?5@
CONST	SEGMENT
??_C@_04LMJCBFEL@OFF?5@ DB 'OFF ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLAGFMEO@THROTTLE@
CONST	SEGMENT
??_C@_08PLAGFMEO@THROTTLE@ DB 'THROTTLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGEFOJJP@?$CF04d?5lb@
CONST	SEGMENT
??_C@_07MGEFOJJP@?$CF04d?5lb@ DB '%04d lb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFKNNLAF@FUEL?5QTY@
CONST	SEGMENT
??_C@_08HFKNNLAF@FUEL?5QTY@ DB 'FUEL QTY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
CONST	SEGMENT
??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@ DB 'HYDRAULIC PRESSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KMHDAHAO@SPU@
CONST	SEGMENT
??_C@_03KMHDAHAO@SPU@ DB 'SPU', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKDHJJCH@ENGINE@
CONST	SEGMENT
??_C@_06LKDHJJCH@ENGINE@ DB 'ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
CONST	SEGMENT
??_C@_0L@MCBINMPD@TAIL?5ROTOR@ DB 'TAIL ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKCLELC@PNVS@
CONST	SEGMENT
??_C@_04IDKCLELC@PNVS@ DB 'PNVS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA DD 013c5H ; `print_main_mfd_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
CONST	SEGMENT
??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@ DB 'ROCKET SALVOx%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
CONST	SEGMENT
??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@ DB 'ROCKET SALVOxALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGDIBGHI@x?$CF02d@
CONST	SEGMENT
??_C@_05HGDIBGHI@x?$CF02d@ DB 'x%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FACIIFCM@FxXX@
CONST	SEGMENT
??_C@_04FACIIFCM@FxXX@ DB 'FxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHCDGGFB@FLARExXX@
CONST	SEGMENT
??_C@_08EHCDGGFB@FLARExXX@ DB 'FLARExXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNENCIOG@Fx?$CF02d@
CONST	SEGMENT
??_C@_06HNENCIOG@Fx?$CF02d@ DB 'Fx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONPILJE@FLAREx?$CF02d@
CONST	SEGMENT
??_C@_0L@NONPILJE@FLAREx?$CF02d@ DB 'FLAREx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMIAKFM@CxXX@
CONST	SEGMENT
??_C@_04JIMIAKFM@CxXX@ DB 'CxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGBJBHLJ@CHAFFxXX@
CONST	SEGMENT
??_C@_08FGBJBHLJ@CHAFFxXX@ DB 'CHAFFxXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPHFAHEB@Cx?$CF02d@
CONST	SEGMENT
??_C@_06CPHFAHEB@Cx?$CF02d@ DB 'Cx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
CONST	SEGMENT
??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@ DB 'CHAFFx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBNMOHKF@C?1M@
CONST	SEGMENT
??_C@_03CBNMOHKF@C?1M@ DB 'C/M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA DD 01218H ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 0faeH ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 0f47H ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJFFJMFM@25Km@
CONST	SEGMENT
??_C@_04IJFFJMFM@25Km@ DB '25Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJCLBGLO@10Km@
CONST	SEGMENT
??_C@_04PJCLBGLO@10Km@ DB '10Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNCFPLL@5Km@
CONST	SEGMENT
??_C@_03LFNCFPLL@5Km@ DB '5Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIAFGHAC@2Km@
CONST	SEGMENT
??_C@_03CIAFGHAC@2Km@ DB '2Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBODHFDK@TADS@
CONST	SEGMENT
??_C@_04DBODHFDK@TADS@ DB 'TADS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
CONST	SEGMENT
??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@ DB 'kiowa_main_mf'
	DB	'd_location_valid (mfd_location)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA DD 0c05H ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA DD 0ae6H ; `draw_heading_scale_tsd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@
CONST	SEGMENT
??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@ DB '%c%04d M   %3d K'
	DB	'PH', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@
CONST	SEGMENT
??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@ DB 'CP/G ID...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICGCKLLB@LOW?5LIGHT@
CONST	SEGMENT
??_C@_09ICGCKLLB@LOW?5LIGHT@ DB 'LOW LIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FGFCMGOE@?$CF3d?5KTS@
CONST	SEGMENT
??_C@_07FGFCMGOE@?$CF3d?5KTS@ DB '%3d KTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLLIFECI@?$CF3d?5FT@
CONST	SEGMENT
??_C@_06BLLIFECI@?$CF3d?5FT@ DB '%3d FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJJDDH@DTV@
CONST	SEGMENT
??_C@_03ENJJJDDH@DTV@ DB 'DTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA DD 08caH ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 082fH ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 077dH ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA DD 06c1H ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05MDNKIPAL@?$CFd?5lb@
CONST	SEGMENT
??_C@_05MDNKIPAL@?$CFd?5lb@ DB '%d lb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KABNCBHK@?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_05KABNCBHK@?$CFd?0?$CFd@ DB '%d,%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
CONST	SEGMENT
??_C@_07CFANIJPM@?$CFc?3?$CFdKm@ DB '%c:%dKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
CONST	SEGMENT
??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@ DB '%c:%.1fKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
CONST	SEGMENT
??_C@_06JCIGMCHD@?$CFc?3?$CFdm@ DB '%c:%dm', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA DD 055eH ; `display_navigation_info'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA DD 046dH ; `draw_heading_scale'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04HPNJOLEN@?$CF3do@
CONST	SEGMENT
??_C@_04HPNJOLEN@?$CF3do@ DB '%3do', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOOLIKIF@?$CF3d@
CONST	SEGMENT
??_C@_03GOOLIKIF@?$CF3d@ DB '%3d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CBDEGOCN@j@
CONST	SEGMENT
??_C@_01CBDEGOCN@j@ DB 'j', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_m'
	DB	'fd.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA DD 0269H ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?kiowa_main_mfd_mode_names@@3PAPADA DD FLAT:??_C@_0BI@EFJJIEHC@KIOWA_MAIN_MFD_MODE_OFF@ ; kiowa_main_mfd_mode_names
	DD	FLAT:??_C@_0BM@PCCBFJEL@KIOWA_MAIN_MFD_MODE_DAMAGED@
	DD	FLAT:??_C@_0BJ@FPDCHDGK@KIOWA_MAIN_MFD_MODE_FLIR@
	DD	FLAT:??_C@_0BI@MHPIGGDM@KIOWA_MAIN_MFD_MODE_DTV@
	DD	FLAT:??_C@_0BI@OKFKFHPF@KIOWA_MAIN_MFD_MODE_TSD@
	DD	FLAT:??_C@_0BI@JEIGMBBJ@KIOWA_MAIN_MFD_MODE_ASE@
	DD	FLAT:??_C@_0BL@DPPNBBBH@KIOWA_MAIN_MFD_MODE_WEAPON@
	DD	FLAT:??_C@_0BL@MFOHCEE@KIOWA_MAIN_MFD_MODE_SYSTEM@
	DD	FLAT:??_C@_0BL@OFBMDCHK@KIOWA_MAIN_MFD_MODE_ENGINE@
	DD	FLAT:??_C@_0BL@JBIHBPBM@KIOWA_MAIN_MFD_MODE_FLIGHT@
	DD	FLAT:??_C@_0BM@OKNKLBGB@KIOWA_MAIN_MFD_MODE_MISSION@
?kiowa_main_mfd_location_names@@3PAPADA DD FLAT:??_C@_0CB@NLBPPAKP@KIOWA_MAIN_MFD_LOCATION_CO_PILO@ ; kiowa_main_mfd_location_names
	DD	FLAT:??_C@_0BO@NKEBPJAG@KIOWA_MAIN_MFD_LOCATION_PILOT@
	DD	FLAT:??_C@_0BP@KAPMNHIL@KIOWA_MAIN_MFD_LOCATION_CENTER@
?main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A DD FLAT:?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A ; main_mfd_mode_ptrs
	DD	FLAT:?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
	DD	FLAT:?center_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
?opposite_main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A DD FLAT:?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A ; opposite_main_mfd_mode_ptrs
	DD	FLAT:?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
	DD	FLAT:?center_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
?opposite_main_mfd_locations@@3PAW4KIOWA_MAIN_MFD_LOCATIONS@@A DD 01H ; opposite_main_mfd_locations
	DD	00H
	DD	02H
?large_right_carat@@3PADA DB 05H			; large_right_carat
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0f7H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0fdH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?large_open_right_carat@@3PADA DB 05H			; large_open_right_carat
	DB	09H
	DB	0fcH
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_left_carat@@3PADA DB 05H				; large_left_carat
	DB	09H
	DB	00H
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_open_left_carat@@3PADA DB 05H			; large_open_left_carat
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_command_heading_carat@@3PADA DB 0bH		; large_command_heading_carat
	DB	06H
	DB	0fbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+2
?small_command_heading_carat@@3PADA DB 07H		; small_command_heading_carat
	DB	04H
	DB	0fdH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dtv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dtv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv81 = -72						; size = 4
tv76 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; get_previous_main_mfd_mode, COMDAT

; 8814 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8815 : 	kiowa_main_mfd_modes
; 8816 : 		previous_mfd_mode;
; 8817 : 
; 8818 : 	ASSERT (kiowa_main_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_previo
  0000f	83 7d 08 0b	 cmp	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH
  00013	7c 18		 jl	 SHORT $LN4@get_previo
$LN5@get_previo:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OIPAMFAC@kiowa_main_mfd_mode_valid?5?$CImfd_@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_previo:

; 8819 : 
; 8820 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_previo
  00033	83 7d 0c 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00037	7c 18		 jl	 SHORT $LN6@get_previo
$LN7@get_previo:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_previo:

; 8821 : 
; 8822 : 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0a	 cmp	 DWORD PTR tv76[ebp], 10	; 0000000aH
  0005b	77 7d		 ja	 SHORT $LN2@get_previo
  0005d	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00060	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN21@get_previo[ecx*4]
$LN8@get_previo:

; 8823 : 	{
; 8824 : 		////////////////////////////////////////
; 8825 : 		case KIOWA_MAIN_MFD_MODE_OFF:
; 8826 : 		////////////////////////////////////////
; 8827 : 		{
; 8828 : 			previous_mfd_mode = get_default_main_mfd_mode (mfd_location);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  00070	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 8829 : 
; 8830 : 			break;

  00073	eb 65		 jmp	 SHORT $LN2@get_previo
$LN9@get_previo:

; 8831 : 		}
; 8832 : 		////////////////////////////////////////
; 8833 : 		case KIOWA_MAIN_MFD_MODE_DAMAGED:
; 8834 : 		////////////////////////////////////////
; 8835 : 		{
; 8836 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_DAMAGED;

  00075	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 8837 : 
; 8838 : 			break;

  0007c	eb 5c		 jmp	 SHORT $LN2@get_previo
$LN10@get_previo:

; 8839 : 		}
; 8840 : 		////////////////////////////////////////
; 8841 : 		case KIOWA_MAIN_MFD_MODE_FLIR:
; 8842 : 		case KIOWA_MAIN_MFD_MODE_DTV:
; 8843 : 		////////////////////////////////////////
; 8844 : 		{
; 8845 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_MISSION;

  0007e	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 10 ; 0000000aH

; 8846 : 
; 8847 : 			break;

  00085	eb 53		 jmp	 SHORT $LN2@get_previo
$LN11@get_previo:

; 8848 : 		}
; 8849 : 		////////////////////////////////////////
; 8850 : 		case KIOWA_MAIN_MFD_MODE_TSD:
; 8851 : 		////////////////////////////////////////
; 8852 : 		{
; 8853 : 			previous_mfd_mode = mfd_location != KIOWA_MAIN_MFD_LOCATION_CENTER ? get_main_mfd_mode_for_eo_sensor () : KIOWA_MAIN_MFD_MODE_MISSION;

  00087	83 7d 0c 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  0008b	74 0a		 je	 SHORT $LN19@get_previo
  0008d	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00092	89 45 b8	 mov	 DWORD PTR tv81[ebp], eax
  00095	eb 07		 jmp	 SHORT $LN20@get_previo
$LN19@get_previo:
  00097	c7 45 b8 0a 00
	00 00		 mov	 DWORD PTR tv81[ebp], 10	; 0000000aH
$LN20@get_previo:
  0009e	8b 45 b8	 mov	 eax, DWORD PTR tv81[ebp]
  000a1	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 8854 : 
; 8855 : 			break;

  000a4	eb 34		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 8856 : 		}
; 8857 : 		////////////////////////////////////////
; 8858 : 		case KIOWA_MAIN_MFD_MODE_ASE:
; 8859 : 		////////////////////////////////////////
; 8860 : 		{
; 8861 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_TSD;

  000a6	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 4

; 8862 : 
; 8863 : 			break;

  000ad	eb 2b		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 8864 : 		}
; 8865 : 		////////////////////////////////////////
; 8866 : 		case KIOWA_MAIN_MFD_MODE_WEAPON:
; 8867 : 		////////////////////////////////////////
; 8868 : 		{
; 8869 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_ASE;

  000af	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 5

; 8870 : 
; 8871 : 			break;

  000b6	eb 22		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 8872 : 		}
; 8873 : 		////////////////////////////////////////
; 8874 : 		case KIOWA_MAIN_MFD_MODE_SYSTEM:
; 8875 : 		////////////////////////////////////////
; 8876 : 		{
; 8877 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_WEAPON;

  000b8	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 6

; 8878 : 
; 8879 : 			break;

  000bf	eb 19		 jmp	 SHORT $LN2@get_previo
$LN15@get_previo:

; 8880 : 		}
; 8881 : 		////////////////////////////////////////
; 8882 : 		case KIOWA_MAIN_MFD_MODE_ENGINE:
; 8883 : 		////////////////////////////////////////
; 8884 : 		{
; 8885 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_SYSTEM;

  000c1	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 7

; 8886 : 
; 8887 : 			break;

  000c8	eb 10		 jmp	 SHORT $LN2@get_previo
$LN16@get_previo:

; 8888 : 		}
; 8889 : 		////////////////////////////////////////
; 8890 : 		case KIOWA_MAIN_MFD_MODE_FLIGHT:
; 8891 : 		////////////////////////////////////////
; 8892 : 		{
; 8893 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_ENGINE;

  000ca	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 8894 : 
; 8895 : 			break;

  000d1	eb 07		 jmp	 SHORT $LN2@get_previo
$LN17@get_previo:

; 8896 : 		}
; 8897 : 		////////////////////////////////////////
; 8898 : 		case KIOWA_MAIN_MFD_MODE_MISSION:
; 8899 : 		////////////////////////////////////////
; 8900 : 		{
; 8901 : 			previous_mfd_mode = KIOWA_MAIN_MFD_MODE_FLIGHT;

  000d3	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9
$LN2@get_previo:

; 8902 : 
; 8903 : 			break;
; 8904 : 		}
; 8905 : 	}
; 8906 : 
; 8907 : 	return (previous_mfd_mode);

  000da	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 8908 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
  000e6	66 90		 npad	 2
$LN21@get_previo:
  000e8	00 00 00 00	 DD	 $LN8@get_previo
  000ec	00 00 00 00	 DD	 $LN9@get_previo
  000f0	00 00 00 00	 DD	 $LN10@get_previo
  000f4	00 00 00 00	 DD	 $LN10@get_previo
  000f8	00 00 00 00	 DD	 $LN11@get_previo
  000fc	00 00 00 00	 DD	 $LN12@get_previo
  00100	00 00 00 00	 DD	 $LN13@get_previo
  00104	00 00 00 00	 DD	 $LN14@get_previo
  00108	00 00 00 00	 DD	 $LN15@get_previo
  0010c	00 00 00 00	 DD	 $LN16@get_previo
  00110	00 00 00 00	 DD	 $LN17@get_previo
?get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_previous_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv81 = -72						; size = 4
tv76 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; get_next_main_mfd_mode, COMDAT

; 8706 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8707 : 	kiowa_main_mfd_modes
; 8708 : 		next_mfd_mode;
; 8709 : 
; 8710 : 	ASSERT (kiowa_main_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_next_m
  0000f	83 7d 08 0b	 cmp	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH
  00013	7c 18		 jl	 SHORT $LN4@get_next_m
$LN5@get_next_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OIPAMFAC@kiowa_main_mfd_mode_valid?5?$CImfd_@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_next_m:

; 8711 : 
; 8712 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_next_m
  00033	83 7d 0c 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00037	7c 18		 jl	 SHORT $LN6@get_next_m
$LN7@get_next_m:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W42@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_next_m:

; 8713 : 
; 8714 : 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0a	 cmp	 DWORD PTR tv76[ebp], 10	; 0000000aH
  0005b	0f 87 86 00 00
	00		 ja	 $LN2@get_next_m
  00061	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00064	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@get_next_m[ecx*4]
$LN8@get_next_m:

; 8715 : 	{
; 8716 : 		////////////////////////////////////////
; 8717 : 		case KIOWA_MAIN_MFD_MODE_OFF:
; 8718 : 		////////////////////////////////////////
; 8719 : 		{
; 8720 : 			next_mfd_mode = get_default_main_mfd_mode (mfd_location);

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  00074	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 8721 : 
; 8722 : 			break;

  00077	eb 6e		 jmp	 SHORT $LN2@get_next_m
$LN9@get_next_m:

; 8723 : 		}
; 8724 : 		////////////////////////////////////////
; 8725 : 		case KIOWA_MAIN_MFD_MODE_DAMAGED:
; 8726 : 		////////////////////////////////////////
; 8727 : 		{
; 8728 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_DAMAGED;

  00079	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 8729 : 
; 8730 : 			break;

  00080	eb 65		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 8731 : 		}
; 8732 : 		////////////////////////////////////////
; 8733 : 		case KIOWA_MAIN_MFD_MODE_FLIR:
; 8734 : 		////////////////////////////////////////
; 8735 : 		{
; 8736 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_TSD;

  00082	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 4

; 8737 : 
; 8738 : 			break;

  00089	eb 5c		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 8739 : 		}
; 8740 : 		////////////////////////////////////////
; 8741 : 		case KIOWA_MAIN_MFD_MODE_DTV:
; 8742 : 		////////////////////////////////////////
; 8743 : 		{
; 8744 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_TSD;

  0008b	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 4

; 8745 : 
; 8746 : 			break;

  00092	eb 53		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 8747 : 		}
; 8748 : 		////////////////////////////////////////
; 8749 : 		case KIOWA_MAIN_MFD_MODE_TSD:
; 8750 : 		////////////////////////////////////////
; 8751 : 		{
; 8752 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_ASE;

  00094	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 5

; 8753 : 
; 8754 : 			break;

  0009b	eb 4a		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 8755 : 		}
; 8756 : 		////////////////////////////////////////
; 8757 : 		case KIOWA_MAIN_MFD_MODE_ASE:
; 8758 : 		////////////////////////////////////////
; 8759 : 		{
; 8760 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_WEAPON;

  0009d	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 6

; 8761 : 
; 8762 : 			break;

  000a4	eb 41		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 8763 : 		}
; 8764 : 		////////////////////////////////////////
; 8765 : 		case KIOWA_MAIN_MFD_MODE_WEAPON:
; 8766 : 		////////////////////////////////////////
; 8767 : 		{
; 8768 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_SYSTEM;

  000a6	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 8769 : 
; 8770 : 			break;

  000ad	eb 38		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 8771 : 		}
; 8772 : 		////////////////////////////////////////
; 8773 : 		case KIOWA_MAIN_MFD_MODE_SYSTEM:
; 8774 : 		////////////////////////////////////////
; 8775 : 		{
; 8776 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_ENGINE;

  000af	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 8777 : 
; 8778 : 			break;

  000b6	eb 2f		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 8779 : 		}
; 8780 : 		////////////////////////////////////////
; 8781 : 		case KIOWA_MAIN_MFD_MODE_ENGINE:
; 8782 : 		////////////////////////////////////////
; 8783 : 		{
; 8784 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_FLIGHT;

  000b8	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 8785 : 
; 8786 : 			break;

  000bf	eb 26		 jmp	 SHORT $LN2@get_next_m
$LN17@get_next_m:

; 8787 : 		}
; 8788 : 		////////////////////////////////////////
; 8789 : 		case KIOWA_MAIN_MFD_MODE_FLIGHT:
; 8790 : 		////////////////////////////////////////
; 8791 : 		{
; 8792 : 			next_mfd_mode = KIOWA_MAIN_MFD_MODE_MISSION;

  000c1	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 10 ; 0000000aH

; 8793 : 
; 8794 : 			break;

  000c8	eb 1d		 jmp	 SHORT $LN2@get_next_m
$LN18@get_next_m:

; 8795 : 		}
; 8796 : 		////////////////////////////////////////
; 8797 : 		case KIOWA_MAIN_MFD_MODE_MISSION:
; 8798 : 		////////////////////////////////////////
; 8799 : 		{
; 8800 : 			next_mfd_mode = mfd_location != KIOWA_MAIN_MFD_LOCATION_CENTER ? get_main_mfd_mode_for_eo_sensor () : KIOWA_MAIN_MFD_MODE_TSD;

  000ca	83 7d 0c 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  000ce	74 0a		 je	 SHORT $LN20@get_next_m
  000d0	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  000d5	89 45 b8	 mov	 DWORD PTR tv81[ebp], eax
  000d8	eb 07		 jmp	 SHORT $LN21@get_next_m
$LN20@get_next_m:
  000da	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv81[ebp], 4
$LN21@get_next_m:
  000e1	8b 45 b8	 mov	 eax, DWORD PTR tv81[ebp]
  000e4	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN2@get_next_m:

; 8801 : 
; 8802 : 			break;
; 8803 : 		}
; 8804 : 	}
; 8805 : 
; 8806 : 	return (next_mfd_mode);

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 8807 : }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
  000f3	90		 npad	 1
$LN22@get_next_m:
  000f4	00 00 00 00	 DD	 $LN8@get_next_m
  000f8	00 00 00 00	 DD	 $LN9@get_next_m
  000fc	00 00 00 00	 DD	 $LN10@get_next_m
  00100	00 00 00 00	 DD	 $LN11@get_next_m
  00104	00 00 00 00	 DD	 $LN12@get_next_m
  00108	00 00 00 00	 DD	 $LN13@get_next_m
  0010c	00 00 00 00	 DD	 $LN14@get_next_m
  00110	00 00 00 00	 DD	 $LN15@get_next_m
  00114	00 00 00 00	 DD	 $LN16@get_next_m
  00118	00 00 00 00	 DD	 $LN17@get_next_m
  0011c	00 00 00 00	 DD	 $LN18@get_next_m
?get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_next_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_damage$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; get_main_mfd_damage, COMDAT

; 8611 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8612 : 	int
; 8613 : 		damage;
; 8614 : 
; 8615 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_main_m
  0000f	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00013	7c 18		 jl	 SHORT $LN4@get_main_m
$LN5@get_main_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_main_m:

; 8616 : 
; 8617 : 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	74 0e		 je	 SHORT $LN6@get_main_m
  00039	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  0003d	74 18		 je	 SHORT $LN7@get_main_m
  0003f	83 7d b8 02	 cmp	 DWORD PTR tv70[ebp], 2
  00043	74 22		 je	 SHORT $LN8@get_main_m
  00045	eb 2e		 jmp	 SHORT $LN2@get_main_m
$LN6@get_main_m:

; 8618 : 	{
; 8619 : 		////////////////////////////////////////
; 8620 : 		case KIOWA_MAIN_MFD_LOCATION_CO_PILOT:
; 8621 : 		////////////////////////////////////////
; 8622 : 		{
; 8623 : 			damage = kiowa_damage.co_pilot_main_mfd;

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0004c	c1 e8 07	 shr	 eax, 7
  0004f	83 e0 01	 and	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 8624 : 
; 8625 : 			break;

  00055	eb 1e		 jmp	 SHORT $LN2@get_main_m
$LN7@get_main_m:

; 8626 : 		}
; 8627 : 		////////////////////////////////////////
; 8628 : 		case KIOWA_MAIN_MFD_LOCATION_PILOT:
; 8629 : 		////////////////////////////////////////
; 8630 : 		{
; 8631 : 			damage = kiowa_damage.pilot_main_mfd;

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0005c	c1 e8 08	 shr	 eax, 8
  0005f	83 e0 01	 and	 eax, 1
  00062	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 8632 : 
; 8633 : 			break;

  00065	eb 0e		 jmp	 SHORT $LN2@get_main_m
$LN8@get_main_m:

; 8634 : 		}
; 8635 : 		////////////////////////////////////////
; 8636 : 		case KIOWA_MAIN_MFD_LOCATION_CENTER:
; 8637 : 		////////////////////////////////////////
; 8638 : 		{
; 8639 : 			damage = kiowa_damage.center_main_mfd;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0006c	c1 e8 09	 shr	 eax, 9
  0006f	83 e0 01	 and	 eax, 1
  00072	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax
$LN2@get_main_m:

; 8640 : 
; 8641 : 			break;
; 8642 : 		}
; 8643 : 		////////////////////////////////////////
; 8644 : 	}
; 8645 : 
; 8646 : 	return (damage);

  00075	8b 45 fc	 mov	 eax, DWORD PTR _damage$[ebp]

; 8647 : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
?get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_main_mfd_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_mfd_mode$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; get_default_main_mfd_mode, COMDAT

; 8568 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8569 : 	kiowa_main_mfd_modes
; 8570 : 		mfd_mode;
; 8571 : 
; 8572 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_defaul
  0000f	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00013	7c 18		 jl	 SHORT $LN4@get_defaul
$LN5@get_defaul:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_defaul:

; 8573 : 
; 8574 : 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	74 0e		 je	 SHORT $LN6@get_defaul
  00039	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  0003d	74 11		 je	 SHORT $LN7@get_defaul
  0003f	83 7d b8 02	 cmp	 DWORD PTR tv70[ebp], 2
  00043	74 14		 je	 SHORT $LN8@get_defaul
  00045	eb 19		 jmp	 SHORT $LN2@get_defaul
$LN6@get_defaul:

; 8575 : 	{
; 8576 : 		////////////////////////////////////////
; 8577 : 		case KIOWA_MAIN_MFD_LOCATION_CO_PILOT:
; 8578 : 		////////////////////////////////////////
; 8579 : 		{
; 8580 : 			mfd_mode = KIOWA_MAIN_MFD_MODE_ENGINE;

  00047	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 8

; 8581 : 
; 8582 : 			break;

  0004e	eb 10		 jmp	 SHORT $LN2@get_defaul
$LN7@get_defaul:

; 8583 : 		}
; 8584 : 		////////////////////////////////////////
; 8585 : 		case KIOWA_MAIN_MFD_LOCATION_PILOT:
; 8586 : 		////////////////////////////////////////
; 8587 : 		{
; 8588 : 			mfd_mode = KIOWA_MAIN_MFD_MODE_TSD;

  00050	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4

; 8589 : 
; 8590 : 			break;

  00057	eb 07		 jmp	 SHORT $LN2@get_defaul
$LN8@get_defaul:

; 8591 : 		}
; 8592 : 		////////////////////////////////////////
; 8593 : 		case KIOWA_MAIN_MFD_LOCATION_CENTER:
; 8594 : 		////////////////////////////////////////
; 8595 : 		{
; 8596 : 			mfd_mode = KIOWA_MAIN_MFD_MODE_SYSTEM;

  00059	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 7
$LN2@get_defaul:

; 8597 : 
; 8598 : 			break;
; 8599 : 		}
; 8600 : 		////////////////////////////////////////
; 8601 : 	}
; 8602 : 
; 8603 : 	return (mfd_mode);

  00060	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 8604 : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_default_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv141 = -356						; size = 4
tv90 = -356						; size = 4
_width$1 = -288						; size = 4
_specular$2 = -284					; size = 4
_colour$3 = -280					; size = 4
_quad$4 = -276						; size = 256
_store_background_colour$5 = -20			; size = 4
_store_road_colour$6 = -16				; size = 4
_store_river_colour$7 = -12				; size = 4
_store_contour_colour$8 = -8				; size = 4
_border_size$ = -4					; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_overlaid_main_mfd, COMDAT

; 7879 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7880 : 	float
; 7881 : 		border_size;
; 7882 : 
; 7883 : 	ASSERT (mfd_screen);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_overl
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 7884 : 
; 7885 : 	ASSERT (kiowa_main_mfd_mode_valid (mode));

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0002e	7c 06		 jl	 SHORT $LN8@draw_overl
  00030	83 7d 0c 0b	 cmp	 DWORD PTR _mode$[ebp], 11 ; 0000000bH
  00034	7c 18		 jl	 SHORT $LN7@draw_overl
$LN8@draw_overl:
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003b	83 c0 06	 add	 eax, 6
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GKEJPACO@kiowa_main_mfd_mode_valid?5?$CImode@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_overl:

; 7886 : 
; 7887 : 	ASSERT (kiowa_main_mfd_location_valid (location));

  0004e	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00052	7c 06		 jl	 SHORT $LN10@draw_overl
  00054	83 7d 10 03	 cmp	 DWORD PTR _location$[ebp], 3
  00058	7c 18		 jl	 SHORT $LN9@draw_overl
$LN10@draw_overl:
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0005f	83 c0 08	 add	 eax, 8
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IAJJOBAL@kiowa_main_mfd_location_valid?5?$CI@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@draw_overl:

; 7888 : 
; 7889 : 	if (mode == KIOWA_MAIN_MFD_MODE_OFF)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00076	75 05		 jne	 SHORT $LN11@draw_overl

; 7890 : 	{
; 7891 : 		return;

  00078	e9 81 10 00 00	 jmp	 $LN1@draw_overl
$LN11@draw_overl:

; 7892 : 	}
; 7893 : 
; 7894 : 	////////////////////////////////////////
; 7895 : 	//
; 7896 : 	// scale position and size wrt screen resolution
; 7897 : 	//
; 7898 : 	////////////////////////////////////////
; 7899 : 
; 7900 : 	border_size = 4.0 * full_screen_width * (1.0 / 640.0);

  0007d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00085	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  0008d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 fc	 movss	 DWORD PTR _border_size$[ebp], xmm0

; 7901 : 
; 7902 : 	if (get_global_unscaled_displays ())

  0009e	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  000a5	74 12		 je	 SHORT $LN12@draw_overl

; 7903 : 	{
; 7904 : 		mfd_screen_width = mfd_viewport_size;

  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  000af	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 7905 : 	}
; 7906 : 	else

  000b7	eb 1c		 jmp	 SHORT $LN13@draw_overl
$LN12@draw_overl:

; 7907 : 	{
; 7908 : 		mfd_screen_width = full_screen_width * (128.0 / 640.0);

  000b9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  000c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0
$LN13@draw_overl:

; 7909 : 	}
; 7910 : 
; 7911 : 	mfd_screen_height = mfd_screen_width;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  000dd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 7912 : 
; 7913 : 	switch (location)

  000e5	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  000e8	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  000ee	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR tv90[ebp], 0
  000f5	74 0b		 je	 SHORT $LN14@draw_overl
  000f7	83 bd 9c fe ff
	ff 01		 cmp	 DWORD PTR tv90[ebp], 1
  000fe	74 2e		 je	 SHORT $LN15@draw_overl
  00100	eb 66		 jmp	 SHORT $LN2@draw_overl
$LN14@draw_overl:

; 7914 : 	{
; 7915 : 		////////////////////////////////////////
; 7916 : 		case KIOWA_MAIN_MFD_LOCATION_CO_PILOT:
; 7917 : 		////////////////////////////////////////
; 7918 : 		{
; 7919 : 			mfd_screen_x_min = border_size;

  00102	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _border_size$[ebp]
  00107	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 7920 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  0010f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00117	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0011c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00124	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 7921 : 
; 7922 : 			break;

  0012c	eb 3a		 jmp	 SHORT $LN2@draw_overl
$LN15@draw_overl:

; 7923 : 		}
; 7924 : 		////////////////////////////////////////
; 7925 : 		case KIOWA_MAIN_MFD_LOCATION_PILOT:
; 7926 : 		////////////////////////////////////////
; 7927 : 		{
; 7928 : 			mfd_screen_x_min = full_screen_width - border_size - mfd_screen_width;

  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_width@@3MA
  00136	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0013b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00143	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 7929 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  0014b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00153	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  00158	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00160	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0
$LN2@draw_overl:

; 7930 : 
; 7931 : 			break;
; 7932 : 		}
; 7933 : 	}
; 7934 : 
; 7935 : 	mfd_screen_x_max = mfd_screen_x_min + mfd_screen_width - 0.0001;

  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00170	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00178	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0017c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 7936 : 	mfd_screen_y_max = mfd_screen_y_min + mfd_screen_height - 0.0001;

  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00198	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001a0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001a4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  001ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 7937 : 
; 7938 : 	mfd_screen_x_scale = mfd_viewport_size / mfd_screen_width;

  001b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001c0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  001c8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 7939 : 	mfd_screen_y_scale = mfd_viewport_size / mfd_screen_height;

  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001d8	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001e0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 7940 : 
; 7941 : 	draw_main_display = TRUE;

  001e8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 7942 : 
; 7943 : 	////////////////////////////////////////
; 7944 : 	//
; 7945 : 	// draw MFD display
; 7946 : 	//
; 7947 : 	////////////////////////////////////////
; 7948 : 
; 7949 : 	switch (mode)

  001f2	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  001f5	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv141[ebp], eax
  001fb	83 bd 9c fe ff
	ff 0a		 cmp	 DWORD PTR tv141[ebp], 10 ; 0000000aH
  00202	0f 87 f2 0a 00
	00		 ja	 $LN42@draw_overl
  00208	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv141[ebp]
  0020e	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@draw_overl[ecx*4]
$LN16@draw_overl:

; 7950 : 	{
; 7951 : 		////////////////////////////////////////
; 7952 : 		case KIOWA_MAIN_MFD_MODE_OFF:
; 7953 : 		////////////////////////////////////////
; 7954 : 		{
; 7955 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00215	51		 push	 ecx
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	51		 push	 ecx
  00224	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0022c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00231	51		 push	 ecx
  00232	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7956 : 
; 7957 : 			set_active_screen (mfd_screen);

  00258	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7958 : 
; 7959 : 			if (lock_screen (mfd_screen))

  00261	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0026a	85 c0		 test	 eax, eax
  0026c	74 3a		 je	 SHORT $LN17@draw_overl

; 7960 : 			{
; 7961 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0026e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00273	50		 push	 eax
  00274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0027a	83 e9 01	 sub	 ecx, 1
  0027d	51		 push	 ecx
  0027e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00284	83 ea 01	 sub	 edx, 1
  00287	52		 push	 edx
  00288	6a 00		 push	 0
  0028a	6a 00		 push	 0
  0028c	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7962 : 
; 7963 : 				draw_layout_grid ();

  00291	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7964 : 
; 7965 : 				flush_screen_texture_graphics (mfd_screen);

  00296	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7966 : 
; 7967 : 				unlock_screen (mfd_screen);

  0029f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_overl:

; 7968 : 			}
; 7969 : 
; 7970 : 			break;

  002a8	e9 5e 0a 00 00	 jmp	 $LN4@draw_overl
$LN18@draw_overl:

; 7971 : 		}
; 7972 : 		////////////////////////////////////////
; 7973 : 		case KIOWA_MAIN_MFD_MODE_DAMAGED:
; 7974 : 		////////////////////////////////////////
; 7975 : 		{
; 7976 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  002ad	51		 push	 ecx
  002ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  002b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bb	51		 push	 ecx
  002bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  002c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c9	51		 push	 ecx
  002ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  002d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d7	51		 push	 ecx
  002d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  002e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e5	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7977 : 
; 7978 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  002ea	51		 push	 ecx
  002eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  002f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f8	51		 push	 ecx
  002f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	51		 push	 ecx
  00307	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0030f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00314	51		 push	 ecx
  00315	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0031d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00322	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00327	50		 push	 eax
  00328	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7979 : 
; 7980 : 			set_active_screen (mfd_screen);

  0032d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7981 : 
; 7982 : 			if (lock_screen (mfd_screen))

  00336	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00339	50		 push	 eax
  0033a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0033f	85 c0		 test	 eax, eax
  00341	74 3f		 je	 SHORT $LN19@draw_overl

; 7983 : 			{
; 7984 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00343	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00348	50		 push	 eax
  00349	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0034f	83 e9 01	 sub	 ecx, 1
  00352	51		 push	 ecx
  00353	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00359	83 ea 01	 sub	 edx, 1
  0035c	52		 push	 edx
  0035d	6a 00		 push	 0
  0035f	6a 00		 push	 0
  00361	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7985 : 
; 7986 : 				draw_layout_grid ();

  00366	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7987 : 
; 7988 : 				draw_damaged_mfd ();

  0036b	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 7989 : 
; 7990 : 				flush_screen_texture_graphics (mfd_screen);

  00370	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00373	50		 push	 eax
  00374	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7991 : 
; 7992 : 				unlock_screen (mfd_screen);

  00379	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0037c	50		 push	 eax
  0037d	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_overl:

; 7993 : 			}
; 7994 : 
; 7995 : 			break;

  00382	e9 84 09 00 00	 jmp	 $LN4@draw_overl
$LN20@draw_overl:

; 7996 : 		}
; 7997 : 		////////////////////////////////////////
; 7998 : 		case KIOWA_MAIN_MFD_MODE_FLIR:
; 7999 : 		////////////////////////////////////////
; 8000 : 		{
; 8001 : 			if (!kiowa_damage.flir)

  00387	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0038c	83 e0 01	 and	 eax, 1
  0038f	75 0e		 jne	 SHORT $LN21@draw_overl

; 8002 : 			{
; 8003 : 				draw_full_screen_3d_eo_display (&kiowa_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00391	6a 03		 push	 3
  00393	68 00 00 00 00	 push	 OFFSET ?kiowa_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_flir
  00398	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 8004 : 			}
; 8005 : 			else

  0039d	eb 3d		 jmp	 SHORT $LN22@draw_overl
$LN21@draw_overl:

; 8006 : 			{
; 8007 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0039f	51		 push	 ecx
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	51		 push	 ecx
  003ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  003b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bb	51		 push	 ecx
  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	51		 push	 ecx
  003ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  003d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d7	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN22@draw_overl:

; 8008 : 			}
; 8009 : 
; 8010 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003dc	51		 push	 ecx
  003dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ea	51		 push	 ecx
  003eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f8	51		 push	 ecx
  003f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00406	51		 push	 ecx
  00407	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0040f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00414	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8011 : 
; 8012 : 			set_active_screen (mfd_screen);

  0041f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8013 : 
; 8014 : 			if (lock_screen (mfd_screen))

  00428	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0042b	50		 push	 eax
  0042c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00431	85 c0		 test	 eax, eax
  00433	74 41		 je	 SHORT $LN23@draw_overl

; 8015 : 			{
; 8016 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00435	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0043a	50		 push	 eax
  0043b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00441	83 e9 01	 sub	 ecx, 1
  00444	51		 push	 ecx
  00445	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0044b	83 ea 01	 sub	 edx, 1
  0044e	52		 push	 edx
  0044f	6a 00		 push	 0
  00451	6a 00		 push	 0
  00453	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8017 : 
; 8018 : 				draw_layout_grid ();

  00458	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8019 : 
; 8020 : 				draw_2d_flir_mfd (TRUE);

  0045d	6a 01		 push	 1
  0045f	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 8021 : 
; 8022 : 				flush_screen_texture_graphics (mfd_screen);

  00464	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00467	50		 push	 eax
  00468	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8023 : 
; 8024 : 				unlock_screen (mfd_screen);

  0046d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_overl:

; 8025 : 			}
; 8026 : 
; 8027 : 			set_pilots_full_screen_params (FALSE);

  00476	6a 00		 push	 0
  00478	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 8028 : 
; 8029 : 			break;

  0047d	e9 89 08 00 00	 jmp	 $LN4@draw_overl
$LN24@draw_overl:

; 8030 : 		}
; 8031 : 		////////////////////////////////////////
; 8032 : 		case KIOWA_MAIN_MFD_MODE_DTV:
; 8033 : 		////////////////////////////////////////
; 8034 : 		{
; 8035 : 			if (!kiowa_damage.dtv)

  00482	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00487	d1 e8		 shr	 eax, 1
  00489	83 e0 01	 and	 eax, 1
  0048c	75 0e		 jne	 SHORT $LN25@draw_overl

; 8036 : 			{
; 8037 : 				draw_full_screen_3d_eo_display (&kiowa_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  0048e	6a 04		 push	 4
  00490	68 00 00 00 00	 push	 OFFSET ?kiowa_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_dtv
  00495	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 8038 : 			}
; 8039 : 			else

  0049a	eb 3d		 jmp	 SHORT $LN26@draw_overl
$LN25@draw_overl:

; 8040 : 			{
; 8041 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0049c	51		 push	 ecx
  0049d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  004a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004aa	51		 push	 ecx
  004ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  004b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b8	51		 push	 ecx
  004b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  004c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c6	51		 push	 ecx
  004c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN26@draw_overl:

; 8042 : 			}
; 8043 : 
; 8044 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  004d9	51		 push	 ecx
  004da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	51		 push	 ecx
  004e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  004f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f5	51		 push	 ecx
  004f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	51		 push	 ecx
  00504	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0050c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00511	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8045 : 
; 8046 : 			set_active_screen (mfd_screen);

  0051c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0051f	50		 push	 eax
  00520	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8047 : 
; 8048 : 			if (lock_screen (mfd_screen))

  00525	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00528	50		 push	 eax
  00529	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0052e	85 c0		 test	 eax, eax
  00530	74 41		 je	 SHORT $LN27@draw_overl

; 8049 : 			{
; 8050 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00532	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00537	50		 push	 eax
  00538	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0053e	83 e9 01	 sub	 ecx, 1
  00541	51		 push	 ecx
  00542	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00548	83 ea 01	 sub	 edx, 1
  0054b	52		 push	 edx
  0054c	6a 00		 push	 0
  0054e	6a 00		 push	 0
  00550	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8051 : 
; 8052 : 				draw_layout_grid ();

  00555	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8053 : 
; 8054 : 				draw_2d_dtv_mfd (TRUE);

  0055a	6a 01		 push	 1
  0055c	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 8055 : 
; 8056 : 				flush_screen_texture_graphics (mfd_screen);

  00561	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8057 : 
; 8058 : 				unlock_screen (mfd_screen);

  0056a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0056d	50		 push	 eax
  0056e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_overl:

; 8059 : 			}
; 8060 : 
; 8061 : 			set_pilots_full_screen_params (FALSE);

  00573	6a 00		 push	 0
  00575	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 8062 : 
; 8063 : 			break;

  0057a	e9 8c 07 00 00	 jmp	 $LN4@draw_overl
$LN28@draw_overl:

; 8064 : 		}
; 8065 : 		////////////////////////////////////////
; 8066 : 		case KIOWA_MAIN_MFD_MODE_TSD:
; 8067 : 		////////////////////////////////////////
; 8068 : 		{
; 8069 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0057f	51		 push	 ecx
  00580	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00588	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058d	51		 push	 ecx
  0058e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00596	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059b	51		 push	 ecx
  0059c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  005a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a9	51		 push	 ecx
  005aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 8070 : 
; 8071 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005bc	51		 push	 ecx
  005bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ca	51		 push	 ecx
  005cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d8	51		 push	 ecx
  005d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e6	51		 push	 ecx
  005e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005f9	50		 push	 eax
  005fa	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8072 : 
; 8073 : 			set_active_screen (mfd_screen);

  005ff	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00602	50		 push	 eax
  00603	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8074 : 
; 8075 : 			if (lock_screen (mfd_screen))

  00608	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0060b	50		 push	 eax
  0060c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00611	85 c0		 test	 eax, eax
  00613	0f 84 5d 01 00
	00		 je	 $LN29@draw_overl

; 8076 : 			{
; 8077 : 				rgb_colour
; 8078 : 					store_contour_colour,
; 8079 : 					store_river_colour,
; 8080 : 					store_road_colour;
; 8081 : 
; 8082 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00619	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0061e	50		 push	 eax
  0061f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00625	83 e9 01	 sub	 ecx, 1
  00628	51		 push	 ecx
  00629	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0062f	83 ea 01	 sub	 edx, 1
  00632	52		 push	 edx
  00633	6a 00		 push	 0
  00635	6a 00		 push	 0
  00637	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8083 : 
; 8084 : 				draw_layout_grid ();

  0063c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8085 : 
; 8086 : 				store_contour_colour	= MFD_CONTOUR_COLOUR;

  00641	b8 04 00 00 00	 mov	 eax, 4
  00646	6b c8 06	 imul	 ecx, eax, 6
  00649	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0064f	89 55 f8	 mov	 DWORD PTR _store_contour_colour$8[ebp], edx

; 8087 : 				store_river_colour	= MFD_RIVER_COLOUR;

  00652	b8 04 00 00 00	 mov	 eax, 4
  00657	6b c8 07	 imul	 ecx, eax, 7
  0065a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00660	89 55 f4	 mov	 DWORD PTR _store_river_colour$7[ebp], edx

; 8088 : 				store_road_colour		= MFD_ROAD_COLOUR;

  00663	b8 04 00 00 00	 mov	 eax, 4
  00668	c1 e0 03	 shl	 eax, 3
  0066b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00671	89 4d f0	 mov	 DWORD PTR _store_road_colour$6[ebp], ecx

; 8089 : 
; 8090 : 				set_rgb_colour (MFD_CONTOUR_COLOUR,   0, 151,   0, 255);

  00674	b8 04 00 00 00	 mov	 eax, 4
  00679	6b c8 06	 imul	 ecx, eax, 6
  0067c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00683	b8 04 00 00 00	 mov	 eax, 4
  00688	6b c8 06	 imul	 ecx, eax, 6
  0068b	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00692	b8 04 00 00 00	 mov	 eax, 4
  00697	6b c8 06	 imul	 ecx, eax, 6
  0069a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006a1	b8 04 00 00 00	 mov	 eax, 4
  006a6	6b c8 06	 imul	 ecx, eax, 6
  006a9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8091 : 				set_rgb_colour (MFD_RIVER_COLOUR,     0, 176,   0, 255);

  006b0	b8 04 00 00 00	 mov	 eax, 4
  006b5	6b c8 07	 imul	 ecx, eax, 7
  006b8	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006bf	b8 04 00 00 00	 mov	 eax, 4
  006c4	6b c8 07	 imul	 ecx, eax, 7
  006c7	c6 81 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 176 ; 000000b0H
  006ce	b8 04 00 00 00	 mov	 eax, 4
  006d3	6b c8 07	 imul	 ecx, eax, 7
  006d6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006dd	b8 04 00 00 00	 mov	 eax, 4
  006e2	6b c8 07	 imul	 ecx, eax, 7
  006e5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 8092 : 				set_rgb_colour (MFD_ROAD_COLOUR,      0, 200,   0, 255);

  006ec	b8 04 00 00 00	 mov	 eax, 4
  006f1	c1 e0 03	 shl	 eax, 3
  006f4	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  006fb	b8 04 00 00 00	 mov	 eax, 4
  00700	c1 e0 03	 shl	 eax, 3
  00703	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  0070a	b8 04 00 00 00	 mov	 eax, 4
  0070f	c1 e0 03	 shl	 eax, 3
  00712	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00719	b8 04 00 00 00	 mov	 eax, 4
  0071e	c1 e0 03	 shl	 eax, 3
  00721	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 8093 : 
; 8094 : 				draw_tactical_situation_display_mfd (location);

  00728	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  0072b	50		 push	 eax
  0072c	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 8095 : 
; 8096 : 				MFD_CONTOUR_COLOUR	= store_contour_colour;

  00731	b8 04 00 00 00	 mov	 eax, 4
  00736	6b c8 06	 imul	 ecx, eax, 6
  00739	8b 55 f8	 mov	 edx, DWORD PTR _store_contour_colour$8[ebp]
  0073c	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 8097 : 				MFD_RIVER_COLOUR		= store_river_colour;

  00742	b8 04 00 00 00	 mov	 eax, 4
  00747	6b c8 07	 imul	 ecx, eax, 7
  0074a	8b 55 f4	 mov	 edx, DWORD PTR _store_river_colour$7[ebp]
  0074d	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 8098 : 				MFD_ROAD_COLOUR		= store_road_colour;

  00753	b8 04 00 00 00	 mov	 eax, 4
  00758	c1 e0 03	 shl	 eax, 3
  0075b	8b 4d f0	 mov	 ecx, DWORD PTR _store_road_colour$6[ebp]
  0075e	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 8099 : 
; 8100 : 				flush_screen_texture_graphics (mfd_screen);

  00764	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00767	50		 push	 eax
  00768	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8101 : 
; 8102 : 				unlock_screen (mfd_screen);

  0076d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00770	50		 push	 eax
  00771	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN29@draw_overl:

; 8103 : 			}
; 8104 : 
; 8105 : 			break;

  00776	e9 90 05 00 00	 jmp	 $LN4@draw_overl
$LN30@draw_overl:

; 8106 : 		}
; 8107 : 		////////////////////////////////////////
; 8108 : 		case KIOWA_MAIN_MFD_MODE_ASE:
; 8109 : 		////////////////////////////////////////
; 8110 : 		{
; 8111 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0077b	51		 push	 ecx
  0077c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00784	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00789	51		 push	 ecx
  0078a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00792	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00797	51		 push	 ecx
  00798	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  007a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a5	51		 push	 ecx
  007a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  007ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b3	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 8112 : 
; 8113 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  007b8	51		 push	 ecx
  007b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  007c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c6	51		 push	 ecx
  007c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d4	51		 push	 ecx
  007d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e2	51		 push	 ecx
  007e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007f5	50		 push	 eax
  007f6	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8114 : 
; 8115 : 			set_active_screen (mfd_screen);

  007fb	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007fe	50		 push	 eax
  007ff	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8116 : 
; 8117 : 			if (lock_screen (mfd_screen))

  00804	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00807	50		 push	 eax
  00808	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0080d	85 c0		 test	 eax, eax
  0080f	74 43		 je	 SHORT $LN31@draw_overl

; 8118 : 			{
; 8119 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00811	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00816	50		 push	 eax
  00817	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0081d	83 e9 01	 sub	 ecx, 1
  00820	51		 push	 ecx
  00821	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00827	83 ea 01	 sub	 edx, 1
  0082a	52		 push	 edx
  0082b	6a 00		 push	 0
  0082d	6a 00		 push	 0
  0082f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8120 : 
; 8121 : 				draw_layout_grid ();

  00834	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8122 : 
; 8123 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  00839	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  0083c	50		 push	 eax
  0083d	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 8124 : 
; 8125 : 				flush_screen_texture_graphics (mfd_screen);

  00842	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00845	50		 push	 eax
  00846	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8126 : 
; 8127 : 				unlock_screen (mfd_screen);

  0084b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0084e	50		 push	 eax
  0084f	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_overl:

; 8128 : 			}
; 8129 : 
; 8130 : 			break;

  00854	e9 b2 04 00 00	 jmp	 $LN4@draw_overl
$LN32@draw_overl:

; 8131 : 		}
; 8132 : 		////////////////////////////////////////
; 8133 : 		case KIOWA_MAIN_MFD_MODE_WEAPON:
; 8134 : 		////////////////////////////////////////
; 8135 : 		{
; 8136 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00859	51		 push	 ecx
  0085a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00862	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00867	51		 push	 ecx
  00868	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00870	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00875	51		 push	 ecx
  00876	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0087e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00883	51		 push	 ecx
  00884	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0088c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00891	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 8137 : 
; 8138 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00896	51		 push	 ecx
  00897	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	51		 push	 ecx
  008a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	51		 push	 ecx
  008b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  008bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c0	51		 push	 ecx
  008c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008d3	50		 push	 eax
  008d4	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8139 : 
; 8140 : 			set_active_screen (mfd_screen);

  008d9	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008dc	50		 push	 eax
  008dd	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8141 : 
; 8142 : 			if (lock_screen (mfd_screen))

  008e2	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008e5	50		 push	 eax
  008e6	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  008eb	85 c0		 test	 eax, eax
  008ed	74 3f		 je	 SHORT $LN33@draw_overl

; 8143 : 			{
; 8144 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  008ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008f4	50		 push	 eax
  008f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008fb	83 e9 01	 sub	 ecx, 1
  008fe	51		 push	 ecx
  008ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00905	83 ea 01	 sub	 edx, 1
  00908	52		 push	 edx
  00909	6a 00		 push	 0
  0090b	6a 00		 push	 0
  0090d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8145 : 
; 8146 : 				draw_layout_grid ();

  00912	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8147 : 
; 8148 : 				draw_weapon_display_mfd ();

  00917	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 8149 : 
; 8150 : 				flush_screen_texture_graphics (mfd_screen);

  0091c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0091f	50		 push	 eax
  00920	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8151 : 
; 8152 : 				unlock_screen (mfd_screen);

  00925	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00928	50		 push	 eax
  00929	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN33@draw_overl:

; 8153 : 			}
; 8154 : 
; 8155 : 			break;

  0092e	e9 d8 03 00 00	 jmp	 $LN4@draw_overl
$LN34@draw_overl:

; 8156 : 		}
; 8157 : 		////////////////////////////////////////
; 8158 : 		case KIOWA_MAIN_MFD_MODE_SYSTEM:
; 8159 : 		////////////////////////////////////////
; 8160 : 		{
; 8161 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00933	51		 push	 ecx
  00934	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0093c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00941	51		 push	 ecx
  00942	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0094a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094f	51		 push	 ecx
  00950	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00958	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095d	51		 push	 ecx
  0095e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00966	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 8162 : 
; 8163 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00970	51		 push	 ecx
  00971	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00979	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097e	51		 push	 ecx
  0097f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00987	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098c	51		 push	 ecx
  0098d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00995	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099a	51		 push	 ecx
  0099b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  009a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009ad	50		 push	 eax
  009ae	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8164 : 
; 8165 : 			set_active_screen (mfd_screen);

  009b3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009b6	50		 push	 eax
  009b7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8166 : 
; 8167 : 			if (lock_screen (mfd_screen))

  009bc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009bf	50		 push	 eax
  009c0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009c5	85 c0		 test	 eax, eax
  009c7	74 3f		 je	 SHORT $LN35@draw_overl

; 8168 : 			{
; 8169 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  009c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  009ce	50		 push	 eax
  009cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009d5	83 e9 01	 sub	 ecx, 1
  009d8	51		 push	 ecx
  009d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009df	83 ea 01	 sub	 edx, 1
  009e2	52		 push	 edx
  009e3	6a 00		 push	 0
  009e5	6a 00		 push	 0
  009e7	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8170 : 
; 8171 : 				draw_layout_grid ();

  009ec	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8172 : 
; 8173 : 				draw_system_display_mfd ();

  009f1	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 8174 : 
; 8175 : 				flush_screen_texture_graphics (mfd_screen);

  009f6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009f9	50		 push	 eax
  009fa	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8176 : 
; 8177 : 				unlock_screen (mfd_screen);

  009ff	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a02	50		 push	 eax
  00a03	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_overl:

; 8178 : 			}
; 8179 : 
; 8180 : 			break;

  00a08	e9 fe 02 00 00	 jmp	 $LN4@draw_overl
$LN36@draw_overl:

; 8181 : 		}
; 8182 : 		////////////////////////////////////////
; 8183 : 		case KIOWA_MAIN_MFD_MODE_ENGINE:
; 8184 : 		////////////////////////////////////////
; 8185 : 		{
; 8186 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00a0d	51		 push	 ecx
  00a0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00a16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1b	51		 push	 ecx
  00a1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00a24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a29	51		 push	 ecx
  00a2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00a32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a37	51		 push	 ecx
  00a38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00a40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a45	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 8187 : 
; 8188 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a4a	51		 push	 ecx
  00a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a58	51		 push	 ecx
  00a59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	51		 push	 ecx
  00a67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a74	51		 push	 ecx
  00a75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a87	50		 push	 eax
  00a88	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8189 : 
; 8190 : 			set_active_screen (mfd_screen);

  00a8d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a90	50		 push	 eax
  00a91	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8191 : 
; 8192 : 			if (lock_screen (mfd_screen))

  00a96	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a99	50		 push	 eax
  00a9a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00a9f	85 c0		 test	 eax, eax
  00aa1	74 3f		 je	 SHORT $LN37@draw_overl

; 8193 : 			{
; 8194 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00aa3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00aa8	50		 push	 eax
  00aa9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00aaf	83 e9 01	 sub	 ecx, 1
  00ab2	51		 push	 ecx
  00ab3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00ab9	83 ea 01	 sub	 edx, 1
  00abc	52		 push	 edx
  00abd	6a 00		 push	 0
  00abf	6a 00		 push	 0
  00ac1	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8195 : 
; 8196 : 				draw_layout_grid ();

  00ac6	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8197 : 
; 8198 : 				draw_engine_display_mfd ();

  00acb	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 8199 : 
; 8200 : 				flush_screen_texture_graphics (mfd_screen);

  00ad0	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ad3	50		 push	 eax
  00ad4	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8201 : 
; 8202 : 				unlock_screen (mfd_screen);

  00ad9	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_overl:

; 8203 : 			}
; 8204 : 
; 8205 : 			break;

  00ae2	e9 24 02 00 00	 jmp	 $LN4@draw_overl
$LN38@draw_overl:

; 8206 : 		}
; 8207 : 		////////////////////////////////////////
; 8208 : 		case KIOWA_MAIN_MFD_MODE_FLIGHT:
; 8209 : 		////////////////////////////////////////
; 8210 : 		{
; 8211 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00ae7	51		 push	 ecx
  00ae8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00af0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af5	51		 push	 ecx
  00af6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00afe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b03	51		 push	 ecx
  00b04	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00b0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b11	51		 push	 ecx
  00b12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00b1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1f	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 8212 : 
; 8213 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00b24	51		 push	 ecx
  00b25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	51		 push	 ecx
  00b33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b40	51		 push	 ecx
  00b41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4e	51		 push	 ecx
  00b4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8214 : 
; 8215 : 			set_active_screen (mfd_screen);

  00b67	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b6a	50		 push	 eax
  00b6b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8216 : 
; 8217 : 			if (lock_screen (mfd_screen))

  00b70	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b73	50		 push	 eax
  00b74	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00b79	85 c0		 test	 eax, eax
  00b7b	0f 84 9d 00 00
	00		 je	 $LN39@draw_overl

; 8218 : 			{
; 8219 : 				rgb_colour
; 8220 : 					store_background_colour;
; 8221 : 
; 8222 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00b81	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00b86	50		 push	 eax
  00b87	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00b8d	83 e9 01	 sub	 ecx, 1
  00b90	51		 push	 ecx
  00b91	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00b97	83 ea 01	 sub	 edx, 1
  00b9a	52		 push	 edx
  00b9b	6a 00		 push	 0
  00b9d	6a 00		 push	 0
  00b9f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8223 : 
; 8224 : 				draw_layout_grid ();

  00ba4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8225 : 
; 8226 : 				store_background_colour = MFD_BACKGROUND_COLOUR;

  00ba9	b8 04 00 00 00	 mov	 eax, 4
  00bae	6b c8 09	 imul	 ecx, eax, 9
  00bb1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bb7	89 55 ec	 mov	 DWORD PTR _store_background_colour$5[ebp], edx

; 8227 : 
; 8228 : 				set_rgb_colour (MFD_BACKGROUND_COLOUR, 255, 255, 255, 0);

  00bba	b8 04 00 00 00	 mov	 eax, 4
  00bbf	6b c8 09	 imul	 ecx, eax, 9
  00bc2	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00bc9	b8 04 00 00 00	 mov	 eax, 4
  00bce	6b c8 09	 imul	 ecx, eax, 9
  00bd1	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00bd8	b8 04 00 00 00	 mov	 eax, 4
  00bdd	6b c8 09	 imul	 ecx, eax, 9
  00be0	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00be7	b8 04 00 00 00	 mov	 eax, 4
  00bec	6b c8 09	 imul	 ecx, eax, 9
  00bef	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 8229 : 
; 8230 : 				draw_flight_display_mfd ();

  00bf6	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 8231 : 
; 8232 : 				MFD_BACKGROUND_COLOUR = store_background_colour;

  00bfb	b8 04 00 00 00	 mov	 eax, 4
  00c00	6b c8 09	 imul	 ecx, eax, 9
  00c03	8b 55 ec	 mov	 edx, DWORD PTR _store_background_colour$5[ebp]
  00c06	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 8233 : 
; 8234 : 				flush_screen_texture_graphics (mfd_screen);

  00c0c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c0f	50		 push	 eax
  00c10	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8235 : 
; 8236 : 				unlock_screen (mfd_screen);

  00c15	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c18	50		 push	 eax
  00c19	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_overl:

; 8237 : 			}
; 8238 : 
; 8239 : 			break;

  00c1e	e9 e8 00 00 00	 jmp	 $LN4@draw_overl
$LN40@draw_overl:

; 8240 : 		}
; 8241 : 		////////////////////////////////////////
; 8242 : 		case KIOWA_MAIN_MFD_MODE_MISSION:
; 8243 : 		////////////////////////////////////////
; 8244 : 		{
; 8245 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00c23	51		 push	 ecx
  00c24	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00c2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c31	51		 push	 ecx
  00c32	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00c3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3f	51		 push	 ecx
  00c40	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00c48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4d	51		 push	 ecx
  00c4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00c56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 8246 : 
; 8247 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00c60	51		 push	 ecx
  00c61	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00c69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6e	51		 push	 ecx
  00c6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7c	51		 push	 ecx
  00c7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8a	51		 push	 ecx
  00c8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c9d	50		 push	 eax
  00c9e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8248 : 
; 8249 : 			set_active_screen (mfd_screen);

  00ca3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ca6	50		 push	 eax
  00ca7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8250 : 
; 8251 : 			if (lock_screen (mfd_screen))

  00cac	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00caf	50		 push	 eax
  00cb0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00cb5	85 c0		 test	 eax, eax
  00cb7	74 3f		 je	 SHORT $LN41@draw_overl

; 8252 : 			{
; 8253 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00cb9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00cbe	50		 push	 eax
  00cbf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00cc5	83 e9 01	 sub	 ecx, 1
  00cc8	51		 push	 ecx
  00cc9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00ccf	83 ea 01	 sub	 edx, 1
  00cd2	52		 push	 edx
  00cd3	6a 00		 push	 0
  00cd5	6a 00		 push	 0
  00cd7	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8254 : 
; 8255 : 				draw_layout_grid ();

  00cdc	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8256 : 
; 8257 : 				draw_mission_display_mfd ();

  00ce1	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 8258 : 
; 8259 : 				flush_screen_texture_graphics (mfd_screen);

  00ce6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ce9	50		 push	 eax
  00cea	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 8260 : 
; 8261 : 				unlock_screen (mfd_screen);

  00cef	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00cf2	50		 push	 eax
  00cf3	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_overl:

; 8262 : 			}
; 8263 : 
; 8264 : 			break;

  00cf8	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN42@draw_overl:

; 8265 : 		}
; 8266 : 		////////////////////////////////////////
; 8267 : 		default:
; 8268 : 		////////////////////////////////////////
; 8269 : 		{
; 8270 : 			debug_fatal ("Invalid main MFD mode = %d", mode);

  00cfa	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00cfd	50		 push	 eax
  00cfe	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  00d03	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00d08	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 8271 : 
; 8272 : 			break;
; 8273 : 		}
; 8274 : 	}
; 8275 : 
; 8276 : 	set_active_screen (video_screen);

  00d0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00d10	50		 push	 eax
  00d11	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 8277 : 
; 8278 : 	////////////////////////////////////////
; 8279 : 	//
; 8280 : 	// render MFD to screen
; 8281 : 	//
; 8282 : 	////////////////////////////////////////
; 8283 : 	{
; 8284 : 		vertex
; 8285 : 			quad[4];
; 8286 : 
; 8287 : 		real_colour
; 8288 : 			colour,
; 8289 : 			specular;
; 8290 : 
; 8291 : 		set_3d_active_environment (main_3d_env);

  00d16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00d1b	50		 push	 eax
  00d1c	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 8292 : 
; 8293 : 		if (begin_3d_scene ())

  00d21	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00d26	85 c0		 test	 eax, eax
  00d28	0f 84 d0 03 00
	00		 je	 $LN43@draw_overl

; 8294 : 		{
; 8295 : 			set_d3d_transparency_on ();

  00d2e	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 8296 : 
; 8297 : 			set_d3d_zbuffer_comparison (FALSE);

  00d33	6a 00		 push	 0
  00d35	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 8298 : 
; 8299 : 			set_d3d_culling (FALSE);

  00d3a	6a 00		 push	 0
  00d3c	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 8300 : 
; 8301 : 			set_d3d_texture_wrapping (0, FALSE);

  00d41	6a 00		 push	 0
  00d43	6a 00		 push	 0
  00d45	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 8302 : 
; 8303 : 			{
; 8304 : 				int
; 8305 : 					width;
; 8306 : 
; 8307 :    			if (application_video_width >= 1280)

  00d4a	81 3d 00 00 00
	00 00 05 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 1280 ; application_video_width, 00000500H
  00d54	7c 0c		 jl	 SHORT $LN44@draw_overl

; 8308 : 				{
; 8309 : 					width = 1280;

  00d56	c7 85 e0 fe ff
	ff 00 05 00 00	 mov	 DWORD PTR _width$1[ebp], 1280 ; 00000500H

; 8310 : 				}
; 8311 : 				else

  00d60	eb 0a		 jmp	 SHORT $LN45@draw_overl
$LN44@draw_overl:

; 8312 : 				{
; 8313 : 					width = 640;

  00d62	c7 85 e0 fe ff
	ff 80 02 00 00	 mov	 DWORD PTR _width$1[ebp], 640 ; 00000280H
$LN45@draw_overl:

; 8314 : 				}
; 8315 : 
; 8316 : 				if ((application_video_width == width) || (get_global_unscaled_displays ()))

  00d6c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  00d71	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _width$1[ebp]
  00d77	74 09		 je	 SHORT $LN48@draw_overl
  00d79	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00d80	74 17		 je	 SHORT $LN46@draw_overl
$LN48@draw_overl:

; 8317 : 				{
; 8318 : 					set_d3d_texture_mag_filtering (FALSE);

  00d82	6a 00		 push	 0
  00d84	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 8319 : 					set_d3d_texture_min_filtering (FALSE);

  00d89	6a 00		 push	 0
  00d8b	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 8320 : 					set_d3d_texture_mip_filtering (FALSE);

  00d90	6a 00		 push	 0
  00d92	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 8321 : 				}
; 8322 : 				else

  00d97	eb 15		 jmp	 SHORT $LN47@draw_overl
$LN46@draw_overl:

; 8323 : 				{
; 8324 : 					set_d3d_texture_mag_filtering (TRUE);

  00d99	6a 01		 push	 1
  00d9b	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 8325 : 					set_d3d_texture_min_filtering (TRUE);

  00da0	6a 01		 push	 1
  00da2	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 8326 : 					set_d3d_texture_mip_filtering (FALSE);

  00da7	6a 00		 push	 0
  00da9	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN47@draw_overl:

; 8327 : 				}
; 8328 : 			}
; 8329 : 
; 8330 : 			set_d3d_flat_shaded_textured_renderstate (mfd_screen);

  00dae	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00db1	50		 push	 eax
  00db2	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 8331 : 
; 8332 :       	////////////////////////////////////////
; 8333 :       	//
; 8334 : 
; 8335 : 			colour.red				= MFD_COLOUR1.r;

  00db7	b8 04 00 00 00	 mov	 eax, 4
  00dbc	6b c8 00	 imul	 ecx, eax, 0
  00dbf	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  00dc5	88 95 ea fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+2], dl

; 8336 : 			colour.green			= MFD_COLOUR1.g;

  00dcb	b8 04 00 00 00	 mov	 eax, 4
  00dd0	6b c8 00	 imul	 ecx, eax, 0
  00dd3	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  00dd9	88 95 e9 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+1], dl

; 8337 : 			colour.blue				= MFD_COLOUR1.b;

  00ddf	b8 04 00 00 00	 mov	 eax, 4
  00de4	6b c8 00	 imul	 ecx, eax, 0
  00de7	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ded	88 95 e8 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp], dl

; 8338 : 			colour.alpha			= MFD_COLOUR1.a;

  00df3	b8 04 00 00 00	 mov	 eax, 4
  00df8	6b c8 00	 imul	 ecx, eax, 0
  00dfb	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  00e01	88 95 eb fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+3], dl

; 8339 : 
; 8340 : 			specular.red			= 0;

  00e07	c6 85 e6 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+2], 0

; 8341 : 			specular.green			= 0;

  00e0e	c6 85 e5 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+1], 0

; 8342 : 			specular.blue			= 0;

  00e15	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp], 0

; 8343 : 			specular.alpha			= 255;

  00e1c	c6 85 e7 fe ff
	ff ff		 mov	 BYTE PTR _specular$2[ebp+3], 255 ; 000000ffH

; 8344 : 
; 8345 : 			quad[0].i				= mfd_screen_x_min;

  00e23	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e28	6b c8 00	 imul	 ecx, eax, 0
  00e2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00e33	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 8346 : 			quad[0].j	  			= mfd_screen_y_min;

  00e3c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e41	6b c8 00	 imul	 ecx, eax, 0
  00e44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00e4c	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 8347 : 			quad[0].z	  			= 0.5;

  00e55	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e5a	6b c8 00	 imul	 ecx, eax, 0
  00e5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e65	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 8348 : 			quad[0].q	  			= 0.5;

  00e6e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e73	6b c8 00	 imul	 ecx, eax, 0
  00e76	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e7e	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 8349 : 			quad[0].u	  			= 0.0;

  00e87	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e8c	6b c8 00	 imul	 ecx, eax, 0
  00e8f	0f 57 c0	 xorps	 xmm0, xmm0
  00e92	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 8350 : 			quad[0].v	  			= 0.0;

  00e9b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ea0	6b c8 00	 imul	 ecx, eax, 0
  00ea3	0f 57 c0	 xorps	 xmm0, xmm0
  00ea6	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 8351 : 
; 8352 : 			quad[1].i				= mfd_screen_x_max;

  00eaf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00eb4	c1 e0 00	 shl	 eax, 0
  00eb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00ebf	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 8353 : 			quad[1].j  				= mfd_screen_y_min;

  00ec8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ecd	c1 e0 00	 shl	 eax, 0
  00ed0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00ed8	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 8354 : 			quad[1].z  				= 0.5;

  00ee1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ee6	c1 e0 00	 shl	 eax, 0
  00ee9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ef1	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 8355 : 			quad[1].q  				= 0.5;

  00efa	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00eff	c1 e0 00	 shl	 eax, 0
  00f02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f0a	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 8356 : 			quad[1].u  				= 1.0;

  00f13	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f18	c1 e0 00	 shl	 eax, 0
  00f1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f23	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 8357 : 			quad[1].v  				= 0.0;

  00f2c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f31	c1 e0 00	 shl	 eax, 0
  00f34	0f 57 c0	 xorps	 xmm0, xmm0
  00f37	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 8358 : 
; 8359 : 			quad[2].i				= mfd_screen_x_max;

  00f40	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f45	d1 e0		 shl	 eax, 1
  00f47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00f4f	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 8360 : 			quad[2].j 				= mfd_screen_y_max;

  00f58	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f5d	d1 e0		 shl	 eax, 1
  00f5f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00f67	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 8361 : 			quad[2].z  				= 0.5;

  00f70	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f75	d1 e0		 shl	 eax, 1
  00f77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f7f	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 8362 : 			quad[2].q  				= 0.5;

  00f88	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f8d	d1 e0		 shl	 eax, 1
  00f8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f97	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 8363 : 			quad[2].u  				= 1.0;

  00fa0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fa5	d1 e0		 shl	 eax, 1
  00fa7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00faf	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 8364 : 			quad[2].v  				= 1.0;

  00fb8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fbd	d1 e0		 shl	 eax, 1
  00fbf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fc7	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 8365 : 
; 8366 : 			quad[3].i				= mfd_screen_x_min;

  00fd0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fd5	6b c8 03	 imul	 ecx, eax, 3
  00fd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00fe0	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 8367 : 			quad[3].j				= mfd_screen_y_max;

  00fe9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fee	6b c8 03	 imul	 ecx, eax, 3
  00ff1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00ff9	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 8368 : 			quad[3].z				= 0.5;

  01002	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01007	6b c8 03	 imul	 ecx, eax, 3
  0100a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01012	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 8369 : 			quad[3].q				= 0.5;

  0101b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01020	6b c8 03	 imul	 ecx, eax, 3
  01023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0102b	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 8370 : 			quad[3].u				= 0.0;

  01034	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01039	6b c8 03	 imul	 ecx, eax, 3
  0103c	0f 57 c0	 xorps	 xmm0, xmm0
  0103f	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 8371 : 			quad[3].v				= 1.0;

  01048	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0104d	6b c8 03	 imul	 ecx, eax, 3
  01050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01058	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 8372 : 
; 8373 : 			quad[0].next_vertex	= &quad[1];

  01061	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01066	c1 e0 00	 shl	 eax, 0
  01069	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  01070	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01075	6b c2 00	 imul	 eax, edx, 0
  01078	89 8c 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], ecx

; 8374 : 			quad[1].next_vertex	= &quad[2];

  0107f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01084	d1 e0		 shl	 eax, 1
  01086	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  0108d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01092	c1 e2 00	 shl	 edx, 0
  01095	89 8c 15 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+edx+40], ecx

; 8375 : 			quad[2].next_vertex	= &quad[3];

  0109c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010a1	6b c8 03	 imul	 ecx, eax, 3
  010a4	8d 94 0d ec fe
	ff ff		 lea	 edx, DWORD PTR _quad$4[ebp+ecx]
  010ab	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010b0	d1 e0		 shl	 eax, 1
  010b2	89 94 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], edx

; 8376 : 			quad[3].next_vertex	= NULL;

  010b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010be	6b c8 03	 imul	 ecx, eax, 3
  010c1	c7 84 0d 14 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$4[ebp+ecx+40], 0

; 8377 : 
; 8378 :       	//
; 8379 :       	////////////////////////////////////////
; 8380 : 
; 8381 : 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  010cc	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$2[ebp]
  010d2	50		 push	 eax
  010d3	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$3[ebp]
  010d9	51		 push	 ecx
  010da	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _quad$4[ebp]
  010e0	52		 push	 edx
  010e1	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 8382 : 
; 8383 : 			set_d3d_transparency_off ();

  010e6	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 8384 : 
; 8385 : 			set_d3d_zbuffer_comparison (TRUE);

  010eb	6a 01		 push	 1
  010ed	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 8386 : 
; 8387 : 			set_d3d_culling (TRUE);

  010f2	6a 01		 push	 1
  010f4	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 8388 : 
; 8389 : 			end_3d_scene ();

  010f9	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN43@draw_overl:
$LN1@draw_overl:

; 8390 : 		}
; 8391 : 	}
; 8392 : }

  010fe	5f		 pop	 edi
  010ff	5e		 pop	 esi
  01100	5b		 pop	 ebx
  01101	8b e5		 mov	 esp, ebp
  01103	5d		 pop	 ebp
  01104	c2 0c 00	 ret	 12			; 0000000cH
  01107	90		 npad	 1
$LN50@draw_overl:
  01108	00 00 00 00	 DD	 $LN16@draw_overl
  0110c	00 00 00 00	 DD	 $LN18@draw_overl
  01110	00 00 00 00	 DD	 $LN20@draw_overl
  01114	00 00 00 00	 DD	 $LN24@draw_overl
  01118	00 00 00 00	 DD	 $LN28@draw_overl
  0111c	00 00 00 00	 DD	 $LN30@draw_overl
  01120	00 00 00 00	 DD	 $LN32@draw_overl
  01124	00 00 00 00	 DD	 $LN34@draw_overl
  01128	00 00 00 00	 DD	 $LN36@draw_overl
  0112c	00 00 00 00	 DD	 $LN38@draw_overl
  01130	00 00 00 00	 DD	 $LN40@draw_overl
?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 7810 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7811 : 	vertex
; 7812 : 		quad[4];
; 7813 : 
; 7814 : 	real_colour
; 7815 : 		colour,
; 7816 : 		specular;
; 7817 : 
; 7818 : 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 7819 : 
; 7820 : 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 7821 : 	{
; 7822 : 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 7823 : 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 7824 : 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 7825 : 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 7826 : 
; 7827 : 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 7828 : 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 7829 : 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 7830 : 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 7831 : 
; 7832 : 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 7833 : 
; 7834 : 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7835 : 
; 7836 : 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 7837 : 
; 7838 : 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7839 : 
; 7840 : 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7841 : 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7842 : 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7843 : 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7844 : 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 7845 : 
; 7846 : 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7847 : 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7848 : 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7849 : 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7850 : 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 7851 : 
; 7852 : 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7853 : 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7854 : 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7855 : 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7856 : 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 7857 : 
; 7858 : 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7859 : 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7860 : 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7861 : 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7862 : 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 7863 : 
; 7864 : 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 7865 : 
; 7866 : 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 7867 : 
; 7868 : 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7869 : 
; 7870 : 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 7871 : 	}
; 7872 : }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?initalize_horizon_mask@@YGXHPAPAD@Z
_TEXT	SEGMENT
tv211 = -112						; size = 4
tv216 = -108						; size = 4
_x_limit$1 = -40					; size = 4
_height_val$2 = -36					; size = 4
_semi_begin$ = -32					; size = 4
_semi_radius$ = -28					; size = 4
_side_border_width$ = -24				; size = 4
_height$ = -20						; size = 4
_horizon_mask$ = -16					; size = 4
_row$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_width$ = 8						; size = 4
_mask$ = 12						; size = 4
?initalize_horizon_mask@@YGXHPAPAD@Z PROC		; initalize_horizon_mask, COMDAT

; 7076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7077 : 	int i,j;
; 7078 : 	char *row;
; 7079 : 	char* horizon_mask;
; 7080 : 	int height = LARGE_MFD_VIEWPORT_SIZE * 0.62;

  00009	c7 45 ec 9e 00
	00 00		 mov	 DWORD PTR _height$[ebp], 158 ; 0000009eH

; 7081 : 	int side_border_width = LARGE_MFD_VIEWPORT_SIZE * 0.175;

  00010	c7 45 e8 2c 00
	00 00		 mov	 DWORD PTR _side_border_width$[ebp], 44 ; 0000002cH

; 7082 : 	int semi_radius = ((width - 2*side_border_width) / 2);

  00017	8b 45 e8	 mov	 eax, DWORD PTR _side_border_width$[ebp]
  0001a	d1 e0		 shl	 eax, 1
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  0001f	2b c8		 sub	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	99		 cdq
  00024	2b c2		 sub	 eax, edx
  00026	d1 f8		 sar	 eax, 1
  00028	89 45 e4	 mov	 DWORD PTR _semi_radius$[ebp], eax

; 7083 : 	int semi_begin = height - 2 - semi_radius;

  0002b	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  0002e	83 e8 02	 sub	 eax, 2
  00031	2b 45 e4	 sub	 eax, DWORD PTR _semi_radius$[ebp]
  00034	89 45 e0	 mov	 DWORD PTR _semi_begin$[ebp], eax

; 7084 : 
; 7085 : 	if (*mask)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  0003a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003d	74 0b		 je	 SHORT $LN8@initalize_

; 7086 : 		safe_free(*mask);

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN8@initalize_:

; 7087 : 	horizon_mask = (char *) safe_malloc((width * height) + 4);

  0004a	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0004d	0f af 45 ec	 imul	 eax, DWORD PTR _height$[ebp]
  00051	83 c0 04	 add	 eax, 4
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0005a	89 45 f0	 mov	 DWORD PTR _horizon_mask$[ebp], eax

; 7088 : 	*mask = horizon_mask;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00063	89 08		 mov	 DWORD PTR [eax], ecx

; 7089 : 
; 7090 : 	horizon_mask[0] = width;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	6b c8 00	 imul	 ecx, eax, 0
  0006d	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  00070	8a 45 08	 mov	 al, BYTE PTR _width$[ebp]
  00073	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 7091 : 	horizon_mask[1] = height;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	c1 e0 00	 shl	 eax, 0
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00081	8a 55 ec	 mov	 dl, BYTE PTR _height$[ebp]
  00084	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 7092 : 	horizon_mask[2] = -(width / 2);

  00087	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0008a	99		 cdq
  0008b	2b c2		 sub	 eax, edx
  0008d	d1 f8		 sar	 eax, 1
  0008f	f7 d8		 neg	 eax
  00091	b9 01 00 00 00	 mov	 ecx, 1
  00096	d1 e1		 shl	 ecx, 1
  00098	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  0009b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 7093 : 	horizon_mask[3] = 0;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	6b c8 03	 imul	 ecx, eax, 3
  000a6	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  000a9	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 7094 : 
; 7095 : 	for (i = 0; i < height; i++)

  000ad	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN4@initalize_
$LN2@initalize_:
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initalize_:
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c2	3b 45 ec	 cmp	 eax, DWORD PTR _height$[ebp]
  000c5	0f 8d 18 01 00
	00		 jge	 $LN3@initalize_

; 7096 : 	{
; 7097 : 		row = &horizon_mask[4 + (i*width)];

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ce	0f af 45 08	 imul	 eax, DWORD PTR _width$[ebp]
  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  000d5	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000d9	89 55 f4	 mov	 DWORD PTR _row$[ebp], edx

; 7098 : 		for (j = 0; j < width; j++)

  000dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  000e3	eb 09		 jmp	 SHORT $LN7@initalize_
$LN5@initalize_:
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initalize_:
  000ee	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000f1	3b 45 08	 cmp	 eax, DWORD PTR _width$[ebp]
  000f4	0f 8d e4 00 00
	00		 jge	 $LN6@initalize_

; 7099 : 		{
; 7100 : 			if (i < 2 || i >= semi_begin + semi_radius)

  000fa	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  000fe	7c 0b		 jl	 SHORT $LN10@initalize_
  00100	8b 45 e0	 mov	 eax, DWORD PTR _semi_begin$[ebp]
  00103	03 45 e4	 add	 eax, DWORD PTR _semi_radius$[ebp]
  00106	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00109	7c 0b		 jl	 SHORT $LN9@initalize_
$LN10@initalize_:

; 7101 : 			{
; 7102 : 				row[j] = 1;

  0010b	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  0010e	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00111	c6 00 01	 mov	 BYTE PTR [eax], 1

; 7103 : 				continue;

  00114	eb cf		 jmp	 SHORT $LN5@initalize_
$LN9@initalize_:

; 7104 : 			}
; 7105 : 
; 7106 : 			if (i < semi_begin)

  00116	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00119	3b 45 e0	 cmp	 eax, DWORD PTR _semi_begin$[ebp]
  0011c	7d 2c		 jge	 SHORT $LN11@initalize_

; 7107 : 			{
; 7108 : 				if (j < side_border_width || j >= (width - side_border_width))

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00121	3b 45 e8	 cmp	 eax, DWORD PTR _side_border_width$[ebp]
  00124	7c 0b		 jl	 SHORT $LN15@initalize_
  00126	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00129	2b 45 e8	 sub	 eax, DWORD PTR _side_border_width$[ebp]
  0012c	39 45 f8	 cmp	 DWORD PTR _j$[ebp], eax
  0012f	7c 0b		 jl	 SHORT $LN13@initalize_
$LN15@initalize_:

; 7109 : 					row[j] = 1;

  00131	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  00134	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00137	c6 00 01	 mov	 BYTE PTR [eax], 1

; 7110 : 				else

  0013a	eb 09		 jmp	 SHORT $LN14@initalize_
$LN13@initalize_:

; 7111 : 					row[j] = 0;

  0013c	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  0013f	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00142	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN14@initalize_:

; 7112 : 			}
; 7113 : 			else

  00145	e9 8f 00 00 00	 jmp	 $LN17@initalize_
$LN11@initalize_:

; 7114 : 			{
; 7115 : 				float height_val = ((float)i - semi_begin);

  0014a	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _i$[ebp]
  0014f	f3 0f 2a 4d e0	 cvtsi2ss xmm1, DWORD PTR _semi_begin$[ebp]
  00154	f3 0f 5c c1	 subss	 xmm0, xmm1
  00158	f3 0f 11 45 dc	 movss	 DWORD PTR _height_val$2[ebp], xmm0

; 7116 : 				float x_limit = side_border_width + semi_radius - sqrt((semi_radius * semi_radius) - (height_val * height_val));

  0015d	8b 45 e8	 mov	 eax, DWORD PTR _side_border_width$[ebp]
  00160	03 45 e4	 add	 eax, DWORD PTR _semi_radius$[ebp]
  00163	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00167	8b 4d e4	 mov	 ecx, DWORD PTR _semi_radius$[ebp]
  0016a	0f af 4d e4	 imul	 ecx, DWORD PTR _semi_radius$[ebp]
  0016e	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00172	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _height_val$2[ebp]
  00177	f3 0f 59 55 dc	 mulss	 xmm2, DWORD PTR _height_val$2[ebp]
  0017c	f3 0f 5c ca	 subss	 xmm1, xmm2
  00180	51		 push	 ecx
  00181	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00186	f3 0f 11 45 94	 movss	 DWORD PTR tv216[ebp], xmm0
  0018b	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00190	d9 5d 90	 fstp	 DWORD PTR tv211[ebp]
  00193	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv216[ebp]
  00198	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR tv211[ebp]
  0019d	f3 0f 11 45 d8	 movss	 DWORD PTR _x_limit$1[ebp], xmm0

; 7117 : 
; 7118 : 				if (j < x_limit || j >= (width - x_limit))

  001a2	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001a7	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _x_limit$1[ebp]
  001ac	0f 2f c8	 comiss	 xmm1, xmm0
  001af	77 14		 ja	 SHORT $LN18@initalize_
  001b1	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001b6	f3 0f 2a 4d 08	 cvtsi2ss xmm1, DWORD PTR _width$[ebp]
  001bb	f3 0f 5c 4d d8	 subss	 xmm1, DWORD PTR _x_limit$1[ebp]
  001c0	0f 2f c1	 comiss	 xmm0, xmm1
  001c3	72 0b		 jb	 SHORT $LN16@initalize_
$LN18@initalize_:

; 7119 : 					row[j] = 1;

  001c5	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001c8	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001cb	c6 00 01	 mov	 BYTE PTR [eax], 1

; 7120 : 				else

  001ce	eb 09		 jmp	 SHORT $LN17@initalize_
$LN16@initalize_:

; 7121 : 					row[j] = 0;

  001d0	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001d3	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001d6	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN17@initalize_:

; 7122 : 			}
; 7123 : 		}

  001d9	e9 07 ff ff ff	 jmp	 $LN5@initalize_
$LN6@initalize_:

; 7124 : 	}

  001de	e9 d3 fe ff ff	 jmp	 $LN2@initalize_
$LN3@initalize_:

; 7125 : }

  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	5b		 pop	 ebx
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 08 00	 ret	 8
?initalize_horizon_mask@@YGXHPAPAD@Z ENDP		; initalize_horizon_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv130 = -68						; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_main_mfd, COMDAT

; 6947 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6948 : 	ASSERT (mfd_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@draw_main_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_main_:

; 6949 : 
; 6950 : 	ASSERT (kiowa_main_mfd_mode_valid (*mode));

  00027	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	7c 08		 jl	 SHORT $LN6@draw_main_
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00032	83 38 0b	 cmp	 DWORD PTR [eax], 11	; 0000000bH
  00035	7c 18		 jl	 SHORT $LN5@draw_main_
$LN6@draw_main_:
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003c	83 c0 03	 add	 eax, 3
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OCHCBDPI@kiowa_main_mfd_mode_valid?5?$CI?$CKmod@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_main_:

; 6951 : 
; 6952 : 	ASSERT (kiowa_main_mfd_location_valid (location));

  0004f	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00053	7c 06		 jl	 SHORT $LN8@draw_main_
  00055	83 7d 10 03	 cmp	 DWORD PTR _location$[ebp], 3
  00059	7c 18		 jl	 SHORT $LN7@draw_main_
$LN8@draw_main_:
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00060	83 c0 05	 add	 eax, 5
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IAJJOBAL@kiowa_main_mfd_location_valid?5?$CI@
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_main_:

; 6953 : 
; 6954 : 	if ((get_undamaged_eo_display_mode (*mode) && d3d_can_render_to_texture))

  00073	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4KIOWA_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0007e	85 c0		 test	 eax, eax
  00080	74 0e		 je	 SHORT $LN9@draw_main_
  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00089	74 05		 je	 SHORT $LN9@draw_main_

; 6955 : 	{
; 6956 : 		return;

  0008b	e9 ee 00 00 00	 jmp	 $LN1@draw_main_
$LN9@draw_main_:

; 6957 : 	}
; 6958 : 
; 6959 : 	draw_main_display = TRUE;

  00090	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 6960 : 
; 6961 : 	set_active_screen (mfd_screen);

  0009a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 6962 : 
; 6963 : 	if (lock_screen (mfd_screen))

  000a3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  000ac	85 c0		 test	 eax, eax
  000ae	0f 84 bf 00 00
	00		 je	 $LN10@draw_main_

; 6964 : 	{
; 6965 : 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, MFD_BACKGROUND_COLOUR);

  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	6b c8 09	 imul	 ecx, eax, 9
  000bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000c2	52		 push	 edx
  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  000c8	83 e8 01	 sub	 eax, 1
  000cb	50		 push	 eax
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  000d2	83 e9 01	 sub	 ecx, 1
  000d5	51		 push	 ecx
  000d6	6a 00		 push	 0
  000d8	6a 00		 push	 0
  000da	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 6966 : 
; 6967 : 		draw_layout_grid ();

  000df	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 6968 : 
; 6969 : 		switch (*mode)

  000e4	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e9	89 4d bc	 mov	 DWORD PTR tv130[ebp], ecx
  000ec	83 7d bc 0a	 cmp	 DWORD PTR tv130[ebp], 10 ; 0000000aH
  000f0	77 5e		 ja	 SHORT $LN22@draw_main_
  000f2	8b 55 bc	 mov	 edx, DWORD PTR tv130[ebp]
  000f5	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN24@draw_main_[edx*4]
$LN11@draw_main_:

; 6970 : 		{
; 6971 : 			////////////////////////////////////////
; 6972 : 			case KIOWA_MAIN_MFD_MODE_OFF:
; 6973 : 			////////////////////////////////////////
; 6974 : 			{
; 6975 : 				break;

  000fc	eb 63		 jmp	 SHORT $LN2@draw_main_
$LN12@draw_main_:

; 6976 : 			}
; 6977 : 			////////////////////////////////////////
; 6978 : 			case KIOWA_MAIN_MFD_MODE_DAMAGED:
; 6979 : 			////////////////////////////////////////
; 6980 : 			{
; 6981 : 				draw_damaged_mfd ();

  000fe	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 6982 : 
; 6983 : 				break;

  00103	eb 5c		 jmp	 SHORT $LN2@draw_main_
$LN13@draw_main_:

; 6984 : 			}
; 6985 : 			////////////////////////////////////////
; 6986 : 			case KIOWA_MAIN_MFD_MODE_FLIR:
; 6987 : 			////////////////////////////////////////
; 6988 : 			{
; 6989 : 				draw_2d_flir_mfd (FALSE);

  00105	6a 00		 push	 0
  00107	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 6990 : 
; 6991 : 				break;

  0010c	eb 53		 jmp	 SHORT $LN2@draw_main_
$LN14@draw_main_:

; 6992 : 			}
; 6993 : 			////////////////////////////////////////
; 6994 : 			case KIOWA_MAIN_MFD_MODE_DTV:
; 6995 : 			////////////////////////////////////////
; 6996 : 			{
; 6997 : 				draw_2d_dtv_mfd (FALSE);

  0010e	6a 00		 push	 0
  00110	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 6998 : 
; 6999 : 				break;

  00115	eb 4a		 jmp	 SHORT $LN2@draw_main_
$LN15@draw_main_:

; 7000 : 			}
; 7001 : 			////////////////////////////////////////
; 7002 : 			case KIOWA_MAIN_MFD_MODE_TSD:
; 7003 : 			////////////////////////////////////////
; 7004 : 			{
; 7005 : 				draw_tactical_situation_display_mfd (location);

  00117	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 7006 : 
; 7007 : 				break;

  00120	eb 3f		 jmp	 SHORT $LN2@draw_main_
$LN16@draw_main_:

; 7008 : 			}
; 7009 : 			////////////////////////////////////////
; 7010 : 			case KIOWA_MAIN_MFD_MODE_ASE:
; 7011 : 			////////////////////////////////////////
; 7012 : 			{
; 7013 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  00122	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 7014 : 
; 7015 : 				break;

  0012b	eb 34		 jmp	 SHORT $LN2@draw_main_
$LN17@draw_main_:

; 7016 : 			}
; 7017 : 			////////////////////////////////////////
; 7018 : 			case KIOWA_MAIN_MFD_MODE_WEAPON:
; 7019 : 			////////////////////////////////////////
; 7020 : 			{
; 7021 : 				draw_weapon_display_mfd ();

  0012d	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 7022 : 
; 7023 : 				break;

  00132	eb 2d		 jmp	 SHORT $LN2@draw_main_
$LN18@draw_main_:

; 7024 : 			}
; 7025 : 			////////////////////////////////////////
; 7026 : 			case KIOWA_MAIN_MFD_MODE_SYSTEM:
; 7027 : 			////////////////////////////////////////
; 7028 : 			{
; 7029 : 				draw_system_display_mfd ();

  00134	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 7030 : 
; 7031 : 				break;

  00139	eb 26		 jmp	 SHORT $LN2@draw_main_
$LN19@draw_main_:

; 7032 : 			}
; 7033 : 			////////////////////////////////////////
; 7034 : 			case KIOWA_MAIN_MFD_MODE_ENGINE:
; 7035 : 			////////////////////////////////////////
; 7036 : 			{
; 7037 : 				draw_engine_display_mfd ();

  0013b	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 7038 : 
; 7039 : 				break;

  00140	eb 1f		 jmp	 SHORT $LN2@draw_main_
$LN20@draw_main_:

; 7040 : 			}
; 7041 : 			////////////////////////////////////////
; 7042 : 			case KIOWA_MAIN_MFD_MODE_FLIGHT:
; 7043 : 			////////////////////////////////////////
; 7044 : 			{
; 7045 : 				draw_flight_display_mfd ();

  00142	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 7046 : 
; 7047 : 				break;

  00147	eb 18		 jmp	 SHORT $LN2@draw_main_
$LN21@draw_main_:

; 7048 : 			}
; 7049 : 			////////////////////////////////////////
; 7050 : 			case KIOWA_MAIN_MFD_MODE_MISSION:
; 7051 : 			////////////////////////////////////////
; 7052 : 			{
; 7053 : 				draw_mission_display_mfd ();

  00149	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 7054 : 
; 7055 : 				break;

  0014e	eb 11		 jmp	 SHORT $LN2@draw_main_
$LN22@draw_main_:

; 7056 : 			}
; 7057 : 			////////////////////////////////////////
; 7058 : 			default:
; 7059 : 			////////////////////////////////////////
; 7060 : 			{
; 7061 : 				debug_fatal ("Invalid main MFD mode = %d", mode);

  00150	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00153	50		 push	 eax
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  00159	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0015e	83 c4 08	 add	 esp, 8
$LN2@draw_main_:

; 7062 : 
; 7063 : 				break;
; 7064 : 			}
; 7065 : 		}
; 7066 : 
; 7067 : 		flush_screen_texture_graphics (mfd_screen);

  00161	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7068 : 
; 7069 : 		unlock_screen (mfd_screen);

  0016a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN10@draw_main_:

; 7070 : 	}
; 7071 : 
; 7072 : 	set_active_screen (video_screen);

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN1@draw_main_:

; 7073 : }

  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 0c 00	 ret	 12			; 0000000cH
  00187	90		 npad	 1
$LN24@draw_main_:
  00188	00 00 00 00	 DD	 $LN11@draw_main_
  0018c	00 00 00 00	 DD	 $LN12@draw_main_
  00190	00 00 00 00	 DD	 $LN13@draw_main_
  00194	00 00 00 00	 DD	 $LN14@draw_main_
  00198	00 00 00 00	 DD	 $LN15@draw_main_
  0019c	00 00 00 00	 DD	 $LN16@draw_main_
  001a0	00 00 00 00	 DD	 $LN17@draw_main_
  001a4	00 00 00 00	 DD	 $LN18@draw_main_
  001a8	00 00 00 00	 DD	 $LN19@draw_main_
  001ac	00 00 00 00	 DD	 $LN20@draw_main_
  001b0	00 00 00 00	 DD	 $LN21@draw_main_
?draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_mission_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv813 = -4112						; size = 4
tv400 = -4112						; size = 4
tv327 = -4112						; size = 4
tv805 = -4108						; size = 4
tv392 = -4108						; size = 4
tv319 = -4108						; size = 4
tv1457 = -4104						; size = 8
tv1210 = -4104						; size = 8
tv1002 = -4104						; size = 8
tv902 = -4104						; size = 4
tv843 = -4104						; size = 4
tv792 = -4104						; size = 4
tv752 = -4104						; size = 4
tv681 = -4104						; size = 4
tv648 = -4104						; size = 4
tv609 = -4104						; size = 4
tv579 = -4104						; size = 4
tv509 = -4104						; size = 4
tv473 = -4104						; size = 4
tv453 = -4104						; size = 4
tv425 = -4104						; size = 4
tv379 = -4104						; size = 4
tv353 = -4104						; size = 4
tv306 = -4104						; size = 4
tv278 = -4104						; size = 4
tv259 = -4104						; size = 4
tv233 = -4104						; size = 4
tv207 = -4104						; size = 4
tv141 = -4104						; size = 4
tv894 = -4100						; size = 4
tv835 = -4100						; size = 4
tv784 = -4100						; size = 4
tv744 = -4100						; size = 4
tv673 = -4100						; size = 4
tv640 = -4100						; size = 4
tv601 = -4100						; size = 4
tv571 = -4100						; size = 4
tv501 = -4100						; size = 4
tv465 = -4100						; size = 4
tv445 = -4100						; size = 4
tv417 = -4100						; size = 4
tv371 = -4100						; size = 4
tv345 = -4100						; size = 4
tv298 = -4100						; size = 4
tv271 = -4100						; size = 4
tv251 = -4100						; size = 4
tv225 = -4100						; size = 4
tv199 = -4100						; size = 4
tv133 = -4100						; size = 4
_buffer$1 = -3584					; size = 1024
_buffer$2 = -2560					; size = 1024
_buffer$3 = -1536					; size = 1024
_objective$ = -512					; size = 4
_keysite$ = -508					; size = 4
_task$ = -504						; size = 4
_member$ = -500						; size = 4
_company$ = -496					; size = 4
_group$ = -492						; size = 4
_en$ = -488						; size = 4
_estimated_time$ = -484					; size = 4
_mission_time$ = -480					; size = 4
_time$ = -476						; size = 4
_x_max$ = -472						; size = 4
_x_mid$ = -468						; size = 4
_x_min$ = -464						; size = 4
_y_adjust$ = -460					; size = 4
_x_adjust$ = -456					; size = 4
_char_height$ = -452					; size = 4
_estimated_seconds$ = -448				; size = 4
_estimated_minutes$ = -444				; size = 4
_estimated_hours$ = -440				; size = 4
_mission_seconds$ = -436				; size = 4
_mission_minutes$ = -432				; size = 4
_mission_hours$ = -428					; size = 4
_seconds$ = -424					; size = 4
_minutes$ = -420					; size = 4
_hours$ = -416						; size = 4
_status_name$ = -412					; size = 4
_formation$ = -408					; size = 4
_s2$ = -404						; size = 200
_s1$ = -204						; size = 200
_c$ = -1						; size = 1
?draw_mission_display_mfd@@YGXXZ PROC			; draw_mission_display_mfd, COMDAT

; 6443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 10 00 00	 mov	 eax, 4112		; 00001010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 6444 : 	char
; 6445 : 		c,
; 6446 : 		s1[200],
; 6447 : 		s2[200];
; 6448 : 
; 6449 : 	int
; 6450 : 		formation,
; 6451 : 		status_name,
; 6452 : 		hours,
; 6453 : 		minutes,
; 6454 : 		seconds,
; 6455 : 		mission_hours,
; 6456 : 		mission_minutes,
; 6457 : 		mission_seconds,
; 6458 : 		estimated_hours,
; 6459 : 		estimated_minutes,
; 6460 : 		estimated_seconds;
; 6461 : 
; 6462 : 	float
; 6463 : 		char_height,
; 6464 : 		x_adjust,
; 6465 : 		y_adjust,
; 6466 : 		x_min,
; 6467 : 		x_mid,
; 6468 : 		x_max,
; 6469 : 		time,
; 6470 : 		mission_time,
; 6471 : 		estimated_time;
; 6472 : 
; 6473 : 	entity
; 6474 : 		*en,
; 6475 : 		*group,
; 6476 : 		*company,
; 6477 : 		*member,
; 6478 : 		*task,
; 6479 : 		*keysite,
; 6480 : 		*objective;
; 6481 : 
; 6482 : 	en = get_gunship_entity ();

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00015	89 85 18 fe ff
	ff		 mov	 DWORD PTR _en$[ebp], eax

; 6483 : 
; 6484 : 	get_2d_float_screen_y_coordinate (1.0, &y_adjust);

  0001b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 6485 : 
; 6486 : 	get_2d_float_screen_x_coordinate (-1.0, &x_min);

  00035	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _x_min$[ebp]
  0003b	50		 push	 eax
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6487 : 
; 6488 : 	get_2d_float_screen_x_coordinate (0.0, &x_mid);

  0004f	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _x_mid$[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6489 : 
; 6490 : 	get_2d_float_screen_x_coordinate (1.0, &x_max);

  00064	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _x_max$[ebp]
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 6491 : 
; 6492 : 	if (draw_large_mfd)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00085	74 5d		 je	 SHORT $LN4@draw_missi

; 6493 : 	{
; 6494 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00087	6a 05		 push	 5
  00089	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6495 : 
; 6496 : 		y_adjust += 3.0;

  0008e	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00096	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0009e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6497 : 
; 6498 : 		x_min += 3.0;

  000aa	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  000b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  000ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000be	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 6499 : 
; 6500 : 		x_max -= 3.0;

  000c6	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  000ce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4008000000000000
  000d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000da	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 6501 : 	}
; 6502 : 	else

  000e2	eb 5b		 jmp	 SHORT $LN5@draw_missi
$LN4@draw_missi:

; 6503 : 	{
; 6504 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6505 : 
; 6506 : 		y_adjust += 2.0;

  000eb	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  000f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  000fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ff	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6507 : 
; 6508 : 		x_min += 2.0;

  00107	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  0010f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00117	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011b	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 6509 : 
; 6510 : 		x_max -= 2.0;

  00123	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  0012b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00133	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00137	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0
$LN5@draw_missi:

; 6511 : 	}
; 6512 : 
; 6513 : 	char_height = get_mono_font_char_height ('X');

  0013f	6a 58		 push	 88			; 00000058H
  00141	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00146	d9 9d 3c fe ff
	ff		 fstp	 DWORD PTR _char_height$[ebp]

; 6514 : 
; 6515 : 	////////////////////////////////////////
; 6516 : 	//
; 6517 : 	// flight group
; 6518 : 	//
; 6519 : 	////////////////////////////////////////
; 6520 : 
; 6521 : 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0014c	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR _en$[ebp], 0
  00153	74 10		 je	 SHORT $LN35@draw_missi
  00155	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv133[ebp], ecx
  00163	eb 24		 jmp	 SHORT $LN36@draw_missi
$LN35@draw_missi:
  00165	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0016b	83 c2 4e	 add	 edx, 78			; 0000004eH
  0016e	52		 push	 edx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN36@draw_missi:
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	85 c9		 test	 ecx, ecx
  00190	74 0c		 je	 SHORT $LN37@draw_missi
  00192	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv141[ebp], 25 ; 00000019H
  0019c	eb 24		 jmp	 SHORT $LN38@draw_missi
$LN37@draw_missi:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  001a4	83 c2 4e	 add	 edx, 78			; 0000004eH
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN38@draw_missi:
  001c2	6a 19		 push	 25			; 00000019H
  001c4	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  001ca	51		 push	 ecx
  001cb	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv133[ebp], 180
  001d5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  001db	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001e2	ff d1		 call	 ecx
  001e4	89 85 14 fe ff
	ff		 mov	 DWORD PTR _group$[ebp], eax

; 6522 : 
; 6523 : 	if (group)

  001ea	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  001f1	0f 84 3a 0b 00
	00		 je	 $LN6@draw_missi

; 6524 : 	{
; 6525 : 		//
; 6526 : 		// title
; 6527 : 		//
; 6528 : 
; 6529 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  001f7	b8 04 00 00 00	 mov	 eax, 4
  001fc	6b c8 13	 imul	 ecx, eax, 19
  001ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6530 : 
; 6531 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  0020b	b8 04 00 00 00	 mov	 eax, 4
  00210	6b c8 13	 imul	 ecx, eax, 19
  00213	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00219	52		 push	 edx
  0021a	51		 push	 ecx
  0021b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	51		 push	 ecx
  00229	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	51		 push	 ecx
  00237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6532 : 
; 6533 : 		y_adjust += 2.0;

  00257	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0025f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00267	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6534 : 
; 6535 : 		x_adjust = get_mono_font_string_width ("FLIGHT GROUP") * 0.5;

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  00278	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0027d	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1002[ebp]
  00283	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1002[ebp]
  0028b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00293	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00297	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6536 : 
; 6537 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  0029f	51		 push	 ecx
  002a0	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  002b5	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002bd	51		 push	 ecx
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6538 : 
; 6539 : 		print_mono_font_string ("FLIGHT GROUP");

  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  002cd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6540 : 
; 6541 : 		y_adjust += char_height;

  002d2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002da	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  002e2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6542 : 
; 6543 : 		if (draw_large_mfd)

  002ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002f1	74 1c		 je	 SHORT $LN7@draw_missi

; 6544 : 		{
; 6545 : 			y_adjust -= 1.0;

  002f3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  002fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00303	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00307	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_missi:

; 6546 : 		}
; 6547 : 
; 6548 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  0030f	b8 04 00 00 00	 mov	 eax, 4
  00314	6b c8 13	 imul	 ecx, eax, 19
  00317	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031d	52		 push	 edx
  0031e	51		 push	 ecx
  0031f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032c	51		 push	 ecx
  0032d	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033a	51		 push	 ecx
  0033b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00343	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00348	51		 push	 ecx
  00349	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00351	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00356	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6549 : 
; 6550 : 		if (draw_large_mfd)

  0035b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00362	74 1e		 je	 SHORT $LN8@draw_missi

; 6551 : 		{
; 6552 : 			y_adjust += 3.0;

  00364	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0036c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00374	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00378	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6553 : 		}
; 6554 : 		else

  00380	eb 1c		 jmp	 SHORT $LN9@draw_missi
$LN8@draw_missi:

; 6555 : 		{
; 6556 : 			y_adjust += 2.0;

  00382	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0038a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00392	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00396	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN9@draw_missi:

; 6557 : 		}
; 6558 : 
; 6559 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	6b c8 0f	 imul	 ecx, eax, 15
  003a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ac	52		 push	 edx
  003ad	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6560 : 
; 6561 : 		//
; 6562 : 		// division name
; 6563 : 		//
; 6564 : 
; 6565 : 		if (get_global_current_language () != LANGUAGE_RUSSIAN)

  003b2	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  003b9	0f 84 b4 01 00
	00		 je	 $LN10@draw_missi

; 6566 : 		{
; 6567 : 			company = get_local_entity_parent (group, LIST_TYPE_DIVISION);

  003bf	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  003c6	74 10		 je	 SHORT $LN39@draw_missi
  003c8	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  003ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d0	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003d6	eb 24		 jmp	 SHORT $LN40@draw_missi
$LN39@draw_missi:
  003d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  003de	83 c2 7c	 add	 edx, 124		; 0000007cH
  003e1	52		 push	 edx
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ec	50		 push	 eax
  003ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f2	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN40@draw_missi:
  003fc	b9 01 00 00 00	 mov	 ecx, 1
  00401	85 c9		 test	 ecx, ecx
  00403	74 0c		 je	 SHORT $LN41@draw_missi
  00405	c7 85 f8 ef ff
	ff 0b 00 00 00	 mov	 DWORD PTR tv207[ebp], 11 ; 0000000bH
  0040f	eb 24		 jmp	 SHORT $LN42@draw_missi
$LN41@draw_missi:
  00411	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00417	83 c2 7c	 add	 edx, 124		; 0000007cH
  0041a	52		 push	 edx
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00420	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0042b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN42@draw_missi:
  00435	6a 0b		 push	 11			; 0000000bH
  00437	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  0043d	51		 push	 ecx
  0043e	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00448	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  0044e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00455	ff d1		 call	 ecx
  00457	89 85 10 fe ff
	ff		 mov	 DWORD PTR _company$[ebp], eax

; 6568 : 
; 6569 : 			ASSERT (company);

  0045d	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00464	75 18		 jne	 SHORT $LN11@draw_missi
  00466	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0046b	83 c0 7e	 add	 eax, 126		; 0000007eH
  0046e	50		 push	 eax
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_07MLNBPDHK@company@
  00479	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_missi:

; 6570 : 
; 6571 : 			sprintf (s1, "%s:", get_local_entity_string (company, STRING_TYPE_DIVISION_NAME));

  0047e	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00485	74 10		 je	 SHORT $LN43@draw_missi
  00487	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _company$[ebp]
  0048d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048f	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
  00495	eb 27		 jmp	 SHORT $LN44@draw_missi
$LN43@draw_missi:
  00497	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0049d	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004a3	52		 push	 edx
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b4	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN44@draw_missi:
  004be	b9 01 00 00 00	 mov	 ecx, 1
  004c3	85 c9		 test	 ecx, ecx
  004c5	74 0c		 je	 SHORT $LN45@draw_missi
  004c7	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
  004d1	eb 27		 jmp	 SHORT $LN46@draw_missi
$LN45@draw_missi:
  004d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  004d9	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004df	52		 push	 edx
  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f0	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$LN46@draw_missi:
  004fa	6a 00		 push	 0
  004fc	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR _company$[ebp]
  00502	51		 push	 ecx
  00503	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv225[ebp], 52
  0050a	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv233[ebp]
  00510	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00517	ff d1		 call	 ecx
  00519	50		 push	 eax
  0051a	68 00 00 00 00	 push	 OFFSET ??_C@_03DKEJHHJP@?$CFs?3@
  0051f	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00525	52		 push	 edx
  00526	e8 00 00 00 00	 call	 _sprintf
  0052b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6572 : 
; 6573 : 			set_mono_font_position (x_min, y_adjust);

  0052e	51		 push	 ecx
  0052f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	51		 push	 ecx
  0053d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054a	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6574 : 
; 6575 : 			print_mono_font_max_length_string (s1);

  0054f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00555	50		 push	 eax
  00556	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6576 : 
; 6577 : 			y_adjust += char_height;

  0055b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00563	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0056b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_missi:

; 6578 : 		}
; 6579 : 
; 6580 : 		//
; 6581 : 		// members (callsign, players' rank and name, group leader)
; 6582 : 		//
; 6583 : 
; 6584 : 		member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  00573	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0057a	74 10		 je	 SHORT $LN47@draw_missi
  0057c	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00582	8b 08		 mov	 ecx, DWORD PTR [eax]
  00584	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv251[ebp], ecx
  0058a	eb 27		 jmp	 SHORT $LN48@draw_missi
$LN47@draw_missi:
  0058c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00592	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  00598	52		 push	 edx
  00599	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0059e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005a3	50		 push	 eax
  005a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005a9	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv251[ebp], 0
$LN48@draw_missi:
  005b3	b9 01 00 00 00	 mov	 ecx, 1
  005b8	85 c9		 test	 ecx, ecx
  005ba	74 0c		 je	 SHORT $LN49@draw_missi
  005bc	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv259[ebp], 25 ; 00000019H
  005c6	eb 27		 jmp	 SHORT $LN50@draw_missi
$LN49@draw_missi:
  005c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  005ce	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  005d4	52		 push	 edx
  005d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005e5	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN50@draw_missi:
  005ef	6a 19		 push	 25			; 00000019H
  005f1	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  005f7	51		 push	 ecx
  005f8	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv251[ebp], 180
  00602	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00608	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0060f	ff d1		 call	 ecx
  00611	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax
$LN2@draw_missi:

; 6585 : 
; 6586 : 		while (member)

  00617	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0061e	0f 84 f2 05 00
	00		 je	 $LN3@draw_missi

; 6587 : 		{
; 6588 : 			if (get_local_entity_int_value (member, INT_TYPE_GROUP_LEADER))

  00624	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0062b	74 10		 je	 SHORT $LN51@draw_missi
  0062d	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00633	8b 08		 mov	 ecx, DWORD PTR [eax]
  00635	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv271[ebp], ecx
  0063b	eb 20		 jmp	 SHORT $LN52@draw_missi
$LN51@draw_missi:
  0063d	68 bc 19 00 00	 push	 6588			; 000019bcH
  00642	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00647	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064d	52		 push	 edx
  0064e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00653	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv271[ebp], 0
$LN52@draw_missi:
  0065d	b8 01 00 00 00	 mov	 eax, 1
  00662	85 c0		 test	 eax, eax
  00664	74 0c		 je	 SHORT $LN53@draw_missi
  00666	c7 85 f8 ef ff
	ff 48 00 00 00	 mov	 DWORD PTR tv278[ebp], 72 ; 00000048H
  00670	eb 20		 jmp	 SHORT $LN54@draw_missi
$LN53@draw_missi:
  00672	68 bc 19 00 00	 push	 6588			; 000019bcH
  00677	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0067c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00682	51		 push	 ecx
  00683	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00688	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN54@draw_missi:
  00692	6a 48		 push	 72			; 00000048H
  00694	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  0069a	52		 push	 edx
  0069b	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv271[ebp], 1116
  006a5	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  006ab	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  006b2	ff d2		 call	 edx
  006b4	85 c0		 test	 eax, eax
  006b6	74 06		 je	 SHORT $LN12@draw_missi

; 6589 : 			{
; 6590 : 				c = '>';

  006b8	c6 45 ff 3e	 mov	 BYTE PTR _c$[ebp], 62	; 0000003eH

; 6591 : 			}
; 6592 : 			else

  006bc	eb 04		 jmp	 SHORT $LN13@draw_missi
$LN12@draw_missi:

; 6593 : 			{
; 6594 : 				c = ' ';

  006be	c6 45 ff 20	 mov	 BYTE PTR _c$[ebp], 32	; 00000020H
$LN13@draw_missi:

; 6595 : 			}
; 6596 : 
; 6597 : 			if (get_player_rank_and_name (member, s2))

  006c2	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _s2$[ebp]
  006c8	50		 push	 eax
  006c9	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  006cf	51		 push	 ecx
  006d0	e8 00 00 00 00	 call	 ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ; get_player_rank_and_name
  006d5	85 c0		 test	 eax, eax
  006d7	0f 84 2f 02 00
	00		 je	 $LN14@draw_missi

; 6598 : 			{
; 6599 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  006dd	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  006e4	0f 84 5e 01 00
	00		 je	 $LN16@draw_missi

; 6600 : 				{
; 6601 : 					sprintf

  006ea	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  006f1	74 10		 je	 SHORT $LN55@draw_missi
  006f3	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  006f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fb	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv298[ebp], ecx
  00701	eb 27		 jmp	 SHORT $LN56@draw_missi
$LN55@draw_missi:
  00703	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00709	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0070f	52		 push	 edx
  00710	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00715	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0071a	50		 push	 eax
  0071b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00720	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv298[ebp], 0
$LN56@draw_missi:
  0072a	b9 01 00 00 00	 mov	 ecx, 1
  0072f	85 c9		 test	 ecx, ecx
  00731	74 0c		 je	 SHORT $LN57@draw_missi
  00733	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv306[ebp], 74 ; 0000004aH
  0073d	eb 27		 jmp	 SHORT $LN58@draw_missi
$LN57@draw_missi:
  0073f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00745	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0074b	52		 push	 edx
  0074c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00751	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075c	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv306[ebp], 0
$LN58@draw_missi:
  00766	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0076d	74 10		 je	 SHORT $LN59@draw_missi
  0076f	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00775	8b 11		 mov	 edx, DWORD PTR [ecx]
  00777	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv319[ebp], edx
  0077d	eb 26		 jmp	 SHORT $LN60@draw_missi
$LN59@draw_missi:
  0077f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00784	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  00789	50		 push	 eax
  0078a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0078f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00795	51		 push	 ecx
  00796	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0079b	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv319[ebp], 0
$LN60@draw_missi:
  007a5	ba 01 00 00 00	 mov	 edx, 1
  007aa	85 d2		 test	 edx, edx
  007ac	74 0c		 je	 SHORT $LN61@draw_missi
  007ae	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv327[ebp], 4
  007b8	eb 26		 jmp	 SHORT $LN62@draw_missi
$LN61@draw_missi:
  007ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  007bf	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  007c4	50		 push	 eax
  007c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  007ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  007d0	51		 push	 ecx
  007d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007d6	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$LN62@draw_missi:
  007e0	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _s2$[ebp]
  007e6	52		 push	 edx
  007e7	6a 4a		 push	 74			; 0000004aH
  007e9	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  007ef	50		 push	 eax
  007f0	69 8d fc ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv298[ebp], 1116
  007fa	8b 95 f8 ef ff
	ff		 mov	 edx, DWORD PTR tv306[ebp]
  00800	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  00807	ff d0		 call	 eax
  00809	50		 push	 eax
  0080a	6a 04		 push	 4
  0080c	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00812	51		 push	 ecx
  00813	6b 95 f4 ef ff
	ff 34		 imul	 edx, DWORD PTR tv319[ebp], 52
  0081a	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR tv327[ebp]
  00820	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00827	ff d1		 call	 ecx
  00829	50		 push	 eax
  0082a	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  0082e	52		 push	 edx
  0082f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
  00834	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0083a	50		 push	 eax
  0083b	e8 00 00 00 00	 call	 _sprintf
  00840	83 c4 18	 add	 esp, 24			; 00000018H

; 6602 : 					(
; 6603 : 						s1,
; 6604 : 						"%c%s 1-%d %s",
; 6605 : 						c,
; 6606 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 6607 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 6608 : 						s2
; 6609 : 					);
; 6610 : 				}
; 6611 : 				else

  00843	e9 bf 00 00 00	 jmp	 $LN17@draw_missi
$LN16@draw_missi:

; 6612 : 				{
; 6613 : 					sprintf

  00848	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0084f	74 10		 je	 SHORT $LN63@draw_missi
  00851	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00857	8b 08		 mov	 ecx, DWORD PTR [eax]
  00859	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv345[ebp], ecx
  0085f	eb 27		 jmp	 SHORT $LN64@draw_missi
$LN63@draw_missi:
  00861	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00867	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  0086d	52		 push	 edx
  0086e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00873	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00878	50		 push	 eax
  00879	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0087e	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv345[ebp], 0
$LN64@draw_missi:
  00888	b9 01 00 00 00	 mov	 ecx, 1
  0088d	85 c9		 test	 ecx, ecx
  0088f	74 0c		 je	 SHORT $LN65@draw_missi
  00891	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv353[ebp], 74 ; 0000004aH
  0089b	eb 27		 jmp	 SHORT $LN66@draw_missi
$LN65@draw_missi:
  0089d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  008a3	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  008a9	52		 push	 edx
  008aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  008af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008b4	50		 push	 eax
  008b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ba	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN66@draw_missi:
  008c4	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _s2$[ebp]
  008ca	51		 push	 ecx
  008cb	6a 4a		 push	 74			; 0000004aH
  008cd	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  008d3	52		 push	 edx
  008d4	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv345[ebp], 1116
  008de	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv353[ebp]
  008e4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  008eb	ff d2		 call	 edx
  008ed	50		 push	 eax
  008ee	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$[ebp]
  008f2	50		 push	 eax
  008f3	68 00 00 00 00	 push	 OFFSET ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
  008f8	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  008fe	51		 push	 ecx
  008ff	e8 00 00 00 00	 call	 _sprintf
  00904	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@draw_missi:

; 6614 : 					(
; 6615 : 						s1,
; 6616 : 						"%c1-%d %s",
; 6617 : 						c,
; 6618 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 6619 : 						s2
; 6620 : 					);
; 6621 : 				}
; 6622 : 			}
; 6623 : 			else

  00907	e9 1c 02 00 00	 jmp	 $LN19@draw_missi
$LN14@draw_missi:

; 6624 : 			{
; 6625 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  0090c	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  00913	0f 84 57 01 00
	00		 je	 $LN18@draw_missi

; 6626 : 				{
; 6627 : 					sprintf

  00919	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00920	74 10		 je	 SHORT $LN67@draw_missi
  00922	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00928	8b 08		 mov	 ecx, DWORD PTR [eax]
  0092a	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv371[ebp], ecx
  00930	eb 27		 jmp	 SHORT $LN68@draw_missi
$LN67@draw_missi:
  00932	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00938	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0093e	52		 push	 edx
  0093f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00944	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00949	50		 push	 eax
  0094a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0094f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv371[ebp], 0
$LN68@draw_missi:
  00959	b9 01 00 00 00	 mov	 ecx, 1
  0095e	85 c9		 test	 ecx, ecx
  00960	74 0c		 je	 SHORT $LN69@draw_missi
  00962	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv379[ebp], 74 ; 0000004aH
  0096c	eb 27		 jmp	 SHORT $LN70@draw_missi
$LN69@draw_missi:
  0096e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00974	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0097a	52		 push	 edx
  0097b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00980	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00985	50		 push	 eax
  00986	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0098b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv379[ebp], 0
$LN70@draw_missi:
  00995	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0099c	74 10		 je	 SHORT $LN71@draw_missi
  0099e	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  009a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  009a6	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv392[ebp], edx
  009ac	eb 26		 jmp	 SHORT $LN72@draw_missi
$LN71@draw_missi:
  009ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009b3	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009b8	50		 push	 eax
  009b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  009be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009c4	51		 push	 ecx
  009c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009ca	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN72@draw_missi:
  009d4	ba 01 00 00 00	 mov	 edx, 1
  009d9	85 d2		 test	 edx, edx
  009db	74 0c		 je	 SHORT $LN73@draw_missi
  009dd	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv400[ebp], 4
  009e7	eb 26		 jmp	 SHORT $LN74@draw_missi
$LN73@draw_missi:
  009e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009ee	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009f3	50		 push	 eax
  009f4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  009f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  009ff	51		 push	 ecx
  00a00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a05	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN74@draw_missi:
  00a0f	6a 4a		 push	 74			; 0000004aH
  00a11	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  00a17	52		 push	 edx
  00a18	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv371[ebp], 1116
  00a22	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv379[ebp]
  00a28	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a2f	ff d2		 call	 edx
  00a31	50		 push	 eax
  00a32	6a 04		 push	 4
  00a34	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00a3a	50		 push	 eax
  00a3b	6b 8d f4 ef ff
	ff 34		 imul	 ecx, DWORD PTR tv392[ebp], 52
  00a42	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv400[ebp]
  00a48	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[ecx+edx*4]
  00a4f	ff d0		 call	 eax
  00a51	50		 push	 eax
  00a52	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00a56	51		 push	 ecx
  00a57	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
  00a5c	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00a62	52		 push	 edx
  00a63	e8 00 00 00 00	 call	 _sprintf
  00a68	83 c4 14	 add	 esp, 20			; 00000014H

; 6628 : 					(
; 6629 : 						s1,
; 6630 : 						"%c%s 1-%d",
; 6631 : 						c,
; 6632 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 6633 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 6634 : 					);
; 6635 : 				}
; 6636 : 				else

  00a6b	e9 b8 00 00 00	 jmp	 $LN19@draw_missi
$LN18@draw_missi:

; 6637 : 				{
; 6638 : 					sprintf

  00a70	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00a77	74 10		 je	 SHORT $LN75@draw_missi
  00a79	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00a7f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a81	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv417[ebp], ecx
  00a87	eb 27		 jmp	 SHORT $LN76@draw_missi
$LN75@draw_missi:
  00a89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00a8f	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00a95	52		 push	 edx
  00a96	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00aa0	50		 push	 eax
  00aa1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aa6	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv417[ebp], 0
$LN76@draw_missi:
  00ab0	b9 01 00 00 00	 mov	 ecx, 1
  00ab5	85 c9		 test	 ecx, ecx
  00ab7	74 0c		 je	 SHORT $LN77@draw_missi
  00ab9	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv425[ebp], 74 ; 0000004aH
  00ac3	eb 27		 jmp	 SHORT $LN78@draw_missi
$LN77@draw_missi:
  00ac5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00acb	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00ad1	52		 push	 edx
  00ad2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae2	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv425[ebp], 0
$LN78@draw_missi:
  00aec	6a 4a		 push	 74			; 0000004aH
  00aee	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00af4	51		 push	 ecx
  00af5	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv417[ebp], 1116
  00aff	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv425[ebp]
  00b05	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b0c	ff d1		 call	 ecx
  00b0e	50		 push	 eax
  00b0f	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00b13	52		 push	 edx
  00b14	68 00 00 00 00	 push	 OFFSET ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
  00b19	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b1f	50		 push	 eax
  00b20	e8 00 00 00 00	 call	 _sprintf
  00b25	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@draw_missi:

; 6639 : 					(
; 6640 : 						s1,
; 6641 : 						"%c1-%d",
; 6642 : 						c,
; 6643 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 6644 : 					);
; 6645 : 				}
; 6646 : 			}
; 6647 : 
; 6648 : 			set_mono_font_position (x_min, y_adjust);

  00b28	51		 push	 ecx
  00b29	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b36	51		 push	 ecx
  00b37	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b44	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6649 : 
; 6650 : 			print_mono_font_max_length_string (s1);

  00b49	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b4f	50		 push	 eax
  00b50	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6651 : 
; 6652 : 			y_adjust += char_height;

  00b55	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b5d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00b65	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6653 : 
; 6654 : 			member = get_local_entity_child_succ (member, LIST_TYPE_MEMBER);

  00b6d	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00b74	74 10		 je	 SHORT $LN79@draw_missi
  00b76	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00b7c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7e	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv445[ebp], ecx
  00b84	eb 27		 jmp	 SHORT $LN80@draw_missi
$LN79@draw_missi:
  00b86	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00b8c	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00b92	52		 push	 edx
  00b93	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b9d	50		 push	 eax
  00b9e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ba3	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv445[ebp], 0
$LN80@draw_missi:
  00bad	b9 01 00 00 00	 mov	 ecx, 1
  00bb2	85 c9		 test	 ecx, ecx
  00bb4	74 0c		 je	 SHORT $LN81@draw_missi
  00bb6	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv453[ebp], 25 ; 00000019H
  00bc0	eb 27		 jmp	 SHORT $LN82@draw_missi
$LN81@draw_missi:
  00bc2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00bc8	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00bce	52		 push	 edx
  00bcf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bd4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bd9	50		 push	 eax
  00bda	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bdf	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv453[ebp], 0
$LN82@draw_missi:
  00be9	6a 19		 push	 25			; 00000019H
  00beb	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00bf1	51		 push	 ecx
  00bf2	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv445[ebp], 180
  00bfc	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv453[ebp]
  00c02	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c09	ff d1		 call	 ecx
  00c0b	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax

; 6655 : 		}

  00c11	e9 01 fa ff ff	 jmp	 $LN2@draw_missi
$LN3@draw_missi:

; 6656 : 
; 6657 : 		//
; 6658 : 		// formation
; 6659 : 		//
; 6660 : 
; 6661 : 		formation = get_local_entity_int_value (group, INT_TYPE_GROUP_FORMATION);

  00c16	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  00c1d	74 10		 je	 SHORT $LN83@draw_missi
  00c1f	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00c25	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c27	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv465[ebp], ecx
  00c2d	eb 27		 jmp	 SHORT $LN84@draw_missi
$LN83@draw_missi:
  00c2f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c35	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c3b	52		 push	 edx
  00c3c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c46	50		 push	 eax
  00c47	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c4c	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv465[ebp], 0
$LN84@draw_missi:
  00c56	b9 01 00 00 00	 mov	 ecx, 1
  00c5b	85 c9		 test	 ecx, ecx
  00c5d	74 0c		 je	 SHORT $LN85@draw_missi
  00c5f	c7 85 f8 ef ff
	ff 47 00 00 00	 mov	 DWORD PTR tv473[ebp], 71 ; 00000047H
  00c69	eb 27		 jmp	 SHORT $LN86@draw_missi
$LN85@draw_missi:
  00c6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c71	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c77	52		 push	 edx
  00c78	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c7d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00c82	50		 push	 eax
  00c83	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c88	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
$LN86@draw_missi:
  00c92	6a 47		 push	 71			; 00000047H
  00c94	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00c9a	51		 push	 ecx
  00c9b	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv465[ebp], 1116
  00ca5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv473[ebp]
  00cab	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00cb2	ff d1		 call	 ecx
  00cb4	89 85 68 fe ff
	ff		 mov	 DWORD PTR _formation$[ebp], eax

; 6662 : 
; 6663 : 		sprintf (s1, "FORMATION:%s", formation_display_names[formation]);

  00cba	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _formation$[ebp]
  00cc0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?formation_display_names@@3PAPBDA[eax*4]
  00cc7	51		 push	 ecx
  00cc8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
  00ccd	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00cd3	52		 push	 edx
  00cd4	e8 00 00 00 00	 call	 _sprintf
  00cd9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6664 : 
; 6665 : 		set_mono_font_position (x_min, y_adjust);

  00cdc	51		 push	 ecx
  00cdd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ce5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cea	51		 push	 ecx
  00ceb	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6666 : 
; 6667 : 		print_mono_font_max_length_string (s1);

  00cfd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00d03	50		 push	 eax
  00d04	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6668 : 
; 6669 : 		y_adjust += char_height + 2.0;

  00d09	f3 0f 5a 85 3c
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _char_height$[ebp]
  00d11	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00d19	f3 0f 5a 8d 34
	fe ff ff	 cvtss2sd xmm1, DWORD PTR _y_adjust$[ebp]
  00d21	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00d25	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00d29	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@draw_missi:

; 6670 : 	}
; 6671 : 
; 6672 : 	////////////////////////////////////////
; 6673 : 	//
; 6674 : 	// mission
; 6675 : 	//
; 6676 : 	////////////////////////////////////////
; 6677 : 
; 6678 : 	task = get_player_task (NULL);

  00d31	6a 00		 push	 0
  00d33	e8 00 00 00 00	 call	 ?get_player_task@@YGPAUENTITY@@PAU1@@Z ; get_player_task
  00d38	89 85 08 fe ff
	ff		 mov	 DWORD PTR _task$[ebp], eax

; 6679 : 
; 6680 : 	if (task)

  00d3e	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d45	0f 84 ae 0c 00
	00		 je	 $LN20@draw_missi

; 6681 : 	{
; 6682 : 		ASSERT (get_local_entity_int_value (task, INT_TYPE_VISIBLE_TASK));

  00d4b	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d52	74 10		 je	 SHORT $LN87@draw_missi
  00d54	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00d5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5c	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d62	eb 27		 jmp	 SHORT $LN88@draw_missi
$LN87@draw_missi:
  00d64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00d6a	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00d70	52		 push	 edx
  00d71	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d76	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d7b	50		 push	 eax
  00d7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d81	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN88@draw_missi:
  00d8b	b9 01 00 00 00	 mov	 ecx, 1
  00d90	85 c9		 test	 ecx, ecx
  00d92	74 0c		 je	 SHORT $LN89@draw_missi
  00d94	c7 85 f8 ef ff
	ff fa 00 00 00	 mov	 DWORD PTR tv509[ebp], 250 ; 000000faH
  00d9e	eb 27		 jmp	 SHORT $LN90@draw_missi
$LN89@draw_missi:
  00da0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00da6	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00dac	52		 push	 edx
  00dad	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00db2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00db7	50		 push	 eax
  00db8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dbd	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv509[ebp], 0
$LN90@draw_missi:
  00dc7	68 fa 00 00 00	 push	 250			; 000000faH
  00dcc	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  00dd2	51		 push	 ecx
  00dd3	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv501[ebp], 1116
  00ddd	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv509[ebp]
  00de3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00dea	ff d1		 call	 ecx
  00dec	85 c0		 test	 eax, eax
  00dee	75 1a		 jne	 SHORT $LN21@draw_missi
  00df0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00df5	05 ef 00 00 00	 add	 eax, 239		; 000000efH
  00dfa	50		 push	 eax
  00dfb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e00	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
  00e05	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_missi:

; 6683 : 
; 6684 : 		//
; 6685 : 		// title
; 6686 : 		//
; 6687 : 
; 6688 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00e0a	b8 04 00 00 00	 mov	 eax, 4
  00e0f	6b c8 13	 imul	 ecx, eax, 19
  00e12	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e18	52		 push	 edx
  00e19	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6689 : 
; 6690 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  00e1e	b8 04 00 00 00	 mov	 eax, 4
  00e23	6b c8 13	 imul	 ecx, eax, 19
  00e26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e2c	52		 push	 edx
  00e2d	51		 push	 ecx
  00e2e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3b	51		 push	 ecx
  00e3c	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00e44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e49	51		 push	 ecx
  00e4a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e57	51		 push	 ecx
  00e58	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00e60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e65	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6691 : 
; 6692 : 		y_adjust += 2.0;

  00e6a	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00e72	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00e7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e7e	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6693 : 
; 6694 : 		x_adjust = get_mono_font_string_width ("MISSION") * 0.5;

  00e86	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00e8b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e90	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1210[ebp]
  00e96	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1210[ebp]
  00e9e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00ea6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00eaa	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6695 : 
; 6696 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  00eb2	51		 push	 ecx
  00eb3	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ebb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec0	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  00ec8	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ed0	51		 push	 ecx
  00ed1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed6	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6697 : 
; 6698 : 		print_mono_font_string ("MISSION");

  00edb	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00ee0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6699 : 
; 6700 : 		y_adjust += char_height;

  00ee5	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00eed	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00ef5	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6701 : 
; 6702 : 		if (draw_large_mfd)

  00efd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f04	74 1c		 je	 SHORT $LN22@draw_missi

; 6703 : 		{
; 6704 : 			y_adjust -= 1.0;

  00f06	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f0e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00f16	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f1a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN22@draw_missi:

; 6705 : 		}
; 6706 : 
; 6707 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  00f22	b8 04 00 00 00	 mov	 eax, 4
  00f27	6b c8 13	 imul	 ecx, eax, 19
  00f2a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f30	52		 push	 edx
  00f31	51		 push	 ecx
  00f32	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3f	51		 push	 ecx
  00f40	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00f48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4d	51		 push	 ecx
  00f4e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5b	51		 push	 ecx
  00f5c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00f64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f69	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6708 : 
; 6709 : 		if (draw_large_mfd)

  00f6e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f75	74 1e		 je	 SHORT $LN23@draw_missi

; 6710 : 		{
; 6711 : 			y_adjust += 3.0;

  00f77	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f7f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00f87	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f8b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6712 : 		}
; 6713 : 		else

  00f93	eb 1c		 jmp	 SHORT $LN24@draw_missi
$LN23@draw_missi:

; 6714 : 		{
; 6715 : 			y_adjust += 2.0;

  00f95	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f9d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00fa5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fa9	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN24@draw_missi:

; 6716 : 		}
; 6717 : 
; 6718 : 		set_mono_font_colour (MFD_COLOUR_RED);

  00fb1	b8 04 00 00 00	 mov	 eax, 4
  00fb6	6b c8 0f	 imul	 ecx, eax, 15
  00fb9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fbf	52		 push	 edx
  00fc0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6719 : 
; 6720 : 		//
; 6721 : 		// type
; 6722 : 		//
; 6723 : 
; 6724 : 		sprintf (s1, "TYPE  :%s", get_local_entity_string (task, STRING_TYPE_SHORT_DISPLAY_NAME));

  00fc5	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00fcc	74 10		 je	 SHORT $LN91@draw_missi
  00fce	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00fd4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd6	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv571[ebp], ecx
  00fdc	eb 27		 jmp	 SHORT $LN92@draw_missi
$LN91@draw_missi:
  00fde	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00fe4	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  00fea	52		 push	 edx
  00feb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ff0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ff5	50		 push	 eax
  00ff6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ffb	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], 0
$LN92@draw_missi:
  01005	b9 01 00 00 00	 mov	 ecx, 1
  0100a	85 c9		 test	 ecx, ecx
  0100c	74 0c		 je	 SHORT $LN93@draw_missi
  0100e	c7 85 f8 ef ff
	ff 0c 00 00 00	 mov	 DWORD PTR tv579[ebp], 12 ; 0000000cH
  01018	eb 27		 jmp	 SHORT $LN94@draw_missi
$LN93@draw_missi:
  0101a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01020	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  01026	52		 push	 edx
  01027	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0102c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  01031	50		 push	 eax
  01032	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01037	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv579[ebp], 0
$LN94@draw_missi:
  01041	6a 0c		 push	 12			; 0000000cH
  01043	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01049	51		 push	 ecx
  0104a	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv571[ebp], 52
  01051	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv579[ebp]
  01057	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0105e	ff d1		 call	 ecx
  01060	50		 push	 eax
  01061	68 00 00 00 00	 push	 OFFSET ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
  01066	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  0106c	52		 push	 edx
  0106d	e8 00 00 00 00	 call	 _sprintf
  01072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6725 : 
; 6726 : 		set_mono_font_position (x_min, y_adjust);

  01075	51		 push	 ecx
  01076	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0107e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01083	51		 push	 ecx
  01084	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0108c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01091	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6727 : 
; 6728 : 		print_mono_font_max_length_string (s1);

  01096	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0109c	50		 push	 eax
  0109d	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6729 : 
; 6730 : 		y_adjust += char_height;

  010a2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  010aa	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  010b2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6731 : 
; 6732 : 		if (draw_large_mfd)

  010ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  010c1	74 1c		 je	 SHORT $LN25@draw_missi

; 6733 : 		{
; 6734 : 			y_adjust += 2.0;

  010c3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  010cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  010d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d7	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_missi:

; 6735 : 		}
; 6736 : 
; 6737 : 		//
; 6738 : 		// objective
; 6739 : 		//
; 6740 : 
; 6741 : 		objective = get_local_entity_parent (task, LIST_TYPE_TASK_DEPENDENT);

  010df	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  010e6	74 10		 je	 SHORT $LN95@draw_missi
  010e8	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  010ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f0	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv601[ebp], ecx
  010f6	eb 27		 jmp	 SHORT $LN96@draw_missi
$LN95@draw_missi:
  010f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  010fe	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01104	52		 push	 edx
  01105	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0110a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0110f	50		 push	 eax
  01110	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01115	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN96@draw_missi:
  0111f	b9 01 00 00 00	 mov	 ecx, 1
  01124	85 c9		 test	 ecx, ecx
  01126	74 0c		 je	 SHORT $LN97@draw_missi
  01128	c7 85 f8 ef ff
	ff 27 00 00 00	 mov	 DWORD PTR tv609[ebp], 39 ; 00000027H
  01132	eb 27		 jmp	 SHORT $LN98@draw_missi
$LN97@draw_missi:
  01134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0113a	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01140	52		 push	 edx
  01141	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0114b	50		 push	 eax
  0114c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01151	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN98@draw_missi:
  0115b	6a 27		 push	 39			; 00000027H
  0115d	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01163	51		 push	 ecx
  01164	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv601[ebp], 180
  0116e	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv609[ebp]
  01174	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0117b	ff d1		 call	 ecx
  0117d	89 85 00 fe ff
	ff		 mov	 DWORD PTR _objective$[ebp], eax

; 6742 : 
; 6743 : 		if (objective)

  01183	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _objective$[ebp], 0
  0118a	0f 84 e4 00 00
	00		 je	 $LN27@draw_missi

; 6744 : 		{
; 6745 : 			char
; 6746 : 				buffer[1024];
; 6747 : 
; 6748 : 			get_task_objective_mfd_display_string (task, buffer);

  01190	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  01196	50		 push	 eax
  01197	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0119d	51		 push	 ecx
  0119e	e8 00 00 00 00	 call	 ?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z ; get_task_objective_mfd_display_string

; 6749 : 
; 6750 : 			sprintf (s1, "OBJECT:%s", buffer);

  011a3	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  011a9	50		 push	 eax
  011aa	68 00 00 00 00	 push	 OFFSET ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
  011af	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  011b5	51		 push	 ecx
  011b6	e8 00 00 00 00	 call	 _sprintf
  011bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6751 : 
; 6752 : 			set_mono_font_position (x_min, y_adjust);

  011be	51		 push	 ecx
  011bf	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011cc	51		 push	 ecx
  011cd	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  011d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011da	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6753 : 
; 6754 : 			print_mono_font_max_length_string (s1);

  011df	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  011e5	50		 push	 eax
  011e6	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6755 : 
; 6756 : 			y_adjust += char_height;

  011eb	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011f3	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  011fb	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6757 : 
; 6758 : 			set_mono_font_position (x_min, y_adjust);

  01203	51		 push	 ecx
  01204	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0120c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01211	51		 push	 ecx
  01212	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0121a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121f	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6759 : 
; 6760 : 			print_target_position (en, objective);

  01224	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _objective$[ebp]
  0122a	50		 push	 eax
  0122b	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  01231	51		 push	 ecx
  01232	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 6761 : 
; 6762 : 			y_adjust += char_height;

  01237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0123f	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01247	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6763 : 
; 6764 : 			if (draw_large_mfd)

  0124f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01256	74 1c		 je	 SHORT $LN27@draw_missi

; 6765 : 			{
; 6766 : 				y_adjust += 2.0;

  01258	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01260	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01268	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0126c	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_missi:

; 6767 : 			}
; 6768 : 		}
; 6769 : 
; 6770 : 		//
; 6771 : 		// status
; 6772 : 		//
; 6773 : 
; 6774 : 		status_name = get_local_entity_int_value (task, INT_TYPE_TASK_COMPLETED);

  01274	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0127b	74 10		 je	 SHORT $LN99@draw_missi
  0127d	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01283	8b 08		 mov	 ecx, DWORD PTR [eax]
  01285	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv640[ebp], ecx
  0128b	eb 27		 jmp	 SHORT $LN100@draw_missi
$LN99@draw_missi:
  0128d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01293	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  01299	52		 push	 edx
  0129a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012a4	50		 push	 eax
  012a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012aa	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv640[ebp], 0
$LN100@draw_missi:
  012b4	b9 01 00 00 00	 mov	 ecx, 1
  012b9	85 c9		 test	 ecx, ecx
  012bb	74 0c		 je	 SHORT $LN101@draw_missi
  012bd	c7 85 f8 ef ff
	ff d9 00 00 00	 mov	 DWORD PTR tv648[ebp], 217 ; 000000d9H
  012c7	eb 27		 jmp	 SHORT $LN102@draw_missi
$LN101@draw_missi:
  012c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  012cf	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  012d5	52		 push	 edx
  012d6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  012db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  012e0	50		 push	 eax
  012e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e6	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv648[ebp], 0
$LN102@draw_missi:
  012f0	68 d9 00 00 00	 push	 217			; 000000d9H
  012f5	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  012fb	51		 push	 ecx
  012fc	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv640[ebp], 1116
  01306	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv648[ebp]
  0130c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01313	ff d1		 call	 ecx
  01315	89 85 64 fe ff
	ff		 mov	 DWORD PTR _status_name$[ebp], eax

; 6775 : 
; 6776 : 		sprintf (s1, "STATUS:%s", task_status_names[status_name]);

  0131b	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _status_name$[ebp]
  01321	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?task_status_names@@3PAPBDA[eax*4]
  01328	51		 push	 ecx
  01329	68 00 00 00 00	 push	 OFFSET ??_C@_09NFLHCPML@STATUS?3?$CFs@
  0132e	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  01334	52		 push	 edx
  01335	e8 00 00 00 00	 call	 _sprintf
  0133a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6777 : 
; 6778 : 		set_mono_font_position (x_min, y_adjust);

  0133d	51		 push	 ecx
  0133e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134b	51		 push	 ecx
  0134c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01359	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6779 : 
; 6780 : 		print_mono_font_max_length_string (s1);

  0135e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01364	50		 push	 eax
  01365	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6781 : 
; 6782 : 		y_adjust += char_height;

  0136a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01372	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0137a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6783 : 
; 6784 : 		if (draw_large_mfd)

  01382	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01389	74 1c		 je	 SHORT $LN28@draw_missi

; 6785 : 		{
; 6786 : 			y_adjust += 2.0;

  0138b	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01393	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0139b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN28@draw_missi:

; 6787 : 		}
; 6788 : 
; 6789 : 		//
; 6790 : 		// start base
; 6791 : 		//
; 6792 : 
; 6793 : 		keysite = get_local_entity_parent (task, LIST_TYPE_ASSIGNED_TASK);

  013a7	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  013ae	74 10		 je	 SHORT $LN103@draw_missi
  013b0	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  013b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b8	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv673[ebp], ecx
  013be	eb 27		 jmp	 SHORT $LN104@draw_missi
$LN103@draw_missi:
  013c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  013c6	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  013cc	52		 push	 edx
  013cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  013d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013d7	50		 push	 eax
  013d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013dd	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv673[ebp], 0
$LN104@draw_missi:
  013e7	b9 01 00 00 00	 mov	 ecx, 1
  013ec	85 c9		 test	 ecx, ecx
  013ee	74 0c		 je	 SHORT $LN105@draw_missi
  013f0	c7 85 f8 ef ff
	ff 03 00 00 00	 mov	 DWORD PTR tv681[ebp], 3
  013fa	eb 27		 jmp	 SHORT $LN106@draw_missi
$LN105@draw_missi:
  013fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01402	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  01408	52		 push	 edx
  01409	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0140e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01413	50		 push	 eax
  01414	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01419	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv681[ebp], 0
$LN106@draw_missi:
  01423	6a 03		 push	 3
  01425	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0142b	51		 push	 ecx
  0142c	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv673[ebp], 180
  01436	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv681[ebp]
  0143c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01443	ff d1		 call	 ecx
  01445	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 6794 : 
; 6795 : 		if (keysite)

  0144b	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  01452	0f 84 e4 00 00
	00		 je	 $LN30@draw_missi

; 6796 : 		{
; 6797 : 			char
; 6798 : 				buffer[1024];
; 6799 : 
; 6800 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  01458	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0145e	50		 push	 eax
  0145f	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  01465	51		 push	 ecx
  01466	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 6801 : 
; 6802 : 			sprintf (s1, "START :%s", buffer);

  0146b	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01471	50		 push	 eax
  01472	68 00 00 00 00	 push	 OFFSET ??_C@_09MDEJFDEL@START?5?3?$CFs@
  01477	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0147d	51		 push	 ecx
  0147e	e8 00 00 00 00	 call	 _sprintf
  01483	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6803 : 
; 6804 : 			set_mono_font_position (x_min, y_adjust);

  01486	51		 push	 ecx
  01487	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0148f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01494	51		 push	 ecx
  01495	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0149d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a2	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6805 : 
; 6806 : 			print_mono_font_max_length_string (s1);

  014a7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  014ad	50		 push	 eax
  014ae	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6807 : 
; 6808 : 			y_adjust += char_height;

  014b3	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014bb	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  014c3	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6809 : 
; 6810 : 			set_mono_font_position (x_min, y_adjust);

  014cb	51		 push	 ecx
  014cc	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d9	51		 push	 ecx
  014da	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  014e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e7	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6811 : 
; 6812 : 			print_target_position (en, keysite);

  014ec	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  014f2	50		 push	 eax
  014f3	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  014f9	51		 push	 ecx
  014fa	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 6813 : 
; 6814 : 			y_adjust += char_height;

  014ff	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01507	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0150f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6815 : 
; 6816 : 			if (draw_large_mfd)

  01517	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0151e	74 1c		 je	 SHORT $LN30@draw_missi

; 6817 : 			{
; 6818 : 				y_adjust += 2.0;

  01520	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01528	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01534	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN30@draw_missi:

; 6819 : 			}
; 6820 : 		}
; 6821 : 
; 6822 : 		//
; 6823 : 		// end base
; 6824 : 		//
; 6825 : 
; 6826 : 		keysite = (entity *) get_local_entity_ptr_value (task, PTR_TYPE_RETURN_KEYSITE);

  0153c	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01543	74 10		 je	 SHORT $LN107@draw_missi
  01545	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  0154b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0154d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv744[ebp], ecx
  01553	eb 27		 jmp	 SHORT $LN108@draw_missi
$LN107@draw_missi:
  01555	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0155b	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  01561	52		 push	 edx
  01562	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0156c	50		 push	 eax
  0156d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01572	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN108@draw_missi:
  0157c	b9 01 00 00 00	 mov	 ecx, 1
  01581	85 c9		 test	 ecx, ecx
  01583	74 0c		 je	 SHORT $LN109@draw_missi
  01585	c7 85 f8 ef ff
	ff 08 00 00 00	 mov	 DWORD PTR tv752[ebp], 8
  0158f	eb 27		 jmp	 SHORT $LN110@draw_missi
$LN109@draw_missi:
  01591	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01597	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  0159d	52		 push	 edx
  0159e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  015a8	50		 push	 eax
  015a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015ae	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN110@draw_missi:
  015b8	6a 08		 push	 8
  015ba	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  015c0	51		 push	 ecx
  015c1	6b 95 fc ef ff
	ff 50		 imul	 edx, DWORD PTR tv744[ebp], 80
  015c8	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv752[ebp]
  015ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  015d5	ff d1		 call	 ecx
  015d7	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 6827 : 
; 6828 : 		if (keysite)

  015dd	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  015e4	0f 84 e4 00 00
	00		 je	 $LN32@draw_missi

; 6829 : 		{
; 6830 : 			char
; 6831 : 				buffer[1024];
; 6832 : 
; 6833 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  015ea	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  015f0	50		 push	 eax
  015f1	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  015f7	51		 push	 ecx
  015f8	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 6834 : 
; 6835 : 			sprintf (s1, "END   :%s", buffer);

  015fd	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  01603	50		 push	 eax
  01604	68 00 00 00 00	 push	 OFFSET ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
  01609	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0160f	51		 push	 ecx
  01610	e8 00 00 00 00	 call	 _sprintf
  01615	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6836 : 
; 6837 : 			set_mono_font_position (x_min, y_adjust);

  01618	51		 push	 ecx
  01619	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01621	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01626	51		 push	 ecx
  01627	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0162f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01634	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6838 : 
; 6839 : 			print_mono_font_max_length_string (s1);

  01639	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0163f	50		 push	 eax
  01640	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6840 : 
; 6841 : 			y_adjust += char_height;

  01645	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0164d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01655	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6842 : 
; 6843 : 			set_mono_font_position (x_min, y_adjust);

  0165d	51		 push	 ecx
  0165e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166b	51		 push	 ecx
  0166c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01674	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01679	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6844 : 
; 6845 : 			print_target_position (en, keysite);

  0167e	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  01684	50		 push	 eax
  01685	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  0168b	51		 push	 ecx
  0168c	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 6846 : 
; 6847 : 			y_adjust += char_height;

  01691	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01699	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  016a1	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6848 : 
; 6849 : 			if (draw_large_mfd)

  016a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  016b0	74 1c		 je	 SHORT $LN32@draw_missi

; 6850 : 			{
; 6851 : 				y_adjust += 2.0;

  016b2	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  016ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  016c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016c6	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN32@draw_missi:

; 6852 : 			}
; 6853 : 		}
; 6854 : 
; 6855 : 		//
; 6856 : 		// count (kills and losses)
; 6857 : 		//
; 6858 : 
; 6859 : 		sprintf

  016ce	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  016d5	74 10		 je	 SHORT $LN111@draw_missi
  016d7	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  016dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  016df	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv784[ebp], ecx
  016e5	eb 27		 jmp	 SHORT $LN112@draw_missi
$LN111@draw_missi:
  016e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  016ed	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  016f3	52		 push	 edx
  016f4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  016f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016fe	50		 push	 eax
  016ff	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01704	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN112@draw_missi:
  0170e	b9 01 00 00 00	 mov	 ecx, 1
  01713	85 c9		 test	 ecx, ecx
  01715	74 0c		 je	 SHORT $LN113@draw_missi
  01717	c7 85 f8 ef ff
	ff 7f 00 00 00	 mov	 DWORD PTR tv792[ebp], 127 ; 0000007fH
  01721	eb 27		 jmp	 SHORT $LN114@draw_missi
$LN113@draw_missi:
  01723	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01729	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  0172f	52		 push	 edx
  01730	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01735	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0173a	50		 push	 eax
  0173b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01740	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv792[ebp], 0
$LN114@draw_missi:
  0174a	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01751	74 10		 je	 SHORT $LN115@draw_missi
  01753	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01759	8b 11		 mov	 edx, DWORD PTR [ecx]
  0175b	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv805[ebp], edx
  01761	eb 26		 jmp	 SHORT $LN116@draw_missi
$LN115@draw_missi:
  01763	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01768	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  0176d	50		 push	 eax
  0176e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01773	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01779	51		 push	 ecx
  0177a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0177f	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv805[ebp], 0
$LN116@draw_missi:
  01789	ba 01 00 00 00	 mov	 edx, 1
  0178e	85 d2		 test	 edx, edx
  01790	74 0c		 je	 SHORT $LN117@draw_missi
  01792	c7 85 f0 ef ff
	ff 72 00 00 00	 mov	 DWORD PTR tv813[ebp], 114 ; 00000072H
  0179c	eb 26		 jmp	 SHORT $LN118@draw_missi
$LN117@draw_missi:
  0179e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  017a3	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  017a8	50		 push	 eax
  017a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  017b4	51		 push	 ecx
  017b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017ba	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv813[ebp], 0
$LN118@draw_missi:
  017c4	6a 7f		 push	 127			; 0000007fH
  017c6	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _task$[ebp]
  017cc	52		 push	 edx
  017cd	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv784[ebp], 1116
  017d7	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv792[ebp]
  017dd	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  017e4	ff d2		 call	 edx
  017e6	50		 push	 eax
  017e7	6a 72		 push	 114			; 00000072H
  017e9	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  017ef	50		 push	 eax
  017f0	69 8d f4 ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv805[ebp], 1116
  017fa	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv813[ebp]
  01800	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  01807	ff d0		 call	 eax
  01809	50		 push	 eax
  0180a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
  0180f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  01815	51		 push	 ecx
  01816	e8 00 00 00 00	 call	 _sprintf
  0181b	83 c4 10	 add	 esp, 16			; 00000010H

; 6860 : 		(
; 6861 : 			s1,
; 6862 : 			"COUNT :Kills=%d Losses=%d",
; 6863 : 			get_local_entity_int_value (task, INT_TYPE_KILLS),
; 6864 : 			get_local_entity_int_value (task, INT_TYPE_LOSSES)
; 6865 : 		);
; 6866 : 
; 6867 : 		set_mono_font_position (x_min, y_adjust);

  0181e	51		 push	 ecx
  0181f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182c	51		 push	 ecx
  0182d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183a	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6868 : 
; 6869 : 		print_mono_font_max_length_string (s1);

  0183f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01845	50		 push	 eax
  01846	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6870 : 
; 6871 : 		y_adjust += char_height;

  0184b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01853	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0185b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6872 : 
; 6873 : 		if (draw_large_mfd)

  01863	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0186a	74 1c		 je	 SHORT $LN33@draw_missi

; 6874 : 		{
; 6875 : 			y_adjust += 2.0;

  0186c	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01874	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0187c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01880	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN33@draw_missi:

; 6876 : 		}
; 6877 : 
; 6878 : 		//
; 6879 : 		// time
; 6880 : 		//
; 6881 : 
; 6882 : 		mission_time = get_local_entity_float_value (task, FLOAT_TYPE_ELAPSED_MISSION_TIME);

  01888	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0188f	74 10		 je	 SHORT $LN119@draw_missi
  01891	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01897	8b 08		 mov	 ecx, DWORD PTR [eax]
  01899	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv835[ebp], ecx
  0189f	eb 27		 jmp	 SHORT $LN120@draw_missi
$LN119@draw_missi:
  018a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018a7	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018ad	52		 push	 edx
  018ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  018b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018b8	50		 push	 eax
  018b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018be	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv835[ebp], 0
$LN120@draw_missi:
  018c8	b9 01 00 00 00	 mov	 ecx, 1
  018cd	85 c9		 test	 ecx, ecx
  018cf	74 0c		 je	 SHORT $LN121@draw_missi
  018d1	c7 85 f8 ef ff
	ff 22 00 00 00	 mov	 DWORD PTR tv843[ebp], 34 ; 00000022H
  018db	eb 27		 jmp	 SHORT $LN122@draw_missi
$LN121@draw_missi:
  018dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018e3	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018e9	52		 push	 edx
  018ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  018ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  018f4	50		 push	 eax
  018f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018fa	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv843[ebp], 0
$LN122@draw_missi:
  01904	6a 22		 push	 34			; 00000022H
  01906	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0190c	51		 push	 ecx
  0190d	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv835[ebp], 700
  01917	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv843[ebp]
  0191d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01924	ff d1		 call	 ecx
  01926	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR _mission_time$[ebp]

; 6883 : 
; 6884 : 		get_digital_clock_int_values (mission_time, &mission_hours, &mission_minutes, &mission_seconds);

  0192c	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _mission_seconds$[ebp]
  01932	50		 push	 eax
  01933	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _mission_minutes$[ebp]
  01939	51		 push	 ecx
  0193a	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR _mission_hours$[ebp]
  01940	52		 push	 edx
  01941	51		 push	 ecx
  01942	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR _mission_time$[ebp]
  0194a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194f	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 6885 : 
; 6886 : 		estimated_time = get_task_estimated_route_duration (task);

  01954	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  0195a	50		 push	 eax
  0195b	e8 00 00 00 00	 call	 ?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z ; get_task_estimated_route_duration
  01960	d9 9d 1c fe ff
	ff		 fstp	 DWORD PTR _estimated_time$[ebp]

; 6887 : 
; 6888 : 		get_digital_clock_int_values (estimated_time, &estimated_hours, &estimated_minutes, &estimated_seconds);

  01966	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _estimated_seconds$[ebp]
  0196c	50		 push	 eax
  0196d	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _estimated_minutes$[ebp]
  01973	51		 push	 ecx
  01974	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR _estimated_hours$[ebp]
  0197a	52		 push	 edx
  0197b	51		 push	 ecx
  0197c	f3 0f 10 85 1c
	fe ff ff	 movss	 xmm0, DWORD PTR _estimated_time$[ebp]
  01984	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01989	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 6889 : 
; 6890 : 		sprintf

  0198e	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _estimated_seconds$[ebp]
  01994	50		 push	 eax
  01995	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _estimated_minutes$[ebp]
  0199b	51		 push	 ecx
  0199c	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _estimated_hours$[ebp]
  019a2	52		 push	 edx
  019a3	8b 85 4c fe ff
	ff		 mov	 eax, DWORD PTR _mission_seconds$[ebp]
  019a9	50		 push	 eax
  019aa	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _mission_minutes$[ebp]
  019b0	51		 push	 ecx
  019b1	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _mission_hours$[ebp]
  019b7	52		 push	 edx
  019b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
  019bd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019c3	50		 push	 eax
  019c4	e8 00 00 00 00	 call	 _sprintf
  019c9	83 c4 20	 add	 esp, 32			; 00000020H

; 6891 : 		(
; 6892 : 			s1,
; 6893 : 			"TIME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d",
; 6894 : 			mission_hours,
; 6895 : 			mission_minutes,
; 6896 : 			mission_seconds,
; 6897 : 			estimated_hours,
; 6898 : 			estimated_minutes,
; 6899 : 			estimated_seconds
; 6900 : 		);
; 6901 : 
; 6902 : 		set_mono_font_position (x_min, y_adjust);

  019cc	51		 push	 ecx
  019cd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  019d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019da	51		 push	 ecx
  019db	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  019e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6903 : 
; 6904 : 		print_mono_font_max_length_string (s1);

  019ed	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019f3	50		 push	 eax
  019f4	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string
$LN20@draw_missi:

; 6905 : 	}
; 6906 : 
; 6907 : 	////////////////////////////////////////
; 6908 : 	//
; 6909 : 	// time of day
; 6910 : 	//
; 6911 : 	////////////////////////////////////////
; 6912 : 
; 6913 : 	set_mono_font_colour (MFD_COLOUR_WHITE);

  019f9	b8 04 00 00 00	 mov	 eax, 4
  019fe	6b c8 13	 imul	 ecx, eax, 19
  01a01	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a07	52		 push	 edx
  01a08	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6914 : 
; 6915 : 	get_2d_float_screen_y_coordinate (-0.9, &y_adjust);

  01a0d	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  01a13	50		 push	 eax
  01a14	51		 push	 ecx
  01a15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01a1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a22	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 6916 : 
; 6917 : 	y_adjust -= 2.0;

  01a27	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a2f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  01a37	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a3b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6918 : 
; 6919 : 	draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  01a43	b8 04 00 00 00	 mov	 eax, 4
  01a48	6b c8 13	 imul	 ecx, eax, 19
  01a4b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a51	52		 push	 edx
  01a52	51		 push	 ecx
  01a53	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a60	51		 push	 ecx
  01a61	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  01a69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6e	51		 push	 ecx
  01a6f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7c	51		 push	 ecx
  01a7d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6920 : 
; 6921 : 	y_adjust += 2.0;

  01a8f	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a97	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01a9f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aa3	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6922 : 
; 6923 : 	time = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  01aab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  01ab2	74 0f		 je	 SHORT $LN123@draw_missi
  01ab4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01ab9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01abb	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv894[ebp], ecx
  01ac1	eb 27		 jmp	 SHORT $LN124@draw_missi
$LN123@draw_missi:
  01ac3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01ac9	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01acf	52		 push	 edx
  01ad0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ada	50		 push	 eax
  01adb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ae0	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv894[ebp], 0
$LN124@draw_missi:
  01aea	b9 01 00 00 00	 mov	 ecx, 1
  01aef	85 c9		 test	 ecx, ecx
  01af1	74 0c		 je	 SHORT $LN125@draw_missi
  01af3	c7 85 f8 ef ff
	ff 8e 00 00 00	 mov	 DWORD PTR tv902[ebp], 142 ; 0000008eH
  01afd	eb 27		 jmp	 SHORT $LN126@draw_missi
$LN125@draw_missi:
  01aff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01b05	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01b0b	52		 push	 edx
  01b0c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01b16	50		 push	 eax
  01b17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b1c	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv902[ebp], 0
$LN126@draw_missi:
  01b26	68 8e 00 00 00	 push	 142			; 0000008eH
  01b2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01b31	51		 push	 ecx
  01b32	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv894[ebp], 700
  01b3c	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv902[ebp]
  01b42	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01b49	ff d1		 call	 ecx
  01b4b	d9 9d 24 fe ff
	ff		 fstp	 DWORD PTR _time$[ebp]

; 6924 : 
; 6925 : 	get_digital_clock_int_values (time, &hours, &minutes, &seconds);

  01b51	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$[ebp]
  01b57	50		 push	 eax
  01b58	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$[ebp]
  01b5e	51		 push	 ecx
  01b5f	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR _hours$[ebp]
  01b65	52		 push	 edx
  01b66	51		 push	 ecx
  01b67	f3 0f 10 85 24
	fe ff ff	 movss	 xmm0, DWORD PTR _time$[ebp]
  01b6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b74	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 6926 : 
; 6927 : 	sprintf (s1, "%02d:%02d:%02d", hours, minutes, seconds);

  01b79	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _seconds$[ebp]
  01b7f	50		 push	 eax
  01b80	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _minutes$[ebp]
  01b86	51		 push	 ecx
  01b87	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR _hours$[ebp]
  01b8d	52		 push	 edx
  01b8e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  01b93	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01b99	50		 push	 eax
  01b9a	e8 00 00 00 00	 call	 _sprintf
  01b9f	83 c4 14	 add	 esp, 20			; 00000014H

; 6928 : 
; 6929 : 	x_adjust = get_mono_font_string_width (s1) * 0.5;

  01ba2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01ba8	50		 push	 eax
  01ba9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01bae	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1457[ebp]
  01bb4	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1457[ebp]
  01bbc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01bc4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc8	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6930 : 
; 6931 : 	set_mono_font_position (x_mid - x_adjust, y_adjust);

  01bd0	51		 push	 ecx
  01bd1	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bde	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  01be6	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01bee	51		 push	 ecx
  01bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf4	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6932 : 
; 6933 : 	print_mono_font_string (s1);

  01bf9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01bff	50		 push	 eax
  01c00	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6934 : }

  01c05	5f		 pop	 edi
  01c06	5e		 pop	 esi
  01c07	5b		 pop	 ebx
  01c08	8b e5		 mov	 esp, ebp
  01c0a	5d		 pop	 ebp
  01c0b	c3		 ret	 0
?draw_mission_display_mfd@@YGXXZ ENDP			; draw_mission_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?print_target_position@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv88 = -172						; size = 4
tv193 = -168						; size = 4
tv80 = -168						; size = 4
_position$ = -100					; size = 4
_range$ = -96						; size = 4
_bearing$ = -92						; size = 4
_z_sector$ = -88					; size = 4
_x_sector$ = -84					; size = 4
_s$ = -80						; size = 80
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?print_target_position@@YGXPAUENTITY@@0@Z PROC		; print_target_position, COMDAT

; 6398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6399 : 	char
; 6400 : 		s[80];
; 6401 : 
; 6402 : 	int
; 6403 : 		x_sector,
; 6404 : 		z_sector,
; 6405 : 		bearing;
; 6406 : 
; 6407 : 	float
; 6408 : 		range;
; 6409 : 
; 6410 : 	vec3d
; 6411 : 		*position;
; 6412 : 
; 6413 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_targ
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_targ:

; 6414 : 
; 6415 : 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@print_targ
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_targ:

; 6416 : 
; 6417 : 	position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00048	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0004c	74 0d		 je	 SHORT $LN7@print_targ
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN8@print_targ
$LN7@print_targ:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00061	83 c2 13	 add	 edx, 19			; 00000013H
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN8@print_targ:
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	85 c9		 test	 ecx, ecx
  00086	74 0c		 je	 SHORT $LN9@print_targ
  00088	c7 85 54 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv88[ebp], 8
  00092	eb 24		 jmp	 SHORT $LN10@print_targ
$LN9@print_targ:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  0009a	83 c2 13	 add	 edx, 19			; 00000013H
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN10@print_targ:
  000b8	6a 08		 push	 8
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  000bd	51		 push	 ecx
  000be	6b 95 58 ff ff
	ff 60		 imul	 edx, DWORD PTR tv80[ebp], 96
  000c5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  000cb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d2	ff d1		 call	 ecx
  000d4	89 45 9c	 mov	 DWORD PTR _position$[ebp], eax

; 6418 : 
; 6419 : 	ASSERT (position);

  000d7	83 7d 9c 00	 cmp	 DWORD PTR _position$[ebp], 0
  000db	75 18		 jne	 SHORT $LN4@print_targ
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  000e2	83 c0 15	 add	 eax, 21			; 00000015H
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  000f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@print_targ:

; 6420 : 
; 6421 : 	get_x_sector (x_sector, position->x);

  000f5	8d 45 ac	 lea	 eax, DWORD PTR _x_sector$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  000fc	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00100	51		 push	 ecx
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0010b	8b 45 ac	 mov	 eax, DWORD PTR _x_sector$[ebp]
  0010e	99		 cdq
  0010f	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00115	89 45 ac	 mov	 DWORD PTR _x_sector$[ebp], eax

; 6422 : 	get_z_sector (z_sector, position->z);

  00118	8d 45 a8	 lea	 eax, DWORD PTR _z_sector$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  0011f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0012f	8b 45 a8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00132	99		 cdq
  00133	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00139	89 45 a8	 mov	 DWORD PTR _z_sector$[ebp], eax

; 6423 : 
; 6424 : 	bearing = (int) (deg (get_local_entity_target_bearing (source, target, &range)));

  0013c	8d 45 a0	 lea	 eax, DWORD PTR _range$[ebp]
  0013f	50		 push	 eax
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00143	51		 push	 ecx
  00144	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 ?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z ; get_local_entity_target_bearing
  0014d	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv193[ebp]
  00153	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv193[ebp]
  0015b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00163	f3 0f 2c c0	 cvttss2si eax, xmm0
  00167	89 45 a4	 mov	 DWORD PTR _bearing$[ebp], eax

; 6425 : 
; 6426 : 	if (bearing == 0)

  0016a	83 7d a4 00	 cmp	 DWORD PTR _bearing$[ebp], 0
  0016e	75 07		 jne	 SHORT $LN5@print_targ

; 6427 : 	{
; 6428 : 		bearing = 360;

  00170	c7 45 a4 68 01
	00 00		 mov	 DWORD PTR _bearing$[ebp], 360 ; 00000168H
$LN5@print_targ:

; 6429 : 	}
; 6430 : 
; 6431 : 	range *= (float) (1.0 / 1000.0);

  00177	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$[ebp]
  0017c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a83126f
  00184	f3 0f 11 45 a0	 movss	 DWORD PTR _range$[ebp], xmm0

; 6432 : 
; 6433 : 	sprintf (s, "       <%03d,%03d> %6.1fKm %3d\x7f", x_sector, z_sector, range, bearing);

  00189	8b 45 a4	 mov	 eax, DWORD PTR _bearing$[ebp]
  0018c	50		 push	 eax
  0018d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00192	83 ec 08	 sub	 esp, 8
  00195	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0019a	8b 4d a8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  0019d	51		 push	 ecx
  0019e	8b 55 ac	 mov	 edx, DWORD PTR _x_sector$[ebp]
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
  001a7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _sprintf
  001b0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6434 : 
; 6435 : 	print_mono_font_max_length_string (s);

  001b3	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6436 : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
?print_target_position@@YGXPAUENTITY@@0@Z ENDP		; print_target_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z
_TEXT	SEGMENT
tv222 = -84						; size = 4
tv201 = -84						; size = 4
tv179 = -84						; size = 4
tv158 = -84						; size = 4
tv139 = -84						; size = 4
tv86 = -84						; size = 4
tv214 = -80						; size = 4
tv193 = -80						; size = 4
tv171 = -80						; size = 4
tv151 = -80						; size = 4
tv131 = -80						; size = 4
tv79 = -80						; size = 4
_aircrew$ = -12						; size = 4
_name$ = -8						; size = 4
_rank$ = -4						; size = 4
_en$ = 8						; size = 4
_buffer$ = 12						; size = 4
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z PROC	; get_player_rank_and_name, COMDAT

; 6349 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6350 : 	const char
; 6351 : 		*rank,
; 6352 : 		*name;
; 6353 : 
; 6354 : 	entity
; 6355 : 		*aircrew;
; 6356 : 
; 6357 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_player
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_player:

; 6358 : 
; 6359 : 	ASSERT (buffer);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN5@get_player
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00032	83 c0 0a	 add	 eax, 10			; 0000000aH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_player:

; 6360 : 
; 6361 : 	if (get_local_entity_int_value (en, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN11@get_player
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d b0	 mov	 DWORD PTR tv79[ebp], ecx
  00053	eb 1d		 jmp	 SHORT $LN12@get_player
$LN11@get_player:
  00055	68 d9 18 00 00	 push	 6361			; 000018d9H
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN12@get_player:
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN13@get_player
  0007b	c7 45 ac 9c 00
	00 00		 mov	 DWORD PTR tv86[ebp], 156 ; 0000009cH
  00082	eb 1d		 jmp	 SHORT $LN14@get_player
$LN13@get_player:
  00084	68 d9 18 00 00	 push	 6361			; 000018d9H
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN14@get_player:
  000a1	68 9c 00 00 00	 push	 156			; 0000009cH
  000a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a9	52		 push	 edx
  000aa	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv79[ebp], 1116
  000b1	8b 4d ac	 mov	 ecx, DWORD PTR tv86[ebp]
  000b4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000bb	ff d2		 call	 edx
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 e7 02 00
	00		 je	 $LN6@get_player

; 6362 : 	{
; 6363 : 		aircrew = get_local_entity_first_child (en, LIST_TYPE_AIRCREW);

  000c5	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000c9	74 0a		 je	 SHORT $LN15@get_player
  000cb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 4d b0	 mov	 DWORD PTR tv131[ebp], ecx
  000d3	eb 21		 jmp	 SHORT $LN16@get_player
$LN15@get_player:
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  000db	83 c2 0e	 add	 edx, 14			; 0000000eH
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ef	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN16@get_player:
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	85 c9		 test	 ecx, ecx
  000fd	74 09		 je	 SHORT $LN17@get_player
  000ff	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00106	eb 21		 jmp	 SHORT $LN18@get_player
$LN17@get_player:
  00108	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0010e	83 c2 0e	 add	 edx, 14			; 0000000eH
  00111	52		 push	 edx
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00122	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN18@get_player:
  00129	6a 01		 push	 1
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0012e	51		 push	 ecx
  0012f	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv131[ebp], 180
  00136	8b 45 ac	 mov	 eax, DWORD PTR tv139[ebp]
  00139	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00140	ff d1		 call	 ecx
  00142	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax
$LN2@get_player:

; 6364 : 
; 6365 : 		while (aircrew)

  00145	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00149	0f 84 03 01 00
	00		 je	 $LN3@get_player

; 6366 : 		{
; 6367 : 			if (get_local_entity_int_value (aircrew, INT_TYPE_ENTITY_SUB_TYPE) == ENTITY_SUB_TYPE_PILOT_PILOT)

  0014f	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00153	74 0a		 je	 SHORT $LN19@get_player
  00155	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	89 4d b0	 mov	 DWORD PTR tv151[ebp], ecx
  0015d	eb 1d		 jmp	 SHORT $LN20@get_player
$LN19@get_player:
  0015f	68 df 18 00 00	 push	 6367			; 000018dfH
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00169	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00175	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN20@get_player:
  0017c	b8 01 00 00 00	 mov	 eax, 1
  00181	85 c0		 test	 eax, eax
  00183	74 09		 je	 SHORT $LN21@get_player
  00185	c7 45 ac 34 00
	00 00		 mov	 DWORD PTR tv158[ebp], 52 ; 00000034H
  0018c	eb 1d		 jmp	 SHORT $LN22@get_player
$LN21@get_player:
  0018e	68 df 18 00 00	 push	 6367			; 000018dfH
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN22@get_player:
  001ab	6a 34		 push	 52			; 00000034H
  001ad	8b 55 f4	 mov	 edx, DWORD PTR _aircrew$[ebp]
  001b0	52		 push	 edx
  001b1	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv151[ebp], 1116
  001b8	8b 4d ac	 mov	 ecx, DWORD PTR tv158[ebp]
  001bb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001c2	ff d2		 call	 edx
  001c4	85 c0		 test	 eax, eax
  001c6	75 05		 jne	 SHORT $LN7@get_player

; 6368 : 			{
; 6369 : 				break;

  001c8	e9 85 00 00 00	 jmp	 $LN3@get_player
$LN7@get_player:

; 6370 : 			}
; 6371 : 
; 6372 : 			aircrew = get_local_entity_child_succ (aircrew, LIST_TYPE_AIRCREW);

  001cd	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  001d1	74 0a		 je	 SHORT $LN23@get_player
  001d3	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	89 4d b0	 mov	 DWORD PTR tv171[ebp], ecx
  001db	eb 21		 jmp	 SHORT $LN24@get_player
$LN23@get_player:
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  001e3	83 c2 17	 add	 edx, 23			; 00000017H
  001e6	52		 push	 edx
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], 0
$LN24@get_player:
  001fe	b9 01 00 00 00	 mov	 ecx, 1
  00203	85 c9		 test	 ecx, ecx
  00205	74 09		 je	 SHORT $LN25@get_player
  00207	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv179[ebp], 1
  0020e	eb 21		 jmp	 SHORT $LN26@get_player
$LN25@get_player:
  00210	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00216	83 c2 17	 add	 edx, 23			; 00000017H
  00219	52		 push	 edx
  0021a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN26@get_player:
  00231	6a 01		 push	 1
  00233	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  00236	51		 push	 ecx
  00237	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv171[ebp], 180
  0023e	8b 45 ac	 mov	 eax, DWORD PTR tv179[ebp]
  00241	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00248	ff d1		 call	 ecx
  0024a	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax

; 6373 : 		}

  0024d	e9 f3 fe ff ff	 jmp	 $LN2@get_player
$LN3@get_player:

; 6374 : 
; 6375 : 		if (aircrew)

  00252	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00256	0f 84 50 01 00
	00		 je	 $LN6@get_player

; 6376 : 		{
; 6377 : 			rank = get_untranslated_pilot_rank_short_name (get_local_entity_int_value (aircrew, INT_TYPE_PILOT_RANK));

  0025c	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00260	74 0a		 je	 SHORT $LN27@get_player
  00262	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	89 4d b0	 mov	 DWORD PTR tv193[ebp], ecx
  0026a	eb 21		 jmp	 SHORT $LN28@get_player
$LN27@get_player:
  0026c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00272	83 c2 1c	 add	 edx, 28			; 0000001cH
  00275	52		 push	 edx
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00286	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN28@get_player:
  0028d	b9 01 00 00 00	 mov	 ecx, 1
  00292	85 c9		 test	 ecx, ecx
  00294	74 09		 je	 SHORT $LN29@get_player
  00296	c7 45 ac 9a 00
	00 00		 mov	 DWORD PTR tv201[ebp], 154 ; 0000009aH
  0029d	eb 21		 jmp	 SHORT $LN30@get_player
$LN29@get_player:
  0029f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002a5	83 c2 1c	 add	 edx, 28			; 0000001cH
  002a8	52		 push	 edx
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN30@get_player:
  002c0	68 9a 00 00 00	 push	 154			; 0000009aH
  002c5	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  002c8	51		 push	 ecx
  002c9	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv193[ebp], 1116
  002d0	8b 45 ac	 mov	 eax, DWORD PTR tv201[ebp]
  002d3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  002da	ff d1		 call	 ecx
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 ?get_untranslated_pilot_rank_short_name@@YGPBDH@Z ; get_untranslated_pilot_rank_short_name
  002e2	89 45 fc	 mov	 DWORD PTR _rank$[ebp], eax

; 6378 : 
; 6379 : 			name = get_local_entity_string (aircrew, STRING_TYPE_PILOTS_NAME);

  002e5	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  002e9	74 0a		 je	 SHORT $LN31@get_player
  002eb	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	89 4d b0	 mov	 DWORD PTR tv214[ebp], ecx
  002f3	eb 21		 jmp	 SHORT $LN32@get_player
$LN31@get_player:
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002fb	83 c2 1e	 add	 edx, 30			; 0000001eH
  002fe	52		 push	 edx
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0030f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$LN32@get_player:
  00316	b9 01 00 00 00	 mov	 ecx, 1
  0031b	85 c9		 test	 ecx, ecx
  0031d	74 09		 je	 SHORT $LN33@get_player
  0031f	c7 45 ac 0a 00
	00 00		 mov	 DWORD PTR tv222[ebp], 10 ; 0000000aH
  00326	eb 21		 jmp	 SHORT $LN34@get_player
$LN33@get_player:
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0032e	83 c2 1e	 add	 edx, 30			; 0000001eH
  00331	52		 push	 edx
  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00342	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], 0
$LN34@get_player:
  00349	6a 0a		 push	 10			; 0000000aH
  0034b	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  0034e	51		 push	 ecx
  0034f	6b 55 b0 34	 imul	 edx, DWORD PTR tv214[ebp], 52
  00353	8b 45 ac	 mov	 eax, DWORD PTR tv222[ebp]
  00356	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0035d	ff d1		 call	 ecx
  0035f	89 45 f8	 mov	 DWORD PTR _name$[ebp], eax

; 6380 : 
; 6381 : 			if ((rank && strlen (rank)) && (name && strlen (name)))

  00362	83 7d fc 00	 cmp	 DWORD PTR _rank$[ebp], 0
  00366	74 44		 je	 SHORT $LN6@get_player
  00368	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 _strlen
  00371	83 c4 04	 add	 esp, 4
  00374	85 c0		 test	 eax, eax
  00376	74 34		 je	 SHORT $LN6@get_player
  00378	83 7d f8 00	 cmp	 DWORD PTR _name$[ebp], 0
  0037c	74 2e		 je	 SHORT $LN6@get_player
  0037e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 _strlen
  00387	83 c4 04	 add	 esp, 4
  0038a	85 c0		 test	 eax, eax
  0038c	74 1e		 je	 SHORT $LN6@get_player

; 6382 : 			{
; 6383 : 				sprintf (buffer, "%s %s", rank, name);

  0038e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00391	50		 push	 eax
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  00395	51		 push	 ecx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
  0039b	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  0039e	52		 push	 edx
  0039f	e8 00 00 00 00	 call	 _sprintf
  003a4	83 c4 10	 add	 esp, 16			; 00000010H

; 6384 : 
; 6385 : 				return (buffer);

  003a7	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  003aa	eb 02		 jmp	 SHORT $LN1@get_player
$LN6@get_player:

; 6386 : 			}
; 6387 : 		}
; 6388 : 	}
; 6389 : 
; 6390 : 	return (NULL);

  003ac	33 c0		 xor	 eax, eax
$LN1@get_player:

; 6391 : }

  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b e5		 mov	 esp, ebp
  003b3	5d		 pop	 ebp
  003b4	c2 08 00	 ret	 8
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ENDP	; get_player_rank_and_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?print_mono_font_max_length_string@@YGXPAD@Z
_TEXT	SEGMENT
_buffer$ = -200						; size = 200
_s$ = 8							; size = 4
?print_mono_font_max_length_string@@YGXPAD@Z PROC	; print_mono_font_max_length_string, COMDAT

; 6333 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6334 : 	char
; 6335 : 		buffer[200];
; 6336 : 
; 6337 : 	ASSERT (s);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _s$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_mono
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mono:

; 6338 : 
; 6339 : 	sprintf (buffer, "%.31s", s);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_05KEIIKJGB@?$CF?431s@
  00033	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _sprintf
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6340 : 
; 6341 : 	print_mono_font_string (buffer);

  00042	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6342 : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?print_mono_font_max_length_string@@YGXPAD@Z ENDP	; print_mono_font_max_length_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_flight_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv138 = -76						; size = 4
tv82 = -72						; size = 4
tv74 = -68						; size = 4
?draw_flight_display_mfd@@YGXXZ PROC			; draw_flight_display_mfd, COMDAT

; 6308 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6309 : 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6310 : 
; 6311 : 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 6312 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN3@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN4@draw_fligh
$LN3@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  0003d	83 c2 04	 add	 edx, 4
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN5@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv82[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN6@draw_fligh
$LN5@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  00070	83 c2 04	 add	 edx, 4
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@draw_fligh:
  0008b	6a 01		 push	 1
  0008d	6a 34		 push	 52			; 00000034H
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00095	51		 push	 ecx
  00096	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv74[ebp], 700
  0009d	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  000a0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a7	ff d1		 call	 ecx
  000a9	d9 5d b4	 fstp	 DWORD PTR tv138[ebp]
  000ac	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv138[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 6313 : 
; 6314 : 	draw_airspeed_scale();

  000bc	e8 00 00 00 00	 call	 ?draw_airspeed_scale@@YGXXZ ; draw_airspeed_scale

; 6315 : 	draw_radar_altitude_scale();

  000c1	e8 00 00 00 00	 call	 ?draw_radar_altitude_scale@@YGXXZ ; draw_radar_altitude_scale

; 6316 : 	draw_barometric_altitude_scale();

  000c6	e8 00 00 00 00	 call	 ?draw_barometric_altitude_scale@@YGXXZ ; draw_barometric_altitude_scale

; 6317 : 
; 6318 : 	draw_torque_scale();

  000cb	e8 00 00 00 00	 call	 ?draw_torque_scale@@YGXXZ ; draw_torque_scale

; 6319 : 	display_navigation_info();

  000d0	e8 00 00 00 00	 call	 ?display_navigation_info@@YGXXZ ; display_navigation_info

; 6320 : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?draw_flight_display_mfd@@YGXXZ ENDP			; draw_flight_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_pitch_ladder@@YGXXZ
_TEXT	SEGMENT
tv979 = -332						; size = 8
tv800 = -332						; size = 8
tv780 = -332						; size = 8
tv762 = -332						; size = 8
tv1440 = -324						; size = 8
tv1241 = -324						; size = 8
tv1235 = -324						; size = 8
tv1227 = -324						; size = 8
tv980 = -324						; size = 8
tv801 = -324						; size = 8
tv781 = -324						; size = 8
tv763 = -324						; size = 8
tv239 = -324						; size = 4
tv128 = -324						; size = 4
tv1663 = -320						; size = 4
tv1635 = -320						; size = 4
tv1597 = -320						; size = 4
tv1220 = -320						; size = 4
tv1214 = -320						; size = 4
tv1202 = -320						; size = 4
tv408 = -320						; size = 4
tv231 = -320						; size = 4
tv224 = -320						; size = 4
tv88 = -320						; size = 4
_pitch_y$1 = -252					; size = 4
_buffer$2 = -248					; size = 8
_y_adjust$3 = -240					; size = 4
_x_adjust$4 = -236					; size = 4
_i$5 = -232						; size = 4
_x_tick$6 = -228					; size = 4
_x_half_tick$7 = -224					; size = 4
_x_end$8 = -220						; size = 4
_y_coarse_step$9 = -216					; size = 4
_y_fine_step$10 = -212					; size = 4
_y_coarse_height$11 = -208				; size = 4
_y_fine_height$12 = -204				; size = 4
_current_y$13 = -200					; size = 4
_right_colour$14 = -196					; size = 4
_left_colour$15 = -192					; size = 4
_tmp$16 = -188						; size = 4
_end_x$17 = -184					; size = 4
_start_x$18 = -180					; size = 4
_right_y$19 = -176					; size = 4
_left_y$20 = -172					; size = 4
_incline$21 = -168					; size = 4
_inverted$22 = -164					; size = 4
_tan_pitch$23 = -160					; size = 4
_y_horizon_abs$24 = -156				; size = 4
_x_horizon_abs$25 = -152				; size = 4
_ground_colour$ = -148					; size = 4
_sky_colour$ = -144					; size = 4
_x_adjust$ = -140					; size = 4
_y_10_deg_step$ = -136					; size = 4
_x_10_deg_step$ = -132					; size = 4
_y_horizon$ = -128					; size = 4
_x_horizon$ = -124					; size = 4
_y_scale$ = -120					; size = 4
_x_scale$ = -116					; size = 4
_lower_edge$ = -112					; size = 4
_upper_edge$ = -108					; size = 4
_right_edge$ = -104					; size = 4
_left_edge$ = -100					; size = 4
_y$ = -96						; size = 4
_x$ = -92						; size = 4
_v$ = -88						; size = 4
_u$ = -84						; size = 4
_roll$ = -80						; size = 4
_pitch_bar_scale$ = -76					; size = 4
_tan_mod_pitch$ = -72					; size = 4
_mod_pitch$ = -68					; size = 4
_pitch$ = -64						; size = 4
_vp_size$ = -60						; size = 4
_vsize$ = -56						; size = 4
_size$ = -52						; size = 4
_y_centre$ = -48					; size = 4
_x_centre$ = -44					; size = 4
_y_adjust_below_line$ = -40				; size = 4
_y_adjust_above_line$ = -36				; size = 4
_loop$ = -32						; size = 4
_step_direction$ = -28					; size = 4
_int_pitch$ = -24					; size = 4
_s$ = -20						; size = 20
?draw_pitch_ladder@@YGXXZ PROC				; draw_pitch_ladder, COMDAT

; 5858 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5859 : 	char
; 5860 : 		s[20];
; 5861 : 
; 5862 : 	int
; 5863 : 		int_pitch,
; 5864 : 		step_direction,
; 5865 : 		loop;
; 5866 : 
; 5867 : 	float
; 5868 : 		y_adjust_above_line,
; 5869 : 		y_adjust_below_line,
; 5870 : 		x_centre,
; 5871 : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 d0	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 5872 : 		size,
; 5873 : 		vsize,
; 5874 : 		vp_size,
; 5875 : 		pitch,
; 5876 : 		mod_pitch,
; 5877 : 		tan_mod_pitch,
; 5878 : 		pitch_bar_scale,
; 5879 : 		roll,
; 5880 : 		u,
; 5881 : 		v,
; 5882 : 		x,
; 5883 : 		y,
; 5884 : 		left_edge,
; 5885 : 		right_edge,
; 5886 : 		upper_edge,
; 5887 : 		lower_edge,
; 5888 : 		x_scale,
; 5889 : 		y_scale,
; 5890 : 		x_horizon,
; 5891 : 		y_horizon,
; 5892 : 		x_10_deg_step,
; 5893 : 		y_10_deg_step,
; 5894 : 		x_adjust;
; 5895 : 
; 5896 : 	rgb_colour
; 5897 : 		sky_colour,
; 5898 : 		ground_colour;
; 5899 : 
; 5900 : 	if (command_line_colour_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00020	74 3a		 je	 SHORT $LN16@draw_pitch

; 5901 : 	{
; 5902 : 		sky_colour.red = 0;

  00022	c6 85 72 ff ff
	ff 00		 mov	 BYTE PTR _sky_colour$[ebp+2], 0

; 5903 : 		sky_colour.green = 120;

  00029	c6 85 71 ff ff
	ff 78		 mov	 BYTE PTR _sky_colour$[ebp+1], 120 ; 00000078H

; 5904 : 		sky_colour.blue = 200;

  00030	c6 85 70 ff ff
	ff c8		 mov	 BYTE PTR _sky_colour$[ebp], 200 ; 000000c8H

; 5905 : 		sky_colour.alpha = 225;

  00037	c6 85 73 ff ff
	ff e1		 mov	 BYTE PTR _sky_colour$[ebp+3], 225 ; 000000e1H

; 5906 : 
; 5907 : 		ground_colour.red = 220;

  0003e	c6 85 6e ff ff
	ff dc		 mov	 BYTE PTR _ground_colour$[ebp+2], 220 ; 000000dcH

; 5908 : 		ground_colour.green = 180;

  00045	c6 85 6d ff ff
	ff b4		 mov	 BYTE PTR _ground_colour$[ebp+1], 180 ; 000000b4H

; 5909 : 		ground_colour.blue = 100;

  0004c	c6 85 6c ff ff
	ff 64		 mov	 BYTE PTR _ground_colour$[ebp], 100 ; 00000064H

; 5910 : 		ground_colour.alpha = 255;

  00053	c6 85 6f ff ff
	ff ff		 mov	 BYTE PTR _ground_colour$[ebp+3], 255 ; 000000ffH

; 5911 : 	}
; 5912 : 	else

  0005a	eb 28		 jmp	 SHORT $LN17@draw_pitch
$LN16@draw_pitch:

; 5913 : 	{
; 5914 : 		sky_colour = MFD_COLOUR2;

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	c1 e0 00	 shl	 eax, 0
  00064	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0006a	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], ecx

; 5915 : 		ground_colour = MFD_COLOUR5;

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	c1 e0 02	 shl	 eax, 2
  00078	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0007e	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], ecx
$LN17@draw_pitch:

; 5916 : 	}
; 5917 : 
; 5918 : 	if (draw_large_mfd)

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0008b	74 23		 je	 SHORT $LN18@draw_pitch

; 5919 : 	{
; 5920 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  0008d	6a 02		 push	 2
  0008f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5921 : 
; 5922 : 		y_adjust_above_line = -3.0;

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0009c	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 5923 : 		y_adjust_below_line = -3.0;

  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a9	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0

; 5924 : 	}
; 5925 : 	else

  000ae	eb 21		 jmp	 SHORT $LN19@draw_pitch
$LN18@draw_pitch:

; 5926 : 	{
; 5927 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b0	6a 00		 push	 0
  000b2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5928 : 
; 5929 : 		y_adjust_above_line = -3.0;

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000bf	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 5930 : 		y_adjust_below_line = -1.0;

  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000cc	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0
$LN19@draw_pitch:

; 5931 : 	}
; 5932 : 
; 5933 : 	if (draw_main_display)

  000d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  000d8	74 0a		 je	 SHORT $LN20@draw_pitch

; 5934 : 		x_centre = 0.0;

  000da	0f 57 c0	 xorps	 xmm0, xmm0
  000dd	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 5935 : 	else

  000e2	eb 0d		 jmp	 SHORT $LN21@draw_pitch
$LN20@draw_pitch:

; 5936 : 		x_centre = -0.4;

  000e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  000ec	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0
$LN21@draw_pitch:

; 5937 : 
; 5938 : 	size = 0.4;

  000f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000f9	f3 0f 11 45 cc	 movss	 DWORD PTR _size$[ebp], xmm0

; 5939 : 	pitch_bar_scale = 0.6;

  000fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00106	f3 0f 11 45 b4	 movss	 DWORD PTR _pitch_bar_scale$[ebp], xmm0

; 5940 : 
; 5941 : 	vsize = size * 1.5;

  0010b	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00110	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00118	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011c	f3 0f 11 45 c8	 movss	 DWORD PTR _vsize$[ebp], xmm0

; 5942 : 
; 5943 : 	//
; 5944 : 	//
; 5945 : 
; 5946 : 	get_2d_float_screen_coordinates (PITCH_DATUM_X, PITCH_DATUM_Y, &u, &v);

  00121	8d 45 a8	 lea	 eax, DWORD PTR _v$[ebp]
  00124	50		 push	 eax
  00125	8d 4d ac	 lea	 ecx, DWORD PTR _u$[ebp]
  00128	51		 push	 ecx
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5947 : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  00147	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0014e	74 0f		 je	 SHORT $LN43@draw_pitch
  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00155	8b 08		 mov	 ecx, DWORD PTR [eax]
  00157	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  0015d	eb 24		 jmp	 SHORT $LN44@draw_pitch
$LN43@draw_pitch:
  0015f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00165	83 c2 59	 add	 edx, 89			; 00000059H
  00168	52		 push	 edx
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00179	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN44@draw_pitch:
  00183	b9 01 00 00 00	 mov	 ecx, 1
  00188	85 c9		 test	 ecx, ecx
  0018a	74 0c		 je	 SHORT $LN45@draw_pitch
  0018c	c7 85 bc fe ff
	ff 71 00 00 00	 mov	 DWORD PTR tv128[ebp], 113 ; 00000071H
  00196	eb 24		 jmp	 SHORT $LN46@draw_pitch
$LN45@draw_pitch:
  00198	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0019e	83 c2 59	 add	 edx, 89			; 00000059H
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b2	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN46@draw_pitch:
  001bc	6a 71		 push	 113			; 00000071H
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  001c4	51		 push	 ecx
  001c5	69 95 c0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv88[ebp], 700
  001cf	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  001d5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001dc	ff d1		 call	 ecx
  001de	d9 5d b0	 fstp	 DWORD PTR _roll$[ebp]

; 5948 : 
; 5949 : //	set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y - size);
; 5950 : 
; 5951 : 	//
; 5952 : 	// set 2D environment
; 5953 : 	//
; 5954 : 
; 5955 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * size, MFD_WINDOW_Y_MIN * size, MFD_WINDOW_X_MAX * size, MFD_WINDOW_Y_MAX * size);

  001e1	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001e6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f2	51		 push	 ecx
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001fd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00205	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00209	51		 push	 ecx
  0020a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020f	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00214	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  0021c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00220	51		 push	 ecx
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0022b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00233	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00237	51		 push	 ecx
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5956 : 
; 5957 : 	vp_size = mfd_viewport_size * size * 0.5;

  00248	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00250	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00255	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00259	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00261	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00265	f3 0f 11 45 c4	 movss	 DWORD PTR _vp_size$[ebp], xmm0

; 5958 : 	set_2d_viewport (mfd_env, u - (vp_size * 1.5), v - vp_size, u + (vp_size * 1.5) - 0.001, v + (2.0 * vp_size) - 0.001);

  0026a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  0026f	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  00274	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  0027c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00280	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00288	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0028c	51		 push	 ecx
  0028d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00292	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  00297	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  0029c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff8000000000000
  002a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  002b0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b4	51		 push	 ecx
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _v$[ebp]
  002bf	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  002c4	51		 push	 ecx
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  002cf	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  002d4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff8000000000000
  002dc	f2 0f 5c c1	 subsd	 xmm0, xmm1
  002e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e4	51		 push	 ecx
  002e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5959 : 
; 5960 : 	upper_edge = 0.5 * size;

  002f5	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002fa	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00302	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00306	f3 0f 11 45 94	 movss	 DWORD PTR _upper_edge$[ebp], xmm0

; 5961 : 	left_edge = -(size * 0.75);

  0030b	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00310	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  00318	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0031f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00323	f3 0f 11 45 9c	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 5962 : 	right_edge = (size * 0.75);

  00328	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0032d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  00335	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00339	f3 0f 11 45 98	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 5963 : 	lower_edge = -size;

  0033e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  00343	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0034a	f3 0f 11 45 90	 movss	 DWORD PTR _lower_edge$[ebp], xmm0

; 5964 : 
; 5965 : //	set_2d_viewport (mfd_env, u + left_edge, v + upper_edge, u + right_edge, v + lower_edge);
; 5966 : 
; 5967 : 
; 5968 : 	//
; 5969 : 	// pitch
; 5970 : 	//
; 5971 : 
; 5972 : 	{
; 5973 : 		float
; 5974 : 			x_horizon_abs,
; 5975 : 			y_horizon_abs,
; 5976 : 			tan_pitch;
; 5977 : 
; 5978 : 		int inverted = (roll < -rad(90)) || (roll > rad(90));

  0034f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00357	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _roll$[ebp]
  0035b	77 1a		 ja	 SHORT $LN47@draw_pitch
  0035d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00362	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00369	77 0c		 ja	 SHORT $LN47@draw_pitch
  0036b	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv224[ebp], 0
  00375	eb 0a		 jmp	 SHORT $LN48@draw_pitch
$LN47@draw_pitch:
  00377	c7 85 c0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv224[ebp], 1
$LN48@draw_pitch:
  00381	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  00387	89 85 5c ff ff
	ff		 mov	 DWORD PTR _inverted$22[ebp], eax

; 5979 : 
; 5980 : 		pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  0038d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00394	74 0f		 je	 SHORT $LN49@draw_pitch
  00396	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0039b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039d	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], ecx
  003a3	eb 24		 jmp	 SHORT $LN50@draw_pitch
$LN49@draw_pitch:
  003a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  003ab	83 c2 7a	 add	 edx, 122		; 0000007aH
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003bf	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv231[ebp], 0
$LN50@draw_pitch:
  003c9	b9 01 00 00 00	 mov	 ecx, 1
  003ce	85 c9		 test	 ecx, ecx
  003d0	74 0c		 je	 SHORT $LN51@draw_pitch
  003d2	c7 85 bc fe ff
	ff 54 00 00 00	 mov	 DWORD PTR tv239[ebp], 84 ; 00000054H
  003dc	eb 24		 jmp	 SHORT $LN52@draw_pitch
$LN51@draw_pitch:
  003de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  003e4	83 c2 7a	 add	 edx, 122		; 0000007aH
  003e7	52		 push	 edx
  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f8	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv239[ebp], 0
$LN52@draw_pitch:
  00402	6a 54		 push	 84			; 00000054H
  00404	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0040a	51		 push	 ecx
  0040b	69 95 c0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv231[ebp], 700
  00415	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv239[ebp]
  0041b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00422	ff d1		 call	 ecx
  00424	d9 5d c0	 fstp	 DWORD PTR _pitch$[ebp]

; 5981 : 		tan_pitch = -tan(pitch);

  00427	51		 push	 ecx
  00428	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00437	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1202[ebp]
  0043d	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1202[ebp]
  00445	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0044c	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tan_pitch$23[ebp], xmm0

; 5982 : 		mod_pitch = fmod (pitch, rad (10.0f));

  00454	51		 push	 ecx
  00455	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	51		 push	 ecx
  00463	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00468	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046d	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00472	d9 5d bc	 fstp	 DWORD PTR _mod_pitch$[ebp]

; 5983 : 		tan_mod_pitch = -tan (mod_pitch);

  00475	51		 push	 ecx
  00476	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _mod_pitch$[ebp]
  0047b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00480	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00485	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1214[ebp]
  0048b	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1214[ebp]
  00493	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0049a	f3 0f 11 45 b8	 movss	 DWORD PTR _tan_mod_pitch$[ebp], xmm0

; 5984 : 		int_pitch = (int) (pitch * (1.0 / rad (10.0)));

  0049f	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  004a4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4016eb167e7d81e3
  004ac	f2 0f 2c c0	 cvttsd2si eax, xmm0
  004b0	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 5985 : 
; 5986 : 		//
; 5987 : 		// get x and y scale factors
; 5988 : 		//
; 5989 : 
; 5990 : 		x_scale = -sin (roll) * 1.5 * pitch_bar_scale;

  004b3	51		 push	 ecx
  004b4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004be	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  004c3	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1220[ebp]
  004c9	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1220[ebp]
  004d1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004d8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004dc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  004e4	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  004e9	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004ed	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004f1	f3 0f 11 45 8c	 movss	 DWORD PTR _x_scale$[ebp], xmm0

; 5991 : 		y_scale = cos (roll) * 1.5 * pitch_bar_scale;

  004f6	51		 push	 ecx
  004f7	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00501	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00506	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1227[ebp]
  0050c	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1227[ebp]
  00514	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0051c	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  00521	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00525	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00529	f3 0f 11 45 88	 movss	 DWORD PTR _y_scale$[ebp], xmm0

; 5992 : 
; 5993 : 		x_horizon = tan_mod_pitch * x_scale;

  0052e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  00533	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  00538	f3 0f 11 45 84	 movss	 DWORD PTR _x_horizon$[ebp], xmm0

; 5994 : 		y_horizon = tan_mod_pitch * y_scale;

  0053d	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  00542	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  00547	f3 0f 11 45 80	 movss	 DWORD PTR _y_horizon$[ebp], xmm0

; 5995 : 
; 5996 : 		x_10_deg_step = tan (rad (10.0)) * x_scale;

  0054c	83 ec 08	 sub	 esp, 8
  0054f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00557	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0055c	e8 00 00 00 00	 call	 _tan
  00561	83 c4 08	 add	 esp, 8
  00564	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1235[ebp]
  0056a	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1235[ebp]
  00572	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _x_scale$[ebp]
  00577	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0057b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0057f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_10_deg_step$[ebp], xmm0

; 5997 : 		y_10_deg_step = tan (rad (10.0)) * y_scale;

  00587	83 ec 08	 sub	 esp, 8
  0058a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00592	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00597	e8 00 00 00 00	 call	 _tan
  0059c	83 c4 08	 add	 esp, 8
  0059f	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1241[ebp]
  005a5	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1241[ebp]
  005ad	f3 0f 5a 4d 88	 cvtss2sd xmm1, DWORD PTR _y_scale$[ebp]
  005b2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005ba	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _y_10_deg_step$[ebp], xmm0

; 5998 : 
; 5999 : 		x_horizon_abs = tan_pitch * x_scale;

  005c2	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$23[ebp]
  005ca	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  005cf	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _x_horizon_abs$25[ebp], xmm0

; 6000 : 		y_horizon_abs = tan_pitch * y_scale;

  005d7	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$23[ebp]
  005df	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  005e4	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _y_horizon_abs$24[ebp], xmm0

; 6001 : 
; 6002 : 		// draw horizon
; 6003 : 		set_2d_pixel(x_horizon_abs, y_horizon_abs, MFD_COLOUR1);

  005ec	b8 04 00 00 00	 mov	 eax, 4
  005f1	6b c8 00	 imul	 ecx, eax, 0
  005f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fa	52		 push	 edx
  005fb	51		 push	 ecx
  005fc	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  00604	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00609	51		 push	 ecx
  0060a	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel

; 6004 : 		if (roll != -rad(90) && roll != rad(90))

  0061c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00621	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@bfc90fdb
  00628	9f		 lahf
  00629	f6 c4 44	 test	 ah, 68			; 00000044H
  0062c	0f 8b 58 03 00
	00		 jnp	 $LN22@draw_pitch
  00632	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00637	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  0063e	9f		 lahf
  0063f	f6 c4 44	 test	 ah, 68			; 00000044H
  00642	0f 8b 42 03 00
	00		 jnp	 $LN22@draw_pitch

; 6005 : 		{
; 6006 : 			float incline = tan(roll);

  00648	51		 push	 ecx
  00649	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0064e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00653	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00658	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR _incline$21[ebp]

; 6007 : 			float left_y, right_y;
; 6008 : 			float start_x = -1.0, end_x = 1.0;

  0065e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00666	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _start_x$18[ebp], xmm0
  0066e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00676	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _end_x$17[ebp], xmm0

; 6009 : 
; 6010 : 			left_y = (x_horizon_abs - left_edge) * -incline;

  0067e	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00686	f3 0f 5c 45 9c	 subss	 xmm0, DWORD PTR _left_edge$[ebp]
  0068b	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _incline$21[ebp]
  00693	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0069a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0069e	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _left_y$20[ebp], xmm0

; 6011 : 			right_y = (right_edge - x_horizon_abs) * incline;

  006a6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  006ab	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  006b3	f3 0f 59 85 58
	ff ff ff	 mulss	 xmm0, DWORD PTR _incline$21[ebp]
  006bb	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _right_y$19[ebp], xmm0

; 6012 : 
; 6013 : 			if (incline < 0.0)

  006c3	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _incline$21[ebp]
  006cb	0f 57 c9	 xorps	 xmm1, xmm1
  006ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  006d2	76 50		 jbe	 SHORT $LN24@draw_pitch

; 6014 : 			{
; 6015 : 				// find where horizon intersects top and bottom
; 6016 : 				start_x = x_horizon_abs + ((1 - y_horizon_abs) / incline);

  006d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006dc	f3 0f 5c 85 64
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  006e4	f3 0f 5e 85 58
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$21[ebp]
  006ec	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  006f4	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _start_x$18[ebp], xmm0

; 6017 : 				end_x = x_horizon_abs + ((-2 - y_horizon_abs) / incline);

  006fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00704	f3 0f 5c 85 64
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  0070c	f3 0f 5e 85 58
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$21[ebp]
  00714	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  0071c	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _end_x$17[ebp], xmm0
$LN24@draw_pitch:

; 6018 : 			}
; 6019 : 
; 6020 : 			draw_2d_line(left_edge, left_y, right_edge, right_y, sys_col_red);

  00724	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00729	50		 push	 eax
  0072a	51		 push	 ecx
  0072b	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  0073e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00743	51		 push	 ecx
  00744	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0074c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00751	51		 push	 ecx
  00752	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _left_edge$[ebp]
  00757	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6021 : 
; 6022 : 			left_y = y_horizon_abs + (1.0 + x_horizon_abs) * -incline;

  00761	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  00769	f3 0f 5a 8d 68
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$25[ebp]
  00771	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00779	f3 0f 10 95 58
	ff ff ff	 movss	 xmm2, DWORD PTR _incline$21[ebp]
  00781	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00788	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  0078c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00790	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00794	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00798	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _left_y$20[ebp], xmm0

; 6023 : 			right_y = y_horizon_abs + (1.0 - x_horizon_abs) * incline;

  007a0	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  007a8	f3 0f 5a 8d 68
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$25[ebp]
  007b0	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  007b8	f2 0f 5c d1	 subsd	 xmm2, xmm1
  007bc	f3 0f 5a 8d 58
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _incline$21[ebp]
  007c4	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  007c8	f2 0f 58 c2	 addsd	 xmm0, xmm2
  007cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d0	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _right_y$19[ebp], xmm0

; 6024 : 
; 6025 : 			if (inverted)

  007d8	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR _inverted$22[ebp], 0
  007df	74 24		 je	 SHORT $LN25@draw_pitch

; 6026 : 			{
; 6027 : 				rgb_colour tmp = sky_colour;

  007e1	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  007e7	89 85 44 ff ff
	ff		 mov	 DWORD PTR _tmp$16[ebp], eax

; 6028 : 				sky_colour = ground_colour;

  007ed	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  007f3	89 85 70 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], eax

; 6029 : 				ground_colour = tmp;

  007f9	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _tmp$16[ebp]
  007ff	89 85 6c ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], eax
$LN25@draw_pitch:

; 6030 : 			}
; 6031 : 
; 6032 : 			draw_2d_filled_triangle(-1.0, left_y, -1.0, 1.0, 1.0, right_y, sky_colour);

  00805	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  0080b	50		 push	 eax
  0080c	51		 push	 ecx
  0080d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	51		 push	 ecx
  0081b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	51		 push	 ecx
  00829	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00831	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00836	51		 push	 ecx
  00837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0083f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00844	51		 push	 ecx
  00845	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0084d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00852	51		 push	 ecx
  00853	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0085b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00860	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6033 : 			draw_2d_filled_triangle(start_x, 1.0, 1.0, 1.0, 1.0, right_y, sky_colour);

  00865	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  0086b	50		 push	 eax
  0086c	51		 push	 ecx
  0086d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	51		 push	 ecx
  0087b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	51		 push	 ecx
  00889	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00896	51		 push	 ecx
  00897	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	51		 push	 ecx
  008a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	51		 push	 ecx
  008b3	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _start_x$18[ebp]
  008bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c0	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6034 : 
; 6035 : 			draw_2d_filled_triangle(-1.0, left_y, end_x, -2.0, -1.0, -2.0, ground_colour);

  008c5	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  008cb	50		 push	 eax
  008cc	51		 push	 ecx
  008cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008da	51		 push	 ecx
  008db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	51		 push	 ecx
  008f7	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _end_x$17[ebp]
  008ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00904	51		 push	 ecx
  00905	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	51		 push	 ecx
  00913	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6036 : 			draw_2d_filled_triangle(-1.0, left_y, 1.0, right_y, 1.0, -2.0, ground_colour);

  00925	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  0092b	50		 push	 eax
  0092c	51		 push	 ecx
  0092d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093a	51		 push	 ecx
  0093b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00943	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00948	51		 push	 ecx
  00949	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00951	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00956	51		 push	 ecx
  00957	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0095f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00964	51		 push	 ecx
  00965	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0096d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00972	51		 push	 ecx
  00973	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0097b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00980	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6037 : 		}
; 6038 : 		else  // 90 degree bank

  00985	e9 cc 01 00 00	 jmp	 $LN23@draw_pitch
$LN22@draw_pitch:

; 6039 : 		{
; 6040 : 			rgb_colour
; 6041 : 				*left_colour,
; 6042 : 				*right_colour;
; 6043 : 
; 6044 : 			if (roll == rad(90))

  0098a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0098f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  00996	9f		 lahf
  00997	f6 c4 44	 test	 ah, 68			; 00000044H
  0099a	7a 1a		 jp	 SHORT $LN26@draw_pitch

; 6045 : 			{
; 6046 : 				left_colour = &ground_colour;

  0099c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  009a2	89 85 40 ff ff
	ff		 mov	 DWORD PTR _left_colour$15[ebp], eax

; 6047 : 				right_colour = &sky_colour;

  009a8	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  009ae	89 85 3c ff ff
	ff		 mov	 DWORD PTR _right_colour$14[ebp], eax

; 6048 : 			}
; 6049 : 			else

  009b4	eb 18		 jmp	 SHORT $LN27@draw_pitch
$LN26@draw_pitch:

; 6050 : 			{
; 6051 : 				left_colour = &sky_colour;

  009b6	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  009bc	89 85 40 ff ff
	ff		 mov	 DWORD PTR _left_colour$15[ebp], eax

; 6052 : 				right_colour = &ground_colour;

  009c2	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  009c8	89 85 3c ff ff
	ff		 mov	 DWORD PTR _right_colour$14[ebp], eax
$LN27@draw_pitch:

; 6053 : 			}
; 6054 : 
; 6055 : 			draw_2d_filled_triangle(x_horizon_abs, 1.0, 1.0, 1.0, 1.0, -1.0, *right_colour);

  009ce	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$14[ebp]
  009d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  009d6	51		 push	 ecx
  009d7	51		 push	 ecx
  009d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e5	51		 push	 ecx
  009e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f3	51		 push	 ecx
  009f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a01	51		 push	 ecx
  00a02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0f	51		 push	 ecx
  00a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1d	51		 push	 ecx
  00a1e	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2b	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6056 : 			draw_2d_filled_triangle(1.0, -1.0, x_horizon_abs, -1.0, x_horizon_abs, 1.0, *right_colour);

  00a30	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$14[ebp]
  00a36	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a38	51		 push	 ecx
  00a39	51		 push	 ecx
  00a3a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a47	51		 push	 ecx
  00a48	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a55	51		 push	 ecx
  00a56	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a63	51		 push	 ecx
  00a64	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a71	51		 push	 ecx
  00a72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8d	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6057 : 
; 6058 : 			draw_2d_filled_triangle(-1.0, 1.0, x_horizon_abs, 1.0, x_horizon_abs, -1.0, *left_colour);

  00a92	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$15[ebp]
  00a98	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a9a	51		 push	 ecx
  00a9b	51		 push	 ecx
  00a9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa9	51		 push	 ecx
  00aaa	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab7	51		 push	 ecx
  00ab8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ac0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac5	51		 push	 ecx
  00ac6	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad3	51		 push	 ecx
  00ad4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00adc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae1	51		 push	 ecx
  00ae2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aef	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 6059 : 			draw_2d_filled_triangle(x_horizon_abs, -1.0, -1.0, -1.0, -1.0, 1.0, *left_colour);

  00af4	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$15[ebp]
  00afa	8b 08		 mov	 ecx, DWORD PTR [eax]
  00afc	51		 push	 ecx
  00afd	51		 push	 ecx
  00afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0b	51		 push	 ecx
  00b0c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b19	51		 push	 ecx
  00b1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b27	51		 push	 ecx
  00b28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b35	51		 push	 ecx
  00b36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b43	51		 push	 ecx
  00b44	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00b4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b51	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN23@draw_pitch:

; 6060 : 		}
; 6061 : 
; 6062 : 		////////////////////////////////////////
; 6063 : 		//
; 6064 : 		// draw pitch ladder
; 6065 : 		//
; 6066 : 		////////////////////////////////////////
; 6067 : 
; 6068 : 		step_direction = -1;

  00b56	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _step_direction$[ebp], -1

; 6069 : 
; 6070 : 		int_pitch = limit_pitch (int_pitch + 3, &step_direction);

  00b5d	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00b60	50		 push	 eax
  00b61	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00b64	83 c1 03	 add	 ecx, 3
  00b67	51		 push	 ecx
  00b68	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00b6d	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 6071 : 
; 6072 : 		x = x_horizon + x_10_deg_step * 3.0;

  00b70	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _x_horizon$[ebp]
  00b75	f3 0f 5a 8d 7c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_10_deg_step$[ebp]
  00b7d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b85	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b89	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b8d	f3 0f 11 45 a4	 movss	 DWORD PTR _x$[ebp], xmm0

; 6073 : 		y = y_horizon + y_10_deg_step * 3.0;

  00b92	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _y_horizon$[ebp]
  00b97	f3 0f 5a 8d 78
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _y_10_deg_step$[ebp]
  00b9f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00ba7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00bab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00baf	f3 0f 11 45 a0	 movss	 DWORD PTR _y$[ebp], xmm0

; 6074 : 
; 6075 : 		set_2d_instance_rotation (mfd_env, roll);

  00bb4	51		 push	 ecx
  00bb5	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00bc4	50		 push	 eax
  00bc5	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6076 : 
; 6077 : 		for (loop = 0; loop < 7; loop++)

  00bca	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00bd1	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  00bd3	8b 45 e0	 mov	 eax, DWORD PTR _loop$[ebp]
  00bd6	83 c0 01	 add	 eax, 1
  00bd9	89 45 e0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  00bdc	83 7d e0 07	 cmp	 DWORD PTR _loop$[ebp], 7
  00be0	0f 8d 2b 05 00
	00		 jge	 $LN3@draw_pitch

; 6078 : 		{
; 6079 : 			set_2d_instance_position (mfd_env, x, y);

  00be6	51		 push	 ecx
  00be7	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00bec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf1	51		 push	 ecx
  00bf2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00bf7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c01	50		 push	 eax
  00c02	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 6080 : 
; 6081 : 			switch (int_pitch)

  00c07	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00c0a	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv408[ebp], eax
  00c10	83 bd c0 fe ff
	ff f7		 cmp	 DWORD PTR tv408[ebp], -9 ; fffffff7H
  00c17	0f 84 8a 02 00
	00		 je	 $LN31@draw_pitch
  00c1d	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv408[ebp], 0
  00c24	74 0f		 je	 SHORT $LN28@draw_pitch
  00c26	83 bd c0 fe ff
	ff 09		 cmp	 DWORD PTR tv408[ebp], 9
  00c2d	0f 84 b5 01 00
	00		 je	 $LN30@draw_pitch
  00c33	eb 69		 jmp	 SHORT $LN29@draw_pitch
$LN28@draw_pitch:

; 6082 : 			{
; 6083 : 				////////////////////////////////////////
; 6084 : 				case 0:
; 6085 : 				////////////////////////////////////////
; 6086 : 				{
; 6087 : 					draw_2d_line (-PITCH_BAR_X3, PITCH_BAR_Y3, PITCH_BAR_X3, -PITCH_BAR_Y3, MFD_COLOUR1);

  00c35	b8 04 00 00 00	 mov	 eax, 4
  00c3a	6b c8 00	 imul	 ecx, eax, 0
  00c3d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c43	52		 push	 edx
  00c44	0f 57 c0	 xorps	 xmm0, xmm0
  00c47	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c4c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c53	51		 push	 ecx
  00c54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c61	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c66	51		 push	 ecx
  00c67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6c	0f 57 c0	 xorps	 xmm0, xmm0
  00c6f	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c74	51		 push	 ecx
  00c75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c82	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c87	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c8e	51		 push	 ecx
  00c8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c94	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6088 : 
; 6089 : 					break;

  00c99	e9 37 04 00 00	 jmp	 $LN5@draw_pitch
$LN29@draw_pitch:

; 6090 : 				}
; 6091 : 				////////////////////////////////////////
; 6092 : 				default:
; 6093 : 				////////////////////////////////////////
; 6094 : 				{
; 6095 : 					draw_2d_line (-PITCH_BAR_X3, PITCH_BAR_Y3, PITCH_BAR_X3, -PITCH_BAR_Y3, MFD_COLOUR1);

  00c9e	b8 04 00 00 00	 mov	 eax, 4
  00ca3	6b c8 00	 imul	 ecx, eax, 0
  00ca6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cac	52		 push	 edx
  00cad	0f 57 c0	 xorps	 xmm0, xmm0
  00cb0	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cb5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cbc	51		 push	 ecx
  00cbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00cca	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ccf	51		 push	 ecx
  00cd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd5	0f 57 c0	 xorps	 xmm0, xmm0
  00cd8	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cdd	51		 push	 ecx
  00cde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00ceb	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cf0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cf7	51		 push	 ecx
  00cf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6096 : 
; 6097 : 					sprintf (s, "%d0", int_pitch);

  00d02	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00d05	50		 push	 eax
  00d06	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  00d0b	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00d0e	51		 push	 ecx
  00d0f	e8 00 00 00 00	 call	 _sprintf
  00d14	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6098 : 					x_adjust = get_mono_font_string_width (s) * -0.5;

  00d17	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00d1a	50		 push	 eax
  00d1b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d20	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1440[ebp]
  00d26	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1440[ebp]
  00d2e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00d36	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d3a	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6099 : 
; 6100 : 					set_2d_mono_font_position (+PITCH_BAR_X4, +PITCH_BAR_Y4);

  00d42	0f 57 c0	 xorps	 xmm0, xmm0
  00d45	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d4a	51		 push	 ecx
  00d4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00d58	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d5d	51		 push	 ecx
  00d5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d63	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6101 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00d68	51		 push	 ecx
  00d69	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00d6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d73	51		 push	 ecx
  00d74	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00d7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d81	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6102 : 					print_mono_font_string (s);

  00d86	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00d89	50		 push	 eax
  00d8a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6103 : 
; 6104 : 					set_2d_mono_font_position (-PITCH_BAR_X4, +PITCH_BAR_Y4);

  00d8f	0f 57 c0	 xorps	 xmm0, xmm0
  00d92	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d97	51		 push	 ecx
  00d98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00da5	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00daa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00db1	51		 push	 ecx
  00db2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6105 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00dbc	51		 push	 ecx
  00dbd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00dc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc7	51		 push	 ecx
  00dc8	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00dd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6106 : 					print_mono_font_string (s);

  00dda	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00ddd	50		 push	 eax
  00dde	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6107 : 
; 6108 : 					break;

  00de3	e9 ed 02 00 00	 jmp	 $LN5@draw_pitch
$LN30@draw_pitch:

; 6109 : 				}
; 6110 : 				////////////////////////////////////////
; 6111 : 				case 9:
; 6112 : 				////////////////////////////////////////
; 6113 : 				{
; 6114 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  00de8	b8 04 00 00 00	 mov	 eax, 4
  00ded	6b c8 00	 imul	 ecx, eax, 0
  00df0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00df6	52		 push	 edx
  00df7	0f 57 c0	 xorps	 xmm0, xmm0
  00dfa	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00dff	51		 push	 ecx
  00e00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00e0d	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e12	51		 push	 ecx
  00e13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e18	0f 57 c0	 xorps	 xmm0, xmm0
  00e1b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e20	51		 push	 ecx
  00e21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00e2e	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e33	51		 push	 ecx
  00e34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e39	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6115 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  00e3e	b8 04 00 00 00	 mov	 eax, 4
  00e43	6b c8 00	 imul	 ecx, eax, 0
  00e46	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e4c	52		 push	 edx
  00e4d	0f 57 c0	 xorps	 xmm0, xmm0
  00e50	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e55	51		 push	 ecx
  00e56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00e63	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e68	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e6f	51		 push	 ecx
  00e70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e75	0f 57 c0	 xorps	 xmm0, xmm0
  00e78	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e7d	51		 push	 ecx
  00e7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00e8b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e90	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e97	51		 push	 ecx
  00e98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6116 : 
; 6117 : 					break;

  00ea2	e9 2e 02 00 00	 jmp	 $LN5@draw_pitch
$LN31@draw_pitch:

; 6118 : 				}
; 6119 : 				////////////////////////////////////////
; 6120 : 				case -9:
; 6121 : 				////////////////////////////////////////
; 6122 : 				{
; 6123 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR1);

  00ea7	b8 04 00 00 00	 mov	 eax, 4
  00eac	6b c8 00	 imul	 ecx, eax, 0
  00eaf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00eb5	52		 push	 edx
  00eb6	0f 57 c0	 xorps	 xmm0, xmm0
  00eb9	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ebe	51		 push	 ecx
  00ebf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  00ecc	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ed1	51		 push	 ecx
  00ed2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed7	0f 57 c0	 xorps	 xmm0, xmm0
  00eda	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00edf	51		 push	 ecx
  00ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00eed	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ef2	51		 push	 ecx
  00ef3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6124 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR1);

  00efd	b8 04 00 00 00	 mov	 eax, 4
  00f02	6b c8 00	 imul	 ecx, eax, 0
  00f05	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f0b	52		 push	 edx
  00f0c	0f 57 c0	 xorps	 xmm0, xmm0
  00f0f	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f14	51		 push	 ecx
  00f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  00f22	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f27	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f2e	51		 push	 ecx
  00f2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f34	0f 57 c0	 xorps	 xmm0, xmm0
  00f37	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f3c	51		 push	 ecx
  00f3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00f4a	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f4f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f56	51		 push	 ecx
  00f57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6125 : 
; 6126 : 					draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR1);

  00f61	b8 04 00 00 00	 mov	 eax, 4
  00f66	6b c8 00	 imul	 ecx, eax, 0
  00f69	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f6f	52		 push	 edx
  00f70	0f 57 c0	 xorps	 xmm0, xmm0
  00f73	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f78	51		 push	 ecx
  00f79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00f86	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f8b	51		 push	 ecx
  00f8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f91	0f 57 c0	 xorps	 xmm0, xmm0
  00f94	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f99	51		 push	 ecx
  00f9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00fa7	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fac	51		 push	 ecx
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6127 : 					draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR1);

  00fb7	b8 04 00 00 00	 mov	 eax, 4
  00fbc	6b c8 00	 imul	 ecx, eax, 0
  00fbf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fc5	52		 push	 edx
  00fc6	0f 57 c0	 xorps	 xmm0, xmm0
  00fc9	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fce	51		 push	 ecx
  00fcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00fdc	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fe1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00fe8	51		 push	 ecx
  00fe9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fee	0f 57 c0	 xorps	 xmm0, xmm0
  00ff1	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ff6	51		 push	 ecx
  00ff7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01004	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01009	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01010	51		 push	 ecx
  01011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01016	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6128 : 
; 6129 : 					draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  0101b	b8 04 00 00 00	 mov	 eax, 4
  01020	6b c8 00	 imul	 ecx, eax, 0
  01023	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01029	52		 push	 edx
  0102a	0f 57 c0	 xorps	 xmm0, xmm0
  0102d	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01032	51		 push	 ecx
  01033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01040	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01045	51		 push	 ecx
  01046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104b	0f 57 c0	 xorps	 xmm0, xmm0
  0104e	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01053	51		 push	 ecx
  01054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01059	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e87ae14
  01061	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01066	51		 push	 ecx
  01067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6130 : 					draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  01071	b8 04 00 00 00	 mov	 eax, 4
  01076	6b c8 00	 imul	 ecx, eax, 0
  01079	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0107f	52		 push	 edx
  01080	0f 57 c0	 xorps	 xmm0, xmm0
  01083	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01088	51		 push	 ecx
  01089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01096	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0109b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010a2	51		 push	 ecx
  010a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a8	0f 57 c0	 xorps	 xmm0, xmm0
  010ab	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010b0	51		 push	 ecx
  010b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e87ae14
  010be	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010c3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010ca	51		 push	 ecx
  010cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN5@draw_pitch:

; 6131 : 
; 6132 : 					break;
; 6133 : 				}
; 6134 : 			}
; 6135 : 
; 6136 : 			int_pitch = limit_pitch (int_pitch + step_direction, &step_direction);

  010d5	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  010d8	50		 push	 eax
  010d9	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  010dc	03 4d e4	 add	 ecx, DWORD PTR _step_direction$[ebp]
  010df	51		 push	 ecx
  010e0	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  010e5	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 6137 : 
; 6138 : 			x -= x_10_deg_step;

  010e8	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _x$[ebp]
  010ed	f3 0f 5c 85 7c
	ff ff ff	 subss	 xmm0, DWORD PTR _x_10_deg_step$[ebp]
  010f5	f3 0f 11 45 a4	 movss	 DWORD PTR _x$[ebp], xmm0

; 6139 : 			y -= y_10_deg_step;

  010fa	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y$[ebp]
  010ff	f3 0f 5c 85 78
	ff ff ff	 subss	 xmm0, DWORD PTR _y_10_deg_step$[ebp]
  01107	f3 0f 11 45 a0	 movss	 DWORD PTR _y$[ebp], xmm0

; 6140 : 		}

  0110c	e9 c2 fa ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 6141 : 	}
; 6142 : 
; 6143 : 	//
; 6144 : 	// restore 2D environment
; 6145 : 	//
; 6146 : 
; 6147 : 	reset_2d_instance (mfd_env);

  01111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01116	50		 push	 eax
  01117	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 6148 : 
; 6149 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0111c	51		 push	 ecx
  0111d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0112a	51		 push	 ecx
  0112b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01138	51		 push	 ecx
  01139	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01146	51		 push	 ecx
  01147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0114f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01159	50		 push	 eax
  0115a	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 6150 : 
; 6151 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0115f	51		 push	 ecx
  01160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0116d	51		 push	 ecx
  0116e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117b	51		 push	 ecx
  0117c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01189	51		 push	 ecx
  0118a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0119c	50		 push	 eax
  0119d	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6152 : 
; 6153 : 	if (draw_main_display)

  011a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  011a9	74 35		 je	 SHORT $LN32@draw_pitch

; 6154 : 		draw_2d_mono_sprite (main_horizon_mask, x_centre, 0.41 + PITCH_DATUM_Y, MFD_BACKGROUND_COLOUR);

  011ab	b8 04 00 00 00	 mov	 eax, 4
  011b0	6b c8 09	 imul	 ecx, eax, 9
  011b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011b9	52		 push	 edx
  011ba	51		 push	 ecx
  011bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1c28f6
  011c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c8	51		 push	 ecx
  011c9	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  011ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_horizon_mask@@3PADA
  011d8	50		 push	 eax
  011d9	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6155 : 	else

  011de	eb 23		 jmp	 SHORT $LN34@draw_pitch
$LN32@draw_pitch:

; 6156 : 	{
; 6157 : 		ASSERT(FALSE);

  011e0	b8 01 00 00 00	 mov	 eax, 1
  011e5	85 c0		 test	 eax, eax
  011e7	74 1a		 je	 SHORT $LN34@draw_pitch
  011e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  011ee	05 2b 01 00 00	 add	 eax, 299		; 0000012bH
  011f3	50		 push	 eax
  011f4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  011f9	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  011fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN34@draw_pitch:

; 6158 : 	}
; 6159 : 
; 6160 : 	// pitch scale
; 6161 : 	if (draw_main_display)

  01203	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  0120a	0f 84 76 07 00
	00		 je	 $LN35@draw_pitch

; 6162 : 	{
; 6163 : 		float
; 6164 : 			current_y,
; 6165 : 			y_fine_height = 0.24,    // -10 to 10 degrees

  01210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  01218	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y_fine_height$12[ebp], xmm0

; 6166 : 			y_coarse_height = 0.12,  // above 10 and below 10

  01220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01228	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_coarse_height$11[ebp], xmm0

; 6167 : 			y_fine_step = y_fine_height / 4,

  01230	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y_fine_height$12[ebp]
  01238	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40800000
  01240	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _y_fine_step$10[ebp], xmm0

; 6168 : 			y_coarse_step = y_coarse_height / 2,

  01248	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_coarse_height$11[ebp]
  01250	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  01258	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_coarse_step$9[ebp], xmm0

; 6169 : 			x_end = -0.41,

  01260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed1eb85
  01268	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _x_end$8[ebp], xmm0

; 6170 : 			x_half_tick = x_end - 0.02,

  01270	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x_end$8[ebp]
  01278	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  01280	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01284	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_half_tick$7[ebp], xmm0

; 6171 : 			x_tick = x_end - 0.04;

  0128c	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x_end$8[ebp]
  01294	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  0129c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012a0	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _x_tick$6[ebp], xmm0

; 6172 : 
; 6173 : 		int i;
; 6174 : 
; 6175 : 		float x_adjust, y_adjust;
; 6176 : 		char buffer[8];
; 6177 : 
; 6178 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  012a8	6a 01		 push	 1
  012aa	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6179 : 		y_adjust = -2.0;

  012af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  012b7	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _y_adjust$3[ebp], xmm0

; 6180 : 
; 6181 : 		current_y = y_centre + y_coarse_height + y_fine_height + y_coarse_step;

  012bf	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  012c4	f3 0f 58 85 30
	ff ff ff	 addss	 xmm0, DWORD PTR _y_coarse_height$11[ebp]
  012cc	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y_fine_height$12[ebp]
  012d4	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  012dc	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 6182 : 		for (i = 3; i >= 1; i--)

  012e4	c7 85 18 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR _i$5[ebp], 3
  012ee	eb 0f		 jmp	 SHORT $LN9@draw_pitch
$LN7@draw_pitch:
  012f0	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  012f6	83 e8 01	 sub	 eax, 1
  012f9	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN9@draw_pitch:
  012ff	83 bd 18 ff ff
	ff 01		 cmp	 DWORD PTR _i$5[ebp], 1
  01306	0f 8c 03 01 00
	00		 jl	 $LN8@draw_pitch

; 6183 : 		{
; 6184 : 			current_y -= y_coarse_step;

  0130c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01314	f3 0f 5c 85 28
	ff ff ff	 subss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  0131c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 6185 : 			draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  01324	b8 04 00 00 00	 mov	 eax, 4
  01329	6b c8 00	 imul	 ecx, eax, 0
  0132c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01332	52		 push	 edx
  01333	51		 push	 ecx
  01334	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0133c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01341	51		 push	 ecx
  01342	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  0134a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134f	51		 push	 ecx
  01350	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135d	51		 push	 ecx
  0135e	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6186 : 
; 6187 : 			sprintf(buffer, "%d", i);

  01370	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01376	50		 push	 eax
  01377	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0137c	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$2[ebp]
  01382	51		 push	 ecx
  01383	e8 00 00 00 00	 call	 _sprintf
  01388	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6188 : 			x_adjust = get_mono_font_string_width(buffer) + 1;

  0138b	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01391	50		 push	 eax
  01392	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01397	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1597[ebp]
  0139d	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1597[ebp]
  013a5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  013ad	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 6189 : 
; 6190 : 			set_2d_mono_font_position (x_tick, current_y);

  013b5	51		 push	 ecx
  013b6	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  013be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c3	51		 push	 ecx
  013c4	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  013cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6191 : 			set_mono_font_rel_position (-x_adjust, y_adjust);

  013d6	51		 push	 ecx
  013d7	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  013df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e4	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  013ec	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013f3	51		 push	 ecx
  013f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6192 : 			print_mono_font_string(buffer);

  013fe	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01404	50		 push	 eax
  01405	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6193 : 		}

  0140a	e9 e1 fe ff ff	 jmp	 $LN7@draw_pitch
$LN8@draw_pitch:

; 6194 : 
; 6195 : 		for (i = 0; i < 7; i++)

  0140f	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$5[ebp], 0
  01419	eb 0f		 jmp	 SHORT $LN12@draw_pitch
$LN10@draw_pitch:
  0141b	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01421	83 c0 01	 add	 eax, 1
  01424	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN12@draw_pitch:
  0142a	83 bd 18 ff ff
	ff 07		 cmp	 DWORD PTR _i$5[ebp], 7
  01431	0f 8d cd 00 00
	00		 jge	 $LN11@draw_pitch

; 6196 : 		{
; 6197 : 			current_y -= y_fine_step;

  01437	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0143f	f3 0f 5c 85 2c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_fine_step$10[ebp]
  01447	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 6198 : 			if ((i % 2) != 0)

  0144f	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01455	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0145a	79 05		 jns	 SHORT $LN69@draw_pitch
  0145c	48		 dec	 eax
  0145d	83 c8 fe	 or	 eax, -2			; fffffffeH
  01460	40		 inc	 eax
$LN69@draw_pitch:
  01461	85 c0		 test	 eax, eax
  01463	74 4e		 je	 SHORT $LN36@draw_pitch

; 6199 : 				draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  01465	b8 04 00 00 00	 mov	 eax, 4
  0146a	6b c8 00	 imul	 ecx, eax, 0
  0146d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01473	52		 push	 edx
  01474	51		 push	 ecx
  01475	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0147d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01482	51		 push	 ecx
  01483	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  0148b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01490	51		 push	 ecx
  01491	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01499	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0149e	51		 push	 ecx
  0149f	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  014a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ac	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6200 : 			else

  014b1	eb 4c		 jmp	 SHORT $LN37@draw_pitch
$LN36@draw_pitch:

; 6201 : 				draw_2d_line(x_half_tick, current_y, x_end, current_y, MFD_COLOUR1);

  014b3	b8 04 00 00 00	 mov	 eax, 4
  014b8	6b c8 00	 imul	 ecx, eax, 0
  014bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014c1	52		 push	 edx
  014c2	51		 push	 ecx
  014c3	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  014cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d0	51		 push	 ecx
  014d1	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  014d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014de	51		 push	 ecx
  014df	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  014e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ec	51		 push	 ecx
  014ed	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_half_tick$7[ebp]
  014f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN37@draw_pitch:

; 6202 : 		}

  014ff	e9 17 ff ff ff	 jmp	 $LN10@draw_pitch
$LN11@draw_pitch:

; 6203 : 
; 6204 : 		sprintf(buffer, "%d", 0);

  01504	6a 00		 push	 0
  01506	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0150b	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01511	50		 push	 eax
  01512	e8 00 00 00 00	 call	 _sprintf
  01517	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6205 : 		x_adjust = get_mono_font_string_width(buffer) + 1;

  0151a	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01520	50		 push	 eax
  01521	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01526	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1635[ebp]
  0152c	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1635[ebp]
  01534	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0153c	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 6206 : 
; 6207 : 		set_2d_mono_font_position (x_tick, y_centre);

  01544	51		 push	 ecx
  01545	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0154a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0154f	51		 push	 ecx
  01550	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01558	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0155d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6208 : 		set_mono_font_rel_position (-x_adjust, y_adjust);

  01562	51		 push	 ecx
  01563	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  0156b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01570	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  01578	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0157f	51		 push	 ecx
  01580	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01585	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6209 : 		print_mono_font_string(buffer);

  0158a	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01590	50		 push	 eax
  01591	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6210 : 
; 6211 : 		current_y -= y_fine_step;

  01596	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0159e	f3 0f 5c 85 2c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_fine_step$10[ebp]
  015a6	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 6212 : 		for (i = -1; i >= -3; i--)

  015ae	c7 85 18 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _i$5[ebp], -1
  015b8	eb 0f		 jmp	 SHORT $LN15@draw_pitch
$LN13@draw_pitch:
  015ba	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  015c0	83 e8 01	 sub	 eax, 1
  015c3	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN15@draw_pitch:
  015c9	83 bd 18 ff ff
	ff fd		 cmp	 DWORD PTR _i$5[ebp], -3	; fffffffdH
  015d0	0f 8c 03 01 00
	00		 jl	 $LN14@draw_pitch

; 6213 : 		{
; 6214 : 			draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  015d6	b8 04 00 00 00	 mov	 eax, 4
  015db	6b c8 00	 imul	 ecx, eax, 0
  015de	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015e4	52		 push	 edx
  015e5	51		 push	 ecx
  015e6	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  015ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f3	51		 push	 ecx
  015f4	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  015fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01601	51		 push	 ecx
  01602	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0160a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160f	51		 push	 ecx
  01610	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0161d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6215 : 
; 6216 : 			sprintf(buffer, "%d", i);

  01622	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01628	50		 push	 eax
  01629	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0162e	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$2[ebp]
  01634	51		 push	 ecx
  01635	e8 00 00 00 00	 call	 _sprintf
  0163a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6217 : 			x_adjust = get_mono_font_string_width(buffer) + 1;

  0163d	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01643	50		 push	 eax
  01644	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01649	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1663[ebp]
  0164f	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1663[ebp]
  01657	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0165f	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 6218 : 
; 6219 : 			set_2d_mono_font_position (x_tick, current_y);

  01667	51		 push	 ecx
  01668	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01670	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01675	51		 push	 ecx
  01676	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  0167e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01683	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6220 : 			set_mono_font_rel_position (-x_adjust, y_adjust);

  01688	51		 push	 ecx
  01689	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  01691	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01696	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  0169e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  016a5	51		 push	 ecx
  016a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ab	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6221 : 			print_mono_font_string(buffer);

  016b0	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  016b6	50		 push	 eax
  016b7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6222 : 			current_y -= y_coarse_step;

  016bc	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  016c4	f3 0f 5c 85 28
	ff ff ff	 subss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  016cc	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 6223 : 		}

  016d4	e9 e1 fe ff ff	 jmp	 $LN13@draw_pitch
$LN14@draw_pitch:

; 6224 : 
; 6225 : 		// draw marker
; 6226 : 
; 6227 : 		{
; 6228 : 			float
; 6229 : 				pitch_y;
; 6230 : 
; 6231 : 			pitch_y = bound(deg(pitch), -10.0, 10.0) * y_fine_height * 0.1;

  016d9	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  016de	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  016e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  016ea	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  016f2	66 0f 2f c8	 comisd	 xmm1, xmm0
  016f6	76 12		 jbe	 SHORT $LN55@draw_pitch
  016f8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  01700	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv763[ebp], xmm0
  01708	eb 56		 jmp	 SHORT $LN56@draw_pitch
$LN55@draw_pitch:
  0170a	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0170f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01717	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0171b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  01723	76 12		 jbe	 SHORT $LN53@draw_pitch
  01725	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  0172d	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv762[ebp], xmm0
  01735	eb 19		 jmp	 SHORT $LN54@draw_pitch
$LN53@draw_pitch:
  01737	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0173c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01744	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01748	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv762[ebp], xmm0
$LN54@draw_pitch:
  01750	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv762[ebp]
  01758	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv763[ebp], xmm0
$LN56@draw_pitch:
  01760	f3 0f 5a 85 34
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_fine_height$12[ebp]
  01768	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv763[ebp]
  01770	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  01778	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0177c	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0

; 6232 : 			if (pitch < rad(-10))

  01784	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  0178c	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _pitch$[ebp]
  01790	0f 86 cf 00 00
	00		 jbe	 $LN38@draw_pitch

; 6233 : 				pitch_y += bound(deg(pitch) + 10.0, -20.0, 0.0) * y_coarse_height * 0.05;

  01796	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0179b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  017a3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  017a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  017af	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c034000000000000
  017b7	66 0f 2f c8	 comisd	 xmm1, xmm0
  017bb	76 12		 jbe	 SHORT $LN59@draw_pitch
  017bd	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c034000000000000
  017c5	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv781[ebp], xmm0
  017cd	eb 61		 jmp	 SHORT $LN60@draw_pitch
$LN59@draw_pitch:
  017cf	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  017d4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  017dc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  017e0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  017e8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  017f0	76 0d		 jbe	 SHORT $LN57@draw_pitch
  017f2	0f 57 c0	 xorps	 xmm0, xmm0
  017f5	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv780[ebp], xmm0
  017fd	eb 21		 jmp	 SHORT $LN58@draw_pitch
$LN57@draw_pitch:
  017ff	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  01804	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  0180c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01810	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  01818	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv780[ebp], xmm0
$LN58@draw_pitch:
  01820	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv780[ebp]
  01828	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv781[ebp], xmm0
$LN60@draw_pitch:
  01830	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_coarse_height$11[ebp]
  01838	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv781[ebp]
  01840	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01848	f3 0f 5a 8d 04
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _pitch_y$1[ebp]
  01850	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01854	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01858	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0
  01860	e9 d7 00 00 00	 jmp	 $LN40@draw_pitch
$LN38@draw_pitch:

; 6234 : 			else if (pitch > rad(10))

  01865	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0186a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e32b8c2
  01871	0f 86 c5 00 00
	00		 jbe	 $LN40@draw_pitch

; 6235 : 				pitch_y += bound(deg(pitch) - 10.0, 0.0, 20.0) * y_coarse_height * 0.05;

  01877	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0187c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01884	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01888	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  01890	0f 57 c9	 xorps	 xmm1, xmm1
  01893	66 0f 2f c8	 comisd	 xmm1, xmm0
  01897	76 0d		 jbe	 SHORT $LN63@draw_pitch
  01899	0f 57 c0	 xorps	 xmm0, xmm0
  0189c	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv801[ebp], xmm0
  018a4	eb 66		 jmp	 SHORT $LN64@draw_pitch
$LN63@draw_pitch:
  018a6	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  018ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  018b3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  018b7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  018bf	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4034000000000000
  018c7	76 12		 jbe	 SHORT $LN61@draw_pitch
  018c9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4034000000000000
  018d1	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv800[ebp], xmm0
  018d9	eb 21		 jmp	 SHORT $LN62@draw_pitch
$LN61@draw_pitch:
  018db	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  018e0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  018e8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  018ec	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  018f4	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv800[ebp], xmm0
$LN62@draw_pitch:
  018fc	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv800[ebp]
  01904	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv801[ebp], xmm0
$LN64@draw_pitch:
  0190c	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_coarse_height$11[ebp]
  01914	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv801[ebp]
  0191c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01924	f3 0f 5a 8d 04
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _pitch_y$1[ebp]
  0192c	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01930	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01934	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0
$LN40@draw_pitch:

; 6236 : 
; 6237 : 			pitch_y += y_centre;

  0193c	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch_y$1[ebp]
  01944	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _y_centre$[ebp]
  01949	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0

; 6238 : 
; 6239 : 			draw_2d_mono_sprite(large_right_carat, x_end, pitch_y, MFD_COLOUR1);

  01951	b8 04 00 00 00	 mov	 eax, 4
  01956	6b c8 00	 imul	 ecx, eax, 0
  01959	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0195f	52		 push	 edx
  01960	51		 push	 ecx
  01961	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch_y$1[ebp]
  01969	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0196e	51		 push	 ecx
  0196f	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  01977	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0197c	68 00 00 00 00	 push	 OFFSET ?large_right_carat@@3PADA
  01981	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_pitch:

; 6240 : 		}
; 6241 : 	}
; 6242 : 
; 6243 : 
; 6244 : 	//
; 6245 : 	// roll
; 6246 : 	//
; 6247 : 
; 6248 : 	if (draw_main_display)

  01986	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  0198d	0f 84 20 06 00
	00		 je	 $LN41@draw_pitch

; 6249 : 	{
; 6250 : 		set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y - size);

  01993	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0199b	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _size$[ebp]
  019a0	51		 push	 ecx
  019a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a6	51		 push	 ecx
  019a7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  019ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  019b6	50		 push	 eax
  019b7	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 6251 : 
; 6252 : 		set_2d_instance_rotation (mfd_env, rad (0.0));

  019bc	51		 push	 ecx
  019bd	0f 57 c0	 xorps	 xmm0, xmm0
  019c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  019ca	50		 push	 eax
  019cb	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6253 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  019d0	b8 04 00 00 00	 mov	 eax, 4
  019d5	6b c8 00	 imul	 ecx, eax, 0
  019d8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019de	52		 push	 edx
  019df	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  019e4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019eb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  019ef	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  019f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019fb	51		 push	 ecx
  019fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a01	51		 push	 ecx
  01a02	0f 57 c0	 xorps	 xmm0, xmm0
  01a05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0a	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a0f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a16	51		 push	 ecx
  01a17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a1c	51		 push	 ecx
  01a1d	0f 57 c0	 xorps	 xmm0, xmm0
  01a20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a25	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6254 : 
; 6255 : 		set_2d_instance_rotation (mfd_env, rad (10.0));

  01a2a	51		 push	 ecx
  01a2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  01a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a38	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01a3d	50		 push	 eax
  01a3e	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6256 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01a43	b8 04 00 00 00	 mov	 eax, 4
  01a48	6b c8 00	 imul	 ecx, eax, 0
  01a4b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a51	52		 push	 edx
  01a52	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a57	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a5e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01a62	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01a6a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a6e	51		 push	 ecx
  01a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a74	51		 push	 ecx
  01a75	0f 57 c0	 xorps	 xmm0, xmm0
  01a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a82	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a89	51		 push	 ecx
  01a8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8f	51		 push	 ecx
  01a90	0f 57 c0	 xorps	 xmm0, xmm0
  01a93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a98	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6257 : 		set_2d_instance_rotation (mfd_env, rad (-10.0));

  01a9d	51		 push	 ecx
  01a9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  01aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01ab0	50		 push	 eax
  01ab1	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6258 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01ab6	b8 04 00 00 00	 mov	 eax, 4
  01abb	6b c8 00	 imul	 ecx, eax, 0
  01abe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ac4	52		 push	 edx
  01ac5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01aca	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01ad1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01ad5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01add	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ae1	51		 push	 ecx
  01ae2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae7	51		 push	 ecx
  01ae8	0f 57 c0	 xorps	 xmm0, xmm0
  01aeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af0	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01af5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01afc	51		 push	 ecx
  01afd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b02	51		 push	 ecx
  01b03	0f 57 c0	 xorps	 xmm0, xmm0
  01b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b0b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6259 : 
; 6260 : 		set_2d_instance_rotation (mfd_env, rad (20.0));

  01b10	51		 push	 ecx
  01b11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb2b8c2
  01b19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b1e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01b23	50		 push	 eax
  01b24	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6261 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01b29	b8 04 00 00 00	 mov	 eax, 4
  01b2e	6b c8 00	 imul	 ecx, eax, 0
  01b31	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b37	52		 push	 edx
  01b38	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b3d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b44	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01b48	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01b50	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b54	51		 push	 ecx
  01b55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b5a	51		 push	 ecx
  01b5b	0f 57 c0	 xorps	 xmm0, xmm0
  01b5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b63	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b68	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b6f	51		 push	 ecx
  01b70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b75	51		 push	 ecx
  01b76	0f 57 c0	 xorps	 xmm0, xmm0
  01b79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b7e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6262 : 		set_2d_instance_rotation (mfd_env, rad (-20.0));

  01b83	51		 push	 ecx
  01b84	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb2b8c2
  01b8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b91	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01b96	50		 push	 eax
  01b97	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6263 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01b9c	b8 04 00 00 00	 mov	 eax, 4
  01ba1	6b c8 00	 imul	 ecx, eax, 0
  01ba4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01baa	52		 push	 edx
  01bab	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01bb0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01bb7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01bbb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01bc3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc7	51		 push	 ecx
  01bc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bcd	51		 push	 ecx
  01bce	0f 57 c0	 xorps	 xmm0, xmm0
  01bd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd6	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01bdb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01be2	51		 push	 ecx
  01be3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be8	51		 push	 ecx
  01be9	0f 57 c0	 xorps	 xmm0, xmm0
  01bec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6264 : 
; 6265 : 		set_2d_instance_rotation (mfd_env, rad (30.0));

  01bf6	51		 push	 ecx
  01bf7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  01bff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c04	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c09	50		 push	 eax
  01c0a	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6266 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01c0f	b8 04 00 00 00	 mov	 eax, 4
  01c14	6b c8 00	 imul	 ecx, eax, 0
  01c17	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c1d	52		 push	 edx
  01c1e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01c23	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c2a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01c2e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01c36	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c3a	51		 push	 ecx
  01c3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c40	51		 push	 ecx
  01c41	0f 57 c0	 xorps	 xmm0, xmm0
  01c44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c49	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01c4e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c55	51		 push	 ecx
  01c56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5b	51		 push	 ecx
  01c5c	0f 57 c0	 xorps	 xmm0, xmm0
  01c5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c64	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6267 : 		set_2d_instance_rotation (mfd_env, rad (-30.0));

  01c69	51		 push	 ecx
  01c6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf060a92
  01c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c77	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c7c	50		 push	 eax
  01c7d	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6268 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01c82	b8 04 00 00 00	 mov	 eax, 4
  01c87	6b c8 00	 imul	 ecx, eax, 0
  01c8a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c90	52		 push	 edx
  01c91	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01c96	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c9d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01ca1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01ca9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cad	51		 push	 ecx
  01cae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cb3	51		 push	 ecx
  01cb4	0f 57 c0	 xorps	 xmm0, xmm0
  01cb7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cbc	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01cc1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01cc8	51		 push	 ecx
  01cc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cce	51		 push	 ecx
  01ccf	0f 57 c0	 xorps	 xmm0, xmm0
  01cd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6269 : 
; 6270 : 		set_2d_instance_rotation (mfd_env, rad (45.0));

  01cdc	51		 push	 ecx
  01cdd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  01ce5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01cef	50		 push	 eax
  01cf0	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6271 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01cf5	b8 04 00 00 00	 mov	 eax, 4
  01cfa	6b c8 00	 imul	 ecx, eax, 0
  01cfd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d03	52		 push	 edx
  01d04	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d09	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d10	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01d14	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01d1c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d20	51		 push	 ecx
  01d21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d26	51		 push	 ecx
  01d27	0f 57 c0	 xorps	 xmm0, xmm0
  01d2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d2f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d34	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d3b	51		 push	 ecx
  01d3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d41	51		 push	 ecx
  01d42	0f 57 c0	 xorps	 xmm0, xmm0
  01d45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d4a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6272 : 		set_2d_instance_rotation (mfd_env, rad (-45.0));

  01d4f	51		 push	 ecx
  01d50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf490fdb
  01d58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01d62	50		 push	 eax
  01d63	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6273 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01d68	b8 04 00 00 00	 mov	 eax, 4
  01d6d	6b c8 00	 imul	 ecx, eax, 0
  01d70	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d76	52		 push	 edx
  01d77	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d7c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d83	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01d87	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01d8f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d93	51		 push	 ecx
  01d94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d99	51		 push	 ecx
  01d9a	0f 57 c0	 xorps	 xmm0, xmm0
  01d9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01da2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01da7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01dae	51		 push	 ecx
  01daf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db4	51		 push	 ecx
  01db5	0f 57 c0	 xorps	 xmm0, xmm0
  01db8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dbd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6274 : 
; 6275 : 		set_2d_instance_rotation (mfd_env, rad (60.0));

  01dc2	51		 push	 ecx
  01dc3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f860a92
  01dcb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01dd5	50		 push	 eax
  01dd6	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6276 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01ddb	b8 04 00 00 00	 mov	 eax, 4
  01de0	6b c8 00	 imul	 ecx, eax, 0
  01de3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01de9	52		 push	 edx
  01dea	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01def	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01df6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01dfa	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01e02	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e06	51		 push	 ecx
  01e07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e0c	51		 push	 ecx
  01e0d	0f 57 c0	 xorps	 xmm0, xmm0
  01e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e15	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e1a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e21	51		 push	 ecx
  01e22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e27	51		 push	 ecx
  01e28	0f 57 c0	 xorps	 xmm0, xmm0
  01e2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e30	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6277 : 		set_2d_instance_rotation (mfd_env, rad (-60.0));

  01e35	51		 push	 ecx
  01e36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf860a92
  01e3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01e48	50		 push	 eax
  01e49	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6278 : 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01e4e	b8 04 00 00 00	 mov	 eax, 4
  01e53	6b c8 00	 imul	 ecx, eax, 0
  01e56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e5c	52		 push	 edx
  01e5d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e62	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e69	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01e6d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01e75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e79	51		 push	 ecx
  01e7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e7f	51		 push	 ecx
  01e80	0f 57 c0	 xorps	 xmm0, xmm0
  01e83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e88	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e8d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e94	51		 push	 ecx
  01e95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e9a	51		 push	 ecx
  01e9b	0f 57 c0	 xorps	 xmm0, xmm0
  01e9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ea3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6279 : 
; 6280 : 		set_2d_instance_rotation (mfd_env, bound (roll, rad(-60.0), rad(60.0)));

  01ea8	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01ead	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0c15236000000
  01eb5	66 0f 2f c8	 comisd	 xmm1, xmm0
  01eb9	76 12		 jbe	 SHORT $LN67@draw_pitch
  01ebb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0c15236000000
  01ec3	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv980[ebp], xmm0
  01ecb	eb 3e		 jmp	 SHORT $LN68@draw_pitch
$LN67@draw_pitch:
  01ecd	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01ed2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0c15236000000
  01eda	76 12		 jbe	 SHORT $LN65@draw_pitch
  01edc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  01ee4	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv979[ebp], xmm0
  01eec	eb 0d		 jmp	 SHORT $LN66@draw_pitch
$LN65@draw_pitch:
  01eee	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01ef3	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv979[ebp], xmm0
$LN66@draw_pitch:
  01efb	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv979[ebp]
  01f03	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv980[ebp], xmm0
$LN68@draw_pitch:
  01f0b	f2 0f 5a 85 bc
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv980[ebp]
  01f13	51		 push	 ecx
  01f14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f19	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01f1e	50		 push	 eax
  01f1f	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 6281 : 		draw_2d_filled_triangle(0.0, -size, -0.035, -size + 0.075, 0.035, -size + 0.075, MFD_COLOUR4);

  01f24	b8 04 00 00 00	 mov	 eax, 4
  01f29	6b c8 03	 imul	 ecx, eax, 3
  01f2c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f32	52		 push	 edx
  01f33	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01f38	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01f3f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01f43	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  01f4b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f4f	51		 push	 ecx
  01f50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f55	51		 push	 ecx
  01f56	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  01f5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f63	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01f68	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01f6f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01f73	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  01f7b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f7f	51		 push	 ecx
  01f80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f85	51		 push	 ecx
  01f86	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  01f8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f93	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01f98	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01f9f	51		 push	 ecx
  01fa0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa5	51		 push	 ecx
  01fa6	0f 57 c0	 xorps	 xmm0, xmm0
  01fa9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fae	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN41@draw_pitch:

; 6282 : 	}
; 6283 : 
; 6284 : 	//
; 6285 : 	// restore 2D environment
; 6286 : 	//
; 6287 : 
; 6288 : 	reset_2d_instance (mfd_env);

  01fb3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01fb8	50		 push	 eax
  01fb9	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 6289 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01fbe	51		 push	 ecx
  01fbf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01fc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fcc	51		 push	 ecx
  01fcd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01fd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fda	51		 push	 ecx
  01fdb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01fe3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fe8	51		 push	 ecx
  01fe9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ff1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ff6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01ffb	50		 push	 eax
  01ffc	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 6290 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  02001	51		 push	 ecx
  02002	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0200a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0200f	51		 push	 ecx
  02010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  02018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0201d	51		 push	 ecx
  0201e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  02026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0202b	51		 push	 ecx
  0202c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  02034	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0203e	50		 push	 eax
  0203f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6291 : 
; 6292 : 	// datum
; 6293 : 	draw_2d_line(x_centre, 0.0, x_centre + 0.05, -0.05, MFD_COLOUR6);

  02044	b8 04 00 00 00	 mov	 eax, 4
  02049	6b c8 05	 imul	 ecx, eax, 5
  0204c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02052	52		 push	 edx
  02053	51		 push	 ecx
  02054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0205c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02061	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02066	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0206e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02072	51		 push	 ecx
  02073	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02078	51		 push	 ecx
  02079	0f 57 c0	 xorps	 xmm0, xmm0
  0207c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02081	51		 push	 ecx
  02082	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  02087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0208c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6294 : 	draw_2d_line(x_centre, 0.0, x_centre - 0.05, -0.05, MFD_COLOUR6);

  02091	b8 04 00 00 00	 mov	 eax, 4
  02096	6b c8 05	 imul	 ecx, eax, 5
  02099	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0209f	52		 push	 edx
  020a0	51		 push	 ecx
  020a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  020a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ae	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  020b3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  020bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020bf	51		 push	 ecx
  020c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020c5	51		 push	 ecx
  020c6	0f 57 c0	 xorps	 xmm0, xmm0
  020c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ce	51		 push	 ecx
  020cf	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  020d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020d9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6295 : 
; 6296 : 	draw_2d_line(x_centre + 0.05, -0.05, x_centre + 0.10, 0.0, MFD_COLOUR6);

  020de	b8 04 00 00 00	 mov	 eax, 4
  020e3	6b c8 05	 imul	 ecx, eax, 5
  020e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020ec	52		 push	 edx
  020ed	51		 push	 ecx
  020ee	0f 57 c0	 xorps	 xmm0, xmm0
  020f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020f6	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  020fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02103	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02107	51		 push	 ecx
  02108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0210d	51		 push	 ecx
  0210e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  02116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0211b	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02120	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02128	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0212c	51		 push	 ecx
  0212d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02132	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6297 : 	draw_2d_line(x_centre - 0.05, -0.05, x_centre - 0.10, 0.0, MFD_COLOUR6);

  02137	b8 04 00 00 00	 mov	 eax, 4
  0213c	6b c8 05	 imul	 ecx, eax, 5
  0213f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02145	52		 push	 edx
  02146	51		 push	 ecx
  02147	0f 57 c0	 xorps	 xmm0, xmm0
  0214a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0214f	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02154	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0215c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02160	51		 push	 ecx
  02161	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02166	51		 push	 ecx
  02167	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0216f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02174	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02179	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02185	51		 push	 ecx
  02186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0218b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6298 : 
; 6299 : 	draw_2d_line(x_centre + 0.10, 0.0, x_centre + 0.20, 0.0, MFD_COLOUR6);

  02190	b8 04 00 00 00	 mov	 eax, 4
  02195	6b c8 05	 imul	 ecx, eax, 5
  02198	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0219e	52		 push	 edx
  0219f	51		 push	 ecx
  021a0	0f 57 c0	 xorps	 xmm0, xmm0
  021a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a8	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  021ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  021b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021b9	51		 push	 ecx
  021ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021bf	51		 push	 ecx
  021c0	0f 57 c0	 xorps	 xmm0, xmm0
  021c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021c8	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  021cd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  021d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021d9	51		 push	 ecx
  021da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021df	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6300 : 	draw_2d_line(x_centre - 0.10, 0.0, x_centre - 0.20, 0.0, MFD_COLOUR6);

  021e4	b8 04 00 00 00	 mov	 eax, 4
  021e9	6b c8 05	 imul	 ecx, eax, 5
  021ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021f2	52		 push	 edx
  021f3	51		 push	 ecx
  021f4	0f 57 c0	 xorps	 xmm0, xmm0
  021f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021fc	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02201	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  02209	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0220d	51		 push	 ecx
  0220e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02213	51		 push	 ecx
  02214	0f 57 c0	 xorps	 xmm0, xmm0
  02217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0221c	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02221	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02229	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0222d	51		 push	 ecx
  0222e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02233	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 6301 : }

  02238	5f		 pop	 edi
  02239	5e		 pop	 esi
  0223a	5b		 pop	 ebx
  0223b	8b e5		 mov	 esp, ebp
  0223d	5d		 pop	 ebp
  0223e	c3		 ret	 0
?draw_pitch_ladder@@YGXXZ ENDP				; draw_pitch_ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?limit_pitch@@YGHHPAH@Z
_TEXT	SEGMENT
_pitch$ = 8						; size = 4
_step_direction$ = 12					; size = 4
?limit_pitch@@YGHHPAH@Z PROC				; limit_pitch, COMDAT

; 5832 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5833 : 	if (pitch > 9)

  00009	83 7d 08 09	 cmp	 DWORD PTR _pitch$[ebp], 9
  0000d	7e 1f		 jle	 SHORT $LN2@limit_pitc

; 5834 : 	{
; 5835 : 		pitch -= 18;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00012	83 e8 12	 sub	 eax, 18			; 00000012H
  00015	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 5836 : 
; 5837 : 		pitch = -pitch;

  00018	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  0001b	f7 d8		 neg	 eax
  0001d	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 5838 : 
; 5839 : 		*step_direction = -(*step_direction);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	f7 d9		 neg	 ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	eb 23		 jmp	 SHORT $LN3@limit_pitc
$LN2@limit_pitc:

; 5840 : 	}
; 5841 : 	else if (pitch < -9)

  0002e	83 7d 08 f7	 cmp	 DWORD PTR _pitch$[ebp], -9 ; fffffff7H
  00032	7d 1d		 jge	 SHORT $LN3@limit_pitc

; 5842 : 	{
; 5843 : 		pitch += 18;

  00034	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00037	83 c0 12	 add	 eax, 18			; 00000012H
  0003a	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 5844 : 
; 5845 : 		pitch = -pitch;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00040	f7 d8		 neg	 eax
  00042	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 5846 : 
; 5847 : 		*step_direction = -(*step_direction);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	f7 d9		 neg	 ecx
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@limit_pitc:

; 5848 : 	}
; 5849 : 
; 5850 : 	return (pitch);

  00051	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]

; 5851 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?limit_pitch@@YGHHPAH@Z ENDP				; limit_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv457 = -188						; size = 8
tv410 = -188						; size = 8
tv363 = -188						; size = 8
tv316 = -188						; size = 8
tv269 = -188						; size = 8
tv211 = -188						; size = 8
tv175 = -188						; size = 8
tv138 = -188						; size = 8
tv890 = -180						; size = 8
tv864 = -180						; size = 8
tv840 = -180						; size = 8
tv814 = -180						; size = 8
tv790 = -180						; size = 8
tv764 = -180						; size = 8
tv740 = -180						; size = 8
tv714 = -180						; size = 8
tv690 = -180						; size = 8
tv664 = -180						; size = 8
tv576 = -180						; size = 8
tv562 = -180						; size = 8
tv529 = -180						; size = 8
tv458 = -180						; size = 8
tv411 = -180						; size = 8
tv364 = -180						; size = 8
tv317 = -180						; size = 8
tv270 = -180						; size = 8
tv212 = -180						; size = 8
tv176 = -180						; size = 8
tv139 = -180						; size = 8
_fvalue$ = -108						; size = 4
_x_adjust$ = -104					; size = 4
_bottom_edge$ = -100					; size = 4
_ivalue$ = -96						; size = 4
_s2$ = -92						; size = 10
_s$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 5186 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5187 : 	char
; 5188 : 		s[80], s2[10];
; 5189 : 
; 5190 : 	int
; 5191 : 		ivalue;
; 5192 : 
; 5193 : 	float
; 5194 : 		bottom_edge,
; 5195 : 		x_adjust,
; 5196 : 		fvalue;
; 5197 : 
; 5198 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5199 : 
; 5200 : 	if (draw_large_mfd)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00027	74 09		 je	 SHORT $LN2@draw_engin

; 5201 : 	{
; 5202 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00029	6a 04		 push	 4
  0002b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5203 : 	}
; 5204 : 	else

  00030	eb 07		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 5205 : 	{
; 5206 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_engin:

; 5207 : 	}
; 5208 : 
; 5209 : 	////////////////////////////////////////
; 5210 : 
; 5211 : 	set_2d_mono_font_position (-0.8, 0.9);

  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5212 : 
; 5213 : 	set_mono_font_rel_position (1.0, 0.0);

  0005a	51		 push	 ecx
  0005b	0f 57 c0	 xorps	 xmm0, xmm0
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5214 : 
; 5215 : 	print_mono_font_string ("ENGINE");

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_06LKDHJJCH@ENGINE@
  0007b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5216 : 
; 5217 : #if 0
; 5218 : 	set_2d_mono_font_position (0.8, 0.9);
; 5219 : 
; 5220 : 	x_adjust = -get_mono_font_string_width ("ENGINE");
; 5221 : 
; 5222 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5223 : 
; 5224 : 	print_mono_font_string ("ENGINE");
; 5225 : #endif
; 5226 : 
; 5227 : 	////////////////////////////////////////
; 5228 : 
; 5229 : 	set_2d_mono_font_position (-0.7, -0.6);

  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5230 : 
; 5231 : 	x_adjust = get_mono_font_string_width ("FUEL QTY") * -0.5;

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  000a6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ab	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv529[ebp]
  000b1	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv529[ebp]
  000b9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  000c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c5	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5232 : 
; 5233 : 	set_mono_font_rel_position (x_adjust, 0.0);

  000ca	51		 push	 ecx
  000cb	0f 57 c0	 xorps	 xmm0, xmm0
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	51		 push	 ecx
  000d4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000de	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5234 : 
; 5235 : 	print_mono_font_string ("FUEL QTY");

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  000e8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5236 : 
; 5237 : 	set_2d_mono_font_position (-0.7, -0.7);

  000ed	51		 push	 ecx
  000ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fb	51		 push	 ecx
  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5238 : 
; 5239 : /*	x_adjust = get_mono_font_string_width ("LB") * -0.5;
; 5240 : 
; 5241 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5242 : 
; 5243 : 	print_mono_font_string ("LB"); */
; 5244 : 
; 5245 : 	set_2d_mono_font_position (-0.7, -0.7);

  0010e	51		 push	 ecx
  0010f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00117	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011c	51		 push	 ecx
  0011d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5246 : 
; 5247 : 	fvalue = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 9999.0);

  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00134	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  0013c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00144	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00148	0f 57 c9	 xorps	 xmm1, xmm1
  0014b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0014f	76 0d		 jbe	 SHORT $LN13@draw_engin
  00151	0f 57 c0	 xorps	 xmm0, xmm0
  00154	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv139[ebp], xmm0
  0015c	eb 68		 jmp	 SHORT $LN14@draw_engin
$LN13@draw_engin:
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00164	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  0016c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00174	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00178	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  00180	76 12		 jbe	 SHORT $LN11@draw_engin
  00182	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  0018a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv138[ebp], xmm0
  00192	eb 22		 jmp	 SHORT $LN12@draw_engin
$LN11@draw_engin:
  00194	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0019a	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  001a2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  001aa	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001ae	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv138[ebp], xmm0
$LN12@draw_engin:
  001b6	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv138[ebp]
  001be	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv139[ebp], xmm0
$LN14@draw_engin:
  001c6	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv139[ebp]
  001ce	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5248 : 
; 5249 : 	convert_float_to_int (fvalue, &ivalue);

  001d3	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  001d6	50		 push	 eax
  001d7	51		 push	 ecx
  001d8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5250 : 
; 5251 : 	sprintf (s, "%04d lb", ivalue);

  001e7	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  001ea	50		 push	 eax
  001eb	68 00 00 00 00	 push	 OFFSET ??_C@_07MGEFOJJP@?$CF04d?5lb@
  001f0	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  001f3	51		 push	 ecx
  001f4	e8 00 00 00 00	 call	 _sprintf
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5252 : 
; 5253 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  001fc	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00205	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv562[ebp]
  0020b	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv562[ebp]
  00213	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0021b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021f	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5254 : 
; 5255 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00224	51		 push	 ecx
  00225	0f 57 c0	 xorps	 xmm0, xmm0
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	51		 push	 ecx
  0022e	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5256 : 
; 5257 : 	print_mono_font_string (s);

  0023d	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00240	50		 push	 eax
  00241	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5258 : 
; 5259 : 	////////////////////////////////////////
; 5260 : 
; 5261 : 	set_2d_mono_font_position (0.0, -0.6);

  00246	51		 push	 ecx
  00247	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0024f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00254	51		 push	 ecx
  00255	0f 57 c0	 xorps	 xmm0, xmm0
  00258	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5262 : 
; 5263 : 	x_adjust = get_mono_font_string_width ("THROTTLE") * -0.5;

  00262	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  00267	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0026c	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv576[ebp]
  00272	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv576[ebp]
  0027a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00282	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00286	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5264 : 
; 5265 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0028b	51		 push	 ecx
  0028c	0f 57 c0	 xorps	 xmm0, xmm0
  0028f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00294	51		 push	 ecx
  00295	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5266 : 
; 5267 : 	print_mono_font_string ("THROTTLE");

  002a4	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  002a9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5268 : 
; 5269 : //	set_2d_mono_font_position (0.0, -0.7);
; 5270 : 
; 5271 : 	fvalue = bound (current_flight_dynamics->left_engine_n1_rpm.max, 0.0, 110.0);

  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002b3	f3 0f 5a 80 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7328]
  002bb	0f 57 c9	 xorps	 xmm1, xmm1
  002be	66 0f 2f c8	 comisd	 xmm1, xmm0
  002c2	76 0d		 jbe	 SHORT $LN17@draw_engin
  002c4	0f 57 c0	 xorps	 xmm0, xmm0
  002c7	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
  002cf	eb 50		 jmp	 SHORT $LN18@draw_engin
$LN17@draw_engin:
  002d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002d7	f3 0f 5a 81 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7328]
  002df	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  002e7	76 12		 jbe	 SHORT $LN15@draw_engin
  002e9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  002f1	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv175[ebp], xmm0
  002f9	eb 16		 jmp	 SHORT $LN16@draw_engin
$LN15@draw_engin:
  002fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00301	f3 0f 5a 82 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7328]
  00309	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv175[ebp], xmm0
$LN16@draw_engin:
  00311	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv175[ebp]
  00319	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
$LN18@draw_engin:
  00321	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv176[ebp]
  00329	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5272 : 	convert_float_to_int (fvalue, &ivalue);

  0032e	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00331	50		 push	 eax
  00332	51		 push	 ecx
  00333	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5273 : 
; 5274 : 	if (ivalue < 60)

  00342	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  00346	7d 13		 jge	 SHORT $LN4@draw_engin

; 5275 : 		sprintf(s2, "OFF ");

  00348	68 00 00 00 00	 push	 OFFSET ??_C@_04LMJCBFEL@OFF?5@
  0034d	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  00350	50		 push	 eax
  00351	e8 00 00 00 00	 call	 _sprintf
  00356	83 c4 08	 add	 esp, 8
  00359	eb 58		 jmp	 SHORT $LN9@draw_engin
$LN4@draw_engin:

; 5276 : 	else if (ivalue == 60)

  0035b	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  0035f	75 13		 jne	 SHORT $LN6@draw_engin

; 5277 : 		sprintf(s2, "IDLE");

  00361	68 00 00 00 00	 push	 OFFSET ??_C@_04IMMGDCFE@IDLE@
  00366	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  00369	50		 push	 eax
  0036a	e8 00 00 00 00	 call	 _sprintf
  0036f	83 c4 08	 add	 esp, 8
  00372	eb 3f		 jmp	 SHORT $LN9@draw_engin
$LN6@draw_engin:

; 5278 : 	else if (ivalue == 110.0)

  00374	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR _ivalue$[ebp]
  00379	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  00381	9f		 lahf
  00382	f6 c4 44	 test	 ah, 68			; 00000044H
  00385	7a 13		 jp	 SHORT $LN8@draw_engin

; 5279 : 		sprintf(s2, "FLY ");

  00387	68 00 00 00 00	 push	 OFFSET ??_C@_04MJEFHDBD@FLY?5@
  0038c	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 _sprintf
  00395	83 c4 08	 add	 esp, 8

; 5280 : 	else

  00398	eb 19		 jmp	 SHORT $LN9@draw_engin
$LN8@draw_engin:

; 5281 : 		sprintf(s2, "%03d%%", (ivalue-60) * 2);

  0039a	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  0039d	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  003a1	51		 push	 ecx
  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
  003a7	8d 55 a4	 lea	 edx, DWORD PTR _s2$[ebp]
  003aa	52		 push	 edx
  003ab	e8 00 00 00 00	 call	 _sprintf
  003b0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@draw_engin:

; 5282 : 
; 5283 : 	/*
; 5284 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 5285 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5286 : 	print_mono_font_string (s);
; 5287 : 	*/
; 5288 : 
; 5289 : #if 0
; 5290 : 	set_2d_mono_font_position (0.0, -0.7);
; 5291 : 
; 5292 : 	fvalue = bound (current_flight_dynamics->right_engine_n1_rpm.max, 0.0, 110.0);
; 5293 : 	convert_float_to_int (fvalue, &ivalue);
; 5294 : 
; 5295 : 	if (ivalue < 60)
; 5296 : 		sprintf(s, " %s  OFF ", s2);
; 5297 : 	else if (ivalue == 60)
; 5298 : 		sprintf(s, " %s  IDLE", s2);
; 5299 : 	else if (ivalue == 110.0)
; 5300 : 		sprintf(s, " %s  FLY ", s2);
; 5301 : 	else
; 5302 : 		sprintf(s, " %s  %03d%%", s2, (ivalue-60) * 2);
; 5303 : 
; 5304 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 5305 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5306 : 	print_mono_font_string (s);
; 5307 : #endif
; 5308 : 
; 5309 : 	////////////////////////////////////////
; 5310 : 
; 5311 : 	set_2d_mono_font_position (0.5, -0.6);

  003b3	51		 push	 ecx
  003b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	51		 push	 ecx
  003c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cf	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5312 : 
; 5313 : 	fvalue = bound (current_flight_dynamics->apu_rpm.value + 0.5, 0.0, 100.0);

  003d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003d9	f3 0f 5a 80 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7484]
  003e1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  003e9	0f 57 c9	 xorps	 xmm1, xmm1
  003ec	66 0f 2f c8	 comisd	 xmm1, xmm0
  003f0	76 0d		 jbe	 SHORT $LN21@draw_engin
  003f2	0f 57 c0	 xorps	 xmm0, xmm0
  003f5	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv212[ebp], xmm0
  003fd	eb 60		 jmp	 SHORT $LN22@draw_engin
$LN21@draw_engin:
  003ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00405	f3 0f 5a 81 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7484]
  0040d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00415	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  0041d	76 12		 jbe	 SHORT $LN19@draw_engin
  0041f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  00427	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv211[ebp], xmm0
  0042f	eb 1e		 jmp	 SHORT $LN20@draw_engin
$LN19@draw_engin:
  00431	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00437	f3 0f 5a 82 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7484]
  0043f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00447	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv211[ebp], xmm0
$LN20@draw_engin:
  0044f	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv211[ebp]
  00457	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv212[ebp], xmm0
$LN22@draw_engin:
  0045f	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv212[ebp]
  00467	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5314 : 	convert_float_to_int (fvalue, &ivalue);

  0046c	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0046f	50		 push	 eax
  00470	51		 push	 ecx
  00471	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00476	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5315 : 
; 5316 : 	sprintf(s, "SPU %03d%%", ivalue);

  00480	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00483	50		 push	 eax
  00484	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@
  00489	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0048c	51		 push	 ecx
  0048d	e8 00 00 00 00	 call	 _sprintf
  00492	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5317 : 
; 5318 : 	print_mono_font_string (s);

  00495	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00498	50		 push	 eax
  00499	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5319 : 
; 5320 : 	////////////////////////////////////////
; 5321 : 
; 5322 : 	draw_2d_line (-0.7500 - 0.02, 0.3333, -0.6500 + 0.02, 0.3333, MFD_COLOUR1);

  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	6b c8 00	 imul	 ecx, eax, 0
  004a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ac	52		 push	 edx
  004ad	51		 push	 ecx
  004ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  004b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bb	51		 push	 ecx
  004bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  004c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c9	51		 push	 ecx
  004ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  004d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d7	51		 push	 ecx
  004d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb8
  004e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5323 : 	draw_2d_line (-0.5500 - 0.02, 0.3333, -0.4500 + 0.02, 0.3333, MFD_COLOUR1);

  004ea	b8 04 00 00 00	 mov	 eax, 4
  004ef	6b c8 00	 imul	 ecx, eax, 0
  004f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004f8	52		 push	 edx
  004f9	51		 push	 ecx
  004fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00502	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00507	51		 push	 ecx
  00508	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  00510	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00515	51		 push	 ecx
  00516	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0051e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00523	51		 push	 ecx
  00524	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  0052c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00531	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5324 : 	draw_2d_line (-0.3500 - 0.02, 0.3333, -0.2500 + 0.02, 0.3333, MFD_COLOUR1);

  00536	b8 04 00 00 00	 mov	 eax, 4
  0053b	6b c8 00	 imul	 ecx, eax, 0
  0053e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00544	52		 push	 edx
  00545	51		 push	 ecx
  00546	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0054e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00553	51		 push	 ecx
  00554	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6b851f
  0055c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00561	51		 push	 ecx
  00562	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0056a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056f	51		 push	 ecx
  00570	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bebd70a4
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5325 : 	draw_2d_line (-0.1500 - 0.02, 0.3333, -0.0500 + 0.02, 0.3333, MFD_COLOUR1);

  00582	b8 04 00 00 00	 mov	 eax, 4
  00587	6b c8 00	 imul	 ecx, eax, 0
  0058a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00590	52		 push	 edx
  00591	51		 push	 ecx
  00592	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	51		 push	 ecx
  005a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  005a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ad	51		 push	 ecx
  005ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  005b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bb	51		 push	 ecx
  005bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  005c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5326 : 
; 5327 : #if 0
; 5328 : 	draw_2d_line ( 0.7500 + 0.00, 0.3333,  0.6500 - 0.02, 0.3333, MFD_COLOUR1);
; 5329 : 	draw_2d_line ( 0.5500 + 0.02, 0.3333,  0.4500 - 0.02, 0.3333, MFD_COLOUR1);
; 5330 : 	draw_2d_line ( 0.3500 + 0.02, 0.3333,  0.2500 - 0.02, 0.3333, MFD_COLOUR1);
; 5331 : 	draw_2d_line ( 0.1500 + 0.02, 0.3333,  0.0500 - 0.02, 0.3333, MFD_COLOUR1);
; 5332 : #endif
; 5333 : 
; 5334 : 	////////////////////////////////////////
; 5335 : 
; 5336 : 	//
; 5337 : 	// Nr
; 5338 : 	//
; 5339 : 
; 5340 : 	#define X_ORG	((float) (0.0))
; 5341 : 	#define Y_ORG	((float) (0.5))
; 5342 : 	#define WIDTH	((float) (0.06))
; 5343 : 	#define HEIGHT	((float) (1.0))
; 5344 : 
; 5345 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5346 : 	// as a constant as a function parameter will use a double (even though
; 5347 : 	// definition is available and says float), which causes later parameters
; 5348 : 	// to be wrong
; 5349 : 	bottom_edge = (Y_ORG - HEIGHT);

  005ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  005d6	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 5350 : 
; 5351 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  005db	51		 push	 ecx
  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	51		 push	 ecx
  005ea	0f 57 c0	 xorps	 xmm0, xmm0
  005ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5352 : 
; 5353 : 	x_adjust = get_mono_font_string_width ("NR") * -0.5;

  005f7	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  005fc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00601	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv664[ebp]
  00607	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv664[ebp]
  0060f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00617	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0061b	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5354 : 
; 5355 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00620	51		 push	 ecx
  00621	0f 57 c0	 xorps	 xmm0, xmm0
  00624	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00629	51		 push	 ecx
  0062a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0062f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00634	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5356 : 
; 5357 : 	print_mono_font_string ("NR");

  00639	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  0063e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5358 : 
; 5359 : 	////////////////////////////////////////
; 5360 : 
; 5361 : 	fvalue = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 120.0);

  00643	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00648	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  00650	0f 57 c9	 xorps	 xmm1, xmm1
  00653	66 0f 2f c8	 comisd	 xmm1, xmm0
  00657	76 0d		 jbe	 SHORT $LN25@draw_engin
  00659	0f 57 c0	 xorps	 xmm0, xmm0
  0065c	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv270[ebp], xmm0
  00664	eb 50		 jmp	 SHORT $LN26@draw_engin
$LN25@draw_engin:
  00666	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0066c	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  00674	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0067c	76 12		 jbe	 SHORT $LN23@draw_engin
  0067e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00686	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv269[ebp], xmm0
  0068e	eb 16		 jmp	 SHORT $LN24@draw_engin
$LN23@draw_engin:
  00690	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00696	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  0069e	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv269[ebp], xmm0
$LN24@draw_engin:
  006a6	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv269[ebp]
  006ae	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv270[ebp], xmm0
$LN26@draw_engin:
  006b6	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv270[ebp]
  006be	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5362 : 
; 5363 : 	convert_float_to_int (fvalue, &ivalue);

  006c3	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  006c6	50		 push	 eax
  006c7	51		 push	 ecx
  006c8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  006cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5364 : 
; 5365 : 	sprintf (s, "%03d", ivalue);

  006d7	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  006da	50		 push	 eax
  006db	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  006e0	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  006e3	51		 push	 ecx
  006e4	e8 00 00 00 00	 call	 _sprintf
  006e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5366 : 
; 5367 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  006ec	51		 push	 ecx
  006ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  006f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fa	51		 push	 ecx
  006fb	0f 57 c0	 xorps	 xmm0, xmm0
  006fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00703	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5368 : 
; 5369 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00708	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0070b	50		 push	 eax
  0070c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00711	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv690[ebp]
  00717	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv690[ebp]
  0071f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00727	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0072b	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5370 : 
; 5371 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00730	51		 push	 ecx
  00731	0f 57 c0	 xorps	 xmm0, xmm0
  00734	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00739	51		 push	 ecx
  0073a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5372 : 
; 5373 : 	print_mono_font_string (s);

  00749	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0074c	50		 push	 eax
  0074d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5374 : 
; 5375 : 	////////////////////////////////////////
; 5376 : 
; 5377 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00752	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00757	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  0075f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00763	51		 push	 ecx
  00764	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00769	51		 push	 ecx
  0076a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0076f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00774	51		 push	 ecx
  00775	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  0077d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00782	51		 push	 ecx
  00783	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0078b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00790	51		 push	 ecx
  00791	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 5378 : 
; 5379 : 	#undef X_ORG
; 5380 : 	#undef Y_ORG
; 5381 : 	#undef WIDTH
; 5382 : 	#undef HEIGHT
; 5383 : 
; 5384 : 	//
; 5385 : 	// Np1
; 5386 : 	//
; 5387 : 
; 5388 : 	#define X_ORG	((float) (-0.2))
; 5389 : 	#define Y_ORG	((float) (0.5))
; 5390 : 	#define WIDTH	((float)	(0.06))
; 5391 : 	#define HEIGHT	((float) (1.0))
; 5392 : 
; 5393 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5394 : 	// as a constant as a function parameter will use a double (even though
; 5395 : 	// definition is available and says const float), which causes later parameters
; 5396 : 	// to be wrong
; 5397 : 	bottom_edge = (Y_ORG - HEIGHT);

  007a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  007ab	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 5398 : 
; 5399 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  007b0	51		 push	 ecx
  007b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  007b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007be	51		 push	 ecx
  007bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  007c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5400 : 
; 5401 : 	x_adjust = get_mono_font_string_width ("NP") * -0.5;

  007d1	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  007d6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007db	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv714[ebp]
  007e1	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv714[ebp]
  007e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  007f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007f5	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5402 : 
; 5403 : 	set_mono_font_rel_position (x_adjust, 0.0);

  007fa	51		 push	 ecx
  007fb	0f 57 c0	 xorps	 xmm0, xmm0
  007fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00803	51		 push	 ecx
  00804	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00809	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5404 : 
; 5405 : 	print_mono_font_string ("NP");

  00813	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00818	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5406 : 
; 5407 : 	////////////////////////////////////////
; 5408 : 
; 5409 : 	fvalue = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  0081d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00822	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  0082a	0f 57 c9	 xorps	 xmm1, xmm1
  0082d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00831	76 0d		 jbe	 SHORT $LN29@draw_engin
  00833	0f 57 c0	 xorps	 xmm0, xmm0
  00836	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv317[ebp], xmm0
  0083e	eb 50		 jmp	 SHORT $LN30@draw_engin
$LN29@draw_engin:
  00840	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00846	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  0084e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00856	76 12		 jbe	 SHORT $LN27@draw_engin
  00858	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00860	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv316[ebp], xmm0
  00868	eb 16		 jmp	 SHORT $LN28@draw_engin
$LN27@draw_engin:
  0086a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00870	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  00878	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv316[ebp], xmm0
$LN28@draw_engin:
  00880	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv316[ebp]
  00888	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv317[ebp], xmm0
$LN30@draw_engin:
  00890	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv317[ebp]
  00898	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5410 : 
; 5411 : 	convert_float_to_int (fvalue, &ivalue);

  0089d	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  008a0	50		 push	 eax
  008a1	51		 push	 ecx
  008a2	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  008a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ac	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5412 : 
; 5413 : 	sprintf (s, "%03d", ivalue);

  008b1	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  008b4	50		 push	 eax
  008b5	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  008ba	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  008bd	51		 push	 ecx
  008be	e8 00 00 00 00	 call	 _sprintf
  008c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5414 : 
; 5415 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  008c6	51		 push	 ecx
  008c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  008cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d4	51		 push	 ecx
  008d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  008dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5416 : 
; 5417 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  008e7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  008ea	50		 push	 eax
  008eb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  008f0	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv740[ebp]
  008f6	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv740[ebp]
  008fe	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00906	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0090a	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5418 : 
; 5419 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0090f	51		 push	 ecx
  00910	0f 57 c0	 xorps	 xmm0, xmm0
  00913	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00918	51		 push	 ecx
  00919	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0091e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00923	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5420 : 
; 5421 : 	print_mono_font_string (s);

  00928	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0092b	50		 push	 eax
  0092c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5422 : 
; 5423 : 	////////////////////////////////////////
; 5424 : 
; 5425 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00931	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00936	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  0093e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00942	51		 push	 ecx
  00943	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00948	51		 push	 ecx
  00949	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0094e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00953	51		 push	 ecx
  00954	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  0095c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00961	51		 push	 ecx
  00962	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0096a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096f	51		 push	 ecx
  00970	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6b851f
  00978	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097d	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 5426 : 
; 5427 : 	#undef X_ORG
; 5428 : 	#undef Y_ORG
; 5429 : 	#undef WIDTH
; 5430 : 	#undef HEIGHT
; 5431 : 
; 5432 : #if 0
; 5433 : 	//
; 5434 : 	// Np2
; 5435 : 	//
; 5436 : 
; 5437 : 	#define X_ORG	((float) (0.2))
; 5438 : 	#define Y_ORG	((float) (0.5))
; 5439 : 	#define WIDTH	((float) (0.06))
; 5440 : 	#define HEIGHT	((float) (1.0))
; 5441 : 
; 5442 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5443 : 	// as a constant as a function parameter will use a double (even though
; 5444 : 	// definition is available and says const float), which causes later parameters
; 5445 : 	// to be wrong
; 5446 : 	bottom_edge = (Y_ORG - HEIGHT);
; 5447 : 
; 5448 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);
; 5449 : 
; 5450 : 	x_adjust = get_mono_font_string_width ("NP") * -0.5;
; 5451 : 
; 5452 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5453 : 
; 5454 : 	print_mono_font_string ("NP");
; 5455 : 
; 5456 : 	////////////////////////////////////////
; 5457 : 
; 5458 : 	fvalue = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);
; 5459 : 
; 5460 : 	convert_float_to_int (fvalue, &ivalue);
; 5461 : 
; 5462 : 	sprintf (s, "%03d", ivalue);
; 5463 : 
; 5464 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);
; 5465 : 
; 5466 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 5467 : 
; 5468 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5469 : 
; 5470 : 	print_mono_font_string (s);
; 5471 : 
; 5472 : 	////////////////////////////////////////
; 5473 : 
; 5474 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);
; 5475 : 
; 5476 : 	#undef X_ORG
; 5477 : 	#undef Y_ORG
; 5478 : 	#undef WIDTH
; 5479 : 	#undef HEIGHT
; 5480 : #endif
; 5481 : 
; 5482 : 	//
; 5483 : 	// NG1
; 5484 : 	//
; 5485 : 
; 5486 : 	#define X_ORG	((float) (-0.4))
; 5487 : 	#define Y_ORG	((float) (0.5))
; 5488 : 	#define WIDTH	((float) (0.06))
; 5489 : 	#define HEIGHT	((float) (1.0))
; 5490 : 
; 5491 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5492 : 	// as a constant as a function parameter will use a double (even though
; 5493 : 	// definition is available and says const float), which causes later parameters
; 5494 : 	// to be wrong
; 5495 : 	bottom_edge = (Y_ORG - HEIGHT);

  00982	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0098a	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 5496 : 
; 5497 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  0098f	51		 push	 ecx
  00990	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00998	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099d	51		 push	 ecx
  0099e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  009a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ab	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5498 : 
; 5499 : 	x_adjust = get_mono_font_string_width ("NG") * -0.5;

  009b0	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  009b5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  009ba	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv764[ebp]
  009c0	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv764[ebp]
  009c8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  009d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009d4	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5500 : 
; 5501 : 	set_mono_font_rel_position (x_adjust, 0.0);

  009d9	51		 push	 ecx
  009da	0f 57 c0	 xorps	 xmm0, xmm0
  009dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e2	51		 push	 ecx
  009e3	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  009e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ed	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5502 : 
; 5503 : 	print_mono_font_string ("NG");

  009f2	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  009f7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5504 : 
; 5505 : 	////////////////////////////////////////
; 5506 : 
; 5507 : 	fvalue = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  009fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a01	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  00a09	0f 57 c9	 xorps	 xmm1, xmm1
  00a0c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00a10	76 0d		 jbe	 SHORT $LN33@draw_engin
  00a12	0f 57 c0	 xorps	 xmm0, xmm0
  00a15	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv364[ebp], xmm0
  00a1d	eb 50		 jmp	 SHORT $LN34@draw_engin
$LN33@draw_engin:
  00a1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a25	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  00a2d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00a35	76 12		 jbe	 SHORT $LN31@draw_engin
  00a37	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00a3f	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv363[ebp], xmm0
  00a47	eb 16		 jmp	 SHORT $LN32@draw_engin
$LN31@draw_engin:
  00a49	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a4f	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  00a57	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv363[ebp], xmm0
$LN32@draw_engin:
  00a5f	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv363[ebp]
  00a67	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv364[ebp], xmm0
$LN34@draw_engin:
  00a6f	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv364[ebp]
  00a77	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5508 : 
; 5509 : 	convert_float_to_int (fvalue, &ivalue);

  00a7c	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00a7f	50		 push	 eax
  00a80	51		 push	 ecx
  00a81	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00a86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5510 : 
; 5511 : 	sprintf (s, "%03d", ivalue);

  00a90	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00a93	50		 push	 eax
  00a94	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00a99	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00a9c	51		 push	 ecx
  00a9d	e8 00 00 00 00	 call	 _sprintf
  00aa2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5512 : 
; 5513 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00aa5	51		 push	 ecx
  00aa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00aae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab3	51		 push	 ecx
  00ab4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00abc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5514 : 
; 5515 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00ac6	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ac9	50		 push	 eax
  00aca	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00acf	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv790[ebp]
  00ad5	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv790[ebp]
  00add	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ae5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ae9	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5516 : 
; 5517 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00aee	51		 push	 ecx
  00aef	0f 57 c0	 xorps	 xmm0, xmm0
  00af2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af7	51		 push	 ecx
  00af8	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00afd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b02	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5518 : 
; 5519 : 	print_mono_font_string (s);

  00b07	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b0a	50		 push	 eax
  00b0b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5520 : 
; 5521 : 	////////////////////////////////////////
; 5522 : 
; 5523 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00b10	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00b15	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00b1d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b21	51		 push	 ecx
  00b22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b27	51		 push	 ecx
  00b28	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	51		 push	 ecx
  00b33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bebd70a4
  00b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b40	51		 push	 ecx
  00b41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4e	51		 push	 ecx
  00b4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  00b57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5c	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 5524 : 
; 5525 : 	#undef X_ORG
; 5526 : 	#undef Y_ORG
; 5527 : 	#undef WIDTH
; 5528 : 	#undef HEIGHT
; 5529 : 
; 5530 : 
; 5531 : #if 0
; 5532 : 	//
; 5533 : 	// NG2
; 5534 : 	//
; 5535 : 
; 5536 : 	#define X_ORG	((float) (0.4))
; 5537 : 	#define Y_ORG	((float) (0.5))
; 5538 : 	#define WIDTH	((float) (0.06))
; 5539 : 	#define HEIGHT	((float) (1.0))
; 5540 : 
; 5541 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5542 : 	// as a constant as a function parameter will use a double (even though
; 5543 : 	// definition is available and says const float), which causes later parameters
; 5544 : 	// to be wrong
; 5545 : 	bottom_edge = (Y_ORG - HEIGHT);
; 5546 : 
; 5547 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);
; 5548 : 
; 5549 : 	x_adjust = get_mono_font_string_width ("NG") * -0.5;
; 5550 : 
; 5551 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5552 : 
; 5553 : 	print_mono_font_string ("NG");
; 5554 : 	////////////////////////////////////////
; 5555 : 
; 5556 : 	fvalue = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);
; 5557 : 
; 5558 : 	convert_float_to_int (fvalue, &ivalue);
; 5559 : 
; 5560 : 	sprintf (s, "%03d", ivalue);
; 5561 : 
; 5562 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);
; 5563 : 
; 5564 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 5565 : 
; 5566 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5567 : 
; 5568 : 	print_mono_font_string (s);
; 5569 : 
; 5570 : 	////////////////////////////////////////
; 5571 : 
; 5572 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);
; 5573 : 
; 5574 : 	#undef X_ORG
; 5575 : 	#undef Y_ORG
; 5576 : 	#undef WIDTH
; 5577 : 	#undef HEIGHT
; 5578 : #endif
; 5579 : 
; 5580 : 	//
; 5581 : 	// TQ1
; 5582 : 	//
; 5583 : 
; 5584 : 	#define X_ORG	((float) (-0.6))
; 5585 : 	#define Y_ORG	((float) (0.5))
; 5586 : 	#define WIDTH	((float) (0.06))
; 5587 : 	#define HEIGHT	((float) (1.0))
; 5588 : 
; 5589 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5590 : 	// as a constant as a function parameter will use a double (even though
; 5591 : 	// definition is available and says const float), which causes later parameters
; 5592 : 	// to be wrong
; 5593 : 	bottom_edge = (Y_ORG - HEIGHT);

  00b61	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00b69	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 5594 : 
; 5595 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00b6e	51		 push	 ecx
  00b6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00b77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7c	51		 push	 ecx
  00b7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00b85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5596 : 
; 5597 : 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;

  00b8f	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  00b94	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b99	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv814[ebp]
  00b9f	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv814[ebp]
  00ba7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00baf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00bb3	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5598 : 
; 5599 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00bb8	51		 push	 ecx
  00bb9	0f 57 c0	 xorps	 xmm0, xmm0
  00bbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc1	51		 push	 ecx
  00bc2	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00bc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5600 : 
; 5601 : 	print_mono_font_string ("TQ");

  00bd1	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  00bd6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5602 : 
; 5603 : 	////////////////////////////////////////
; 5604 : 
; 5605 : 	fvalue = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  00bdb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00be0	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  00be8	0f 57 c9	 xorps	 xmm1, xmm1
  00beb	66 0f 2f c8	 comisd	 xmm1, xmm0
  00bef	76 0d		 jbe	 SHORT $LN37@draw_engin
  00bf1	0f 57 c0	 xorps	 xmm0, xmm0
  00bf4	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv411[ebp], xmm0
  00bfc	eb 50		 jmp	 SHORT $LN38@draw_engin
$LN37@draw_engin:
  00bfe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00c04	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  00c0c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00c14	76 12		 jbe	 SHORT $LN35@draw_engin
  00c16	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00c1e	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv410[ebp], xmm0
  00c26	eb 16		 jmp	 SHORT $LN36@draw_engin
$LN35@draw_engin:
  00c28	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00c2e	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  00c36	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv410[ebp], xmm0
$LN36@draw_engin:
  00c3e	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv410[ebp]
  00c46	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv411[ebp], xmm0
$LN38@draw_engin:
  00c4e	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv411[ebp]
  00c56	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5606 : 
; 5607 : 	convert_float_to_int (fvalue, &ivalue);

  00c5b	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00c5e	50		 push	 eax
  00c5f	51		 push	 ecx
  00c60	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00c65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5608 : 
; 5609 : 	sprintf (s, "%03d", ivalue);

  00c6f	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00c72	50		 push	 eax
  00c73	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00c78	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00c7b	51		 push	 ecx
  00c7c	e8 00 00 00 00	 call	 _sprintf
  00c81	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5610 : 
; 5611 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00c84	51		 push	 ecx
  00c85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00c8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c92	51		 push	 ecx
  00c93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00c9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5612 : 
; 5613 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00ca5	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ca8	50		 push	 eax
  00ca9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00cae	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv840[ebp]
  00cb4	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv840[ebp]
  00cbc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00cc4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00cc8	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5614 : 
; 5615 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00ccd	51		 push	 ecx
  00cce	0f 57 c0	 xorps	 xmm0, xmm0
  00cd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd6	51		 push	 ecx
  00cd7	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5616 : 
; 5617 : 	print_mono_font_string (s);

  00ce6	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ce9	50		 push	 eax
  00cea	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5618 : 
; 5619 : 	////////////////////////////////////////
; 5620 : 
; 5621 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00cef	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00cf4	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00cfc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d00	51		 push	 ecx
  00d01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d06	51		 push	 ecx
  00d07	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00d0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d11	51		 push	 ecx
  00d12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb86
  00d1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1f	51		 push	 ecx
  00d20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2d	51		 push	 ecx
  00d2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00d36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3b	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 5622 : 
; 5623 : 	#undef X_ORG
; 5624 : 	#undef Y_ORG
; 5625 : 	#undef WIDTH
; 5626 : 	#undef HEIGHT
; 5627 : 
; 5628 : #if 0
; 5629 : 	//
; 5630 : 	// TQ2
; 5631 : 	//
; 5632 : 
; 5633 : 	#define X_ORG	((float) (0.6))
; 5634 : 	#define Y_ORG	((float) (0.5))
; 5635 : 	#define WIDTH	((float) (0.06))
; 5636 : 	#define HEIGHT	((float) (1.0))
; 5637 : 
; 5638 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5639 : 	// as a constant as a function parameter will use a double (even though
; 5640 : 	// definition is available and says const float), which causes later parameters
; 5641 : 	// to be wrong
; 5642 : 	bottom_edge = (Y_ORG - HEIGHT);
; 5643 : 
; 5644 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);
; 5645 : 
; 5646 : 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;
; 5647 : 
; 5648 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5649 : 
; 5650 : 	print_mono_font_string ("TQ");
; 5651 : 
; 5652 : 	////////////////////////////////////////
; 5653 : 
; 5654 : 	fvalue = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);
; 5655 : 
; 5656 : 	convert_float_to_int (fvalue, &ivalue);
; 5657 : 
; 5658 : 	sprintf (s, "%03d", ivalue);
; 5659 : 
; 5660 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);
; 5661 : 
; 5662 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 5663 : 
; 5664 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5665 : 
; 5666 : 	print_mono_font_string (s);
; 5667 : 
; 5668 : 	////////////////////////////////////////
; 5669 : 
; 5670 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);
; 5671 : 
; 5672 : 	#undef X_ORG
; 5673 : 	#undef Y_ORG
; 5674 : 	#undef WIDTH
; 5675 : 	#undef HEIGHT
; 5676 : #endif
; 5677 : 
; 5678 : 	//
; 5679 : 	// TGT1
; 5680 : 	//
; 5681 : 
; 5682 : 	#define X_ORG	((float) (-0.8))
; 5683 : 	#define Y_ORG	((float) (0.5))
; 5684 : 	#define WIDTH	((float) (0.06))
; 5685 : 	#define HEIGHT	((float) (0.8333))
; 5686 : 
; 5687 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5688 : 	// as a constant as a function parameter will use a double (even though
; 5689 : 	// definition is available and says const float), which causes later parameters
; 5690 : 	// to be wrong
; 5691 : 	bottom_edge = (Y_ORG - HEIGHT);

  00d40	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beaaa64c
  00d48	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 5692 : 
; 5693 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00d4d	51		 push	 ecx
  00d4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00d56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5b	51		 push	 ecx
  00d5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00d64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d69	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5694 : 
; 5695 : 	x_adjust = get_mono_font_string_width ("TG") * -0.5;

  00d6e	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  00d73	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d78	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv864[ebp]
  00d7e	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv864[ebp]
  00d86	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00d8e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d92	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5696 : 
; 5697 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00d97	51		 push	 ecx
  00d98	0f 57 c0	 xorps	 xmm0, xmm0
  00d9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da0	51		 push	 ecx
  00da1	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00da6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dab	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5698 : 
; 5699 : 	print_mono_font_string ("TG");

  00db0	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  00db5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5700 : 
; 5701 : 	////////////////////////////////////////
; 5702 : 
; 5703 : 	fvalue = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 999.0);

  00dba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00dbf	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00dc7	0f 57 c9	 xorps	 xmm1, xmm1
  00dca	66 0f 2f c8	 comisd	 xmm1, xmm0
  00dce	76 0d		 jbe	 SHORT $LN41@draw_engin
  00dd0	0f 57 c0	 xorps	 xmm0, xmm0
  00dd3	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv458[ebp], xmm0
  00ddb	eb 50		 jmp	 SHORT $LN42@draw_engin
$LN41@draw_engin:
  00ddd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00de3	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00deb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f380000000000
  00df3	76 12		 jbe	 SHORT $LN39@draw_engin
  00df5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f380000000000
  00dfd	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv457[ebp], xmm0
  00e05	eb 16		 jmp	 SHORT $LN40@draw_engin
$LN39@draw_engin:
  00e07	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e0d	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00e15	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv457[ebp], xmm0
$LN40@draw_engin:
  00e1d	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv457[ebp]
  00e25	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv458[ebp], xmm0
$LN42@draw_engin:
  00e2d	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv458[ebp]
  00e35	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 5704 : 
; 5705 : 	convert_float_to_int (fvalue, &ivalue);

  00e3a	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00e3d	50		 push	 eax
  00e3e	51		 push	 ecx
  00e3f	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00e44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e49	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 5706 : 
; 5707 : 	sprintf (s, "%03d", ivalue);

  00e4e	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00e51	50		 push	 eax
  00e52	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00e57	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00e5a	51		 push	 ecx
  00e5b	e8 00 00 00 00	 call	 _sprintf
  00e60	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5708 : 
; 5709 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00e63	51		 push	 ecx
  00e64	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00e6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e71	51		 push	 ecx
  00e72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00e7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5710 : 
; 5711 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00e84	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e87	50		 push	 eax
  00e88	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e8d	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv890[ebp]
  00e93	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv890[ebp]
  00e9b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ea3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ea7	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5712 : 
; 5713 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00eac	51		 push	 ecx
  00ead	0f 57 c0	 xorps	 xmm0, xmm0
  00eb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb5	51		 push	 ecx
  00eb6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ebb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5714 : 
; 5715 : 	print_mono_font_string (s);

  00ec5	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ec8	50		 push	 eax
  00ec9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5716 : 
; 5717 : 	////////////////////////////////////////
; 5718 : 
; 5719 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);

  00ece	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00ed3	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  00edb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00edf	51		 push	 ecx
  00ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee5	51		 push	 ecx
  00ee6	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00eeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef0	51		 push	 ecx
  00ef1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb9
  00ef9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00efe	51		 push	 ecx
  00eff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0c	51		 push	 ecx
  00f0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  00f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1a	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 5720 : 
; 5721 : 	#undef X_ORG
; 5722 : 	#undef Y_ORG
; 5723 : 	#undef WIDTH
; 5724 : 	#undef HEIGHT
; 5725 : 
; 5726 : #if 0
; 5727 : 	//
; 5728 : 	// TGT2
; 5729 : 	//
; 5730 : 
; 5731 : 	#define X_ORG	((float) (0.8))
; 5732 : 	#define Y_ORG	((float) (0.5))
; 5733 : 	#define WIDTH	((float) (0.06))
; 5734 : 	#define HEIGHT	((float) (0.8333))
; 5735 : 
; 5736 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 5737 : 	// as a constant as a function parameter will use a double (even though
; 5738 : 	// definition is available and says const float), which causes later parameters
; 5739 : 	// to be wrong
; 5740 : 	bottom_edge = (Y_ORG - HEIGHT);
; 5741 : 
; 5742 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);
; 5743 : 
; 5744 : 	x_adjust = get_mono_font_string_width ("TG") * -0.5;
; 5745 : 
; 5746 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5747 : 
; 5748 : 	print_mono_font_string ("TG");
; 5749 : 
; 5750 : 	////////////////////////////////////////
; 5751 : 
; 5752 : 	fvalue = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 999.0);
; 5753 : 
; 5754 : 	convert_float_to_int (fvalue, &ivalue);
; 5755 : 
; 5756 : 	sprintf (s, "%03d", ivalue);
; 5757 : 
; 5758 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);
; 5759 : 
; 5760 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 5761 : 
; 5762 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 5763 : 
; 5764 : 	print_mono_font_string (s);
; 5765 : 
; 5766 : 	////////////////////////////////////////
; 5767 : 
; 5768 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);
; 5769 : 
; 5770 : 	#undef X_ORG
; 5771 : 	#undef Y_ORG
; 5772 : 	#undef WIDTH
; 5773 : 	#undef HEIGHT
; 5774 : #endif
; 5775 : }

  00f1f	5f		 pop	 edi
  00f20	5e		 pop	 esi
  00f21	5b		 pop	 ebx
  00f22	8b e5		 mov	 esp, ebp
  00f24	5d		 pop	 ebp
  00f25	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_engine_bar@@YGXMMMMM@Z
_TEXT	SEGMENT
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_f_x1$ = 8						; size = 4
_f_y1$ = 12						; size = 4
_f_x2$ = 16						; size = 4
_f_y2$ = 20						; size = 4
_fvalue$ = 24						; size = 4
?draw_engine_bar@@YGXMMMMM@Z PROC			; draw_engine_bar, COMDAT

; 5175 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5176 : 	int x1, x2, y1, y2;
; 5177 : 
; 5178 : 	draw_2d_box(f_x1, f_y1, f_x2, f_y2, FALSE, FALSE, MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f_y2$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	51		 push	 ecx
  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _f_x2$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	51		 push	 ecx
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f_y1$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	51		 push	 ecx
  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _f_x1$[ebp]
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 5179 : 
; 5180 : 	get_2d_int_screen_coordinates (f_x1, f_y2 + (fvalue * (f_y1 - f_y2)), &x1, &y1);

  0004d	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  00050	50		 push	 eax
  00051	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f_y1$[ebp]
  0005a	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _f_y2$[ebp]
  0005f	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _fvalue$[ebp]
  00064	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _f_y2$[ebp]
  00069	51		 push	 ecx
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	51		 push	 ecx
  00070	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _f_x1$[ebp]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 5181 : 	get_2d_int_screen_coordinates (f_x2, f_y2, &x2, &y2);

  0007f	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00082	50		 push	 eax
  00083	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00086	51		 push	 ecx
  00087	51		 push	 ecx
  00088	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f_y2$[ebp]
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	51		 push	 ecx
  00093	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _f_x2$[ebp]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 5182 : 	set_block (x1, y1, x2, y2, MFD_COLOUR1);

  000a2	b8 04 00 00 00	 mov	 eax, 4
  000a7	6b c8 00	 imul	 ecx, eax, 0
  000aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000b0	52		 push	 edx
  000b1	8b 45 f0	 mov	 eax, DWORD PTR _y2$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _x2$[ebp]
  000b8	51		 push	 ecx
  000b9	8b 55 f4	 mov	 edx, DWORD PTR _y1$[ebp]
  000bc	52		 push	 edx
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 5183 : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 14 00	 ret	 20			; 00000014H
?draw_engine_bar@@YGXMMMMM@Z ENDP			; draw_engine_bar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv227 = -72						; size = 4
tv218 = -72						; size = 4
tv211 = -72						; size = 4
tv204 = -72						; size = 4
tv195 = -72						; size = 4
tv186 = -72						; size = 4
tv177 = -72						; size = 4
tv168 = -72						; size = 4
tv159 = -72						; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 5109 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5110 : 	float
; 5111 : 		y_adjust;
; 5112 : 
; 5113 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	74 11		 je	 SHORT $LN2@draw_syste

; 5114 : 	{
; 5115 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00012	6a 05		 push	 5
  00014	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5116 : 
; 5117 : 		y_adjust = 0.0;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5118 : 	}
; 5119 : 	else

  00021	eb 0f		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 5120 : 	{
; 5121 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5122 : 
; 5123 : 		y_adjust = 0.0;

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN3@draw_syste:

; 5124 : 	}
; 5125 : 
; 5126 : 	y_adjust = print_main_mfd_system_message ("FLIR", "FAIL", kiowa_damage.flir, y_adjust);

  00032	51		 push	 ecx
  00033	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00042	83 e0 01	 and	 eax, 1
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00050	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00055	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5127 : 
; 5128 : 	y_adjust = print_main_mfd_system_message ("DTV", "FAIL", kiowa_damage.dtv, y_adjust);

  00058	51		 push	 ecx
  00059	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00068	d1 e8		 shr	 eax, 1
  0006a	83 e0 01	 and	 eax, 1
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  00078	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0007d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5129 : 
; 5130 : 	y_adjust = print_main_mfd_system_message ("LASER DESIGNATOR", "FAIL", kiowa_damage.laser_designator, y_adjust);

  00080	51		 push	 ecx
  00081	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	50		 push	 eax
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  000a1	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  000a6	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5131 : 
; 5132 : 	y_adjust = print_main_mfd_system_message ("IR JAMMER", "FAIL", kiowa_damage.infra_red_jammer, y_adjust);

  000a9	51		 push	 ecx
  000aa	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  000b9	c1 e8 03	 shr	 eax, 3
  000bc	83 e0 01	 and	 eax, 1
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  000ca	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  000cf	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5133 : 
; 5134 : 	y_adjust = print_main_mfd_system_message ("NAVIGATION COMPUTER", "FAIL", kiowa_damage.navigation_computer, y_adjust);

  000d2	51		 push	 ecx
  000d3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  000e2	c1 e8 04	 shr	 eax, 4
  000e5	83 e0 01	 and	 eax, 1
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  000f3	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  000f8	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5135 : 
; 5136 : 	y_adjust = print_main_mfd_system_message ("COMMUNICATIONS", "FAIL", kiowa_damage.communications, y_adjust);

  000fb	51		 push	 ecx
  000fc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0010b	c1 e8 05	 shr	 eax, 5
  0010e	83 e0 01	 and	 eax, 1
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  0011c	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00121	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5137 : 
; 5138 : 	y_adjust = print_main_mfd_system_message ("RADAR WARNING SYSTEM", "FAIL", kiowa_damage.radar_warning_system, y_adjust);

  00124	51		 push	 ecx
  00125	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00134	c1 e8 06	 shr	 eax, 6
  00137	83 e0 01	 and	 eax, 1
  0013a	50		 push	 eax
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  00145	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0014a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5139 : 
; 5140 : 	y_adjust = print_main_mfd_system_message ("PNVS", "FAIL", kiowa_damage.pnvs, y_adjust);

  0014d	51		 push	 ecx
  0014e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0015d	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00160	83 e0 01	 and	 eax, 1
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKCLELC@PNVS@
  0016e	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00173	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5141 : 
; 5142 : 	y_adjust = print_main_mfd_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust);

  00176	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0017b	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00181	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00187	74 09		 je	 SHORT $LN7@draw_syste
  00189	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv159[ebp], 1
  00190	eb 07		 jmp	 SHORT $LN8@draw_syste
$LN7@draw_syste:
  00192	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN8@draw_syste:
  00199	51		 push	 ecx
  0019a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0019f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a4	8b 55 b8	 mov	 edx, DWORD PTR tv159[ebp]
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  001b2	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  001b7	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5143 : 
; 5144 : 	y_adjust = print_main_mfd_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust);

  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001bf	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  001c5	83 e1 02	 and	 ecx, 2
  001c8	74 09		 je	 SHORT $LN9@draw_syste
  001ca	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv168[ebp], 1
  001d1	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  001d3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
$LN10@draw_syste:
  001da	51		 push	 ecx
  001db	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e5	8b 55 b8	 mov	 edx, DWORD PTR tv168[ebp]
  001e8	52		 push	 edx
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001ee	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  001f3	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  001f8	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5145 : 
; 5146 : 	y_adjust = print_main_mfd_system_message ("TAIL ROTOR", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_TAIL_ROTOR), y_adjust);

  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00200	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00206	83 e1 04	 and	 ecx, 4
  00209	74 09		 je	 SHORT $LN11@draw_syste
  0020b	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv177[ebp], 1
  00212	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  00214	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv177[ebp], 0
$LN12@draw_syste:
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	8b 55 b8	 mov	 edx, DWORD PTR tv177[ebp]
  00229	52		 push	 edx
  0022a	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
  00234	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00239	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5147 : 
; 5148 : 	y_adjust = print_main_mfd_system_message ("ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust);

  0023c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00241	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00247	83 e1 08	 and	 ecx, 8
  0024a	74 09		 je	 SHORT $LN13@draw_syste
  0024c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv186[ebp], 1
  00253	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  00255	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv186[ebp], 0
$LN14@draw_syste:
  0025c	51		 push	 ecx
  0025d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	8b 55 b8	 mov	 edx, DWORD PTR tv186[ebp]
  0026a	52		 push	 edx
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_06LKDHJJCH@ENGINE@
  00275	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0027a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5149 : 
; 5150 : 	y_adjust = print_main_mfd_system_message ("SPU", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_APU), y_adjust);

  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00282	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00288	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  0028e	74 09		 je	 SHORT $LN15@draw_syste
  00290	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv195[ebp], 1
  00297	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  00299	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv195[ebp], 0
$LN16@draw_syste:
  002a0	51		 push	 ecx
  002a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ab	8b 55 b8	 mov	 edx, DWORD PTR tv195[ebp]
  002ae	52		 push	 edx
  002af	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002b4	68 00 00 00 00	 push	 OFFSET ??_C@_03KMHDAHAO@SPU@
  002b9	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  002be	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5151 : 
; 5152 : 	y_adjust = print_main_mfd_system_message ("HYDRAULIC PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust);

  002c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c6	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002cc	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  002d2	74 09		 je	 SHORT $LN17@draw_syste
  002d4	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv204[ebp], 1
  002db	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  002dd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv204[ebp], 0
$LN18@draw_syste:
  002e4	51		 push	 ecx
  002e5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	8b 55 b8	 mov	 edx, DWORD PTR tv204[ebp]
  002f2	52		 push	 edx
  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  002f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
  002fd	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00302	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5153 : 
; 5154 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  00305	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0030a	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00310	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00316	74 09		 je	 SHORT $LN19@draw_syste
  00318	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv211[ebp], 1
  0031f	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  00321	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv211[ebp], 0
$LN20@draw_syste:
  00328	83 7d b8 00	 cmp	 DWORD PTR tv211[ebp], 0
  0032c	74 46		 je	 SHORT $LN4@draw_syste

; 5155 : 	{
; 5156 : 		y_adjust = print_main_mfd_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust);

  0032e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00333	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00339	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  0033f	74 09		 je	 SHORT $LN21@draw_syste
  00341	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv218[ebp], 1
  00348	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  0034a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
$LN22@draw_syste:
  00351	51		 push	 ecx
  00352	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	8b 55 b8	 mov	 edx, DWORD PTR tv218[ebp]
  0035f	52		 push	 edx
  00360	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  00365	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  0036a	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0036f	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 5157 : 	}
; 5158 : 	else

  00372	eb 44		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 5159 : 	{
; 5160 : 		y_adjust = print_main_mfd_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust);

  00374	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00379	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0037f	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00385	74 09		 je	 SHORT $LN23@draw_syste
  00387	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv227[ebp], 1
  0038e	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  00390	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv227[ebp], 0
$LN24@draw_syste:
  00397	51		 push	 ecx
  00398	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	8b 55 b8	 mov	 edx, DWORD PTR tv227[ebp]
  003a5	52		 push	 edx
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  003b0	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  003b5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 5161 : 	}
; 5162 : }

  003b8	5f		 pop	 edi
  003b9	5e		 pop	 esi
  003ba	5b		 pop	 ebx
  003bb	8b e5		 mov	 esp, ebp
  003bd	5d		 pop	 ebp
  003be	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?print_main_mfd_system_message@@YGMPAD0HM@Z
_TEXT	SEGMENT
tv160 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
?print_main_mfd_system_message@@YGMPAD0HM@Z PROC	; print_main_mfd_system_message, COMDAT

; 5061 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5062 : 	char
; 5063 : 		*status;
; 5064 : 
; 5065 : 	float
; 5066 : 		width;
; 5067 : 
; 5068 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_main
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_main:

; 5069 : 
; 5070 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_main
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_main:

; 5071 : 
; 5072 : 	if (fail)

  00045	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00049	74 1c		 je	 SHORT $LN4@print_main

; 5073 : 	{
; 5074 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 0f	 imul	 ecx, eax, 15
  00053	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5075 : 
; 5076 : 		status = warning;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 5077 : 	}
; 5078 : 	else

  00065	eb 1b		 jmp	 SHORT $LN5@print_main
$LN4@print_main:

; 5079 : 	{
; 5080 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 13	 imul	 ecx, eax, 19
  0006f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5081 : 
; 5082 : 		status = "OK";

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_main:

; 5083 : 	}
; 5084 : 
; 5085 : 	set_2d_mono_font_position (-0.9, 0.92125);

  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6bd70a
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5086 : 
; 5087 : 	set_mono_font_rel_position (1.0, y_adjust);

  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5088 : 
; 5089 : 	print_mono_font_string (equipment);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5090 : 
; 5091 : 	width = get_mono_font_string_width (status);

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000d3	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 5092 : 
; 5093 : 	set_2d_mono_font_position (0.9, 0.92125);

  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6bd70a
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5094 : 
; 5095 : 	set_mono_font_rel_position (-width, y_adjust);

  000f7	51		 push	 ecx
  000f8	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  00107	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0010e	51		 push	 ecx
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5096 : 
; 5097 : 	print_mono_font_string (status);

  00119	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5098 : 
; 5099 : 	y_adjust += get_mono_font_char_height ('X');

  00122	6a 58		 push	 88			; 00000058H
  00124	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00129	d9 5d b4	 fstp	 DWORD PTR tv160[ebp]
  0012c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv160[ebp]
  00131	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00136	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5100 : 
; 5101 : 	return (y_adjust);

  0013b	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 5102 : }

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 10 00	 ret	 16			; 00000010H
?print_main_mfd_system_message@@YGMPAD0HM@Z ENDP	; print_main_mfd_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv839 = -184						; size = 8
tv757 = -184						; size = 8
tv654 = -184						; size = 8
tv573 = -184						; size = 8
tv560 = -184						; size = 8
tv545 = -184						; size = 8
tv532 = -184						; size = 8
tv515 = -184						; size = 8
tv502 = -184						; size = 8
tv78 = -184						; size = 4
tv740 = -180						; size = 4
tv70 = -180						; size = 4
_selected_weapon$ = -112				; size = 4
_weapon_sub_type$ = -108				; size = 4
_en$ = -104						; size = 4
_y_adjust$ = -100					; size = 4
_x_adjust$ = -96					; size = 4
_damaged$ = -92						; size = 4
_number$ = -88						; size = 4
_result$ = -84						; size = 4
_s$ = -80						; size = 80
?draw_weapon_display_mfd@@YGXXZ PROC			; draw_weapon_display_mfd, COMDAT

; 4632 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4633 : 	char
; 4634 : 		s[80];
; 4635 : 
; 4636 : 	int
; 4637 : 		result,
; 4638 : 		number,
; 4639 : 		damaged;
; 4640 : 
; 4641 : 	float
; 4642 : 		x_adjust,
; 4643 : 		y_adjust;
; 4644 : 
; 4645 : 	entity
; 4646 : 		*en;
; 4647 : 
; 4648 : 	entity_sub_types
; 4649 : 		weapon_sub_type,
; 4650 : 		selected_weapon;
; 4651 : 
; 4652 : 	en = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 45 98	 mov	 DWORD PTR _en$[ebp], eax

; 4653 : 
; 4654 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00014	83 7d 98 00	 cmp	 DWORD PTR _en$[ebp], 0
  00018	74 0d		 je	 SHORT $LN50@draw_weapo
  0001a	8b 45 98	 mov	 eax, DWORD PTR _en$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00025	eb 24		 jmp	 SHORT $LN51@draw_weapo
$LN50@draw_weapo:
  00027	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  0002d	83 c2 16	 add	 edx, 22			; 00000016H
  00030	52		 push	 edx
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00041	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN51@draw_weapo:
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 0c		 je	 SHORT $LN52@draw_weapo
  00054	c7 85 48 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005e	eb 24		 jmp	 SHORT $LN53@draw_weapo
$LN52@draw_weapo:
  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  00066	83 c2 16	 add	 edx, 22			; 00000016H
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN53@draw_weapo:
  00084	68 b8 00 00 00	 push	 184			; 000000b8H
  00089	8b 4d 98	 mov	 ecx, DWORD PTR _en$[ebp]
  0008c	51		 push	 ecx
  0008d	69 95 4c ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 90	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 4655 : 
; 4656 : 	////////////////////////////////////////
; 4657 : 	//
; 4658 : 	// arm
; 4659 : 	//
; 4660 : 	////////////////////////////////////////
; 4661 : 
; 4662 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  000a9	83 7d 90 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  000ad	74 16		 je	 SHORT $LN2@draw_weapo

; 4663 : 	{
; 4664 : 		set_mono_font_colour (MFD_COLOUR_RED);

  000af	b8 04 00 00 00	 mov	 eax, 4
  000b4	6b c8 0f	 imul	 ecx, eax, 15
  000b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4665 : 	}
; 4666 : 	else

  000c3	eb 14		 jmp	 SHORT $LN3@draw_weapo
$LN2@draw_weapo:

; 4667 : 	{
; 4668 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  000c5	b8 04 00 00 00	 mov	 eax, 4
  000ca	6b c8 13	 imul	 ecx, eax, 19
  000cd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN3@draw_weapo:

; 4669 : 	}
; 4670 : 
; 4671 : 	if (draw_large_mfd)

  000d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000e0	74 71		 je	 SHORT $LN4@draw_weapo

; 4672 : 	{
; 4673 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  000e2	6a 05		 push	 5
  000e4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4674 : 
; 4675 : 		set_2d_mono_font_position (0.0, 0.5);

  000e9	51		 push	 ecx
  000ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f7	51		 push	 ecx
  000f8	0f 57 c0	 xorps	 xmm0, xmm0
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4676 : 
; 4677 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  00105	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  0010a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0010f	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv502[ebp]
  00115	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv502[ebp]
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00125	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00129	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4678 : 
; 4679 : 		set_mono_font_rel_position (x_adjust, 0.0);

  0012e	51		 push	 ecx
  0012f	0f 57 c0	 xorps	 xmm0, xmm0
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4680 : 
; 4681 : 		print_mono_font_string ("ARM");

  00147	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  0014c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4682 : 	}
; 4683 : 	else

  00151	eb 6f		 jmp	 SHORT $LN5@draw_weapo
$LN4@draw_weapo:

; 4684 : 	{
; 4685 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00153	6a 01		 push	 1
  00155	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4686 : 
; 4687 : 		set_2d_mono_font_position (0.0, 0.5);

  0015a	51		 push	 ecx
  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	0f 57 c0	 xorps	 xmm0, xmm0
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4688 : 
; 4689 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  00176	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  0017b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00180	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv515[ebp]
  00186	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv515[ebp]
  0018e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00196	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019a	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4690 : 
; 4691 : 		set_mono_font_rel_position (x_adjust, 0.0);

  0019f	51		 push	 ecx
  001a0	0f 57 c0	 xorps	 xmm0, xmm0
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	51		 push	 ecx
  001a9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4692 : 
; 4693 : 		print_mono_font_string ("ARM");

  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  001bd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@draw_weapo:

; 4694 : 	}
; 4695 : 
; 4696 : 	////////////////////////////////////////
; 4697 : 	//
; 4698 : 	// auto-counter measures
; 4699 : 	//
; 4700 : 	////////////////////////////////////////
; 4701 : 
; 4702 : 	if (get_global_auto_counter_measures ())

  001c2	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  001c9	74 16		 je	 SHORT $LN6@draw_weapo

; 4703 : 	{
; 4704 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  001cb	b8 04 00 00 00	 mov	 eax, 4
  001d0	6b c8 13	 imul	 ecx, eax, 19
  001d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001d9	52		 push	 edx
  001da	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4705 : 	}
; 4706 : 	else

  001df	eb 14		 jmp	 SHORT $LN7@draw_weapo
$LN6@draw_weapo:

; 4707 : 	{
; 4708 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  001e1	b8 04 00 00 00	 mov	 eax, 4
  001e6	6b c8 13	 imul	 ecx, eax, 19
  001e9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001ef	52		 push	 edx
  001f0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN7@draw_weapo:

; 4709 : 	}
; 4710 : 
; 4711 : 	if (draw_large_mfd)

  001f5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001fc	0f 84 de 00 00
	00		 je	 $LN8@draw_weapo

; 4712 : 	{
; 4713 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00202	6a 04		 push	 4
  00204	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4714 : 
; 4715 : 		set_2d_mono_font_position (0.0, 0.3);

  00209	51		 push	 ecx
  0020a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00212	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00217	51		 push	 ecx
  00218	0f 57 c0	 xorps	 xmm0, xmm0
  0021b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00220	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4716 : 
; 4717 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  00225	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0022a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0022f	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv532[ebp]
  00235	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv532[ebp]
  0023d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00245	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00249	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4718 : 
; 4719 : 		set_mono_font_rel_position (x_adjust, 0.0);

  0024e	51		 push	 ecx
  0024f	0f 57 c0	 xorps	 xmm0, xmm0
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4720 : 
; 4721 : 		print_mono_font_string ("AUTO");

  00267	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0026c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4722 : 
; 4723 : 		set_2d_mono_font_position (0.0, 0.3);

  00271	51		 push	 ecx
  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	51		 push	 ecx
  00280	0f 57 c0	 xorps	 xmm0, xmm0
  00283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00288	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4724 : 
; 4725 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00292	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00297	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv545[ebp]
  0029d	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv545[ebp]
  002a5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b1	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4726 : 
; 4727 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  002b6	6a 58		 push	 88			; 00000058H
  002b8	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  002bd	51		 push	 ecx
  002be	d9 1c 24	 fstp	 DWORD PTR [esp]
  002c1	51		 push	 ecx
  002c2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4728 : 
; 4729 : 		print_mono_font_string ("C/M");

  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  002d6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4730 : 	}
; 4731 : 	else

  002db	e9 d9 00 00 00	 jmp	 $LN9@draw_weapo
$LN8@draw_weapo:

; 4732 : 	{
; 4733 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  002e0	6a 01		 push	 1
  002e2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4734 : 
; 4735 : 		set_2d_mono_font_position (0.0, 0.3);

  002e7	51		 push	 ecx
  002e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  002f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f5	51		 push	 ecx
  002f6	0f 57 c0	 xorps	 xmm0, xmm0
  002f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fe	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4736 : 
; 4737 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  00303	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  00308	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0030d	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv560[ebp]
  00313	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv560[ebp]
  0031b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00323	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00327	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4738 : 
; 4739 : 		set_mono_font_rel_position (x_adjust, 0.0);

  0032c	51		 push	 ecx
  0032d	0f 57 c0	 xorps	 xmm0, xmm0
  00330	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00335	51		 push	 ecx
  00336	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0033b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00340	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4740 : 
; 4741 : 		print_mono_font_string ("AUTO");

  00345	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0034a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4742 : 
; 4743 : 		set_2d_mono_font_position (0.0, 0.3);

  0034f	51		 push	 ecx
  00350	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	51		 push	 ecx
  0035e	0f 57 c0	 xorps	 xmm0, xmm0
  00361	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00366	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4744 : 
; 4745 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00370	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00375	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv573[ebp]
  0037b	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv573[ebp]
  00383	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0038b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038f	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4746 : 
; 4747 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00394	6a 58		 push	 88			; 00000058H
  00396	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0039b	51		 push	 ecx
  0039c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0039f	51		 push	 ecx
  003a0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003aa	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4748 : 
; 4749 : 		print_mono_font_string ("C/M");

  003af	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  003b4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@draw_weapo:

; 4750 : 	}
; 4751 : 
; 4752 : 	////////////////////////////////////////
; 4753 : 	//
; 4754 : 	// chaff and flares
; 4755 : 	//
; 4756 : 	////////////////////////////////////////
; 4757 : 
; 4758 : 	if (draw_large_mfd)

  003b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003c0	74 16		 je	 SHORT $LN10@draw_weapo

; 4759 : 	{
; 4760 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  003c2	6a 04		 push	 4
  003c4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4761 : 
; 4762 : 		y_adjust = -6.0;

  003c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  003d1	f3 0f 11 45 9c	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4763 : 	}
; 4764 : 	else

  003d6	eb 14		 jmp	 SHORT $LN11@draw_weapo
$LN10@draw_weapo:

; 4765 : 	{
; 4766 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  003d8	6a 00		 push	 0
  003da	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4767 : 
; 4768 : 		y_adjust = -4.0;

  003df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  003e7	f3 0f 11 45 9c	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN11@draw_weapo:

; 4769 : 	}
; 4770 : 
; 4771 : 	//
; 4772 : 	// chaff
; 4773 : 	//
; 4774 : 
; 4775 : 	result = get_local_entity_weapon_hardpoint_info (en, KIOWA_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  003ec	8d 45 a4	 lea	 eax, DWORD PTR _damaged$[ebp]
  003ef	50		 push	 eax
  003f0	8d 4d a8	 lea	 ecx, DWORD PTR _number$[ebp]
  003f3	51		 push	 ecx
  003f4	8d 55 94	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  003f7	52		 push	 edx
  003f8	6a 43		 push	 67			; 00000043H
  003fa	6a 02		 push	 2
  003fc	8b 45 98	 mov	 eax, DWORD PTR _en$[ebp]
  003ff	50		 push	 eax
  00400	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00405	89 45 ac	 mov	 DWORD PTR _result$[ebp], eax

; 4776 : 
; 4777 : 	if (result)

  00408	83 7d ac 00	 cmp	 DWORD PTR _result$[ebp], 0
  0040c	0f 84 ca 00 00
	00		 je	 $LN20@draw_weapo

; 4778 : 	{
; 4779 : 		set_2d_mono_font_position (-0.675, 0.7);

  00412	51		 push	 ecx
  00413	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0041b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00420	51		 push	 ecx
  00421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  00429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4780 : 
; 4781 : 		if (!damaged)

  00433	83 7d a4 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00437	75 70		 jne	 SHORT $LN13@draw_weapo

; 4782 : 		{
; 4783 : 			if (number > 0)

  00439	83 7d a8 00	 cmp	 DWORD PTR _number$[ebp], 0
  0043d	7e 16		 jle	 SHORT $LN15@draw_weapo

; 4784 : 			{
; 4785 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  0043f	b8 04 00 00 00	 mov	 eax, 4
  00444	6b c8 13	 imul	 ecx, eax, 19
  00447	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0044d	52		 push	 edx
  0044e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4786 : 			}
; 4787 : 			else

  00453	eb 14		 jmp	 SHORT $LN16@draw_weapo
$LN15@draw_weapo:

; 4788 : 			{
; 4789 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00455	b8 04 00 00 00	 mov	 eax, 4
  0045a	6b c8 13	 imul	 ecx, eax, 19
  0045d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00463	52		 push	 edx
  00464	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN16@draw_weapo:

; 4790 : 			}
; 4791 : 
; 4792 : 			if (draw_large_mfd)

  00469	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00470	74 17		 je	 SHORT $LN17@draw_weapo

; 4793 : 			{
; 4794 : 				sprintf (s, "CHAFFx%02d", number);

  00472	8b 45 a8	 mov	 eax, DWORD PTR _number$[ebp]
  00475	50		 push	 eax
  00476	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
  0047b	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0047e	51		 push	 ecx
  0047f	e8 00 00 00 00	 call	 _sprintf
  00484	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4795 : 			}
; 4796 : 			else

  00487	eb 15		 jmp	 SHORT $LN18@draw_weapo
$LN17@draw_weapo:

; 4797 : 			{
; 4798 : 				sprintf (s, "Cx%02d", number);

  00489	8b 45 a8	 mov	 eax, DWORD PTR _number$[ebp]
  0048c	50		 push	 eax
  0048d	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  00492	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00495	51		 push	 ecx
  00496	e8 00 00 00 00	 call	 _sprintf
  0049b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@draw_weapo:

; 4799 : 			}
; 4800 : 
; 4801 : 			print_mono_font_string (s);

  0049e	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  004a1	50		 push	 eax
  004a2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4802 : 		}
; 4803 : 		else

  004a7	eb 33		 jmp	 SHORT $LN20@draw_weapo
$LN13@draw_weapo:

; 4804 : 		{
; 4805 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  004a9	b8 04 00 00 00	 mov	 eax, 4
  004ae	6b c8 13	 imul	 ecx, eax, 19
  004b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b7	52		 push	 edx
  004b8	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4806 : 
; 4807 : 			if (draw_large_mfd)

  004bd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004c4	74 0c		 je	 SHORT $LN19@draw_weapo

; 4808 : 			{
; 4809 : 				print_mono_font_string ("CHAFFxXX");

  004c6	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  004cb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4810 : 			}
; 4811 : 			else

  004d0	eb 0a		 jmp	 SHORT $LN20@draw_weapo
$LN19@draw_weapo:

; 4812 : 			{
; 4813 : 				print_mono_font_string ("CxXX");

  004d2	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  004d7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN20@draw_weapo:

; 4814 : 			}
; 4815 : 		}
; 4816 : 	}
; 4817 : 
; 4818 : 	//
; 4819 : 	// flare
; 4820 : 	//
; 4821 : 
; 4822 : 	result = get_local_entity_weapon_hardpoint_info (en, KIOWA_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  004dc	8d 45 a4	 lea	 eax, DWORD PTR _damaged$[ebp]
  004df	50		 push	 eax
  004e0	8d 4d a8	 lea	 ecx, DWORD PTR _number$[ebp]
  004e3	51		 push	 ecx
  004e4	8d 55 94	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  004e7	52		 push	 edx
  004e8	6a 44		 push	 68			; 00000044H
  004ea	6a 02		 push	 2
  004ec	8b 45 98	 mov	 eax, DWORD PTR _en$[ebp]
  004ef	50		 push	 eax
  004f0	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  004f5	89 45 ac	 mov	 DWORD PTR _result$[ebp], eax

; 4823 : 
; 4824 : 	if (result)

  004f8	83 7d ac 00	 cmp	 DWORD PTR _result$[ebp], 0
  004fc	0f 84 ca 00 00
	00		 je	 $LN29@draw_weapo

; 4825 : 	{
; 4826 : 		set_2d_mono_font_position (-0.675, 0.6);

  00502	51		 push	 ecx
  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0050b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00510	51		 push	 ecx
  00511	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  00519	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4827 : 
; 4828 : 		if (!damaged)

  00523	83 7d a4 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00527	75 70		 jne	 SHORT $LN22@draw_weapo

; 4829 : 		{
; 4830 : 			if (number > 0)

  00529	83 7d a8 00	 cmp	 DWORD PTR _number$[ebp], 0
  0052d	7e 16		 jle	 SHORT $LN24@draw_weapo

; 4831 : 			{
; 4832 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  0052f	b8 04 00 00 00	 mov	 eax, 4
  00534	6b c8 13	 imul	 ecx, eax, 19
  00537	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0053d	52		 push	 edx
  0053e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4833 : 			}
; 4834 : 			else

  00543	eb 14		 jmp	 SHORT $LN25@draw_weapo
$LN24@draw_weapo:

; 4835 : 			{
; 4836 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00545	b8 04 00 00 00	 mov	 eax, 4
  0054a	6b c8 13	 imul	 ecx, eax, 19
  0054d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00553	52		 push	 edx
  00554	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN25@draw_weapo:

; 4837 : 			}
; 4838 : 
; 4839 : 			if (draw_large_mfd)

  00559	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00560	74 17		 je	 SHORT $LN26@draw_weapo

; 4840 : 			{
; 4841 : 				sprintf (s, "FLAREx%02d", number);

  00562	8b 45 a8	 mov	 eax, DWORD PTR _number$[ebp]
  00565	50		 push	 eax
  00566	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NONPILJE@FLAREx?$CF02d@
  0056b	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0056e	51		 push	 ecx
  0056f	e8 00 00 00 00	 call	 _sprintf
  00574	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4842 : 			}
; 4843 : 			else

  00577	eb 15		 jmp	 SHORT $LN27@draw_weapo
$LN26@draw_weapo:

; 4844 : 			{
; 4845 : 				sprintf (s, "Fx%02d", number);

  00579	8b 45 a8	 mov	 eax, DWORD PTR _number$[ebp]
  0057c	50		 push	 eax
  0057d	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  00582	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00585	51		 push	 ecx
  00586	e8 00 00 00 00	 call	 _sprintf
  0058b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@draw_weapo:

; 4846 : 			}
; 4847 : 
; 4848 : 			print_mono_font_string (s);

  0058e	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00591	50		 push	 eax
  00592	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4849 : 		}
; 4850 : 		else

  00597	eb 33		 jmp	 SHORT $LN29@draw_weapo
$LN22@draw_weapo:

; 4851 : 		{
; 4852 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00599	b8 04 00 00 00	 mov	 eax, 4
  0059e	6b c8 13	 imul	 ecx, eax, 19
  005a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005a7	52		 push	 edx
  005a8	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4853 : 
; 4854 : 			if (draw_large_mfd)

  005ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  005b4	74 0c		 je	 SHORT $LN28@draw_weapo

; 4855 : 			{
; 4856 : 				print_mono_font_string ("FLARExXX");

  005b6	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  005bb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4857 : 			}
; 4858 : 			else

  005c0	eb 0a		 jmp	 SHORT $LN29@draw_weapo
$LN28@draw_weapo:

; 4859 : 			{
; 4860 : 				print_mono_font_string ("FxXX");

  005c2	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  005c7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN29@draw_weapo:

; 4861 : 			}
; 4862 : 		}
; 4863 : 	}
; 4864 : 
; 4865 : 	////////////////////////////////////////
; 4866 : 	//
; 4867 : 	// lh pylon
; 4868 : 	//
; 4869 : 	////////////////////////////////////////
; 4870 : 
; 4871 : 	result = get_local_entity_weapon_hardpoint_info (en, KIOWA_LHS_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  005cc	8d 45 a4	 lea	 eax, DWORD PTR _damaged$[ebp]
  005cf	50		 push	 eax
  005d0	8d 4d a8	 lea	 ecx, DWORD PTR _number$[ebp]
  005d3	51		 push	 ecx
  005d4	8d 55 94	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  005d7	52		 push	 edx
  005d8	6a 00		 push	 0
  005da	6a 00		 push	 0
  005dc	8b 45 98	 mov	 eax, DWORD PTR _en$[ebp]
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  005e5	89 45 ac	 mov	 DWORD PTR _result$[ebp], eax

; 4872 : 
; 4873 : 	if (result)

  005e8	83 7d ac 00	 cmp	 DWORD PTR _result$[ebp], 0
  005ec	0f 84 f7 02 00
	00		 je	 $LN36@draw_weapo

; 4874 : 	{
; 4875 : 		//
; 4876 : 		// selected weapon
; 4877 : 		//
; 4878 : 
; 4879 : 		if (weapon_sub_type == selected_weapon)

  005f2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  005f5	3b 45 90	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  005f8	75 16		 jne	 SHORT $LN31@draw_weapo

; 4880 : 		{
; 4881 : 			set_mono_font_colour (MFD_COLOUR_RED);

  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 0f	 imul	 ecx, eax, 15
  00602	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00608	52		 push	 edx
  00609	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4882 : 		}
; 4883 : 		else

  0060e	eb 14		 jmp	 SHORT $LN32@draw_weapo
$LN31@draw_weapo:

; 4884 : 		{
; 4885 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00610	b8 04 00 00 00	 mov	 eax, 4
  00615	6b c8 13	 imul	 ecx, eax, 19
  00618	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0061e	52		 push	 edx
  0061f	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN32@draw_weapo:

; 4886 : 		}
; 4887 : 
; 4888 : 		//
; 4889 : 		// number
; 4890 : 		//
; 4891 : 
; 4892 : 		sprintf (s, "x%02d", number);

  00624	8b 45 a8	 mov	 eax, DWORD PTR _number$[ebp]
  00627	50		 push	 eax
  00628	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  0062d	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00630	51		 push	 ecx
  00631	e8 00 00 00 00	 call	 _sprintf
  00636	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4893 : 
; 4894 : 		set_2d_mono_font_position (-0.24, -0.5);

  00639	51		 push	 ecx
  0063a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00642	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00647	51		 push	 ecx
  00648	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be75c28f
  00650	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00655	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4895 : 
; 4896 : 		set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  0065a	6a 58		 push	 88			; 00000058H
  0065c	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00661	51		 push	 ecx
  00662	d9 1c 24	 fstp	 DWORD PTR [esp]
  00665	51		 push	 ecx
  00666	0f 57 c0	 xorps	 xmm0, xmm0
  00669	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4897 : 
; 4898 : 		print_mono_font_string (s);

  00673	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00676	50		 push	 eax
  00677	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4899 : 
; 4900 : 		//
; 4901 : 		// weapon name
; 4902 : 		//
; 4903 : 
; 4904 : 		set_2d_mono_font_position (-0.25, -0.5);

  0067c	51		 push	 ecx
  0067d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00685	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4905 : 
; 4906 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  0069d	69 45 94 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  006a4	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  006aa	51		 push	 ecx
  006ab	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  006b0	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv654[ebp]
  006b6	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv654[ebp]
  006be	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  006c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ca	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4907 : 
; 4908 : 		set_mono_font_rel_position (x_adjust, 0.0);

  006cf	51		 push	 ecx
  006d0	0f 57 c0	 xorps	 xmm0, xmm0
  006d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d8	51		 push	 ecx
  006d9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4909 : 
; 4910 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  006e8	69 45 94 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  006ef	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  006f5	51		 push	 ecx
  006f6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4911 : 
; 4912 : 		//
; 4913 : 		// lines
; 4914 : 		//
; 4915 : 
; 4916 : 		if (draw_large_mfd)

  006fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00702	0f 84 a7 00 00
	00		 je	 $LN33@draw_weapo

; 4917 : 		{
; 4918 : 			if (damaged)

  00708	83 7d a4 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0070c	0f 84 98 00 00
	00		 je	 $LN35@draw_weapo

; 4919 : 			{
; 4920 : 				draw_2d_half_thick_line (-0.46 - 0.03, 0.17 - 0.05, -0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  00712	b8 04 00 00 00	 mov	 eax, 4
  00717	6b c8 13	 imul	 ecx, eax, 19
  0071a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00720	52		 push	 edx
  00721	51		 push	 ecx
  00722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	51		 push	 ecx
  00730	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	51		 push	 ecx
  0073e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00746	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074b	51		 push	 ecx
  0074c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  00754	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00759	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4921 : 
; 4922 : 				draw_2d_half_thick_line (-0.46 + 0.03, 0.17 - 0.05, -0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  0075e	b8 04 00 00 00	 mov	 eax, 4
  00763	6b c8 13	 imul	 ecx, eax, 19
  00766	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0076c	52		 push	 edx
  0076d	51		 push	 ecx
  0076e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00776	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077b	51		 push	 ecx
  0077c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  00784	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00789	51		 push	 ecx
  0078a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00792	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00797	51		 push	 ecx
  00798	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  007a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a5	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN35@draw_weapo:

; 4923 : 			}
; 4924 : 		}
; 4925 : 		else

  007aa	e9 3a 01 00 00	 jmp	 $LN36@draw_weapo
$LN33@draw_weapo:

; 4926 : 		{
; 4927 : 			draw_2d_line (-0.46, 0.14, -0.46, -0.56, MFD_COLOUR_WHITE);

  007af	b8 04 00 00 00	 mov	 eax, 4
  007b4	6b c8 13	 imul	 ecx, eax, 19
  007b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007bd	52		 push	 edx
  007be	51		 push	 ecx
  007bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  007c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cc	51		 push	 ecx
  007cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  007d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007da	51		 push	 ecx
  007db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  007e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e8	51		 push	 ecx
  007e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  007f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4928 : 
; 4929 : 			draw_2d_line (-0.26, -0.56, -0.46, -0.56, MFD_COLOUR_WHITE);

  007fb	b8 04 00 00 00	 mov	 eax, 4
  00800	6b c8 13	 imul	 ecx, eax, 19
  00803	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00809	52		 push	 edx
  0080a	51		 push	 ecx
  0080b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	51		 push	 ecx
  00819	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  00821	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00826	51		 push	 ecx
  00827	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  0082f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00834	51		 push	 ecx
  00835	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  0083d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00842	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4930 : 
; 4931 : 			if (damaged)

  00847	83 7d a4 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0084b	0f 84 98 00 00
	00		 je	 $LN36@draw_weapo

; 4932 : 			{
; 4933 : 				draw_2d_line (-0.46 - 0.03, 0.17 - 0.05, -0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  00851	b8 04 00 00 00	 mov	 eax, 4
  00856	6b c8 13	 imul	 ecx, eax, 19
  00859	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0085f	52		 push	 edx
  00860	51		 push	 ecx
  00861	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00869	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086e	51		 push	 ecx
  0086f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  00877	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087c	51		 push	 ecx
  0087d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00885	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088a	51		 push	 ecx
  0088b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  00893	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00898	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4934 : 
; 4935 : 				draw_2d_line (-0.46 + 0.03, 0.17 - 0.05, -0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  0089d	b8 04 00 00 00	 mov	 eax, 4
  008a2	6b c8 13	 imul	 ecx, eax, 19
  008a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008ab	52		 push	 edx
  008ac	51		 push	 ecx
  008ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	51		 push	 ecx
  008c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  008d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d6	51		 push	 ecx
  008d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  008df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN36@draw_weapo:

; 4936 : 			}
; 4937 : 		}
; 4938 : 	}
; 4939 : 
; 4940 : 	////////////////////////////////////////
; 4941 : 	//
; 4942 : 	// rh pylon
; 4943 : 	//
; 4944 : 	////////////////////////////////////////
; 4945 : 
; 4946 : 	result = get_local_entity_weapon_hardpoint_info (en, KIOWA_RHS_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  008e9	8d 45 a4	 lea	 eax, DWORD PTR _damaged$[ebp]
  008ec	50		 push	 eax
  008ed	8d 4d a8	 lea	 ecx, DWORD PTR _number$[ebp]
  008f0	51		 push	 ecx
  008f1	8d 55 94	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  008f4	52		 push	 edx
  008f5	6a 00		 push	 0
  008f7	6a 01		 push	 1
  008f9	8b 45 98	 mov	 eax, DWORD PTR _en$[ebp]
  008fc	50		 push	 eax
  008fd	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00902	89 45 ac	 mov	 DWORD PTR _result$[ebp], eax

; 4947 : 
; 4948 : 	if (result)

  00905	83 7d ac 00	 cmp	 DWORD PTR _result$[ebp], 0
  00909	0f 84 2c 03 00
	00		 je	 $LN43@draw_weapo

; 4949 : 	{
; 4950 : 		//
; 4951 : 		// selected weapon
; 4952 : 		//
; 4953 : 
; 4954 : 		if (weapon_sub_type == selected_weapon)

  0090f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00912	3b 45 90	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00915	75 16		 jne	 SHORT $LN38@draw_weapo

; 4955 : 		{
; 4956 : 			set_mono_font_colour (MFD_COLOUR_RED);

  00917	b8 04 00 00 00	 mov	 eax, 4
  0091c	6b c8 0f	 imul	 ecx, eax, 15
  0091f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00925	52		 push	 edx
  00926	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4957 : 		}
; 4958 : 		else

  0092b	eb 14		 jmp	 SHORT $LN39@draw_weapo
$LN38@draw_weapo:

; 4959 : 		{
; 4960 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  0092d	b8 04 00 00 00	 mov	 eax, 4
  00932	6b c8 13	 imul	 ecx, eax, 19
  00935	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0093b	52		 push	 edx
  0093c	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN39@draw_weapo:

; 4961 : 		}
; 4962 : 
; 4963 : 		//
; 4964 : 		// number
; 4965 : 		//
; 4966 : 
; 4967 : 		sprintf (s, "x%02d", number);

  00941	8b 45 a8	 mov	 eax, DWORD PTR _number$[ebp]
  00944	50		 push	 eax
  00945	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  0094a	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0094d	51		 push	 ecx
  0094e	e8 00 00 00 00	 call	 _sprintf
  00953	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4968 : 
; 4969 : 		set_2d_mono_font_position (0.24, -0.5);

  00956	51		 push	 ecx
  00957	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0095f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00964	51		 push	 ecx
  00965	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  0096d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00972	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4970 : 
; 4971 : 		x_adjust = -get_mono_font_string_width (s) + 1.0;

  00977	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0097a	50		 push	 eax
  0097b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00980	d9 9d 4c ff ff
	ff		 fstp	 DWORD PTR tv740[ebp]
  00986	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv740[ebp]
  0098e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00995	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00999	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  009a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009a5	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4972 : 
; 4973 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  009aa	6a 58		 push	 88			; 00000058H
  009ac	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  009b1	51		 push	 ecx
  009b2	d9 1c 24	 fstp	 DWORD PTR [esp]
  009b5	51		 push	 ecx
  009b6	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  009bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4974 : 
; 4975 : 		print_mono_font_string (s);

  009c5	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  009c8	50		 push	 eax
  009c9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4976 : 
; 4977 : 		//
; 4978 : 		// weapon name
; 4979 : 		//
; 4980 : 
; 4981 : 		set_2d_mono_font_position (0.25, -0.5);

  009ce	51		 push	 ecx
  009cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  009d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009dc	51		 push	 ecx
  009dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  009e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ea	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4982 : 
; 4983 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  009ef	69 45 94 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  009f6	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  009fc	51		 push	 ecx
  009fd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a02	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv757[ebp]
  00a08	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv757[ebp]
  00a10	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00a18	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1c	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4984 : 
; 4985 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00a21	51		 push	 ecx
  00a22	0f 57 c0	 xorps	 xmm0, xmm0
  00a25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2a	51		 push	 ecx
  00a2b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00a30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a35	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4986 : 
; 4987 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  00a3a	69 45 94 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  00a41	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  00a47	51		 push	 ecx
  00a48	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4988 : 
; 4989 : 		//
; 4990 : 		// lines
; 4991 : 		//
; 4992 : 
; 4993 : 		if (draw_large_mfd)

  00a4d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00a54	0f 84 a7 00 00
	00		 je	 $LN40@draw_weapo

; 4994 : 		{
; 4995 : 			if (damaged)

  00a5a	83 7d a4 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00a5e	0f 84 98 00 00
	00		 je	 $LN42@draw_weapo

; 4996 : 			{
; 4997 : 				draw_2d_half_thick_line (0.46 - 0.03, 0.17 - 0.05, 0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  00a64	b8 04 00 00 00	 mov	 eax, 4
  00a69	6b c8 13	 imul	 ecx, eax, 19
  00a6c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a72	52		 push	 edx
  00a73	51		 push	 ecx
  00a74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00a7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a81	51		 push	 ecx
  00a82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  00a8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8f	51		 push	 ecx
  00a90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00a98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a9d	51		 push	 ecx
  00a9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4998 : 
; 4999 : 				draw_2d_half_thick_line (0.46 + 0.03, 0.17 - 0.05, 0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  00ab0	b8 04 00 00 00	 mov	 eax, 4
  00ab5	6b c8 13	 imul	 ecx, eax, 19
  00ab8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00abe	52		 push	 edx
  00abf	51		 push	 ecx
  00ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acd	51		 push	 ecx
  00ace	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  00ad6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00adb	51		 push	 ecx
  00adc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00ae4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae9	51		 push	 ecx
  00aea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  00af2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af7	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN42@draw_weapo:

; 5000 : 			}
; 5001 : 		}
; 5002 : 		else

  00afc	e9 3a 01 00 00	 jmp	 $LN43@draw_weapo
$LN40@draw_weapo:

; 5003 : 		{
; 5004 : 			draw_2d_line (0.46, 0.14, 0.46, -0.56, MFD_COLOUR_WHITE);

  00b01	b8 04 00 00 00	 mov	 eax, 4
  00b06	6b c8 13	 imul	 ecx, eax, 19
  00b09	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b0f	52		 push	 edx
  00b10	51		 push	 ecx
  00b11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  00b19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1e	51		 push	 ecx
  00b1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  00b27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2c	51		 push	 ecx
  00b2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  00b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3a	51		 push	 ecx
  00b3b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  00b43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b48	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5005 : 
; 5006 : 			draw_2d_line (0.26, -0.56, 0.46, -0.56, MFD_COLOUR_WHITE);

  00b4d	b8 04 00 00 00	 mov	 eax, 4
  00b52	6b c8 13	 imul	 ecx, eax, 19
  00b55	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b5b	52		 push	 edx
  00b5c	51		 push	 ecx
  00b5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  00b65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b6a	51		 push	 ecx
  00b6b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  00b73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b78	51		 push	 ecx
  00b79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  00b81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b86	51		 push	 ecx
  00b87	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  00b8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b94	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5007 : 
; 5008 : 			if (damaged)

  00b99	83 7d a4 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00b9d	0f 84 98 00 00
	00		 je	 $LN43@draw_weapo

; 5009 : 			{
; 5010 : 				draw_2d_line (0.46 - 0.03, 0.17 - 0.05, 0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  00ba3	b8 04 00 00 00	 mov	 eax, 4
  00ba8	6b c8 13	 imul	 ecx, eax, 19
  00bab	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bb1	52		 push	 edx
  00bb2	51		 push	 ecx
  00bb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00bbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc0	51		 push	 ecx
  00bc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  00bc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bce	51		 push	 ecx
  00bcf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00bd7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bdc	51		 push	 ecx
  00bdd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  00be5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bea	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5011 : 
; 5012 : 				draw_2d_line (0.46 + 0.03, 0.17 - 0.05, 0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  00bef	b8 04 00 00 00	 mov	 eax, 4
  00bf4	6b c8 13	 imul	 ecx, eax, 19
  00bf7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bfd	52		 push	 edx
  00bfe	51		 push	 ecx
  00bff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00c07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0c	51		 push	 ecx
  00c0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  00c15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1a	51		 push	 ecx
  00c1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  00c23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c28	51		 push	 ecx
  00c29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN43@draw_weapo:

; 5013 : 			}
; 5014 : 		}
; 5015 : 	}
; 5016 : 
; 5017 : 	////////////////////////////////////////
; 5018 : 	//
; 5019 : 	// rocket salvo
; 5020 : 	//
; 5021 : 	////////////////////////////////////////
; 5022 : 
; 5023 : 	if ((selected_weapon == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) || (selected_weapon == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261))

  00c3b	83 7d 90 1e	 cmp	 DWORD PTR _selected_weapon$[ebp], 30 ; 0000001eH
  00c3f	74 06		 je	 SHORT $LN46@draw_weapo
  00c41	83 7d 90 1f	 cmp	 DWORD PTR _selected_weapon$[ebp], 31 ; 0000001fH
  00c45	75 16		 jne	 SHORT $LN44@draw_weapo
$LN46@draw_weapo:

; 5024 : 	{
; 5025 : 		set_mono_font_colour (MFD_COLOUR_RED);

  00c47	b8 04 00 00 00	 mov	 eax, 4
  00c4c	6b c8 0f	 imul	 ecx, eax, 15
  00c4f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c55	52		 push	 edx
  00c56	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5026 : 	}
; 5027 : 	else

  00c5b	eb 14		 jmp	 SHORT $LN45@draw_weapo
$LN44@draw_weapo:

; 5028 : 	{
; 5029 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00c5d	b8 04 00 00 00	 mov	 eax, 4
  00c62	6b c8 13	 imul	 ecx, eax, 19
  00c65	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c6b	52		 push	 edx
  00c6c	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN45@draw_weapo:

; 5030 : 	}
; 5031 : 
; 5032 : 	set_2d_mono_font_position (0.0, -0.9);

  00c71	51		 push	 ecx
  00c72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00c7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7f	51		 push	 ecx
  00c80	0f 57 c0	 xorps	 xmm0, xmm0
  00c83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c88	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5033 : 
; 5034 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  00c8d	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  00c97	75 13		 jne	 SHORT $LN47@draw_weapo

; 5035 : 	{
; 5036 : 		sprintf (s, "ROCKET SALVOxALL");

  00c99	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
  00c9e	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ca1	50		 push	 eax
  00ca2	e8 00 00 00 00	 call	 _sprintf
  00ca7	83 c4 08	 add	 esp, 8

; 5037 : 	}
; 5038 : 	else

  00caa	eb 17		 jmp	 SHORT $LN48@draw_weapo
$LN47@draw_weapo:

; 5039 : 	{
; 5040 : 		sprintf (s, "ROCKET SALVOx%02d", rocket_salvo_size);

  00cac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  00cb1	50		 push	 eax
  00cb2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
  00cb7	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00cba	51		 push	 ecx
  00cbb	e8 00 00 00 00	 call	 _sprintf
  00cc0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN48@draw_weapo:

; 5041 : 	}
; 5042 : 
; 5043 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00cc3	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00cc6	50		 push	 eax
  00cc7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ccc	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR tv839[ebp]
  00cd2	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR tv839[ebp]
  00cda	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ce2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ce6	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5044 : 
; 5045 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00ceb	51		 push	 ecx
  00cec	0f 57 c0	 xorps	 xmm0, xmm0
  00cef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf4	51		 push	 ecx
  00cf5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cff	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5046 : 
; 5047 : 	print_mono_font_string (s);

  00d04	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00d07	50		 push	 eax
  00d08	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5048 : }

  00d0d	5f		 pop	 edi
  00d0e	5e		 pop	 esi
  00d0f	5b		 pop	 ebx
  00d10	8b e5		 mov	 esp, ebp
  00d12	5d		 pop	 ebp
  00d13	c3		 ret	 0
?draw_weapon_display_mfd@@YGXXZ ENDP			; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1289 = -364						; size = 4
tv1012 = -360						; size = 4
tv990 = -360						; size = 4
tv824 = -360						; size = 4
tv771 = -360						; size = 4
tv748 = -360						; size = 4
tv727 = -360						; size = 4
tv707 = -360						; size = 4
tv672 = -360						; size = 4
tv651 = -360						; size = 4
tv630 = -360						; size = 4
tv611 = -360						; size = 4
tv592 = -360						; size = 4
tv571 = -360						; size = 4
tv550 = -360						; size = 4
tv529 = -360						; size = 4
tv510 = -360						; size = 4
tv491 = -360						; size = 4
tv472 = -360						; size = 4
tv452 = -360						; size = 4
tv424 = -360						; size = 4
tv403 = -360						; size = 4
tv384 = -360						; size = 4
tv365 = -360						; size = 4
tv345 = -360						; size = 4
tv318 = -360						; size = 4
tv290 = -360						; size = 4
tv268 = -360						; size = 4
tv247 = -360						; size = 4
tv228 = -360						; size = 4
tv209 = -360						; size = 4
tv180 = -360						; size = 4
tv160 = -360						; size = 4
tv140 = -360						; size = 4
tv88 = -360						; size = 4
tv1005 = -356						; size = 4
tv983 = -356						; size = 4
tv816 = -356						; size = 4
tv763 = -356						; size = 4
tv740 = -356						; size = 4
tv719 = -356						; size = 4
tv699 = -356						; size = 4
tv664 = -356						; size = 4
tv643 = -356						; size = 4
tv623 = -356						; size = 4
tv604 = -356						; size = 4
tv584 = -356						; size = 4
tv564 = -356						; size = 4
tv542 = -356						; size = 4
tv522 = -356						; size = 4
tv503 = -356						; size = 4
tv484 = -356						; size = 4
tv464 = -356						; size = 4
tv444 = -356						; size = 4
tv416 = -356						; size = 4
tv396 = -356						; size = 4
tv377 = -356						; size = 4
tv357 = -356						; size = 4
tv337 = -356						; size = 4
tv310 = -356						; size = 4
tv282 = -356						; size = 4
tv260 = -356						; size = 4
tv240 = -356						; size = 4
tv221 = -356						; size = 4
tv201 = -356						; size = 4
tv172 = -356						; size = 4
tv152 = -356						; size = 4
tv132 = -356						; size = 4
tv80 = -356						; size = 4
tv70 = -356						; size = 4
_time_to_impact$1 = -288				; size = 4
_closest_missile$2 = -284				; size = 4
_dy$3 = -280						; size = 4
_dx$4 = -276						; size = 4
_air_scan_range$5 = -272				; size = 4
_draw_threat_line$6 = -268				; size = 4
_threat_type$7 = -264					; size = 4
_threat_position$8 = -260				; size = 4
_launched_weapon$9 = -256				; size = 4
_threat$10 = -252					; size = 4
_source_position$ = -248				; size = 4
_source_target$ = -244					; size = 4
_source$ = -240						; size = 4
_ase_threat_line_flash_timer$ = -236			; size = 4
_tsd_ase_range$ = -232					; size = 4
_source_heading$ = -228					; size = 4
_y_adjust$ = -224					; size = 4
_width$ = -220						; size = 4
_scale$ = -216						; size = 4
_ase_draw_threat_line_status$ = -212			; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 4014 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4015 : 	char
; 4016 : 		*s,
; 4017 : 		buffer[200];
; 4018 : 
; 4019 : 	entity_sides
; 4020 : 		source_side;
; 4021 : 
; 4022 : 	int
; 4023 : 		*ase_draw_threat_line_status;
; 4024 : 
; 4025 : 	float
; 4026 : 		scale,
; 4027 : 		width,
; 4028 : 		y_adjust,
; 4029 : 		source_heading,
; 4030 : 		tsd_ase_range,
; 4031 : 		*ase_threat_line_flash_timer;
; 4032 : 
; 4033 : 	entity
; 4034 : 		*source,
; 4035 : 		*source_target;
; 4036 : 
; 4037 : 	vec3d
; 4038 : 		*source_position;
; 4039 : 
; 4040 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN15@draw_aircr
  00012	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00016	7c 18		 jl	 SHORT $LN14@draw_aircr
$LN15@draw_aircr:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 1a	 add	 eax, 26			; 0000001aH
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@draw_aircr:

; 4041 : 
; 4042 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR tv70[ebp], 0
  00040	74 3a		 je	 SHORT $LN17@draw_aircr
  00042	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR tv70[ebp], 0
  00049	7e 55		 jle	 SHORT $LN2@draw_aircr
  0004b	83 bd 9c fe ff
	ff 02		 cmp	 DWORD PTR tv70[ebp], 2
  00052	7e 02		 jle	 SHORT $LN16@draw_aircr
  00054	eb 4a		 jmp	 SHORT $LN2@draw_aircr
$LN16@draw_aircr:

; 4043 : 	{
; 4044 : 		////////////////////////////////////////
; 4045 : 		case KIOWA_MAIN_MFD_LOCATION_PILOT:
; 4046 : 		case KIOWA_MAIN_MFD_LOCATION_CENTER:
; 4047 : 		////////////////////////////////////////
; 4048 : 		{
; 4049 : 			tsd_ase_range						= pilot_tsd_ase_range;

  00056	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005e	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4050 : 			ase_threat_line_flash_timer	= &pilot_ase_threat_line_flash_timer;

  00066	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?pilot_ase_threat_line_flash_timer@@3MA

; 4051 : 			ase_draw_threat_line_status	= &pilot_ase_draw_threat_line_status;

  00070	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?pilot_ase_draw_threat_line_status@@3HA

; 4052 : 
; 4053 : 			break;

  0007a	eb 24		 jmp	 SHORT $LN2@draw_aircr
$LN17@draw_aircr:

; 4054 : 		}
; 4055 : 		////////////////////////////////////////
; 4056 : 		case KIOWA_MAIN_MFD_LOCATION_CO_PILOT:
; 4057 : 		////////////////////////////////////////
; 4058 : 		{
; 4059 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00084	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4060 : 			ase_threat_line_flash_timer	= &co_pilot_ase_threat_line_flash_timer;

  0008c	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_ase_threat_line_flash_timer@@3MA

; 4061 : 			ase_draw_threat_line_status	= &co_pilot_ase_draw_threat_line_status;

  00096	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?co_pilot_ase_draw_threat_line_status@@3HA
$LN2@draw_aircr:

; 4062 : 
; 4063 : 			break;
; 4064 : 		}
; 4065 : 	}
; 4066 : 
; 4067 : 	source = get_gunship_entity ();

  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000a5	89 85 10 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 4068 : 
; 4069 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000ab	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000b2	74 10		 je	 SHORT $LN89@draw_aircr
  000b4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  000c2	eb 24		 jmp	 SHORT $LN90@draw_aircr
$LN89@draw_aircr:
  000c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  000ca	83 c2 37	 add	 edx, 55			; 00000037H
  000cd	52		 push	 edx
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000de	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN90@draw_aircr:
  000e8	b9 01 00 00 00	 mov	 ecx, 1
  000ed	85 c9		 test	 ecx, ecx
  000ef	74 0c		 je	 SHORT $LN91@draw_aircr
  000f1	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv88[ebp], 187 ; 000000bbH
  000fb	eb 24		 jmp	 SHORT $LN92@draw_aircr
$LN91@draw_aircr:
  000fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00103	83 c2 37	 add	 edx, 55			; 00000037H
  00106	52		 push	 edx
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00117	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN92@draw_aircr:
  00121	68 bb 00 00 00	 push	 187			; 000000bbH
  00126	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0012c	51		 push	 ecx
  0012d	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv80[ebp], 1116
  00137	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  0013d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00144	ff d1		 call	 ecx
  00146	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 4070 : 
; 4071 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0014c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00153	74 10		 je	 SHORT $LN93@draw_aircr
  00155	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv132[ebp], ecx
  00163	eb 24		 jmp	 SHORT $LN94@draw_aircr
$LN93@draw_aircr:
  00165	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0016b	83 c2 39	 add	 edx, 57			; 00000039H
  0016e	52		 push	 edx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017f	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN94@draw_aircr:
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	85 c9		 test	 ecx, ecx
  00190	74 0c		 je	 SHORT $LN95@draw_aircr
  00192	c7 85 98 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv140[ebp], 52 ; 00000034H
  0019c	eb 24		 jmp	 SHORT $LN96@draw_aircr
$LN95@draw_aircr:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  001a4	83 c2 39	 add	 edx, 57			; 00000039H
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN96@draw_aircr:
  001c2	6a 34		 push	 52			; 00000034H
  001c4	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001ca	51		 push	 ecx
  001cb	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv132[ebp], 700
  001d5	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv140[ebp]
  001db	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001e2	ff d1		 call	 ecx
  001e4	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 4072 : 
; 4073 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  001ea	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001f1	74 10		 je	 SHORT $LN97@draw_aircr
  001f3	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  001f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fb	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv152[ebp], ecx
  00201	eb 24		 jmp	 SHORT $LN98@draw_aircr
$LN97@draw_aircr:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00209	83 c2 3b	 add	 edx, 59			; 0000003bH
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
$LN98@draw_aircr:
  00227	b9 01 00 00 00	 mov	 ecx, 1
  0022c	85 c9		 test	 ecx, ecx
  0022e	74 0c		 je	 SHORT $LN99@draw_aircr
  00230	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv160[ebp], 8
  0023a	eb 24		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:
  0023c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00242	83 c2 3b	 add	 edx, 59			; 0000003bH
  00245	52		 push	 edx
  00246	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0024b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00256	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv160[ebp], 0
$LN100@draw_aircr:
  00260	6a 08		 push	 8
  00262	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00268	51		 push	 ecx
  00269	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv152[ebp], 96
  00270	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv160[ebp]
  00276	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0027d	ff d1		 call	 ecx
  0027f	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 4074 : 
; 4075 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00285	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0028c	74 10		 je	 SHORT $LN101@draw_aircr
  0028e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00294	8b 08		 mov	 ecx, DWORD PTR [eax]
  00296	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv172[ebp], ecx
  0029c	eb 24		 jmp	 SHORT $LN102@draw_aircr
$LN101@draw_aircr:
  0029e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  002a4	83 c2 3d	 add	 edx, 61			; 0000003dH
  002a7	52		 push	 edx
  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002b2	50		 push	 eax
  002b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN102@draw_aircr:
  002c2	b9 01 00 00 00	 mov	 ecx, 1
  002c7	85 c9		 test	 ecx, ecx
  002c9	74 0c		 je	 SHORT $LN103@draw_aircr
  002cb	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv180[ebp], 38 ; 00000026H
  002d5	eb 24		 jmp	 SHORT $LN104@draw_aircr
$LN103@draw_aircr:
  002d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  002dd	83 c2 3d	 add	 edx, 61			; 0000003dH
  002e0	52		 push	 edx
  002e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002eb	50		 push	 eax
  002ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f1	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv180[ebp], 0
$LN104@draw_aircr:
  002fb	6a 26		 push	 38			; 00000026H
  002fd	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00303	51		 push	 ecx
  00304	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv172[ebp], 180
  0030e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv180[ebp]
  00314	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0031b	ff d1		 call	 ecx
  0031d	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 4076 : 
; 4077 : 	scale = RADIUS / tsd_ase_range;

  00323	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0032b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00333	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00337	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0033b	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 4078 : 
; 4079 : 	////////////////////////////////////////
; 4080 : 	//
; 4081 : 	// threats
; 4082 : 	//
; 4083 : 	////////////////////////////////////////
; 4084 : 
; 4085 : 	{
; 4086 : 		entity
; 4087 : 			*threat,
; 4088 : 			*launched_weapon;
; 4089 : 
; 4090 : 		vec3d
; 4091 : 			*threat_position;
; 4092 : 
; 4093 : 		threat_types
; 4094 : 			threat_type;
; 4095 : 
; 4096 : 		int
; 4097 : 			draw_threat_line;
; 4098 : 
; 4099 : 		float
; 4100 : 			air_scan_range,
; 4101 : 			dx,
; 4102 : 			dy;
; 4103 : 
; 4104 : 		*ase_threat_line_flash_timer -= get_delta_time ();

  00343	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00349	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0034d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00355	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  0035b	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 4105 : 
; 4106 : 		if (*ase_threat_line_flash_timer < 0.0)

  0035f	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00365	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00369	0f 57 c9	 xorps	 xmm1, xmm1
  0036c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00370	76 25		 jbe	 SHORT $LN18@draw_aircr

; 4107 : 		{
; 4108 : 			*ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  00372	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00378	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00380	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4109 : 
; 4110 : 			*ase_draw_threat_line_status ^= 1;

  00384	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  0038a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038c	83 f1 01	 xor	 ecx, 1
  0038f	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ase_draw_threat_line_status$[ebp]
  00395	89 0a		 mov	 DWORD PTR [edx], ecx
$LN18@draw_aircr:

; 4111 : 		}
; 4112 : 
; 4113 : 		set_2d_window_rotation (mfd_env, source_heading);

  00397	51		 push	 ecx
  00398	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003aa	50		 push	 eax
  003ab	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4114 : 
; 4115 : 		//
; 4116 : 		// display enemy SAM and AAA threat range circles
; 4117 : 		//
; 4118 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 4119 : 		//
; 4120 : 
; 4121 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  003b0	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  003b7	74 10		 je	 SHORT $LN105@draw_aircr
  003b9	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  003bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c1	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv201[ebp], ecx
  003c7	eb 24		 jmp	 SHORT $LN106@draw_aircr
$LN105@draw_aircr:
  003c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  003cf	83 c2 6b	 add	 edx, 107		; 0000006bH
  003d2	52		 push	 edx
  003d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003dd	50		 push	 eax
  003de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e3	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv201[ebp], 0
$LN106@draw_aircr:
  003ed	b9 01 00 00 00	 mov	 ecx, 1
  003f2	85 c9		 test	 ecx, ecx
  003f4	74 0c		 je	 SHORT $LN107@draw_aircr
  003f6	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv209[ebp], 18 ; 00000012H
  00400	eb 24		 jmp	 SHORT $LN108@draw_aircr
$LN107@draw_aircr:
  00402	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00408	83 c2 6b	 add	 edx, 107		; 0000006bH
  0040b	52		 push	 edx
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00411	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00416	50		 push	 eax
  00417	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0041c	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv209[ebp], 0
$LN108@draw_aircr:
  00426	6a 12		 push	 18			; 00000012H
  00428	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0042e	51		 push	 ecx
  0042f	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv201[ebp], 180
  00439	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv209[ebp]
  0043f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00446	ff d1		 call	 ecx
  00448	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 4122 : 
; 4123 : 		while (threat)

  0044e	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00455	0f 84 70 04 00
	00		 je	 $LN5@draw_aircr

; 4124 : 		{
; 4125 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  0045b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00462	74 10		 je	 SHORT $LN109@draw_aircr
  00464	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0046a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0046c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv221[ebp], ecx
  00472	eb 20		 jmp	 SHORT $LN110@draw_aircr
$LN109@draw_aircr:
  00474	68 1d 10 00 00	 push	 4125			; 0000101dH
  00479	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0047e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00484	52		 push	 edx
  00485	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0048a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv221[ebp], 0
$LN110@draw_aircr:
  00494	b8 01 00 00 00	 mov	 eax, 1
  00499	85 c0		 test	 eax, eax
  0049b	74 0c		 je	 SHORT $LN111@draw_aircr
  0049d	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv228[ebp], 66 ; 00000042H
  004a7	eb 20		 jmp	 SHORT $LN112@draw_aircr
$LN111@draw_aircr:
  004a9	68 1d 10 00 00	 push	 4125			; 0000101dH
  004ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004b9	51		 push	 ecx
  004ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004bf	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv228[ebp], 0
$LN112@draw_aircr:
  004c9	6a 42		 push	 66			; 00000042H
  004cb	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004d1	52		 push	 edx
  004d2	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv221[ebp], 1116
  004dc	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv228[ebp]
  004e2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004e9	ff d2		 call	 edx
  004eb	85 c0		 test	 eax, eax
  004ed	0f 85 2f 03 00
	00		 jne	 $LN21@draw_aircr

; 4126 : 			{
; 4127 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  004f3	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  004fa	74 10		 je	 SHORT $LN113@draw_aircr
  004fc	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00502	8b 08		 mov	 ecx, DWORD PTR [eax]
  00504	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv240[ebp], ecx
  0050a	eb 20		 jmp	 SHORT $LN114@draw_aircr
$LN113@draw_aircr:
  0050c	68 1f 10 00 00	 push	 4127			; 0000101fH
  00511	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00516	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0051c	52		 push	 edx
  0051d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00522	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv240[ebp], 0
$LN114@draw_aircr:
  0052c	b8 01 00 00 00	 mov	 eax, 1
  00531	85 c0		 test	 eax, eax
  00533	74 0c		 je	 SHORT $LN115@draw_aircr
  00535	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv247[ebp], 187 ; 000000bbH
  0053f	eb 20		 jmp	 SHORT $LN116@draw_aircr
$LN115@draw_aircr:
  00541	68 1f 10 00 00	 push	 4127			; 0000101fH
  00546	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0054b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00551	51		 push	 ecx
  00552	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00557	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv247[ebp], 0
$LN116@draw_aircr:
  00561	68 bb 00 00 00	 push	 187			; 000000bbH
  00566	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  0056c	52		 push	 edx
  0056d	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv240[ebp], 1116
  00577	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv247[ebp]
  0057d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00584	ff d2		 call	 edx
  00586	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  0058c	0f 84 90 02 00
	00		 je	 $LN21@draw_aircr

; 4128 : 				{
; 4129 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00592	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00599	74 10		 je	 SHORT $LN117@draw_aircr
  0059b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  005a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  005a3	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv260[ebp], ecx
  005a9	eb 24		 jmp	 SHORT $LN118@draw_aircr
$LN117@draw_aircr:
  005ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  005b1	83 c2 73	 add	 edx, 115		; 00000073H
  005b4	52		 push	 edx
  005b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005bf	50		 push	 eax
  005c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005c5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv260[ebp], 0
$LN118@draw_aircr:
  005cf	b9 01 00 00 00	 mov	 ecx, 1
  005d4	85 c9		 test	 ecx, ecx
  005d6	74 0c		 je	 SHORT $LN119@draw_aircr
  005d8	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv268[ebp], 233 ; 000000e9H
  005e2	eb 24		 jmp	 SHORT $LN120@draw_aircr
$LN119@draw_aircr:
  005e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  005ea	83 c2 73	 add	 edx, 115		; 00000073H
  005ed	52		 push	 edx
  005ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  005f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005fe	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv268[ebp], 0
$LN120@draw_aircr:
  00608	68 e9 00 00 00	 push	 233			; 000000e9H
  0060d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00613	51		 push	 ecx
  00614	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv260[ebp], 1116
  0061e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv268[ebp]
  00624	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0062b	ff d1		 call	 ecx
  0062d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4130 : 
; 4131 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  00633	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  0063a	74 0d		 je	 SHORT $LN22@draw_aircr
  0063c	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00643	0f 85 d9 01 00
	00		 jne	 $LN21@draw_aircr
$LN22@draw_aircr:

; 4132 : 					{
; 4133 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  00649	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00650	74 10		 je	 SHORT $LN121@draw_aircr
  00652	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00658	8b 08		 mov	 ecx, DWORD PTR [eax]
  0065a	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv282[ebp], ecx
  00660	eb 24		 jmp	 SHORT $LN122@draw_aircr
$LN121@draw_aircr:
  00662	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00668	83 c2 77	 add	 edx, 119		; 00000077H
  0066b	52		 push	 edx
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00671	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00676	50		 push	 eax
  00677	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0067c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv282[ebp], 0
$LN122@draw_aircr:
  00686	b9 01 00 00 00	 mov	 ecx, 1
  0068b	85 c9		 test	 ecx, ecx
  0068d	74 0c		 je	 SHORT $LN123@draw_aircr
  0068f	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv290[ebp], 8
  00699	eb 24		 jmp	 SHORT $LN124@draw_aircr
$LN123@draw_aircr:
  0069b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  006a1	83 c2 77	 add	 edx, 119		; 00000077H
  006a4	52		 push	 edx
  006a5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  006af	50		 push	 eax
  006b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006b5	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv290[ebp], 0
$LN124@draw_aircr:
  006bf	6a 08		 push	 8
  006c1	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  006c7	51		 push	 ecx
  006c8	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv282[ebp], 96
  006cf	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv290[ebp]
  006d5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  006dc	ff d1		 call	 ecx
  006de	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4134 : 
; 4135 : 						dx = (threat_position->x - source_position->x) * scale;

  006e4	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  006ea	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  006f0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006f4	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  006f8	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00700	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4136 : 						dy = (threat_position->z - source_position->z) * scale;

  00708	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0070e	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00714	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00719	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0071e	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00726	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4137 : 
; 4138 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  0072e	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00735	74 10		 je	 SHORT $LN125@draw_aircr
  00737	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0073d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0073f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv310[ebp], ecx
  00745	eb 24		 jmp	 SHORT $LN126@draw_aircr
$LN125@draw_aircr:
  00747	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0074d	83 c2 7c	 add	 edx, 124		; 0000007cH
  00750	52		 push	 edx
  00751	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00756	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0075b	50		 push	 eax
  0075c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00761	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv310[ebp], 0
$LN126@draw_aircr:
  0076b	b9 01 00 00 00	 mov	 ecx, 1
  00770	85 c9		 test	 ecx, ecx
  00772	74 0c		 je	 SHORT $LN127@draw_aircr
  00774	c7 85 98 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv318[ebp], 5
  0077e	eb 24		 jmp	 SHORT $LN128@draw_aircr
$LN127@draw_aircr:
  00780	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00786	83 c2 7c	 add	 edx, 124		; 0000007cH
  00789	52		 push	 edx
  0078a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0078f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00794	50		 push	 eax
  00795	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0079a	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv318[ebp], 0
$LN128@draw_aircr:
  007a4	6a 05		 push	 5
  007a6	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  007ac	51		 push	 ecx
  007ad	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv310[ebp], 700
  007b7	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv318[ebp]
  007bd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007c4	ff d1		 call	 ecx
  007c6	d9 9d 94 fe ff
	ff		 fstp	 DWORD PTR tv1289[ebp]
  007cc	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR tv1289[ebp]
  007d4	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  007dc	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 4139 : 
; 4140 : 						draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  007e4	b8 04 00 00 00	 mov	 eax, 4
  007e9	c1 e0 00	 shl	 eax, 0
  007ec	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  007f2	51		 push	 ecx
  007f3	51		 push	 ecx
  007f4	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  007fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00801	51		 push	 ecx
  00802	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0080a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080f	51		 push	 ecx
  00810	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081d	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN21@draw_aircr:

; 4141 : 					}
; 4142 : 				}
; 4143 : 			}
; 4144 : 
; 4145 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00822	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00829	74 10		 je	 SHORT $LN129@draw_aircr
  0082b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00831	8b 08		 mov	 ecx, DWORD PTR [eax]
  00833	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv337[ebp], ecx
  00839	eb 27		 jmp	 SHORT $LN130@draw_aircr
$LN129@draw_aircr:
  0083b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00841	81 c2 83 00 00
	00		 add	 edx, 131		; 00000083H
  00847	52		 push	 edx
  00848	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0084d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00852	50		 push	 eax
  00853	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00858	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv337[ebp], 0
$LN130@draw_aircr:
  00862	b9 01 00 00 00	 mov	 ecx, 1
  00867	85 c9		 test	 ecx, ecx
  00869	74 0c		 je	 SHORT $LN131@draw_aircr
  0086b	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv345[ebp], 18 ; 00000012H
  00875	eb 27		 jmp	 SHORT $LN132@draw_aircr
$LN131@draw_aircr:
  00877	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0087d	81 c2 83 00 00
	00		 add	 edx, 131		; 00000083H
  00883	52		 push	 edx
  00884	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00889	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0088e	50		 push	 eax
  0088f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00894	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv345[ebp], 0
$LN132@draw_aircr:
  0089e	6a 12		 push	 18			; 00000012H
  008a0	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  008a6	51		 push	 ecx
  008a7	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv337[ebp], 180
  008b1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv345[ebp]
  008b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008be	ff d1		 call	 ecx
  008c0	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4146 : 		}

  008c6	e9 83 fb ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 4147 : 
; 4148 : 		//
; 4149 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 4150 : 		//
; 4151 : 
; 4152 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  008cb	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  008d2	74 10		 je	 SHORT $LN133@draw_aircr
  008d4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  008da	8b 08		 mov	 ecx, DWORD PTR [eax]
  008dc	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv357[ebp], ecx
  008e2	eb 27		 jmp	 SHORT $LN134@draw_aircr
$LN133@draw_aircr:
  008e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  008ea	81 c2 8a 00 00
	00		 add	 edx, 138		; 0000008aH
  008f0	52		 push	 edx
  008f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  008f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008fb	50		 push	 eax
  008fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00901	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv357[ebp], 0
$LN134@draw_aircr:
  0090b	b9 01 00 00 00	 mov	 ecx, 1
  00910	85 c9		 test	 ecx, ecx
  00912	74 0c		 je	 SHORT $LN135@draw_aircr
  00914	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv365[ebp], 18 ; 00000012H
  0091e	eb 27		 jmp	 SHORT $LN136@draw_aircr
$LN135@draw_aircr:
  00920	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00926	81 c2 8a 00 00
	00		 add	 edx, 138		; 0000008aH
  0092c	52		 push	 edx
  0092d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00932	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00937	50		 push	 eax
  00938	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0093d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv365[ebp], 0
$LN136@draw_aircr:
  00947	6a 12		 push	 18			; 00000012H
  00949	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0094f	51		 push	 ecx
  00950	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv357[ebp], 180
  0095a	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv365[ebp]
  00960	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00967	ff d1		 call	 ecx
  00969	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 4153 : 
; 4154 : 		while (threat)

  0096f	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00976	0f 84 c7 02 00
	00		 je	 $LN7@draw_aircr

; 4155 : 		{
; 4156 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  0097c	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00983	74 10		 je	 SHORT $LN137@draw_aircr
  00985	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0098b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0098d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv377[ebp], ecx
  00993	eb 20		 jmp	 SHORT $LN138@draw_aircr
$LN137@draw_aircr:
  00995	68 3c 10 00 00	 push	 4156			; 0000103cH
  0099a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0099f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009a5	52		 push	 edx
  009a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009ab	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv377[ebp], 0
$LN138@draw_aircr:
  009b5	b8 01 00 00 00	 mov	 eax, 1
  009ba	85 c0		 test	 eax, eax
  009bc	74 0c		 je	 SHORT $LN139@draw_aircr
  009be	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv384[ebp], 66 ; 00000042H
  009c8	eb 20		 jmp	 SHORT $LN140@draw_aircr
$LN139@draw_aircr:
  009ca	68 3c 10 00 00	 push	 4156			; 0000103cH
  009cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  009d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009da	51		 push	 ecx
  009db	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009e0	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv384[ebp], 0
$LN140@draw_aircr:
  009ea	6a 42		 push	 66			; 00000042H
  009ec	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  009f2	52		 push	 edx
  009f3	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv377[ebp], 1116
  009fd	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv384[ebp]
  00a03	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a0a	ff d2		 call	 edx
  00a0c	85 c0		 test	 eax, eax
  00a0e	0f 85 86 01 00
	00		 jne	 $LN25@draw_aircr

; 4157 : 			{
; 4158 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00a14	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a1b	74 10		 je	 SHORT $LN141@draw_aircr
  00a1d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a23	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a25	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv396[ebp], ecx
  00a2b	eb 20		 jmp	 SHORT $LN142@draw_aircr
$LN141@draw_aircr:
  00a2d	68 3e 10 00 00	 push	 4158			; 0000103eH
  00a32	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a37	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a3d	52		 push	 edx
  00a3e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a43	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv396[ebp], 0
$LN142@draw_aircr:
  00a4d	b8 01 00 00 00	 mov	 eax, 1
  00a52	85 c0		 test	 eax, eax
  00a54	74 0c		 je	 SHORT $LN143@draw_aircr
  00a56	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv403[ebp], 187 ; 000000bbH
  00a60	eb 20		 jmp	 SHORT $LN144@draw_aircr
$LN143@draw_aircr:
  00a62	68 3e 10 00 00	 push	 4158			; 0000103eH
  00a67	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a72	51		 push	 ecx
  00a73	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a78	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv403[ebp], 0
$LN144@draw_aircr:
  00a82	68 bb 00 00 00	 push	 187			; 000000bbH
  00a87	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00a8d	52		 push	 edx
  00a8e	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv396[ebp], 1116
  00a98	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv403[ebp]
  00a9e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00aa5	ff d2		 call	 edx
  00aa7	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00aad	0f 84 e7 00 00
	00		 je	 $LN25@draw_aircr

; 4159 : 				{
; 4160 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00ab3	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00aba	74 10		 je	 SHORT $LN145@draw_aircr
  00abc	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ac2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ac4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv416[ebp], ecx
  00aca	eb 27		 jmp	 SHORT $LN146@draw_aircr
$LN145@draw_aircr:
  00acc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00ad2	81 c2 92 00 00
	00		 add	 edx, 146		; 00000092H
  00ad8	52		 push	 edx
  00ad9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ade	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ae3	50		 push	 eax
  00ae4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae9	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv416[ebp], 0
$LN146@draw_aircr:
  00af3	b9 01 00 00 00	 mov	 ecx, 1
  00af8	85 c9		 test	 ecx, ecx
  00afa	74 0c		 je	 SHORT $LN147@draw_aircr
  00afc	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv424[ebp], 233 ; 000000e9H
  00b06	eb 27		 jmp	 SHORT $LN148@draw_aircr
$LN147@draw_aircr:
  00b08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00b0e	81 c2 92 00 00
	00		 add	 edx, 146		; 00000092H
  00b14	52		 push	 edx
  00b15	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b1f	50		 push	 eax
  00b20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b25	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv424[ebp], 0
$LN148@draw_aircr:
  00b2f	68 e9 00 00 00	 push	 233			; 000000e9H
  00b34	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b3a	51		 push	 ecx
  00b3b	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv416[ebp], 1116
  00b45	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv424[ebp]
  00b4b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b52	ff d1		 call	 ecx
  00b54	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4161 : 
; 4162 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00b5a	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00b61	74 12		 je	 SHORT $LN26@draw_aircr
  00b63	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00b6a	74 09		 je	 SHORT $LN26@draw_aircr
  00b6c	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00b73	75 25		 jne	 SHORT $LN25@draw_aircr
$LN26@draw_aircr:

; 4163 : 					{
; 4164 : //VJ 030423 TSD render mod
; 4165 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE);

  00b75	6a 00		 push	 0
  00b77	6a 00		 push	 0
  00b79	51		 push	 ecx
  00b7a	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00b82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b87	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b8d	50		 push	 eax
  00b8e	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b94	51		 push	 ecx
  00b95	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN25@draw_aircr:

; 4166 : 					}
; 4167 : 				}
; 4168 : 			}
; 4169 : 
; 4170 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00b9a	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ba1	74 10		 je	 SHORT $LN149@draw_aircr
  00ba3	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ba9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bab	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv444[ebp], ecx
  00bb1	eb 27		 jmp	 SHORT $LN150@draw_aircr
$LN149@draw_aircr:
  00bb3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00bb9	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  00bbf	52		 push	 edx
  00bc0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bc5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bca	50		 push	 eax
  00bcb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bd0	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv444[ebp], 0
$LN150@draw_aircr:
  00bda	b9 01 00 00 00	 mov	 ecx, 1
  00bdf	85 c9		 test	 ecx, ecx
  00be1	74 0c		 je	 SHORT $LN151@draw_aircr
  00be3	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv452[ebp], 18 ; 00000012H
  00bed	eb 27		 jmp	 SHORT $LN152@draw_aircr
$LN151@draw_aircr:
  00bef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00bf5	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  00bfb	52		 push	 edx
  00bfc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c06	50		 push	 eax
  00c07	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c0c	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv452[ebp], 0
$LN152@draw_aircr:
  00c16	6a 12		 push	 18			; 00000012H
  00c18	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00c1e	51		 push	 ecx
  00c1f	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv444[ebp], 180
  00c29	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv452[ebp]
  00c2f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c36	ff d1		 call	 ecx
  00c38	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4171 : 		}

  00c3e	e9 2c fd ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 4172 : 
; 4173 : 		//
; 4174 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 4175 : 		//
; 4176 : 
; 4177 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00c43	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00c4a	74 10		 je	 SHORT $LN153@draw_aircr
  00c4c	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00c52	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c54	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv464[ebp], ecx
  00c5a	eb 27		 jmp	 SHORT $LN154@draw_aircr
$LN153@draw_aircr:
  00c5c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00c62	81 c2 a3 00 00
	00		 add	 edx, 163		; 000000a3H
  00c68	52		 push	 edx
  00c69	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c6e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c73	50		 push	 eax
  00c74	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c79	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv464[ebp], 0
$LN154@draw_aircr:
  00c83	b9 01 00 00 00	 mov	 ecx, 1
  00c88	85 c9		 test	 ecx, ecx
  00c8a	74 0c		 je	 SHORT $LN155@draw_aircr
  00c8c	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv472[ebp], 18 ; 00000012H
  00c96	eb 27		 jmp	 SHORT $LN156@draw_aircr
$LN155@draw_aircr:
  00c98	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00c9e	81 c2 a3 00 00
	00		 add	 edx, 163		; 000000a3H
  00ca4	52		 push	 edx
  00ca5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00caa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00caf	50		 push	 eax
  00cb0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cb5	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv472[ebp], 0
$LN156@draw_aircr:
  00cbf	6a 12		 push	 18			; 00000012H
  00cc1	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00cc7	51		 push	 ecx
  00cc8	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv464[ebp], 180
  00cd2	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv472[ebp]
  00cd8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00cdf	ff d1		 call	 ecx
  00ce1	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN8@draw_aircr:

; 4178 : 
; 4179 : 		while (threat)

  00ce7	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00cee	0f 84 c1 07 00
	00		 je	 $LN9@draw_aircr

; 4180 : 		{
; 4181 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00cf4	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00cfb	74 10		 je	 SHORT $LN157@draw_aircr
  00cfd	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d03	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d05	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv484[ebp], ecx
  00d0b	eb 20		 jmp	 SHORT $LN158@draw_aircr
$LN157@draw_aircr:
  00d0d	68 55 10 00 00	 push	 4181			; 00001055H
  00d12	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d17	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d1d	52		 push	 edx
  00d1e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d23	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv484[ebp], 0
$LN158@draw_aircr:
  00d2d	b8 01 00 00 00	 mov	 eax, 1
  00d32	85 c0		 test	 eax, eax
  00d34	74 0c		 je	 SHORT $LN159@draw_aircr
  00d36	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv491[ebp], 66 ; 00000042H
  00d40	eb 20		 jmp	 SHORT $LN160@draw_aircr
$LN159@draw_aircr:
  00d42	68 55 10 00 00	 push	 4181			; 00001055H
  00d47	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d4c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d52	51		 push	 ecx
  00d53	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d58	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv491[ebp], 0
$LN160@draw_aircr:
  00d62	6a 42		 push	 66			; 00000042H
  00d64	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d6a	52		 push	 edx
  00d6b	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv484[ebp], 1116
  00d75	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv491[ebp]
  00d7b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00d82	ff d2		 call	 edx
  00d84	85 c0		 test	 eax, eax
  00d86	0f 85 80 06 00
	00		 jne	 $LN35@draw_aircr

; 4182 : 			{
; 4183 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00d8c	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d93	74 10		 je	 SHORT $LN161@draw_aircr
  00d95	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d9b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d9d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv503[ebp], ecx
  00da3	eb 20		 jmp	 SHORT $LN162@draw_aircr
$LN161@draw_aircr:
  00da5	68 57 10 00 00	 push	 4183			; 00001057H
  00daa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00daf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00db5	52		 push	 edx
  00db6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dbb	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv503[ebp], 0
$LN162@draw_aircr:
  00dc5	b8 01 00 00 00	 mov	 eax, 1
  00dca	85 c0		 test	 eax, eax
  00dcc	74 0c		 je	 SHORT $LN163@draw_aircr
  00dce	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv510[ebp], 187 ; 000000bbH
  00dd8	eb 20		 jmp	 SHORT $LN164@draw_aircr
$LN163@draw_aircr:
  00dda	68 57 10 00 00	 push	 4183			; 00001057H
  00ddf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00de4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00dea	51		 push	 ecx
  00deb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00df0	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv510[ebp], 0
$LN164@draw_aircr:
  00dfa	68 bb 00 00 00	 push	 187			; 000000bbH
  00dff	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00e05	52		 push	 edx
  00e06	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv503[ebp], 1116
  00e10	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv510[ebp]
  00e16	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e1d	ff d2		 call	 edx
  00e1f	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00e25	0f 84 e1 05 00
	00		 je	 $LN35@draw_aircr

; 4184 : 				{
; 4185 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00e2b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e32	74 10		 je	 SHORT $LN165@draw_aircr
  00e34	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e3a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e3c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv522[ebp], ecx
  00e42	eb 20		 jmp	 SHORT $LN166@draw_aircr
$LN165@draw_aircr:
  00e44	68 59 10 00 00	 push	 4185			; 00001059H
  00e49	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e4e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e54	52		 push	 edx
  00e55	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e5a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv522[ebp], 0
$LN166@draw_aircr:
  00e64	b8 01 00 00 00	 mov	 eax, 1
  00e69	85 c0		 test	 eax, eax
  00e6b	74 0c		 je	 SHORT $LN167@draw_aircr
  00e6d	c7 85 98 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv529[ebp], 169 ; 000000a9H
  00e77	eb 20		 jmp	 SHORT $LN168@draw_aircr
$LN167@draw_aircr:
  00e79	68 59 10 00 00	 push	 4185			; 00001059H
  00e7e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e83	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e89	51		 push	 ecx
  00e8a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e8f	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv529[ebp], 0
$LN168@draw_aircr:
  00e99	68 a9 00 00 00	 push	 169			; 000000a9H
  00e9e	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00ea4	52		 push	 edx
  00ea5	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv522[ebp], 1116
  00eaf	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv529[ebp]
  00eb5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00ebc	ff d2		 call	 edx
  00ebe	85 c0		 test	 eax, eax
  00ec0	0f 84 46 05 00
	00		 je	 $LN35@draw_aircr

; 4186 : 					{
; 4187 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00ec6	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ecd	74 10		 je	 SHORT $LN169@draw_aircr
  00ecf	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ed5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ed7	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv542[ebp], ecx
  00edd	eb 27		 jmp	 SHORT $LN170@draw_aircr
$LN169@draw_aircr:
  00edf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00ee5	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  00eeb	52		 push	 edx
  00eec	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ef1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ef6	50		 push	 eax
  00ef7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00efc	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv542[ebp], 0
$LN170@draw_aircr:
  00f06	b9 01 00 00 00	 mov	 ecx, 1
  00f0b	85 c9		 test	 ecx, ecx
  00f0d	74 0c		 je	 SHORT $LN171@draw_aircr
  00f0f	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv550[ebp], 233 ; 000000e9H
  00f19	eb 27		 jmp	 SHORT $LN172@draw_aircr
$LN171@draw_aircr:
  00f1b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00f21	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  00f27	52		 push	 edx
  00f28	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00f32	50		 push	 eax
  00f33	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f38	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv550[ebp], 0
$LN172@draw_aircr:
  00f42	68 e9 00 00 00	 push	 233			; 000000e9H
  00f47	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00f4d	51		 push	 ecx
  00f4e	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv542[ebp], 1116
  00f58	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv550[ebp]
  00f5e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00f65	ff d1		 call	 ecx
  00f67	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4188 : 
; 4189 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00f6d	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00f74	74 16		 je	 SHORT $LN31@draw_aircr
  00f76	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00f7d	74 0d		 je	 SHORT $LN31@draw_aircr
  00f7f	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00f86	0f 85 80 04 00
	00		 jne	 $LN35@draw_aircr
$LN31@draw_aircr:

; 4190 : 						{
; 4191 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00f8c	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00f93	74 10		 je	 SHORT $LN173@draw_aircr
  00f95	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f9b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f9d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv564[ebp], ecx
  00fa3	eb 20		 jmp	 SHORT $LN174@draw_aircr
$LN173@draw_aircr:
  00fa5	68 5f 10 00 00	 push	 4191			; 0000105fH
  00faa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00faf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fb5	52		 push	 edx
  00fb6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fbb	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv564[ebp], 0
$LN174@draw_aircr:
  00fc5	b8 01 00 00 00	 mov	 eax, 1
  00fca	85 c0		 test	 eax, eax
  00fcc	74 0c		 je	 SHORT $LN175@draw_aircr
  00fce	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv571[ebp], 38 ; 00000026H
  00fd8	eb 20		 jmp	 SHORT $LN176@draw_aircr
$LN175@draw_aircr:
  00fda	68 5f 10 00 00	 push	 4191			; 0000105fH
  00fdf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fe4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00fea	51		 push	 ecx
  00feb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ff0	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], 0
$LN176@draw_aircr:
  00ffa	6a 26		 push	 38			; 00000026H
  00ffc	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  01002	52		 push	 edx
  01003	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv564[ebp], 180
  0100d	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv571[ebp]
  01013	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  0101a	ff d2		 call	 edx
  0101c	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01022	0f 85 e4 03 00
	00		 jne	 $LN35@draw_aircr

; 4192 : 							{
; 4193 : 								draw_threat_line = TRUE;

  01028	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 4194 : 
; 4195 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  01032	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01039	74 10		 je	 SHORT $LN177@draw_aircr
  0103b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01041	8b 08		 mov	 ecx, DWORD PTR [eax]
  01043	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv584[ebp], ecx
  01049	eb 27		 jmp	 SHORT $LN178@draw_aircr
$LN177@draw_aircr:
  0104b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01051	81 c2 b5 00 00
	00		 add	 edx, 181		; 000000b5H
  01057	52		 push	 edx
  01058	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0105d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01062	50		 push	 eax
  01063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01068	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv584[ebp], 0
$LN178@draw_aircr:
  01072	b9 01 00 00 00	 mov	 ecx, 1
  01077	85 c9		 test	 ecx, ecx
  01079	74 0c		 je	 SHORT $LN179@draw_aircr
  0107b	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv592[ebp], 24 ; 00000018H
  01085	eb 27		 jmp	 SHORT $LN180@draw_aircr
$LN179@draw_aircr:
  01087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0108d	81 c2 b5 00 00
	00		 add	 edx, 181		; 000000b5H
  01093	52		 push	 edx
  01094	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0109e	50		 push	 eax
  0109f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010a4	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv592[ebp], 0
$LN180@draw_aircr:
  010ae	6a 18		 push	 24			; 00000018H
  010b0	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  010b6	51		 push	 ecx
  010b7	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv584[ebp], 180
  010c1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv592[ebp]
  010c7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  010ce	ff d1		 call	 ecx
  010d0	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN10@draw_aircr:

; 4196 : 
; 4197 : 								while (launched_weapon)

  010d6	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010dd	0f 84 ef 01 00
	00		 je	 $LN11@draw_aircr

; 4198 : 								{
; 4199 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  010e3	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010ea	74 10		 je	 SHORT $LN181@draw_aircr
  010ec	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  010f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv604[ebp], ecx
  010fa	eb 20		 jmp	 SHORT $LN182@draw_aircr
$LN181@draw_aircr:
  010fc	68 67 10 00 00	 push	 4199			; 00001067H
  01101	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0110c	52		 push	 edx
  0110d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01112	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv604[ebp], 0
$LN182@draw_aircr:
  0111c	b8 01 00 00 00	 mov	 eax, 1
  01121	85 c0		 test	 eax, eax
  01123	74 0c		 je	 SHORT $LN183@draw_aircr
  01125	c7 85 98 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv611[ebp], 263 ; 00000107H
  0112f	eb 20		 jmp	 SHORT $LN184@draw_aircr
$LN183@draw_aircr:
  01131	68 67 10 00 00	 push	 4199			; 00001067H
  01136	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0113b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01141	51		 push	 ecx
  01142	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01147	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv611[ebp], 0
$LN184@draw_aircr:
  01151	68 07 01 00 00	 push	 263			; 00000107H
  01156	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  0115c	52		 push	 edx
  0115d	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv604[ebp], 1116
  01167	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv611[ebp]
  0116d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01174	ff d2		 call	 edx
  01176	85 c0		 test	 eax, eax
  01178	0f 84 ab 00 00
	00		 je	 $LN34@draw_aircr

; 4200 : 									{
; 4201 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  0117e	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01185	74 10		 je	 SHORT $LN185@draw_aircr
  01187	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  0118d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0118f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv623[ebp], ecx
  01195	eb 20		 jmp	 SHORT $LN186@draw_aircr
$LN185@draw_aircr:
  01197	68 69 10 00 00	 push	 4201			; 00001069H
  0119c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  011a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011a7	52		 push	 edx
  011a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011ad	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv623[ebp], 0
$LN186@draw_aircr:
  011b7	b8 01 00 00 00	 mov	 eax, 1
  011bc	85 c0		 test	 eax, eax
  011be	74 0c		 je	 SHORT $LN187@draw_aircr
  011c0	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv630[ebp], 38 ; 00000026H
  011ca	eb 20		 jmp	 SHORT $LN188@draw_aircr
$LN187@draw_aircr:
  011cc	68 69 10 00 00	 push	 4201			; 00001069H
  011d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  011d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011dc	51		 push	 ecx
  011dd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011e2	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv630[ebp], 0
$LN188@draw_aircr:
  011ec	6a 26		 push	 38			; 00000026H
  011ee	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  011f4	52		 push	 edx
  011f5	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv623[ebp], 180
  011ff	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv630[ebp]
  01205	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  0120c	ff d2		 call	 edx
  0120e	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01214	75 13		 jne	 SHORT $LN34@draw_aircr

; 4202 : 										{
; 4203 : 											draw_threat_line = *ase_draw_threat_line_status;

  01216	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  0121c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0121e	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], ecx

; 4204 : 
; 4205 : 											break;

  01224	e9 a9 00 00 00	 jmp	 $LN11@draw_aircr
$LN34@draw_aircr:

; 4206 : 										}
; 4207 : 									}
; 4208 : 
; 4209 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01229	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01230	74 10		 je	 SHORT $LN189@draw_aircr
  01232	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01238	8b 08		 mov	 ecx, DWORD PTR [eax]
  0123a	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv643[ebp], ecx
  01240	eb 27		 jmp	 SHORT $LN190@draw_aircr
$LN189@draw_aircr:
  01242	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01248	81 c2 c3 00 00
	00		 add	 edx, 195		; 000000c3H
  0124e	52		 push	 edx
  0124f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01254	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01259	50		 push	 eax
  0125a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0125f	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv643[ebp], 0
$LN190@draw_aircr:
  01269	b9 01 00 00 00	 mov	 ecx, 1
  0126e	85 c9		 test	 ecx, ecx
  01270	74 0c		 je	 SHORT $LN191@draw_aircr
  01272	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv651[ebp], 24 ; 00000018H
  0127c	eb 27		 jmp	 SHORT $LN192@draw_aircr
$LN191@draw_aircr:
  0127e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01284	81 c2 c3 00 00
	00		 add	 edx, 195		; 000000c3H
  0128a	52		 push	 edx
  0128b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01290	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01295	50		 push	 eax
  01296	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0129b	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv651[ebp], 0
$LN192@draw_aircr:
  012a5	6a 18		 push	 24			; 00000018H
  012a7	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  012ad	51		 push	 ecx
  012ae	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv643[ebp], 180
  012b8	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv651[ebp]
  012be	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  012c5	ff d1		 call	 ecx
  012c7	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 4210 : 								}

  012cd	e9 04 fe ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 4211 : 
; 4212 : 								if (draw_threat_line)

  012d2	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  012d9	0f 84 2d 01 00
	00		 je	 $LN35@draw_aircr

; 4213 : 								{
; 4214 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  012df	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  012e6	74 10		 je	 SHORT $LN193@draw_aircr
  012e8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  012ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  012f0	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv664[ebp], ecx
  012f6	eb 27		 jmp	 SHORT $LN194@draw_aircr
$LN193@draw_aircr:
  012f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  012fe	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  01304	52		 push	 edx
  01305	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0130a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0130f	50		 push	 eax
  01310	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01315	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv664[ebp], 0
$LN194@draw_aircr:
  0131f	b9 01 00 00 00	 mov	 ecx, 1
  01324	85 c9		 test	 ecx, ecx
  01326	74 0c		 je	 SHORT $LN195@draw_aircr
  01328	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv672[ebp], 8
  01332	eb 27		 jmp	 SHORT $LN196@draw_aircr
$LN195@draw_aircr:
  01334	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0133a	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  01340	52		 push	 edx
  01341	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01346	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0134b	50		 push	 eax
  0134c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01351	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN196@draw_aircr:
  0135b	6a 08		 push	 8
  0135d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01363	51		 push	 ecx
  01364	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv664[ebp], 96
  0136b	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv672[ebp]
  01371	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01378	ff d1		 call	 ecx
  0137a	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4215 : 
; 4216 : 									dx = (threat_position->x - source_position->x) * scale;

  01380	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  01386	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0138c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01390	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01394	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0139c	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4217 : 									dy = (threat_position->z - source_position->z) * scale;

  013a4	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  013aa	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013b0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  013b5	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  013ba	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  013c2	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4218 : 
; 4219 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  013ca	b8 04 00 00 00	 mov	 eax, 4
  013cf	6b c8 00	 imul	 ecx, eax, 0
  013d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013d8	52		 push	 edx
  013d9	51		 push	 ecx
  013da	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  013e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e7	51		 push	 ecx
  013e8	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  013f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f5	51		 push	 ecx
  013f6	0f 57 c0	 xorps	 xmm0, xmm0
  013f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013fe	51		 push	 ecx
  013ff	0f 57 c0	 xorps	 xmm0, xmm0
  01402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01407	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_aircr:

; 4220 : 								}
; 4221 : 							}
; 4222 : 						}
; 4223 : 					}
; 4224 : 				}
; 4225 : 			}
; 4226 : 
; 4227 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  0140c	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01413	74 10		 je	 SHORT $LN197@draw_aircr
  01415	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0141b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0141d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv699[ebp], ecx
  01423	eb 27		 jmp	 SHORT $LN198@draw_aircr
$LN197@draw_aircr:
  01425	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0142b	81 c2 d5 00 00
	00		 add	 edx, 213		; 000000d5H
  01431	52		 push	 edx
  01432	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01437	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0143c	50		 push	 eax
  0143d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01442	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv699[ebp], 0
$LN198@draw_aircr:
  0144c	b9 01 00 00 00	 mov	 ecx, 1
  01451	85 c9		 test	 ecx, ecx
  01453	74 0c		 je	 SHORT $LN199@draw_aircr
  01455	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv707[ebp], 18 ; 00000012H
  0145f	eb 27		 jmp	 SHORT $LN200@draw_aircr
$LN199@draw_aircr:
  01461	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01467	81 c2 d5 00 00
	00		 add	 edx, 213		; 000000d5H
  0146d	52		 push	 edx
  0146e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01473	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01478	50		 push	 eax
  01479	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0147e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv707[ebp], 0
$LN200@draw_aircr:
  01488	6a 12		 push	 18			; 00000012H
  0148a	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01490	51		 push	 ecx
  01491	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv699[ebp], 180
  0149b	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv707[ebp]
  014a1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014a8	ff d1		 call	 ecx
  014aa	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4228 : 		}

  014b0	e9 32 f8 ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 4229 : 
; 4230 : 		//
; 4231 : 		// draw incoming missiles
; 4232 : 		//
; 4233 : 
; 4234 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  014b5	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  014bc	74 10		 je	 SHORT $LN201@draw_aircr
  014be	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  014c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  014c6	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv719[ebp], ecx
  014cc	eb 27		 jmp	 SHORT $LN202@draw_aircr
$LN201@draw_aircr:
  014ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  014d4	81 c2 dc 00 00
	00		 add	 edx, 220		; 000000dcH
  014da	52		 push	 edx
  014db	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  014e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014e5	50		 push	 eax
  014e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014eb	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv719[ebp], 0
$LN202@draw_aircr:
  014f5	b9 01 00 00 00	 mov	 ecx, 1
  014fa	85 c9		 test	 ecx, ecx
  014fc	74 0c		 je	 SHORT $LN203@draw_aircr
  014fe	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv727[ebp], 38 ; 00000026H
  01508	eb 27		 jmp	 SHORT $LN204@draw_aircr
$LN203@draw_aircr:
  0150a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01510	81 c2 dc 00 00
	00		 add	 edx, 220		; 000000dcH
  01516	52		 push	 edx
  01517	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0151c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01521	50		 push	 eax
  01522	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01527	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv727[ebp], 0
$LN204@draw_aircr:
  01531	6a 26		 push	 38			; 00000026H
  01533	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01539	51		 push	 ecx
  0153a	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv719[ebp], 180
  01544	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv727[ebp]
  0154a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01551	ff d1		 call	 ecx
  01553	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN12@draw_aircr:

; 4235 : 
; 4236 : 		while (threat)

  01559	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01560	0f 84 39 03 00
	00		 je	 $LN13@draw_aircr

; 4237 : 		{
; 4238 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  01566	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0156d	74 10		 je	 SHORT $LN205@draw_aircr
  0156f	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01575	8b 08		 mov	 ecx, DWORD PTR [eax]
  01577	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv740[ebp], ecx
  0157d	eb 27		 jmp	 SHORT $LN206@draw_aircr
$LN205@draw_aircr:
  0157f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01585	81 c2 e0 00 00
	00		 add	 edx, 224		; 000000e0H
  0158b	52		 push	 edx
  0158c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01591	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01596	50		 push	 eax
  01597	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0159c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv740[ebp], 0
$LN206@draw_aircr:
  015a6	b9 01 00 00 00	 mov	 ecx, 1
  015ab	85 c9		 test	 ecx, ecx
  015ad	74 0c		 je	 SHORT $LN207@draw_aircr
  015af	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv748[ebp], 233 ; 000000e9H
  015b9	eb 27		 jmp	 SHORT $LN208@draw_aircr
$LN207@draw_aircr:
  015bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  015c1	81 c2 e0 00 00
	00		 add	 edx, 224		; 000000e0H
  015c7	52		 push	 edx
  015c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  015cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015d2	50		 push	 eax
  015d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015d8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv748[ebp], 0
$LN208@draw_aircr:
  015e2	68 e9 00 00 00	 push	 233			; 000000e9H
  015e7	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  015ed	51		 push	 ecx
  015ee	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv740[ebp], 1116
  015f8	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv748[ebp]
  015fe	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01605	ff d1		 call	 ecx
  01607	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4239 : 
; 4240 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  0160d	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  01614	74 16		 je	 SHORT $LN37@draw_aircr
  01616	83 bd f8 fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  0161d	74 0d		 je	 SHORT $LN37@draw_aircr
  0161f	83 bd f8 fe ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  01626	0f 85 ca 01 00
	00		 jne	 $LN39@draw_aircr
$LN37@draw_aircr:

; 4241 : 			{
; 4242 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0162c	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01633	74 10		 je	 SHORT $LN209@draw_aircr
  01635	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0163b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0163d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv763[ebp], ecx
  01643	eb 27		 jmp	 SHORT $LN210@draw_aircr
$LN209@draw_aircr:
  01645	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0164b	81 c2 e4 00 00
	00		 add	 edx, 228		; 000000e4H
  01651	52		 push	 edx
  01652	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01657	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0165c	50		 push	 eax
  0165d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01662	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv763[ebp], 0
$LN210@draw_aircr:
  0166c	b9 01 00 00 00	 mov	 ecx, 1
  01671	85 c9		 test	 ecx, ecx
  01673	74 0c		 je	 SHORT $LN211@draw_aircr
  01675	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv771[ebp], 8
  0167f	eb 27		 jmp	 SHORT $LN212@draw_aircr
$LN211@draw_aircr:
  01681	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01687	81 c2 e4 00 00
	00		 add	 edx, 228		; 000000e4H
  0168d	52		 push	 edx
  0168e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01693	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01698	50		 push	 eax
  01699	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0169e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv771[ebp], 0
$LN212@draw_aircr:
  016a8	6a 08		 push	 8
  016aa	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  016b0	51		 push	 ecx
  016b1	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv763[ebp], 96
  016b8	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv771[ebp]
  016be	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  016c5	ff d1		 call	 ecx
  016c7	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4243 : 
; 4244 : 				dx = (threat_position->x - source_position->x) * scale;

  016cd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016d3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016d9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  016dd	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  016e1	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016e9	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4245 : 				dy = (threat_position->z - source_position->z) * scale;

  016f1	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016f7	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016fd	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01702	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01707	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0170f	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4246 : 
; 4247 : 				if (draw_large_mfd)

  01717	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0171e	74 6c		 je	 SHORT $LN38@draw_aircr

; 4248 : 				{
; 4249 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01720	b8 04 00 00 00	 mov	 eax, 4
  01725	6b c8 05	 imul	 ecx, eax, 5
  01728	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0172e	52		 push	 edx
  0172f	51		 push	 ecx
  01730	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0173d	51		 push	 ecx
  0173e	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01746	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0174b	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  01750	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4250 : 
; 4251 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, MFD_COLOUR1);

  01755	b8 04 00 00 00	 mov	 eax, 4
  0175a	6b c8 00	 imul	 ecx, eax, 0
  0175d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01763	52		 push	 edx
  01764	51		 push	 ecx
  01765	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0176d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01772	51		 push	 ecx
  01773	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0177b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01780	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  01785	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4252 : 				}
; 4253 : 				else

  0178a	eb 6a		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 4254 : 				{
; 4255 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, MFD_COLOUR6);

  0178c	b8 04 00 00 00	 mov	 eax, 4
  01791	6b c8 05	 imul	 ecx, eax, 5
  01794	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0179a	52		 push	 edx
  0179b	51		 push	 ecx
  0179c	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  017a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a9	51		 push	 ecx
  017aa	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b7	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  017bc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4256 : 
; 4257 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, MFD_COLOUR1);

  017c1	b8 04 00 00 00	 mov	 eax, 4
  017c6	6b c8 00	 imul	 ecx, eax, 0
  017c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017cf	52		 push	 edx
  017d0	51		 push	 ecx
  017d1	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  017d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017de	51		 push	 ecx
  017df	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ec	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  017f1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN39@draw_aircr:

; 4258 : 				}
; 4259 : 			}
; 4260 : 
; 4261 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  017f6	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  017fd	74 10		 je	 SHORT $LN213@draw_aircr
  017ff	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01805	8b 08		 mov	 ecx, DWORD PTR [eax]
  01807	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv816[ebp], ecx
  0180d	eb 27		 jmp	 SHORT $LN214@draw_aircr
$LN213@draw_aircr:
  0180f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01815	81 c2 f7 00 00
	00		 add	 edx, 247		; 000000f7H
  0181b	52		 push	 edx
  0181c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01821	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01826	50		 push	 eax
  01827	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0182c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv816[ebp], 0
$LN214@draw_aircr:
  01836	b9 01 00 00 00	 mov	 ecx, 1
  0183b	85 c9		 test	 ecx, ecx
  0183d	74 0c		 je	 SHORT $LN215@draw_aircr
  0183f	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv824[ebp], 38 ; 00000026H
  01849	eb 27		 jmp	 SHORT $LN216@draw_aircr
$LN215@draw_aircr:
  0184b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01851	81 c2 f7 00 00
	00		 add	 edx, 247		; 000000f7H
  01857	52		 push	 edx
  01858	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0185d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01862	50		 push	 eax
  01863	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01868	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv824[ebp], 0
$LN216@draw_aircr:
  01872	6a 26		 push	 38			; 00000026H
  01874	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0187a	51		 push	 ecx
  0187b	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv816[ebp], 180
  01885	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv824[ebp]
  0188b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01892	ff d1		 call	 ecx
  01894	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4262 : 		}

  0189a	e9 ba fc ff ff	 jmp	 $LN12@draw_aircr
$LN13@draw_aircr:

; 4263 : 
; 4264 : 		set_2d_window_rotation (mfd_env, 0.0);

  0189f	51		 push	 ecx
  018a0	0f 57 c0	 xorps	 xmm0, xmm0
  018a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  018ad	50		 push	 eax
  018ae	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4265 : 	}
; 4266 : 
; 4267 : 	////////////////////////////////////////
; 4268 : 	//
; 4269 : 	// aircraft datum symbol
; 4270 : 	//
; 4271 : 	////////////////////////////////////////
; 4272 : 
; 4273 : 	if (draw_large_mfd)

  018b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018ba	74 58		 je	 SHORT $LN40@draw_aircr

; 4274 : 	{
; 4275 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  018bc	b8 04 00 00 00	 mov	 eax, 4
  018c1	6b c8 05	 imul	 ecx, eax, 5
  018c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018ca	52		 push	 edx
  018cb	51		 push	 ecx
  018cc	0f 57 c0	 xorps	 xmm0, xmm0
  018cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d4	51		 push	 ecx
  018d5	0f 57 c0	 xorps	 xmm0, xmm0
  018d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018dd	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  018e2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4276 : 
; 4277 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  018e7	b8 04 00 00 00	 mov	 eax, 4
  018ec	6b c8 00	 imul	 ecx, eax, 0
  018ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018f5	52		 push	 edx
  018f6	51		 push	 ecx
  018f7	0f 57 c0	 xorps	 xmm0, xmm0
  018fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018ff	51		 push	 ecx
  01900	0f 57 c0	 xorps	 xmm0, xmm0
  01903	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01908	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  0190d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4278 : 	}
; 4279 : 	else

  01912	eb 56		 jmp	 SHORT $LN41@draw_aircr
$LN40@draw_aircr:

; 4280 : 	{
; 4281 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  01914	b8 04 00 00 00	 mov	 eax, 4
  01919	6b c8 05	 imul	 ecx, eax, 5
  0191c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01922	52		 push	 edx
  01923	51		 push	 ecx
  01924	0f 57 c0	 xorps	 xmm0, xmm0
  01927	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0192c	51		 push	 ecx
  0192d	0f 57 c0	 xorps	 xmm0, xmm0
  01930	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01935	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  0193a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4282 : 
; 4283 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  0193f	b8 04 00 00 00	 mov	 eax, 4
  01944	6b c8 00	 imul	 ecx, eax, 0
  01947	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0194d	52		 push	 edx
  0194e	51		 push	 ecx
  0194f	0f 57 c0	 xorps	 xmm0, xmm0
  01952	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01957	51		 push	 ecx
  01958	0f 57 c0	 xorps	 xmm0, xmm0
  0195b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01960	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  01965	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_aircr:

; 4284 : 	}
; 4285 : 
; 4286 : 	set_mono_font_colour (MFD_COLOUR1);

  0196a	b8 04 00 00 00	 mov	 eax, 4
  0196f	6b c8 00	 imul	 ecx, eax, 0
  01972	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01978	52		 push	 edx
  01979	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4287 : 
; 4288 : 	if (draw_large_mfd)

  0197e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01985	74 09		 je	 SHORT $LN42@draw_aircr

; 4289 : 	{
; 4290 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  01987	6a 05		 push	 5
  01989	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4291 : 	}
; 4292 : 	else

  0198e	eb 07		 jmp	 SHORT $LN43@draw_aircr
$LN42@draw_aircr:

; 4293 : 	{
; 4294 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  01990	6a 01		 push	 1
  01992	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN43@draw_aircr:

; 4295 : 	}
; 4296 : 
; 4297 : 	////////////////////////////////////////
; 4298 : 	//
; 4299 : 	// text
; 4300 : 	//
; 4301 : 	////////////////////////////////////////
; 4302 : 
; 4303 : 	//
; 4304 : 	// closest incoming missile
; 4305 : 	//
; 4306 : 
; 4307 : 	{
; 4308 : 		entity
; 4309 : 			*closest_missile;
; 4310 : 
; 4311 : 		float
; 4312 : 			time_to_impact;
; 4313 : 
; 4314 : 		if (draw_large_mfd)

  01997	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0199e	74 12		 je	 SHORT $LN44@draw_aircr

; 4315 : 		{
; 4316 : 			y_adjust = 5.0;

  019a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  019a8	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4317 : 		}
; 4318 : 		else

  019b0	eb 10		 jmp	 SHORT $LN45@draw_aircr
$LN44@draw_aircr:

; 4319 : 		{
; 4320 : 			y_adjust = 2.0;

  019b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  019ba	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN45@draw_aircr:

; 4321 : 		}
; 4322 : 
; 4323 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  019c2	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  019c8	50		 push	 eax
  019c9	6a 02		 push	 2
  019cb	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  019d1	51		 push	 ecx
  019d2	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  019d8	52		 push	 edx
  019d9	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  019de	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 4324 : 
; 4325 : 		if (closest_missile)

  019e4	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  019eb	0f 84 b5 00 00
	00		 je	 $LN48@draw_aircr

; 4326 : 		{
; 4327 : 			set_2d_mono_font_position (-1.0, 1.0);

  019f1	51		 push	 ecx
  019f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  019fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019ff	51		 push	 ecx
  01a00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4328 : 
; 4329 : 			set_mono_font_rel_position (1.0, y_adjust);

  01a12	51		 push	 ecx
  01a13	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a20	51		 push	 ecx
  01a21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4330 : 
; 4331 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  01a33	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01a3b	83 ec 08	 sub	 esp, 8
  01a3e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01a43	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  01a48	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a4e	50		 push	 eax
  01a4f	e8 00 00 00 00	 call	 _sprintf
  01a54	83 c4 10	 add	 esp, 16			; 00000010H

; 4332 : 
; 4333 : 			print_mono_font_string (buffer);

  01a57	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a5d	50		 push	 eax
  01a5e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4334 : 
; 4335 : 			if (draw_large_mfd)

  01a63	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a6a	74 1e		 je	 SHORT $LN47@draw_aircr

; 4336 : 			{
; 4337 : 				y_adjust += 13.0;

  01a6c	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a74	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01a7c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a80	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4338 : 			}
; 4339 : 			else

  01a88	eb 1c		 jmp	 SHORT $LN48@draw_aircr
$LN47@draw_aircr:

; 4340 : 			{
; 4341 : 				y_adjust += 7.0;

  01a8a	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a92	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01a9a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a9e	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN48@draw_aircr:

; 4342 : 			}
; 4343 : 		}
; 4344 : 
; 4345 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01aa6	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01aac	50		 push	 eax
  01aad	6a 01		 push	 1
  01aaf	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01ab5	51		 push	 ecx
  01ab6	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01abc	52		 push	 edx
  01abd	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01ac2	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 4346 : 
; 4347 : 		if (closest_missile)

  01ac8	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01acf	0f 84 b5 00 00
	00		 je	 $LN51@draw_aircr

; 4348 : 		{
; 4349 : 			set_2d_mono_font_position (-1.0, 1.0);

  01ad5	51		 push	 ecx
  01ad6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ade	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae3	51		 push	 ecx
  01ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01aec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4350 : 
; 4351 : 			set_mono_font_rel_position (1.0, y_adjust);

  01af6	51		 push	 ecx
  01af7	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01aff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b04	51		 push	 ecx
  01b05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b12	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4352 : 
; 4353 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01b17	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b1f	83 ec 08	 sub	 esp, 8
  01b22	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b27	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01b2c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b32	50		 push	 eax
  01b33	e8 00 00 00 00	 call	 _sprintf
  01b38	83 c4 10	 add	 esp, 16			; 00000010H

; 4354 : 
; 4355 : 			print_mono_font_string (buffer);

  01b3b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b41	50		 push	 eax
  01b42	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4356 : 
; 4357 : 			if (draw_large_mfd)

  01b47	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01b4e	74 1e		 je	 SHORT $LN50@draw_aircr

; 4358 : 			{
; 4359 : 				y_adjust += 13.0;

  01b50	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b58	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01b60	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b64	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4360 : 			}
; 4361 : 			else

  01b6c	eb 1c		 jmp	 SHORT $LN51@draw_aircr
$LN50@draw_aircr:

; 4362 : 			{
; 4363 : 				y_adjust += 7.0;

  01b6e	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b76	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01b7e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b82	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN51@draw_aircr:

; 4364 : 			}
; 4365 : 		}
; 4366 : 
; 4367 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01b8a	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01b90	50		 push	 eax
  01b91	6a 03		 push	 3
  01b93	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01b99	51		 push	 ecx
  01b9a	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ba0	52		 push	 edx
  01ba1	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01ba6	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 4368 : 
; 4369 : 		if (closest_missile)

  01bac	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01bb3	74 72		 je	 SHORT $LN52@draw_aircr

; 4370 : 		{
; 4371 : 			set_2d_mono_font_position (-1.0, 1.0);

  01bb5	51		 push	 ecx
  01bb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01bbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc3	51		 push	 ecx
  01bc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01bcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4372 : 
; 4373 : 			set_mono_font_rel_position (1.0, y_adjust);

  01bd6	51		 push	 ecx
  01bd7	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be4	51		 push	 ecx
  01be5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01bed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4374 : 
; 4375 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01bf7	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01bff	83 ec 08	 sub	 esp, 8
  01c02	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01c07	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01c0c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c12	50		 push	 eax
  01c13	e8 00 00 00 00	 call	 _sprintf
  01c18	83 c4 10	 add	 esp, 16			; 00000010H

; 4376 : 
; 4377 : 			print_mono_font_string (buffer);

  01c1b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c21	50		 push	 eax
  01c22	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN52@draw_aircr:

; 4378 : 		}
; 4379 : 	}
; 4380 : 
; 4381 : 	//
; 4382 : 	// ASE range
; 4383 : 	//
; 4384 : 
; 4385 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01c27	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c2f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01c36	9f		 lahf
  01c37	f6 c4 44	 test	 ah, 68			; 00000044H
  01c3a	7a 09		 jp	 SHORT $LN53@draw_aircr

; 4386 : 	{
; 4387 : 		s = "2Km";

  01c3c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  01c43	eb 61		 jmp	 SHORT $LN60@draw_aircr
$LN53@draw_aircr:

; 4388 : 	}
; 4389 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01c45	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c4d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01c54	9f		 lahf
  01c55	f6 c4 44	 test	 ah, 68			; 00000044H
  01c58	7a 09		 jp	 SHORT $LN55@draw_aircr

; 4390 : 	{
; 4391 : 		s = "5Km";

  01c5a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  01c61	eb 43		 jmp	 SHORT $LN60@draw_aircr
$LN55@draw_aircr:

; 4392 : 	}
; 4393 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01c63	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c6b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01c72	9f		 lahf
  01c73	f6 c4 44	 test	 ah, 68			; 00000044H
  01c76	7a 09		 jp	 SHORT $LN57@draw_aircr

; 4394 : 	{
; 4395 : 		s = "10Km";

  01c78	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  01c7f	eb 25		 jmp	 SHORT $LN60@draw_aircr
$LN57@draw_aircr:

; 4396 : 	}
; 4397 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01c81	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c89	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01c90	9f		 lahf
  01c91	f6 c4 44	 test	 ah, 68			; 00000044H
  01c94	7a 09		 jp	 SHORT $LN59@draw_aircr

; 4398 : 	{
; 4399 : 		s = "25Km";

  01c96	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 4400 : 	}
; 4401 : 	else

  01c9d	eb 07		 jmp	 SHORT $LN60@draw_aircr
$LN59@draw_aircr:

; 4402 : 	{
; 4403 : 		s = "XXX";

  01c9f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN60@draw_aircr:

; 4404 : 	}
; 4405 : 
; 4406 : 	width = get_mono_font_string_width (s);

  01ca6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01ca9	50		 push	 eax
  01caa	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01caf	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4407 : 
; 4408 : 	if (draw_large_mfd)

  01cb5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01cbc	74 2e		 je	 SHORT $LN61@draw_aircr

; 4409 : 	{
; 4410 : 		width += 2.0;

  01cbe	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01cc6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01cce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cd2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4411 : 
; 4412 : 		y_adjust = 5.0;

  01cda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01ce2	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4413 : 	}
; 4414 : 	else

  01cea	eb 2c		 jmp	 SHORT $LN62@draw_aircr
$LN61@draw_aircr:

; 4415 : 	{
; 4416 : 		width += 1.0;

  01cec	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01cf4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01cfc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d00	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4417 : 
; 4418 : 		y_adjust = 2.0;

  01d08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01d10	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN62@draw_aircr:

; 4419 : 	}
; 4420 : 
; 4421 : 	set_2d_mono_font_position (1.0, 1.0);

  01d18	51		 push	 ecx
  01d19	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d26	51		 push	 ecx
  01d27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d34	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4422 : 
; 4423 : 	set_mono_font_rel_position (-width, y_adjust);

  01d39	51		 push	 ecx
  01d3a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01d42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d47	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01d4f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d56	51		 push	 ecx
  01d57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4424 : 
; 4425 : 	print_mono_font_string (s);

  01d61	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01d64	50		 push	 eax
  01d65	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4426 : 
; 4427 : 	//
; 4428 : 	// jammers
; 4429 : 	//
; 4430 : 
; 4431 : 	if (draw_large_mfd)

  01d6a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01d71	0f 84 d2 00 00
	00		 je	 $LN63@draw_aircr

; 4432 : 	{
; 4433 : 		if (kiowa_damage.infra_red_jammer)

  01d77	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  01d7c	c1 e8 03	 shr	 eax, 3
  01d7f	83 e0 01	 and	 eax, 1
  01d82	74 0c		 je	 SHORT $LN65@draw_aircr

; 4434 : 		{
; 4435 : 			s = "IR JAM XXX";

  01d84	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 4436 : 		}
; 4437 : 		else

  01d8b	e9 a4 00 00 00	 jmp	 $LN68@draw_aircr
$LN65@draw_aircr:

; 4438 : 		{
; 4439 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01d90	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01d97	74 10		 je	 SHORT $LN217@draw_aircr
  01d99	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01d9f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01da1	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv983[ebp], ecx
  01da7	eb 20		 jmp	 SHORT $LN218@draw_aircr
$LN217@draw_aircr:
  01da9	68 57 11 00 00	 push	 4439			; 00001157H
  01dae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01db3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01db9	52		 push	 edx
  01dba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dbf	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv983[ebp], 0
$LN218@draw_aircr:
  01dc9	b8 01 00 00 00	 mov	 eax, 1
  01dce	85 c0		 test	 eax, eax
  01dd0	74 0c		 je	 SHORT $LN219@draw_aircr
  01dd2	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv990[ebp], 104 ; 00000068H
  01ddc	eb 20		 jmp	 SHORT $LN220@draw_aircr
$LN219@draw_aircr:
  01dde	68 57 11 00 00	 push	 4439			; 00001157H
  01de3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01de8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01dee	51		 push	 ecx
  01def	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01df4	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv990[ebp], 0
$LN220@draw_aircr:
  01dfe	6a 68		 push	 104			; 00000068H
  01e00	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01e06	52		 push	 edx
  01e07	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv983[ebp], 1116
  01e11	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv990[ebp]
  01e17	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e1e	ff d2		 call	 edx
  01e20	85 c0		 test	 eax, eax
  01e22	74 09		 je	 SHORT $LN67@draw_aircr

; 4440 : 			{
; 4441 : 				s = "IR JAM ON";

  01e24	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 4442 : 			}
; 4443 : 			else

  01e2b	eb 07		 jmp	 SHORT $LN68@draw_aircr
$LN67@draw_aircr:

; 4444 : 			{
; 4445 : 				s = "IR JAM OFF";

  01e2d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN68@draw_aircr:

; 4446 : 			}
; 4447 : 		}
; 4448 : 
; 4449 : 		y_adjust = -25.0;

  01e34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01e3c	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4450 : 	}
; 4451 : 	else

  01e44	e9 cd 00 00 00	 jmp	 $LN64@draw_aircr
$LN63@draw_aircr:

; 4452 : 	{
; 4453 : 		if (kiowa_damage.infra_red_jammer)

  01e49	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  01e4e	c1 e8 03	 shr	 eax, 3
  01e51	83 e0 01	 and	 eax, 1
  01e54	74 0c		 je	 SHORT $LN69@draw_aircr

; 4454 : 		{
; 4455 : 			s = "IR XXX";

  01e56	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 4456 : 		}
; 4457 : 		else

  01e5d	e9 a4 00 00 00	 jmp	 $LN72@draw_aircr
$LN69@draw_aircr:

; 4458 : 		{
; 4459 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01e62	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01e69	74 10		 je	 SHORT $LN221@draw_aircr
  01e6b	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01e71	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e73	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1005[ebp], ecx
  01e79	eb 20		 jmp	 SHORT $LN222@draw_aircr
$LN221@draw_aircr:
  01e7b	68 6b 11 00 00	 push	 4459			; 0000116bH
  01e80	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e8b	52		 push	 edx
  01e8c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e91	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1005[ebp], 0
$LN222@draw_aircr:
  01e9b	b8 01 00 00 00	 mov	 eax, 1
  01ea0	85 c0		 test	 eax, eax
  01ea2	74 0c		 je	 SHORT $LN223@draw_aircr
  01ea4	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1012[ebp], 104 ; 00000068H
  01eae	eb 20		 jmp	 SHORT $LN224@draw_aircr
$LN223@draw_aircr:
  01eb0	68 6b 11 00 00	 push	 4459			; 0000116bH
  01eb5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01eba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01ec0	51		 push	 ecx
  01ec1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ec6	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1012[ebp], 0
$LN224@draw_aircr:
  01ed0	6a 68		 push	 104			; 00000068H
  01ed2	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ed8	52		 push	 edx
  01ed9	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1005[ebp], 1116
  01ee3	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1012[ebp]
  01ee9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01ef0	ff d2		 call	 edx
  01ef2	85 c0		 test	 eax, eax
  01ef4	74 09		 je	 SHORT $LN71@draw_aircr

; 4460 : 			{
; 4461 : 				s = "IR ON";

  01ef6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 4462 : 			}
; 4463 : 			else

  01efd	eb 07		 jmp	 SHORT $LN72@draw_aircr
$LN71@draw_aircr:

; 4464 : 			{
; 4465 : 				s = "IR OFF";

  01eff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN72@draw_aircr:

; 4466 : 			}
; 4467 : 		}
; 4468 : 
; 4469 : 		y_adjust = -12.0;

  01f06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01f0e	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN64@draw_aircr:

; 4470 : 	}
; 4471 : 
; 4472 : 	set_2d_mono_font_position (-1.0, -1.0);

  01f16	51		 push	 ecx
  01f17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f24	51		 push	 ecx
  01f25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f32	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4473 : 
; 4474 : 	set_mono_font_rel_position (1.0, y_adjust);

  01f37	51		 push	 ecx
  01f38	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01f40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f45	51		 push	 ecx
  01f46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01f4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f53	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4475 : 
; 4476 : 	print_mono_font_string (s);

  01f58	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01f5b	50		 push	 eax
  01f5c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4477 : 
; 4478 : 	//
; 4479 : 	// auto-countermeasures
; 4480 : 	//
; 4481 : 
; 4482 : 	if (get_global_auto_counter_measures ())

  01f61	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  01f68	0f 84 16 01 00
	00		 je	 $LN73@draw_aircr

; 4483 : 	{
; 4484 : 		s = "AUTO";

  01f6e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 4485 : 
; 4486 : 		width = get_mono_font_string_width (s);

  01f75	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01f78	50		 push	 eax
  01f79	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01f7e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4487 : 
; 4488 : 		if (draw_large_mfd)

  01f84	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01f8b	74 2e		 je	 SHORT $LN74@draw_aircr

; 4489 : 		{
; 4490 : 			width += 2.0;

  01f8d	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01f95	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01f9d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01fa1	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4491 : 
; 4492 : 			y_adjust = -38.0;

  01fa9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  01fb1	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4493 : 		}
; 4494 : 		else

  01fb9	eb 2c		 jmp	 SHORT $LN75@draw_aircr
$LN74@draw_aircr:

; 4495 : 		{
; 4496 : 			width += 1.0;

  01fbb	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01fc3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01fcb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01fcf	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4497 : 
; 4498 : 			y_adjust = -19.0;

  01fd7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  01fdf	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN75@draw_aircr:

; 4499 : 		}
; 4500 : 
; 4501 : 		set_2d_mono_font_position (-1.0, -1.0);

  01fe7	51		 push	 ecx
  01fe8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ff0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ff5	51		 push	 ecx
  01ff6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ffe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02003	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4502 : 
; 4503 : 		set_mono_font_rel_position (1.0, y_adjust);

  02008	51		 push	 ecx
  02009	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02016	51		 push	 ecx
  02017	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0201f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02024	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4504 : 
; 4505 : 		print_mono_font_string (s);

  02029	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0202c	50		 push	 eax
  0202d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4506 : 
; 4507 : 		set_2d_mono_font_position (1.0, -1.0);

  02032	51		 push	 ecx
  02033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0203b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02040	51		 push	 ecx
  02041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0204e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4508 : 
; 4509 : 		set_mono_font_rel_position (-width, y_adjust);

  02053	51		 push	 ecx
  02054	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0205c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02061	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02069	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02070	51		 push	 ecx
  02071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02076	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4510 : 
; 4511 : 		print_mono_font_string (s);

  0207b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0207e	50		 push	 eax
  0207f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN73@draw_aircr:

; 4512 : 	}
; 4513 : 
; 4514 : 	//
; 4515 : 	// chaff
; 4516 : 	//
; 4517 : 
; 4518 : 	if (draw_large_mfd)

  02084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0208b	0f 84 89 00 00
	00		 je	 $LN76@draw_aircr

; 4519 : 	{
; 4520 : 		if (kiowa_damage.chaff_dispenser)

  02091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  02096	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  02099	83 e0 01	 and	 eax, 1
  0209c	74 16		 je	 SHORT $LN78@draw_aircr

; 4521 : 		{
; 4522 : 			sprintf (buffer, "CHAFF:XX");

  0209e	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  020a3	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  020a9	50		 push	 eax
  020aa	e8 00 00 00 00	 call	 _sprintf
  020af	83 c4 08	 add	 esp, 8

; 4523 : 		}
; 4524 : 		else

  020b2	eb 23		 jmp	 SHORT $LN79@draw_aircr
$LN78@draw_aircr:

; 4525 : 		{
; 4526 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  020b4	6a 43		 push	 67			; 00000043H
  020b6	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  020bc	50		 push	 eax
  020bd	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  020c2	50		 push	 eax
  020c3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  020c8	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  020ce	51		 push	 ecx
  020cf	e8 00 00 00 00	 call	 _sprintf
  020d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN79@draw_aircr:

; 4527 : 		}
; 4528 : 
; 4529 : 		width = get_mono_font_string_width (buffer);

  020d7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  020dd	50		 push	 eax
  020de	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  020e3	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4530 : 
; 4531 : 		width += 2.0;

  020e9	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  020f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  020f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020fd	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4532 : 
; 4533 : 		y_adjust = -25.0;

  02105	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0210d	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4534 : 	}
; 4535 : 	else

  02115	e9 84 00 00 00	 jmp	 $LN77@draw_aircr
$LN76@draw_aircr:

; 4536 : 	{
; 4537 : 		if (kiowa_damage.chaff_dispenser)

  0211a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0211f	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  02122	83 e0 01	 and	 eax, 1
  02125	74 16		 je	 SHORT $LN80@draw_aircr

; 4538 : 		{
; 4539 : 			sprintf (buffer, "C:XX");

  02127	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  0212c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02132	50		 push	 eax
  02133	e8 00 00 00 00	 call	 _sprintf
  02138	83 c4 08	 add	 esp, 8

; 4540 : 		}
; 4541 : 		else

  0213b	eb 23		 jmp	 SHORT $LN81@draw_aircr
$LN80@draw_aircr:

; 4542 : 		{
; 4543 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  0213d	6a 43		 push	 67			; 00000043H
  0213f	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02145	50		 push	 eax
  02146	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  0214b	50		 push	 eax
  0214c	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  02151	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02157	51		 push	 ecx
  02158	e8 00 00 00 00	 call	 _sprintf
  0215d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN81@draw_aircr:

; 4544 : 		}
; 4545 : 
; 4546 : 		width = get_mono_font_string_width (buffer);

  02160	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02166	50		 push	 eax
  02167	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0216c	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4547 : 
; 4548 : 		width += 1.0;

  02172	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0217a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02182	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02186	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4549 : 
; 4550 : 		y_adjust = -12.0;

  0218e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02196	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN77@draw_aircr:

; 4551 : 	}
; 4552 : 
; 4553 : 	set_2d_mono_font_position (1.0, -1.0);

  0219e	51		 push	 ecx
  0219f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ac	51		 push	 ecx
  021ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ba	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4554 : 
; 4555 : 	set_mono_font_rel_position (-width, y_adjust);

  021bf	51		 push	 ecx
  021c0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  021c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021cd	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  021d5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  021dc	51		 push	 ecx
  021dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4556 : 
; 4557 : 	print_mono_font_string (buffer);

  021e7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  021ed	50		 push	 eax
  021ee	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4558 : 
; 4559 : 	//
; 4560 : 	// flares
; 4561 : 	//
; 4562 : 
; 4563 : 	if (draw_large_mfd)

  021f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  021fa	0f 84 89 00 00
	00		 je	 $LN82@draw_aircr

; 4564 : 	{
; 4565 : 		if (kiowa_damage.flare_dispenser)

  02200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  02205	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  02208	83 e0 01	 and	 eax, 1
  0220b	74 16		 je	 SHORT $LN84@draw_aircr

; 4566 : 		{
; 4567 : 			sprintf (buffer, "FLARE:XX");

  0220d	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  02212	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02218	50		 push	 eax
  02219	e8 00 00 00 00	 call	 _sprintf
  0221e	83 c4 08	 add	 esp, 8

; 4568 : 		}
; 4569 : 		else

  02221	eb 23		 jmp	 SHORT $LN85@draw_aircr
$LN84@draw_aircr:

; 4570 : 		{
; 4571 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  02223	6a 44		 push	 68			; 00000044H
  02225	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0222b	50		 push	 eax
  0222c	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02231	50		 push	 eax
  02232	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  02237	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0223d	51		 push	 ecx
  0223e	e8 00 00 00 00	 call	 _sprintf
  02243	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN85@draw_aircr:

; 4572 : 		}
; 4573 : 
; 4574 : 		width = get_mono_font_string_width (buffer);

  02246	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0224c	50		 push	 eax
  0224d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02252	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4575 : 
; 4576 : 		width += 2.0;

  02258	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02260	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02268	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0226c	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4577 : 
; 4578 : 		y_adjust = -12.0;

  02274	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0227c	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4579 : 	}
; 4580 : 	else

  02284	e9 84 00 00 00	 jmp	 $LN83@draw_aircr
$LN82@draw_aircr:

; 4581 : 	{
; 4582 : 		if (kiowa_damage.flare_dispenser)

  02289	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0228e	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  02291	83 e0 01	 and	 eax, 1
  02294	74 16		 je	 SHORT $LN86@draw_aircr

; 4583 : 		{
; 4584 : 			sprintf (buffer, "F:XX");

  02296	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  0229b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022a1	50		 push	 eax
  022a2	e8 00 00 00 00	 call	 _sprintf
  022a7	83 c4 08	 add	 esp, 8

; 4585 : 		}
; 4586 : 		else

  022aa	eb 23		 jmp	 SHORT $LN87@draw_aircr
$LN86@draw_aircr:

; 4587 : 		{
; 4588 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  022ac	6a 44		 push	 68			; 00000044H
  022ae	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  022b4	50		 push	 eax
  022b5	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  022ba	50		 push	 eax
  022bb	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  022c0	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  022c6	51		 push	 ecx
  022c7	e8 00 00 00 00	 call	 _sprintf
  022cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN87@draw_aircr:

; 4589 : 		}
; 4590 : 
; 4591 : 		width = get_mono_font_string_width (buffer);

  022cf	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022d5	50		 push	 eax
  022d6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  022db	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4592 : 
; 4593 : 		width += 1.0;

  022e1	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  022e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  022f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022f5	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 4594 : 
; 4595 : 		y_adjust = -5.0;

  022fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02305	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN83@draw_aircr:

; 4596 : 	}
; 4597 : 
; 4598 : 	set_2d_mono_font_position (1.0, -1.0);

  0230d	51		 push	 ecx
  0230e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02316	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0231b	51		 push	 ecx
  0231c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02324	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02329	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4599 : 
; 4600 : 	set_mono_font_rel_position (-width, y_adjust);

  0232e	51		 push	 ecx
  0232f	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0233c	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02344	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0234b	51		 push	 ecx
  0234c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02351	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4601 : 
; 4602 : 	print_mono_font_string (buffer);

  02356	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0235c	50		 push	 eax
  0235d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4603 : }

  02362	5f		 pop	 edi
  02363	5e		 pop	 esi
  02364	5b		 pop	 ebx
  02365	8b e5		 mov	 esp, ebp
  02367	5d		 pop	 ebp
  02368	c2 04 00	 ret	 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 3911 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3912 : 	entity
; 3913 : 		*threat,
; 3914 : 		*closest_missile;
; 3915 : 
; 3916 : 	int
; 3917 : 		overshot;
; 3918 : 
; 3919 : 	float
; 3920 : 		threat_range,
; 3921 : 		threat_velocity,
; 3922 : 		time_to_impact,
; 3923 : 		length,
; 3924 : 		cos_error;
; 3925 : 
; 3926 : 	vec3d
; 3927 : 		*threat_position,
; 3928 : 		uvec_threat_to_target;
; 3929 : 
; 3930 : 	matrix3x3
; 3931 : 		*attitude;
; 3932 : 
; 3933 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 3934 : 
; 3935 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 3936 : 
; 3937 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 3938 : 
; 3939 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 3940 : 
; 3941 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 3942 : 
; 3943 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 3944 : 
; 3945 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 3946 : 	{
; 3947 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 6b 0f 00 00	 push	 3947			; 00000f6bH
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 6b 0f 00 00	 push	 3947			; 00000f6bH
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 3948 : 		{
; 3949 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 3950 : 
; 3951 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 3952 : 
; 3953 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 3954 : 
; 3955 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 3956 : 
; 3957 : 			//
; 3958 : 			// guard against 'overshot target' to prevent spurious indications
; 3959 : 			//
; 3960 : 
; 3961 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 3962 : 
; 3963 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 3964 : 			{
; 3965 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 3966 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 3967 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 3968 : 
; 3969 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 3970 : 
; 3971 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 3972 : 				{
; 3973 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 3974 : 
; 3975 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 3976 : 
; 3977 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 3978 : 
; 3979 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 3980 : 					{
; 3981 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 3982 : 					}
; 3983 : 				}
; 3984 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 3985 : 				{
; 3986 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 3987 : 				}
; 3988 : 			}
; 3989 : 
; 3990 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 3991 : 			{
; 3992 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 3993 : 				{
; 3994 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 3995 : 
; 3996 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 3997 : 				}
; 3998 : 			}
; 3999 : 		}
; 4000 : 
; 4001 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 4002 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 4003 : 
; 4004 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 4005 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv2209 = -460						; size = 4
tv1936 = -460						; size = 4
tv1367 = -456						; size = 4
tv1338 = -456						; size = 4
tv1302 = -456						; size = 4
tv1229 = -456						; size = 4
tv1141 = -456						; size = 4
tv1083 = -456						; size = 4
tv1048 = -456						; size = 4
tv1027 = -456						; size = 4
tv1006 = -456						; size = 4
tv987 = -456						; size = 4
tv968 = -456						; size = 4
tv915 = -456						; size = 4
tv894 = -456						; size = 4
tv873 = -456						; size = 4
tv854 = -456						; size = 4
tv835 = -456						; size = 4
tv816 = -456						; size = 4
tv784 = -456						; size = 4
tv752 = -456						; size = 4
tv733 = -456						; size = 4
tv713 = -456						; size = 4
tv672 = -456						; size = 4
tv644 = -456						; size = 4
tv622 = -456						; size = 4
tv601 = -456						; size = 4
tv582 = -456						; size = 4
tv563 = -456						; size = 4
tv526 = -456						; size = 4
tv473 = -456						; size = 4
tv400 = -456						; size = 4
tv339 = -456						; size = 4
tv180 = -456						; size = 4
tv160 = -456						; size = 4
tv140 = -456						; size = 4
tv88 = -456						; size = 4
tv1359 = -452						; size = 4
tv1330 = -452						; size = 4
tv1294 = -452						; size = 4
tv1221 = -452						; size = 4
tv1166 = -452						; size = 4
tv1156 = -452						; size = 4
tv1133 = -452						; size = 4
tv1075 = -452						; size = 4
tv1040 = -452						; size = 4
tv1019 = -452						; size = 4
tv999 = -452						; size = 4
tv980 = -452						; size = 4
tv960 = -452						; size = 4
tv908 = -452						; size = 4
tv886 = -452						; size = 4
tv866 = -452						; size = 4
tv847 = -452						; size = 4
tv828 = -452						; size = 4
tv808 = -452						; size = 4
tv776 = -452						; size = 4
tv745 = -452						; size = 4
tv725 = -452						; size = 4
tv705 = -452						; size = 4
tv664 = -452						; size = 4
tv636 = -452						; size = 4
tv614 = -452						; size = 4
tv594 = -452						; size = 4
tv575 = -452						; size = 4
tv555 = -452						; size = 4
tv518 = -452						; size = 4
tv465 = -452						; size = 4
tv392 = -452						; size = 4
tv331 = -452						; size = 4
tv172 = -452						; size = 4
tv152 = -452						; size = 4
tv132 = -452						; size = 4
tv80 = -452						; size = 4
tv70 = -452						; size = 4
_seconds$1 = -384					; size = 4
_minutes$2 = -380					; size = 4
_hours$3 = -376						; size = 4
_time_to_go$4 = -372					; size = 4
_f$5 = -368						; size = 4
_i$6 = -364						; size = 4
_waypoint_range$7 = -360				; size = 4
_waypoint_position$8 = -356				; size = 12
_wp$9 = -344						; size = 4
_target_range$10 = -340					; size = 4
_target_position$11 = -336				; size = 4
_dy$12 = -332						; size = 4
_dx$13 = -328						; size = 4
_air_scan_range$14 = -324				; size = 4
_draw_threat_line$15 = -320				; size = 4
_threat_type$16 = -316					; size = 4
_target_position$17 = -312				; size = 4
_launched_weapon$18 = -308				; size = 4
_target$19 = -304					; size = 4
_wp2_rel_position$20 = -300				; size = 12
_wp1_rel_position$21 = -288				; size = 12
_wp2$22 = -276						; size = 4
_wp1$23 = -272						; size = 4
_source_position$ = -268				; size = 4
_source_target$ = -264					; size = 4
_source$ = -260						; size = 4
_tsd_threat_line_flash_timer$ = -256			; size = 4
_tsd_ase_range$ = -252					; size = 4
_source_heading$ = -248					; size = 4
_y_adjust$ = -244					; size = 4
_width$ = -240						; size = 4
_y_origin$ = -236					; size = 4
_x_origin$ = -232					; size = 4
_scale$ = -228						; size = 4
_v$ = -224						; size = 4
_u$ = -220						; size = 4
_tsd_declutter_level$ = -216				; size = 4
_source_side$ = -212					; size = 4
_tsd_draw_threat_line_status$ = -208			; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_tactical_situation_display_mfd, COMDAT

; 3077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3078 : 	char
; 3079 : 		*s,
; 3080 : 		buffer[200];
; 3081 : 
; 3082 : 	int
; 3083 : 		*tsd_draw_threat_line_status;
; 3084 : 
; 3085 : 	entity_sides
; 3086 : 		source_side;
; 3087 : 
; 3088 : 	tsd_declutter_levels
; 3089 : 		tsd_declutter_level;
; 3090 : 
; 3091 : 	float
; 3092 : 		u,
; 3093 : 		v,
; 3094 : 		scale,
; 3095 : 		x_origin,
; 3096 : 		y_origin,
; 3097 : 		width,
; 3098 : 		y_adjust,
; 3099 : 		source_heading,
; 3100 : 		tsd_ase_range,
; 3101 : 		*tsd_threat_line_flash_timer;
; 3102 : 
; 3103 : 	entity
; 3104 : 		*source,
; 3105 : 		*source_target;
; 3106 : 
; 3107 : 	vec3d
; 3108 : 		*source_position;
; 3109 : 
; 3110 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN21@draw_tacti
  00012	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00016	7c 18		 jl	 SHORT $LN20@draw_tacti
$LN21@draw_tacti:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 21	 add	 eax, 33			; 00000021H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN20@draw_tacti:

; 3111 : 
; 3112 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 3c fe ff
	ff 00		 cmp	 DWORD PTR tv70[ebp], 0
  00040	74 45		 je	 SHORT $LN23@draw_tacti
  00042	83 bd 3c fe ff
	ff 00		 cmp	 DWORD PTR tv70[ebp], 0
  00049	7e 6b		 jle	 SHORT $LN2@draw_tacti
  0004b	83 bd 3c fe ff
	ff 02		 cmp	 DWORD PTR tv70[ebp], 2
  00052	7e 02		 jle	 SHORT $LN22@draw_tacti
  00054	eb 60		 jmp	 SHORT $LN2@draw_tacti
$LN22@draw_tacti:

; 3113 : 	{
; 3114 : 		////////////////////////////////////////
; 3115 : 		case KIOWA_MAIN_MFD_LOCATION_PILOT:
; 3116 : 		case KIOWA_MAIN_MFD_LOCATION_CENTER:
; 3117 : 		////////////////////////////////////////
; 3118 : 		{
; 3119 : 			tsd_ase_range						= pilot_tsd_ase_range;

  00056	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005e	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 3120 : 			tsd_declutter_level				= pilot_tsd_declutter_level;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  0006b	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 3121 : 			tsd_threat_line_flash_timer	= &pilot_tsd_threat_line_flash_timer;

  00071	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?pilot_tsd_threat_line_flash_timer@@3MA

; 3122 : 			tsd_draw_threat_line_status	= &pilot_tsd_draw_threat_line_status;

  0007b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?pilot_tsd_draw_threat_line_status@@3HA

; 3123 : 
; 3124 : 			break;

  00085	eb 2f		 jmp	 SHORT $LN2@draw_tacti
$LN23@draw_tacti:

; 3125 : 		}
; 3126 : 		////////////////////////////////////////
; 3127 : 		case KIOWA_MAIN_MFD_LOCATION_CO_PILOT:
; 3128 : 		////////////////////////////////////////
; 3129 : 		{
; 3130 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0008f	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 3131 : 			tsd_declutter_level				= co_pilot_tsd_declutter_level;

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  0009c	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 3132 : 			tsd_threat_line_flash_timer	= &co_pilot_tsd_threat_line_flash_timer;

  000a2	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_tsd_threat_line_flash_timer@@3MA

; 3133 : 			tsd_draw_threat_line_status	= &co_pilot_tsd_draw_threat_line_status;

  000ac	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?co_pilot_tsd_draw_threat_line_status@@3HA
$LN2@draw_tacti:

; 3134 : 
; 3135 : 			break;
; 3136 : 		}
; 3137 : 	}
; 3138 : 
; 3139 : 	source = get_gunship_entity ();

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000bb	89 85 fc fe ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 3140 : 
; 3141 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000c1	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000c8	74 10		 je	 SHORT $LN126@draw_tacti
  000ca	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d2	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  000d8	eb 24		 jmp	 SHORT $LN127@draw_tacti
$LN126@draw_tacti:
  000da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  000e0	83 c2 40	 add	 edx, 64			; 00000040H
  000e3	52		 push	 edx
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f4	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN127@draw_tacti:
  000fe	b9 01 00 00 00	 mov	 ecx, 1
  00103	85 c9		 test	 ecx, ecx
  00105	74 0c		 je	 SHORT $LN128@draw_tacti
  00107	c7 85 38 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv88[ebp], 187 ; 000000bbH
  00111	eb 24		 jmp	 SHORT $LN129@draw_tacti
$LN128@draw_tacti:
  00113	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00119	83 c2 40	 add	 edx, 64			; 00000040H
  0011c	52		 push	 edx
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012d	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN129@draw_tacti:
  00137	68 bb 00 00 00	 push	 187			; 000000bbH
  0013c	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00142	51		 push	 ecx
  00143	69 95 3c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv80[ebp], 1116
  0014d	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  00153	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0015a	ff d1		 call	 ecx
  0015c	89 85 2c ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 3142 : 
; 3143 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  00162	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00169	74 10		 je	 SHORT $LN130@draw_tacti
  0016b	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00171	8b 08		 mov	 ecx, DWORD PTR [eax]
  00173	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv132[ebp], ecx
  00179	eb 24		 jmp	 SHORT $LN131@draw_tacti
$LN130@draw_tacti:
  0017b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00181	83 c2 42	 add	 edx, 66			; 00000042H
  00184	52		 push	 edx
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00195	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN131@draw_tacti:
  0019f	b9 01 00 00 00	 mov	 ecx, 1
  001a4	85 c9		 test	 ecx, ecx
  001a6	74 0c		 je	 SHORT $LN132@draw_tacti
  001a8	c7 85 38 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv140[ebp], 52 ; 00000034H
  001b2	eb 24		 jmp	 SHORT $LN133@draw_tacti
$LN132@draw_tacti:
  001b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  001ba	83 c2 42	 add	 edx, 66			; 00000042H
  001bd	52		 push	 edx
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ce	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN133@draw_tacti:
  001d8	6a 34		 push	 52			; 00000034H
  001da	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001e0	51		 push	 ecx
  001e1	69 95 3c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv132[ebp], 700
  001eb	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv140[ebp]
  001f1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001f8	ff d1		 call	 ecx
  001fa	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 3144 : 
; 3145 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00200	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00207	74 10		 je	 SHORT $LN134@draw_tacti
  00209	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0020f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00211	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv152[ebp], ecx
  00217	eb 24		 jmp	 SHORT $LN135@draw_tacti
$LN134@draw_tacti:
  00219	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0021f	83 c2 44	 add	 edx, 68			; 00000044H
  00222	52		 push	 edx
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00233	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
$LN135@draw_tacti:
  0023d	b9 01 00 00 00	 mov	 ecx, 1
  00242	85 c9		 test	 ecx, ecx
  00244	74 0c		 je	 SHORT $LN136@draw_tacti
  00246	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv160[ebp], 8
  00250	eb 24		 jmp	 SHORT $LN137@draw_tacti
$LN136@draw_tacti:
  00252	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00258	83 c2 44	 add	 edx, 68			; 00000044H
  0025b	52		 push	 edx
  0025c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0026c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv160[ebp], 0
$LN137@draw_tacti:
  00276	6a 08		 push	 8
  00278	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0027e	51		 push	 ecx
  0027f	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv152[ebp], 96
  00286	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv160[ebp]
  0028c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00293	ff d1		 call	 ecx
  00295	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 3146 : 
; 3147 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0029b	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  002a2	74 10		 je	 SHORT $LN138@draw_tacti
  002a4	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  002aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ac	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv172[ebp], ecx
  002b2	eb 24		 jmp	 SHORT $LN139@draw_tacti
$LN138@draw_tacti:
  002b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  002ba	83 c2 46	 add	 edx, 70			; 00000046H
  002bd	52		 push	 edx
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ce	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN139@draw_tacti:
  002d8	b9 01 00 00 00	 mov	 ecx, 1
  002dd	85 c9		 test	 ecx, ecx
  002df	74 0c		 je	 SHORT $LN140@draw_tacti
  002e1	c7 85 38 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv180[ebp], 38 ; 00000026H
  002eb	eb 24		 jmp	 SHORT $LN141@draw_tacti
$LN140@draw_tacti:
  002ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  002f3	83 c2 46	 add	 edx, 70			; 00000046H
  002f6	52		 push	 edx
  002f7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00301	50		 push	 eax
  00302	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00307	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv180[ebp], 0
$LN141@draw_tacti:
  00311	6a 26		 push	 38			; 00000026H
  00313	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00319	51		 push	 ecx
  0031a	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv172[ebp], 180
  00324	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv180[ebp]
  0032a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00331	ff d1		 call	 ecx
  00333	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 3148 : 
; 3149 : 	scale = RADIUS / tsd_ase_range;

  00339	f3 0f 5a 85 04
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00341	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  00349	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0034d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00351	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 3150 : 
; 3151 : 	//
; 3152 : 	// match ground radar origin
; 3153 : 	//
; 3154 : 
; 3155 : 	if (draw_large_mfd)

  00359	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00360	74 1d		 je	 SHORT $LN24@draw_tacti

; 3156 : 	{
; 3157 : 		x_origin = 0.0;

  00362	0f 57 c0	 xorps	 xmm0, xmm0
  00365	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3158 : 		y_origin = -0.6;

  0036d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00375	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 3159 : 	}
; 3160 : 	else

  0037d	eb 1b		 jmp	 SHORT $LN25@draw_tacti
$LN24@draw_tacti:

; 3161 : 	{
; 3162 : 		x_origin = 0.0;

  0037f	0f 57 c0	 xorps	 xmm0, xmm0
  00382	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3163 : 		y_origin = -0.675;

  0038a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  00392	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN25@draw_tacti:

; 3164 : 	}
; 3165 : 
; 3166 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  0039a	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  003a0	50		 push	 eax
  003a1	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  003a7	51		 push	 ecx
  003a8	51		 push	 ecx
  003a9	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  003b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b6	51		 push	 ecx
  003b7	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  003bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c4	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 3167 : 
; 3168 : 	u -= mfd_viewport_x_min;

  003c9	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  003d1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003d9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 3169 : 	v -= mfd_viewport_y_min;

  003e1	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  003e9	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003f1	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 3170 : 
; 3171 : 	////////////////////////////////////////
; 3172 : 	//
; 3173 : 	//VJ 030423 TSD RENDER MOD
; 3174 : 	//
; 3175 : 	////////////////////////////////////////
; 3176 : 
; 3177 : 	if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE && !kiowa_damage.navigation_computer)

  003f9	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00400	0f 84 05 02 00
	00		 je	 $LN26@draw_tacti
  00406	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0040b	c1 e8 04	 shr	 eax, 4
  0040e	83 e0 01	 and	 eax, 1
  00411	0f 85 f4 01 00
	00		 jne	 $LN26@draw_tacti

; 3178 : 	{
; 3179 : 		//VJ 030423 TSD render mod
; 3180 : 		set_rgb_colour (MFD_COLOUR1,   0, 0,  96, 255);  //dark blue

  00417	b8 04 00 00 00	 mov	 eax, 4
  0041c	6b c8 00	 imul	 ecx, eax, 0
  0041f	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00426	b8 04 00 00 00	 mov	 eax, 4
  0042b	6b c8 00	 imul	 ecx, eax, 0
  0042e	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00435	b8 04 00 00 00	 mov	 eax, 4
  0043a	6b c8 00	 imul	 ecx, eax, 0
  0043d	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  00444	b8 04 00 00 00	 mov	 eax, 4
  00449	6b c8 00	 imul	 ecx, eax, 0
  0044c	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3181 : 	   set_rgb_colour (MFD_COLOUR2,	32, 32,  164, 255); //light blue

  00453	b8 04 00 00 00	 mov	 eax, 4
  00458	c1 e0 00	 shl	 eax, 0
  0045b	c6 80 02 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 32 ; 00000020H
  00462	b8 04 00 00 00	 mov	 eax, 4
  00467	c1 e0 00	 shl	 eax, 0
  0046a	c6 80 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 32 ; 00000020H
  00471	b8 04 00 00 00	 mov	 eax, 4
  00476	c1 e0 00	 shl	 eax, 0
  00479	c6 80 00 00 00
	00 a4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 164 ; 000000a4H
  00480	b8 04 00 00 00	 mov	 eax, 4
  00485	c1 e0 00	 shl	 eax, 0
  00488	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3182 : 		set_rgb_colour (MFD_COLOUR3, 220, 48,   0, 255); //bright red

  0048f	b8 04 00 00 00	 mov	 eax, 4
  00494	d1 e0		 shl	 eax, 1
  00496	c6 80 02 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 220 ; 000000dcH
  0049d	b8 04 00 00 00	 mov	 eax, 4
  004a2	d1 e0		 shl	 eax, 1
  004a4	c6 80 01 00 00
	00 30		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 48 ; 00000030H
  004ab	b8 04 00 00 00	 mov	 eax, 4
  004b0	d1 e0		 shl	 eax, 1
  004b2	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  004b9	b8 04 00 00 00	 mov	 eax, 4
  004be	d1 e0		 shl	 eax, 1
  004c0	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3183 : 		set_rgb_colour (MFD_COLOUR4, 148, 32,   0, 255);//dark red

  004c7	b8 04 00 00 00	 mov	 eax, 4
  004cc	6b c8 03	 imul	 ecx, eax, 3
  004cf	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  004d6	b8 04 00 00 00	 mov	 eax, 4
  004db	6b c8 03	 imul	 ecx, eax, 3
  004de	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  004e5	b8 04 00 00 00	 mov	 eax, 4
  004ea	6b c8 03	 imul	 ecx, eax, 3
  004ed	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004f4	b8 04 00 00 00	 mov	 eax, 4
  004f9	6b c8 03	 imul	 ecx, eax, 3
  004fc	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3184 : 
; 3185 : 		set_rgb_colour (MFD_COLOUR6,  255, 255,  0, 255);

  00503	b8 04 00 00 00	 mov	 eax, 4
  00508	6b c8 05	 imul	 ecx, eax, 5
  0050b	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00512	b8 04 00 00 00	 mov	 eax, 4
  00517	6b c8 05	 imul	 ecx, eax, 5
  0051a	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00521	b8 04 00 00 00	 mov	 eax, 4
  00526	6b c8 05	 imul	 ecx, eax, 5
  00529	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00530	b8 04 00 00 00	 mov	 eax, 4
  00535	6b c8 05	 imul	 ecx, eax, 5
  00538	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3186 : 		//VJ 030511 colours 7 and 8 are grays when enemy colour option is off in eech.ini
; 3187 : 		//VJ 030530 colour tweaks: black and dark gray are best
; 3188 : 		set_rgb_colour (MFD_COLOUR7,    64, 64, 64, 255);

  0053f	b8 04 00 00 00	 mov	 eax, 4
  00544	6b c8 0b	 imul	 ecx, eax, 11
  00547	c6 81 02 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 64 ; 00000040H
  0054e	b8 04 00 00 00	 mov	 eax, 4
  00553	6b c8 0b	 imul	 ecx, eax, 11
  00556	c6 81 01 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 64 ; 00000040H
  0055d	b8 04 00 00 00	 mov	 eax, 4
  00562	6b c8 0b	 imul	 ecx, eax, 11
  00565	c6 81 00 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 64 ; 00000040H
  0056c	b8 04 00 00 00	 mov	 eax, 4
  00571	6b c8 0b	 imul	 ecx, eax, 11
  00574	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3189 : 		set_rgb_colour (MFD_COLOUR8,    0,0,0, 255);

  0057b	b8 04 00 00 00	 mov	 eax, 4
  00580	6b c8 0c	 imul	 ecx, eax, 12
  00583	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0058a	b8 04 00 00 00	 mov	 eax, 4
  0058f	6b c8 0c	 imul	 ecx, eax, 12
  00592	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00599	b8 04 00 00 00	 mov	 eax, 4
  0059e	6b c8 0c	 imul	 ecx, eax, 12
  005a1	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005a8	b8 04 00 00 00	 mov	 eax, 4
  005ad	6b c8 0c	 imul	 ecx, eax, 12
  005b0	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3190 : 
; 3191 : 	   draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  005b7	6a 00		 push	 0
  005b9	51		 push	 ecx
  005ba	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  005c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c7	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  005cd	50		 push	 eax
  005ce	51		 push	 ecx
  005cf	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  005d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dc	51		 push	 ecx
  005dd	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  005e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ea	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  005f2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005f9	51		 push	 ecx
  005fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00605	51		 push	 ecx
  00606	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map
$LN26@draw_tacti:

; 3192 : 	}
; 3193 : 
; 3194 : 	////////////////////////////////////////
; 3195 : 	//
; 3196 : 	// contour map
; 3197 : 	//
; 3198 : 	////////////////////////////////////////
; 3199 : 
; 3200 : //VJ 030423 TSD render mod, added mfd_env
; 3201 : 	if (!kiowa_damage.navigation_computer)

  0060b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00610	c1 e8 04	 shr	 eax, 4
  00613	83 e0 01	 and	 eax, 1
  00616	75 5a		 jne	 SHORT $LN27@draw_tacti

; 3202 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  00618	6a 00		 push	 0
  0061a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  0061f	50		 push	 eax
  00620	51		 push	 ecx
  00621	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00634	51		 push	 ecx
  00635	51		 push	 ecx
  00636	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0063e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00643	51		 push	 ecx
  00644	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0064c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00651	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  00659	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00660	51		 push	 ecx
  00661	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00666	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0066c	52		 push	 edx
  0066d	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN27@draw_tacti:

; 3203 : 
; 3204 : 	////////////////////////////////////////
; 3205 : 	//
; 3206 : 	// waypoint route
; 3207 : 	//
; 3208 : 	////////////////////////////////////////
; 3209 : 
; 3210 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !kiowa_damage.navigation_computer)

  00672	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  00679	0f 84 e1 07 00
	00		 je	 $LN29@draw_tacti
  0067f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00684	c1 e8 04	 shr	 eax, 4
  00687	83 e0 01	 and	 eax, 1
  0068a	0f 85 d0 07 00
	00		 jne	 $LN29@draw_tacti

; 3211 : 	{
; 3212 : 		entity
; 3213 : 			*wp1,
; 3214 : 			*wp2;
; 3215 : 
; 3216 : 		vec3d
; 3217 : 			wp1_rel_position,
; 3218 : 			wp2_rel_position;
; 3219 : 
; 3220 : 		wp1 = get_local_entity_first_waypoint (source);

  00690	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00696	50		 push	 eax
  00697	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  0069c	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 3221 : 
; 3222 : 		if (wp1)

  006a2	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  006a9	0f 84 b1 07 00
	00		 je	 $LN29@draw_tacti

; 3223 : 		{
; 3224 : 			set_2d_viewport_origin (mfd_env, u, v);

  006af	51		 push	 ecx
  006b0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  006b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bd	51		 push	 ecx
  006be	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  006c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006d0	50		 push	 eax
  006d1	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3225 : 
; 3226 : 			set_2d_window_rotation (mfd_env, source_heading);

  006d6	51		 push	 ecx
  006d7	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  006df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e9	50		 push	 eax
  006ea	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3227 : 
; 3228 : 			//
; 3229 : 			// waypoint route
; 3230 : 			//
; 3231 : 
; 3232 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  006ef	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  006f5	50		 push	 eax
  006f6	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  006fc	51		 push	 ecx
  006fd	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00703	52		 push	 edx
  00704	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3233 : 
; 3234 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00709	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0070f	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00717	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0071b	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00723	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 3235 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  0072b	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00731	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00739	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0073e	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00746	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 3236 : 
; 3237 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  0074e	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00755	74 10		 je	 SHORT $LN142@draw_tacti
  00757	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  0075d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0075f	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv331[ebp], ecx
  00765	eb 27		 jmp	 SHORT $LN143@draw_tacti
$LN142@draw_tacti:
  00767	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0076d	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  00773	52		 push	 edx
  00774	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00779	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0077e	50		 push	 eax
  0077f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00784	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv331[ebp], 0
$LN143@draw_tacti:
  0078e	b9 01 00 00 00	 mov	 ecx, 1
  00793	85 c9		 test	 ecx, ecx
  00795	74 0c		 je	 SHORT $LN144@draw_tacti
  00797	c7 85 38 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv339[ebp], 44 ; 0000002cH
  007a1	eb 27		 jmp	 SHORT $LN145@draw_tacti
$LN144@draw_tacti:
  007a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  007a9	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  007af	52		 push	 edx
  007b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  007b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  007ba	50		 push	 eax
  007bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007c0	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv339[ebp], 0
$LN145@draw_tacti:
  007ca	6a 2c		 push	 44			; 0000002cH
  007cc	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  007d2	51		 push	 ecx
  007d3	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv331[ebp], 180
  007dd	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv339[ebp]
  007e3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  007ea	ff d1		 call	 ecx
  007ec	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax
$LN4@draw_tacti:

; 3238 : 
; 3239 : 			while (wp2)

  007f2	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp2$22[ebp], 0
  007f9	0f 84 90 02 00
	00		 je	 $LN5@draw_tacti

; 3240 : 			{
; 3241 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  007ff	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  00805	50		 push	 eax
  00806	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$22[ebp]
  0080c	51		 push	 ecx
  0080d	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00813	52		 push	 edx
  00814	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3242 : 
; 3243 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00819	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0081f	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00827	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0082b	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00833	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp], xmm0

; 3244 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  0083b	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00841	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00849	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0084e	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00856	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp+8], xmm0

; 3245 : //VJ 030423 TSD render mod
; 3246 : 				if (draw_large_mfd)

  0085e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00865	0f 84 a8 00 00
	00		 je	 $LN30@draw_tacti

; 3247 : 				{
; 3248 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  0086b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00872	75 4e		 jne	 SHORT $LN32@draw_tacti

; 3249 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  00874	b8 04 00 00 00	 mov	 eax, 4
  00879	c1 e0 00	 shl	 eax, 0
  0087c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00882	51		 push	 ecx
  00883	51		 push	 ecx
  00884	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  0088c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00891	51		 push	 ecx
  00892	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  0089a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089f	51		 push	 ecx
  008a0	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  008a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ad	51		 push	 ecx
  008ae	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  008b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bb	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 3250 : 					else

  008c0	eb 4c		 jmp	 SHORT $LN33@draw_tacti
$LN32@draw_tacti:

; 3251 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  008c2	b8 04 00 00 00	 mov	 eax, 4
  008c7	c1 e0 02	 shl	 eax, 2
  008ca	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  008d0	51		 push	 ecx
  008d1	51		 push	 ecx
  008d2	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  008da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008df	51		 push	 ecx
  008e0	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  008e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ed	51		 push	 ecx
  008ee	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  008f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fb	51		 push	 ecx
  008fc	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00904	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00909	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN33@draw_tacti:

; 3252 : 				}
; 3253 : 				else

  0090e	e9 a3 00 00 00	 jmp	 $LN35@draw_tacti
$LN30@draw_tacti:

; 3254 : 				{
; 3255 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00913	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0091a	75 4e		 jne	 SHORT $LN34@draw_tacti

; 3256 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  0091c	b8 04 00 00 00	 mov	 eax, 4
  00921	c1 e0 00	 shl	 eax, 0
  00924	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0092a	51		 push	 ecx
  0092b	51		 push	 ecx
  0092c	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00934	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00939	51		 push	 ecx
  0093a	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00942	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00947	51		 push	 ecx
  00948	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00950	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00955	51		 push	 ecx
  00956	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  0095e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00963	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3257 : 					else

  00968	eb 4c		 jmp	 SHORT $LN35@draw_tacti
$LN34@draw_tacti:

; 3258 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  0096a	b8 04 00 00 00	 mov	 eax, 4
  0096f	c1 e0 02	 shl	 eax, 2
  00972	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00978	51		 push	 ecx
  00979	51		 push	 ecx
  0097a	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00987	51		 push	 ecx
  00988	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00990	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00995	51		 push	 ecx
  00996	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  0099e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a3	51		 push	 ecx
  009a4	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  009ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_tacti:

; 3259 : 				}
; 3260 : 
; 3261 : 				wp1 = wp2;

  009b6	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp2$22[ebp]
  009bc	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 3262 : 
; 3263 : 				wp1_rel_position = wp2_rel_position;

  009c2	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  009c8	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp], eax
  009ce	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$20[ebp+4]
  009d4	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+4], ecx
  009da	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$20[ebp+8]
  009e0	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+8], edx

; 3264 : 
; 3265 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  009e6	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  009ed	74 10		 je	 SHORT $LN146@draw_tacti
  009ef	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  009f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  009f7	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv392[ebp], ecx
  009fd	eb 27		 jmp	 SHORT $LN147@draw_tacti
$LN146@draw_tacti:
  009ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00a05	81 c2 bc 00 00
	00		 add	 edx, 188		; 000000bcH
  00a0b	52		 push	 edx
  00a0c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a16	50		 push	 eax
  00a17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a1c	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN147@draw_tacti:
  00a26	b9 01 00 00 00	 mov	 ecx, 1
  00a2b	85 c9		 test	 ecx, ecx
  00a2d	74 0c		 je	 SHORT $LN148@draw_tacti
  00a2f	c7 85 38 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv400[ebp], 44 ; 0000002cH
  00a39	eb 27		 jmp	 SHORT $LN149@draw_tacti
$LN148@draw_tacti:
  00a3b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00a41	81 c2 bc 00 00
	00		 add	 edx, 188		; 000000bcH
  00a47	52		 push	 edx
  00a48	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a4d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00a52	50		 push	 eax
  00a53	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a58	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN149@draw_tacti:
  00a62	6a 2c		 push	 44			; 0000002cH
  00a64	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00a6a	51		 push	 ecx
  00a6b	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv392[ebp], 180
  00a75	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv400[ebp]
  00a7b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00a82	ff d1		 call	 ecx
  00a84	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax

; 3266 : 			}

  00a8a	e9 63 fd ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 3267 : 
; 3268 : 			//
; 3269 : 			// waypoint markers
; 3270 : 			//
; 3271 : 
; 3272 : 			set_mono_font_colour (MFD_COLOUR6);

  00a8f	b8 04 00 00 00	 mov	 eax, 4
  00a94	6b c8 05	 imul	 ecx, eax, 5
  00a97	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a9d	52		 push	 edx
  00a9e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3273 : 
; 3274 : 			if (draw_large_mfd)

  00aa3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00aaa	74 09		 je	 SHORT $LN36@draw_tacti

; 3275 : 			{
; 3276 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00aac	6a 05		 push	 5
  00aae	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3277 : 			}
; 3278 : 			else

  00ab3	eb 07		 jmp	 SHORT $LN37@draw_tacti
$LN36@draw_tacti:

; 3279 : 			{
; 3280 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00ab5	6a 01		 push	 1
  00ab7	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN37@draw_tacti:

; 3281 : 			}
; 3282 : 
; 3283 : 			wp1 = get_local_entity_first_waypoint (source);

  00abc	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00ac2	50		 push	 eax
  00ac3	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00ac8	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax
$LN6@draw_tacti:

; 3284 : 
; 3285 : 			while (wp1)

  00ace	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00ad5	0f 84 2e 03 00
	00		 je	 $LN7@draw_tacti

; 3286 : 			{
; 3287 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00adb	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  00ae1	50		 push	 eax
  00ae2	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00ae8	51		 push	 ecx
  00ae9	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00aef	52		 push	 edx
  00af0	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3288 : 
; 3289 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00af5	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00afb	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00b03	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00b07	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00b0f	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 3290 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00b17	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b1d	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00b25	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00b2a	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00b32	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 3291 : 
; 3292 : 				if (draw_large_mfd)

  00b3a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b41	0f 84 bc 00 00
	00		 je	 $LN38@draw_tacti

; 3293 : 				{
; 3294 : //VJ 030423 TSD render mod
; 3295 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00b47	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00b4e	75 37		 jne	 SHORT $LN40@draw_tacti

; 3296 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  00b50	b8 04 00 00 00	 mov	 eax, 4
  00b55	c1 e0 00	 shl	 eax, 0
  00b58	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00b5e	51		 push	 ecx
  00b5f	51		 push	 ecx
  00b60	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00b68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b6d	51		 push	 ecx
  00b6e	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00b76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7b	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00b80	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3297 : 					else

  00b85	eb 35		 jmp	 SHORT $LN41@draw_tacti
$LN40@draw_tacti:

; 3298 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  00b87	b8 04 00 00 00	 mov	 eax, 4
  00b8c	c1 e0 02	 shl	 eax, 2
  00b8f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00b95	51		 push	 ecx
  00b96	51		 push	 ecx
  00b97	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00b9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba4	51		 push	 ecx
  00ba5	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00bad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb2	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00bb7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_tacti:

; 3299 : 
; 3300 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00bbc	51		 push	 ecx
  00bbd	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00bc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bca	51		 push	 ecx
  00bcb	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00bd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3301 : 
; 3302 : 					set_mono_font_rel_position (-2.0, -4.0);

  00bdd	51		 push	 ecx
  00bde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00be6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00beb	51		 push	 ecx
  00bec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00bf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3303 : 				}
; 3304 : 				else

  00bfe	e9 b7 00 00 00	 jmp	 $LN39@draw_tacti
$LN38@draw_tacti:

; 3305 : 				{
; 3306 : //VJ 030423 TSD render mod
; 3307 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00c03	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00c0a	75 37		 jne	 SHORT $LN42@draw_tacti

; 3308 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  00c0c	b8 04 00 00 00	 mov	 eax, 4
  00c11	c1 e0 00	 shl	 eax, 0
  00c14	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00c1a	51		 push	 ecx
  00c1b	51		 push	 ecx
  00c1c	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00c24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c29	51		 push	 ecx
  00c2a	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00c32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c37	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00c3c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3309 : 					else

  00c41	eb 35		 jmp	 SHORT $LN43@draw_tacti
$LN42@draw_tacti:

; 3310 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  00c43	b8 04 00 00 00	 mov	 eax, 4
  00c48	c1 e0 02	 shl	 eax, 2
  00c4b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00c51	51		 push	 ecx
  00c52	51		 push	 ecx
  00c53	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00c5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c60	51		 push	 ecx
  00c61	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00c69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6e	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00c73	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN43@draw_tacti:

; 3311 : 
; 3312 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00c78	51		 push	 ecx
  00c79	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00c81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c86	51		 push	 ecx
  00c87	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00c8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c94	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3313 : 
; 3314 : 					set_mono_font_rel_position (-2.0, -2.0);

  00c99	51		 push	 ecx
  00c9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00ca2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca7	51		 push	 ecx
  00ca8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00cb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN39@draw_tacti:

; 3315 : 				}
; 3316 : 
; 3317 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  00cba	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00cc1	74 10		 je	 SHORT $LN150@draw_tacti
  00cc3	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00cc9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ccb	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv465[ebp], ecx
  00cd1	eb 27		 jmp	 SHORT $LN151@draw_tacti
$LN150@draw_tacti:
  00cd3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00cd9	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  00cdf	52		 push	 edx
  00ce0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ce5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00cea	50		 push	 eax
  00ceb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cf0	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv465[ebp], 0
$LN151@draw_tacti:
  00cfa	b9 01 00 00 00	 mov	 ecx, 1
  00cff	85 c9		 test	 ecx, ecx
  00d01	74 0c		 je	 SHORT $LN152@draw_tacti
  00d03	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
  00d0d	eb 27		 jmp	 SHORT $LN153@draw_tacti
$LN152@draw_tacti:
  00d0f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00d15	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  00d1b	52		 push	 edx
  00d1c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d21	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00d26	50		 push	 eax
  00d27	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d2c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
$LN153@draw_tacti:
  00d36	6a 00		 push	 0
  00d38	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00d3e	51		 push	 ecx
  00d3f	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR tv473[ebp]
  00d45	c1 e2 02	 shl	 edx, 2
  00d48	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR tv465[ebp]
  00d4e	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  00d55	ff d1		 call	 ecx
  00d57	0f b6 d0	 movzx	 edx, al
  00d5a	52		 push	 edx
  00d5b	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3318 : 
; 3319 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00d60	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00d67	74 10		 je	 SHORT $LN154@draw_tacti
  00d69	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00d6f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d71	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv518[ebp], ecx
  00d77	eb 27		 jmp	 SHORT $LN155@draw_tacti
$LN154@draw_tacti:
  00d79	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00d7f	81 c2 f2 00 00
	00		 add	 edx, 242		; 000000f2H
  00d85	52		 push	 edx
  00d86	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d8b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d90	50		 push	 eax
  00d91	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d96	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv518[ebp], 0
$LN155@draw_tacti:
  00da0	b9 01 00 00 00	 mov	 ecx, 1
  00da5	85 c9		 test	 ecx, ecx
  00da7	74 0c		 je	 SHORT $LN156@draw_tacti
  00da9	c7 85 38 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv526[ebp], 44 ; 0000002cH
  00db3	eb 27		 jmp	 SHORT $LN157@draw_tacti
$LN156@draw_tacti:
  00db5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00dbb	81 c2 f2 00 00
	00		 add	 edx, 242		; 000000f2H
  00dc1	52		 push	 edx
  00dc2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dc7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00dcc	50		 push	 eax
  00dcd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dd2	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv526[ebp], 0
$LN157@draw_tacti:
  00ddc	6a 2c		 push	 44			; 0000002cH
  00dde	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00de4	51		 push	 ecx
  00de5	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv518[ebp], 180
  00def	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv526[ebp]
  00df5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00dfc	ff d1		 call	 ecx
  00dfe	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 3320 : 			}

  00e04	e9 c5 fc ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 3321 : 
; 3322 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00e09	51		 push	 ecx
  00e0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00e12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e17	51		 push	 ecx
  00e18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00e20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e25	51		 push	 ecx
  00e26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00e2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e33	51		 push	 ecx
  00e34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00e3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00e46	50		 push	 eax
  00e47	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3323 : 
; 3324 : 			set_2d_window_rotation (mfd_env, 0.0);

  00e4c	51		 push	 ecx
  00e4d	0f 57 c0	 xorps	 xmm0, xmm0
  00e50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00e5a	50		 push	 eax
  00e5b	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN29@draw_tacti:

; 3325 : 		}
; 3326 : 	}
; 3327 : 
; 3328 : 	////////////////////////////////////////
; 3329 : 	//
; 3330 : 	// targets
; 3331 : 	//
; 3332 : 	////////////////////////////////////////
; 3333 : 
; 3334 : 	{
; 3335 : 		entity
; 3336 : 			*target,
; 3337 : 			*launched_weapon;
; 3338 : 
; 3339 : 		vec3d
; 3340 : 			*target_position;
; 3341 : 
; 3342 : 		threat_types
; 3343 : 			threat_type;
; 3344 : 
; 3345 : 		int
; 3346 : 			draw_threat_line;
; 3347 : 
; 3348 : 		float
; 3349 : 			air_scan_range,
; 3350 : 			dx,
; 3351 : 			dy;
; 3352 : 
; 3353 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  00e60	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  00e67	0f 84 c6 11 00
	00		 je	 $LN44@draw_tacti

; 3354 : 		{
; 3355 : 			*tsd_threat_line_flash_timer -= get_delta_time ();

  00e6d	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00e73	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e77	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00e7f	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00e85	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 3356 : 
; 3357 : 			if (*tsd_threat_line_flash_timer < 0.0)

  00e89	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00e8f	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00e93	0f 57 c9	 xorps	 xmm1, xmm1
  00e96	66 0f 2f c8	 comisd	 xmm1, xmm0
  00e9a	76 25		 jbe	 SHORT $LN45@draw_tacti

; 3358 : 			{
; 3359 : 				*tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  00e9c	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  00ea2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00eaa	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 3360 : 
; 3361 : 				*tsd_draw_threat_line_status ^= 1;

  00eae	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  00eb4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00eb6	83 f1 01	 xor	 ecx, 1
  00eb9	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  00ebf	89 0a		 mov	 DWORD PTR [edx], ecx
$LN45@draw_tacti:

; 3362 : 			}
; 3363 : 
; 3364 : 			set_2d_viewport_origin (mfd_env, u, v);

  00ec1	51		 push	 ecx
  00ec2	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00eca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ecf	51		 push	 ecx
  00ed0	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00ed8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00edd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ee2	50		 push	 eax
  00ee3	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3365 : 
; 3366 : 			set_2d_window_rotation (mfd_env, source_heading);

  00ee8	51		 push	 ecx
  00ee9	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00ef1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00efb	50		 push	 eax
  00efc	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3367 : 
; 3368 : 			//
; 3369 : 			// display enemy SAM and AAA threat range circles
; 3370 : 			//
; 3371 : 
; 3372 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00f01	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00f08	74 10		 je	 SHORT $LN158@draw_tacti
  00f0a	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00f10	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f12	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv555[ebp], ecx
  00f18	eb 27		 jmp	 SHORT $LN159@draw_tacti
$LN158@draw_tacti:
  00f1a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00f20	81 c2 27 01 00
	00		 add	 edx, 295		; 00000127H
  00f26	52		 push	 edx
  00f27	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f2c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f31	50		 push	 eax
  00f32	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f37	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv555[ebp], 0
$LN159@draw_tacti:
  00f41	b9 01 00 00 00	 mov	 ecx, 1
  00f46	85 c9		 test	 ecx, ecx
  00f48	74 0c		 je	 SHORT $LN160@draw_tacti
  00f4a	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv563[ebp], 18 ; 00000012H
  00f54	eb 27		 jmp	 SHORT $LN161@draw_tacti
$LN160@draw_tacti:
  00f56	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00f5c	81 c2 27 01 00
	00		 add	 edx, 295		; 00000127H
  00f62	52		 push	 edx
  00f63	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00f6d	50		 push	 eax
  00f6e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f73	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv563[ebp], 0
$LN161@draw_tacti:
  00f7d	6a 12		 push	 18			; 00000012H
  00f7f	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00f85	51		 push	 ecx
  00f86	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv555[ebp], 180
  00f90	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv563[ebp]
  00f96	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00f9d	ff d1		 call	 ecx
  00f9f	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN8@draw_tacti:

; 3373 : 
; 3374 : 			while (target)

  00fa5	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  00fac	0f 84 17 05 00
	00		 je	 $LN9@draw_tacti

; 3375 : 			{
; 3376 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  00fb2	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  00fb9	74 10		 je	 SHORT $LN162@draw_tacti
  00fbb	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  00fc1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fc3	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv575[ebp], ecx
  00fc9	eb 20		 jmp	 SHORT $LN163@draw_tacti
$LN162@draw_tacti:
  00fcb	68 30 0d 00 00	 push	 3376			; 00000d30H
  00fd0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fd5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fdb	52		 push	 edx
  00fdc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fe1	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv575[ebp], 0
$LN163@draw_tacti:
  00feb	b8 01 00 00 00	 mov	 eax, 1
  00ff0	85 c0		 test	 eax, eax
  00ff2	74 0c		 je	 SHORT $LN164@draw_tacti
  00ff4	c7 85 38 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv582[ebp], 66 ; 00000042H
  00ffe	eb 20		 jmp	 SHORT $LN165@draw_tacti
$LN164@draw_tacti:
  01000	68 30 0d 00 00	 push	 3376			; 00000d30H
  01005	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0100a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01010	51		 push	 ecx
  01011	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01016	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv582[ebp], 0
$LN165@draw_tacti:
  01020	6a 42		 push	 66			; 00000042H
  01022	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01028	52		 push	 edx
  01029	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv575[ebp], 1116
  01033	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv582[ebp]
  01039	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01040	ff d2		 call	 edx
  01042	85 c0		 test	 eax, eax
  01044	0f 85 d6 03 00
	00		 jne	 $LN53@draw_tacti

; 3377 : 				{
; 3378 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  0104a	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01051	74 10		 je	 SHORT $LN166@draw_tacti
  01053	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0105b	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv594[ebp], ecx
  01061	eb 20		 jmp	 SHORT $LN167@draw_tacti
$LN166@draw_tacti:
  01063	68 32 0d 00 00	 push	 3378			; 00000d32H
  01068	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0106d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01073	52		 push	 edx
  01074	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01079	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv594[ebp], 0
$LN167@draw_tacti:
  01083	b8 01 00 00 00	 mov	 eax, 1
  01088	85 c0		 test	 eax, eax
  0108a	74 0c		 je	 SHORT $LN168@draw_tacti
  0108c	c7 85 38 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv601[ebp], 187 ; 000000bbH
  01096	eb 20		 jmp	 SHORT $LN169@draw_tacti
$LN168@draw_tacti:
  01098	68 32 0d 00 00	 push	 3378			; 00000d32H
  0109d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  010a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  010a8	51		 push	 ecx
  010a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010ae	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN169@draw_tacti:
  010b8	68 bb 00 00 00	 push	 187			; 000000bbH
  010bd	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  010c3	52		 push	 edx
  010c4	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv594[ebp], 1116
  010ce	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv601[ebp]
  010d4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  010db	ff d2		 call	 edx
  010dd	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  010e3	0f 84 37 03 00
	00		 je	 $LN53@draw_tacti

; 3379 : 					{
; 3380 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  010e9	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  010f0	74 10		 je	 SHORT $LN170@draw_tacti
  010f2	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  010f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  010fa	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv614[ebp], ecx
  01100	eb 27		 jmp	 SHORT $LN171@draw_tacti
$LN170@draw_tacti:
  01102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01108	81 c2 2f 01 00
	00		 add	 edx, 303		; 0000012fH
  0110e	52		 push	 edx
  0110f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01119	50		 push	 eax
  0111a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0111f	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv614[ebp], 0
$LN171@draw_tacti:
  01129	b9 01 00 00 00	 mov	 ecx, 1
  0112e	85 c9		 test	 ecx, ecx
  01130	74 0c		 je	 SHORT $LN172@draw_tacti
  01132	c7 85 38 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv622[ebp], 233 ; 000000e9H
  0113c	eb 27		 jmp	 SHORT $LN173@draw_tacti
$LN172@draw_tacti:
  0113e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01144	81 c2 2f 01 00
	00		 add	 edx, 303		; 0000012fH
  0114a	52		 push	 edx
  0114b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01155	50		 push	 eax
  01156	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0115b	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv622[ebp], 0
$LN173@draw_tacti:
  01165	68 e9 00 00 00	 push	 233			; 000000e9H
  0116a	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01170	51		 push	 ecx
  01171	69 95 3c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv614[ebp], 1116
  0117b	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv622[ebp]
  01181	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01188	ff d1		 call	 ecx
  0118a	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 3381 : 
; 3382 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  01190	83 bd c4 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  01197	74 0d		 je	 SHORT $LN49@draw_tacti
  01199	83 bd c4 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  011a0	0f 85 7a 02 00
	00		 jne	 $LN53@draw_tacti
$LN49@draw_tacti:

; 3383 : 						{
; 3384 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  011a6	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  011ad	74 10		 je	 SHORT $LN174@draw_tacti
  011af	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  011b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  011b7	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv636[ebp], ecx
  011bd	eb 27		 jmp	 SHORT $LN175@draw_tacti
$LN174@draw_tacti:
  011bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  011c5	81 c2 33 01 00
	00		 add	 edx, 307		; 00000133H
  011cb	52		 push	 edx
  011cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  011d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011d6	50		 push	 eax
  011d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011dc	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv636[ebp], 0
$LN175@draw_tacti:
  011e6	b9 01 00 00 00	 mov	 ecx, 1
  011eb	85 c9		 test	 ecx, ecx
  011ed	74 0c		 je	 SHORT $LN176@draw_tacti
  011ef	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv644[ebp], 8
  011f9	eb 27		 jmp	 SHORT $LN177@draw_tacti
$LN176@draw_tacti:
  011fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01201	81 c2 33 01 00
	00		 add	 edx, 307		; 00000133H
  01207	52		 push	 edx
  01208	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0120d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01212	50		 push	 eax
  01213	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01218	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv644[ebp], 0
$LN177@draw_tacti:
  01222	6a 08		 push	 8
  01224	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0122a	51		 push	 ecx
  0122b	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv636[ebp], 96
  01232	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv644[ebp]
  01238	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0123f	ff d1		 call	 ecx
  01241	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 3385 : 
; 3386 : 							dx = (target_position->x - source_position->x) * scale;

  01247	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  0124d	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01253	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01257	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0125b	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01263	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 3387 : 							dy = (target_position->z - source_position->z) * scale;

  0126b	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  01271	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01277	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0127c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01281	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01289	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 3388 : 
; 3389 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  01291	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01298	74 10		 je	 SHORT $LN178@draw_tacti
  0129a	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  012a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  012a2	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv664[ebp], ecx
  012a8	eb 27		 jmp	 SHORT $LN179@draw_tacti
$LN178@draw_tacti:
  012aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  012b0	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  012b6	52		 push	 edx
  012b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  012bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012c1	50		 push	 eax
  012c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012c7	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv664[ebp], 0
$LN179@draw_tacti:
  012d1	b9 01 00 00 00	 mov	 ecx, 1
  012d6	85 c9		 test	 ecx, ecx
  012d8	74 0c		 je	 SHORT $LN180@draw_tacti
  012da	c7 85 38 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv672[ebp], 5
  012e4	eb 27		 jmp	 SHORT $LN181@draw_tacti
$LN180@draw_tacti:
  012e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  012ec	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  012f2	52		 push	 edx
  012f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  012f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  012fd	50		 push	 eax
  012fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01303	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN181@draw_tacti:
  0130d	6a 05		 push	 5
  0130f	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01315	51		 push	 ecx
  01316	69 95 3c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv664[ebp], 700
  01320	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv672[ebp]
  01326	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0132d	ff d1		 call	 ecx
  0132f	d9 9d 34 fe ff
	ff		 fstp	 DWORD PTR tv1936[ebp]
  01335	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv1936[ebp]
  0133d	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01345	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _air_scan_range$14[ebp], xmm0

; 3390 : 
; 3391 : //VJ 030423 TSD render mod, enemy of kiowa so red
; 3392 : //VJ 030511 TSD render mod, enemy optional in eech.ini
; 3393 : //VJ 030530 TSD render mod, corrected colour vor original view MFD_COLOUR2
; 3394 : 							if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  0134d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  01354	75 43		 jne	 SHORT $LN50@draw_tacti

; 3395 : 								draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  01356	b8 04 00 00 00	 mov	 eax, 4
  0135b	c1 e0 00	 shl	 eax, 0
  0135e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01364	51		 push	 ecx
  01365	51		 push	 ecx
  01366	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  0136e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01373	51		 push	 ecx
  01374	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  0137c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01381	51		 push	 ecx
  01382	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  0138a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0138f	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 3396 : 							else

  01394	e9 87 00 00 00	 jmp	 $LN53@draw_tacti
$LN50@draw_tacti:

; 3397 : 								if (command_line_tsd_enemy_colours)

  01399	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  013a0	74 40		 je	 SHORT $LN52@draw_tacti

; 3398 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR4);

  013a2	b8 04 00 00 00	 mov	 eax, 4
  013a7	6b c8 03	 imul	 ecx, eax, 3
  013aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013b0	52		 push	 edx
  013b1	51		 push	 ecx
  013b2	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  013ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013bf	51		 push	 ecx
  013c0	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  013c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013cd	51		 push	 ecx
  013ce	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  013d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013db	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 3399 : 								else

  013e0	eb 3e		 jmp	 SHORT $LN53@draw_tacti
$LN52@draw_tacti:

; 3400 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR8);

  013e2	b8 04 00 00 00	 mov	 eax, 4
  013e7	6b c8 0c	 imul	 ecx, eax, 12
  013ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013f0	52		 push	 edx
  013f1	51		 push	 ecx
  013f2	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  013fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ff	51		 push	 ecx
  01400	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140d	51		 push	 ecx
  0140e	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01416	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141b	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN53@draw_tacti:

; 3401 : 						}
; 3402 : 					}
; 3403 : 				}
; 3404 : 
; 3405 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01420	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01427	74 10		 je	 SHORT $LN182@draw_tacti
  01429	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  0142f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01431	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv705[ebp], ecx
  01437	eb 27		 jmp	 SHORT $LN183@draw_tacti
$LN182@draw_tacti:
  01439	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0143f	81 c2 48 01 00
	00		 add	 edx, 328		; 00000148H
  01445	52		 push	 edx
  01446	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0144b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01450	50		 push	 eax
  01451	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01456	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv705[ebp], 0
$LN183@draw_tacti:
  01460	b9 01 00 00 00	 mov	 ecx, 1
  01465	85 c9		 test	 ecx, ecx
  01467	74 0c		 je	 SHORT $LN184@draw_tacti
  01469	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv713[ebp], 18 ; 00000012H
  01473	eb 27		 jmp	 SHORT $LN185@draw_tacti
$LN184@draw_tacti:
  01475	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0147b	81 c2 48 01 00
	00		 add	 edx, 328		; 00000148H
  01481	52		 push	 edx
  01482	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01487	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0148c	50		 push	 eax
  0148d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01492	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv713[ebp], 0
$LN185@draw_tacti:
  0149c	6a 12		 push	 18			; 00000012H
  0149e	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  014a4	51		 push	 ecx
  014a5	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv705[ebp], 180
  014af	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv713[ebp]
  014b5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014bc	ff d1		 call	 ecx
  014be	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 3406 : 			}

  014c4	e9 dc fa ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 3407 : 
; 3408 : 			//
; 3409 : 			// display all gunship targets (do not show ground radar clutter)
; 3410 : 			//
; 3411 : 
; 3412 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  014c9	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  014d0	74 10		 je	 SHORT $LN186@draw_tacti
  014d2	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  014d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  014da	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv725[ebp], ecx
  014e0	eb 27		 jmp	 SHORT $LN187@draw_tacti
$LN186@draw_tacti:
  014e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  014e8	81 c2 4f 01 00
	00		 add	 edx, 335		; 0000014fH
  014ee	52		 push	 edx
  014ef	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  014f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014f9	50		 push	 eax
  014fa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014ff	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv725[ebp], 0
$LN187@draw_tacti:
  01509	b9 01 00 00 00	 mov	 ecx, 1
  0150e	85 c9		 test	 ecx, ecx
  01510	74 0c		 je	 SHORT $LN188@draw_tacti
  01512	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv733[ebp], 18 ; 00000012H
  0151c	eb 27		 jmp	 SHORT $LN189@draw_tacti
$LN188@draw_tacti:
  0151e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01524	81 c2 4f 01 00
	00		 add	 edx, 335		; 0000014fH
  0152a	52		 push	 edx
  0152b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01530	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01535	50		 push	 eax
  01536	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0153b	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv733[ebp], 0
$LN189@draw_tacti:
  01545	6a 12		 push	 18			; 00000012H
  01547	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0154d	51		 push	 ecx
  0154e	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv725[ebp], 180
  01558	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv733[ebp]
  0155e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01565	ff d1		 call	 ecx
  01567	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN10@draw_tacti:

; 3413 : 
; 3414 : 			while (target)

  0156d	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01574	0f 84 92 01 00
	00		 je	 $LN11@draw_tacti

; 3415 : 			{
; 3416 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  0157a	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01581	74 10		 je	 SHORT $LN190@draw_tacti
  01583	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01589	8b 08		 mov	 ecx, DWORD PTR [eax]
  0158b	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv745[ebp], ecx
  01591	eb 20		 jmp	 SHORT $LN191@draw_tacti
$LN190@draw_tacti:
  01593	68 58 0d 00 00	 push	 3416			; 00000d58H
  01598	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0159d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  015a3	52		 push	 edx
  015a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015a9	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv745[ebp], 0
$LN191@draw_tacti:
  015b3	b8 01 00 00 00	 mov	 eax, 1
  015b8	85 c0		 test	 eax, eax
  015ba	74 0c		 je	 SHORT $LN192@draw_tacti
  015bc	c7 85 38 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv752[ebp], 66 ; 00000042H
  015c6	eb 20		 jmp	 SHORT $LN193@draw_tacti
$LN192@draw_tacti:
  015c8	68 58 0d 00 00	 push	 3416			; 00000d58H
  015cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  015d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015d8	51		 push	 ecx
  015d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015de	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN193@draw_tacti:
  015e8	6a 42		 push	 66			; 00000042H
  015ea	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  015f0	52		 push	 edx
  015f1	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv745[ebp], 1116
  015fb	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv752[ebp]
  01601	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01608	ff d2		 call	 edx
  0160a	85 c0		 test	 eax, eax
  0160c	75 55		 jne	 SHORT $LN56@draw_tacti

; 3417 : 				{
; 3418 : 					//VJ 030423 TSD render mod
; 3419 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  0160e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  01615	75 27		 jne	 SHORT $LN55@draw_tacti

; 3420 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  01617	6a 00		 push	 0
  01619	6a 00		 push	 0
  0161b	51		 push	 ecx
  0161c	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01624	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01629	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0162f	50		 push	 eax
  01630	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01636	51		 push	 ecx
  01637	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 3421 : 					else

  0163c	eb 25		 jmp	 SHORT $LN56@draw_tacti
$LN55@draw_tacti:

; 3422 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE);

  0163e	6a 01		 push	 1
  01640	6a 00		 push	 0
  01642	51		 push	 ecx
  01643	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0164b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01650	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01656	50		 push	 eax
  01657	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0165d	51		 push	 ecx
  0165e	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN56@draw_tacti:

; 3423 : 				}
; 3424 : 
; 3425 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01663	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0166a	74 10		 je	 SHORT $LN194@draw_tacti
  0166c	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01672	8b 08		 mov	 ecx, DWORD PTR [eax]
  01674	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv776[ebp], ecx
  0167a	eb 27		 jmp	 SHORT $LN195@draw_tacti
$LN194@draw_tacti:
  0167c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01682	81 c2 5c 01 00
	00		 add	 edx, 348		; 0000015cH
  01688	52		 push	 edx
  01689	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0168e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01693	50		 push	 eax
  01694	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01699	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv776[ebp], 0
$LN195@draw_tacti:
  016a3	b9 01 00 00 00	 mov	 ecx, 1
  016a8	85 c9		 test	 ecx, ecx
  016aa	74 0c		 je	 SHORT $LN196@draw_tacti
  016ac	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv784[ebp], 18 ; 00000012H
  016b6	eb 27		 jmp	 SHORT $LN197@draw_tacti
$LN196@draw_tacti:
  016b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  016be	81 c2 5c 01 00
	00		 add	 edx, 348		; 0000015cH
  016c4	52		 push	 edx
  016c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  016ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  016cf	50		 push	 eax
  016d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016d5	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN197@draw_tacti:
  016df	6a 12		 push	 18			; 00000012H
  016e1	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  016e7	51		 push	 ecx
  016e8	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv776[ebp], 180
  016f2	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv784[ebp]
  016f8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  016ff	ff d1		 call	 ecx
  01701	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 3426 : 			}

  01707	e9 61 fe ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 3427 : 
; 3428 : 			//
; 3429 : 			// draw selected target last
; 3430 : 			//
; 3431 : 
; 3432 : 			if (source_target)

  0170c	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  01713	74 55		 je	 SHORT $LN59@draw_tacti

; 3433 : 			{
; 3434 : 				//VJ 030423 TSD render mod
; 3435 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01715	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0171c	75 27		 jne	 SHORT $LN58@draw_tacti

; 3436 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE);

  0171e	6a 00		 push	 0
  01720	6a 01		 push	 1
  01722	51		 push	 ecx
  01723	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0172b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01730	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01736	50		 push	 eax
  01737	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  0173d	51		 push	 ecx
  0173e	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 3437 : 				else

  01743	eb 25		 jmp	 SHORT $LN59@draw_tacti
$LN58@draw_tacti:

; 3438 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE);

  01745	6a 01		 push	 1
  01747	6a 01		 push	 1
  01749	51		 push	 ecx
  0174a	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01752	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01757	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0175d	50		 push	 eax
  0175e	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01764	51		 push	 ecx
  01765	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN59@draw_tacti:

; 3439 : 			}
; 3440 : 
; 3441 : 			//
; 3442 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 3443 : 			//
; 3444 : 
; 3445 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0176a	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01771	74 10		 je	 SHORT $LN198@draw_tacti
  01773	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01779	8b 08		 mov	 ecx, DWORD PTR [eax]
  0177b	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv808[ebp], ecx
  01781	eb 27		 jmp	 SHORT $LN199@draw_tacti
$LN198@draw_tacti:
  01783	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01789	81 c2 70 01 00
	00		 add	 edx, 368		; 00000170H
  0178f	52		 push	 edx
  01790	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01795	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0179a	50		 push	 eax
  0179b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017a0	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv808[ebp], 0
$LN199@draw_tacti:
  017aa	b9 01 00 00 00	 mov	 ecx, 1
  017af	85 c9		 test	 ecx, ecx
  017b1	74 0c		 je	 SHORT $LN200@draw_tacti
  017b3	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv816[ebp], 18 ; 00000012H
  017bd	eb 27		 jmp	 SHORT $LN201@draw_tacti
$LN200@draw_tacti:
  017bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  017c5	81 c2 70 01 00
	00		 add	 edx, 368		; 00000170H
  017cb	52		 push	 edx
  017cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  017d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  017d6	50		 push	 eax
  017d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017dc	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv816[ebp], 0
$LN201@draw_tacti:
  017e6	6a 12		 push	 18			; 00000012H
  017e8	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  017ee	51		 push	 ecx
  017ef	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv808[ebp], 180
  017f9	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv816[ebp]
  017ff	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01806	ff d1		 call	 ecx
  01808	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN12@draw_tacti:

; 3446 : 
; 3447 : 			while (target)

  0180e	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01815	0f 84 c1 07 00
	00		 je	 $LN13@draw_tacti

; 3448 : 			{
; 3449 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  0181b	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01822	74 10		 je	 SHORT $LN202@draw_tacti
  01824	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  0182a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0182c	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv828[ebp], ecx
  01832	eb 20		 jmp	 SHORT $LN203@draw_tacti
$LN202@draw_tacti:
  01834	68 79 0d 00 00	 push	 3449			; 00000d79H
  01839	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0183e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01844	52		 push	 edx
  01845	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0184a	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv828[ebp], 0
$LN203@draw_tacti:
  01854	b8 01 00 00 00	 mov	 eax, 1
  01859	85 c0		 test	 eax, eax
  0185b	74 0c		 je	 SHORT $LN204@draw_tacti
  0185d	c7 85 38 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv835[ebp], 66 ; 00000042H
  01867	eb 20		 jmp	 SHORT $LN205@draw_tacti
$LN204@draw_tacti:
  01869	68 79 0d 00 00	 push	 3449			; 00000d79H
  0186e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01873	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01879	51		 push	 ecx
  0187a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0187f	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv835[ebp], 0
$LN205@draw_tacti:
  01889	6a 42		 push	 66			; 00000042H
  0188b	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01891	52		 push	 edx
  01892	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv828[ebp], 1116
  0189c	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv835[ebp]
  018a2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  018a9	ff d2		 call	 edx
  018ab	85 c0		 test	 eax, eax
  018ad	0f 85 80 06 00
	00		 jne	 $LN68@draw_tacti

; 3450 : 				{
; 3451 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  018b3	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  018ba	74 10		 je	 SHORT $LN206@draw_tacti
  018bc	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  018c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  018c4	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv847[ebp], ecx
  018ca	eb 20		 jmp	 SHORT $LN207@draw_tacti
$LN206@draw_tacti:
  018cc	68 7b 0d 00 00	 push	 3451			; 00000d7bH
  018d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  018d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018dc	52		 push	 edx
  018dd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018e2	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv847[ebp], 0
$LN207@draw_tacti:
  018ec	b8 01 00 00 00	 mov	 eax, 1
  018f1	85 c0		 test	 eax, eax
  018f3	74 0c		 je	 SHORT $LN208@draw_tacti
  018f5	c7 85 38 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv854[ebp], 187 ; 000000bbH
  018ff	eb 20		 jmp	 SHORT $LN209@draw_tacti
$LN208@draw_tacti:
  01901	68 7b 0d 00 00	 push	 3451			; 00000d7bH
  01906	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0190b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01911	51		 push	 ecx
  01912	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01917	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv854[ebp], 0
$LN209@draw_tacti:
  01921	68 bb 00 00 00	 push	 187			; 000000bbH
  01926	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  0192c	52		 push	 edx
  0192d	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv847[ebp], 1116
  01937	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv854[ebp]
  0193d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01944	ff d2		 call	 edx
  01946	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  0194c	0f 84 e1 05 00
	00		 je	 $LN68@draw_tacti

; 3452 : 					{
; 3453 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  01952	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01959	74 10		 je	 SHORT $LN210@draw_tacti
  0195b	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01961	8b 08		 mov	 ecx, DWORD PTR [eax]
  01963	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv866[ebp], ecx
  01969	eb 20		 jmp	 SHORT $LN211@draw_tacti
$LN210@draw_tacti:
  0196b	68 7d 0d 00 00	 push	 3453			; 00000d7dH
  01970	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01975	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0197b	52		 push	 edx
  0197c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01981	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv866[ebp], 0
$LN211@draw_tacti:
  0198b	b8 01 00 00 00	 mov	 eax, 1
  01990	85 c0		 test	 eax, eax
  01992	74 0c		 je	 SHORT $LN212@draw_tacti
  01994	c7 85 38 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv873[ebp], 169 ; 000000a9H
  0199e	eb 20		 jmp	 SHORT $LN213@draw_tacti
$LN212@draw_tacti:
  019a0	68 7d 0d 00 00	 push	 3453			; 00000d7dH
  019a5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  019aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  019b0	51		 push	 ecx
  019b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019b6	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv873[ebp], 0
$LN213@draw_tacti:
  019c0	68 a9 00 00 00	 push	 169			; 000000a9H
  019c5	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  019cb	52		 push	 edx
  019cc	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv866[ebp], 1116
  019d6	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv873[ebp]
  019dc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  019e3	ff d2		 call	 edx
  019e5	85 c0		 test	 eax, eax
  019e7	0f 84 46 05 00
	00		 je	 $LN68@draw_tacti

; 3454 : 						{
; 3455 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  019ed	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  019f4	74 10		 je	 SHORT $LN214@draw_tacti
  019f6	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  019fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  019fe	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv886[ebp], ecx
  01a04	eb 27		 jmp	 SHORT $LN215@draw_tacti
$LN214@draw_tacti:
  01a06	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01a0c	81 c2 7a 01 00
	00		 add	 edx, 378		; 0000017aH
  01a12	52		 push	 edx
  01a13	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a18	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a1d	50		 push	 eax
  01a1e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a23	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv886[ebp], 0
$LN215@draw_tacti:
  01a2d	b9 01 00 00 00	 mov	 ecx, 1
  01a32	85 c9		 test	 ecx, ecx
  01a34	74 0c		 je	 SHORT $LN216@draw_tacti
  01a36	c7 85 38 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv894[ebp], 233 ; 000000e9H
  01a40	eb 27		 jmp	 SHORT $LN217@draw_tacti
$LN216@draw_tacti:
  01a42	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01a48	81 c2 7a 01 00
	00		 add	 edx, 378		; 0000017aH
  01a4e	52		 push	 edx
  01a4f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01a59	50		 push	 eax
  01a5a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a5f	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv894[ebp], 0
$LN217@draw_tacti:
  01a69	68 e9 00 00 00	 push	 233			; 000000e9H
  01a6e	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01a74	51		 push	 ecx
  01a75	69 95 3c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv886[ebp], 1116
  01a7f	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv894[ebp]
  01a85	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01a8c	ff d1		 call	 ecx
  01a8e	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 3456 : 
; 3457 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01a94	83 bd c4 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  01a9b	74 16		 je	 SHORT $LN64@draw_tacti
  01a9d	83 bd c4 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  01aa4	74 0d		 je	 SHORT $LN64@draw_tacti
  01aa6	83 bd c4 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$16[ebp], 4
  01aad	0f 85 80 04 00
	00		 jne	 $LN68@draw_tacti
$LN64@draw_tacti:

; 3458 : 							{
; 3459 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01ab3	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01aba	74 10		 je	 SHORT $LN218@draw_tacti
  01abc	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01ac2	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ac4	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv908[ebp], ecx
  01aca	eb 20		 jmp	 SHORT $LN219@draw_tacti
$LN218@draw_tacti:
  01acc	68 83 0d 00 00	 push	 3459			; 00000d83H
  01ad1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01adc	52		 push	 edx
  01add	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ae2	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv908[ebp], 0
$LN219@draw_tacti:
  01aec	b8 01 00 00 00	 mov	 eax, 1
  01af1	85 c0		 test	 eax, eax
  01af3	74 0c		 je	 SHORT $LN220@draw_tacti
  01af5	c7 85 38 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv915[ebp], 38 ; 00000026H
  01aff	eb 20		 jmp	 SHORT $LN221@draw_tacti
$LN220@draw_tacti:
  01b01	68 83 0d 00 00	 push	 3459			; 00000d83H
  01b06	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b0b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01b11	51		 push	 ecx
  01b12	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b17	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv915[ebp], 0
$LN221@draw_tacti:
  01b21	6a 26		 push	 38			; 00000026H
  01b23	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01b29	52		 push	 edx
  01b2a	69 85 3c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv908[ebp], 180
  01b34	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv915[ebp]
  01b3a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01b41	ff d2		 call	 edx
  01b43	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01b49	0f 85 e4 03 00
	00		 jne	 $LN68@draw_tacti

; 3460 : 								{
; 3461 : 									draw_threat_line = TRUE;

  01b4f	c7 85 c0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$15[ebp], 1

; 3462 : 
; 3463 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01b59	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01b60	74 10		 je	 SHORT $LN222@draw_tacti
  01b62	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01b68	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b6a	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv960[ebp], ecx
  01b70	eb 27		 jmp	 SHORT $LN223@draw_tacti
$LN222@draw_tacti:
  01b72	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01b78	81 c2 82 01 00
	00		 add	 edx, 386		; 00000182H
  01b7e	52		 push	 edx
  01b7f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b84	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b89	50		 push	 eax
  01b8a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b8f	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv960[ebp], 0
$LN223@draw_tacti:
  01b99	b9 01 00 00 00	 mov	 ecx, 1
  01b9e	85 c9		 test	 ecx, ecx
  01ba0	74 0c		 je	 SHORT $LN224@draw_tacti
  01ba2	c7 85 38 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv968[ebp], 24 ; 00000018H
  01bac	eb 27		 jmp	 SHORT $LN225@draw_tacti
$LN224@draw_tacti:
  01bae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01bb4	81 c2 82 01 00
	00		 add	 edx, 386		; 00000182H
  01bba	52		 push	 edx
  01bbb	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01bc5	50		 push	 eax
  01bc6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01bcb	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv968[ebp], 0
$LN225@draw_tacti:
  01bd5	6a 18		 push	 24			; 00000018H
  01bd7	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01bdd	51		 push	 ecx
  01bde	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv960[ebp], 180
  01be8	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv968[ebp]
  01bee	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01bf5	ff d1		 call	 ecx
  01bf7	89 85 cc fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax
$LN14@draw_tacti:

; 3464 : 
; 3465 : 									while (launched_weapon)

  01bfd	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01c04	0f 84 ef 01 00
	00		 je	 $LN15@draw_tacti

; 3466 : 									{
; 3467 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01c0a	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01c11	74 10		 je	 SHORT $LN226@draw_tacti
  01c13	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  01c19	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c1b	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv980[ebp], ecx
  01c21	eb 20		 jmp	 SHORT $LN227@draw_tacti
$LN226@draw_tacti:
  01c23	68 8b 0d 00 00	 push	 3467			; 00000d8bH
  01c28	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c2d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c33	52		 push	 edx
  01c34	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c39	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv980[ebp], 0
$LN227@draw_tacti:
  01c43	b8 01 00 00 00	 mov	 eax, 1
  01c48	85 c0		 test	 eax, eax
  01c4a	74 0c		 je	 SHORT $LN228@draw_tacti
  01c4c	c7 85 38 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv987[ebp], 263 ; 00000107H
  01c56	eb 20		 jmp	 SHORT $LN229@draw_tacti
$LN228@draw_tacti:
  01c58	68 8b 0d 00 00	 push	 3467			; 00000d8bH
  01c5d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01c68	51		 push	 ecx
  01c69	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c6e	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv987[ebp], 0
$LN229@draw_tacti:
  01c78	68 07 01 00 00	 push	 263			; 00000107H
  01c7d	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  01c83	52		 push	 edx
  01c84	69 85 3c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv980[ebp], 1116
  01c8e	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv987[ebp]
  01c94	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01c9b	ff d2		 call	 edx
  01c9d	85 c0		 test	 eax, eax
  01c9f	0f 84 ab 00 00
	00		 je	 $LN67@draw_tacti

; 3468 : 										{
; 3469 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01ca5	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01cac	74 10		 je	 SHORT $LN230@draw_tacti
  01cae	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  01cb4	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cb6	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv999[ebp], ecx
  01cbc	eb 20		 jmp	 SHORT $LN231@draw_tacti
$LN230@draw_tacti:
  01cbe	68 8d 0d 00 00	 push	 3469			; 00000d8dH
  01cc3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01cc8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01cce	52		 push	 edx
  01ccf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01cd4	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv999[ebp], 0
$LN231@draw_tacti:
  01cde	b8 01 00 00 00	 mov	 eax, 1
  01ce3	85 c0		 test	 eax, eax
  01ce5	74 0c		 je	 SHORT $LN232@draw_tacti
  01ce7	c7 85 38 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1006[ebp], 38 ; 00000026H
  01cf1	eb 20		 jmp	 SHORT $LN233@draw_tacti
$LN232@draw_tacti:
  01cf3	68 8d 0d 00 00	 push	 3469			; 00000d8dH
  01cf8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01cfd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01d03	51		 push	 ecx
  01d04	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d09	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1006[ebp], 0
$LN233@draw_tacti:
  01d13	6a 26		 push	 38			; 00000026H
  01d15	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  01d1b	52		 push	 edx
  01d1c	69 85 3c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv999[ebp], 180
  01d26	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv1006[ebp]
  01d2c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01d33	ff d2		 call	 edx
  01d35	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01d3b	75 13		 jne	 SHORT $LN67@draw_tacti

; 3470 : 											{
; 3471 : 												draw_threat_line = *tsd_draw_threat_line_status;

  01d3d	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  01d43	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d45	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$15[ebp], ecx

; 3472 : 
; 3473 : 												break;

  01d4b	e9 a9 00 00 00	 jmp	 $LN15@draw_tacti
$LN67@draw_tacti:

; 3474 : 											}
; 3475 : 										}
; 3476 : 
; 3477 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01d50	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01d57	74 10		 je	 SHORT $LN234@draw_tacti
  01d59	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  01d5f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d61	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1019[ebp], ecx
  01d67	eb 27		 jmp	 SHORT $LN235@draw_tacti
$LN234@draw_tacti:
  01d69	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01d6f	81 c2 90 01 00
	00		 add	 edx, 400		; 00000190H
  01d75	52		 push	 edx
  01d76	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d7b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d80	50		 push	 eax
  01d81	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d86	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1019[ebp], 0
$LN235@draw_tacti:
  01d90	b9 01 00 00 00	 mov	 ecx, 1
  01d95	85 c9		 test	 ecx, ecx
  01d97	74 0c		 je	 SHORT $LN236@draw_tacti
  01d99	c7 85 38 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1027[ebp], 24 ; 00000018H
  01da3	eb 27		 jmp	 SHORT $LN237@draw_tacti
$LN236@draw_tacti:
  01da5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01dab	81 c2 90 01 00
	00		 add	 edx, 400		; 00000190H
  01db1	52		 push	 edx
  01db2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01db7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01dbc	50		 push	 eax
  01dbd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dc2	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1027[ebp], 0
$LN237@draw_tacti:
  01dcc	6a 18		 push	 24			; 00000018H
  01dce	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$18[ebp]
  01dd4	51		 push	 ecx
  01dd5	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1019[ebp], 180
  01ddf	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1027[ebp]
  01de5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01dec	ff d1		 call	 ecx
  01dee	89 85 cc fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax

; 3478 : 									}

  01df4	e9 04 fe ff ff	 jmp	 $LN14@draw_tacti
$LN15@draw_tacti:

; 3479 : 
; 3480 : 									if (draw_threat_line)

  01df9	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$15[ebp], 0
  01e00	0f 84 2d 01 00
	00		 je	 $LN68@draw_tacti

; 3481 : 									{
; 3482 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01e06	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01e0d	74 10		 je	 SHORT $LN238@draw_tacti
  01e0f	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01e15	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e17	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1040[ebp], ecx
  01e1d	eb 27		 jmp	 SHORT $LN239@draw_tacti
$LN238@draw_tacti:
  01e1f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01e25	81 c2 95 01 00
	00		 add	 edx, 405		; 00000195H
  01e2b	52		 push	 edx
  01e2c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e31	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e36	50		 push	 eax
  01e37	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e3c	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1040[ebp], 0
$LN239@draw_tacti:
  01e46	b9 01 00 00 00	 mov	 ecx, 1
  01e4b	85 c9		 test	 ecx, ecx
  01e4d	74 0c		 je	 SHORT $LN240@draw_tacti
  01e4f	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1048[ebp], 8
  01e59	eb 27		 jmp	 SHORT $LN241@draw_tacti
$LN240@draw_tacti:
  01e5b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01e61	81 c2 95 01 00
	00		 add	 edx, 405		; 00000195H
  01e67	52		 push	 edx
  01e68	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e6d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01e72	50		 push	 eax
  01e73	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e78	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1048[ebp], 0
$LN241@draw_tacti:
  01e82	6a 08		 push	 8
  01e84	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01e8a	51		 push	 ecx
  01e8b	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv1040[ebp], 96
  01e92	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1048[ebp]
  01e98	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01e9f	ff d1		 call	 ecx
  01ea1	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 3483 : 
; 3484 : 										dx = (target_position->x - source_position->x) * scale;

  01ea7	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  01ead	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01eb3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01eb7	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01ebb	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01ec3	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 3485 : 										dy = (target_position->z - source_position->z) * scale;

  01ecb	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  01ed1	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01ed7	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01edc	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01ee1	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01ee9	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 3486 : 
; 3487 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  01ef1	b8 04 00 00 00	 mov	 eax, 4
  01ef6	6b c8 00	 imul	 ecx, eax, 0
  01ef9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01eff	52		 push	 edx
  01f00	51		 push	 ecx
  01f01	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01f09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f0e	51		 push	 ecx
  01f0f	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01f17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1c	51		 push	 ecx
  01f1d	0f 57 c0	 xorps	 xmm0, xmm0
  01f20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f25	51		 push	 ecx
  01f26	0f 57 c0	 xorps	 xmm0, xmm0
  01f29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f2e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN68@draw_tacti:

; 3488 : 									}
; 3489 : 								}
; 3490 : 							}
; 3491 : 						}
; 3492 : 					}
; 3493 : 				}
; 3494 : 
; 3495 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01f33	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01f3a	74 10		 je	 SHORT $LN242@draw_tacti
  01f3c	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01f42	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f44	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1075[ebp], ecx
  01f4a	eb 27		 jmp	 SHORT $LN243@draw_tacti
$LN242@draw_tacti:
  01f4c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01f52	81 c2 a2 01 00
	00		 add	 edx, 418		; 000001a2H
  01f58	52		 push	 edx
  01f59	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f63	50		 push	 eax
  01f64	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f69	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1075[ebp], 0
$LN243@draw_tacti:
  01f73	b9 01 00 00 00	 mov	 ecx, 1
  01f78	85 c9		 test	 ecx, ecx
  01f7a	74 0c		 je	 SHORT $LN244@draw_tacti
  01f7c	c7 85 38 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1083[ebp], 18 ; 00000012H
  01f86	eb 27		 jmp	 SHORT $LN245@draw_tacti
$LN244@draw_tacti:
  01f88	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  01f8e	81 c2 a2 01 00
	00		 add	 edx, 418		; 000001a2H
  01f94	52		 push	 edx
  01f95	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01f9f	50		 push	 eax
  01fa0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fa5	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1083[ebp], 0
$LN245@draw_tacti:
  01faf	6a 12		 push	 18			; 00000012H
  01fb1	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01fb7	51		 push	 ecx
  01fb8	69 95 3c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1075[ebp], 180
  01fc2	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1083[ebp]
  01fc8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01fcf	ff d1		 call	 ecx
  01fd1	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 3496 : 			}

  01fd7	e9 32 f8 ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 3497 : 
; 3498 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01fdc	51		 push	 ecx
  01fdd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01fe5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fea	51		 push	 ecx
  01feb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01ff3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ff8	51		 push	 ecx
  01ff9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  02001	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02006	51		 push	 ecx
  02007	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0200f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  02019	50		 push	 eax
  0201a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3499 : 
; 3500 : 			set_2d_window_rotation (mfd_env, 0.0);

  0201f	51		 push	 ecx
  02020	0f 57 c0	 xorps	 xmm0, xmm0
  02023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0202d	50		 push	 eax
  0202e	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN44@draw_tacti:

; 3501 : 		}
; 3502 : 	}
; 3503 : 
; 3504 : 	////////////////////////////////////////
; 3505 : 	//
; 3506 : 	// aircraft datum symbol
; 3507 : 	//
; 3508 : 	////////////////////////////////////////
; 3509 : 
; 3510 : 	if (draw_large_mfd)

  02033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0203a	74 6c		 je	 SHORT $LN69@draw_tacti

; 3511 : 	{
; 3512 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  0203c	b8 04 00 00 00	 mov	 eax, 4
  02041	6b c8 05	 imul	 ecx, eax, 5
  02044	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0204a	52		 push	 edx
  0204b	51		 push	 ecx
  0204c	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02059	51		 push	 ecx
  0205a	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02067	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  0206c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3513 : 
; 3514 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  02071	b8 04 00 00 00	 mov	 eax, 4
  02076	6b c8 00	 imul	 ecx, eax, 0
  02079	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0207f	52		 push	 edx
  02080	51		 push	 ecx
  02081	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0208e	51		 push	 ecx
  0208f	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0209c	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  020a1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3515 : 	}
; 3516 : 	else

  020a6	eb 6a		 jmp	 SHORT $LN70@draw_tacti
$LN69@draw_tacti:

; 3517 : 	{
; 3518 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  020a8	b8 04 00 00 00	 mov	 eax, 4
  020ad	6b c8 05	 imul	 ecx, eax, 5
  020b0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020b6	52		 push	 edx
  020b7	51		 push	 ecx
  020b8	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  020c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020c5	51		 push	 ecx
  020c6	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  020ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020d3	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  020d8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3519 : 
; 3520 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  020dd	b8 04 00 00 00	 mov	 eax, 4
  020e2	6b c8 00	 imul	 ecx, eax, 0
  020e5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020eb	52		 push	 edx
  020ec	51		 push	 ecx
  020ed	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  020f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020fa	51		 push	 ecx
  020fb	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02108	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  0210d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN70@draw_tacti:

; 3521 : 	}
; 3522 : 
; 3523 : 	// ATARIBABY added heading tape to TSD NAV display
; 3524 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION || tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  02112	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02119	74 0d		 je	 SHORT $LN72@draw_tacti
  0211b	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  02122	0f 85 cc 00 00
	00		 jne	 $LN71@draw_tacti
$LN72@draw_tacti:

; 3525 : 	{
; 3526 : 		set_mono_font_colour (MFD_COLOUR1);

  02128	b8 04 00 00 00	 mov	 eax, 4
  0212d	6b c8 00	 imul	 ecx, eax, 0
  02130	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02136	52		 push	 edx
  02137	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3527 : 		draw_heading_scale_tsd (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  0213c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  02143	74 0f		 je	 SHORT $LN246@draw_tacti
  02145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0214a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0214c	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1133[ebp], ecx
  02152	eb 27		 jmp	 SHORT $LN247@draw_tacti
$LN246@draw_tacti:
  02154	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0215a	81 c2 c2 01 00
	00		 add	 edx, 450		; 000001c2H
  02160	52		 push	 edx
  02161	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02166	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0216b	50		 push	 eax
  0216c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02171	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1133[ebp], 0
$LN247@draw_tacti:
  0217b	b9 01 00 00 00	 mov	 ecx, 1
  02180	85 c9		 test	 ecx, ecx
  02182	74 0c		 je	 SHORT $LN248@draw_tacti
  02184	c7 85 38 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv1141[ebp], 52 ; 00000034H
  0218e	eb 27		 jmp	 SHORT $LN249@draw_tacti
$LN248@draw_tacti:
  02190	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  02196	81 c2 c2 01 00
	00		 add	 edx, 450		; 000001c2H
  0219c	52		 push	 edx
  0219d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  021a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  021a7	50		 push	 eax
  021a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  021ad	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1141[ebp], 0
$LN249@draw_tacti:
  021b7	6a 01		 push	 1
  021b9	6a 34		 push	 52			; 00000034H
  021bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  021c1	51		 push	 ecx
  021c2	69 95 3c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv1133[ebp], 700
  021cc	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1141[ebp]
  021d2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  021d9	ff d1		 call	 ecx
  021db	d9 9d 34 fe ff
	ff		 fstp	 DWORD PTR tv2209[ebp]
  021e1	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv2209[ebp]
  021e9	51		 push	 ecx
  021ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ef	e8 00 00 00 00	 call	 ?draw_heading_scale_tsd@@YGXMH@Z ; draw_heading_scale_tsd
$LN71@draw_tacti:

; 3528 : 	}
; 3529 : 
; 3530 : 	////////////////////////////////////////
; 3531 : 	//
; 3532 : 	// text
; 3533 : 	//
; 3534 : 	////////////////////////////////////////
; 3535 : 
; 3536 : 	set_mono_font_colour (MFD_COLOUR1);

  021f4	b8 04 00 00 00	 mov	 eax, 4
  021f9	6b c8 00	 imul	 ecx, eax, 0
  021fc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02202	52		 push	 edx
  02203	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3537 : 
; 3538 : 	if (draw_large_mfd)

  02208	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0220f	74 09		 je	 SHORT $LN73@draw_tacti

; 3539 : 	{
; 3540 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  02211	6a 05		 push	 5
  02213	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3541 : 	}
; 3542 : 	else

  02218	eb 07		 jmp	 SHORT $LN74@draw_tacti
$LN73@draw_tacti:

; 3543 : 	{
; 3544 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0221a	6a 01		 push	 1
  0221c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN74@draw_tacti:

; 3545 : 	}
; 3546 : 
; 3547 : 	//
; 3548 : 	// sensor type
; 3549 : 	//
; 3550 : 
; 3551 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  02221	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02228	0f 84 77 01 00
	00		 je	 $LN75@draw_tacti

; 3552 : 	{
; 3553 : 		switch (target_acquisition_system)

  0222e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  02233	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv1156[ebp], eax
  02239	83 bd 3c fe ff
	ff 00		 cmp	 DWORD PTR tv1156[ebp], 0
  02240	74 14		 je	 SHORT $LN76@draw_tacti
  02242	83 bd 3c fe ff
	ff 02		 cmp	 DWORD PTR tv1156[ebp], 2
  02249	7e 1d		 jle	 SHORT $LN78@draw_tacti
  0224b	83 bd 3c fe ff
	ff 04		 cmp	 DWORD PTR tv1156[ebp], 4
  02252	7e 0b		 jle	 SHORT $LN77@draw_tacti
  02254	eb 12		 jmp	 SHORT $LN78@draw_tacti
$LN76@draw_tacti:

; 3554 : 		{
; 3555 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 3556 : 			{
; 3557 : 				s = "NO ACQ";

  02256	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 3558 : 
; 3559 : 				break;

  0225d	eb 10		 jmp	 SHORT $LN16@draw_tacti
$LN77@draw_tacti:

; 3560 : 			}
; 3561 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3562 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 3563 : 			{
; 3564 : 				s = "TADS";

  0225f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 3565 : 
; 3566 : 				break;

  02266	eb 07		 jmp	 SHORT $LN16@draw_tacti
$LN78@draw_tacti:

; 3567 : 			}
; 3568 : 			default:
; 3569 : 			{
; 3570 : 				s = "XXX";

  02268	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN16@draw_tacti:

; 3571 : 
; 3572 : 				break;
; 3573 : 			}
; 3574 : 		}
; 3575 : 
; 3576 : 		if (draw_large_mfd)

  0226f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02276	74 12		 je	 SHORT $LN79@draw_tacti

; 3577 : 		{
; 3578 : 			y_adjust = 5.0;

  02278	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02280	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3579 : 		}
; 3580 : 		else

  02288	eb 10		 jmp	 SHORT $LN80@draw_tacti
$LN79@draw_tacti:

; 3581 : 		{
; 3582 : 			y_adjust = 2.0;

  0228a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02292	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN80@draw_tacti:

; 3583 : 		}
; 3584 : 
; 3585 : 		set_2d_mono_font_position (-1.0, 1.0);

  0229a	51		 push	 ecx
  0229b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022a8	51		 push	 ecx
  022a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  022b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3586 : 
; 3587 : 		set_mono_font_rel_position (1.0, y_adjust);

  022bb	51		 push	 ecx
  022bc	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  022c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c9	51		 push	 ecx
  022ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3588 : 
; 3589 : 		print_mono_font_string (s);

  022dc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  022df	50		 push	 eax
  022e0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3590 : 
; 3591 : 		switch (target_acquisition_system)

  022e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  022ea	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv1166[ebp], eax
  022f0	83 bd 3c fe ff
	ff 00		 cmp	 DWORD PTR tv1166[ebp], 0
  022f7	74 14		 je	 SHORT $LN81@draw_tacti
  022f9	83 bd 3c fe ff
	ff 03		 cmp	 DWORD PTR tv1166[ebp], 3
  02300	74 14		 je	 SHORT $LN82@draw_tacti
  02302	83 bd 3c fe ff
	ff 04		 cmp	 DWORD PTR tv1166[ebp], 4
  02309	74 14		 je	 SHORT $LN83@draw_tacti
  0230b	eb 1b		 jmp	 SHORT $LN84@draw_tacti
$LN81@draw_tacti:

; 3592 : 		{
; 3593 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 3594 : 			{
; 3595 : 				s = "";

  0230d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 3596 : 
; 3597 : 				break;

  02314	eb 19		 jmp	 SHORT $LN18@draw_tacti
$LN82@draw_tacti:

; 3598 : 			}
; 3599 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3600 : 			{
; 3601 : 				s = "FLIR";

  02316	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04MIGKMLBH@FLIR@

; 3602 : 
; 3603 : 				break;

  0231d	eb 10		 jmp	 SHORT $LN18@draw_tacti
$LN83@draw_tacti:

; 3604 : 			}
; 3605 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 3606 : 			{
; 3607 : 				s = "DTV";

  0231f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03ENJJJDDH@DTV@

; 3608 : 
; 3609 : 				break;

  02326	eb 07		 jmp	 SHORT $LN18@draw_tacti
$LN84@draw_tacti:

; 3610 : 			}
; 3611 : 			default:
; 3612 : 			{
; 3613 : 				s = "XXX";

  02328	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN18@draw_tacti:

; 3614 : 
; 3615 : 				break;
; 3616 : 			}
; 3617 : 		}
; 3618 : 
; 3619 : 		if (draw_large_mfd)

  0232f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02336	74 12		 je	 SHORT $LN85@draw_tacti

; 3620 : 		{
; 3621 : 			y_adjust = 18.0;

  02338	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  02340	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3622 : 		}
; 3623 : 		else

  02348	eb 10		 jmp	 SHORT $LN86@draw_tacti
$LN85@draw_tacti:

; 3624 : 		{
; 3625 : 			y_adjust = 9.0;

  0234a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  02352	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN86@draw_tacti:

; 3626 : 		}
; 3627 : 
; 3628 : 		set_2d_mono_font_position (-1.0, 1.0);

  0235a	51		 push	 ecx
  0235b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02363	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02368	51		 push	 ecx
  02369	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02376	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3629 : 
; 3630 : 		set_mono_font_rel_position (1.0, y_adjust);

  0237b	51		 push	 ecx
  0237c	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02389	51		 push	 ecx
  0238a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02392	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02397	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3631 : 
; 3632 : 		print_mono_font_string (s);

  0239c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0239f	50		 push	 eax
  023a0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN75@draw_tacti:

; 3633 : 	}
; 3634 : 
; 3635 : 	//
; 3636 : 	// TSD range
; 3637 : 	//
; 3638 : 
; 3639 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  023a5	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  023ad	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  023b4	9f		 lahf
  023b5	f6 c4 44	 test	 ah, 68			; 00000044H
  023b8	7a 09		 jp	 SHORT $LN87@draw_tacti

; 3640 : 	{
; 3641 : 		s = "2Km";

  023ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  023c1	eb 61		 jmp	 SHORT $LN94@draw_tacti
$LN87@draw_tacti:

; 3642 : 	}
; 3643 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  023c3	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  023cb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  023d2	9f		 lahf
  023d3	f6 c4 44	 test	 ah, 68			; 00000044H
  023d6	7a 09		 jp	 SHORT $LN89@draw_tacti

; 3644 : 	{
; 3645 : 		s = "5Km";

  023d8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  023df	eb 43		 jmp	 SHORT $LN94@draw_tacti
$LN89@draw_tacti:

; 3646 : 	}
; 3647 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  023e1	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  023e9	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  023f0	9f		 lahf
  023f1	f6 c4 44	 test	 ah, 68			; 00000044H
  023f4	7a 09		 jp	 SHORT $LN91@draw_tacti

; 3648 : 	{
; 3649 : 		s = "10Km";

  023f6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  023fd	eb 25		 jmp	 SHORT $LN94@draw_tacti
$LN91@draw_tacti:

; 3650 : 	}
; 3651 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  023ff	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  02407	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  0240e	9f		 lahf
  0240f	f6 c4 44	 test	 ah, 68			; 00000044H
  02412	7a 09		 jp	 SHORT $LN93@draw_tacti

; 3652 : 	{
; 3653 : 		s = "25Km";

  02414	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 3654 : 	}
; 3655 : 	else

  0241b	eb 07		 jmp	 SHORT $LN94@draw_tacti
$LN93@draw_tacti:

; 3656 : 	{
; 3657 : 		s = "XXX";

  0241d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN94@draw_tacti:

; 3658 : 	}
; 3659 : 
; 3660 : 	width = get_mono_font_string_width (s);

  02424	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02427	50		 push	 eax
  02428	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0242d	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3661 : 
; 3662 : 	if (draw_large_mfd)

  02433	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0243a	74 2e		 je	 SHORT $LN95@draw_tacti

; 3663 : 	{
; 3664 : 		width += 2.0;

  0243c	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02444	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0244c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02450	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3665 : 
; 3666 : 		y_adjust = 5.0;

  02458	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02460	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3667 : 	}
; 3668 : 	else

  02468	eb 2c		 jmp	 SHORT $LN96@draw_tacti
$LN95@draw_tacti:

; 3669 : 	{
; 3670 : 		width += 1.0;

  0246a	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02472	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0247a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0247e	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3671 : 
; 3672 : 		y_adjust = 2.0;

  02486	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0248e	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN96@draw_tacti:

; 3673 : 	}
; 3674 : 
; 3675 : 	set_2d_mono_font_position (1.0, 1.0);

  02496	51		 push	 ecx
  02497	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0249f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a4	51		 push	 ecx
  024a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3676 : 
; 3677 : 	set_mono_font_rel_position (-width, y_adjust);

  024b7	51		 push	 ecx
  024b8	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  024c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024c5	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  024cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  024d4	51		 push	 ecx
  024d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024da	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3678 : 
; 3679 : 	print_mono_font_string (s);

  024df	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  024e2	50		 push	 eax
  024e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3680 : 
; 3681 : 	//
; 3682 : 	// TSD declutter level
; 3683 : 	//
; 3684 : 
; 3685 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  024e8	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  024ef	75 09		 jne	 SHORT $LN97@draw_tacti

; 3686 : 	{
; 3687 : 		s = "ALL";

  024f1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NIFPGLBG@ALL@
  024f8	eb 2b		 jmp	 SHORT $LN102@draw_tacti
$LN97@draw_tacti:

; 3688 : 	}
; 3689 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  024fa	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  02501	75 09		 jne	 SHORT $LN99@draw_tacti

; 3690 : 	{
; 3691 : 		s = "TGT";

  02503	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DBNGLLAD@TGT@
  0250a	eb 19		 jmp	 SHORT $LN102@draw_tacti
$LN99@draw_tacti:

; 3692 : 	}
; 3693 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  0250c	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02513	75 09		 jne	 SHORT $LN101@draw_tacti

; 3694 : 	{
; 3695 : 		s = "NAV";

  02515	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DIMJBCMI@NAV@

; 3696 : 	}
; 3697 : 	else

  0251c	eb 07		 jmp	 SHORT $LN102@draw_tacti
$LN101@draw_tacti:

; 3698 : 	{
; 3699 : 		s = "XXX";

  0251e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN102@draw_tacti:

; 3700 : 	}
; 3701 : 
; 3702 : 	width = get_mono_font_string_width (s);

  02525	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02528	50		 push	 eax
  02529	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0252e	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3703 : 
; 3704 : 	if (draw_large_mfd)

  02534	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0253b	74 2e		 je	 SHORT $LN103@draw_tacti

; 3705 : 	{
; 3706 : 		width += 2.0;

  0253d	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02545	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0254d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02551	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3707 : 
; 3708 : 		y_adjust = 18.0;

  02559	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  02561	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3709 : 	}
; 3710 : 	else

  02569	eb 2c		 jmp	 SHORT $LN104@draw_tacti
$LN103@draw_tacti:

; 3711 : 	{
; 3712 : 		width += 1.0;

  0256b	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02573	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0257b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0257f	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3713 : 
; 3714 : 		y_adjust = 9.0;

  02587	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  0258f	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN104@draw_tacti:

; 3715 : 	}
; 3716 : 
; 3717 : 	set_2d_mono_font_position (1.0, 1.0);

  02597	51		 push	 ecx
  02598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  025a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025a5	51		 push	 ecx
  025a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  025ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025b3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3718 : 
; 3719 : 	set_mono_font_rel_position (-width, y_adjust);

  025b8	51		 push	 ecx
  025b9	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  025c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025c6	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  025ce	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  025d5	51		 push	 ecx
  025d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025db	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3720 : 
; 3721 : 	print_mono_font_string (s);

  025e0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  025e3	50		 push	 eax
  025e4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3722 : 
; 3723 : 	//
; 3724 : 	// target range
; 3725 : 	//
; 3726 : 
; 3727 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  025e9	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  025f0	0f 84 ff 01 00
	00		 je	 $LN106@draw_tacti

; 3728 : 	{
; 3729 : 		if (source_target)

  025f6	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  025fd	0f 84 f2 01 00
	00		 je	 $LN106@draw_tacti

; 3730 : 		{
; 3731 : 			vec3d
; 3732 : 				*target_position;
; 3733 : 
; 3734 : 			float
; 3735 : 				target_range;
; 3736 : 
; 3737 : 			target_position = get_local_entity_vec3d_ptr (source_target, VEC3D_TYPE_POSITION);

  02603	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  0260a	74 10		 je	 SHORT $LN250@draw_tacti
  0260c	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _source_target$[ebp]
  02612	8b 08		 mov	 ecx, DWORD PTR [eax]
  02614	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1221[ebp], ecx
  0261a	eb 27		 jmp	 SHORT $LN251@draw_tacti
$LN250@draw_tacti:
  0261c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  02622	81 c2 94 02 00
	00		 add	 edx, 660		; 00000294H
  02628	52		 push	 edx
  02629	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0262e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02633	50		 push	 eax
  02634	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02639	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1221[ebp], 0
$LN251@draw_tacti:
  02643	b9 01 00 00 00	 mov	 ecx, 1
  02648	85 c9		 test	 ecx, ecx
  0264a	74 0c		 je	 SHORT $LN252@draw_tacti
  0264c	c7 85 38 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1229[ebp], 8
  02656	eb 27		 jmp	 SHORT $LN253@draw_tacti
$LN252@draw_tacti:
  02658	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0265e	81 c2 94 02 00
	00		 add	 edx, 660		; 00000294H
  02664	52		 push	 edx
  02665	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0266a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0266f	50		 push	 eax
  02670	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02675	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1229[ebp], 0
$LN253@draw_tacti:
  0267f	6a 08		 push	 8
  02681	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  02687	51		 push	 ecx
  02688	6b 95 3c fe ff
	ff 60		 imul	 edx, DWORD PTR tv1221[ebp], 96
  0268f	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1229[ebp]
  02695	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0269c	ff d1		 call	 ecx
  0269e	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _target_position$11[ebp], eax

; 3738 : 
; 3739 : 			target_range = get_3d_range (source_position, target_position);

  026a4	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$11[ebp]
  026aa	50		 push	 eax
  026ab	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  026b1	51		 push	 ecx
  026b2	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  026b7	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR _target_range$10[ebp]

; 3740 : 
; 3741 : 			if ((target_range < 1000.0) && (!kiowa_damage.laser_designator))

  026bd	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  026c5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  026cd	66 0f 2f c8	 comisd	 xmm1, xmm0
  026d1	76 2c		 jbe	 SHORT $LN107@draw_tacti
  026d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  026d8	c1 e8 02	 shr	 eax, 2
  026db	83 e0 01	 and	 eax, 1
  026de	75 1f		 jne	 SHORT $LN107@draw_tacti

; 3742 : 			{
; 3743 : 				sprintf (buffer, "%dm", (int) target_range);

  026e0	f3 0f 2c 85 ac
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$10[ebp]
  026e8	50		 push	 eax
  026e9	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  026ee	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  026f4	51		 push	 ecx
  026f5	e8 00 00 00 00	 call	 _sprintf
  026fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3744 : 			}
; 3745 : 			else

  026fd	eb 2c		 jmp	 SHORT $LN108@draw_tacti
$LN107@draw_tacti:

; 3746 : 			{
; 3747 : 				sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  026ff	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  02707	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0270f	83 ec 08	 sub	 esp, 8
  02712	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02717	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0271c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02722	50		 push	 eax
  02723	e8 00 00 00 00	 call	 _sprintf
  02728	83 c4 10	 add	 esp, 16			; 00000010H
$LN108@draw_tacti:

; 3748 : 			}
; 3749 : 
; 3750 : 			width = get_mono_font_string_width (buffer);

  0272b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02731	50		 push	 eax
  02732	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02737	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3751 : 
; 3752 : 			if (draw_large_mfd)

  0273d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02744	74 2e		 je	 SHORT $LN109@draw_tacti

; 3753 : 			{
; 3754 : 				width += 2.0;

  02746	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0274e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02756	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0275a	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3755 : 
; 3756 : 				y_adjust = -12.0;

  02762	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0276a	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3757 : 			}
; 3758 : 			else

  02772	eb 2c		 jmp	 SHORT $LN110@draw_tacti
$LN109@draw_tacti:

; 3759 : 			{
; 3760 : 				width += 1.0;

  02774	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0277c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02784	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02788	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3761 : 
; 3762 : 				y_adjust = -5.0;

  02790	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02798	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN110@draw_tacti:

; 3763 : 			}
; 3764 : 
; 3765 : 			set_2d_mono_font_position (1.0, -1.0);

  027a0	51		 push	 ecx
  027a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  027a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027ae	51		 push	 ecx
  027af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  027b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027bc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3766 : 
; 3767 : 			set_mono_font_rel_position (-width, y_adjust);

  027c1	51		 push	 ecx
  027c2	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  027ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027cf	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  027d7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  027de	51		 push	 ecx
  027df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027e4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3768 : 
; 3769 : 			print_mono_font_string (buffer);

  027e9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  027ef	50		 push	 eax
  027f0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN106@draw_tacti:

; 3770 : 		}
; 3771 : 	}
; 3772 : 
; 3773 : 	//
; 3774 : 	// waypoint information
; 3775 : 	//
; 3776 : 
; 3777 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !kiowa_damage.navigation_computer)

  027f5	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  027fc	0f 84 f7 04 00
	00		 je	 $LN112@draw_tacti
  02802	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  02807	c1 e8 04	 shr	 eax, 4
  0280a	83 e0 01	 and	 eax, 1
  0280d	0f 85 e6 04 00
	00		 jne	 $LN112@draw_tacti

; 3778 : 	{
; 3779 : 		entity
; 3780 : 			*wp;
; 3781 : 
; 3782 : 		vec3d
; 3783 : 			waypoint_position;
; 3784 : 
; 3785 : 		float
; 3786 : 			waypoint_range;
; 3787 : 
; 3788 : 		wp = get_local_entity_current_waypoint (source);

  02813	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02819	50		 push	 eax
  0281a	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  0281f	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _wp$9[ebp], eax

; 3789 : 
; 3790 : 		if (wp)

  02825	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  0282c	0f 84 c7 04 00
	00		 je	 $LN112@draw_tacti

; 3791 : 		{
; 3792 : 			get_waypoint_display_position (source, wp, &waypoint_position);

  02832	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  02838	50		 push	 eax
  02839	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  0283f	51		 push	 ecx
  02840	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02846	52		 push	 edx
  02847	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3793 : 
; 3794 : 			//
; 3795 : 			// waypoint id & range
; 3796 : 			//
; 3797 : 
; 3798 : 			waypoint_range = get_2d_range (source_position, &waypoint_position);

  0284c	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  02852	50		 push	 eax
  02853	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02859	51		 push	 ecx
  0285a	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  0285f	d9 9d 98 fe ff
	ff		 fstp	 DWORD PTR _waypoint_range$7[ebp]

; 3799 : 
; 3800 : 			if (!kiowa_damage.navigation_computer)

  02865	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0286a	c1 e8 04	 shr	 eax, 4
  0286d	83 e0 01	 and	 eax, 1
  02870	0f 85 cb 02 00
	00		 jne	 $LN113@draw_tacti

; 3801 : 			{
; 3802 : 				if (waypoint_range < 1000.0)

  02876	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  0287e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  02886	66 0f 2f c8	 comisd	 xmm1, xmm0
  0288a	0f 86 c3 00 00
	00		 jbe	 $LN115@draw_tacti

; 3803 : 				{
; 3804 : 					sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  02890	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02897	74 10		 je	 SHORT $LN254@draw_tacti
  02899	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  0289f	8b 08		 mov	 ecx, DWORD PTR [eax]
  028a1	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1294[ebp], ecx
  028a7	eb 27		 jmp	 SHORT $LN255@draw_tacti
$LN254@draw_tacti:
  028a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  028af	81 c2 d7 02 00
	00		 add	 edx, 727		; 000002d7H
  028b5	52		 push	 edx
  028b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  028bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  028c0	50		 push	 eax
  028c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  028c6	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1294[ebp], 0
$LN255@draw_tacti:
  028d0	b9 01 00 00 00	 mov	 ecx, 1
  028d5	85 c9		 test	 ecx, ecx
  028d7	74 0c		 je	 SHORT $LN256@draw_tacti
  028d9	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1302[ebp], 0
  028e3	eb 27		 jmp	 SHORT $LN257@draw_tacti
$LN256@draw_tacti:
  028e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  028eb	81 c2 d7 02 00
	00		 add	 edx, 727		; 000002d7H
  028f1	52		 push	 edx
  028f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  028f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  028fc	50		 push	 eax
  028fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02902	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1302[ebp], 0
$LN257@draw_tacti:
  0290c	f3 0f 2c 8d 98
	fe ff ff	 cvttss2si ecx, DWORD PTR _waypoint_range$7[ebp]
  02914	51		 push	 ecx
  02915	6a 00		 push	 0
  02917	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  0291d	52		 push	 edx
  0291e	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1302[ebp]
  02924	c1 e0 02	 shl	 eax, 2
  02927	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv1294[ebp]
  0292d	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02934	ff d2		 call	 edx
  02936	0f b6 c0	 movzx	 eax, al
  02939	50		 push	 eax
  0293a	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  0293f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02945	51		 push	 ecx
  02946	e8 00 00 00 00	 call	 _sprintf
  0294b	83 c4 10	 add	 esp, 16			; 00000010H
  0294e	e9 ec 01 00 00	 jmp	 $LN118@draw_tacti
$LN115@draw_tacti:

; 3805 : 				}
; 3806 : 				else if (waypoint_range < 100000.0)

  02953	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  0295b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  02963	66 0f 2f c8	 comisd	 xmm1, xmm0
  02967	0f 86 08 01 00
	00		 jbe	 $LN117@draw_tacti

; 3807 : 				{
; 3808 : 					int
; 3809 : 						i;
; 3810 : 
; 3811 : 					float
; 3812 : 						f;
; 3813 : 
; 3814 : 					//
; 3815 : 					// this is required to prevent rounding errors around the 100Km mark
; 3816 : 					//
; 3817 : 
; 3818 : 					i = (int) waypoint_range * (1.0 / 100.0);

  0296d	f3 0f 2c 85 98
	fe ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$7[ebp]
  02975	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  02979	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  02981	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02985	89 8d 94 fe ff
	ff		 mov	 DWORD PTR _i$6[ebp], ecx

; 3819 : 
; 3820 : 					f = (float) i * (1.0 / 10.0);

  0298b	f3 0f 2a 85 94
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  02993	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02997	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0299f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  029a3	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _f$5[ebp], xmm0

; 3821 : 
; 3822 : 					sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  029ab	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  029b2	74 10		 je	 SHORT $LN258@draw_tacti
  029b4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  029ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  029bc	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1330[ebp], ecx
  029c2	eb 27		 jmp	 SHORT $LN259@draw_tacti
$LN258@draw_tacti:
  029c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  029ca	81 c2 e9 02 00
	00		 add	 edx, 745		; 000002e9H
  029d0	52		 push	 edx
  029d1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  029d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  029db	50		 push	 eax
  029dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  029e1	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1330[ebp], 0
$LN259@draw_tacti:
  029eb	b9 01 00 00 00	 mov	 ecx, 1
  029f0	85 c9		 test	 ecx, ecx
  029f2	74 0c		 je	 SHORT $LN260@draw_tacti
  029f4	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1338[ebp], 0
  029fe	eb 27		 jmp	 SHORT $LN261@draw_tacti
$LN260@draw_tacti:
  02a00	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  02a06	81 c2 e9 02 00
	00		 add	 edx, 745		; 000002e9H
  02a0c	52		 push	 edx
  02a0d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02a12	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02a17	50		 push	 eax
  02a18	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02a1d	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1338[ebp], 0
$LN261@draw_tacti:
  02a27	f3 0f 5a 85 90
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  02a2f	83 ec 08	 sub	 esp, 8
  02a32	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02a37	6a 00		 push	 0
  02a39	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  02a3f	51		 push	 ecx
  02a40	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR tv1338[ebp]
  02a46	c1 e2 02	 shl	 edx, 2
  02a49	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR tv1330[ebp]
  02a4f	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  02a56	ff d1		 call	 ecx
  02a58	0f b6 d0	 movzx	 edx, al
  02a5b	52		 push	 edx
  02a5c	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  02a61	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02a67	50		 push	 eax
  02a68	e8 00 00 00 00	 call	 _sprintf
  02a6d	83 c4 14	 add	 esp, 20			; 00000014H

; 3823 : 				}
; 3824 : 				else

  02a70	e9 ca 00 00 00	 jmp	 $LN118@draw_tacti
$LN117@draw_tacti:

; 3825 : 				{
; 3826 : 					sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  02a75	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02a7c	74 10		 je	 SHORT $LN262@draw_tacti
  02a7e	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02a84	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a86	89 8d 3c fe ff
	ff		 mov	 DWORD PTR tv1359[ebp], ecx
  02a8c	eb 27		 jmp	 SHORT $LN263@draw_tacti
$LN262@draw_tacti:
  02a8e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  02a94	81 c2 ed 02 00
	00		 add	 edx, 749		; 000002edH
  02a9a	52		 push	 edx
  02a9b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02aa0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02aa5	50		 push	 eax
  02aa6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02aab	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1359[ebp], 0
$LN263@draw_tacti:
  02ab5	b9 01 00 00 00	 mov	 ecx, 1
  02aba	85 c9		 test	 ecx, ecx
  02abc	74 0c		 je	 SHORT $LN264@draw_tacti
  02abe	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1367[ebp], 0
  02ac8	eb 27		 jmp	 SHORT $LN265@draw_tacti
$LN264@draw_tacti:
  02aca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  02ad0	81 c2 ed 02 00
	00		 add	 edx, 749		; 000002edH
  02ad6	52		 push	 edx
  02ad7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02adc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02ae1	50		 push	 eax
  02ae2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02ae7	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1367[ebp], 0
$LN265@draw_tacti:
  02af1	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02af9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02b01	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02b05	51		 push	 ecx
  02b06	6a 00		 push	 0
  02b08	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  02b0e	52		 push	 edx
  02b0f	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1367[ebp]
  02b15	c1 e0 02	 shl	 eax, 2
  02b18	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv1359[ebp]
  02b1e	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02b25	ff d2		 call	 edx
  02b27	0f b6 c0	 movzx	 eax, al
  02b2a	50		 push	 eax
  02b2b	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  02b30	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02b36	51		 push	 ecx
  02b37	e8 00 00 00 00	 call	 _sprintf
  02b3c	83 c4 10	 add	 esp, 16			; 00000010H
$LN118@draw_tacti:

; 3827 : 				}
; 3828 : 			}
; 3829 : 			else

  02b3f	eb 14		 jmp	 SHORT $LN114@draw_tacti
$LN113@draw_tacti:

; 3830 : 			{
; 3831 : 				sprintf (buffer, "-:--.-");

  02b41	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  02b46	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02b4c	50		 push	 eax
  02b4d	e8 00 00 00 00	 call	 _sprintf
  02b52	83 c4 08	 add	 esp, 8
$LN114@draw_tacti:

; 3832 : 			}
; 3833 : 
; 3834 : 			if (draw_large_mfd)

  02b55	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02b5c	74 12		 je	 SHORT $LN119@draw_tacti

; 3835 : 			{
; 3836 : 				y_adjust = -25.0;

  02b5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02b66	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3837 : 			}
; 3838 : 			else

  02b6e	eb 10		 jmp	 SHORT $LN120@draw_tacti
$LN119@draw_tacti:

; 3839 : 			{
; 3840 : 				y_adjust = -12.0;

  02b70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02b78	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN120@draw_tacti:

; 3841 : 			}
; 3842 : 
; 3843 : 			set_2d_mono_font_position (-1.0, -1.0);

  02b80	51		 push	 ecx
  02b81	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02b89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b8e	51		 push	 ecx
  02b8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02b97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b9c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3844 : 
; 3845 : 			set_mono_font_rel_position (1.0, y_adjust);

  02ba1	51		 push	 ecx
  02ba2	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02baa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02baf	51		 push	 ecx
  02bb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02bb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bbd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3846 : 
; 3847 : 			print_mono_font_string (buffer);

  02bc2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02bc8	50		 push	 eax
  02bc9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3848 : 
; 3849 : 			//
; 3850 : 			// time to go
; 3851 : 			//
; 3852 : 
; 3853 : 			if ((current_flight_dynamics->velocity_z.value > 0.1) && (!kiowa_damage.navigation_computer))

  02bce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02bd3	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  02bdb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  02be3	0f 86 83 00 00
	00		 jbe	 $LN121@draw_tacti
  02be9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  02bee	c1 e8 04	 shr	 eax, 4
  02bf1	83 e0 01	 and	 eax, 1
  02bf4	75 76		 jne	 SHORT $LN121@draw_tacti

; 3854 : 			{
; 3855 : 				float
; 3856 : 					time_to_go,
; 3857 : 					hours,
; 3858 : 					minutes,
; 3859 : 					seconds;
; 3860 : 
; 3861 : 				time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  02bf6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02bfb	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$7[ebp]
  02c03	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  02c0b	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 3862 : 
; 3863 : 				get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  02c13	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$1[ebp]
  02c19	50		 push	 eax
  02c1a	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$2[ebp]
  02c20	51		 push	 ecx
  02c21	8d 95 88 fe ff
	ff		 lea	 edx, DWORD PTR _hours$3[ebp]
  02c27	52		 push	 edx
  02c28	51		 push	 ecx
  02c29	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  02c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c36	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 3864 : 
; 3865 : 				sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  02c3b	f3 0f 2c 85 80
	fe ff ff	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  02c43	50		 push	 eax
  02c44	f3 0f 2c 8d 84
	fe ff ff	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  02c4c	51		 push	 ecx
  02c4d	f3 0f 2c 95 88
	fe ff ff	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  02c55	52		 push	 edx
  02c56	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  02c5b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02c61	50		 push	 eax
  02c62	e8 00 00 00 00	 call	 _sprintf
  02c67	83 c4 14	 add	 esp, 20			; 00000014H

; 3866 : 			}
; 3867 : 			else

  02c6a	eb 14		 jmp	 SHORT $LN122@draw_tacti
$LN121@draw_tacti:

; 3868 : 			{
; 3869 : 				strcpy (buffer, "--:--:--");

  02c6c	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  02c71	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02c77	50		 push	 eax
  02c78	e8 00 00 00 00	 call	 _strcpy
  02c7d	83 c4 08	 add	 esp, 8
$LN122@draw_tacti:

; 3870 : 			}
; 3871 : 
; 3872 : 			if (draw_large_mfd)

  02c80	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02c87	74 12		 je	 SHORT $LN123@draw_tacti

; 3873 : 			{
; 3874 : 				y_adjust = -12.0;

  02c89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02c91	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3875 : 			}
; 3876 : 			else

  02c99	eb 10		 jmp	 SHORT $LN124@draw_tacti
$LN123@draw_tacti:

; 3877 : 			{
; 3878 : 				y_adjust = -5.0;

  02c9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02ca3	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN124@draw_tacti:

; 3879 : 			}
; 3880 : 
; 3881 : 			set_2d_mono_font_position (-1.0, -1.0);

  02cab	51		 push	 ecx
  02cac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cb9	51		 push	 ecx
  02cba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02cc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cc7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3882 : 
; 3883 : 			set_mono_font_rel_position (1.0, y_adjust);

  02ccc	51		 push	 ecx
  02ccd	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02cd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cda	51		 push	 ecx
  02cdb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02ce3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ce8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3884 : 
; 3885 : 			print_mono_font_string (buffer);

  02ced	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02cf3	50		 push	 eax
  02cf4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN112@draw_tacti:

; 3886 : 		}
; 3887 : 	}
; 3888 : 
; 3889 : //VJ 030423 TSD render mod
; 3890 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  02cf9	b8 04 00 00 00	 mov	 eax, 4
  02cfe	6b c8 00	 imul	 ecx, eax, 0
  02d01	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  02d08	b8 04 00 00 00	 mov	 eax, 4
  02d0d	6b c8 00	 imul	 ecx, eax, 0
  02d10	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  02d17	b8 04 00 00 00	 mov	 eax, 4
  02d1c	6b c8 00	 imul	 ecx, eax, 0
  02d1f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  02d26	b8 04 00 00 00	 mov	 eax, 4
  02d2b	6b c8 00	 imul	 ecx, eax, 0
  02d2e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3891 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  02d35	b8 04 00 00 00	 mov	 eax, 4
  02d3a	c1 e0 00	 shl	 eax, 0
  02d3d	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02d44	b8 04 00 00 00	 mov	 eax, 4
  02d49	c1 e0 00	 shl	 eax, 0
  02d4c	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  02d53	b8 04 00 00 00	 mov	 eax, 4
  02d58	c1 e0 00	 shl	 eax, 0
  02d5b	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02d62	b8 04 00 00 00	 mov	 eax, 4
  02d67	c1 e0 00	 shl	 eax, 0
  02d6a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3892 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  02d71	b8 04 00 00 00	 mov	 eax, 4
  02d76	d1 e0		 shl	 eax, 1
  02d78	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02d7f	b8 04 00 00 00	 mov	 eax, 4
  02d84	d1 e0		 shl	 eax, 1
  02d86	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  02d8d	b8 04 00 00 00	 mov	 eax, 4
  02d92	d1 e0		 shl	 eax, 1
  02d94	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02d9b	b8 04 00 00 00	 mov	 eax, 4
  02da0	d1 e0		 shl	 eax, 1
  02da2	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3893 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  02da9	b8 04 00 00 00	 mov	 eax, 4
  02dae	6b c8 03	 imul	 ecx, eax, 3
  02db1	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  02db8	b8 04 00 00 00	 mov	 eax, 4
  02dbd	6b c8 03	 imul	 ecx, eax, 3
  02dc0	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  02dc7	b8 04 00 00 00	 mov	 eax, 4
  02dcc	6b c8 03	 imul	 ecx, eax, 3
  02dcf	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  02dd6	b8 04 00 00 00	 mov	 eax, 4
  02ddb	6b c8 03	 imul	 ecx, eax, 3
  02dde	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3894 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  02de5	b8 04 00 00 00	 mov	 eax, 4
  02dea	c1 e0 02	 shl	 eax, 2
  02ded	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02df4	b8 04 00 00 00	 mov	 eax, 4
  02df9	c1 e0 02	 shl	 eax, 2
  02dfc	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  02e03	b8 04 00 00 00	 mov	 eax, 4
  02e08	c1 e0 02	 shl	 eax, 2
  02e0b	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02e12	b8 04 00 00 00	 mov	 eax, 4
  02e17	c1 e0 02	 shl	 eax, 2
  02e1a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3895 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  02e21	b8 04 00 00 00	 mov	 eax, 4
  02e26	6b c8 05	 imul	 ecx, eax, 5
  02e29	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  02e30	b8 04 00 00 00	 mov	 eax, 4
  02e35	6b c8 05	 imul	 ecx, eax, 5
  02e38	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  02e3f	b8 04 00 00 00	 mov	 eax, 4
  02e44	6b c8 05	 imul	 ecx, eax, 5
  02e47	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  02e4e	b8 04 00 00 00	 mov	 eax, 4
  02e53	6b c8 05	 imul	 ecx, eax, 5
  02e56	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3896 : }

  02e5d	5f		 pop	 edi
  02e5e	5e		 pop	 esi
  02e5f	5b		 pop	 ebx
  02e60	8b e5		 mov	 esp, ebp
  02e62	5d		 pop	 ebp
  02e63	c2 04 00	 ret	 4
?draw_tactical_situation_display_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_heading_scale_tsd@@YGXMH@Z
_TEXT	SEGMENT
tv195 = -196						; size = 8
tv196 = -188						; size = 8
tv163 = -188						; size = 4
tv329 = -184						; size = 4
tv326 = -184						; size = 4
tv255 = -184						; size = 4
tv155 = -184						; size = 4
_command_heading$1 = -116				; size = 4
_bearing$2 = -112					; size = 4
_dz$3 = -108						; size = 4
_dx$4 = -104						; size = 4
_waypoint_position$5 = -100				; size = 12
_gunship_position$6 = -88				; size = 4
_wp$7 = -84						; size = 4
_tick_type$ = -80					; size = 4
_int_heading_step_10$ = -76				; size = 4
_loop$ = -72						; size = 4
_mod_heading_step_10$ = -68				; size = 4
_heading_step_10$ = -64					; size = 4
_u$ = -60						; size = 4
_x$ = -56						; size = 4
_mfd_vp_x_max$ = -52					; size = 4
_mfd_vp_x_min$ = -48					; size = 4
_tick_datum_bottom$ = -44				; size = 4
_tick_datum_top$ = -40					; size = 4
_tick_30_deg_bottom$ = -36				; size = 4
_tick_30_deg_top$ = -32					; size = 4
_tick_10_deg_bottom$ = -28				; size = 4
_tick_10_deg_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale_tsd@@YGXMH@Z PROC			; draw_heading_scale_tsd, COMDAT

; 2790 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2791 : 	float
; 2792 : 		heading_width_ratio,
; 2793 : 		heading_tick_x_spacing,
; 2794 : 		x_adjust_single,
; 2795 : 		x_adjust_double,
; 2796 : 		y_adjust,
; 2797 : 		tick_10_deg_top,
; 2798 : 		tick_10_deg_bottom,
; 2799 : 		tick_30_deg_top,
; 2800 : 		tick_30_deg_bottom,
; 2801 : 		tick_datum_top,
; 2802 : 		tick_datum_bottom,
; 2803 : 		mfd_vp_x_min,
; 2804 : 		mfd_vp_x_max,
; 2805 : 		x,
; 2806 : 		u,
; 2807 : 		heading_step_10,
; 2808 : 		mod_heading_step_10;
; 2809 : 
; 2810 : 	int
; 2811 : 		loop,
; 2812 : 		int_heading_step_10,
; 2813 : 		tick_type;
; 2814 : 
; 2815 : 	//
; 2816 : 	// sort large and small mfd differences
; 2817 : 	//
; 2818 : 
; 2819 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	0f 84 9b 00 00
	00		 je	 $LN7@draw_headi

; 2820 : 	{
; 2821 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00019	6a 02		 push	 2
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2822 : 
; 2823 : 		heading_width_ratio		= 0.4;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 2824 : 
; 2825 : 		heading_tick_x_spacing	= 0.4 / 6.5;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d7c0fc1
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 2826 : 
; 2827 : 		x_adjust_single  			= -2.0;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 2828 : 		x_adjust_double  			= -5.0;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 2829 : 		y_adjust			  			= -8.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0005c	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2830 : 
; 2831 : 		tick_10_deg_top			= 0.925 - 0.015;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  00069	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 2832 : 		tick_10_deg_bottom  		= 0.925 - 0.015 - 0.045;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5d70a4
  00076	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 2833 : 		tick_30_deg_top	  		= 0.925;

  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6ccccd
  00083	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 2834 : 		tick_30_deg_bottom  		= 0.925 - 0.075;

  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00090	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 2835 : 		tick_datum_top		  		= 0.925 - 0.075 - 0.010;

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f570a3d
  0009d	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 2836 : 		tick_datum_bottom	  		= 0.925 - 0.075 - 0.010 - 0.045;

  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4b851f
  000aa	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 2837 : 	}
; 2838 : 	else

  000af	e9 96 00 00 00	 jmp	 $LN8@draw_headi
$LN7@draw_headi:

; 2839 : 	{
; 2840 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2841 : 
; 2842 : 		heading_width_ratio		= 0.3;

  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000c3	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 2843 : 
; 2844 : 		heading_tick_x_spacing	= 0.4 / 5.0;

  000c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  000d0	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 2845 : 
; 2846 : 		x_adjust_single			= -1.0;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dd	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 2847 : 		x_adjust_double  			= -3.0;

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ea	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 2848 : 		y_adjust			  			= -6.0;

  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  000f7	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2849 : 
; 2850 : 		tick_10_deg_top  			= 0.875 - 0.015;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5c28f6
  00104	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 2851 : 		tick_10_deg_bottom 		= 0.875 - 0.015 - 0.045;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f50a3d7
  00111	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 2852 : 		tick_30_deg_top	  		= 0.875;

  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f600000
  0011e	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 2853 : 		tick_30_deg_bottom  		= 0.875 - 0.075;

  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0012b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 2854 : 		tick_datum_top		  		= 0.875 - 0.075 - 0.010;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00138	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 2855 : 		tick_datum_bottom	  		= 0.875 - 0.075 - 0.010 - 0.045;

  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  00145	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0
$LN8@draw_headi:

; 2856 : 	}
; 2857 : 
; 2858 : 	//
; 2859 : 	// adjust 2D environment for heading scale clipping
; 2860 : 	//
; 2861 : 
; 2862 : 	if (draw_main_display)

  0014a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  00151	74 14		 je	 SHORT $LN9@draw_headi

; 2863 : 	{
; 2864 : 		get_2d_float_screen_x_coordinate (0.0, &u);

  00153	8d 45 c4	 lea	 eax, DWORD PTR _u$[ebp]
  00156	50		 push	 eax
  00157	51		 push	 ecx
  00158	0f 57 c0	 xorps	 xmm0, xmm0
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 2865 : 	}
; 2866 : 	else

  00165	eb 17		 jmp	 SHORT $LN10@draw_headi
$LN9@draw_headi:

; 2867 : 	{
; 2868 : 		get_2d_float_screen_x_coordinate (-0.4, &u);

  00167	8d 45 c4	 lea	 eax, DWORD PTR _u$[ebp]
  0016a	50		 push	 eax
  0016b	51		 push	 ecx
  0016c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate
$LN10@draw_headi:

; 2869 : 	}
; 2870 : 
; 2871 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  0017e	51		 push	 ecx
  0017f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  00191	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00199	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  001b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  001be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c2	51		 push	 ecx
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 2872 : 
; 2873 : 	mfd_vp_x_min = u - (mfd_viewport_size * (heading_width_ratio * 0.5));

  001d3	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  001d8	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001e0	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001e5	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001ed	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001f1	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001f5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f9	f3 0f 11 45 d0	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 2874 : 
; 2875 : 	mfd_vp_x_max = u + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  001fe	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  00203	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0020b	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00210	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  00218	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0021c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00220	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00228	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022c	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 2876 : 
; 2877 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  00231	51		 push	 ecx
  00232	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00258	51		 push	 ecx
  00259	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  0025e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2878 : 
; 2879 : 	//
; 2880 : 	// draw heading datum tick
; 2881 : 	//
; 2882 : 
; 2883 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  0026e	b8 04 00 00 00	 mov	 eax, 4
  00273	6b c8 00	 imul	 ecx, eax, 0
  00276	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0027c	52		 push	 edx
  0027d	51		 push	 ecx
  0027e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00288	51		 push	 ecx
  00289	0f 57 c0	 xorps	 xmm0, xmm0
  0028c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00291	51		 push	 ecx
  00292	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029c	51		 push	 ecx
  0029d	0f 57 c0	 xorps	 xmm0, xmm0
  002a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2884 : 
; 2885 : 	//
; 2886 : 	// draw command heading carat
; 2887 : 	//
; 2888 : 
; 2889 : 	if (draw_command_heading)

  002aa	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  002ae	0f 84 97 02 00
	00		 je	 $LN18@draw_headi

; 2890 : 	{
; 2891 : 		if (!kiowa_damage.navigation_computer)

  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  002b9	c1 e8 04	 shr	 eax, 4
  002bc	83 e0 01	 and	 eax, 1
  002bf	0f 85 86 02 00
	00		 jne	 $LN18@draw_headi

; 2892 : 		{
; 2893 : 			entity
; 2894 : 				*wp;
; 2895 : 
; 2896 : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  002c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  002d0	89 45 ac	 mov	 DWORD PTR _wp$7[ebp], eax

; 2897 : 
; 2898 : 			if (wp)

  002d3	83 7d ac 00	 cmp	 DWORD PTR _wp$7[ebp], 0
  002d7	0f 84 6e 02 00
	00		 je	 $LN18@draw_headi

; 2899 : 			{
; 2900 : 				vec3d
; 2901 : 					*gunship_position,
; 2902 : 					waypoint_position;
; 2903 : 
; 2904 : 				float
; 2905 : 					dx,
; 2906 : 					dz,
; 2907 : 					bearing,
; 2908 : 					command_heading;
; 2909 : 
; 2910 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  002dd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  002e4	74 0f		 je	 SHORT $LN30@draw_headi
  002e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ed	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], ecx
  002f3	eb 24		 jmp	 SHORT $LN31@draw_headi
$LN30@draw_headi:
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
  002fb	83 c2 78	 add	 edx, 120		; 00000078H
  002fe	52		 push	 edx
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0030f	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv155[ebp], 0
$LN31@draw_headi:
  00319	b9 01 00 00 00	 mov	 ecx, 1
  0031e	85 c9		 test	 ecx, ecx
  00320	74 0c		 je	 SHORT $LN32@draw_headi
  00322	c7 85 44 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv163[ebp], 8
  0032c	eb 24		 jmp	 SHORT $LN33@draw_headi
$LN32@draw_headi:
  0032e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
  00334	83 c2 78	 add	 edx, 120		; 00000078H
  00337	52		 push	 edx
  00338	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00348	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
$LN33@draw_headi:
  00352	6a 08		 push	 8
  00354	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0035a	51		 push	 ecx
  0035b	6b 95 48 ff ff
	ff 60		 imul	 edx, DWORD PTR tv155[ebp], 96
  00362	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv163[ebp]
  00368	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0036f	ff d1		 call	 ecx
  00371	89 45 a8	 mov	 DWORD PTR _gunship_position$6[ebp], eax

; 2911 : 
; 2912 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00374	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$5[ebp]
  00377	50		 push	 eax
  00378	8b 4d ac	 mov	 ecx, DWORD PTR _wp$7[ebp]
  0037b	51		 push	 ecx
  0037c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00382	52		 push	 edx
  00383	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 2913 : 
; 2914 : 				dx = waypoint_position.x - gunship_position->x;

  00388	8b 45 a8	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  0038b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp]
  00390	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00394	f3 0f 11 45 98	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 2915 : 				dz = waypoint_position.z - gunship_position->z;

  00399	8b 45 a8	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  0039c	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp+8]
  003a1	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  003a6	f3 0f 11 45 94	 movss	 DWORD PTR _dz$3[ebp], xmm0

; 2916 : 
; 2917 : 				bearing = atan2 (dx, dz);

  003ab	51		 push	 ecx
  003ac	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _dz$3[ebp]
  003b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b6	51		 push	 ecx
  003b7	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003c6	d9 5d 90	 fstp	 DWORD PTR _bearing$2[ebp]

; 2918 : 
; 2919 : 				command_heading = bearing - heading;

  003c9	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bearing$2[ebp]
  003ce	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  003d3	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 2920 : 
; 2921 : 				if (command_heading > rad (180.0))

  003d8	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003dd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  003e5	76 18		 jbe	 SHORT $LN14@draw_headi

; 2922 : 				{
; 2923 : 					command_heading -= rad (360.0);

  003e7	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003ec	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  003f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f8	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
  003fd	eb 29		 jmp	 SHORT $LN16@draw_headi
$LN14@draw_headi:

; 2924 : 				}
; 2925 : 				else if (command_heading < rad (-180.0))

  003ff	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00404	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  0040c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00410	76 16		 jbe	 SHORT $LN16@draw_headi

; 2926 : 				{
; 2927 : 					command_heading += rad (360.0);

  00412	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00417	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  0041f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00423	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
$LN16@draw_headi:

; 2928 : 				}
; 2929 : 
; 2930 : 				command_heading = bound (command_heading, rad (-90.0), rad (90.0));

  00428	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0042d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff921fb51000000
  00435	66 0f 2f c8	 comisd	 xmm1, xmm0
  00439	76 12		 jbe	 SHORT $LN36@draw_headi
  0043b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff921fb51000000
  00443	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv196[ebp], xmm0
  0044b	eb 3e		 jmp	 SHORT $LN37@draw_headi
$LN36@draw_headi:
  0044d	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00452	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff921fb51000000
  0045a	76 12		 jbe	 SHORT $LN34@draw_headi
  0045c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00464	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv195[ebp], xmm0
  0046c	eb 0d		 jmp	 SHORT $LN35@draw_headi
$LN34@draw_headi:
  0046e	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00473	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv195[ebp], xmm0
$LN35@draw_headi:
  0047b	f2 0f 10 85 3c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv195[ebp]
  00483	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv196[ebp], xmm0
$LN37@draw_headi:
  0048b	f2 0f 5a 85 44
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv196[ebp]
  00493	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 2931 : 
; 2932 : 				if (draw_large_mfd)

  00498	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049f	74 56		 je	 SHORT $LN17@draw_headi

; 2933 : 				{
; 2934 : 					draw_2d_mono_sprite (large_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio - 0.035) / rad (90.0))), tick_datum_top, MFD_COLOUR1);

  004a1	b8 04 00 00 00	 mov	 eax, 4
  004a6	6b c8 00	 imul	 ecx, eax, 0
  004a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004af	52		 push	 edx
  004b0	51		 push	 ecx
  004b1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  004b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bb	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  004c0	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  004c5	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fa1eb851eb851ec
  004cd	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3ff921fb51000000
  004d5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004d9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  004e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e5	51		 push	 ecx
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	68 00 00 00 00	 push	 OFFSET ?large_command_heading_carat@@3PADA
  004f0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2935 : 				}
; 2936 : 				else

  004f5	eb 54		 jmp	 SHORT $LN18@draw_headi
$LN17@draw_headi:

; 2937 : 				{
; 2938 : 					draw_2d_mono_sprite (small_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio - 0.050) / rad (90.0))), tick_datum_top, MFD_COLOUR1);

  004f7	b8 04 00 00 00	 mov	 eax, 4
  004fc	6b c8 00	 imul	 ecx, eax, 0
  004ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00505	52		 push	 edx
  00506	51		 push	 ecx
  00507	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  0050c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00511	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00516	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  0051b	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fa999999999999a
  00523	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3ff921fb51000000
  0052b	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0052f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  00537	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00541	68 00 00 00 00	 push	 OFFSET ?small_command_heading_carat@@3PADA
  00546	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN18@draw_headi:

; 2939 : 				}
; 2940 : 			}
; 2941 : 		}
; 2942 : 	}
; 2943 : 
; 2944 : 	//
; 2945 : 	// draw heading scale
; 2946 : 	//
; 2947 : 
; 2948 : 	heading_step_10 = deg (heading * 0.1);

  0054b	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00550	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00558	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  00560	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00564	f3 0f 11 45 c0	 movss	 DWORD PTR _heading_step_10$[ebp], xmm0

; 2949 : 
; 2950 : 	int_heading_step_10 = (int) heading_step_10;

  00569	f3 0f 2c 45 c0	 cvttss2si eax, DWORD PTR _heading_step_10$[ebp]
  0056e	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 2951 : 
; 2952 : 	mod_heading_step_10 = heading_step_10 - (float) int_heading_step_10;

  00571	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_10$[ebp]
  00576	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _heading_step_10$[ebp]
  0057b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0057f	f3 0f 11 4d bc	 movss	 DWORD PTR _mod_heading_step_10$[ebp], xmm1

; 2953 : 
; 2954 : 	int_heading_step_10 -= 10;

  00584	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00587	83 e8 0a	 sub	 eax, 10			; 0000000aH
  0058a	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 2955 : 
; 2956 : 	if (int_heading_step_10 < 0)

  0058d	79 09		 jns	 SHORT $LN19@draw_headi

; 2957 : 	{
; 2958 : 		int_heading_step_10 += 36;

  0058f	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00592	83 c0 24	 add	 eax, 36			; 00000024H
  00595	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN19@draw_headi:

; 2959 : 	}
; 2960 : 
; 2961 : 	// tick type:-
; 2962 : 	//
; 2963 : 	//		0 = long tick (30 degs)
; 2964 : 	//		1 = short tick (10 degs)
; 2965 : 	//		2 = short tick (20 degs)
; 2966 : 
; 2967 : 	tick_type = int_heading_step_10 % 3;

  00598	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0059b	99		 cdq
  0059c	b9 03 00 00 00	 mov	 ecx, 3
  005a1	f7 f9		 idiv	 ecx
  005a3	89 55 b0	 mov	 DWORD PTR _tick_type$[ebp], edx

; 2968 : 
; 2969 : 	x = - (10.0 + mod_heading_step_10) * heading_tick_x_spacing;

  005a6	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  005ab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  005b3	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005ba	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  005bf	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c7	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 2970 : 
; 2971 : 	for (loop = 0; loop <= 20; loop++)

  005cc	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  005d3	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  005d5	8b 45 b8	 mov	 eax, DWORD PTR _loop$[ebp]
  005d8	83 c0 01	 add	 eax, 1
  005db	89 45 b8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  005de	83 7d b8 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  005e2	0f 8f 4a 02 00
	00		 jg	 $LN3@draw_headi

; 2972 : 	{
; 2973 : 		if (tick_type == 0)

  005e8	83 7d b0 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  005ec	0f 85 92 01 00
	00		 jne	 $LN20@draw_headi

; 2974 : 		{
; 2975 : 			draw_2d_line (x, tick_30_deg_top, x, tick_30_deg_bottom, MFD_COLOUR1);

  005f2	b8 04 00 00 00	 mov	 eax, 4
  005f7	6b c8 00	 imul	 ecx, eax, 0
  005fa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00600	52		 push	 edx
  00601	51		 push	 ecx
  00602	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_30_deg_bottom$[ebp]
  00607	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060c	51		 push	 ecx
  0060d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	51		 push	 ecx
  00618	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  0061d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00622	51		 push	 ecx
  00623	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00628	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2976 : 
; 2977 : 			set_2d_mono_font_position (x, tick_30_deg_top);

  00632	51		 push	 ecx
  00633	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	51		 push	 ecx
  0063e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00643	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00648	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2978 : 
; 2979 : 			switch (int_heading_step_10)

  0064d	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00650	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  00656	83 bd 48 ff ff
	ff 1b		 cmp	 DWORD PTR tv255[ebp], 27 ; 0000001bH
  0065d	0f 87 ad 00 00
	00		 ja	 $LN26@draw_headi
  00663	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  00669	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN42@draw_headi[ecx]
  00670	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN43@draw_headi[edx*4]
$LN22@draw_headi:

; 2980 : 			{
; 2981 : 				////////////////////////////////////////
; 2982 : 				case 0:
; 2983 : 				////////////////////////////////////////
; 2984 : 				{
; 2985 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  00677	51		 push	 ecx
  00678	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0067d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00682	51		 push	 ecx
  00683	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00688	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2986 : 
; 2987 : 					print_mono_font_char ('N');

  00692	6a 4e		 push	 78			; 0000004eH
  00694	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 2988 : 
; 2989 : 					break;

  00699	e9 e4 00 00 00	 jmp	 $LN5@draw_headi
$LN23@draw_headi:

; 2990 : 				}
; 2991 : 				////////////////////////////////////////
; 2992 : 				case 9:
; 2993 : 				////////////////////////////////////////
; 2994 : 				{
; 2995 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  0069e	51		 push	 ecx
  0069f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a9	51		 push	 ecx
  006aa	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2996 : 
; 2997 : 					print_mono_font_char ('E');

  006b9	6a 45		 push	 69			; 00000045H
  006bb	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 2998 : 
; 2999 : 					break;

  006c0	e9 bd 00 00 00	 jmp	 $LN5@draw_headi
$LN24@draw_headi:

; 3000 : 				}
; 3001 : 				////////////////////////////////////////
; 3002 : 				case 18:
; 3003 : 				////////////////////////////////////////
; 3004 : 				{
; 3005 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  006c5	51		 push	 ecx
  006c6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d0	51		 push	 ecx
  006d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3006 : 
; 3007 : 					print_mono_font_char ('S');

  006e0	6a 53		 push	 83			; 00000053H
  006e2	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3008 : 
; 3009 : 					break;

  006e7	e9 96 00 00 00	 jmp	 $LN5@draw_headi
$LN25@draw_headi:

; 3010 : 				}
; 3011 : 				////////////////////////////////////////
; 3012 : 				case 27:
; 3013 : 				////////////////////////////////////////
; 3014 : 				{
; 3015 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  006ec	51		 push	 ecx
  006ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f7	51		 push	 ecx
  006f8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00702	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3016 : 
; 3017 : 					print_mono_font_char ('W');

  00707	6a 57		 push	 87			; 00000057H
  00709	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3018 : 
; 3019 : 					break;

  0070e	eb 72		 jmp	 SHORT $LN5@draw_headi
$LN26@draw_headi:

; 3020 : 				}
; 3021 : 				////////////////////////////////////////
; 3022 : 				default:
; 3023 : 				////////////////////////////////////////
; 3024 : 				{
; 3025 : 					if (int_heading_step_10 < 10)

  00710	83 7d b4 0a	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 10 ; 0000000aH
  00714	7d 29		 jge	 SHORT $LN27@draw_headi

; 3026 : 					{
; 3027 : 						set_mono_font_rel_position (x_adjust_single, y_adjust);

  00716	51		 push	 ecx
  00717	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0071c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00721	51		 push	 ecx
  00722	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00727	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3028 : 
; 3029 : 						print_mono_font_char ('0' + int_heading_step_10);

  00731	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00734	83 c0 30	 add	 eax, 48			; 00000030H
  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3030 : 					}
; 3031 : 					else

  0073d	eb 43		 jmp	 SHORT $LN28@draw_headi
$LN27@draw_headi:

; 3032 : 					{
; 3033 : 						set_mono_font_rel_position (x_adjust_double, y_adjust);

  0073f	51		 push	 ecx
  00740	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00745	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074a	51		 push	 ecx
  0074b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_adjust_double$[ebp]
  00750	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00755	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3034 : 
; 3035 : 						print_mono_font_char ('0' + int_heading_step_10 / 10);

  0075a	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0075d	99		 cdq
  0075e	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00763	f7 f9		 idiv	 ecx
  00765	83 c0 30	 add	 eax, 48			; 00000030H
  00768	50		 push	 eax
  00769	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3036 : 
; 3037 : 						print_mono_font_char ('0' + int_heading_step_10 % 10);

  0076e	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00771	99		 cdq
  00772	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00777	f7 f9		 idiv	 ecx
  00779	83 c2 30	 add	 edx, 48			; 00000030H
  0077c	52		 push	 edx
  0077d	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN28@draw_headi:
$LN5@draw_headi:

; 3038 : 					}
; 3039 : 
; 3040 : 					break;
; 3041 : 				}
; 3042 : 			}
; 3043 : 		}
; 3044 : 		else

  00782	eb 40		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:

; 3045 : 		{
; 3046 : 			draw_2d_line (x, tick_10_deg_top, x, tick_10_deg_bottom, MFD_COLOUR1);

  00784	b8 04 00 00 00	 mov	 eax, 4
  00789	6b c8 00	 imul	 ecx, eax, 0
  0078c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00792	52		 push	 edx
  00793	51		 push	 ecx
  00794	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_10_deg_bottom$[ebp]
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	51		 push	 ecx
  0079f	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  007a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a9	51		 push	 ecx
  007aa	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_10_deg_top$[ebp]
  007af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b4	51		 push	 ecx
  007b5	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  007ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN21@draw_headi:

; 3047 : 		}
; 3048 : 
; 3049 : 		int_heading_step_10 = (++int_heading_step_10 == 36) ? 0 : int_heading_step_10;

  007c4	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  007c7	83 c0 01	 add	 eax, 1
  007ca	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
  007cd	83 7d b4 24	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 36 ; 00000024H
  007d1	75 0c		 jne	 SHORT $LN38@draw_headi
  007d3	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv326[ebp], 0
  007dd	eb 09		 jmp	 SHORT $LN39@draw_headi
$LN38@draw_headi:
  007df	8b 4d b4	 mov	 ecx, DWORD PTR _int_heading_step_10$[ebp]
  007e2	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv326[ebp], ecx
$LN39@draw_headi:
  007e8	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv326[ebp]
  007ee	89 55 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], edx

; 3050 : 
; 3051 : 		tick_type = (++tick_type == 3) ? 0 : tick_type;

  007f1	8b 45 b0	 mov	 eax, DWORD PTR _tick_type$[ebp]
  007f4	83 c0 01	 add	 eax, 1
  007f7	89 45 b0	 mov	 DWORD PTR _tick_type$[ebp], eax
  007fa	83 7d b0 03	 cmp	 DWORD PTR _tick_type$[ebp], 3
  007fe	75 0c		 jne	 SHORT $LN40@draw_headi
  00800	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], 0
  0080a	eb 09		 jmp	 SHORT $LN41@draw_headi
$LN40@draw_headi:
  0080c	8b 4d b0	 mov	 ecx, DWORD PTR _tick_type$[ebp]
  0080f	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv329[ebp], ecx
$LN41@draw_headi:
  00815	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv329[ebp]
  0081b	89 55 b0	 mov	 DWORD PTR _tick_type$[ebp], edx

; 3052 : 
; 3053 : 		x += heading_tick_x_spacing;

  0081e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00823	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00828	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 3054 : 	}

  0082d	e9 a3 fd ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 3055 : 
; 3056 : 	//
; 3057 : 	// restore 2D environment
; 3058 : 	//
; 3059 : 
; 3060 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00832	51		 push	 ecx
  00833	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0083b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00840	51		 push	 ecx
  00841	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00849	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084e	51		 push	 ecx
  0084f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00857	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085c	51		 push	 ecx
  0085d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0086f	50		 push	 eax
  00870	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 3061 : 
; 3062 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00875	51		 push	 ecx
  00876	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0087e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00883	51		 push	 ecx
  00884	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0088c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00891	51		 push	 ecx
  00892	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0089a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089f	51		 push	 ecx
  008a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008b2	50		 push	 eax
  008b3	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3063 : }

  008b8	5f		 pop	 edi
  008b9	5e		 pop	 esi
  008ba	5b		 pop	 ebx
  008bb	8b e5		 mov	 esp, ebp
  008bd	5d		 pop	 ebp
  008be	c2 08 00	 ret	 8
  008c1	0f 1f 00	 npad	 3
$LN43@draw_headi:
  008c4	00 00 00 00	 DD	 $LN22@draw_headi
  008c8	00 00 00 00	 DD	 $LN23@draw_headi
  008cc	00 00 00 00	 DD	 $LN24@draw_headi
  008d0	00 00 00 00	 DD	 $LN25@draw_headi
  008d4	00 00 00 00	 DD	 $LN26@draw_headi
$LN42@draw_headi:
  008d8	00		 DB	 0
  008d9	04		 DB	 4
  008da	04		 DB	 4
  008db	04		 DB	 4
  008dc	04		 DB	 4
  008dd	04		 DB	 4
  008de	04		 DB	 4
  008df	04		 DB	 4
  008e0	04		 DB	 4
  008e1	01		 DB	 1
  008e2	04		 DB	 4
  008e3	04		 DB	 4
  008e4	04		 DB	 4
  008e5	04		 DB	 4
  008e6	04		 DB	 4
  008e7	04		 DB	 4
  008e8	04		 DB	 4
  008e9	04		 DB	 4
  008ea	02		 DB	 2
  008eb	04		 DB	 4
  008ec	04		 DB	 4
  008ed	04		 DB	 4
  008ee	04		 DB	 4
  008ef	04		 DB	 4
  008f0	04		 DB	 4
  008f1	04		 DB	 4
  008f2	04		 DB	 4
  008f3	03		 DB	 3
?draw_heading_scale_tsd@@YGXMH@Z ENDP			; draw_heading_scale_tsd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_2d_dtv_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_dtv_mfd@@YGXH@Z PROC				; draw_2d_dtv_mfd, COMDAT

; 2775 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2776 : 	draw_2d_eo_display (&kiowa_dtv, TARGET_ACQUISITION_SYSTEM_DTV, kiowa_damage.dtv, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00013	d1 e9		 shr	 ecx, 1
  00015	83 e1 01	 and	 ecx, 1
  00018	51		 push	 ecx
  00019	6a 04		 push	 4
  0001b	68 00 00 00 00	 push	 OFFSET ?kiowa_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_dtv
  00020	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 2777 : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?draw_2d_dtv_mfd@@YGXH@Z ENDP				; draw_2d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_3d_dtv_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_dtv_mfd@@YGXH@Z PROC				; draw_3d_dtv_mfd, COMDAT

; 2756 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2757 : 	if (!kiowa_damage.dtv)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0000e	d1 e8		 shr	 eax, 1
  00010	83 e0 01	 and	 eax, 1
  00013	75 20		 jne	 SHORT $LN1@draw_3d_dt

; 2758 : 	{
; 2759 : 		if (full_screen)

  00015	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  00019	74 0e		 je	 SHORT $LN3@draw_3d_dt

; 2760 : 		{
; 2761 : 			draw_full_screen_3d_eo_display (&kiowa_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  0001b	6a 04		 push	 4
  0001d	68 00 00 00 00	 push	 OFFSET ?kiowa_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_dtv
  00022	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 2762 : 		}
; 2763 : 		else

  00027	eb 0c		 jmp	 SHORT $LN1@draw_3d_dt
$LN3@draw_3d_dt:

; 2764 : 		{
; 2765 : 			draw_3d_eo_display (&kiowa_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  00029	6a 04		 push	 4
  0002b	68 00 00 00 00	 push	 OFFSET ?kiowa_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_dtv
  00030	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dt:

; 2766 : 		}
; 2767 : 	}
; 2768 : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?draw_3d_dtv_mfd@@YGXH@Z ENDP				; draw_3d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_flir_mfd@@YGXH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 2741 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2742 : 	draw_2d_eo_display (&kiowa_flir, TARGET_ACQUISITION_SYSTEM_FLIR, kiowa_damage.flir, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00013	83 e1 01	 and	 ecx, 1
  00016	51		 push	 ecx
  00017	6a 03		 push	 3
  00019	68 00 00 00 00	 push	 OFFSET ?kiowa_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_flir
  0001e	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 2743 : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?draw_2d_flir_mfd@@YGXH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_flir_mfd@@YGXH@Z PROC				; draw_3d_flir_mfd, COMDAT

; 2722 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2723 : 	if (!kiowa_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0000e	83 e0 01	 and	 eax, 1
  00011	75 20		 jne	 SHORT $LN1@draw_3d_fl

; 2724 : 	{
; 2725 : 		if (full_screen)

  00013	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  00017	74 0e		 je	 SHORT $LN3@draw_3d_fl

; 2726 : 		{
; 2727 : 			draw_full_screen_3d_eo_display (&kiowa_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00019	6a 03		 push	 3
  0001b	68 00 00 00 00	 push	 OFFSET ?kiowa_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_flir
  00020	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 2728 : 		}
; 2729 : 		else

  00025	eb 0c		 jmp	 SHORT $LN1@draw_3d_fl
$LN3@draw_3d_fl:

; 2730 : 		{
; 2731 : 			draw_3d_eo_display (&kiowa_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00027	6a 03		 push	 3
  00029	68 00 00 00 00	 push	 OFFSET ?kiowa_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; kiowa_flir
  0002e	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 2732 : 		}
; 2733 : 	}
; 2734 : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXH@Z ENDP				; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z
_TEXT	SEGMENT
tv474 = -432						; size = 4
tv467 = -428						; size = 4
tv908 = -424						; size = 8
tv456 = -424						; size = 4
tv268 = -424						; size = 4
tv249 = -424						; size = 4
tv158 = -424						; size = 4
tv137 = -424						; size = 4
tv85 = -424						; size = 4
tv1189 = -420						; size = 4
tv1182 = -420						; size = 4
tv1138 = -420						; size = 4
tv985 = -420						; size = 4
tv449 = -420						; size = 4
tv261 = -420						; size = 4
tv241 = -420						; size = 4
tv176 = -420						; size = 4
tv150 = -420						; size = 4
tv129 = -420						; size = 4
tv77 = -420						; size = 4
tv537 = -417						; size = 1
$T1 = -416						; size = 4
$T2 = -412						; size = 4
_target_velocity$3 = -344				; size = 4
_range_char$4 = -337					; size = 1
_x_adjust$5 = -336					; size = 4
_tracking_point$6 = -332				; size = 4
_altitude$7 = -328					; size = 4
_speed$8 = -324						; size = 4
_level$9 = -320						; size = 4
_range_finder$ = -316					; size = 4
_visibility$ = -312					; size = 4
_tmp$ = -308						; size = 48
_target_point$ = -260					; size = 12
_target_position$ = -248				; size = 4
_source_position$ = -244				; size = 4
_target$ = -240						; size = 4
_source$ = -236						; size = 4
_y$ = -232						; size = 4
_x$ = -228						; size = 4
_j$ = -224						; size = 4
_i$ = -220						; size = 4
_y_adjust$ = -216					; size = 4
_target_range$ = -212					; size = 4
_width$ = -208						; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z PROC ; draw_2d_eo_display, COMDAT

; 2250 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 01 00
	00		 sub	 esp, 432		; 000001b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2251 : 	const char
; 2252 : 		*s;
; 2253 : 	char
; 2254 : 		buffer[200];
; 2255 : 
; 2256 : 	float
; 2257 : 		width,
; 2258 : 		target_range = get_range_to_target(),

  0000c	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  00011	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]

; 2259 : 		y_adjust,
; 2260 : 		i,
; 2261 : 		j,
; 2262 : 		x,
; 2263 : 		y;
; 2264 : 
; 2265 : 	entity
; 2266 : 		*source,
; 2267 : 		*target;
; 2268 : 
; 2269 : 	vec3d
; 2270 : 		*source_position,
; 2271 : 		*target_position,
; 2272 : 		target_point;
; 2273 : 
; 2274 : 	viewpoint
; 2275 : 		tmp;
; 2276 : 
; 2277 : 	object_3d_visibility
; 2278 : 		visibility;
; 2279 : 
; 2280 : 	rangefinding_system
; 2281 : 		range_finder = get_range_finder();

  00017	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  0001c	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _range_finder$[ebp], eax

; 2282 : 
; 2283 : 	ASSERT (eo);

  00022	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00026	75 18		 jne	 SHORT $LN4@draw_2d_eo
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0002d	83 c0 21	 add	 eax, 33			; 00000021H
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  0003b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_2d_eo:

; 2284 : 
; 2285 : 	source = get_gunship_entity ();

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00045	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 2286 : 
; 2287 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  0004b	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00052	74 10		 je	 SHORT $LN53@draw_2d_eo
  00054	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  00062	eb 24		 jmp	 SHORT $LN54@draw_2d_eo
$LN53@draw_2d_eo:
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0006a	83 c2 25	 add	 edx, 37			; 00000025H
  0006d	52		 push	 edx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007e	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN54@draw_2d_eo:
  00088	b9 01 00 00 00	 mov	 ecx, 1
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 0c		 je	 SHORT $LN55@draw_2d_eo
  00091	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  0009b	eb 24		 jmp	 SHORT $LN56@draw_2d_eo
$LN55@draw_2d_eo:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  000a3	83 c2 25	 add	 edx, 37			; 00000025H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN56@draw_2d_eo:
  000c1	6a 08		 push	 8
  000c3	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000c9	51		 push	 ecx
  000ca	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000d1	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000d7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000de	ff d1		 call	 ecx
  000e0	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 2288 : 
; 2289 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000e6	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000ed	74 10		 je	 SHORT $LN57@draw_2d_eo
  000ef	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
  000fd	eb 24		 jmp	 SHORT $LN58@draw_2d_eo
$LN57@draw_2d_eo:
  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00105	83 c2 27	 add	 edx, 39			; 00000027H
  00108	52		 push	 edx
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00119	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN58@draw_2d_eo:
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	85 c9		 test	 ecx, ecx
  0012a	74 0c		 je	 SHORT $LN59@draw_2d_eo
  0012c	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv137[ebp], 38 ; 00000026H
  00136	eb 24		 jmp	 SHORT $LN60@draw_2d_eo
$LN59@draw_2d_eo:
  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0013e	83 c2 27	 add	 edx, 39			; 00000027H
  00141	52		 push	 edx
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00152	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN60@draw_2d_eo:
  0015c	6a 26		 push	 38			; 00000026H
  0015e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00164	51		 push	 ecx
  00165	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv129[ebp], 180
  0016f	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00175	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0017c	ff d1		 call	 ecx
  0017e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 2290 : 
; 2291 : 	if (target)

  00184	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  0018b	0f 84 9d 00 00
	00		 je	 $LN5@draw_2d_eo

; 2292 : 		target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00191	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00198	74 10		 je	 SHORT $LN61@draw_2d_eo
  0019a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  001a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a2	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  001a8	eb 24		 jmp	 SHORT $LN62@draw_2d_eo
$LN61@draw_2d_eo:
  001aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  001b0	83 c2 2a	 add	 edx, 42			; 0000002aH
  001b3	52		 push	 edx
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c4	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN62@draw_2d_eo:
  001ce	b9 01 00 00 00	 mov	 ecx, 1
  001d3	85 c9		 test	 ecx, ecx
  001d5	74 0c		 je	 SHORT $LN63@draw_2d_eo
  001d7	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  001e1	eb 24		 jmp	 SHORT $LN64@draw_2d_eo
$LN63@draw_2d_eo:
  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  001e9	83 c2 2a	 add	 edx, 42			; 0000002aH
  001ec	52		 push	 edx
  001ed	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001fd	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN64@draw_2d_eo:
  00207	6a 08		 push	 8
  00209	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  0020f	51		 push	 ecx
  00210	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  00217	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  0021d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00224	ff d1		 call	 ecx
  00226	89 85 08 ff ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax

; 2293 : 	else

  0022c	eb 0b		 jmp	 SHORT $LN6@draw_2d_eo
$LN5@draw_2d_eo:

; 2294 : 		target_position = get_eo_tracking_point();

  0022e	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  00233	89 85 08 ff ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax
$LN6@draw_2d_eo:

; 2295 : 
; 2296 : 	////////////////////////////////////////
; 2297 : 	//
; 2298 : 	// text
; 2299 : 	//
; 2300 : 	////////////////////////////////////////
; 2301 : 
; 2302 : 	set_mono_font_colour (MFD_COLOUR1);

  00239	b8 04 00 00 00	 mov	 eax, 4
  0023e	6b c8 00	 imul	 ecx, eax, 0
  00241	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00247	52		 push	 edx
  00248	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2303 : 
; 2304 : 	if (draw_large_mfd)

  0024d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00254	74 09		 je	 SHORT $LN7@draw_2d_eo

; 2305 : 	{
; 2306 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00256	6a 05		 push	 5
  00258	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2307 : 	}
; 2308 : 	else

  0025d	eb 07		 jmp	 SHORT $LN8@draw_2d_eo
$LN7@draw_2d_eo:

; 2309 : 	{
; 2310 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0025f	6a 01		 push	 1
  00261	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN8@draw_2d_eo:

; 2311 : 	}
; 2312 : 
; 2313 : 	//
; 2314 : 	// sensor type
; 2315 : 	//
; 2316 : 
; 2317 : 	if (draw_large_mfd)

  00266	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0026d	74 12		 je	 SHORT $LN9@draw_2d_eo

; 2318 : 	{
; 2319 : 		y_adjust = 5.0;

  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00277	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2320 : 	}
; 2321 : 	else

  0027f	eb 10		 jmp	 SHORT $LN10@draw_2d_eo
$LN9@draw_2d_eo:

; 2322 : 	{
; 2323 : 		y_adjust = 2.0;

  00281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00289	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_2d_eo:

; 2324 : 	}
; 2325 : 
; 2326 : 	set_2d_mono_font_position (-1.0, 1.0);

  00291	51		 push	 ecx
  00292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	51		 push	 ecx
  002a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2327 : 
; 2328 : 	set_mono_font_rel_position (1.0, y_adjust);

  002b2	51		 push	 ecx
  002b3	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2329 : 
; 2330 : 	switch (system)

  002d3	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  002d6	89 85 5c fe ff
	ff		 mov	 DWORD PTR tv176[ebp], eax
  002dc	83 bd 5c fe ff
	ff 03		 cmp	 DWORD PTR tv176[ebp], 3
  002e3	74 0b		 je	 SHORT $LN11@draw_2d_eo
  002e5	83 bd 5c fe ff
	ff 04		 cmp	 DWORD PTR tv176[ebp], 4
  002ec	74 0e		 je	 SHORT $LN12@draw_2d_eo
  002ee	eb 18		 jmp	 SHORT $LN13@draw_2d_eo
$LN11@draw_2d_eo:

; 2331 : 	{
; 2332 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2333 : 		{
; 2334 : 			print_mono_font_string ("FLIR");

  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  002f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2335 : 
; 2336 : 			break;

  002fa	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN12@draw_2d_eo:

; 2337 : 		}
; 2338 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2339 : 		{
; 2340 : 			print_mono_font_string ("DTV");

  002fc	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  00301	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2341 : 
; 2342 : 			break;

  00306	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 2343 : 		}
; 2344 : 		default:
; 2345 : 		{
; 2346 : 			print_mono_font_string ("XXX");

  00308	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  0030d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 2347 : 
; 2348 : 			break;
; 2349 : 		}
; 2350 : 	}
; 2351 : 
; 2352 : 	//
; 2353 : 	// damaged
; 2354 : 	//
; 2355 : 
; 2356 : 	if (damaged)

  00312	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00316	0f 84 9d 00 00
	00		 je	 $LN14@draw_2d_eo

; 2357 : 	{
; 2358 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  0031c	b8 04 00 00 00	 mov	 eax, 4
  00321	6b c8 00	 imul	 ecx, eax, 0
  00324	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0032a	52		 push	 edx
  0032b	51		 push	 ecx
  0032c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00339	51		 push	 ecx
  0033a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00347	51		 push	 ecx
  00348	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2359 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 00	 imul	 ecx, eax, 0
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	52		 push	 edx
  00377	51		 push	 ecx
  00378	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	51		 push	 ecx
  00386	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	51		 push	 ecx
  00394	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0039c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a1	51		 push	 ecx
  003a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2360 : 
; 2361 : 		return;

  003b4	e9 e7 12 00 00	 jmp	 $LN1@draw_2d_eo
$LN14@draw_2d_eo:

; 2362 : 	}
; 2363 : 
; 2364 : 	if (eo_low_light)

  003b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  003c0	0f 84 8c 00 00
	00		 je	 $LN19@draw_2d_eo

; 2365 : 	{
; 2366 : 		if (draw_large_mfd)

  003c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003cd	74 12		 je	 SHORT $LN16@draw_2d_eo

; 2367 : 		{
; 2368 : 			y_adjust = 18.0;

  003cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  003d7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2369 : 		}
; 2370 : 		else

  003df	eb 10		 jmp	 SHORT $LN17@draw_2d_eo
$LN16@draw_2d_eo:

; 2371 : 		{
; 2372 : 			y_adjust = 9.0;

  003e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  003e9	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN17@draw_2d_eo:

; 2373 : 		}
; 2374 : 
; 2375 : 		set_2d_mono_font_position (-1.0, 1.0);

  003f1	51		 push	 ecx
  003f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	51		 push	 ecx
  00400	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2376 : 
; 2377 : 		set_mono_font_rel_position (1.0, y_adjust);

  00412	51		 push	 ecx
  00413	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0041b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00420	51		 push	 ecx
  00421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2378 : 
; 2379 : 		if (draw_large_mfd)

  00433	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0043a	74 0c		 je	 SHORT $LN18@draw_2d_eo

; 2380 : 		{
; 2381 : 			print_mono_font_string ("LO LIGHT");

  0043c	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  00441	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2382 : 		}
; 2383 : 		else

  00446	eb 0a		 jmp	 SHORT $LN19@draw_2d_eo
$LN18@draw_2d_eo:

; 2384 : 		{
; 2385 : 			print_mono_font_string ("LO");

  00448	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  0044d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@draw_2d_eo:

; 2386 : 		}
; 2387 : 	}
; 2388 : 
; 2389 : 	//
; 2390 : 	// field of view
; 2391 : 	//
; 2392 : 
; 2393 : #ifdef OLD_EO
; 2394 : 	switch (eo->field_of_view)
; 2395 : 	{
; 2396 : 		case EO_FOV_NARROW:
; 2397 : 		{
; 2398 : 			if (draw_large_mfd)
; 2399 : 			{
; 2400 : 				s = "NARROW";
; 2401 : 			}
; 2402 : 			else
; 2403 : 			{
; 2404 : 				s = "NAR";
; 2405 : 			}
; 2406 : 
; 2407 : 			break;
; 2408 : 		}
; 2409 : 		case EO_FOV_MEDIUM:
; 2410 : 		{
; 2411 : 			if (draw_large_mfd)
; 2412 : 			{
; 2413 : 				s = "MEDIUM";
; 2414 : 			}
; 2415 : 			else
; 2416 : 			{
; 2417 : 				s = "MED";
; 2418 : 			}
; 2419 : 
; 2420 : 			break;
; 2421 : 		}
; 2422 : 		case EO_FOV_WIDE:
; 2423 : 		{
; 2424 : 			s = "WIDE";
; 2425 : 
; 2426 : 			break;
; 2427 : 		}
; 2428 : 		default:
; 2429 : 		{
; 2430 : 			s = "XXX";
; 2431 : 
; 2432 : 			break;
; 2433 : 		}
; 2434 : 	}
; 2435 : #else
; 2436 : 	{
; 2437 : 		float level = 1.0 / convert_linear_view_value (eo);

  00452	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  0045b	dd 9d 58 fe ff
	ff		 fstp	 QWORD PTR tv908[ebp]
  00461	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00469	f2 0f 5e 85 58
	fe ff ff	 divsd	 xmm0, QWORD PTR tv908[ebp]
  00471	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00475	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _level$9[ebp], xmm0

; 2438 : 
; 2439 : 		if (level < 10)

  0047d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00485	0f 2f 85 c0 fe
	ff ff		 comiss	 xmm0, DWORD PTR _level$9[ebp]
  0048c	76 26		 jbe	 SHORT $LN20@draw_2d_eo

; 2440 : 		{
; 2441 : 			sprintf (buffer, "%.1f", level);

  0048e	f3 0f 5a 85 c0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _level$9[ebp]
  00496	83 ec 08	 sub	 esp, 8
  00499	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0049e	68 00 00 00 00	 push	 OFFSET ??_C@_04GGBPDDBN@?$CF?41f@
  004a3	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004a9	50		 push	 eax
  004aa	e8 00 00 00 00	 call	 _sprintf
  004af	83 c4 10	 add	 esp, 16			; 00000010H

; 2442 : 		}
; 2443 : 		else

  004b2	eb 1d		 jmp	 SHORT $LN21@draw_2d_eo
$LN20@draw_2d_eo:

; 2444 : 		{
; 2445 : 			sprintf (buffer, "%d", (int)level);

  004b4	f3 0f 2c 85 c0
	fe ff ff	 cvttss2si eax, DWORD PTR _level$9[ebp]
  004bc	50		 push	 eax
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  004c2	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  004c8	51		 push	 ecx
  004c9	e8 00 00 00 00	 call	 _sprintf
  004ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@draw_2d_eo:

; 2446 : 		}
; 2447 : 
; 2448 : 		s = buffer;

  004d1	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004d7	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2449 : 	}
; 2450 : #endif
; 2451 : 
; 2452 : 	width = get_mono_font_string_width (s);

  004da	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004dd	50		 push	 eax
  004de	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004e3	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2453 : 
; 2454 : 	if (draw_large_mfd)

  004e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004f0	74 2e		 je	 SHORT $LN22@draw_2d_eo

; 2455 : 	{
; 2456 : 		width += 2.0;

  004f2	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  004fa	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00502	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00506	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2457 : 
; 2458 : 		y_adjust = 5.0;

  0050e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00516	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2459 : 	}
; 2460 : 	else

  0051e	eb 2c		 jmp	 SHORT $LN23@draw_2d_eo
$LN22@draw_2d_eo:

; 2461 : 	{
; 2462 : 		width += 1.0;

  00520	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  00528	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00534	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2463 : 
; 2464 : 		y_adjust = 2.0;

  0053c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00544	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN23@draw_2d_eo:

; 2465 : 	}
; 2466 : 
; 2467 : 	set_2d_mono_font_position (1.0, 1.0);

  0054c	51		 push	 ecx
  0054d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00555	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055a	51		 push	 ecx
  0055b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2468 : 
; 2469 : 	set_mono_font_rel_position (-width, y_adjust);

  0056d	51		 push	 ecx
  0056e	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00583	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0058a	51		 push	 ecx
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2470 : 
; 2471 : 	print_mono_font_string (s);

  00595	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00598	50		 push	 eax
  00599	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2472 : 
; 2473 : 
; 2474 : // Jabberwock 031107 Designated targets
; 2475 : 
; 2476 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  0059e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  005a5	74 0f		 je	 SHORT $LN65@draw_2d_eo
  005a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  005ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  005ae	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  005b4	eb 27		 jmp	 SHORT $LN66@draw_2d_eo
$LN65@draw_2d_eo:
  005b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  005bc	81 c2 e2 00 00
	00		 add	 edx, 226		; 000000e2H
  005c2	52		 push	 edx
  005c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  005c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d3	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv241[ebp], 0
$LN66@draw_2d_eo:
  005dd	b9 01 00 00 00	 mov	 ecx, 1
  005e2	85 c9		 test	 ecx, ecx
  005e4	74 0c		 je	 SHORT $LN67@draw_2d_eo
  005e6	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv249[ebp], 38 ; 00000026H
  005f0	eb 27		 jmp	 SHORT $LN68@draw_2d_eo
$LN67@draw_2d_eo:
  005f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  005f8	81 c2 e2 00 00
	00		 add	 edx, 226		; 000000e2H
  005fe	52		 push	 edx
  005ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00604	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00609	50		 push	 eax
  0060a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0060f	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv249[ebp], 0
$LN68@draw_2d_eo:
  00619	6a 26		 push	 38			; 00000026H
  0061b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00621	51		 push	 ecx
  00622	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv241[ebp], 180
  0062c	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv249[ebp]
  00632	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00639	ff d1		 call	 ecx
  0063b	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 2477 : 
; 2478 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00641	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00648	0f 84 36 01 00
	00		 je	 $LN24@draw_2d_eo
  0064e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00655	74 10		 je	 SHORT $LN69@draw_2d_eo
  00657	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  0065d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0065f	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv261[ebp], ecx
  00665	eb 20		 jmp	 SHORT $LN70@draw_2d_eo
$LN69@draw_2d_eo:
  00667	68 ae 09 00 00	 push	 2478			; 000009aeH
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00671	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00677	52		 push	 edx
  00678	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0067d	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv261[ebp], 0
$LN70@draw_2d_eo:
  00687	b8 01 00 00 00	 mov	 eax, 1
  0068c	85 c0		 test	 eax, eax
  0068e	74 0c		 je	 SHORT $LN71@draw_2d_eo
  00690	c7 85 58 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv268[ebp], 10 ; 0000000aH
  0069a	eb 20		 jmp	 SHORT $LN72@draw_2d_eo
$LN71@draw_2d_eo:
  0069c	68 ae 09 00 00	 push	 2478			; 000009aeH
  006a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  006ac	51		 push	 ecx
  006ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006b2	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv268[ebp], 0
$LN72@draw_2d_eo:
  006bc	6a 0a		 push	 10			; 0000000aH
  006be	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  006c4	52		 push	 edx
  006c5	69 85 5c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv261[ebp], 180
  006cf	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv268[ebp]
  006d5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  006dc	ff d2		 call	 edx
  006de	85 c0		 test	 eax, eax
  006e0	0f 84 9e 00 00
	00		 je	 $LN24@draw_2d_eo

; 2479 : 	{
; 2480 : 		if (draw_large_mfd)

  006e6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  006ed	74 12		 je	 SHORT $LN25@draw_2d_eo

; 2481 : 		{
; 2482 : 			y_adjust = -25.0;

  006ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  006f7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2483 : 		}
; 2484 : 		else

  006ff	eb 10		 jmp	 SHORT $LN26@draw_2d_eo
$LN25@draw_2d_eo:

; 2485 : 		{
; 2486 : 			y_adjust = -12.0;

  00701	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00709	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN26@draw_2d_eo:

; 2487 : 		}
; 2488 : 
; 2489 : 		width = get_mono_font_string_width ("MARKED");

  00711	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00716	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0071b	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2490 : 
; 2491 : 		set_2d_mono_font_position (1.0, -1.0);

  00721	51		 push	 ecx
  00722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	51		 push	 ecx
  00730	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2492 : 
; 2493 : 		set_mono_font_rel_position (-width-1.0, y_adjust);

  00742	51		 push	 ecx
  00743	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0074b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00750	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00758	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0075f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00763	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0076b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0076f	51		 push	 ecx
  00770	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00775	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2494 : 
; 2495 : 		print_mono_font_string ("MARKED");

  0077a	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0077f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN24@draw_2d_eo:

; 2496 : 	}
; 2497 : // Jabberwock 031107 ends
; 2498 : 
; 2499 : 	//
; 2500 : 	// 030418 loke
; 2501 : 	// draw an indication if ground stablisation is enabled
; 2502 : 	//
; 2503 : 
; 2504 : 	if (eo_ground_stabilised)

  00784	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  0078b	0f 84 8e 00 00
	00		 je	 $LN27@draw_2d_eo

; 2505 : 	{
; 2506 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  00791	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00798	74 12		 je	 SHORT $LN28@draw_2d_eo

; 2507 : 		{
; 2508 : 			y_adjust = -38.0;

  0079a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  007a2	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2509 : 		}
; 2510 : 		else

  007aa	eb 10		 jmp	 SHORT $LN29@draw_2d_eo
$LN28@draw_2d_eo:

; 2511 : 		{
; 2512 : 			y_adjust = -19.0;

  007ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  007b4	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN29@draw_2d_eo:

; 2513 : 		}
; 2514 : 
; 2515 : 		width = get_mono_font_string_width ("S");

  007bc	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  007c1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007c6	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2516 : 
; 2517 : 		set_2d_mono_font_position (1.0, -1.0);

  007cc	51		 push	 ecx
  007cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007da	51		 push	 ecx
  007db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2518 : 
; 2519 : 		set_mono_font_rel_position (-width, y_adjust);

  007ed	51		 push	 ecx
  007ee	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  007f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fb	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00803	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0080a	51		 push	 ecx
  0080b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00810	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2520 : 
; 2521 : 		print_mono_font_string ("S");

  00815	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  0081a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN27@draw_2d_eo:

; 2522 : 	}
; 2523 : 
; 2524 : 	////////////////////////////////////////
; 2525 : 	//
; 2526 : 	// draw heading scale
; 2527 : 	//
; 2528 : 	////////////////////////////////////////
; 2529 : 
; 2530 : 	draw_heading_scale (get_heading_from_attitude_matrix (eo_vp.attitude), FALSE);

  0081f	6a 00		 push	 0
  00821	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00826	d1 e0		 shl	 eax, 1
  00828	b9 04 00 00 00	 mov	 ecx, 4
  0082d	d1 e1		 shl	 ecx, 1
  0082f	51		 push	 ecx
  00830	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00843	d1 e2		 shl	 edx, 1
  00845	b8 04 00 00 00	 mov	 eax, 4
  0084a	6b c8 00	 imul	 ecx, eax, 0
  0084d	51		 push	 ecx
  0084e	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  00857	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085c	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00861	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv985[ebp]
  00867	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv985[ebp]
  0086f	51		 push	 ecx
  00870	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00875	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 2531 : 
; 2532 : 	// draw speed and altitude
; 2533 : 
; 2534 : 	{
; 2535 : 		float
; 2536 : 			speed = knots(current_flight_dynamics->velocity_z.value),

  0087a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0087f	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00887	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  0088f	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _speed$8[ebp], xmm0

; 2537 : 			altitude = min(feet(current_flight_dynamics->radar_altitude.value), 500.0f);

  00897	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  0089f	f3 0f 11 85 64
	fe ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  008a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  008ac	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  008b4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  008bc	f3 0f 11 85 60
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  008c4	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  008ca	51		 push	 ecx
  008cb	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  008d1	52		 push	 edx
  008d2	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  008d7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  008db	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _altitude$7[ebp], xmm0

; 2538 : 
; 2539 : 		y_adjust = 0.0;

  008e3	0f 57 c0	 xorps	 xmm0, xmm0
  008e6	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2540 : 
; 2541 : 		sprintf(buffer, "%3d FT", (int)altitude);

  008ee	f3 0f 2c 85 b8
	fe ff ff	 cvttss2si eax, DWORD PTR _altitude$7[ebp]
  008f6	50		 push	 eax
  008f7	68 00 00 00 00	 push	 OFFSET ??_C@_06BLLIFECI@?$CF3d?5FT@
  008fc	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00902	51		 push	 ecx
  00903	e8 00 00 00 00	 call	 _sprintf
  00908	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2542 : 
; 2543 : 		set_2d_mono_font_position (-0.4, -0.7);

  0090b	51		 push	 ecx
  0090c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00914	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00919	51		 push	 ecx
  0091a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00922	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00927	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2544 : 		set_mono_font_rel_position (0.0, y_adjust);

  0092c	51		 push	 ecx
  0092d	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093a	51		 push	 ecx
  0093b	0f 57 c0	 xorps	 xmm0, xmm0
  0093e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00943	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2545 : 		print_mono_font_string (buffer);

  00948	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0094e	50		 push	 eax
  0094f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2546 : 
; 2547 : 
; 2548 : 		sprintf(buffer, "%3d KTS", (int)speed);

  00954	f3 0f 2c 85 bc
	fe ff ff	 cvttss2si eax, DWORD PTR _speed$8[ebp]
  0095c	50		 push	 eax
  0095d	68 00 00 00 00	 push	 OFFSET ??_C@_07FGFCMGOE@?$CF3d?5KTS@
  00962	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00968	51		 push	 ecx
  00969	e8 00 00 00 00	 call	 _sprintf
  0096e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2549 : 		width = get_mono_font_string_width (buffer);

  00971	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00977	50		 push	 eax
  00978	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0097d	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2550 : 
; 2551 : 		set_2d_mono_font_position (0.4, -0.7);

  00983	51		 push	 ecx
  00984	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0098c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00991	51		 push	 ecx
  00992	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0099a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2552 : 		set_mono_font_rel_position (-width, y_adjust);

  009a4	51		 push	 ecx
  009a5	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  009ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b2	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  009ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009c1	51		 push	 ecx
  009c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2553 : 		print_mono_font_string (buffer);

  009cc	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  009d2	50		 push	 eax
  009d3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2554 : 	}
; 2555 : 
; 2556 : 	////////////////////////////////////////
; 2557 : 	//
; 2558 : 	// draw field of regard and view boxes
; 2559 : 	//
; 2560 : 	////////////////////////////////////////
; 2561 : 
; 2562 : 	draw_field_of_regard_and_view_boxes ();

  009d8	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 2563 : 
; 2564 : 	////////////////////////////////////////
; 2565 : 	//
; 2566 : 	// line graphics
; 2567 : 	//
; 2568 : 	////////////////////////////////////////
; 2569 : 
; 2570 : 	//
; 2571 : 	// datum
; 2572 : 	//
; 2573 : 
; 2574 : 	if (draw_large_mfd)

  009dd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  009e4	0f 84 0d 01 00
	00		 je	 $LN30@draw_2d_eo

; 2575 : 	{
; 2576 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  009ea	b8 04 00 00 00	 mov	 eax, 4
  009ef	6b c8 00	 imul	 ecx, eax, 0
  009f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009f8	52		 push	 edx
  009f9	51		 push	 ecx
  009fa	0f 57 c0	 xorps	 xmm0, xmm0
  009fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a02	51		 push	 ecx
  00a03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a10	51		 push	 ecx
  00a11	0f 57 c0	 xorps	 xmm0, xmm0
  00a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a19	51		 push	 ecx
  00a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a27	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2577 : 
; 2578 : 		draw_2d_line (0.035, 0.0, 0.08, 0.0, MFD_COLOUR1);

  00a2c	b8 04 00 00 00	 mov	 eax, 4
  00a31	6b c8 00	 imul	 ecx, eax, 0
  00a34	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a3a	52		 push	 edx
  00a3b	51		 push	 ecx
  00a3c	0f 57 c0	 xorps	 xmm0, xmm0
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	51		 push	 ecx
  00a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	51		 push	 ecx
  00a53	0f 57 c0	 xorps	 xmm0, xmm0
  00a56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5b	51		 push	 ecx
  00a5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00a64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a69	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2579 : 
; 2580 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00a6e	b8 04 00 00 00	 mov	 eax, 4
  00a73	6b c8 00	 imul	 ecx, eax, 0
  00a76	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a7c	52		 push	 edx
  00a7d	51		 push	 ecx
  00a7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8b	51		 push	 ecx
  00a8c	0f 57 c0	 xorps	 xmm0, xmm0
  00a8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a94	51		 push	 ecx
  00a95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00a9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa2	51		 push	 ecx
  00aa3	0f 57 c0	 xorps	 xmm0, xmm0
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2581 : 
; 2582 : 		draw_2d_line (0.0, 0.035, 0.0, 0.08, MFD_COLOUR1);

  00ab0	b8 04 00 00 00	 mov	 eax, 4
  00ab5	6b c8 00	 imul	 ecx, eax, 0
  00ab8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00abe	52		 push	 edx
  00abf	51		 push	 ecx
  00ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acd	51		 push	 ecx
  00ace	0f 57 c0	 xorps	 xmm0, xmm0
  00ad1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad6	51		 push	 ecx
  00ad7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00adf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae4	51		 push	 ecx
  00ae5	0f 57 c0	 xorps	 xmm0, xmm0
  00ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aed	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2583 : 	}
; 2584 : 	else

  00af2	e9 08 01 00 00	 jmp	 $LN31@draw_2d_eo
$LN30@draw_2d_eo:

; 2585 : 	{
; 2586 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  00af7	b8 04 00 00 00	 mov	 eax, 4
  00afc	6b c8 00	 imul	 ecx, eax, 0
  00aff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b05	52		 push	 edx
  00b06	51		 push	 ecx
  00b07	0f 57 c0	 xorps	 xmm0, xmm0
  00b0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0f	51		 push	 ecx
  00b10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1d	51		 push	 ecx
  00b1e	0f 57 c0	 xorps	 xmm0, xmm0
  00b21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b26	51		 push	 ecx
  00b27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00b2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b34	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2587 : 
; 2588 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR1);

  00b39	b8 04 00 00 00	 mov	 eax, 4
  00b3e	6b c8 00	 imul	 ecx, eax, 0
  00b41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b47	52		 push	 edx
  00b48	51		 push	 ecx
  00b49	0f 57 c0	 xorps	 xmm0, xmm0
  00b4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b51	51		 push	 ecx
  00b52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00b5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5f	51		 push	 ecx
  00b60	0f 57 c0	 xorps	 xmm0, xmm0
  00b63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b68	51		 push	 ecx
  00b69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b76	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2589 : 
; 2590 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00b7b	b8 04 00 00 00	 mov	 eax, 4
  00b80	6b c8 00	 imul	 ecx, eax, 0
  00b83	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b89	52		 push	 edx
  00b8a	51		 push	 ecx
  00b8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b98	51		 push	 ecx
  00b99	0f 57 c0	 xorps	 xmm0, xmm0
  00b9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba1	51		 push	 ecx
  00ba2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00baa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00baf	51		 push	 ecx
  00bb0	0f 57 c0	 xorps	 xmm0, xmm0
  00bb3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2591 : 
; 2592 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR1);

  00bbd	b8 04 00 00 00	 mov	 eax, 4
  00bc2	6b c8 00	 imul	 ecx, eax, 0
  00bc5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bcb	52		 push	 edx
  00bcc	51		 push	 ecx
  00bcd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00bd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bda	51		 push	 ecx
  00bdb	0f 57 c0	 xorps	 xmm0, xmm0
  00bde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be3	51		 push	 ecx
  00be4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00bec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf1	51		 push	 ecx
  00bf2	0f 57 c0	 xorps	 xmm0, xmm0
  00bf5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN31@draw_2d_eo:

; 2593 : 	}
; 2594 : 
; 2595 : 	//
; 2596 : 	// target gates
; 2597 : 	//
; 2598 : 
; 2599 : 	if (valid_3d)

  00bff	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  00c03	0f 84 97 0a 00
	00		 je	 $LN35@draw_2d_eo

; 2600 : 	{
; 2601 : 		vec3d* tracking_point = get_eo_tracking_point();

  00c09	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  00c0e	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _tracking_point$6[ebp], eax

; 2602 : 
; 2603 : 		if (target || tracking_point)

  00c14	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00c1b	75 0d		 jne	 SHORT $LN34@draw_2d_eo
  00c1d	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _tracking_point$6[ebp], 0
  00c24	0f 84 76 0a 00
	00		 je	 $LN35@draw_2d_eo
$LN34@draw_2d_eo:

; 2604 : 		{
; 2605 : 			if (!((!d3d_can_render_to_texture) && (!draw_large_mfd)))

  00c2a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00c31	75 0d		 jne	 SHORT $LN36@draw_2d_eo
  00c33	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c3a	0f 84 60 0a 00
	00		 je	 $LN35@draw_2d_eo
$LN36@draw_2d_eo:

; 2606 : 			{
; 2607 : 				if (target)

  00c40	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00c47	74 15		 je	 SHORT $LN37@draw_2d_eo

; 2608 : 					get_local_entity_target_point (target, &target_point);

  00c49	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _target_point$[ebp]
  00c4f	50		 push	 eax
  00c50	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00c56	51		 push	 ecx
  00c57	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 2609 : 				else

  00c5c	eb 20		 jmp	 SHORT $LN38@draw_2d_eo
$LN37@draw_2d_eo:

; 2610 : 					target_point = *tracking_point;

  00c5e	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _tracking_point$6[ebp]
  00c64	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c66	89 8d fc fe ff
	ff		 mov	 DWORD PTR _target_point$[ebp], ecx
  00c6c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00c6f	89 95 00 ff ff
	ff		 mov	 DWORD PTR _target_point$[ebp+4], edx
  00c75	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00c78	89 85 04 ff ff
	ff		 mov	 DWORD PTR _target_point$[ebp+8], eax
$LN38@draw_2d_eo:

; 2611 : 
; 2612 : 				tmp = main_vp;

  00c7e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00c83	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00c88	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR _tmp$[ebp]
  00c8e	f3 a5		 rep movsd

; 2613 : 
; 2614 : 				main_vp = eo_vp;

  00c90	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00c95	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  00c9a	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00c9f	f3 a5		 rep movsd

; 2615 : 
; 2616 : 				visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  00ca1	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  00ca7	50		 push	 eax
  00ca8	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  00cae	51		 push	 ecx
  00caf	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _target_point$[ebp]
  00cb5	52		 push	 edx
  00cb6	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  00cbb	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 2617 : 
; 2618 : 				if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  00cc1	83 bd c8 fe ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  00cc8	74 0d		 je	 SHORT $LN40@draw_2d_eo
  00cca	83 bd c8 fe ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  00cd1	0f 85 b7 09 00
	00		 jne	 $LN51@draw_2d_eo
$LN40@draw_2d_eo:

; 2619 : 				{
; 2620 : 					float x_adjust;
; 2621 : 					transform_mfd_screen_co_ords_to_mfd_texture_co_ords (&i, &j);

  00cd7	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  00cdd	50		 push	 eax
  00cde	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  00ce4	51		 push	 ecx
  00ce5	e8 00 00 00 00	 call	 ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords

; 2622 : 
; 2623 : 					get_2d_world_position (i, j, &x, &y);

  00cea	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  00cf0	50		 push	 eax
  00cf1	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _x$[ebp]
  00cf7	51		 push	 ecx
  00cf8	51		 push	 ecx
  00cf9	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  00d01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d06	51		 push	 ecx
  00d07	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  00d0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d14	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 2624 : 
; 2625 : 
; 2626 : 					//
; 2627 : 					// target name
; 2628 : 					//
; 2629 : 
; 2630 : 					if (target)

  00d19	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00d20	0f 84 56 02 00
	00		 je	 $LN42@draw_2d_eo

; 2631 : 					{
; 2632 : 						s = get_target_display_name (target, buffer, FALSE);

  00d26	6a 00		 push	 0
  00d28	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00d2e	50		 push	 eax
  00d2f	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00d35	51		 push	 ecx
  00d36	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  00d3b	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2633 : 
; 2634 : 						if (s)

  00d3e	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00d42	0f 84 34 02 00
	00		 je	 $LN42@draw_2d_eo

; 2635 : 						{
; 2636 : 							y_adjust = -12.0;

  00d48	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00d50	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2637 : 							x_adjust = -get_mono_font_string_width (s) / 2.0;

  00d58	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d5b	50		 push	 eax
  00d5c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d61	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1138[ebp]
  00d67	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1138[ebp]
  00d6f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d76	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00d7a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00d82	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d86	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _x_adjust$5[ebp], xmm0

; 2638 : 
; 2639 : 							if (strcmp(s, "LOW LIGHT") == 0
; 2640 : 								|| strcmp(s, "CP/G ID...") == 0)

  00d8e	68 00 00 00 00	 push	 OFFSET ??_C@_09ICGCKLLB@LOW?5LIGHT@
  00d93	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d96	50		 push	 eax
  00d97	e8 00 00 00 00	 call	 _strcmp
  00d9c	83 c4 08	 add	 esp, 8
  00d9f	85 c0		 test	 eax, eax
  00da1	74 15		 je	 SHORT $LN45@draw_2d_eo
  00da3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@
  00da8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00dab	50		 push	 eax
  00dac	e8 00 00 00 00	 call	 _strcmp
  00db1	83 c4 08	 add	 esp, 8
  00db4	85 c0		 test	 eax, eax
  00db6	75 19		 jne	 SHORT $LN43@draw_2d_eo
$LN45@draw_2d_eo:

; 2641 : 							{
; 2642 : 								set_mono_font_colour (MFD_COLOUR_YELLOW);

  00db8	b8 04 00 00 00	 mov	 eax, 4
  00dbd	6b c8 0d	 imul	 ecx, eax, 13
  00dc0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dc6	52		 push	 edx
  00dc7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
  00dcc	e9 54 01 00 00	 jmp	 $LN47@draw_2d_eo
$LN43@draw_2d_eo:

; 2643 : 							}
; 2644 : 							else if (get_local_entity_int_value(get_gunship_entity(), INT_TYPE_SIDE) !=

  00dd1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00dd8	74 0f		 je	 SHORT $LN73@draw_2d_eo
  00dda	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00ddf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00de1	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv449[ebp], ecx
  00de7	eb 20		 jmp	 SHORT $LN74@draw_2d_eo
$LN73@draw_2d_eo:
  00de9	68 54 0a 00 00	 push	 2644			; 00000a54H
  00dee	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00df3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00df9	52		 push	 edx
  00dfa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dff	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv449[ebp], 0
$LN74@draw_2d_eo:
  00e09	b8 01 00 00 00	 mov	 eax, 1
  00e0e	85 c0		 test	 eax, eax
  00e10	74 0c		 je	 SHORT $LN75@draw_2d_eo
  00e12	c7 85 58 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv456[ebp], 187 ; 000000bbH
  00e1c	eb 20		 jmp	 SHORT $LN76@draw_2d_eo
$LN75@draw_2d_eo:
  00e1e	68 54 0a 00 00	 push	 2644			; 00000a54H
  00e23	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e28	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e2e	51		 push	 ecx
  00e2f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e34	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv456[ebp], 0
$LN76@draw_2d_eo:
  00e3e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00e45	74 10		 je	 SHORT $LN77@draw_2d_eo
  00e47	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  00e4d	8b 02		 mov	 eax, DWORD PTR [edx]
  00e4f	89 85 54 fe ff
	ff		 mov	 DWORD PTR tv467[ebp], eax
  00e55	eb 20		 jmp	 SHORT $LN78@draw_2d_eo
$LN77@draw_2d_eo:
  00e57	68 55 0a 00 00	 push	 2645			; 00000a55H
  00e5c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e67	51		 push	 ecx
  00e68	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e6d	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv467[ebp], 0
$LN78@draw_2d_eo:
  00e77	ba 01 00 00 00	 mov	 edx, 1
  00e7c	85 d2		 test	 edx, edx
  00e7e	74 0c		 je	 SHORT $LN79@draw_2d_eo
  00e80	c7 85 50 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv474[ebp], 187 ; 000000bbH
  00e8a	eb 1f		 jmp	 SHORT $LN80@draw_2d_eo
$LN79@draw_2d_eo:
  00e8c	68 55 0a 00 00	 push	 2645			; 00000a55H
  00e91	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e96	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e9b	50		 push	 eax
  00e9c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ea1	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv474[ebp], 0
$LN80@draw_2d_eo:
  00eab	68 bb 00 00 00	 push	 187			; 000000bbH
  00eb0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00eb6	51		 push	 ecx
  00eb7	69 95 5c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv449[ebp], 1116
  00ec1	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv456[ebp]
  00ec7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00ece	ff d1		 call	 ecx
  00ed0	8b f0		 mov	 esi, eax
  00ed2	68 bb 00 00 00	 push	 187			; 000000bbH
  00ed7	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  00edd	52		 push	 edx
  00ede	69 85 54 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv467[ebp], 1116
  00ee8	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR tv474[ebp]
  00eee	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00ef5	ff d2		 call	 edx
  00ef7	3b f0		 cmp	 esi, eax
  00ef9	74 16		 je	 SHORT $LN46@draw_2d_eo

; 2645 : 								get_local_entity_int_value(target, INT_TYPE_SIDE))
; 2646 : 							{
; 2647 : 								set_mono_font_colour (MFD_COLOUR_RED);

  00efb	b8 04 00 00 00	 mov	 eax, 4
  00f00	6b c8 0f	 imul	 ecx, eax, 15
  00f03	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f09	52		 push	 edx
  00f0a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2648 : 							}
; 2649 : 							else

  00f0f	eb 14		 jmp	 SHORT $LN47@draw_2d_eo
$LN46@draw_2d_eo:

; 2650 : 								set_mono_font_colour (MFD_COLOUR1);

  00f11	b8 04 00 00 00	 mov	 eax, 4
  00f16	6b c8 00	 imul	 ecx, eax, 0
  00f19	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f1f	52		 push	 edx
  00f20	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN47@draw_2d_eo:

; 2651 : 
; 2652 : 							set_2d_mono_font_position (x, y - 0.33);

  00f25	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00f2d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd51eb851eb851f
  00f35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f39	51		 push	 ecx
  00f3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3f	51		 push	 ecx
  00f40	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$[ebp]
  00f48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2653 : 							set_mono_font_rel_position (x_adjust, y_adjust);

  00f52	51		 push	 ecx
  00f53	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f60	51		 push	 ecx
  00f61	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_adjust$5[ebp]
  00f69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f6e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2654 : 
; 2655 : 							print_mono_font_string (s);

  00f73	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00f76	50		 push	 eax
  00f77	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN42@draw_2d_eo:

; 2656 : 						}
; 2657 : 					}
; 2658 : 
; 2659 : 					set_mono_font_colour (MFD_COLOUR1);

  00f7c	b8 04 00 00 00	 mov	 eax, 4
  00f81	6b c8 00	 imul	 ecx, eax, 0
  00f84	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f8a	52		 push	 edx
  00f8b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2660 : 
; 2661 : 					// target range, speed and bearing
; 2662 : 					{
; 2663 : 						char
; 2664 : 							range_char = 'R';

  00f90	c6 85 af fe ff
	ff 52		 mov	 BYTE PTR _range_char$4[ebp], 82 ; 00000052H

; 2665 : 
; 2666 : 						float
; 2667 : 							target_velocity = 0.0;

  00f97	0f 57 c0	 xorps	 xmm0, xmm0
  00f9a	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _target_velocity$3[ebp], xmm0

; 2668 : 
; 2669 : 						if (range_finder == RANGEFINDER_TRIANGULATION)

  00fa2	83 bd c4 fe ff
	ff 02		 cmp	 DWORD PTR _range_finder$[ebp], 2
  00fa9	75 09		 jne	 SHORT $LN48@draw_2d_eo

; 2670 : 							range_char = 'A';

  00fab	c6 85 af fe ff
	ff 41		 mov	 BYTE PTR _range_char$4[ebp], 65 ; 00000041H

; 2671 : 						else

  00fb2	eb 5a		 jmp	 SHORT $LN49@draw_2d_eo
$LN48@draw_2d_eo:

; 2672 : 						{
; 2673 : 							if (target)

  00fb4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00fbb	74 2c		 je	 SHORT $LN50@draw_2d_eo

; 2674 : 								target_velocity = kilometres_per_hour(get_local_entity_vec3d_magnitude (target, VEC3D_TYPE_MOTION_VECTOR));

  00fbd	6a 06		 push	 6
  00fbf	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  00fc5	50		 push	 eax
  00fc6	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  00fcb	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1182[ebp]
  00fd1	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1182[ebp]
  00fd9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00fe1	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _target_velocity$3[ebp], xmm0
$LN50@draw_2d_eo:

; 2675 : 							range_char = (range_finder == RANGEFINDER_FCR) ? 'R' : 'L';

  00fe9	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _range_finder$[ebp], 0
  00ff0	75 09		 jne	 SHORT $LN81@draw_2d_eo
  00ff2	c6 85 5f fe ff
	ff 52		 mov	 BYTE PTR tv537[ebp], 82	; 00000052H
  00ff9	eb 07		 jmp	 SHORT $LN82@draw_2d_eo
$LN81@draw_2d_eo:
  00ffb	c6 85 5f fe ff
	ff 4c		 mov	 BYTE PTR tv537[ebp], 76	; 0000004cH
$LN82@draw_2d_eo:
  01002	8a 85 5f fe ff
	ff		 mov	 al, BYTE PTR tv537[ebp]
  01008	88 85 af fe ff
	ff		 mov	 BYTE PTR _range_char$4[ebp], al
$LN49@draw_2d_eo:

; 2676 : 						}
; 2677 : 
; 2678 : 						sprintf (buffer, "%c%04d M   %3d KPH", range_char, (int)target_range, (int)target_velocity);

  0100e	f3 0f 2c 85 a8
	fe ff ff	 cvttss2si eax, DWORD PTR _target_velocity$3[ebp]
  01016	50		 push	 eax
  01017	f3 0f 2c 8d 2c
	ff ff ff	 cvttss2si ecx, DWORD PTR _target_range$[ebp]
  0101f	51		 push	 ecx
  01020	0f b6 95 af fe
	ff ff		 movzx	 edx, BYTE PTR _range_char$4[ebp]
  01027	52		 push	 edx
  01028	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@
  0102d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01033	50		 push	 eax
  01034	e8 00 00 00 00	 call	 _sprintf
  01039	83 c4 14	 add	 esp, 20			; 00000014H

; 2679 : 
; 2680 : 						width = get_mono_font_string_width (buffer) / 2;

  0103c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01042	50		 push	 eax
  01043	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01048	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1189[ebp]
  0104e	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1189[ebp]
  01056	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0105e	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2681 : 						set_2d_mono_font_position (0.0, 0.75);

  01066	51		 push	 ecx
  01067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  0106f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01074	51		 push	 ecx
  01075	0f 57 c0	 xorps	 xmm0, xmm0
  01078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2682 : 						set_mono_font_rel_position (-width, 0.0);

  01082	51		 push	 ecx
  01083	0f 57 c0	 xorps	 xmm0, xmm0
  01086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108b	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01093	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0109a	51		 push	 ecx
  0109b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2683 : 
; 2684 : 						print_mono_font_string (buffer);

  010a5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  010ab	50		 push	 eax
  010ac	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2685 : 					}
; 2686 : 
; 2687 : 					draw_2d_line (x - 0.30, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR1);

  010b1	b8 04 00 00 00	 mov	 eax, 4
  010b6	6b c8 00	 imul	 ecx, eax, 0
  010b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010bf	52		 push	 edx
  010c0	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  010c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  010d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d4	51		 push	 ecx
  010d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010da	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  010e2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  010ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010ee	51		 push	 ecx
  010ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f4	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  010fc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01104	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01108	51		 push	 ecx
  01109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01116	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0111e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01122	51		 push	 ecx
  01123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01128	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2688 : 					draw_2d_line (x + 0.30, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR1);

  0112d	b8 04 00 00 00	 mov	 eax, 4
  01132	6b c8 00	 imul	 ecx, eax, 0
  01135	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0113b	52		 push	 edx
  0113c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01144	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0114c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01150	51		 push	 ecx
  01151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01156	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0115e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01166	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0116a	51		 push	 ecx
  0116b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01170	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01178	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01180	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01184	51		 push	 ecx
  01185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01192	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0119a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0119e	51		 push	 ecx
  0119f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2689 : 					draw_2d_line (x - 0.30, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR1);

  011a9	b8 04 00 00 00	 mov	 eax, 4
  011ae	6b c8 00	 imul	 ecx, eax, 0
  011b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011b7	52		 push	 edx
  011b8	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  011c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  011c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011cc	51		 push	 ecx
  011cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d2	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  011da	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  011e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011e6	51		 push	 ecx
  011e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ec	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  011f4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  011fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01200	51		 push	 ecx
  01201	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01206	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0120e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01216	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0121a	51		 push	 ecx
  0121b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01220	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2690 : 					draw_2d_line (x + 0.30, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR1);

  01225	b8 04 00 00 00	 mov	 eax, 4
  0122a	6b c8 00	 imul	 ecx, eax, 0
  0122d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01233	52		 push	 edx
  01234	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0123c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01244	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01248	51		 push	 ecx
  01249	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01256	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0125e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01262	51		 push	 ecx
  01263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01268	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01270	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01278	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0127c	51		 push	 ecx
  0127d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01282	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0128a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01292	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01296	51		 push	 ecx
  01297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2691 : 					draw_2d_line (x - 0.30, y + 0.20, x - 0.30, y + 0.15, MFD_COLOUR1);

  012a1	b8 04 00 00 00	 mov	 eax, 4
  012a6	6b c8 00	 imul	 ecx, eax, 0
  012a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012af	52		 push	 edx
  012b0	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  012b8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  012c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012c4	51		 push	 ecx
  012c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ca	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  012d2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  012da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012de	51		 push	 ecx
  012df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e4	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  012ec	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  012f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012f8	51		 push	 ecx
  012f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fe	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01306	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0130e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01312	51		 push	 ecx
  01313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01318	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2692 : 					draw_2d_line (x - 0.30, y - 0.20, x - 0.30, y - 0.15, MFD_COLOUR1);

  0131d	b8 04 00 00 00	 mov	 eax, 4
  01322	6b c8 00	 imul	 ecx, eax, 0
  01325	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0132b	52		 push	 edx
  0132c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01334	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0133c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01340	51		 push	 ecx
  01341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01346	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0134e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01356	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0135a	51		 push	 ecx
  0135b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01360	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01368	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01370	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01374	51		 push	 ecx
  01375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01382	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0138a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0138e	51		 push	 ecx
  0138f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01394	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2693 : 					draw_2d_line (x + 0.30, y + 0.20, x + 0.30, y + 0.15, MFD_COLOUR1);

  01399	b8 04 00 00 00	 mov	 eax, 4
  0139e	6b c8 00	 imul	 ecx, eax, 0
  013a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013a7	52		 push	 edx
  013a8	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  013b0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  013b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013bc	51		 push	 ecx
  013bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c2	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  013ca	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  013d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013d6	51		 push	 ecx
  013d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013dc	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  013e4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  013ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013f0	51		 push	 ecx
  013f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f6	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  013fe	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01406	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0140a	51		 push	 ecx
  0140b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01410	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2694 : 					draw_2d_line (x + 0.30, y - 0.20, x + 0.30, y - 0.15, MFD_COLOUR1);

  01415	b8 04 00 00 00	 mov	 eax, 4
  0141a	6b c8 00	 imul	 ecx, eax, 0
  0141d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01423	52		 push	 edx
  01424	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0142c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01434	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01438	51		 push	 ecx
  01439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01446	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0144e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01452	51		 push	 ecx
  01453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01458	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01460	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01468	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0146c	51		 push	 ecx
  0146d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01472	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0147a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01482	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01486	51		 push	 ecx
  01487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0148c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2695 : 
; 2696 : 					if (eo_is_locked())

  01491	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  01496	85 c0		 test	 eax, eax
  01498	0f 84 f0 01 00
	00		 je	 $LN51@draw_2d_eo

; 2697 : 					{
; 2698 : 						draw_2d_line (x - 0.35, y + 0.35, x - 0.6, y + 0.6, MFD_COLOUR1);

  0149e	b8 04 00 00 00	 mov	 eax, 4
  014a3	6b c8 00	 imul	 ecx, eax, 0
  014a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014ac	52		 push	 edx
  014ad	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  014b5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  014bd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014c1	51		 push	 ecx
  014c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c7	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  014cf	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  014d7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014db	51		 push	 ecx
  014dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e1	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  014e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  014f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014f5	51		 push	 ecx
  014f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014fb	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01503	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0150b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0150f	51		 push	 ecx
  01510	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01515	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2699 : 						draw_2d_line (x - 0.35, y - 0.35, x - 0.6, y - 0.6, MFD_COLOUR1);

  0151a	b8 04 00 00 00	 mov	 eax, 4
  0151f	6b c8 00	 imul	 ecx, eax, 0
  01522	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01528	52		 push	 edx
  01529	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01531	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01539	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0153d	51		 push	 ecx
  0153e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01543	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0154b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01553	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01557	51		 push	 ecx
  01558	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0155d	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01565	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0156d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01571	51		 push	 ecx
  01572	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01577	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0157f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01587	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0158b	51		 push	 ecx
  0158c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01591	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2700 : 						draw_2d_line (x + 0.35, y + 0.35, x + 0.6, y + 0.6, MFD_COLOUR1);

  01596	b8 04 00 00 00	 mov	 eax, 4
  0159b	6b c8 00	 imul	 ecx, eax, 0
  0159e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015a4	52		 push	 edx
  015a5	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  015ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  015b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015b9	51		 push	 ecx
  015ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bf	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  015c7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  015cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015d3	51		 push	 ecx
  015d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015d9	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  015e1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  015e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015ed	51		 push	 ecx
  015ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f3	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  015fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01603	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01607	51		 push	 ecx
  01608	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2701 : 						draw_2d_line (x + 0.35, y - 0.35, x + 0.6, y - 0.6, MFD_COLOUR1);

  01612	b8 04 00 00 00	 mov	 eax, 4
  01617	6b c8 00	 imul	 ecx, eax, 0
  0161a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01620	52		 push	 edx
  01621	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01629	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01631	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01635	51		 push	 ecx
  01636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0163b	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01643	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  0164b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0164f	51		 push	 ecx
  01650	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01655	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0165d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01665	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01669	51		 push	 ecx
  0166a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166f	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01677	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0167f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01683	51		 push	 ecx
  01684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01689	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN51@draw_2d_eo:

; 2702 : 					}
; 2703 : 				}
; 2704 : 
; 2705 : 				main_vp = tmp;

  0168e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01693	8d b5 cc fe ff
	ff		 lea	 esi, DWORD PTR _tmp$[ebp]
  01699	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  0169e	f3 a5		 rep movsd
$LN35@draw_2d_eo:
$LN1@draw_2d_eo:

; 2706 : 			}
; 2707 : 		}
; 2708 : 	}
; 2709 : }

  016a0	5f		 pop	 edi
  016a1	5e		 pop	 esi
  016a2	5b		 pop	 ebx
  016a3	8b e5		 mov	 esp, ebp
  016a5	5d		 pop	 ebp
  016a6	c2 10 00	 ret	 16			; 00000010H
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv225 = -288						; size = 4
tv145 = -288						; size = 4
tv85 = -288						; size = 4
tv217 = -284						; size = 4
tv157 = -284						; size = 4
tv137 = -284						; size = 4
tv77 = -284						; size = 4
_m$1 = -216						; size = 36
_tmp_vp$2 = -180					; size = 48
_rotated_eo_vp$3 = -132					; size = 48
_centered_eo_vp$4 = -84					; size = 48
_position$5 = -36					; size = 12
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_full_screen_3d_eo_display, COMDAT

; 2095 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2096 : 	float
; 2097 : 		zoom;
; 2098 : 
; 2099 : 	display_3d_light_levels
; 2100 : 		light_level;
; 2101 : 
; 2102 : 	display_3d_noise_levels
; 2103 : 		noise_level;
; 2104 : 
; 2105 : 	vec3d
; 2106 : 		*position;
; 2107 : 
; 2108 : 	weathermodes
; 2109 : 		weather_mode;
; 2110 : 
; 2111 : 	day_segment_types
; 2112 : 		day_segment_type;
; 2113 : 
; 2114 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_full_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 13	 add	 eax, 19			; 00000013H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_full_:

; 2115 : 
; 2116 : #ifdef OLD_EO
; 2117 : 	switch (eo->field_of_view)
; 2118 : 	{
; 2119 : 		case EO_FOV_NARROW:
; 2120 : 		{
; 2121 : 			zoom = 1.0 / 128.0;
; 2122 : 
; 2123 : 			break;
; 2124 : 		}
; 2125 : 		case EO_FOV_MEDIUM:
; 2126 : 		{
; 2127 : 			zoom = 1.0 / 8.0;
; 2128 : 
; 2129 : 			break;
; 2130 : 		}
; 2131 : 		case EO_FOV_WIDE:
; 2132 : 		{
; 2133 : 			zoom = 1.0;
; 2134 : 
; 2135 : 			break;
; 2136 : 		}
; 2137 : 		default:
; 2138 : 		{
; 2139 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 2140 : 
; 2141 : 			break;
; 2142 : 		}
; 2143 : 	}
; 2144 : #else
; 2145 : 	zoom = convert_linear_view_value (eo);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00033	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 2146 : #endif
; 2147 : 
; 2148 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0003d	74 0f		 je	 SHORT $LN13@draw_full_
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  0004c	eb 24		 jmp	 SHORT $LN14@draw_full_
$LN13@draw_full_:
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00054	83 c2 35	 add	 edx, 53			; 00000035H
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00068	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN14@draw_full_:
  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	85 c9		 test	 ecx, ecx
  00079	74 0c		 je	 SHORT $LN15@draw_full_
  0007b	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  00085	eb 24		 jmp	 SHORT $LN16@draw_full_
$LN15@draw_full_:
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0008d	83 c2 35	 add	 edx, 53			; 00000035H
  00090	52		 push	 edx
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a1	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN16@draw_full_:
  000ab	6a 08		 push	 8
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b3	51		 push	 ecx
  000b4	6b 95 e4 fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000bb	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000c8	ff d1		 call	 ecx
  000ca	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2149 : 
; 2150 : 	weather_mode = get_simple_session_weather_at_point (position);

  000cd	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000d6	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2151 : 
; 2152 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000d9	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000dd	7e 06		 jle	 SHORT $LN6@draw_full_
  000df	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  000e3	7c 18		 jl	 SHORT $LN5@draw_full_
$LN6@draw_full_:
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ea	83 c0 39	 add	 eax, 57			; 00000039H
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  000f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_full_:

; 2153 : 
; 2154 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00104	74 0f		 je	 SHORT $LN17@draw_full_
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  00113	eb 24		 jmp	 SHORT $LN18@draw_full_
$LN17@draw_full_:
  00115	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0011b	83 c2 3b	 add	 edx, 59			; 0000003bH
  0011e	52		 push	 edx
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012f	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN18@draw_full_:
  00139	b9 01 00 00 00	 mov	 ecx, 1
  0013e	85 c9		 test	 ecx, ecx
  00140	74 0c		 je	 SHORT $LN19@draw_full_
  00142	c7 85 e0 fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv145[ebp], 39 ; 00000027H
  0014c	eb 24		 jmp	 SHORT $LN20@draw_full_
$LN19@draw_full_:
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00154	83 c2 3b	 add	 edx, 59			; 0000003bH
  00157	52		 push	 edx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00168	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN20@draw_full_:
  00172	6a 27		 push	 39			; 00000027H
  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0017a	51		 push	 ecx
  0017b	69 95 e4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv137[ebp], 1116
  00185	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  0018b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00192	ff d1		 call	 ecx
  00194	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2155 : 
; 2156 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00197	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  0019b	7c 06		 jl	 SHORT $LN8@draw_full_
  0019d	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001a1	7c 18		 jl	 SHORT $LN7@draw_full_
$LN8@draw_full_:
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001a8	83 c0 3d	 add	 eax, 61			; 0000003dH
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_full_:

; 2157 : 
; 2158 : 	switch (system)

  001bb	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001be	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  001c4	83 bd e4 fe ff
	ff 03		 cmp	 DWORD PTR tv157[ebp], 3
  001cb	74 0b		 je	 SHORT $LN9@draw_full_
  001cd	83 bd e4 fe ff
	ff 04		 cmp	 DWORD PTR tv157[ebp], 4
  001d4	74 2a		 je	 SHORT $LN10@draw_full_
  001d6	eb 50		 jmp	 SHORT $LN11@draw_full_
$LN9@draw_full_:

; 2159 : 	{
; 2160 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2161 : 		{
; 2162 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001d8	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001db	c1 e0 04	 shl	 eax, 4
  001de	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001e1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  001e8	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2163 : 
; 2164 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  001eb	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001ee	c1 e0 04	 shl	 eax, 4
  001f1	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001f4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  001fb	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2165 : 
; 2166 : 			break;

  001fe	eb 39		 jmp	 SHORT $LN2@draw_full_
$LN10@draw_full_:

; 2167 : 		}
; 2168 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2169 : 		{
; 2170 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00200	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00203	c1 e0 04	 shl	 eax, 4
  00206	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00209	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00210	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2171 : 
; 2172 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00213	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00216	c1 e0 04	 shl	 eax, 4
  00219	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0021c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00223	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2173 : 
; 2174 : 			break;

  00226	eb 11		 jmp	 SHORT $LN2@draw_full_
$LN11@draw_full_:

; 2175 : 		}
; 2176 : 		default:
; 2177 : 		{
; 2178 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00228	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00231	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00236	83 c4 08	 add	 esp, 8
$LN2@draw_full_:

; 2179 : 
; 2180 : 			break;
; 2181 : 		}
; 2182 : 	}
; 2183 : 
; 2184 : 	set_main_3d_params

  00239	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0023e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00246	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00255	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0025d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00261	51		 push	 ecx
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00275	51		 push	 ecx
  00276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	51		 push	 ecx
  00284	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0028c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00291	51		 push	 ecx
  00292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002a2	50		 push	 eax
  002a3	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002a6	51		 push	 ecx
  002a7	6a 03		 push	 3
  002a9	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2185 : 	(
; 2186 : 		DISPLAY_3D_TINT_GREEN,
; 2187 : 		light_level,
; 2188 : 		noise_level,
; 2189 : 		mfd_screen_x_min,
; 2190 : 		mfd_screen_y_min,
; 2191 : 		mfd_screen_width,
; 2192 : 		mfd_screen_height,
; 2193 : 		rad (59.99) * zoom,
; 2194 : 		rad (59.99) * zoom
; 2195 : 	);
; 2196 : 
; 2197 : 	//
; 2198 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 2199 : 	//
; 2200 : 
; 2201 : 	{
; 2202 : 		vec3d
; 2203 : 			position;
; 2204 : 
; 2205 : 		viewpoint
; 2206 : 			centered_eo_vp,
; 2207 : 			rotated_eo_vp,
; 2208 : 			tmp_vp;
; 2209 : 
; 2210 : 		matrix3x3
; 2211 : 			m;
; 2212 : 
; 2213 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  002ae	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  002b4	83 c6 08	 add	 esi, 8
  002b7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002bc	8d bd 4c ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  002c2	f3 a5		 rep movsd

; 2214 : 
; 2215 : 		get_kiowa_eo_relative_centred_viewpoint (&centered_eo_vp);

  002c4	8d 45 ac	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 ?get_kiowa_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_kiowa_eo_relative_centred_viewpoint

; 2216 : 
; 2217 : 		rotated_eo_vp.position = centered_eo_vp.position;

  002cd	8b 45 ac	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002d0	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  002d6	8b 4d b0	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  002d9	89 4d 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  002dc	8b 55 b4	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  002df	89 55 84	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 2218 : 
; 2219 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  002e2	51		 push	 ecx
  002e3	0f 57 c0	 xorps	 xmm0, xmm0
  002e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002eb	51		 push	 ecx
  002ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  002f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f9	51		 push	 ecx
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 2220 : 
; 2221 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  00313	8d 45 b8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  00316	50		 push	 eax
  00317	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  0031d	51		 push	 ecx
  0031e	8d 55 88	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00321	52		 push	 edx
  00322	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 2222 : 
; 2223 : 		position.x = -rotated_eo_vp.x;

  00327	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0032f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00336	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp], xmm0

; 2224 : 		position.y = -rotated_eo_vp.y;

  0033b	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00340	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00347	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 2225 : 		position.z = -rotated_eo_vp.z;

  0034c	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00351	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00358	f3 0f 11 45 e4	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 2226 : 
; 2227 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  0035d	8d 45 dc	 lea	 eax, DWORD PTR _position$5[ebp]
  00360	50		 push	 eax
  00361	8d 4d 88	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00364	51		 push	 ecx
  00365	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0036b	83 c2 08	 add	 edx, 8
  0036e	52		 push	 edx
  0036f	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 2228 : 
; 2229 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  00374	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0037b	74 0f		 je	 SHORT $LN21@draw_full_
  0037d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00382	8b 08		 mov	 ecx, DWORD PTR [eax]
  00384	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv217[ebp], ecx
  0038a	eb 27		 jmp	 SHORT $LN22@draw_full_
$LN21@draw_full_:
  0038c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00392	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  00398	52		 push	 edx
  00399	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a9	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv217[ebp], 0
$LN22@draw_full_:
  003b3	b9 01 00 00 00	 mov	 ecx, 1
  003b8	85 c9		 test	 ecx, ecx
  003ba	74 0c		 je	 SHORT $LN23@draw_full_
  003bc	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv225[ebp], 8
  003c6	eb 27		 jmp	 SHORT $LN24@draw_full_
$LN23@draw_full_:
  003c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  003ce	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  003d4	52		 push	 edx
  003d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  003df	50		 push	 eax
  003e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e5	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN24@draw_full_:
  003ef	8d 4d dc	 lea	 ecx, DWORD PTR _position$5[ebp]
  003f2	51		 push	 ecx
  003f3	6a 08		 push	 8
  003f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003fb	52		 push	 edx
  003fc	6b 85 e4 fe ff
	ff 60		 imul	 eax, DWORD PTR tv217[ebp], 96
  00403	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv225[ebp]
  00409	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00410	ff d2		 call	 edx

; 2230 : 
; 2231 : 		rotated_eo_vp.x += position.x;

  00412	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0041a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp]
  0041f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 2232 : 		rotated_eo_vp.y += position.y;

  00427	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  0042c	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  00431	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 2233 : 		rotated_eo_vp.z += position.z;

  00436	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  0043b	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  00440	f3 0f 11 45 84	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 2234 : 
; 2235 : 		draw_eo_3d_scene = TRUE;

  00445	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2236 : 
; 2237 : 		draw_main_3d_scene (&rotated_eo_vp);

  0044f	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2238 : 
; 2239 : 		draw_eo_3d_scene = FALSE;

  0045b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2240 : 
; 2241 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  00465	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0046b	83 c7 08	 add	 edi, 8
  0046e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00473	8d b5 4c ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  00479	f3 a5		 rep movsd

; 2242 : 	}
; 2243 : }

  0047b	5f		 pop	 edi
  0047c	5e		 pop	 esi
  0047d	5b		 pop	 ebx
  0047e	8b e5		 mov	 esp, ebp
  00480	5d		 pop	 ebp
  00481	c2 08 00	 ret	 8
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_full_screen_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv234 = -292						; size = 4
tv150 = -292						; size = 4
tv90 = -292						; size = 4
tv226 = -288						; size = 4
tv162 = -288						; size = 4
tv142 = -288						; size = 4
tv82 = -288						; size = 4
_m$1 = -220						; size = 36
_tmp_vp$2 = -184					; size = 48
_rotated_eo_vp$3 = -136					; size = 48
_centered_eo_vp$4 = -88					; size = 48
_position$5 = -40					; size = 12
_day_segment_type$ = -28				; size = 4
_weather_mode$ = -24					; size = 4
_position$ = -20					; size = 4
_noise_level$ = -16					; size = 4
_light_level$ = -12					; size = 4
_tint$ = -8						; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 1917 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1918 : 	float
; 1919 : 		zoom;
; 1920 : 
; 1921 : 	display_3d_tints
; 1922 : 		tint;
; 1923 : 
; 1924 : 	display_3d_light_levels
; 1925 : 		light_level;
; 1926 : 
; 1927 : 	display_3d_noise_levels
; 1928 : 		noise_level;
; 1929 : 
; 1930 : 	vec3d
; 1931 : 		*position;
; 1932 : 
; 1933 : 	weathermodes
; 1934 : 		weather_mode;
; 1935 : 
; 1936 : 	day_segment_types
; 1937 : 		day_segment_type;
; 1938 : 
; 1939 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_3d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_3d_eo:

; 1940 : 
; 1941 : 	ASSERT (eo_3d_texture_screen);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00031	75 18		 jne	 SHORT $LN5@draw_3d_eo
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00038	83 c0 18	 add	 eax, 24			; 00000018H
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_3d_eo:

; 1942 : 
; 1943 : #ifdef OLD_EO
; 1944 : 	switch (eo->field_of_view)
; 1945 : 	{
; 1946 : 		case EO_FOV_NARROW:
; 1947 : 		{
; 1948 : 			zoom = 1.0 / 128.0;
; 1949 : 
; 1950 : 			break;
; 1951 : 		}
; 1952 : 		case EO_FOV_MEDIUM:
; 1953 : 		{
; 1954 : 			zoom = 1.0 / 8.0;
; 1955 : 
; 1956 : 			break;
; 1957 : 		}
; 1958 : 		case EO_FOV_WIDE:
; 1959 : 		{
; 1960 : 			zoom = 1.0;
; 1961 : 
; 1962 : 			break;
; 1963 : 		}
; 1964 : 		default:
; 1965 : 		{
; 1966 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 1967 : 
; 1968 : 			break;
; 1969 : 		}
; 1970 : 	}
; 1971 : #else
; 1972 : 	zoom = convert_linear_view_value (eo);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00054	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 1973 : #endif
; 1974 : 
; 1975 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0005e	74 0f		 je	 SHORT $LN18@draw_3d_eo
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  0006d	eb 24		 jmp	 SHORT $LN19@draw_3d_eo
$LN18@draw_3d_eo:
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00075	83 c2 3a	 add	 edx, 58			; 0000003aH
  00078	52		 push	 edx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00089	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN19@draw_3d_eo:
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	85 c9		 test	 ecx, ecx
  0009a	74 0c		 je	 SHORT $LN20@draw_3d_eo
  0009c	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000a6	eb 24		 jmp	 SHORT $LN21@draw_3d_eo
$LN20@draw_3d_eo:
  000a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ae	83 c2 3a	 add	 edx, 58			; 0000003aH
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c2	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN21@draw_3d_eo:
  000cc	6a 08		 push	 8
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d4	51		 push	 ecx
  000d5	6b 95 e0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv82[ebp], 96
  000dc	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  000e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000e9	ff d1		 call	 ecx
  000eb	89 45 ec	 mov	 DWORD PTR _position$[ebp], eax

; 1976 : 
; 1977 : 	weather_mode = get_simple_session_weather_at_point (position);

  000ee	8b 45 ec	 mov	 eax, DWORD PTR _position$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000f7	89 45 e8	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 1978 : 
; 1979 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000fa	83 7d e8 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000fe	7e 06		 jle	 SHORT $LN7@draw_3d_eo
  00100	83 7d e8 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00104	7c 18		 jl	 SHORT $LN6@draw_3d_eo
$LN7@draw_3d_eo:
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0010b	83 c0 3e	 add	 eax, 62			; 0000003eH
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00119	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 1980 : 
; 1981 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  0011e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00125	74 0f		 je	 SHORT $LN22@draw_3d_eo
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  00134	eb 24		 jmp	 SHORT $LN23@draw_3d_eo
$LN22@draw_3d_eo:
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0013c	83 c2 40	 add	 edx, 64			; 00000040H
  0013f	52		 push	 edx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00150	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN23@draw_3d_eo:
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	85 c9		 test	 ecx, ecx
  00161	74 0c		 je	 SHORT $LN24@draw_3d_eo
  00163	c7 85 dc fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv150[ebp], 39 ; 00000027H
  0016d	eb 24		 jmp	 SHORT $LN25@draw_3d_eo
$LN24@draw_3d_eo:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00175	83 c2 40	 add	 edx, 64			; 00000040H
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN25@draw_3d_eo:
  00193	6a 27		 push	 39			; 00000027H
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0019b	51		 push	 ecx
  0019c	69 95 e0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv142[ebp], 1116
  001a6	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001b3	ff d1		 call	 ecx
  001b5	89 45 e4	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 1982 : 
; 1983 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001b8	83 7d e4 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001bc	7c 06		 jl	 SHORT $LN9@draw_3d_eo
  001be	83 7d e4 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001c2	7c 18		 jl	 SHORT $LN8@draw_3d_eo
$LN9@draw_3d_eo:
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001c9	83 c0 42	 add	 eax, 66			; 00000042H
  001cc	50		 push	 eax
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 1984 : 
; 1985 : 	switch (system)

  001dc	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001df	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  001e5	83 bd e0 fe ff
	ff 03		 cmp	 DWORD PTR tv162[ebp], 3
  001ec	74 0e		 je	 SHORT $LN10@draw_3d_eo
  001ee	83 bd e0 fe ff
	ff 04		 cmp	 DWORD PTR tv162[ebp], 4
  001f5	74 46		 je	 SHORT $LN13@draw_3d_eo
  001f7	e9 82 00 00 00	 jmp	 $LN16@draw_3d_eo
$LN10@draw_3d_eo:

; 1986 : 	{
; 1987 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 1988 : 		{
; 1989 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001fc	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001ff	c1 e0 04	 shl	 eax, 4
  00202	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00205	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0020c	89 55 f4	 mov	 DWORD PTR _light_level$[ebp], edx

; 1990 : 
; 1991 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0020f	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00212	c1 e0 04	 shl	 eax, 4
  00215	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00218	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0021f	89 55 f0	 mov	 DWORD PTR _noise_level$[ebp], edx

; 1992 : 
; 1993 : 			if (command_line_colour_mfd)

  00222	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00229	74 09		 je	 SHORT $LN11@draw_3d_eo

; 1994 : 				tint = DISPLAY_3D_TINT_BLUE;

  0022b	c7 45 f8 09 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 9

; 1995 : 			else

  00232	eb 07		 jmp	 SHORT $LN12@draw_3d_eo
$LN11@draw_3d_eo:

; 1996 : 				tint = DISPLAY_3D_TINT_GREEN;

  00234	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3
$LN12@draw_3d_eo:

; 1997 : 
; 1998 : 			break;

  0023b	eb 52		 jmp	 SHORT $LN2@draw_3d_eo
$LN13@draw_3d_eo:

; 1999 : 		}
; 2000 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2001 : 		{
; 2002 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00240	c1 e0 04	 shl	 eax, 4
  00243	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00246	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0024d	89 55 f4	 mov	 DWORD PTR _light_level$[ebp], edx

; 2003 : 
; 2004 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00250	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00253	c1 e0 04	 shl	 eax, 4
  00256	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00259	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00260	89 55 f0	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2005 : 
; 2006 : 			if (command_line_colour_mfd)

  00263	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0026a	74 09		 je	 SHORT $LN14@draw_3d_eo

; 2007 : 				tint = DISPLAY_3D_TINT_CLEAR;

  0026c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 0

; 2008 : 			else

  00273	eb 07		 jmp	 SHORT $LN15@draw_3d_eo
$LN14@draw_3d_eo:

; 2009 : 				tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  00275	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4
$LN15@draw_3d_eo:

; 2010 : 
; 2011 : 			break;

  0027c	eb 11		 jmp	 SHORT $LN2@draw_3d_eo
$LN16@draw_3d_eo:

; 2012 : 		}
; 2013 : 		default:
; 2014 : 		{
; 2015 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  0027e	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00281	50		 push	 eax
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00287	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0028c	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 2016 : 
; 2017 : 			break;
; 2018 : 		}
; 2019 : 	}
; 2020 : 
; 2021 : 	set_3d_render_target (eo_3d_texture_screen);

  0028f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00294	50		 push	 eax
  00295	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2022 : 
; 2023 : 	set_active_screen (eo_3d_texture_screen);

  0029a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0029f	50		 push	 eax
  002a0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2024 : 
; 2025 : /*		if (command_line_green_mfd)
; 2026 : 		{
; 2027 : 			tint = DISPLAY_3D_TINT_GREEN;
; 2028 : 		}
; 2029 : 		else
; 2030 : 		{
; 2031 : 			tint = DISPLAY_3D_TINT_GREY;
; 2032 : 		}*/
; 2033 : 
; 2034 : 		set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (59.99) * zoom, rad (59.99) * zoom);

  002a5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002aa	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b6	51		 push	 ecx
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cd	51		 push	 ecx
  002ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d3	51		 push	 ecx
  002d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	51		 push	 ecx
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	51		 push	 ecx
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	8b 45 f0	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0030e	50		 push	 eax
  0030f	8b 4d f4	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00312	51		 push	 ecx
  00313	8b 55 f8	 mov	 edx, DWORD PTR _tint$[ebp]
  00316	52		 push	 edx
  00317	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2035 : 
; 2036 : 	//
; 2037 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 2038 : 	//
; 2039 : 
; 2040 : 	{
; 2041 : 		vec3d
; 2042 : 			position;
; 2043 : 
; 2044 : 		viewpoint
; 2045 : 			centered_eo_vp,
; 2046 : 			rotated_eo_vp,
; 2047 : 			tmp_vp;
; 2048 : 
; 2049 : 		matrix3x3
; 2050 : 			m;
; 2051 : 
; 2052 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  0031c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00322	83 c6 08	 add	 esi, 8
  00325	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0032a	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  00330	f3 a5		 rep movsd

; 2053 : 
; 2054 : 		get_kiowa_eo_relative_centred_viewpoint (&centered_eo_vp);

  00332	8d 45 a8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 ?get_kiowa_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_kiowa_eo_relative_centred_viewpoint

; 2055 : 
; 2056 : 		rotated_eo_vp.position = centered_eo_vp.position;

  0033b	8b 45 a8	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  0033e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  00344	8b 4d ac	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  00347	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  0034d	8b 55 b0	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  00350	89 55 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 2057 : 
; 2058 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  00353	51		 push	 ecx
  00354	0f 57 c0	 xorps	 xmm0, xmm0
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	51		 push	 ecx
  0035d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036a	51		 push	 ecx
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00378	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 2059 : 
; 2060 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  00384	8d 45 b4	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  00387	50		 push	 eax
  00388	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  0038e	51		 push	 ecx
  0038f	8d 55 84	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00392	52		 push	 edx
  00393	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 2061 : 
; 2062 : 		position.x = -rotated_eo_vp.x;

  00398	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  003a0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003a7	f3 0f 11 45 d8	 movss	 DWORD PTR _position$5[ebp], xmm0

; 2063 : 		position.y = -rotated_eo_vp.y;

  003ac	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  003b4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003bb	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 2064 : 		position.z = -rotated_eo_vp.z;

  003c0	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  003c5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003cc	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 2065 : 
; 2066 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  003d1	8d 45 d8	 lea	 eax, DWORD PTR _position$5[ebp]
  003d4	50		 push	 eax
  003d5	8d 4d 84	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  003d8	51		 push	 ecx
  003d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  003df	83 c2 08	 add	 edx, 8
  003e2	52		 push	 edx
  003e3	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 2067 : 
; 2068 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  003e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003ef	74 0f		 je	 SHORT $LN26@draw_3d_eo
  003f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f8	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv226[ebp], ecx
  003fe	eb 27		 jmp	 SHORT $LN27@draw_3d_eo
$LN26@draw_3d_eo:
  00400	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00406	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  0040c	52		 push	 edx
  0040d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00412	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0041d	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN27@draw_3d_eo:
  00427	b9 01 00 00 00	 mov	 ecx, 1
  0042c	85 c9		 test	 ecx, ecx
  0042e	74 0c		 je	 SHORT $LN28@draw_3d_eo
  00430	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv234[ebp], 8
  0043a	eb 27		 jmp	 SHORT $LN29@draw_3d_eo
$LN28@draw_3d_eo:
  0043c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00442	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  00448	52		 push	 edx
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00459	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN29@draw_3d_eo:
  00463	8d 4d d8	 lea	 ecx, DWORD PTR _position$5[ebp]
  00466	51		 push	 ecx
  00467	6a 08		 push	 8
  00469	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0046f	52		 push	 edx
  00470	6b 85 e0 fe ff
	ff 60		 imul	 eax, DWORD PTR tv226[ebp], 96
  00477	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv234[ebp]
  0047d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00484	ff d2		 call	 edx

; 2069 : 
; 2070 : 		rotated_eo_vp.x += position.x;

  00486	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0048e	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _position$5[ebp]
  00493	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 2071 : 		rotated_eo_vp.y += position.y;

  0049b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  004a3	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  004a8	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 2072 : 		rotated_eo_vp.z += position.z;

  004b0	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  004b5	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  004ba	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 2073 : 
; 2074 :  		draw_eo_3d_scene = TRUE;

  004bf	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2075 : 
; 2076 : 		draw_main_3d_scene (&rotated_eo_vp);

  004c9	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  004cf	50		 push	 eax
  004d0	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2077 : 
; 2078 : 		draw_eo_3d_scene = FALSE;

  004d5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2079 : 
; 2080 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  004df	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  004e5	83 c7 08	 add	 edi, 8
  004e8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004ed	8d b5 48 ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  004f3	f3 a5		 rep movsd

; 2081 : 	}
; 2082 : 
; 2083 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  004f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004fa	50		 push	 eax
  004fb	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 2084 : 
; 2085 : 	set_3d_render_target (video_screen);

  00500	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00505	50		 push	 eax
  00506	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2086 : 
; 2087 : 	set_active_screen (video_screen);

  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00510	50		 push	 eax
  00511	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2088 : }

  00516	5f		 pop	 edi
  00517	5e		 pop	 esi
  00518	5b		 pop	 ebx
  00519	8b e5		 mov	 esp, ebp
  0051b	5d		 pop	 ebp
  0051c	c2 08 00	 ret	 8
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_undamaged_eo_display_mode@@YGHW4KIOWA_MAIN_MFD_MODES@@@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?get_undamaged_eo_display_mode@@YGHW4KIOWA_MAIN_MFD_MODES@@@Z PROC ; get_undamaged_eo_display_mode, COMDAT

; 1898 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1899 : 	if ((mode == KIOWA_MAIN_MFD_MODE_FLIR) && (!kiowa_damage.flir))

  00009	83 7d 08 02	 cmp	 DWORD PTR _mode$[ebp], 2
  0000d	75 11		 jne	 SHORT $LN2@get_undama
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00014	83 e0 01	 and	 eax, 1
  00017	75 07		 jne	 SHORT $LN2@get_undama

; 1900 : 	{
; 1901 : 		return (TRUE);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	eb 1b		 jmp	 SHORT $LN1@get_undama
$LN2@get_undama:

; 1902 : 	}
; 1903 : 
; 1904 : 	if ((mode == KIOWA_MAIN_MFD_MODE_DTV) && (!kiowa_damage.dtv))

  00020	83 7d 08 03	 cmp	 DWORD PTR _mode$[ebp], 3
  00024	75 13		 jne	 SHORT $LN3@get_undama
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0002b	d1 e8		 shr	 eax, 1
  0002d	83 e0 01	 and	 eax, 1
  00030	75 07		 jne	 SHORT $LN3@get_undama

; 1905 : 	{
; 1906 : 		return (TRUE);

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	eb 02		 jmp	 SHORT $LN1@get_undama
$LN3@get_undama:

; 1907 : 	}
; 1908 : 
; 1909 : 	return (FALSE);

  00039	33 c0		 xor	 eax, eax
$LN1@get_undama:

; 1910 : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?get_undamaged_eo_display_mode@@YGHW4KIOWA_MAIN_MFD_MODES@@@Z ENDP ; get_undamaged_eo_display_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z
_TEXT	SEGMENT
tv367 = -100						; size = 4
tv288 = -100						; size = 4
tv256 = -100						; size = 4
tv223 = -100						; size = 4
tv193 = -100						; size = 4
tv165 = -100						; size = 4
tv145 = -100						; size = 4
tv88 = -100						; size = 4
tv360 = -96						; size = 4
tv281 = -96						; size = 4
tv249 = -96						; size = 4
tv216 = -96						; size = 4
tv185 = -96						; size = 4
tv157 = -96						; size = 4
tv137 = -96						; size = 4
tv80 = -96						; size = 4
_target_position$ = -28					; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_source$ = -16						; size = 4
_source_side$ = -12					; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 1729 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1730 : 	target_symbol_types
; 1731 : 		target_symbol_type;
; 1732 : 
; 1733 : 	rgb_colour
; 1734 : 		target_symbol_colour;
; 1735 : 
; 1736 : //VJ 030423 TSD render mod
; 1737 : 	entity_sides
; 1738 : 		source_side;
; 1739 : 	entity
; 1740 : 		*source;
; 1741 : 
; 1742 : 	float
; 1743 : 		dx,
; 1744 : 		dy;
; 1745 : 
; 1746 : 	vec3d
; 1747 : 		*target_position;
; 1748 : 
; 1749 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00014	83 c0 14	 add	 eax, 20			; 00000014H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 1750 : 
; 1751 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00032	83 c0 16	 add	 eax, 22			; 00000016H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 1752 : 
; 1753 : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN46@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN47@draw_radar
$LN46@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0005b	83 c2 18	 add	 edx, 24			; 00000018H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN47@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN48@draw_radar
  0007f	c7 45 9c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN49@draw_radar
$LN48@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0008e	83 c2 18	 add	 edx, 24			; 00000018H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN49@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 9c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000cb	83 c0 18	 add	 eax, 24			; 00000018H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 1754 : 
; 1755 : //VJ 030423 TSD render mod
; 1756 : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 f0	 mov	 DWORD PTR _source$[ebp], eax

; 1757 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000e6	83 7d f0 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN50@draw_radar
  000ec	8b 45 f0	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d a0	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN51@draw_radar
$LN50@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000fc	83 c2 1c	 add	 edx, 28			; 0000001cH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN51@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN52@draw_radar
  00120	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN53@draw_radar
$LN52@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0012f	83 c2 1c	 add	 edx, 28			; 0000001cH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN53@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 9c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f4	 mov	 DWORD PTR _source_side$[ebp], eax

; 1758 : 
; 1759 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN54@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d a0	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN55@draw_radar
$LN54@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0017f	83 c2 1e	 add	 edx, 30			; 0000001eH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN55@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN56@draw_radar
  001a3	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN57@draw_radar
$LN56@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  001b2	83 c2 1e	 add	 edx, 30			; 0000001eH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN57@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 a0 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 9c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e4	 mov	 DWORD PTR _target_position$[ebp], eax

; 1760 : 
; 1761 : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1762 : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1763 : 
; 1764 : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN58@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d a0	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN59@draw_radar
$LN58@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0022e	83 c2 23	 add	 edx, 35			; 00000023H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN59@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN60@draw_radar
  00252	c7 45 9c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN61@draw_radar
$LN60@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00261	83 c2 23	 add	 edx, 35			; 00000023H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN61@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 9c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 1765 : 
; 1766 : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  002ac	83 c0 25	 add	 eax, 37			; 00000025H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 1767 : 
; 1768 : 	if (get_local_entity_index (target) & 1)

  002bf	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002c2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  002c8	c1 f8 04	 sar	 eax, 4
  002cb	83 e0 01	 and	 eax, 1
  002ce	0f 84 e2 00 00
	00		 je	 $LN7@draw_radar

; 1769 : 	{
; 1770 : //VJ 030423 TSD render mod
; 1771 : 		if (display_on_tsd)

  002d4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002d8	0f 84 c2 00 00
	00		 je	 $LN9@draw_radar

; 1772 : 		{
; 1773 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1774 : 			if (command_line_tsd_enemy_colours)

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002e5	0f 84 a2 00 00
	00		 je	 $LN11@draw_radar

; 1775 : 			{
; 1776 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002eb	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002ef	74 0a		 je	 SHORT $LN62@draw_radar
  002f1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	89 4d a0	 mov	 DWORD PTR tv216[ebp], ecx
  002f9	eb 1d		 jmp	 SHORT $LN63@draw_radar
$LN62@draw_radar:
  002fb	68 f0 06 00 00	 push	 1776			; 000006f0H
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN63@draw_radar:
  00318	b8 01 00 00 00	 mov	 eax, 1
  0031d	85 c0		 test	 eax, eax
  0031f	74 09		 je	 SHORT $LN64@draw_radar
  00321	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv223[ebp], 187 ; 000000bbH
  00328	eb 1d		 jmp	 SHORT $LN65@draw_radar
$LN64@draw_radar:
  0032a	68 f0 06 00 00	 push	 1776			; 000006f0H
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00334	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00340	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN65@draw_radar:
  00347	68 bb 00 00 00	 push	 187			; 000000bbH
  0034c	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0034f	52		 push	 edx
  00350	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv216[ebp], 1116
  00357	8b 4d 9c	 mov	 ecx, DWORD PTR tv223[ebp]
  0035a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00361	ff d2		 call	 edx
  00363	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00366	75 13		 jne	 SHORT $LN13@draw_radar

; 1777 : 					target_symbol_colour = MFD_COLOUR1;

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 00	 imul	 ecx, eax, 0
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1778 : 				else

  00379	eb 10		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 1779 : 					target_symbol_colour = MFD_COLOUR3;

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	d1 e0		 shl	 eax, 1
  00382	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00388	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN14@draw_radar:

; 1780 : 			}
; 1781 : 			else

  0038b	eb 11		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 1782 : 			{
; 1783 : 					target_symbol_colour = MFD_COLOUR8;

  0038d	b8 04 00 00 00	 mov	 eax, 4
  00392	6b c8 0c	 imul	 ecx, eax, 12
  00395	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0039b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN12@draw_radar:

; 1784 : 			}
; 1785 : 		}
; 1786 : 		else

  0039e	eb 11		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 1787 : 			target_symbol_colour = MFD_COLOUR2;

  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	c1 e0 00	 shl	 eax, 0
  003a8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  003ae	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN10@draw_radar:

; 1788 : 	}
; 1789 : 	else

  003b1	e9 de 00 00 00	 jmp	 $LN16@draw_radar
$LN7@draw_radar:

; 1790 : 	{
; 1791 : //VJ 030423 TSD render mod
; 1792 : 		if (display_on_tsd)

  003b6	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  003ba	0f 84 c3 00 00
	00		 je	 $LN15@draw_radar

; 1793 : 		{
; 1794 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1795 : 			if (command_line_tsd_enemy_colours)

  003c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  003c7	0f 84 a3 00 00
	00		 je	 $LN17@draw_radar

; 1796 : 			{
; 1797 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  003cd	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d1	74 0a		 je	 SHORT $LN66@draw_radar
  003d3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d8	89 4d a0	 mov	 DWORD PTR tv249[ebp], ecx
  003db	eb 1d		 jmp	 SHORT $LN67@draw_radar
$LN66@draw_radar:
  003dd	68 05 07 00 00	 push	 1797			; 00000705H
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ed	52		 push	 edx
  003ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f3	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN67@draw_radar:
  003fa	b8 01 00 00 00	 mov	 eax, 1
  003ff	85 c0		 test	 eax, eax
  00401	74 09		 je	 SHORT $LN68@draw_radar
  00403	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv256[ebp], 187 ; 000000bbH
  0040a	eb 1d		 jmp	 SHORT $LN69@draw_radar
$LN68@draw_radar:
  0040c	68 05 07 00 00	 push	 1797			; 00000705H
  00411	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00416	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00422	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv256[ebp], 0
$LN69@draw_radar:
  00429	68 bb 00 00 00	 push	 187			; 000000bbH
  0042e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00431	52		 push	 edx
  00432	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv249[ebp], 1116
  00439	8b 4d 9c	 mov	 ecx, DWORD PTR tv256[ebp]
  0043c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00443	ff d2		 call	 edx
  00445	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00448	75 13		 jne	 SHORT $LN19@draw_radar

; 1798 : 					target_symbol_colour = MFD_COLOUR2;

  0044a	b8 04 00 00 00	 mov	 eax, 4
  0044f	c1 e0 00	 shl	 eax, 0
  00452	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00458	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx

; 1799 : 				else

  0045b	eb 11		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 1800 : 					target_symbol_colour = MFD_COLOUR4;

  0045d	b8 04 00 00 00	 mov	 eax, 4
  00462	6b c8 03	 imul	 ecx, eax, 3
  00465	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0046b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN20@draw_radar:

; 1801 : 			}
; 1802 : 			else

  0046e	eb 11		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:

; 1803 : 			{
; 1804 : 					target_symbol_colour = MFD_COLOUR7;

  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 0b	 imul	 ecx, eax, 11
  00478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047e	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN18@draw_radar:

; 1805 : 			}
; 1806 : 		}
; 1807 : 		else

  00481	eb 11		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 1808 : 			target_symbol_colour = MFD_COLOUR1;

  00483	b8 04 00 00 00	 mov	 eax, 4
  00488	6b c8 00	 imul	 ecx, eax, 0
  0048b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00491	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN16@draw_radar:

; 1809 : 	}
; 1810 : 
; 1811 : 	if (draw_large_mfd)

  00494	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049b	0f 84 44 02 00
	00		 je	 $LN21@draw_radar

; 1812 : 	{
; 1813 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004a1	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004a5	74 0a		 je	 SHORT $LN70@draw_radar
  004a7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ac	89 4d a0	 mov	 DWORD PTR tv281[ebp], ecx
  004af	eb 1d		 jmp	 SHORT $LN71@draw_radar
$LN70@draw_radar:
  004b1	68 15 07 00 00	 push	 1813			; 00000715H
  004b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004c1	52		 push	 edx
  004c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c7	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv281[ebp], 0
$LN71@draw_radar:
  004ce	b8 01 00 00 00	 mov	 eax, 1
  004d3	85 c0		 test	 eax, eax
  004d5	74 09		 je	 SHORT $LN72@draw_radar
  004d7	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv288[ebp], 80 ; 00000050H
  004de	eb 1d		 jmp	 SHORT $LN73@draw_radar
$LN72@draw_radar:
  004e0	68 15 07 00 00	 push	 1813			; 00000715H
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004f0	51		 push	 ecx
  004f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN73@draw_radar:
  004fd	6a 50		 push	 80			; 00000050H
  004ff	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00502	52		 push	 edx
  00503	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv281[ebp], 1116
  0050a	8b 4d 9c	 mov	 ecx, DWORD PTR tv288[ebp]
  0050d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00514	ff d2		 call	 edx
  00516	85 c0		 test	 eax, eax
  00518	0f 84 9e 00 00
	00		 je	 $LN23@draw_radar

; 1814 : 		{
; 1815 : 			if (selected_target)

  0051e	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00522	74 69		 je	 SHORT $LN27@draw_radar

; 1816 : 			{
; 1817 : //VJ 030423 TSD render mod
; 1818 : 				if (display_on_tsd)

  00524	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00528	74 2e		 je	 SHORT $LN26@draw_radar

; 1819 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0052f	50		 push	 eax
  00530	51		 push	 ecx
  00531	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00549	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00550	52		 push	 edx
  00551	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1820 : 				else

  00556	eb 35		 jmp	 SHORT $LN27@draw_radar
$LN26@draw_radar:

; 1821 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  00558	b8 04 00 00 00	 mov	 eax, 4
  0055d	6b c8 05	 imul	 ecx, eax, 5
  00560	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00566	52		 push	 edx
  00567	51		 push	 ecx
  00568	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0056d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00572	51		 push	 ecx
  00573	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00580	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  00587	51		 push	 ecx
  00588	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 1822 : 			}
; 1823 : 
; 1824 : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  0058d	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00590	50		 push	 eax
  00591	51		 push	 ecx
  00592	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00597	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059c	51		 push	 ecx
  0059d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005aa	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  005b1	52		 push	 edx
  005b2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1825 : 		}
; 1826 : 		else

  005b7	e9 99 00 00 00	 jmp	 $LN24@draw_radar
$LN23@draw_radar:

; 1827 : 		{
; 1828 : 			if (selected_target)

  005bc	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  005c0	74 69		 je	 SHORT $LN30@draw_radar

; 1829 : 			{
; 1830 : //VJ 030423 TSD render mod
; 1831 : 				if (display_on_tsd)

  005c2	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  005c6	74 2e		 je	 SHORT $LN29@draw_radar

; 1832 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  005c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005cd	50		 push	 eax
  005ce	51		 push	 ecx
  005cf	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d9	51		 push	 ecx
  005da	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e4	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005e7	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  005ee	52		 push	 edx
  005ef	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1833 : 				else

  005f4	eb 35		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:

; 1834 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  005f6	b8 04 00 00 00	 mov	 eax, 4
  005fb	6b c8 05	 imul	 ecx, eax, 5
  005fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00604	52		 push	 edx
  00605	51		 push	 ecx
  00606	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  0061e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00625	51		 push	 ecx
  00626	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN30@draw_radar:

; 1835 : 			}
; 1836 : 
; 1837 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062b	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0062e	50		 push	 eax
  0062f	51		 push	 ecx
  00630	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063a	51		 push	 ecx
  0063b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00640	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00645	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00648	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  0064f	52		 push	 edx
  00650	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 1838 : 		}
; 1839 : 
; 1840 : 		if (selected_target)

  00655	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00659	0f 84 81 00 00
	00		 je	 $LN31@draw_radar

; 1841 : 		{
; 1842 : //VJ 030423 TSD render mod
; 1843 : 			if (display_on_tsd)

  0065f	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00663	74 28		 je	 SHORT $LN32@draw_radar

; 1844 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  00665	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0066a	50		 push	 eax
  0066b	51		 push	 ecx
  0066c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00671	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00676	51		 push	 ecx
  00677	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00686	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1845 : 			else

  0068b	eb 2f		 jmp	 SHORT $LN33@draw_radar
$LN32@draw_radar:

; 1846 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 05	 imul	 ecx, eax, 5
  00695	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069b	52		 push	 edx
  0069c	51		 push	 ecx
  0069d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	51		 push	 ecx
  006a8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b2	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  006b7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_radar:

; 1847 : 
; 1848 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  006bc	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  006bf	50		 push	 eax
  006c0	51		 push	 ecx
  006c1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cb	51		 push	 ecx
  006cc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d6	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  006db	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN31@draw_radar:

; 1849 : 		}
; 1850 : 	}
; 1851 : 	else

  006e0	e9 3f 02 00 00	 jmp	 $LN42@draw_radar
$LN21@draw_radar:

; 1852 : 	{
; 1853 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  006e5	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  006e9	74 0a		 je	 SHORT $LN74@draw_radar
  006eb	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  006ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f0	89 4d a0	 mov	 DWORD PTR tv360[ebp], ecx
  006f3	eb 1d		 jmp	 SHORT $LN75@draw_radar
$LN74@draw_radar:
  006f5	68 3d 07 00 00	 push	 1853			; 0000073dH
  006fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00705	52		 push	 edx
  00706	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0070b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv360[ebp], 0
$LN75@draw_radar:
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	85 c0		 test	 eax, eax
  00719	74 09		 je	 SHORT $LN76@draw_radar
  0071b	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv367[ebp], 80 ; 00000050H
  00722	eb 1d		 jmp	 SHORT $LN77@draw_radar
$LN76@draw_radar:
  00724	68 3d 07 00 00	 push	 1853			; 0000073dH
  00729	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00734	51		 push	 ecx
  00735	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0073a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv367[ebp], 0
$LN77@draw_radar:
  00741	6a 50		 push	 80			; 00000050H
  00743	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00746	52		 push	 edx
  00747	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv360[ebp], 1116
  0074e	8b 4d 9c	 mov	 ecx, DWORD PTR tv367[ebp]
  00751	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00758	ff d2		 call	 edx
  0075a	85 c0		 test	 eax, eax
  0075c	0f 84 9e 00 00
	00		 je	 $LN34@draw_radar

; 1854 : 		{
; 1855 : 			if (selected_target)

  00762	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00766	74 69		 je	 SHORT $LN38@draw_radar

; 1856 : 			{
; 1857 : //VJ 030423 TSD render mod
; 1858 : 				if (display_on_tsd)

  00768	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0076c	74 2e		 je	 SHORT $LN37@draw_radar

; 1859 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0076e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00773	50		 push	 eax
  00774	51		 push	 ecx
  00775	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0077a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077f	51		 push	 ecx
  00780	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00785	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078a	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0078d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00794	52		 push	 edx
  00795	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1860 : 				else

  0079a	eb 35		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:

; 1861 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0079c	b8 04 00 00 00	 mov	 eax, 4
  007a1	6b c8 05	 imul	 ecx, eax, 5
  007a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007aa	52		 push	 edx
  007ab	51		 push	 ecx
  007ac	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	51		 push	 ecx
  007b7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c1	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  007c4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  007cb	51		 push	 ecx
  007cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN38@draw_radar:

; 1862 : 			}
; 1863 : 
; 1864 : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d1	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d4	50		 push	 eax
  007d5	51		 push	 ecx
  007d6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e0	51		 push	 ecx
  007e1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007eb	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ee	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f5	52		 push	 edx
  007f6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1865 : 		}
; 1866 : 		else

  007fb	e9 99 00 00 00	 jmp	 $LN35@draw_radar
$LN34@draw_radar:

; 1867 : 		{
; 1868 : 			if (selected_target)

  00800	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00804	74 69		 je	 SHORT $LN41@draw_radar

; 1869 : 			{
; 1870 : //VJ 030423 TSD render mod
; 1871 : 				if (display_on_tsd)

  00806	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0080a	74 2e		 je	 SHORT $LN40@draw_radar

; 1872 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0080c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00811	50		 push	 eax
  00812	51		 push	 ecx
  00813	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081d	51		 push	 ecx
  0081e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0082b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00832	52		 push	 edx
  00833	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1873 : 				else

  00838	eb 35		 jmp	 SHORT $LN41@draw_radar
$LN40@draw_radar:

; 1874 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 05	 imul	 ecx, eax, 5
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00848	52		 push	 edx
  00849	51		 push	 ecx
  0084a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0084f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00854	51		 push	 ecx
  00855	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0085a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085f	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00862	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00869	51		 push	 ecx
  0086a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_radar:

; 1875 : 			}
; 1876 : 
; 1877 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0086f	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00872	50		 push	 eax
  00873	51		 push	 ecx
  00874	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00879	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087e	51		 push	 ecx
  0087f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00884	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00889	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0088c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00893	52		 push	 edx
  00894	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_radar:

; 1878 : 		}
; 1879 : 
; 1880 : 		if (selected_target)

  00899	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0089d	0f 84 81 00 00
	00		 je	 $LN42@draw_radar

; 1881 : 		{
; 1882 : //VJ 030423 TSD render mod
; 1883 : 			if (display_on_tsd)

  008a3	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  008a7	74 28		 je	 SHORT $LN43@draw_radar

; 1884 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  008a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008ae	50		 push	 eax
  008af	51		 push	 ecx
  008b0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c5	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008ca	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1885 : 			else

  008cf	eb 2f		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:

; 1886 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  008d1	b8 04 00 00 00	 mov	 eax, 4
  008d6	6b c8 05	 imul	 ecx, eax, 5
  008d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008df	52		 push	 edx
  008e0	51		 push	 ecx
  008e1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008eb	51		 push	 ecx
  008ec	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008fb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_radar:

; 1887 : 
; 1888 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00900	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00903	50		 push	 eax
  00904	51		 push	 ecx
  00905	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0090a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090f	51		 push	 ecx
  00910	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  0091f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN42@draw_radar:

; 1889 : 		}
; 1890 : 	}
; 1891 : }

  00924	5f		 pop	 edi
  00925	5e		 pop	 esi
  00926	5b		 pop	 ebx
  00927	8b e5		 mov	 esp, ebp
  00929	5d		 pop	 ebp
  0092a	c2 14 00	 ret	 20			; 00000014H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_field_of_regard_and_view_boxes@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_field_of_regard_and_view_boxes@@YGXXZ PROC	; draw_field_of_regard_and_view_boxes, COMDAT

; 1522 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1523 : 	float
; 1524 : 		x,
; 1525 : 		y;
; 1526 : 
; 1527 : 	draw_2d_line (-0.4800, -0.7650,  0.4800, -0.7650, MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	51		 push	 ecx
  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	51		 push	 ecx
  00027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	51		 push	 ecx
  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1528 : 	draw_2d_line (-0.4800, -0.7650, -0.4800, -1.0000, MFD_COLOUR1);

  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	6b c8 00	 imul	 ecx, eax, 0
  0005d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00063	52		 push	 edx
  00064	51		 push	 ecx
  00065	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	51		 push	 ecx
  00073	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1529 : 	draw_2d_line ( 0.4800, -0.7650,  0.4800, -1.0000, MFD_COLOUR1);

  000a1	b8 04 00 00 00	 mov	 eax, 4
  000a6	6b c8 00	 imul	 ecx, eax, 0
  000a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000af	52		 push	 edx
  000b0	51		 push	 ecx
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	51		 push	 ecx
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	51		 push	 ecx
  000cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	51		 push	 ecx
  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1530 : 
; 1531 : 	x = eo_azimuth / eo_max_azimuth * 0.48;

  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  000f5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  000fd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00101	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fdeb851eb851eb8
  00109	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0010d	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1532 : 	y = (eo_elevation / eo_min_elevation * -0.15) - 0.850;

  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  0011a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  00122	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00126	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc3333333333333
  0012e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3feb333333333333
  00136	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1533 : 
; 1534 : 	draw_2d_line (x - 0.0400, y - 0.0300, x + 0.0400, y - 0.0300, MFD_COLOUR1);

  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	6b c8 00	 imul	 ecx, eax, 0
  00147	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0014d	52		 push	 edx
  0014e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00153	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0015b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015f	51		 push	 ecx
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0016a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	51		 push	 ecx
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00181	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	51		 push	 ecx
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00198	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  001a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a4	51		 push	 ecx
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1535 : 	draw_2d_line (x - 0.0400, y + 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	6b c8 00	 imul	 ecx, eax, 0
  001b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001bd	52		 push	 edx
  001be	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  001c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  001da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  001e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  001f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00208	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00210	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00214	51		 push	 ecx
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1536 : 	draw_2d_line (x - 0.0400, y - 0.0300, x - 0.0400, y + 0.0300, MFD_COLOUR1);

  0021f	b8 04 00 00 00	 mov	 eax, 4
  00224	6b c8 00	 imul	 ecx, eax, 0
  00227	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022d	52		 push	 edx
  0022e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00233	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00245	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0024a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00252	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00256	51		 push	 ecx
  00257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00261	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00269	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026d	51		 push	 ecx
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00278	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00280	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00284	51		 push	 ecx
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1537 : 	draw_2d_line (x + 0.0400, y - 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  0028f	b8 04 00 00 00	 mov	 eax, 4
  00294	6b c8 00	 imul	 ecx, eax, 0
  00297	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0029d	52		 push	 edx
  0029e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  002a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  002ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002af	51		 push	 ecx
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  002c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c6	51		 push	 ecx
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  002d1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  002d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dd	51		 push	 ecx
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  002f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f4	51		 push	 ecx
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1538 : }

  002ff	5f		 pop	 edi
  00300	5e		 pop	 esi
  00301	5b		 pop	 ebx
  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	c3		 ret	 0
?draw_field_of_regard_and_view_boxes@@YGXXZ ENDP	; draw_field_of_regard_and_view_boxes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?display_navigation_info@@YGXXZ
_TEXT	SEGMENT
tv399 = -260						; size = 8
tv400 = -252						; size = 8
tv367 = -252						; size = 4
tv347 = -252						; size = 4
tv283 = -252						; size = 4
tv254 = -252						; size = 4
tv218 = -252						; size = 4
tv78 = -252						; size = 4
tv708 = -248						; size = 4
tv647 = -248						; size = 4
tv359 = -248						; size = 4
tv339 = -248						; size = 4
tv275 = -248						; size = 4
tv246 = -248						; size = 4
tv210 = -248						; size = 4
tv70 = -248						; size = 4
_fvalue$1 = -180					; size = 4
_x_adjust$2 = -176					; size = 4
_sec$3 = -172						; size = 4
_sx$4 = -168						; size = 4
_sz$5 = -164						; size = 4
_seconds$6 = -160					; size = 4
_minutes$7 = -156					; size = 4
_hours$8 = -152						; size = 4
_time_to_go$9 = -148					; size = 4
_f$10 = -144						; size = 4
_i$11 = -140						; size = 4
_waypoint_range$12 = -136				; size = 4
_x_adjust$13 = -132					; size = 4
_waypoint_position$14 = -128				; size = 12
_buffer$ = -116						; size = 80
_gunship_position$ = -36				; size = 4
_wp$ = -32						; size = 4
_mid_y$ = -28						; size = 4
_top$ = -24						; size = 4
_bottom$ = -20						; size = 4
_upper_left$ = -16					; size = 4
_upper_right$ = -12					; size = 4
_right_edge$ = -8					; size = 4
_left_edge$ = -4					; size = 4
?display_navigation_info@@YGXXZ PROC			; display_navigation_info, COMDAT

; 1374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1375 : 	const float
; 1376 : 		left_edge = -0.6,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 1377 : 		right_edge = 0.6,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 1378 : 		upper_right = -0.2,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _upper_right$[ebp], xmm0

; 1379 : 		upper_left = 0.2,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _upper_left$[ebp], xmm0

; 1380 : 		bottom = -0.98,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _bottom$[ebp], xmm0

; 1381 : 		top = -0.78,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _top$[ebp], xmm0

; 1382 : 		mid_y = -0.88;

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _mid_y$[ebp], xmm0

; 1383 : 
; 1384 : 	entity
; 1385 : 		*wp;
; 1386 : 
; 1387 : 	vec3d
; 1388 : 		*gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0006e	74 0f		 je	 SHORT $LN12@display_na
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0007d	eb 24		 jmp	 SHORT $LN13@display_na
$LN12@display_na:
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00085	83 c2 0e	 add	 edx, 14			; 0000000eH
  00088	52		 push	 edx
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00099	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN13@display_na:
  000a3	b9 01 00 00 00	 mov	 ecx, 1
  000a8	85 c9		 test	 ecx, ecx
  000aa	74 0c		 je	 SHORT $LN14@display_na
  000ac	c7 85 04 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv78[ebp], 8
  000b6	eb 24		 jmp	 SHORT $LN15@display_na
$LN14@display_na:
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  000be	83 c2 0e	 add	 edx, 14			; 0000000eH
  000c1	52		 push	 edx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d2	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN15@display_na:
  000dc	6a 08		 push	 8
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e4	51		 push	 ecx
  000e5	6b 95 08 ff ff
	ff 60		 imul	 edx, DWORD PTR tv70[ebp], 96
  000ec	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000f2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000f9	ff d1		 call	 ecx
  000fb	89 45 dc	 mov	 DWORD PTR _gunship_position$[ebp], eax

; 1389 : 
; 1390 : 	char
; 1391 : 		buffer[80];
; 1392 : 
; 1393 : 
; 1394 : 	// draw surrounding box
; 1395 : 	draw_2d_line(left_edge, mid_y, right_edge, mid_y, MFD_COLOUR1);

  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	6b c8 00	 imul	 ecx, eax, 0
  00106	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0010c	52		 push	 edx
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00145	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1396 : 	draw_2d_line(left_edge, bottom, right_edge, bottom, MFD_COLOUR1);

  0014a	b8 04 00 00 00	 mov	 eax, 4
  0014f	6b c8 00	 imul	 ecx, eax, 0
  00152	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00158	52		 push	 edx
  00159	51		 push	 ecx
  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00167	51		 push	 ecx
  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	51		 push	 ecx
  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	51		 push	 ecx
  00184	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0018c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00191	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1397 : 	draw_2d_line(left_edge, mid_y, left_edge, bottom, MFD_COLOUR1);

  00196	b8 04 00 00 00	 mov	 eax, 4
  0019b	6b c8 00	 imul	 ecx, eax, 0
  0019e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001a4	52		 push	 edx
  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1398 : 	draw_2d_line(right_edge, mid_y, right_edge, bottom, MFD_COLOUR1);

  001e2	b8 04 00 00 00	 mov	 eax, 4
  001e7	6b c8 00	 imul	 ecx, eax, 0
  001ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f0	52		 push	 edx
  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1399 : 
; 1400 : 	draw_2d_line(left_edge, top, upper_right, top, MFD_COLOUR1);

  0022e	b8 04 00 00 00	 mov	 eax, 4
  00233	6b c8 00	 imul	 ecx, eax, 0
  00236	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0023c	52		 push	 edx
  0023d	51		 push	 ecx
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	51		 push	 ecx
  0024c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00254	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00259	51		 push	 ecx
  0025a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00275	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1401 : 	draw_2d_line(left_edge, top, left_edge, mid_y, MFD_COLOUR1);

  0027a	b8 04 00 00 00	 mov	 eax, 4
  0027f	6b c8 00	 imul	 ecx, eax, 0
  00282	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00288	52		 push	 edx
  00289	51		 push	 ecx
  0028a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	51		 push	 ecx
  00298	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a5	51		 push	 ecx
  002a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	51		 push	 ecx
  002b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1402 : 	draw_2d_line(upper_right, top, upper_right, mid_y, MFD_COLOUR1);

  002c6	b8 04 00 00 00	 mov	 eax, 4
  002cb	6b c8 00	 imul	 ecx, eax, 0
  002ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d4	52		 push	 edx
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	51		 push	 ecx
  002e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	51		 push	 ecx
  002f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  002fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ff	51		 push	 ecx
  00300	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00308	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1403 : 
; 1404 : 	draw_2d_line(right_edge, top, upper_left, top, MFD_COLOUR1);

  00312	b8 04 00 00 00	 mov	 eax, 4
  00317	6b c8 00	 imul	 ecx, eax, 0
  0031a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00320	52		 push	 edx
  00321	51		 push	 ecx
  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	51		 push	 ecx
  00330	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034b	51		 push	 ecx
  0034c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1405 : 	draw_2d_line(right_edge, top, right_edge, mid_y, MFD_COLOUR1);

  0035e	b8 04 00 00 00	 mov	 eax, 4
  00363	6b c8 00	 imul	 ecx, eax, 0
  00366	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036c	52		 push	 edx
  0036d	51		 push	 ecx
  0036e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00389	51		 push	 ecx
  0038a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00392	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00397	51		 push	 ecx
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1406 : 	draw_2d_line(upper_left, top, upper_left, mid_y, MFD_COLOUR1);

  003aa	b8 04 00 00 00	 mov	 eax, 4
  003af	6b c8 00	 imul	 ecx, eax, 0
  003b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003b8	52		 push	 edx
  003b9	51		 push	 ecx
  003ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	51		 push	 ecx
  003c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	51		 push	 ecx
  003d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	51		 push	 ecx
  003e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1407 : 
; 1408 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  003f6	6a 04		 push	 4
  003f8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1409 : 
; 1410 : 	wp = get_local_entity_current_waypoint (get_gunship_entity ());

  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00408	89 45 e0	 mov	 DWORD PTR _wp$[ebp], eax

; 1411 : 	if (wp)

  0040b	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0040f	0f 84 46 04 00
	00		 je	 $LN2@display_na

; 1412 : 	{
; 1413 : 		vec3d
; 1414 : 			waypoint_position;
; 1415 : 
; 1416 : 		float
; 1417 : 			x_adjust,
; 1418 : 			waypoint_range;
; 1419 : 
; 1420 : 		get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00415	8d 45 80	 lea	 eax, DWORD PTR _waypoint_position$14[ebp]
  00418	50		 push	 eax
  00419	8b 4d e0	 mov	 ecx, DWORD PTR _wp$[ebp]
  0041c	51		 push	 ecx
  0041d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00423	52		 push	 edx
  00424	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1421 : 
; 1422 : 		//
; 1423 : 		// waypoint id & range
; 1424 : 		//
; 1425 : 
; 1426 : 		waypoint_range = get_2d_range (gunship_position, &waypoint_position);

  00429	8d 45 80	 lea	 eax, DWORD PTR _waypoint_position$14[ebp]
  0042c	50		 push	 eax
  0042d	8b 4d dc	 mov	 ecx, DWORD PTR _gunship_position$[ebp]
  00430	51		 push	 ecx
  00431	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  00436	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR _waypoint_range$12[ebp]

; 1427 : 		if (!kiowa_damage.navigation_computer)

  0043c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00441	c1 e8 04	 shr	 eax, 4
  00444	83 e0 01	 and	 eax, 1
  00447	0f 85 95 02 00
	00		 jne	 $LN3@display_na

; 1428 : 		{
; 1429 : 			if (waypoint_range < 1000.0)

  0044d	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  00455	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  0045d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00461	0f 86 b1 00 00
	00		 jbe	 $LN5@display_na

; 1430 : 				sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  00467	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0046b	74 0d		 je	 SHORT $LN16@display_na
  0046d	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00470	8b 08		 mov	 ecx, DWORD PTR [eax]
  00472	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv210[ebp], ecx
  00478	eb 24		 jmp	 SHORT $LN17@display_na
$LN16@display_na:
  0047a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00480	83 c2 38	 add	 edx, 56			; 00000038H
  00483	52		 push	 edx
  00484	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00489	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00494	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv210[ebp], 0
$LN17@display_na:
  0049e	b9 01 00 00 00	 mov	 ecx, 1
  004a3	85 c9		 test	 ecx, ecx
  004a5	74 0c		 je	 SHORT $LN18@display_na
  004a7	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
  004b1	eb 24		 jmp	 SHORT $LN19@display_na
$LN18@display_na:
  004b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  004b9	83 c2 38	 add	 edx, 56			; 00000038H
  004bc	52		 push	 edx
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  004c7	50		 push	 eax
  004c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004cd	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN19@display_na:
  004d7	f3 0f 2c 8d 78
	ff ff ff	 cvttss2si ecx, DWORD PTR _waypoint_range$12[ebp]
  004df	51		 push	 ecx
  004e0	6a 00		 push	 0
  004e2	8b 55 e0	 mov	 edx, DWORD PTR _wp$[ebp]
  004e5	52		 push	 edx
  004e6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv218[ebp]
  004ec	c1 e0 02	 shl	 eax, 2
  004ef	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv210[ebp]
  004f5	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  004fc	ff d2		 call	 edx
  004fe	0f b6 c0	 movzx	 eax, al
  00501	50		 push	 eax
  00502	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  00507	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0050a	51		 push	 ecx
  0050b	e8 00 00 00 00	 call	 _sprintf
  00510	83 c4 10	 add	 esp, 16			; 00000010H
  00513	e9 c8 01 00 00	 jmp	 $LN8@display_na
$LN5@display_na:

; 1431 : 			else if (waypoint_range < 100000.0)

  00518	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  00520	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  00528	66 0f 2f c8	 comisd	 xmm1, xmm0
  0052c	0f 86 f6 00 00
	00		 jbe	 $LN7@display_na

; 1432 : 			{
; 1433 : 				int
; 1434 : 					i;
; 1435 : 
; 1436 : 				float
; 1437 : 					f;
; 1438 : 
; 1439 : 				//
; 1440 : 				// this is required to prevent rounding errors around the 100Km mark
; 1441 : 				//
; 1442 : 
; 1443 : 				i = (int) waypoint_range * (1.0 / 100.0);

  00532	f3 0f 2c 85 78
	ff ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$12[ebp]
  0053a	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0053e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00546	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0054a	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _i$11[ebp], ecx

; 1444 : 				f = (float) i * (1.0 / 10.0);

  00550	f3 0f 2a 85 74
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _i$11[ebp]
  00558	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0055c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00564	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00568	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _f$10[ebp], xmm0

; 1445 : 
; 1446 : 				sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  00570	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00574	74 0d		 je	 SHORT $LN20@display_na
  00576	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00579	8b 08		 mov	 ecx, DWORD PTR [eax]
  0057b	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  00581	eb 24		 jmp	 SHORT $LN21@display_na
$LN20@display_na:
  00583	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00589	83 c2 48	 add	 edx, 72			; 00000048H
  0058c	52		 push	 edx
  0058d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00592	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0059d	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv246[ebp], 0
$LN21@display_na:
  005a7	b9 01 00 00 00	 mov	 ecx, 1
  005ac	85 c9		 test	 ecx, ecx
  005ae	74 0c		 je	 SHORT $LN22@display_na
  005b0	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], 0
  005ba	eb 24		 jmp	 SHORT $LN23@display_na
$LN22@display_na:
  005bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  005c2	83 c2 48	 add	 edx, 72			; 00000048H
  005c5	52		 push	 edx
  005c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  005cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  005d0	50		 push	 eax
  005d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d6	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], 0
$LN23@display_na:
  005e0	f3 0f 5a 85 70
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _f$10[ebp]
  005e8	83 ec 08	 sub	 esp, 8
  005eb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005f0	6a 00		 push	 0
  005f2	8b 4d e0	 mov	 ecx, DWORD PTR _wp$[ebp]
  005f5	51		 push	 ecx
  005f6	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv254[ebp]
  005fc	c1 e2 02	 shl	 edx, 2
  005ff	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv246[ebp]
  00605	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  0060c	ff d1		 call	 ecx
  0060e	0f b6 d0	 movzx	 edx, al
  00611	52		 push	 edx
  00612	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  00617	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 _sprintf
  00620	83 c4 14	 add	 esp, 20			; 00000014H

; 1447 : 			}
; 1448 : 			else

  00623	e9 b8 00 00 00	 jmp	 $LN8@display_na
$LN7@display_na:

; 1449 : 				sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  00628	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0062c	74 0d		 je	 SHORT $LN24@display_na
  0062e	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00631	8b 08		 mov	 ecx, DWORD PTR [eax]
  00633	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv275[ebp], ecx
  00639	eb 24		 jmp	 SHORT $LN25@display_na
$LN24@display_na:
  0063b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00641	83 c2 4b	 add	 edx, 75			; 0000004bH
  00644	52		 push	 edx
  00645	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0064a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064f	50		 push	 eax
  00650	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00655	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv275[ebp], 0
$LN25@display_na:
  0065f	b9 01 00 00 00	 mov	 ecx, 1
  00664	85 c9		 test	 ecx, ecx
  00666	74 0c		 je	 SHORT $LN26@display_na
  00668	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv283[ebp], 0
  00672	eb 24		 jmp	 SHORT $LN27@display_na
$LN26@display_na:
  00674	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  0067a	83 c2 4b	 add	 edx, 75			; 0000004bH
  0067d	52		 push	 edx
  0067e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00683	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00688	50		 push	 eax
  00689	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0068e	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv283[ebp], 0
$LN27@display_na:
  00698	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  006a0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  006a8	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  006ac	51		 push	 ecx
  006ad	6a 00		 push	 0
  006af	8b 55 e0	 mov	 edx, DWORD PTR _wp$[ebp]
  006b2	52		 push	 edx
  006b3	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv283[ebp]
  006b9	c1 e0 02	 shl	 eax, 2
  006bc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  006c2	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  006c9	ff d2		 call	 edx
  006cb	0f b6 c0	 movzx	 eax, al
  006ce	50		 push	 eax
  006cf	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  006d4	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  006d7	51		 push	 ecx
  006d8	e8 00 00 00 00	 call	 _sprintf
  006dd	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@display_na:

; 1450 : 		}
; 1451 : 		else

  006e0	eb 11		 jmp	 SHORT $LN4@display_na
$LN3@display_na:

; 1452 : 			sprintf (buffer, "-:--.-");

  006e2	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  006e7	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  006ea	50		 push	 eax
  006eb	e8 00 00 00 00	 call	 _sprintf
  006f0	83 c4 08	 add	 esp, 8
$LN4@display_na:

; 1453 : 
; 1454 : 		set_2d_mono_font_position (left_edge + 0.1, mid_y);

  006f3	51		 push	 ecx
  006f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  006fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00701	51		 push	 ecx
  00702	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1455 : 		set_mono_font_rel_position (1.0, 3.0);

  00714	51		 push	 ecx
  00715	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0071d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00722	51		 push	 ecx
  00723	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0072b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00730	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1456 : 		print_mono_font_string (buffer);

  00735	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00738	50		 push	 eax
  00739	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1457 : 
; 1458 : 		//
; 1459 : 		// time to go
; 1460 : 		//
; 1461 : 
; 1462 : 		if ((current_flight_dynamics->velocity_z.value > 0.1) && (!kiowa_damage.navigation_computer))

  0073e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00743	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  0074b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  00753	0f 86 80 00 00
	00		 jbe	 $LN9@display_na
  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0075e	c1 e8 04	 shr	 eax, 4
  00761	83 e0 01	 and	 eax, 1
  00764	75 73		 jne	 SHORT $LN9@display_na

; 1463 : 		{
; 1464 : 			float
; 1465 : 				time_to_go,
; 1466 : 				hours,
; 1467 : 				minutes,
; 1468 : 				seconds;
; 1469 : 
; 1470 : 			time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  00766	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0076b	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$12[ebp]
  00773	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  0077b	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _time_to_go$9[ebp], xmm0

; 1471 : 			get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  00783	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _seconds$6[ebp]
  00789	50		 push	 eax
  0078a	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _minutes$7[ebp]
  00790	51		 push	 ecx
  00791	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _hours$8[ebp]
  00797	52		 push	 edx
  00798	51		 push	 ecx
  00799	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _time_to_go$9[ebp]
  007a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a6	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 1472 : 			sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  007ab	f3 0f 2c 85 60
	ff ff ff	 cvttss2si eax, DWORD PTR _seconds$6[ebp]
  007b3	50		 push	 eax
  007b4	f3 0f 2c 8d 64
	ff ff ff	 cvttss2si ecx, DWORD PTR _minutes$7[ebp]
  007bc	51		 push	 ecx
  007bd	f3 0f 2c 95 68
	ff ff ff	 cvttss2si edx, DWORD PTR _hours$8[ebp]
  007c5	52		 push	 edx
  007c6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  007cb	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007ce	50		 push	 eax
  007cf	e8 00 00 00 00	 call	 _sprintf
  007d4	83 c4 14	 add	 esp, 20			; 00000014H

; 1473 : 		}
; 1474 : 		else

  007d7	eb 11		 jmp	 SHORT $LN10@display_na
$LN9@display_na:

; 1475 : 			strcpy (buffer, "--:--:--");

  007d9	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  007de	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007e1	50		 push	 eax
  007e2	e8 00 00 00 00	 call	 _strcpy
  007e7	83 c4 08	 add	 esp, 8
$LN10@display_na:

; 1476 : 
; 1477 : 		x_adjust = -get_mono_font_string_width(buffer);

  007ea	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007f3	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv647[ebp]
  007f9	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv647[ebp]
  00801	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00808	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$13[ebp], xmm0

; 1478 : 		set_2d_mono_font_position (right_edge - 0.1, mid_y);

  00810	51		 push	 ecx
  00811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1479 : 		set_mono_font_rel_position (x_adjust, 3.0);

  00831	51		 push	 ecx
  00832	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0083a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083f	51		 push	 ecx
  00840	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$13[ebp]
  00848	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1480 : 		print_mono_font_string (buffer);

  00852	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00855	50		 push	 eax
  00856	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_na:

; 1481 : 	}
; 1482 : 
; 1483 : 	// sector:
; 1484 : 	{
; 1485 : 		int sz, sx;
; 1486 : 		entity* sec = get_local_sector_entity(gunship_position);

  0085b	8b 45 dc	 mov	 eax, DWORD PTR _gunship_position$[ebp]
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  00864	89 85 54 ff ff
	ff		 mov	 DWORD PTR _sec$3[ebp], eax

; 1487 : 
; 1488 : 		sx = get_local_entity_int_value(sec, INT_TYPE_X_SECTOR);

  0086a	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _sec$3[ebp], 0
  00871	74 10		 je	 SHORT $LN28@display_na
  00873	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _sec$3[ebp]
  00879	8b 08		 mov	 ecx, DWORD PTR [eax]
  0087b	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv339[ebp], ecx
  00881	eb 24		 jmp	 SHORT $LN29@display_na
$LN28@display_na:
  00883	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00889	83 c2 72	 add	 edx, 114		; 00000072H
  0088c	52		 push	 edx
  0088d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00892	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00897	50		 push	 eax
  00898	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0089d	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv339[ebp], 0
$LN29@display_na:
  008a7	b9 01 00 00 00	 mov	 ecx, 1
  008ac	85 c9		 test	 ecx, ecx
  008ae	74 0c		 je	 SHORT $LN30@display_na
  008b0	c7 85 04 ff ff
	ff 15 01 00 00	 mov	 DWORD PTR tv347[ebp], 277 ; 00000115H
  008ba	eb 24		 jmp	 SHORT $LN31@display_na
$LN30@display_na:
  008bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  008c2	83 c2 72	 add	 edx, 114		; 00000072H
  008c5	52		 push	 edx
  008c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  008cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008d0	50		 push	 eax
  008d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008d6	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN31@display_na:
  008e0	68 15 01 00 00	 push	 277			; 00000115H
  008e5	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _sec$3[ebp]
  008eb	51		 push	 ecx
  008ec	69 95 08 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv339[ebp], 1116
  008f6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv347[ebp]
  008fc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00903	ff d1		 call	 ecx
  00905	89 85 58 ff ff
	ff		 mov	 DWORD PTR _sx$4[ebp], eax

; 1489 : 		sz = get_local_entity_int_value(sec, INT_TYPE_Z_SECTOR);

  0090b	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _sec$3[ebp], 0
  00912	74 10		 je	 SHORT $LN32@display_na
  00914	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _sec$3[ebp]
  0091a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0091c	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv359[ebp], ecx
  00922	eb 24		 jmp	 SHORT $LN33@display_na
$LN32@display_na:
  00924	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  0092a	83 c2 73	 add	 edx, 115		; 00000073H
  0092d	52		 push	 edx
  0092e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00933	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00938	50		 push	 eax
  00939	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0093e	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv359[ebp], 0
$LN33@display_na:
  00948	b9 01 00 00 00	 mov	 ecx, 1
  0094d	85 c9		 test	 ecx, ecx
  0094f	74 0c		 je	 SHORT $LN34@display_na
  00951	c7 85 04 ff ff
	ff 16 01 00 00	 mov	 DWORD PTR tv367[ebp], 278 ; 00000116H
  0095b	eb 24		 jmp	 SHORT $LN35@display_na
$LN34@display_na:
  0095d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00963	83 c2 73	 add	 edx, 115		; 00000073H
  00966	52		 push	 edx
  00967	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0096c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00971	50		 push	 eax
  00972	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00977	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv367[ebp], 0
$LN35@display_na:
  00981	68 16 01 00 00	 push	 278			; 00000116H
  00986	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _sec$3[ebp]
  0098c	51		 push	 ecx
  0098d	69 95 08 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv359[ebp], 1116
  00997	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv367[ebp]
  0099d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  009a4	ff d1		 call	 ecx
  009a6	89 85 5c ff ff
	ff		 mov	 DWORD PTR _sz$5[ebp], eax

; 1490 : 
; 1491 : 		sprintf(buffer, "%d,%d", sx, sz);

  009ac	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _sz$5[ebp]
  009b2	50		 push	 eax
  009b3	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _sx$4[ebp]
  009b9	51		 push	 ecx
  009ba	68 00 00 00 00	 push	 OFFSET ??_C@_05KABNCBHK@?$CFd?0?$CFd@
  009bf	8d 55 8c	 lea	 edx, DWORD PTR _buffer$[ebp]
  009c2	52		 push	 edx
  009c3	e8 00 00 00 00	 call	 _sprintf
  009c8	83 c4 10	 add	 esp, 16			; 00000010H

; 1492 : 		set_2d_mono_font_position (left_edge, top);

  009cb	51		 push	 ecx
  009cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  009d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d9	51		 push	 ecx
  009da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  009e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1493 : 		set_mono_font_rel_position (4.0, 3.0);

  009ec	51		 push	 ecx
  009ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  009f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fa	51		 push	 ecx
  009fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00a03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a08	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1494 : 		print_mono_font_string (buffer);

  00a0d	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00a10	50		 push	 eax
  00a11	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1495 : 	}
; 1496 : 
; 1497 : 	// fuel
; 1498 : 	{
; 1499 : 		float x_adjust;
; 1500 : 		float fvalue = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 9999.0);

  00a16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a1b	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  00a23	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a2b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a2f	0f 57 c9	 xorps	 xmm1, xmm1
  00a32	66 0f 2f c8	 comisd	 xmm1, xmm0
  00a36	76 0d		 jbe	 SHORT $LN38@display_na
  00a38	0f 57 c0	 xorps	 xmm0, xmm0
  00a3b	f2 0f 11 85 04
	ff ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
  00a43	eb 68		 jmp	 SHORT $LN39@display_na
$LN38@display_na:
  00a45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a4b	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  00a53	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a5b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a5f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  00a67	76 12		 jbe	 SHORT $LN36@display_na
  00a69	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  00a71	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
  00a79	eb 22		 jmp	 SHORT $LN37@display_na
$LN36@display_na:
  00a7b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a81	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  00a89	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a91	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a95	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
$LN37@display_na:
  00a9d	f2 0f 10 85 fc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv399[ebp]
  00aa5	f2 0f 11 85 04
	ff ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
$LN39@display_na:
  00aad	f2 0f 5a 85 04
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv400[ebp]
  00ab5	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _fvalue$1[ebp], xmm0

; 1501 : 
; 1502 : 		sprintf(buffer, "%d lb", (int)fvalue);

  00abd	f3 0f 2c 85 4c
	ff ff ff	 cvttss2si eax, DWORD PTR _fvalue$1[ebp]
  00ac5	50		 push	 eax
  00ac6	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNKIPAL@?$CFd?5lb@
  00acb	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00ace	51		 push	 ecx
  00acf	e8 00 00 00 00	 call	 _sprintf
  00ad4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1503 : 		x_adjust = -get_mono_font_string_width(buffer) - 2.0;

  00ad7	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00ada	50		 push	 eax
  00adb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ae0	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv708[ebp]
  00ae6	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv708[ebp]
  00aee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00af5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00af9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00b01	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b05	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1504 : 
; 1505 : 		set_2d_mono_font_position (right_edge, top);

  00b0d	51		 push	 ecx
  00b0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	51		 push	 ecx
  00b1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00b24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b29	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1506 : 		set_mono_font_rel_position (x_adjust, 3.0);

  00b2e	51		 push	 ecx
  00b2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00b37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3c	51		 push	 ecx
  00b3d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  00b45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1507 : 		print_mono_font_string (buffer);

  00b4f	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00b52	50		 push	 eax
  00b53	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1508 : 	}
; 1509 : }

  00b58	5f		 pop	 edi
  00b59	5e		 pop	 esi
  00b5a	5b		 pop	 ebx
  00b5b	8b e5		 mov	 esp, ebp
  00b5d	5d		 pop	 ebp
  00b5e	c3		 ret	 0
?display_navigation_info@@YGXXZ ENDP			; display_navigation_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_torque_scale@@YGXXZ
_TEXT	SEGMENT
tv355 = -160						; size = 4
_v2$ = -92						; size = 4
_v1$ = -88						; size = 4
_u2$ = -84						; size = 4
_u1$ = -80						; size = 4
_buffer$ = -76						; size = 8
_y_adjust$ = -68					; size = 4
_x_adjust$ = -64					; size = 4
_y_torque$ = -60					; size = 4
_torque$ = -56						; size = 4
_tick_right$ = -52					; size = 4
_tick_left$ = -48					; size = 4
_scale_right$ = -44					; size = 4
_scale_left$ = -40					; size = 4
_scale_centre$ = -36					; size = 4
_scale_top$ = -32					; size = 4
_scale_50_torque$ = -28					; size = 4
_scale_100_torque$ = -24				; size = 4
_scale_height$ = -20					; size = 4
_box_bottom$ = -16					; size = 4
_box_top$ = -12						; size = 4
_box_end$ = -8						; size = 4
_box_start$ = -4					; size = 4
?draw_torque_scale@@YGXXZ PROC				; draw_torque_scale, COMDAT

; 1306 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1307 : 	const float
; 1308 : 		box_start = -0.94,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 1309 : 		box_end = box_start + 0.2,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 1310 : 		box_top = -0.88,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 1311 : 		box_bottom = box_top - 0.1,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 1312 : 		scale_height = 0.5,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _scale_height$[ebp], xmm0

; 1313 : 		scale_100_torque = box_top + scale_height * 100.0/120.0,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _scale_100_torque$[ebp], xmm0

; 1314 : 		scale_50_torque = box_top + scale_height * 50.0 / 120.0,

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _scale_50_torque$[ebp], xmm0

; 1315 : 		scale_top = box_top + scale_height,

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  0006f	f3 0f 11 45 e0	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 1316 : 		scale_centre = (box_end + box_start) / 2,

  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  0007c	f3 0f 11 45 dc	 movss	 DWORD PTR _scale_centre$[ebp], xmm0

; 1317 : 		scale_left = box_start + 0.085,

  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  00089	f3 0f 11 45 d8	 movss	 DWORD PTR _scale_left$[ebp], xmm0

; 1318 : 		scale_right = box_end - 0.085,

  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00096	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_right$[ebp], xmm0

; 1319 : 		tick_left = box_start + 0.07,

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  000a3	f3 0f 11 45 d0	 movss	 DWORD PTR _tick_left$[ebp], xmm0

; 1320 : 		tick_right = box_end - 0.07;

  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  000b0	f3 0f 11 45 cc	 movss	 DWORD PTR _tick_right$[ebp], xmm0

; 1321 : 
; 1322 : 	float
; 1323 : 		torque = current_flight_dynamics->combined_engine_torque.value,

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ba	f3 0f 10 80 8c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9356]
  000c2	f3 0f 11 45 c8	 movss	 DWORD PTR _torque$[ebp], xmm0

; 1324 : 		y_torque = box_top + (torque / 120.0) * scale_height,

  000c7	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  000cc	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  000d4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfec28f5c0000000
  000e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e8	f3 0f 11 45 c4	 movss	 DWORD PTR _y_torque$[ebp], xmm0

; 1325 : 		x_adjust,
; 1326 : 		y_adjust;
; 1327 : 
; 1328 : 	char
; 1329 : 		buffer[8];
; 1330 : 
; 1331 : 	int
; 1332 : 		u1, u2, v1, v2;
; 1333 : 
; 1334 : 	// draw torque scale
; 1335 : 	get_2d_int_screen_coordinates (scale_left, box_top, &u1, &v1);

  000ed	8d 45 a8	 lea	 eax, DWORD PTR _v1$[ebp]
  000f0	50		 push	 eax
  000f1	8d 4d b0	 lea	 ecx, DWORD PTR _u1$[ebp]
  000f4	51		 push	 ecx
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1336 : 	if (torque > 100.0)

  00116	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  0011b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  00123	76 74		 jbe	 SHORT $LN2@draw_torqu

; 1337 : 	{
; 1338 : 		get_2d_int_screen_coordinates (scale_right, scale_100_torque, &u2, &v2);

  00125	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  00128	50		 push	 eax
  00129	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  0012c	51		 push	 ecx
  0012d	51		 push	 ecx
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1339 : 		draw_2d_hatched_area(scale_left, box_top, scale_right+ 0.02, y_torque, MFD_COLOUR_RED);

  0014e	b8 04 00 00 00	 mov	 eax, 4
  00153	6b c8 0f	 imul	 ecx, eax, 15
  00156	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0015c	52		 push	 edx
  0015d	51		 push	 ecx
  0015e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4e147b
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	51		 push	 ecx
  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	e8 00 00 00 00	 call	 ?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_area

; 1340 : 	}
; 1341 : 	else

  00197	eb 26		 jmp	 SHORT $LN3@draw_torqu
$LN2@draw_torqu:

; 1342 : 		get_2d_int_screen_coordinates (scale_right, y_torque, &u2, &v2);

  00199	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  0019c	50		 push	 eax
  0019d	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  001a0	51		 push	 ecx
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates
$LN3@draw_torqu:

; 1343 : 
; 1344 : 	set_block(u1, v2, u2, v1, MFD_COLOUR1);

  001bf	b8 04 00 00 00	 mov	 eax, 4
  001c4	6b c8 00	 imul	 ecx, eax, 0
  001c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001cd	52		 push	 edx
  001ce	8b 45 a8	 mov	 eax, DWORD PTR _v1$[ebp]
  001d1	50		 push	 eax
  001d2	8b 4d ac	 mov	 ecx, DWORD PTR _u2$[ebp]
  001d5	51		 push	 ecx
  001d6	8b 55 a4	 mov	 edx, DWORD PTR _v2$[ebp]
  001d9	52		 push	 edx
  001da	8b 45 b0	 mov	 eax, DWORD PTR _u1$[ebp]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1345 : 
; 1346 : 	draw_2d_line(scale_centre, y_torque, scale_centre, scale_top, MFD_COLOUR1);

  001e3	b8 04 00 00 00	 mov	 eax, 4
  001e8	6b c8 00	 imul	 ecx, eax, 0
  001eb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f1	52		 push	 edx
  001f2	51		 push	 ecx
  001f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	51		 push	 ecx
  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	51		 push	 ecx
  0020f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1347 : 
; 1348 : 	draw_2d_line(tick_left, scale_50_torque, tick_right, scale_50_torque, MFD_COLOUR1);

  0022c	b8 04 00 00 00	 mov	 eax, 4
  00231	6b c8 00	 imul	 ecx, eax, 0
  00234	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0023a	52		 push	 edx
  0023b	51		 push	 ecx
  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	51		 push	 ecx
  00266	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1349 : 	draw_2d_line(tick_left, scale_100_torque, tick_right, scale_100_torque, MFD_COLOUR1);

  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 00	 imul	 ecx, eax, 0
  00280	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00286	52		 push	 edx
  00287	51		 push	 ecx
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	51		 push	 ecx
  002a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  002ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b1	51		 push	 ecx
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1350 : 
; 1351 : 	// draw surrounding box
; 1352 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  002c4	b8 04 00 00 00	 mov	 eax, 4
  002c9	6b c8 00	 imul	 ecx, eax, 0
  002cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d2	52		 push	 edx
  002d3	51		 push	 ecx
  002d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	51		 push	 ecx
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	51		 push	 ecx
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1353 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  00310	b8 04 00 00 00	 mov	 eax, 4
  00315	6b c8 00	 imul	 ecx, eax, 0
  00318	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031e	52		 push	 edx
  0031f	51		 push	 ecx
  00320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	51		 push	 ecx
  0032e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	51		 push	 ecx
  0033c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00349	51		 push	 ecx
  0034a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00357	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1354 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  0035c	b8 04 00 00 00	 mov	 eax, 4
  00361	6b c8 00	 imul	 ecx, eax, 0
  00364	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036a	52		 push	 edx
  0036b	51		 push	 ecx
  0036c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00374	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00379	51		 push	 ecx
  0037a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00382	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00387	51		 push	 ecx
  00388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  0039e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1355 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	6b c8 00	 imul	 ecx, eax, 0
  003b0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003b6	52		 push	 edx
  003b7	51		 push	 ecx
  003b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	51		 push	 ecx
  003d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1356 : 
; 1357 : 	// print digital readout
; 1358 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  003f4	6a 04		 push	 4
  003f6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1359 : 	y_adjust = 3.0;

  003fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00403	f3 0f 11 45 bc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1360 : 
; 1361 : 	sprintf(buffer, "%3d", (int)(torque + 0.5));

  00408	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  0040d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00415	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00419	50		 push	 eax
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0041f	8d 4d b4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00422	51		 push	 ecx
  00423	e8 00 00 00 00	 call	 _sprintf
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1362 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  0042b	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00434	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR tv355[ebp]
  0043a	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR tv355[ebp]
  00442	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00449	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00451	f3 0f 11 45 c0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 1363 : 
; 1364 : 	set_2d_mono_font_position (box_end, box_top);

  00456	51		 push	 ecx
  00457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	51		 push	 ecx
  00465	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  0046d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00472	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1365 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  00477	51		 push	 ecx
  00478	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	51		 push	 ecx
  00483	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00488	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1366 : 	print_mono_font_string(buffer);

  00492	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00495	50		 push	 eax
  00496	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1367 : }

  0049b	5f		 pop	 edi
  0049c	5e		 pop	 esi
  0049d	5b		 pop	 ebx
  0049e	8b e5		 mov	 esp, ebp
  004a0	5d		 pop	 ebp
  004a1	c3		 ret	 0
?draw_torque_scale@@YGXXZ ENDP				; draw_torque_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_heading_scale@@YGXMH@Z
_TEXT	SEGMENT
tv190 = -192						; size = 4
tv477 = -188						; size = 4
tv323 = -188						; size = 4
tv321 = -188						; size = 4
tv182 = -188						; size = 4
_buffer$1 = -120					; size = 8
_x_adjust$2 = -112					; size = 4
_command_heading$3 = -108				; size = 4
_bearing$4 = -104					; size = 4
_dz$5 = -100						; size = 4
_dx$6 = -96						; size = 4
_waypoint_position$7 = -92				; size = 12
_gunship_position$8 = -80				; size = 4
_wp$9 = -76						; size = 4
_tick_type$ = -72					; size = 4
_int_heading_step_5$ = -68				; size = 4
_loop$ = -64						; size = 4
_mod_heading_step_5$ = -60				; size = 4
_heading_step_5$ = -56					; size = 4
_u$ = -52						; size = 4
_x$ = -48						; size = 4
_mfd_vp_x_max$ = -44					; size = 4
_mfd_vp_x_min$ = -40					; size = 4
_tick_datum_bottom$ = -36				; size = 4
_tick_datum_top$ = -32					; size = 4
_tick_bottom$ = -28					; size = 4
_tick_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale@@YGXMH@Z PROC			; draw_heading_scale, COMDAT

; 1133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1134 : 	float
; 1135 : 		heading_width_ratio,
; 1136 : 		heading_tick_x_spacing,
; 1137 : 		x_adjust_single,
; 1138 : 		x_adjust_double,
; 1139 : 		y_adjust,
; 1140 : 		tick_top,
; 1141 : 		tick_bottom,
; 1142 : 		tick_datum_top,
; 1143 : 		tick_datum_bottom,
; 1144 : 		mfd_vp_x_min,
; 1145 : 		mfd_vp_x_max,
; 1146 : 		x,
; 1147 : 		u,
; 1148 : 		heading_step_5,
; 1149 : 		mod_heading_step_5;
; 1150 : 
; 1151 : 	int
; 1152 : 		loop,
; 1153 : 		int_heading_step_5,
; 1154 : 		tick_type;
; 1155 : 
; 1156 : 	//
; 1157 : 	// sort large and small mfd differences
; 1158 : 	//
; 1159 : 
; 1160 : 	set_mono_font_type (MONO_FONT_TYPE_5X9);

  0000c	6a 02		 push	 2
  0000e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1161 : 
; 1162 : 	x_adjust_single  			= -2.0;

  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0001b	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1163 : 	x_adjust_double  			= -5.0;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  00028	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1164 : 	y_adjust			  		= -12.0;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00035	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1165 : 
; 1166 : 	tick_top                   = 0.85;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00042	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_top$[ebp], xmm0

; 1167 : 	tick_bottom                = 0.85 - 0.075;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f466666
  0004f	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_bottom$[ebp], xmm0

; 1168 : 	tick_datum_top		  		= tick_top + 0.020;

  00054	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _tick_top$[ebp]
  00059	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00061	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00065	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1169 : 	tick_datum_bottom	  		= tick_bottom - 0.020;

  0006a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _tick_bottom$[ebp]
  0006f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00077	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 1170 : 
; 1171 : 	//
; 1172 : 	// adjust 2D environment for heading scale clipping
; 1173 : 	//
; 1174 : 
; 1175 : 	if (draw_main_display)

  00080	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  00087	74 33		 je	 SHORT $LN5@draw_headi

; 1176 : 	{
; 1177 : 		heading_width_ratio		= 0.65;

  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00091	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1178 : 		heading_tick_x_spacing = heading_width_ratio / 5;

  00096	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0009b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  000a3	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1179 : 		get_2d_float_screen_x_coordinate (0.0, &u);

  000a8	8d 45 cc	 lea	 eax, DWORD PTR _u$[ebp]
  000ab	50		 push	 eax
  000ac	51		 push	 ecx
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 1180 : 	}
; 1181 : 	else

  000ba	eb 36		 jmp	 SHORT $LN6@draw_headi
$LN5@draw_headi:

; 1182 : 	{
; 1183 : 		heading_width_ratio		= 0.4;

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000c4	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1184 : 		heading_tick_x_spacing = heading_width_ratio / 3;

  000c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  000ce	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40400000
  000d6	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1185 : 		get_2d_float_screen_x_coordinate (-0.4, &u);

  000db	8d 45 cc	 lea	 eax, DWORD PTR _u$[ebp]
  000de	50		 push	 eax
  000df	51		 push	 ecx
  000e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate
$LN6@draw_headi:

; 1186 : 	}
; 1187 : 
; 1188 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  00105	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  0010d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00111	51		 push	 ecx
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0012a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00132	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00136	51		 push	 ecx
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1189 : 	mfd_vp_x_min = u - (mfd_viewport_size * (heading_width_ratio * 0.5));

  00147	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  0014c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00154	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00159	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  00161	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00165	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00169	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016d	f3 0f 11 45 d8	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1190 : 	mfd_vp_x_max = u + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  00172	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  00177	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0017f	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00184	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  0018c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00190	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00194	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0019c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a0	f3 0f 11 45 d4	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1191 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	51		 push	 ecx
  001bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	51		 push	 ecx
  001cd	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1192 : 
; 1193 : 	//
; 1194 : 	// draw heading datum tick
; 1195 : 	//
; 1196 : 
; 1197 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  001e2	b8 04 00 00 00	 mov	 eax, 4
  001e7	6b c8 00	 imul	 ecx, eax, 0
  001ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f0	52		 push	 edx
  001f1	51		 push	 ecx
  001f2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	51		 push	 ecx
  001fd	0f 57 c0	 xorps	 xmm0, xmm0
  00200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00205	51		 push	 ecx
  00206	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	0f 57 c0	 xorps	 xmm0, xmm0
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1198 : 	draw_2d_line (-0.025, tick_datum_top, 0.025, tick_datum_top, MFD_COLOUR1);

  0021e	b8 04 00 00 00	 mov	 eax, 4
  00223	6b c8 00	 imul	 ecx, eax, 0
  00226	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022c	52		 push	 edx
  0022d	51		 push	 ecx
  0022e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	51		 push	 ecx
  00239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ccccccd
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	51		 push	 ecx
  00247	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  0024c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00251	51		 push	 ecx
  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  0025a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1199 : 	draw_2d_line (-0.025, tick_datum_bottom, 0.025, tick_datum_bottom, MFD_COLOUR1);

  00264	b8 04 00 00 00	 mov	 eax, 4
  00269	6b c8 00	 imul	 ecx, eax, 0
  0026c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00272	52		 push	 edx
  00273	51		 push	 ecx
  00274	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027e	51		 push	 ecx
  0027f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ccccccd
  00287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028c	51		 push	 ecx
  0028d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	51		 push	 ecx
  00298	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  002a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1200 : 
; 1201 : 	draw_2d_line (-1.0, 0.8125, 1.0, 0.8125, MFD_COLOUR1);

  002aa	b8 04 00 00 00	 mov	 eax, 4
  002af	6b c8 00	 imul	 ecx, eax, 0
  002b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002b8	52		 push	 edx
  002b9	51		 push	 ecx
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f500000
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	51		 push	 ecx
  002c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f500000
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	51		 push	 ecx
  002e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1202 : 
; 1203 : 	//
; 1204 : 	// draw command heading carat
; 1205 : 	//
; 1206 : 
; 1207 : 	if (draw_command_heading)

  002f6	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  002fa	0f 84 4e 02 00
	00		 je	 $LN16@draw_headi

; 1208 : 	{
; 1209 : 		if (!kiowa_damage.navigation_computer)

  00300	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00305	c1 e8 04	 shr	 eax, 4
  00308	83 e0 01	 and	 eax, 1
  0030b	0f 85 3d 02 00
	00		 jne	 $LN16@draw_headi

; 1210 : 		{
; 1211 : 			entity
; 1212 : 				*wp;
; 1213 : 
; 1214 : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  00311	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  0031c	89 45 b4	 mov	 DWORD PTR _wp$9[ebp], eax

; 1215 : 
; 1216 : 			if (wp)

  0031f	83 7d b4 00	 cmp	 DWORD PTR _wp$9[ebp], 0
  00323	0f 84 25 02 00
	00		 je	 $LN16@draw_headi

; 1217 : 			{
; 1218 : 				vec3d
; 1219 : 					*gunship_position,
; 1220 : 					waypoint_position;
; 1221 : 
; 1222 : 				float
; 1223 : 					dx,
; 1224 : 					dz,
; 1225 : 					bearing,
; 1226 : 					command_heading;
; 1227 : 
; 1228 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00329	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00330	74 0f		 je	 SHORT $LN20@draw_headi
  00332	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00337	8b 08		 mov	 ecx, DWORD PTR [eax]
  00339	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], ecx
  0033f	eb 24		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  00341	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00347	83 c2 5f	 add	 edx, 95			; 0000005fH
  0034a	52		 push	 edx
  0034b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00350	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0035b	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv182[ebp], 0
$LN21@draw_headi:
  00365	b9 01 00 00 00	 mov	 ecx, 1
  0036a	85 c9		 test	 ecx, ecx
  0036c	74 0c		 je	 SHORT $LN22@draw_headi
  0036e	c7 85 40 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv190[ebp], 8
  00378	eb 24		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  0037a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00380	83 c2 5f	 add	 edx, 95			; 0000005fH
  00383	52		 push	 edx
  00384	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00389	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0038e	50		 push	 eax
  0038f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00394	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv190[ebp], 0
$LN23@draw_headi:
  0039e	6a 08		 push	 8
  003a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003a6	51		 push	 ecx
  003a7	6b 95 44 ff ff
	ff 60		 imul	 edx, DWORD PTR tv182[ebp], 96
  003ae	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv190[ebp]
  003b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  003bb	ff d1		 call	 ecx
  003bd	89 45 b0	 mov	 DWORD PTR _gunship_position$8[ebp], eax

; 1229 : 
; 1230 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  003c0	8d 45 a4	 lea	 eax, DWORD PTR _waypoint_position$7[ebp]
  003c3	50		 push	 eax
  003c4	8b 4d b4	 mov	 ecx, DWORD PTR _wp$9[ebp]
  003c7	51		 push	 ecx
  003c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003ce	52		 push	 edx
  003cf	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1231 : 				dx = waypoint_position.x - gunship_position->x;

  003d4	8b 45 b0	 mov	 eax, DWORD PTR _gunship_position$8[ebp]
  003d7	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _waypoint_position$7[ebp]
  003dc	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  003e0	f3 0f 11 45 a0	 movss	 DWORD PTR _dx$6[ebp], xmm0

; 1232 : 				dz = waypoint_position.z - gunship_position->z;

  003e5	8b 45 b0	 mov	 eax, DWORD PTR _gunship_position$8[ebp]
  003e8	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _waypoint_position$7[ebp+8]
  003ed	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  003f2	f3 0f 11 45 9c	 movss	 DWORD PTR _dz$5[ebp], xmm0

; 1233 : 
; 1234 : 				bearing = atan2 (dx, dz);

  003f7	51		 push	 ecx
  003f8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _dz$5[ebp]
  003fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00402	51		 push	 ecx
  00403	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _dx$6[ebp]
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00412	d9 5d 98	 fstp	 DWORD PTR _bearing$4[ebp]

; 1235 : 				command_heading = bearing - heading;

  00415	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _bearing$4[ebp]
  0041a	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  0041f	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0

; 1236 : 
; 1237 : 				if (command_heading > rad (180.0))

  00424	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00429	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  00431	76 18		 jbe	 SHORT $LN10@draw_headi

; 1238 : 					command_heading -= rad (360.0);

  00433	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00438	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00440	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00444	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0
  00449	eb 29		 jmp	 SHORT $LN12@draw_headi
$LN10@draw_headi:

; 1239 : 				else if (command_heading < rad (-180.0))

  0044b	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00450	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  00458	66 0f 2f c8	 comisd	 xmm1, xmm0
  0045c	76 16		 jbe	 SHORT $LN12@draw_headi

; 1240 : 					command_heading += rad (360.0);

  0045e	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00463	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  0046b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0046f	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0
$LN12@draw_headi:

; 1241 : 
; 1242 : 				if (command_heading < rad(-22.0))

  00474	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00479	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd893011c000000
  00481	66 0f 2f c8	 comisd	 xmm1, xmm0
  00485	76 3b		 jbe	 SHORT $LN13@draw_headi

; 1243 : 					draw_2d_mono_sprite (large_open_left_carat, -heading_width_ratio, tick_datum_bottom, MFD_COLOUR1);

  00487	b8 04 00 00 00	 mov	 eax, 4
  0048c	6b c8 00	 imul	 ecx, eax, 0
  0048f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00495	52		 push	 edx
  00496	51		 push	 ecx
  00497	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  004a6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004ad	51		 push	 ecx
  004ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b3	68 00 00 00 00	 push	 OFFSET ?large_open_left_carat@@3PADA
  004b8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
  004bd	e9 8c 00 00 00	 jmp	 $LN16@draw_headi
$LN13@draw_headi:

; 1244 : 				else if (command_heading > rad(22.0))

  004c2	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  004c7	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd893011c000000
  004cf	76 31		 jbe	 SHORT $LN15@draw_headi

; 1245 : 					draw_2d_mono_sprite (large_open_right_carat, heading_width_ratio, tick_datum_bottom, MFD_COLOUR1);

  004d1	b8 04 00 00 00	 mov	 eax, 4
  004d6	6b c8 00	 imul	 ecx, eax, 0
  004d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004df	52		 push	 edx
  004e0	51		 push	 ecx
  004e1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	51		 push	 ecx
  004ec	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  004f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f6	68 00 00 00 00	 push	 OFFSET ?large_open_right_carat@@3PADA
  004fb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1246 : 				else

  00500	eb 4c		 jmp	 SHORT $LN16@draw_headi
$LN15@draw_headi:

; 1247 : 					draw_2d_mono_sprite (large_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio) / rad (25.0))), tick_datum_bottom, MFD_COLOUR1);

  00502	b8 04 00 00 00	 mov	 eax, 4
  00507	6b c8 00	 imul	 ecx, eax, 0
  0050a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00510	52		 push	 edx
  00511	51		 push	 ecx
  00512	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051c	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00521	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  00526	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3fdbecde5a000000
  0052e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00532	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  0053a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0053e	51		 push	 ecx
  0053f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00544	68 00 00 00 00	 push	 OFFSET ?large_command_heading_carat@@3PADA
  00549	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN16@draw_headi:

; 1248 : 			}
; 1249 : 		}
; 1250 : 	}
; 1251 : 
; 1252 : 	//
; 1253 : 	// draw heading scale
; 1254 : 	//
; 1255 : 
; 1256 : 	heading_step_5 = deg (heading * 0.2);

  0054e	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00553	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0055b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  00563	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00567	f3 0f 11 45 c8	 movss	 DWORD PTR _heading_step_5$[ebp], xmm0

; 1257 : 	int_heading_step_5 = (int) heading_step_5;

  0056c	f3 0f 2c 45 c8	 cvttss2si eax, DWORD PTR _heading_step_5$[ebp]
  00571	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax

; 1258 : 	mod_heading_step_5 = heading_step_5 - (float) int_heading_step_5;

  00574	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_5$[ebp]
  00579	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _heading_step_5$[ebp]
  0057e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00582	f3 0f 11 4d c4	 movss	 DWORD PTR _mod_heading_step_5$[ebp], xmm1

; 1259 : 	int_heading_step_5 -= 5;

  00587	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  0058a	83 e8 05	 sub	 eax, 5
  0058d	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax

; 1260 : 
; 1261 : 	if (int_heading_step_5 < 0)

  00590	79 09		 jns	 SHORT $LN17@draw_headi

; 1262 : 	{
; 1263 : 		int_heading_step_5 += 72;

  00592	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  00595	83 c0 48	 add	 eax, 72			; 00000048H
  00598	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax
$LN17@draw_headi:

; 1264 : 	}
; 1265 : 
; 1266 : 	tick_type = int_heading_step_5 % 2;

  0059b	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  0059e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  005a3	79 05		 jns	 SHORT $LN28@draw_headi
  005a5	48		 dec	 eax
  005a6	83 c8 fe	 or	 eax, -2			; fffffffeH
  005a9	40		 inc	 eax
$LN28@draw_headi:
  005aa	89 45 b8	 mov	 DWORD PTR _tick_type$[ebp], eax

; 1267 : 	x = - (5.0 + mod_heading_step_5) * heading_tick_x_spacing;

  005ad	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_5$[ebp]
  005b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  005ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005c1	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  005c6	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005ca	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005ce	f3 0f 11 45 d0	 movss	 DWORD PTR _x$[ebp], xmm0

; 1268 : 
; 1269 : 	for (loop = 0; loop <= 20; loop++)

  005d3	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  005da	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  005dc	8b 45 c0	 mov	 eax, DWORD PTR _loop$[ebp]
  005df	83 c0 01	 add	 eax, 1
  005e2	89 45 c0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  005e5	83 7d c0 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  005e9	0f 8f 30 01 00
	00		 jg	 $LN3@draw_headi

; 1270 : 	{
; 1271 : 		draw_2d_line (x, tick_top, x, tick_bottom, MFD_COLOUR1);

  005ef	b8 04 00 00 00	 mov	 eax, 4
  005f4	6b c8 00	 imul	 ecx, eax, 0
  005f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fd	52		 push	 edx
  005fe	51		 push	 ecx
  005ff	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_bottom$[ebp]
  00604	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00609	51		 push	 ecx
  0060a	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  0060f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00614	51		 push	 ecx
  00615	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_top$[ebp]
  0061a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061f	51		 push	 ecx
  00620	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00625	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1272 : 
; 1273 : 		if (tick_type == 0)

  0062f	83 7d b8 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  00633	0f 85 80 00 00
	00		 jne	 $LN18@draw_headi

; 1274 : 		{
; 1275 : 			float x_adjust;
; 1276 : 			char buffer[8];
; 1277 : 
; 1278 : 			sprintf(buffer, "%03d", int_heading_step_5 * 5);

  00639	6b 45 bc 05	 imul	 eax, DWORD PTR _int_heading_step_5$[ebp], 5
  0063d	50		 push	 eax
  0063e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00643	8d 4d 88	 lea	 ecx, DWORD PTR _buffer$1[ebp]
  00646	51		 push	 ecx
  00647	e8 00 00 00 00	 call	 _sprintf
  0064c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1279 : 			x_adjust = get_mono_font_string_width(buffer) / 2;

  0064f	8d 45 88	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00658	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv477[ebp]
  0065e	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv477[ebp]
  00666	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0066e	f3 0f 11 45 90	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1280 : 
; 1281 : 			set_2d_mono_font_position (x, tick_top);

  00673	51		 push	 ecx
  00674	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_top$[ebp]
  00679	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067e	51		 push	 ecx
  0067f	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1282 : 			set_mono_font_rel_position (-x_adjust, y_adjust);

  0068e	51		 push	 ecx
  0068f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00694	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00699	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  0069e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006a5	51		 push	 ecx
  006a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ab	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1283 : 			print_mono_font_string(buffer);

  006b0	8d 45 88	 lea	 eax, DWORD PTR _buffer$1[ebp]
  006b3	50		 push	 eax
  006b4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN18@draw_headi:

; 1284 : 		}
; 1285 : 
; 1286 : 		int_heading_step_5 = (++int_heading_step_5 == 72) ? 0 : int_heading_step_5;

  006b9	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  006bc	83 c0 01	 add	 eax, 1
  006bf	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax
  006c2	83 7d bc 48	 cmp	 DWORD PTR _int_heading_step_5$[ebp], 72 ; 00000048H
  006c6	75 0c		 jne	 SHORT $LN24@draw_headi
  006c8	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv321[ebp], 0
  006d2	eb 09		 jmp	 SHORT $LN25@draw_headi
$LN24@draw_headi:
  006d4	8b 4d bc	 mov	 ecx, DWORD PTR _int_heading_step_5$[ebp]
  006d7	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv321[ebp], ecx
$LN25@draw_headi:
  006dd	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv321[ebp]
  006e3	89 55 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], edx

; 1287 : 
; 1288 : 		tick_type = !tick_type;

  006e6	83 7d b8 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  006ea	75 0c		 jne	 SHORT $LN26@draw_headi
  006ec	c7 85 44 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv323[ebp], 1
  006f6	eb 0a		 jmp	 SHORT $LN27@draw_headi
$LN26@draw_headi:
  006f8	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv323[ebp], 0
$LN27@draw_headi:
  00702	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv323[ebp]
  00708	89 45 b8	 mov	 DWORD PTR _tick_type$[ebp], eax

; 1289 : 
; 1290 : 		x += heading_tick_x_spacing;

  0070b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00710	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00715	f3 0f 11 45 d0	 movss	 DWORD PTR _x$[ebp], xmm0

; 1291 : 	}

  0071a	e9 bd fe ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1292 : 
; 1293 : 	//
; 1294 : 	// restore 2D environment
; 1295 : 	//
; 1296 : 
; 1297 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0071f	51		 push	 ecx
  00720	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00728	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072d	51		 push	 ecx
  0072e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073b	51		 push	 ecx
  0073c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00744	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00749	51		 push	 ecx
  0074a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00752	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00757	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0075c	50		 push	 eax
  0075d	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1298 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00762	51		 push	 ecx
  00763	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0076b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00770	51		 push	 ecx
  00771	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00779	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077e	51		 push	 ecx
  0077f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	51		 push	 ecx
  0078d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00795	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0079f	50		 push	 eax
  007a0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1299 : }

  007a5	5f		 pop	 edi
  007a6	5e		 pop	 esi
  007a7	5b		 pop	 ebx
  007a8	8b e5		 mov	 esp, ebp
  007aa	5d		 pop	 ebp
  007ab	c2 08 00	 ret	 8
?draw_heading_scale@@YGXMH@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_barometric_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv564 = -220						; size = 4
tv402 = -220						; size = 4
tv191 = -220						; size = 4
tv135 = -220						; size = 4
_buffer$1 = -152					; size = 8
_x_adjust$2 = -144					; size = 4
_ground_y$3 = -140					; size = 4
_loop$4 = -136						; size = 4
_y$5 = -132						; size = 4
_tick_type$6 = -128					; size = 4
_mod_scale_step_5$7 = -124				; size = 4
_int_scale_step_5$8 = -120				; size = 4
_scale_step_5$9 = -116					; size = 4
_displayed_altitude$ = -112				; size = 4
_v2$ = -108						; size = 4
_v1$ = -104						; size = 4
_u2$ = -100						; size = 4
_u1$ = -96						; size = 4
_buffer$ = -92						; size = 8
_ground_level$ = -84					; size = 4
_barometric_altitude$ = -80				; size = 4
_radar_altitude$ = -76					; size = 4
_y_adjust$ = -72					; size = 4
_x_adjust$ = -68					; size = 4
_mfd_vp_y_max$ = -64					; size = 4
_mfd_vp_y_min$ = -60					; size = 4
_v$ = -56						; size = 4
_scale_step$ = -52					; size = 4
_scale_bottom$ = -48					; size = 4
_scale_top$ = -44					; size = 4
_x4$ = -40						; size = 4
_x5$ = -36						; size = 4
_x3$ = -32						; size = 4
_x2$ = -28						; size = 4
_x1$ = -24						; size = 4
_box_bottom$ = -20					; size = 4
_box_top$ = -16						; size = 4
_box_end$ = -12						; size = 4
_box_start$ = -8					; size = 4
_y_centre$ = -4						; size = 4
?draw_barometric_altitude_scale@@YGXXZ PROC		; draw_barometric_altitude_scale, COMDAT

; 994  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 995  : 	const float
; 996  : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 997  : 		box_start = -0.98,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 998  : 		box_end = box_start + 0.20,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 999  : 		box_top = y_centre + 0.04,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 1000 : 		box_bottom = y_centre - 0.04,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 1001 : 		x1 = -0.95,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1002 : 		x2 = x1 + 0.02,

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1003 : 		x3 = x1 + 0.08,

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  0006f	f3 0f 11 45 e0	 movss	 DWORD PTR _x3$[ebp], xmm0

; 1004 : 		x5 = x1 + 0.16,

  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  0007c	f3 0f 11 45 dc	 movss	 DWORD PTR _x5$[ebp], xmm0

; 1005 : 		x4 = x5 - 0.02,

  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c28
  00089	f3 0f 11 45 d8	 movss	 DWORD PTR _x4$[ebp], xmm0

; 1006 : 		scale_top = y_centre + 0.35,

  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  00096	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 1007 : 		scale_bottom = y_centre - 0.35,

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000a3	f3 0f 11 45 d0	 movss	 DWORD PTR _scale_bottom$[ebp], xmm0

; 1008 : 		scale_step = 0.35 / 4.5;

  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d9f49f5
  000b0	f3 0f 11 45 cc	 movss	 DWORD PTR _scale_step$[ebp], xmm0

; 1009 : 
; 1010 : 	float
; 1011 : 		v,
; 1012 : 		mfd_vp_y_min,
; 1013 : 		mfd_vp_y_max,
; 1014 : 		x_adjust,
; 1015 : 		y_adjust = y_centre,

  000b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000bd	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1016 : 		radar_altitude = feet(current_flight_dynamics->radar_altitude.value),

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000c7	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  000cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000d7	f3 0f 11 45 b4	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 1017 : 		barometric_altitude = feet (current_flight_dynamics->barometric_altitude.value),

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000e1	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000f1	f3 0f 11 45 b0	 movss	 DWORD PTR _barometric_altitude$[ebp], xmm0

; 1018 : 		ground_level = barometric_altitude - radar_altitude;

  000f6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  000fb	f3 0f 5c 45 b4	 subss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  00100	f3 0f 11 45 ac	 movss	 DWORD PTR _ground_level$[ebp], xmm0

; 1019 : 
; 1020 : 
; 1021 : 	char
; 1022 : 		buffer[8];
; 1023 : 
; 1024 : 	int
; 1025 : 		u1, u2, v1, v2,
; 1026 : 		displayed_altitude = (int)((barometric_altitude + 5) / 10);

  00105	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  0010a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  00112	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  0011a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0011e	89 45 90	 mov	 DWORD PTR _displayed_altitude$[ebp], eax

; 1027 : 
; 1028 : 	// draw scale
; 1029 : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  00121	8d 45 c8	 lea	 eax, DWORD PTR _v$[ebp]
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 1030 : 
; 1031 : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_top - scale_bottom));

  00138	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  0013d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00145	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0014d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe6666660000000
  00155	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00159	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015d	f3 0f 11 45 c4	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 1032 : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_top - scale_bottom)) - 0.001;

  00162	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00167	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0016f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00177	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe6666660000000
  0017f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00183	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0018b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018f	f3 0f 11 45 c0	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 1033 : 
; 1034 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00194	51		 push	 ecx
  00195	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1035 : 
; 1036 : 	//
; 1037 : 	// draw scale
; 1038 : 	//
; 1039 : 
; 1040 : 	{
; 1041 : 		float scale_step_5 = barometric_altitude * 0.2;

  001d1	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _barometric_altitude$[ebp]
  001d6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  001de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e2	f3 0f 11 45 8c	 movss	 DWORD PTR _scale_step_5$9[ebp], xmm0

; 1042 : 		int int_scale_step_5 = (int) scale_step_5;

  001e7	f3 0f 2c 45 8c	 cvttss2si eax, DWORD PTR _scale_step_5$9[ebp]
  001ec	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1043 : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  001ef	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$8[ebp]
  001f4	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scale_step_5$9[ebp]
  001f9	f3 0f 5c c8	 subss	 xmm1, xmm0
  001fd	f3 0f 11 4d 84	 movss	 DWORD PTR _mod_scale_step_5$7[ebp], xmm1

; 1044 : 
; 1045 : 		int tick_type = (int_scale_step_5 % 2) == 0;

  00202	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  00205	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0020a	79 05		 jns	 SHORT $LN15@draw_barom
  0020c	48		 dec	 eax
  0020d	83 c8 fe	 or	 eax, -2			; fffffffeH
  00210	40		 inc	 eax
$LN15@draw_barom:
  00211	85 c0		 test	 eax, eax
  00213	75 0c		 jne	 SHORT $LN11@draw_barom
  00215	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv135[ebp], 1
  0021f	eb 0a		 jmp	 SHORT $LN12@draw_barom
$LN11@draw_barom:
  00221	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN12@draw_barom:
  0022b	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00231	89 4d 80	 mov	 DWORD PTR _tick_type$6[ebp], ecx

; 1046 : 		float y = -(5.0 + mod_scale_step_5) * scale_step;

  00234	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$7[ebp]
  00239	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  00241	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00248	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb3e93ea0000000
  00250	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00254	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1047 : 		int loop;
; 1048 : 		float ground_y = -1.0;

  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00264	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ground_y$3[ebp], xmm0

; 1049 : 
; 1050 : 		int_scale_step_5 -= 5;

  0026c	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  0026f	83 e8 05	 sub	 eax, 5
  00272	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1051 : 
; 1052 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00275	6a 01		 push	 1
  00277	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1053 : 		y_adjust = -2.0;

  0027c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00284	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1054 : 
; 1055 : 		for (loop = 0; loop <= 10; loop++)

  00289	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _loop$4[ebp], 0
  00293	eb 0f		 jmp	 SHORT $LN4@draw_barom
$LN2@draw_barom:
  00295	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _loop$4[ebp]
  0029b	83 c0 01	 add	 eax, 1
  0029e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _loop$4[ebp], eax
$LN4@draw_barom:
  002a4	83 bd 78 ff ff
	ff 0a		 cmp	 DWORD PTR _loop$4[ebp], 10 ; 0000000aH
  002ab	0f 8f 17 02 00
	00		 jg	 $LN3@draw_barom

; 1056 : 		{
; 1057 : 			if (int_scale_step_5 * 5 > (ground_level + 5))

  002b1	6b 45 88 05	 imul	 eax, DWORD PTR _int_scale_step_5$8[ebp], 5
  002b5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002b9	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _ground_level$[ebp]
  002be	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@40a00000
  002c6	0f 2f c1	 comiss	 xmm0, xmm1
  002c9	0f 86 8f 01 00
	00		 jbe	 $LN5@draw_barom

; 1058 : 			{
; 1059 : 				if (tick_type == 0)

  002cf	83 7d 80 00	 cmp	 DWORD PTR _tick_type$6[ebp], 0
  002d3	0f 85 37 01 00
	00		 jne	 $LN7@draw_barom

; 1060 : 				{
; 1061 : 					float x_adjust;
; 1062 : 					char buffer[8];
; 1063 : 
; 1064 : 					draw_2d_line (x1, y, x2, y, MFD_COLOUR1);

  002d9	b8 04 00 00 00	 mov	 eax, 4
  002de	6b c8 00	 imul	 ecx, eax, 0
  002e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002e7	52		 push	 edx
  002e8	51		 push	 ecx
  002e9	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	51		 push	 ecx
  002f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  002ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00304	51		 push	 ecx
  00305	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1065 : 					draw_2d_line (x4, y, x5, y, MFD_COLOUR1);

  00325	b8 04 00 00 00	 mov	 eax, 4
  0032a	6b c8 00	 imul	 ecx, eax, 0
  0032d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00333	52		 push	 edx
  00334	51		 push	 ecx
  00335	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0033d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00342	51		 push	 ecx
  00343	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	51		 push	 ecx
  00351	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035e	51		 push	 ecx
  0035f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c28
  00367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1066 : 
; 1067 : 					sprintf(buffer, "%02d", (int_scale_step_5 * 5) % 100);

  00371	6b 45 88 05	 imul	 eax, DWORD PTR _int_scale_step_5$8[ebp], 5
  00375	99		 cdq
  00376	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0037b	f7 f9		 idiv	 ecx
  0037d	52		 push	 edx
  0037e	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00383	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _buffer$1[ebp]
  00389	52		 push	 edx
  0038a	e8 00 00 00 00	 call	 _sprintf
  0038f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1068 : 					x_adjust = get_mono_font_string_width(buffer) / 2;

  00392	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0039e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv402[ebp]
  003a4	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv402[ebp]
  003ac	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  003b4	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1069 : 
; 1070 : 					set_2d_mono_font_position (x3, y);

  003bc	51		 push	 ecx
  003bd	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1071 : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  003dd	51		 push	 ecx
  003de	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  003f0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003f7	51		 push	 ecx
  003f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1072 : 					print_mono_font_string(buffer);

  00402	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00408	50		 push	 eax
  00409	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1073 : 				}
; 1074 : 				else

  0040e	eb 4c		 jmp	 SHORT $LN8@draw_barom
$LN7@draw_barom:

; 1075 : 					draw_2d_line (x3 - 0.02, y, x3 + 0.02, y, MFD_COLOUR1);

  00410	b8 04 00 00 00	 mov	 eax, 4
  00415	6b c8 00	 imul	 ecx, eax, 0
  00418	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0041e	52		 push	 edx
  0041f	51		 push	 ecx
  00420	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	51		 push	 ecx
  0042e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00436	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043b	51		 push	 ecx
  0043c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	51		 push	 ecx
  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  00452	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00457	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN8@draw_barom:

; 1076 : 			}
; 1077 : 			else

  0045c	eb 1f		 jmp	 SHORT $LN6@draw_barom
$LN5@draw_barom:

; 1078 : 				ground_y = max(y, ground_y);

  0045e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ground_y$3[ebp]
  00464	50		 push	 eax
  00465	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _y$5[ebp]
  0046b	51		 push	 ecx
  0046c	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00471	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00475	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ground_y$3[ebp], xmm0
$LN6@draw_barom:

; 1079 : 
; 1080 : 			int_scale_step_5++;

  0047d	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  00480	83 c0 01	 add	 eax, 1
  00483	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1081 : 			tick_type = !tick_type;

  00486	83 7d 80 00	 cmp	 DWORD PTR _tick_type$6[ebp], 0
  0048a	75 0c		 jne	 SHORT $LN13@draw_barom
  0048c	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv191[ebp], 1
  00496	eb 0a		 jmp	 SHORT $LN14@draw_barom
$LN13@draw_barom:
  00498	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
$LN14@draw_barom:
  004a2	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv191[ebp]
  004a8	89 45 80	 mov	 DWORD PTR _tick_type$6[ebp], eax

; 1082 : 			y += scale_step;

  004ab	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  004b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d9f49f5
  004bb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1083 : 		}

  004c3	e9 cd fd ff ff	 jmp	 $LN2@draw_barom
$LN3@draw_barom:

; 1084 : 
; 1085 : 		if (ground_y != -1.0)

  004c8	f3 0f 5a 85 74
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _ground_y$3[ebp]
  004d0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  004d8	9f		 lahf
  004d9	f6 c4 44	 test	 ah, 68			; 00000044H
  004dc	7b 4c		 jnp	 SHORT $LN9@draw_barom

; 1086 : 			draw_2d_hatched_area(x1, -0.5, x5, ground_y, MFD_COLOUR_RED);

  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 0f	 imul	 ecx, eax, 15
  004e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ec	52		 push	 edx
  004ed	51		 push	 ecx
  004ee	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _ground_y$3[ebp]
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	51		 push	 ecx
  0050a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	51		 push	 ecx
  00518	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00525	e8 00 00 00 00	 call	 ?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_area
$LN9@draw_barom:

; 1087 : 	}
; 1088 : 
; 1089 : 	//
; 1090 : 	// restore 2D environment
; 1091 : 	//
; 1092 : 
; 1093 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0052a	51		 push	 ecx
  0052b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	51		 push	 ecx
  00539	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	51		 push	 ecx
  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	51		 push	 ecx
  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0055d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00562	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00567	50		 push	 eax
  00568	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1094 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0056d	51		 push	 ecx
  0056e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	51		 push	 ecx
  0057c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005aa	50		 push	 eax
  005ab	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1095 : 
; 1096 : 	// draw box around
; 1097 : 	draw_2d_line (x1, scale_top, x5, scale_top, MFD_COLOUR1);

  005b0	b8 04 00 00 00	 mov	 eax, 4
  005b5	6b c8 00	 imul	 ecx, eax, 0
  005b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005be	52		 push	 edx
  005bf	51		 push	 ecx
  005c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  005c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cd	51		 push	 ecx
  005ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  005d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005db	51		 push	 ecx
  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	51		 push	 ecx
  005ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1098 : 	draw_2d_line (x1, scale_bottom, x5, scale_bottom, MFD_COLOUR1);

  005fc	b8 04 00 00 00	 mov	 eax, 4
  00601	6b c8 00	 imul	 ecx, eax, 0
  00604	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0060a	52		 push	 edx
  0060b	51		 push	 ecx
  0060c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00619	51		 push	 ecx
  0061a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  00622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00627	51		 push	 ecx
  00628	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00635	51		 push	 ecx
  00636	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0063e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00643	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1099 : 	draw_2d_line (x1, scale_top, x1, scale_bottom, MFD_COLOUR1);

  00648	b8 04 00 00 00	 mov	 eax, 4
  0064d	6b c8 00	 imul	 ecx, eax, 0
  00650	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00656	52		 push	 edx
  00657	51		 push	 ecx
  00658	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	51		 push	 ecx
  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	51		 push	 ecx
  00674	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	51		 push	 ecx
  00682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0068a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1100 : 	draw_2d_line (x5, scale_top, x5, scale_bottom, MFD_COLOUR1);

  00694	b8 04 00 00 00	 mov	 eax, 4
  00699	6b c8 00	 imul	 ecx, eax, 0
  0069c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006a2	52		 push	 edx
  006a3	51		 push	 ecx
  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	51		 push	 ecx
  006b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  006ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bf	51		 push	 ecx
  006c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	51		 push	 ecx
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1101 : 
; 1102 : 	// draw box with digital altitude readout
; 1103 : 
; 1104 : 	// clear background area
; 1105 : 	get_2d_int_screen_coordinates (box_start, box_top, &u1, &v1);

  006e0	8d 45 98	 lea	 eax, DWORD PTR _v1$[ebp]
  006e3	50		 push	 eax
  006e4	8d 4d a0	 lea	 ecx, DWORD PTR _u1$[ebp]
  006e7	51		 push	 ecx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	51		 push	 ecx
  006f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1106 : 	get_2d_int_screen_coordinates (box_end, box_bottom, &u2, &v2);

  00709	8d 45 94	 lea	 eax, DWORD PTR _v2$[ebp]
  0070c	50		 push	 eax
  0070d	8d 4d 9c	 lea	 ecx, DWORD PTR _u2$[ebp]
  00710	51		 push	 ecx
  00711	51		 push	 ecx
  00712	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  0071a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071f	51		 push	 ecx
  00720	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  00728	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1107 : 	set_block(u1, v1, u2, v2, MFD_BACKGROUND_COLOUR);

  00732	b8 04 00 00 00	 mov	 eax, 4
  00737	6b c8 09	 imul	 ecx, eax, 9
  0073a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00740	52		 push	 edx
  00741	8b 45 94	 mov	 eax, DWORD PTR _v2$[ebp]
  00744	50		 push	 eax
  00745	8b 4d 9c	 mov	 ecx, DWORD PTR _u2$[ebp]
  00748	51		 push	 ecx
  00749	8b 55 98	 mov	 edx, DWORD PTR _v1$[ebp]
  0074c	52		 push	 edx
  0074d	8b 45 a0	 mov	 eax, DWORD PTR _u1$[ebp]
  00750	50		 push	 eax
  00751	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1108 : 
; 1109 : 	// draw surrounding box
; 1110 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  00756	b8 04 00 00 00	 mov	 eax, 4
  0075b	6b c8 00	 imul	 ecx, eax, 0
  0075e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00764	52		 push	 edx
  00765	51		 push	 ecx
  00766	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0076e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00773	51		 push	 ecx
  00774	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0078a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078f	51		 push	 ecx
  00790	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1111 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  007a2	b8 04 00 00 00	 mov	 eax, 4
  007a7	6b c8 00	 imul	 ecx, eax, 0
  007aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007b0	52		 push	 edx
  007b1	51		 push	 ecx
  007b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  007ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bf	51		 push	 ecx
  007c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  007c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cd	51		 push	 ecx
  007ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  007d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007db	51		 push	 ecx
  007dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  007e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1112 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	6b c8 00	 imul	 ecx, eax, 0
  007f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007fc	52		 push	 edx
  007fd	51		 push	 ecx
  007fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00806	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080b	51		 push	 ecx
  0080c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00814	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00819	51		 push	 ecx
  0081a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  00822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00827	51		 push	 ecx
  00828	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00830	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00835	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1113 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 00	 imul	 ecx, eax, 0
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00848	52		 push	 edx
  00849	51		 push	 ecx
  0084a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00852	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00857	51		 push	 ecx
  00858	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  00860	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00865	51		 push	 ecx
  00866	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0086e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00873	51		 push	 ecx
  00874	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0087c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00881	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1114 : 
; 1115 : 	// print digital readout
; 1116 : 
; 1117 : 	set_mono_font_type (MONO_FONT_TYPE_5X7);

  00886	6a 01		 push	 1
  00888	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1118 : 	y_adjust = -2.0;

  0088d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00895	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1119 : 
; 1120 : 	sprintf(buffer, "%3do", displayed_altitude);

  0089a	8b 45 90	 mov	 eax, DWORD PTR _displayed_altitude$[ebp]
  0089d	50		 push	 eax
  0089e	68 00 00 00 00	 push	 OFFSET ??_C@_04HPNJOLEN@?$CF3do@
  008a3	8d 4d a4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  008a6	51		 push	 ecx
  008a7	e8 00 00 00 00	 call	 _sprintf
  008ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1121 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  008af	8d 45 a4	 lea	 eax, DWORD PTR _buffer$[ebp]
  008b2	50		 push	 eax
  008b3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  008b8	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv564[ebp]
  008be	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv564[ebp]
  008c6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008cd	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  008d5	f3 0f 11 45 bc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 1122 : 
; 1123 : 	set_2d_mono_font_position (box_end, y_centre);

  008da	51		 push	 ecx
  008db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  008e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1124 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  008fb	51		 push	 ecx
  008fc	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00901	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00906	51		 push	 ecx
  00907	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0090c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00911	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1125 : 	print_mono_font_string(buffer);

  00916	8d 45 a4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00919	50		 push	 eax
  0091a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1126 : }

  0091f	5f		 pop	 edi
  00920	5e		 pop	 esi
  00921	5b		 pop	 ebx
  00922	8b e5		 mov	 esp, ebp
  00924	5d		 pop	 ebp
  00925	c3		 ret	 0
?draw_barometric_altitude_scale@@YGXXZ ENDP		; draw_barometric_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_radar_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv223 = -164						; size = 8
tv207 = -164						; size = 8
tv178 = -164						; size = 8
tv81 = -164						; size = 8
tv224 = -156						; size = 8
tv208 = -156						; size = 8
tv179 = -156						; size = 8
tv82 = -156						; size = 8
tv405 = -152						; size = 4
_i$1 = -84						; size = 4
_current_y$2 = -80					; size = 4
_high_step$3 = -76					; size = 4
_low_step$4 = -72					; size = 4
_high_height$5 = -68					; size = 4
_low_height$6 = -64					; size = 4
_scale_height$7 = -60					; size = 4
_roc$8 = -56						; size = 4
_buffer$ = -52						; size = 8
_radar_altitude$ = -44					; size = 4
_y_adjust$ = -40					; size = 4
_x_adjust$ = -36					; size = 4
_box_end$ = -32						; size = 4
_box_start$ = -28					; size = 4
_tick_end$ = -24					; size = 4
_x_end$ = -20						; size = 4
_x_start$ = -16						; size = 4
_box_bottom$ = -12					; size = 4
_box_top$ = -8						; size = 4
_y_centre$ = -4						; size = 4
?draw_radar_altitude_scale@@YGXXZ PROC			; draw_radar_altitude_scale, COMDAT

; 900  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 901  : 	const float
; 902  : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 903  : 		box_top = y_centre + 0.05,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 904  : 		box_bottom = y_centre - 0.05;

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 905  : 
; 906  : 	float
; 907  : 		x_start,
; 908  : 		x_end,
; 909  : 		tick_end,
; 910  : 		box_start,
; 911  : 		box_end,
; 912  : 		x_adjust,
; 913  : 		y_adjust = y_centre,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0003b	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 914  : 		radar_altitude = bound(feet(current_flight_dynamics->radar_altitude.value), 0.0, 500.0);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00045	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  0004d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00055	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00059	0f 57 c9	 xorps	 xmm1, xmm1
  0005c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00060	76 0d		 jbe	 SHORT $LN11@draw_radar
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv82[ebp], xmm0
  0006d	eb 68		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00075	f3 0f 10 81 44
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9284]
  0007d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00085	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00089	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@407f400000000000
  00091	76 12		 jbe	 SHORT $LN9@draw_radar
  00093	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@407f400000000000
  0009b	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv81[ebp], xmm0
  000a3	eb 22		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ab	f3 0f 10 82 44
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9284]
  000b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000bb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000bf	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv81[ebp], xmm0
$LN10@draw_radar:
  000c7	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv81[ebp]
  000cf	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv82[ebp], xmm0
$LN12@draw_radar:
  000d7	f2 0f 5a 85 64
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv82[ebp]
  000df	f3 0f 11 45 d4	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 915  : 
; 916  : 	char
; 917  : 		buffer[8];
; 918  : 
; 919  : 	if (draw_main_display)

  000e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  000eb	74 0f		 je	 SHORT $LN5@draw_radar

; 920  : 		x_start = -0.76;

  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  000f5	f3 0f 11 45 f0	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 921  : 	else

  000fa	eb 0d		 jmp	 SHORT $LN6@draw_radar
$LN5@draw_radar:

; 922  : 		x_start = -0.98;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00104	f3 0f 11 45 f0	 movss	 DWORD PTR _x_start$[ebp], xmm0
$LN6@draw_radar:

; 923  : 
; 924  : 	x_end = x_start + 0.04;

  00109	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _x_start$[ebp]
  0010e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00116	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011a	f3 0f 11 45 ec	 movss	 DWORD PTR _x_end$[ebp], xmm0

; 925  : 	tick_end = x_end + 0.02;

  0011f	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x_end$[ebp]
  00124	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0012c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00130	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_end$[ebp], xmm0

; 926  : 	box_start = x_start + 0.07;

  00135	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _x_start$[ebp]
  0013a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb1eb851eb851ec
  00142	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00146	f3 0f 11 45 e4	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 927  : 	box_end = box_start + 0.18;

  0014b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _box_start$[ebp]
  00150	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  00158	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015c	f3 0f 11 45 e0	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 928  : 
; 929  : 	// draw box with digital radar altitude readout
; 930  : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  00161	b8 04 00 00 00	 mov	 eax, 4
  00166	6b c8 00	 imul	 ecx, eax, 0
  00169	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0016f	52		 push	 edx
  00170	51		 push	 ecx
  00171	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	51		 push	 ecx
  0017f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	51		 push	 ecx
  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 931  : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  001a7	b8 04 00 00 00	 mov	 eax, 4
  001ac	6b c8 00	 imul	 ecx, eax, 0
  001af	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001b5	52		 push	 edx
  001b6	51		 push	 ecx
  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	51		 push	 ecx
  001c5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	51		 push	 ecx
  001de	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 932  : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  001ed	b8 04 00 00 00	 mov	 eax, 4
  001f2	6b c8 00	 imul	 ecx, eax, 0
  001f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001fb	52		 push	 edx
  001fc	51		 push	 ecx
  001fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	51		 push	 ecx
  0020b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	51		 push	 ecx
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	51		 push	 ecx
  00224	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  00229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 933  : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  00233	b8 04 00 00 00	 mov	 eax, 4
  00238	6b c8 00	 imul	 ecx, eax, 0
  0023b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00241	52		 push	 edx
  00242	51		 push	 ecx
  00243	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	51		 push	 ecx
  00251	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  00256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025b	51		 push	 ecx
  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	51		 push	 ecx
  0026a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  0026f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00274	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 934  : 
; 935  : 	draw_2d_line(x_start, y_centre, box_start, y_centre, MFD_COLOUR1);

  00279	b8 04 00 00 00	 mov	 eax, 4
  0027e	6b c8 00	 imul	 ecx, eax, 0
  00281	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00287	52		 push	 edx
  00288	51		 push	 ecx
  00289	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	51		 push	 ecx
  00297	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  0029c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a1	51		 push	 ecx
  002a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  002aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002af	51		 push	 ecx
  002b0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 936  : 
; 937  : 	// rate_of_climb
; 938  : 	{
; 939  : 		float roc = bound(current_flight_dynamics->world_velocity_y.value * 0.05, -0.2, 0.2);

  002bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c4	f3 0f 5a 80 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8468]
  002cc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002d4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfc999999999999a
  002dc	66 0f 2f c8	 comisd	 xmm1, xmm0
  002e0	76 12		 jbe	 SHORT $LN15@draw_radar
  002e2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfc999999999999a
  002ea	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv179[ebp], xmm0
  002f2	eb 60		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:
  002f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002fa	f3 0f 5a 81 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+8468]
  00302	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0030a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fc999999999999a
  00312	76 12		 jbe	 SHORT $LN13@draw_radar
  00314	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0031c	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv178[ebp], xmm0
  00324	eb 1e		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:
  00326	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0032c	f3 0f 5a 82 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [edx+8468]
  00334	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0033c	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv178[ebp], xmm0
$LN14@draw_radar:
  00344	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv178[ebp]
  0034c	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv179[ebp], xmm0
$LN16@draw_radar:
  00354	f2 0f 5a 85 64
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv179[ebp]
  0035c	f3 0f 11 45 c8	 movss	 DWORD PTR _roc$8[ebp], xmm0

; 940  : 		draw_2d_mono_sprite (large_left_carat, x_end, y_centre + roc, MFD_COLOUR1);

  00361	b8 04 00 00 00	 mov	 eax, 4
  00366	6b c8 00	 imul	 ecx, eax, 0
  00369	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036f	52		 push	 edx
  00370	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00378	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _roc$8[ebp]
  0037d	51		 push	 ecx
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038e	68 00 00 00 00	 push	 OFFSET ?large_left_carat@@3PADA
  00393	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 941  : 	}
; 942  : 
; 943  : 	// print digital readout
; 944  : 
; 945  : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  00398	6a 04		 push	 4
  0039a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 946  : 	y_adjust = -4.0;

  0039f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  003a7	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 947  : 
; 948  : 	sprintf(buffer, "%3d", (int)radar_altitude);

  003ac	f3 0f 2c 45 d4	 cvttss2si eax, DWORD PTR _radar_altitude$[ebp]
  003b1	50		 push	 eax
  003b2	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  003b7	8d 4d cc	 lea	 ecx, DWORD PTR _buffer$[ebp]
  003ba	51		 push	 ecx
  003bb	e8 00 00 00 00	 call	 _sprintf
  003c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 949  : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  003c3	8d 45 cc	 lea	 eax, DWORD PTR _buffer$[ebp]
  003c6	50		 push	 eax
  003c7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003cc	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR tv405[ebp]
  003d2	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv405[ebp]
  003da	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003e1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  003e9	f3 0f 11 45 dc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 950  : 
; 951  : 	set_2d_mono_font_position (box_end, y_centre);

  003ee	51		 push	 ecx
  003ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  003f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fc	51		 push	 ecx
  003fd	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 952  : 	set_mono_font_rel_position (x_adjust, y_adjust);

  0040c	51		 push	 ecx
  0040d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	51		 push	 ecx
  00418	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 953  : 	print_mono_font_string(buffer);

  00427	8d 45 cc	 lea	 eax, DWORD PTR _buffer$[ebp]
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 954  : 
; 955  : 	// draw altitude scale
; 956  : 	{
; 957  : 		const float
; 958  : 			scale_height = 0.6,

  00430	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00438	f3 0f 11 45 c4	 movss	 DWORD PTR _scale_height$7[ebp], xmm0

; 959  : 			low_height = scale_height * 0.75,

  0043d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66667
  00445	f3 0f 11 45 c0	 movss	 DWORD PTR _low_height$6[ebp], xmm0

; 960  : 			high_height = scale_height - low_height,

  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00452	f3 0f 11 45 bc	 movss	 DWORD PTR _high_height$5[ebp], xmm0

; 961  : 			low_step = low_height / 3,

  00457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0045f	f3 0f 11 45 b8	 movss	 DWORD PTR _low_step$4[ebp], xmm0

; 962  : 			high_step = high_height / 2;

  00464	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0046c	f3 0f 11 45 b4	 movss	 DWORD PTR _high_step$3[ebp], xmm0

; 963  : 
; 964  : 		float
; 965  : 			current_y;
; 966  : 
; 967  : 		int i;
; 968  : 
; 969  : 		// adjust start of altitude scale
; 970  : 		current_y = y_centre;

  00471	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00479	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 971  : 		current_y -= bound(radar_altitude, 0.0, 300.0) * low_step * 0.01;

  0047e	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00483	0f 57 c9	 xorps	 xmm1, xmm1
  00486	66 0f 2f c8	 comisd	 xmm1, xmm0
  0048a	76 0d		 jbe	 SHORT $LN19@draw_radar
  0048c	0f 57 c0	 xorps	 xmm0, xmm0
  0048f	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv208[ebp], xmm0
  00497	eb 3e		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:
  00499	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  0049e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4072c00000000000
  004a6	76 12		 jbe	 SHORT $LN17@draw_radar
  004a8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4072c00000000000
  004b0	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
  004b8	eb 0d		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:
  004ba	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  004bf	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
$LN18@draw_radar:
  004c7	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv207[ebp]
  004cf	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv208[ebp], xmm0
$LN20@draw_radar:
  004d7	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv208[ebp]
  004df	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc3333340000000
  004e7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  004ef	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _current_y$2[ebp]
  004f4	f2 0f 5c c8	 subsd	 xmm1, xmm0
  004f8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004fc	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 972  : 		if (radar_altitude > 300)

  00501	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  00506	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@43960000
  0050d	0f 86 9b 00 00
	00		 jbe	 $LN7@draw_radar

; 973  : 			current_y -= bound(radar_altitude - 300.0, 0.0, 200.0) * high_step * 0.01;

  00513	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00518	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  00520	0f 57 c9	 xorps	 xmm1, xmm1
  00523	66 0f 2f c8	 comisd	 xmm1, xmm0
  00527	76 0d		 jbe	 SHORT $LN23@draw_radar
  00529	0f 57 c0	 xorps	 xmm0, xmm0
  0052c	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv224[ebp], xmm0
  00534	eb 4e		 jmp	 SHORT $LN24@draw_radar
$LN23@draw_radar:
  00536	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  0053b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  00543	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4069000000000000
  0054b	76 12		 jbe	 SHORT $LN21@draw_radar
  0054d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4069000000000000
  00555	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv223[ebp], xmm0
  0055d	eb 15		 jmp	 SHORT $LN22@draw_radar
$LN21@draw_radar:
  0055f	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00564	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  0056c	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv223[ebp], xmm0
$LN22@draw_radar:
  00574	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv223[ebp]
  0057c	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv224[ebp], xmm0
$LN24@draw_radar:
  00584	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv224[ebp]
  0058c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb3333340000000
  00594	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0059c	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _current_y$2[ebp]
  005a1	f2 0f 5c c8	 subsd	 xmm1, xmm0
  005a5	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  005a9	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0
$LN7@draw_radar:

; 974  : 
; 975  : 		// draw main box
; 976  : 		draw_2d_line(x_start, current_y, tick_end, current_y, MFD_COLOUR1);

  005ae	b8 04 00 00 00	 mov	 eax, 4
  005b3	6b c8 00	 imul	 ecx, eax, 0
  005b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005bc	52		 push	 edx
  005bd	51		 push	 ecx
  005be	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	51		 push	 ecx
  005c9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  005ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d3	51		 push	 ecx
  005d4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	51		 push	 ecx
  005df	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 977  : 		draw_2d_line(x_start, current_y + scale_height, tick_end, current_y + scale_height, MFD_COLOUR1);

  005ee	b8 04 00 00 00	 mov	 eax, 4
  005f3	6b c8 00	 imul	 ecx, eax, 0
  005f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fc	52		 push	 edx
  005fd	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00602	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  0060a	51		 push	 ecx
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00620	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  00628	51		 push	 ecx
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00634	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00639	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 978  : 		draw_2d_line(x_start, current_y, x_start, current_y + scale_height, MFD_COLOUR1);

  0063e	b8 04 00 00 00	 mov	 eax, 4
  00643	6b c8 00	 imul	 ecx, eax, 0
  00646	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0064c	52		 push	 edx
  0064d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00652	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  0065a	51		 push	 ecx
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	51		 push	 ecx
  00661	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066b	51		 push	 ecx
  0066c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00671	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00676	51		 push	 ecx
  00677	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 979  : 		draw_2d_line(x_end, current_y, x_end, current_y + scale_height, MFD_COLOUR1);

  00686	b8 04 00 00 00	 mov	 eax, 4
  0068b	6b c8 00	 imul	 ecx, eax, 0
  0068e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00694	52		 push	 edx
  00695	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0069a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  006a2	51		 push	 ecx
  006a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a8	51		 push	 ecx
  006a9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  006ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b3	51		 push	 ecx
  006b4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  006b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006be	51		 push	 ecx
  006bf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  006c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 980  : 
; 981  : 		// draw tick marks
; 982  : 		for (i = 0; i < 3; i++)

  006ce	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  006d5	eb 09		 jmp	 SHORT $LN4@draw_radar
$LN2@draw_radar:
  006d7	8b 45 ac	 mov	 eax, DWORD PTR _i$1[ebp]
  006da	83 c0 01	 add	 eax, 1
  006dd	89 45 ac	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@draw_radar:
  006e0	83 7d ac 03	 cmp	 DWORD PTR _i$1[ebp], 3
  006e4	7d 54		 jge	 SHORT $LN3@draw_radar

; 983  : 		{
; 984  : 			current_y += low_step;

  006e6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  006eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3e19999a
  006f3	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 985  : 			draw_2d_line(x_end, current_y, tick_end, current_y, MFD_COLOUR1);

  006f8	b8 04 00 00 00	 mov	 eax, 4
  006fd	6b c8 00	 imul	 ecx, eax, 0
  00700	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00706	52		 push	 edx
  00707	51		 push	 ecx
  00708	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0070d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00712	51		 push	 ecx
  00713	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  00718	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071d	51		 push	 ecx
  0071e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00723	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00728	51		 push	 ecx
  00729	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  0072e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00733	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 986  : 		}

  00738	eb 9d		 jmp	 SHORT $LN2@draw_radar
$LN3@draw_radar:

; 987  : 
; 988  : 		current_y += high_step;

  0073a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0073f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d99999a
  00747	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 989  : 		draw_2d_line(x_end, current_y, tick_end, current_y, MFD_COLOUR1);

  0074c	b8 04 00 00 00	 mov	 eax, 4
  00751	6b c8 00	 imul	 ecx, eax, 0
  00754	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075a	52		 push	 edx
  0075b	51		 push	 ecx
  0075c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00766	51		 push	 ecx
  00767	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  0076c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00771	51		 push	 ecx
  00772	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	51		 push	 ecx
  0077d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 990  : 	}
; 991  : }

  0078c	5f		 pop	 edi
  0078d	5e		 pop	 esi
  0078e	5b		 pop	 ebx
  0078f	8b e5		 mov	 esp, ebp
  00791	5d		 pop	 ebp
  00792	c3		 ret	 0
?draw_radar_altitude_scale@@YGXXZ ENDP			; draw_radar_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_airspeed_scale@@YGXXZ
_TEXT	SEGMENT
tv570 = -208						; size = 4
tv440 = -208						; size = 4
tv226 = -208						; size = 4
tv176 = -208						; size = 4
_buffer$1 = -140					; size = 8
_x_adjust$2 = -132					; size = 4
_v2$3 = -128						; size = 4
_v1$4 = -124						; size = 4
_u2$5 = -120						; size = 4
_u1$6 = -116						; size = 4
_bottom$7 = -112					; size = 4
_top$8 = -108						; size = 4
_x_end$9 = -104						; size = 4
_x_start$10 = -100					; size = 4
_buffer$11 = -96					; size = 8
_x_adjust$12 = -88					; size = 4
_loop$13 = -84						; size = 4
_y$14 = -80						; size = 4
_tick_type$15 = -76					; size = 4
_mod_scale_step_5$16 = -72				; size = 4
_int_scale_step_5$17 = -68				; size = 4
_scale_step_5$18 = -64					; size = 4
_x7$ = -60						; size = 4
_x6$ = -56						; size = 4
_x5$ = -52						; size = 4
_x4$ = -48						; size = 4
_x3$ = -44						; size = 4
_x2$ = -40						; size = 4
_x1$ = -36						; size = 4
_mfd_vp_y_max$ = -32					; size = 4
_mfd_vp_y_min$ = -28					; size = 4
_y_adjust$ = -24					; size = 4
_airspeed$ = -20					; size = 4
_tick_y_spacing$ = -16					; size = 4
_scale_height_ratio$ = -12				; size = 4
_y_centre$ = -8						; size = 4
_v$ = -4						; size = 4
?draw_airspeed_scale@@YGXXZ PROC			; draw_airspeed_scale, COMDAT

; 761  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 762  : 	float
; 763  : 		v,
; 764  : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 f8	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 765  : 		scale_height_ratio = 0.35,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00021	f3 0f 11 45 f4	 movss	 DWORD PTR _scale_height_ratio$[ebp], xmm0

; 766  : 		tick_y_spacing = 0.27,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8a3d71
  0002e	f3 0f 11 45 f0	 movss	 DWORD PTR _tick_y_spacing$[ebp], xmm0

; 767  : 		airspeed = current_flight_dynamics->velocity_z.value,

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00038	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00040	f3 0f 11 45 ec	 movss	 DWORD PTR _airspeed$[ebp], xmm0

; 768  : 		y_adjust,
; 769  : 		mfd_vp_y_min,
; 770  : 		mfd_vp_y_max;
; 771  : 
; 772  : 	float x1, x2, x3, x4, x5, x6, x7;
; 773  : 
; 774  : 	if (draw_main_display)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  0004c	74 0f		 je	 SHORT $LN5@draw_airsp

; 775  : 		x1 = 0.41;

  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed1eb85
  00056	f3 0f 11 45 dc	 movss	 DWORD PTR _x1$[ebp], xmm0

; 776  : 	else

  0005b	eb 0d		 jmp	 SHORT $LN6@draw_airsp
$LN5@draw_airsp:

; 777  : 		x1 = -0.1;

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00065	f3 0f 11 45 dc	 movss	 DWORD PTR _x1$[ebp], xmm0
$LN6@draw_airsp:

; 778  : 
; 779  : 	x2 = x1 + 0.04;

  0006a	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0006f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00077	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007b	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 780  : 	x4 = x1 + 0.13;

  00080	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00085	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0a3d70a3d70a4
  0008d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00091	f3 0f 11 45 d0	 movss	 DWORD PTR _x4$[ebp], xmm0

; 781  : 	x3 = x4 - 0.02;

  00096	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _x4$[ebp]
  0009b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  000a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a7	f3 0f 11 45 d4	 movss	 DWORD PTR _x3$[ebp], xmm0

; 782  : 	x5 = x4 + 0.02;

  000ac	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _x4$[ebp]
  000b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  000b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bd	f3 0f 11 45 cc	 movss	 DWORD PTR _x5$[ebp], xmm0

; 783  : 	x7 = x1 + 0.26;

  000c2	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  000c7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0a3d70a3d70a4
  000cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d3	f3 0f 11 45 c4	 movss	 DWORD PTR _x7$[ebp], xmm0

; 784  : 	x6 = x7 - 0.04;

  000d8	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _x7$[ebp]
  000dd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 c8	 movss	 DWORD PTR _x6$[ebp], xmm0

; 785  : 
; 786  : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  000ee	8d 45 fc	 lea	 eax, DWORD PTR _v$[ebp]
  000f1	50		 push	 eax
  000f2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  000f7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000fe	51		 push	 ecx
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 787  : 
; 788  : 	// draw box around
; 789  : 	draw_2d_line (x1, y_centre + scale_height_ratio, x7, y_centre + scale_height_ratio, MFD_COLOUR1);

  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	6b c8 00	 imul	 ecx, eax, 0
  00111	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00117	52		 push	 edx
  00118	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0011d	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  00122	51		 push	 ecx
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	51		 push	 ecx
  00129	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00138	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  0013d	51		 push	 ecx
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	51		 push	 ecx
  00144	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 790  : 	draw_2d_line (x1, y_centre - scale_height_ratio, x7, y_centre - scale_height_ratio, MFD_COLOUR1);

  00153	b8 04 00 00 00	 mov	 eax, 4
  00158	6b c8 00	 imul	 ecx, eax, 0
  0015b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00161	52		 push	 edx
  00162	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00167	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  0016c	51		 push	 ecx
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	51		 push	 ecx
  00173	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  00178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00182	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  00187	51		 push	 ecx
  00188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018d	51		 push	 ecx
  0018e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 791  : 	draw_2d_line (x7, y_centre + scale_height_ratio, x7, y_centre - scale_height_ratio, MFD_COLOUR1);

  0019d	b8 04 00 00 00	 mov	 eax, 4
  001a2	6b c8 00	 imul	 ecx, eax, 0
  001a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001ab	52		 push	 edx
  001ac	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  001b1	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  001b6	51		 push	 ecx
  001b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bc	51		 push	 ecx
  001bd	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  001cc	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  001d1	51		 push	 ecx
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	51		 push	 ecx
  001d8	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 792  : 
; 793  : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_height_ratio));

  001e7	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001ec	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001f4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001fc	f3 0f 5a 55 f4	 cvtss2sd xmm2, DWORD PTR _scale_height_ratio$[ebp]
  00201	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00205	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00209	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020d	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 794  : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_height_ratio)) - 0.001;

  00212	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00217	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0021f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00227	f3 0f 5a 55 f4	 cvtss2sd xmm2, DWORD PTR _scale_height_ratio$[ebp]
  0022c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00230	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00234	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0023c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00240	f3 0f 11 45 e0	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 795  : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00245	51		 push	 ecx
  00246	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	51		 push	 ecx
  00251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025e	51		 push	 ecx
  0025f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	51		 push	 ecx
  0026a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 796  : 
; 797  : 	//
; 798  : 	// draw speed scale
; 799  : 	//
; 800  : 
; 801  : 	{
; 802  : 		float scale_step_5 = knots(airspeed * 0.2);

  00282	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00287	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0028f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fff0bb080000000
  00297	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029b	f3 0f 11 45 c0	 movss	 DWORD PTR _scale_step_5$18[ebp], xmm0

; 803  : 		int int_scale_step_5 = (int) scale_step_5;

  002a0	f3 0f 2c 45 c0	 cvttss2si eax, DWORD PTR _scale_step_5$18[ebp]
  002a5	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 804  : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  002a8	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$17[ebp]
  002ad	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _scale_step_5$18[ebp]
  002b2	f3 0f 5c c8	 subss	 xmm1, xmm0
  002b6	f3 0f 11 4d b8	 movss	 DWORD PTR _mod_scale_step_5$16[ebp], xmm1

; 805  : 
; 806  : 		int tick_type = (int_scale_step_5 % 2) == 0;

  002bb	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  002be	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  002c3	79 05		 jns	 SHORT $LN15@draw_airsp
  002c5	48		 dec	 eax
  002c6	83 c8 fe	 or	 eax, -2			; fffffffeH
  002c9	40		 inc	 eax
$LN15@draw_airsp:
  002ca	85 c0		 test	 eax, eax
  002cc	75 0c		 jne	 SHORT $LN11@draw_airsp
  002ce	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv176[ebp], 1
  002d8	eb 0a		 jmp	 SHORT $LN12@draw_airsp
$LN11@draw_airsp:
  002da	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv176[ebp], 0
$LN12@draw_airsp:
  002e4	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv176[ebp]
  002ea	89 4d b4	 mov	 DWORD PTR _tick_type$15[ebp], ecx

; 807  : 		float y = -(5.0 + mod_scale_step_5) * tick_y_spacing;

  002ed	f3 0f 5a 45 b8	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$16[ebp]
  002f2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  002fa	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00301	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _tick_y_spacing$[ebp]
  00306	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0030a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030e	f3 0f 11 45 b0	 movss	 DWORD PTR _y$14[ebp], xmm0

; 808  : 		int loop;
; 809  : 
; 810  : 		int_scale_step_5 -= 5;

  00313	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  00316	83 e8 05	 sub	 eax, 5
  00319	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 811  : 
; 812  : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0031c	6a 01		 push	 1
  0031e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 813  : 		y_adjust = -2.0;

  00323	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0032b	f3 0f 11 45 e8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 814  : 
; 815  : 		for (loop = 0; loop <= 10; loop++)

  00330	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _loop$13[ebp], 0
  00337	eb 09		 jmp	 SHORT $LN4@draw_airsp
$LN2@draw_airsp:
  00339	8b 45 ac	 mov	 eax, DWORD PTR _loop$13[ebp]
  0033c	83 c0 01	 add	 eax, 1
  0033f	89 45 ac	 mov	 DWORD PTR _loop$13[ebp], eax
$LN4@draw_airsp:
  00342	83 7d ac 0a	 cmp	 DWORD PTR _loop$13[ebp], 10 ; 0000000aH
  00346	0f 8f 98 01 00
	00		 jg	 $LN3@draw_airsp

; 816  : 		{
; 817  : 			if (int_scale_step_5 >= 0)

  0034c	83 7d bc 00	 cmp	 DWORD PTR _int_scale_step_5$17[ebp], 0
  00350	0f 8c 4c 01 00
	00		 jl	 $LN9@draw_airsp

; 818  : 			{
; 819  : 				if (tick_type == 0)

  00356	83 7d b4 00	 cmp	 DWORD PTR _tick_type$15[ebp], 0
  0035a	0f 85 02 01 00
	00		 jne	 $LN8@draw_airsp

; 820  : 				{
; 821  : 					float x_adjust;
; 822  : 					char buffer[8];
; 823  : 
; 824  : 					draw_2d_line (x1, y, x2, y, MFD_COLOUR1);

  00360	b8 04 00 00 00	 mov	 eax, 4
  00365	6b c8 00	 imul	 ecx, eax, 0
  00368	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036e	52		 push	 edx
  0036f	51		 push	 ecx
  00370	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037a	51		 push	 ecx
  0037b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	51		 push	 ecx
  00386	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  0038b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00390	51		 push	 ecx
  00391	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00396	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 825  : 					draw_2d_line (x6, y, x7, y, MFD_COLOUR1);

  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	6b c8 00	 imul	 ecx, eax, 0
  003a8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ae	52		 push	 edx
  003af	51		 push	 ecx
  003b0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  003b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ba	51		 push	 ecx
  003bb	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  003cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d0	51		 push	 ecx
  003d1	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x6$[ebp]
  003d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003db	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 826  : 
; 827  : 					sprintf(buffer, "%d", int_scale_step_5 * 5);

  003e0	6b 45 bc 05	 imul	 eax, DWORD PTR _int_scale_step_5$17[ebp], 5
  003e4	50		 push	 eax
  003e5	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003ea	8d 4d a0	 lea	 ecx, DWORD PTR _buffer$11[ebp]
  003ed	51		 push	 ecx
  003ee	e8 00 00 00 00	 call	 _sprintf
  003f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 828  : 					x_adjust = get_mono_font_string_width(buffer) / 2;

  003f6	8d 45 a0	 lea	 eax, DWORD PTR _buffer$11[ebp]
  003f9	50		 push	 eax
  003fa	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003ff	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv440[ebp]
  00405	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv440[ebp]
  0040d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00415	f3 0f 11 45 a8	 movss	 DWORD PTR _x_adjust$12[ebp], xmm0

; 829  : 
; 830  : 					set_2d_mono_font_position (x4, y);

  0041a	51		 push	 ecx
  0041b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00425	51		 push	 ecx
  00426	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0042b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00430	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 831  : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  00435	51		 push	 ecx
  00436	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x_adjust$12[ebp]
  00445	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0044c	51		 push	 ecx
  0044d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00452	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 832  : 					print_mono_font_string(buffer);

  00457	8d 45 a0	 lea	 eax, DWORD PTR _buffer$11[ebp]
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 833  : 				}
; 834  : 				else

  00460	eb 40		 jmp	 SHORT $LN9@draw_airsp
$LN8@draw_airsp:

; 835  : 					draw_2d_line (x3, y, x5, y, MFD_COLOUR1);

  00462	b8 04 00 00 00	 mov	 eax, 4
  00467	6b c8 00	 imul	 ecx, eax, 0
  0046a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00470	52		 push	 edx
  00471	51		 push	 ecx
  00472	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00477	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047c	51		 push	 ecx
  0047d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x5$[ebp]
  00482	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00487	51		 push	 ecx
  00488	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  0048d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00492	51		 push	 ecx
  00493	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00498	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN9@draw_airsp:

; 836  : 			}
; 837  : 
; 838  : 			int_scale_step_5++;

  004a2	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  004a5	83 c0 01	 add	 eax, 1
  004a8	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 839  : 			tick_type = !tick_type;

  004ab	83 7d b4 00	 cmp	 DWORD PTR _tick_type$15[ebp], 0
  004af	75 0c		 jne	 SHORT $LN13@draw_airsp
  004b1	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv226[ebp], 1
  004bb	eb 0a		 jmp	 SHORT $LN14@draw_airsp
$LN13@draw_airsp:
  004bd	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN14@draw_airsp:
  004c7	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv226[ebp]
  004cd	89 45 b4	 mov	 DWORD PTR _tick_type$15[ebp], eax

; 840  : 			y += tick_y_spacing;

  004d0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  004d5	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _tick_y_spacing$[ebp]
  004da	f3 0f 11 45 b0	 movss	 DWORD PTR _y$14[ebp], xmm0

; 841  : 		}

  004df	e9 55 fe ff ff	 jmp	 $LN2@draw_airsp
$LN3@draw_airsp:

; 842  : 	}
; 843  : 
; 844  : 	//
; 845  : 	// restore 2D environment
; 846  : 	//
; 847  : 
; 848  : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  004e4	51		 push	 ecx
  004e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  004fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00500	51		 push	 ecx
  00501	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050e	51		 push	 ecx
  0050f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00521	50		 push	 eax
  00522	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 849  : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00527	51		 push	 ecx
  00528	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00530	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00535	51		 push	 ecx
  00536	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	51		 push	 ecx
  00544	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0054c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00551	51		 push	 ecx
  00552	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0055a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 850  : 
; 851  : 	// draw centre box with digital airspeed
; 852  : 
; 853  : 	{
; 854  : 		float
; 855  : 			x_start = x1 + 0.04,

  0056a	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0056f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00577	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0057b	f3 0f 11 45 9c	 movss	 DWORD PTR _x_start$10[ebp], xmm0

; 856  : 			x_end = x7 + 0.02,

  00580	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _x7$[ebp]
  00585	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0058d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00591	f3 0f 11 45 98	 movss	 DWORD PTR _x_end$9[ebp], xmm0

; 857  : 			top = y_centre + 0.05,

  00596	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  0059b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  005a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a7	f3 0f 11 45 94	 movss	 DWORD PTR _top$8[ebp], xmm0

; 858  : 			bottom = y_centre - 0.05;

  005ac	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  005b1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  005b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005bd	f3 0f 11 45 90	 movss	 DWORD PTR _bottom$7[ebp], xmm0

; 859  : 
; 860  : 		int u1, u2, v1, v2;
; 861  : 
; 862  : 		float x_adjust;
; 863  : 		char buffer[8];
; 864  : 
; 865  : 		get_2d_int_screen_coordinates (x_start, top, &u1, &v1);

  005c2	8d 45 84	 lea	 eax, DWORD PTR _v1$4[ebp]
  005c5	50		 push	 eax
  005c6	8d 4d 8c	 lea	 ecx, DWORD PTR _u1$6[ebp]
  005c9	51		 push	 ecx
  005ca	51		 push	 ecx
  005cb	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  005db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e0	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 866  : 		get_2d_int_screen_coordinates (x_end, bottom, &u2, &v2);

  005e5	8d 45 80	 lea	 eax, DWORD PTR _v2$3[ebp]
  005e8	50		 push	 eax
  005e9	8d 4d 88	 lea	 ecx, DWORD PTR _u2$5[ebp]
  005ec	51		 push	 ecx
  005ed	51		 push	 ecx
  005ee	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 867  : 
; 868  : 		// clear background area
; 869  : 
; 870  : 		set_block(u1, v1, u2, v2, MFD_BACKGROUND_COLOUR);

  00608	b8 04 00 00 00	 mov	 eax, 4
  0060d	6b c8 09	 imul	 ecx, eax, 9
  00610	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00616	52		 push	 edx
  00617	8b 45 80	 mov	 eax, DWORD PTR _v2$3[ebp]
  0061a	50		 push	 eax
  0061b	8b 4d 88	 mov	 ecx, DWORD PTR _u2$5[ebp]
  0061e	51		 push	 ecx
  0061f	8b 55 84	 mov	 edx, DWORD PTR _v1$4[ebp]
  00622	52		 push	 edx
  00623	8b 45 8c	 mov	 eax, DWORD PTR _u1$6[ebp]
  00626	50		 push	 eax
  00627	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 871  : 		draw_2d_filled_triangle(x1, y_centre, x_start, top, x_start, bottom, MFD_BACKGROUND_COLOUR);

  0062c	b8 04 00 00 00	 mov	 eax, 4
  00631	6b c8 09	 imul	 ecx, eax, 9
  00634	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0063a	52		 push	 edx
  0063b	51		 push	 ecx
  0063c	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  00641	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00646	51		 push	 ecx
  00647	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  0064c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00651	51		 push	 ecx
  00652	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00657	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065c	51		 push	 ecx
  0065d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  00662	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00667	51		 push	 ecx
  00668	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0066d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00672	51		 push	 ecx
  00673	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00678	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067d	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 872  : 
; 873  : 		// draw surrounding box
; 874  : 
; 875  : 		draw_2d_line(x_start, top, x_end, top, MFD_COLOUR1);

  00682	b8 04 00 00 00	 mov	 eax, 4
  00687	6b c8 00	 imul	 ecx, eax, 0
  0068a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00690	52		 push	 edx
  00691	51		 push	 ecx
  00692	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00697	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069c	51		 push	 ecx
  0069d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	51		 push	 ecx
  006a8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  006ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b2	51		 push	 ecx
  006b3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  006b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 876  : 		draw_2d_line(x_start, bottom, x_end, bottom, MFD_COLOUR1);

  006c2	b8 04 00 00 00	 mov	 eax, 4
  006c7	6b c8 00	 imul	 ecx, eax, 0
  006ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006d0	52		 push	 edx
  006d1	51		 push	 ecx
  006d2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  006d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006dc	51		 push	 ecx
  006dd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  006e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e7	51		 push	 ecx
  006e8	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  006ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f2	51		 push	 ecx
  006f3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  006f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 877  : 		draw_2d_line(x_end, top, x_end, bottom, MFD_COLOUR1);

  00702	b8 04 00 00 00	 mov	 eax, 4
  00707	6b c8 00	 imul	 ecx, eax, 0
  0070a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00710	52		 push	 edx
  00711	51		 push	 ecx
  00712	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  00717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071c	51		 push	 ecx
  0071d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  00722	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00727	51		 push	 ecx
  00728	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  0072d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00732	51		 push	 ecx
  00733	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 878  : 		draw_2d_line(x1, y_centre, x_start, top, MFD_COLOUR1);

  00742	b8 04 00 00 00	 mov	 eax, 4
  00747	6b c8 00	 imul	 ecx, eax, 0
  0074a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00750	52		 push	 edx
  00751	51		 push	 ecx
  00752	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00757	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075c	51		 push	 ecx
  0075d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  00762	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00767	51		 push	 ecx
  00768	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0076d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00772	51		 push	 ecx
  00773	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00778	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 879  : 		draw_2d_line(x1, y_centre, x_start, bottom, MFD_COLOUR1);

  00782	b8 04 00 00 00	 mov	 eax, 4
  00787	6b c8 00	 imul	 ecx, eax, 0
  0078a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00790	52		 push	 edx
  00791	51		 push	 ecx
  00792	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  00797	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079c	51		 push	 ecx
  0079d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  007a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a7	51		 push	 ecx
  007a8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  007ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b2	51		 push	 ecx
  007b3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 880  : 
; 881  : 		// print digital readout
; 882  : 
; 883  : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  007c2	6a 05		 push	 5
  007c4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 884  : 		y_adjust = -4.0;

  007c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  007d1	f3 0f 11 45 e8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 885  : 
; 886  : 		sprintf(buffer, "%3d", (int)knots(airspeed));

  007d6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _airspeed$[ebp]
  007db	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  007e3	f3 0f 2c c0	 cvttss2si eax, xmm0
  007e7	50		 push	 eax
  007e8	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  007ed	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$1[ebp]
  007f3	51		 push	 ecx
  007f4	e8 00 00 00 00	 call	 _sprintf
  007f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 887  : 		x_adjust = -get_mono_font_string_width(buffer);

  007fc	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00802	50		 push	 eax
  00803	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00808	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv570[ebp]
  0080e	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv570[ebp]
  00816	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0081d	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 888  : 
; 889  : 		set_2d_mono_font_position (x7, y_centre);

  00825	51		 push	 ecx
  00826	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0082b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00830	51		 push	 ecx
  00831	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  00836	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 890  : 		set_mono_font_rel_position (x_adjust, y_adjust);

  00840	51		 push	 ecx
  00841	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00846	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084b	51		 push	 ecx
  0084c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  00854	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00859	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 891  : 		print_mono_font_string(buffer);

  0085e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00864	50		 push	 eax
  00865	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 892  : 	}
; 893  : }

  0086a	5f		 pop	 edi
  0086b	5e		 pop	 esi
  0086c	5b		 pop	 ebx
  0086d	8b e5		 mov	 esp, ebp
  0086f	5d		 pop	 ebp
  00870	c3		 ret	 0
?draw_airspeed_scale@@YGXXZ ENDP			; draw_airspeed_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 669  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 670  : 	int
; 671  : 		count,
; 672  : 		max_lines,
; 673  : 		i;
; 674  : 
; 675  : 	rgb_colour
; 676  : 		col;
; 677  : 
; 678  : 	float
; 679  : 		x_centre,
; 680  : 		x_delta,
; 681  : 		x_left,
; 682  : 		x_right,
; 683  : 		y;
; 684  : 
; 685  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 686  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 687  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 688  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 689  : 
; 690  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 691  : 	{
; 692  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 693  : 	}
; 694  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 695  : 	{
; 696  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 697  : 	}
; 698  : 
; 699  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 71 01 00
	00		 jge	 $LN3@draw_damag

; 700  : 	{
; 701  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 702  : 
; 703  : 		col.g = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 704  : 
; 705  : 		x_centre = sfrand1 ();

  000a5	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000af	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000bf	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000c2	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000c8	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000ce	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 706  : 
; 707  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000e3	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ed	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000f2	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000fd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00100	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00106	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00122	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00126	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 708  : 
; 709  : 		x_left = x_centre - x_delta;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00130	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 710  : 
; 711  : 		x_right = x_centre + x_delta;

  0013a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013f	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 712  : 
; 713  : 		y = sfrand1 ();

  00149	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00153	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00163	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00166	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0016c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00172	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 714  : 
; 715  : 		draw_2d_line (x_left, y, x_right, y, col);

  00187	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  0018a	50		 push	 eax
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 716  : 	}

  001bc	e9 7a fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 717  : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 639  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 640  : 	float
; 641  : 		x,
; 642  : 		y;
; 643  : 
; 644  : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 645  : 	{
; 646  : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 647  : 		{
; 648  : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 649  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 650  : 
; 651  : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 652  : 		{
; 653  : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 654  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 655  : 	}
; 656  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z PROC ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords, COMDAT

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 618  : 	ASSERT (i);

  00009	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@transform_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@transform_:

; 619  : 	ASSERT (j);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _j$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@transform_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01CBDEGOCN@j@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@transform_:

; 620  : 
; 621  : 	*i -= mfd_screen_x_min;

  00045	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 622  : 	*j -= mfd_screen_y_min;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0005e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00062	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  0006d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 623  : 
; 624  : 	*i *= mfd_screen_x_scale;

  00071	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00074	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00078	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_x_scale@@3MA
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 625  : 	*j *= mfd_screen_y_scale;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_y_scale@@3MA
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  00099	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 626  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ENDP ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ PROC ; get_main_mfd_mode_for_eo_sensor, COMDAT

; 8543 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8544 : 	kiowa_main_mfd_modes
; 8545 : 		mfd_mode;
; 8546 : 
; 8547 : 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_main_m

; 8548 : 	{
; 8549 : 		mfd_mode = KIOWA_MAIN_MFD_MODE_FLIR;

  00012	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 2
  00019	eb 25		 jmp	 SHORT $LN3@get_main_m
$LN2@get_main_m:

; 8550 : 	}
; 8551 : 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DTV)

  0001b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; eo_sensor
  00022	75 09		 jne	 SHORT $LN4@get_main_m

; 8552 : 	{
; 8553 : 		mfd_mode = KIOWA_MAIN_MFD_MODE_DTV;

  00024	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 3

; 8554 : 	}
; 8555 : 	else

  0002b	eb 13		 jmp	 SHORT $LN3@get_main_m
$LN4@get_main_m:

; 8556 : 	{
; 8557 : 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  00038	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0003d	83 c4 08	 add	 esp, 8
$LN3@get_main_m:

; 8558 : 	}
; 8559 : 
; 8560 : 	return (mfd_mode);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 8561 : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ENDP ; get_main_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_kiowa_tads_main_mfd@@YGXXZ
_TEXT	SEGMENT
?select_kiowa_tads_main_mfd@@YGXXZ PROC			; select_kiowa_tads_main_mfd, COMDAT

; 9327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9328 : 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 2b 01 00
	00		 jne	 $LN2@select_kio

; 9329 : 	{
; 9330 : 		////////////////////////////////////////
; 9331 : 		//
; 9332 : 		// PILOT
; 9333 : 		//
; 9334 : 		////////////////////////////////////////
; 9335 : 
; 9336 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!kiowa_damage.pilot_main_mfd))

  00016	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  0001d	75 1f		 jne	 SHORT $LN4@select_kio
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00024	c1 e8 08	 shr	 eax, 8
  00027	83 e0 01	 and	 eax, 1
  0002a	75 12		 jne	 SHORT $LN4@select_kio

; 9337 : 		{
; 9338 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  0002c	6a 01		 push	 1
  0002e	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9339 : 
; 9340 : 			return;

  00039	e9 1b 02 00 00	 jmp	 $LN1@select_kio
$LN4@select_kio:

; 9341 : 		}
; 9342 : 
; 9343 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!kiowa_damage.co_pilot_main_mfd))

  0003e	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  00045	75 1f		 jne	 SHORT $LN5@select_kio
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0004c	c1 e8 07	 shr	 eax, 7
  0004f	83 e0 01	 and	 eax, 1
  00052	75 12		 jne	 SHORT $LN5@select_kio

; 9344 : 		{
; 9345 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00054	6a 00		 push	 0
  00056	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9346 : 
; 9347 : 			return;

  00061	e9 f3 01 00 00	 jmp	 $LN1@select_kio
$LN5@select_kio:

; 9348 : 		}
; 9349 : 
; 9350 : 		if
; 9351 : 		(
; 9352 : 			(pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_FLIR) ||

  00066	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 2
  0006d	74 09		 je	 SHORT $LN7@select_kio
  0006f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 3
  00076	75 12		 jne	 SHORT $LN6@select_kio
$LN7@select_kio:

; 9353 : 			(pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_DTV)
; 9354 : 		)
; 9355 : 		{
; 9356 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  00078	6a 01		 push	 1
  0007a	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9357 : 
; 9358 : 			return;

  00085	e9 cf 01 00 00	 jmp	 $LN1@select_kio
$LN6@select_kio:

; 9359 : 		}
; 9360 : 
; 9361 : 		if
; 9362 : 		(
; 9363 : 			(co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_FLIR) ||

  0008a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 2
  00091	74 09		 je	 SHORT $LN9@select_kio
  00093	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 3
  0009a	75 12		 jne	 SHORT $LN8@select_kio
$LN9@select_kio:

; 9364 : 			(co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_DTV)
; 9365 : 		)
; 9366 : 		{
; 9367 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  0009c	6a 00		 push	 0
  0009e	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9368 : 
; 9369 : 			return;

  000a9	e9 ab 01 00 00	 jmp	 $LN1@select_kio
$LN8@select_kio:

; 9370 : 		}
; 9371 : 
; 9372 : 		if ((pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.pilot_main_mfd))

  000ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  000b5	75 1f		 jne	 SHORT $LN10@select_kio
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  000bc	c1 e8 08	 shr	 eax, 8
  000bf	83 e0 01	 and	 eax, 1
  000c2	75 12		 jne	 SHORT $LN10@select_kio

; 9373 : 		{
; 9374 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  000c4	6a 01		 push	 1
  000c6	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9375 : 
; 9376 : 			return;

  000d1	e9 83 01 00 00	 jmp	 $LN1@select_kio
$LN10@select_kio:

; 9377 : 		}
; 9378 : 
; 9379 : 		if ((co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.co_pilot_main_mfd))

  000d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  000dd	75 1f		 jne	 SHORT $LN11@select_kio
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  000e4	c1 e8 07	 shr	 eax, 7
  000e7	83 e0 01	 and	 eax, 1
  000ea	75 12		 jne	 SHORT $LN11@select_kio

; 9380 : 		{
; 9381 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  000ec	6a 00		 push	 0
  000ee	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9382 : 
; 9383 : 			return;

  000f9	e9 5b 01 00 00	 jmp	 $LN1@select_kio
$LN11@select_kio:

; 9384 : 		}
; 9385 : 
; 9386 : 		if (!kiowa_damage.pilot_main_mfd)

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00103	c1 e8 08	 shr	 eax, 8
  00106	83 e0 01	 and	 eax, 1
  00109	75 12		 jne	 SHORT $LN12@select_kio

; 9387 : 		{
; 9388 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  0010b	6a 01		 push	 1
  0010d	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9389 : 
; 9390 : 			return;

  00118	e9 3c 01 00 00	 jmp	 $LN1@select_kio
$LN12@select_kio:

; 9391 : 		}
; 9392 : 
; 9393 : 		if (!kiowa_damage.co_pilot_main_mfd)

  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00122	c1 e8 07	 shr	 eax, 7
  00125	83 e0 01	 and	 eax, 1
  00128	75 12		 jne	 SHORT $LN13@select_kio

; 9394 : 		{
; 9395 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  0012a	6a 00		 push	 0
  0012c	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9396 : 
; 9397 : 			return;

  00137	e9 1d 01 00 00	 jmp	 $LN1@select_kio
$LN13@select_kio:

; 9398 : 		}
; 9399 : 	}
; 9400 : 	else

  0013c	e9 18 01 00 00	 jmp	 $LN1@select_kio
$LN2@select_kio:

; 9401 : 	{
; 9402 : 		////////////////////////////////////////
; 9403 : 		//
; 9404 : 		// CO-PILOT
; 9405 : 		//
; 9406 : 		////////////////////////////////////////
; 9407 : 
; 9408 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!kiowa_damage.co_pilot_main_mfd))

  00141	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  00148	75 1f		 jne	 SHORT $LN14@select_kio
  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0014f	c1 e8 07	 shr	 eax, 7
  00152	83 e0 01	 and	 eax, 1
  00155	75 12		 jne	 SHORT $LN14@select_kio

; 9409 : 		{
; 9410 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00157	6a 00		 push	 0
  00159	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9411 : 
; 9412 : 			return;

  00164	e9 f0 00 00 00	 jmp	 $LN1@select_kio
$LN14@select_kio:

; 9413 : 		}
; 9414 : 
; 9415 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!kiowa_damage.pilot_main_mfd))

  00169	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00170	75 1f		 jne	 SHORT $LN15@select_kio
  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00177	c1 e8 08	 shr	 eax, 8
  0017a	83 e0 01	 and	 eax, 1
  0017d	75 12		 jne	 SHORT $LN15@select_kio

; 9416 : 		{
; 9417 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  0017f	6a 01		 push	 1
  00181	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9418 : 
; 9419 : 			return;

  0018c	e9 c8 00 00 00	 jmp	 $LN1@select_kio
$LN15@select_kio:

; 9420 : 		}
; 9421 : 
; 9422 : 		if
; 9423 : 		(
; 9424 : 			(co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_FLIR) ||

  00191	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 2
  00198	74 09		 je	 SHORT $LN17@select_kio
  0019a	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 3
  001a1	75 12		 jne	 SHORT $LN16@select_kio
$LN17@select_kio:

; 9425 : 			(co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_DTV)
; 9426 : 		)
; 9427 : 		{
; 9428 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  001a3	6a 00		 push	 0
  001a5	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9429 : 
; 9430 : 			return;

  001b0	e9 a4 00 00 00	 jmp	 $LN1@select_kio
$LN16@select_kio:

; 9431 : 		}
; 9432 : 
; 9433 : 		if
; 9434 : 		(
; 9435 : 			(pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_FLIR) ||

  001b5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 2
  001bc	74 09		 je	 SHORT $LN19@select_kio
  001be	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 3
  001c5	75 12		 jne	 SHORT $LN18@select_kio
$LN19@select_kio:

; 9436 : 			(pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_DTV)
; 9437 : 		)
; 9438 : 		{
; 9439 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  001c7	6a 01		 push	 1
  001c9	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9440 : 
; 9441 : 			return;

  001d4	e9 80 00 00 00	 jmp	 $LN1@select_kio
$LN18@select_kio:

; 9442 : 		}
; 9443 : 
; 9444 : 		if ((co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.co_pilot_main_mfd))

  001d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  001e0	75 1c		 jne	 SHORT $LN20@select_kio
  001e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  001e7	c1 e8 07	 shr	 eax, 7
  001ea	83 e0 01	 and	 eax, 1
  001ed	75 0f		 jne	 SHORT $LN20@select_kio

; 9445 : 		{
; 9446 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  001ef	6a 00		 push	 0
  001f1	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9447 : 
; 9448 : 			return;

  001fc	eb 5b		 jmp	 SHORT $LN1@select_kio
$LN20@select_kio:

; 9449 : 		}
; 9450 : 
; 9451 : 		if ((pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.pilot_main_mfd))

  001fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  00205	75 1c		 jne	 SHORT $LN21@select_kio
  00207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0020c	c1 e8 08	 shr	 eax, 8
  0020f	83 e0 01	 and	 eax, 1
  00212	75 0f		 jne	 SHORT $LN21@select_kio

; 9452 : 		{
; 9453 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  00214	6a 01		 push	 1
  00216	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9454 : 
; 9455 : 			return;

  00221	eb 36		 jmp	 SHORT $LN1@select_kio
$LN21@select_kio:

; 9456 : 		}
; 9457 : 
; 9458 : 		if (!kiowa_damage.co_pilot_main_mfd)

  00223	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00228	c1 e8 07	 shr	 eax, 7
  0022b	83 e0 01	 and	 eax, 1
  0022e	75 0f		 jne	 SHORT $LN22@select_kio

; 9459 : 		{
; 9460 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00230	6a 00		 push	 0
  00232	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9461 : 
; 9462 : 			return;

  0023d	eb 1a		 jmp	 SHORT $LN1@select_kio
$LN22@select_kio:

; 9463 : 		}
; 9464 : 
; 9465 : 		if (!kiowa_damage.pilot_main_mfd)

  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00244	c1 e8 08	 shr	 eax, 8
  00247	83 e0 01	 and	 eax, 1
  0024a	75 0d		 jne	 SHORT $LN1@select_kio

; 9466 : 		{
; 9467 : 			select_kiowa_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), KIOWA_MAIN_MFD_LOCATION_PILOT);

  0024c	6a 01		 push	 1
  0024e	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode
$LN1@select_kio:

; 9468 : 
; 9469 : 			return;
; 9470 : 		}
; 9471 : 	}
; 9472 : }

  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx
  0025c	8b e5		 mov	 esp, ebp
  0025e	5d		 pop	 ebp
  0025f	c3		 ret	 0
?select_kiowa_tads_main_mfd@@YGXXZ ENDP			; select_kiowa_tads_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?auto_page_kiowa_ase_main_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_kiowa_ase_main_mfd@@YGXXZ PROC		; auto_page_kiowa_ase_main_mfd, COMDAT

; 9166 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9167 : 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 05		 jne	 SHORT $LN2@auto_page_

; 9168 : 	{
; 9169 : 		return;

  00012	e9 5d 02 00 00	 jmp	 $LN1@auto_page_
$LN2@auto_page_:

; 9170 : 	}
; 9171 : 
; 9172 : 	if (get_crew_role () == CREW_ROLE_PILOT)

  00017	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0001c	85 c0		 test	 eax, eax
  0001e	0f 85 33 01 00
	00		 jne	 $LN3@auto_page_

; 9173 : 	{
; 9174 : 		////////////////////////////////////////
; 9175 : 		//
; 9176 : 		// PILOT
; 9177 : 		//
; 9178 : 		////////////////////////////////////////
; 9179 : 
; 9180 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!kiowa_damage.pilot_main_mfd))

  00024	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  0002b	75 1b		 jne	 SHORT $LN5@auto_page_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00032	c1 e8 08	 shr	 eax, 8
  00035	83 e0 01	 and	 eax, 1
  00038	75 0e		 jne	 SHORT $LN5@auto_page_

; 9181 : 		{
; 9182 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  0003a	6a 01		 push	 1
  0003c	6a 05		 push	 5
  0003e	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9183 : 
; 9184 : 			return;

  00043	e9 2c 02 00 00	 jmp	 $LN1@auto_page_
$LN5@auto_page_:

; 9185 : 		}
; 9186 : 
; 9187 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!kiowa_damage.co_pilot_main_mfd))

  00048	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0004f	75 1b		 jne	 SHORT $LN6@auto_page_
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00056	c1 e8 07	 shr	 eax, 7
  00059	83 e0 01	 and	 eax, 1
  0005c	75 0e		 jne	 SHORT $LN6@auto_page_

; 9188 : 		{
; 9189 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  0005e	6a 00		 push	 0
  00060	6a 05		 push	 5
  00062	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9190 : 
; 9191 : 			return;

  00067	e9 08 02 00 00	 jmp	 $LN1@auto_page_
$LN6@auto_page_:

; 9192 : 		}
; 9193 : 
; 9194 : 		if (pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_ASE)

  0006c	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 5
  00073	75 05		 jne	 SHORT $LN7@auto_page_

; 9195 : 		{
; 9196 : 			return;

  00075	e9 fa 01 00 00	 jmp	 $LN1@auto_page_
$LN7@auto_page_:

; 9197 : 		}
; 9198 : 
; 9199 : 		if (co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_ASE)

  0007a	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 5
  00081	75 05		 jne	 SHORT $LN8@auto_page_

; 9200 : 		{
; 9201 : 			return;

  00083	e9 ec 01 00 00	 jmp	 $LN1@auto_page_
$LN8@auto_page_:

; 9202 : 		}
; 9203 : 
; 9204 : 		if ((pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.pilot_main_mfd))

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  0008f	75 1b		 jne	 SHORT $LN9@auto_page_
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00096	c1 e8 08	 shr	 eax, 8
  00099	83 e0 01	 and	 eax, 1
  0009c	75 0e		 jne	 SHORT $LN9@auto_page_

; 9205 : 		{
; 9206 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  0009e	6a 01		 push	 1
  000a0	6a 05		 push	 5
  000a2	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9207 : 
; 9208 : 			return;

  000a7	e9 c8 01 00 00	 jmp	 $LN1@auto_page_
$LN9@auto_page_:

; 9209 : 		}
; 9210 : 
; 9211 : 		if ((co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.co_pilot_main_mfd))

  000ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  000b3	75 1b		 jne	 SHORT $LN10@auto_page_
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  000ba	c1 e8 07	 shr	 eax, 7
  000bd	83 e0 01	 and	 eax, 1
  000c0	75 0e		 jne	 SHORT $LN10@auto_page_

; 9212 : 		{
; 9213 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  000c2	6a 00		 push	 0
  000c4	6a 05		 push	 5
  000c6	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9214 : 
; 9215 : 			return;

  000cb	e9 a4 01 00 00	 jmp	 $LN1@auto_page_
$LN10@auto_page_:

; 9216 : 		}
; 9217 : 
; 9218 : 		if ((!get_kiowa_main_mfd_has_focus (KIOWA_MAIN_MFD_LOCATION_PILOT)) && (!kiowa_damage.pilot_main_mfd))

  000d0	6a 01		 push	 1
  000d2	e8 00 00 00 00	 call	 ?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_kiowa_main_mfd_has_focus
  000d7	85 c0		 test	 eax, eax
  000d9	75 1b		 jne	 SHORT $LN11@auto_page_
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  000e0	c1 e8 08	 shr	 eax, 8
  000e3	83 e0 01	 and	 eax, 1
  000e6	75 0e		 jne	 SHORT $LN11@auto_page_

; 9219 : 		{
; 9220 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  000e8	6a 01		 push	 1
  000ea	6a 05		 push	 5
  000ec	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9221 : 
; 9222 : 			return;

  000f1	e9 7e 01 00 00	 jmp	 $LN1@auto_page_
$LN11@auto_page_:

; 9223 : 		}
; 9224 : 
; 9225 : 		if ((!get_kiowa_main_mfd_has_focus (KIOWA_MAIN_MFD_LOCATION_CO_PILOT)) && (!kiowa_damage.co_pilot_main_mfd))

  000f6	6a 00		 push	 0
  000f8	e8 00 00 00 00	 call	 ?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_kiowa_main_mfd_has_focus
  000fd	85 c0		 test	 eax, eax
  000ff	75 1b		 jne	 SHORT $LN12@auto_page_
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00106	c1 e8 07	 shr	 eax, 7
  00109	83 e0 01	 and	 eax, 1
  0010c	75 0e		 jne	 SHORT $LN12@auto_page_

; 9226 : 		{
; 9227 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  0010e	6a 00		 push	 0
  00110	6a 05		 push	 5
  00112	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9228 : 
; 9229 : 			return;

  00117	e9 58 01 00 00	 jmp	 $LN1@auto_page_
$LN12@auto_page_:

; 9230 : 		}
; 9231 : 
; 9232 : 		if (!kiowa_damage.pilot_main_mfd)

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00121	c1 e8 08	 shr	 eax, 8
  00124	83 e0 01	 and	 eax, 1
  00127	75 0e		 jne	 SHORT $LN13@auto_page_

; 9233 : 		{
; 9234 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  00129	6a 01		 push	 1
  0012b	6a 05		 push	 5
  0012d	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9235 : 
; 9236 : 			return;

  00132	e9 3d 01 00 00	 jmp	 $LN1@auto_page_
$LN13@auto_page_:

; 9237 : 		}
; 9238 : 
; 9239 : 		if (!kiowa_damage.co_pilot_main_mfd)

  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0013c	c1 e8 07	 shr	 eax, 7
  0013f	83 e0 01	 and	 eax, 1
  00142	75 0e		 jne	 SHORT $LN14@auto_page_

; 9240 : 		{
; 9241 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00144	6a 00		 push	 0
  00146	6a 05		 push	 5
  00148	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9242 : 
; 9243 : 			return;

  0014d	e9 22 01 00 00	 jmp	 $LN1@auto_page_
$LN14@auto_page_:

; 9244 : 		}
; 9245 : 	}
; 9246 : 	else

  00152	e9 1d 01 00 00	 jmp	 $LN1@auto_page_
$LN3@auto_page_:

; 9247 : 	{
; 9248 : 		////////////////////////////////////////
; 9249 : 		//
; 9250 : 		// CO-PILOT
; 9251 : 		//
; 9252 : 		////////////////////////////////////////
; 9253 : 
; 9254 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!kiowa_damage.co_pilot_main_mfd))

  00157	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  0015e	75 1b		 jne	 SHORT $LN15@auto_page_
  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00165	c1 e8 07	 shr	 eax, 7
  00168	83 e0 01	 and	 eax, 1
  0016b	75 0e		 jne	 SHORT $LN15@auto_page_

; 9255 : 		{
; 9256 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  0016d	6a 00		 push	 0
  0016f	6a 05		 push	 5
  00171	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9257 : 
; 9258 : 			return;

  00176	e9 f9 00 00 00	 jmp	 $LN1@auto_page_
$LN15@auto_page_:

; 9259 : 		}
; 9260 : 
; 9261 : 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!kiowa_damage.pilot_main_mfd))

  0017b	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00182	75 1b		 jne	 SHORT $LN16@auto_page_
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00189	c1 e8 08	 shr	 eax, 8
  0018c	83 e0 01	 and	 eax, 1
  0018f	75 0e		 jne	 SHORT $LN16@auto_page_

; 9262 : 		{
; 9263 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  00191	6a 01		 push	 1
  00193	6a 05		 push	 5
  00195	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9264 : 
; 9265 : 			return;

  0019a	e9 d5 00 00 00	 jmp	 $LN1@auto_page_
$LN16@auto_page_:

; 9266 : 		}
; 9267 : 
; 9268 : 		if (co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_ASE)

  0019f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 5
  001a6	75 05		 jne	 SHORT $LN17@auto_page_

; 9269 : 		{
; 9270 : 			return;

  001a8	e9 c7 00 00 00	 jmp	 $LN1@auto_page_
$LN17@auto_page_:

; 9271 : 		}
; 9272 : 
; 9273 : 		if (pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_ASE)

  001ad	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 5
  001b4	75 05		 jne	 SHORT $LN18@auto_page_

; 9274 : 		{
; 9275 : 			return;

  001b6	e9 b9 00 00 00	 jmp	 $LN1@auto_page_
$LN18@auto_page_:

; 9276 : 		}
; 9277 : 
; 9278 : 		if ((co_pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.co_pilot_main_mfd))

  001bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  001c2	75 1b		 jne	 SHORT $LN19@auto_page_
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  001c9	c1 e8 07	 shr	 eax, 7
  001cc	83 e0 01	 and	 eax, 1
  001cf	75 0e		 jne	 SHORT $LN19@auto_page_

; 9279 : 		{
; 9280 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  001d1	6a 00		 push	 0
  001d3	6a 05		 push	 5
  001d5	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9281 : 
; 9282 : 			return;

  001da	e9 95 00 00 00	 jmp	 $LN1@auto_page_
$LN19@auto_page_:

; 9283 : 		}
; 9284 : 
; 9285 : 		if ((pilot_main_mfd_mode == KIOWA_MAIN_MFD_MODE_OFF) && (!kiowa_damage.pilot_main_mfd))

  001df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A, 0
  001e6	75 18		 jne	 SHORT $LN20@auto_page_
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  001ed	c1 e8 08	 shr	 eax, 8
  001f0	83 e0 01	 and	 eax, 1
  001f3	75 0b		 jne	 SHORT $LN20@auto_page_

; 9286 : 		{
; 9287 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  001f5	6a 01		 push	 1
  001f7	6a 05		 push	 5
  001f9	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9288 : 
; 9289 : 			return;

  001fe	eb 74		 jmp	 SHORT $LN1@auto_page_
$LN20@auto_page_:

; 9290 : 		}
; 9291 : 
; 9292 : 		if ((!get_kiowa_main_mfd_has_focus (KIOWA_MAIN_MFD_LOCATION_CO_PILOT)) && (!kiowa_damage.co_pilot_main_mfd))

  00200	6a 00		 push	 0
  00202	e8 00 00 00 00	 call	 ?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_kiowa_main_mfd_has_focus
  00207	85 c0		 test	 eax, eax
  00209	75 18		 jne	 SHORT $LN21@auto_page_
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00210	c1 e8 07	 shr	 eax, 7
  00213	83 e0 01	 and	 eax, 1
  00216	75 0b		 jne	 SHORT $LN21@auto_page_

; 9293 : 		{
; 9294 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00218	6a 00		 push	 0
  0021a	6a 05		 push	 5
  0021c	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9295 : 
; 9296 : 			return;

  00221	eb 51		 jmp	 SHORT $LN1@auto_page_
$LN21@auto_page_:

; 9297 : 		}
; 9298 : 
; 9299 : 		if ((!get_kiowa_main_mfd_has_focus (KIOWA_MAIN_MFD_LOCATION_PILOT)) && (!kiowa_damage.pilot_main_mfd))

  00223	6a 01		 push	 1
  00225	e8 00 00 00 00	 call	 ?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_kiowa_main_mfd_has_focus
  0022a	85 c0		 test	 eax, eax
  0022c	75 18		 jne	 SHORT $LN22@auto_page_
  0022e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00233	c1 e8 08	 shr	 eax, 8
  00236	83 e0 01	 and	 eax, 1
  00239	75 0b		 jne	 SHORT $LN22@auto_page_

; 9300 : 		{
; 9301 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  0023b	6a 01		 push	 1
  0023d	6a 05		 push	 5
  0023f	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9302 : 
; 9303 : 			return;

  00244	eb 2e		 jmp	 SHORT $LN1@auto_page_
$LN22@auto_page_:

; 9304 : 		}
; 9305 : 
; 9306 : 		if (!kiowa_damage.co_pilot_main_mfd)

  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  0024b	c1 e8 07	 shr	 eax, 7
  0024e	83 e0 01	 and	 eax, 1
  00251	75 0b		 jne	 SHORT $LN23@auto_page_

; 9307 : 		{
; 9308 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00253	6a 00		 push	 0
  00255	6a 05		 push	 5
  00257	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 9309 : 
; 9310 : 			return;

  0025c	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN23@auto_page_:

; 9311 : 		}
; 9312 : 
; 9313 : 		if (!kiowa_damage.pilot_main_mfd)

  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kiowa_damage@@3TKIOWA_DAMAGE_FLAGS@@A ; kiowa_damage
  00263	c1 e8 08	 shr	 eax, 8
  00266	83 e0 01	 and	 eax, 1
  00269	75 09		 jne	 SHORT $LN1@auto_page_

; 9314 : 		{
; 9315 : 			select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_PILOT);

  0026b	6a 01		 push	 1
  0026d	6a 05		 push	 5
  0026f	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode
$LN1@auto_page_:

; 9316 : 
; 9317 : 			return;
; 9318 : 		}
; 9319 : 	}
; 9320 : }

  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c3		 ret	 0
?auto_page_kiowa_ase_main_mfd@@YGXXZ ENDP		; auto_page_kiowa_ase_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?toggle_kiowa_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_kiowa_ase_auto_page@@YGXXZ PROC			; toggle_kiowa_ase_auto_page, COMDAT

; 9157 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9158 : 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 9159 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_kiowa_ase_auto_page@@YGXXZ ENDP			; toggle_kiowa_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_previous_kiowa_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_kiowa_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_kiowa_co_pilot_tsd_declutter_level, COMDAT

; 9137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9138 : 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 9139 : 	{
; 9140 : 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 9141 : 	}
; 9142 : 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 9143 : 	{
; 9144 : 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 9145 : 	}
; 9146 : 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 9147 : 	{
; 9148 : 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 9149 : 	}
; 9150 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_kiowa_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_kiowa_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_previous_kiowa_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_kiowa_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_kiowa_pilot_tsd_declutter_level, COMDAT

; 9117 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9118 : 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 9119 : 	{
; 9120 : 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 9121 : 	}
; 9122 : 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 9123 : 	{
; 9124 : 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 9125 : 	}
; 9126 : 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 9127 : 	{
; 9128 : 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 9129 : 	}
; 9130 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_kiowa_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_kiowa_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_next_kiowa_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_kiowa_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_kiowa_co_pilot_tsd_declutter_level, COMDAT

; 9097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9098 : 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 9099 : 	{
; 9100 : 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 9101 : 	}
; 9102 : 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 9103 : 	{
; 9104 : 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 9105 : 	}
; 9106 : 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 9107 : 	{
; 9108 : 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 9109 : 	}
; 9110 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_kiowa_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_kiowa_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_next_kiowa_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_kiowa_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_kiowa_pilot_tsd_declutter_level, COMDAT

; 9077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9078 : 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 9079 : 	{
; 9080 : 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 9081 : 	}
; 9082 : 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 9083 : 	{
; 9084 : 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 9085 : 	}
; 9086 : 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 9087 : 	{
; 9088 : 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 9089 : 	}
; 9090 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_kiowa_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_kiowa_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_previous_kiowa_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_kiowa_co_pilot_tsd_ase_range@@YGXXZ PROC ; select_previous_kiowa_co_pilot_tsd_ase_range, COMDAT

; 9057 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9058 : 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 9059 : 	{
; 9060 : 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 9061 : 	}
; 9062 : 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 9063 : 	{
; 9064 : 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 9065 : 	}
; 9066 : 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 9067 : 	{
; 9068 : 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 9069 : 	}
; 9070 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_kiowa_co_pilot_tsd_ase_range@@YGXXZ ENDP ; select_previous_kiowa_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_previous_kiowa_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_kiowa_pilot_tsd_ase_range@@YGXXZ PROC	; select_previous_kiowa_pilot_tsd_ase_range, COMDAT

; 9037 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9038 : 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 9039 : 	{
; 9040 : 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 9041 : 	}
; 9042 : 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 9043 : 	{
; 9044 : 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 9045 : 	}
; 9046 : 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 9047 : 	{
; 9048 : 		pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 9049 : 	}
; 9050 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_kiowa_pilot_tsd_ase_range@@YGXXZ ENDP	; select_previous_kiowa_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_next_kiowa_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_kiowa_co_pilot_tsd_ase_range@@YGXXZ PROC	; select_next_kiowa_co_pilot_tsd_ase_range, COMDAT

; 9017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9018 : 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 9019 : 	{
; 9020 : 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 9021 : 	}
; 9022 : 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 9023 : 	{
; 9024 : 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 9025 : 	}
; 9026 : 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 9027 : 	{
; 9028 : 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 9029 : 	}
; 9030 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_kiowa_co_pilot_tsd_ase_range@@YGXXZ ENDP	; select_next_kiowa_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_next_kiowa_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_kiowa_pilot_tsd_ase_range@@YGXXZ PROC	; select_next_kiowa_pilot_tsd_ase_range, COMDAT

; 8997 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8998 : 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 8999 : 	{
; 9000 : 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 9001 : 	}
; 9002 : 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 9003 : 	{
; 9004 : 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 9005 : 	}
; 9006 : 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 9007 : 	{
; 9008 : 		pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 9009 : 	}
; 9010 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_kiowa_pilot_tsd_ase_range@@YGXXZ ENDP	; select_next_kiowa_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_location$ = 8					; size = 4
?toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; toggle_kiowa_main_mfd_on_off, COMDAT

; 8979 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8980 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@toggle_kio
  0000f	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00013	7c 18		 jl	 SHORT $LN2@toggle_kio
$LN3@toggle_kio:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@toggle_kio:

; 8981 : 
; 8982 : 	if (*main_mfd_mode_ptrs[mfd_location] != KIOWA_MAIN_MFD_MODE_OFF)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  00037	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003a	74 0d		 je	 SHORT $LN4@toggle_kio

; 8983 : 	{
; 8984 : 		select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_OFF, mfd_location);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 8985 : 	}
; 8986 : 	else

  00047	eb 09		 jmp	 SHORT $LN1@toggle_kio
$LN4@toggle_kio:

; 8987 : 	{
; 8988 : 		select_next_kiowa_main_mfd (mfd_location);

  00049	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_next_kiowa_main_mfd
$LN1@toggle_kio:

; 8989 : 	}
; 8990 : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?toggle_kiowa_main_mfd_on_off@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; toggle_kiowa_main_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_previous_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; select_previous_kiowa_main_mfd, COMDAT

; 8947 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8948 : 	kiowa_main_mfd_modes
; 8949 : 		*mfd_mode_ptr1,
; 8950 : 		*mfd_mode_ptr2,
; 8951 : 		previous_mfd_mode;
; 8952 : 
; 8953 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_pre
  0000f	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00013	7c 18		 jl	 SHORT $LN2@select_pre
$LN3@select_pre:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 8954 : 
; 8955 : 	mfd_mode_ptr1 = main_mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 8956 : 
; 8957 : 	mfd_mode_ptr2 = opposite_main_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 8958 : 
; 8959 : 	previous_mfd_mode = get_previous_main_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_previous_main_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 8960 : 
; 8961 : 	if (previous_mfd_mode != KIOWA_MAIN_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_pre

; 8962 : 	{
; 8963 : 		if (previous_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_pre

; 8964 : 		{
; 8965 : 			previous_mfd_mode = get_previous_main_mfd_mode (previous_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_previous_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_previous_main_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN5@select_pre:

; 8966 : 		}
; 8967 : 
; 8968 : 		ASSERT (previous_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_pre
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_pre:

; 8969 : 	}
; 8970 : 
; 8971 : 	select_kiowa_main_mfd_mode (previous_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 8972 : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_previous_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; select_previous_kiowa_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -12					; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; select_next_kiowa_main_mfd, COMDAT

; 8915 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8916 : 	kiowa_main_mfd_modes
; 8917 : 		*mfd_mode_ptr1,
; 8918 : 		*mfd_mode_ptr2,
; 8919 : 		next_mfd_mode;
; 8920 : 
; 8921 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_nex
  0000f	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00013	7c 18		 jl	 SHORT $LN2@select_nex
$LN3@select_nex:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 8922 : 
; 8923 : 	mfd_mode_ptr1 = main_mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 8924 : 
; 8925 : 	mfd_mode_ptr2 = opposite_main_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 8926 : 
; 8927 : 	next_mfd_mode = get_next_main_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_next_main_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 8928 : 
; 8929 : 	if (next_mfd_mode != KIOWA_MAIN_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_nex

; 8930 : 	{
; 8931 : 		if (next_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_nex

; 8932 : 		{
; 8933 : 			next_mfd_mode = get_next_main_mfd_mode (next_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_next_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W41@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_next_main_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN5@select_nex:

; 8934 : 		}
; 8935 : 
; 8936 : 		ASSERT (next_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_nex
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_nex:

; 8937 : 	}
; 8938 : 
; 8939 : 	select_kiowa_main_mfd_mode (next_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 8940 : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_next_kiowa_main_mfd@@YGXW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; select_next_kiowa_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_default_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; select_kiowa_main_mfd_mode, COMDAT

; 8654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8655 : 	kiowa_main_mfd_modes
; 8656 : 		*mfd_mode_ptr1,
; 8657 : 		*mfd_mode_ptr2,
; 8658 : 		default_mfd_mode;
; 8659 : 
; 8660 : 	ASSERT (kiowa_main_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_kio
  0000f	83 7d 08 0b	 cmp	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH
  00013	7c 18		 jl	 SHORT $LN2@select_kio
$LN3@select_kio:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OIPAMFAC@kiowa_main_mfd_mode_valid?5?$CImfd_@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_kio:

; 8661 : 
; 8662 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@select_kio
  00033	83 7d 0c 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00037	7c 18		 jl	 SHORT $LN4@select_kio
$LN5@select_kio:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 08	 add	 eax, 8
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_kio:

; 8663 : 
; 8664 : 	debug_colour_log (DEBUG_COLOUR_AMBER, "%s = %s", kiowa_main_mfd_location_names[mfd_location], kiowa_main_mfd_mode_names[mfd_mode]);

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?kiowa_main_mfd_mode_names@@3PAPADA[eax*4]
  0005b	51		 push	 ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _mfd_location$[ebp]
  0005f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?kiowa_main_mfd_location_names@@3PAPADA[edx*4]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
  0006c	6a 17		 push	 23			; 00000017H
  0006e	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 8665 : 
; 8666 : 	mfd_mode_ptr1 = main_mfd_mode_ptrs[mfd_location];

  00076	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00079	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  00080	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 8667 : 
; 8668 : 	mfd_mode_ptr2 = opposite_main_mfd_mode_ptrs[mfd_location];

  00083	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00086	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  0008d	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 8669 : 
; 8670 : 	if ((mfd_mode == KIOWA_MAIN_MFD_MODE_DAMAGED) && (*mfd_mode_ptr1 == KIOWA_MAIN_MFD_MODE_OFF))

  00090	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00094	75 0f		 jne	 SHORT $LN6@select_kio
  00096	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	75 07		 jne	 SHORT $LN6@select_kio

; 8671 : 	{
; 8672 : 		mfd_mode = KIOWA_MAIN_MFD_MODE_OFF;

  0009e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN6@select_kio:

; 8673 : 	}
; 8674 : 
; 8675 : 	if (get_main_mfd_damage (mfd_location))

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?get_main_mfd_damage@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_main_mfd_damage
  000ae	85 c0		 test	 eax, eax
  000b0	74 0d		 je	 SHORT $LN7@select_kio

; 8676 : 	{
; 8677 : 		if (mfd_mode != KIOWA_MAIN_MFD_MODE_OFF)

  000b2	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000b6	74 07		 je	 SHORT $LN7@select_kio

; 8678 : 		{
; 8679 : 			mfd_mode = KIOWA_MAIN_MFD_MODE_DAMAGED;

  000b8	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN7@select_kio:

; 8680 : 		}
; 8681 : 	}
; 8682 : 
; 8683 : 	if ((mfd_location != KIOWA_MAIN_MFD_LOCATION_CENTER) && (mfd_mode != KIOWA_MAIN_MFD_MODE_OFF) && (mfd_mode != KIOWA_MAIN_MFD_MODE_DAMAGED) && (mfd_mode == *mfd_mode_ptr2))

  000bf	83 7d 0c 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  000c3	74 65		 je	 SHORT $LN9@select_kio
  000c5	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000c9	74 5f		 je	 SHORT $LN9@select_kio
  000cb	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000cf	74 59		 je	 SHORT $LN9@select_kio
  000d1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  000d7	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000d9	75 4f		 jne	 SHORT $LN9@select_kio

; 8684 : 	{
; 8685 : 		default_mfd_mode = get_default_main_mfd_mode (opposite_main_mfd_locations[mfd_location]);

  000db	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_locations@@3PAW4KIOWA_MAIN_MFD_LOCATIONS@@A[eax*4]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  000eb	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 8686 : 
; 8687 : 		if (default_mfd_mode == mfd_mode)

  000ee	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  000f1	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  000f4	75 2c		 jne	 SHORT $LN10@select_kio

; 8688 : 		{
; 8689 : 			default_mfd_mode = get_default_main_mfd_mode (mfd_location);

  000f6	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  000ff	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 8690 : 
; 8691 : 			ASSERT (default_mfd_mode != mfd_mode);

  00102	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  00105	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  00108	75 18		 jne	 SHORT $LN10@select_kio
  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0010f	83 c0 25	 add	 eax, 37			; 00000025H
  00112	50		 push	 eax
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
  0011d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@select_kio:

; 8692 : 		}
; 8693 : 
; 8694 : 		*mfd_mode_ptr2 = default_mfd_mode;

  00122	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00125	8b 4d f4	 mov	 ecx, DWORD PTR _default_mfd_mode$[ebp]
  00128	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@select_kio:

; 8695 : 	}
; 8696 : 
; 8697 : 	*mfd_mode_ptr1 = mfd_mode;

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  0012d	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  00130	89 08		 mov	 DWORD PTR [eax], ecx

; 8698 : }

  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; select_kiowa_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv77 = -76						; size = 4
tv75 = -76						; size = 4
tv73 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_result$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z PROC ; get_kiowa_main_mfd_has_focus, COMDAT

; 8496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8497 : 	int
; 8498 : 		result;
; 8499 : 
; 8500 : 	kiowa_main_mfd_modes
; 8501 : 		mfd_mode;
; 8502 : 
; 8503 : 	ASSERT (kiowa_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_kiowa_
  0000f	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  00013	7c 18		 jl	 SHORT $LN4@get_kiowa_
$LN5@get_kiowa_:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 07	 add	 eax, 7
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IBPIKAFP@kiowa_main_mfd_location_valid?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_kiowa_:

; 8504 : 
; 8505 : 	mfd_mode = *main_mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4KIOWA_MAIN_MFD_MODES@@A[eax*4]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	89 55 f8	 mov	 DWORD PTR _mfd_mode$[ebp], edx

; 8506 : 
; 8507 : 	switch (target_acquisition_system)

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  00041	89 45 b4	 mov	 DWORD PTR tv73[ebp], eax
  00044	83 7d b4 03	 cmp	 DWORD PTR tv73[ebp], 3
  00048	74 08		 je	 SHORT $LN6@get_kiowa_
  0004a	83 7d b4 04	 cmp	 DWORD PTR tv73[ebp], 4
  0004e	74 20		 je	 SHORT $LN7@get_kiowa_
  00050	eb 3c		 jmp	 SHORT $LN8@get_kiowa_
$LN6@get_kiowa_:

; 8508 : 	{
; 8509 : 		////////////////////////////////////////
; 8510 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 8511 : 		////////////////////////////////////////
; 8512 : 		{
; 8513 : 			result = (mfd_mode == KIOWA_MAIN_MFD_MODE_FLIR);

  00052	83 7d f8 02	 cmp	 DWORD PTR _mfd_mode$[ebp], 2
  00056	75 09		 jne	 SHORT $LN10@get_kiowa_
  00058	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  0005f	eb 07		 jmp	 SHORT $LN11@get_kiowa_
$LN10@get_kiowa_:
  00061	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN11@get_kiowa_:
  00068	8b 45 b4	 mov	 eax, DWORD PTR tv75[ebp]
  0006b	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 8514 : 
; 8515 : 			break;

  0006e	eb 25		 jmp	 SHORT $LN2@get_kiowa_
$LN7@get_kiowa_:

; 8516 : 		}
; 8517 : 		////////////////////////////////////////
; 8518 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 8519 : 		////////////////////////////////////////
; 8520 : 		{
; 8521 : 			result = (mfd_mode == KIOWA_MAIN_MFD_MODE_DTV);

  00070	83 7d f8 03	 cmp	 DWORD PTR _mfd_mode$[ebp], 3
  00074	75 09		 jne	 SHORT $LN12@get_kiowa_
  00076	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0007d	eb 07		 jmp	 SHORT $LN13@get_kiowa_
$LN12@get_kiowa_:
  0007f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN13@get_kiowa_:
  00086	8b 45 b4	 mov	 eax, DWORD PTR tv77[ebp]
  00089	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 8522 : 
; 8523 : 			break;

  0008c	eb 07		 jmp	 SHORT $LN2@get_kiowa_
$LN8@get_kiowa_:

; 8524 : 		}
; 8525 : 		////////////////////////////////////////
; 8526 : 		default:
; 8527 : 		////////////////////////////////////////
; 8528 : 		{
; 8529 : 			result = FALSE;

  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@get_kiowa_:

; 8530 : 
; 8531 : 			break;
; 8532 : 		}
; 8533 : 	}
; 8534 : 
; 8535 : 	return (result);

  00095	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 8536 : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
?get_kiowa_main_mfd_has_focus@@YGHW4KIOWA_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_kiowa_main_mfd_has_focus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_overlaid_kiowa_mfd@@YGXXZ
_TEXT	SEGMENT
?draw_overlaid_kiowa_mfd@@YGXXZ PROC			; draw_overlaid_kiowa_mfd, COMDAT

; 8399 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8400 : 	////////////////////////////////////////
; 8401 : 	//
; 8402 : 	// SELECT LARGE OR SMALL MFD TEXTURES
; 8403 : 	//
; 8404 : 	////////////////////////////////////////
; 8405 : 
; 8406 : //   if (application_video_width >= 1280)
; 8407 :    {
; 8408 :       draw_large_mfd = TRUE;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 8409 : 
; 8410 :       co_pilot_main_mfd_texture_screen = large_co_pilot_main_mfd_texture_screen;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8411 :       pilot_main_mfd_texture_screen = large_pilot_main_mfd_texture_screen;

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8412 :       center_mfd_texture_screen = large_center_mfd_texture_screen;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_center_mfd_texture_screen@@3PAUSCREEN@@A
  0002c	a3 00 00 00 00	 mov	 DWORD PTR ?center_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 8413 : 
; 8414 :       eo_3d_texture_screen = large_eo_3d_texture_screen;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 8415 :    }
; 8416 : /*   else
; 8417 :    {
; 8418 :       draw_large_mfd = FALSE;
; 8419 : 
; 8420 :       co_pilot_main_mfd_texture_screen = small_co_pilot_main_mfd_texture_screen;
; 8421 :       pilot_main_mfd_texture_screen = small_pilot_main_mfd_texture_screen;
; 8422 :       side_mfd_texture_screen = small_side_mfd_texture_screen;
; 8423 : 
; 8424 :       eo_3d_texture_screen = small_eo_3d_texture_screen;
; 8425 :    }
; 8426 : */
; 8427 : 	set_system_texture_screen (co_pilot_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  0003b	68 55 06 00 00	 push	 1621			; 00000655H
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8428 : 	set_system_texture_screen (pilot_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  0004b	68 56 06 00 00	 push	 1622			; 00000656H
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8429 : 	set_system_texture_screen (center_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD4);

  0005b	68 57 06 00 00	 push	 1623			; 00000657H
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?center_mfd_texture_screen@@3PAUSCREEN@@A
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 8430 : 
; 8431 : 	////////////////////////////////////////
; 8432 : 	//
; 8433 : 	// SET UP MFD 2D ENVIRONMENT
; 8434 : 	//
; 8435 : 	////////////////////////////////////////
; 8436 : 
; 8437 : 	set_2d_active_environment (mfd_env);

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 8438 : 
; 8439 : 	//
; 8440 : 	// window
; 8441 : 	//
; 8442 : 
; 8443 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00076	51		 push	 ecx
  00077	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0007f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00084	51		 push	 ecx
  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	51		 push	 ecx
  00093	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	51		 push	 ecx
  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 8444 : 
; 8445 : 	//
; 8446 : 	// viewport
; 8447 : 	//
; 8448 : 
; 8449 : 	if (draw_large_mfd)

  000b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000c0	74 1c		 je	 SHORT $LN2@draw_overl

; 8450 : 	{
; 8451 : 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  000c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  000ca	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8452 : 
; 8453 : 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  000d2	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 8454 : 	}
; 8455 : 	else

  000dc	eb 1a		 jmp	 SHORT $LN3@draw_overl
$LN2@draw_overl:

; 8456 : 	{
; 8457 : 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  000de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  000e6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8458 : 
; 8459 : 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  000ee	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN3@draw_overl:

; 8460 : 	}
; 8461 : 
; 8462 : 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  000f8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00100	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00108	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0010c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 8463 : 
; 8464 : 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00114	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0011c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00124	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00128	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 8465 : 
; 8466 : 	mfd_viewport_x_min = 0.0;

  00130	0f 57 c0	 xorps	 xmm0, xmm0
  00133	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 8467 : 
; 8468 : 	mfd_viewport_y_min = 0.0;

  0013b	0f 57 c0	 xorps	 xmm0, xmm0
  0013e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 8469 : 
; 8470 : 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  00146	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0014e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00156	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 8471 : 
; 8472 : 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  00162	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0016a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 8473 : 
; 8474 : 	////////////////////////////////////////
; 8475 : 	//
; 8476 : 	// DRAW DISPLAYS
; 8477 : 	//
; 8478 : 	////////////////////////////////////////
; 8479 : 
; 8480 : 	draw_overlaid_main_mfd (co_pilot_main_mfd_texture_screen, co_pilot_main_mfd_mode, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  0017e	6a 00		 push	 0
  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  00185	50		 push	 eax
  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  0018c	51		 push	 ecx
  0018d	e8 00 00 00 00	 call	 ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_overlaid_main_mfd

; 8481 : 
; 8482 :   draw_overlaid_main_mfd (pilot_main_mfd_texture_screen, pilot_main_mfd_mode, KIOWA_MAIN_MFD_LOCATION_PILOT);

  00192	6a 01		 push	 1
  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  00199	50		 push	 eax
  0019a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  001a0	51		 push	 ecx
  001a1	e8 00 00 00 00	 call	 ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_overlaid_main_mfd

; 8483 : }

  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
?draw_overlaid_kiowa_mfd@@YGXXZ ENDP			; draw_overlaid_kiowa_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_kiowa_full_screen_display@@YGXXZ
_TEXT	SEGMENT
tv270 = -340						; size = 4
tv230 = -340						; size = 4
tv73 = -340						; size = 4
tv65 = -340						; size = 4
_store_mfd_colour$1 = -272				; size = 4
_specular$ = -268					; size = 4
_colour$ = -264						; size = 4
_quad$ = -260						; size = 256
_mode$ = -4						; size = 4
?draw_kiowa_full_screen_display@@YGXXZ PROC		; draw_kiowa_full_screen_display, COMDAT

; 7492 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7493 : 	kiowa_main_mfd_modes
; 7494 : 		mode;
; 7495 : 
; 7496 : 	vertex
; 7497 : 		quad[4];
; 7498 : 
; 7499 : 	real_colour
; 7500 : 		colour,
; 7501 : 		specular;
; 7502 : 
; 7503 : 	////////////////////////////////////////
; 7504 : 	//
; 7505 : 	// determine if full screen display is required
; 7506 : 	//
; 7507 : 	////////////////////////////////////////
; 7508 : 
; 7509 : 	if (d3d_can_render_to_texture)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00013	74 05		 je	 SHORT $LN10@draw_kiowa

; 7510 : 	{
; 7511 : 		return;

  00015	e9 98 0a 00 00	 jmp	 $LN1@draw_kiowa
$LN10@draw_kiowa:

; 7512 : 	}
; 7513 : 
; 7514 : 	switch (get_view_mode ())

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0001f	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00025	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  0002b	83 e9 26	 sub	 ecx, 38			; 00000026H
  0002e	89 8d ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00034	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv65[ebp], 3
  0003b	77 35		 ja	 SHORT $LN15@draw_kiowa
  0003d	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00043	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN28@draw_kiowa[edx*4]
$LN11@draw_kiowa:

; 7515 : 	{
; 7516 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 7517 : 		{
; 7518 : 			mode = co_pilot_main_mfd_mode;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  0004f	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 7519 : 
; 7520 : 			break;

  00052	eb 31		 jmp	 SHORT $LN2@draw_kiowa
$LN12@draw_kiowa:

; 7521 : 		}
; 7522 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 7523 : 		{
; 7524 : 			mode = pilot_main_mfd_mode;

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  00059	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 7525 : 
; 7526 : 			break;

  0005c	eb 27		 jmp	 SHORT $LN2@draw_kiowa
$LN13@draw_kiowa:

; 7527 : 		}
; 7528 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 7529 : 		{
; 7530 : 			mode = co_pilot_main_mfd_mode;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  00063	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 7531 : 
; 7532 : 			break;

  00066	eb 1d		 jmp	 SHORT $LN2@draw_kiowa
$LN14@draw_kiowa:

; 7533 : 		}
; 7534 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 7535 : 		{
; 7536 : 			mode = pilot_main_mfd_mode;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  0006d	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 7537 : 
; 7538 : 			break;

  00070	eb 13		 jmp	 SHORT $LN2@draw_kiowa
$LN15@draw_kiowa:

; 7539 : 		}
; 7540 : 		default:
; 7541 : 		{
; 7542 : 			debug_fatal ("Invalid view mode = %d", get_view_mode ());

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
  0007d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00082	83 c4 08	 add	 esp, 8
$LN2@draw_kiowa:

; 7543 : 
; 7544 : 			break;
; 7545 : 		}
; 7546 : 	}
; 7547 : 
; 7548 : 	if (!get_undamaged_eo_display_mode (mode))

  00085	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4KIOWA_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0008e	85 c0		 test	 eax, eax
  00090	75 05		 jne	 SHORT $LN16@draw_kiowa

; 7549 : 	{
; 7550 : 		return;

  00092	e9 1b 0a 00 00	 jmp	 $LN1@draw_kiowa
$LN16@draw_kiowa:

; 7551 : 	}
; 7552 : 
; 7553 : 	////////////////////////////////////////
; 7554 : 	//
; 7555 : 	// render 3D display
; 7556 : 	//
; 7557 : 	////////////////////////////////////////
; 7558 : 
; 7559 : 	switch (get_view_mode ())

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0009c	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  000a2	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  000a8	83 e9 26	 sub	 ecx, 38			; 00000026H
  000ab	89 8d ac fe ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  000b1	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv73[ebp], 3
  000b8	0f 87 0c 03 00
	00		 ja	 $LN4@draw_kiowa
  000be	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  000c4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN29@draw_kiowa[edx*4]
$LN17@draw_kiowa:

; 7560 : 	{
; 7561 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 7562 : 		{
; 7563 : 			mfd_screen_x_min = floor ((243.0 * full_screen_width) / 640.0);

  000cb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406e600000000000
  000db	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  000e3	83 ec 08	 sub	 esp, 8
  000e6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  000f1	83 c4 08	 add	 esp, 8
  000f4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 7564 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  000fa	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00102	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0010a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00112	83 ec 08	 sub	 esp, 8
  00115	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00120	83 c4 08	 add	 esp, 8
  00123	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 7565 : 
; 7566 : 			mfd_screen_x_max = ceil ((499.0 * full_screen_width) / 640.0);

  00129	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00131	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407f300000000000
  00139	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00141	83 ec 08	 sub	 esp, 8
  00144	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0014f	83 c4 08	 add	 esp, 8
  00152	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 7567 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  00158	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00160	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  00168	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00170	83 ec 08	 sub	 esp, 8
  00173	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0017e	83 c4 08	 add	 esp, 8
  00181	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 7568 : 
; 7569 : 			break;

  00187	e9 3e 02 00 00	 jmp	 $LN4@draw_kiowa
$LN18@draw_kiowa:

; 7570 : 		}
; 7571 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 7572 : 		{
; 7573 : 			mfd_screen_x_min = floor ((141.0 * full_screen_width) / 640.0);

  0018c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00194	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4061a00000000000
  0019c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  001a4	83 ec 08	 sub	 esp, 8
  001a7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  001b2	83 c4 08	 add	 esp, 8
  001b5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 7574 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  001bb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  001c3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  001cb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  001d3	83 ec 08	 sub	 esp, 8
  001d6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  001e1	83 c4 08	 add	 esp, 8
  001e4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 7575 : 
; 7576 : 			mfd_screen_x_max = ceil ((397.0 * full_screen_width) / 640.0);

  001ea	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  001f2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4078d00000000000
  001fa	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00202	83 ec 08	 sub	 esp, 8
  00205	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00210	83 c4 08	 add	 esp, 8
  00213	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 7577 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  00219	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00221	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  00229	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00231	83 ec 08	 sub	 esp, 8
  00234	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00239	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0023f	83 c4 08	 add	 esp, 8
  00242	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 7578 : 
; 7579 : 			break;

  00248	e9 7d 01 00 00	 jmp	 $LN4@draw_kiowa
$LN19@draw_kiowa:

; 7580 : 		}
; 7581 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 7582 : 		{
; 7583 : 			mfd_screen_x_min = floor ((243.0 * full_screen_width) / 640.0);

  0024d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00255	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406e600000000000
  0025d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00265	83 ec 08	 sub	 esp, 8
  00268	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00273	83 c4 08	 add	 esp, 8
  00276	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 7584 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  0027c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00284	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0028c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00294	83 ec 08	 sub	 esp, 8
  00297	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  002a2	83 c4 08	 add	 esp, 8
  002a5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 7585 : 
; 7586 : 			mfd_screen_x_max = ceil ((499.0 * full_screen_width) / 640.0);

  002ab	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  002b3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407f300000000000
  002bb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  002c3	83 ec 08	 sub	 esp, 8
  002c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  002d1	83 c4 08	 add	 esp, 8
  002d4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 7587 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  002da	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  002e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  002ea	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  002f2	83 ec 08	 sub	 esp, 8
  002f5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00300	83 c4 08	 add	 esp, 8
  00303	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 7588 : 
; 7589 : 			break;

  00309	e9 bc 00 00 00	 jmp	 $LN4@draw_kiowa
$LN20@draw_kiowa:

; 7590 : 		}
; 7591 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 7592 : 		{
; 7593 : 			mfd_screen_x_min = floor ((141.0 * full_screen_width) / 640.0);

  0030e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00316	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4061a00000000000
  0031e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00326	83 ec 08	 sub	 esp, 8
  00329	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00334	83 c4 08	 add	 esp, 8
  00337	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 7594 : 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  0033d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00345	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0034d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00355	83 ec 08	 sub	 esp, 8
  00358	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00363	83 c4 08	 add	 esp, 8
  00366	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 7595 : 
; 7596 : 			mfd_screen_x_max = ceil ((397.0 * full_screen_width) / 640.0);

  0036c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00374	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4078d00000000000
  0037c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00384	83 ec 08	 sub	 esp, 8
  00387	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0038c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00392	83 c4 08	 add	 esp, 8
  00395	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 7597 : 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  0039b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  003a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  003ab	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  003b3	83 ec 08	 sub	 esp, 8
  003b6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  003c1	83 c4 08	 add	 esp, 8
  003c4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA
$LN4@draw_kiowa:

; 7598 : 
; 7599 : 			break;
; 7600 : 		}
; 7601 : 	}
; 7602 : 
; 7603 : 	//
; 7604 : 	// widen by 1 pixel either side to ensure the MFD is covered at all resolutions
; 7605 : 	//
; 7606 : 
; 7607 : 	mfd_screen_x_min -= 1.0;

  003ca	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  003d2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003de	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 7608 : 	mfd_screen_y_min -= 1.0;

  003e6	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  003ee	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003f6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003fa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 7609 : 
; 7610 : 	mfd_screen_x_max += 1.0;

  00402	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0040a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00412	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00416	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 7611 : 	mfd_screen_y_max += 1.0;

  0041e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00426	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0042e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00432	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 7612 : 
; 7613 : 	mfd_screen_width = mfd_screen_x_max - mfd_screen_x_min;

  0043a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00442	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0044a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 7614 : 	mfd_screen_height = mfd_screen_y_max - mfd_screen_y_min;

  00452	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0045a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00462	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 7615 : 
; 7616 : 	mfd_screen_x_max -= 0.001;

  0046a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00472	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0047a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0047e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 7617 : 	mfd_screen_y_max -= 0.001;

  00486	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0048e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00496	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0049a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 7618 : 
; 7619 : 	mfd_screen_x_scale = 256.0 / mfd_screen_width;

  004a2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_width@@3MA
  004aa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  004b2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004b6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 7620 : 	mfd_screen_y_scale = 256.0 / mfd_screen_height;

  004c2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_height@@3MA
  004ca	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  004d2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004d6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004da	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 7621 : 
; 7622 : 	switch (mode)

  004e2	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  004e5	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
  004eb	83 bd ac fe ff
	ff 02		 cmp	 DWORD PTR tv230[ebp], 2
  004f2	74 0b		 je	 SHORT $LN21@draw_kiowa
  004f4	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv230[ebp], 3
  004fb	74 0b		 je	 SHORT $LN22@draw_kiowa
  004fd	eb 10		 jmp	 SHORT $LN6@draw_kiowa
$LN21@draw_kiowa:

; 7623 : 	{
; 7624 : 		case KIOWA_MAIN_MFD_MODE_FLIR:
; 7625 : 		{
; 7626 : 			draw_3d_flir_mfd (TRUE);

  004ff	6a 01		 push	 1
  00501	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 7627 : 
; 7628 : 			break;

  00506	eb 07		 jmp	 SHORT $LN6@draw_kiowa
$LN22@draw_kiowa:

; 7629 : 		}
; 7630 : 		case KIOWA_MAIN_MFD_MODE_DTV:
; 7631 : 		{
; 7632 : 			draw_3d_dtv_mfd (TRUE);

  00508	6a 01		 push	 1
  0050a	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXH@Z ; draw_3d_dtv_mfd
$LN6@draw_kiowa:

; 7633 : 
; 7634 : 			break;
; 7635 : 		}
; 7636 : 	}
; 7637 : 
; 7638 : 	////////////////////////////////////////
; 7639 : 	//
; 7640 : 	// render 2D display
; 7641 : 	//
; 7642 : 	////////////////////////////////////////
; 7643 : 
; 7644 : 	set_2d_active_environment (mfd_env);

  0050f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00514	50		 push	 eax
  00515	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 7645 : 
; 7646 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0051a	51		 push	 ecx
  0051b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00523	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00528	51		 push	 ecx
  00529	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00531	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00536	51		 push	 ecx
  00537	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0053f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00544	51		 push	 ecx
  00545	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0054d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00552	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00557	50		 push	 eax
  00558	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7647 : 
; 7648 : 	draw_large_mfd = TRUE;

  0055d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 7649 : 
; 7650 : 	mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00567	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0056f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 7651 : 
; 7652 : 	int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00577	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 7653 : 
; 7654 : 	mfd_viewport_x_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  00581	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00589	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 7655 : 
; 7656 : 	mfd_viewport_y_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  00591	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00599	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 7657 : 
; 7658 : 	mfd_viewport_x_min = 0.0;

  005a1	0f 57 c0	 xorps	 xmm0, xmm0
  005a4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 7659 : 
; 7660 : 	mfd_viewport_y_min = 0.0;

  005ac	0f 57 c0	 xorps	 xmm0, xmm0
  005af	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 7661 : 
; 7662 : 	mfd_viewport_x_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  005b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  005bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 7663 : 
; 7664 : 	mfd_viewport_y_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  005c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  005cf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 7665 : 
; 7666 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005d7	51		 push	 ecx
  005d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e5	51		 push	 ecx
  005e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f3	51		 push	 ecx
  005f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00601	51		 push	 ecx
  00602	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0060a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00614	50		 push	 eax
  00615	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7667 : 
; 7668 : 	//
; 7669 : 	// draw MFD on texture
; 7670 : 	//
; 7671 : 
; 7672 : 	draw_main_display = TRUE;

  0061a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 7673 : 
; 7674 : 	set_active_screen (full_mfd_texture_screen);

  00624	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00629	50		 push	 eax
  0062a	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7675 : 
; 7676 : 	if (lock_screen (full_mfd_texture_screen))

  0062f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00634	50		 push	 eax
  00635	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0063a	85 c0		 test	 eax, eax
  0063c	0f 84 c5 00 00
	00		 je	 $LN23@draw_kiowa

; 7677 : 	{
; 7678 :       rgb_colour
; 7679 :          store_mfd_colour;
; 7680 : 
; 7681 :       store_mfd_colour = MFD_COLOUR1;

  00642	b8 04 00 00 00	 mov	 eax, 4
  00647	6b c8 00	 imul	 ecx, eax, 0
  0064a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00650	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _store_mfd_colour$1[ebp], edx

; 7682 : 
; 7683 :       set_rgb_colour (MFD_COLOUR1, 255, 255, 255, 255);

  00656	b8 04 00 00 00	 mov	 eax, 4
  0065b	6b c8 00	 imul	 ecx, eax, 0
  0065e	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00665	b8 04 00 00 00	 mov	 eax, 4
  0066a	6b c8 00	 imul	 ecx, eax, 0
  0066d	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00674	b8 04 00 00 00	 mov	 eax, 4
  00679	6b c8 00	 imul	 ecx, eax, 0
  0067c	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00683	b8 04 00 00 00	 mov	 eax, 4
  00688	6b c8 00	 imul	 ecx, eax, 0
  0068b	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7684 : 
; 7685 :       set_block (0, 0, LARGE_MFD_VIEWPORT_SIZE - 1, LARGE_MFD_VIEWPORT_SIZE - 1, clear_mfd_colour);

  00692	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00697	50		 push	 eax
  00698	68 ff 00 00 00	 push	 255			; 000000ffH
  0069d	68 ff 00 00 00	 push	 255			; 000000ffH
  006a2	6a 00		 push	 0
  006a4	6a 00		 push	 0
  006a6	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7686 : 
; 7687 : 		draw_layout_grid ();

  006ab	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7688 : 
; 7689 : 		switch (mode)

  006b0	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  006b3	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv270[ebp], eax
  006b9	83 bd ac fe ff
	ff 02		 cmp	 DWORD PTR tv270[ebp], 2
  006c0	74 0b		 je	 SHORT $LN24@draw_kiowa
  006c2	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv270[ebp], 3
  006c9	74 0b		 je	 SHORT $LN25@draw_kiowa
  006cb	eb 10		 jmp	 SHORT $LN8@draw_kiowa
$LN24@draw_kiowa:

; 7690 : 		{
; 7691 : 			case KIOWA_MAIN_MFD_MODE_FLIR:
; 7692 : 			{
; 7693 : 				draw_2d_flir_mfd (TRUE);

  006cd	6a 01		 push	 1
  006cf	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 7694 : 
; 7695 : 				break;

  006d4	eb 07		 jmp	 SHORT $LN8@draw_kiowa
$LN25@draw_kiowa:

; 7696 : 			}
; 7697 : 			case KIOWA_MAIN_MFD_MODE_DTV:
; 7698 : 			{
; 7699 : 				draw_2d_dtv_mfd (TRUE);

  006d6	6a 01		 push	 1
  006d8	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd
$LN8@draw_kiowa:

; 7700 : 
; 7701 : 				break;
; 7702 : 			}
; 7703 : 		}
; 7704 : 
; 7705 : 		MFD_COLOUR1 = store_mfd_colour;

  006dd	b8 04 00 00 00	 mov	 eax, 4
  006e2	6b c8 00	 imul	 ecx, eax, 0
  006e5	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _store_mfd_colour$1[ebp]
  006eb	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 7706 : 
; 7707 : 		flush_screen_texture_graphics (full_mfd_texture_screen);

  006f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  006f6	50		 push	 eax
  006f7	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7708 : 
; 7709 : 		unlock_screen (full_mfd_texture_screen);

  006fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00701	50		 push	 eax
  00702	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_kiowa:

; 7710 : 	}
; 7711 : 
; 7712 : 	set_active_screen (video_screen);

  00707	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0070c	50		 push	 eax
  0070d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7713 : 
; 7714 : 	////////////////////////////////////////
; 7715 : 	//
; 7716 : 	// render MFD to screen
; 7717 : 	//
; 7718 : 	////////////////////////////////////////
; 7719 : 
; 7720 : 	set_3d_active_environment (main_3d_env);

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00717	50		 push	 eax
  00718	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 7721 : 
; 7722 : 	if (begin_3d_scene ())

  0071d	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00722	85 c0		 test	 eax, eax
  00724	0f 84 88 03 00
	00		 je	 $LN26@draw_kiowa

; 7723 : 	{
; 7724 : 		set_d3d_transparency_on ();

  0072a	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 7725 : 
; 7726 : 		set_d3d_zbuffer_comparison (FALSE);

  0072f	6a 00		 push	 0
  00731	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7727 : 
; 7728 : 		set_d3d_culling (FALSE);

  00736	6a 00		 push	 0
  00738	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7729 : 
; 7730 : 		set_d3d_texture_wrapping (0, FALSE);

  0073d	6a 00		 push	 0
  0073f	6a 00		 push	 0
  00741	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 7731 : 
; 7732 :       set_d3d_texture_mag_filtering (TRUE);

  00746	6a 01		 push	 1
  00748	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 7733 :       set_d3d_texture_min_filtering (TRUE);

  0074d	6a 01		 push	 1
  0074f	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 7734 :       set_d3d_texture_mip_filtering (FALSE);

  00754	6a 00		 push	 0
  00756	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 7735 : 
; 7736 : 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD));

  0075b	68 f9 00 00 00	 push	 249			; 000000f9H
  00760	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00765	50		 push	 eax
  00766	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 7737 : 
; 7738 :       ////////////////////////////////////////
; 7739 :       //
; 7740 : 
; 7741 : 		colour.red				= MFD_COLOUR1.r;

  0076b	b8 04 00 00 00	 mov	 eax, 4
  00770	6b c8 00	 imul	 ecx, eax, 0
  00773	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  00779	88 95 fa fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+2], dl

; 7742 : 		colour.green			= MFD_COLOUR1.g;

  0077f	b8 04 00 00 00	 mov	 eax, 4
  00784	6b c8 00	 imul	 ecx, eax, 0
  00787	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  0078d	88 95 f9 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+1], dl

; 7743 : 		colour.blue				= MFD_COLOUR1.b;

  00793	b8 04 00 00 00	 mov	 eax, 4
  00798	6b c8 00	 imul	 ecx, eax, 0
  0079b	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007a1	88 95 f8 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp], dl

; 7744 : 		colour.alpha			= MFD_COLOUR1.a;

  007a7	b8 04 00 00 00	 mov	 eax, 4
  007ac	6b c8 00	 imul	 ecx, eax, 0
  007af	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  007b5	88 95 fb fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+3], dl

; 7745 : 
; 7746 : 		specular.red			= 0;

  007bb	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 7747 : 		specular.green			= 0;

  007c2	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 7748 : 		specular.blue			= 0;

  007c9	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 7749 : 		specular.alpha			= 255;

  007d0	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 7750 : 
; 7751 : 		quad[0].i				= mfd_screen_x_min;

  007d7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007dc	6b c8 00	 imul	 ecx, eax, 0
  007df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  007e7	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7752 : 		quad[0].j	  			= mfd_screen_y_min;

  007f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007f5	6b c8 00	 imul	 ecx, eax, 0
  007f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00800	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7753 : 		quad[0].z	  			= 0.5;

  00809	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0080e	6b c8 00	 imul	 ecx, eax, 0
  00811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00819	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7754 : 		quad[0].q	  			= 0.5;

  00822	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00827	6b c8 00	 imul	 ecx, eax, 0
  0082a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00832	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7755 : 		quad[0].u	  			= 0.0;

  0083b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00840	6b c8 00	 imul	 ecx, eax, 0
  00843	0f 57 c0	 xorps	 xmm0, xmm0
  00846	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 7756 : 		quad[0].v	  			= 0.0;

  0084f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00854	6b c8 00	 imul	 ecx, eax, 0
  00857	0f 57 c0	 xorps	 xmm0, xmm0
  0085a	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 7757 : 
; 7758 : 		quad[1].i				= mfd_screen_x_max;

  00863	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00868	c1 e0 00	 shl	 eax, 0
  0086b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00873	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7759 : 		quad[1].j  				= mfd_screen_y_min;

  0087c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00881	c1 e0 00	 shl	 eax, 0
  00884	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0088c	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7760 : 		quad[1].z  				= 0.5;

  00895	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0089a	c1 e0 00	 shl	 eax, 0
  0089d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  008a5	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7761 : 		quad[1].q  				= 0.5;

  008ae	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008b3	c1 e0 00	 shl	 eax, 0
  008b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  008be	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7762 : 		quad[1].u  				= 1.0;

  008c7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008cc	c1 e0 00	 shl	 eax, 0
  008cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008d7	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 7763 : 		quad[1].v  				= 0.0;

  008e0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008e5	c1 e0 00	 shl	 eax, 0
  008e8	0f 57 c0	 xorps	 xmm0, xmm0
  008eb	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 7764 : 
; 7765 : 		quad[2].i				= mfd_screen_x_max;

  008f4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008f9	d1 e0		 shl	 eax, 1
  008fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00903	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7766 : 		quad[2].j 				= mfd_screen_y_max;

  0090c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00911	d1 e0		 shl	 eax, 1
  00913	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0091b	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7767 : 		quad[2].z  				= 0.5;

  00924	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00929	d1 e0		 shl	 eax, 1
  0092b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00933	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7768 : 		quad[2].q  				= 0.5;

  0093c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00941	d1 e0		 shl	 eax, 1
  00943	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0094b	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7769 : 		quad[2].u  				= 1.0;

  00954	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00959	d1 e0		 shl	 eax, 1
  0095b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00963	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 7770 : 		quad[2].v  				= 1.0;

  0096c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00971	d1 e0		 shl	 eax, 1
  00973	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0097b	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 7771 : 
; 7772 : 		quad[3].i				= mfd_screen_x_min;

  00984	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00989	6b c8 03	 imul	 ecx, eax, 3
  0098c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00994	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7773 : 		quad[3].j				= mfd_screen_y_max;

  0099d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009a2	6b c8 03	 imul	 ecx, eax, 3
  009a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  009ad	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7774 : 		quad[3].z				= 0.5;

  009b6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009bb	6b c8 03	 imul	 ecx, eax, 3
  009be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009c6	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7775 : 		quad[3].q				= 0.5;

  009cf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009d4	6b c8 03	 imul	 ecx, eax, 3
  009d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009df	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7776 : 		quad[3].u				= 0.0;

  009e8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009ed	6b c8 03	 imul	 ecx, eax, 3
  009f0	0f 57 c0	 xorps	 xmm0, xmm0
  009f3	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 7777 : 		quad[3].v				= 1.0;

  009fc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a01	6b c8 03	 imul	 ecx, eax, 3
  00a04	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a0c	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 7778 : 
; 7779 : 		quad[0].next_vertex	= &quad[1];

  00a15	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a1a	c1 e0 00	 shl	 eax, 0
  00a1d	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00a24	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00a29	6b c2 00	 imul	 eax, edx, 0
  00a2c	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 7780 : 		quad[1].next_vertex	= &quad[2];

  00a33	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a38	d1 e0		 shl	 eax, 1
  00a3a	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00a41	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00a46	c1 e2 00	 shl	 edx, 0
  00a49	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 7781 : 		quad[2].next_vertex	= &quad[3];

  00a50	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a55	6b c8 03	 imul	 ecx, eax, 3
  00a58	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00a5f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a64	d1 e0		 shl	 eax, 1
  00a66	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 7782 : 		quad[3].next_vertex	= NULL;

  00a6d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a72	6b c8 03	 imul	 ecx, eax, 3
  00a75	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 7783 : 
; 7784 :       //
; 7785 :       ////////////////////////////////////////
; 7786 : 
; 7787 : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00a80	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00a86	50		 push	 eax
  00a87	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00a8d	51		 push	 ecx
  00a8e	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00a94	52		 push	 edx
  00a95	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 7788 : 
; 7789 : 		set_d3d_transparency_off ();

  00a9a	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 7790 : 
; 7791 : 		set_d3d_zbuffer_comparison (TRUE);

  00a9f	6a 01		 push	 1
  00aa1	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7792 : 
; 7793 : 		set_d3d_culling (TRUE);

  00aa6	6a 01		 push	 1
  00aa8	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7794 : 
; 7795 : 		end_3d_scene ();

  00aad	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN26@draw_kiowa:
$LN1@draw_kiowa:

; 7796 : 	}
; 7797 : }

  00ab2	5f		 pop	 edi
  00ab3	5e		 pop	 esi
  00ab4	5b		 pop	 ebx
  00ab5	8b e5		 mov	 esp, ebp
  00ab7	5d		 pop	 ebp
  00ab8	c3		 ret	 0
  00ab9	0f 1f 00	 npad	 3
$LN28@draw_kiowa:
  00abc	00 00 00 00	 DD	 $LN11@draw_kiowa
  00ac0	00 00 00 00	 DD	 $LN12@draw_kiowa
  00ac4	00 00 00 00	 DD	 $LN13@draw_kiowa
  00ac8	00 00 00 00	 DD	 $LN14@draw_kiowa
$LN29@draw_kiowa:
  00acc	00 00 00 00	 DD	 $LN17@draw_kiowa
  00ad0	00 00 00 00	 DD	 $LN18@draw_kiowa
  00ad4	00 00 00 00	 DD	 $LN19@draw_kiowa
  00ad8	00 00 00 00	 DD	 $LN20@draw_kiowa
?draw_kiowa_full_screen_display@@YGXXZ ENDP		; draw_kiowa_full_screen_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?draw_kiowa_mfd@@YGXXZ
_TEXT	SEGMENT
tv197 = -84						; size = 4
tv155 = -84						; size = 4
tv65 = -84						; size = 4
_draw_eo_display$1 = -16				; size = 4
_large_mfd$ = -12					; size = 4
_export_right$ = -8					; size = 4
_export_left$ = -4					; size = 4
?draw_kiowa_mfd@@YGXXZ PROC				; draw_kiowa_mfd, COMDAT

; 7256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7257 : 	screen *export_left, *export_right;
; 7258 : 
; 7259 : 	////////////////////////////////////////
; 7260 : 	//
; 7261 : 	// SELECT LARGE OR SMALL MFD TEXTURES
; 7262 : 	//
; 7263 : 	////////////////////////////////////////
; 7264 : 
; 7265 : 	// loke 030420
; 7266 : 	// support for high resolution mfd's
; 7267 : 	int
; 7268 : 		large_mfd;
; 7269 : 
; 7270 : 	if (!command_line_high_res_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00010	75 28		 jne	 SHORT $LN8@draw_kiowa

; 7271 : 	{
; 7272 : 		switch (get_view_mode ())

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00017	89 45 ac	 mov	 DWORD PTR tv65[ebp], eax
  0001a	83 7d ac 26	 cmp	 DWORD PTR tv65[ebp], 38	; 00000026H
  0001e	7c 11		 jl	 SHORT $LN11@draw_kiowa
  00020	83 7d ac 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  00024	7e 02		 jle	 SHORT $LN10@draw_kiowa
  00026	eb 09		 jmp	 SHORT $LN11@draw_kiowa
$LN10@draw_kiowa:

; 7273 : 		{
; 7274 : 			////////////////////////////////////////
; 7275 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 7276 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 7277 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 7278 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 7279 : 			////////////////////////////////////////
; 7280 : 			{
; 7281 : 
; 7282 : 				large_mfd = 1;

  00028	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1

; 7283 : 
; 7284 : 				break;

  0002f	eb 07		 jmp	 SHORT $LN2@draw_kiowa
$LN11@draw_kiowa:

; 7285 : 			}
; 7286 : 			////////////////////////////////////////
; 7287 : 			default:
; 7288 : 			////////////////////////////////////////
; 7289 : 			{
; 7290 : 
; 7291 : 				large_mfd = 0;

  00031	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 0
$LN2@draw_kiowa:

; 7292 : 
; 7293 : 				break;
; 7294 : 			}
; 7295 : 		}
; 7296 : 	}
; 7297 : 	else

  00038	eb 07		 jmp	 SHORT $LN9@draw_kiowa
$LN8@draw_kiowa:

; 7298 : 	{
; 7299 : 		large_mfd = 1;

  0003a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1
$LN9@draw_kiowa:

; 7300 : 	}
; 7301 : 
; 7302 : 	if (large_mfd)

  00041	83 7d f4 00	 cmp	 DWORD PTR _large_mfd$[ebp], 0
  00045	74 34		 je	 SHORT $LN12@draw_kiowa

; 7303 : 	{
; 7304 : 		draw_large_mfd = TRUE;

  00047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 7305 : 
; 7306 : 		co_pilot_main_mfd_texture_screen = large_co_pilot_main_mfd_texture_screen;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7307 : 		pilot_main_mfd_texture_screen = large_pilot_main_mfd_texture_screen;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7308 : 		center_mfd_texture_screen = large_center_mfd_texture_screen;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_center_mfd_texture_screen@@3PAUSCREEN@@A
  0006a	a3 00 00 00 00	 mov	 DWORD PTR ?center_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7309 : 
; 7310 : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00074	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 7311 : 	}
; 7312 : 	else

  00079	eb 32		 jmp	 SHORT $LN13@draw_kiowa
$LN12@draw_kiowa:

; 7313 : 	{
; 7314 : 		draw_large_mfd = FALSE;

  0007b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 7315 : 
; 7316 : 		co_pilot_main_mfd_texture_screen = small_co_pilot_main_mfd_texture_screen;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  0008a	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7317 : 		pilot_main_mfd_texture_screen = small_pilot_main_mfd_texture_screen;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00094	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7318 : 		center_mfd_texture_screen = small_center_mfd_texture_screen;

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_center_mfd_texture_screen@@3PAUSCREEN@@A
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?center_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7319 : 
; 7320 : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  000a8	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN13@draw_kiowa:

; 7321 : 	}
; 7322 : 
; 7323 : 	export_left = co_pilot_main_mfd_texture_screen;

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  000b2	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 7324 : 	export_right = pilot_main_mfd_texture_screen;

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  000ba	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 7325 : 
; 7326 : 	set_system_texture_screen (co_pilot_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  000bd	68 55 06 00 00	 push	 1621			; 00000655H
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7327 : 	set_system_texture_screen (pilot_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  000cd	68 56 06 00 00	 push	 1622			; 00000656H
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7328 : 	set_system_texture_screen (center_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD4);

  000dd	68 57 06 00 00	 push	 1623			; 00000657H
  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?center_mfd_texture_screen@@3PAUSCREEN@@A
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7329 : 
; 7330 : 	////////////////////////////////////////
; 7331 : 	//
; 7332 : 	// SET UP MFD 2D ENVIRONMENT
; 7333 : 	//
; 7334 : 	////////////////////////////////////////
; 7335 : 
; 7336 : 	set_2d_active_environment (mfd_env);

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 7337 : 
; 7338 : 	//
; 7339 : 	// window
; 7340 : 	//
; 7341 : 
; 7342 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  000f8	51		 push	 ecx
  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	51		 push	 ecx
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	51		 push	 ecx
  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	51		 push	 ecx
  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0012b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7343 : 
; 7344 : 	//
; 7345 : 	// viewport
; 7346 : 	//
; 7347 : 
; 7348 : 	if (draw_large_mfd)

  0013b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00142	74 1c		 je	 SHORT $LN14@draw_kiowa

; 7349 : 	{
; 7350 : 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00144	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0014c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 7351 : 
; 7352 : 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00154	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 7353 : 	}
; 7354 : 	else

  0015e	eb 1a		 jmp	 SHORT $LN15@draw_kiowa
$LN14@draw_kiowa:

; 7355 : 	{
; 7356 : 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00168	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 7357 : 
; 7358 : 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00170	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN15@draw_kiowa:

; 7359 : 	}
; 7360 : 
; 7361 : 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  0017a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00182	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0018a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 7362 : 
; 7363 : 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00196	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0019e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001a6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001aa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 7364 : 
; 7365 : 	mfd_viewport_x_min = 0.0;

  001b2	0f 57 c0	 xorps	 xmm0, xmm0
  001b5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 7366 : 
; 7367 : 	mfd_viewport_y_min = 0.0;

  001bd	0f 57 c0	 xorps	 xmm0, xmm0
  001c0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 7368 : 
; 7369 : 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  001c8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001d0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001dc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 7370 : 
; 7371 : 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  001e4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001ec	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 7372 : 
; 7373 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00200	51		 push	 ecx
  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	51		 push	 ecx
  0020f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021c	51		 push	 ecx
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0023d	50		 push	 eax
  0023e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7374 : 
; 7375 : 	mfd_screen_x_min = 0.0;

  00243	0f 57 c0	 xorps	 xmm0, xmm0
  00246	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 7376 : 	mfd_screen_y_min = 0.0;

  0024e	0f 57 c0	 xorps	 xmm0, xmm0
  00251	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 7377 : 
; 7378 : 	mfd_screen_x_max = mfd_viewport_size - 0.001;

  00259	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00261	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00269	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 7379 : 	mfd_screen_y_max = mfd_viewport_size - 0.001;

  00275	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0027d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00285	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00289	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 7380 : 
; 7381 : 	mfd_screen_width = mfd_viewport_size;

  00291	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00299	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 7382 : 	mfd_screen_height = mfd_viewport_size;

  002a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002a9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 7383 : 
; 7384 : 	mfd_screen_x_scale = 1.0;

  002b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 7385 : 	mfd_screen_y_scale = 1.0;

  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002c9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 7386 : 
; 7387 : 	////////////////////////////////////////
; 7388 : 	//
; 7389 : 	// render EO 3D display (if required)
; 7390 : 	//
; 7391 : 	////////////////////////////////////////
; 7392 : 
; 7393 : 	{
; 7394 : 		int
; 7395 : 			draw_eo_display;
; 7396 : 
; 7397 : 		if (d3d_can_render_to_texture)

  002d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  002d8	0f 84 26 01 00
	00		 je	 $LN20@draw_kiowa

; 7398 : 		{
; 7399 : 			ASSERT (eo_3d_texture_screen);

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  002e5	75 1a		 jne	 SHORT $LN17@draw_kiowa
  002e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_kiowa_mfd@@YGXXZ@4JA
  002ec	05 8f 00 00 00	 add	 eax, 143		; 0000008fH
  002f1	50		 push	 eax
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@PFOJIDPL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  002fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@draw_kiowa:

; 7400 : 
; 7401 : 			draw_eo_display = FALSE;

  00301	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 0

; 7402 : 
; 7403 : 			if (get_undamaged_eo_display_mode (co_pilot_main_mfd_mode))

  00308	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4KIOWA_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00313	85 c0		 test	 eax, eax
  00315	74 1f		 je	 SHORT $LN18@draw_kiowa

; 7404 : 			{
; 7405 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  00317	68 55 06 00 00	 push	 1621			; 00000655H
  0031c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7406 : 				export_left = eo_3d_texture_screen;

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0032c	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 7407 : 
; 7408 : 				draw_eo_display = TRUE;

  0032f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN18@draw_kiowa:

; 7409 : 			}
; 7410 : 
; 7411 : 			if (get_undamaged_eo_display_mode (pilot_main_mfd_mode))

  00336	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4KIOWA_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00341	85 c0		 test	 eax, eax
  00343	74 1f		 je	 SHORT $LN19@draw_kiowa

; 7412 : 			{
; 7413 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  00345	68 56 06 00 00	 push	 1622			; 00000656H
  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7414 : 				export_right = eo_3d_texture_screen;

  00355	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0035a	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 7415 : 
; 7416 : 				draw_eo_display = TRUE;

  0035d	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN19@draw_kiowa:

; 7417 : 			}
; 7418 : 
; 7419 : 			if (draw_eo_display)

  00364	83 7d f0 00	 cmp	 DWORD PTR _draw_eo_display$1[ebp], 0
  00368	0f 84 96 00 00
	00		 je	 $LN20@draw_kiowa

; 7420 : 			{
; 7421 : 				switch (get_main_mfd_mode_for_eo_sensor ())

  0036e	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00373	89 45 ac	 mov	 DWORD PTR tv155[ebp], eax
  00376	83 7d ac 02	 cmp	 DWORD PTR tv155[ebp], 2
  0037a	74 08		 je	 SHORT $LN21@draw_kiowa
  0037c	83 7d ac 03	 cmp	 DWORD PTR tv155[ebp], 3
  00380	74 0b		 je	 SHORT $LN22@draw_kiowa
  00382	eb 10		 jmp	 SHORT $LN4@draw_kiowa
$LN21@draw_kiowa:

; 7422 : 				{
; 7423 : 					case KIOWA_MAIN_MFD_MODE_FLIR:
; 7424 : 					{
; 7425 : 						draw_3d_flir_mfd (FALSE);

  00384	6a 00		 push	 0
  00386	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 7426 : 
; 7427 : 						break;

  0038b	eb 07		 jmp	 SHORT $LN4@draw_kiowa
$LN22@draw_kiowa:

; 7428 : 					}
; 7429 : 					case KIOWA_MAIN_MFD_MODE_DTV:
; 7430 : 					{
; 7431 : 						draw_3d_dtv_mfd (FALSE);

  0038d	6a 00		 push	 0
  0038f	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXH@Z ; draw_3d_dtv_mfd
$LN4@draw_kiowa:

; 7432 : 
; 7433 : 						break;
; 7434 : 					}
; 7435 : 				}
; 7436 : 
; 7437 : 				draw_main_display = TRUE;

  00394	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 7438 : 
; 7439 : 				set_active_screen (eo_3d_texture_screen);

  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7440 : 
; 7441 : 				if (lock_screen (eo_3d_texture_screen))

  003a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003ae	50		 push	 eax
  003af	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  003b4	85 c0		 test	 eax, eax
  003b6	74 41		 je	 SHORT $LN23@draw_kiowa

; 7442 : 				{
; 7443 : 					draw_layout_grid ();

  003b8	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7444 : 
; 7445 : 					switch (get_main_mfd_mode_for_eo_sensor ())

  003bd	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4KIOWA_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  003c2	89 45 ac	 mov	 DWORD PTR tv197[ebp], eax
  003c5	83 7d ac 02	 cmp	 DWORD PTR tv197[ebp], 2
  003c9	74 08		 je	 SHORT $LN24@draw_kiowa
  003cb	83 7d ac 03	 cmp	 DWORD PTR tv197[ebp], 3
  003cf	74 0b		 je	 SHORT $LN25@draw_kiowa
  003d1	eb 10		 jmp	 SHORT $LN6@draw_kiowa
$LN24@draw_kiowa:

; 7446 : 					{
; 7447 : 						case KIOWA_MAIN_MFD_MODE_FLIR:
; 7448 : 						{
; 7449 : 							draw_2d_flir_mfd (TRUE);

  003d3	6a 01		 push	 1
  003d5	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 7450 : 
; 7451 : 							break;

  003da	eb 07		 jmp	 SHORT $LN6@draw_kiowa
$LN25@draw_kiowa:

; 7452 : 						}
; 7453 : 						case KIOWA_MAIN_MFD_MODE_DTV:
; 7454 : 						{
; 7455 : 							draw_2d_dtv_mfd (TRUE);

  003dc	6a 01		 push	 1
  003de	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd
$LN6@draw_kiowa:

; 7456 : 
; 7457 : 							break;
; 7458 : 						}
; 7459 : 					}
; 7460 : 
; 7461 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  003e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003e8	50		 push	 eax
  003e9	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7462 : 
; 7463 : 					unlock_screen (eo_3d_texture_screen);

  003ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003f3	50		 push	 eax
  003f4	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_kiowa:

; 7464 : 				}
; 7465 : 
; 7466 : 				set_active_screen (video_screen);

  003f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  003fe	50		 push	 eax
  003ff	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN20@draw_kiowa:

; 7467 : 			}
; 7468 : 		}
; 7469 : 	}
; 7470 : 
; 7471 : 	////////////////////////////////////////
; 7472 : 	//
; 7473 : 	// DRAW DISPLAYS
; 7474 : 	//
; 7475 : 	////////////////////////////////////////
; 7476 : 
; 7477 : 	draw_main_mfd (co_pilot_main_mfd_texture_screen, &co_pilot_main_mfd_mode, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00404	6a 00		 push	 0
  00406	68 00 00 00 00	 push	 OFFSET ?co_pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  0040b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_main_mfd

; 7478 : 
; 7479 : 	draw_main_mfd (pilot_main_mfd_texture_screen, &pilot_main_mfd_mode, KIOWA_MAIN_MFD_LOCATION_PILOT);

  00416	6a 01		 push	 1
  00418	68 00 00 00 00	 push	 OFFSET ?pilot_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  0041d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 ?draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_main_mfd

; 7480 : 
; 7481 : 	draw_main_mfd (center_mfd_texture_screen, &center_main_mfd_mode, KIOWA_MAIN_MFD_LOCATION_CENTER);

  00428	6a 02		 push	 2
  0042a	68 00 00 00 00	 push	 OFFSET ?center_main_mfd_mode@@3W4KIOWA_MAIN_MFD_MODES@@A
  0042f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?center_mfd_texture_screen@@3PAUSCREEN@@A
  00434	50		 push	 eax
  00435	e8 00 00 00 00	 call	 ?draw_main_mfd@@YGXPAUSCREEN@@PAW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; draw_main_mfd

; 7482 : 
; 7483 : 	if (command_line_export_mfd)

  0043a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  00441	74 0d		 je	 SHORT $LN26@draw_kiowa

; 7484 : 		copy_export_mfd(export_left, export_right);

  00443	8b 45 f8	 mov	 eax, DWORD PTR _export_right$[ebp]
  00446	50		 push	 eax
  00447	8b 4d fc	 mov	 ecx, DWORD PTR _export_left$[ebp]
  0044a	51		 push	 ecx
  0044b	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN26@draw_kiowa:

; 7485 : }

  00450	5f		 pop	 edi
  00451	5e		 pop	 esi
  00452	5b		 pop	 ebx
  00453	8b e5		 mov	 esp, ebp
  00455	5d		 pop	 ebp
  00456	c3		 ret	 0
?draw_kiowa_mfd@@YGXXZ ENDP				; draw_kiowa_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?deinitialise_kiowa_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_kiowa_mfd@@YGXXZ PROC			; deinitialise_kiowa_mfd, COMDAT

; 7235 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7236 : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 7237 : 
; 7238 : 	////////////////////////////////////////
; 7239 : 
; 7240 : 	destroy_screen (large_co_pilot_main_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 7241 : 	destroy_screen (large_pilot_main_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 7242 : 	destroy_screen (large_center_mfd_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_center_mfd_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 7243 : 
; 7244 : 	destroy_screen (small_co_pilot_main_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 7245 : 	destroy_screen (small_pilot_main_mfd_texture_screen);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 7246 : 	destroy_screen (small_center_mfd_texture_screen);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_center_mfd_texture_screen@@3PAUSCREEN@@A
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 7247 : 
; 7248 : 	destroy_screen (full_mfd_texture_screen);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 7249 : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?deinitialise_kiowa_mfd@@YGXXZ ENDP			; deinitialise_kiowa_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\kiowa\ki_mfd.c
;	COMDAT ?initialise_kiowa_mfd@@YGXXZ
_TEXT	SEGMENT
?initialise_kiowa_mfd@@YGXXZ PROC			; initialise_kiowa_mfd, COMDAT

; 7138 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7139 : 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 1d		 je	 SHORT $LN2@initialise

; 7140 : 	{
; 7141 : 		select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_OFF, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 7142 : 		select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_OFF, KIOWA_MAIN_MFD_LOCATION_PILOT);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 7143 : 		select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_OFF, KIOWA_MAIN_MFD_LOCATION_CENTER);

  00024	6a 02		 push	 2
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 7144 : 	}
; 7145 : 	else

  0002d	eb 1b		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 7146 : 	{
; 7147 : 		select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_ASE, KIOWA_MAIN_MFD_LOCATION_CO_PILOT);

  0002f	6a 00		 push	 0
  00031	6a 05		 push	 5
  00033	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 7148 : 		select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_TSD, KIOWA_MAIN_MFD_LOCATION_PILOT);

  00038	6a 01		 push	 1
  0003a	6a 04		 push	 4
  0003c	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode

; 7149 : 		select_kiowa_main_mfd_mode (KIOWA_MAIN_MFD_MODE_SYSTEM, KIOWA_MAIN_MFD_LOCATION_CENTER);

  00041	6a 02		 push	 2
  00043	6a 07		 push	 7
  00045	e8 00 00 00 00	 call	 ?select_kiowa_main_mfd_mode@@YGXW4KIOWA_MAIN_MFD_MODES@@W4KIOWA_MAIN_MFD_LOCATIONS@@@Z ; select_kiowa_main_mfd_mode
$LN3@initialise:

; 7150 : 	}
; 7151 : 
; 7152 : 	////////////////////////////////////////
; 7153 : 
; 7154 : 	pilot_tsd_ase_range							= TSD_ASE_RANGE_5000;

  0004a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00052	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0

; 7155 : 	pilot_tsd_declutter_level					= TSD_DECLUTTER_LEVEL_NAVIGATION;

  0005a	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 7156 : 	pilot_tsd_threat_line_flash_timer		= TSD_THREAT_LINE_FLASH_RATE;

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0006c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 7157 : 	pilot_tsd_draw_threat_line_status		= 0;

  00074	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_draw_threat_line_status@@3HA, 0

; 7158 : 	pilot_ase_threat_line_flash_timer		= ASE_THREAT_LINE_FLASH_RATE;

  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00086	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 7159 : 	pilot_ase_draw_threat_line_status		= 0;

  0008e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_ase_draw_threat_line_status@@3HA, 0

; 7160 : 
; 7161 : 	co_pilot_tsd_ase_range						= TSD_ASE_RANGE_5000;

  00098	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  000a0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0

; 7162 : 	co_pilot_tsd_declutter_level				= TSD_DECLUTTER_LEVEL_TARGET;

  000a8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1

; 7163 : 	co_pilot_tsd_threat_line_flash_timer	= TSD_THREAT_LINE_FLASH_RATE;

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 7164 : 	co_pilot_tsd_draw_threat_line_status	= 0;

  000c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_draw_threat_line_status@@3HA, 0

; 7165 : 	co_pilot_ase_threat_line_flash_timer	= ASE_THREAT_LINE_FLASH_RATE;

  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000d4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 7166 : 	co_pilot_ase_draw_threat_line_status	= 0;

  000dc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_ase_draw_threat_line_status@@3HA, 0

; 7167 : 
; 7168 : 	////////////////////////////////////////
; 7169 : 
; 7170 : 	mfd_env = create_2d_environment ();

  000e6	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  000eb	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 7171 : 
; 7172 : 	////////////////////////////////////////
; 7173 : 	large_co_pilot_main_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  000f0	6a 00		 push	 0
  000f2	6a 02		 push	 2
  000f4	68 00 01 00 00	 push	 256			; 00000100H
  000f9	68 00 01 00 00	 push	 256			; 00000100H
  000fe	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00103	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7174 : 	large_pilot_main_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00108	6a 00		 push	 0
  0010a	6a 02		 push	 2
  0010c	68 00 01 00 00	 push	 256			; 00000100H
  00111	68 00 01 00 00	 push	 256			; 00000100H
  00116	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0011b	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7175 : 	large_center_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00120	6a 00		 push	 0
  00122	6a 02		 push	 2
  00124	68 00 01 00 00	 push	 256			; 00000100H
  00129	68 00 01 00 00	 push	 256			; 00000100H
  0012e	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00133	a3 00 00 00 00	 mov	 DWORD PTR ?large_center_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7176 : 
; 7177 : 	small_co_pilot_main_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00138	6a 00		 push	 0
  0013a	6a 02		 push	 2
  0013c	68 80 00 00 00	 push	 128			; 00000080H
  00141	68 80 00 00 00	 push	 128			; 00000080H
  00146	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0014b	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7178 : 	small_pilot_main_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00150	6a 00		 push	 0
  00152	6a 02		 push	 2
  00154	68 80 00 00 00	 push	 128			; 00000080H
  00159	68 80 00 00 00	 push	 128			; 00000080H
  0015e	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00163	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7179 : 	small_center_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00168	6a 00		 push	 0
  0016a	6a 02		 push	 2
  0016c	68 80 00 00 00	 push	 128			; 00000080H
  00171	68 80 00 00 00	 push	 128			; 00000080H
  00176	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0017b	a3 00 00 00 00	 mov	 DWORD PTR ?small_center_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7180 : 
; 7181 : 	full_mfd_texture_screen = create_system_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  00180	6a 02		 push	 2
  00182	68 f9 00 00 00	 push	 249			; 000000f9H
  00187	68 00 01 00 00	 push	 256			; 00000100H
  0018c	68 00 01 00 00	 push	 256			; 00000100H
  00191	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00196	a3 00 00 00 00	 mov	 DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7182 : 
; 7183 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  0019b	b8 04 00 00 00	 mov	 eax, 4
  001a0	6b c8 00	 imul	 ecx, eax, 0
  001a3	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  001aa	b8 04 00 00 00	 mov	 eax, 4
  001af	6b c8 00	 imul	 ecx, eax, 0
  001b2	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  001b9	b8 04 00 00 00	 mov	 eax, 4
  001be	6b c8 00	 imul	 ecx, eax, 0
  001c1	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  001c8	b8 04 00 00 00	 mov	 eax, 4
  001cd	6b c8 00	 imul	 ecx, eax, 0
  001d0	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7184 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  001d7	b8 04 00 00 00	 mov	 eax, 4
  001dc	c1 e0 00	 shl	 eax, 0
  001df	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  001e6	b8 04 00 00 00	 mov	 eax, 4
  001eb	c1 e0 00	 shl	 eax, 0
  001ee	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  001f5	b8 04 00 00 00	 mov	 eax, 4
  001fa	c1 e0 00	 shl	 eax, 0
  001fd	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00204	b8 04 00 00 00	 mov	 eax, 4
  00209	c1 e0 00	 shl	 eax, 0
  0020c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7185 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  00213	b8 04 00 00 00	 mov	 eax, 4
  00218	d1 e0		 shl	 eax, 1
  0021a	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00221	b8 04 00 00 00	 mov	 eax, 4
  00226	d1 e0		 shl	 eax, 1
  00228	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	d1 e0		 shl	 eax, 1
  00236	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0023d	b8 04 00 00 00	 mov	 eax, 4
  00242	d1 e0		 shl	 eax, 1
  00244	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7186 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  0024b	b8 04 00 00 00	 mov	 eax, 4
  00250	6b c8 03	 imul	 ecx, eax, 3
  00253	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0025a	b8 04 00 00 00	 mov	 eax, 4
  0025f	6b c8 03	 imul	 ecx, eax, 3
  00262	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00269	b8 04 00 00 00	 mov	 eax, 4
  0026e	6b c8 03	 imul	 ecx, eax, 3
  00271	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 03	 imul	 ecx, eax, 3
  00280	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7187 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  00287	b8 04 00 00 00	 mov	 eax, 4
  0028c	c1 e0 02	 shl	 eax, 2
  0028f	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00296	b8 04 00 00 00	 mov	 eax, 4
  0029b	c1 e0 02	 shl	 eax, 2
  0029e	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  002a5	b8 04 00 00 00	 mov	 eax, 4
  002aa	c1 e0 02	 shl	 eax, 2
  002ad	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  002b4	b8 04 00 00 00	 mov	 eax, 4
  002b9	c1 e0 02	 shl	 eax, 2
  002bc	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7188 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  002c3	b8 04 00 00 00	 mov	 eax, 4
  002c8	6b c8 05	 imul	 ecx, eax, 5
  002cb	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  002d2	b8 04 00 00 00	 mov	 eax, 4
  002d7	6b c8 05	 imul	 ecx, eax, 5
  002da	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  002e1	b8 04 00 00 00	 mov	 eax, 4
  002e6	6b c8 05	 imul	 ecx, eax, 5
  002e9	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  002f0	b8 04 00 00 00	 mov	 eax, 4
  002f5	6b c8 05	 imul	 ecx, eax, 5
  002f8	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7189 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     255, 100,   0, 255);

  002ff	b8 04 00 00 00	 mov	 eax, 4
  00304	6b c8 06	 imul	 ecx, eax, 6
  00307	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0030e	b8 04 00 00 00	 mov	 eax, 4
  00313	6b c8 06	 imul	 ecx, eax, 6
  00316	c6 81 01 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 100 ; 00000064H
  0031d	b8 04 00 00 00	 mov	 eax, 4
  00322	6b c8 06	 imul	 ecx, eax, 6
  00325	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0032c	b8 04 00 00 00	 mov	 eax, 4
  00331	6b c8 06	 imul	 ecx, eax, 6
  00334	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7190 : 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  0033b	b8 04 00 00 00	 mov	 eax, 4
  00340	6b c8 07	 imul	 ecx, eax, 7
  00343	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  0034a	b8 04 00 00 00	 mov	 eax, 4
  0034f	6b c8 07	 imul	 ecx, eax, 7
  00352	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  00359	b8 04 00 00 00	 mov	 eax, 4
  0035e	6b c8 07	 imul	 ecx, eax, 7
  00361	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 07	 imul	 ecx, eax, 7
  00370	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7191 : 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 200,   0, 255);

  00377	b8 04 00 00 00	 mov	 eax, 4
  0037c	c1 e0 03	 shl	 eax, 3
  0037f	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00386	b8 04 00 00 00	 mov	 eax, 4
  0038b	c1 e0 03	 shl	 eax, 3
  0038e	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00395	b8 04 00 00 00	 mov	 eax, 4
  0039a	c1 e0 03	 shl	 eax, 3
  0039d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  003a4	b8 04 00 00 00	 mov	 eax, 4
  003a9	c1 e0 03	 shl	 eax, 3
  003ac	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7192 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   15,  24,  16, 255);

  003b3	b8 04 00 00 00	 mov	 eax, 4
  003b8	6b c8 09	 imul	 ecx, eax, 9
  003bb	c6 81 02 00 00
	00 0f		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 15 ; 0000000fH
  003c2	b8 04 00 00 00	 mov	 eax, 4
  003c7	6b c8 09	 imul	 ecx, eax, 9
  003ca	c6 81 01 00 00
	00 18		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 24 ; 00000018H
  003d1	b8 04 00 00 00	 mov	 eax, 4
  003d6	6b c8 09	 imul	 ecx, eax, 9
  003d9	c6 81 00 00 00
	00 10		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 16 ; 00000010H
  003e0	b8 04 00 00 00	 mov	 eax, 4
  003e5	6b c8 09	 imul	 ecx, eax, 9
  003e8	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7193 : 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0,   0);

  003ef	b8 04 00 00 00	 mov	 eax, 4
  003f4	6b c8 0a	 imul	 ecx, eax, 10
  003f7	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  003fe	b8 04 00 00 00	 mov	 eax, 4
  00403	6b c8 0a	 imul	 ecx, eax, 10
  00406	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  0040d	b8 04 00 00 00	 mov	 eax, 4
  00412	6b c8 0a	 imul	 ecx, eax, 10
  00415	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0041c	b8 04 00 00 00	 mov	 eax, 4
  00421	6b c8 0a	 imul	 ecx, eax, 10
  00424	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 7194 : 
; 7195 : 	if (command_line_colour_mfd)

  0042b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00432	0f 84 e5 01 00
	00		 je	 $LN4@initialise

; 7196 : 	{
; 7197 : 		set_rgb_colour (MFD_COLOUR_BLUE,          60, 160, 255,  255);

  00438	b8 04 00 00 00	 mov	 eax, 4
  0043d	6b c8 0c	 imul	 ecx, eax, 12
  00440	c6 81 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 60 ; 0000003cH
  00447	b8 04 00 00 00	 mov	 eax, 4
  0044c	6b c8 0c	 imul	 ecx, eax, 12
  0044f	c6 81 01 00 00
	00 a0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 160 ; 000000a0H
  00456	b8 04 00 00 00	 mov	 eax, 4
  0045b	6b c8 0c	 imul	 ecx, eax, 12
  0045e	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00465	b8 04 00 00 00	 mov	 eax, 4
  0046a	6b c8 0c	 imul	 ecx, eax, 12
  0046d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7198 : 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,	   0,   0,  96,  255);

  00474	b8 04 00 00 00	 mov	 eax, 4
  00479	6b c8 11	 imul	 ecx, eax, 17
  0047c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00483	b8 04 00 00 00	 mov	 eax, 4
  00488	6b c8 11	 imul	 ecx, eax, 17
  0048b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00492	b8 04 00 00 00	 mov	 eax, 4
  00497	6b c8 11	 imul	 ecx, eax, 17
  0049a	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  004a1	b8 04 00 00 00	 mov	 eax, 4
  004a6	6b c8 11	 imul	 ecx, eax, 17
  004a9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7199 : 		set_rgb_colour (MFD_COLOUR_YELLOW,       230, 230,  40,  255);

  004b0	b8 04 00 00 00	 mov	 eax, 4
  004b5	6b c8 0d	 imul	 ecx, eax, 13
  004b8	c6 81 02 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 230 ; 000000e6H
  004bf	b8 04 00 00 00	 mov	 eax, 4
  004c4	6b c8 0d	 imul	 ecx, eax, 13
  004c7	c6 81 01 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 230 ; 000000e6H
  004ce	b8 04 00 00 00	 mov	 eax, 4
  004d3	6b c8 0d	 imul	 ecx, eax, 13
  004d6	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  004dd	b8 04 00 00 00	 mov	 eax, 4
  004e2	6b c8 0d	 imul	 ecx, eax, 13
  004e5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7200 : 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,  165, 165,  30,  255);

  004ec	b8 04 00 00 00	 mov	 eax, 4
  004f1	6b c8 0e	 imul	 ecx, eax, 14
  004f4	c6 81 02 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 165 ; 000000a5H
  004fb	b8 04 00 00 00	 mov	 eax, 4
  00500	6b c8 0e	 imul	 ecx, eax, 14
  00503	c6 81 01 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 165 ; 000000a5H
  0050a	b8 04 00 00 00	 mov	 eax, 4
  0050f	6b c8 0e	 imul	 ecx, eax, 14
  00512	c6 81 00 00 00
	00 1e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 30 ; 0000001eH
  00519	b8 04 00 00 00	 mov	 eax, 4
  0051e	6b c8 0e	 imul	 ecx, eax, 14
  00521	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7201 : 		set_rgb_colour (MFD_COLOUR_RED,          255,  40,  40,  255);

  00528	b8 04 00 00 00	 mov	 eax, 4
  0052d	6b c8 0f	 imul	 ecx, eax, 15
  00530	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00537	b8 04 00 00 00	 mov	 eax, 4
  0053c	6b c8 0f	 imul	 ecx, eax, 15
  0053f	c6 81 01 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 40 ; 00000028H
  00546	b8 04 00 00 00	 mov	 eax, 4
  0054b	6b c8 0f	 imul	 ecx, eax, 15
  0054e	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  00555	b8 04 00 00 00	 mov	 eax, 4
  0055a	6b c8 0f	 imul	 ecx, eax, 15
  0055d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7202 : 		set_rgb_colour (MFD_COLOUR_DARK_RED,	 148,   8,   8,  255);

  00564	b8 04 00 00 00	 mov	 eax, 4
  00569	6b c8 12	 imul	 ecx, eax, 18
  0056c	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  00573	b8 04 00 00 00	 mov	 eax, 4
  00578	6b c8 12	 imul	 ecx, eax, 18
  0057b	c6 81 01 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 8
  00582	b8 04 00 00 00	 mov	 eax, 4
  00587	6b c8 12	 imul	 ecx, eax, 18
  0058a	c6 81 00 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 8
  00591	b8 04 00 00 00	 mov	 eax, 4
  00596	6b c8 12	 imul	 ecx, eax, 18
  00599	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7203 : 		set_rgb_colour (MFD_COLOUR_CYAN,          60, 255, 230,  255);

  005a0	b8 04 00 00 00	 mov	 eax, 4
  005a5	c1 e0 04	 shl	 eax, 4
  005a8	c6 80 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 60 ; 0000003cH
  005af	b8 04 00 00 00	 mov	 eax, 4
  005b4	c1 e0 04	 shl	 eax, 4
  005b7	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  005be	b8 04 00 00 00	 mov	 eax, 4
  005c3	c1 e0 04	 shl	 eax, 4
  005c6	c6 80 00 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 230 ; 000000e6H
  005cd	b8 04 00 00 00	 mov	 eax, 4
  005d2	c1 e0 04	 shl	 eax, 4
  005d5	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7204 : 		set_rgb_colour (MFD_COLOUR_WHITE,        200, 200, 240,  255);

  005dc	b8 04 00 00 00	 mov	 eax, 4
  005e1	6b c8 13	 imul	 ecx, eax, 19
  005e4	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  005eb	b8 04 00 00 00	 mov	 eax, 4
  005f0	6b c8 13	 imul	 ecx, eax, 19
  005f3	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 13	 imul	 ecx, eax, 19
  00602	c6 81 00 00 00
	00 f0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 240 ; 000000f0H
  00609	b8 04 00 00 00	 mov	 eax, 4
  0060e	6b c8 13	 imul	 ecx, eax, 19
  00611	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7205 : 	}
; 7206 : 	else

  00618	e9 e0 01 00 00	 jmp	 $LN5@initialise
$LN4@initialise:

; 7207 : 	{
; 7208 : 		set_rgb_colour (MFD_COLOUR_BLUE,           0, 200,   0, 255);

  0061d	b8 04 00 00 00	 mov	 eax, 4
  00622	6b c8 0c	 imul	 ecx, eax, 12
  00625	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0062c	b8 04 00 00 00	 mov	 eax, 4
  00631	6b c8 0c	 imul	 ecx, eax, 12
  00634	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  0063b	b8 04 00 00 00	 mov	 eax, 4
  00640	6b c8 0c	 imul	 ecx, eax, 12
  00643	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0064a	b8 04 00 00 00	 mov	 eax, 4
  0064f	6b c8 0c	 imul	 ecx, eax, 12
  00652	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7209 : 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,      0, 128,   0, 255);

  00659	b8 04 00 00 00	 mov	 eax, 4
  0065e	6b c8 11	 imul	 ecx, eax, 17
  00661	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00668	b8 04 00 00 00	 mov	 eax, 4
  0066d	6b c8 11	 imul	 ecx, eax, 17
  00670	c6 81 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 128 ; 00000080H
  00677	b8 04 00 00 00	 mov	 eax, 4
  0067c	6b c8 11	 imul	 ecx, eax, 17
  0067f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00686	b8 04 00 00 00	 mov	 eax, 4
  0068b	6b c8 11	 imul	 ecx, eax, 17
  0068e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7210 : 		set_rgb_colour (MFD_COLOUR_YELLOW,         0, 255,   0, 255);

  00695	b8 04 00 00 00	 mov	 eax, 4
  0069a	6b c8 0d	 imul	 ecx, eax, 13
  0069d	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006a4	b8 04 00 00 00	 mov	 eax, 4
  006a9	6b c8 0d	 imul	 ecx, eax, 13
  006ac	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  006b3	b8 04 00 00 00	 mov	 eax, 4
  006b8	6b c8 0d	 imul	 ecx, eax, 13
  006bb	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006c2	b8 04 00 00 00	 mov	 eax, 4
  006c7	6b c8 0d	 imul	 ecx, eax, 13
  006ca	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7211 : 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,    0, 200,   0, 255);

  006d1	b8 04 00 00 00	 mov	 eax, 4
  006d6	6b c8 0e	 imul	 ecx, eax, 14
  006d9	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006e0	b8 04 00 00 00	 mov	 eax, 4
  006e5	6b c8 0e	 imul	 ecx, eax, 14
  006e8	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  006ef	b8 04 00 00 00	 mov	 eax, 4
  006f4	6b c8 0e	 imul	 ecx, eax, 14
  006f7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006fe	b8 04 00 00 00	 mov	 eax, 4
  00703	6b c8 0e	 imul	 ecx, eax, 14
  00706	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7212 : 		set_rgb_colour (MFD_COLOUR_RED,            0, 200,   0, 255);

  0070d	b8 04 00 00 00	 mov	 eax, 4
  00712	6b c8 0f	 imul	 ecx, eax, 15
  00715	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0071c	b8 04 00 00 00	 mov	 eax, 4
  00721	6b c8 0f	 imul	 ecx, eax, 15
  00724	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  0072b	b8 04 00 00 00	 mov	 eax, 4
  00730	6b c8 0f	 imul	 ecx, eax, 15
  00733	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0073a	b8 04 00 00 00	 mov	 eax, 4
  0073f	6b c8 0f	 imul	 ecx, eax, 15
  00742	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7213 : 		set_rgb_colour (MFD_COLOUR_DARK_RED,       0, 128,   0, 255);

  00749	b8 04 00 00 00	 mov	 eax, 4
  0074e	6b c8 12	 imul	 ecx, eax, 18
  00751	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00758	b8 04 00 00 00	 mov	 eax, 4
  0075d	6b c8 12	 imul	 ecx, eax, 18
  00760	c6 81 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 128 ; 00000080H
  00767	b8 04 00 00 00	 mov	 eax, 4
  0076c	6b c8 12	 imul	 ecx, eax, 18
  0076f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00776	b8 04 00 00 00	 mov	 eax, 4
  0077b	6b c8 12	 imul	 ecx, eax, 18
  0077e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7214 : 		set_rgb_colour (MFD_COLOUR_CYAN,           0, 255,   0, 255);

  00785	b8 04 00 00 00	 mov	 eax, 4
  0078a	c1 e0 04	 shl	 eax, 4
  0078d	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00794	b8 04 00 00 00	 mov	 eax, 4
  00799	c1 e0 04	 shl	 eax, 4
  0079c	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  007a3	b8 04 00 00 00	 mov	 eax, 4
  007a8	c1 e0 04	 shl	 eax, 4
  007ab	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  007b2	b8 04 00 00 00	 mov	 eax, 4
  007b7	c1 e0 04	 shl	 eax, 4
  007ba	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7215 : 		set_rgb_colour (MFD_COLOUR_WHITE,          0, 255,   0, 255);

  007c1	b8 04 00 00 00	 mov	 eax, 4
  007c6	6b c8 13	 imul	 ecx, eax, 19
  007c9	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  007d0	b8 04 00 00 00	 mov	 eax, 4
  007d5	6b c8 13	 imul	 ecx, eax, 19
  007d8	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  007df	b8 04 00 00 00	 mov	 eax, 4
  007e4	6b c8 13	 imul	 ecx, eax, 19
  007e7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	6b c8 13	 imul	 ecx, eax, 19
  007f6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH
$LN5@initialise:

; 7216 : 	}
; 7217 : 
; 7218 : 	set_rgb_colour (TEXT_COLOUR1,           254, 204,   1, 255);

  007fd	b8 04 00 00 00	 mov	 eax, 4
  00802	6b c8 00	 imul	 ecx, eax, 0
  00805	c6 81 02 00 00
	00 fe		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+2], 254 ; 000000feH
  0080c	b8 04 00 00 00	 mov	 eax, 4
  00811	6b c8 00	 imul	 ecx, eax, 0
  00814	c6 81 01 00 00
	00 cc		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+1], 204 ; 000000ccH
  0081b	b8 04 00 00 00	 mov	 eax, 4
  00820	6b c8 00	 imul	 ecx, eax, 0
  00823	c6 81 00 00 00
	00 01		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx], 1
  0082a	b8 04 00 00 00	 mov	 eax, 4
  0082f	6b c8 00	 imul	 ecx, eax, 0
  00832	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7219 : 	set_rgb_colour (TEXT_BACKGROUND_COLOUR,  66,  35,  11, 255);

  00839	b8 04 00 00 00	 mov	 eax, 4
  0083e	c1 e0 00	 shl	 eax, 0
  00841	c6 80 02 00 00
	00 42		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+2], 66 ; 00000042H
  00848	b8 04 00 00 00	 mov	 eax, 4
  0084d	c1 e0 00	 shl	 eax, 0
  00850	c6 80 01 00 00
	00 23		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+1], 35 ; 00000023H
  00857	b8 04 00 00 00	 mov	 eax, 4
  0085c	c1 e0 00	 shl	 eax, 0
  0085f	c6 80 00 00 00
	00 0b		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax], 11 ; 0000000bH
  00866	b8 04 00 00 00	 mov	 eax, 4
  0086b	c1 e0 00	 shl	 eax, 0
  0086e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7220 : 
; 7221 : 	set_rgb_colour (clear_mfd_colour, 255, 255, 255, 0);

  00875	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  0087c	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  00883	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  0088a	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0

; 7222 : 
; 7223 : 	initalize_horizon_mask(LARGE_MFD_VIEWPORT_SIZE * 3 / 4, &main_horizon_mask);

  00891	68 00 00 00 00	 push	 OFFSET ?main_horizon_mask@@3PADA
  00896	68 c0 00 00 00	 push	 192			; 000000c0H
  0089b	e8 00 00 00 00	 call	 ?initalize_horizon_mask@@YGXHPAPAD@Z ; initalize_horizon_mask

; 7224 : 
; 7225 : //VJ 030423 TSd render mod
; 7226 : 
; 7227 :    Initialise_TSD_render_terrain();

  008a0	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 7228 : }

  008a5	5f		 pop	 edi
  008a6	5e		 pop	 esi
  008a7	5b		 pop	 ebx
  008a8	8b e5		 mov	 esp, ebp
  008aa	5d		 pop	 ebp
  008ab	c3		 ret	 0
?initialise_kiowa_mfd@@YGXXZ ENDP			; initialise_kiowa_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
