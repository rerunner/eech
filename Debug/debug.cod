; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\system\debug.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?debug_fatal_warning_tone@@3HA			; debug_fatal_warning_tone
PUBLIC	?application_monitor_thread@@3PAXA		; application_monitor_thread
_BSS	SEGMENT
?application_monitor_thread@@3PAXA DD 01H DUP (?)	; application_monitor_thread
_BSS	ENDS
_DATA	SEGMENT
?debug_fatal_warning_tone@@3HA DD 01H			; debug_fatal_warning_tone
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_vsprintf
PUBLIC	_sprintf
PUBLIC	?debug_set_window_creation@@YGXW4debug_window_creation@@@Z ; debug_set_window_creation
PUBLIC	?debug_set_windows_update@@YGXW4debug_update_state@@@Z ; debug_set_windows_update
PUBLIC	?debug_set_logging@@YGXH@Z			; debug_set_logging
PUBLIC	?suppress_debug_log_timing_info@@YGXH@Z		; suppress_debug_log_timing_info
PUBLIC	?initialise_debug_system@@YGXH@Z		; initialise_debug_system
PUBLIC	?debug_fatal@@YAXPBDZZ				; debug_fatal
PUBLIC	?debug_warning@@YAXPBDZZ			; debug_warning
PUBLIC	?debug_log@@YAXPBDZZ				; debug_log
PUBLIC	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ	; debug_colour_log
PUBLIC	?debug_filtered_log@@YAXPBDZZ			; debug_filtered_log
PUBLIC	?debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_filtered_log
PUBLIC	?debug_watch@@YGXPBDW4mt_type@@PAX@Z		; debug_watch
PUBLIC	?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch
PUBLIC	?debug_watch2@@YGXPBDW4mt_type@@PAX2@Z		; debug_watch2
PUBLIC	?debug_colour_watch2@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX3@Z ; debug_colour_watch2
PUBLIC	?debug_watch3@@YGXPBDW4mt_type@@PAX22@Z		; debug_watch3
PUBLIC	?debug_colour_watch3@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX33@Z ; debug_colour_watch3
PUBLIC	?debug_watch4@@YGXPBDW4mt_type@@PAX222@Z	; debug_watch4
PUBLIC	?debug_colour_watch4@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX333@Z ; debug_colour_watch4
PUBLIC	?update_debug_windows@@YGXXZ			; update_debug_windows
PUBLIC	?breakout@@YGXPAUEVENT@@@Z			; breakout
PUBLIC	?rename_debug_log_file@@YGXPBD@Z		; rename_debug_log_file
PUBLIC	?add_watch_item@@YGXPAUmonitor_data@@@Z		; add_watch_item
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_09HMOECKJA@DEBUG?4LOG@			; `string'
PUBLIC	??_C@_09PECAGPIN@DEBUG?4FIL@			; `string'
PUBLIC	??_C@_0O@GGOHDKAL@DebugLogClass@		; `string'
PUBLIC	??_C@_0BA@COPDOKBF@DebugWatchClass@		; `string'
PUBLIC	??_C@_0BG@HFHENEIP@DebugLogFilteredClass@	; `string'
PUBLIC	??_C@_09NNILCKOM@Debug?5Log@			; `string'
PUBLIC	??_C@_0M@FKEIIICD@Debug?5Watch@			; `string'
PUBLIC	??_C@_0BB@GKODMJEL@Debug?5Log?5Filter@		; `string'
PUBLIC	??_C@_07HNIILHCJ@?5?$EA?5?$CF?42f@		; `string'
PUBLIC	??_C@_01MCMALHOG@a@				; `string'
PUBLIC	??_C@_0FA@EKGDBMPL@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	?__LINE__Var@?0??rename_debug_log_file@@YGXPBD@Z@4JA ; `rename_debug_log_file'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@OONGKJMN@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0O@LDHMMFMC@new_file_name@		; `string'
PUBLIC	??_C@_0BL@LDGPFEI@strlen?5?$CInew_file_name?$CJ?5?$DO?50@ ; `string'
PUBLIC	??_C@_0BN@PLCONNKF@strlen?5?$CInew_file_name?$CJ?5?$DM?5100@ ; `string'
PUBLIC	??_C@_0CG@ICMOOLIJ@Renaming?5debug?5log?5file?5from?5?$CFs@ ; `string'
PUBLIC	??_C@_0CF@EBJJPPOJ@Unlink?5debug?5log?5failed?5?$CIerror?5@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0BH@GINCGKAH@No?5debug?5log?5to?5rename@	; `string'
PUBLIC	??_C@_0CF@CLIJGILI@Rename?5debug?5log?5failed?5?$CIerror?5@ ; `string'
PUBLIC	__real@4059000000000000
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fputs:PROC
EXTRN	__imp__rename:PROC
EXTRN	__imp___unlink:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp___strdup:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__Beep@8:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__GetTextExtentPoint32A@16:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetTextCharacterExtra@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__GetTextMetricsA@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__SetFocus@4:PROC
EXTRN	__imp__TabbedTextOutA@32:PROC
EXTRN	__imp__GetTabbedTextExtentA@20:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__SetScrollPos@16:PROC
EXTRN	__imp__GetScrollPos@8:PROC
EXTRN	__imp__SetScrollRange@20:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?register_exit_function@@YGXP6GXXZ@Z:PROC	; register_exit_function
EXTRN	?register_user_message_function@@YGHHP6GJPAX@Z@Z:PROC ; register_user_message_function
EXTRN	?end_application@@YGXXZ:PROC			; end_application
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?get_unique_message_id@@YGHXZ:PROC		; get_unique_message_id
EXTRN	__chkstk:PROC
EXTRN	?application_window@@3PAUHWND__@@A:DWORD	; application_window
EXTRN	?application_instance@@3PAUHINSTANCE__@@A:DWORD	; application_instance
EXTRN	?bExiting@@3HA:DWORD				; bExiting
EXTRN	?application_debug_fatal@@3HA:DWORD		; application_debug_fatal
EXTRN	?application_debug_fatal_string@@3PADA:BYTE	; application_debug_fatal_string
EXTRN	?system_ticks@@3HC:DWORD			; system_ticks
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?application_debug_log_window@@3PAUHWND__@@A DD 01H DUP (?) ; application_debug_log_window
?application_debug_watch_window@@3PAUHWND__@@A DD 01H DUP (?) ; application_debug_watch_window
?application_debug_filtered_log_window@@3PAUHWND__@@A DD 01H DUP (?) ; application_debug_filtered_log_window
?first_log_monitor@@3PAUmonitor_data@@A DD 01H DUP (?)	; first_log_monitor
?last_log_monitor@@3PAUmonitor_data@@A DD 01H DUP (?)	; last_log_monitor
?first_filtered_log_monitor@@3PAUmonitor_data@@A DD 01H DUP (?) ; first_filtered_log_monitor
?last_filtered_log_monitor@@3PAUmonitor_data@@A DD 01H DUP (?) ; last_filtered_log_monitor
?first_watch_monitor@@3PAUmonitor_data@@A DD 01H DUP (?) ; first_watch_monitor
?top_watch_monitor@@3PAUmonitor_data@@A DD 01H DUP (?)	; top_watch_monitor
?last_watch_monitor@@3PAUmonitor_data@@A DD 01H DUP (?)	; last_watch_monitor
?top_log_monitor@@3PAUmonitor_data@@A DD 01H DUP (?)	; top_log_monitor
?top_filtered_log_monitor@@3PAUmonitor_data@@A DD 01H DUP (?) ; top_filtered_log_monitor
?debug_monitor_auto_update@@3HA DD 01H DUP (?)		; debug_monitor_auto_update
?debug_monitor@@3HA DD 01H DUP (?)			; debug_monitor
?debug_log_state@@3HA DD 01H DUP (?)			; debug_log_state
?debug_timing_info_suppressed@@3HA DD 01H DUP (?)	; debug_timing_info_suppressed
?number_of_watch_lines@@3HA DD 01H DUP (?)		; number_of_watch_lines
?number_of_watch_monitor_lines@@3HA DD 01H DUP (?)	; number_of_watch_monitor_lines
?number_of_log_lines@@3HA DD 01H DUP (?)		; number_of_log_lines
?number_of_filtered_log_lines@@3HA DD 01H DUP (?)	; number_of_filtered_log_lines
?number_of_log_monitor_lines@@3HA DD 01H DUP (?)	; number_of_log_monitor_lines
?number_of_filtered_log_monitor_lines@@3HA DD 01H DUP (?) ; number_of_filtered_log_monitor_lines
?debug_log_file_name@@3PADA DB 064H DUP (?)		; debug_log_file_name
?debug_filtered_log_file_name@@3PADA DB 064H DUP (?)	; debug_filtered_log_file_name
?debug_colour_table@@3PAKA DD 018H DUP (?)		; debug_colour_table
?debug_initialise_message_id@@3HA DD 01H DUP (?)	; debug_initialise_message_id
?buffer@?1??debug_log@@YAXPBDZZ@4PADA DB 01000H DUP (?)	; `debug_log'::`2'::buffer
?buffer@?1??debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA DB 03e8H DUP (?) ; `debug_colour_log'::`2'::buffer
?buffer@?1??debug_filtered_log@@YAXPBDZZ@4PADA DB 03e8H DUP (?) ; `debug_filtered_log'::`2'::buffer
?buffer@?1??debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA DB 03e8H DUP (?) ; `debug_colour_filtered_log'::`2'::buffer
_BSS	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_C@_0CF@CLIJGILI@Rename?5debug?5log?5failed?5?$CIerror?5@
CONST	SEGMENT
??_C@_0CF@CLIJGILI@Rename?5debug?5log?5failed?5?$CIerror?5@ DB 'Rename de'
	DB	'bug log failed (error = %d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GINCGKAH@No?5debug?5log?5to?5rename@
CONST	SEGMENT
??_C@_0BH@GINCGKAH@No?5debug?5log?5to?5rename@ DB 'No debug log to rename'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EBJJPPOJ@Unlink?5debug?5log?5failed?5?$CIerror?5@
CONST	SEGMENT
??_C@_0CF@EBJJPPOJ@Unlink?5debug?5log?5failed?5?$CIerror?5@ DB 'Unlink de'
	DB	'bug log failed (error = %d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ICMOOLIJ@Renaming?5debug?5log?5file?5from?5?$CFs@
CONST	SEGMENT
??_C@_0CG@ICMOOLIJ@Renaming?5debug?5log?5file?5from?5?$CFs@ DB 'Renaming '
	DB	'debug log file from %s to %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PLCONNKF@strlen?5?$CInew_file_name?$CJ?5?$DM?5100@
CONST	SEGMENT
??_C@_0BN@PLCONNKF@strlen?5?$CInew_file_name?$CJ?5?$DM?5100@ DB 'strlen ('
	DB	'new_file_name) < 100', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LDGPFEI@strlen?5?$CInew_file_name?$CJ?5?$DO?50@
CONST	SEGMENT
??_C@_0BL@LDGPFEI@strlen?5?$CInew_file_name?$CJ?5?$DO?50@ DB 'strlen (new'
	DB	'_file_name) > 0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDHMMFMC@new_file_name@
CONST	SEGMENT
??_C@_0O@LDHMMFMC@new_file_name@ DB 'new_file_name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@OONGKJMN@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DE@OONGKJMN@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\system\debug.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??rename_debug_log_file@@YGXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??rename_debug_log_file@@YGXPBD@Z@4JA DD 084bH ; `rename_debug_log_file'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@EKGDBMPL@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
CONST	SEGMENT
??_C@_0FA@EKGDBMPL@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ DB '*'
	DB	'*********************************** FATAL *******************'
	DB	'****************', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a@
CONST	SEGMENT
??_C@_01MCMALHOG@a@ DB 'a', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07HNIILHCJ@?5?$EA?5?$CF?42f@
CONST	SEGMENT
??_C@_07HNIILHCJ@?5?$EA?5?$CF?42f@ DB ' @ %.2f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GKODMJEL@Debug?5Log?5Filter@
CONST	SEGMENT
??_C@_0BB@GKODMJEL@Debug?5Log?5Filter@ DB 'Debug Log Filter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKEIIICD@Debug?5Watch@
CONST	SEGMENT
??_C@_0M@FKEIIICD@Debug?5Watch@ DB 'Debug Watch', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNILCKOM@Debug?5Log@
CONST	SEGMENT
??_C@_09NNILCKOM@Debug?5Log@ DB 'Debug Log', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFHENEIP@DebugLogFilteredClass@
CONST	SEGMENT
??_C@_0BG@HFHENEIP@DebugLogFilteredClass@ DB 'DebugLogFilteredClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@COPDOKBF@DebugWatchClass@
CONST	SEGMENT
??_C@_0BA@COPDOKBF@DebugWatchClass@ DB 'DebugWatchClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGOHDKAL@DebugLogClass@
CONST	SEGMENT
??_C@_0O@GGOHDKAL@DebugLogClass@ DB 'DebugLogClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PECAGPIN@DEBUG?4FIL@
CONST	SEGMENT
??_C@_09PECAGPIN@DEBUG?4FIL@ DB 'DEBUG.FIL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HMOECKJA@DEBUG?4LOG@
CONST	SEGMENT
??_C@_09HMOECKJA@DEBUG?4LOG@ DB 'DEBUG.LOG', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?update_window@@YGXPAUHWND__@@@Z
_TEXT	SEGMENT
tv288 = -1316						; size = 4
tv224 = -1316						; size = 4
tv175 = -1316						; size = 4
tv141 = -1316						; size = 4
tv136 = -1316						; size = 4
_buffer$ = -1120					; size = 1000
_text_metric$ = -120					; size = 56
_size$ = -64						; size = 8
_rect$ = -56						; size = 16
_rest$ = -40						; size = 16
_hdc$ = -24						; size = 4
_md$ = -20						; size = 4
_tsize$ = -16						; size = 4
_tab_size$ = -12					; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_window_handle$ = 8					; size = 4
?update_window@@YGXPAUHWND__@@@Z PROC			; update_window, COMDAT

; 1435 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 05 00
	00		 sub	 esp, 1316		; 00000524H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1436 : 
; 1437 : 	int
; 1438 : 		x,
; 1439 : 		y,
; 1440 : 		tab_size,
; 1441 : 		tsize;
; 1442 : 
; 1443 : 	LPMONITORDATA
; 1444 : 		md;
; 1445 : 
; 1446 : 	HDC
; 1447 : 		hdc;
; 1448 : 
; 1449 : 	RECT
; 1450 : 		rest,
; 1451 : 		rect;
; 1452 : 
; 1453 : 	SIZE
; 1454 : 		size;
; 1455 : 
; 1456 : 	TEXTMETRIC
; 1457 : 		text_metric;
; 1458 : 
; 1459 : 	char
; 1460 : 		buffer[1000];
; 1461 : 
; 1462 : 	if ( debug_log_state )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00013	0f 84 eb 07 00
	00		 je	 $LN14@update_win

; 1463 : 	{
; 1464 : 
; 1465 : 		x = 0;

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 1466 : 		y = 0;

  00020	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 1467 : 
; 1468 : 		hdc = GetDC (window_handle);

  00027	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00031	89 45 e8	 mov	 DWORD PTR _hdc$[ebp], eax

; 1469 : 
; 1470 : 		GetClientRect (window_handle, &rect);

  00034	8d 45 c8	 lea	 eax, DWORD PTR _rect$[ebp]
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _window_handle$[ebp]
  0003b	51		 push	 ecx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1471 : 
; 1472 : 		SelectObject (hdc, GetStockObject (DEFAULT_GUI_FONT));

  00042	6a 11		 push	 17			; 00000011H
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  0004a	50		 push	 eax
  0004b	8b 45 e8	 mov	 eax, DWORD PTR _hdc$[ebp]
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 1473 : 
; 1474 : 		SetTextCharacterExtra ( hdc, 0 );

  00055	6a 00		 push	 0
  00057	8b 45 e8	 mov	 eax, DWORD PTR _hdc$[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextCharacterExtra@8

; 1475 : 
; 1476 : 		GetTextMetrics ( hdc, &text_metric );

  00061	8d 45 88	 lea	 eax, DWORD PTR _text_metric$[ebp]
  00064	50		 push	 eax
  00065	8b 4d e8	 mov	 ecx, DWORD PTR _hdc$[ebp]
  00068	51		 push	 ecx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextMetricsA@8

; 1477 : 
; 1478 : 		tab_size = 3 * ( text_metric.tmAveCharWidth );

  0006f	6b 45 9c 03	 imul	 eax, DWORD PTR _text_metric$[ebp+20], 3
  00073	89 45 f4	 mov	 DWORD PTR _tab_size$[ebp], eax

; 1479 : 
; 1480 : 		buffer[0] = 'O';

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	6b c8 00	 imul	 ecx, eax, 0
  0007e	c6 84 0d a0 fb
	ff ff 4f	 mov	 BYTE PTR _buffer$[ebp+ecx], 79 ; 0000004fH

; 1481 : 
; 1482 : 		GetTextExtentPoint32 (hdc, buffer, 1, &size);

  00086	8d 45 c0	 lea	 eax, DWORD PTR _size$[ebp]
  00089	50		 push	 eax
  0008a	6a 01		 push	 1
  0008c	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00092	51		 push	 ecx
  00093	8b 55 e8	 mov	 edx, DWORD PTR _hdc$[ebp]
  00096	52		 push	 edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32A@16

; 1483 : 
; 1484 : 		if ( window_handle == application_debug_log_window )

  0009d	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  000a0	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  000a6	75 3b		 jne	 SHORT $LN15@update_win

; 1485 : 		{
; 1486 : 
; 1487 : 			md = top_log_monitor;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  000ad	89 45 ec	 mov	 DWORD PTR _md$[ebp], eax

; 1488 : 
; 1489 : 			number_of_log_lines = (rect.bottom - rect.top) / size.cy;

  000b0	8b 45 d4	 mov	 eax, DWORD PTR _rect$[ebp+12]
  000b3	2b 45 cc	 sub	 eax, DWORD PTR _rect$[ebp+4]
  000b6	99		 cdq
  000b7	f7 7d c4	 idiv	 DWORD PTR _size$[ebp+4]
  000ba	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_log_lines@@3HA, eax

; 1490 : 
; 1491 : 			if (number_of_log_lines > 1)

  000bf	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?number_of_log_lines@@3HA, 1
  000c6	7e 0f		 jle	 SHORT $LN17@update_win

; 1492 : 			{
; 1493 : 
; 1494 : 				number_of_log_lines --;

  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_lines@@3HA
  000cd	83 e8 01	 sub	 eax, 1
  000d0	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_log_lines@@3HA, eax

; 1495 : 			}
; 1496 : 			else

  000d5	eb 0a		 jmp	 SHORT $LN18@update_win
$LN17@update_win:

; 1497 : 			{
; 1498 : 
; 1499 : 				number_of_log_lines = 1;

  000d7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?number_of_log_lines@@3HA, 1
$LN18@update_win:

; 1500 : 			}

  000e1	eb 7f		 jmp	 SHORT $LN24@update_win
$LN15@update_win:

; 1501 : 		}
; 1502 : 		else if ( window_handle == application_debug_filtered_log_window )

  000e3	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  000e6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  000ec	75 3b		 jne	 SHORT $LN19@update_win

; 1503 : 		{
; 1504 : 
; 1505 : 			md = top_filtered_log_monitor;

  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  000f3	89 45 ec	 mov	 DWORD PTR _md$[ebp], eax

; 1506 : 
; 1507 : 			number_of_filtered_log_lines = (rect.bottom - rect.top) / size.cy;

  000f6	8b 45 d4	 mov	 eax, DWORD PTR _rect$[ebp+12]
  000f9	2b 45 cc	 sub	 eax, DWORD PTR _rect$[ebp+4]
  000fc	99		 cdq
  000fd	f7 7d c4	 idiv	 DWORD PTR _size$[ebp+4]
  00100	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_filtered_log_lines@@3HA, eax

; 1508 : 
; 1509 : 			if (number_of_filtered_log_lines > 1)

  00105	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?number_of_filtered_log_lines@@3HA, 1
  0010c	7e 0f		 jle	 SHORT $LN21@update_win

; 1510 : 			{
; 1511 : 
; 1512 : 				number_of_filtered_log_lines --;

  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_lines@@3HA
  00113	83 e8 01	 sub	 eax, 1
  00116	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_filtered_log_lines@@3HA, eax

; 1513 : 			}
; 1514 : 			else

  0011b	eb 0a		 jmp	 SHORT $LN22@update_win
$LN21@update_win:

; 1515 : 			{
; 1516 : 
; 1517 : 				number_of_filtered_log_lines = 1;

  0011d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?number_of_filtered_log_lines@@3HA, 1
$LN22@update_win:

; 1518 : 			}
; 1519 : 		}
; 1520 : 		else

  00127	eb 39		 jmp	 SHORT $LN24@update_win
$LN19@update_win:

; 1521 : 		{
; 1522 : 
; 1523 : 			md = top_watch_monitor;

  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  0012e	89 45 ec	 mov	 DWORD PTR _md$[ebp], eax

; 1524 : 
; 1525 : 			number_of_watch_lines = (rect.bottom - rect.top) / size.cy;

  00131	8b 45 d4	 mov	 eax, DWORD PTR _rect$[ebp+12]
  00134	2b 45 cc	 sub	 eax, DWORD PTR _rect$[ebp+4]
  00137	99		 cdq
  00138	f7 7d c4	 idiv	 DWORD PTR _size$[ebp+4]
  0013b	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_watch_lines@@3HA, eax

; 1526 : 
; 1527 : 			if (number_of_watch_lines > 1)

  00140	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?number_of_watch_lines@@3HA, 1
  00147	7e 0f		 jle	 SHORT $LN23@update_win

; 1528 : 			{
; 1529 : 
; 1530 : 				number_of_watch_lines --;

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_watch_lines@@3HA
  0014e	83 e8 01	 sub	 eax, 1
  00151	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_watch_lines@@3HA, eax

; 1531 : 			}
; 1532 : 			else

  00156	eb 0a		 jmp	 SHORT $LN24@update_win
$LN23@update_win:

; 1533 : 			{
; 1534 : 
; 1535 : 				number_of_watch_lines = 1;

  00158	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?number_of_watch_lines@@3HA, 1
$LN24@update_win:

; 1536 : 			}
; 1537 : 		}
; 1538 : 
; 1539 : 		while ( md )

  00162	83 7d ec 00	 cmp	 DWORD PTR _md$[ebp], 0
  00166	0f 84 54 06 00
	00		 je	 $LN3@update_win

; 1540 : 		{
; 1541 : 
; 1542 : 			if ( md->string == NULL )

  0016c	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0016f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00173	75 15		 jne	 SHORT $LN25@update_win

; 1543 : 			{
; 1544 : 
; 1545 : 				buffer[0] = '\0';

  00175	b8 01 00 00 00	 mov	 eax, 1
  0017a	6b c8 00	 imul	 ecx, eax, 0
  0017d	c6 84 0d a0 fb
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+ecx], 0

; 1546 : 			}
; 1547 : 			else

  00185	e9 73 05 00 00	 jmp	 $LN4@update_win
$LN25@update_win:

; 1548 : 			{
; 1549 : 
; 1550 : 
; 1551 : 				switch ( md->number )

  0018a	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0018d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00190	89 8d dc fa ff
	ff		 mov	 DWORD PTR tv136[ebp], ecx
  00196	83 bd dc fa ff
	ff 04		 cmp	 DWORD PTR tv136[ebp], 4
  0019d	0f 87 5a 05 00
	00		 ja	 $LN4@update_win
  001a3	8b 95 dc fa ff
	ff		 mov	 edx, DWORD PTR tv136[ebp]
  001a9	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN53@update_win[edx*4]
$LN27@update_win:

; 1552 : 				{
; 1553 : 
; 1554 : 					case 0:
; 1555 : 					{
; 1556 : 
; 1557 : 						sprintf ( buffer, md->string );

  001b0	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  001b3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001b6	51		 push	 ecx
  001b7	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  001bd	52		 push	 edx
  001be	e8 00 00 00 00	 call	 _sprintf
  001c3	83 c4 08	 add	 esp, 8

; 1558 : 
; 1559 : 						break;

  001c6	e9 32 05 00 00	 jmp	 $LN4@update_win
$LN28@update_win:

; 1560 : 					}
; 1561 : 
; 1562 : 					case 1:
; 1563 : 					{
; 1564 : 
; 1565 : 						switch ( md->type )

  001cb	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  001ce	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001d1	89 8d dc fa ff
	ff		 mov	 DWORD PTR tv141[ebp], ecx
  001d7	8b 95 dc fa ff
	ff		 mov	 edx, DWORD PTR tv141[ebp]
  001dd	83 ea 01	 sub	 edx, 1
  001e0	89 95 dc fa ff
	ff		 mov	 DWORD PTR tv141[ebp], edx
  001e6	83 bd dc fa ff
	ff 04		 cmp	 DWORD PTR tv141[ebp], 4
  001ed	0f 87 c3 00 00
	00		 ja	 $LN6@update_win
  001f3	8b 85 dc fa ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  001f9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN54@update_win[eax*4]
$LN29@update_win:

; 1566 : 						{
; 1567 : 
; 1568 : 							case MT_INT:
; 1569 : 							{
; 1570 : 
; 1571 : 								sprintf ( buffer, md->string, * (int *) md->data );

  00200	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00203	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00206	8b 11		 mov	 edx, DWORD PTR [ecx]
  00208	52		 push	 edx
  00209	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0020c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0020f	51		 push	 ecx
  00210	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00216	52		 push	 edx
  00217	e8 00 00 00 00	 call	 _sprintf
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1572 : 
; 1573 : 								break;

  0021f	e9 92 00 00 00	 jmp	 $LN6@update_win
$LN30@update_win:

; 1574 : 							}
; 1575 : 							case MT_FLOAT:
; 1576 : 							{
; 1577 : 
; 1578 : 								sprintf ( buffer, md->string, * (float *) md->data );

  00224	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00227	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0022a	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  0022e	83 ec 08	 sub	 esp, 8
  00231	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00236	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00239	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0023c	50		 push	 eax
  0023d	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00243	51		 push	 ecx
  00244	e8 00 00 00 00	 call	 _sprintf
  00249	83 c4 10	 add	 esp, 16			; 00000010H

; 1579 : 
; 1580 : 								break;

  0024c	eb 68		 jmp	 SHORT $LN6@update_win
$LN31@update_win:

; 1581 : 							}
; 1582 : 							case MT_DOUBLE:
; 1583 : 							{
; 1584 : 
; 1585 : 								sprintf ( buffer, md->string, * (double *) md->data );

  0024e	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00251	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00254	83 ec 08	 sub	 esp, 8
  00257	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0025b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00260	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00263	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00266	50		 push	 eax
  00267	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0026d	51		 push	 ecx
  0026e	e8 00 00 00 00	 call	 _sprintf
  00273	83 c4 10	 add	 esp, 16			; 00000010H

; 1586 : 
; 1587 : 								break;

  00276	eb 3e		 jmp	 SHORT $LN6@update_win
$LN32@update_win:

; 1588 : 							}
; 1589 : 
; 1590 : 							case MT_STRING:
; 1591 : 							{
; 1592 : 
; 1593 : 								sprintf ( buffer, md->string, (char *) md->data );

  00278	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0027b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0027e	51		 push	 ecx
  0027f	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00282	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00285	50		 push	 eax
  00286	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0028c	51		 push	 ecx
  0028d	e8 00 00 00 00	 call	 _sprintf
  00292	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1594 : 
; 1595 : 								break;

  00295	eb 1f		 jmp	 SHORT $LN6@update_win
$LN33@update_win:

; 1596 : 							}
; 1597 : 
; 1598 : 							case MT_STRING_PTR:
; 1599 : 							{
; 1600 : 
; 1601 : 								sprintf ( buffer, md->string, *( (char * * ) md->data ) );

  00297	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0029a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0029d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029f	52		 push	 edx
  002a0	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  002a3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002a6	51		 push	 ecx
  002a7	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  002ad	52		 push	 edx
  002ae	e8 00 00 00 00	 call	 _sprintf
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@update_win:

; 1602 : 
; 1603 : 								break;
; 1604 : 							}
; 1605 : 						}
; 1606 : 
; 1607 : 						break;

  002b6	e9 42 04 00 00	 jmp	 $LN4@update_win
$LN34@update_win:

; 1608 : 					}
; 1609 : 
; 1610 : 					case 2:
; 1611 : 					{
; 1612 : 
; 1613 : 						switch ( md->type )

  002bb	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  002be	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002c1	89 8d dc fa ff
	ff		 mov	 DWORD PTR tv175[ebp], ecx
  002c7	8b 95 dc fa ff
	ff		 mov	 edx, DWORD PTR tv175[ebp]
  002cd	83 ea 01	 sub	 edx, 1
  002d0	89 95 dc fa ff
	ff		 mov	 DWORD PTR tv175[ebp], edx
  002d6	83 bd dc fa ff
	ff 04		 cmp	 DWORD PTR tv175[ebp], 4
  002dd	0f 87 03 01 00
	00		 ja	 $LN8@update_win
  002e3	8b 85 dc fa ff
	ff		 mov	 eax, DWORD PTR tv175[ebp]
  002e9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN55@update_win[eax*4]
$LN35@update_win:

; 1614 : 						{
; 1615 : 
; 1616 : 							case MT_INT:
; 1617 : 							{
; 1618 : 
; 1619 : 								sprintf ( buffer, md->string, * (int *) md->data, * (int *) md->data2 );

  002f0	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  002f3	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f8	52		 push	 edx
  002f9	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  002fc	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00301	52		 push	 edx
  00302	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00305	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00308	51		 push	 ecx
  00309	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  0030f	52		 push	 edx
  00310	e8 00 00 00 00	 call	 _sprintf
  00315	83 c4 10	 add	 esp, 16			; 00000010H

; 1620 : 
; 1621 : 								break;

  00318	e9 c9 00 00 00	 jmp	 $LN8@update_win
$LN36@update_win:

; 1622 : 							}
; 1623 : 
; 1624 : 							case MT_FLOAT:
; 1625 : 							{
; 1626 : 
; 1627 : 								sprintf ( buffer, md->string, * (float *) md->data, * (float *) md->data2 );

  0031d	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00320	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00323	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  00327	83 ec 08	 sub	 esp, 8
  0032a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032f	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00332	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00335	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00339	83 ec 08	 sub	 esp, 8
  0033c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00341	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  00344	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00347	52		 push	 edx
  00348	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0034e	50		 push	 eax
  0034f	e8 00 00 00 00	 call	 _sprintf
  00354	83 c4 18	 add	 esp, 24			; 00000018H

; 1628 : 
; 1629 : 								break;

  00357	e9 8a 00 00 00	 jmp	 $LN8@update_win
$LN37@update_win:

; 1630 : 							}
; 1631 : 
; 1632 : 							case MT_DOUBLE:
; 1633 : 							{
; 1634 : 
; 1635 : 								sprintf ( buffer, md->string, * (double *) md->data, * (double *) md->data2 );

  0035c	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0035f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00362	83 ec 08	 sub	 esp, 8
  00365	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00369	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0036e	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00371	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00374	83 ec 08	 sub	 esp, 8
  00377	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0037b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00380	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  00383	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00386	52		 push	 edx
  00387	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0038d	50		 push	 eax
  0038e	e8 00 00 00 00	 call	 _sprintf
  00393	83 c4 18	 add	 esp, 24			; 00000018H

; 1636 : 
; 1637 : 								break;

  00396	eb 4e		 jmp	 SHORT $LN8@update_win
$LN38@update_win:

; 1638 : 							}
; 1639 : 
; 1640 : 							case MT_STRING:
; 1641 : 							{
; 1642 : 
; 1643 : 								sprintf ( buffer, md->string, (char *) md->data, (char *) md->data2 );

  00398	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0039b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0039e	51		 push	 ecx
  0039f	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  003a2	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  003a5	50		 push	 eax
  003a6	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  003a9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003ac	52		 push	 edx
  003ad	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 _sprintf
  003b9	83 c4 10	 add	 esp, 16			; 00000010H

; 1644 : 
; 1645 : 								break;

  003bc	eb 28		 jmp	 SHORT $LN8@update_win
$LN39@update_win:

; 1646 : 							}
; 1647 : 
; 1648 : 							case MT_STRING_PTR:
; 1649 : 							{
; 1650 : 
; 1651 : 								sprintf ( buffer, md->string, *( (char ** ) md->data ), *( ( char ** ) md->data2 ) );

  003be	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  003c1	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  003c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  003c6	52		 push	 edx
  003c7	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  003ca	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  003cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003cf	52		 push	 edx
  003d0	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  003d3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003d6	51		 push	 ecx
  003d7	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  003dd	52		 push	 edx
  003de	e8 00 00 00 00	 call	 _sprintf
  003e3	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@update_win:

; 1652 : 
; 1653 : 								break;
; 1654 : 							}
; 1655 : 						}
; 1656 : 
; 1657 : 						break;

  003e6	e9 12 03 00 00	 jmp	 $LN4@update_win
$LN40@update_win:

; 1658 : 					}
; 1659 : 
; 1660 : 					case 3:
; 1661 : 					{
; 1662 : 
; 1663 : 						switch ( md->type )

  003eb	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  003ee	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003f1	89 8d dc fa ff
	ff		 mov	 DWORD PTR tv224[ebp], ecx
  003f7	8b 95 dc fa ff
	ff		 mov	 edx, DWORD PTR tv224[ebp]
  003fd	83 ea 01	 sub	 edx, 1
  00400	89 95 dc fa ff
	ff		 mov	 DWORD PTR tv224[ebp], edx
  00406	83 bd dc fa ff
	ff 04		 cmp	 DWORD PTR tv224[ebp], 4
  0040d	0f 87 40 01 00
	00		 ja	 $LN10@update_win
  00413	8b 85 dc fa ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  00419	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN56@update_win[eax*4]
$LN41@update_win:

; 1664 : 						{
; 1665 : 
; 1666 : 							case MT_INT:
; 1667 : 							{
; 1668 : 
; 1669 : 								sprintf ( buffer, md->string, * (int *) md->data, * (int *) md->data2, * (int *) md->data3 );

  00420	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00423	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00426	8b 11		 mov	 edx, DWORD PTR [ecx]
  00428	52		 push	 edx
  00429	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0042c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0042f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00431	52		 push	 edx
  00432	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00435	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00438	8b 11		 mov	 edx, DWORD PTR [ecx]
  0043a	52		 push	 edx
  0043b	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0043e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00441	51		 push	 ecx
  00442	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00448	52		 push	 edx
  00449	e8 00 00 00 00	 call	 _sprintf
  0044e	83 c4 14	 add	 esp, 20			; 00000014H

; 1670 : 
; 1671 : 								break;

  00451	e9 fd 00 00 00	 jmp	 $LN10@update_win
$LN42@update_win:

; 1672 : 							}
; 1673 : 
; 1674 : 							case MT_FLOAT:
; 1675 : 							{
; 1676 : 
; 1677 : 								sprintf ( buffer, md->string, * (float *) md->data, * (float *) md->data2, * (float *) md->data3 );

  00456	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00459	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0045c	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  00460	83 ec 08	 sub	 esp, 8
  00463	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00468	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  0046b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0046e	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00472	83 ec 08	 sub	 esp, 8
  00475	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0047a	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  0047d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00480	f3 0f 5a 02	 cvtss2sd xmm0, DWORD PTR [edx]
  00484	83 ec 08	 sub	 esp, 8
  00487	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0048c	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0048f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00492	51		 push	 ecx
  00493	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00499	52		 push	 edx
  0049a	e8 00 00 00 00	 call	 _sprintf
  0049f	83 c4 20	 add	 esp, 32			; 00000020H

; 1678 : 
; 1679 : 								break;

  004a2	e9 ac 00 00 00	 jmp	 $LN10@update_win
$LN43@update_win:

; 1680 : 							}
; 1681 : 
; 1682 : 							case MT_DOUBLE:
; 1683 : 							{
; 1684 : 
; 1685 : 								sprintf ( buffer, md->string, * (double *) md->data, * (double *) md->data2, * (double *) md->data3 );

  004a7	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  004aa	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  004ad	83 ec 08	 sub	 esp, 8
  004b0	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  004b4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004b9	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  004bc	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  004bf	83 ec 08	 sub	 esp, 8
  004c2	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  004c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004cb	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  004ce	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  004d1	83 ec 08	 sub	 esp, 8
  004d4	f2 0f 10 02	 movsd	 xmm0, QWORD PTR [edx]
  004d8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004dd	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  004e0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  004e3	51		 push	 ecx
  004e4	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  004ea	52		 push	 edx
  004eb	e8 00 00 00 00	 call	 _sprintf
  004f0	83 c4 20	 add	 esp, 32			; 00000020H

; 1686 : 
; 1687 : 								break;

  004f3	eb 5e		 jmp	 SHORT $LN10@update_win
$LN44@update_win:

; 1688 : 							}
; 1689 : 
; 1690 : 							case MT_STRING:
; 1691 : 							{
; 1692 : 
; 1693 : 								sprintf ( buffer, md->string, (char *) md->data, (char *) md->data2, (char *) md->data3 );

  004f5	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  004f8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  004fb	51		 push	 ecx
  004fc	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  004ff	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00502	50		 push	 eax
  00503	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  00506	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00509	52		 push	 edx
  0050a	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0050d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00510	51		 push	 ecx
  00511	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00517	52		 push	 edx
  00518	e8 00 00 00 00	 call	 _sprintf
  0051d	83 c4 14	 add	 esp, 20			; 00000014H

; 1694 : 
; 1695 : 								break;

  00520	eb 31		 jmp	 SHORT $LN10@update_win
$LN45@update_win:

; 1696 : 							}
; 1697 : 
; 1698 : 							case MT_STRING_PTR:
; 1699 : 							{
; 1700 : 
; 1701 : 								sprintf ( buffer, md->string, *( (char ** ) md->data ), *( ( char ** ) md->data2 ), *( ( char ** ) md->data3 ) );

  00522	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00525	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00528	8b 11		 mov	 edx, DWORD PTR [ecx]
  0052a	52		 push	 edx
  0052b	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0052e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00531	8b 11		 mov	 edx, DWORD PTR [ecx]
  00533	52		 push	 edx
  00534	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00537	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0053a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0053c	52		 push	 edx
  0053d	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00540	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00543	51		 push	 ecx
  00544	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  0054a	52		 push	 edx
  0054b	e8 00 00 00 00	 call	 _sprintf
  00550	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@update_win:

; 1702 : 
; 1703 : 								break;
; 1704 : 							}
; 1705 : 						}
; 1706 : 
; 1707 : 
; 1708 : 						break;

  00553	e9 a5 01 00 00	 jmp	 $LN4@update_win
$LN46@update_win:

; 1709 : 					}
; 1710 : 
; 1711 : 					case 4:
; 1712 : 					{
; 1713 : 
; 1714 : 						switch ( md->type )

  00558	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  0055b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0055e	89 8d dc fa ff
	ff		 mov	 DWORD PTR tv288[ebp], ecx
  00564	8b 95 dc fa ff
	ff		 mov	 edx, DWORD PTR tv288[ebp]
  0056a	83 ea 01	 sub	 edx, 1
  0056d	89 95 dc fa ff
	ff		 mov	 DWORD PTR tv288[ebp], edx
  00573	83 bd dc fa ff
	ff 04		 cmp	 DWORD PTR tv288[ebp], 4
  0057a	0f 87 7d 01 00
	00		 ja	 $LN12@update_win
  00580	8b 85 dc fa ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  00586	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN57@update_win[eax*4]
$LN47@update_win:

; 1715 : 						{
; 1716 : 
; 1717 : 							case MT_INT:
; 1718 : 							{
; 1719 : 
; 1720 : 								sprintf ( buffer, md->string, * (int *) md->data, * (int *) md->data2, * (int *) md->data3, * (int *) md->data4 );

  0058d	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00590	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00593	8b 11		 mov	 edx, DWORD PTR [ecx]
  00595	52		 push	 edx
  00596	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00599	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0059c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0059e	52		 push	 edx
  0059f	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  005a2	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  005a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  005a7	52		 push	 edx
  005a8	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  005ab	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  005ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  005b0	52		 push	 edx
  005b1	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  005b4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  005b7	51		 push	 ecx
  005b8	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  005be	52		 push	 edx
  005bf	e8 00 00 00 00	 call	 _sprintf
  005c4	83 c4 18	 add	 esp, 24			; 00000018H

; 1721 : 
; 1722 : 								break;

  005c7	e9 31 01 00 00	 jmp	 $LN12@update_win
$LN48@update_win:

; 1723 : 							}
; 1724 : 
; 1725 : 							case MT_FLOAT:
; 1726 : 							{
; 1727 : 
; 1728 : 								sprintf ( buffer, md->string, * (float *) md->data, * (float *) md->data2, * (float *) md->data3, * (float *) md->data4 );

  005cc	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  005cf	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  005d2	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  005d6	83 ec 08	 sub	 esp, 8
  005d9	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005de	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  005e1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  005e4	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  005e8	83 ec 08	 sub	 esp, 8
  005eb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005f0	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  005f3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  005f6	f3 0f 5a 02	 cvtss2sd xmm0, DWORD PTR [edx]
  005fa	83 ec 08	 sub	 esp, 8
  005fd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00602	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00605	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00608	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  0060c	83 ec 08	 sub	 esp, 8
  0060f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00614	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00617	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0061a	50		 push	 eax
  0061b	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00621	51		 push	 ecx
  00622	e8 00 00 00 00	 call	 _sprintf
  00627	83 c4 28	 add	 esp, 40			; 00000028H

; 1729 : 
; 1730 : 								break;

  0062a	e9 ce 00 00 00	 jmp	 $LN12@update_win
$LN49@update_win:

; 1731 : 							}
; 1732 : 
; 1733 : 							case MT_DOUBLE:
; 1734 : 							{
; 1735 : 
; 1736 : 								sprintf ( buffer, md->string, * (double *) md->data, * (double *) md->data2, * (double *) md->data3, * (double *) md->data4 );

  0062f	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00632	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00635	83 ec 08	 sub	 esp, 8
  00638	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0063c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00641	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00644	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00647	83 ec 08	 sub	 esp, 8
  0064a	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0064e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00653	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  00656	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00659	83 ec 08	 sub	 esp, 8
  0065c	f2 0f 10 02	 movsd	 xmm0, QWORD PTR [edx]
  00660	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00665	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00668	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0066b	83 ec 08	 sub	 esp, 8
  0066e	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00672	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00677	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  0067a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0067d	50		 push	 eax
  0067e	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00684	51		 push	 ecx
  00685	e8 00 00 00 00	 call	 _sprintf
  0068a	83 c4 28	 add	 esp, 40			; 00000028H

; 1737 : 
; 1738 : 								break;

  0068d	eb 6e		 jmp	 SHORT $LN12@update_win
$LN50@update_win:

; 1739 : 							}
; 1740 : 
; 1741 : 							case MT_STRING:
; 1742 : 							{
; 1743 : 
; 1744 : 								sprintf ( buffer, md->string, (char *) md->data, (char *) md->data2, (char *) md->data3, (char *) md->data4 );

  0068f	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00692	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00695	51		 push	 ecx
  00696	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  00699	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0069c	50		 push	 eax
  0069d	8b 4d ec	 mov	 ecx, DWORD PTR _md$[ebp]
  006a0	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  006a3	52		 push	 edx
  006a4	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  006a7	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  006aa	51		 push	 ecx
  006ab	8b 55 ec	 mov	 edx, DWORD PTR _md$[ebp]
  006ae	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006b1	50		 push	 eax
  006b2	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  006b8	51		 push	 ecx
  006b9	e8 00 00 00 00	 call	 _sprintf
  006be	83 c4 18	 add	 esp, 24			; 00000018H

; 1745 : 
; 1746 : 								break;

  006c1	eb 3a		 jmp	 SHORT $LN12@update_win
$LN51@update_win:

; 1747 : 							}
; 1748 : 
; 1749 : 							case MT_STRING_PTR:
; 1750 : 							{
; 1751 : 
; 1752 : 								sprintf ( buffer, md->string, *( (char ** ) md->data ), *( ( char ** ) md->data2 ), *( ( char ** ) md->data3 ), *( ( char ** ) md->data4 ) );

  006c3	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  006c6	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  006c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  006cb	52		 push	 edx
  006cc	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  006cf	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  006d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  006d4	52		 push	 edx
  006d5	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  006d8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  006db	8b 11		 mov	 edx, DWORD PTR [ecx]
  006dd	52		 push	 edx
  006de	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  006e1	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  006e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  006e6	52		 push	 edx
  006e7	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  006ea	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006ed	51		 push	 ecx
  006ee	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  006f4	52		 push	 edx
  006f5	e8 00 00 00 00	 call	 _sprintf
  006fa	83 c4 18	 add	 esp, 24			; 00000018H
$LN12@update_win:
$LN4@update_win:

; 1753 : 
; 1754 : 								break;
; 1755 : 							}
; 1756 : 						}
; 1757 : 
; 1758 : 						break;
; 1759 : 					}
; 1760 : 
; 1761 : 				}
; 1762 : 			}
; 1763 : 
; 1764 : 			SetTextColor ( hdc, md->colour );

  006fd	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  00700	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00703	51		 push	 ecx
  00704	8b 55 e8	 mov	 edx, DWORD PTR _hdc$[ebp]
  00707	52		 push	 edx
  00708	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 1765 : 
; 1766 : 			TabbedTextOut

  0070e	6a 00		 push	 0
  00710	8d 45 f4	 lea	 eax, DWORD PTR _tab_size$[ebp]
  00713	50		 push	 eax
  00714	6a 01		 push	 1
  00716	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0071c	51		 push	 ecx
  0071d	e8 00 00 00 00	 call	 _strlen
  00722	83 c4 04	 add	 esp, 4
  00725	50		 push	 eax
  00726	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  0072c	52		 push	 edx
  0072d	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00730	50		 push	 eax
  00731	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00734	51		 push	 ecx
  00735	8b 55 e8	 mov	 edx, DWORD PTR _hdc$[ebp]
  00738	52		 push	 edx
  00739	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TabbedTextOutA@32

; 1767 : 			(
; 1768 : 				hdc,
; 1769 : 				x,
; 1770 : 				y,
; 1771 : 				buffer,
; 1772 : 				strlen (buffer),
; 1773 : 				1,
; 1774 : 				&tab_size,
; 1775 : 				0
; 1776 : 			);
; 1777 : 
; 1778 : 			tsize = GetTabbedTextExtent ( hdc, buffer, strlen (buffer), 1, &tab_size );

  0073f	8d 45 f4	 lea	 eax, DWORD PTR _tab_size$[ebp]
  00742	50		 push	 eax
  00743	6a 01		 push	 1
  00745	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0074b	51		 push	 ecx
  0074c	e8 00 00 00 00	 call	 _strlen
  00751	83 c4 04	 add	 esp, 4
  00754	50		 push	 eax
  00755	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  0075b	52		 push	 edx
  0075c	8b 45 e8	 mov	 eax, DWORD PTR _hdc$[ebp]
  0075f	50		 push	 eax
  00760	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTabbedTextExtentA@20
  00766	89 45 f0	 mov	 DWORD PTR _tsize$[ebp], eax

; 1779 : 
; 1780 : 	//		GetTextExtentPoint32 ( hdc, buffer, strlen (buffer), &size );
; 1781 : 
; 1782 : 			rest.top = y;

  00769	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0076c	89 45 dc	 mov	 DWORD PTR _rest$[ebp+4], eax

; 1783 : 			rest.bottom = y + ( tsize >> 16 );	//size.cy;

  0076f	8b 45 f0	 mov	 eax, DWORD PTR _tsize$[ebp]
  00772	c1 f8 10	 sar	 eax, 16			; 00000010H
  00775	03 45 f8	 add	 eax, DWORD PTR _y$[ebp]
  00778	89 45 e4	 mov	 DWORD PTR _rest$[ebp+12], eax

; 1784 : 			rest.left = x + ( tsize & 0xffff );	//size.cx;

  0077b	8b 45 f0	 mov	 eax, DWORD PTR _tsize$[ebp]
  0077e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00783	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  00786	89 45 d8	 mov	 DWORD PTR _rest$[ebp], eax

; 1785 : 			rest.right = rect.right - rect.left;

  00789	8b 45 d0	 mov	 eax, DWORD PTR _rect$[ebp+8]
  0078c	2b 45 c8	 sub	 eax, DWORD PTR _rect$[ebp]
  0078f	89 45 e0	 mov	 DWORD PTR _rest$[ebp+8], eax

; 1786 : 
; 1787 : 			FillRect ( hdc, &rest, (HBRUSH) GetStockObject (WHITE_BRUSH) );

  00792	6a 00		 push	 0
  00794	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  0079a	50		 push	 eax
  0079b	8d 45 d8	 lea	 eax, DWORD PTR _rest$[ebp]
  0079e	50		 push	 eax
  0079f	8b 4d e8	 mov	 ecx, DWORD PTR _hdc$[ebp]
  007a2	51		 push	 ecx
  007a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 1788 : 
; 1789 : 			y += size.cy;

  007a9	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  007ac	03 45 c4	 add	 eax, DWORD PTR _size$[ebp+4]
  007af	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 1790 : 
; 1791 : 			md = md->succ;

  007b2	8b 45 ec	 mov	 eax, DWORD PTR _md$[ebp]
  007b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007b8	89 4d ec	 mov	 DWORD PTR _md$[ebp], ecx

; 1792 : 		}

  007bb	e9 a2 f9 ff ff	 jmp	 $LN24@update_win
$LN3@update_win:

; 1793 : 
; 1794 : 		rest.top = y;

  007c0	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  007c3	89 45 dc	 mov	 DWORD PTR _rest$[ebp+4], eax

; 1795 : 		rest.bottom = rect.bottom - rect.top;

  007c6	8b 45 d4	 mov	 eax, DWORD PTR _rect$[ebp+12]
  007c9	2b 45 cc	 sub	 eax, DWORD PTR _rect$[ebp+4]
  007cc	89 45 e4	 mov	 DWORD PTR _rest$[ebp+12], eax

; 1796 : 		rest.left = 0;

  007cf	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _rest$[ebp], 0

; 1797 : 		rest.right = rect.right - rect.left;

  007d6	8b 45 d0	 mov	 eax, DWORD PTR _rect$[ebp+8]
  007d9	2b 45 c8	 sub	 eax, DWORD PTR _rect$[ebp]
  007dc	89 45 e0	 mov	 DWORD PTR _rest$[ebp+8], eax

; 1798 : 
; 1799 : 		FillRect ( hdc, &rest, (HBRUSH) GetStockObject (WHITE_BRUSH) );

  007df	6a 00		 push	 0
  007e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  007e7	50		 push	 eax
  007e8	8d 45 d8	 lea	 eax, DWORD PTR _rest$[ebp]
  007eb	50		 push	 eax
  007ec	8b 4d e8	 mov	 ecx, DWORD PTR _hdc$[ebp]
  007ef	51		 push	 ecx
  007f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 1800 : 
; 1801 : 		ReleaseDC ( window_handle, hdc );

  007f6	8b 45 e8	 mov	 eax, DWORD PTR _hdc$[ebp]
  007f9	50		 push	 eax
  007fa	8b 4d 08	 mov	 ecx, DWORD PTR _window_handle$[ebp]
  007fd	51		 push	 ecx
  007fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
$LN14@update_win:

; 1802 : 	}
; 1803 : }

  00804	5f		 pop	 edi
  00805	5e		 pop	 esi
  00806	5b		 pop	 ebx
  00807	8b e5		 mov	 esp, ebp
  00809	5d		 pop	 ebp
  0080a	c2 04 00	 ret	 4
  0080d	0f 1f 00	 npad	 3
$LN53@update_win:
  00810	00 00 00 00	 DD	 $LN27@update_win
  00814	00 00 00 00	 DD	 $LN28@update_win
  00818	00 00 00 00	 DD	 $LN34@update_win
  0081c	00 00 00 00	 DD	 $LN40@update_win
  00820	00 00 00 00	 DD	 $LN46@update_win
$LN54@update_win:
  00824	00 00 00 00	 DD	 $LN29@update_win
  00828	00 00 00 00	 DD	 $LN30@update_win
  0082c	00 00 00 00	 DD	 $LN31@update_win
  00830	00 00 00 00	 DD	 $LN32@update_win
  00834	00 00 00 00	 DD	 $LN33@update_win
$LN55@update_win:
  00838	00 00 00 00	 DD	 $LN35@update_win
  0083c	00 00 00 00	 DD	 $LN36@update_win
  00840	00 00 00 00	 DD	 $LN37@update_win
  00844	00 00 00 00	 DD	 $LN38@update_win
  00848	00 00 00 00	 DD	 $LN39@update_win
$LN56@update_win:
  0084c	00 00 00 00	 DD	 $LN41@update_win
  00850	00 00 00 00	 DD	 $LN42@update_win
  00854	00 00 00 00	 DD	 $LN43@update_win
  00858	00 00 00 00	 DD	 $LN44@update_win
  0085c	00 00 00 00	 DD	 $LN45@update_win
$LN57@update_win:
  00860	00 00 00 00	 DD	 $LN47@update_win
  00864	00 00 00 00	 DD	 $LN48@update_win
  00868	00 00 00 00	 DD	 $LN49@update_win
  0086c	00 00 00 00	 DD	 $LN50@update_win
  00870	00 00 00 00	 DD	 $LN51@update_win
?update_window@@YGXPAUHWND__@@@Z ENDP			; update_window
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?add_watch_item@@YGXPAUmonitor_data@@@Z
_TEXT	SEGMENT
_md$ = 8						; size = 4
?add_watch_item@@YGXPAUmonitor_data@@@Z PROC		; add_watch_item, COMDAT

; 1121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1122 : 
; 1123 : 	md->succ = NULL;

  00009	8b 45 08	 mov	 eax, DWORD PTR _md$[ebp]
  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1124 : 
; 1125 : 	md->pred = last_watch_monitor;

  00013	8b 45 08	 mov	 eax, DWORD PTR _md$[ebp]
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_watch_monitor@@3PAUmonitor_data@@A
  0001c	89 08		 mov	 DWORD PTR [eax], ecx

; 1126 : 
; 1127 : 	if ( last_watch_monitor )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_watch_monitor@@3PAUmonitor_data@@A, 0
  00025	74 0b		 je	 SHORT $LN2@add_watch_

; 1128 : 	{
; 1129 : 
; 1130 : 		last_watch_monitor->succ = md;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_watch_monitor@@3PAUmonitor_data@@A
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _md$[ebp]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN2@add_watch_:

; 1131 : 	}
; 1132 : 
; 1133 : 	if ( first_watch_monitor == NULL )

  00032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?first_watch_monitor@@3PAUmonitor_data@@A, 0
  00039	75 10		 jne	 SHORT $LN3@add_watch_

; 1134 : 	{
; 1135 : 
; 1136 : 		top_watch_monitor = md;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _md$[ebp]
  0003e	a3 00 00 00 00	 mov	 DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A, eax

; 1137 : 
; 1138 : 		first_watch_monitor = md;

  00043	8b 45 08	 mov	 eax, DWORD PTR _md$[ebp]
  00046	a3 00 00 00 00	 mov	 DWORD PTR ?first_watch_monitor@@3PAUmonitor_data@@A, eax
$LN3@add_watch_:

; 1139 : 	}
; 1140 : 
; 1141 : 	last_watch_monitor = md;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _md$[ebp]
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?last_watch_monitor@@3PAUmonitor_data@@A, eax

; 1142 : 
; 1143 : 	number_of_watch_monitor_lines ++;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  00058	83 c0 01	 add	 eax, 1
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_watch_monitor_lines@@3HA, eax

; 1144 : 
; 1145 : 	SetScrollRange ( application_debug_watch_window, SB_VERT, 0, number_of_watch_monitor_lines, TRUE );

  00060	6a 01		 push	 1
  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  00067	50		 push	 eax
  00068	6a 00		 push	 0
  0006a	6a 01		 push	 1
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  00072	51		 push	 ecx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 1146 : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?add_watch_item@@YGXPAUmonitor_data@@@Z ENDP		; add_watch_item
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?application_monitor_process_thread@@YGXXZ
_TEXT	SEGMENT
?application_monitor_process_thread@@YGXXZ PROC		; application_monitor_process_thread, COMDAT

; 2103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@applicatio:

; 2104 : 
; 2105 : 	while ( !bExiting )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bExiting@@3HA, 0 ; bExiting
  00010	75 2e		 jne	 SHORT $LN1@applicatio

; 2106 : 	{
; 2107 : 
; 2108 : 		update_window ( application_debug_log_window );

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?update_window@@YGXPAUHWND__@@@Z ; update_window

; 2109 : 
; 2110 : 		update_window ( application_debug_watch_window );

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?update_window@@YGXPAUHWND__@@@Z ; update_window

; 2111 : 
; 2112 : 		update_window ( application_debug_filtered_log_window );

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?update_window@@YGXPAUHWND__@@@Z ; update_window

; 2113 : 
; 2114 : 		Sleep ( 200 );

  00033	68 c8 00 00 00	 push	 200			; 000000c8H
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2115 : 	}

  0003e	eb c9		 jmp	 SHORT $LN2@applicatio
$LN1@applicatio:

; 2116 : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?application_monitor_process_thread@@YGXXZ ENDP		; application_monitor_process_thread
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_window_notify@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv77 = -140						; size = 4
tv64 = -140						; size = 4
_pos$ = -72						; size = 4
_diff$ = -68						; size = 4
_ps$ = -64						; size = 64
_window_handle$ = 8					; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?debug_window_notify@@YGJPAUHWND__@@IIJ@Z PROC		; debug_window_notify, COMDAT

; 1810 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1811 : 
; 1812 : 	PAINTSTRUCT
; 1813 : 		ps;
; 1814 : 
; 1815 : 	int
; 1816 : 		diff,
; 1817 : 		pos;
; 1818 : 
; 1819 : 	switch (message)

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  0000f	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00015	83 bd 74 ff ff
	ff 14		 cmp	 DWORD PTR tv64[ebp], 20	; 00000014H
  0001c	77 24		 ja	 SHORT $LN57@debug_wind
  0001e	83 bd 74 ff ff
	ff 14		 cmp	 DWORD PTR tv64[ebp], 20	; 00000014H
  00025	74 38		 je	 SHORT $LN18@debug_wind
  00027	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR tv64[ebp], 2
  0002e	0f 84 41 03 00
	00		 je	 $LN55@debug_wind
  00034	83 bd 74 ff ff
	ff 0f		 cmp	 DWORD PTR tv64[ebp], 15	; 0000000fH
  0003b	74 2c		 je	 SHORT $LN19@debug_wind
  0003d	e9 3b 03 00 00	 jmp	 $LN2@debug_wind
$LN57@debug_wind:
  00042	81 bd 74 ff ff
	ff 15 01 00 00	 cmp	 DWORD PTR tv64[ebp], 277 ; 00000115H
  0004c	74 53		 je	 SHORT $LN21@debug_wind
  0004e	81 bd 74 ff ff
	ff 00 04 00 00	 cmp	 DWORD PTR tv64[ebp], 1024 ; 00000400H
  00058	74 39		 je	 SHORT $LN20@debug_wind
  0005a	e9 1e 03 00 00	 jmp	 $LN2@debug_wind
$LN18@debug_wind:

; 1820 : 	{
; 1821 : 
; 1822 : 		case WM_ERASEBKGND:
; 1823 : 		{
; 1824 : 
; 1825 : 			return TRUE;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	e9 2a 03 00 00	 jmp	 $LN1@debug_wind
$LN19@debug_wind:

; 1826 : 		}
; 1827 : 
; 1828 : 		case WM_PAINT:
; 1829 : 		{
; 1830 : 
; 1831 : 			BeginPaint ( window_handle, &ps );

  00069	8d 45 c0	 lea	 eax, DWORD PTR _ps$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _window_handle$[ebp]
  00070	51		 push	 ecx
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8

; 1832 : 
; 1833 : 			update_window ( window_handle );

  00077	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?update_window@@YGXPAUHWND__@@@Z ; update_window

; 1834 : 
; 1835 : 			EndPaint ( window_handle, &ps );

  00080	8d 45 c0	 lea	 eax, DWORD PTR _ps$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _window_handle$[ebp]
  00087	51		 push	 ecx
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8

; 1836 : 
; 1837 : 			break;

  0008e	e9 ea 02 00 00	 jmp	 $LN2@debug_wind
$LN20@debug_wind:

; 1838 : 		}
; 1839 : 
; 1840 : 		case WM_USER:
; 1841 : 		{
; 1842 : 
; 1843 : 			update_window ( window_handle );

  00093	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?update_window@@YGXPAUHWND__@@@Z ; update_window

; 1844 : 
; 1845 : 			break;

  0009c	e9 dc 02 00 00	 jmp	 $LN2@debug_wind
$LN21@debug_wind:

; 1846 : 		}
; 1847 : 
; 1848 : 		case WM_VSCROLL:
; 1849 : 		{
; 1850 : 
; 1851 : 			pos = GetScrollPos (window_handle, SB_VERT);

  000a1	6a 01		 push	 1
  000a3	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  000a6	50		 push	 eax
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollPos@8
  000ad	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 1852 : 
; 1853 : 			switch (LOWORD (wParam))

  000b0	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  000b3	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000b8	0f b7 c8	 movzx	 ecx, ax
  000bb	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  000c1	83 bd 74 ff ff
	ff 03		 cmp	 DWORD PTR tv77[ebp], 3
  000c8	0f 87 8a 02 00
	00		 ja	 $LN4@debug_wind
  000ce	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR tv77[ebp]
  000d4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN58@debug_wind[edx*4]

; 1854 : 			{
; 1855 : 
; 1856 : 				case SB_ENDSCROLL:
; 1857 : 				{
; 1858 : 
; 1859 : 					break;

  000db	e9 78 02 00 00	 jmp	 $LN4@debug_wind
$LN23@debug_wind:

; 1860 : 				}
; 1861 : 
; 1862 : 				case SB_LINEDOWN:
; 1863 : 				{
; 1864 : 
; 1865 : 					pos ++;

  000e0	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  000e3	83 c0 01	 add	 eax, 1
  000e6	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 1866 : 
; 1867 : 					if ( window_handle == application_debug_log_window )

  000e9	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  000ec	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  000f2	75 1b		 jne	 SHORT $LN24@debug_wind

; 1868 : 					{
; 1869 : 
; 1870 : 						if (top_log_monitor->succ)

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  000f9	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000fd	74 0e		 je	 SHORT $LN26@debug_wind

; 1871 : 						{
; 1872 : 
; 1873 : 							top_log_monitor = top_log_monitor->succ;

  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  00104	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00107	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, ecx
$LN26@debug_wind:

; 1874 : 						}
; 1875 : 					}

  0010d	eb 3f		 jmp	 SHORT $LN25@debug_wind
$LN24@debug_wind:

; 1876 : 					else if ( window_handle == application_debug_watch_window )

  0010f	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  00112	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  00118	75 1b		 jne	 SHORT $LN27@debug_wind

; 1877 : 					{
; 1878 : 
; 1879 : 						if (top_watch_monitor->succ)

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  0011f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00123	74 0e		 je	 SHORT $LN29@debug_wind

; 1880 : 						{
; 1881 : 
; 1882 : 							top_watch_monitor = top_watch_monitor->succ;

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  0012a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A, ecx
$LN29@debug_wind:

; 1883 : 						}
; 1884 : 					}
; 1885 : 					else

  00133	eb 19		 jmp	 SHORT $LN25@debug_wind
$LN27@debug_wind:

; 1886 : 					{
; 1887 : 
; 1888 : 						if (top_filtered_log_monitor->succ)

  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  0013a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0013e	74 0e		 je	 SHORT $LN25@debug_wind

; 1889 : 						{
; 1890 : 
; 1891 : 							top_filtered_log_monitor = top_filtered_log_monitor->succ;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  00145	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00148	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, ecx
$LN25@debug_wind:

; 1892 : 						}
; 1893 : 					}
; 1894 : 
; 1895 : 					break;

  0014e	e9 05 02 00 00	 jmp	 $LN4@debug_wind
$LN31@debug_wind:

; 1896 : 				}
; 1897 : 
; 1898 : 				case SB_LINEUP:
; 1899 : 				{
; 1900 : 
; 1901 : 					pos --;

  00153	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  00156	83 e8 01	 sub	 eax, 1
  00159	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 1902 : 
; 1903 : 					if ( window_handle == application_debug_log_window )

  0015c	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  0015f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  00165	75 19		 jne	 SHORT $LN32@debug_wind

; 1904 : 					{
; 1905 : 
; 1906 : 						if ( top_log_monitor->pred )

  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  0016c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0016f	74 0d		 je	 SHORT $LN34@debug_wind

; 1907 : 						{
; 1908 : 
; 1909 : 							top_log_monitor = top_log_monitor->pred;

  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  00176	8b 08		 mov	 ecx, DWORD PTR [eax]
  00178	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, ecx
$LN34@debug_wind:

; 1910 : 						}
; 1911 : 					}

  0017e	eb 3b		 jmp	 SHORT $LN33@debug_wind
$LN32@debug_wind:

; 1912 : 					else if ( window_handle == application_debug_watch_window )

  00180	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  00183	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  00189	75 19		 jne	 SHORT $LN35@debug_wind

; 1913 : 					{
; 1914 : 
; 1915 : 						if ( top_watch_monitor->pred )

  0018b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  00190	83 38 00	 cmp	 DWORD PTR [eax], 0
  00193	74 0d		 je	 SHORT $LN37@debug_wind

; 1916 : 						{
; 1917 : 
; 1918 : 							top_watch_monitor = top_watch_monitor->pred;

  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  0019a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A, ecx
$LN37@debug_wind:

; 1919 : 						}
; 1920 : 					}
; 1921 : 					else

  001a2	eb 17		 jmp	 SHORT $LN33@debug_wind
$LN35@debug_wind:

; 1922 : 					{
; 1923 : 
; 1924 : 						if ( top_filtered_log_monitor->pred )

  001a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  001a9	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ac	74 0d		 je	 SHORT $LN33@debug_wind

; 1925 : 						{
; 1926 : 
; 1927 : 							top_filtered_log_monitor = top_filtered_log_monitor->pred;

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  001b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b5	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, ecx
$LN33@debug_wind:

; 1928 : 						}
; 1929 : 					}
; 1930 : 
; 1931 : 					break;

  001bb	e9 98 01 00 00	 jmp	 $LN4@debug_wind
$LN39@debug_wind:

; 1932 : 				}
; 1933 : 
; 1934 : 				case SB_PAGEDOWN:
; 1935 : 				{
; 1936 : 
; 1937 : 					if ( window_handle == application_debug_log_window )

  001c0	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  001c3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  001c9	75 40		 jne	 SHORT $LN40@debug_wind

; 1938 : 					{
; 1939 : 
; 1940 : 						diff = number_of_log_lines;

  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_lines@@3HA
  001d0	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax
$LN6@debug_wind:

; 1941 : 
; 1942 : 						while ( diff )

  001d3	83 7d bc 00	 cmp	 DWORD PTR _diff$[ebp], 0
  001d7	74 2d		 je	 SHORT $LN7@debug_wind

; 1943 : 						{
; 1944 : 
; 1945 : 							if ( top_log_monitor->succ )

  001d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  001de	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  001e2	74 0e		 je	 SHORT $LN42@debug_wind

; 1946 : 							{
; 1947 : 
; 1948 : 								top_log_monitor = top_log_monitor->succ;

  001e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  001e9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001ec	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, ecx
$LN42@debug_wind:

; 1949 : 							}
; 1950 : 
; 1951 : 							diff --;

  001f2	8b 45 bc	 mov	 eax, DWORD PTR _diff$[ebp]
  001f5	83 e8 01	 sub	 eax, 1
  001f8	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax

; 1952 : 							pos ++;

  001fb	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  001fe	83 c0 01	 add	 eax, 1
  00201	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 1953 : 						}

  00204	eb cd		 jmp	 SHORT $LN6@debug_wind
$LN7@debug_wind:

; 1954 : 					}
; 1955 : 					else if ( window_handle == application_debug_watch_window )

  00206	e9 83 00 00 00	 jmp	 $LN41@debug_wind
$LN40@debug_wind:
  0020b	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  0020e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  00214	75 3d		 jne	 SHORT $LN43@debug_wind

; 1956 : 					{
; 1957 : 
; 1958 : 						diff = number_of_watch_lines;

  00216	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_watch_lines@@3HA
  0021b	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax
$LN8@debug_wind:

; 1959 : 
; 1960 : 						while ( diff )

  0021e	83 7d bc 00	 cmp	 DWORD PTR _diff$[ebp], 0
  00222	74 2d		 je	 SHORT $LN9@debug_wind

; 1961 : 						{
; 1962 : 
; 1963 : 							if ( top_watch_monitor->succ )

  00224	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  00229	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0022d	74 0e		 je	 SHORT $LN45@debug_wind

; 1964 : 							{
; 1965 : 
; 1966 : 								top_watch_monitor = top_watch_monitor->succ;

  0022f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  00234	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00237	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A, ecx
$LN45@debug_wind:

; 1967 : 							}
; 1968 : 
; 1969 : 							diff --;

  0023d	8b 45 bc	 mov	 eax, DWORD PTR _diff$[ebp]
  00240	83 e8 01	 sub	 eax, 1
  00243	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax

; 1970 : 							pos ++;

  00246	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  00249	83 c0 01	 add	 eax, 1
  0024c	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 1971 : 						}

  0024f	eb cd		 jmp	 SHORT $LN8@debug_wind
$LN9@debug_wind:

; 1972 : 					}
; 1973 : 					else

  00251	eb 3b		 jmp	 SHORT $LN41@debug_wind
$LN43@debug_wind:

; 1974 : 					{
; 1975 : 
; 1976 : 						diff = number_of_filtered_log_lines;

  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_lines@@3HA
  00258	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax
$LN10@debug_wind:

; 1977 : 
; 1978 : 						while ( diff )

  0025b	83 7d bc 00	 cmp	 DWORD PTR _diff$[ebp], 0
  0025f	74 2d		 je	 SHORT $LN41@debug_wind

; 1979 : 						{
; 1980 : 
; 1981 : 							if ( top_filtered_log_monitor->succ )

  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  00266	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0026a	74 0e		 je	 SHORT $LN46@debug_wind

; 1982 : 							{
; 1983 : 
; 1984 : 								top_filtered_log_monitor = top_filtered_log_monitor->succ;

  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  00271	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00274	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, ecx
$LN46@debug_wind:

; 1985 : 							}
; 1986 : 
; 1987 : 							diff --;

  0027a	8b 45 bc	 mov	 eax, DWORD PTR _diff$[ebp]
  0027d	83 e8 01	 sub	 eax, 1
  00280	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax

; 1988 : 							pos ++;

  00283	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  00286	83 c0 01	 add	 eax, 1
  00289	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 1989 : 						}

  0028c	eb cd		 jmp	 SHORT $LN10@debug_wind
$LN41@debug_wind:

; 1990 : 					}
; 1991 : 
; 1992 : 					break;

  0028e	e9 c5 00 00 00	 jmp	 $LN4@debug_wind
$LN47@debug_wind:

; 1993 : 				}
; 1994 : 
; 1995 : 				case SB_PAGEUP:
; 1996 : 				{
; 1997 : 
; 1998 : 					if ( window_handle == application_debug_log_window )

  00293	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  00296	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  0029c	75 3b		 jne	 SHORT $LN48@debug_wind

; 1999 : 					{
; 2000 : 
; 2001 : 						diff = number_of_log_lines;

  0029e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_lines@@3HA
  002a3	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax
$LN12@debug_wind:

; 2002 : 
; 2003 : 						while ( diff )

  002a6	83 7d bc 00	 cmp	 DWORD PTR _diff$[ebp], 0
  002aa	74 2b		 je	 SHORT $LN13@debug_wind

; 2004 : 						{
; 2005 : 
; 2006 : 							if ( top_log_monitor->pred )

  002ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  002b1	83 38 00	 cmp	 DWORD PTR [eax], 0
  002b4	74 0d		 je	 SHORT $LN50@debug_wind

; 2007 : 							{
; 2008 : 
; 2009 : 								top_log_monitor = top_log_monitor->pred;

  002b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  002bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002bd	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, ecx
$LN50@debug_wind:

; 2010 : 							}
; 2011 : 
; 2012 : 							diff --;

  002c3	8b 45 bc	 mov	 eax, DWORD PTR _diff$[ebp]
  002c6	83 e8 01	 sub	 eax, 1
  002c9	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax

; 2013 : 							pos --;

  002cc	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  002cf	83 e8 01	 sub	 eax, 1
  002d2	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 2014 : 						}

  002d5	eb cf		 jmp	 SHORT $LN12@debug_wind
$LN13@debug_wind:

; 2015 : 					}
; 2016 : 					else if ( window_handle == application_debug_watch_window )

  002d7	eb 7f		 jmp	 SHORT $LN4@debug_wind
$LN48@debug_wind:
  002d9	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  002dc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  002e2	75 3b		 jne	 SHORT $LN51@debug_wind

; 2017 : 					{
; 2018 : 
; 2019 : 						diff = number_of_watch_lines;

  002e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_watch_lines@@3HA
  002e9	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax
$LN14@debug_wind:

; 2020 : 
; 2021 : 						while ( diff )

  002ec	83 7d bc 00	 cmp	 DWORD PTR _diff$[ebp], 0
  002f0	74 2b		 je	 SHORT $LN15@debug_wind

; 2022 : 						{
; 2023 : 
; 2024 : 							if (top_watch_monitor->pred)

  002f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  002f7	83 38 00	 cmp	 DWORD PTR [eax], 0
  002fa	74 0d		 je	 SHORT $LN53@debug_wind

; 2025 : 							{
; 2026 : 
; 2027 : 								top_watch_monitor = top_watch_monitor->pred;

  002fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A
  00301	8b 08		 mov	 ecx, DWORD PTR [eax]
  00303	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_watch_monitor@@3PAUmonitor_data@@A, ecx
$LN53@debug_wind:

; 2028 : 							}
; 2029 : 
; 2030 : 							diff --;

  00309	8b 45 bc	 mov	 eax, DWORD PTR _diff$[ebp]
  0030c	83 e8 01	 sub	 eax, 1
  0030f	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax

; 2031 : 							pos --;

  00312	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  00315	83 e8 01	 sub	 eax, 1
  00318	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 2032 : 						}

  0031b	eb cf		 jmp	 SHORT $LN14@debug_wind
$LN15@debug_wind:

; 2033 : 					}
; 2034 : 					else

  0031d	eb 39		 jmp	 SHORT $LN4@debug_wind
$LN51@debug_wind:

; 2035 : 					{
; 2036 : 
; 2037 : 						diff = number_of_filtered_log_lines;

  0031f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_lines@@3HA
  00324	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax
$LN16@debug_wind:

; 2038 : 
; 2039 : 						while ( diff )

  00327	83 7d bc 00	 cmp	 DWORD PTR _diff$[ebp], 0
  0032b	74 2b		 je	 SHORT $LN4@debug_wind

; 2040 : 						{
; 2041 : 
; 2042 : 							if (top_filtered_log_monitor->pred)

  0032d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  00332	83 38 00	 cmp	 DWORD PTR [eax], 0
  00335	74 0d		 je	 SHORT $LN54@debug_wind

; 2043 : 							{
; 2044 : 
; 2045 : 								top_filtered_log_monitor = top_filtered_log_monitor->pred;

  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, ecx
$LN54@debug_wind:

; 2046 : 							}
; 2047 : 
; 2048 : 							diff --;

  00344	8b 45 bc	 mov	 eax, DWORD PTR _diff$[ebp]
  00347	83 e8 01	 sub	 eax, 1
  0034a	89 45 bc	 mov	 DWORD PTR _diff$[ebp], eax

; 2049 : 							pos --;

  0034d	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  00350	83 e8 01	 sub	 eax, 1
  00353	89 45 b8	 mov	 DWORD PTR _pos$[ebp], eax

; 2050 : 						}

  00356	eb cf		 jmp	 SHORT $LN16@debug_wind
$LN4@debug_wind:

; 2051 : 					}
; 2052 : 
; 2053 : 					break;
; 2054 : 				}
; 2055 : 			}
; 2056 : 
; 2057 : 			SetScrollPos (window_handle, SB_VERT, pos, TRUE);

  00358	6a 01		 push	 1
  0035a	8b 45 b8	 mov	 eax, DWORD PTR _pos$[ebp]
  0035d	50		 push	 eax
  0035e	6a 01		 push	 1
  00360	8b 4d 08	 mov	 ecx, DWORD PTR _window_handle$[ebp]
  00363	51		 push	 ecx
  00364	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16

; 2058 : 
; 2059 : 			update_window (window_handle);

  0036a	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 ?update_window@@YGXPAUHWND__@@@Z ; update_window

; 2060 : 
; 2061 : 			break;

  00373	eb 08		 jmp	 SHORT $LN2@debug_wind
$LN55@debug_wind:

; 2062 : 		}
; 2063 : 
; 2064 : 
; 2065 : 		case WM_DESTROY:
; 2066 : 		{
; 2067 : 
; 2068 : 			PostQuitMessage (0);

  00375	6a 00		 push	 0
  00377	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@debug_wind:

; 2069 : 
; 2070 : 			break;
; 2071 : 		}
; 2072 : 	}
; 2073 : 
; 2074 : 	return DefWindowProc (window_handle, message, wParam, lParam);

  0037d	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00380	50		 push	 eax
  00381	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00384	51		 push	 ecx
  00385	8b 55 0c	 mov	 edx, DWORD PTR _message$[ebp]
  00388	52		 push	 edx
  00389	8b 45 08	 mov	 eax, DWORD PTR _window_handle$[ebp]
  0038c	50		 push	 eax
  0038d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
$LN1@debug_wind:

; 2075 : }

  00393	5f		 pop	 edi
  00394	5e		 pop	 esi
  00395	5b		 pop	 ebx
  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 10 00	 ret	 16			; 00000010H
$LN58@debug_wind:
  0039c	00 00 00 00	 DD	 $LN31@debug_wind
  003a0	00 00 00 00	 DD	 $LN23@debug_wind
  003a4	00 00 00 00	 DD	 $LN47@debug_wind
  003a8	00 00 00 00	 DD	 $LN39@debug_wind
?debug_window_notify@@YGJPAUHWND__@@IIJ@Z ENDP		; debug_window_notify
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?initialise_internal_debug_system@@YGJPAX@Z
_TEXT	SEGMENT
_monitor_thread_id$ = -44				; size = 4
_wc$ = -40						; size = 40
_data$ = 8						; size = 4
?initialise_internal_debug_system@@YGJPAX@Z PROC	; initialise_internal_debug_system, COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 356  : 
; 357  : 	WNDCLASS
; 358  : 		wc;
; 359  : 
; 360  : 	DWORD
; 361  : 		monitor_thread_id;
; 362  : 
; 363  : 
; 364  : 	if ( debug_monitor )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  00010	0f 84 27 02 00
	00		 je	 $LN2@initialise

; 365  : 	{
; 366  : 
; 367  : 		memset ( &wc, 0, sizeof ( wc ) );

  00016	6a 28		 push	 40			; 00000028H
  00018	6a 00		 push	 0
  0001a	8d 45 d8	 lea	 eax, DWORD PTR _wc$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _memset
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 368  : 
; 369  : 		wc.lpszClassName = "DebugLogClass";

  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+36], OFFSET ??_C@_0O@GGOHDKAL@DebugLogClass@

; 370  : 		wc.hInstance = application_instance;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_instance@@3PAUHINSTANCE__@@A ; application_instance
  00032	89 45 e8	 mov	 DWORD PTR _wc$[ebp+16], eax

; 371  : 		wc.style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_NOCLOSE;

  00035	c7 45 d8 0b 02
	00 00		 mov	 DWORD PTR _wc$[ebp], 523 ; 0000020bH

; 372  : 		wc.lpfnWndProc = (WNDPROC) debug_window_notify;

  0003c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+4], OFFSET ?debug_window_notify@@YGJPAUHWND__@@IIJ@Z ; debug_window_notify

; 373  : 		wc.hbrBackground = (HBRUSH) COLOR_BACKGROUND;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _wc$[ebp+28], 1

; 374  : 
; 375  : 		if ( !RegisterClass ( &wc ) )

  0004a	8d 45 d8	 lea	 eax, DWORD PTR _wc$[ebp]
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  00054	0f b7 c8	 movzx	 ecx, ax
  00057	85 c9		 test	 ecx, ecx
  00059	75 07		 jne	 SHORT $LN3@initialise

; 376  : 		{
; 377  : 
; 378  : 			return FALSE;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 e0 01 00 00	 jmp	 $LN1@initialise
$LN3@initialise:

; 379  : 		}
; 380  : 
; 381  : 		wc.lpszClassName = "DebugWatchClass";

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+36], OFFSET ??_C@_0BA@COPDOKBF@DebugWatchClass@

; 382  : 		wc.hInstance = application_instance;

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_instance@@3PAUHINSTANCE__@@A ; application_instance
  0006e	89 45 e8	 mov	 DWORD PTR _wc$[ebp+16], eax

; 383  : 		wc.style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_NOCLOSE;

  00071	c7 45 d8 0b 02
	00 00		 mov	 DWORD PTR _wc$[ebp], 523 ; 0000020bH

; 384  : 		wc.lpfnWndProc = (WNDPROC) debug_window_notify;

  00078	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+4], OFFSET ?debug_window_notify@@YGJPAUHWND__@@IIJ@Z ; debug_window_notify

; 385  : 		wc.hbrBackground = (HBRUSH) COLOR_BACKGROUND;

  0007f	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _wc$[ebp+28], 1

; 386  : 
; 387  : 		if ( !RegisterClass ( &wc ) )

  00086	8d 45 d8	 lea	 eax, DWORD PTR _wc$[ebp]
  00089	50		 push	 eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  00090	0f b7 c8	 movzx	 ecx, ax
  00093	85 c9		 test	 ecx, ecx
  00095	75 07		 jne	 SHORT $LN4@initialise

; 388  : 		{
; 389  : 
; 390  : 			return FALSE;

  00097	33 c0		 xor	 eax, eax
  00099	e9 a4 01 00 00	 jmp	 $LN1@initialise
$LN4@initialise:

; 391  : 		}
; 392  : 
; 393  : 		wc.lpszClassName = "DebugLogFilteredClass";

  0009e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+36], OFFSET ??_C@_0BG@HFHENEIP@DebugLogFilteredClass@

; 394  : 		wc.hInstance = application_instance;

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_instance@@3PAUHINSTANCE__@@A ; application_instance
  000aa	89 45 e8	 mov	 DWORD PTR _wc$[ebp+16], eax

; 395  : 		wc.style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_NOCLOSE;

  000ad	c7 45 d8 0b 02
	00 00		 mov	 DWORD PTR _wc$[ebp], 523 ; 0000020bH

; 396  : 		wc.lpfnWndProc = (WNDPROC) debug_window_notify;

  000b4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+4], OFFSET ?debug_window_notify@@YGJPAUHWND__@@IIJ@Z ; debug_window_notify

; 397  : 		wc.hbrBackground = (HBRUSH) COLOR_BACKGROUND;

  000bb	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _wc$[ebp+28], 1

; 398  : 
; 399  : 		if ( !RegisterClass ( &wc ) )

  000c2	8d 45 d8	 lea	 eax, DWORD PTR _wc$[ebp]
  000c5	50		 push	 eax
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  000cc	0f b7 c8	 movzx	 ecx, ax
  000cf	85 c9		 test	 ecx, ecx
  000d1	75 07		 jne	 SHORT $LN5@initialise

; 400  : 		{
; 401  : 
; 402  : 			return FALSE;

  000d3	33 c0		 xor	 eax, eax
  000d5	e9 68 01 00 00	 jmp	 $LN1@initialise
$LN5@initialise:

; 403  : 		}
; 404  : 
; 405  : 		application_debug_log_window = CreateWindow

  000da	6a 00		 push	 0
  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_instance@@3PAUHINSTANCE__@@A ; application_instance
  000e1	50		 push	 eax
  000e2	6a 00		 push	 0
  000e4	6a 00		 push	 0
  000e6	68 e8 00 00 00	 push	 232			; 000000e8H
  000eb	68 88 02 00 00	 push	 648			; 00000288H
  000f0	68 fb 01 00 00	 push	 507			; 000001fbH
  000f5	6a 00		 push	 0
  000f7	68 00 10 ef 10	 push	 284102656		; 10ef1000H
  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_09NNILCKOM@Debug?5Log@
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GGOHDKAL@DebugLogClass@
  00106	6a 00		 push	 0
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  0010e	a3 00 00 00 00	 mov	 DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A, eax

; 406  : 		(
; 407  : 			"DebugLogClass",
; 408  : 			"Debug Log",
; 409  : 			WS_OVERLAPPEDWINDOW | WS_VSCROLL | WS_VISIBLE | LBS_DISABLENOSCROLL,
; 410  : 			0,
; 411  : 			507,
; 412  : 			648,
; 413  : 			232,
; 414  : 			NULL,
; 415  : 			NULL,
; 416  : 			application_instance,
; 417  : 			NULL
; 418  : 		);
; 419  : 
; 420  : 		SetScrollRange (application_debug_log_window, SB_VERT, 0, 0, TRUE);

  00113	6a 01		 push	 1
  00115	6a 00		 push	 0
  00117	6a 00		 push	 0
  00119	6a 01		 push	 1
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  00120	50		 push	 eax
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 421  : 
; 422  : 		SetScrollPos (application_debug_log_window, SB_VERT, 0, TRUE);

  00127	6a 01		 push	 1
  00129	6a 00		 push	 0
  0012b	6a 01		 push	 1
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  00132	50		 push	 eax
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16

; 423  : 
; 424  : 		application_debug_watch_window = CreateWindow

  00139	6a 00		 push	 0
  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_instance@@3PAUHINSTANCE__@@A ; application_instance
  00140	50		 push	 eax
  00141	6a 00		 push	 0
  00143	6a 00		 push	 0
  00145	68 fb 01 00 00	 push	 507			; 000001fbH
  0014a	68 78 01 00 00	 push	 376			; 00000178H
  0014f	6a 00		 push	 0
  00151	68 88 02 00 00	 push	 648			; 00000288H
  00156	68 00 10 ef 10	 push	 284102656		; 10ef1000H
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FKEIIICD@Debug?5Watch@
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@COPDOKBF@DebugWatchClass@
  00165	6a 00		 push	 0
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  0016d	a3 00 00 00 00	 mov	 DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A, eax

; 425  : 		(
; 426  : 			"DebugWatchClass",
; 427  : 			"Debug Watch",
; 428  : 			WS_OVERLAPPEDWINDOW | WS_VSCROLL | WS_VISIBLE | LBS_DISABLENOSCROLL,
; 429  : 			648,
; 430  : 			0,
; 431  : 			376,
; 432  : 			507,
; 433  : 			NULL,
; 434  : 			NULL,
; 435  : 			application_instance,
; 436  : 			NULL
; 437  : 		);
; 438  : 
; 439  : 		SetScrollRange (application_debug_watch_window, SB_VERT, 0, 0, TRUE);

  00172	6a 01		 push	 1
  00174	6a 00		 push	 0
  00176	6a 00		 push	 0
  00178	6a 01		 push	 1
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  0017f	50		 push	 eax
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 440  : 
; 441  : 		SetScrollPos (application_debug_watch_window, SB_VERT, 0, TRUE);

  00186	6a 01		 push	 1
  00188	6a 00		 push	 0
  0018a	6a 01		 push	 1
  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  00191	50		 push	 eax
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16

; 442  : 
; 443  : 		application_debug_filtered_log_window = CreateWindow

  00198	6a 00		 push	 0
  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_instance@@3PAUHINSTANCE__@@A ; application_instance
  0019f	50		 push	 eax
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	68 e8 00 00 00	 push	 232			; 000000e8H
  001a9	68 78 01 00 00	 push	 376			; 00000178H
  001ae	68 fb 01 00 00	 push	 507			; 000001fbH
  001b3	68 88 02 00 00	 push	 648			; 00000288H
  001b8	68 00 10 ef 10	 push	 284102656		; 10ef1000H
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GKODMJEL@Debug?5Log?5Filter@
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HFHENEIP@DebugLogFilteredClass@
  001c7	6a 00		 push	 0
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  001cf	a3 00 00 00 00	 mov	 DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A, eax

; 444  : 		(
; 445  : 			"DebugLogFilteredClass",
; 446  : 			"Debug Log Filter",
; 447  : 			WS_OVERLAPPEDWINDOW | WS_VSCROLL | WS_VISIBLE | LBS_DISABLENOSCROLL,
; 448  : 			648,
; 449  : 			507,
; 450  : 			376,
; 451  : 			232,
; 452  : 			NULL,
; 453  : 			NULL,
; 454  : 			application_instance,
; 455  : 			NULL
; 456  : 		);
; 457  : 
; 458  : 		SetScrollRange (application_debug_filtered_log_window, SB_VERT, 0, 0, TRUE);

  001d4	6a 01		 push	 1
  001d6	6a 00		 push	 0
  001d8	6a 00		 push	 0
  001da	6a 01		 push	 1
  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  001e1	50		 push	 eax
  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 459  : 
; 460  : 		SetScrollPos (application_debug_filtered_log_window, SB_VERT, 0, TRUE);

  001e8	6a 01		 push	 1
  001ea	6a 00		 push	 0
  001ec	6a 01		 push	 1
  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  001f3	50		 push	 eax
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16

; 461  : 
; 462  : 		//
; 463  : 		// Create the thread to auto update the debug windows, if we want to
; 464  : 		//
; 465  : 
; 466  : 		if ( ( application_debug_watch_window ) && ( application_debug_log_window ) )

  001fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A, 0
  00201	74 2e		 je	 SHORT $LN6@initialise
  00203	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A, 0
  0020a	74 25		 je	 SHORT $LN6@initialise

; 467  : 		{
; 468  : 
; 469  : 			if ( debug_monitor_auto_update )

  0020c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor_auto_update@@3HA, 0
  00213	74 1c		 je	 SHORT $LN6@initialise

; 470  : 			{
; 471  : 
; 472  : 				application_monitor_thread = CreateThread

  00215	8d 45 d4	 lea	 eax, DWORD PTR _monitor_thread_id$[ebp]
  00218	50		 push	 eax
  00219	6a 00		 push	 0
  0021b	6a 00		 push	 0
  0021d	68 00 00 00 00	 push	 OFFSET ?application_monitor_process_thread@@YGXXZ ; application_monitor_process_thread
  00222	6a 00		 push	 0
  00224	6a 00		 push	 0
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24
  0022c	a3 00 00 00 00	 mov	 DWORD PTR ?application_monitor_thread@@3PAXA, eax ; application_monitor_thread
$LN6@initialise:

; 473  : 				(
; 474  : 					(LPSECURITY_ATTRIBUTES) NULL,
; 475  : 					0,
; 476  : 					(LPTHREAD_START_ROUTINE) application_monitor_process_thread,
; 477  : 					0,
; 478  : 					0,
; 479  : 					&monitor_thread_id
; 480  : 				);
; 481  : 
; 482  : //				SetThreadPriority ( application_monitor_thread, THREAD_PRIORITY_LOWEST );
; 483  : 			}
; 484  : 		}
; 485  : 
; 486  : 		//
; 487  : 		// Set the focus back to the main application window
; 488  : 		//
; 489  : 
; 490  : 		SetFocus ( application_window );

  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00236	50		 push	 eax
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
$LN2@initialise:

; 491  : 	}
; 492  : 
; 493  : 	return TRUE;

  0023d	b8 01 00 00 00	 mov	 eax, 1
$LN1@initialise:

; 494  : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 04 00	 ret	 4
?initialise_internal_debug_system@@YGJPAX@Z ENDP	; initialise_internal_debug_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?deinitialise_debug_system@@YGXXZ
_TEXT	SEGMENT
?deinitialise_debug_system@@YGXXZ PROC			; deinitialise_debug_system, COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 320  : 
; 321  : 	if ( debug_monitor_auto_update )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor_auto_update@@3HA, 0
  00010	74 0e		 je	 SHORT $LN1@deinitiali

; 322  : 	{
; 323  : 
; 324  : 		//
; 325  : 		// Disable the updating thread - but can't TerminateThread it in case its in kernel32 routines
; 326  : 		//
; 327  : 
; 328  : 		SetThreadPriority ( application_monitor_thread, THREAD_PRIORITY_IDLE );

  00012	6a f1		 push	 -15			; fffffff1H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_monitor_thread@@3PAXA ; application_monitor_thread
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8
$LN1@deinitiali:

; 329  : 	}
; 330  : 
; 331  : /*
; 332  : 	if ( application_debug_log_window )
; 333  : 	{
; 334  : 
; 335  : 		DestroyWindow ( application_debug_log_window );
; 336  : 
; 337  : 		application_debug_log_window = 0;
; 338  : 	}
; 339  : 
; 340  : 	if ( application_debug_watch_window )
; 341  : 	{
; 342  : 
; 343  : 		DestroyWindow ( application_debug_watch_window );
; 344  : 
; 345  : 		application_debug_watch_window = 0;
; 346  : 	}
; 347  : 	*/
; 348  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?deinitialise_debug_system@@YGXXZ ENDP			; deinitialise_debug_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?rename_debug_log_file@@YGXPBD@Z
_TEXT	SEGMENT
_fp$ = -8						; size = 4
_error$ = -4						; size = 4
_new_file_name$ = 8					; size = 4
?rename_debug_log_file@@YGXPBD@Z PROC			; rename_debug_log_file, COMDAT

; 2123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2124 : 	int
; 2125 : 		error;
; 2126 : 
; 2127 : 	FILE
; 2128 : 		*fp;
; 2129 : 
; 2130 : 	//
; 2131 : 	// check everything is ok with new_file_name
; 2132 : 	//
; 2133 : 
; 2134 : 	ASSERT (new_file_name);

  00009	83 7d 08 00	 cmp	 DWORD PTR _new_file_name$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@rename_deb
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??rename_debug_log_file@@YGXPBD@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OONGKJMN@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LDHMMFMC@new_file_name@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@rename_deb:

; 2135 : 
; 2136 : 	ASSERT (strlen (new_file_name) > 0);

  00027	8b 45 08	 mov	 eax, DWORD PTR _new_file_name$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _strlen
  00030	83 c4 04	 add	 esp, 4
  00033	85 c0		 test	 eax, eax
  00035	77 18		 ja	 SHORT $LN3@rename_deb
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??rename_debug_log_file@@YGXPBD@Z@4JA
  0003c	83 c0 0d	 add	 eax, 13			; 0000000dH
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OONGKJMN@c?3?2users?2nhv90?2projects?2eech?2mo@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LDGPFEI@strlen?5?$CInew_file_name?$CJ?5?$DO?50@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@rename_deb:

; 2137 : 
; 2138 : 	ASSERT (strlen (new_file_name) < 100);

  0004f	8b 45 08	 mov	 eax, DWORD PTR _new_file_name$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _strlen
  00058	83 c4 04	 add	 esp, 4
  0005b	83 f8 64	 cmp	 eax, 100		; 00000064H
  0005e	72 18		 jb	 SHORT $LN4@rename_deb
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??rename_debug_log_file@@YGXPBD@Z@4JA
  00065	83 c0 0f	 add	 eax, 15			; 0000000fH
  00068	50		 push	 eax
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OONGKJMN@c?3?2users?2nhv90?2projects?2eech?2mo@
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PLCONNKF@strlen?5?$CInew_file_name?$CJ?5?$DM?5100@
  00073	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@rename_deb:

; 2139 : 
; 2140 : 	debug_log ("Renaming debug log file from %s to %s", debug_log_file_name, new_file_name);

  00078	8b 45 08	 mov	 eax, DWORD PTR _new_file_name$[ebp]
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@ICMOOLIJ@Renaming?5debug?5log?5file?5from?5?$CFs@
  00086	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2141 : 
; 2142 : 	//
; 2143 : 	// if new_file_name file exists then delete it to prevent a rename error
; 2144 : 	//
; 2145 : 
; 2146 : 	if (file_exist (new_file_name))

  0008e	8b 45 08	 mov	 eax, DWORD PTR _new_file_name$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00097	85 c0		 test	 eax, eax
  00099	74 27		 je	 SHORT $LN5@rename_deb

; 2147 : 	{
; 2148 : 		error = unlink (new_file_name);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _new_file_name$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlink
  000a5	83 c4 04	 add	 esp, 4
  000a8	89 45 fc	 mov	 DWORD PTR _error$[ebp], eax

; 2149 : 
; 2150 : 		if (error != 0)

  000ab	83 7d fc 00	 cmp	 DWORD PTR _error$[ebp], 0
  000af	74 11		 je	 SHORT $LN5@rename_deb

; 2151 : 		{
; 2152 : 			debug_log ("Unlink debug log failed (error = %d)", error);

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _error$[ebp]
  000b4	50		 push	 eax
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EBJJPPOJ@Unlink?5debug?5log?5failed?5?$CIerror?5@
  000ba	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000bf	83 c4 08	 add	 esp, 8
$LN5@rename_deb:

; 2153 : 		}
; 2154 : 	}
; 2155 : 
; 2156 : 	// if the debug log file does not exist then create it
; 2157 : 	//
; 2158 : 	// (optimised compilation does not have debug_log only debug_fatal
; 2159 : 	// so it's likely that the initial DEBUG.LOG file won't exist yet)
; 2160 : 
; 2161 : 	if (!file_exist (debug_log_file_name))

  000c2	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  000c7	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  000cc	85 c0		 test	 eax, eax
  000ce	75 38		 jne	 SHORT $LN7@rename_deb

; 2162 : 	{
; 2163 : 		fp = fopen (debug_log_file_name, "w");

  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  000d5	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  000e0	83 c4 08	 add	 esp, 8
  000e3	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 2164 : 
; 2165 : 		if (fp)

  000e6	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  000ea	74 0f		 je	 SHORT $LN8@rename_deb

; 2166 : 		{
; 2167 : 			fclose (fp);

  000ec	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000f6	83 c4 04	 add	 esp, 4

; 2168 : 		}
; 2169 : 		else

  000f9	eb 0d		 jmp	 SHORT $LN7@rename_deb
$LN8@rename_deb:

; 2170 : 		{
; 2171 : 			debug_log ("No debug log to rename");

  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GINCGKAH@No?5debug?5log?5to?5rename@
  00100	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00105	83 c4 04	 add	 esp, 4
$LN7@rename_deb:

; 2172 : 		}
; 2173 : 	}
; 2174 : 
; 2175 : 	error = rename (debug_log_file_name, new_file_name);

  00108	8b 45 08	 mov	 eax, DWORD PTR _new_file_name$[ebp]
  0010b	50		 push	 eax
  0010c	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rename
  00117	83 c4 08	 add	 esp, 8
  0011a	89 45 fc	 mov	 DWORD PTR _error$[ebp], eax

; 2176 : 
; 2177 : 	if (error != 0)

  0011d	83 7d fc 00	 cmp	 DWORD PTR _error$[ebp], 0
  00121	74 11		 je	 SHORT $LN10@rename_deb

; 2178 : 	{
; 2179 : 		debug_log ("Rename debug log failed (error = %d)", error);

  00123	8b 45 fc	 mov	 eax, DWORD PTR _error$[ebp]
  00126	50		 push	 eax
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CLIJGILI@Rename?5debug?5log?5failed?5?$CIerror?5@
  0012c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00131	83 c4 08	 add	 esp, 8
$LN10@rename_deb:

; 2180 : 	}
; 2181 : 
; 2182 : 	strcpy (debug_log_file_name, new_file_name);

  00134	8b 45 08	 mov	 eax, DWORD PTR _new_file_name$[ebp]
  00137	50		 push	 eax
  00138	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  0013d	e8 00 00 00 00	 call	 _strcpy
  00142	83 c4 08	 add	 esp, 8

; 2183 : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 04 00	 ret	 4
?rename_debug_log_file@@YGXPBD@Z ENDP			; rename_debug_log_file
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?breakout@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?breakout@@YGXPAUEVENT@@@Z PROC				; breakout, COMDAT

; 1425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1426 : 
; 1427 : 	ev;
; 1428 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?breakout@@YGXPAUEVENT@@@Z ENDP				; breakout
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?update_debug_windows@@YGXXZ
_TEXT	SEGMENT
?update_debug_windows@@YGXXZ PROC			; update_debug_windows, COMDAT

; 2082 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2083 : 
; 2084 : #ifdef DEBUG
; 2085 : 
; 2086 : 	if ( !debug_monitor_auto_update )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor_auto_update@@3HA, 0
  00010	75 2a		 jne	 SHORT $LN1@update_deb

; 2087 : 	{
; 2088 : 
; 2089 : 		SendMessage ( application_debug_log_window, WM_USER, 0, 0 );

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 00 04 00 00	 push	 1024			; 00000400H
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 2090 : 
; 2091 : 		SendMessage ( application_debug_watch_window, WM_USER, 0, 0 );

  00027	6a 00		 push	 0
  00029	6a 00		 push	 0
  0002b	68 00 04 00 00	 push	 1024			; 00000400H
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_debug_watch_window@@3PAUHWND__@@A
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN1@update_deb:

; 2092 : 	}
; 2093 : 
; 2094 : #endif
; 2095 : 
; 2096 : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?update_debug_windows@@YGXXZ ENDP			; update_debug_windows
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_colour_watch4@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX333@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_colour$ = 8						; size = 4
_string$ = 12						; size = 4
_type$ = 16						; size = 4
_data1$ = 20						; size = 4
_data2$ = 24						; size = 4
_data3$ = 28						; size = 4
_data4$ = 32						; size = 4
?debug_colour_watch4@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX333@Z PROC ; debug_colour_watch4, COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1389 : 
; 1390 : 	LPMONITORDATA
; 1391 : 		md;
; 1392 : 
; 1393 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	0f 84 9a 00 00
	00		 je	 $LN1@debug_colo

; 1394 : 	{
; 1395 : 
; 1396 : 		if ( debug_monitor )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0001d	0f 84 8d 00 00
	00		 je	 $LN1@debug_colo

; 1397 : 		{
; 1398 : 
; 1399 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00023	6a 2c		 push	 44			; 0000002cH
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002b	83 c4 04	 add	 esp, 4
  0002e	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1400 : 
; 1401 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  00031	6a 2c		 push	 44			; 0000002cH
  00033	6a 00		 push	 0
  00035	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1402 : 
; 1403 : 			add_watch_item ( md );

  00041	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1404 : 
; 1405 : 			md->number = 4;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0004d	c7 40 0c 04 00
	00 00		 mov	 DWORD PTR [eax+12], 4

; 1406 : 			md->offset = number_of_watch_monitor_lines;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1407 : 			md->string = strdup ( string );

  00060	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  00070	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1408 : 			md->type = type;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00076	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  00079	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1409 : 			md->data = data1;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0007f	8b 4d 14	 mov	 ecx, DWORD PTR _data1$[ebp]
  00082	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1410 : 			md->data2 = data2;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00088	8b 4d 18	 mov	 ecx, DWORD PTR _data2$[ebp]
  0008b	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1411 : 			md->data3 = data3;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00091	8b 4d 1c	 mov	 ecx, DWORD PTR _data3$[ebp]
  00094	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 1412 : 			md->data4 = data4;

  00097	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0009a	8b 4d 20	 mov	 ecx, DWORD PTR _data4$[ebp]
  0009d	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1413 : 			md->colour = debug_colour_table[colour];

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  000a6	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?debug_colour_table@@3PAKA[ecx*4]
  000ad	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN1@debug_colo:

; 1414 : 		}
; 1415 : 	}
; 1416 : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 1c 00	 ret	 28			; 0000001cH
?debug_colour_watch4@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX333@Z ENDP ; debug_colour_watch4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_watch4@@YGXPBDW4mt_type@@PAX222@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_string$ = 8						; size = 4
_type$ = 12						; size = 4
_data1$ = 16						; size = 4
_data2$ = 20						; size = 4
_data3$ = 24						; size = 4
_data4$ = 28						; size = 4
?debug_watch4@@YGXPBDW4mt_type@@PAX222@Z PROC		; debug_watch4, COMDAT

; 1254 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1255 : 
; 1256 : 	LPMONITORDATA
; 1257 : 		md;
; 1258 : 
; 1259 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	0f 84 9e 00 00
	00		 je	 $LN1@debug_watc

; 1260 : 	{
; 1261 : 
; 1262 : 		if ( debug_monitor )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0001d	0f 84 91 00 00
	00		 je	 $LN1@debug_watc

; 1263 : 		{
; 1264 : 
; 1265 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00023	6a 2c		 push	 44			; 0000002cH
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002b	83 c4 04	 add	 esp, 4
  0002e	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1266 : 
; 1267 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  00031	6a 2c		 push	 44			; 0000002cH
  00033	6a 00		 push	 0
  00035	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1268 : 
; 1269 : 			add_watch_item ( md );

  00041	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1270 : 
; 1271 : 			md->number = 4;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0004d	c7 40 0c 04 00
	00 00		 mov	 DWORD PTR [eax+12], 4

; 1272 : 			md->offset = number_of_watch_monitor_lines;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1273 : 			md->string = strdup ( string );

  00060	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  00070	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1274 : 			md->type = type;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00079	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1275 : 			md->data = data1;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0007f	8b 4d 10	 mov	 ecx, DWORD PTR _data1$[ebp]
  00082	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1276 : 			md->data2 = data2;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00088	8b 4d 14	 mov	 ecx, DWORD PTR _data2$[ebp]
  0008b	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1277 : 			md->data3 = data3;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00091	8b 4d 18	 mov	 ecx, DWORD PTR _data3$[ebp]
  00094	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 1278 : 			md->data4 = data4;

  00097	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0009a	8b 4d 1c	 mov	 ecx, DWORD PTR _data4$[ebp]
  0009d	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1279 : 			md->colour = debug_colour_table[DEBUG_COLOUR_BLACK];

  000a0	b8 04 00 00 00	 mov	 eax, 4
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _md$[ebp]
  000ab	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR ?debug_colour_table@@3PAKA[ecx]
  000b1	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN1@debug_watc:

; 1280 : 		}
; 1281 : 	}
; 1282 : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 18 00	 ret	 24			; 00000018H
?debug_watch4@@YGXPBDW4mt_type@@PAX222@Z ENDP		; debug_watch4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_colour_watch3@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX33@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_colour$ = 8						; size = 4
_string$ = 12						; size = 4
_type$ = 16						; size = 4
_data1$ = 20						; size = 4
_data2$ = 24						; size = 4
_data3$ = 28						; size = 4
?debug_colour_watch3@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX33@Z PROC ; debug_colour_watch3, COMDAT

; 1354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1355 : 
; 1356 : 	LPMONITORDATA
; 1357 : 		md;
; 1358 : 
; 1359 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	0f 84 91 00 00
	00		 je	 $LN1@debug_colo

; 1360 : 	{
; 1361 : 
; 1362 : 		if ( debug_monitor )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0001d	0f 84 84 00 00
	00		 je	 $LN1@debug_colo

; 1363 : 		{
; 1364 : 
; 1365 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00023	6a 2c		 push	 44			; 0000002cH
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002b	83 c4 04	 add	 esp, 4
  0002e	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1366 : 
; 1367 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  00031	6a 2c		 push	 44			; 0000002cH
  00033	6a 00		 push	 0
  00035	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1368 : 
; 1369 : 			add_watch_item ( md );

  00041	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1370 : 
; 1371 : 			md->number = 3;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0004d	c7 40 0c 03 00
	00 00		 mov	 DWORD PTR [eax+12], 3

; 1372 : 			md->offset = number_of_watch_monitor_lines;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1373 : 			md->string = strdup ( string );

  00060	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  00070	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1374 : 			md->type = type;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00076	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  00079	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1375 : 			md->data = data1;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0007f	8b 4d 14	 mov	 ecx, DWORD PTR _data1$[ebp]
  00082	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1376 : 			md->data2 = data2;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00088	8b 4d 18	 mov	 ecx, DWORD PTR _data2$[ebp]
  0008b	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1377 : 			md->data3 = data3;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00091	8b 4d 1c	 mov	 ecx, DWORD PTR _data3$[ebp]
  00094	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 1378 : 			md->colour = debug_colour_table[colour];

  00097	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  0009d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?debug_colour_table@@3PAKA[ecx*4]
  000a4	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN1@debug_colo:

; 1379 : 		}
; 1380 : 	}
; 1381 : }

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 18 00	 ret	 24			; 00000018H
?debug_colour_watch3@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX33@Z ENDP ; debug_colour_watch3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_watch3@@YGXPBDW4mt_type@@PAX22@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_string$ = 8						; size = 4
_type$ = 12						; size = 4
_data1$ = 16						; size = 4
_data2$ = 20						; size = 4
_data3$ = 24						; size = 4
?debug_watch3@@YGXPBDW4mt_type@@PAX22@Z PROC		; debug_watch3, COMDAT

; 1220 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1221 : 
; 1222 : 	LPMONITORDATA
; 1223 : 		md;
; 1224 : 
; 1225 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	0f 84 95 00 00
	00		 je	 $LN1@debug_watc

; 1226 : 	{
; 1227 : 
; 1228 : 		if ( debug_monitor )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0001d	0f 84 88 00 00
	00		 je	 $LN1@debug_watc

; 1229 : 		{
; 1230 : 
; 1231 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00023	6a 2c		 push	 44			; 0000002cH
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002b	83 c4 04	 add	 esp, 4
  0002e	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1232 : 
; 1233 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  00031	6a 2c		 push	 44			; 0000002cH
  00033	6a 00		 push	 0
  00035	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1234 : 
; 1235 : 			add_watch_item ( md );

  00041	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1236 : 
; 1237 : 			md->number = 3;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0004d	c7 40 0c 03 00
	00 00		 mov	 DWORD PTR [eax+12], 3

; 1238 : 			md->offset = number_of_watch_monitor_lines;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1239 : 			md->string = strdup ( string );

  00060	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  00070	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1240 : 			md->type = type;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00079	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1241 : 			md->data = data1;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0007f	8b 4d 10	 mov	 ecx, DWORD PTR _data1$[ebp]
  00082	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1242 : 			md->data2 = data2;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00088	8b 4d 14	 mov	 ecx, DWORD PTR _data2$[ebp]
  0008b	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1243 : 			md->data3 = data3;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00091	8b 4d 18	 mov	 ecx, DWORD PTR _data3$[ebp]
  00094	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 1244 : 			md->colour = debug_colour_table[DEBUG_COLOUR_BLACK];

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	6b c8 00	 imul	 ecx, eax, 0
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _md$[ebp]
  000a2	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR ?debug_colour_table@@3PAKA[ecx]
  000a8	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN1@debug_watc:

; 1245 : 		}
; 1246 : 	}
; 1247 : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 14 00	 ret	 20			; 00000014H
?debug_watch3@@YGXPBDW4mt_type@@PAX22@Z ENDP		; debug_watch3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_colour_watch2@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX3@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_colour$ = 8						; size = 4
_string$ = 12						; size = 4
_type$ = 16						; size = 4
_data1$ = 20						; size = 4
_data2$ = 24						; size = 4
?debug_colour_watch2@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX3@Z PROC ; debug_colour_watch2, COMDAT

; 1321 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1322 : 
; 1323 : 	LPMONITORDATA
; 1324 : 		md;
; 1325 : 
; 1326 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	0f 84 84 00 00
	00		 je	 $LN1@debug_colo

; 1327 : 	{
; 1328 : 
; 1329 : 		if ( debug_monitor )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0001d	74 7b		 je	 SHORT $LN1@debug_colo

; 1330 : 		{
; 1331 : 
; 1332 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  0001f	6a 2c		 push	 44			; 0000002cH
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00027	83 c4 04	 add	 esp, 4
  0002a	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1333 : 
; 1334 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  0002d	6a 2c		 push	 44			; 0000002cH
  0002f	6a 00		 push	 0
  00031	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _memset
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1335 : 
; 1336 : 			add_watch_item ( md );

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1337 : 
; 1338 : 			md->number = 2;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00049	c7 40 0c 02 00
	00 00		 mov	 DWORD PTR [eax+12], 2

; 1339 : 			md->offset = number_of_watch_monitor_lines;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  00059	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1340 : 			md->string = strdup ( string );

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  00066	83 c4 04	 add	 esp, 4
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  0006c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1341 : 			md->type = type;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00072	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  00075	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1342 : 			md->data = data1;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0007b	8b 4d 14	 mov	 ecx, DWORD PTR _data1$[ebp]
  0007e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1343 : 			md->data2 = data2;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00084	8b 4d 18	 mov	 ecx, DWORD PTR _data2$[ebp]
  00087	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1344 : 			md->colour = debug_colour_table[colour];

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  00090	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?debug_colour_table@@3PAKA[ecx*4]
  00097	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN1@debug_colo:

; 1345 : 		}
; 1346 : 	}
; 1347 : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 14 00	 ret	 20			; 00000014H
?debug_colour_watch2@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX3@Z ENDP ; debug_colour_watch2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_watch2@@YGXPBDW4mt_type@@PAX2@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_string$ = 8						; size = 4
_type$ = 12						; size = 4
_data1$ = 16						; size = 4
_data2$ = 20						; size = 4
?debug_watch2@@YGXPBDW4mt_type@@PAX2@Z PROC		; debug_watch2, COMDAT

; 1187 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1188 : 
; 1189 : 	LPMONITORDATA
; 1190 : 		md;
; 1191 : 
; 1192 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	0f 84 88 00 00
	00		 je	 $LN1@debug_watc

; 1193 : 	{
; 1194 : 
; 1195 : 		if ( debug_monitor )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0001d	74 7f		 je	 SHORT $LN1@debug_watc

; 1196 : 		{
; 1197 : 
; 1198 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  0001f	6a 2c		 push	 44			; 0000002cH
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00027	83 c4 04	 add	 esp, 4
  0002a	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1199 : 
; 1200 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  0002d	6a 2c		 push	 44			; 0000002cH
  0002f	6a 00		 push	 0
  00031	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _memset
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1201 : 
; 1202 : 			add_watch_item ( md );

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1203 : 
; 1204 : 			md->number = 2;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00049	c7 40 0c 02 00
	00 00		 mov	 DWORD PTR [eax+12], 2

; 1205 : 			md->offset = number_of_watch_monitor_lines;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  00059	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1206 : 			md->string = strdup ( string );

  0005c	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  00066	83 c4 04	 add	 esp, 4
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  0006c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1207 : 			md->type = type;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00075	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1208 : 			md->data = data1;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0007b	8b 4d 10	 mov	 ecx, DWORD PTR _data1$[ebp]
  0007e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1209 : 			md->data2 = data2;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00084	8b 4d 14	 mov	 ecx, DWORD PTR _data2$[ebp]
  00087	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1210 : 			md->colour = debug_colour_table[DEBUG_COLOUR_BLACK];

  0008a	b8 04 00 00 00	 mov	 eax, 4
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	8b 55 fc	 mov	 edx, DWORD PTR _md$[ebp]
  00095	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR ?debug_colour_table@@3PAKA[ecx]
  0009b	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN1@debug_watc:

; 1211 : 		}
; 1212 : 	}
; 1213 : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 10 00	 ret	 16			; 00000010H
?debug_watch2@@YGXPBDW4mt_type@@PAX2@Z ENDP		; debug_watch2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_colour$ = 8						; size = 4
_string$ = 12						; size = 4
_type$ = 16						; size = 4
_data$ = 20						; size = 4
?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z PROC ; debug_colour_watch, COMDAT

; 1289 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1290 : 
; 1291 : 	LPMONITORDATA
; 1292 : 		md;
; 1293 : 
; 1294 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	74 7b		 je	 SHORT $LN1@debug_colo

; 1295 : 	{
; 1296 : 
; 1297 : 		if ( debug_monitor )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  00019	74 72		 je	 SHORT $LN1@debug_colo

; 1298 : 		{
; 1299 : 
; 1300 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  0001b	6a 2c		 push	 44			; 0000002cH
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1301 : 
; 1302 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  00029	6a 2c		 push	 44			; 0000002cH
  0002b	6a 00		 push	 0
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1303 : 
; 1304 : 			add_watch_item ( md );

  00039	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1305 : 
; 1306 : 			md->offset = number_of_watch_monitor_lines;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  0004b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1307 : 			md->number = 1;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00051	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 1308 : 			md->string = strdup ( string );

  00058	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  00068	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1309 : 			md->type = type;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0006e	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  00071	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1310 : 			md->data = data;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00077	8b 4d 14	 mov	 ecx, DWORD PTR _data$[ebp]
  0007a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1311 : 			md->colour = debug_colour_table[colour];

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  00083	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?debug_colour_table@@3PAKA[ecx*4]
  0008a	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN1@debug_colo:

; 1312 : 		}
; 1313 : 	}
; 1314 : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ENDP ; debug_colour_watch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_watch@@YGXPBDW4mt_type@@PAX@Z
_TEXT	SEGMENT
_md$ = -4						; size = 4
_string$ = 8						; size = 4
_type$ = 12						; size = 4
_data$ = 16						; size = 4
?debug_watch@@YGXPBDW4mt_type@@PAX@Z PROC		; debug_watch, COMDAT

; 1155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1156 : 
; 1157 : 	LPMONITORDATA
; 1158 : 		md;
; 1159 : 
; 1160 : 	if ( debug_log_state )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00010	74 7f		 je	 SHORT $LN1@debug_watc

; 1161 : 	{
; 1162 : 
; 1163 : 		if ( debug_monitor )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  00019	74 76		 je	 SHORT $LN1@debug_watc

; 1164 : 		{
; 1165 : 
; 1166 : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  0001b	6a 2c		 push	 44			; 0000002cH
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 fc	 mov	 DWORD PTR _md$[ebp], eax

; 1167 : 
; 1168 : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  00029	6a 2c		 push	 44			; 0000002cH
  0002b	6a 00		 push	 0
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1169 : 
; 1170 : 			add_watch_item ( md );

  00039	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?add_watch_item@@YGXPAUmonitor_data@@@Z ; add_watch_item

; 1171 : 
; 1172 : 			md->offset = number_of_watch_monitor_lines;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_watch_monitor_lines@@3HA
  0004b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1173 : 			md->number = 1;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00051	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 1174 : 			md->string = strdup ( string );

  00058	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _md$[ebp]
  00068	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1175 : 			md->type = type;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00071	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1176 : 			md->data = data;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _md$[ebp]
  00077	8b 4d 10	 mov	 ecx, DWORD PTR _data$[ebp]
  0007a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1177 : 			md->colour = debug_colour_table[DEBUG_COLOUR_BLACK];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	6b c8 00	 imul	 ecx, eax, 0
  00085	8b 55 fc	 mov	 edx, DWORD PTR _md$[ebp]
  00088	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR ?debug_colour_table@@3PAKA[ecx]
  0008e	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN1@debug_watc:

; 1178 : 		}
; 1179 : 	}
; 1180 : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
?debug_watch@@YGXPBDW4mt_type@@PAX@Z ENDP		; debug_watch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ
_TEXT	SEGMENT
_count$1 = -116						; size = 4
_temp$ = -112						; size = 4
_md$ = -108						; size = 4
_args$ = -104						; size = 4
_time_info$ = -100					; size = 100
_colour$ = 8						; size = 4
_msg$ = 12						; size = 4
?debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ PROC ; debug_colour_filtered_log, COMDAT

; 841  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 842  : #if 0
; 843  : 	FILE
; 844  : 		*fp;
; 845  : #endif
; 846  : 	static char
; 847  : 		buffer[1000];
; 848  : 
; 849  : 	char
; 850  : 		time_info[100];
; 851  : 
; 852  : 	va_list
; 853  : 		args;
; 854  : 
; 855  : 	LPMONITORDATA
; 856  : 		md,
; 857  : 		temp;
; 858  : 
; 859  : 
; 860  : 	if ( debug_log_state )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00013	0f 84 af 01 00
	00		 je	 $LN10@debug_colo

; 861  : 	{
; 862  : 
; 863  : 		va_start (args, msg);

  00019	8d 45 10	 lea	 eax, DWORD PTR _msg$[ebp+4]
  0001c	89 45 98	 mov	 DWORD PTR _args$[ebp], eax

; 864  : 
; 865  : 		vsprintf (buffer, msg, args);

  0001f	8b 45 98	 mov	 eax, DWORD PTR _args$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _msg$[ebp]
  00026	51		 push	 ecx
  00027	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA
  0002c	e8 00 00 00 00	 call	 _vsprintf
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 866  : 
; 867  : 		if ( !debug_timing_info_suppressed )

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_timing_info_suppressed@@3HA, 0
  0003b	75 3f		 jne	 SHORT $LN6@debug_colo

; 868  : 		{
; 869  : 
; 870  : 			sprintf (time_info, " @ %.2f", ( (float) system_ticks / 100.0 ) );

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_ticks@@3HC ; system_ticks
  00042	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00046	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0004a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4059000000000000
  00052	83 ec 08	 sub	 esp, 8
  00055	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_07HNIILHCJ@?5?$EA?5?$CF?42f@
  0005f	8d 4d 9c	 lea	 ecx, DWORD PTR _time_info$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _sprintf
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 871  : 
; 872  : 			strcat (buffer, time_info);

  0006b	8d 45 9c	 lea	 eax, DWORD PTR _time_info$[ebp]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA
  00074	e8 00 00 00 00	 call	 _strcat
  00079	83 c4 08	 add	 esp, 8
$LN6@debug_colo:

; 873  : 		}
; 874  : 
; 875  : 		va_end (args);

  0007c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 876  : 
; 877  : 		if ( debug_monitor )

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0008a	0f 84 38 01 00
	00		 je	 $LN10@debug_colo

; 878  : 		{
; 879  : 
; 880  : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00090	6a 2c		 push	 44			; 0000002cH
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 94	 mov	 DWORD PTR _md$[ebp], eax

; 881  : 
; 882  : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  0009e	6a 2c		 push	 44			; 0000002cH
  000a0	6a 00		 push	 0
  000a2	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _memset
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 883  : 
; 884  : 			md->succ = NULL;

  000ae	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000b1	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 885  : 
; 886  : 			md->pred = last_log_monitor;

  000b8	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A
  000c1	89 08		 mov	 DWORD PTR [eax], ecx

; 887  : 
; 888  : 			md->colour = debug_colour_table[colour];

  000c3	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  000c9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?debug_colour_table@@3PAKA[ecx*4]
  000d0	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 889  : 
; 890  : 			if ( last_filtered_log_monitor )

  000d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_filtered_log_monitor@@3PAUmonitor_data@@A, 0
  000da	74 0b		 je	 SHORT $LN8@debug_colo

; 891  : 			{
; 892  : 
; 893  : 				last_filtered_log_monitor->succ = md;

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_filtered_log_monitor@@3PAUmonitor_data@@A
  000e1	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  000e4	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN8@debug_colo:

; 894  : 			}
; 895  : 
; 896  : 			if ( first_filtered_log_monitor == NULL )

  000e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?first_filtered_log_monitor@@3PAUmonitor_data@@A, 0
  000ee	75 10		 jne	 SHORT $LN9@debug_colo

; 897  : 			{
; 898  : 
; 899  : 				top_filtered_log_monitor = md;

  000f0	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, eax

; 900  : 
; 901  : 				first_filtered_log_monitor = md;

  000f8	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000fb	a3 00 00 00 00	 mov	 DWORD PTR ?first_filtered_log_monitor@@3PAUmonitor_data@@A, eax
$LN9@debug_colo:

; 902  : 			}
; 903  : 
; 904  : 			last_filtered_log_monitor = md;

  00100	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00103	a3 00 00 00 00	 mov	 DWORD PTR ?last_filtered_log_monitor@@3PAUmonitor_data@@A, eax

; 905  : 
; 906  : 			number_of_filtered_log_monitor_lines ++;

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  0010d	83 c0 01	 add	 eax, 1
  00110	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA, eax

; 907  : 
; 908  : 			md->number = 0;

  00115	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00118	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 909  : 			md->offset = number_of_filtered_log_monitor_lines;

  0011f	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  00128	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 910  : 			md->string = strdup ( buffer );

  0012b	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  00136	83 c4 04	 add	 esp, 4
  00139	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  0013c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 911  : 			md->type = MT_NONE;

  0013f	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00142	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 912  : 			md->data = NULL;

  00149	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  0014c	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 913  : 
; 914  : 			SetScrollRange ( application_debug_filtered_log_window, SB_VERT, 0, number_of_filtered_log_monitor_lines, TRUE );

  00153	6a 01		 push	 1
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  0015a	50		 push	 eax
  0015b	6a 00		 push	 0
  0015d	6a 01		 push	 1
  0015f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  00165	51		 push	 ecx
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 915  : 
; 916  : 			if ( number_of_filtered_log_monitor_lines > number_of_filtered_log_lines )

  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  00171	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_filtered_log_lines@@3HA
  00177	7e 4f		 jle	 SHORT $LN10@debug_colo

; 917  : 			{
; 918  : 
; 919  : 				int
; 920  : 					count;
; 921  : 
; 922  : 				temp = md;

  00179	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  0017c	89 45 90	 mov	 DWORD PTR _temp$[ebp], eax

; 923  : 
; 924  : 				for ( count=0; count<number_of_filtered_log_lines; count++ )

  0017f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  00186	eb 09		 jmp	 SHORT $LN4@debug_colo
$LN2@debug_colo:
  00188	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  0018b	83 c0 01	 add	 eax, 1
  0018e	89 45 8c	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@debug_colo:
  00191	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  00194	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_filtered_log_lines@@3HA
  0019a	7d 0a		 jge	 SHORT $LN3@debug_colo

; 925  : 				{
; 926  : 
; 927  : 					temp = temp->pred;

  0019c	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  0019f	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a1	89 4d 90	 mov	 DWORD PTR _temp$[ebp], ecx

; 928  : 				}

  001a4	eb e2		 jmp	 SHORT $LN2@debug_colo
$LN3@debug_colo:

; 929  : 
; 930  : 				top_filtered_log_monitor = temp;

  001a6	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  001a9	a3 00 00 00 00	 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, eax

; 931  : 
; 932  : 				SetScrollPos ( application_debug_filtered_log_window, SB_VERT, top_filtered_log_monitor->offset, TRUE);

  001ae	6a 01		 push	 1
  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  001b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b8	51		 push	 ecx
  001b9	6a 01		 push	 1
  001bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  001c1	52		 push	 edx
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16
$LN10@debug_colo:

; 933  : 			}
; 934  : 		}
; 935  : 
; 936  : #if 0
; 937  : 		fp = fopen ( debug_filtered_log_file_name, "a" );
; 938  : 
; 939  : 		if ( fp )
; 940  : 		{
; 941  : 
; 942  : 			fwrite ( buffer, 1, strlen ( buffer ), fp );
; 943  : 
; 944  : 			fwrite ( "\n", 1, 1, fp );
; 945  : 
; 946  : 			fclose ( fp );
; 947  : 		}
; 948  : #endif
; 949  : 	}
; 950  : }

  001c8	5f		 pop	 edi
  001c9	5e		 pop	 esi
  001ca	5b		 pop	 ebx
  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	c3		 ret	 0
?debug_colour_filtered_log@@YAXW4DEBUG_COLOURS@@PBDZZ ENDP ; debug_colour_filtered_log
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_filtered_log@@YAXPBDZZ
_TEXT	SEGMENT
_count$1 = -116						; size = 4
_temp$ = -112						; size = 4
_md$ = -108						; size = 4
_args$ = -104						; size = 4
_time_info$ = -100					; size = 100
_msg$ = 8						; size = 4
?debug_filtered_log@@YAXPBDZZ PROC			; debug_filtered_log, COMDAT

; 729  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 730  : #if 0
; 731  : 	FILE
; 732  : 		*fp;
; 733  : #endif
; 734  : 	static char
; 735  : 		buffer[1000];
; 736  : 
; 737  : 	char
; 738  : 		time_info[100];
; 739  : 
; 740  : 	va_list
; 741  : 		args;
; 742  : 
; 743  : 	LPMONITORDATA
; 744  : 		md,
; 745  : 		temp;
; 746  : 
; 747  : 
; 748  : 	if ( debug_log_state )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00013	0f 84 b3 01 00
	00		 je	 $LN10@debug_filt

; 749  : 	{
; 750  : 
; 751  : 		va_start (args, msg);

  00019	8d 45 0c	 lea	 eax, DWORD PTR _msg$[ebp+4]
  0001c	89 45 98	 mov	 DWORD PTR _args$[ebp], eax

; 752  : 
; 753  : 		vsprintf (buffer, msg, args);

  0001f	8b 45 98	 mov	 eax, DWORD PTR _args$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _msg$[ebp]
  00026	51		 push	 ecx
  00027	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_filtered_log@@YAXPBDZZ@4PADA
  0002c	e8 00 00 00 00	 call	 _vsprintf
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 754  : 
; 755  : 		if ( !debug_timing_info_suppressed )

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_timing_info_suppressed@@3HA, 0
  0003b	75 3f		 jne	 SHORT $LN6@debug_filt

; 756  : 		{
; 757  : 
; 758  : 			sprintf (time_info, " @ %.2f", ( (float) system_ticks / 100.0 ) );

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_ticks@@3HC ; system_ticks
  00042	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00046	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0004a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4059000000000000
  00052	83 ec 08	 sub	 esp, 8
  00055	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_07HNIILHCJ@?5?$EA?5?$CF?42f@
  0005f	8d 4d 9c	 lea	 ecx, DWORD PTR _time_info$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _sprintf
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 759  : 
; 760  : 			strcat (buffer, time_info);

  0006b	8d 45 9c	 lea	 eax, DWORD PTR _time_info$[ebp]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_filtered_log@@YAXPBDZZ@4PADA
  00074	e8 00 00 00 00	 call	 _strcat
  00079	83 c4 08	 add	 esp, 8
$LN6@debug_filt:

; 761  : 		}
; 762  : 
; 763  : 		va_end (args);

  0007c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 764  : 
; 765  : 		if ( debug_monitor )

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0008a	0f 84 3c 01 00
	00		 je	 $LN10@debug_filt

; 766  : 		{
; 767  : 
; 768  : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00090	6a 2c		 push	 44			; 0000002cH
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 94	 mov	 DWORD PTR _md$[ebp], eax

; 769  : 
; 770  : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  0009e	6a 2c		 push	 44			; 0000002cH
  000a0	6a 00		 push	 0
  000a2	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _memset
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 771  : 
; 772  : 			md->succ = NULL;

  000ae	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000b1	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 773  : 
; 774  : 			md->pred = last_filtered_log_monitor;

  000b8	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_filtered_log_monitor@@3PAUmonitor_data@@A
  000c1	89 08		 mov	 DWORD PTR [eax], ecx

; 775  : 
; 776  : 			md->colour = debug_colour_table[DEBUG_COLOUR_BLACK];

  000c3	b8 04 00 00 00	 mov	 eax, 4
  000c8	6b c8 00	 imul	 ecx, eax, 0
  000cb	8b 55 94	 mov	 edx, DWORD PTR _md$[ebp]
  000ce	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR ?debug_colour_table@@3PAKA[ecx]
  000d4	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 777  : 
; 778  : 			if ( last_filtered_log_monitor )

  000d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_filtered_log_monitor@@3PAUmonitor_data@@A, 0
  000de	74 0b		 je	 SHORT $LN8@debug_filt

; 779  : 			{
; 780  : 
; 781  : 				last_filtered_log_monitor->succ = md;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_filtered_log_monitor@@3PAUmonitor_data@@A
  000e5	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  000e8	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN8@debug_filt:

; 782  : 			}
; 783  : 
; 784  : 			if ( first_filtered_log_monitor == NULL )

  000eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?first_filtered_log_monitor@@3PAUmonitor_data@@A, 0
  000f2	75 10		 jne	 SHORT $LN9@debug_filt

; 785  : 			{
; 786  : 
; 787  : 				top_filtered_log_monitor = md;

  000f4	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000f7	a3 00 00 00 00	 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, eax

; 788  : 
; 789  : 				first_filtered_log_monitor = md;

  000fc	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?first_filtered_log_monitor@@3PAUmonitor_data@@A, eax
$LN9@debug_filt:

; 790  : 			}
; 791  : 
; 792  : 			last_filtered_log_monitor = md;

  00104	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00107	a3 00 00 00 00	 mov	 DWORD PTR ?last_filtered_log_monitor@@3PAUmonitor_data@@A, eax

; 793  : 
; 794  : 			number_of_filtered_log_monitor_lines ++;

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  00111	83 c0 01	 add	 eax, 1
  00114	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA, eax

; 795  : 
; 796  : 			md->number = 0;

  00119	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  0011c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 797  : 			md->offset = number_of_filtered_log_monitor_lines;

  00123	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00126	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  0012c	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 798  : 			md->string = strdup ( buffer );

  0012f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_filtered_log@@YAXPBDZZ@4PADA
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  0013a	83 c4 04	 add	 esp, 4
  0013d	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  00140	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 799  : 			md->type = MT_NONE;

  00143	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00146	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 800  : 			md->data = NULL;

  0014d	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00150	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 801  : 
; 802  : 			SetScrollRange ( application_debug_filtered_log_window, SB_VERT, 0, number_of_filtered_log_monitor_lines, TRUE );

  00157	6a 01		 push	 1
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  0015e	50		 push	 eax
  0015f	6a 00		 push	 0
  00161	6a 01		 push	 1
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  00169	51		 push	 ecx
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 803  : 
; 804  : 			if ( number_of_filtered_log_monitor_lines > number_of_filtered_log_lines )

  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_filtered_log_monitor_lines@@3HA
  00175	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_filtered_log_lines@@3HA
  0017b	7e 4f		 jle	 SHORT $LN10@debug_filt

; 805  : 			{
; 806  : 
; 807  : 				int
; 808  : 					count;
; 809  : 
; 810  : 				temp = md;

  0017d	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00180	89 45 90	 mov	 DWORD PTR _temp$[ebp], eax

; 811  : 
; 812  : 				for ( count=0; count<number_of_filtered_log_lines; count++ )

  00183	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  0018a	eb 09		 jmp	 SHORT $LN4@debug_filt
$LN2@debug_filt:
  0018c	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  0018f	83 c0 01	 add	 eax, 1
  00192	89 45 8c	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@debug_filt:
  00195	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  00198	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_filtered_log_lines@@3HA
  0019e	7d 0a		 jge	 SHORT $LN3@debug_filt

; 813  : 				{
; 814  : 
; 815  : 					temp = temp->pred;

  001a0	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  001a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a5	89 4d 90	 mov	 DWORD PTR _temp$[ebp], ecx

; 816  : 				}

  001a8	eb e2		 jmp	 SHORT $LN2@debug_filt
$LN3@debug_filt:

; 817  : 
; 818  : 				top_filtered_log_monitor = temp;

  001aa	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  001ad	a3 00 00 00 00	 mov	 DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A, eax

; 819  : 
; 820  : 				SetScrollPos ( application_debug_filtered_log_window, SB_VERT, top_filtered_log_monitor->offset, TRUE);

  001b2	6a 01		 push	 1
  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_filtered_log_monitor@@3PAUmonitor_data@@A
  001b9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001bc	51		 push	 ecx
  001bd	6a 01		 push	 1
  001bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_debug_filtered_log_window@@3PAUHWND__@@A
  001c5	52		 push	 edx
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16
$LN10@debug_filt:

; 821  : 			}
; 822  : 		}
; 823  : 
; 824  : #if 0
; 825  : 		fp = fopen ( debug_filtered_log_file_name, "a" );
; 826  : 
; 827  : 		if ( fp )
; 828  : 		{
; 829  : 
; 830  : 			fwrite ( buffer, 1, strlen ( buffer ), fp );
; 831  : 
; 832  : 			fwrite ( "\n", 1, 1, fp );
; 833  : 
; 834  : 			fclose ( fp );
; 835  : 		}
; 836  : #endif
; 837  : 	}
; 838  : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
?debug_filtered_log@@YAXPBDZZ ENDP			; debug_filtered_log
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ
_TEXT	SEGMENT
_count$1 = -116						; size = 4
_temp$ = -112						; size = 4
_md$ = -108						; size = 4
_args$ = -104						; size = 4
_time_info$ = -100					; size = 100
_colour$ = 8						; size = 4
_msg$ = 12						; size = 4
?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ PROC	; debug_colour_log, COMDAT

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 618  : #if 0
; 619  : 	FILE
; 620  : 		*fp;
; 621  : #endif
; 622  : 	static char
; 623  : 		buffer[1000];
; 624  : 
; 625  : 	char
; 626  : 		time_info[100];
; 627  : 
; 628  : 	va_list
; 629  : 		args;
; 630  : 
; 631  : 	LPMONITORDATA
; 632  : 		md,
; 633  : 		temp;
; 634  : 
; 635  : 
; 636  : 	if ( debug_log_state )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00013	0f 84 af 01 00
	00		 je	 $LN10@debug_colo

; 637  : 	{
; 638  : 
; 639  : 		va_start (args, msg);

  00019	8d 45 10	 lea	 eax, DWORD PTR _msg$[ebp+4]
  0001c	89 45 98	 mov	 DWORD PTR _args$[ebp], eax

; 640  : 
; 641  : 		vsprintf (buffer, msg, args);

  0001f	8b 45 98	 mov	 eax, DWORD PTR _args$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _msg$[ebp]
  00026	51		 push	 ecx
  00027	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA
  0002c	e8 00 00 00 00	 call	 _vsprintf
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 642  : 
; 643  : 		if ( !debug_timing_info_suppressed )

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_timing_info_suppressed@@3HA, 0
  0003b	75 3f		 jne	 SHORT $LN6@debug_colo

; 644  : 		{
; 645  : 
; 646  : 			sprintf (time_info, " @ %.2f", ( (float) system_ticks / 100.0 ) );

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_ticks@@3HC ; system_ticks
  00042	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00046	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0004a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4059000000000000
  00052	83 ec 08	 sub	 esp, 8
  00055	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_07HNIILHCJ@?5?$EA?5?$CF?42f@
  0005f	8d 4d 9c	 lea	 ecx, DWORD PTR _time_info$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _sprintf
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 647  : 
; 648  : 			strcat (buffer, time_info);

  0006b	8d 45 9c	 lea	 eax, DWORD PTR _time_info$[ebp]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA
  00074	e8 00 00 00 00	 call	 _strcat
  00079	83 c4 08	 add	 esp, 8
$LN6@debug_colo:

; 649  : 		}
; 650  : 
; 651  : 		va_end (args);

  0007c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 652  : 
; 653  : 		if ( debug_monitor )

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0008a	0f 84 38 01 00
	00		 je	 $LN10@debug_colo

; 654  : 		{
; 655  : 
; 656  : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00090	6a 2c		 push	 44			; 0000002cH
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 94	 mov	 DWORD PTR _md$[ebp], eax

; 657  : 
; 658  : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  0009e	6a 2c		 push	 44			; 0000002cH
  000a0	6a 00		 push	 0
  000a2	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _memset
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 659  : 
; 660  : 			md->succ = NULL;

  000ae	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000b1	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 661  : 
; 662  : 			md->pred = last_log_monitor;

  000b8	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A
  000c1	89 08		 mov	 DWORD PTR [eax], ecx

; 663  : 
; 664  : 			md->colour = debug_colour_table[colour];

  000c3	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _colour$[ebp]
  000c9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?debug_colour_table@@3PAKA[ecx*4]
  000d0	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 665  : 
; 666  : 			if ( last_log_monitor )

  000d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A, 0
  000da	74 0b		 je	 SHORT $LN8@debug_colo

; 667  : 			{
; 668  : 
; 669  : 				last_log_monitor->succ = md;

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A
  000e1	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  000e4	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN8@debug_colo:

; 670  : 			}
; 671  : 
; 672  : 			if ( first_log_monitor == NULL )

  000e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?first_log_monitor@@3PAUmonitor_data@@A, 0
  000ee	75 10		 jne	 SHORT $LN9@debug_colo

; 673  : 			{
; 674  : 
; 675  : 				top_log_monitor = md;

  000f0	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, eax

; 676  : 
; 677  : 				first_log_monitor = md;

  000f8	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000fb	a3 00 00 00 00	 mov	 DWORD PTR ?first_log_monitor@@3PAUmonitor_data@@A, eax
$LN9@debug_colo:

; 678  : 			}
; 679  : 
; 680  : 			last_log_monitor = md;

  00100	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00103	a3 00 00 00 00	 mov	 DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A, eax

; 681  : 
; 682  : 			number_of_log_monitor_lines ++;

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_monitor_lines@@3HA
  0010d	83 c0 01	 add	 eax, 1
  00110	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_log_monitor_lines@@3HA, eax

; 683  : 
; 684  : 			md->number = 0;

  00115	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00118	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 685  : 			md->offset = number_of_log_monitor_lines;

  0011f	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_log_monitor_lines@@3HA
  00128	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 686  : 			md->string = strdup ( buffer );

  0012b	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ@4PADA
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  00136	83 c4 04	 add	 esp, 4
  00139	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  0013c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 687  : 			md->type = MT_NONE;

  0013f	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00142	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 688  : 			md->data = NULL;

  00149	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  0014c	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 689  : 
; 690  : 			SetScrollRange ( application_debug_log_window, SB_VERT, 0, number_of_log_monitor_lines, TRUE );

  00153	6a 01		 push	 1
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_monitor_lines@@3HA
  0015a	50		 push	 eax
  0015b	6a 00		 push	 0
  0015d	6a 01		 push	 1
  0015f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  00165	51		 push	 ecx
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 691  : 
; 692  : 			if ( number_of_log_monitor_lines > number_of_log_lines )

  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_monitor_lines@@3HA
  00171	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_log_lines@@3HA
  00177	7e 4f		 jle	 SHORT $LN10@debug_colo

; 693  : 			{
; 694  : 
; 695  : 				int
; 696  : 					count;
; 697  : 
; 698  : 				temp = md;

  00179	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  0017c	89 45 90	 mov	 DWORD PTR _temp$[ebp], eax

; 699  : 
; 700  : 				for ( count=0; count<number_of_log_lines; count++ )

  0017f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  00186	eb 09		 jmp	 SHORT $LN4@debug_colo
$LN2@debug_colo:
  00188	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  0018b	83 c0 01	 add	 eax, 1
  0018e	89 45 8c	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@debug_colo:
  00191	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  00194	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_log_lines@@3HA
  0019a	7d 0a		 jge	 SHORT $LN3@debug_colo

; 701  : 				{
; 702  : 
; 703  : 					temp = temp->pred;

  0019c	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  0019f	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a1	89 4d 90	 mov	 DWORD PTR _temp$[ebp], ecx

; 704  : 				}

  001a4	eb e2		 jmp	 SHORT $LN2@debug_colo
$LN3@debug_colo:

; 705  : 
; 706  : 				top_log_monitor = temp;

  001a6	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  001a9	a3 00 00 00 00	 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, eax

; 707  : 
; 708  : 				SetScrollPos ( application_debug_log_window, SB_VERT, top_log_monitor->offset, TRUE);

  001ae	6a 01		 push	 1
  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  001b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b8	51		 push	 ecx
  001b9	6a 01		 push	 1
  001bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  001c1	52		 push	 edx
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16
$LN10@debug_colo:

; 709  : 			}
; 710  : 		}
; 711  : 
; 712  : #if 0
; 713  : 		fp = fopen ( debug_log_file_name, "a" );
; 714  : 
; 715  : 		if ( fp )
; 716  : 		{
; 717  : 
; 718  : 			fwrite ( buffer, 1, strlen ( buffer ), fp );
; 719  : 
; 720  : 			fwrite ( "\n", 1, 1, fp );
; 721  : 
; 722  : 			fclose ( fp );
; 723  : 		}
; 724  : #endif
; 725  : 	}
; 726  : }

  001c8	5f		 pop	 edi
  001c9	5e		 pop	 esi
  001ca	5b		 pop	 ebx
  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	c3		 ret	 0
?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ENDP	; debug_colour_log
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_log@@YAXPBDZZ
_TEXT	SEGMENT
_count$1 = -116						; size = 4
_temp$ = -112						; size = 4
_md$ = -108						; size = 4
_args$ = -104						; size = 4
_time_info$ = -100					; size = 100
_msg$ = 8						; size = 4
?debug_log@@YAXPBDZZ PROC				; debug_log, COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 504  : 	static char
; 505  : 		buffer[4096];
; 506  : 
; 507  : 	char
; 508  : 		time_info[100];
; 509  : 
; 510  : 	va_list
; 511  : 		args;
; 512  : 
; 513  : 	LPMONITORDATA
; 514  : 		md,
; 515  : 		temp;
; 516  : 
; 517  : 
; 518  : 	if ( debug_log_state )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  00013	0f 84 b3 01 00
	00		 je	 $LN10@debug_log

; 519  : 	{
; 520  : 
; 521  : 		va_start (args, msg);

  00019	8d 45 0c	 lea	 eax, DWORD PTR _msg$[ebp+4]
  0001c	89 45 98	 mov	 DWORD PTR _args$[ebp], eax

; 522  : 
; 523  : 		vsprintf (buffer, msg, args);

  0001f	8b 45 98	 mov	 eax, DWORD PTR _args$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _msg$[ebp]
  00026	51		 push	 ecx
  00027	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_log@@YAXPBDZZ@4PADA
  0002c	e8 00 00 00 00	 call	 _vsprintf
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 524  : 
; 525  : 		if ( !debug_timing_info_suppressed )

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_timing_info_suppressed@@3HA, 0
  0003b	75 3f		 jne	 SHORT $LN6@debug_log

; 526  : 		{
; 527  : 
; 528  : 			sprintf (time_info, " @ %.2f", ( (float) system_ticks / 100.0 ) );

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_ticks@@3HC ; system_ticks
  00042	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00046	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0004a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4059000000000000
  00052	83 ec 08	 sub	 esp, 8
  00055	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_07HNIILHCJ@?5?$EA?5?$CF?42f@
  0005f	8d 4d 9c	 lea	 ecx, DWORD PTR _time_info$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _sprintf
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 529  : 
; 530  : 			strcat (buffer, time_info);

  0006b	8d 45 9c	 lea	 eax, DWORD PTR _time_info$[ebp]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_log@@YAXPBDZZ@4PADA
  00074	e8 00 00 00 00	 call	 _strcat
  00079	83 c4 08	 add	 esp, 8
$LN6@debug_log:

; 531  : 		}
; 532  : 
; 533  : 		va_end (args);

  0007c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 534  : 
; 535  : //		OutputDebugString ( buffer );
; 536  : 
; 537  : 		if ( debug_monitor )

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_monitor@@3HA, 0
  0008a	0f 84 3c 01 00
	00		 je	 $LN10@debug_log

; 538  : 		{
; 539  : 
; 540  : 			md = ( LPMONITORDATA ) malloc ( sizeof ( MONITORDATA ) );

  00090	6a 2c		 push	 44			; 0000002cH
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 94	 mov	 DWORD PTR _md$[ebp], eax

; 541  : 
; 542  : 			memset ( md, 0, sizeof ( MONITORDATA ) );

  0009e	6a 2c		 push	 44			; 0000002cH
  000a0	6a 00		 push	 0
  000a2	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _memset
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 543  : 
; 544  : 			md->succ = NULL;

  000ae	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000b1	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 545  : 
; 546  : 			md->pred = last_log_monitor;

  000b8	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A
  000c1	89 08		 mov	 DWORD PTR [eax], ecx

; 547  : 
; 548  : 			md->colour = debug_colour_table[DEBUG_COLOUR_BLACK];

  000c3	b8 04 00 00 00	 mov	 eax, 4
  000c8	6b c8 00	 imul	 ecx, eax, 0
  000cb	8b 55 94	 mov	 edx, DWORD PTR _md$[ebp]
  000ce	8b 81 00 00 00
	00		 mov	 eax, DWORD PTR ?debug_colour_table@@3PAKA[ecx]
  000d4	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 549  : 
; 550  : 			if ( last_log_monitor )

  000d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A, 0
  000de	74 0b		 je	 SHORT $LN8@debug_log

; 551  : 			{
; 552  : 
; 553  : 				last_log_monitor->succ = md;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A
  000e5	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  000e8	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN8@debug_log:

; 554  : 			}
; 555  : 
; 556  : 			if ( first_log_monitor == NULL )

  000eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?first_log_monitor@@3PAUmonitor_data@@A, 0
  000f2	75 10		 jne	 SHORT $LN9@debug_log

; 557  : 			{
; 558  : 
; 559  : 				top_log_monitor = md;

  000f4	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000f7	a3 00 00 00 00	 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, eax

; 560  : 
; 561  : 				first_log_monitor = md;

  000fc	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?first_log_monitor@@3PAUmonitor_data@@A, eax
$LN9@debug_log:

; 562  : 			}
; 563  : 
; 564  : 			last_log_monitor = md;

  00104	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00107	a3 00 00 00 00	 mov	 DWORD PTR ?last_log_monitor@@3PAUmonitor_data@@A, eax

; 565  : 
; 566  : 			number_of_log_monitor_lines ++;

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_monitor_lines@@3HA
  00111	83 c0 01	 add	 eax, 1
  00114	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_log_monitor_lines@@3HA, eax

; 567  : 
; 568  : 			md->number = 0;

  00119	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  0011c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 569  : 			md->offset = number_of_log_monitor_lines;

  00123	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00126	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_log_monitor_lines@@3HA
  0012c	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 570  : 			md->string = strdup ( buffer );

  0012f	68 00 00 00 00	 push	 OFFSET ?buffer@?1??debug_log@@YAXPBDZZ@4PADA
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  0013a	83 c4 04	 add	 esp, 4
  0013d	8b 4d 94	 mov	 ecx, DWORD PTR _md$[ebp]
  00140	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 571  : 			md->type = MT_NONE;

  00143	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00146	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 572  : 			md->data = NULL;

  0014d	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00150	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 573  : 
; 574  : 			SetScrollRange ( application_debug_log_window, SB_VERT, 0, number_of_log_monitor_lines, TRUE );

  00157	6a 01		 push	 1
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_monitor_lines@@3HA
  0015e	50		 push	 eax
  0015f	6a 00		 push	 0
  00161	6a 01		 push	 1
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  00169	51		 push	 ecx
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20

; 575  : 
; 576  : 			if ( number_of_log_monitor_lines > number_of_log_lines )

  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_log_monitor_lines@@3HA
  00175	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_log_lines@@3HA
  0017b	7e 4f		 jle	 SHORT $LN10@debug_log

; 577  : 			{
; 578  : 
; 579  : 				int
; 580  : 					count;
; 581  : 
; 582  : 				temp = md;

  0017d	8b 45 94	 mov	 eax, DWORD PTR _md$[ebp]
  00180	89 45 90	 mov	 DWORD PTR _temp$[ebp], eax

; 583  : 
; 584  : 				for ( count=0; count<number_of_log_lines; count++ )

  00183	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  0018a	eb 09		 jmp	 SHORT $LN4@debug_log
$LN2@debug_log:
  0018c	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  0018f	83 c0 01	 add	 eax, 1
  00192	89 45 8c	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@debug_log:
  00195	8b 45 8c	 mov	 eax, DWORD PTR _count$1[ebp]
  00198	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_log_lines@@3HA
  0019e	7d 0a		 jge	 SHORT $LN3@debug_log

; 585  : 				{
; 586  : 
; 587  : 					temp = temp->pred;

  001a0	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  001a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a5	89 4d 90	 mov	 DWORD PTR _temp$[ebp], ecx

; 588  : 				}

  001a8	eb e2		 jmp	 SHORT $LN2@debug_log
$LN3@debug_log:

; 589  : 
; 590  : 				top_log_monitor = temp;

  001aa	8b 45 90	 mov	 eax, DWORD PTR _temp$[ebp]
  001ad	a3 00 00 00 00	 mov	 DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A, eax

; 591  : 
; 592  : 				SetScrollPos ( application_debug_log_window, SB_VERT, top_log_monitor->offset, TRUE);

  001b2	6a 01		 push	 1
  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?top_log_monitor@@3PAUmonitor_data@@A
  001b9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001bc	51		 push	 ecx
  001bd	6a 01		 push	 1
  001bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?application_debug_log_window@@3PAUHWND__@@A
  001c5	52		 push	 edx
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16
$LN10@debug_log:

; 593  : 			}
; 594  : 		}
; 595  : 
; 596  : #if 0
; 597  : 		{
; 598  : 			FILE
; 599  : 				*fp;
; 600  : 
; 601  : 			fp = fopen ( debug_log_file_name, "a" );
; 602  : 
; 603  : 			if ( fp )
; 604  : 			{
; 605  : 				fwrite ( buffer, 1, strlen ( buffer ), fp );
; 606  : 
; 607  : 				fwrite ( "\n", 1, 1, fp );
; 608  : 
; 609  : 				fclose ( fp );
; 610  : 			}
; 611  : 		}
; 612  : #endif
; 613  : 	}
; 614  : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
?debug_log@@YAXPBDZZ ENDP				; debug_log
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_warning@@YAXPBDZZ
_TEXT	SEGMENT
_count$1 = -4108					; size = 4
_buffer$ = -4104					; size = 4096
_fp$ = -8						; size = 4
_argument_list$ = -4					; size = 4
_string$ = 8						; size = 4
?debug_warning@@YAXPBDZZ PROC				; debug_warning, COMDAT

; 1043 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 12 00 00	 mov	 eax, 4624		; 00001210H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 1044 : 
; 1045 : 	va_list
; 1046 : 		argument_list;
; 1047 : 
; 1048 : 	FILE
; 1049 : 		*fp;
; 1050 : 
; 1051 : 	char
; 1052 : 		buffer[4096];
; 1053 : 
; 1054 : 	//
; 1055 : 	// Work out what to output
; 1056 : 	//
; 1057 : 
; 1058 : 	va_start(argument_list, string);

  00010	8d 45 0c	 lea	 eax, DWORD PTR _string$[ebp+4]
  00013	89 45 fc	 mov	 DWORD PTR _argument_list$[ebp], eax

; 1059 : 
; 1060 : 	vsprintf(buffer, string, argument_list);

  00016	8b 45 fc	 mov	 eax, DWORD PTR _argument_list$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _string$[ebp]
  0001d	51		 push	 ecx
  0001e	8d 95 f8 ef ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 _vsprintf
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1061 : 
; 1062 : 	va_end(argument_list);

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _argument_list$[ebp], 0

; 1063 : 
; 1064 : 	if (debug_log_state)

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  0003b	74 61		 je	 SHORT $LN5@debug_warn

; 1065 : 	{
; 1066 : 
; 1067 : 		//
; 1068 : 		// Open file for append.
; 1069 : 		//
; 1070 : 
; 1071 : 		fp = fopen(debug_log_file_name, "a");

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00042	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0004d	83 c4 08	 add	 esp, 8
  00050	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 1072 : 
; 1073 : 		if (fp)

  00053	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00057	74 45		 je	 SHORT $LN5@debug_warn

; 1074 : 		{
; 1075 : 
; 1076 : 			//
; 1077 : 			// Output the buffer to the file with ***FATAL*** so that it is easy to find.
; 1078 : 			//
; 1079 : 
; 1080 : 			fputs("************************************ FATAL ***********************************\n", fp);

  00059	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@EKGDBMPL@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00068	83 c4 08	 add	 esp, 8

; 1081 : 
; 1082 : 			fputs(buffer, fp);

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  0006e	50		 push	 eax
  0006f	8d 8d f8 ef ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00075	51		 push	 ecx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  0007c	83 c4 08	 add	 esp, 8

; 1083 : 
; 1084 : 			fputs("\n", fp);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  0008e	83 c4 08	 add	 esp, 8

; 1085 : 
; 1086 : 			//
; 1087 : 			// Close the file, just incase the system is unstable, so that the file is intact
; 1088 : 			//
; 1089 : 
; 1090 : 			fclose(fp);

  00091	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0009b	83 c4 04	 add	 esp, 4
$LN5@debug_warn:

; 1091 : 		}
; 1092 : 	}
; 1093 : 
; 1094 : 	//
; 1095 : 	// Make sound to annoy everyone
; 1096 : 	//
; 1097 : 
; 1098 : #ifdef DEBUG
; 1099 : 
; 1100 : 	if (debug_fatal_warning_tone)

  0009e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_fatal_warning_tone@@3HA, 0 ; debug_fatal_warning_tone
  000a5	74 38		 je	 SHORT $LN1@debug_warn

; 1101 : 	{
; 1102 : 
; 1103 : 		int
; 1104 : 			count;
; 1105 : 
; 1106 : 		for (count = 1000; count > 500; count -= 50)

  000a7	c7 85 f4 ef ff
	ff e8 03 00 00	 mov	 DWORD PTR _count$1[ebp], 1000 ; 000003e8H
  000b1	eb 0f		 jmp	 SHORT $LN4@debug_warn
$LN2@debug_warn:
  000b3	8b 85 f4 ef ff
	ff		 mov	 eax, DWORD PTR _count$1[ebp]
  000b9	83 e8 32	 sub	 eax, 50			; 00000032H
  000bc	89 85 f4 ef ff
	ff		 mov	 DWORD PTR _count$1[ebp], eax
$LN4@debug_warn:
  000c2	81 bd f4 ef ff
	ff f4 01 00 00	 cmp	 DWORD PTR _count$1[ebp], 500 ; 000001f4H
  000cc	7e 11		 jle	 SHORT $LN1@debug_warn

; 1107 : 		{
; 1108 : 
; 1109 : 			Beep(count, 100);

  000ce	6a 64		 push	 100			; 00000064H
  000d0	8b 85 f4 ef ff
	ff		 mov	 eax, DWORD PTR _count$1[ebp]
  000d6	50		 push	 eax
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Beep@8

; 1110 : 		}

  000dd	eb d4		 jmp	 SHORT $LN2@debug_warn
$LN1@debug_warn:

; 1111 : 	}
; 1112 : 
; 1113 : #endif
; 1114 : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
?debug_warning@@YAXPBDZZ ENDP				; debug_warning
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_fatal@@YAXPBDZZ
_TEXT	SEGMENT
_count$1 = -4108					; size = 4
_buffer$ = -4104					; size = 4096
_fp$ = -8						; size = 4
_argument_list$ = -4					; size = 4
_string$ = 8						; size = 4
?debug_fatal@@YAXPBDZZ PROC				; debug_fatal, COMDAT

; 959  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 12 00 00	 mov	 eax, 4624		; 00001210H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 960  : 
; 961  : 	va_list
; 962  : 		argument_list;
; 963  : 
; 964  : 	FILE
; 965  : 		*fp;
; 966  : 
; 967  : 	char
; 968  : 		buffer[4096];
; 969  : 
; 970  : 	//
; 971  : 	// Work out what to output
; 972  : 	//
; 973  : 
; 974  : 	va_start ( argument_list, string );

  00010	8d 45 0c	 lea	 eax, DWORD PTR _string$[ebp+4]
  00013	89 45 fc	 mov	 DWORD PTR _argument_list$[ebp], eax

; 975  : 
; 976  : 	vsprintf ( buffer, string, argument_list );

  00016	8b 45 fc	 mov	 eax, DWORD PTR _argument_list$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _string$[ebp]
  0001d	51		 push	 ecx
  0001e	8d 95 f8 ef ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 _vsprintf
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 977  : 
; 978  : 	va_end ( argument_list );

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _argument_list$[ebp], 0

; 979  : 
; 980  : 	if ( debug_log_state )

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_log_state@@3HA, 0
  0003b	74 61		 je	 SHORT $LN5@debug_fata

; 981  : 	{
; 982  : 
; 983  : 		//
; 984  : 		// Open file for append.
; 985  : 		//
; 986  : 
; 987  : 		fp = fopen ( debug_log_file_name, "a" );

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_01MCMALHOG@a@
  00042	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0004d	83 c4 08	 add	 esp, 8
  00050	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 988  : 
; 989  : 		if ( fp )

  00053	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00057	74 45		 je	 SHORT $LN5@debug_fata

; 990  : 		{
; 991  : 
; 992  : 			//
; 993  : 			// Output the buffer to the file with ***FATAL*** so that it is easy to find.
; 994  : 			//
; 995  : 
; 996  : 			fputs ( "************************************ FATAL ***********************************\n", fp );

  00059	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@EKGDBMPL@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  00068	83 c4 08	 add	 esp, 8

; 997  : 
; 998  : 			fputs ( buffer, fp );

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  0006e	50		 push	 eax
  0006f	8d 8d f8 ef ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00075	51		 push	 ecx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  0007c	83 c4 08	 add	 esp, 8

; 999  : 
; 1000 : 			fputs ( "\n", fp );

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputs
  0008e	83 c4 08	 add	 esp, 8

; 1001 : 
; 1002 : 			//
; 1003 : 			// Close the file, just incase the system is unstable, so that the file is intact
; 1004 : 			//
; 1005 : 
; 1006 : 			fclose ( fp );

  00091	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0009b	83 c4 04	 add	 esp, 4
$LN5@debug_fata:

; 1007 : 		}
; 1008 : 	}
; 1009 : 
; 1010 : 	//
; 1011 : 	// Make sound to annoy everyone
; 1012 : 	//
; 1013 : 
; 1014 : 	#ifdef DEBUG
; 1015 : 
; 1016 : 	if (debug_fatal_warning_tone)

  0009e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?debug_fatal_warning_tone@@3HA, 0 ; debug_fatal_warning_tone
  000a5	74 38		 je	 SHORT $LN7@debug_fata

; 1017 : 	{
; 1018 : 
; 1019 : 		int
; 1020 : 			count;
; 1021 : 
; 1022 : 		for ( count = 1000; count > 500; count -= 50 )

  000a7	c7 85 f4 ef ff
	ff e8 03 00 00	 mov	 DWORD PTR _count$1[ebp], 1000 ; 000003e8H
  000b1	eb 0f		 jmp	 SHORT $LN4@debug_fata
$LN2@debug_fata:
  000b3	8b 85 f4 ef ff
	ff		 mov	 eax, DWORD PTR _count$1[ebp]
  000b9	83 e8 32	 sub	 eax, 50			; 00000032H
  000bc	89 85 f4 ef ff
	ff		 mov	 DWORD PTR _count$1[ebp], eax
$LN4@debug_fata:
  000c2	81 bd f4 ef ff
	ff f4 01 00 00	 cmp	 DWORD PTR _count$1[ebp], 500 ; 000001f4H
  000cc	7e 11		 jle	 SHORT $LN7@debug_fata

; 1023 : 		{
; 1024 : 
; 1025 : 			Beep ( count, 100 );

  000ce	6a 64		 push	 100			; 00000064H
  000d0	8b 85 f4 ef ff
	ff		 mov	 eax, DWORD PTR _count$1[ebp]
  000d6	50		 push	 eax
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Beep@8

; 1026 : 		}

  000dd	eb d4		 jmp	 SHORT $LN2@debug_fata
$LN7@debug_fata:

; 1027 : 	}
; 1028 : 
; 1029 : 	#endif
; 1030 : 
; 1031 : 	//
; 1032 : 	// Exit the program
; 1033 : 	//
; 1034 : 
; 1035 : 	application_debug_fatal = TRUE;

  000df	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?application_debug_fatal@@3HA, 1 ; application_debug_fatal

; 1036 : 
; 1037 : 	strcpy ( application_debug_fatal_string, buffer );

  000e9	8d 85 f8 ef ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ef	50		 push	 eax
  000f0	68 00 00 00 00	 push	 OFFSET ?application_debug_fatal_string@@3PADA ; application_debug_fatal_string
  000f5	e8 00 00 00 00	 call	 _strcpy
  000fa	83 c4 08	 add	 esp, 8

; 1038 : 
; 1039 : 	end_application ();

  000fd	e8 00 00 00 00	 call	 ?end_application@@YGXXZ	; end_application

; 1040 : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
?debug_fatal@@YAXPBDZZ ENDP				; debug_fatal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?initialise_debug_system@@YGXH@Z
_TEXT	SEGMENT
_logging$ = 8						; size = 4
?initialise_debug_system@@YGXH@Z PROC			; initialise_debug_system, COMDAT

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 265  : 
; 266  : 	strcpy (debug_log_file_name, "DEBUG.LOG");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_09HMOECKJA@DEBUG?4LOG@
  0000e	68 00 00 00 00	 push	 OFFSET ?debug_log_file_name@@3PADA
  00013	e8 00 00 00 00	 call	 _strcpy
  00018	83 c4 08	 add	 esp, 8

; 267  : 
; 268  : 	strcpy (debug_filtered_log_file_name, "DEBUG.FIL");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_09PECAGPIN@DEBUG?4FIL@
  00020	68 00 00 00 00	 push	 OFFSET ?debug_filtered_log_file_name@@3PADA
  00025	e8 00 00 00 00	 call	 _strcpy
  0002a	83 c4 08	 add	 esp, 8

; 269  : 
; 270  : 	unlink ( debug_filtered_log_file_name );

  0002d	68 00 00 00 00	 push	 OFFSET ?debug_filtered_log_file_name@@3PADA
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlink
  00038	83 c4 04	 add	 esp, 4

; 271  : 
; 272  : 	debug_initialise_message_id = get_unique_message_id ();

  0003b	e8 00 00 00 00	 call	 ?get_unique_message_id@@YGHXZ ; get_unique_message_id
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?debug_initialise_message_id@@3HA, eax

; 273  : 
; 274  : 	register_user_message_function ( debug_initialise_message_id, initialise_internal_debug_system );

  00045	68 00 00 00 00	 push	 OFFSET ?initialise_internal_debug_system@@YGJPAX@Z ; initialise_internal_debug_system
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?debug_initialise_message_id@@3HA
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?register_user_message_function@@YGHHP6GJPAX@Z@Z ; register_user_message_function

; 275  : 
; 276  : 	register_exit_function ( deinitialise_debug_system );

  00055	68 00 00 00 00	 push	 OFFSET ?deinitialise_debug_system@@YGXXZ ; deinitialise_debug_system
  0005a	e8 00 00 00 00	 call	 ?register_exit_function@@YGXP6GXXZ@Z ; register_exit_function

; 277  : 
; 278  : 	debug_log_state = logging;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _logging$[ebp]
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?debug_log_state@@3HA, eax

; 279  : 
; 280  : 	debug_colour_table[DEBUG_COLOUR_BLACK] =			RGB ( 0, 0, 0 );

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 00	 imul	 ecx, eax, 0
  0006f	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 0

; 281  : 	debug_colour_table[DEBUG_COLOUR_BLUE] =			RGB ( 0, 0, 255 );

  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	c1 e0 00	 shl	 eax, 0
  00081	c7 80 00 00 00
	00 00 00 ff 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[eax], 16711680 ; 00ff0000H

; 282  : 	debug_colour_table[DEBUG_COLOUR_GREEN] =			RGB ( 0, 255, 0 );

  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	d1 e0		 shl	 eax, 1
  00092	c7 80 00 00 00
	00 00 ff 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[eax], 65280 ; 0000ff00H

; 283  : 	debug_colour_table[DEBUG_COLOUR_CYAN] =			RGB ( 0, 255, 255 );

  0009c	b8 04 00 00 00	 mov	 eax, 4
  000a1	6b c8 03	 imul	 ecx, eax, 3
  000a4	c7 81 00 00 00
	00 00 ff ff 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 16776960 ; 00ffff00H

; 284  : 	debug_colour_table[DEBUG_COLOUR_RED] =				RGB ( 255, 0, 0 );

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	c1 e0 02	 shl	 eax, 2
  000b6	c7 80 00 00 00
	00 ff 00 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[eax], 255 ; 000000ffH

; 285  : 	debug_colour_table[DEBUG_COLOUR_MAGENTA] =		RGB ( 255, 0, 255 );

  000c0	b8 04 00 00 00	 mov	 eax, 4
  000c5	6b c8 05	 imul	 ecx, eax, 5
  000c8	c7 81 00 00 00
	00 ff 00 ff 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 16711935 ; 00ff00ffH

; 286  : 	debug_colour_table[DEBUG_COLOUR_YELLOW] =			RGB ( 255, 255, 0 );

  000d2	b8 04 00 00 00	 mov	 eax, 4
  000d7	6b c8 06	 imul	 ecx, eax, 6
  000da	c7 81 00 00 00
	00 ff ff 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 65535 ; 0000ffffH

; 287  : 	debug_colour_table[DEBUG_COLOUR_WHITE] =			RGB ( 255, 255, 255 );

  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	6b c8 07	 imul	 ecx, eax, 7
  000ec	c7 81 00 00 00
	00 ff ff ff 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 16777215 ; 00ffffffH

; 288  : 	debug_colour_table[DEBUG_COLOUR_SKY_BLUE] =		RGB ( 135, 206, 235 );

  000f6	b8 04 00 00 00	 mov	 eax, 4
  000fb	c1 e0 03	 shl	 eax, 3
  000fe	c7 80 00 00 00
	00 87 ce eb 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[eax], 15453831 ; 00ebce87H

; 289  : 	debug_colour_table[DEBUG_COLOUR_SLATE_GREY] =	RGB ( 112, 128, 144 );

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	6b c8 09	 imul	 ecx, eax, 9
  00110	c7 81 00 00 00
	00 70 80 90 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 9470064 ; 00908070H

; 290  : 	debug_colour_table[DEBUG_COLOUR_FOREST_GREEN] =	RGB ( 34, 139,  34 );

  0011a	b8 04 00 00 00	 mov	 eax, 4
  0011f	6b c8 0a	 imul	 ecx, eax, 10
  00122	c7 81 00 00 00
	00 22 8b 22 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 2263842 ; 00228b22H

; 291  : 	debug_colour_table[DEBUG_COLOUR_ULTRAMARINE] =	RGB ( 18, 0, 143 );

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c8 0b	 imul	 ecx, eax, 11
  00134	c7 81 00 00 00
	00 12 00 8f 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 9371666 ; 008f0012H

; 292  : 	debug_colour_table[DEBUG_COLOUR_SEABLUE] =		RGB ( 90, 130, 190 );

  0013e	b8 04 00 00 00	 mov	 eax, 4
  00143	6b c8 0c	 imul	 ecx, eax, 12
  00146	c7 81 00 00 00
	00 5a 82 be 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 12485210 ; 00be825aH

; 293  : 	debug_colour_table[DEBUG_COLOUR_AQUAMARINE] =	RGB ( 127, 255, 212 );

  00150	b8 04 00 00 00	 mov	 eax, 4
  00155	6b c8 0d	 imul	 ecx, eax, 13
  00158	c7 81 00 00 00
	00 7f ff d4 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 13959039 ; 00d4ff7fH

; 294  : 	debug_colour_table[DEBUG_COLOUR_GOLD] =			RGB ( 255, 215, 0 );

  00162	b8 04 00 00 00	 mov	 eax, 4
  00167	6b c8 0e	 imul	 ecx, eax, 14
  0016a	c7 81 00 00 00
	00 ff d7 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 55295 ; 0000d7ffH

; 295  : 	debug_colour_table[DEBUG_COLOUR_LIGHT_GREY] =	RGB ( 200, 200, 200 );

  00174	b8 04 00 00 00	 mov	 eax, 4
  00179	6b c8 0f	 imul	 ecx, eax, 15
  0017c	c7 81 00 00 00
	00 c8 c8 c8 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 13158600 ; 00c8c8c8H

; 296  : 	debug_colour_table[DEBUG_COLOUR_LIGHT_RED] =		RGB ( 255, 150, 150 );

  00186	b8 04 00 00 00	 mov	 eax, 4
  0018b	c1 e0 04	 shl	 eax, 4
  0018e	c7 80 00 00 00
	00 ff 96 96 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[eax], 9869055 ; 009696ffH

; 297  : 	debug_colour_table[DEBUG_COLOUR_DARK_RED] =		RGB ( 150, 0, 0 );

  00198	b8 04 00 00 00	 mov	 eax, 4
  0019d	6b c8 11	 imul	 ecx, eax, 17
  001a0	c7 81 00 00 00
	00 96 00 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 150 ; 00000096H

; 298  : 	debug_colour_table[DEBUG_COLOUR_DARK_GREEN] =	RGB ( 0, 150, 0 );

  001aa	b8 04 00 00 00	 mov	 eax, 4
  001af	6b c8 12	 imul	 ecx, eax, 18
  001b2	c7 81 00 00 00
	00 00 96 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 38400 ; 00009600H

; 299  : 	debug_colour_table[DEBUG_COLOUR_DARK_BLUE] =		RGB ( 0, 0, 100 );

  001bc	b8 04 00 00 00	 mov	 eax, 4
  001c1	6b c8 13	 imul	 ecx, eax, 19
  001c4	c7 81 00 00 00
	00 00 00 64 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 6553600 ; 00640000H

; 300  : 	debug_colour_table[DEBUG_COLOUR_MEDIUM_BLUE] =	RGB ( 50, 50, 150 );

  001ce	b8 04 00 00 00	 mov	 eax, 4
  001d3	6b c8 14	 imul	 ecx, eax, 20
  001d6	c7 81 00 00 00
	00 32 32 96 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 9843250 ; 00963232H

; 301  : 	debug_colour_table[DEBUG_COLOUR_MEDIUM_RED] =	RGB ( 255, 50, 50 );

  001e0	b8 04 00 00 00	 mov	 eax, 4
  001e5	6b c8 15	 imul	 ecx, eax, 21
  001e8	c7 81 00 00 00
	00 ff 32 32 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 3289855 ; 003232ffH

; 302  : 	debug_colour_table[DEBUG_COLOUR_SANDY_BROWN] =	RGB ( 244, 164,  96 );

  001f2	b8 04 00 00 00	 mov	 eax, 4
  001f7	6b c8 16	 imul	 ecx, eax, 22
  001fa	c7 81 00 00 00
	00 f4 a4 60 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 6333684 ; 0060a4f4H

; 303  : 	debug_colour_table[DEBUG_COLOUR_AMBER] =			RGB ( 255, 128, 0 );

  00204	b8 04 00 00 00	 mov	 eax, 4
  00209	6b c8 17	 imul	 ecx, eax, 23
  0020c	c7 81 00 00 00
	00 ff 80 00 00	 mov	 DWORD PTR ?debug_colour_table@@3PAKA[ecx], 33023 ; 000080ffH

; 304  : 
; 305  : #ifdef DEBUG
; 306  : 
; 307  : 	// opengl
; 308  : 	SendMessage ( application_window, WM_USER, debug_initialise_message_id, 0 );

  00216	6a 00		 push	 0
  00218	a1 00 00 00 00	 mov	 eax, DWORD PTR ?debug_initialise_message_id@@3HA
  0021d	50		 push	 eax
  0021e	68 00 04 00 00	 push	 1024			; 00000400H
  00223	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?application_window@@3PAUHWND__@@A ; application_window
  00229	51		 push	 ecx
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 309  : 
; 310  : #endif
; 311  : 
; 312  : }

  00230	5f		 pop	 edi
  00231	5e		 pop	 esi
  00232	5b		 pop	 ebx
  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c2 04 00	 ret	 4
?initialise_debug_system@@YGXH@Z ENDP			; initialise_debug_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?suppress_debug_log_timing_info@@YGXH@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?suppress_debug_log_timing_info@@YGXH@Z PROC		; suppress_debug_log_timing_info, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 255  : 
; 256  : 	debug_timing_info_suppressed = flag;

  00009	8b 45 08	 mov	 eax, DWORD PTR _flag$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?debug_timing_info_suppressed@@3HA, eax

; 257  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?suppress_debug_log_timing_info@@YGXH@Z ENDP		; suppress_debug_log_timing_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_set_logging@@YGXH@Z
_TEXT	SEGMENT
_logging$ = 8						; size = 4
?debug_set_logging@@YGXH@Z PROC				; debug_set_logging, COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 245  : 
; 246  : 	debug_log_state = logging;

  00009	8b 45 08	 mov	 eax, DWORD PTR _logging$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?debug_log_state@@3HA, eax

; 247  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?debug_set_logging@@YGXH@Z ENDP				; debug_set_logging
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_set_windows_update@@YGXW4debug_update_state@@@Z
_TEXT	SEGMENT
_update$ = 8						; size = 4
?debug_set_windows_update@@YGXW4debug_update_state@@@Z PROC ; debug_set_windows_update, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 226  : 
; 227  : 	if ( update == DEBUG_UPDATE_AUTO )

  00009	83 7d 08 02	 cmp	 DWORD PTR _update$[ebp], 2
  0000d	75 0c		 jne	 SHORT $LN2@debug_set_

; 228  : 	{
; 229  : 
; 230  : 		debug_monitor_auto_update = TRUE;

  0000f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?debug_monitor_auto_update@@3HA, 1

; 231  : 	}
; 232  : 	else

  00019	eb 0a		 jmp	 SHORT $LN1@debug_set_
$LN2@debug_set_:

; 233  : 	{
; 234  : 
; 235  : 		debug_monitor_auto_update = FALSE;

  0001b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?debug_monitor_auto_update@@3HA, 0
$LN1@debug_set_:

; 236  : 	}
; 237  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?debug_set_windows_update@@YGXW4debug_update_state@@@Z ENDP ; debug_set_windows_update
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\debug.c
;	COMDAT ?debug_set_window_creation@@YGXW4debug_window_creation@@@Z
_TEXT	SEGMENT
_create$ = 8						; size = 4
?debug_set_window_creation@@YGXW4debug_window_creation@@@Z PROC ; debug_set_window_creation, COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 207  : 
; 208  : 	if ( create == DEBUG_CREATE_WINDOW )

  00009	83 7d 08 02	 cmp	 DWORD PTR _create$[ebp], 2
  0000d	75 0c		 jne	 SHORT $LN2@debug_set_

; 209  : 	{
; 210  : 
; 211  : 		debug_monitor = TRUE;

  0000f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?debug_monitor@@3HA, 1

; 212  : 	}
; 213  : 	else

  00019	eb 0a		 jmp	 SHORT $LN1@debug_set_
$LN2@debug_set_:

; 214  : 	{
; 215  : 
; 216  : 		debug_monitor = FALSE;

  0001b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?debug_monitor@@3HA, 0
$LN1@debug_set_:

; 217  : 	}
; 218  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?debug_set_window_creation@@YGXW4debug_window_creation@@@Z ENDP ; debug_set_window_creation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1477 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1478 :         #pragma warning(push)
; 1479 :         #pragma warning(disable: 4996) // Deprecation
; 1480 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	6a ff		 push	 -1
  00015	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 __vsnprintf_l
  0001e	83 c4 14	 add	 esp, 20			; 00000014H

; 1481 :         #pragma warning(pop)
; 1482 :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
