; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\misc\language.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?language_strings@@3PAPBDA			; language_strings
PUBLIC	??_C@_07NAIMCPPE@ENGLISH@			; `string'
PUBLIC	??_C@_06KFKKMHJN@FRENCH@			; `string'
PUBLIC	??_C@_06IIKFGJJO@GERMAN@			; `string'
PUBLIC	??_C@_07NLCMMKLO@ITALIAN@			; `string'
PUBLIC	??_C@_07PBCAEALG@SPANISH@			; `string'
PUBLIC	??_C@_07PACEEPLE@RUSSIAN@			; `string'
PUBLIC	??_C@_06JCANIGJE@POLISH@			; `string'
PUBLIC	?translation_list@@3PAULANGUAGE_STRUCT@@A	; translation_list
PUBLIC	?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A	; alphabet_pointers
_BSS	SEGMENT
?translation_list@@3PAULANGUAGE_STRUCT@@A DD 01H DUP (?) ; translation_list
?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A DD 01cH DUP (?) ; alphabet_pointers
_BSS	ENDS
;	COMDAT ??_C@_06JCANIGJE@POLISH@
CONST	SEGMENT
??_C@_06JCANIGJE@POLISH@ DB 'POLISH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PACEEPLE@RUSSIAN@
CONST	SEGMENT
??_C@_07PACEEPLE@RUSSIAN@ DB 'RUSSIAN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBCAEALG@SPANISH@
CONST	SEGMENT
??_C@_07PBCAEALG@SPANISH@ DB 'SPANISH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NLCMMKLO@ITALIAN@
CONST	SEGMENT
??_C@_07NLCMMKLO@ITALIAN@ DB 'ITALIAN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IIKFGJJO@GERMAN@
CONST	SEGMENT
??_C@_06IIKFGJJO@GERMAN@ DB 'GERMAN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFKKMHJN@FRENCH@
CONST	SEGMENT
??_C@_06KFKKMHJN@FRENCH@ DB 'FRENCH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAIMCPPE@ENGLISH@
CONST	SEGMENT
??_C@_07NAIMCPPE@ENGLISH@ DB 'ENGLISH', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?language_strings@@3PAPBDA DD FLAT:??_C@_07NAIMCPPE@ENGLISH@ ; language_strings
	DD	FLAT:??_C@_06KFKKMHJN@FRENCH@
	DD	FLAT:??_C@_06IIKFGJJO@GERMAN@
	DD	FLAT:??_C@_07NLCMMKLO@ITALIAN@
	DD	FLAT:??_C@_07PBCAEALG@SPANISH@
	DD	FLAT:??_C@_07PACEEPLE@RUSSIAN@
	DD	FLAT:??_C@_06JCANIGJE@POLISH@
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?initialise_language_database@@YGXXZ		; initialise_language_database
PUBLIC	?get_trans@@YGPBDPBD@Z				; get_trans
PUBLIC	?deinitialise_language_database@@YGXXZ		; deinitialise_language_database
PUBLIC	?set_current_language@@YGXH@Z			; set_current_language
PUBLIC	?get_current_language_font@@YG?AW4FONT_TYPES@@W41@@Z ; get_current_language_font
PUBLIC	?preprocess_language_file@@YGXPAU_iobuf@@0@Z	; preprocess_language_file
PUBLIC	?preprocess_language_database@@YGXXZ		; preprocess_language_database
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?__LINE__Var@?0??initialise_alphabet_pointers@@YGXXZ@4JA ; `initialise_alphabet_pointers'::`1'::__LINE__Var
PUBLIC	??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BB@FJCFCILD@translation_list@		; `string'
PUBLIC	??_C@_0DN@PNDDDGFO@WARNING?3?5translation?5with?5same?5@ ; `string'
PUBLIC	??_C@_0P@IGGNODJJ@old?3?5?$CFs?5?5?3?5?5?$CFs@	; `string'
PUBLIC	??_C@_0P@JIANANCF@new?3?5?$CFs?5?5?3?5?5?$CFs@	; `string'
PUBLIC	??_C@_0CI@LGGHPHIO@WARNING?3?5deleting?5duplicate?5tra@ ; `string'
PUBLIC	?__LINE__Var@?0??initialise_language_file@@YGXPAU_iobuf@@@Z@4JA ; `initialise_language_file'::`1'::__LINE__Var
PUBLIC	??_C@_02GDNLOIIJ@fp@				; `string'
PUBLIC	??_C@_0DF@IAEHEEOF@LANGUAGE?3?5initialise?3?5failed?5to@ ; `string'
PUBLIC	??_C@_0CM@BNKPFMMJ@LANGUAGE?3?5failed?5to?5acquire?5?$CFs?5@ ; `string'
PUBLIC	?__LINE__Var@?0??initialise_language_database@@YGXXZ@4JA ; `initialise_language_database'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@ ; `string'
PUBLIC	??_C@_08HJPOPDIJ@?$CFs?2?$CK?4dat@		; `string'
PUBLIC	??_C@_08EMMAHODI@?2common?2@			; `string'
PUBLIC	??_C@_0BC@KIDADDBK@directory_listing@		; `string'
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs@			; `string'
PUBLIC	??_C@_0BM@DONJIDPL@Processing?5language?5file?5?$CFs@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	?__LINE__Var@?0??get_trans@@YGPBDPBD@Z@4JA	; `get_trans'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@IHFAJJHJ@end?5?$DM?5NUM_ALPHABET_POINTERS@ ; `string'
PUBLIC	??_C@_0CK@CCHBOHAN@LANGUAGE?4C?3?5get_trans?$CI?$CJ?5couldn?8@ ; `string'
PUBLIC	??_C@_0BP@JBPKIFO@?6?$HO?$HO?$HO?5ALPHABET_POINTER?5?5?$CFc?5?$HO?$HO?$HO?6@ ; `string'
PUBLIC	??_C@_0BA@DNBFGAPM@?$CF3d?3?5?5?$CFs?5?5?3?5?5?$CFs@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	?__LINE__Var@?0??preprocess_language_file@@YGXPAU_iobuf@@0@Z@4JA ; `preprocess_language_file'::`1'::__LINE__Var
PUBLIC	??_C@_08JLBKCIFH@?3START?6?6@			; `string'
PUBLIC	??_C@_0P@IBJOBPGP@?6?3TRANSLATION?5@		; `string'
PUBLIC	??_C@_0DF@JLCBMHFP@PRE_LANG?3?5initialise?3?5failed?5to@ ; `string'
PUBLIC	??_C@_0CM@BEIDLBFF@PRE_LANG?3?5failed?5to?5acquire?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0BJ@CEAMPFOO@?6?3TRANSLATION_PARAGRAPH?5@	; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_07FMFGBJID@?6?3END?6?6@			; `string'
PUBLIC	??_C@_0BN@IOOLGBPP@LANGUAGE?4C?3?5tag?5not?5matched?$CB@ ; `string'
PUBLIC	?__LINE__Var@?0??preprocess_language_database@@YGXXZ@4JA ; `preprocess_language_database'::`1'::__LINE__Var
PUBLIC	??_C@_08DKBADMOJ@?$CFs?2?$CK?4txt@		; `string'
PUBLIC	??_C@_0P@CGKADOIG@?$CFs?2tlate?$CFd?4dat@	; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
EXTRN	__imp__fgetc:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__isalpha:PROC
EXTRN	__imp__toupper:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_first_directory_file@@YGPAUDIRECTORY_FILE_LIST@@PBD@Z:PROC ; get_first_directory_file
EXTRN	?get_next_directory_file@@YGHPAUDIRECTORY_FILE_LIST@@@Z:PROC ; get_next_directory_file
EXTRN	?get_directory_file_filename@@YGPBDPAUDIRECTORY_FILE_LIST@@@Z:PROC ; get_directory_file_filename
EXTRN	?destroy_directory_file_list@@YGXPAUDIRECTORY_FILE_LIST@@@Z:PROC ; destroy_directory_file_list
EXTRN	?get_directory_file_type@@YG?AW4DIRECTORY_FILE_TYPES@@PAUDIRECTORY_FILE_LIST@@@Z:PROC ; get_directory_file_type
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_filtered_log@@YAXPBDZZ:PROC		; debug_filtered_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
EXTRN	?set_file_enum@@YGXPAU_iobuf@@QAPBDH@Z:PROC	; set_file_enum
EXTRN	?get_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z:PROC	; get_next_file_tag
EXTRN	?get_next_file_paragraph@@YGHPAU_iobuf@@PADH@Z:PROC ; get_next_file_paragraph
EXTRN	?get_next_file_string@@YGHPAU_iobuf@@PADH@Z:PROC ; get_next_file_string
EXTRN	?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z:PROC ; get_next_file_enum
EXTRN	__chkstk:PROC
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?application_tag_strings@@3PAPBDA:BYTE		; application_tag_strings
EXTRN	?comanche_hokum_installation_path@@3PADA:BYTE	; comanche_hokum_installation_path
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGKADOIG@?$CFs?2tlate?$CFd?4dat@
CONST	SEGMENT
??_C@_0P@CGKADOIG@?$CFs?2tlate?$CFd?4dat@ DB '%s\tlate%d.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DKBADMOJ@?$CFs?2?$CK?4txt@
CONST	SEGMENT
??_C@_08DKBADMOJ@?$CFs?2?$CK?4txt@ DB '%s\*.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??preprocess_language_database@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??preprocess_language_database@@YGXXZ@4JA DD 0378H ; `preprocess_language_database'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@IOOLGBPP@LANGUAGE?4C?3?5tag?5not?5matched?$CB@
CONST	SEGMENT
??_C@_0BN@IOOLGBPP@LANGUAGE?4C?3?5tag?5not?5matched?$CB@ DB 'LANGUAGE.C: '
	DB	'tag not matched!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FMFGBJID@?6?3END?6?6@
CONST	SEGMENT
??_C@_07FMFGBJID@?6?3END?6?6@ DB 0aH, ':END', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CEAMPFOO@?6?3TRANSLATION_PARAGRAPH?5@
CONST	SEGMENT
??_C@_0BJ@CEAMPFOO@?6?3TRANSLATION_PARAGRAPH?5@ DB 0aH, ':TRANSLATION_PAR'
	DB	'AGRAPH ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BEIDLBFF@PRE_LANG?3?5failed?5to?5acquire?5?$CFs?5@
CONST	SEGMENT
??_C@_0CM@BEIDLBFF@PRE_LANG?3?5failed?5to?5acquire?5?$CFs?5@ DB 'PRE_LANG'
	DB	': failed to acquire %s translation.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JLCBMHFP@PRE_LANG?3?5initialise?3?5failed?5to@
CONST	SEGMENT
??_C@_0DF@JLCBMHFP@PRE_LANG?3?5initialise?3?5failed?5to@ DB 'PRE_LANG: in'
	DB	'itialise: failed to acquire language tag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IBJOBPGP@?6?3TRANSLATION?5@
CONST	SEGMENT
??_C@_0P@IBJOBPGP@?6?3TRANSLATION?5@ DB 0aH, ':TRANSLATION ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JLBKCIFH@?3START?6?6@
CONST	SEGMENT
??_C@_08JLBKCIFH@?3START?6?6@ DB ':START', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??preprocess_language_file@@YGXPAU_iobuf@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??preprocess_language_file@@YGXPAU_iobuf@@0@Z@4JA DD 02feH ; `preprocess_language_file'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNBFGAPM@?$CF3d?3?5?5?$CFs?5?5?3?5?5?$CFs@
CONST	SEGMENT
??_C@_0BA@DNBFGAPM@?$CF3d?3?5?5?$CFs?5?5?3?5?5?$CFs@ DB '%3d:  %s  :  %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JBPKIFO@?6?$HO?$HO?$HO?5ALPHABET_POINTER?5?5?$CFc?5?$HO?$HO?$HO?6@
CONST	SEGMENT
??_C@_0BP@JBPKIFO@?6?$HO?$HO?$HO?5ALPHABET_POINTER?5?5?$CFc?5?$HO?$HO?$HO?6@ DB 0aH
	DB	'~~~ ALPHABET_POINTER  %c ~~~', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CCHBOHAN@LANGUAGE?4C?3?5get_trans?$CI?$CJ?5couldn?8@
CONST	SEGMENT
??_C@_0CK@CCHBOHAN@LANGUAGE?4C?3?5get_trans?$CI?$CJ?5couldn?8@ DB 'LANGUA'
	DB	'GE.C: get_trans() couldn''t find: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IHFAJJHJ@end?5?$DM?5NUM_ALPHABET_POINTERS@
CONST	SEGMENT
??_C@_0BM@IHFAJJHJ@end?5?$DM?5NUM_ALPHABET_POINTERS@ DB 'end < NUM_ALPHAB'
	DB	'ET_POINTERS', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_trans@@YGPBDPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_trans@@YGPBDPBD@Z@4JA DD 022bH	; `get_trans'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DONJIDPL@Processing?5language?5file?5?$CFs@
CONST	SEGMENT
??_C@_0BM@DONJIDPL@Processing?5language?5file?5?$CFs@ DB 'Processing lang'
	DB	'uage file %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs@ DB '%s\%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KIDADDBK@directory_listing@
CONST	SEGMENT
??_C@_0BC@KIDADDBK@directory_listing@ DB 'directory_listing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMMAHODI@?2common?2@
CONST	SEGMENT
??_C@_08EMMAHODI@?2common?2@ DB '\common\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HJPOPDIJ@?$CFs?2?$CK?4dat@
CONST	SEGMENT
??_C@_08HJPOPDIJ@?$CFs?2?$CK?4dat@ DB '%s\*.dat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@
CONST	SEGMENT
??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@ DB '..\common\data\langu'
	DB	'age', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_language_database@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_language_database@@YGXXZ@4JA DD 01d8H ; `initialise_language_database'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CM@BNKPFMMJ@LANGUAGE?3?5failed?5to?5acquire?5?$CFs?5@
CONST	SEGMENT
??_C@_0CM@BNKPFMMJ@LANGUAGE?3?5failed?5to?5acquire?5?$CFs?5@ DB 'LANGUAGE'
	DB	': failed to acquire %s translation.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IAEHEEOF@LANGUAGE?3?5initialise?3?5failed?5to@
CONST	SEGMENT
??_C@_0DF@IAEHEEOF@LANGUAGE?3?5initialise?3?5failed?5to@ DB 'LANGUAGE: in'
	DB	'itialise: failed to acquire language tag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GDNLOIIJ@fp@
CONST	SEGMENT
??_C@_02GDNLOIIJ@fp@ DB 'fp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_language_file@@YGXPAU_iobuf@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_language_file@@YGXPAU_iobuf@@@Z@4JA DD 0142H ; `initialise_language_file'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CI@LGGHPHIO@WARNING?3?5deleting?5duplicate?5tra@
CONST	SEGMENT
??_C@_0CI@LGGHPHIO@WARNING?3?5deleting?5duplicate?5tra@ DB 'WARNING: dele'
	DB	'ting duplicate translation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JIANANCF@new?3?5?$CFs?5?5?3?5?5?$CFs@
CONST	SEGMENT
??_C@_0P@JIANANCF@new?3?5?$CFs?5?5?3?5?5?$CFs@ DB 'new: %s  :  %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IGGNODJJ@old?3?5?$CFs?5?5?3?5?5?$CFs@
CONST	SEGMENT
??_C@_0P@IGGNODJJ@old?3?5?$CFs?5?5?3?5?5?$CFs@ DB 'old: %s  :  %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@PNDDDGFO@WARNING?3?5translation?5with?5same?5@
CONST	SEGMENT
??_C@_0DN@PNDDDGFO@WARNING?3?5translation?5with?5same?5@ DB 'WARNING: tra'
	DB	'nslation with same tags & different translations', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FJCFCILD@translation_list@
CONST	SEGMENT
??_C@_0BB@FJCFCILD@translation_list@ DB 'translation_list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\misc\language.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_alphabet_pointers@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_alphabet_pointers@@YGXXZ@4JA DD 091H ; `initialise_alphabet_pointers'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?preprocess_language_database@@YGXXZ
_TEXT	SEGMENT
_filename$ = -792					; size = 4
_output_filename$ = -788				; size = 256
_full_filename$ = -532					; size = 256
_directory_search_path$ = -276				; size = 256
_valid_file$ = -20					; size = 4
_count$ = -16						; size = 4
_directory_listing$ = -12				; size = 4
_fp_out$ = -8						; size = 4
_fp$ = -4						; size = 4
?preprocess_language_database@@YGXXZ PROC		; preprocess_language_database, COMDAT

; 888  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 03 00
	00		 sub	 esp, 920		; 00000398H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 889  : 	FILE
; 890  : 		*fp,
; 891  : 		*fp_out;
; 892  : 		
; 893  : 	directory_file_list
; 894  : 		*directory_listing;
; 895  : 
; 896  : 	int
; 897  : 		count = 0,

  0000c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 898  : 		valid_file;
; 899  : 
; 900  : 	char
; 901  : 		directory_search_path [256],
; 902  : 		full_filename [256],
; 903  : 		output_filename [256];
; 904  : 	const char
; 905  : 		*filename;
; 906  : 
; 907  : 	sprintf (directory_search_path, "%s\\*.txt", LANGUAGE_DIRECTORY);

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_08DKBADMOJ@?$CFs?2?$CK?4txt@
  0001d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _directory_search_path$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _sprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 908  : 
; 909  : 	directory_listing = get_first_directory_file (directory_search_path);

  0002c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _directory_search_path$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_first_directory_file@@YGPAUDIRECTORY_FILE_LIST@@PBD@Z ; get_first_directory_file
  00038	89 45 f4	 mov	 DWORD PTR _directory_listing$[ebp], eax

; 910  : 
; 911  : 	ASSERT (directory_listing);

  0003b	83 7d f4 00	 cmp	 DWORD PTR _directory_listing$[ebp], 0
  0003f	75 18		 jne	 SHORT $LN4@preprocess
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??preprocess_language_database@@YGXXZ@4JA
  00046	83 c0 17	 add	 eax, 23			; 00000017H
  00049	50		 push	 eax
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KIDADDBK@directory_listing@
  00054	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@preprocess:

; 912  : 
; 913  : 	valid_file = TRUE;

  00059	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _valid_file$[ebp], 1
$LN2@preprocess:

; 914  : 
; 915  : 	while (valid_file)

  00060	83 7d ec 00	 cmp	 DWORD PTR _valid_file$[ebp], 0
  00064	0f 84 d3 00 00
	00		 je	 $LN3@preprocess

; 916  : 	{
; 917  : 		if (get_directory_file_type (directory_listing) == DIRECTORY_FILE_TYPE_FILE)

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?get_directory_file_type@@YG?AW4DIRECTORY_FILE_TYPES@@PAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_type
  00073	83 f8 02	 cmp	 eax, 2
  00076	0f 85 b0 00 00
	00		 jne	 $LN5@preprocess

; 918  : 		{
; 919  : 			filename = get_directory_file_filename (directory_listing);

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?get_directory_file_filename@@YGPBDPAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_filename
  00085	89 85 e8 fc ff
	ff		 mov	 DWORD PTR _filename$[ebp], eax

; 920  : 
; 921  : 			sprintf (full_filename, "%s\\%s", LANGUAGE_DIRECTORY, filename);

  0008b	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _filename$[ebp]
  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
  0009c	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _full_filename$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _sprintf
  000a8	83 c4 10	 add	 esp, 16			; 00000010H

; 922  : 
; 923  : 			sprintf (output_filename, "%s\\tlate%d.dat", LANGUAGE_DIRECTORY, count);

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  000ae	50		 push	 eax
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CGKADOIG@?$CFs?2tlate?$CFd?4dat@
  000b9	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _output_filename$[ebp]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _sprintf
  000c5	83 c4 10	 add	 esp, 16			; 00000010H

; 924  : 
; 925  : 			debug_filtered_log ("Processing language file %s", full_filename);

  000c8	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _full_filename$[ebp]
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DONJIDPL@Processing?5language?5file?5?$CFs@
  000d4	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  000d9	83 c4 08	 add	 esp, 8

; 926  : 
; 927  : 			fp = safe_fopen (full_filename, "r");

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  000e1	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _full_filename$[ebp]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  000ed	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 928  : 
; 929  : 			fp_out = safe_fopen (output_filename, "w");

  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  000f5	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR _output_filename$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00101	89 45 f8	 mov	 DWORD PTR _fp_out$[ebp], eax

; 930  : 
; 931  : 			preprocess_language_file (fp, fp_out);

  00104	8b 45 f8	 mov	 eax, DWORD PTR _fp_out$[ebp]
  00107	50		 push	 eax
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 ?preprocess_language_file@@YGXPAU_iobuf@@0@Z ; preprocess_language_file

; 932  : 
; 933  : 			safe_fclose(fp);

  00111	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 934  : 
; 935  : 			safe_fclose(fp_out);

  0011a	8b 45 f8	 mov	 eax, DWORD PTR _fp_out$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 936  : 
; 937  : 			count++;

  00123	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  00126	83 c0 01	 add	 eax, 1
  00129	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN5@preprocess:

; 938  : 		}
; 939  : 		valid_file = get_next_directory_file ( directory_listing );

  0012c	8b 45 f4	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ?get_next_directory_file@@YGHPAUDIRECTORY_FILE_LIST@@@Z ; get_next_directory_file
  00135	89 45 ec	 mov	 DWORD PTR _valid_file$[ebp], eax

; 940  : 	}

  00138	e9 23 ff ff ff	 jmp	 $LN2@preprocess
$LN3@preprocess:

; 941  : 	destroy_directory_file_list ( directory_listing );

  0013d	8b 45 f4	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?destroy_directory_file_list@@YGXPAUDIRECTORY_FILE_LIST@@@Z ; destroy_directory_file_list

; 942  : }

  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
?preprocess_language_database@@YGXXZ ENDP		; preprocess_language_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?preprocess_language_file@@YGXPAU_iobuf@@0@Z
_TEXT	SEGMENT
tv74 = -8728						; size = 4
_end$ = -8212						; size = 4
_lang_count$ = -8208					; size = 4
_lang_type$ = -8204					; size = 4
_count$ = -8200						; size = 4
_buffer$ = -8196					; size = 8192
_tag$ = -4						; size = 4
_fp$ = 8						; size = 4
_fp_out$ = 12						; size = 4
?preprocess_language_file@@YGXPAU_iobuf@@0@Z PROC	; preprocess_language_file, COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 22 00 00	 mov	 eax, 8728		; 00002218H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 767  : 	file_tags
; 768  : 		tag;
; 769  : 		
; 770  : 	char
; 771  : 		buffer [BUFFER_SIZE];
; 772  : 				
; 773  : 	int
; 774  : 		count = 0,

  00010	c7 85 f8 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$[ebp], 0

; 775  : 		lang_type,
; 776  : 		lang_count,
; 777  : 		end = FALSE;

  0001a	c7 85 ec df ff
	ff 00 00 00 00	 mov	 DWORD PTR _end$[ebp], 0

; 778  : 		
; 779  : 	ASSERT (fp);

  00024	83 7d 08 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00028	75 18		 jne	 SHORT $LN2@preprocess
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??preprocess_language_file@@YGXPAU_iobuf@@0@Z@4JA
  0002f	83 c0 0d	 add	 eax, 13			; 0000000dH
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_02GDNLOIIJ@fp@
  0003d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@preprocess:

; 780  : 
; 781  : 	// read entries
; 782  : 	while (!end)

  00042	83 bd ec df ff
	ff 00		 cmp	 DWORD PTR _end$[ebp], 0
  00049	0f 85 99 02 00
	00		 jne	 $LN1@preprocess

; 783  : 	{
; 784  : 		tag = (file_tags) get_next_file_tag (fp, application_tag_strings, FILE_TAG_APPLICATION_LAST_TAG);

  0004f	68 af 00 00 00	 push	 175			; 000000afH
  00054	68 00 00 00 00	 push	 OFFSET ?application_tag_strings@@3PAPBDA ; application_tag_strings
  00059	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?get_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_tag
  00062	89 45 fc	 mov	 DWORD PTR _tag$[ebp], eax

; 785  : 
; 786  : 		switch (tag)

  00065	8b 45 fc	 mov	 eax, DWORD PTR _tag$[ebp]
  00068	89 85 e8 dd ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  0006e	8b 8d e8 dd ff
	ff		 mov	 ecx, DWORD PTR tv74[ebp]
  00074	83 c1 19	 add	 ecx, 25			; 00000019H
  00077	89 8d e8 dd ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
  0007d	81 bd e8 dd ff
	ff bd 00 00 00	 cmp	 DWORD PTR tv74[ebp], 189 ; 000000bdH
  00087	0f 87 49 02 00
	00		 ja	 $LN25@preprocess
  0008d	8b 95 e8 dd ff
	ff		 mov	 edx, DWORD PTR tv74[ebp]
  00093	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN27@preprocess[edx]
  0009a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN28@preprocess[eax*4]
$LN13@preprocess:

; 787  : 		{	
; 788  : 			case FILE_TAG_START:
; 789  : 			{
; 790  : 				fprintf (fp_out, ":START\n\n");

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_08JLBKCIFH@?3START?6?6@
  000a6	8b 45 0c	 mov	 eax, DWORD PTR _fp_out$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _fprintf
  000af	83 c4 08	 add	 esp, 8

; 791  : 
; 792  : 				break;

  000b2	e9 2c 02 00 00	 jmp	 $LN4@preprocess
$LN14@preprocess:

; 793  : 			}
; 794  : 			case FILE_TAG_TRANSLATION:
; 795  : 			{
; 796  : 				fprintf (fp_out, "\n:TRANSLATION ");

  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IBJOBPGP@?6?3TRANSLATION?5@
  000bc	8b 45 0c	 mov	 eax, DWORD PTR _fp_out$[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _fprintf
  000c5	83 c4 08	 add	 esp, 8

; 797  : 
; 798  : 				// get tag for translations
; 799  : 				if( get_next_file_translation (fp, buffer, BUFFER_SIZE) == TRUE)

  000c8	68 00 20 00 00	 push	 8192			; 00002000H
  000cd	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d3	50		 push	 eax
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 ?get_next_file_translation@@YGHPAU_iobuf@@PADH@Z ; get_next_file_translation
  000dd	83 f8 01	 cmp	 eax, 1
  000e0	75 15		 jne	 SHORT $LN15@preprocess

; 800  : 				{
; 801  : 					fprintf (fp_out, buffer);

  000e2	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d 0c	 mov	 ecx, DWORD PTR _fp_out$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _fprintf
  000f2	83 c4 08	 add	 esp, 8

; 802  : 				}
; 803  : 				else

  000f5	eb 0d		 jmp	 SHORT $LN16@preprocess
$LN15@preprocess:

; 804  : 				{
; 805  : 					debug_fatal("PRE_LANG: initialise: failed to acquire language tag");

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@JLCBMHFP@PRE_LANG?3?5initialise?3?5failed?5to@
  000fc	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00101	83 c4 04	 add	 esp, 4
$LN16@preprocess:

; 806  : 				}
; 807  : 
; 808  : 				for (lang_count = LANGUAGE_ENGLISH; lang_count < NUM_LANGUAGES; lang_count++)

  00104	c7 85 f0 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _lang_count$[ebp], 0
  0010e	eb 0f		 jmp	 SHORT $LN8@preprocess
$LN6@preprocess:
  00110	8b 85 f0 df ff
	ff		 mov	 eax, DWORD PTR _lang_count$[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 85 f0 df ff
	ff		 mov	 DWORD PTR _lang_count$[ebp], eax
$LN8@preprocess:
  0011f	83 bd f0 df ff
	ff 07		 cmp	 DWORD PTR _lang_count$[ebp], 7
  00126	7d 73		 jge	 SHORT $LN7@preprocess

; 809  : 				{
; 810  : 					lang_type = get_next_file_enum (fp, language_strings, NUM_LANGUAGES);

  00128	6a 07		 push	 7
  0012a	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  0012f	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_enum
  00138	89 85 f4 df ff
	ff		 mov	 DWORD PTR _lang_type$[ebp], eax

; 811  : 
; 812  : 					set_file_enum (fp_out, language_strings, lang_type);

  0013e	8b 85 f4 df ff
	ff		 mov	 eax, DWORD PTR _lang_type$[ebp]
  00144	50		 push	 eax
  00145	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  0014a	8b 4d 0c	 mov	 ecx, DWORD PTR _fp_out$[ebp]
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 ?set_file_enum@@YGXPAU_iobuf@@QAPBDH@Z ; set_file_enum

; 813  : 
; 814  : 					if (get_next_file_translation (fp, buffer, BUFFER_SIZE) == TRUE)

  00153	68 00 20 00 00	 push	 8192			; 00002000H
  00158	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0015e	50		 push	 eax
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 ?get_next_file_translation@@YGHPAU_iobuf@@PADH@Z ; get_next_file_translation
  00168	83 f8 01	 cmp	 eax, 1
  0016b	75 15		 jne	 SHORT $LN17@preprocess

; 815  : 					{
; 816  : 						fprintf (fp_out, buffer);

  0016d	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00173	50		 push	 eax
  00174	8b 4d 0c	 mov	 ecx, DWORD PTR _fp_out$[ebp]
  00177	51		 push	 ecx
  00178	e8 00 00 00 00	 call	 _fprintf
  0017d	83 c4 08	 add	 esp, 8

; 817  : 					}
; 818  : 					else

  00180	eb 14		 jmp	 SHORT $LN18@preprocess
$LN17@preprocess:

; 819  : 					{
; 820  : 						debug_fatal("PRE_LANG: failed to acquire %s translation.", buffer);

  00182	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00188	50		 push	 eax
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BEIDLBFF@PRE_LANG?3?5failed?5to?5acquire?5?$CFs?5@
  0018e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00193	83 c4 08	 add	 esp, 8
$LN18@preprocess:

; 821  : 					}
; 822  : 				}

  00196	e9 75 ff ff ff	 jmp	 $LN6@preprocess
$LN7@preprocess:

; 823  : 
; 824  : 				count++;

  0019b	8b 85 f8 df ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  001a1	83 c0 01	 add	 eax, 1
  001a4	89 85 f8 df ff
	ff		 mov	 DWORD PTR _count$[ebp], eax

; 825  : 
; 826  : 				break;

  001aa	e9 34 01 00 00	 jmp	 $LN4@preprocess
$LN19@preprocess:

; 827  : 			}
; 828  : 
; 829  : 			case FILE_TAG_TRANSLATION_PARAGRAPH:
; 830  : 			{
; 831  : 				fprintf (fp_out, "\n:TRANSLATION_PARAGRAPH ");

  001af	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CEAMPFOO@?6?3TRANSLATION_PARAGRAPH?5@
  001b4	8b 45 0c	 mov	 eax, DWORD PTR _fp_out$[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _fprintf
  001bd	83 c4 08	 add	 esp, 8

; 832  : 
; 833  : 				// get tag for translations
; 834  : 				if( get_next_file_translation (fp, buffer, BUFFER_SIZE) == TRUE)

  001c0	68 00 20 00 00	 push	 8192			; 00002000H
  001c5	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  001cb	50		 push	 eax
  001cc	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  001cf	51		 push	 ecx
  001d0	e8 00 00 00 00	 call	 ?get_next_file_translation@@YGHPAU_iobuf@@PADH@Z ; get_next_file_translation
  001d5	83 f8 01	 cmp	 eax, 1
  001d8	75 15		 jne	 SHORT $LN20@preprocess

; 835  : 				{
; 836  : 					fprintf (fp_out, buffer);

  001da	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  001e0	50		 push	 eax
  001e1	8b 4d 0c	 mov	 ecx, DWORD PTR _fp_out$[ebp]
  001e4	51		 push	 ecx
  001e5	e8 00 00 00 00	 call	 _fprintf
  001ea	83 c4 08	 add	 esp, 8

; 837  : 				}
; 838  : 				else

  001ed	eb 0d		 jmp	 SHORT $LN21@preprocess
$LN20@preprocess:

; 839  : 				{
; 840  : 					debug_fatal("PRE_LANG: initialise: failed to acquire language tag");

  001ef	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@JLCBMHFP@PRE_LANG?3?5initialise?3?5failed?5to@
  001f4	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  001f9	83 c4 04	 add	 esp, 4
$LN21@preprocess:

; 841  : 				}
; 842  : 
; 843  : 				for (lang_count = LANGUAGE_ENGLISH; lang_count < NUM_LANGUAGES; lang_count++)

  001fc	c7 85 f0 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _lang_count$[ebp], 0
  00206	eb 0f		 jmp	 SHORT $LN11@preprocess
$LN9@preprocess:
  00208	8b 85 f0 df ff
	ff		 mov	 eax, DWORD PTR _lang_count$[ebp]
  0020e	83 c0 01	 add	 eax, 1
  00211	89 85 f0 df ff
	ff		 mov	 DWORD PTR _lang_count$[ebp], eax
$LN11@preprocess:
  00217	83 bd f0 df ff
	ff 07		 cmp	 DWORD PTR _lang_count$[ebp], 7
  0021e	0f 8d 84 00 00
	00		 jge	 $LN10@preprocess

; 844  : 				{
; 845  : 					// get enum
; 846  : 					lang_type = get_next_file_enum (fp, language_strings, NUM_LANGUAGES);

  00224	6a 07		 push	 7
  00226	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  0022b	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 ?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_enum
  00234	89 85 f4 df ff
	ff		 mov	 DWORD PTR _lang_type$[ebp], eax

; 847  : 
; 848  : 					set_file_enum (fp_out, language_strings, lang_type);

  0023a	8b 85 f4 df ff
	ff		 mov	 eax, DWORD PTR _lang_type$[ebp]
  00240	50		 push	 eax
  00241	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  00246	8b 4d 0c	 mov	 ecx, DWORD PTR _fp_out$[ebp]
  00249	51		 push	 ecx
  0024a	e8 00 00 00 00	 call	 ?set_file_enum@@YGXPAU_iobuf@@QAPBDH@Z ; set_file_enum

; 849  : 
; 850  : 					if (get_next_file_translation (fp, buffer, BUFFER_SIZE) == TRUE)

  0024f	68 00 20 00 00	 push	 8192			; 00002000H
  00254	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0025a	50		 push	 eax
  0025b	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  0025e	51		 push	 ecx
  0025f	e8 00 00 00 00	 call	 ?get_next_file_translation@@YGHPAU_iobuf@@PADH@Z ; get_next_file_translation
  00264	83 f8 01	 cmp	 eax, 1
  00267	75 26		 jne	 SHORT $LN22@preprocess

; 851  : 					{
; 852  : 						fprintf (fp_out, buffer);

  00269	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0026f	50		 push	 eax
  00270	8b 4d 0c	 mov	 ecx, DWORD PTR _fp_out$[ebp]
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 _fprintf
  00279	83 c4 08	 add	 esp, 8

; 853  : 						fprintf (fp_out, ":");

  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3@
  00281	8b 45 0c	 mov	 eax, DWORD PTR _fp_out$[ebp]
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 _fprintf
  0028a	83 c4 08	 add	 esp, 8

; 854  : 					}
; 855  : 					else

  0028d	eb 14		 jmp	 SHORT $LN23@preprocess
$LN22@preprocess:

; 856  : 					{
; 857  : 						debug_fatal("PRE_LANG: failed to acquire %s translation.", buffer);

  0028f	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00295	50		 push	 eax
  00296	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BEIDLBFF@PRE_LANG?3?5failed?5to?5acquire?5?$CFs?5@
  0029b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002a0	83 c4 08	 add	 esp, 8
$LN23@preprocess:

; 858  : 					}
; 859  : 				}

  002a3	e9 60 ff ff ff	 jmp	 $LN9@preprocess
$LN10@preprocess:

; 860  : 
; 861  : 				count++;

  002a8	8b 85 f8 df ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  002ae	83 c0 01	 add	 eax, 1
  002b1	89 85 f8 df ff
	ff		 mov	 DWORD PTR _count$[ebp], eax

; 862  : 
; 863  : 				break;

  002b7	eb 2a		 jmp	 SHORT $LN4@preprocess
$LN24@preprocess:

; 864  : 			}
; 865  : 
; 866  : 			case FILE_TAG_END:
; 867  : 			{
; 868  : 				end = TRUE;

  002b9	c7 85 ec df ff
	ff 01 00 00 00	 mov	 DWORD PTR _end$[ebp], 1

; 869  : 
; 870  : 				fprintf (fp_out, "\n:END\n\n");

  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_07FMFGBJID@?6?3END?6?6@
  002c8	8b 45 0c	 mov	 eax, DWORD PTR _fp_out$[ebp]
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 _fprintf
  002d1	83 c4 08	 add	 esp, 8

; 871  : 
; 872  : 				break;

  002d4	eb 0d		 jmp	 SHORT $LN4@preprocess
$LN25@preprocess:

; 873  : 			}
; 874  : 
; 875  : 			default:
; 876  : 			{
; 877  : 				debug_fatal ("LANGUAGE.C: tag not matched!");

  002d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IOOLGBPP@LANGUAGE?4C?3?5tag?5not?5matched?$CB@
  002db	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002e0	83 c4 04	 add	 esp, 4
$LN4@preprocess:

; 878  : 			}
; 879  : 		}
; 880  : 	}

  002e3	e9 5a fd ff ff	 jmp	 $LN2@preprocess
$LN1@preprocess:

; 881  : }

  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx
  002eb	8b e5		 mov	 esp, ebp
  002ed	5d		 pop	 ebp
  002ee	c2 08 00	 ret	 8
  002f1	0f 1f 00	 npad	 3
$LN28@preprocess:
  002f4	00 00 00 00	 DD	 $LN13@preprocess
  002f8	00 00 00 00	 DD	 $LN24@preprocess
  002fc	00 00 00 00	 DD	 $LN14@preprocess
  00300	00 00 00 00	 DD	 $LN19@preprocess
  00304	00 00 00 00	 DD	 $LN25@preprocess
$LN27@preprocess:
  00308	00		 DB	 0
  00309	04		 DB	 4
  0030a	04		 DB	 4
  0030b	04		 DB	 4
  0030c	04		 DB	 4
  0030d	04		 DB	 4
  0030e	04		 DB	 4
  0030f	04		 DB	 4
  00310	04		 DB	 4
  00311	04		 DB	 4
  00312	04		 DB	 4
  00313	04		 DB	 4
  00314	04		 DB	 4
  00315	04		 DB	 4
  00316	04		 DB	 4
  00317	01		 DB	 1
  00318	04		 DB	 4
  00319	04		 DB	 4
  0031a	04		 DB	 4
  0031b	04		 DB	 4
  0031c	04		 DB	 4
  0031d	04		 DB	 4
  0031e	04		 DB	 4
  0031f	04		 DB	 4
  00320	04		 DB	 4
  00321	04		 DB	 4
  00322	04		 DB	 4
  00323	04		 DB	 4
  00324	04		 DB	 4
  00325	04		 DB	 4
  00326	04		 DB	 4
  00327	04		 DB	 4
  00328	04		 DB	 4
  00329	04		 DB	 4
  0032a	04		 DB	 4
  0032b	04		 DB	 4
  0032c	04		 DB	 4
  0032d	04		 DB	 4
  0032e	04		 DB	 4
  0032f	04		 DB	 4
  00330	04		 DB	 4
  00331	04		 DB	 4
  00332	04		 DB	 4
  00333	04		 DB	 4
  00334	04		 DB	 4
  00335	04		 DB	 4
  00336	04		 DB	 4
  00337	04		 DB	 4
  00338	04		 DB	 4
  00339	04		 DB	 4
  0033a	04		 DB	 4
  0033b	04		 DB	 4
  0033c	04		 DB	 4
  0033d	04		 DB	 4
  0033e	04		 DB	 4
  0033f	04		 DB	 4
  00340	04		 DB	 4
  00341	04		 DB	 4
  00342	04		 DB	 4
  00343	04		 DB	 4
  00344	04		 DB	 4
  00345	04		 DB	 4
  00346	04		 DB	 4
  00347	04		 DB	 4
  00348	04		 DB	 4
  00349	04		 DB	 4
  0034a	04		 DB	 4
  0034b	04		 DB	 4
  0034c	04		 DB	 4
  0034d	04		 DB	 4
  0034e	04		 DB	 4
  0034f	04		 DB	 4
  00350	04		 DB	 4
  00351	04		 DB	 4
  00352	04		 DB	 4
  00353	04		 DB	 4
  00354	04		 DB	 4
  00355	04		 DB	 4
  00356	04		 DB	 4
  00357	04		 DB	 4
  00358	04		 DB	 4
  00359	04		 DB	 4
  0035a	04		 DB	 4
  0035b	04		 DB	 4
  0035c	04		 DB	 4
  0035d	04		 DB	 4
  0035e	04		 DB	 4
  0035f	04		 DB	 4
  00360	04		 DB	 4
  00361	04		 DB	 4
  00362	04		 DB	 4
  00363	04		 DB	 4
  00364	04		 DB	 4
  00365	04		 DB	 4
  00366	04		 DB	 4
  00367	04		 DB	 4
  00368	04		 DB	 4
  00369	04		 DB	 4
  0036a	04		 DB	 4
  0036b	04		 DB	 4
  0036c	04		 DB	 4
  0036d	04		 DB	 4
  0036e	04		 DB	 4
  0036f	04		 DB	 4
  00370	04		 DB	 4
  00371	04		 DB	 4
  00372	04		 DB	 4
  00373	04		 DB	 4
  00374	04		 DB	 4
  00375	04		 DB	 4
  00376	04		 DB	 4
  00377	04		 DB	 4
  00378	04		 DB	 4
  00379	04		 DB	 4
  0037a	04		 DB	 4
  0037b	04		 DB	 4
  0037c	04		 DB	 4
  0037d	04		 DB	 4
  0037e	04		 DB	 4
  0037f	04		 DB	 4
  00380	04		 DB	 4
  00381	04		 DB	 4
  00382	04		 DB	 4
  00383	04		 DB	 4
  00384	04		 DB	 4
  00385	04		 DB	 4
  00386	04		 DB	 4
  00387	04		 DB	 4
  00388	04		 DB	 4
  00389	04		 DB	 4
  0038a	04		 DB	 4
  0038b	04		 DB	 4
  0038c	04		 DB	 4
  0038d	04		 DB	 4
  0038e	04		 DB	 4
  0038f	04		 DB	 4
  00390	04		 DB	 4
  00391	04		 DB	 4
  00392	04		 DB	 4
  00393	04		 DB	 4
  00394	04		 DB	 4
  00395	04		 DB	 4
  00396	04		 DB	 4
  00397	04		 DB	 4
  00398	04		 DB	 4
  00399	04		 DB	 4
  0039a	04		 DB	 4
  0039b	04		 DB	 4
  0039c	04		 DB	 4
  0039d	04		 DB	 4
  0039e	04		 DB	 4
  0039f	04		 DB	 4
  003a0	04		 DB	 4
  003a1	04		 DB	 4
  003a2	04		 DB	 4
  003a3	04		 DB	 4
  003a4	04		 DB	 4
  003a5	04		 DB	 4
  003a6	04		 DB	 4
  003a7	04		 DB	 4
  003a8	04		 DB	 4
  003a9	04		 DB	 4
  003aa	04		 DB	 4
  003ab	04		 DB	 4
  003ac	04		 DB	 4
  003ad	04		 DB	 4
  003ae	04		 DB	 4
  003af	04		 DB	 4
  003b0	04		 DB	 4
  003b1	04		 DB	 4
  003b2	04		 DB	 4
  003b3	04		 DB	 4
  003b4	04		 DB	 4
  003b5	04		 DB	 4
  003b6	04		 DB	 4
  003b7	04		 DB	 4
  003b8	04		 DB	 4
  003b9	04		 DB	 4
  003ba	04		 DB	 4
  003bb	04		 DB	 4
  003bc	04		 DB	 4
  003bd	04		 DB	 4
  003be	04		 DB	 4
  003bf	04		 DB	 4
  003c0	04		 DB	 4
  003c1	04		 DB	 4
  003c2	04		 DB	 4
  003c3	04		 DB	 4
  003c4	02		 DB	 2
  003c5	03		 DB	 3
?preprocess_language_file@@YGXPAU_iobuf@@0@Z ENDP	; preprocess_language_file
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?test_translation_list@@YGXXZ
_TEXT	SEGMENT
_count$ = -12						; size = 4
_alphabet_count$ = -8					; size = 4
_temp$ = -4						; size = 4
?test_translation_list@@YGXXZ PROC			; test_translation_list, COMDAT

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 653  : 	language_struct
; 654  : 		*temp;
; 655  : 		
; 656  : 	int
; 657  : 		alphabet_count = 0,

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _alphabet_count$[ebp], 0

; 658  : 		count = 0;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 659  : 
; 660  : 	temp = translation_list;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A ; translation_list
  0001c	89 45 fc	 mov	 DWORD PTR _temp$[ebp], eax
$LN2@test_trans:

; 661  : 
; 662  : 	while (temp != NULL)

  0001f	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  00023	74 5e		 je	 SHORT $LN1@test_trans

; 663  : 	{
; 664  : 		if (alphabet_pointers [alphabet_count] == temp)

  00025	8b 45 f8	 mov	 eax, DWORD PTR _alphabet_count$[ebp]
  00028	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A[eax*4]
  0002f	3b 4d fc	 cmp	 ecx, DWORD PTR _temp$[ebp]
  00032	75 1d		 jne	 SHORT $LN4@test_trans

; 665  : 		{
; 666  : 			debug_filtered_log ("\n~~~ ALPHABET_POINTER  %c ~~~\n", (alphabet_count + 64));

  00034	8b 45 f8	 mov	 eax, DWORD PTR _alphabet_count$[ebp]
  00037	83 c0 40	 add	 eax, 64			; 00000040H
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JBPKIFO@?6?$HO?$HO?$HO?5ALPHABET_POINTER?5?5?$CFc?5?$HO?$HO?$HO?6@
  00040	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  00045	83 c4 08	 add	 esp, 8

; 667  : 	
; 668  : 			alphabet_count++;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _alphabet_count$[ebp]
  0004b	83 c0 01	 add	 eax, 1
  0004e	89 45 f8	 mov	 DWORD PTR _alphabet_count$[ebp], eax
$LN4@test_trans:

; 669  : 		}
; 670  : 
; 671  : 		debug_filtered_log ("%3d:  %s  :  %s", count, temp->tag, temp->translation);

  00051	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	51		 push	 ecx
  00058	8b 55 fc	 mov	 edx, DWORD PTR _temp$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _count$[ebp]
  00061	51		 push	 ecx
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DNBFGAPM@?$CF3d?3?5?5?$CFs?5?5?3?5?5?$CFs@
  00067	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 672  : 		
; 673  : 		temp = temp->next;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  00072	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00075	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 674  : 
; 675  : 		count++;

  00078	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  0007b	83 c0 01	 add	 eax, 1
  0007e	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 676  : 	}

  00081	eb 9c		 jmp	 SHORT $LN2@test_trans
$LN1@test_trans:

; 677  : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?test_translation_list@@YGXXZ ENDP			; test_translation_list
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?get_next_file_translation@@YGHPAU_iobuf@@PADH@Z
_TEXT	SEGMENT
_j$1 = -8212						; size = 4
_count$ = -8208						; size = 4
_character$ = -8204					; size = 4
_start$ = -8200						; size = 4
_i$ = -8196						; size = 4
_temp$ = -8192						; size = 8192
_file_ptr$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
?get_next_file_translation@@YGHPAU_iobuf@@PADH@Z PROC	; get_next_file_translation, COMDAT

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 14 22 00 00	 mov	 eax, 8724		; 00002214H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 685  : 
; 686  : 	char
; 687  : 		temp [BUFFER_SIZE];
; 688  : 		
; 689  : 	int
; 690  : 		i,
; 691  : 		start,
; 692  : 		character,
; 693  : 		count;
; 694  : 
; 695  : 	memset (temp, 0, size);

  00010	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00013	50		 push	 eax
  00014	6a 00		 push	 0
  00016	8d 8d 00 e0 ff
	ff		 lea	 ecx, DWORD PTR _temp$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 _memset
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 696  : 	memset (buffer, 0, size);

  00025	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 697  : 
; 698  : 	count = 0;

  00037	c7 85 f0 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$[ebp], 0
$LN2@get_next_f:

; 699  : 
; 700  : 	// get the text
; 701  : 
; 702  : 	while (((character = fgetc (file_ptr)) != EOF) && (count < BUFFER_SIZE))

  00041	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 85 f4 df ff
	ff		 mov	 DWORD PTR _character$[ebp], eax
  00054	83 bd f4 df ff
	ff ff		 cmp	 DWORD PTR _character$[ebp], -1
  0005b	74 76		 je	 SHORT $LN3@get_next_f
  0005d	81 bd f0 df ff
	ff 00 20 00 00	 cmp	 DWORD PTR _count$[ebp], 8192 ; 00002000H
  00067	7d 6a		 jge	 SHORT $LN3@get_next_f

; 703  : 	{
; 704  : 		// copy to next tab - but ignore leading white space inc. tabs (ASCII value 9)
; 705  : 
; 706  : 		if ((character == '\t') || (character == ':'))

  00069	83 bd f4 df ff
	ff 09		 cmp	 DWORD PTR _character$[ebp], 9
  00070	74 09		 je	 SHORT $LN4@get_next_f
  00072	83 bd f4 df ff
	ff 3a		 cmp	 DWORD PTR _character$[ebp], 58 ; 0000003aH
  00079	75 31		 jne	 SHORT $LN15@get_next_f
$LN4@get_next_f:

; 707  : 		{
; 708  : 			while ((character = fgetc (file_ptr)) == '\t')

  0007b	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0007e	50		 push	 eax
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00085	83 c4 04	 add	 esp, 4
  00088	89 85 f4 df ff
	ff		 mov	 DWORD PTR _character$[ebp], eax
  0008e	83 bd f4 df ff
	ff 09		 cmp	 DWORD PTR _character$[ebp], 9
  00095	75 02		 jne	 SHORT $LN5@get_next_f

; 709  : 			{
; 710  : 			}

  00097	eb e2		 jmp	 SHORT $LN4@get_next_f
$LN5@get_next_f:

; 711  : 
; 712  : 			fseek (file_ptr, -1, SEEK_CUR);

  00099	6a 01		 push	 1
  0009b	6a ff		 push	 -1
  0009d	8b 45 08	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 713  : 
; 714  : 			break;

  000aa	eb 27		 jmp	 SHORT $LN3@get_next_f
$LN15@get_next_f:

; 715  : 		}
; 716  : 		
; 717  : 		temp [count++] = character;

  000ac	8b 85 f0 df ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  000b2	8a 8d f4 df ff
	ff		 mov	 cl, BYTE PTR _character$[ebp]
  000b8	88 8c 05 00 e0
	ff ff		 mov	 BYTE PTR _temp$[ebp+eax], cl
  000bf	8b 95 f0 df ff
	ff		 mov	 edx, DWORD PTR _count$[ebp]
  000c5	83 c2 01	 add	 edx, 1
  000c8	89 95 f0 df ff
	ff		 mov	 DWORD PTR _count$[ebp], edx

; 718  : 	}

  000ce	e9 6e ff ff ff	 jmp	 $LN2@get_next_f
$LN3@get_next_f:

; 719  : 
; 720  : 	// get length and start (after white space) of string
; 721  : 
; 722  : 	count = strlen (temp) - 1;

  000d3	8d 85 00 e0 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _strlen
  000df	83 c4 04	 add	 esp, 4
  000e2	83 e8 01	 sub	 eax, 1
  000e5	89 85 f0 df ff
	ff		 mov	 DWORD PTR _count$[ebp], eax

; 723  : 
; 724  : 	for (i = 0; i <= count; i++)

  000eb	c7 85 fc df ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  000f5	eb 0f		 jmp	 SHORT $LN8@get_next_f
$LN6@get_next_f:
  000f7	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000fd	83 c0 01	 add	 eax, 1
  00100	89 85 fc df ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN8@get_next_f:
  00106	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0010c	3b 85 f0 df ff
	ff		 cmp	 eax, DWORD PTR _count$[ebp]
  00112	7f 36		 jg	 SHORT $LN7@get_next_f

; 725  : 	{
; 726  : 		if ((temp [i] != ' ') || (temp [i] != '\t'))

  00114	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0011a	0f b6 8c 05 00
	e0 ff ff	 movzx	 ecx, BYTE PTR _temp$[ebp+eax]
  00122	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00125	75 13		 jne	 SHORT $LN18@get_next_f
  00127	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0012d	0f b6 8c 05 00
	e0 ff ff	 movzx	 ecx, BYTE PTR _temp$[ebp+eax]
  00135	83 f9 09	 cmp	 ecx, 9
  00138	74 0e		 je	 SHORT $LN17@get_next_f
$LN18@get_next_f:

; 727  : 		{
; 728  : 			start = i;

  0013a	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00140	89 85 f8 df ff
	ff		 mov	 DWORD PTR _start$[ebp], eax

; 729  : 
; 730  : 			break;

  00146	eb 02		 jmp	 SHORT $LN7@get_next_f
$LN17@get_next_f:

; 731  : 		}
; 732  : 	}

  00148	eb ad		 jmp	 SHORT $LN6@get_next_f
$LN7@get_next_f:

; 733  : 
; 734  : 	// remove leading and trailing white space - including tabs (ASCII value 9)
; 735  : 
; 736  : 	for (i = count; i >= start; i--)

  0014a	8b 85 f0 df ff
	ff		 mov	 eax, DWORD PTR _count$[ebp]
  00150	89 85 fc df ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
  00156	eb 0f		 jmp	 SHORT $LN11@get_next_f
$LN9@get_next_f:
  00158	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0015e	83 e8 01	 sub	 eax, 1
  00161	89 85 fc df ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN11@get_next_f:
  00167	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0016d	3b 85 f8 df ff
	ff		 cmp	 eax, DWORD PTR _start$[ebp]
  00173	7c 6d		 jl	 SHORT $LN10@get_next_f

; 737  : 	{
; 738  : 		if (! ((temp [i] == ' ') || (temp [i] == '\t')) )

  00175	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0017b	0f b6 8c 05 00
	e0 ff ff	 movzx	 ecx, BYTE PTR _temp$[ebp+eax]
  00183	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00186	74 55		 je	 SHORT $LN19@get_next_f
  00188	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0018e	0f b6 8c 05 00
	e0 ff ff	 movzx	 ecx, BYTE PTR _temp$[ebp+eax]
  00196	83 f9 09	 cmp	 ecx, 9
  00199	74 42		 je	 SHORT $LN19@get_next_f

; 739  : 		{
; 740  : 			int
; 741  : 				j;
; 742  : 
; 743  : 			for (j = i; j >= 0; j--)

  0019b	8b 85 fc df ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  001a1	89 85 ec df ff
	ff		 mov	 DWORD PTR _j$1[ebp], eax
  001a7	eb 0f		 jmp	 SHORT $LN14@get_next_f
$LN12@get_next_f:
  001a9	8b 85 ec df ff
	ff		 mov	 eax, DWORD PTR _j$1[ebp]
  001af	83 e8 01	 sub	 eax, 1
  001b2	89 85 ec df ff
	ff		 mov	 DWORD PTR _j$1[ebp], eax
$LN14@get_next_f:
  001b8	83 bd ec df ff
	ff 00		 cmp	 DWORD PTR _j$1[ebp], 0
  001bf	7c 1a		 jl	 SHORT $LN13@get_next_f

; 744  : 			{
; 745  : 				buffer [j] = temp [j];

  001c1	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  001c4	03 85 ec df ff
	ff		 add	 eax, DWORD PTR _j$1[ebp]
  001ca	8b 8d ec df ff
	ff		 mov	 ecx, DWORD PTR _j$1[ebp]
  001d0	8a 94 0d 00 e0
	ff ff		 mov	 dl, BYTE PTR _temp$[ebp+ecx]
  001d7	88 10		 mov	 BYTE PTR [eax], dl

; 746  : 			}

  001d9	eb ce		 jmp	 SHORT $LN12@get_next_f
$LN13@get_next_f:

; 747  : 			
; 748  : 			break;

  001db	eb 05		 jmp	 SHORT $LN10@get_next_f
$LN19@get_next_f:

; 749  : 		}
; 750  : 	}	

  001dd	e9 76 ff ff ff	 jmp	 $LN9@get_next_f
$LN10@get_next_f:

; 751  : 	
; 752  : 	strcat (buffer, "\n");

  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  001e7	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 _strcat
  001f0	83 c4 08	 add	 esp, 8

; 753  : 	
; 754  : 	#if DEBUG_MODULE
; 755  : 		debug_filtered_log ("FILE_TAG: get_next_file_translation = %s, strlen (%d)", buffer, strlen (buffer));
; 756  : 	#endif
; 757  : 
; 758  : 	return TRUE;

  001f3	b8 01 00 00 00	 mov	 eax, 1

; 759  : }

  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	5b		 pop	 ebx
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c2 0c 00	 ret	 12			; 0000000cH
?get_next_file_translation@@YGHPAU_iobuf@@PADH@Z ENDP	; get_next_file_translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?initialise_language_file@@YGXPAU_iobuf@@@Z
_TEXT	SEGMENT
tv74 = -8724						; size = 4
_end$ = -8208						; size = 4
_lang_type$ = -8204					; size = 4
_buf$ = -8200						; size = 8192
_tag$ = -8						; size = 4
_lang$ = -4						; size = 4
_fp$ = 8						; size = 4
?initialise_language_file@@YGXPAU_iobuf@@@Z PROC	; initialise_language_file, COMDAT

; 322  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 14 22 00 00	 mov	 eax, 8724		; 00002214H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 323  : 	language_struct
; 324  : 		*lang;
; 325  : 
; 326  : 	file_tags
; 327  : 		tag;
; 328  : 		
; 329  : 	char
; 330  : 		buf [BUFFER_SIZE];
; 331  : 				
; 332  : 	int
; 333  : 		lang_type,
; 334  : 		end = 0;

  00010	c7 85 f0 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _end$[ebp], 0

; 335  : 		
; 336  : 	ASSERT (fp);

  0001a	83 7d 08 00	 cmp	 DWORD PTR _fp$[ebp], 0
  0001e	75 18		 jne	 SHORT $LN2@initialise
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_language_file@@YGXPAU_iobuf@@@Z@4JA
  00025	83 c0 0e	 add	 eax, 14			; 0000000eH
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02GDNLOIIJ@fp@
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@initialise:

; 337  : 
; 338  : 	// read entries
; 339  : 	while (!end)

  00038	83 bd f0 df ff
	ff 00		 cmp	 DWORD PTR _end$[ebp], 0
  0003f	0f 85 0d 03 00
	00		 jne	 $LN3@initialise

; 340  : 	{
; 341  : 		tag = (file_tags) get_next_file_tag (fp, application_tag_strings, FILE_TAG_APPLICATION_LAST_TAG);

  00045	68 af 00 00 00	 push	 175			; 000000afH
  0004a	68 00 00 00 00	 push	 OFFSET ?application_tag_strings@@3PAPBDA ; application_tag_strings
  0004f	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?get_next_file_tag@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_tag
  00058	89 45 f8	 mov	 DWORD PTR _tag$[ebp], eax

; 342  : 
; 343  : 		switch (tag)

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _tag$[ebp]
  0005e	89 85 ec dd ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  00064	8b 8d ec dd ff
	ff		 mov	 ecx, DWORD PTR tv74[ebp]
  0006a	83 c1 19	 add	 ecx, 25			; 00000019H
  0006d	89 8d ec dd ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
  00073	81 bd ec dd ff
	ff bd 00 00 00	 cmp	 DWORD PTR tv74[ebp], 189 ; 000000bdH
  0007d	0f 87 ca 02 00
	00		 ja	 $LN4@initialise
  00083	8b 95 ec dd ff
	ff		 mov	 edx, DWORD PTR tv74[ebp]
  00089	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN30@initialise[edx]
  00090	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN31@initialise[eax*4]
$LN11@initialise:

; 344  : 		{	
; 345  : 			case FILE_TAG_START:
; 346  : 			{		
; 347  : 				continue;

  00097	eb 9f		 jmp	 SHORT $LN2@initialise
$LN12@initialise:

; 348  : 			}
; 349  : 			case FILE_TAG_TRANSLATION:
; 350  : 			{
; 351  : 				// get tag & malloc char* array for translations
; 352  : 				if( get_next_file_string (fp, buf, BUFFER_SIZE) == 1)

  00099	68 00 20 00 00	 push	 8192			; 00002000H
  0009e	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ?get_next_file_string@@YGHPAU_iobuf@@PADH@Z ; get_next_file_string
  000ae	83 f8 01	 cmp	 eax, 1
  000b1	75 3c		 jne	 SHORT $LN13@initialise

; 353  : 				{
; 354  : 					lang = initialise_translation ();

  000b3	e8 00 00 00 00	 call	 ?initialise_translation@@YGPAULANGUAGE_STRUCT@@XZ ; initialise_translation
  000b8	89 45 fc	 mov	 DWORD PTR _lang$[ebp], eax

; 355  : 
; 356  : 					lang->tag = (char*) safe_malloc( sizeof(char) * (strlen(buf) + 1) );

  000bb	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _strlen
  000c7	83 c4 04	 add	 esp, 4
  000ca	83 c0 01	 add	 eax, 1
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  000d6	89 01		 mov	 DWORD PTR [ecx], eax

; 357  : 
; 358  : 					strcpy(lang->tag, buf);

  000d8	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000de	50		 push	 eax
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  000e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 _strcpy
  000ea	83 c4 08	 add	 esp, 8

; 359  : 				}
; 360  : 				else

  000ed	eb 0d		 jmp	 SHORT $LN14@initialise
$LN13@initialise:

; 361  : 				{
; 362  : 					debug_fatal("LANGUAGE: initialise: failed to acquire language tag");

  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@IAEHEEOF@LANGUAGE?3?5initialise?3?5failed?5to@
  000f4	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000f9	83 c4 04	 add	 esp, 4
$LN14@initialise:

; 363  : 				}
; 364  : 				
; 365  : 				// get enum until correct language is found
; 366  : 				lang_type = get_next_file_enum (fp, language_strings, NUM_LANGUAGES);

  000fc	6a 07		 push	 7
  000fe	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  00103	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_enum
  0010c	89 85 f4 df ff
	ff		 mov	 DWORD PTR _lang_type$[ebp], eax
$LN6@initialise:

; 367  : 
; 368  : 				while (lang_type != NUM_LANGUAGES)

  00112	83 bd f4 df ff
	ff 07		 cmp	 DWORD PTR _lang_type$[ebp], 7
  00119	0f 84 a3 00 00
	00		 je	 $LN7@initialise

; 369  : 				{
; 370  : 					if (lang_type == get_global_current_language ())

  0011f	8b 85 f4 df ff
	ff		 mov	 eax, DWORD PTR _lang_type$[ebp]
  00125	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4
  0012b	75 65		 jne	 SHORT $LN15@initialise

; 371  : 					{
; 372  : 						// if the string is present
; 373  : 						if( get_next_file_string (fp, buf, BUFFER_SIZE) == 1)

  0012d	68 00 20 00 00	 push	 8192			; 00002000H
  00132	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00138	50		 push	 eax
  00139	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 ?get_next_file_string@@YGHPAU_iobuf@@PADH@Z ; get_next_file_string
  00142	83 f8 01	 cmp	 eax, 1
  00145	75 36		 jne	 SHORT $LN17@initialise

; 374  : 						{
; 375  : 							lang->translation = (char*) safe_malloc(sizeof(char) * (strlen(buf) +1) );

  00147	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _strlen
  00153	83 c4 04	 add	 esp, 4
  00156	83 c0 01	 add	 eax, 1
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  00162	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 376  : 		
; 377  : 							strcpy(lang->translation, buf);

  00165	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0016b	50		 push	 eax
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  0016f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00172	52		 push	 edx
  00173	e8 00 00 00 00	 call	 _strcpy
  00178	83 c4 08	 add	 esp, 8

; 378  : 						}
; 379  : 						else

  0017b	eb 13		 jmp	 SHORT $LN18@initialise
$LN17@initialise:

; 380  : 						{
; 381  : 							debug_fatal("LANGUAGE: failed to acquire %s translation.", lang->tag);

  0017d	8b 45 fc	 mov	 eax, DWORD PTR _lang$[ebp]
  00180	8b 08		 mov	 ecx, DWORD PTR [eax]
  00182	51		 push	 ecx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BNKPFMMJ@LANGUAGE?3?5failed?5to?5acquire?5?$CFs?5@
  00188	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0018d	83 c4 08	 add	 esp, 8
$LN18@initialise:

; 382  : 						}
; 383  : 					}
; 384  : 					else

  00190	eb 15		 jmp	 SHORT $LN16@initialise
$LN15@initialise:

; 385  : 					{
; 386  : 						get_next_file_string (fp, buf, BUFFER_SIZE);

  00192	68 00 20 00 00	 push	 8192			; 00002000H
  00197	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0019d	50		 push	 eax
  0019e	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  001a1	51		 push	 ecx
  001a2	e8 00 00 00 00	 call	 ?get_next_file_string@@YGHPAU_iobuf@@PADH@Z ; get_next_file_string
$LN16@initialise:

; 387  : 					}
; 388  : 
; 389  : 					lang_type = get_next_file_enum (fp, language_strings, NUM_LANGUAGES);

  001a7	6a 07		 push	 7
  001a9	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  001ae	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_enum
  001b7	89 85 f4 df ff
	ff		 mov	 DWORD PTR _lang_type$[ebp], eax

; 390  : 				}

  001bd	e9 50 ff ff ff	 jmp	 $LN6@initialise
$LN7@initialise:

; 391  : 
; 392  : 				end = FALSE;

  001c2	c7 85 f0 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _end$[ebp], 0

; 393  : 
; 394  : 				if (lang->translation)

  001cc	8b 45 fc	 mov	 eax, DWORD PTR _lang$[ebp]
  001cf	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  001d3	74 09		 je	 SHORT $LN19@initialise

; 395  : 				{
; 396  : 					insert_translation (lang);

  001d5	8b 45 fc	 mov	 eax, DWORD PTR _lang$[ebp]
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ?insert_translation@@YGXPAULANGUAGE_STRUCT@@@Z ; insert_translation
$LN19@initialise:

; 397  : 				}
; 398  : 
; 399  : 				break;

  001de	e9 6a 01 00 00	 jmp	 $LN4@initialise
$LN20@initialise:

; 400  : 			}
; 401  : 
; 402  : 			case FILE_TAG_TRANSLATION_PARAGRAPH:
; 403  : 			{
; 404  : 				// get tag & malloc char* array for translations
; 405  : 				if( get_next_file_string (fp, buf, BUFFER_SIZE) == 1)

  001e3	68 00 20 00 00	 push	 8192			; 00002000H
  001e8	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001ee	50		 push	 eax
  001ef	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  001f2	51		 push	 ecx
  001f3	e8 00 00 00 00	 call	 ?get_next_file_string@@YGHPAU_iobuf@@PADH@Z ; get_next_file_string
  001f8	83 f8 01	 cmp	 eax, 1
  001fb	75 3c		 jne	 SHORT $LN21@initialise

; 406  : 				{
; 407  : 					lang = initialise_translation ();

  001fd	e8 00 00 00 00	 call	 ?initialise_translation@@YGPAULANGUAGE_STRUCT@@XZ ; initialise_translation
  00202	89 45 fc	 mov	 DWORD PTR _lang$[ebp], eax

; 408  : 
; 409  : 					lang->tag = (char*) safe_malloc( sizeof(char) * (strlen(buf) + 1) );

  00205	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 _strlen
  00211	83 c4 04	 add	 esp, 4
  00214	83 c0 01	 add	 eax, 1
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0021d	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  00220	89 01		 mov	 DWORD PTR [ecx], eax

; 410  : 
; 411  : 					strcpy(lang->tag, buf);

  00222	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00228	50		 push	 eax
  00229	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  0022c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0022e	52		 push	 edx
  0022f	e8 00 00 00 00	 call	 _strcpy
  00234	83 c4 08	 add	 esp, 8

; 412  : 				}
; 413  : 				else

  00237	eb 0d		 jmp	 SHORT $LN22@initialise
$LN21@initialise:

; 414  : 				{
; 415  : 					debug_fatal("LANGUAGE: initialise: failed to acquire language tag");

  00239	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@IAEHEEOF@LANGUAGE?3?5initialise?3?5failed?5to@
  0023e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00243	83 c4 04	 add	 esp, 4
$LN22@initialise:

; 416  : 				}
; 417  : 				
; 418  : 				// get enum until correct language is found
; 419  : 				lang_type = get_next_file_enum (fp, language_strings, NUM_LANGUAGES);

  00246	6a 07		 push	 7
  00248	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  0024d	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_enum
  00256	89 85 f4 df ff
	ff		 mov	 DWORD PTR _lang_type$[ebp], eax
$LN8@initialise:

; 420  : 
; 421  : 				while (lang_type != NUM_LANGUAGES)

  0025c	83 bd f4 df ff
	ff 07		 cmp	 DWORD PTR _lang_type$[ebp], 7
  00263	0f 84 c5 00 00
	00		 je	 $LN9@initialise

; 422  : 				{
; 423  : 
; 424  : 					if (lang_type == get_global_current_language ())

  00269	8b 85 f4 df ff
	ff		 mov	 eax, DWORD PTR _lang_type$[ebp]
  0026f	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4
  00275	75 76		 jne	 SHORT $LN23@initialise

; 425  : 					{
; 426  : 						// if the string is present
; 427  : 						if( get_next_file_paragraph (fp, buf, BUFFER_SIZE) == 1)

  00277	68 00 20 00 00	 push	 8192			; 00002000H
  0027c	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00282	50		 push	 eax
  00283	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  00286	51		 push	 ecx
  00287	e8 00 00 00 00	 call	 ?get_next_file_paragraph@@YGHPAU_iobuf@@PADH@Z ; get_next_file_paragraph
  0028c	83 f8 01	 cmp	 eax, 1
  0028f	75 47		 jne	 SHORT $LN25@initialise

; 428  : 						{
; 429  : 							lang->translation = (char*) safe_malloc(sizeof(char) * (strlen(buf) +1) );

  00291	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00297	50		 push	 eax
  00298	e8 00 00 00 00	 call	 _strlen
  0029d	83 c4 04	 add	 esp, 4
  002a0	83 c0 01	 add	 eax, 1
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  002a9	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  002ac	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 430  : 		
; 431  : 							strcpy(lang->translation, buf);

  002af	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  002b5	50		 push	 eax
  002b6	8b 4d fc	 mov	 ecx, DWORD PTR _lang$[ebp]
  002b9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002bc	52		 push	 edx
  002bd	e8 00 00 00 00	 call	 _strcpy
  002c2	83 c4 08	 add	 esp, 8

; 432  : 		
; 433  : 							fseek (fp, +1, SEEK_CUR);

  002c5	6a 01		 push	 1
  002c7	6a 01		 push	 1
  002c9	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  002cc	50		 push	 eax
  002cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  002d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 434  : 						}
; 435  : 						else

  002d6	eb 13		 jmp	 SHORT $LN26@initialise
$LN25@initialise:

; 436  : 						{
; 437  : 							debug_fatal("LANGUAGE: failed to acquire %s translation.", lang->tag);

  002d8	8b 45 fc	 mov	 eax, DWORD PTR _lang$[ebp]
  002db	8b 08		 mov	 ecx, DWORD PTR [eax]
  002dd	51		 push	 ecx
  002de	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BNKPFMMJ@LANGUAGE?3?5failed?5to?5acquire?5?$CFs?5@
  002e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002e8	83 c4 08	 add	 esp, 8
$LN26@initialise:

; 438  : 						}
; 439  : 					}
; 440  : 					else

  002eb	eb 26		 jmp	 SHORT $LN24@initialise
$LN23@initialise:

; 441  : 					{
; 442  : 						get_next_file_paragraph (fp, buf, BUFFER_SIZE);

  002ed	68 00 20 00 00	 push	 8192			; 00002000H
  002f2	8d 85 f8 df ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  002f8	50		 push	 eax
  002f9	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  002fc	51		 push	 ecx
  002fd	e8 00 00 00 00	 call	 ?get_next_file_paragraph@@YGHPAU_iobuf@@PADH@Z ; get_next_file_paragraph

; 443  : 	
; 444  : 						fseek (fp, +1, SEEK_CUR);

  00302	6a 01		 push	 1
  00304	6a 01		 push	 1
  00306	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00309	50		 push	 eax
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00310	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@initialise:

; 445  : 					}
; 446  : 						
; 447  : 					lang_type = get_next_file_enum (fp, language_strings, NUM_LANGUAGES);

  00313	6a 07		 push	 7
  00315	68 00 00 00 00	 push	 OFFSET ?language_strings@@3PAPBDA ; language_strings
  0031a	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 ?get_next_file_enum@@YGHPAU_iobuf@@QAPBDH@Z ; get_next_file_enum
  00323	89 85 f4 df ff
	ff		 mov	 DWORD PTR _lang_type$[ebp], eax

; 448  : 				}

  00329	e9 2e ff ff ff	 jmp	 $LN8@initialise
$LN9@initialise:

; 449  : 
; 450  : 				end = FALSE;

  0032e	c7 85 f0 df ff
	ff 00 00 00 00	 mov	 DWORD PTR _end$[ebp], 0

; 451  : 
; 452  : 				insert_translation (lang);

  00338	8b 45 fc	 mov	 eax, DWORD PTR _lang$[ebp]
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ?insert_translation@@YGXPAULANGUAGE_STRUCT@@@Z ; insert_translation

; 453  : 
; 454  : 				break;

  00341	eb 0a		 jmp	 SHORT $LN4@initialise
$LN27@initialise:

; 455  : 			}
; 456  : 
; 457  : 			case FILE_TAG_END:
; 458  : 			{
; 459  : 				end = TRUE;

  00343	c7 85 f0 df ff
	ff 01 00 00 00	 mov	 DWORD PTR _end$[ebp], 1
$LN4@initialise:

; 460  : 			}
; 461  : 		}
; 462  : 	}

  0034d	e9 e6 fc ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 463  : 
; 464  : 	safe_fclose(fp);

  00352	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose

; 465  : }

  0035b	5f		 pop	 edi
  0035c	5e		 pop	 esi
  0035d	5b		 pop	 ebx
  0035e	8b e5		 mov	 esp, ebp
  00360	5d		 pop	 ebp
  00361	c2 04 00	 ret	 4
$LN31@initialise:
  00364	00 00 00 00	 DD	 $LN11@initialise
  00368	00 00 00 00	 DD	 $LN27@initialise
  0036c	00 00 00 00	 DD	 $LN12@initialise
  00370	00 00 00 00	 DD	 $LN20@initialise
  00374	00 00 00 00	 DD	 $LN4@initialise
$LN30@initialise:
  00378	00		 DB	 0
  00379	04		 DB	 4
  0037a	04		 DB	 4
  0037b	04		 DB	 4
  0037c	04		 DB	 4
  0037d	04		 DB	 4
  0037e	04		 DB	 4
  0037f	04		 DB	 4
  00380	04		 DB	 4
  00381	04		 DB	 4
  00382	04		 DB	 4
  00383	04		 DB	 4
  00384	04		 DB	 4
  00385	04		 DB	 4
  00386	04		 DB	 4
  00387	01		 DB	 1
  00388	04		 DB	 4
  00389	04		 DB	 4
  0038a	04		 DB	 4
  0038b	04		 DB	 4
  0038c	04		 DB	 4
  0038d	04		 DB	 4
  0038e	04		 DB	 4
  0038f	04		 DB	 4
  00390	04		 DB	 4
  00391	04		 DB	 4
  00392	04		 DB	 4
  00393	04		 DB	 4
  00394	04		 DB	 4
  00395	04		 DB	 4
  00396	04		 DB	 4
  00397	04		 DB	 4
  00398	04		 DB	 4
  00399	04		 DB	 4
  0039a	04		 DB	 4
  0039b	04		 DB	 4
  0039c	04		 DB	 4
  0039d	04		 DB	 4
  0039e	04		 DB	 4
  0039f	04		 DB	 4
  003a0	04		 DB	 4
  003a1	04		 DB	 4
  003a2	04		 DB	 4
  003a3	04		 DB	 4
  003a4	04		 DB	 4
  003a5	04		 DB	 4
  003a6	04		 DB	 4
  003a7	04		 DB	 4
  003a8	04		 DB	 4
  003a9	04		 DB	 4
  003aa	04		 DB	 4
  003ab	04		 DB	 4
  003ac	04		 DB	 4
  003ad	04		 DB	 4
  003ae	04		 DB	 4
  003af	04		 DB	 4
  003b0	04		 DB	 4
  003b1	04		 DB	 4
  003b2	04		 DB	 4
  003b3	04		 DB	 4
  003b4	04		 DB	 4
  003b5	04		 DB	 4
  003b6	04		 DB	 4
  003b7	04		 DB	 4
  003b8	04		 DB	 4
  003b9	04		 DB	 4
  003ba	04		 DB	 4
  003bb	04		 DB	 4
  003bc	04		 DB	 4
  003bd	04		 DB	 4
  003be	04		 DB	 4
  003bf	04		 DB	 4
  003c0	04		 DB	 4
  003c1	04		 DB	 4
  003c2	04		 DB	 4
  003c3	04		 DB	 4
  003c4	04		 DB	 4
  003c5	04		 DB	 4
  003c6	04		 DB	 4
  003c7	04		 DB	 4
  003c8	04		 DB	 4
  003c9	04		 DB	 4
  003ca	04		 DB	 4
  003cb	04		 DB	 4
  003cc	04		 DB	 4
  003cd	04		 DB	 4
  003ce	04		 DB	 4
  003cf	04		 DB	 4
  003d0	04		 DB	 4
  003d1	04		 DB	 4
  003d2	04		 DB	 4
  003d3	04		 DB	 4
  003d4	04		 DB	 4
  003d5	04		 DB	 4
  003d6	04		 DB	 4
  003d7	04		 DB	 4
  003d8	04		 DB	 4
  003d9	04		 DB	 4
  003da	04		 DB	 4
  003db	04		 DB	 4
  003dc	04		 DB	 4
  003dd	04		 DB	 4
  003de	04		 DB	 4
  003df	04		 DB	 4
  003e0	04		 DB	 4
  003e1	04		 DB	 4
  003e2	04		 DB	 4
  003e3	04		 DB	 4
  003e4	04		 DB	 4
  003e5	04		 DB	 4
  003e6	04		 DB	 4
  003e7	04		 DB	 4
  003e8	04		 DB	 4
  003e9	04		 DB	 4
  003ea	04		 DB	 4
  003eb	04		 DB	 4
  003ec	04		 DB	 4
  003ed	04		 DB	 4
  003ee	04		 DB	 4
  003ef	04		 DB	 4
  003f0	04		 DB	 4
  003f1	04		 DB	 4
  003f2	04		 DB	 4
  003f3	04		 DB	 4
  003f4	04		 DB	 4
  003f5	04		 DB	 4
  003f6	04		 DB	 4
  003f7	04		 DB	 4
  003f8	04		 DB	 4
  003f9	04		 DB	 4
  003fa	04		 DB	 4
  003fb	04		 DB	 4
  003fc	04		 DB	 4
  003fd	04		 DB	 4
  003fe	04		 DB	 4
  003ff	04		 DB	 4
  00400	04		 DB	 4
  00401	04		 DB	 4
  00402	04		 DB	 4
  00403	04		 DB	 4
  00404	04		 DB	 4
  00405	04		 DB	 4
  00406	04		 DB	 4
  00407	04		 DB	 4
  00408	04		 DB	 4
  00409	04		 DB	 4
  0040a	04		 DB	 4
  0040b	04		 DB	 4
  0040c	04		 DB	 4
  0040d	04		 DB	 4
  0040e	04		 DB	 4
  0040f	04		 DB	 4
  00410	04		 DB	 4
  00411	04		 DB	 4
  00412	04		 DB	 4
  00413	04		 DB	 4
  00414	04		 DB	 4
  00415	04		 DB	 4
  00416	04		 DB	 4
  00417	04		 DB	 4
  00418	04		 DB	 4
  00419	04		 DB	 4
  0041a	04		 DB	 4
  0041b	04		 DB	 4
  0041c	04		 DB	 4
  0041d	04		 DB	 4
  0041e	04		 DB	 4
  0041f	04		 DB	 4
  00420	04		 DB	 4
  00421	04		 DB	 4
  00422	04		 DB	 4
  00423	04		 DB	 4
  00424	04		 DB	 4
  00425	04		 DB	 4
  00426	04		 DB	 4
  00427	04		 DB	 4
  00428	04		 DB	 4
  00429	04		 DB	 4
  0042a	04		 DB	 4
  0042b	04		 DB	 4
  0042c	04		 DB	 4
  0042d	04		 DB	 4
  0042e	04		 DB	 4
  0042f	04		 DB	 4
  00430	04		 DB	 4
  00431	04		 DB	 4
  00432	04		 DB	 4
  00433	04		 DB	 4
  00434	02		 DB	 2
  00435	03		 DB	 3
?initialise_language_file@@YGXPAU_iobuf@@@Z ENDP	; initialise_language_file
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?delete_translation@@YGXPAULANGUAGE_STRUCT@@0@Z
_TEXT	SEGMENT
_position$ = 8						; size = 4
_delete_me$ = 12					; size = 4
?delete_translation@@YGXPAULANGUAGE_STRUCT@@0@Z PROC	; delete_translation, COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 297  : 	if (position != NULL)

  00009	83 7d 08 00	 cmp	 DWORD PTR _position$[ebp], 0
  0000d	74 0c		 je	 SHORT $LN2@delete_tra

; 298  : 	{
; 299  : 		position->next = delete_me->next;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _delete_me$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN2@delete_tra:

; 300  : 	}
; 301  : 	
; 302  : 	if (delete_me->tag)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _delete_me$[ebp]
  0001e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00021	74 0b		 je	 SHORT $LN3@delete_tra

; 303  : 	{
; 304  : 		safe_free (delete_me->tag);

  00023	8b 45 0c	 mov	 eax, DWORD PTR _delete_me$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN3@delete_tra:

; 305  : 	}
; 306  : 
; 307  : 	if (delete_me->translation)

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _delete_me$[ebp]
  00031	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00035	74 0c		 je	 SHORT $LN4@delete_tra

; 308  : 	{
; 309  : 		safe_free (delete_me->translation);

  00037	8b 45 0c	 mov	 eax, DWORD PTR _delete_me$[ebp]
  0003a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN4@delete_tra:

; 310  : 	}
; 311  : 
; 312  : 	safe_free (delete_me);

  00043	8b 45 0c	 mov	 eax, DWORD PTR _delete_me$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 313  : 
; 314  : 	delete_me = NULL;

  0004c	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _delete_me$[ebp], 0

; 315  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?delete_translation@@YGXPAULANGUAGE_STRUCT@@0@Z ENDP	; delete_translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?insert_translation@@YGXPAULANGUAGE_STRUCT@@@Z
_TEXT	SEGMENT
_current$ = -8						; size = 4
_previous$ = -4						; size = 4
_insert_me$ = 8						; size = 4
?insert_translation@@YGXPAULANGUAGE_STRUCT@@@Z PROC	; insert_translation, COMDAT

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 229  : 	language_struct
; 230  : 		*previous,
; 231  : 		*current;
; 232  : 
; 233  : 	previous = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _previous$[ebp], 0

; 234  : 
; 235  : 	current = translation_list;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A ; translation_list
  00015	89 45 f8	 mov	 DWORD PTR _current$[ebp], eax

; 236  : 
; 237  : 	if (current != NULL)

  00018	83 7d f8 00	 cmp	 DWORD PTR _current$[ebp], 0
  0001c	0f 84 ed 00 00
	00		 je	 $LN4@insert_tra
$LN2@insert_tra:

; 238  : 	{
; 239  : 		while ((current != NULL) && (stricmp (insert_me->tag, current->tag) > 0))

  00022	83 7d f8 00	 cmp	 DWORD PTR _current$[ebp], 0
  00026	74 2a		 je	 SHORT $LN3@insert_tra
  00028	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _insert_me$[ebp]
  00031	8b 02		 mov	 eax, DWORD PTR [edx]
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	7e 11		 jle	 SHORT $LN3@insert_tra

; 240  : 		{
; 241  : 			previous = current;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  00044	89 45 fc	 mov	 DWORD PTR _previous$[ebp], eax

; 242  : 			
; 243  : 			current = current->next;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  0004a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004d	89 4d f8	 mov	 DWORD PTR _current$[ebp], ecx

; 244  : 		}

  00050	eb d0		 jmp	 SHORT $LN2@insert_tra
$LN3@insert_tra:

; 245  : 
; 246  : 		// do not insert duplicate translations
; 247  : 		if (current != NULL)

  00052	83 7d f8 00	 cmp	 DWORD PTR _current$[ebp], 0
  00056	0f 84 8f 00 00
	00		 je	 $LN6@insert_tra

; 248  : 		{
; 249  : 			if (strcmp (insert_me->tag, current->tag) == 0)

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	51		 push	 ecx
  00062	8b 55 08	 mov	 edx, DWORD PTR _insert_me$[ebp]
  00065	8b 02		 mov	 eax, DWORD PTR [edx]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _strcmp
  0006d	83 c4 08	 add	 esp, 8
  00070	85 c0		 test	 eax, eax
  00072	75 77		 jne	 SHORT $LN6@insert_tra

; 250  : 			{
; 251  : 				if (strcmp (insert_me->translation, current->translation) != 0)

  00074	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  00077	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007a	51		 push	 ecx
  0007b	8b 55 08	 mov	 edx, DWORD PTR _insert_me$[ebp]
  0007e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _strcmp
  00087	83 c4 08	 add	 esp, 8
  0008a	85 c0		 test	 eax, eax
  0008c	74 43		 je	 SHORT $LN8@insert_tra

; 252  : 				{
; 253  : 					#if DEBUG_LANGUAGES
; 254  : 						debug_filtered_log ("WARNING: translation with same tags & different translations");

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@PNDDDGFO@WARNING?3?5translation?5with?5same?5@
  00093	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  00098	83 c4 04	 add	 esp, 4

; 255  : 						
; 256  : 						debug_filtered_log ("old: %s  :  %s", current->tag, current->translation);

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	51		 push	 ecx
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _current$[ebp]
  000a5	8b 02		 mov	 eax, DWORD PTR [edx]
  000a7	50		 push	 eax
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IGGNODJJ@old?3?5?$CFs?5?5?3?5?5?$CFs@
  000ad	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 257  : 	
; 258  : 						debug_filtered_log ("new: %s  :  %s", insert_me->tag, insert_me->translation);

  000b5	8b 45 08	 mov	 eax, DWORD PTR _insert_me$[ebp]
  000b8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000bb	51		 push	 ecx
  000bc	8b 55 08	 mov	 edx, DWORD PTR _insert_me$[ebp]
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JIANANCF@new?3?5?$CFs?5?5?3?5?5?$CFs@
  000c7	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 259  : 					#endif
; 260  : 				}
; 261  : 				else

  000cf	eb 1a		 jmp	 SHORT $LN6@insert_tra
$LN8@insert_tra:

; 262  : 				{
; 263  : 					#if DEBUG_LANGUAGES
; 264  : 						debug_filtered_log ("WARNING: deleting duplicate translation");

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LGGHPHIO@WARNING?3?5deleting?5duplicate?5tra@
  000d6	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  000db	83 c4 04	 add	 esp, 4

; 265  : 					#endif
; 266  : 	
; 267  : 					delete_translation (NULL, insert_me);

  000de	8b 45 08	 mov	 eax, DWORD PTR _insert_me$[ebp]
  000e1	50		 push	 eax
  000e2	6a 00		 push	 0
  000e4	e8 00 00 00 00	 call	 ?delete_translation@@YGXPAULANGUAGE_STRUCT@@0@Z ; delete_translation

; 268  : 					
; 269  : 					return;				

  000e9	eb 2c		 jmp	 SHORT $LN1@insert_tra
$LN6@insert_tra:

; 270  : 				}
; 271  : 			}
; 272  : 		}
; 273  : 		
; 274  : 		insert_me->next = current;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _insert_me$[ebp]
  000ee	8b 4d f8	 mov	 ecx, DWORD PTR _current$[ebp]
  000f1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 275  : 
; 276  : 		if (previous != NULL)

  000f4	83 7d fc 00	 cmp	 DWORD PTR _previous$[ebp], 0
  000f8	74 0b		 je	 SHORT $LN10@insert_tra

; 277  : 		{
; 278  : 			previous->next = insert_me;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _previous$[ebp]
  000fd	8b 4d 08	 mov	 ecx, DWORD PTR _insert_me$[ebp]
  00100	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 279  : 		}
; 280  : 		else

  00103	eb 08		 jmp	 SHORT $LN11@insert_tra
$LN10@insert_tra:

; 281  : 		{
; 282  : 			translation_list = insert_me;

  00105	8b 45 08	 mov	 eax, DWORD PTR _insert_me$[ebp]
  00108	a3 00 00 00 00	 mov	 DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A, eax ; translation_list
$LN11@insert_tra:

; 283  : 		}
; 284  : 	}
; 285  : 	else

  0010d	eb 08		 jmp	 SHORT $LN1@insert_tra
$LN4@insert_tra:

; 286  : 	{
; 287  : 		translation_list = insert_me;

  0010f	8b 45 08	 mov	 eax, DWORD PTR _insert_me$[ebp]
  00112	a3 00 00 00 00	 mov	 DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A, eax ; translation_list
$LN1@insert_tra:

; 288  : 	}
; 289  : }

  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5b		 pop	 ebx
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
?insert_translation@@YGXPAULANGUAGE_STRUCT@@@Z ENDP	; insert_translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?initialise_translation@@YGPAULANGUAGE_STRUCT@@XZ
_TEXT	SEGMENT
_new_$ = -4						; size = 4
?initialise_translation@@YGPAULANGUAGE_STRUCT@@XZ PROC	; initialise_translation, COMDAT

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 209  : 	language_struct
; 210  : 		*new_;
; 211  : 
; 212  : 	new_ = (language_struct*) safe_malloc (sizeof (language_struct));

  00009	6a 0c		 push	 12			; 0000000cH
  0000b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00010	89 45 fc	 mov	 DWORD PTR _new_$[ebp], eax

; 213  : 
; 214  : 	new_->tag = NULL;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _new_$[ebp]
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 215  : 
; 216  : 	new_->translation = NULL;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _new_$[ebp]
  0001f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 217  : 
; 218  : 	new_->next = NULL;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _new_$[ebp]
  00029	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 219  : 
; 220  : 	return new_;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _new_$[ebp]

; 221  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?initialise_translation@@YGPAULANGUAGE_STRUCT@@XZ ENDP	; initialise_translation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?initialise_alphabet_pointers@@YGXXZ
_TEXT	SEGMENT
_count$ = -12						; size = 4
_letter$ = -6						; size = 1
_a$ = -5						; size = 1
_current$ = -4						; size = 4
?initialise_alphabet_pointers@@YGXXZ PROC		; initialise_alphabet_pointers, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 146  : 	language_struct
; 147  : 		*current;
; 148  : 
; 149  : 	char
; 150  : 		a,
; 151  : 		letter;
; 152  : 
; 153  : 	int
; 154  : 		count;
; 155  : 
; 156  : 	ASSERT (translation_list);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A, 0 ; translation_list
  00010	75 18		 jne	 SHORT $LN4@initialise
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_alphabet_pointers@@YGXXZ@4JA
  00017	83 c0 0b	 add	 eax, 11			; 0000000bH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FJCFCILD@translation_list@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@initialise:

; 157  : 	
; 158  : 	current = translation_list;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A ; translation_list
  0002f	89 45 fc	 mov	 DWORD PTR _current$[ebp], eax

; 159  : 
; 160  : 	memset (alphabet_pointers, 0, NUM_ALPHABET_POINTERS);

  00032	6a 1c		 push	 28			; 0000001cH
  00034	6a 00		 push	 0
  00036	68 00 00 00 00	 push	 OFFSET ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A ; alphabet_pointers
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 161  : 
; 162  : 	// set 1st pointer to 1st of misc. characters
; 163  : 	a = current->tag [0];

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	6b c8 00	 imul	 ecx, eax, 0
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _current$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	8a 0c 01	 mov	 cl, BYTE PTR [ecx+eax]
  00053	88 4d fb	 mov	 BYTE PTR _a$[ebp], cl

; 164  : 
; 165  : 	if ((toupper (a) < 'A') || (toupper (a) > 'Z'))

  00056	0f b6 45 fb	 movzx	 eax, BYTE PTR _a$[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00061	83 c4 04	 add	 esp, 4
  00064	83 f8 41	 cmp	 eax, 65			; 00000041H
  00067	7c 13		 jl	 SHORT $LN6@initialise
  00069	0f b6 45 fb	 movzx	 eax, BYTE PTR _a$[ebp]
  0006d	50		 push	 eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00074	83 c4 04	 add	 esp, 4
  00077	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0007a	7e 14		 jle	 SHORT $LN5@initialise
$LN6@initialise:

; 166  : 	{
; 167  : 		alphabet_pointers [0] = translation_list;

  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	6b c8 00	 imul	 ecx, eax, 0
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A ; translation_list
  0008a	89 91 00 00 00
	00		 mov	 DWORD PTR ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A[ecx], edx
$LN5@initialise:

; 168  : 	}
; 169  : 		
; 170  : 	current = current->next;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  00093	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00096	89 4d fc	 mov	 DWORD PTR _current$[ebp], ecx

; 171  : 
; 172  : 	count = 1;

  00099	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1

; 173  : 	
; 174  : 	letter = 'A';

  000a0	c6 45 fa 41	 mov	 BYTE PTR _letter$[ebp], 65 ; 00000041H
$LN2@initialise:

; 175  : 
; 176  : 	// get alphabet pointers
; 177  : 	while (current)

  000a4	83 7d fc 00	 cmp	 DWORD PTR _current$[ebp], 0
  000a8	0f 84 91 00 00
	00		 je	 $LN3@initialise

; 178  : 	{
; 179  : 		a = toupper (current->tag [0]);

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	6b c8 00	 imul	 ecx, eax, 0
  000b6	8b 55 fc	 mov	 edx, DWORD PTR _current$[ebp]
  000b9	8b 02		 mov	 eax, DWORD PTR [edx]
  000bb	0f b6 0c 08	 movzx	 ecx, BYTE PTR [eax+ecx]
  000bf	51		 push	 ecx
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  000c6	83 c4 04	 add	 esp, 4
  000c9	88 45 fb	 mov	 BYTE PTR _a$[ebp], al

; 180  : 
; 181  : 		if (a == toupper (letter))

  000cc	0f b6 75 fb	 movzx	 esi, BYTE PTR _a$[ebp]
  000d0	0f b6 45 fa	 movzx	 eax, BYTE PTR _letter$[ebp]
  000d4	50		 push	 eax
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  000db	83 c4 04	 add	 esp, 4
  000de	3b f0		 cmp	 esi, eax
  000e0	75 18		 jne	 SHORT $LN7@initialise

; 182  : 		{
; 183  : 			letter++;

  000e2	8a 45 fa	 mov	 al, BYTE PTR _letter$[ebp]
  000e5	04 01		 add	 al, 1
  000e7	88 45 fa	 mov	 BYTE PTR _letter$[ebp], al

; 184  : 			
; 185  : 			alphabet_pointers [letter - 'A'] = current;

  000ea	0f b6 45 fa	 movzx	 eax, BYTE PTR _letter$[ebp]
  000ee	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  000f1	89 0c 85 fc fe
	ff ff		 mov	 DWORD PTR ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A[eax*4-260], ecx
  000f8	eb 2e		 jmp	 SHORT $LN8@initialise
$LN7@initialise:

; 186  : 		}
; 187  : 		// in case there are no translations for current letter, move on.
; 188  : 		else if (a > toupper (letter))

  000fa	0f b6 75 fb	 movzx	 esi, BYTE PTR _a$[ebp]
  000fe	0f b6 45 fa	 movzx	 eax, BYTE PTR _letter$[ebp]
  00102	50		 push	 eax
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00109	83 c4 04	 add	 esp, 4
  0010c	3b f0		 cmp	 esi, eax
  0010e	7e 18		 jle	 SHORT $LN8@initialise

; 189  : 		{
; 190  : 			letter = a + 1;

  00110	0f b6 45 fb	 movzx	 eax, BYTE PTR _a$[ebp]
  00114	83 c0 01	 add	 eax, 1
  00117	88 45 fa	 mov	 BYTE PTR _letter$[ebp], al

; 191  : 
; 192  : 			alphabet_pointers [letter - 'A'] = current;

  0011a	0f b6 45 fa	 movzx	 eax, BYTE PTR _letter$[ebp]
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  00121	89 0c 85 fc fe
	ff ff		 mov	 DWORD PTR ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A[eax*4-260], ecx
$LN8@initialise:

; 193  : 		}
; 194  : 
; 195  : 		current = current->next;

  00128	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  0012b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0012e	89 4d fc	 mov	 DWORD PTR _current$[ebp], ecx

; 196  : 
; 197  : 		count++;

  00131	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  00134	83 c0 01	 add	 eax, 1
  00137	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 198  : 	}

  0013a	e9 65 ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 199  : 
; 200  : 	alphabet_pointers [NUM_ALPHABET_POINTERS - 1] = NULL;

  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	6b c8 1b	 imul	 ecx, eax, 27
  00147	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A[ecx], 0

; 201  : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c3		 ret	 0
?initialise_alphabet_pointers@@YGXXZ ENDP		; initialise_alphabet_pointers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?get_current_language_font@@YG?AW4FONT_TYPES@@W41@@Z
_TEXT	SEGMENT
tv65 = -68						; size = 4
_font$ = 8						; size = 4
?get_current_language_font@@YG?AW4FONT_TYPES@@W41@@Z PROC ; get_current_language_font, COMDAT

; 949  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 950  : 	if (get_global_current_language () == LANGUAGE_RUSSIAN)

  00009	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  00010	75 2f		 jne	 SHORT $LN4@get_curren

; 951  : 	{
; 952  : 		switch (font)

  00012	8b 45 08	 mov	 eax, DWORD PTR _font$[ebp]
  00015	89 45 bc	 mov	 DWORD PTR tv65[ebp], eax
  00018	83 7d bc 04	 cmp	 DWORD PTR tv65[ebp], 4
  0001c	77 1e		 ja	 SHORT $LN10@get_curren
  0001e	8b 4d bc	 mov	 ecx, DWORD PTR tv65[ebp]
  00021	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN12@get_curren[ecx*4]
$LN5@get_curren:

; 953  : 		{
; 954  : 			case UI_FONT_ARIAL_10:
; 955  : 					return UI_FONT_ARIAL_10;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 18		 jmp	 SHORT $LN1@get_curren
$LN6@get_curren:

; 956  : 
; 957  : 			case UI_FONT_ARIAL_14:
; 958  : 					return UI_FONT_ARIAL_10;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 14		 jmp	 SHORT $LN1@get_curren
$LN7@get_curren:

; 959  : 
; 960  : 			case UI_FONT_ITALIC_ARIAL_14:
; 961  : 					return UI_FONT_ARIAL_10;

  00030	33 c0		 xor	 eax, eax
  00032	eb 10		 jmp	 SHORT $LN1@get_curren
$LN8@get_curren:

; 962  : 
; 963  : 			case UI_FONT_ARIAL_16:
; 964  : 					return UI_FONT_ARIAL_10;

  00034	33 c0		 xor	 eax, eax
  00036	eb 0c		 jmp	 SHORT $LN1@get_curren
$LN9@get_curren:

; 965  : 
; 966  : 			case UI_FONT_ITALIC_ARIAL_16:
; 967  : 					return UI_FONT_ARIAL_10;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 08		 jmp	 SHORT $LN1@get_curren
$LN10@get_curren:

; 968  : 
; 969  : 			default:
; 970  : 					return font;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _font$[ebp]
  0003f	eb 03		 jmp	 SHORT $LN1@get_curren
$LN4@get_curren:

; 971  : 		}
; 972  : 	}
; 973  : 
; 974  : 	return font;

  00041	8b 45 08	 mov	 eax, DWORD PTR _font$[ebp]
$LN1@get_curren:

; 975  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
  0004d	0f 1f 00	 npad	 3
$LN12@get_curren:
  00050	00 00 00 00	 DD	 $LN5@get_curren
  00054	00 00 00 00	 DD	 $LN6@get_curren
  00058	00 00 00 00	 DD	 $LN7@get_curren
  0005c	00 00 00 00	 DD	 $LN8@get_curren
  00060	00 00 00 00	 DD	 $LN9@get_curren
?get_current_language_font@@YG?AW4FONT_TYPES@@W41@@Z ENDP ; get_current_language_font
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?set_current_language@@YGXH@Z
_TEXT	SEGMENT
_language$ = 8						; size = 4
?set_current_language@@YGXH@Z PROC			; set_current_language, COMDAT

; 640  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 641  : 	if ((language >= LANGUAGE_ENGLISH) && ( language < NUM_LANGUAGES))

  00009	83 7d 08 00	 cmp	 DWORD PTR _language$[ebp], 0
  0000d	7c 0e		 jl	 SHORT $LN1@set_curren
  0000f	83 7d 08 07	 cmp	 DWORD PTR _language$[ebp], 7
  00013	7d 08		 jge	 SHORT $LN1@set_curren

; 642  : 	{
; 643  : 		global_options.current_language = language;

  00015	8b 45 08	 mov	 eax, DWORD PTR _language$[ebp]
  00018	a3 04 00 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, eax
$LN1@set_curren:

; 644  : 	}
; 645  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?set_current_language@@YGXH@Z ENDP			; set_current_language
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?deinitialise_language_database@@YGXXZ
_TEXT	SEGMENT
_temp$ = -4						; size = 4
?deinitialise_language_database@@YGXXZ PROC		; deinitialise_language_database, COMDAT

; 621  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@deinitiali:

; 622  : 	language_struct
; 623  : 		*temp;
; 624  : 
; 625  : 	while (translation_list)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A, 0 ; translation_list
  00010	74 22		 je	 SHORT $LN1@deinitiali

; 626  : 	{
; 627  : 		temp = translation_list->next;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A ; translation_list
  00017	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001a	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 628  : 	
; 629  : 		delete_translation (NULL, translation_list);

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A ; translation_list
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?delete_translation@@YGXPAULANGUAGE_STRUCT@@0@Z ; delete_translation

; 630  : 
; 631  : 		translation_list = temp;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A, eax ; translation_list

; 632  : 	}

  00032	eb d5		 jmp	 SHORT $LN2@deinitiali
$LN1@deinitiali:

; 633  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?deinitialise_language_database@@YGXXZ ENDP		; deinitialise_language_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?get_trans@@YGPBDPBD@Z
_TEXT	SEGMENT
_end$ = -20						; size = 4
_start$ = -16						; size = 4
_not_found$ = -12					; size = 4
_result$ = -8						; size = 4
_temp$ = -4						; size = 4
_string$ = 8						; size = 4
?get_trans@@YGPBDPBD@Z PROC				; get_trans, COMDAT

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 556  : 	language_struct
; 557  : 		*temp;
; 558  : 		
; 559  : 	const char
; 560  : 		*result = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 561  : 		
; 562  : 	int
; 563  : 		not_found,
; 564  : 		start,
; 565  : 		end;
; 566  : 		
; 567  : 	if (isalpha (string [0]))

  00010	b8 01 00 00 00	 mov	 eax, 1
  00015	6b c8 00	 imul	 ecx, eax, 0
  00018	8b 55 08	 mov	 edx, DWORD PTR _string$[ebp]
  0001b	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalpha
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	74 21		 je	 SHORT $LN4@get_trans

; 568  : 	{
; 569  : 		start = toupper (string [0]) - 64;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	6b c8 00	 imul	 ecx, eax, 0
  00035	8b 55 08	 mov	 edx, DWORD PTR _string$[ebp]
  00038	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00043	83 c4 04	 add	 esp, 4
  00046	83 e8 40	 sub	 eax, 64			; 00000040H
  00049	89 45 f0	 mov	 DWORD PTR _start$[ebp], eax

; 570  : 	}
; 571  : 	else

  0004c	eb 07		 jmp	 SHORT $LN5@get_trans
$LN4@get_trans:

; 572  : 	{
; 573  : 		start = 0;

  0004e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _start$[ebp], 0
$LN5@get_trans:

; 574  : 	}
; 575  : 
; 576  : 	end = start + 1;

  00055	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 ec	 mov	 DWORD PTR _end$[ebp], eax

; 577  : 
; 578  : 	ASSERT (end < NUM_ALPHABET_POINTERS);

  0005e	83 7d ec 1c	 cmp	 DWORD PTR _end$[ebp], 28 ; 0000001cH
  00062	7c 18		 jl	 SHORT $LN6@get_trans
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_trans@@YGPBDPBD@Z@4JA
  00069	83 c0 17	 add	 eax, 23			; 00000017H
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHFAJJHJ@end?5?$DM?5NUM_ALPHABET_POINTERS@
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_trans:

; 579  : 
; 580  : 	temp = alphabet_pointers [start];

  0007c	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  0007f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A[eax*4]
  00086	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 581  : 
; 582  : 	not_found = 1;

  00089	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _not_found$[ebp], 1

; 583  : 
; 584  : 	if (temp != NULL)

  00090	83 7d fc 00	 cmp	 DWORD PTR _temp$[ebp], 0
  00094	74 46		 je	 SHORT $LN7@get_trans
$LN2@get_trans:

; 585  : 	{
; 586  : 		while ((not_found) && (temp != alphabet_pointers [end]))

  00096	83 7d f4 00	 cmp	 DWORD PTR _not_found$[ebp], 0
  0009a	74 40		 je	 SHORT $LN7@get_trans
  0009c	8b 45 ec	 mov	 eax, DWORD PTR _end$[ebp]
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _temp$[ebp]
  000a2	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A[eax*4]
  000a9	74 31		 je	 SHORT $LN7@get_trans

; 587  : 		{
; 588  : 			if( strcmp(temp->tag, string) == 0)

  000ab	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _temp$[ebp]
  000b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _strcmp
  000ba	83 c4 08	 add	 esp, 8
  000bd	85 c0		 test	 eax, eax
  000bf	75 10		 jne	 SHORT $LN8@get_trans

; 589  : 			{
; 590  : 				result = temp->translation;

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  000c4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c7	89 4d f8	 mov	 DWORD PTR _result$[ebp], ecx

; 591  : 		
; 592  : 				not_found = 0;

  000ca	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _not_found$[ebp], 0
$LN8@get_trans:

; 593  : 			}
; 594  : 	
; 595  : 			temp = temp->next;

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _temp$[ebp]
  000d4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d7	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 596  : 		}

  000da	eb ba		 jmp	 SHORT $LN2@get_trans
$LN7@get_trans:

; 597  : 	}
; 598  : 
; 599  : 	if(result == NULL)

  000dc	83 7d f8 00	 cmp	 DWORD PTR _result$[ebp], 0
  000e0	75 17		 jne	 SHORT $LN9@get_trans

; 600  : 	{
; 601  : 		result = string;

  000e2	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  000e5	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax

; 602  : 
; 603  : 		#if DEBUG_MODULE
; 604  : 
; 605  : 			debug_fatal("LANGUAGE.C: %s not found in translation database", string);
; 606  : 		#elif DEBUG_LANGUAGES
; 607  : 
; 608  : 			debug_filtered_log ("LANGUAGE.C: get_trans() couldn't find: %s", string);

  000e8	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CCHBOHAN@LANGUAGE?4C?3?5get_trans?$CI?$CJ?5couldn?8@
  000f1	e8 00 00 00 00	 call	 ?debug_filtered_log@@YAXPBDZZ ; debug_filtered_log
  000f6	83 c4 08	 add	 esp, 8
$LN9@get_trans:

; 609  : 
; 610  : 		#endif		
; 611  : 	}	
; 612  : 
; 613  : 	return result;

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _result$[ebp]

; 614  : }

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?get_trans@@YGPBDPBD@Z ENDP				; get_trans
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\language.c
;	COMDAT ?initialise_language_database@@YGXXZ
_TEXT	SEGMENT
_fn$1 = -1552						; size = 1024
_filename$ = -528					; size = 4
_full_filename$ = -524					; size = 256
_directory_search_path$ = -268				; size = 256
_valid_file$ = -12					; size = 4
_directory_listing$ = -8				; size = 4
_fp$ = -4						; size = 4
?initialise_language_database@@YGXXZ PROC		; initialise_language_database, COMDAT

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 07 00
	00		 sub	 esp, 1808		; 00000710H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 473  : 	FILE
; 474  : 		*fp;
; 475  : 		
; 476  : 	directory_file_list
; 477  : 		*directory_listing;
; 478  : 
; 479  : 	int
; 480  : 		valid_file;
; 481  : 
; 482  : 	char
; 483  : 		directory_search_path[256],
; 484  : 		full_filename[256];
; 485  : 	const char
; 486  : 		*filename;
; 487  : 
; 488  : 	translation_list = NULL;

  0000c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?translation_list@@3PAULANGUAGE_STRUCT@@A, 0 ; translation_list

; 489  : 
; 490  : 	memset (alphabet_pointers, 0, NUM_ALPHABET_POINTERS);

  00016	6a 1c		 push	 28			; 0000001cH
  00018	6a 00		 push	 0
  0001a	68 00 00 00 00	 push	 OFFSET ?alphabet_pointers@@3PAPAULANGUAGE_STRUCT@@A ; alphabet_pointers
  0001f	e8 00 00 00 00	 call	 _memset
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 491  : 
; 492  : 	#if PREPROCESS_DAT_FILES
; 493  : 		preprocess_language_database ();
; 494  : 	#endif
; 495  : 	
; 496  : 	// ensure current selected language is allowed
; 497  : 
; 498  : 	if ((global_options.current_language < 0) || (global_options.current_language >= NUM_LANGUAGES))

  00027	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 0
  0002e	7c 09		 jl	 SHORT $LN5@initialise
  00030	83 3d 04 00 00
	00 07		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 7
  00037	7c 07		 jl	 SHORT $LN4@initialise
$LN5@initialise:

; 499  : 	{
; 500  : 		set_current_language (LANGUAGE_ENGLISH);

  00039	6a 00		 push	 0
  0003b	e8 00 00 00 00	 call	 ?set_current_language@@YGXH@Z ; set_current_language
$LN4@initialise:

; 501  : 	}
; 502  : 
; 503  : 	sprintf (directory_search_path, "%s\\*.dat", LANGUAGE_DIRECTORY);

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_08HJPOPDIJ@?$CFs?2?$CK?4dat@
  0004a	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _directory_search_path$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _sprintf
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 504  : 
; 505  : 	directory_listing = get_first_directory_file ( directory_search_path );

  00059	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _directory_search_path$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?get_first_directory_file@@YGPAUDIRECTORY_FILE_LIST@@PBD@Z ; get_first_directory_file
  00065	89 45 f8	 mov	 DWORD PTR _directory_listing$[ebp], eax

; 506  : 
; 507  : 	// JB 030313 Enable running out of separate directories
; 508  : 	if (!directory_listing)

  00068	83 7d f8 00	 cmp	 DWORD PTR _directory_listing$[ebp], 0
  0006c	75 5d		 jne	 SHORT $LN6@initialise

; 509  : 	{
; 510  : 		char fn[1024];
; 511  : 		fn[0] = 0;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	6b c8 00	 imul	 ecx, eax, 0
  00076	c6 84 0d f0 f9
	ff ff 00	 mov	 BYTE PTR _fn$1[ebp+ecx], 0

; 512  : 		strcpy(fn, comanche_hokum_installation_path);

  0007e	68 00 00 00 00	 push	 OFFSET ?comanche_hokum_installation_path@@3PADA ; comanche_hokum_installation_path
  00083	8d 85 f0 f9 ff
	ff		 lea	 eax, DWORD PTR _fn$1[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _strcpy
  0008f	83 c4 08	 add	 esp, 8

; 513  : 		strcat(fn, "\\common\\");

  00092	68 00 00 00 00	 push	 OFFSET ??_C@_08EMMAHODI@?2common?2@
  00097	8d 85 f0 f9 ff
	ff		 lea	 eax, DWORD PTR _fn$1[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _strcat
  000a3	83 c4 08	 add	 esp, 8

; 514  : 		strcat(fn, directory_search_path);

  000a6	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _directory_search_path$[ebp]
  000ac	50		 push	 eax
  000ad	8d 8d f0 f9 ff
	ff		 lea	 ecx, DWORD PTR _fn$1[ebp]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 _strcat
  000b9	83 c4 08	 add	 esp, 8

; 515  : 
; 516  : 		directory_listing = get_first_directory_file ( fn );

  000bc	8d 85 f0 f9 ff
	ff		 lea	 eax, DWORD PTR _fn$1[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?get_first_directory_file@@YGPAUDIRECTORY_FILE_LIST@@PBD@Z ; get_first_directory_file
  000c8	89 45 f8	 mov	 DWORD PTR _directory_listing$[ebp], eax
$LN6@initialise:

; 517  : 	}
; 518  : 
; 519  : 	ASSERT (directory_listing);

  000cb	83 7d f8 00	 cmp	 DWORD PTR _directory_listing$[ebp], 0
  000cf	75 18		 jne	 SHORT $LN7@initialise
  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_language_database@@YGXXZ@4JA
  000d6	83 c0 2f	 add	 eax, 47			; 0000002fH
  000d9	50		 push	 eax
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LPBLEHOB@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KIDADDBK@directory_listing@
  000e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@initialise:

; 520  : 
; 521  : 	valid_file = TRUE;

  000e9	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _valid_file$[ebp], 1
$LN2@initialise:

; 522  : 
; 523  : 	while ( valid_file )

  000f0	83 7d f4 00	 cmp	 DWORD PTR _valid_file$[ebp], 0
  000f4	74 7f		 je	 SHORT $LN3@initialise

; 524  : 	{
; 525  : 		if ( get_directory_file_type ( directory_listing ) == DIRECTORY_FILE_TYPE_FILE )

  000f6	8b 45 f8	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?get_directory_file_type@@YG?AW4DIRECTORY_FILE_TYPES@@PAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_type
  000ff	83 f8 02	 cmp	 eax, 2
  00102	75 60		 jne	 SHORT $LN8@initialise

; 526  : 		{
; 527  : 			filename = get_directory_file_filename ( directory_listing );

  00104	8b 45 f8	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?get_directory_file_filename@@YGPBDPAUDIRECTORY_FILE_LIST@@@Z ; get_directory_file_filename
  0010d	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _filename$[ebp], eax

; 528  : 
; 529  : 			sprintf ( full_filename, "%s\\%s", LANGUAGE_DIRECTORY, filename );

  00113	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _filename$[ebp]
  00119	50		 push	 eax
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BBEIIAGL@?4?4?2common?2data?2language@
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs@
  00124	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _full_filename$[ebp]
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 _sprintf
  00130	83 c4 10	 add	 esp, 16			; 00000010H

; 530  : 
; 531  : 			debug_log ( "Processing language file %s", full_filename );

  00133	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _full_filename$[ebp]
  00139	50		 push	 eax
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DONJIDPL@Processing?5language?5file?5?$CFs@
  0013f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00144	83 c4 08	 add	 esp, 8

; 532  : 
; 533  : 			fp = safe_fopen (full_filename, "r");

  00147	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  0014c	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _full_filename$[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00158	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 534  : 
; 535  : 			initialise_language_file (fp);

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?initialise_language_file@@YGXPAU_iobuf@@@Z ; initialise_language_file
$LN8@initialise:

; 536  : 		}
; 537  : 
; 538  : 		valid_file = get_next_directory_file ( directory_listing );

  00164	8b 45 f8	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?get_next_directory_file@@YGHPAUDIRECTORY_FILE_LIST@@@Z ; get_next_directory_file
  0016d	89 45 f4	 mov	 DWORD PTR _valid_file$[ebp], eax

; 539  : 	}

  00170	e9 7b ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 540  : 
; 541  : 	destroy_directory_file_list ( directory_listing );

  00175	8b 45 f8	 mov	 eax, DWORD PTR _directory_listing$[ebp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 ?destroy_directory_file_list@@YGXPAUDIRECTORY_FILE_LIST@@@Z ; destroy_directory_file_list

; 542  : 
; 543  : 	initialise_alphabet_pointers ();

  0017e	e8 00 00 00 00	 call	 ?initialise_alphabet_pointers@@YGXXZ ; initialise_alphabet_pointers

; 544  : 
; 545  : 	#if DEBUG_LANGUAGES
; 546  : 		test_translation_list ();

  00183	e8 00 00 00 00	 call	 ?test_translation_list@@YGXXZ ; test_translation_list

; 547  : 	#endif
; 548  : }

  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	5b		 pop	 ebx
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c3		 ret	 0
?initialise_language_database@@YGXXZ ENDP		; initialise_language_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
