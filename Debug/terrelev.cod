; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\terrain\terrelev.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?initialise_3d_terrain_elevation@@YGXXZ		; initialise_3d_terrain_elevation
PUBLIC	?clear_3d_terrain_point_data@@YGXPAUTERRAIN_3D_POINT_DATA@@@Z ; clear_3d_terrain_point_data
PUBLIC	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
PUBLIC	?get_3d_terrain_point_data_normal@@YGPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_normal
PUBLIC	?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
PUBLIC	?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_type
PUBLIC	?terrain_elevation_soak_test@@YGXH@Z		; terrain_elevation_soak_test
PUBLIC	?display_terrain_elevation_statistics@@YGXXZ	; display_terrain_elevation_statistics
PUBLIC	?get_3d_terrain_elevation_and_face_normal@@YGMMMPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_elevation_and_face_normal
PUBLIC	?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z	; get_3d_terrain_face_normal
PUBLIC	?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z	; get_3d_terrain_last_normal
PUBLIC	?point_inside_terrain_fan_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_fan_word_triangle
PUBLIC	?point_inside_terrain_fan_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_fan_byte_triangle
PUBLIC	?point_inside_terrain_strip_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_strip_word_triangle
PUBLIC	?point_inside_terrain_strip_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_strip_byte_triangle
PUBLIC	?__LINE__Var@?0??point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA ; `point_inside_terrain_word_fan'::`1'::__LINE__Var
PUBLIC	??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BF@BBDHDMEE@number_of_points?5?$DO?52@	; `string'
PUBLIC	?__LINE__Var@?0??point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA ; `point_inside_terrain_byte_fan'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA ; `point_inside_terrain_word_strip'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA ; `point_inside_terrain_byte_strip'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z@4JA ; `get_3d_terrain_point_data'::`1'::__LINE__Var
PUBLIC	??_C@_0CO@LKEAGDHI@Terrain?5elevation?5off?5map?5?$CIx?5?$DN?5@ ; `string'
PUBLIC	??_C@_0BJ@BNBGNBIM@point_data?9?$DOterrain_face@ ; `string'
PUBLIC	??_C@_0DK@DEAECHJG@Unknown?5polygon?5type?5in?5terrain@ ; `string'
PUBLIC	??_C@_0HA@JDIKMNNK@Failed?5to?5locate?5a?5terrain?5face@ ; `string'
PUBLIC	??_C@_0CK@FLPKPMME@?$CK?$CK?$CK?5start?5terrain?5elevation?5soa@ ; `string'
PUBLIC	??_C@_0O@PDKOGPEF@z?5sector?5?$DN?5?$CFd@	; `string'
PUBLIC	??_C@_0CI@IMKODBJP@?$CK?$CK?$CK?5end?5terrain?5elevation?5soak?5@ ; `string'
PUBLIC	??_C@_0DG@BKOKAEOJ@WARNING?$CB?5Terrain?5elevation?5stat@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fb0000000000000
PUBLIC	__real@44800000
PUBLIC	__real@45000000
PUBLIC	__real@46fa0000
PUBLIC	__real@c6fa0000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?get_terrain_3d_sector@@YGXMMPAH0@Z:PROC	; get_terrain_3d_sector
EXTRN	?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A:BYTE ; terrain_type_information
EXTRN	?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A:DWORD ; terrain_sectors
EXTRN	?terrain_3d_sector_x_max@@3HA:DWORD		; terrain_3d_sector_x_max
EXTRN	?terrain_3d_sector_z_max@@3HA:DWORD		; terrain_3d_sector_z_max
EXTRN	?terrain_3d_min_map_x@@3MA:DWORD		; terrain_3d_min_map_x
EXTRN	?terrain_3d_min_map_z@@3MA:DWORD		; terrain_3d_min_map_z
EXTRN	?terrain_3d_max_map_x@@3MA:DWORD		; terrain_3d_max_map_x
EXTRN	?terrain_3d_max_map_z@@3MA:DWORD		; terrain_3d_max_map_z
EXTRN	?terrain_3d_map_minimum_height@@3MA:DWORD	; terrain_3d_map_minimum_height
EXTRN	?terrain_3d_map_scaled_height_difference@@3MA:DWORD ; terrain_3d_map_scaled_height_difference
EXTRN	?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A:DWORD ; current_terrain_version
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A DB 02cH DUP (?) ; system_point_data
?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A DD 01H DUP (?) ; terrain_elevation_point_word_references
?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A DD 01H DUP (?) ; terrain_elevation_point_byte_references
_BSS	ENDS
;	COMDAT __real@c6fa0000
CONST	SEGMENT
__real@c6fa0000 DD 0c6fa0000r			; -32000
CONST	ENDS
;	COMDAT __real@46fa0000
CONST	SEGMENT
__real@46fa0000 DD 046fa0000r			; 32000
CONST	ENDS
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@3fb0000000000000
CONST	SEGMENT
__real@3fb0000000000000 DQ 03fb0000000000000r	; 0.0625
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0DG@BKOKAEOJ@WARNING?$CB?5Terrain?5elevation?5stat@
CONST	SEGMENT
??_C@_0DG@BKOKAEOJ@WARNING?$CB?5Terrain?5elevation?5stat@ DB 'WARNING! Te'
	DB	'rrain elevation statistics are not enabled', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IMKODBJP@?$CK?$CK?$CK?5end?5terrain?5elevation?5soak?5@
CONST	SEGMENT
??_C@_0CI@IMKODBJP@?$CK?$CK?$CK?5end?5terrain?5elevation?5soak?5@ DB '***'
	DB	' end terrain elevation soak test ***', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDKOGPEF@z?5sector?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0O@PDKOGPEF@z?5sector?5?$DN?5?$CFd@ DB 'z sector = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FLPKPMME@?$CK?$CK?$CK?5start?5terrain?5elevation?5soa@
CONST	SEGMENT
??_C@_0CK@FLPKPMME@?$CK?$CK?$CK?5start?5terrain?5elevation?5soa@ DB '*** '
	DB	'start terrain elevation soak test ***', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0HA@JDIKMNNK@Failed?5to?5locate?5a?5terrain?5face@
CONST	SEGMENT
??_C@_0HA@JDIKMNNK@Failed?5to?5locate?5a?5terrain?5face@ DB 'Failed to lo'
	DB	'cate a terrain face (x = %.4f, z = %.4f, x_sector = %d, z_sec'
	DB	'tor = %d, x_offset = %f, z_offset = %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DEAECHJG@Unknown?5polygon?5type?5in?5terrain@
CONST	SEGMENT
??_C@_0DK@DEAECHJG@Unknown?5polygon?5type?5in?5terrain@ DB 'Unknown polyg'
	DB	'on type in terrain elevation, sector: %d, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BNBGNBIM@point_data?9?$DOterrain_face@
CONST	SEGMENT
??_C@_0BJ@BNBGNBIM@point_data?9?$DOterrain_face@ DB 'point_data->terrain_'
	DB	'face', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LKEAGDHI@Terrain?5elevation?5off?5map?5?$CIx?5?$DN?5@
CONST	SEGMENT
??_C@_0CO@LKEAGDHI@Terrain?5elevation?5off?5map?5?$CIx?5?$DN?5@ DB 'Terra'
	DB	'in elevation off map (x = %.2f, z = %.2f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z@4JA DD 04baH ; `get_3d_terrain_point_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA DD 0234H ; `point_inside_terrain_byte_strip'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA DD 018cH ; `point_inside_terrain_word_strip'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA DD 010fH ; `point_inside_terrain_byte_fan'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@BBDHDMEE@number_of_points?5?$DO?52@
CONST	SEGMENT
??_C@_0BF@BBDHDMEE@number_of_points?5?$DO?52@ DB 'number_of_points > 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\terrain\terrelev.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA DD 092H ; `point_inside_terrain_word_fan'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_strip_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z
_TEXT	SEGMENT
_point$ = -52						; size = 4
_point_ref$ = -48					; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_triangle_offset$ = 20					; size = 4
?point_inside_terrain_strip_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z PROC ; point_inside_terrain_strip_byte_triangle, COMDAT

; 1071 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1072 : 
; 1073 : 	float
; 1074 : 		x0,
; 1075 : 		z0,
; 1076 : 		x1,
; 1077 : 		z1,
; 1078 : 		x2,
; 1079 : 		z2,
; 1080 : 		dx1,
; 1081 : 		dz1,
; 1082 : 		dx2,
; 1083 : 		dz2,
; 1084 : 		cyclic;
; 1085 : 
; 1086 : 	terrain_3d_point_byte_reference
; 1087 : 		*point_ref;
; 1088 : 
; 1089 : 	terrain_3d_point_xz
; 1090 : 		*point;
; 1091 : 
; 1092 : #if DEBUG_MODULE
; 1093 : 
; 1094 : 	num_in_poly_tests++;
; 1095 : 
; 1096 : #endif
; 1097 : 
; 1098 : 	point_ref = terrain_elevation_point_byte_references;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  0000e	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1099 : 
; 1100 : 	point_ref += triangle_offset;

  00011	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00014	03 45 14	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00017	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1101 : 
; 1102 : 	if ( triangle_offset & 1 )

  0001a	8b 45 14	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  0001d	83 e0 01	 and	 eax, 1
  00020	0f 84 a1 00 00
	00		 je	 $LN2@point_insi

; 1103 : 	{
; 1104 : 
; 1105 : 		//
; 1106 : 		// Checking an odd triangle
; 1107 : 		//
; 1108 : 
; 1109 : 		point = points + point_ref->point;

  00026	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00029	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0002c	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0002f	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00032	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1110 : 		point_ref++;

  00035	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1111 : 		x0 = point->x;

  0003e	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00048	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 1112 : 		z0 = point->z;

  0004d	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00050	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00054	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00058	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 1113 : 
; 1114 : 		point = points + point_ref->point;

  0005d	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00060	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00063	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00066	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00069	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1115 : 		point_ref++;

  0006c	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0006f	83 c0 01	 add	 eax, 1
  00072	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1116 : 		x2 = point->x;

  00075	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00078	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0007b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0007f	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1117 : 		z2 = point->z;

  00084	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00087	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0008b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0008f	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 1118 : 
; 1119 : 		point = points + point_ref->point;

  00094	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00097	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0009a	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0009d	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000a0	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1120 : 		x1 = point->x;

  000a3	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000a6	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000a9	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000ad	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1121 : 		z1 = point->z;

  000b2	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000b5	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000b9	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000bd	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 1122 : 	}
; 1123 : 	else

  000c2	e9 9c 00 00 00	 jmp	 $LN3@point_insi
$LN2@point_insi:

; 1124 : 	{
; 1125 : 
; 1126 : 		//
; 1127 : 		// Checking an even triangle
; 1128 : 		//
; 1129 : 
; 1130 : 		point = points + point_ref->point;

  000c7	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000ca	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000cd	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  000d0	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000d3	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1131 : 		point_ref++;

  000d6	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000d9	83 c0 01	 add	 eax, 1
  000dc	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1132 : 		x0 = point->x;

  000df	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000e2	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000e5	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000e9	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 1133 : 		z0 = point->z;

  000ee	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000f1	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000f5	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000f9	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 1134 : 
; 1135 : 		point = points + point_ref->point;

  000fe	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00101	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00104	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00107	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0010a	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1136 : 		point_ref++;

  0010d	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00110	83 c0 01	 add	 eax, 1
  00113	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1137 : 		x1 = point->x;

  00116	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00119	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0011c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00120	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1138 : 		z1 = point->z;

  00125	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00128	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0012c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00130	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 1139 : 
; 1140 : 		point = points + point_ref->point;

  00135	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00138	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0013b	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0013e	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00141	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1141 : 		x2 = point->x;

  00144	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00147	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0014a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0014e	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1142 : 		z2 = point->z;

  00153	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00156	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0015a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0015e	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0
$LN3@point_insi:

; 1143 : 	}
; 1144 : 
; 1145 : 	//
; 1146 : 	// Check against the first side
; 1147 : 	//
; 1148 : 
; 1149 : 	dx1 = x0 - x1;

  00163	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  00168	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  0016d	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1150 : 	dz1 = z0 - z1;

  00172	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00177	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  0017c	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1151 : 	dx2 = x1 - x_offset;

  00181	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00186	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  0018b	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 1152 : 	dz2 = z1 - z_offset;

  00190	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00195	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  0019a	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 1153 : 
; 1154 : 	cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0019f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001a4	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001a9	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001ae	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001b3	f3 0f 5c c1	 subss	 xmm0, xmm1
  001b7	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 1155 : 
; 1156 : 	if ( cyclic >= 0.0 )

  001bc	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001c1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001c9	0f 82 d7 00 00
	00		 jb	 $LN6@point_insi

; 1157 : 	{
; 1158 : 
; 1159 : 		//
; 1160 : 		// Check against the third side
; 1161 : 		//
; 1162 : 
; 1163 : 		dx1 = x2 - x0;

  001cf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001d4	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  001d9	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1164 : 		dz1 = z2 - z0;

  001de	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  001e3	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  001e8	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1165 : 		dx2 = x0 - x_offset;

  001ed	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  001f2	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001f7	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 1166 : 		dz2 = z0 - z_offset;

  001fc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00201	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00206	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 1167 : 
; 1168 : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0020b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00210	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00215	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0021a	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  0021f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00223	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 1169 : 
; 1170 : 		if ( cyclic >= 0.0 )

  00228	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  0022d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00235	72 6f		 jb	 SHORT $LN6@point_insi

; 1171 : 		{
; 1172 : 
; 1173 : 			//
; 1174 : 			// Check against the second side
; 1175 : 			//
; 1176 : 
; 1177 : 			dx1 = x1 - x2;

  00237	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0023c	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  00241	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1178 : 			dz1 = z1 - z2;

  00246	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  0024b	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  00250	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1179 : 			dx2 = x2 - x_offset;

  00255	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0025a	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  0025f	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 1180 : 			dz2 = z2 - z_offset;

  00264	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00269	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  0026e	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 1181 : 
; 1182 : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  00273	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00278	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  0027d	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  00282	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00287	f3 0f 5c c1	 subss	 xmm0, xmm1
  0028b	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 1183 : 
; 1184 : 			if ( cyclic >= 0.0 )

  00290	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00295	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0029d	72 07		 jb	 SHORT $LN6@point_insi

; 1185 : 			{
; 1186 : 
; 1187 : 				return ( TRUE );

  0029f	b8 01 00 00 00	 mov	 eax, 1
  002a4	eb 02		 jmp	 SHORT $LN1@point_insi
$LN6@point_insi:

; 1188 : 			}
; 1189 : 		}
; 1190 : 	}
; 1191 : 
; 1192 : 	return ( FALSE );

  002a6	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 1193 : }

  002a8	5f		 pop	 edi
  002a9	5e		 pop	 esi
  002aa	5b		 pop	 ebx
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 10 00	 ret	 16			; 00000010H
?point_inside_terrain_strip_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ENDP ; point_inside_terrain_strip_byte_triangle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_strip_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z
_TEXT	SEGMENT
_point$ = -52						; size = 4
_point_ref$ = -48					; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_triangle_offset$ = 20					; size = 4
?point_inside_terrain_strip_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z PROC ; point_inside_terrain_strip_word_triangle, COMDAT

; 942  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 943  : 
; 944  : 	float
; 945  : 		x0,
; 946  : 		z0,
; 947  : 		x1,
; 948  : 		z1,
; 949  : 		x2,
; 950  : 		z2,
; 951  : 		dx1,
; 952  : 		dz1,
; 953  : 		dx2,
; 954  : 		dz2,
; 955  : 		cyclic;
; 956  : 
; 957  : 	terrain_3d_point_word_reference
; 958  : 		*point_ref;
; 959  : 
; 960  : 	terrain_3d_point_xz
; 961  : 		*point;
; 962  : 
; 963  : #if DEBUG_MODULE
; 964  : 
; 965  : 	num_in_poly_tests++;
; 966  : 
; 967  : #endif
; 968  : 
; 969  : 	point_ref = terrain_elevation_point_word_references;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  0000e	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 970  : 
; 971  : 	point_ref += triangle_offset;

  00011	8b 45 14	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00014	8b 4d d0	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  00017	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0001a	89 55 d0	 mov	 DWORD PTR _point_ref$[ebp], edx

; 972  : 
; 973  : 	if ( triangle_offset & 1 )

  0001d	8b 45 14	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	0f 84 a1 00 00
	00		 je	 $LN2@point_insi

; 974  : 	{
; 975  : 
; 976  : 		//
; 977  : 		// Checking an odd triangle
; 978  : 		//
; 979  : 
; 980  : 		point = points + point_ref->point;

  00029	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0002c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0002f	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00032	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00035	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 981  : 		point_ref++;

  00038	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0003b	83 c0 02	 add	 eax, 2
  0003e	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 982  : 		x0 = point->x;

  00041	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00044	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00047	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 983  : 		z0 = point->z;

  00050	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00053	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00057	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0005b	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 984  : 
; 985  : 		point = points + point_ref->point;

  00060	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00063	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00066	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00069	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0006c	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 986  : 		point_ref++;

  0006f	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00072	83 c0 02	 add	 eax, 2
  00075	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 987  : 		x2 = point->x;

  00078	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  0007b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0007e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00082	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 988  : 		z2 = point->z;

  00087	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  0008a	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0008e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00092	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 989  : 
; 990  : 		point = points + point_ref->point;

  00097	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0009a	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0009d	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  000a0	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000a3	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 991  : 		x1 = point->x;

  000a6	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000a9	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000ac	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000b0	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 992  : 		z1 = point->z;

  000b5	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000b8	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000bc	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000c0	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 993  : 	}
; 994  : 	else

  000c5	e9 9c 00 00 00	 jmp	 $LN3@point_insi
$LN2@point_insi:

; 995  : 	{
; 996  : 
; 997  : 		//
; 998  : 		// Checking an even triangle
; 999  : 		//
; 1000 : 
; 1001 : 		point = points + point_ref->point;

  000ca	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000cd	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000d0	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  000d3	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000d6	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1002 : 		point_ref++;

  000d9	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000dc	83 c0 02	 add	 eax, 2
  000df	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1003 : 		x0 = point->x;

  000e2	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000e5	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000e8	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000ec	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 1004 : 		z0 = point->z;

  000f1	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000f4	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000f8	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000fc	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 1005 : 
; 1006 : 		point = points + point_ref->point;

  00101	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00104	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00107	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0010a	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0010d	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1007 : 		point_ref++;

  00110	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00113	83 c0 02	 add	 eax, 2
  00116	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 1008 : 		x1 = point->x;

  00119	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  0011c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0011f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00123	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1009 : 		z1 = point->z;

  00128	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  0012b	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0012f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00133	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 1010 : 
; 1011 : 		point = points + point_ref->point;

  00138	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0013b	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0013e	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00141	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00144	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 1012 : 		x2 = point->x;

  00147	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  0014a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0014d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00151	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1013 : 		z2 = point->z;

  00156	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00159	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0015d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00161	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0
$LN3@point_insi:

; 1014 : 	}
; 1015 : 
; 1016 : 	//
; 1017 : 	// Check against the first side
; 1018 : 	//
; 1019 : 
; 1020 : 	dx1 = x0 - x1;

  00166	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  0016b	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00170	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1021 : 	dz1 = z0 - z1;

  00175	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  0017a	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  0017f	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1022 : 	dx2 = x1 - x_offset;

  00184	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00189	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  0018e	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 1023 : 	dz2 = z1 - z_offset;

  00193	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00198	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  0019d	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 1024 : 
; 1025 : 	cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001a7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001ac	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001b1	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001b6	f3 0f 5c c1	 subss	 xmm0, xmm1
  001ba	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 1026 : 
; 1027 : 	if ( cyclic >= 0.0 )

  001bf	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001c4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001cc	0f 82 d7 00 00
	00		 jb	 $LN6@point_insi

; 1028 : 	{
; 1029 : 
; 1030 : 		//
; 1031 : 		// Check against the third side
; 1032 : 		//
; 1033 : 
; 1034 : 		dx1 = x2 - x0;

  001d2	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001d7	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  001dc	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1035 : 		dz1 = z2 - z0;

  001e1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  001e6	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  001eb	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1036 : 		dx2 = x0 - x_offset;

  001f0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  001f5	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001fa	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 1037 : 		dz2 = z0 - z_offset;

  001ff	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00204	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00209	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 1038 : 
; 1039 : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0020e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00213	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00218	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0021d	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00222	f3 0f 5c c1	 subss	 xmm0, xmm1
  00226	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 1040 : 
; 1041 : 		if ( cyclic >= 0.0 )

  0022b	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00230	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00238	72 6f		 jb	 SHORT $LN6@point_insi

; 1042 : 		{
; 1043 : 
; 1044 : 			//
; 1045 : 			// Check against the second side
; 1046 : 			//
; 1047 : 
; 1048 : 			dx1 = x1 - x2;

  0023a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0023f	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  00244	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 1049 : 			dz1 = z1 - z2;

  00249	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  0024e	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  00253	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 1050 : 			dx2 = x2 - x_offset;

  00258	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0025d	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  00262	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 1051 : 			dz2 = z2 - z_offset;

  00267	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0026c	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00271	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 1052 : 
; 1053 : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  00276	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  0027b	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00280	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  00285	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  0028a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0028e	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 1054 : 
; 1055 : 			if ( cyclic >= 0.0 )

  00293	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00298	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  002a0	72 07		 jb	 SHORT $LN6@point_insi

; 1056 : 			{
; 1057 : 
; 1058 : 				return ( TRUE );

  002a2	b8 01 00 00 00	 mov	 eax, 1
  002a7	eb 02		 jmp	 SHORT $LN1@point_insi
$LN6@point_insi:

; 1059 : 			}
; 1060 : 		}
; 1061 : 	}
; 1062 : 
; 1063 : 	return ( FALSE );

  002a9	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 1064 : }

  002ab	5f		 pop	 edi
  002ac	5e		 pop	 esi
  002ad	5b		 pop	 ebx
  002ae	8b e5		 mov	 esp, ebp
  002b0	5d		 pop	 ebp
  002b1	c2 10 00	 ret	 16			; 00000010H
?point_inside_terrain_strip_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ENDP ; point_inside_terrain_strip_word_triangle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_fan_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z
_TEXT	SEGMENT
_point$ = -52						; size = 4
_point_ref$ = -48					; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_triangle_offset$ = 20					; size = 4
?point_inside_terrain_fan_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z PROC ; point_inside_terrain_fan_byte_triangle, COMDAT

; 835  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  : 
; 837  : 	float
; 838  : 		x0,
; 839  : 		z0,
; 840  : 		x1,
; 841  : 		z1,
; 842  : 		x2,
; 843  : 		z2,
; 844  : 		dx1,
; 845  : 		dz1,
; 846  : 		dx2,
; 847  : 		dz2,
; 848  : 		cyclic;
; 849  : 
; 850  : 	terrain_3d_point_byte_reference
; 851  : 		*point_ref;
; 852  : 
; 853  : 	terrain_3d_point_xz
; 854  : 		*point;
; 855  : 
; 856  : #if DEBUG_MODULE
; 857  : 
; 858  : 	num_in_poly_tests++;
; 859  : 
; 860  : #endif
; 861  : 
; 862  : 	point_ref = terrain_elevation_point_byte_references;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  0000e	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 863  : 
; 864  : 	point = points + point_ref->point;

  00011	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00014	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00017	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0001a	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0001d	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 865  : 
; 866  : 	x0 = point->x;

  00020	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00023	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00026	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0002a	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 867  : 	z0 = point->z;

  0002f	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00032	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00036	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0003a	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 868  : 
; 869  : 	point_ref++;

  0003f	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00042	83 c0 01	 add	 eax, 1
  00045	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 870  : 
; 871  : 	point_ref += triangle_offset;

  00048	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0004b	03 45 14	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  0004e	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 872  : 
; 873  : 	point = points + point_ref->point;

  00051	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00054	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00057	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0005a	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0005d	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 874  : 
; 875  : 	x1 = point->x;

  00060	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00063	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00066	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0006a	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 876  : 	z1 = point->z;

  0006f	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00072	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00076	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0007a	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 877  : 
; 878  : 	point_ref++;

  0007f	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 879  : 
; 880  : 	point = points + point_ref->point;

  00088	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0008b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0008e	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00091	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00094	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 881  : 
; 882  : 	x2 = point->x;

  00097	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  0009a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0009d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000a1	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 883  : 	z2 = point->z;

  000a6	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000a9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000ad	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000b1	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 884  : 
; 885  : 	point_ref++;

  000b6	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 886  : 
; 887  : 	//
; 888  : 	// Check against the first side
; 889  : 	//
; 890  : 
; 891  : 	dx1 = x0 - x1;

  000bf	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  000c4	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  000c9	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 892  : 	dz1 = z0 - z1;

  000ce	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  000d3	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  000d8	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 893  : 	dx2 = x1 - x_offset;

  000dd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000e2	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  000e7	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 894  : 	dz2 = z1 - z_offset;

  000ec	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  000f1	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  000f6	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 895  : 
; 896  : 	cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  000fb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00100	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00105	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0010a	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  0010f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00113	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 897  : 
; 898  : 	if ( cyclic >= 0.0 )

  00118	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  0011d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00125	0f 82 d7 00 00
	00		 jb	 $LN4@point_insi

; 899  : 	{
; 900  : 
; 901  : 		//
; 902  : 		// Check against the third side
; 903  : 		//
; 904  : 
; 905  : 		dx1 = x2 - x0;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00130	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 906  : 		dz1 = z2 - z0;

  0013a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0013f	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 907  : 		dx2 = x0 - x_offset;

  00149	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  0014e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  00153	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 908  : 		dz2 = z0 - z_offset;

  00158	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  0015d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00162	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 909  : 
; 910  : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  00167	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  0016c	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00171	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  00176	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  0017b	f3 0f 5c c1	 subss	 xmm0, xmm1
  0017f	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 911  : 
; 912  : 		if ( cyclic >= 0.0 )

  00184	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00189	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00191	72 6f		 jb	 SHORT $LN4@point_insi

; 913  : 		{
; 914  : 
; 915  : 			//
; 916  : 			// Check against the second side
; 917  : 			//
; 918  : 
; 919  : 			dx1 = x1 - x2;

  00193	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00198	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  0019d	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 920  : 			dz1 = z1 - z2;

  001a2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  001a7	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  001ac	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 921  : 			dx2 = x2 - x_offset;

  001b1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b6	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001bb	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 922  : 			dz2 = z2 - z_offset;

  001c0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  001c5	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  001ca	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 923  : 
; 924  : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  001cf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001d4	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001d9	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001de	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001e3	f3 0f 5c c1	 subss	 xmm0, xmm1
  001e7	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 925  : 
; 926  : 			if ( cyclic >= 0.0 )

  001ec	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001f1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001f9	72 07		 jb	 SHORT $LN4@point_insi

; 927  : 			{
; 928  : 
; 929  : 				return ( TRUE );

  001fb	b8 01 00 00 00	 mov	 eax, 1
  00200	eb 02		 jmp	 SHORT $LN1@point_insi
$LN4@point_insi:

; 930  : 			}
; 931  : 		}
; 932  : 	}
; 933  : 
; 934  : 	return ( FALSE );

  00202	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 935  : }

  00204	5f		 pop	 edi
  00205	5e		 pop	 esi
  00206	5b		 pop	 ebx
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c2 10 00	 ret	 16			; 00000010H
?point_inside_terrain_fan_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ENDP ; point_inside_terrain_fan_byte_triangle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_fan_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z
_TEXT	SEGMENT
_point$ = -52						; size = 4
_point_ref$ = -48					; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_triangle_offset$ = 20					; size = 4
?point_inside_terrain_fan_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z PROC ; point_inside_terrain_fan_word_triangle, COMDAT

; 728  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 729  : 
; 730  : 	float
; 731  : 		x0,
; 732  : 		z0,
; 733  : 		x1,
; 734  : 		z1,
; 735  : 		x2,
; 736  : 		z2,
; 737  : 		dx1,
; 738  : 		dz1,
; 739  : 		dx2,
; 740  : 		dz2,
; 741  : 		cyclic;
; 742  : 
; 743  : 	terrain_3d_point_word_reference
; 744  : 		*point_ref;
; 745  : 
; 746  : 	terrain_3d_point_xz
; 747  : 		*point;
; 748  : 
; 749  : #if DEBUG_MODULE
; 750  : 
; 751  : 	num_in_poly_tests++;
; 752  : 
; 753  : #endif
; 754  : 
; 755  : 	point_ref = terrain_elevation_point_word_references;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  0000e	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 756  : 
; 757  : 	point = points + point_ref->point;

  00011	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00014	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00017	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0001a	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0001d	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 758  : 
; 759  : 	x0 = point->x;

  00020	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00023	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00026	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0002a	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 760  : 	z0 = point->z;

  0002f	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00032	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00036	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0003a	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 761  : 
; 762  : 	point_ref++;

  0003f	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00042	83 c0 02	 add	 eax, 2
  00045	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 763  : 
; 764  : 	point_ref += triangle_offset;

  00048	8b 45 14	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  0004b	8b 4d d0	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  0004e	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00051	89 55 d0	 mov	 DWORD PTR _point_ref$[ebp], edx

; 765  : 
; 766  : 	point = points + point_ref->point;

  00054	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00057	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0005a	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0005d	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00060	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 767  : 
; 768  : 	x1 = point->x;

  00063	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00066	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00069	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0006d	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 769  : 	z1 = point->z;

  00072	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  00075	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00079	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0007d	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 770  : 
; 771  : 	point_ref++;

  00082	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00085	83 c0 02	 add	 eax, 2
  00088	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 772  : 
; 773  : 	point = points + point_ref->point;

  0008b	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0008e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00091	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00094	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00097	89 45 cc	 mov	 DWORD PTR _point$[ebp], eax

; 774  : 
; 775  : 	x2 = point->x;

  0009a	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  0009d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000a0	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000a4	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 776  : 	z2 = point->z;

  000a9	8b 45 cc	 mov	 eax, DWORD PTR _point$[ebp]
  000ac	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000b0	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000b4	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 777  : 
; 778  : 	point_ref++;

  000b9	8b 45 d0	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000bc	83 c0 02	 add	 eax, 2
  000bf	89 45 d0	 mov	 DWORD PTR _point_ref$[ebp], eax

; 779  : 
; 780  : 	//
; 781  : 	// Check against the first side
; 782  : 	//
; 783  : 
; 784  : 	dx1 = x0 - x1;

  000c2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  000c7	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  000cc	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 785  : 	dz1 = z0 - z1;

  000d1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  000d6	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  000db	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 786  : 	dx2 = x1 - x_offset;

  000e0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000e5	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  000ea	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 787  : 	dz2 = z1 - z_offset;

  000ef	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  000f4	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  000f9	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 788  : 
; 789  : 	cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  000fe	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00103	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00108	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0010d	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00112	f3 0f 5c c1	 subss	 xmm0, xmm1
  00116	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 790  : 
; 791  : 	if ( cyclic >= 0.0 )

  0011b	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00120	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00128	0f 82 d7 00 00
	00		 jb	 $LN4@point_insi

; 792  : 	{
; 793  : 
; 794  : 		//
; 795  : 		// Check against the third side
; 796  : 		//
; 797  : 
; 798  : 		dx1 = x2 - x0;

  0012e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00133	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  00138	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 799  : 		dz1 = z2 - z0;

  0013d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00142	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  00147	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 800  : 		dx2 = x0 - x_offset;

  0014c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  00151	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  00156	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 801  : 		dz2 = z0 - z_offset;

  0015b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00160	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00165	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 802  : 
; 803  : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0016a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  0016f	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00174	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  00179	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  0017e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00182	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 804  : 
; 805  : 		if ( cyclic >= 0.0 )

  00187	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  0018c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00194	72 6f		 jb	 SHORT $LN4@point_insi

; 806  : 		{
; 807  : 
; 808  : 			//
; 809  : 			// Check against the second side
; 810  : 			//
; 811  : 
; 812  : 			dx1 = x1 - x2;

  00196	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0019b	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  001a0	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 813  : 			dz1 = z1 - z2;

  001a5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  001aa	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  001af	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 814  : 			dx2 = x2 - x_offset;

  001b4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b9	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001be	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 815  : 			dz2 = z2 - z_offset;

  001c3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  001c8	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  001cd	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 816  : 
; 817  : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  001d2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001d7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001dc	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001e1	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001e6	f3 0f 5c c1	 subss	 xmm0, xmm1
  001ea	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 818  : 
; 819  : 			if ( cyclic >= 0.0 )

  001ef	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001f4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001fc	72 07		 jb	 SHORT $LN4@point_insi

; 820  : 			{
; 821  : 
; 822  : 				return ( TRUE );

  001fe	b8 01 00 00 00	 mov	 eax, 1
  00203	eb 02		 jmp	 SHORT $LN1@point_insi
$LN4@point_insi:

; 823  : 			}
; 824  : 		}
; 825  : 	}
; 826  : 
; 827  : 	return ( FALSE );

  00205	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 828  : }

  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c2 10 00	 ret	 16			; 00000010H
?point_inside_terrain_fan_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ENDP ; point_inside_terrain_fan_word_triangle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z
_TEXT	SEGMENT
tv141 = -128						; size = 4
_point$ = -60						; size = 4
_point_ref$ = -56					; size = 4
_internal_triangle_offset$ = -52			; size = 4
_even_triangle$ = -48					; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_number_of_points$ = 20					; size = 4
_triangle_offset$ = 24					; size = 4
?point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z PROC ; point_inside_terrain_byte_strip, COMDAT

; 564  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 565  : 
; 566  : 	float
; 567  : 		x0,
; 568  : 		z0,
; 569  : 		x1,
; 570  : 		z1,
; 571  : 		x2,
; 572  : 		z2,
; 573  : 		dx1,
; 574  : 		dz1,
; 575  : 		dx2,
; 576  : 		dz2,
; 577  : 		cyclic;
; 578  : 
; 579  : 	int
; 580  : 		even_triangle,
; 581  : 		internal_triangle_offset;
; 582  : 
; 583  : 	terrain_3d_point_byte_reference
; 584  : 		*point_ref;
; 585  : 
; 586  : 	terrain_3d_point_xz
; 587  : 		*point;
; 588  : 
; 589  : #if DEBUG_MODULE
; 590  : 
; 591  : 	num_in_poly_tests++;
; 592  : 
; 593  : #endif
; 594  : 
; 595  : 	point_ref = terrain_elevation_point_byte_references;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00011	89 45 c8	 mov	 DWORD PTR _point_ref$[ebp], eax

; 596  : 
; 597  : 	ASSERT ( number_of_points > 2 );

  00014	83 7d 14 02	 cmp	 DWORD PTR _number_of_points$[ebp], 2
  00018	7f 18		 jg	 SHORT $LN4@point_insi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
  0001f	83 c0 21	 add	 eax, 33			; 00000021H
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BBDHDMEE@number_of_points?5?$DO?52@
  0002d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@point_insi:

; 598  : 
; 599  : 	point = points + point_ref[0].point;

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	6b c8 00	 imul	 ecx, eax, 0
  0003a	8b 55 c8	 mov	 edx, DWORD PTR _point_ref$[ebp]
  0003d	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00041	8b 4d 10	 mov	 ecx, DWORD PTR _points$[ebp]
  00044	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00047	89 55 c4	 mov	 DWORD PTR _point$[ebp], edx

; 600  : 
; 601  : 	x0 = point->x;

  0004a	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0004d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00050	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00054	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 602  : 	z0 = point->z;

  00059	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0005c	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00060	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00064	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 603  : 
; 604  : 	point = points + point_ref[1].point;

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	c1 e0 00	 shl	 eax, 0
  00071	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  00074	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00078	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  0007b	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0007e	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 605  : 
; 606  : 	x1 = point->x;

  00081	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00084	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00087	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0008b	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 607  : 	z1 = point->z;

  00090	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00093	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00097	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 608  : 
; 609  : 	point = points + point_ref[2].point;

  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	d1 e0		 shl	 eax, 1
  000a7	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  000aa	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  000ae	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  000b1	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000b4	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 610  : 
; 611  : 	x2 = point->x;

  000b7	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  000ba	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000bd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000c1	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 612  : 	z2 = point->z;

  000c6	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  000c9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000cd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000d1	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 613  : 
; 614  : 	point_ref++;

  000d6	8b 45 c8	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000d9	83 c0 01	 add	 eax, 1
  000dc	89 45 c8	 mov	 DWORD PTR _point_ref$[ebp], eax

; 615  : 
; 616  : 	even_triangle = FALSE;

  000df	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _even_triangle$[ebp], 0

; 617  : 
; 618  : 	internal_triangle_offset = 0;

  000e6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _internal_triangle_offset$[ebp], 0

; 619  : 
; 620  : 	number_of_points -= 2;

  000ed	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000f0	83 e8 02	 sub	 eax, 2
  000f3	89 45 14	 mov	 DWORD PTR _number_of_points$[ebp], eax
$LN2@point_insi:

; 621  : 
; 622  : 	while ( number_of_points-- )

  000f6	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000f9	89 45 80	 mov	 DWORD PTR tv141[ebp], eax
  000fc	8b 4d 14	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  000ff	83 e9 01	 sub	 ecx, 1
  00102	89 4d 14	 mov	 DWORD PTR _number_of_points$[ebp], ecx
  00105	83 7d 80 00	 cmp	 DWORD PTR tv141[ebp], 0
  00109	0f 84 ca 02 00
	00		 je	 $LN3@point_insi

; 623  : 	{
; 624  : 
; 625  : 		//
; 626  : 		// Check against the first side
; 627  : 		//
; 628  : 
; 629  : 		dx1 = x0 - x1;

  0010f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  00114	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00119	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 630  : 		dz1 = z0 - z1;

  0011e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00123	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  00128	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 631  : 		dx2 = x1 - x_offset;

  0012d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00132	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  00137	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 632  : 		dz2 = z1 - z_offset;

  0013c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00141	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00146	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 633  : 
; 634  : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0014b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00150	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00155	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0015a	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  0015f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00163	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 635  : 
; 636  : 		if ( cyclic >= 0.0 )

  00168	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  0016d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00175	0f 82 e2 00 00
	00		 jb	 $LN7@point_insi

; 637  : 		{
; 638  : 
; 639  : 			//
; 640  : 			// Check against the third side
; 641  : 			//
; 642  : 
; 643  : 			dx1 = x2 - x0;

  0017b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00180	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  00185	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 644  : 			dz1 = z2 - z0;

  0018a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0018f	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  00194	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 645  : 			dx2 = x0 - x_offset;

  00199	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  0019e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001a3	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 646  : 			dz2 = z0 - z_offset;

  001a8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  001ad	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  001b2	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 647  : 
; 648  : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  001b7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001bc	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001c1	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001c6	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001cb	f3 0f 5c c1	 subss	 xmm0, xmm1
  001cf	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 649  : 
; 650  : 			if ( cyclic >= 0.0 )

  001d4	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001d9	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001e1	72 7a		 jb	 SHORT $LN7@point_insi

; 651  : 			{
; 652  : 
; 653  : 				//
; 654  : 				// Check against the second side
; 655  : 				//
; 656  : 
; 657  : 				dx1 = x1 - x2;

  001e3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001e8	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  001ed	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 658  : 				dz1 = z1 - z2;

  001f2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  001f7	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  001fc	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 659  : 				dx2 = x2 - x_offset;

  00201	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00206	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  0020b	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 660  : 				dz2 = z2 - z_offset;

  00210	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00215	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  0021a	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 661  : 
; 662  : 				cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0021f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00224	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00229	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0022e	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00233	f3 0f 5c c1	 subss	 xmm0, xmm1
  00237	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 663  : 
; 664  : 				if ( cyclic >= 0.0 )

  0023c	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00241	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00249	72 12		 jb	 SHORT $LN7@point_insi

; 665  : 				{
; 666  : 
; 667  : 					*triangle_offset = internal_triangle_offset;

  0024b	8b 45 18	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  0024e	8b 4d cc	 mov	 ecx, DWORD PTR _internal_triangle_offset$[ebp]
  00251	89 08		 mov	 DWORD PTR [eax], ecx

; 668  : 
; 669  : 					return ( TRUE );

  00253	b8 01 00 00 00	 mov	 eax, 1
  00258	e9 7e 01 00 00	 jmp	 $LN1@point_insi
$LN7@point_insi:

; 670  : 				}
; 671  : 			}
; 672  : 		}
; 673  : 
; 674  : 		if ( even_triangle )

  0025d	83 7d d0 00	 cmp	 DWORD PTR _even_triangle$[ebp], 0
  00261	0f 84 b0 00 00
	00		 je	 $LN8@point_insi

; 675  : 		{
; 676  : 
; 677  : 			point = points + point_ref[0].point;

  00267	b8 01 00 00 00	 mov	 eax, 1
  0026c	6b c8 00	 imul	 ecx, eax, 0
  0026f	8b 55 c8	 mov	 edx, DWORD PTR _point_ref$[ebp]
  00272	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00276	8b 4d 10	 mov	 ecx, DWORD PTR _points$[ebp]
  00279	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0027c	89 55 c4	 mov	 DWORD PTR _point$[ebp], edx

; 678  : 
; 679  : 			x0 = point->x;

  0027f	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00282	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00285	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00289	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 680  : 			z0 = point->z;

  0028e	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00291	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00295	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00299	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 681  : 
; 682  : 			point = points + point_ref[1].point;

  0029e	b8 01 00 00 00	 mov	 eax, 1
  002a3	c1 e0 00	 shl	 eax, 0
  002a6	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  002a9	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  002ad	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  002b0	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002b3	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 683  : 
; 684  : 			x1 = point->x;

  002b6	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  002b9	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  002bc	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002c0	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 685  : 			z1 = point->z;

  002c5	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  002c8	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  002cc	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002d0	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 686  : 
; 687  : 			point = points + point_ref[2].point;

  002d5	b8 01 00 00 00	 mov	 eax, 1
  002da	d1 e0		 shl	 eax, 1
  002dc	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  002df	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  002e3	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  002e6	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002e9	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 688  : 
; 689  : 			x2 = point->x;

  002ec	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  002ef	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  002f2	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002f6	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 690  : 			z2 = point->z;

  002fb	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  002fe	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00302	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00306	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 691  : 
; 692  : 			even_triangle = FALSE;

  0030b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _even_triangle$[ebp], 0

; 693  : 		}
; 694  : 		else

  00312	e9 ab 00 00 00	 jmp	 $LN9@point_insi
$LN8@point_insi:

; 695  : 		{
; 696  : 
; 697  : 			point = points + point_ref[0].point;

  00317	b8 01 00 00 00	 mov	 eax, 1
  0031c	6b c8 00	 imul	 ecx, eax, 0
  0031f	8b 55 c8	 mov	 edx, DWORD PTR _point_ref$[ebp]
  00322	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00326	8b 4d 10	 mov	 ecx, DWORD PTR _points$[ebp]
  00329	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0032c	89 55 c4	 mov	 DWORD PTR _point$[ebp], edx

; 698  : 
; 699  : 			x0 = point->x;

  0032f	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00332	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00335	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00339	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 700  : 			z0 = point->z;

  0033e	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00341	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00345	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00349	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 701  : 
; 702  : 			point = points + point_ref[2].point;

  0034e	b8 01 00 00 00	 mov	 eax, 1
  00353	d1 e0		 shl	 eax, 1
  00355	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  00358	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0035c	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  0035f	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00362	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 703  : 
; 704  : 			x1 = point->x;

  00365	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00368	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0036b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0036f	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 705  : 			z1 = point->z;

  00374	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00377	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0037b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0037f	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 706  : 
; 707  : 			point = points + point_ref[1].point;

  00384	b8 01 00 00 00	 mov	 eax, 1
  00389	c1 e0 00	 shl	 eax, 0
  0038c	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  0038f	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00393	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  00396	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00399	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 708  : 
; 709  : 			x2 = point->x;

  0039c	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0039f	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  003a2	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003a6	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 710  : 			z2 = point->z;

  003ab	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  003ae	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  003b2	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003b6	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 711  : 
; 712  : 			even_triangle = TRUE;

  003bb	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _even_triangle$[ebp], 1
$LN9@point_insi:

; 713  : 		}
; 714  : 
; 715  : 		point_ref++;

  003c2	8b 45 c8	 mov	 eax, DWORD PTR _point_ref$[ebp]
  003c5	83 c0 01	 add	 eax, 1
  003c8	89 45 c8	 mov	 DWORD PTR _point_ref$[ebp], eax

; 716  : 
; 717  : 		internal_triangle_offset++;

  003cb	8b 45 cc	 mov	 eax, DWORD PTR _internal_triangle_offset$[ebp]
  003ce	83 c0 01	 add	 eax, 1
  003d1	89 45 cc	 mov	 DWORD PTR _internal_triangle_offset$[ebp], eax

; 718  : 	}

  003d4	e9 1d fd ff ff	 jmp	 $LN2@point_insi
$LN3@point_insi:

; 719  : 
; 720  : 	return ( FALSE );

  003d9	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 721  : }

  003db	5f		 pop	 edi
  003dc	5e		 pop	 esi
  003dd	5b		 pop	 ebx
  003de	8b e5		 mov	 esp, ebp
  003e0	5d		 pop	 ebp
  003e1	c2 14 00	 ret	 20			; 00000014H
?point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ENDP ; point_inside_terrain_byte_strip
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z
_TEXT	SEGMENT
tv141 = -128						; size = 4
_point$ = -60						; size = 4
_point_ref$ = -56					; size = 4
_internal_triangle_offset$ = -52			; size = 4
_even_triangle$ = -48					; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_number_of_points$ = 20					; size = 4
_triangle_offset$ = 24					; size = 4
?point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z PROC ; point_inside_terrain_word_strip, COMDAT

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 397  : 
; 398  : 	float
; 399  : 		x0,
; 400  : 		z0,
; 401  : 		x1,
; 402  : 		z1,
; 403  : 		x2,
; 404  : 		z2,
; 405  : 		dx1,
; 406  : 		dz1,
; 407  : 		dx2,
; 408  : 		dz2,
; 409  : 		cyclic;
; 410  : 
; 411  : 	int
; 412  : 		even_triangle,
; 413  : 		internal_triangle_offset;
; 414  : 
; 415  : 	terrain_3d_point_word_reference
; 416  : 		*point_ref;
; 417  : 
; 418  : 	terrain_3d_point_xz
; 419  : 		*point;
; 420  : 
; 421  : #if DEBUG_MODULE
; 422  : 
; 423  : 	num_in_poly_tests++;
; 424  : 
; 425  : #endif
; 426  : 
; 427  : 	point_ref = terrain_elevation_point_word_references;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00011	89 45 c8	 mov	 DWORD PTR _point_ref$[ebp], eax

; 428  : 
; 429  : 	ASSERT ( number_of_points > 2 );

  00014	83 7d 14 02	 cmp	 DWORD PTR _number_of_points$[ebp], 2
  00018	7f 18		 jg	 SHORT $LN4@point_insi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
  0001f	83 c0 21	 add	 eax, 33			; 00000021H
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BBDHDMEE@number_of_points?5?$DO?52@
  0002d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@point_insi:

; 430  : 
; 431  : 	point = points + point_ref[0].point;

  00032	b8 02 00 00 00	 mov	 eax, 2
  00037	6b c8 00	 imul	 ecx, eax, 0
  0003a	8b 55 c8	 mov	 edx, DWORD PTR _point_ref$[ebp]
  0003d	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00041	8b 4d 10	 mov	 ecx, DWORD PTR _points$[ebp]
  00044	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00047	89 55 c4	 mov	 DWORD PTR _point$[ebp], edx

; 432  : 
; 433  : 	x0 = point->x;

  0004a	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0004d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00050	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00054	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 434  : 	z0 = point->z;

  00059	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0005c	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00060	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00064	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 435  : 
; 436  : 	point = points + point_ref[1].point;

  00069	b8 02 00 00 00	 mov	 eax, 2
  0006e	c1 e0 00	 shl	 eax, 0
  00071	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  00074	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00078	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  0007b	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0007e	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 437  : 
; 438  : 	x1 = point->x;

  00081	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00084	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00087	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0008b	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 439  : 	z1 = point->z;

  00090	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00093	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00097	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 440  : 
; 441  : 	point = points + point_ref[2].point;

  000a0	b8 02 00 00 00	 mov	 eax, 2
  000a5	d1 e0		 shl	 eax, 1
  000a7	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  000aa	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  000ae	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  000b1	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000b4	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 442  : 
; 443  : 	x2 = point->x;

  000b7	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  000ba	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000bd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000c1	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 444  : 	z2 = point->z;

  000c6	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  000c9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000cd	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000d1	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 445  : 
; 446  : 	point_ref++;

  000d6	8b 45 c8	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000d9	83 c0 02	 add	 eax, 2
  000dc	89 45 c8	 mov	 DWORD PTR _point_ref$[ebp], eax

; 447  : 
; 448  : 	even_triangle = FALSE;

  000df	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _even_triangle$[ebp], 0

; 449  : 
; 450  : 	internal_triangle_offset = 0;

  000e6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _internal_triangle_offset$[ebp], 0

; 451  : 
; 452  : 	number_of_points -= 2;

  000ed	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000f0	83 e8 02	 sub	 eax, 2
  000f3	89 45 14	 mov	 DWORD PTR _number_of_points$[ebp], eax
$LN2@point_insi:

; 453  : 
; 454  : 	while ( number_of_points-- )

  000f6	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000f9	89 45 80	 mov	 DWORD PTR tv141[ebp], eax
  000fc	8b 4d 14	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  000ff	83 e9 01	 sub	 ecx, 1
  00102	89 4d 14	 mov	 DWORD PTR _number_of_points$[ebp], ecx
  00105	83 7d 80 00	 cmp	 DWORD PTR tv141[ebp], 0
  00109	0f 84 d4 02 00
	00		 je	 $LN3@point_insi

; 455  : 	{
; 456  : 
; 457  : 		//
; 458  : 		// Check against the first side
; 459  : 		//
; 460  : 
; 461  : 		dx1 = x0 - x1;

  0010f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  00114	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00119	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 462  : 		dz1 = z0 - z1;

  0011e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00123	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  00128	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 463  : 		dx2 = x1 - x_offset;

  0012d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00132	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  00137	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 464  : 		dz2 = z1 - z_offset;

  0013c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00141	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00146	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 465  : 
; 466  : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0014b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00150	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00155	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0015a	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  0015f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00163	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 467  : 
; 468  : 		if ( cyclic >= 0.0 )

  00168	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  0016d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00175	0f 82 e2 00 00
	00		 jb	 $LN7@point_insi

; 469  : 		{
; 470  : 
; 471  : 			//
; 472  : 			// Check against the third side
; 473  : 			//
; 474  : 
; 475  : 			dx1 = x2 - x0;

  0017b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00180	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  00185	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 476  : 			dz1 = z2 - z0;

  0018a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  0018f	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  00194	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 477  : 			dx2 = x0 - x_offset;

  00199	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  0019e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001a3	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 478  : 			dz2 = z0 - z_offset;

  001a8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  001ad	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  001b2	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 479  : 
; 480  : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  001b7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001bc	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001c1	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001c6	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001cb	f3 0f 5c c1	 subss	 xmm0, xmm1
  001cf	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 481  : 
; 482  : 			if ( cyclic >= 0.0 )

  001d4	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001d9	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001e1	72 7a		 jb	 SHORT $LN7@point_insi

; 483  : 			{
; 484  : 
; 485  : 				//
; 486  : 				// Check against the second side
; 487  : 				//
; 488  : 
; 489  : 				dx1 = x1 - x2;

  001e3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001e8	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  001ed	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 490  : 				dz1 = z1 - z2;

  001f2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  001f7	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  001fc	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 491  : 				dx2 = x2 - x_offset;

  00201	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00206	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  0020b	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 492  : 				dz2 = z2 - z_offset;

  00210	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00215	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  0021a	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 493  : 
; 494  : 				cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0021f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00224	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00229	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0022e	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00233	f3 0f 5c c1	 subss	 xmm0, xmm1
  00237	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 495  : 
; 496  : 				if ( cyclic >= 0.0 )

  0023c	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00241	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00249	72 12		 jb	 SHORT $LN7@point_insi

; 497  : 				{
; 498  : 
; 499  : 					*triangle_offset = internal_triangle_offset;

  0024b	8b 45 18	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  0024e	8b 4d cc	 mov	 ecx, DWORD PTR _internal_triangle_offset$[ebp]
  00251	89 08		 mov	 DWORD PTR [eax], ecx

; 500  : 
; 501  : 					return ( TRUE );

  00253	b8 01 00 00 00	 mov	 eax, 1
  00258	e9 88 01 00 00	 jmp	 $LN1@point_insi
$LN7@point_insi:

; 502  : 				}
; 503  : 			}
; 504  : 		}
; 505  : 
; 506  : 		if ( number_of_points )

  0025d	83 7d 14 00	 cmp	 DWORD PTR _number_of_points$[ebp], 0
  00261	0f 84 65 01 00
	00		 je	 $LN10@point_insi

; 507  : 		{
; 508  : 
; 509  : 			if ( even_triangle )

  00267	83 7d d0 00	 cmp	 DWORD PTR _even_triangle$[ebp], 0
  0026b	0f 84 b0 00 00
	00		 je	 $LN9@point_insi

; 510  : 			{
; 511  : 
; 512  : 				point = points + point_ref[0].point;

  00271	b8 02 00 00 00	 mov	 eax, 2
  00276	6b c8 00	 imul	 ecx, eax, 0
  00279	8b 55 c8	 mov	 edx, DWORD PTR _point_ref$[ebp]
  0027c	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00280	8b 4d 10	 mov	 ecx, DWORD PTR _points$[ebp]
  00283	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00286	89 55 c4	 mov	 DWORD PTR _point$[ebp], edx

; 513  : 
; 514  : 				x0 = point->x;

  00289	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0028c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0028f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00293	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 515  : 				z0 = point->z;

  00298	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0029b	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0029f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002a3	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 516  : 
; 517  : 				point = points + point_ref[1].point;

  002a8	b8 02 00 00 00	 mov	 eax, 2
  002ad	c1 e0 00	 shl	 eax, 0
  002b0	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  002b3	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  002b7	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  002ba	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002bd	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 518  : 
; 519  : 				x1 = point->x;

  002c0	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  002c3	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  002c6	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002ca	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 520  : 				z1 = point->z;

  002cf	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  002d2	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  002d6	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002da	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 521  : 
; 522  : 				point = points + point_ref[2].point;

  002df	b8 02 00 00 00	 mov	 eax, 2
  002e4	d1 e0		 shl	 eax, 1
  002e6	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  002e9	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  002ed	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  002f0	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002f3	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 523  : 
; 524  : 				x2 = point->x;

  002f6	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  002f9	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  002fc	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00300	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 525  : 				z2 = point->z;

  00305	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00308	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0030c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00310	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 526  : 
; 527  : 				even_triangle = FALSE;

  00315	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _even_triangle$[ebp], 0

; 528  : 			}
; 529  : 			else

  0031c	e9 ab 00 00 00	 jmp	 $LN10@point_insi
$LN9@point_insi:

; 530  : 			{
; 531  : 
; 532  : 				point = points + point_ref[0].point;

  00321	b8 02 00 00 00	 mov	 eax, 2
  00326	6b c8 00	 imul	 ecx, eax, 0
  00329	8b 55 c8	 mov	 edx, DWORD PTR _point_ref$[ebp]
  0032c	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00330	8b 4d 10	 mov	 ecx, DWORD PTR _points$[ebp]
  00333	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00336	89 55 c4	 mov	 DWORD PTR _point$[ebp], edx

; 533  : 
; 534  : 				x0 = point->x;

  00339	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0033c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0033f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00343	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 535  : 				z0 = point->z;

  00348	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  0034b	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0034f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00353	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 536  : 
; 537  : 				point = points + point_ref[2].point;

  00358	b8 02 00 00 00	 mov	 eax, 2
  0035d	d1 e0		 shl	 eax, 1
  0035f	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  00362	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00366	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  00369	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0036c	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 538  : 
; 539  : 				x1 = point->x;

  0036f	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00372	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00375	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00379	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 540  : 				z1 = point->z;

  0037e	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  00381	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00385	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00389	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 541  : 
; 542  : 				point = points + point_ref[1].point;

  0038e	b8 02 00 00 00	 mov	 eax, 2
  00393	c1 e0 00	 shl	 eax, 0
  00396	8b 4d c8	 mov	 ecx, DWORD PTR _point_ref$[ebp]
  00399	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0039d	8b 45 10	 mov	 eax, DWORD PTR _points$[ebp]
  003a0	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  003a3	89 4d c4	 mov	 DWORD PTR _point$[ebp], ecx

; 543  : 
; 544  : 				x2 = point->x;

  003a6	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  003a9	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  003ac	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003b0	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 545  : 				z2 = point->z;

  003b5	8b 45 c4	 mov	 eax, DWORD PTR _point$[ebp]
  003b8	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  003bc	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003c0	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 546  : 
; 547  : 				even_triangle = TRUE;

  003c5	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _even_triangle$[ebp], 1
$LN10@point_insi:

; 548  : 			}
; 549  : 		}
; 550  : 
; 551  : 		point_ref++;

  003cc	8b 45 c8	 mov	 eax, DWORD PTR _point_ref$[ebp]
  003cf	83 c0 02	 add	 eax, 2
  003d2	89 45 c8	 mov	 DWORD PTR _point_ref$[ebp], eax

; 552  : 
; 553  : 		internal_triangle_offset++;

  003d5	8b 45 cc	 mov	 eax, DWORD PTR _internal_triangle_offset$[ebp]
  003d8	83 c0 01	 add	 eax, 1
  003db	89 45 cc	 mov	 DWORD PTR _internal_triangle_offset$[ebp], eax

; 554  : 	}

  003de	e9 13 fd ff ff	 jmp	 $LN2@point_insi
$LN3@point_insi:

; 555  : 
; 556  : 	return ( FALSE );

  003e3	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 557  : }

  003e5	5f		 pop	 edi
  003e6	5e		 pop	 esi
  003e7	5b		 pop	 ebx
  003e8	8b e5		 mov	 esp, ebp
  003ea	5d		 pop	 ebp
  003eb	c2 14 00	 ret	 20			; 00000014H
?point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ENDP ; point_inside_terrain_word_strip
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z
_TEXT	SEGMENT
tv94 = -124						; size = 4
_point$ = -56						; size = 4
_point_ref$ = -52					; size = 4
_internal_triangle_offset$ = -48			; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_number_of_points$ = 20					; size = 4
_triangle_offset$ = 24					; size = 4
?point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z PROC ; point_inside_terrain_byte_fan, COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 272  : 
; 273  : 	float
; 274  : 		x0,
; 275  : 		z0,
; 276  : 		x1,
; 277  : 		z1,
; 278  : 		x2,
; 279  : 		z2,
; 280  : 		dx1,
; 281  : 		dz1,
; 282  : 		dx2,
; 283  : 		dz2,
; 284  : 		cyclic;
; 285  : 
; 286  : 	int
; 287  : 		internal_triangle_offset;
; 288  : 
; 289  : 	terrain_3d_point_byte_reference
; 290  : 		*point_ref;
; 291  : 
; 292  : 	terrain_3d_point_xz
; 293  : 		*point;
; 294  : 
; 295  : #if DEBUG_MODULE
; 296  : 
; 297  : 	num_in_poly_tests++;
; 298  : 
; 299  : #endif
; 300  : 
; 301  : 	point_ref = terrain_elevation_point_byte_references;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  0000e	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 302  : 
; 303  : 	ASSERT ( number_of_points > 2 );

  00011	83 7d 14 02	 cmp	 DWORD PTR _number_of_points$[ebp], 2
  00015	7f 18		 jg	 SHORT $LN4@point_insi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
  0001c	83 c0 20	 add	 eax, 32			; 00000020H
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BBDHDMEE@number_of_points?5?$DO?52@
  0002a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@point_insi:

; 304  : 
; 305  : 	point = points + point_ref->point;

  0002f	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00032	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00035	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00038	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0003b	89 45 c8	 mov	 DWORD PTR _point$[ebp], eax

; 306  : 
; 307  : 	x0 = point->x;

  0003e	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00048	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 308  : 	z0 = point->z;

  0004d	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00050	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00054	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00058	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 309  : 
; 310  : 	point_ref++;

  0005d	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 311  : 
; 312  : 	point = points + point_ref->point;

  00066	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00069	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0006c	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0006f	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00072	89 45 c8	 mov	 DWORD PTR _point$[ebp], eax

; 313  : 
; 314  : 	x2 = point->x;

  00075	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00078	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0007b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0007f	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 315  : 	z2 = point->z;

  00084	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00087	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0008b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0008f	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 316  : 
; 317  : 	point_ref++;

  00094	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00097	83 c0 01	 add	 eax, 1
  0009a	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 318  : 
; 319  : 	internal_triangle_offset = 0;

  0009d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _internal_triangle_offset$[ebp], 0

; 320  : 
; 321  : 	number_of_points -= 2;

  000a4	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000a7	83 e8 02	 sub	 eax, 2
  000aa	89 45 14	 mov	 DWORD PTR _number_of_points$[ebp], eax
$LN2@point_insi:

; 322  : 
; 323  : 	while ( number_of_points-- )

  000ad	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000b0	89 45 84	 mov	 DWORD PTR tv94[ebp], eax
  000b3	8b 4d 14	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  000b6	83 e9 01	 sub	 ecx, 1
  000b9	89 4d 14	 mov	 DWORD PTR _number_of_points$[ebp], ecx
  000bc	83 7d 84 00	 cmp	 DWORD PTR tv94[ebp], 0
  000c0	0f 84 a4 01 00
	00		 je	 $LN3@point_insi

; 324  : 	{
; 325  : 
; 326  : 		x1 = x2;

  000c6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000cb	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 327  : 		z1 = z2;

  000d0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  000d5	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 328  : 
; 329  : 		point = points + point_ref->point;

  000da	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000dd	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000e0	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  000e3	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000e6	89 45 c8	 mov	 DWORD PTR _point$[ebp], eax

; 330  : 
; 331  : 		x2 = point->x;

  000e9	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  000ec	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000ef	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000f3	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 332  : 		z2 = point->z;

  000f8	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  000fb	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000ff	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00103	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 333  : 
; 334  : 		point_ref++;

  00108	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0010b	83 c0 01	 add	 eax, 1
  0010e	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 335  : 
; 336  : 		//
; 337  : 		// Check against the first side
; 338  : 		//
; 339  : 
; 340  : 		dx1 = x0 - x1;

  00111	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  00116	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  0011b	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 341  : 		dz1 = z0 - z1;

  00120	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00125	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  0012a	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 342  : 		dx2 = x1 - x_offset;

  0012f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00134	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  00139	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 343  : 		dz2 = z1 - z_offset;

  0013e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00143	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00148	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 344  : 
; 345  : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0014d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00152	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00157	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0015c	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00161	f3 0f 5c c1	 subss	 xmm0, xmm1
  00165	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 346  : 
; 347  : 		if ( cyclic >= 0.0 )

  0016a	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  0016f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00177	0f 82 df 00 00
	00		 jb	 $LN7@point_insi

; 348  : 		{
; 349  : 
; 350  : 			//
; 351  : 			// Check against the third side
; 352  : 			//
; 353  : 
; 354  : 			dx1 = x2 - x0;

  0017d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00182	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  00187	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 355  : 			dz1 = z2 - z0;

  0018c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00191	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  00196	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 356  : 			dx2 = x0 - x_offset;

  0019b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  001a0	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001a5	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 357  : 			dz2 = z0 - z_offset;

  001aa	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  001af	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  001b4	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 358  : 
; 359  : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  001b9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001be	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001c3	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001c8	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001cd	f3 0f 5c c1	 subss	 xmm0, xmm1
  001d1	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 360  : 
; 361  : 			if ( cyclic >= 0.0 )

  001d6	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001db	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001e3	72 77		 jb	 SHORT $LN7@point_insi

; 362  : 			{
; 363  : 
; 364  : 				//
; 365  : 				// Check against the second side
; 366  : 				//
; 367  : 
; 368  : 				dx1 = x1 - x2;

  001e5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001ea	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  001ef	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 369  : 				dz1 = z1 - z2;

  001f4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  001f9	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  001fe	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 370  : 				dx2 = x2 - x_offset;

  00203	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00208	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  0020d	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 371  : 				dz2 = z2 - z_offset;

  00212	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00217	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  0021c	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 372  : 
; 373  : 				cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  00221	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00226	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  0022b	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  00230	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00235	f3 0f 5c c1	 subss	 xmm0, xmm1
  00239	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 374  : 
; 375  : 				if ( cyclic >= 0.0 )

  0023e	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00243	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0024b	72 0f		 jb	 SHORT $LN7@point_insi

; 376  : 				{
; 377  : 
; 378  : 					*triangle_offset = internal_triangle_offset;

  0024d	8b 45 18	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00250	8b 4d d0	 mov	 ecx, DWORD PTR _internal_triangle_offset$[ebp]
  00253	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 
; 380  : 					return ( TRUE );

  00255	b8 01 00 00 00	 mov	 eax, 1
  0025a	eb 10		 jmp	 SHORT $LN1@point_insi
$LN7@point_insi:

; 381  : 				}
; 382  : 			}
; 383  : 		}
; 384  : 
; 385  : 		internal_triangle_offset++;

  0025c	8b 45 d0	 mov	 eax, DWORD PTR _internal_triangle_offset$[ebp]
  0025f	83 c0 01	 add	 eax, 1
  00262	89 45 d0	 mov	 DWORD PTR _internal_triangle_offset$[ebp], eax

; 386  : 	}

  00265	e9 43 fe ff ff	 jmp	 $LN2@point_insi
$LN3@point_insi:

; 387  : 
; 388  : 	return ( FALSE );

  0026a	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 389  : }

  0026c	5f		 pop	 edi
  0026d	5e		 pop	 esi
  0026e	5b		 pop	 ebx
  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c2 14 00	 ret	 20			; 00000014H
?point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ENDP ; point_inside_terrain_byte_fan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z
_TEXT	SEGMENT
tv94 = -124						; size = 4
_point$ = -56						; size = 4
_point_ref$ = -52					; size = 4
_internal_triangle_offset$ = -48			; size = 4
_cyclic$ = -44						; size = 4
_dz2$ = -40						; size = 4
_dx2$ = -36						; size = 4
_dz1$ = -32						; size = 4
_dx1$ = -28						; size = 4
_z2$ = -24						; size = 4
_x2$ = -20						; size = 4
_z1$ = -16						; size = 4
_x1$ = -12						; size = 4
_z0$ = -8						; size = 4
_x0$ = -4						; size = 4
_x_offset$ = 8						; size = 4
_z_offset$ = 12						; size = 4
_points$ = 16						; size = 4
_number_of_points$ = 20					; size = 4
_triangle_offset$ = 24					; size = 4
?point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z PROC ; point_inside_terrain_word_fan, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 147  : 
; 148  : 	float
; 149  : 		x0,
; 150  : 		z0,
; 151  : 		x1,
; 152  : 		z1,
; 153  : 		x2,
; 154  : 		z2,
; 155  : 		dx1,
; 156  : 		dz1,
; 157  : 		dx2,
; 158  : 		dz2,
; 159  : 		cyclic;
; 160  : 
; 161  : 	int
; 162  : 		internal_triangle_offset;
; 163  : 
; 164  : 	terrain_3d_point_word_reference
; 165  : 		*point_ref;
; 166  : 
; 167  : 	terrain_3d_point_xz
; 168  : 		*point;
; 169  : 
; 170  : #if DEBUG_MODULE
; 171  : 
; 172  : 	num_in_poly_tests++;
; 173  : 
; 174  : #endif
; 175  : 
; 176  : 	point_ref = terrain_elevation_point_word_references;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  0000e	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 177  : 
; 178  : 	ASSERT ( number_of_points > 2 );

  00011	83 7d 14 02	 cmp	 DWORD PTR _number_of_points$[ebp], 2
  00015	7f 18		 jg	 SHORT $LN4@point_insi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z@4JA
  0001c	83 c0 20	 add	 eax, 32			; 00000020H
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BBDHDMEE@number_of_points?5?$DO?52@
  0002a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@point_insi:

; 179  : 
; 180  : 	point = points + point_ref->point;

  0002f	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00032	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00035	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  00038	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0003b	89 45 c8	 mov	 DWORD PTR _point$[ebp], eax

; 181  : 
; 182  : 	x0 = point->x;

  0003e	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00048	f3 0f 11 45 fc	 movss	 DWORD PTR _x0$[ebp], xmm0

; 183  : 	z0 = point->z;

  0004d	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00050	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00054	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00058	f3 0f 11 45 f8	 movss	 DWORD PTR _z0$[ebp], xmm0

; 184  : 
; 185  : 	point_ref++;

  0005d	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00060	83 c0 02	 add	 eax, 2
  00063	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 186  : 
; 187  : 	point = points + point_ref->point;

  00066	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00069	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0006c	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  0006f	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00072	89 45 c8	 mov	 DWORD PTR _point$[ebp], eax

; 188  : 
; 189  : 	x2 = point->x;

  00075	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00078	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0007b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0007f	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 190  : 	z2 = point->z;

  00084	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  00087	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0008b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0008f	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 191  : 
; 192  : 	point_ref++;

  00094	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  00097	83 c0 02	 add	 eax, 2
  0009a	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 193  : 
; 194  : 	internal_triangle_offset = 0;

  0009d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _internal_triangle_offset$[ebp], 0

; 195  : 
; 196  : 	number_of_points -= 2;

  000a4	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000a7	83 e8 02	 sub	 eax, 2
  000aa	89 45 14	 mov	 DWORD PTR _number_of_points$[ebp], eax
$LN2@point_insi:

; 197  : 
; 198  : 	while ( number_of_points-- )

  000ad	8b 45 14	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  000b0	89 45 84	 mov	 DWORD PTR tv94[ebp], eax
  000b3	8b 4d 14	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  000b6	83 e9 01	 sub	 ecx, 1
  000b9	89 4d 14	 mov	 DWORD PTR _number_of_points$[ebp], ecx
  000bc	83 7d 84 00	 cmp	 DWORD PTR tv94[ebp], 0
  000c0	0f 84 a4 01 00
	00		 je	 $LN3@point_insi

; 199  : 	{
; 200  : 
; 201  : 		x1 = x2;

  000c6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000cb	f3 0f 11 45 f4	 movss	 DWORD PTR _x1$[ebp], xmm0

; 202  : 		z1 = z2;

  000d0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  000d5	f3 0f 11 45 f0	 movss	 DWORD PTR _z1$[ebp], xmm0

; 203  : 
; 204  : 		point = points + point_ref->point;

  000da	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  000dd	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000e0	8b 55 10	 mov	 edx, DWORD PTR _points$[ebp]
  000e3	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000e6	89 45 c8	 mov	 DWORD PTR _point$[ebp], eax

; 205  : 
; 206  : 		x2 = point->x;

  000e9	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  000ec	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000ef	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000f3	f3 0f 11 45 ec	 movss	 DWORD PTR _x2$[ebp], xmm0

; 207  : 		z2 = point->z;

  000f8	8b 45 c8	 mov	 eax, DWORD PTR _point$[ebp]
  000fb	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000ff	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00103	f3 0f 11 45 e8	 movss	 DWORD PTR _z2$[ebp], xmm0

; 208  : 
; 209  : 		point_ref++;

  00108	8b 45 cc	 mov	 eax, DWORD PTR _point_ref$[ebp]
  0010b	83 c0 02	 add	 eax, 2
  0010e	89 45 cc	 mov	 DWORD PTR _point_ref$[ebp], eax

; 210  : 
; 211  : 		//
; 212  : 		// Check against the first side
; 213  : 		//
; 214  : 
; 215  : 		dx1 = x0 - x1;

  00111	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  00116	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _x1$[ebp]
  0011b	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 216  : 		dz1 = z0 - z1;

  00120	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  00125	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _z1$[ebp]
  0012a	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 217  : 		dx2 = x1 - x_offset;

  0012f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00134	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  00139	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 218  : 		dz2 = z1 - z_offset;

  0013e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  00143	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  00148	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 219  : 
; 220  : 		cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  0014d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00152	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  00157	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  0015c	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00161	f3 0f 5c c1	 subss	 xmm0, xmm1
  00165	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 221  : 
; 222  : 		if ( cyclic >= 0.0 )

  0016a	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  0016f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00177	0f 82 df 00 00
	00		 jb	 $LN7@point_insi

; 223  : 		{
; 224  : 
; 225  : 			//
; 226  : 			// Check against the third side
; 227  : 			//
; 228  : 
; 229  : 			dx1 = x2 - x0;

  0017d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00182	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x0$[ebp]
  00187	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 230  : 			dz1 = z2 - z0;

  0018c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00191	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _z0$[ebp]
  00196	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 231  : 			dx2 = x0 - x_offset;

  0019b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x0$[ebp]
  001a0	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  001a5	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 232  : 			dz2 = z0 - z_offset;

  001aa	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _z0$[ebp]
  001af	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  001b4	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 233  : 
; 234  : 			cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  001b9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  001be	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  001c3	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  001c8	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  001cd	f3 0f 5c c1	 subss	 xmm0, xmm1
  001d1	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 235  : 
; 236  : 			if ( cyclic >= 0.0 )

  001d6	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  001db	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001e3	72 77		 jb	 SHORT $LN7@point_insi

; 237  : 			{
; 238  : 
; 239  : 				//
; 240  : 				// Check against the second side
; 241  : 				//
; 242  : 
; 243  : 				dx1 = x1 - x2;

  001e5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001ea	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _x2$[ebp]
  001ef	f3 0f 11 45 e4	 movss	 DWORD PTR _dx1$[ebp], xmm0

; 244  : 				dz1 = z1 - z2;

  001f4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z1$[ebp]
  001f9	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _z2$[ebp]
  001fe	f3 0f 11 45 e0	 movss	 DWORD PTR _dz1$[ebp], xmm0

; 245  : 				dx2 = x2 - x_offset;

  00203	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00208	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x_offset$[ebp]
  0020d	f3 0f 11 45 dc	 movss	 DWORD PTR _dx2$[ebp], xmm0

; 246  : 				dz2 = z2 - z_offset;

  00212	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z2$[ebp]
  00217	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _z_offset$[ebp]
  0021c	f3 0f 11 45 d8	 movss	 DWORD PTR _dz2$[ebp], xmm0

; 247  : 
; 248  : 				cyclic = ( dx2 * dz1 ) - ( dx1 * dz2 );

  00221	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dx2$[ebp]
  00226	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _dz1$[ebp]
  0022b	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _dx1$[ebp]
  00230	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _dz2$[ebp]
  00235	f3 0f 5c c1	 subss	 xmm0, xmm1
  00239	f3 0f 11 45 d4	 movss	 DWORD PTR _cyclic$[ebp], xmm0

; 249  : 
; 250  : 				if ( cyclic >= 0.0 )

  0023e	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cyclic$[ebp]
  00243	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0024b	72 0f		 jb	 SHORT $LN7@point_insi

; 251  : 				{
; 252  : 
; 253  : 					*triangle_offset = internal_triangle_offset;

  0024d	8b 45 18	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00250	8b 4d d0	 mov	 ecx, DWORD PTR _internal_triangle_offset$[ebp]
  00253	89 08		 mov	 DWORD PTR [eax], ecx

; 254  : 
; 255  : 					return ( TRUE );

  00255	b8 01 00 00 00	 mov	 eax, 1
  0025a	eb 10		 jmp	 SHORT $LN1@point_insi
$LN7@point_insi:

; 256  : 				}
; 257  : 			}
; 258  : 		}
; 259  : 
; 260  : 		internal_triangle_offset++;

  0025c	8b 45 d0	 mov	 eax, DWORD PTR _internal_triangle_offset$[ebp]
  0025f	83 c0 01	 add	 eax, 1
  00262	89 45 d0	 mov	 DWORD PTR _internal_triangle_offset$[ebp], eax

; 261  : 	}

  00265	e9 43 fe ff ff	 jmp	 $LN2@point_insi
$LN3@point_insi:

; 262  : 
; 263  : 	return ( FALSE );

  0026a	33 c0		 xor	 eax, eax
$LN1@point_insi:

; 264  : }

  0026c	5f		 pop	 edi
  0026d	5e		 pop	 esi
  0026e	5b		 pop	 ebx
  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c2 14 00	 ret	 20			; 00000014H
?point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ENDP ; point_inside_terrain_word_fan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z
_TEXT	SEGMENT
_normal$ = 8						; size = 4
?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z PROC	; get_3d_terrain_last_normal, COMDAT

; 2201 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2202 : 
; 2203 : 	*normal = system_point_data.face_normal;

  00009	8b 45 08	 mov	 eax, DWORD PTR _normal$[ebp]
  0000c	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A+32
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A+36
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 0d 28 00 00
	00		 mov	 ecx, DWORD PTR ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A+40
  00023	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 2204 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z ENDP	; get_3d_terrain_last_normal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z
_TEXT	SEGMENT
_normal$ = 8						; size = 4
_x$ = 12						; size = 4
_z$ = 16						; size = 4
?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z PROC	; get_3d_terrain_face_normal, COMDAT

; 2189 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2190 : 
; 2191 : 	get_3d_terrain_point_data ( x, z, NULL );

  00009	6a 00		 push	 0
  0000b	51		 push	 ecx
  0000c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	51		 push	 ecx
  00017	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00026	dd d8		 fstp	 ST(0)

; 2192 : 
; 2193 : 	get_3d_terrain_last_normal ( normal );

  00028	8b 45 08	 mov	 eax, DWORD PTR _normal$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z ; get_3d_terrain_last_normal

; 2194 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?get_3d_terrain_face_normal@@YGXPAUVEC3D@@MM@Z ENDP	; get_3d_terrain_face_normal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?get_3d_terrain_elevation_and_face_normal@@YGMMMPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z
_TEXT	SEGMENT
_height$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_normal$ = 16						; size = 4
_point_data$ = 20					; size = 4
?get_3d_terrain_elevation_and_face_normal@@YGMMMPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z PROC ; get_3d_terrain_elevation_and_face_normal, COMDAT

; 2168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2169 : 
; 2170 : 	float
; 2171 : 		height;
; 2172 : 
; 2173 : 	height = get_3d_terrain_point_data ( x, z, NULL );

  00009	6a 00		 push	 0
  0000b	51		 push	 ecx
  0000c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	51		 push	 ecx
  00017	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00026	d9 5d fc	 fstp	 DWORD PTR _height$[ebp]

; 2174 : 
; 2175 : 	if ( normal )

  00029	83 7d 10 00	 cmp	 DWORD PTR _normal$[ebp], 0
  0002d	74 09		 je	 SHORT $LN2@get_3d_ter

; 2176 : 	{
; 2177 : 	
; 2178 : 		get_3d_terrain_last_normal ( normal );

  0002f	8b 45 10	 mov	 eax, DWORD PTR _normal$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z ; get_3d_terrain_last_normal
$LN2@get_3d_ter:

; 2179 : 	}
; 2180 : 
; 2181 : 	return ( height );

  00038	d9 45 fc	 fld	 DWORD PTR _height$[ebp]

; 2182 : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 10 00	 ret	 16			; 00000010H
?get_3d_terrain_elevation_and_face_normal@@YGMMMPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z ENDP ; get_3d_terrain_elevation_and_face_normal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?display_terrain_elevation_statistics@@YGXXZ
_TEXT	SEGMENT
?display_terrain_elevation_statistics@@YGXXZ PROC	; display_terrain_elevation_statistics, COMDAT

; 2084 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2085 : 	debug_log ("WARNING! Terrain elevation statistics are not enabled");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@BKOKAEOJ@WARNING?$CB?5Terrain?5elevation?5stat@
  0000e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00013	83 c4 04	 add	 esp, 4

; 2086 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?display_terrain_elevation_statistics@@YGXXZ ENDP	; display_terrain_elevation_statistics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?terrain_elevation_soak_test@@YGXH@Z
_TEXT	SEGMENT
_z_end$ = -36						; size = 4
_z_start$ = -32						; size = 4
_z$ = -28						; size = 4
_x_end$ = -24						; size = 4
_x_start$ = -20						; size = 4
_x$ = -16						; size = 4
_sample_distance$ = -12					; size = 4
_z_sec$ = -8						; size = 4
_x_sec$ = -4						; size = 4
_samples_per_sector_side$ = 8				; size = 4
?terrain_elevation_soak_test@@YGXH@Z PROC		; terrain_elevation_soak_test, COMDAT

; 2009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2010 : 	int
; 2011 : 		x_sec,
; 2012 : 		z_sec;
; 2013 : 
; 2014 : 	float
; 2015 : 		sample_distance,
; 2016 : 		x,
; 2017 : 		x_start,
; 2018 : 		x_end,
; 2019 : 		z,
; 2020 : 		z_start,
; 2021 : 		z_end;
; 2022 : 
; 2023 : 	debug_log ("*** start terrain elevation soak test ***");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@FLPKPMME@?$CK?$CK?$CK?5start?5terrain?5elevation?5soa@
  0000e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00013	83 c4 04	 add	 esp, 4

; 2024 : 
; 2025 : 	sample_distance = ((float) TERRAIN_3D_SECTOR_SIDE_LENGTH) / ((float) samples_per_sector_side);

  00016	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _samples_per_sector_side$[ebp]
  0001b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@45000000
  00023	f3 0f 5e c8	 divss	 xmm1, xmm0
  00027	f3 0f 11 4d f4	 movss	 DWORD PTR _sample_distance$[ebp], xmm1

; 2026 : 
; 2027 : 	for (z_sec = 0; z_sec < terrain_3d_sector_z_max; z_sec++)

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _z_sec$[ebp], 0
  00033	eb 09		 jmp	 SHORT $LN4@terrain_el
$LN2@terrain_el:
  00035	8b 45 f8	 mov	 eax, DWORD PTR _z_sec$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 f8	 mov	 DWORD PTR _z_sec$[ebp], eax
$LN4@terrain_el:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _z_sec$[ebp]
  00041	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_sector_z_max@@3HA ; terrain_3d_sector_z_max
  00047	0f 8d f0 00 00
	00		 jge	 $LN3@terrain_el

; 2028 : 	{
; 2029 : 		debug_log ("z sector = %d", z_sec);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _z_sec$[ebp]
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PDKOGPEF@z?5sector?5?$DN?5?$CFd@
  00056	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005b	83 c4 08	 add	 esp, 8

; 2030 : 
; 2031 : 		for (x_sec = 0; x_sec < terrain_3d_sector_x_max; x_sec++)

  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x_sec$[ebp], 0
  00065	eb 09		 jmp	 SHORT $LN7@terrain_el
$LN5@terrain_el:
  00067	8b 45 fc	 mov	 eax, DWORD PTR _x_sec$[ebp]
  0006a	83 c0 01	 add	 eax, 1
  0006d	89 45 fc	 mov	 DWORD PTR _x_sec$[ebp], eax
$LN7@terrain_el:
  00070	8b 45 fc	 mov	 eax, DWORD PTR _x_sec$[ebp]
  00073	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?terrain_3d_sector_x_max@@3HA ; terrain_3d_sector_x_max
  00079	0f 8d b9 00 00
	00		 jge	 $LN6@terrain_el

; 2032 : 		{
; 2033 : 			z_start = z_sec * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _z_sec$[ebp]
  00082	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00085	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00089	f3 0f 11 45 e0	 movss	 DWORD PTR _z_start$[ebp], xmm0

; 2034 : 
; 2035 : 			z_end = (z_sec + 1) * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  0008e	8b 45 f8	 mov	 eax, DWORD PTR _z_sec$[ebp]
  00091	83 c0 01	 add	 eax, 1
  00094	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00097	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0009b	f3 0f 11 45 dc	 movss	 DWORD PTR _z_end$[ebp], xmm0

; 2036 : 
; 2037 : 			for (z = z_start; z < z_end; z += sample_distance)

  000a0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _z_start$[ebp]
  000a5	f3 0f 11 45 e4	 movss	 DWORD PTR _z$[ebp], xmm0
  000aa	eb 0f		 jmp	 SHORT $LN10@terrain_el
$LN8@terrain_el:
  000ac	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _z$[ebp]
  000b1	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _sample_distance$[ebp]
  000b6	f3 0f 11 45 e4	 movss	 DWORD PTR _z$[ebp], xmm0
$LN10@terrain_el:
  000bb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z_end$[ebp]
  000c0	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR _z$[ebp]
  000c4	76 6d		 jbe	 SHORT $LN9@terrain_el

; 2038 : 			{
; 2039 : 				x_start = x_sec * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _x_sec$[ebp]
  000c9	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  000cc	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000d0	f3 0f 11 45 ec	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 2040 : 
; 2041 : 				x_end = (x_sec + 1) * TERRAIN_3D_SECTOR_SIDE_LENGTH;

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _x_sec$[ebp]
  000d8	83 c0 01	 add	 eax, 1
  000db	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  000de	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000e2	f3 0f 11 45 e8	 movss	 DWORD PTR _x_end$[ebp], xmm0

; 2042 : 
; 2043 : 				for (x = x_start; x < x_end; x += sample_distance)

  000e7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  000ec	f3 0f 11 45 f0	 movss	 DWORD PTR _x$[ebp], xmm0
  000f1	eb 0f		 jmp	 SHORT $LN13@terrain_el
$LN11@terrain_el:
  000f3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x$[ebp]
  000f8	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _sample_distance$[ebp]
  000fd	f3 0f 11 45 f0	 movss	 DWORD PTR _x$[ebp], xmm0
$LN13@terrain_el:
  00102	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00107	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _x$[ebp]
  0010b	76 21		 jbe	 SHORT $LN12@terrain_el

; 2044 : 				{
; 2045 : 					get_3d_terrain_point_data (x, z, NULL);

  0010d	6a 00		 push	 0
  0010f	51		 push	 ecx
  00110	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _z$[ebp]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	51		 push	 ecx
  0011b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  0012a	dd d8		 fstp	 ST(0)

; 2046 : 				}

  0012c	eb c5		 jmp	 SHORT $LN11@terrain_el
$LN12@terrain_el:

; 2047 : 			}

  0012e	e9 79 ff ff ff	 jmp	 $LN8@terrain_el
$LN9@terrain_el:

; 2048 : 		}

  00133	e9 2f ff ff ff	 jmp	 $LN5@terrain_el
$LN6@terrain_el:

; 2049 : 	}

  00138	e9 f8 fe ff ff	 jmp	 $LN2@terrain_el
$LN3@terrain_el:

; 2050 : 
; 2051 : 	debug_log ("*** end terrain elevation soak test ***");

  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IMKODBJP@?$CK?$CK?$CK?5end?5terrain?5elevation?5soak?5@
  00142	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00147	83 c4 04	 add	 esp, 4

; 2052 : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 04 00	 ret	 4
?terrain_elevation_soak_test@@YGXH@Z ENDP		; terrain_elevation_soak_test
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z
_TEXT	SEGMENT
_point_data$ = 8					; size = 4
?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z PROC ; get_3d_terrain_point_data_type, COMDAT

; 2131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2132 : 
; 2133 : 	if ( !point_data )

  00009	83 7d 08 00	 cmp	 DWORD PTR _point_data$[ebp], 0
  0000d	75 07		 jne	 SHORT $LN2@get_3d_ter

; 2134 : 	{
; 2135 : 
; 2136 : 		point_data = &system_point_data;

  0000f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _point_data$[ebp], OFFSET ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A
$LN2@get_3d_ter:

; 2137 : 	}
; 2138 : 
; 2139 : 	return ( point_data->terrain_type );

  00016	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  00019	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 2140 : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ENDP ; get_3d_terrain_point_data_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_point_data$ = 8					; size = 4
?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z PROC ; get_3d_terrain_point_data_elevation, COMDAT

; 2115 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2116 : 
; 2117 : 	if ( !point_data )

  00009	83 7d 08 00	 cmp	 DWORD PTR _point_data$[ebp], 0
  0000d	75 07		 jne	 SHORT $LN2@get_3d_ter

; 2118 : 	{
; 2119 : 
; 2120 : 		point_data = &system_point_data;

  0000f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _point_data$[ebp], OFFSET ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A
$LN2@get_3d_ter:

; 2121 : 	}
; 2122 : 
; 2123 : 	return ( point_data->last_elevation );

  00016	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  00019	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0001e	f3 0f 11 45 bc	 movss	 DWORD PTR tv69[ebp], xmm0
  00023	d9 45 bc	 fld	 DWORD PTR tv69[ebp]

; 2124 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ENDP ; get_3d_terrain_point_data_elevation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?get_3d_terrain_point_data_normal@@YGPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z
_TEXT	SEGMENT
_point_data$ = 8					; size = 4
?get_3d_terrain_point_data_normal@@YGPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z PROC ; get_3d_terrain_point_data_normal, COMDAT

; 2099 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2100 : 
; 2101 : 	if ( !point_data )

  00009	83 7d 08 00	 cmp	 DWORD PTR _point_data$[ebp], 0
  0000d	75 07		 jne	 SHORT $LN2@get_3d_ter

; 2102 : 	{
; 2103 : 
; 2104 : 		point_data = &system_point_data;

  0000f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _point_data$[ebp], OFFSET ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A
$LN2@get_3d_ter:

; 2105 : 	}
; 2106 : 
; 2107 : 	return ( &point_data->face_normal );

  00016	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  00019	83 c0 20	 add	 eax, 32			; 00000020H

; 2108 : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?get_3d_terrain_point_data_normal@@YGPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z ENDP ; get_3d_terrain_point_data_normal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z
_TEXT	SEGMENT
tv874 = -240						; size = 4
tv873 = -236						; size = 4
tv376 = -236						; size = 4
tv346 = -236						; size = 4
tv331 = -236						; size = 4
tv298 = -236						; size = 4
tv274 = -236						; size = 4
tv263 = -236						; size = 4
tv231 = -236						; size = 4
tv196 = -236						; size = 4
tv174 = -236						; size = 4
_y2$1 = -168						; size = 4
_y1$2 = -164						; size = 4
_y0$3 = -160						; size = 4
_point2y$4 = -156					; size = 4
_point1y$5 = -152					; size = 4
_point0y$6 = -148					; size = 4
_point2xz$7 = -144					; size = 4
_point1xz$8 = -140					; size = 4
_point0xz$9 = -136					; size = 4
_normal$10 = -132					; size = 12
_vector2$11 = -120					; size = 12
_vector1$12 = -108					; size = 12
_points_y$ = -96					; size = 4
_points_xz$ = -92					; size = 4
_terrain_type$ = -88					; size = 4
_surface$ = -84						; size = 4
_point_y$ = -80						; size = 4
_point$ = -76						; size = 4
_terrain_face$ = -72					; size = 4
_terrain_sector$ = -68					; size = 4
_terrain_elevation$ = -64				; size = 4
_dz$ = -60						; size = 4
_dy$ = -56						; size = 4
_dx$ = -52						; size = 4
_y$ = -48						; size = 4
_scaled_z_offset$ = -44					; size = 4
_scaled_x_offset$ = -40					; size = 4
_z_offset$ = -36					; size = 4
_x_offset$ = -32					; size = 4
_found_fast$ = -28					; size = 4
_found$ = -24						; size = 4
_triangle_offset$ = -20					; size = 4
_number_of_points$ = -16				; size = 4
_number_of_faces$ = -12					; size = 4
_z_sector$ = -8						; size = 4
_x_sector$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_point_data$ = 16					; size = 4
?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z PROC ; get_3d_terrain_point_data, COMDAT

; 1210 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1211 : 
; 1212 : 	int
; 1213 : 		x_sector,
; 1214 : 		z_sector,
; 1215 : 		number_of_faces,
; 1216 : 		number_of_points,
; 1217 : 		triangle_offset,
; 1218 : 		found,
; 1219 : 		found_fast;
; 1220 : 
; 1221 : 	float
; 1222 : 		x_offset,
; 1223 : 		z_offset,
; 1224 : 		scaled_x_offset,
; 1225 : 		scaled_z_offset,
; 1226 : 		y,
; 1227 : 		dx,
; 1228 : 		dy,
; 1229 : 		dz,
; 1230 : 		terrain_elevation;
; 1231 : 
; 1232 : 	terrain_3d_sector
; 1233 : 		*terrain_sector;
; 1234 : 
; 1235 : 	terrain_3d_face
; 1236 : 		*terrain_face;
; 1237 : 
; 1238 : 	terrain_3d_point_xz
; 1239 : 		*point;
; 1240 : 
; 1241 : 	terrain_3d_point_y
; 1242 : 		*point_y;
; 1243 : 
; 1244 : 	terrain_3d_surface
; 1245 : 		*surface;
; 1246 : 
; 1247 : 	terrain_types
; 1248 : 		terrain_type;
; 1249 : 
; 1250 : 	terrain_3d_point_xz
; 1251 : 		*points_xz;
; 1252 : 
; 1253 : 	terrain_3d_point_y
; 1254 : 		*points_y;
; 1255 : 
; 1256 : #if DEBUG_MODULE
; 1257 : 	num_elevation_tests++;
; 1258 : #endif
; 1259 : 
; 1260 : 	////////////////////////////////////////
; 1261 : 	//
; 1262 : 	// check point is on the map
; 1263 : 	//
; 1264 : 	////////////////////////////////////////
; 1265 : 
; 1266 : 	if ( ( x < terrain_3d_min_map_x ) || ( x > terrain_3d_max_map_x ) || ( z < terrain_3d_min_map_z ) || ( z > terrain_3d_max_map_z ) )

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_x@@3MA
  00014	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _x$[ebp]
  00018	77 2a		 ja	 SHORT $LN21@get_3d_ter
  0001a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0001f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_x@@3MA
  00026	77 1c		 ja	 SHORT $LN21@get_3d_ter
  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?terrain_3d_min_map_z@@3MA
  00030	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _z$[ebp]
  00034	77 0e		 ja	 SHORT $LN21@get_3d_ter
  00036	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  0003b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?terrain_3d_max_map_z@@3MA
  00042	76 27		 jbe	 SHORT $LN20@get_3d_ter
$LN21@get_3d_ter:

; 1267 : 	{
; 1268 : 
; 1269 : 		debug_fatal ( "Terrain elevation off map (x = %.2f, z = %.2f", x, z );

  00044	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00049	83 ec 08	 sub	 esp, 8
  0004c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00051	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00056	83 ec 08	 sub	 esp, 8
  00059	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@LKEAGDHI@Terrain?5elevation?5off?5map?5?$CIx?5?$DN?5@
  00063	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00068	83 c4 14	 add	 esp, 20			; 00000014H
$LN20@get_3d_ter:

; 1270 : 	}
; 1271 : 
; 1272 : 	////////////////////////////////////////
; 1273 : 	//
; 1274 : 	// get terrain sector and offsets within sector
; 1275 : 	//
; 1276 : 	////////////////////////////////////////
; 1277 : 
; 1278 : 	get_terrain_3d_sector (x, z, &x_sector, &z_sector);

  0006b	8d 45 f8	 lea	 eax, DWORD PTR _z_sector$[ebp]
  0006e	50		 push	 eax
  0006f	8d 4d fc	 lea	 ecx, DWORD PTR _x_sector$[ebp]
  00072	51		 push	 ecx
  00073	51		 push	 ecx
  00074	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _z$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	e8 00 00 00 00	 call	 ?get_terrain_3d_sector@@YGXMMPAH0@Z ; get_terrain_3d_sector

; 1279 : 
; 1280 : 	//
; 1281 : 	// Setup the point_data ptr
; 1282 : 	///
; 1283 : 
; 1284 : 	if ( !point_data )

  0008e	83 7d 10 00	 cmp	 DWORD PTR _point_data$[ebp], 0
  00092	75 07		 jne	 SHORT $LN22@get_3d_ter

; 1285 : 	{
; 1286 : 
; 1287 : 		point_data = &system_point_data;

  00094	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _point_data$[ebp], OFFSET ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A
$LN22@get_3d_ter:

; 1288 : 	}
; 1289 : 
; 1290 : 	//
; 1291 : 	// Detect Cuba terrain flaw area
; 1292 : 	//
; 1293 : 
; 1294 : 	if ( current_terrain_version.map_number == 2 )

  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_terrain_version@@3UTERRAIN_3D_FILE_VALIDATION@@A ; current_terrain_version
  000a0	83 e0 0f	 and	 eax, 15			; 0000000fH
  000a3	83 f8 02	 cmp	 eax, 2
  000a6	0f 85 ac 00 00
	00		 jne	 $LN24@get_3d_ter

; 1295 : 	{
; 1296 : 
; 1297 : 		if (	( x_sector >= 71 ) && ( x_sector <= 72 ) &&
; 1298 : 				( z_sector >= 58 ) && ( z_sector <= 60 ) )

  000ac	83 7d fc 47	 cmp	 DWORD PTR _x_sector$[ebp], 71 ; 00000047H
  000b0	0f 8c a2 00 00
	00		 jl	 $LN24@get_3d_ter
  000b6	83 7d fc 48	 cmp	 DWORD PTR _x_sector$[ebp], 72 ; 00000048H
  000ba	0f 8f 98 00 00
	00		 jg	 $LN24@get_3d_ter
  000c0	83 7d f8 3a	 cmp	 DWORD PTR _z_sector$[ebp], 58 ; 0000003aH
  000c4	0f 8c 8e 00 00
	00		 jl	 $LN24@get_3d_ter
  000ca	83 7d f8 3c	 cmp	 DWORD PTR _z_sector$[ebp], 60 ; 0000003cH
  000ce	0f 8f 84 00 00
	00		 jg	 $LN24@get_3d_ter

; 1299 : 		{
; 1300 : 		
; 1301 : 			//
; 1302 : 			// Fudge the terrain height stuff.
; 1303 : 			//
; 1304 : 
; 1305 : 			point_data->terrain_sector = NULL;

  000d4	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  000d7	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1306 : 	
; 1307 : 			point_data->face_normal.x = 0.0;

  000de	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  000e1	0f 57 c0	 xorps	 xmm0, xmm0
  000e4	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1308 : 			point_data->face_normal.y = 1.0;

  000e9	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  000ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f4	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1309 : 			point_data->face_normal.z = 0.0;

  000f9	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  000fc	0f 57 c0	 xorps	 xmm0, xmm0
  000ff	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 1310 : 	
; 1311 : 			point_data->terrain_type = TERRAIN_TYPE_INVALID;

  00104	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00107	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1312 : 	
; 1313 : 			terrain_sector = &terrain_sectors[z_sector][x_sector];

  0010e	6b 45 fc 30	 imul	 eax, DWORD PTR _x_sector$[ebp], 48
  00112	8b 4d f8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  00115	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  0011b	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  0011e	89 45 bc	 mov	 DWORD PTR _terrain_sector$[ebp], eax

; 1314 : 
; 1315 : 			point_data->last_elevation = terrain_sector->maximum_height;

  00121	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00124	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00128	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0012c	8b 55 10	 mov	 edx, DWORD PTR _point_data$[ebp]
  0012f	f3 0f 11 42 0c	 movss	 DWORD PTR [edx+12], xmm0

; 1316 : 		
; 1317 : 			return ( terrain_sector->minimum_height );

  00134	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00137	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0013b	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv873[ebp], ecx
  00141	db 85 14 ff ff
	ff		 fild	 DWORD PTR tv873[ebp]
  00147	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR tv874[ebp]
  0014d	d9 85 10 ff ff
	ff		 fld	 DWORD PTR tv874[ebp]
  00153	e9 cf 0e 00 00	 jmp	 $LN1@get_3d_ter
$LN24@get_3d_ter:

; 1318 : 		}
; 1319 : 	}
; 1320 : 
; 1321 : 	x_offset = x - ( ( float ) x_sector * TERRAIN_3D_SECTOR_SIDE_LENGTH );

  00158	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x_sector$[ebp]
  0015d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@45000000
  00165	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _x$[ebp]
  0016a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0016e	f3 0f 11 4d e0	 movss	 DWORD PTR _x_offset$[ebp], xmm1

; 1322 : 	z_offset = z - ( ( float ) z_sector * TERRAIN_3D_SECTOR_SIDE_LENGTH );

  00173	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _z_sector$[ebp]
  00178	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@45000000
  00180	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _z$[ebp]
  00185	f3 0f 5c c8	 subss	 xmm1, xmm0
  00189	f3 0f 11 4d dc	 movss	 DWORD PTR _z_offset$[ebp], xmm1

; 1323 : 
; 1324 : 	x_offset -= ( TERRAIN_3D_SECTOR_SIDE_LENGTH / 2 );

  0018e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_offset$[ebp]
  00193	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@44800000
  0019b	f3 0f 11 45 e0	 movss	 DWORD PTR _x_offset$[ebp], xmm0

; 1325 : 	z_offset -= ( TERRAIN_3D_SECTOR_SIDE_LENGTH / 2 );

  001a0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z_offset$[ebp]
  001a5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@44800000
  001ad	f3 0f 11 45 dc	 movss	 DWORD PTR _z_offset$[ebp], xmm0

; 1326 : 
; 1327 : #if X_AND_Z_ARE_FLOATS
; 1328 : 
; 1329 : 	scaled_x_offset = x_offset;
; 1330 : 	scaled_z_offset = z_offset;
; 1331 : 
; 1332 : #else
; 1333 : 
; 1334 : 	scaled_x_offset = ( x_offset / TERRAIN_3D_XZ_SCALE );

  001b2	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _x_offset$[ebp]
  001b7	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@3fb0000000000000
  001bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c3	f3 0f 11 45 d8	 movss	 DWORD PTR _scaled_x_offset$[ebp], xmm0

; 1335 : 	scaled_z_offset = ( z_offset / TERRAIN_3D_XZ_SCALE );

  001c8	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _z_offset$[ebp]
  001cd	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@3fb0000000000000
  001d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d9	f3 0f 11 45 d4	 movss	 DWORD PTR _scaled_z_offset$[ebp], xmm0

; 1336 : 
; 1337 : #endif
; 1338 : 
; 1339 : 	////////////////////////////////////////
; 1340 : 	//
; 1341 : 	// attempt find fast
; 1342 : 	//
; 1343 : 	////////////////////////////////////////
; 1344 : 
; 1345 : 	found = found_fast = FALSE;

  001de	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _found_fast$[ebp], 0
  001e5	8b 45 e4	 mov	 eax, DWORD PTR _found_fast$[ebp]
  001e8	89 45 e8	 mov	 DWORD PTR _found$[ebp], eax

; 1346 : 
; 1347 : 	if ( point_data->terrain_sector )

  001eb	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  001ee	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001f2	0f 84 f3 01 00
	00		 je	 $LN4@get_3d_ter

; 1348 : 	{
; 1349 : 
; 1350 : 		ASSERT ( point_data->terrain_face );

  001f8	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  001fb	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001ff	75 1a		 jne	 SHORT $LN26@get_3d_ter
  00201	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z@4JA
  00206	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  0020b	50		 push	 eax
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@MNFHKLFF@c?3?2users?2nhv90?2projects?2eech?2mo@
  00211	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BNBGNBIM@point_data?9?$DOterrain_face@
  00216	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN26@get_3d_ter:

; 1351 : 
; 1352 : 		if ( ( x_sector == point_data->x_sector ) && ( z_sector == point_data->z_sector ) )

  0021b	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  0021e	8b 4d fc	 mov	 ecx, DWORD PTR _x_sector$[ebp]
  00221	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00223	0f 85 c2 01 00
	00		 jne	 $LN4@get_3d_ter
  00229	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  0022c	8b 4d f8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  0022f	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00232	0f 85 b3 01 00
	00		 jne	 $LN4@get_3d_ter

; 1353 : 		{
; 1354 : 
; 1355 : 			terrain_sector = point_data->terrain_sector;

  00238	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  0023b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0023e	89 4d bc	 mov	 DWORD PTR _terrain_sector$[ebp], ecx

; 1356 : 
; 1357 : 			points_y = terrain_sector->points_y;

  00241	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00244	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00247	89 4d a0	 mov	 DWORD PTR _points_y$[ebp], ecx

; 1358 : 		
; 1359 : 			points_xz = terrain_sector->points_xz;

  0024a	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0024d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00250	89 4d a4	 mov	 DWORD PTR _points_xz$[ebp], ecx

; 1360 : 		
; 1361 : 			terrain_face = point_data->terrain_face;

  00253	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00256	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00259	89 4d b8	 mov	 DWORD PTR _terrain_face$[ebp], ecx

; 1362 : 
; 1363 : 			triangle_offset = point_data->terrain_triangle_offset;

  0025c	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  0025f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00262	89 4d ec	 mov	 DWORD PTR _triangle_offset$[ebp], ecx

; 1364 : 
; 1365 : 			terrain_type = point_data->terrain_type;

  00265	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00268	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0026b	89 4d a8	 mov	 DWORD PTR _terrain_type$[ebp], ecx

; 1366 : 
; 1367 : 			if ( terrain_sector->number_of_points < 257 )

  0026e	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00271	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00274	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  0027a	0f 8d b8 00 00
	00		 jge	 $LN28@get_3d_ter

; 1368 : 			{
; 1369 : 
; 1370 : 				terrain_elevation_point_byte_references = point_data->terrain_elevation_point_byte_references;

  00280	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00283	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00286	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, ecx

; 1371 : 
; 1372 : 				switch ( terrain_type_information[terrain_type].polygon_type )

  0028c	6b 45 a8 38	 imul	 eax, DWORD PTR _terrain_type$[ebp], 56
  00290	8b 88 30 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48]
  00296	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv174[ebp], ecx
  0029c	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR tv174[ebp], 0
  002a3	74 0b		 je	 SHORT $LN30@get_3d_ter
  002a5	83 bd 14 ff ff
	ff 01		 cmp	 DWORD PTR tv174[ebp], 1
  002ac	74 39		 je	 SHORT $LN32@get_3d_ter
  002ae	eb 6e		 jmp	 SHORT $LN34@get_3d_ter
$LN30@get_3d_ter:

; 1373 : 				{
; 1374 : 
; 1375 : 					case POLYGON_TYPE_FAN:
; 1376 : 					{
; 1377 : 
; 1378 : 						if ( point_inside_terrain_fan_byte_triangle ( scaled_x_offset, scaled_z_offset, points_xz, triangle_offset ) )

  002b0	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  002b3	50		 push	 eax
  002b4	8b 4d a4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  002b7	51		 push	 ecx
  002b8	51		 push	 ecx
  002b9	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	51		 push	 ecx
  002c4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	e8 00 00 00 00	 call	 ?point_inside_terrain_fan_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_fan_byte_triangle
  002d3	85 c0		 test	 eax, eax
  002d5	74 0e		 je	 SHORT $LN31@get_3d_ter

; 1379 : 						{
; 1380 : 
; 1381 : 							found = TRUE;

  002d7	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 1382 : 
; 1383 : 							found_fast = TRUE;

  002de	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _found_fast$[ebp], 1
$LN31@get_3d_ter:

; 1384 : 						}
; 1385 : 
; 1386 : 						break;

  002e5	eb 4c		 jmp	 SHORT $LN2@get_3d_ter
$LN32@get_3d_ter:

; 1387 : 					}
; 1388 : 
; 1389 : 					case POLYGON_TYPE_STRIP:
; 1390 : 					{
; 1391 : 
; 1392 : 						if ( point_inside_terrain_strip_byte_triangle ( scaled_x_offset, scaled_z_offset, points_xz, triangle_offset ) )

  002e7	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  002ea	50		 push	 eax
  002eb	8b 4d a4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  002ee	51		 push	 ecx
  002ef	51		 push	 ecx
  002f0	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	51		 push	 ecx
  002fb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  00300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00305	e8 00 00 00 00	 call	 ?point_inside_terrain_strip_byte_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_strip_byte_triangle
  0030a	85 c0		 test	 eax, eax
  0030c	74 0e		 je	 SHORT $LN33@get_3d_ter

; 1393 : 						{
; 1394 : 
; 1395 : 							found = TRUE;

  0030e	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 1396 : 
; 1397 : 							found_fast = TRUE;

  00315	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _found_fast$[ebp], 1
$LN33@get_3d_ter:

; 1398 : 						}
; 1399 : 
; 1400 : 						break;

  0031c	eb 15		 jmp	 SHORT $LN2@get_3d_ter
$LN34@get_3d_ter:

; 1401 : 					}
; 1402 : 
; 1403 : 					default:
; 1404 : 					{
; 1405 : 
; 1406 : 						debug_fatal ( "Unknown polygon type in terrain elevation, sector: %d, %d", x_sector, z_sector );

  0031e	8b 45 f8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00321	50		 push	 eax
  00322	8b 4d fc	 mov	 ecx, DWORD PTR _x_sector$[ebp]
  00325	51		 push	 ecx
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@DEAECHJG@Unknown?5polygon?5type?5in?5terrain@
  0032b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00330	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@get_3d_ter:

; 1407 : 					}
; 1408 : 				}
; 1409 : 			}
; 1410 : 			else

  00333	e9 b3 00 00 00	 jmp	 $LN4@get_3d_ter
$LN28@get_3d_ter:

; 1411 : 			{
; 1412 : 
; 1413 : 				terrain_elevation_point_word_references = point_data->terrain_elevation_point_word_references;

  00338	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  0033b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0033e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, ecx

; 1414 : 
; 1415 : 				switch ( terrain_type_information[terrain_type].polygon_type )

  00344	6b 45 a8 38	 imul	 eax, DWORD PTR _terrain_type$[ebp], 56
  00348	8b 88 30 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48]
  0034e	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv196[ebp], ecx
  00354	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR tv196[ebp], 0
  0035b	74 0b		 je	 SHORT $LN35@get_3d_ter
  0035d	83 bd 14 ff ff
	ff 01		 cmp	 DWORD PTR tv196[ebp], 1
  00364	74 39		 je	 SHORT $LN37@get_3d_ter
  00366	eb 6e		 jmp	 SHORT $LN39@get_3d_ter
$LN35@get_3d_ter:

; 1416 : 				{
; 1417 : 
; 1418 : 					case POLYGON_TYPE_FAN:
; 1419 : 					{
; 1420 : 
; 1421 : 						if ( point_inside_terrain_fan_word_triangle ( scaled_x_offset, scaled_z_offset, points_xz, triangle_offset ) )

  00368	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  0036b	50		 push	 eax
  0036c	8b 4d a4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  0036f	51		 push	 ecx
  00370	51		 push	 ecx
  00371	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  00381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00386	e8 00 00 00 00	 call	 ?point_inside_terrain_fan_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_fan_word_triangle
  0038b	85 c0		 test	 eax, eax
  0038d	74 0e		 je	 SHORT $LN36@get_3d_ter

; 1422 : 						{
; 1423 : 
; 1424 : 							found = TRUE;

  0038f	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 1425 : 
; 1426 : 							found_fast = TRUE;

  00396	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _found_fast$[ebp], 1
$LN36@get_3d_ter:

; 1427 : 						}
; 1428 : 
; 1429 : 						break;

  0039d	eb 4c		 jmp	 SHORT $LN4@get_3d_ter
$LN37@get_3d_ter:

; 1430 : 					}
; 1431 : 
; 1432 : 					case POLYGON_TYPE_STRIP:
; 1433 : 					{
; 1434 : 
; 1435 : 						if ( point_inside_terrain_strip_word_triangle ( scaled_x_offset, scaled_z_offset, points_xz, triangle_offset ) )

  0039f	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  003a2	50		 push	 eax
  003a3	8b 4d a4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  003a6	51		 push	 ecx
  003a7	51		 push	 ecx
  003a8	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  003ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b2	51		 push	 ecx
  003b3	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	e8 00 00 00 00	 call	 ?point_inside_terrain_strip_word_triangle@@YGHMMPAUTERRAIN_3D_POINT_XZ@@H@Z ; point_inside_terrain_strip_word_triangle
  003c2	85 c0		 test	 eax, eax
  003c4	74 0e		 je	 SHORT $LN38@get_3d_ter

; 1436 : 						{
; 1437 : 
; 1438 : 							found = TRUE;

  003c6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 1439 : 
; 1440 : 							found_fast = TRUE;

  003cd	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _found_fast$[ebp], 1
$LN38@get_3d_ter:

; 1441 : 						}
; 1442 : 
; 1443 : 						break;

  003d4	eb 15		 jmp	 SHORT $LN4@get_3d_ter
$LN39@get_3d_ter:

; 1444 : 					}
; 1445 : 
; 1446 : 					default:
; 1447 : 					{
; 1448 : 
; 1449 : 						debug_fatal ( "Unknown polygon type in terrain elevation, sector: %d, %d", x_sector, z_sector );

  003d6	8b 45 f8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  003d9	50		 push	 eax
  003da	8b 4d fc	 mov	 ecx, DWORD PTR _x_sector$[ebp]
  003dd	51		 push	 ecx
  003de	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@DEAECHJG@Unknown?5polygon?5type?5in?5terrain@
  003e3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  003e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@get_3d_ter:

; 1450 : 					}
; 1451 : 				}
; 1452 : 			}
; 1453 : 
; 1454 : #if DEBUG_MODULE
; 1455 : 
; 1456 : 			if ( found )
; 1457 : 			{
; 1458 : 
; 1459 : 				num_find_fast_successes++;
; 1460 : 			}
; 1461 : 
; 1462 : #endif
; 1463 : 		}
; 1464 : 	}
; 1465 : 
; 1466 : 	////////////////////////////////////////
; 1467 : 	//
; 1468 : 	// scan sector
; 1469 : 	//
; 1470 : 	////////////////////////////////////////
; 1471 : 
; 1472 : 	if ( !found_fast )

  003eb	83 7d e4 00	 cmp	 DWORD PTR _found_fast$[ebp], 0
  003ef	0f 85 dc 03 00
	00		 jne	 $LN15@get_3d_ter

; 1473 : 	{
; 1474 : 
; 1475 : 		terrain_sector = &terrain_sectors[z_sector][x_sector];

  003f5	6b 45 fc 30	 imul	 eax, DWORD PTR _x_sector$[ebp], 48
  003f9	8b 4d f8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  003fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_sectors@@3PAPAUTERRAIN_3D_SECTOR@@A ; terrain_sectors
  00402	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  00405	89 45 bc	 mov	 DWORD PTR _terrain_sector$[ebp], eax

; 1476 : 
; 1477 : 		points_y = terrain_sector->points_y;

  00408	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0040b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0040e	89 4d a0	 mov	 DWORD PTR _points_y$[ebp], ecx

; 1478 : 	
; 1479 : 		points_xz = terrain_sector->points_xz;

  00411	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00414	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00417	89 4d a4	 mov	 DWORD PTR _points_xz$[ebp], ecx

; 1480 : 	
; 1481 : 		if ( terrain_sector->number_of_points < 257 )

  0041a	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0041d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00420	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  00426	0f 8d d0 01 00
	00		 jge	 $LN41@get_3d_ter

; 1482 : 		{
; 1483 : 
; 1484 : 			//
; 1485 : 	 		// Search through all the polygon fans first of all
; 1486 : 			//
; 1487 : 
; 1488 : 			number_of_faces = terrain_sector->number_of_polygons;

  0042c	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0042f	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00433	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx

; 1489 : 
; 1490 : 			terrain_face = terrain_sector->polygons;

  00436	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00439	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0043c	89 4d b8	 mov	 DWORD PTR _terrain_face$[ebp], ecx

; 1491 : 
; 1492 : 			terrain_elevation_point_byte_references = terrain_sector->point_byte_references;

  0043f	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00442	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00445	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, ecx

; 1493 : 
; 1494 : 			surface = terrain_sector->surface_changes;

  0044b	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0044e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00451	89 4d ac	 mov	 DWORD PTR _surface$[ebp], ecx
$LN6@get_3d_ter:

; 1495 : 
; 1496 : 			while ( number_of_faces-- )

  00454	8b 45 f4	 mov	 eax, DWORD PTR _number_of_faces$[ebp]
  00457	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv231[ebp], eax
  0045d	8b 4d f4	 mov	 ecx, DWORD PTR _number_of_faces$[ebp]
  00460	83 e9 01	 sub	 ecx, 1
  00463	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx
  00466	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR tv231[ebp], 0
  0046d	0f 84 87 00 00
	00		 je	 $LN7@get_3d_ter

; 1497 : 			{
; 1498 : 
; 1499 : 				surface += terrain_face->surface_change;

  00473	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  00476	8a 08		 mov	 cl, BYTE PTR [eax]
  00478	c0 e9 07	 shr	 cl, 7
  0047b	80 e1 01	 and	 cl, 1
  0047e	0f b6 d1	 movzx	 edx, cl
  00481	03 55 ac	 add	 edx, DWORD PTR _surface$[ebp]
  00484	89 55 ac	 mov	 DWORD PTR _surface$[ebp], edx

; 1500 : 
; 1501 : 				number_of_points = terrain_face->number_of_points;

  00487	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  0048a	8a 08		 mov	 cl, BYTE PTR [eax]
  0048c	80 e1 7f	 and	 cl, 127			; 0000007fH
  0048f	0f b6 d1	 movzx	 edx, cl
  00492	89 55 f0	 mov	 DWORD PTR _number_of_points$[ebp], edx

; 1502 : 
; 1503 : 				terrain_type = surface->surface_id;

  00495	8b 45 ac	 mov	 eax, DWORD PTR _surface$[ebp]
  00498	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0049b	89 4d a8	 mov	 DWORD PTR _terrain_type$[ebp], ecx

; 1504 : 
; 1505 : 				if ( terrain_type_information[terrain_type].polygon_type == POLYGON_TYPE_FAN )

  0049e	6b 45 a8 38	 imul	 eax, DWORD PTR _terrain_type$[ebp], 56
  004a2	83 b8 30 00 00
	00 00		 cmp	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48], 0
  004a9	75 34		 jne	 SHORT $LN44@get_3d_ter

; 1506 : 				{
; 1507 : 
; 1508 : 					if ( point_inside_terrain_byte_fan ( scaled_x_offset, scaled_z_offset, points_xz, number_of_points, &triangle_offset ) )

  004ab	8d 45 ec	 lea	 eax, DWORD PTR _triangle_offset$[ebp]
  004ae	50		 push	 eax
  004af	8b 4d f0	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  004b2	51		 push	 ecx
  004b3	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  004b6	52		 push	 edx
  004b7	51		 push	 ecx
  004b8	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  004bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c2	51		 push	 ecx
  004c3	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  004c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cd	e8 00 00 00 00	 call	 ?point_inside_terrain_byte_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ; point_inside_terrain_byte_fan
  004d2	85 c0		 test	 eax, eax
  004d4	74 09		 je	 SHORT $LN44@get_3d_ter

; 1509 : 					{
; 1510 : 
; 1511 : 						found = TRUE;

  004d6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 1512 : 
; 1513 : 						break;

  004dd	eb 1b		 jmp	 SHORT $LN7@get_3d_ter
$LN44@get_3d_ter:

; 1514 : 					}
; 1515 : 				}
; 1516 : 
; 1517 : 				terrain_elevation_point_byte_references += number_of_points;

  004df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  004e4	03 45 f0	 add	 eax, DWORD PTR _number_of_points$[ebp]
  004e7	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, eax

; 1518 : 
; 1519 : 				terrain_face++;

  004ec	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  004ef	83 c0 01	 add	 eax, 1
  004f2	89 45 b8	 mov	 DWORD PTR _terrain_face$[ebp], eax

; 1520 : 			}

  004f5	e9 5a ff ff ff	 jmp	 $LN6@get_3d_ter
$LN7@get_3d_ter:

; 1521 : 
; 1522 : 			//
; 1523 : 			// If the point isn't over a polygon fan - search the polygon strips
; 1524 : 			//
; 1525 : 
; 1526 : 			if ( !found )

  004fa	83 7d e8 00	 cmp	 DWORD PTR _found$[ebp], 0
  004fe	0f 85 f3 00 00
	00		 jne	 $LN9@get_3d_ter

; 1527 : 			{
; 1528 : 
; 1529 : 				number_of_faces = terrain_sector->number_of_polygons;

  00504	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00507	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0050b	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx

; 1530 : 
; 1531 : 				terrain_face = terrain_sector->polygons;

  0050e	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00511	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00514	89 4d b8	 mov	 DWORD PTR _terrain_face$[ebp], ecx

; 1532 : 
; 1533 : 				terrain_elevation_point_byte_references = terrain_sector->point_byte_references;

  00517	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0051a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0051d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, ecx

; 1534 : 
; 1535 : 				surface = terrain_sector->surface_changes;

  00523	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00526	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00529	89 4d ac	 mov	 DWORD PTR _surface$[ebp], ecx
$LN8@get_3d_ter:

; 1536 : 
; 1537 : 				while ( number_of_faces-- )

  0052c	8b 45 f4	 mov	 eax, DWORD PTR _number_of_faces$[ebp]
  0052f	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv263[ebp], eax
  00535	8b 4d f4	 mov	 ecx, DWORD PTR _number_of_faces$[ebp]
  00538	83 e9 01	 sub	 ecx, 1
  0053b	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx
  0053e	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR tv263[ebp], 0
  00545	0f 84 ac 00 00
	00		 je	 $LN9@get_3d_ter

; 1538 : 				{
; 1539 : 
; 1540 : 					surface += terrain_face->surface_change;

  0054b	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  0054e	8a 08		 mov	 cl, BYTE PTR [eax]
  00550	c0 e9 07	 shr	 cl, 7
  00553	80 e1 01	 and	 cl, 1
  00556	0f b6 d1	 movzx	 edx, cl
  00559	03 55 ac	 add	 edx, DWORD PTR _surface$[ebp]
  0055c	89 55 ac	 mov	 DWORD PTR _surface$[ebp], edx

; 1541 : 
; 1542 : 					number_of_points = terrain_face->number_of_points;

  0055f	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  00562	8a 08		 mov	 cl, BYTE PTR [eax]
  00564	80 e1 7f	 and	 cl, 127			; 0000007fH
  00567	0f b6 d1	 movzx	 edx, cl
  0056a	89 55 f0	 mov	 DWORD PTR _number_of_points$[ebp], edx

; 1543 : 
; 1544 : 					terrain_type = surface->surface_id;

  0056d	8b 45 ac	 mov	 eax, DWORD PTR _surface$[ebp]
  00570	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00573	89 4d a8	 mov	 DWORD PTR _terrain_type$[ebp], ecx

; 1545 : 
; 1546 : 					switch ( terrain_type )

  00576	8b 45 a8	 mov	 eax, DWORD PTR _terrain_type$[ebp]
  00579	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  0057f	83 bd 14 ff ff
	ff 1b		 cmp	 DWORD PTR tv274[ebp], 27 ; 0000001bH
  00586	7c 0d		 jl	 SHORT $LN47@get_3d_ter
  00588	83 bd 14 ff ff
	ff 22		 cmp	 DWORD PTR tv274[ebp], 34 ; 00000022H
  0058f	7e 02		 jle	 SHORT $LN46@get_3d_ter
  00591	eb 02		 jmp	 SHORT $LN47@get_3d_ter
$LN46@get_3d_ter:

; 1547 : 					{
; 1548 : 
; 1549 : 						case TERRAIN_TYPE_HEDGE_SIDE_X:
; 1550 : 						case TERRAIN_TYPE_HEDGE_SIDE_Z:
; 1551 : 						case TERRAIN_TYPE_WALL_SIDE_X:
; 1552 : 						case TERRAIN_TYPE_WALL_SIDE_Z:
; 1553 : 						case TERRAIN_TYPE_FOREST_SIDE_BOTTOM_X:
; 1554 : 						case TERRAIN_TYPE_FOREST_SIDE_BOTTOM_Z:
; 1555 : 						case TERRAIN_TYPE_FOREST_SIDE_MID_X:
; 1556 : 						case TERRAIN_TYPE_FOREST_SIDE_MID_Z:
; 1557 : 						{
; 1558 : 
; 1559 : 							break;

  00593	eb 3f		 jmp	 SHORT $LN10@get_3d_ter
$LN47@get_3d_ter:

; 1560 : 						}
; 1561 : 
; 1562 : 						default:
; 1563 : 						{
; 1564 : 
; 1565 : 							if ( terrain_type_information[terrain_type].polygon_type == POLYGON_TYPE_STRIP )

  00595	6b 45 a8 38	 imul	 eax, DWORD PTR _terrain_type$[ebp], 56
  00599	83 b8 30 00 00
	00 01		 cmp	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48], 1
  005a0	75 32		 jne	 SHORT $LN49@get_3d_ter

; 1566 : 							{
; 1567 : 		
; 1568 : 								if ( point_inside_terrain_byte_strip ( scaled_x_offset, scaled_z_offset, points_xz, number_of_points, &triangle_offset ) )

  005a2	8d 45 ec	 lea	 eax, DWORD PTR _triangle_offset$[ebp]
  005a5	50		 push	 eax
  005a6	8b 4d f0	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  005a9	51		 push	 ecx
  005aa	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  005ad	52		 push	 edx
  005ae	51		 push	 ecx
  005af	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  005b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b9	51		 push	 ecx
  005ba	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  005bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c4	e8 00 00 00 00	 call	 ?point_inside_terrain_byte_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ; point_inside_terrain_byte_strip
  005c9	85 c0		 test	 eax, eax
  005cb	74 07		 je	 SHORT $LN49@get_3d_ter

; 1569 : 								{
; 1570 : 		
; 1571 : 									found = TRUE;

  005cd	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1
$LN49@get_3d_ter:
$LN10@get_3d_ter:

; 1572 : 		
; 1573 : 									break;
; 1574 : 								}
; 1575 : 							}
; 1576 : 
; 1577 : 							break;
; 1578 : 						}
; 1579 : 					}
; 1580 : 
; 1581 : 					if ( found )

  005d4	83 7d e8 00	 cmp	 DWORD PTR _found$[ebp], 0
  005d8	74 02		 je	 SHORT $LN50@get_3d_ter

; 1582 : 					{
; 1583 : 
; 1584 : 						break;

  005da	eb 1b		 jmp	 SHORT $LN9@get_3d_ter
$LN50@get_3d_ter:

; 1585 : 					}
; 1586 : 
; 1587 : 					terrain_elevation_point_byte_references += number_of_points;

  005dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  005e1	03 45 f0	 add	 eax, DWORD PTR _number_of_points$[ebp]
  005e4	a3 00 00 00 00	 mov	 DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A, eax

; 1588 : 
; 1589 : 					terrain_face++;

  005e9	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  005ec	83 c0 01	 add	 eax, 1
  005ef	89 45 b8	 mov	 DWORD PTR _terrain_face$[ebp], eax

; 1590 : 				}

  005f2	e9 35 ff ff ff	 jmp	 $LN8@get_3d_ter
$LN9@get_3d_ter:

; 1591 : 			}
; 1592 : 		}
; 1593 : 		else

  005f7	e9 d5 01 00 00	 jmp	 $LN15@get_3d_ter
$LN41@get_3d_ter:

; 1594 : 		{
; 1595 : 
; 1596 : 			//
; 1597 : 			// Search through all the polygon fans first
; 1598 : 			//
; 1599 : 
; 1600 : 			number_of_faces = terrain_sector->number_of_polygons;

  005fc	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  005ff	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00603	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx

; 1601 : 
; 1602 : 			terrain_face = terrain_sector->polygons;

  00606	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00609	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0060c	89 4d b8	 mov	 DWORD PTR _terrain_face$[ebp], ecx

; 1603 : 
; 1604 : 			terrain_elevation_point_word_references = terrain_sector->point_word_references;

  0060f	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00612	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00615	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, ecx

; 1605 : 
; 1606 : 			surface = terrain_sector->surface_changes;

  0061b	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0061e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00621	89 4d ac	 mov	 DWORD PTR _surface$[ebp], ecx
$LN12@get_3d_ter:

; 1607 : 
; 1608 : 			while ( number_of_faces-- )

  00624	8b 45 f4	 mov	 eax, DWORD PTR _number_of_faces$[ebp]
  00627	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv298[ebp], eax
  0062d	8b 4d f4	 mov	 ecx, DWORD PTR _number_of_faces$[ebp]
  00630	83 e9 01	 sub	 ecx, 1
  00633	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx
  00636	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR tv298[ebp], 0
  0063d	0f 84 8c 00 00
	00		 je	 $LN13@get_3d_ter

; 1609 : 			{
; 1610 : 
; 1611 : 				surface += terrain_face->surface_change;

  00643	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  00646	8a 08		 mov	 cl, BYTE PTR [eax]
  00648	c0 e9 07	 shr	 cl, 7
  0064b	80 e1 01	 and	 cl, 1
  0064e	0f b6 d1	 movzx	 edx, cl
  00651	03 55 ac	 add	 edx, DWORD PTR _surface$[ebp]
  00654	89 55 ac	 mov	 DWORD PTR _surface$[ebp], edx

; 1612 : 
; 1613 : 				number_of_points = terrain_face->number_of_points;

  00657	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  0065a	8a 08		 mov	 cl, BYTE PTR [eax]
  0065c	80 e1 7f	 and	 cl, 127			; 0000007fH
  0065f	0f b6 d1	 movzx	 edx, cl
  00662	89 55 f0	 mov	 DWORD PTR _number_of_points$[ebp], edx

; 1614 : 
; 1615 : 				terrain_type = surface->surface_id;

  00665	8b 45 ac	 mov	 eax, DWORD PTR _surface$[ebp]
  00668	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0066b	89 4d a8	 mov	 DWORD PTR _terrain_type$[ebp], ecx

; 1616 : 
; 1617 : 				if ( terrain_type_information[terrain_type].polygon_type == POLYGON_TYPE_FAN )

  0066e	6b 45 a8 38	 imul	 eax, DWORD PTR _terrain_type$[ebp], 56
  00672	83 b8 30 00 00
	00 00		 cmp	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48], 0
  00679	75 34		 jne	 SHORT $LN52@get_3d_ter

; 1618 : 				{
; 1619 : 
; 1620 : 					if ( point_inside_terrain_word_fan ( scaled_x_offset, scaled_z_offset, points_xz, number_of_points, &triangle_offset ) )

  0067b	8d 45 ec	 lea	 eax, DWORD PTR _triangle_offset$[ebp]
  0067e	50		 push	 eax
  0067f	8b 4d f0	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  00682	51		 push	 ecx
  00683	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00686	52		 push	 edx
  00687	51		 push	 ecx
  00688	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  0068d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00692	51		 push	 ecx
  00693	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  00698	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069d	e8 00 00 00 00	 call	 ?point_inside_terrain_word_fan@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ; point_inside_terrain_word_fan
  006a2	85 c0		 test	 eax, eax
  006a4	74 09		 je	 SHORT $LN52@get_3d_ter

; 1621 : 					{
; 1622 : 
; 1623 : 						found = TRUE;

  006a6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1

; 1624 : 
; 1625 : 						break;

  006ad	eb 20		 jmp	 SHORT $LN13@get_3d_ter
$LN52@get_3d_ter:

; 1626 : 					}
; 1627 : 				}
; 1628 : 
; 1629 : 				terrain_elevation_point_word_references += number_of_points;

  006af	8b 45 f0	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  006b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  006b8	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  006bb	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, edx

; 1630 : 
; 1631 : 				terrain_face++;

  006c1	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  006c4	83 c0 01	 add	 eax, 1
  006c7	89 45 b8	 mov	 DWORD PTR _terrain_face$[ebp], eax

; 1632 : 			}

  006ca	e9 55 ff ff ff	 jmp	 $LN12@get_3d_ter
$LN13@get_3d_ter:

; 1633 : 
; 1634 : 			//
; 1635 : 			// If the point isn't over a polygon fan - search the polygon strips
; 1636 : 			//
; 1637 : 
; 1638 : 			if ( !found )

  006cf	83 7d e8 00	 cmp	 DWORD PTR _found$[ebp], 0
  006d3	0f 85 f8 00 00
	00		 jne	 $LN15@get_3d_ter

; 1639 : 			{
; 1640 : 
; 1641 : 				number_of_faces = terrain_sector->number_of_polygons;

  006d9	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  006dc	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  006e0	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx

; 1642 : 
; 1643 : 				terrain_face = terrain_sector->polygons;

  006e3	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  006e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  006e9	89 4d b8	 mov	 DWORD PTR _terrain_face$[ebp], ecx

; 1644 : 
; 1645 : 				terrain_elevation_point_word_references = terrain_sector->point_word_references;

  006ec	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  006ef	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006f2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, ecx

; 1646 : 
; 1647 : 				surface = terrain_sector->surface_changes;

  006f8	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  006fb	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  006fe	89 4d ac	 mov	 DWORD PTR _surface$[ebp], ecx
$LN14@get_3d_ter:

; 1648 : 
; 1649 : 				while ( number_of_faces-- )

  00701	8b 45 f4	 mov	 eax, DWORD PTR _number_of_faces$[ebp]
  00704	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv331[ebp], eax
  0070a	8b 4d f4	 mov	 ecx, DWORD PTR _number_of_faces$[ebp]
  0070d	83 e9 01	 sub	 ecx, 1
  00710	89 4d f4	 mov	 DWORD PTR _number_of_faces$[ebp], ecx
  00713	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR tv331[ebp], 0
  0071a	0f 84 b1 00 00
	00		 je	 $LN15@get_3d_ter

; 1650 : 				{
; 1651 : 
; 1652 : 					surface += terrain_face->surface_change;

  00720	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  00723	8a 08		 mov	 cl, BYTE PTR [eax]
  00725	c0 e9 07	 shr	 cl, 7
  00728	80 e1 01	 and	 cl, 1
  0072b	0f b6 d1	 movzx	 edx, cl
  0072e	03 55 ac	 add	 edx, DWORD PTR _surface$[ebp]
  00731	89 55 ac	 mov	 DWORD PTR _surface$[ebp], edx

; 1653 : 
; 1654 : 					number_of_points = terrain_face->number_of_points;

  00734	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  00737	8a 08		 mov	 cl, BYTE PTR [eax]
  00739	80 e1 7f	 and	 cl, 127			; 0000007fH
  0073c	0f b6 d1	 movzx	 edx, cl
  0073f	89 55 f0	 mov	 DWORD PTR _number_of_points$[ebp], edx

; 1655 : 
; 1656 : 					terrain_type = surface->surface_id;

  00742	8b 45 ac	 mov	 eax, DWORD PTR _surface$[ebp]
  00745	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00748	89 4d a8	 mov	 DWORD PTR _terrain_type$[ebp], ecx

; 1657 : 
; 1658 : 					if ( terrain_type_information[terrain_type].polygon_type == POLYGON_TYPE_STRIP )

  0074b	6b 45 a8 38	 imul	 eax, DWORD PTR _terrain_type$[ebp], 56
  0074f	83 b8 30 00 00
	00 01		 cmp	 DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48], 1
  00756	75 51		 jne	 SHORT $LN16@get_3d_ter

; 1659 : 					{
; 1660 : 
; 1661 : 						switch ( terrain_type )

  00758	8b 45 a8	 mov	 eax, DWORD PTR _terrain_type$[ebp]
  0075b	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv346[ebp], eax
  00761	83 bd 14 ff ff
	ff 1b		 cmp	 DWORD PTR tv346[ebp], 27 ; 0000001bH
  00768	7c 0d		 jl	 SHORT $LN56@get_3d_ter
  0076a	83 bd 14 ff ff
	ff 22		 cmp	 DWORD PTR tv346[ebp], 34 ; 00000022H
  00771	7e 02		 jle	 SHORT $LN55@get_3d_ter
  00773	eb 02		 jmp	 SHORT $LN56@get_3d_ter
$LN55@get_3d_ter:

; 1662 : 						{
; 1663 : 	
; 1664 : 							case TERRAIN_TYPE_HEDGE_SIDE_X:
; 1665 : 							case TERRAIN_TYPE_HEDGE_SIDE_Z:
; 1666 : 							case TERRAIN_TYPE_WALL_SIDE_X:
; 1667 : 							case TERRAIN_TYPE_WALL_SIDE_Z:
; 1668 : 							case TERRAIN_TYPE_FOREST_SIDE_BOTTOM_X:
; 1669 : 							case TERRAIN_TYPE_FOREST_SIDE_BOTTOM_Z:
; 1670 : 							case TERRAIN_TYPE_FOREST_SIDE_MID_X:
; 1671 : 							case TERRAIN_TYPE_FOREST_SIDE_MID_Z:
; 1672 : 							{
; 1673 : 	
; 1674 : 								break;

  00775	eb 32		 jmp	 SHORT $LN16@get_3d_ter
$LN56@get_3d_ter:

; 1675 : 							}
; 1676 : 	
; 1677 : 							default:
; 1678 : 							{
; 1679 : 			
; 1680 : 								if ( point_inside_terrain_word_strip ( scaled_x_offset, scaled_z_offset, points_xz, number_of_points, &triangle_offset ) )

  00777	8d 45 ec	 lea	 eax, DWORD PTR _triangle_offset$[ebp]
  0077a	50		 push	 eax
  0077b	8b 4d f0	 mov	 ecx, DWORD PTR _number_of_points$[ebp]
  0077e	51		 push	 ecx
  0077f	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00782	52		 push	 edx
  00783	51		 push	 ecx
  00784	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scaled_z_offset$[ebp]
  00789	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078e	51		 push	 ecx
  0078f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _scaled_x_offset$[ebp]
  00794	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00799	e8 00 00 00 00	 call	 ?point_inside_terrain_word_strip@@YGHMMPAUTERRAIN_3D_POINT_XZ@@HPAH@Z ; point_inside_terrain_word_strip
  0079e	85 c0		 test	 eax, eax
  007a0	74 07		 je	 SHORT $LN57@get_3d_ter

; 1681 : 								{
; 1682 : 		
; 1683 : 									found = TRUE;

  007a2	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1
$LN57@get_3d_ter:
$LN16@get_3d_ter:

; 1684 : 		
; 1685 : 									break;
; 1686 : 								}
; 1687 : 		
; 1688 : 								break;
; 1689 : 							}
; 1690 : 						}
; 1691 : 					}
; 1692 : 
; 1693 : 					if ( found )

  007a9	83 7d e8 00	 cmp	 DWORD PTR _found$[ebp], 0
  007ad	74 02		 je	 SHORT $LN58@get_3d_ter

; 1694 : 					{
; 1695 : 
; 1696 : 						break;

  007af	eb 20		 jmp	 SHORT $LN15@get_3d_ter
$LN58@get_3d_ter:

; 1697 : 					}
; 1698 : 
; 1699 : 					terrain_elevation_point_word_references += number_of_points;

  007b1	8b 45 f0	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  007b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  007ba	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  007bd	89 15 00 00 00
	00		 mov	 DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A, edx

; 1700 : 
; 1701 : 					terrain_face++;

  007c3	8b 45 b8	 mov	 eax, DWORD PTR _terrain_face$[ebp]
  007c6	83 c0 01	 add	 eax, 1
  007c9	89 45 b8	 mov	 DWORD PTR _terrain_face$[ebp], eax

; 1702 : 				}

  007cc	e9 30 ff ff ff	 jmp	 $LN14@get_3d_ter
$LN15@get_3d_ter:

; 1703 : 			}
; 1704 : 		}
; 1705 : 	}
; 1706 : 
; 1707 : 	////////////////////////////////////////
; 1708 : 	//
; 1709 : 	// get terrain elevation and face normal
; 1710 : 	//
; 1711 : 	////////////////////////////////////////
; 1712 : 
; 1713 : 	if ( found )

  007d1	83 7d e8 00	 cmp	 DWORD PTR _found$[ebp], 0
  007d5	0f 84 6d 07 00
	00		 je	 $LN59@get_3d_ter

; 1714 : 	{
; 1715 : 
; 1716 : 		if ( !found_fast )

  007db	83 7d e4 00	 cmp	 DWORD PTR _found_fast$[ebp], 0
  007df	0f 85 44 06 00
	00		 jne	 $LN61@get_3d_ter

; 1717 : 		{
; 1718 : 
; 1719 : #if DEBUG_TERRAIN
; 1720 : 			debug_log ( "Elevation: %s, %d: SLOW", file, line );
; 1721 : #endif
; 1722 : 
; 1723 : 			point_data->x_sector = x_sector;

  007e5	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  007e8	8b 4d fc	 mov	 ecx, DWORD PTR _x_sector$[ebp]
  007eb	89 08		 mov	 DWORD PTR [eax], ecx

; 1724 : 
; 1725 : 			point_data->z_sector = z_sector;

  007ed	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  007f0	8b 4d f8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  007f3	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1726 : 
; 1727 : 			point_data->terrain_sector = terrain_sector;

  007f6	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  007f9	8b 4d bc	 mov	 ecx, DWORD PTR _terrain_sector$[ebp]
  007fc	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1728 : 
; 1729 : 			point_data->terrain_face = terrain_face;

  007ff	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00802	8b 4d b8	 mov	 ecx, DWORD PTR _terrain_face$[ebp]
  00805	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1730 : 
; 1731 : 			if ( terrain_sector->number_of_points < 257 )

  00808	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  0080b	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0080e	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  00814	7d 0e		 jge	 SHORT $LN62@get_3d_ter

; 1732 : 			{
; 1733 : 
; 1734 : 				point_data->terrain_elevation_point_byte_references = terrain_elevation_point_byte_references;

  00816	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00819	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  0081f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1735 : 			}
; 1736 : 			else

  00822	eb 0c		 jmp	 SHORT $LN63@get_3d_ter
$LN62@get_3d_ter:

; 1737 : 			{
; 1738 : 
; 1739 : 				point_data->terrain_elevation_point_word_references = terrain_elevation_point_word_references;

  00824	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00827	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  0082d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN63@get_3d_ter:

; 1740 : 			}
; 1741 : 
; 1742 : 			point_data->terrain_triangle_offset = triangle_offset;

  00830	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00833	8b 4d ec	 mov	 ecx, DWORD PTR _triangle_offset$[ebp]
  00836	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1743 : 
; 1744 : 			point_data->terrain_type = terrain_type;

  00839	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  0083c	8b 4d a8	 mov	 ecx, DWORD PTR _terrain_type$[ebp]
  0083f	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1745 : 
; 1746 : 			{
; 1747 : 
; 1748 : 				vec3d
; 1749 : 					vector1,
; 1750 : 					vector2,
; 1751 : 					normal;
; 1752 : 
; 1753 : 				terrain_3d_point_xz
; 1754 : 					*point0xz,
; 1755 : 					*point1xz,
; 1756 : 					*point2xz;
; 1757 : 
; 1758 : 				terrain_3d_point_y
; 1759 : 					*point0y,
; 1760 : 					*point1y,
; 1761 : 					*point2y;
; 1762 : 
; 1763 : 				float
; 1764 : 					y0,
; 1765 : 					y1,
; 1766 : 					y2;
; 1767 : 
; 1768 : 				switch ( terrain_type_information[terrain_type].polygon_type )

  00842	6b 45 a8 38	 imul	 eax, DWORD PTR _terrain_type$[ebp], 56
  00846	8b 88 30 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_type_information@@3PAUTERRAIN_TYPE_INFO@@A[eax+48]
  0084c	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv376[ebp], ecx
  00852	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR tv376[ebp], 0
  00859	74 12		 je	 SHORT $LN64@get_3d_ter
  0085b	83 bd 14 ff ff
	ff 01		 cmp	 DWORD PTR tv376[ebp], 1
  00862	0f 84 61 01 00
	00		 je	 $LN67@get_3d_ter
  00868	e9 e5 03 00 00	 jmp	 $LN18@get_3d_ter
$LN64@get_3d_ter:

; 1769 : 				{
; 1770 : 
; 1771 : 					case POLYGON_TYPE_FAN:
; 1772 : 					{
; 1773 : 
; 1774 : 						if ( terrain_sector->number_of_points < 257 )

  0086d	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00870	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00873	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  00879	0f 8d a1 00 00
	00		 jge	 $LN65@get_3d_ter

; 1775 : 						{
; 1776 : 
; 1777 : 							point0xz = points_xz + terrain_elevation_point_byte_references[0].point;

  0087f	b8 01 00 00 00	 mov	 eax, 1
  00884	6b c8 00	 imul	 ecx, eax, 0
  00887	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  0088d	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00891	8b 4d a4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00894	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00897	89 95 78 ff ff
	ff		 mov	 DWORD PTR _point0xz$9[ebp], edx

; 1778 : 							point0y = points_y + terrain_elevation_point_byte_references[0].point;

  0089d	b8 01 00 00 00	 mov	 eax, 1
  008a2	6b c8 00	 imul	 ecx, eax, 0
  008a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  008ab	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  008af	8b 4d a0	 mov	 ecx, DWORD PTR _points_y$[ebp]
  008b2	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  008b5	89 95 6c ff ff
	ff		 mov	 DWORD PTR _point0y$6[ebp], edx

; 1779 : 
; 1780 : 							point1xz = points_xz + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  008bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  008c0	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  008c3	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  008c7	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  008ca	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  008cd	89 85 74 ff ff
	ff		 mov	 DWORD PTR _point1xz$8[ebp], eax

; 1781 : 							point1y = points_y + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  008d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  008d8	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  008db	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  008df	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  008e2	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  008e5	89 85 68 ff ff
	ff		 mov	 DWORD PTR _point1y$5[ebp], eax

; 1782 : 
; 1783 : 							point2xz = points_xz + terrain_elevation_point_byte_references[triangle_offset + 2].point;

  008eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  008f0	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  008f3	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  008f7	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  008fa	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  008fd	89 85 70 ff ff
	ff		 mov	 DWORD PTR _point2xz$7[ebp], eax

; 1784 : 							point2y = points_y + terrain_elevation_point_byte_references[triangle_offset + 2].point;

  00903	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00908	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  0090b	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0090f	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00912	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00915	89 85 64 ff ff
	ff		 mov	 DWORD PTR _point2y$4[ebp], eax

; 1785 : 						}
; 1786 : 						else

  0091b	e9 a4 00 00 00	 jmp	 $LN66@get_3d_ter
$LN65@get_3d_ter:

; 1787 : 						{
; 1788 : 
; 1789 : 							point0xz = points_xz + terrain_elevation_point_word_references[0].point;

  00920	b8 02 00 00 00	 mov	 eax, 2
  00925	6b c8 00	 imul	 ecx, eax, 0
  00928	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  0092e	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00932	8b 4d a4	 mov	 ecx, DWORD PTR _points_xz$[ebp]
  00935	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00938	89 95 78 ff ff
	ff		 mov	 DWORD PTR _point0xz$9[ebp], edx

; 1790 : 							point0y = points_y + terrain_elevation_point_word_references[0].point;

  0093e	b8 02 00 00 00	 mov	 eax, 2
  00943	6b c8 00	 imul	 ecx, eax, 0
  00946	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  0094c	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00950	8b 4d a0	 mov	 ecx, DWORD PTR _points_y$[ebp]
  00953	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00956	89 95 6c ff ff
	ff		 mov	 DWORD PTR _point0y$6[ebp], edx

; 1791 : 
; 1792 : 							point1xz = points_xz + terrain_elevation_point_word_references[triangle_offset + 1].point;

  0095c	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  0095f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00965	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  0096a	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  0096d	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00970	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _point1xz$8[ebp], ecx

; 1793 : 							point1y = points_y + terrain_elevation_point_word_references[triangle_offset + 1].point;

  00976	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00979	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  0097f	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00984	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00987	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0098a	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _point1y$5[ebp], ecx

; 1794 : 
; 1795 : 							point2xz = points_xz + terrain_elevation_point_word_references[triangle_offset + 2].point;

  00990	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00993	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00999	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  0099e	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  009a1	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  009a4	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _point2xz$7[ebp], ecx

; 1796 : 							point2y = points_y + terrain_elevation_point_word_references[triangle_offset + 2].point;

  009aa	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  009ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  009b3	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  009b8	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  009bb	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  009be	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _point2y$4[ebp], ecx
$LN66@get_3d_ter:

; 1797 : 						}
; 1798 : 
; 1799 : 						break;

  009c4	e9 89 02 00 00	 jmp	 $LN18@get_3d_ter
$LN67@get_3d_ter:

; 1800 : 					}
; 1801 : 
; 1802 : 					case POLYGON_TYPE_STRIP:
; 1803 : 					{
; 1804 : 
; 1805 : 						if ( terrain_sector->number_of_points < 257 )

  009c9	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  009cc	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  009cf	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  009d5	0f 8d 32 01 00
	00		 jge	 $LN68@get_3d_ter

; 1806 : 						{
; 1807 : 
; 1808 : 							if ( triangle_offset & 1 )

  009db	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  009de	83 e0 01	 and	 eax, 1
  009e1	0f 84 93 00 00
	00		 je	 $LN70@get_3d_ter

; 1809 : 							{
; 1810 : 
; 1811 : 								point0xz = points_xz + terrain_elevation_point_byte_references[triangle_offset].point;

  009e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  009ec	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  009ef	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  009f2	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  009f5	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  009f8	89 85 78 ff ff
	ff		 mov	 DWORD PTR _point0xz$9[ebp], eax

; 1812 : 								point0y = points_y + terrain_elevation_point_byte_references[triangle_offset].point;

  009fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00a03	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00a06	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00a09	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00a0c	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00a0f	89 85 6c ff ff
	ff		 mov	 DWORD PTR _point0y$6[ebp], eax

; 1813 : 
; 1814 : 								point1xz = points_xz + terrain_elevation_point_byte_references[triangle_offset + 2].point;

  00a15	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00a1a	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00a1d	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00a21	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00a24	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00a27	89 85 74 ff ff
	ff		 mov	 DWORD PTR _point1xz$8[ebp], eax

; 1815 : 								point1y = points_y + terrain_elevation_point_byte_references[triangle_offset + 2].point;

  00a2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00a32	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00a35	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00a39	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00a3c	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00a3f	89 85 68 ff ff
	ff		 mov	 DWORD PTR _point1y$5[ebp], eax

; 1816 : 
; 1817 : 								point2xz = points_xz + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  00a45	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00a4a	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00a4d	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00a51	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00a54	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00a57	89 85 70 ff ff
	ff		 mov	 DWORD PTR _point2xz$7[ebp], eax

; 1818 : 								point2y = points_y + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  00a5d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00a62	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00a65	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00a69	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00a6c	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00a6f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _point2y$4[ebp], eax

; 1819 : 							}
; 1820 : 							else

  00a75	e9 8e 00 00 00	 jmp	 $LN71@get_3d_ter
$LN70@get_3d_ter:

; 1821 : 							{
; 1822 : 
; 1823 : 								point0xz = points_xz + terrain_elevation_point_byte_references[triangle_offset].point;

  00a7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00a7f	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00a82	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00a85	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00a88	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00a8b	89 85 78 ff ff
	ff		 mov	 DWORD PTR _point0xz$9[ebp], eax

; 1824 : 								point0y = points_y + terrain_elevation_point_byte_references[triangle_offset].point;

  00a91	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00a96	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00a99	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00a9c	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00a9f	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00aa2	89 85 6c ff ff
	ff		 mov	 DWORD PTR _point0y$6[ebp], eax

; 1825 : 
; 1826 : 								point1xz = points_xz + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  00aa8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00aad	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00ab0	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00ab4	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00ab7	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00aba	89 85 74 ff ff
	ff		 mov	 DWORD PTR _point1xz$8[ebp], eax

; 1827 : 								point1y = points_y + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  00ac0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00ac5	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00ac8	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00acc	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00acf	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00ad2	89 85 68 ff ff
	ff		 mov	 DWORD PTR _point1y$5[ebp], eax

; 1828 : 
; 1829 : 								point2xz = points_xz + terrain_elevation_point_byte_references[triangle_offset + 2].point;

  00ad8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00add	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00ae0	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00ae4	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00ae7	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00aea	89 85 70 ff ff
	ff		 mov	 DWORD PTR _point2xz$7[ebp], eax

; 1830 : 								point2y = points_y + terrain_elevation_point_byte_references[triangle_offset + 2].point;

  00af0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00af5	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00af8	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00afc	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00aff	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00b02	89 85 64 ff ff
	ff		 mov	 DWORD PTR _point2y$4[ebp], eax
$LN71@get_3d_ter:

; 1831 : 							}
; 1832 : 						}
; 1833 : 						else

  00b08	e9 45 01 00 00	 jmp	 $LN73@get_3d_ter
$LN68@get_3d_ter:

; 1834 : 						{
; 1835 : 
; 1836 : 							if ( triangle_offset & 1 )

  00b0d	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00b10	83 e0 01	 and	 eax, 1
  00b13	0f 84 9f 00 00
	00		 je	 $LN72@get_3d_ter

; 1837 : 							{
; 1838 : 
; 1839 : 								point0xz = points_xz + terrain_elevation_point_word_references[triangle_offset].point;

  00b19	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00b1c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00b22	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00b26	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00b29	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00b2c	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _point0xz$9[ebp], ecx

; 1840 : 								point0y = points_y + terrain_elevation_point_word_references[triangle_offset].point;

  00b32	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00b35	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00b3b	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00b3f	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00b42	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00b45	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _point0y$6[ebp], ecx

; 1841 : 
; 1842 : 								point1xz = points_xz + terrain_elevation_point_word_references[triangle_offset + 2].point;

  00b4b	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00b4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00b54	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  00b59	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00b5c	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00b5f	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _point1xz$8[ebp], ecx

; 1843 : 								point1y = points_y + terrain_elevation_point_word_references[triangle_offset + 2].point;

  00b65	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00b68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00b6e	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  00b73	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00b76	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00b79	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _point1y$5[ebp], ecx

; 1844 : 
; 1845 : 								point2xz = points_xz + terrain_elevation_point_word_references[triangle_offset + 1].point;

  00b7f	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00b82	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00b88	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00b8d	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00b90	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00b93	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _point2xz$7[ebp], ecx

; 1846 : 								point2y = points_y + terrain_elevation_point_word_references[triangle_offset + 1].point;

  00b99	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00b9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00ba2	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00ba7	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00baa	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00bad	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _point2y$4[ebp], ecx

; 1847 : 							}
; 1848 : 							else

  00bb3	e9 9a 00 00 00	 jmp	 $LN73@get_3d_ter
$LN72@get_3d_ter:

; 1849 : 							{
; 1850 : 
; 1851 : 								point0xz = points_xz + terrain_elevation_point_word_references[triangle_offset].point;

  00bb8	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00bbb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00bc1	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00bc5	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00bc8	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00bcb	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _point0xz$9[ebp], ecx

; 1852 : 								point0y = points_y + terrain_elevation_point_word_references[triangle_offset].point;

  00bd1	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00bd4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00bda	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00bde	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00be1	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00be4	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _point0y$6[ebp], ecx

; 1853 : 
; 1854 : 								point1xz = points_xz + terrain_elevation_point_word_references[triangle_offset + 1].point;

  00bea	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00bed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00bf3	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00bf8	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00bfb	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00bfe	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _point1xz$8[ebp], ecx

; 1855 : 								point1y = points_y + terrain_elevation_point_word_references[triangle_offset + 1].point;

  00c04	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00c07	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00c0d	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00c12	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00c15	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00c18	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _point1y$5[ebp], ecx

; 1856 : 
; 1857 : 								point2xz = points_xz + terrain_elevation_point_word_references[triangle_offset + 2].point;

  00c1e	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00c21	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00c27	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  00c2c	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00c2f	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00c32	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _point2xz$7[ebp], ecx

; 1858 : 								point2y = points_y + terrain_elevation_point_word_references[triangle_offset + 2].point;

  00c38	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00c3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00c41	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  00c46	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00c49	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00c4c	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _point2y$4[ebp], ecx
$LN73@get_3d_ter:
$LN18@get_3d_ter:

; 1859 : 							}
; 1860 : 						}
; 1861 : 
; 1862 : 						break;
; 1863 : 					}
; 1864 : 				}
; 1865 : 
; 1866 : 				//
; 1867 : 				// Get the y components in world coordinates:
; 1868 : 				//
; 1869 : 
; 1870 : 				y0 = terrain_3d_map_minimum_height + ( point0y->y * terrain_3d_map_scaled_height_difference );

  00c52	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00c57	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _point0y$6[ebp]
  00c5d	66 23 01	 and	 ax, WORD PTR [ecx]
  00c60	0f b7 d0	 movzx	 edx, ax
  00c63	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00c67	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00c6f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00c77	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _y0$3[ebp], xmm0

; 1871 : 				y1 = terrain_3d_map_minimum_height + ( point1y->y * terrain_3d_map_scaled_height_difference );

  00c7f	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00c84	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _point1y$5[ebp]
  00c8a	66 23 01	 and	 ax, WORD PTR [ecx]
  00c8d	0f b7 d0	 movzx	 edx, ax
  00c90	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00c94	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00c9c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00ca4	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _y1$2[ebp], xmm0

; 1872 : 				y2 = terrain_3d_map_minimum_height + ( point2y->y * terrain_3d_map_scaled_height_difference );

  00cac	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00cb1	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _point2y$4[ebp]
  00cb7	66 23 01	 and	 ax, WORD PTR [ecx]
  00cba	0f b7 d0	 movzx	 edx, ax
  00cbd	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00cc1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00cc9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00cd1	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _y2$1[ebp], xmm0

; 1873 : 
; 1874 : 				vector2.x = point2xz->x - point0xz->x;

  00cd9	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _point2xz$7[ebp]
  00cdf	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00ce2	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _point0xz$9[ebp]
  00ce8	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00ceb	2b c8		 sub	 ecx, eax
  00ced	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00cf1	f3 0f 11 45 88	 movss	 DWORD PTR _vector2$11[ebp], xmm0

; 1875 : 				vector2.y = y2 - y0;

  00cf6	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$1[ebp]
  00cfe	f3 0f 5c 85 60
	ff ff ff	 subss	 xmm0, DWORD PTR _y0$3[ebp]
  00d06	f3 0f 11 45 8c	 movss	 DWORD PTR _vector2$11[ebp+4], xmm0

; 1876 : 				vector2.z = point2xz->z - point0xz->z;

  00d0b	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _point2xz$7[ebp]
  00d11	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00d15	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _point0xz$9[ebp]
  00d1b	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00d1f	2b c8		 sub	 ecx, eax
  00d21	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00d25	f3 0f 11 45 90	 movss	 DWORD PTR _vector2$11[ebp+8], xmm0

; 1877 : 
; 1878 : 				vector1.x = point1xz->x - point0xz->x;

  00d2a	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point1xz$8[ebp]
  00d30	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00d33	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _point0xz$9[ebp]
  00d39	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00d3c	2b c8		 sub	 ecx, eax
  00d3e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00d42	f3 0f 11 45 94	 movss	 DWORD PTR _vector1$12[ebp], xmm0

; 1879 : 				vector1.y = y1 - y0;

  00d47	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$2[ebp]
  00d4f	f3 0f 5c 85 60
	ff ff ff	 subss	 xmm0, DWORD PTR _y0$3[ebp]
  00d57	f3 0f 11 45 98	 movss	 DWORD PTR _vector1$12[ebp+4], xmm0

; 1880 : 				vector1.z = point1xz->z - point0xz->z;

  00d5c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _point1xz$8[ebp]
  00d62	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00d66	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _point0xz$9[ebp]
  00d6c	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00d70	2b c8		 sub	 ecx, eax
  00d72	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00d76	f3 0f 11 45 9c	 movss	 DWORD PTR _vector1$12[ebp+8], xmm0

; 1881 : 
; 1882 : 				//
; 1883 : 				// The x & z parts of the vectors have been scaled by ( 65535 / 2048 ), so do the same to the y vectors.
; 1884 : 				//
; 1885 : 
; 1886 : 				vector1.y /= TERRAIN_3D_XZ_SCALE;	//( 65535.0 / TERRAIN_3D_SECTOR_SIDE_LENGTH );

  00d7b	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _vector1$12[ebp+4]
  00d80	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@3fb0000000000000
  00d88	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d8c	f3 0f 11 45 98	 movss	 DWORD PTR _vector1$12[ebp+4], xmm0

; 1887 : 				vector2.y /= TERRAIN_3D_XZ_SCALE;	//( 65535.0 / TERRAIN_3D_SECTOR_SIDE_LENGTH );

  00d91	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _vector2$11[ebp+4]
  00d96	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@3fb0000000000000
  00d9e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00da2	f3 0f 11 45 8c	 movss	 DWORD PTR _vector2$11[ebp+4], xmm0

; 1888 : 
; 1889 : 				normal.x = ( vector1.y * vector2.z ) - ( vector1.z * vector2.y );

  00da7	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _vector1$12[ebp+4]
  00dac	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _vector2$11[ebp+8]
  00db1	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _vector1$12[ebp+8]
  00db6	f3 0f 59 4d 8c	 mulss	 xmm1, DWORD PTR _vector2$11[ebp+4]
  00dbb	f3 0f 5c c1	 subss	 xmm0, xmm1
  00dbf	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _normal$10[ebp], xmm0

; 1890 : 				normal.y = ( vector1.z * vector2.x ) - ( vector1.x * vector2.z );

  00dc7	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _vector1$12[ebp+8]
  00dcc	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _vector2$11[ebp]
  00dd1	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _vector1$12[ebp]
  00dd6	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _vector2$11[ebp+8]
  00ddb	f3 0f 5c c1	 subss	 xmm0, xmm1
  00ddf	f3 0f 11 45 80	 movss	 DWORD PTR _normal$10[ebp+4], xmm0

; 1891 : 				normal.z = ( vector1.x * vector2.y ) - ( vector1.y * vector2.x );

  00de4	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _vector1$12[ebp]
  00de9	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _vector2$11[ebp+4]
  00dee	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _vector1$12[ebp+4]
  00df3	f3 0f 59 4d 88	 mulss	 xmm1, DWORD PTR _vector2$11[ebp]
  00df8	f3 0f 5c c1	 subss	 xmm0, xmm1
  00dfc	f3 0f 11 45 84	 movss	 DWORD PTR _normal$10[ebp+8], xmm0

; 1892 : 
; 1893 : 				normalise_3d_vector (&normal);

  00e01	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _normal$10[ebp]
  00e07	50		 push	 eax
  00e08	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00e0d	dd d8		 fstp	 ST(0)

; 1894 : 
; 1895 : 				point_data->face_normal = normal;

  00e0f	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00e12	83 c0 20	 add	 eax, 32			; 00000020H
  00e15	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _normal$10[ebp]
  00e1b	89 08		 mov	 DWORD PTR [eax], ecx
  00e1d	8b 55 80	 mov	 edx, DWORD PTR _normal$10[ebp+4]
  00e20	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00e23	8b 4d 84	 mov	 ecx, DWORD PTR _normal$10[ebp+8]
  00e26	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN61@get_3d_ter:

; 1896 : 			}
; 1897 : 		}
; 1898 : #if DEBUG_TERRAIN
; 1899 : 		else
; 1900 : 		{
; 1901 : 
; 1902 : 			debug_log ( "Elevation: %s, %d: FAST", file, line );
; 1903 : 		}
; 1904 : #endif
; 1905 : 
; 1906 : 
; 1907 : 		//
; 1908 : 		// Here the find_fast structure is guaranteed to have the correct information in it.
; 1909 : 		//
; 1910 : 
; 1911 : 		if ( terrain_sector->number_of_points < 257 )

  00e29	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00e2c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00e2f	81 f9 01 01 00
	00		 cmp	 ecx, 257		; 00000101H
  00e35	7d 2c		 jge	 SHORT $LN74@get_3d_ter

; 1912 : 		{
; 1913 : 
; 1914 : 			point = points_xz + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  00e37	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00e3c	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00e3f	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00e43	8b 55 a4	 mov	 edx, DWORD PTR _points_xz$[ebp]
  00e46	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00e49	89 45 b4	 mov	 DWORD PTR _point$[ebp], eax

; 1915 : 			point_y = points_y + terrain_elevation_point_byte_references[triangle_offset + 1].point;

  00e4c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?terrain_elevation_point_byte_references@@3PAUTERRAIN_3D_POINT_BYTE_REFERENCE@@A
  00e51	03 45 ec	 add	 eax, DWORD PTR _triangle_offset$[ebp]
  00e54	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00e58	8b 55 a0	 mov	 edx, DWORD PTR _points_y$[ebp]
  00e5b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00e5e	89 45 b0	 mov	 DWORD PTR _point_y$[ebp], eax

; 1916 : 		}
; 1917 : 		else

  00e61	eb 2e		 jmp	 SHORT $LN75@get_3d_ter
$LN74@get_3d_ter:

; 1918 : 		{
; 1919 : 
; 1920 : 			point = points_xz + terrain_elevation_point_word_references[triangle_offset + 1].point;

  00e63	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00e66	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00e6c	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00e71	8b 45 a4	 mov	 eax, DWORD PTR _points_xz$[ebp]
  00e74	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00e77	89 4d b4	 mov	 DWORD PTR _point$[ebp], ecx

; 1921 : 			point_y = points_y + terrain_elevation_point_word_references[triangle_offset + 1].point;

  00e7a	8b 45 ec	 mov	 eax, DWORD PTR _triangle_offset$[ebp]
  00e7d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?terrain_elevation_point_word_references@@3PAUTERRAIN_3D_POINT_WORD_REFERENCE@@A
  00e83	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00e88	8b 45 a0	 mov	 eax, DWORD PTR _points_y$[ebp]
  00e8b	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00e8e	89 4d b0	 mov	 DWORD PTR _point_y$[ebp], ecx
$LN75@get_3d_ter:

; 1922 : 		}
; 1923 : 
; 1924 : #if X_AND_Z_ARE_FLOATS
; 1925 : 
; 1926 : 		dx = x_offset - point->x;
; 1927 : 		dz = z_offset - point->z;
; 1928 : 
; 1929 : #else
; 1930 : 
; 1931 : 		dx = x_offset - ( ( ( float ) point->x ) * TERRAIN_3D_XZ_SCALE );

  00e91	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _x_offset$[ebp]
  00e96	8b 45 b4	 mov	 eax, DWORD PTR _point$[ebp]
  00e99	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00e9c	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00ea0	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00ea4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb0000000000000
  00eac	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00eb0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00eb4	f3 0f 11 45 cc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1932 : 		dz = z_offset - ( ( ( float ) point->z ) * TERRAIN_3D_XZ_SCALE );

  00eb9	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _z_offset$[ebp]
  00ebe	8b 45 b4	 mov	 eax, DWORD PTR _point$[ebp]
  00ec1	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00ec5	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00ec9	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00ecd	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb0000000000000
  00ed5	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00ed9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00edd	f3 0f 11 45 c4	 movss	 DWORD PTR _dz$[ebp], xmm0

; 1933 : 
; 1934 : #endif
; 1935 : 
; 1936 : 		dy = ( ( point_data->face_normal.x * dx ) + ( point_data->face_normal.z * dz ) ) / point_data->face_normal.y;

  00ee2	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00ee5	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00eea	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  00eef	8b 4d 10	 mov	 ecx, DWORD PTR _point_data$[ebp]
  00ef2	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00ef7	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  00efc	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f00	8b 55 10	 mov	 edx, DWORD PTR _point_data$[ebp]
  00f03	f3 0f 5e 42 24	 divss	 xmm0, DWORD PTR [edx+36]
  00f08	f3 0f 11 45 c8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1937 : 
; 1938 : 		y = terrain_3d_map_minimum_height + ( ( ( float ) point_y->y ) * terrain_3d_map_scaled_height_difference );

  00f0d	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00f12	8b 4d b0	 mov	 ecx, DWORD PTR _point_y$[ebp]
  00f15	66 23 01	 and	 ax, WORD PTR [ecx]
  00f18	0f b7 d0	 movzx	 edx, ax
  00f1b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00f1f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?terrain_3d_map_scaled_height_difference@@3MA
  00f27	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?terrain_3d_map_minimum_height@@3MA
  00f2f	f3 0f 11 45 d0	 movss	 DWORD PTR _y$[ebp], xmm0

; 1939 : 
; 1940 : 		terrain_elevation = y - dy;

  00f34	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00f39	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _dy$[ebp]
  00f3e	f3 0f 11 45 c0	 movss	 DWORD PTR _terrain_elevation$[ebp], xmm0

; 1941 : 
; 1942 : /*
; 1943 : 		//DEBUG//
; 1944 : 		if (point_data->face_normal.y < 0.00001)
; 1945 : 		{
; 1946 : 			if (point_data->face_normal.y < 0.0)
; 1947 : 			{
; 1948 : 				debug_log ("Face normal is undercut %f", point_data->face_normal.y);
; 1949 : 			}
; 1950 : 			else
; 1951 : 			{
; 1952 : 				debug_log ("Face normal y component is %f", point_data->face_normal.y);
; 1953 : 			}
; 1954 : 
; 1955 : 			point_data->face_normal.x = 0.0;
; 1956 : 			point_data->face_normal.y = 1.0;
; 1957 : 			point_data->face_normal.z = 0.0;
; 1958 : 
; 1959 : 			terrain_elevation = terrain_sector->maximum_height;
; 1960 : 		}
; 1961 : 		//DEBUG//
; 1962 : 		*/
; 1963 : 	}
; 1964 : 	else

  00f43	e9 ab 00 00 00	 jmp	 $LN60@get_3d_ter
$LN59@get_3d_ter:

; 1965 : 	{
; 1966 : 
; 1967 : 		debug_log ( "Failed to locate a terrain face (x = %.4f, z = %.4f, x_sector = %d, z_sector = %d, x_offset = %f, z_offset = %f",

  00f48	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _z_offset$[ebp]
  00f4d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@44800000
  00f55	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00f59	83 ec 08	 sub	 esp, 8
  00f5c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00f61	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_offset$[ebp]
  00f66	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@44800000
  00f6e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00f72	83 ec 08	 sub	 esp, 8
  00f75	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00f7a	8b 45 f8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00f7d	50		 push	 eax
  00f7e	8b 4d fc	 mov	 ecx, DWORD PTR _x_sector$[ebp]
  00f81	51		 push	 ecx
  00f82	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _z$[ebp]
  00f87	83 ec 08	 sub	 esp, 8
  00f8a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00f8f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00f94	83 ec 08	 sub	 esp, 8
  00f97	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00f9c	68 00 00 00 00	 push	 OFFSET ??_C@_0HA@JDIKMNNK@Failed?5to?5locate?5a?5terrain?5face@
  00fa1	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00fa6	83 c4 2c	 add	 esp, 44			; 0000002cH

; 1968 : 																				x, z, x_sector, z_sector, x_offset + 1024, z_offset + 1024 );
; 1969 : 
; 1970 : #if DEBUG_MODULE
; 1971 : 
; 1972 : 		num_elevation_test_failures++;
; 1973 : 
; 1974 : #endif
; 1975 : 
; 1976 : 		point_data->terrain_sector = NULL;

  00fa9	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00fac	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1977 : 
; 1978 : 		point_data->face_normal.x = 0.0;

  00fb3	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00fb6	0f 57 c0	 xorps	 xmm0, xmm0
  00fb9	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1979 : 		point_data->face_normal.y = 1.0;

  00fbe	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00fc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fc9	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1980 : 		point_data->face_normal.z = 0.0;

  00fce	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00fd1	0f 57 c0	 xorps	 xmm0, xmm0
  00fd4	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 1981 : 
; 1982 : 		point_data->terrain_type = TERRAIN_TYPE_INVALID;

  00fd9	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  00fdc	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1983 : 
; 1984 : 		terrain_elevation = terrain_sector->maximum_height;

  00fe3	8b 45 bc	 mov	 eax, DWORD PTR _terrain_sector$[ebp]
  00fe6	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00fea	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00fee	f3 0f 11 45 c0	 movss	 DWORD PTR _terrain_elevation$[ebp], xmm0
$LN60@get_3d_ter:

; 1985 : 	}
; 1986 : 
; 1987 : 	////////////////////////////////////////
; 1988 : 	//
; 1989 : 	// return values
; 1990 : 	//
; 1991 : 	////////////////////////////////////////
; 1992 : 
; 1993 : 	if ( ( terrain_elevation < -32000 ) || ( terrain_elevation > 32000 ) )

  00ff3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c6fa0000
  00ffb	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  00fff	77 0e		 ja	 SHORT $LN77@get_3d_ter
  01001	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  01006	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@46fa0000
  0100d	76 08		 jbe	 SHORT $LN76@get_3d_ter
$LN77@get_3d_ter:

; 1994 : 	{
; 1995 : 
; 1996 : 		terrain_elevation = 0;

  0100f	0f 57 c0	 xorps	 xmm0, xmm0
  01012	f3 0f 11 45 c0	 movss	 DWORD PTR _terrain_elevation$[ebp], xmm0
$LN76@get_3d_ter:

; 1997 : 	}
; 1998 : 
; 1999 : 	point_data->last_elevation = terrain_elevation;

  01017	8b 45 10	 mov	 eax, DWORD PTR _point_data$[ebp]
  0101a	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  0101f	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 2000 : 
; 2001 : 	return ( terrain_elevation );

  01024	d9 45 c0	 fld	 DWORD PTR _terrain_elevation$[ebp]
$LN1@get_3d_ter:

; 2002 : }

  01027	5f		 pop	 edi
  01028	5e		 pop	 esi
  01029	5b		 pop	 ebx
  0102a	8b e5		 mov	 esp, ebp
  0102c	5d		 pop	 ebp
  0102d	c2 0c 00	 ret	 12			; 0000000cH
?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ENDP ; get_3d_terrain_point_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?clear_3d_terrain_point_data@@YGXPAUTERRAIN_3D_POINT_DATA@@@Z
_TEXT	SEGMENT
_point_data$ = 8					; size = 4
?clear_3d_terrain_point_data@@YGXPAUTERRAIN_3D_POINT_DATA@@@Z PROC ; clear_3d_terrain_point_data, COMDAT

; 2147 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2148 : 
; 2149 : 	if ( !point_data )

  00009	83 7d 08 00	 cmp	 DWORD PTR _point_data$[ebp], 0
  0000d	75 07		 jne	 SHORT $LN2@clear_3d_t

; 2150 : 	{
; 2151 : 
; 2152 : 		point_data = &system_point_data;

  0000f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _point_data$[ebp], OFFSET ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A
$LN2@clear_3d_t:

; 2153 : 	}
; 2154 : 
; 2155 : 	point_data->terrain_sector = NULL;

  00016	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  00019	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 2156 : 	point_data->terrain_face = NULL;

  00020	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  00023	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 2157 : 	point_data->terrain_type = TERRAIN_TYPE_INVALID;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  0002d	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 2158 : 	point_data->face_normal.x = 0;

  00034	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 2159 : 	point_data->face_normal.y = 0;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  00042	0f 57 c0	 xorps	 xmm0, xmm0
  00045	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 2160 : 	point_data->face_normal.z = 0;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _point_data$[ebp]
  0004d	0f 57 c0	 xorps	 xmm0, xmm0
  00050	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 2161 : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?clear_3d_terrain_point_data@@YGXPAUTERRAIN_3D_POINT_DATA@@@Z ENDP ; clear_3d_terrain_point_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\terrain\terrelev.c
;	COMDAT ?initialise_3d_terrain_elevation@@YGXXZ
_TEXT	SEGMENT
?initialise_3d_terrain_elevation@@YGXXZ PROC		; initialise_3d_terrain_elevation, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 114  : 	system_point_data.terrain_sector = NULL;

  00009	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?system_point_data@@3UTERRAIN_3D_POINT_DATA@@A+8, 0

; 115  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?initialise_3d_terrain_elevation@@YGXXZ ENDP		; initialise_3d_terrain_elevation
_TEXT	ENDS
END
