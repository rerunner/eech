; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\invsqrt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?inverse_sqrt_table@@3PAIA			; inverse_sqrt_table
_BSS	SEGMENT
?inverse_sqrt_table@@3PAIA DD 01H DUP (?)		; inverse_sqrt_table
_BSS	ENDS
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?initialise_inverse_square_root_table@@YGXXZ	; initialise_inverse_square_root_table
PUBLIC	?get_inverse_square_root@@YGMM@Z		; get_inverse_square_root
PUBLIC	?get_medium_accurary_inverse_square_root@@YGMM@Z ; get_medium_accurary_inverse_square_root
PUBLIC	?get_low_accurary_inverse_square_root@@YGMM@Z	; get_low_accurary_inverse_square_root
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4008000000000000
EXTRN	_sqrt:PROC
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	__fltused:DWORD
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\invsqrt.c
;	COMDAT ?get_low_accurary_inverse_square_root@@YGMM@Z
_TEXT	SEGMENT
_seed$ = -8						; size = 4
_a$ = -4						; size = 4
_x$ = 8							; size = 4
?get_low_accurary_inverse_square_root@@YGMM@Z PROC	; get_low_accurary_inverse_square_root, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 193  : 
; 194  : 	unsigned int
; 195  : 		a;
; 196  : 
; 197  : 	union FLOAT_AND_INT
; 198  : 		seed;
; 199  : 
; 200  : 
; 201  : 	a = ( ( union FLOAT_AND_INT * ) ( &x ) )->i;

  00009	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _a$[ebp], eax

; 202  : 
; 203  : 	seed.i = SET_EXP ( ( ( ( 3 * EXP_BIAS ) - 1 ) - GET_EXP ( a ) ) >> 1 ) | SET_MANTSEED ( inverse_sqrt_table[GET_EMANT ( a ) ] );

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _a$[ebp]
  00012	c1 e8 17	 shr	 eax, 23			; 00000017H
  00015	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001a	b9 7c 01 00 00	 mov	 ecx, 380		; 0000017cH
  0001f	2b c8		 sub	 ecx, eax
  00021	d1 e9		 shr	 ecx, 1
  00023	c1 e1 17	 shl	 ecx, 23			; 00000017H
  00026	8b 55 fc	 mov	 edx, DWORD PTR _a$[ebp]
  00029	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0002c	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?inverse_sqrt_table@@3PAIA ; inverse_sqrt_table
  00037	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  0003a	c1 e2 0f	 shl	 edx, 15			; 0000000fH
  0003d	0b ca		 or	 ecx, edx
  0003f	89 4d f8	 mov	 DWORD PTR _seed$[ebp], ecx

; 204  : 
; 205  : 	//
; 206  : 	// At the moment the seed is accurate to LOOKUP_BITS
; 207  : 	//
; 208  : 
; 209  : 	return ( seed.f );

  00042	d9 45 f8	 fld	 DWORD PTR _seed$[ebp]

; 210  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?get_low_accurary_inverse_square_root@@YGMM@Z ENDP	; get_low_accurary_inverse_square_root
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\invsqrt.c
;	COMDAT ?get_medium_accurary_inverse_square_root@@YGMM@Z
_TEXT	SEGMENT
_seed$ = -12						; size = 4
_r$ = -8						; size = 4
_a$ = -4						; size = 4
_x$ = 8							; size = 4
?get_medium_accurary_inverse_square_root@@YGMM@Z PROC	; get_medium_accurary_inverse_square_root, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 
; 158  : 	unsigned int
; 159  : 		a;
; 160  : 
; 161  : 	float
; 162  : 		r;
; 163  : 
; 164  : 	union FLOAT_AND_INT
; 165  : 		seed;
; 166  : 
; 167  : 
; 168  : 	a = ( ( union FLOAT_AND_INT * ) ( &x ) )->i;

  00009	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _a$[ebp], eax

; 169  : 
; 170  : 	seed.i = SET_EXP ( ( ( ( 3 * EXP_BIAS ) - 1 ) - GET_EXP ( a ) ) >> 1 ) | SET_MANTSEED ( inverse_sqrt_table[GET_EMANT ( a ) ] );

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _a$[ebp]
  00012	c1 e8 17	 shr	 eax, 23			; 00000017H
  00015	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001a	b9 7c 01 00 00	 mov	 ecx, 380		; 0000017cH
  0001f	2b c8		 sub	 ecx, eax
  00021	d1 e9		 shr	 ecx, 1
  00023	c1 e1 17	 shl	 ecx, 23			; 00000017H
  00026	8b 55 fc	 mov	 edx, DWORD PTR _a$[ebp]
  00029	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0002c	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?inverse_sqrt_table@@3PAIA ; inverse_sqrt_table
  00037	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  0003a	c1 e2 0f	 shl	 edx, 15			; 0000000fH
  0003d	0b ca		 or	 ecx, edx
  0003f	89 4d f4	 mov	 DWORD PTR _seed$[ebp], ecx

; 171  : 
; 172  : 	r = seed.f;

  00042	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _seed$[ebp]
  00047	f3 0f 11 45 f8	 movss	 DWORD PTR _r$[ebp], xmm0

; 173  : 
; 174  : 	//
; 175  : 	// At the moment the seed is accurate to LOOKUP_BITS
; 176  : 	//
; 177  : 
; 178  : 	r = ( 3.0 - r * r * x ) * r * 0.5;

  0004c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _r$[ebp]
  00051	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _r$[ebp]
  00056	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _x$[ebp]
  0005b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0005f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  00067	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0006b	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _r$[ebp]
  00070	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00074	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0007c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00080	f3 0f 11 45 f8	 movss	 DWORD PTR _r$[ebp], xmm0

; 179  : 
; 180  : 	//
; 181  : 	// Now result is accurate to 2*LOOKUP_BITS
; 182  : 	//
; 183  : 
; 184  : 	return ( r );

  00085	d9 45 f8	 fld	 DWORD PTR _r$[ebp]

; 185  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?get_medium_accurary_inverse_square_root@@YGMM@Z ENDP	; get_medium_accurary_inverse_square_root
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\invsqrt.c
;	COMDAT ?get_inverse_square_root@@YGMM@Z
_TEXT	SEGMENT
_seed$ = -12						; size = 4
_r$ = -8						; size = 4
_a$ = -4						; size = 4
_x$ = 8							; size = 4
?get_inverse_square_root@@YGMM@Z PROC			; get_inverse_square_root, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 115  : 
; 116  : 	unsigned int
; 117  : 		a;
; 118  : 
; 119  : 	float
; 120  : 		r;
; 121  : 
; 122  : 	union FLOAT_AND_INT
; 123  : 		seed;
; 124  : 
; 125  : 
; 126  : 	a = ( ( union FLOAT_AND_INT * ) ( &x ) )->i;

  00009	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _a$[ebp], eax

; 127  : 
; 128  : 	seed.i = SET_EXP ( ( ( ( 3 * EXP_BIAS ) - 1 ) - GET_EXP ( a ) ) >> 1 ) | SET_MANTSEED ( inverse_sqrt_table[GET_EMANT ( a ) ] );

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _a$[ebp]
  00012	c1 e8 17	 shr	 eax, 23			; 00000017H
  00015	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001a	b9 7c 01 00 00	 mov	 ecx, 380		; 0000017cH
  0001f	2b c8		 sub	 ecx, eax
  00021	d1 e9		 shr	 ecx, 1
  00023	c1 e1 17	 shl	 ecx, 23			; 00000017H
  00026	8b 55 fc	 mov	 edx, DWORD PTR _a$[ebp]
  00029	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0002c	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?inverse_sqrt_table@@3PAIA ; inverse_sqrt_table
  00037	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  0003a	c1 e2 0f	 shl	 edx, 15			; 0000000fH
  0003d	0b ca		 or	 ecx, edx
  0003f	89 4d f4	 mov	 DWORD PTR _seed$[ebp], ecx

; 129  : 
; 130  : 	r = seed.f;

  00042	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _seed$[ebp]
  00047	f3 0f 11 45 f8	 movss	 DWORD PTR _r$[ebp], xmm0

; 131  : 
; 132  : 	//
; 133  : 	// At the moment the seed is accurate to LOOKUP_BITS
; 134  : 	//
; 135  : 
; 136  : 	r = ( 3.0 - r * r * x ) * r * 0.5;

  0004c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _r$[ebp]
  00051	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _r$[ebp]
  00056	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _x$[ebp]
  0005b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0005f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  00067	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0006b	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _r$[ebp]
  00070	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00074	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0007c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00080	f3 0f 11 45 f8	 movss	 DWORD PTR _r$[ebp], xmm0

; 137  : 
; 138  : 	//
; 139  : 	// Now result is accurate to 2*LOOKUP_BITS
; 140  : 	//
; 141  : 
; 142  : 	r = ( 3.0 - r * r * x ) * r * 0.5;

  00085	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _r$[ebp]
  0008a	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _r$[ebp]
  0008f	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00094	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00098	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  000a0	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000a4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _r$[ebp]
  000a9	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000ad	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000b5	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000b9	f3 0f 11 45 f8	 movss	 DWORD PTR _r$[ebp], xmm0

; 143  : 
; 144  : 	//
; 145  : 	// Now result is accurate to 4*LOOKUP_BITS ( 24 )
; 146  : 	//
; 147  : 
; 148  : 	return ( r );

  000be	d9 45 f8	 fld	 DWORD PTR _r$[ebp]

; 149  : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
?get_inverse_square_root@@YGMM@Z ENDP			; get_inverse_square_root
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\invsqrt.c
;	COMDAT ?initialise_inverse_square_root_table@@YGXXZ
_TEXT	SEGMENT
tv92 = -88						; size = 8
_fo$ = -16						; size = 4
_fi$ = -12						; size = 4
_h$ = -8						; size = 4
_f$ = -4						; size = 4
?initialise_inverse_square_root_table@@YGXXZ PROC	; initialise_inverse_square_root_table, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 
; 82   : 	int
; 83   : 		f;
; 84   : 
; 85   : 	unsigned int
; 86   : 		*h;
; 87   : 
; 88   : 	union FLOAT_AND_INT
; 89   : 		fi,
; 90   : 		fo;
; 91   : 
; 92   : 	inverse_sqrt_table = ( unsigned int * ) safe_malloc ( TABLE_SIZE * sizeof ( unsigned int ) );

  00009	68 00 08 00 00	 push	 2048			; 00000800H
  0000e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00013	a3 00 00 00 00	 mov	 DWORD PTR ?inverse_sqrt_table@@3PAIA, eax ; inverse_sqrt_table

; 93   : 
; 94   : 	h = inverse_sqrt_table;

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?inverse_sqrt_table@@3PAIA ; inverse_sqrt_table
  0001d	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax

; 95   : 
; 96   : 	for ( f = 0, h = inverse_sqrt_table; f < TABLE_SIZE; f++)

  00020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _f$[ebp], 0
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?inverse_sqrt_table@@3PAIA ; inverse_sqrt_table
  0002c	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax
  0002f	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 fc	 mov	 DWORD PTR _f$[ebp], eax
$LN4@initialise:
  0003a	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR _f$[ebp], 512	; 00000200H
  00041	7d 57		 jge	 SHORT $LN3@initialise

; 97   : 	{
; 98   : 		
; 99   : 		fi.i = ( ( EXP_BIAS-1 ) << EXP_POS ) | ( f << LOOKUP_POS );

  00043	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  00046	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00049	0d 00 00 00 3f	 or	 eax, 1056964608		; 3f000000H
  0004e	89 45 f4	 mov	 DWORD PTR _fi$[ebp], eax

; 100  : 		
; 101  : 		fo.f = 1.0 / sqrt ( fi.f );

  00051	51		 push	 ecx
  00052	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fi$[ebp]
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00061	dd 5d a8	 fstp	 QWORD PTR tv92[ebp]
  00064	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0006c	f2 0f 5e 45 a8	 divsd	 xmm0, QWORD PTR tv92[ebp]
  00071	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00075	f3 0f 11 45 f0	 movss	 DWORD PTR _fo$[ebp], xmm0

; 102  : 		
; 103  : 		*h++ = ( ( fo.i + ( 1 << ( SEED_POS - 2 ) ) ) >> SEED_POS ) & 0xFF;

  0007a	8b 45 f0	 mov	 eax, DWORD PTR _fo$[ebp]
  0007d	05 00 20 00 00	 add	 eax, 8192		; 00002000H
  00082	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00085	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _h$[ebp]
  0008d	89 01		 mov	 DWORD PTR [ecx], eax
  0008f	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  00092	83 c2 04	 add	 edx, 4
  00095	89 55 f8	 mov	 DWORD PTR _h$[ebp], edx

; 104  : 	}

  00098	eb 97		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 105  : 
; 106  : 	inverse_sqrt_table[ TABLE_SIZE / 2 ] = 0xFF;

  0009a	b8 04 00 00 00	 mov	 eax, 4
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?inverse_sqrt_table@@3PAIA ; inverse_sqrt_table
  000a8	c7 04 01 ff 00
	00 00		 mov	 DWORD PTR [ecx+eax], 255 ; 000000ffH

; 107  : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
?initialise_inverse_square_root_table@@YGXXZ ENDP	; initialise_inverse_square_root_table
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
