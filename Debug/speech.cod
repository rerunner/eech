; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?speech_sector_coordinates@@3PAHA		; speech_sector_coordinates
PUBLIC	?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A ; speech_index_table
_BSS	SEGMENT
?speech_sector_coordinates@@3PAHA DD 06H DUP (?)	; speech_sector_coordinates
?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A DQ 0d2H DUP (?) ; speech_index_table
_BSS	ENDS
CONST	SEGMENT
?speech_originator_sound_channel_table@@3QBW4SOUND_CHANNEL_TYPES@@B DD 01H ; speech_originator_sound_channel_table
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
CONST	ENDS
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ ; play_client_server_speech
PUBLIC	?update_speech_buffers@@YGXXZ			; update_speech_buffers
PUBLIC	?remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z ; remove_speech_category_from_buffers
PUBLIC	?initialise_speech_buffers@@YGXXZ		; initialise_speech_buffers
PUBLIC	?deinitialise_speech_buffers@@YGXXZ		; deinitialise_speech_buffers
PUBLIC	?notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z ; notify_speech_buffers_entity_killed
PUBLIC	?initialise_speech_index_table@@YGXXZ		; initialise_speech_index_table
PUBLIC	?deinitialise_speech_index_table@@YGXXZ		; deinitialise_speech_index_table
PUBLIC	?initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z ; initialise_sample_index_array
PUBLIC	?initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z ; initialise_speech_data
PUBLIC	?get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z ; get_speech_random_value
PUBLIC	?play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z ; play_client_server_radio_message
PUBLIC	?play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z ; play_client_server_cpg_message
PUBLIC	?play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z ; play_client_server_cpg_contact_message
PUBLIC	?play_client_server_warning_message@@YGHPAUENTITY@@H@Z ; play_client_server_warning_message
PUBLIC	?get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z ; get_wingman_speech_originator
PUBLIC	?play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z ; play_client_server_wingman_message
PUBLIC	?get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z ; get_speech_sector_coordinates
PUBLIC	?get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z ; get_speech_heading_type
PUBLIC	?get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z ; get_speech_distance_type
PUBLIC	?get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z ; get_speech_atc_wind_speed
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??create_client_server_speech_entity@@YGPAUENTITY@@PAU2@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z@4JA ; `create_client_server_speech_entity'::`1'::__LINE__Var
PUBLIC	??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ ; `string'
PUBLIC	??_C@_06MLKDMCBD@parent@			; `string'
PUBLIC	??_C@_0M@DGAEELND@sample_list@			; `string'
PUBLIC	??_C@_0L@PPDMEDAD@count?5?$DO?$DN?51@		; `string'
PUBLIC	?__LINE__Var@?0??add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z@4JA ; `add_speech_to_list'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@CNAIJEEO@sample_count?5?$DO?50@	; `string'
PUBLIC	??_C@_08CPHLHFOJ@new_item@			; `string'
PUBLIC	??_C@_05PJDJNNOP@queue@				; `string'
PUBLIC	??_C@_0DN@GNLAHDDG@SPEECH?3?5Warning?5side?5?$CFs?5origina@ ; `string'
PUBLIC	?__LINE__Var@?0??remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z@4JA ; `remove_speech_from_list'::`1'::__LINE__Var
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_04NHONDGDE@item@				; `string'
PUBLIC	??_C@_0BC@FIJHPFJC@item?9?$DOsample_list@	; `string'
PUBLIC	?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA ; `play_buffered_speech'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	?__LINE__Var@?0??update_speech_buffers@@YGXXZ@4JA ; `update_speech_buffers'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z@4JA ; `remove_speech_category_from_buffers'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z@4JA ; `notify_speech_buffers_entity_killed'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA ; `play_client_server_speech'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@PLFJLGPL@side?5?$DM?5NUM_ENTITY_SIDES@ ; `string'
PUBLIC	??_C@_0CE@EEBFMDIK@locality?5?$DM?5NUM_SOUND_LOCALITY_T@ ; `string'
PUBLIC	??_C@_0CJ@HGFDECMA@originator?5?$DM?5NUM_SPEECH_ORIGINA@ ; `string'
PUBLIC	??_C@_0CF@IKCDNKLJ@category?5?$DM?5NUM_SPEECH_CATEGORY_@ ; `string'
PUBLIC	??_C@_0CE@NOGCAHEJ@array_type?5?$DM?5NUM_SPEECH_ARRAY_T@ ; `string'
PUBLIC	??_C@_0BC@FJPPFFFF@speech_index?5?$DO?$DN?50@	; `string'
PUBLIC	??_C@_0EL@KOOFKCEE@speech_index?5?$DM?5speech_index_tab@ ; `string'
PUBLIC	??_C@_0CN@JNCIKIDM@SPEECH?5?3?5More?5than?5?$CFd?5samples?5i@ ; `string'
PUBLIC	?__LINE__Var@?0??initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z@4JA ; `initialise_sample_index_array'::`1'::__LINE__Var
PUBLIC	??_C@_0DL@KJLOGLGO@?$CIarray_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIarray_typ@ ; `string'
PUBLIC	??_C@_0EA@DEGILGIK@?$CIoriginator?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIoriginato@ ; `string'
PUBLIC	?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA ; `initialise_speech_data'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@MNIFKPMM@blue_force_sample_index?5?$CB?$DN?5red_@ ; `string'
PUBLIC	??_C@_0CL@HLEOOBFM@speech_index?5?$DM?5blue_force_entry@ ; `string'
PUBLIC	??_C@_0CK@BLACNEKD@speech_index?5?$DM?5red_force_entry?9@ ; `string'
PUBLIC	?__LINE__Var@?0??get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z@4JA ; `get_speech_random_value'::`1'::__LINE__Var
PUBLIC	??_C@_0BA@HDBEHMOA@num_choices?5?$DO?50@	; `string'
PUBLIC	??_C@_09CMNODLIB@total?5?$DO?50@		; `string'
PUBLIC	?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA ; `play_client_server_radio_message'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z@4JA ; `play_client_server_personal_message'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z@4JA ; `play_client_server_cpg_message'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z@4JA ; `play_client_server_cpg_contact_message'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??play_client_server_warning_message@@YGHPAUENTITY@@H@Z@4JA ; `play_client_server_warning_message'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA ; `get_wingman_speech_originator'::`1'::__LINE__Var
PUBLIC	??_C@_05MGJOOGAJ@group@				; `string'
PUBLIC	?__LINE__Var@?0??play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA ; `play_client_server_wingman_message'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA ; `get_speech_sector_coordinates'::`1'::__LINE__Var
PUBLIC	??_C@_03PCBNCGFH@pos@				; `string'
PUBLIC	??_C@_03KHPNBODO@sec@				; `string'
PUBLIC	?__LINE__Var@?0??get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z@4JA ; `get_speech_heading_type'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA ; `get_speech_distance_type'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z@4JA ; `get_speech_atc_wind_speed'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3fd0c15236000000
PUBLIC	__real@3fe921fb51000000
PUBLIC	__real@3ff4f1a6c3800000
PUBLIC	__real@3ff85d84
PUBLIC	__real@3ffd524fde800000
PUBLIC	__real@40000000
PUBLIC	__real@4002d97c7cc00000
PUBLIC	__real@400709d10a400000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400b3a2597c00000
PUBLIC	__real@400f6a7a25400000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4011cd6759600000
PUBLIC	__real@4013e591a0200000
PUBLIC	__real@4015fdbbe6e00000
PUBLIC	__real@4018000000000000
PUBLIC	__real@401815e62da00000
PUBLIC	__real@401921fb51000000
PUBLIC	__real@4026000000000000
PUBLIC	__real@4030000000000000
PUBLIC	__real@4035000000000000
PUBLIC	__real@403a000000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@4097700000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40a3880000000000
PUBLIC	__real@40ab580000000000
PUBLIC	__real@40b1940000000000
PUBLIC	__real@40b57c0000000000
PUBLIC	__real@40b9640000000000
PUBLIC	__real@40bd4c0000000000
PUBLIC	__real@40c09a0000000000
PUBLIC	__real@40c28e0000000000
PUBLIC	__real@40c4820000000000
PUBLIC	__real@40c6760000000000
PUBLIC	__real@bf800000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ:PROC ; transmit_entity_comms_message
EXTRN	?get_local_entity_target_relative_bearing@@YGMPAUENTITY@@0@Z:PROC ; get_local_entity_target_relative_bearing
EXTRN	?initialise_speech_number_data@@YGXXZ:PROC	; initialise_speech_number_data
EXTRN	?initialise_speech_headings_data@@YGXXZ:PROC	; initialise_speech_headings_data
EXTRN	?initialise_speech_distances_data@@YGXXZ:PROC	; initialise_speech_distances_data
EXTRN	?initialise_speech_callsign_data@@YGXXZ:PROC	; initialise_speech_callsign_data
EXTRN	?initialise_speech_atc_data@@YGXXZ:PROC		; initialise_speech_atc_data
EXTRN	?initialise_speech_gc_data@@YGXXZ:PROC		; initialise_speech_gc_data
EXTRN	?initialise_speech_fac_data@@YGXXZ:PROC		; initialise_speech_fac_data
EXTRN	?initialise_speech_wingman_data@@YGXXZ:PROC	; initialise_speech_wingman_data
EXTRN	?initialise_speech_system_data@@YGXXZ:PROC	; initialise_speech_system_data
EXTRN	?initialise_speech_cpg_data@@YGXXZ:PROC		; initialise_speech_cpg_data
EXTRN	?create_client_server_sound_effect_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMHHHPAH@Z:PROC ; create_client_server_sound_effect_entity
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?get_session_wind_velocity_at_point@@YGMPAUVEC3D@@0@Z:PROC ; get_session_wind_velocity_at_point
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?entity_side_short_names@@3PAPBDA:BYTE		; entity_side_short_names
EXTRN	?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A:BYTE ; application_sound_effects
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A DB 078cH DUP (?) ; speech_buffer
_BSS	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40c6760000000000
CONST	SEGMENT
__real@40c6760000000000 DQ 040c6760000000000r	; 11500
CONST	ENDS
;	COMDAT __real@40c4820000000000
CONST	SEGMENT
__real@40c4820000000000 DQ 040c4820000000000r	; 10500
CONST	ENDS
;	COMDAT __real@40c28e0000000000
CONST	SEGMENT
__real@40c28e0000000000 DQ 040c28e0000000000r	; 9500
CONST	ENDS
;	COMDAT __real@40c09a0000000000
CONST	SEGMENT
__real@40c09a0000000000 DQ 040c09a0000000000r	; 8500
CONST	ENDS
;	COMDAT __real@40bd4c0000000000
CONST	SEGMENT
__real@40bd4c0000000000 DQ 040bd4c0000000000r	; 7500
CONST	ENDS
;	COMDAT __real@40b9640000000000
CONST	SEGMENT
__real@40b9640000000000 DQ 040b9640000000000r	; 6500
CONST	ENDS
;	COMDAT __real@40b57c0000000000
CONST	SEGMENT
__real@40b57c0000000000 DQ 040b57c0000000000r	; 5500
CONST	ENDS
;	COMDAT __real@40b1940000000000
CONST	SEGMENT
__real@40b1940000000000 DQ 040b1940000000000r	; 4500
CONST	ENDS
;	COMDAT __real@40ab580000000000
CONST	SEGMENT
__real@40ab580000000000 DQ 040ab580000000000r	; 3500
CONST	ENDS
;	COMDAT __real@40a3880000000000
CONST	SEGMENT
__real@40a3880000000000 DQ 040a3880000000000r	; 2500
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4097700000000000
CONST	SEGMENT
__real@4097700000000000 DQ 04097700000000000r	; 1500
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@403a000000000000
CONST	SEGMENT
__real@403a000000000000 DQ 0403a000000000000r	; 26
CONST	ENDS
;	COMDAT __real@4035000000000000
CONST	SEGMENT
__real@4035000000000000 DQ 04035000000000000r	; 21
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@4026000000000000
CONST	SEGMENT
__real@4026000000000000 DQ 04026000000000000r	; 11
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@401815e62da00000
CONST	SEGMENT
__real@401815e62da00000 DQ 0401815e62da00000r	; 6.02139
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4015fdbbe6e00000
CONST	SEGMENT
__real@4015fdbbe6e00000 DQ 04015fdbbe6e00000r	; 5.49779
CONST	ENDS
;	COMDAT __real@4013e591a0200000
CONST	SEGMENT
__real@4013e591a0200000 DQ 04013e591a0200000r	; 4.97419
CONST	ENDS
;	COMDAT __real@4011cd6759600000
CONST	SEGMENT
__real@4011cd6759600000 DQ 04011cd6759600000r	; 4.45059
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400f6a7a25400000
CONST	SEGMENT
__real@400f6a7a25400000 DQ 0400f6a7a25400000r	; 3.92699
CONST	ENDS
;	COMDAT __real@400b3a2597c00000
CONST	SEGMENT
__real@400b3a2597c00000 DQ 0400b3a2597c00000r	; 3.40339
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@400709d10a400000
CONST	SEGMENT
__real@400709d10a400000 DQ 0400709d10a400000r	; 2.87979
CONST	ENDS
;	COMDAT __real@4002d97c7cc00000
CONST	SEGMENT
__real@4002d97c7cc00000 DQ 04002d97c7cc00000r	; 2.35619
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ffd524fde800000
CONST	SEGMENT
__real@3ffd524fde800000 DQ 03ffd524fde800000r	; 1.8326
CONST	ENDS
;	COMDAT __real@3ff85d84
CONST	SEGMENT
__real@3ff85d84 DD 03ff85d84r			; 1.94035
CONST	ENDS
;	COMDAT __real@3ff4f1a6c3800000
CONST	SEGMENT
__real@3ff4f1a6c3800000 DQ 03ff4f1a6c3800000r	; 1.309
CONST	ENDS
;	COMDAT __real@3fe921fb51000000
CONST	SEGMENT
__real@3fe921fb51000000 DQ 03fe921fb51000000r	; 0.785398
CONST	ENDS
;	COMDAT __real@3fd0c15236000000
CONST	SEGMENT
__real@3fd0c15236000000 DQ 03fd0c15236000000r	; 0.261799
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z@4JA DD 06d5H ; `get_speech_atc_wind_speed'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA DD 0680H ; `get_speech_distance_type'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z@4JA DD 0632H ; `get_speech_heading_type'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03KHPNBODO@sec@
CONST	SEGMENT
??_C@_03KHPNBODO@sec@ DB 'sec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCBNCGFH@pos@
CONST	SEGMENT
??_C@_03PCBNCGFH@pos@ DB 'pos', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA DD 0600H ; `get_speech_sector_coordinates'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA DD 05e2H ; `play_client_server_wingman_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05MGJOOGAJ@group@
CONST	SEGMENT
??_C@_05MGJOOGAJ@group@ DB 'group', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA DD 05b7H ; `get_wingman_speech_originator'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??play_client_server_warning_message@@YGHPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_client_server_warning_message@@YGHPAUENTITY@@H@Z@4JA DD 058aH ; `play_client_server_warning_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z@4JA DD 0556H ; `play_client_server_cpg_contact_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z@4JA DD 0533H ; `play_client_server_cpg_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z@4JA DD 0502H ; `play_client_server_personal_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA DD 04a3H ; `play_client_server_radio_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09CMNODLIB@total?5?$DO?50@
CONST	SEGMENT
??_C@_09CMNODLIB@total?5?$DO?50@ DB 'total > 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HDBEHMOA@num_choices?5?$DO?50@
CONST	SEGMENT
??_C@_0BA@HDBEHMOA@num_choices?5?$DO?50@ DB 'num_choices > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z@4JA DD 0453H ; `get_speech_random_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CK@BLACNEKD@speech_index?5?$DM?5red_force_entry?9@
CONST	SEGMENT
??_C@_0CK@BLACNEKD@speech_index?5?$DM?5red_force_entry?9@ DB 'speech_inde'
	DB	'x < red_force_entry->num_items', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HLEOOBFM@speech_index?5?$DM?5blue_force_entry@
CONST	SEGMENT
??_C@_0CL@HLEOOBFM@speech_index?5?$DM?5blue_force_entry@ DB 'speech_index'
	DB	' < blue_force_entry->num_items', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@MNIFKPMM@blue_force_sample_index?5?$CB?$DN?5red_@
CONST	SEGMENT
??_C@_0DC@MNIFKPMM@blue_force_sample_index?5?$CB?$DN?5red_@ DB 'blue_forc'
	DB	'e_sample_index != red_force_sample_index', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA DD 03a2H ; `initialise_speech_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EA@DEGILGIK@?$CIoriginator?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIoriginato@
CONST	SEGMENT
??_C@_0EA@DEGILGIK@?$CIoriginator?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIoriginato@ DB '('
	DB	'originator >= 0) && (originator < NUM_SPEECH_ORIGINATOR_TYPES'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KJLOGLGO@?$CIarray_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIarray_typ@
CONST	SEGMENT
??_C@_0DL@KJLOGLGO@?$CIarray_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIarray_typ@ DB '('
	DB	'array_type >= 0) && (array_type < NUM_SPEECH_ARRAY_TYPES)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z@4JA DD 0385H ; `initialise_sample_index_array'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CN@JNCIKIDM@SPEECH?5?3?5More?5than?5?$CFd?5samples?5i@
CONST	SEGMENT
??_C@_0CN@JNCIKIDM@SPEECH?5?3?5More?5than?5?$CFd?5samples?5i@ DB 'SPEECH '
	DB	': More than %d samples in speech list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@KOOFKCEE@speech_index?5?$DM?5speech_index_tab@
CONST	SEGMENT
??_C@_0EL@KOOFKCEE@speech_index?5?$DM?5speech_index_tab@ DB 'speech_index'
	DB	' < speech_index_table [array_type][originator][side].num_item'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FJPPFFFF@speech_index?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BC@FJPPFFFF@speech_index?5?$DO?$DN?50@ DB 'speech_index >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NOGCAHEJ@array_type?5?$DM?5NUM_SPEECH_ARRAY_T@
CONST	SEGMENT
??_C@_0CE@NOGCAHEJ@array_type?5?$DM?5NUM_SPEECH_ARRAY_T@ DB 'array_type <'
	DB	' NUM_SPEECH_ARRAY_TYPES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IKCDNKLJ@category?5?$DM?5NUM_SPEECH_CATEGORY_@
CONST	SEGMENT
??_C@_0CF@IKCDNKLJ@category?5?$DM?5NUM_SPEECH_CATEGORY_@ DB 'category < N'
	DB	'UM_SPEECH_CATEGORY_TYPES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HGFDECMA@originator?5?$DM?5NUM_SPEECH_ORIGINA@
CONST	SEGMENT
??_C@_0CJ@HGFDECMA@originator?5?$DM?5NUM_SPEECH_ORIGINA@ DB 'originator <'
	DB	' NUM_SPEECH_ORIGINATOR_TYPES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EEBFMDIK@locality?5?$DM?5NUM_SOUND_LOCALITY_T@
CONST	SEGMENT
??_C@_0CE@EEBFMDIK@locality?5?$DM?5NUM_SOUND_LOCALITY_T@ DB 'locality < N'
	DB	'UM_SOUND_LOCALITY_TYPES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PLFJLGPL@side?5?$DM?5NUM_ENTITY_SIDES@
CONST	SEGMENT
??_C@_0BI@PLFJLGPL@side?5?$DM?5NUM_ENTITY_SIDES@ DB 'side < NUM_ENTITY_SI'
	DB	'DES', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA DD 02feH ; `play_client_server_speech'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z@4JA DD 02c0H ; `notify_speech_buffers_entity_killed'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z@4JA DD 025cH ; `remove_speech_category_from_buffers'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_speech_buffers@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_speech_buffers@@YGXXZ@4JA DD 01faH ; `update_speech_buffers'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA DD 018cH ; `play_buffered_speech'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@FIJHPFJC@item?9?$DOsample_list@
CONST	SEGMENT
??_C@_0BC@FIJHPFJC@item?9?$DOsample_list@ DB 'item->sample_list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NHONDGDE@item@
CONST	SEGMENT
??_C@_04NHONDGDE@item@ DB 'item', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z@4JA DD 015fH ; `remove_speech_from_list'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DN@GNLAHDDG@SPEECH?3?5Warning?5side?5?$CFs?5origina@
CONST	SEGMENT
??_C@_0DN@GNLAHDDG@SPEECH?3?5Warning?5side?5?$CFs?5origina@ DB 'SPEECH: W'
	DB	'arning side %s originator %d queue reached %d items', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PJDJNNOP@queue@
CONST	SEGMENT
??_C@_05PJDJNNOP@queue@ DB 'queue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPHLHFOJ@new_item@
CONST	SEGMENT
??_C@_08CPHLHFOJ@new_item@ DB 'new_item', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CNAIJEEO@sample_count?5?$DO?50@
CONST	SEGMENT
??_C@_0BB@CNAIJEEO@sample_count?5?$DO?50@ DB 'sample_count > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z@4JA DD 0feH ; `add_speech_to_list'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@PPDMEDAD@count?5?$DO?$DN?51@
CONST	SEGMENT
??_C@_0L@PPDMEDAD@count?5?$DO?$DN?51@ DB 'count >= 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DGAEELND@sample_list@
CONST	SEGMENT
??_C@_0M@DGAEELND@sample_list@ DB 'sample_list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLKDMCBD@parent@
CONST	SEGMENT
??_C@_06MLKDMCBD@parent@ DB 'parent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
CONST	SEGMENT
??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@ DB 'ge'
	DB	't_comms_model () == COMMS_MODEL_SERVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\effect\sounde'
	DB	'ff\speech.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??create_client_server_speech_entity@@YGPAUENTITY@@PAU2@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_client_server_speech_entity@@YGPAUENTITY@@PAU2@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z@4JA DD 0cbH ; `create_client_server_speech_entity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z
_TEXT	SEGMENT
tv172 = -76						; size = 4
tv137 = -76						; size = 4
tv86 = -76						; size = 4
tv164 = -72						; size = 4
tv130 = -72						; size = 4
tv79 = -72						; size = 4
_result$ = -4						; size = 4
_en$ = 8						; size = 4
_priority$ = 12						; size = 4
_expire_time$ = 16					; size = 4
_sub_type$ = 20						; size = 4
_originator$ = 24					; size = 4
_category$ = 28						; size = 4
_category_silence_timer$ = 32				; size = 4
_main_array_type$ = 36					; size = 4
_main_speech_index$ = 40				; size = 4
?play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z PROC ; play_client_server_personal_message, COMDAT

; 1282 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1283 : 	int
; 1284 : 		result;
; 1285 :   
; 1286 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_clien
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_clien:

; 1287 : 
; 1288 : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 18		 je	 SHORT $LN3@play_clien
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z@4JA
  00035	83 c0 06	 add	 eax, 6
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@play_clien:

; 1289 : 
; 1290 : 	if (get_local_entity_int_value (en, INT_TYPE_PLAYER) == ENTITY_PLAYER_AI)

  00048	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0004c	74 0a		 je	 SHORT $LN9@play_clien
  0004e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 4d b8	 mov	 DWORD PTR tv79[ebp], ecx
  00056	eb 1d		 jmp	 SHORT $LN10@play_clien
$LN9@play_clien:
  00058	68 0a 05 00 00	 push	 1290			; 0000050aH
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00062	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN10@play_clien:
  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	85 c0		 test	 eax, eax
  0007c	74 09		 je	 SHORT $LN11@play_clien
  0007e	c7 45 b4 9c 00
	00 00		 mov	 DWORD PTR tv86[ebp], 156 ; 0000009cH
  00085	eb 1d		 jmp	 SHORT $LN12@play_clien
$LN11@play_clien:
  00087	68 0a 05 00 00	 push	 1290			; 0000050aH
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN12@play_clien:
  000a4	68 9c 00 00 00	 push	 156			; 0000009cH
  000a9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000ac	52		 push	 edx
  000ad	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv79[ebp], 1116
  000b4	8b 4d b4	 mov	 ecx, DWORD PTR tv86[ebp]
  000b7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000be	ff d2		 call	 edx
  000c0	85 c0		 test	 eax, eax
  000c2	75 07		 jne	 SHORT $LN4@play_clien

; 1291 : 	{
; 1292 : 		return FALSE;

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 6c 01 00 00	 jmp	 $LN1@play_clien
$LN4@play_clien:

; 1293 : 	}
; 1294 : 
; 1295 : 	if (!get_local_entity_int_value (en, INT_TYPE_ALIVE))

  000cb	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000cf	74 0a		 je	 SHORT $LN13@play_clien
  000d1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d6	89 4d b8	 mov	 DWORD PTR tv130[ebp], ecx
  000d9	eb 1d		 jmp	 SHORT $LN14@play_clien
$LN13@play_clien:
  000db	68 0f 05 00 00	 push	 1295			; 0000050fH
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN14@play_clien:
  000f8	b8 01 00 00 00	 mov	 eax, 1
  000fd	85 c0		 test	 eax, eax
  000ff	74 09		 je	 SHORT $LN15@play_clien
  00101	c7 45 b4 07 00
	00 00		 mov	 DWORD PTR tv137[ebp], 7
  00108	eb 1d		 jmp	 SHORT $LN16@play_clien
$LN15@play_clien:
  0010a	68 0f 05 00 00	 push	 1295			; 0000050fH
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0011a	51		 push	 ecx
  0011b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00120	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN16@play_clien:
  00127	6a 07		 push	 7
  00129	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0012c	52		 push	 edx
  0012d	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv130[ebp], 1116
  00134	8b 4d b4	 mov	 ecx, DWORD PTR tv137[ebp]
  00137	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0013e	ff d2		 call	 edx
  00140	85 c0		 test	 eax, eax
  00142	75 07		 jne	 SHORT $LN5@play_clien

; 1296 : 	{
; 1297 : 		return FALSE;

  00144	33 c0		 xor	 eax, eax
  00146	e9 ec 00 00 00	 jmp	 $LN1@play_clien
$LN5@play_clien:

; 1298 : 	}
; 1299 : 
; 1300 : 	if ((main_speech_index == -1) || (main_array_type == -1))

  0014b	83 7d 28 ff	 cmp	 DWORD PTR _main_speech_index$[ebp], -1
  0014f	74 06		 je	 SHORT $LN7@play_clien
  00151	83 7d 24 ff	 cmp	 DWORD PTR _main_array_type$[ebp], -1
  00155	75 07		 jne	 SHORT $LN6@play_clien
$LN7@play_clien:

; 1301 : 	{
; 1302 : 		return FALSE;

  00157	33 c0		 xor	 eax, eax
  00159	e9 d9 00 00 00	 jmp	 $LN1@play_clien
$LN6@play_clien:

; 1303 : 	}
; 1304 : 
; 1305 : 	result = play_client_server_speech

  0015e	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00162	74 0a		 je	 SHORT $LN17@play_clien
  00164	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	89 4d b8	 mov	 DWORD PTR tv164[ebp], ecx
  0016c	eb 21		 jmp	 SHORT $LN18@play_clien
$LN17@play_clien:
  0016e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z@4JA
  00174	83 c2 1b	 add	 edx, 27			; 0000001bH
  00177	52		 push	 edx
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00188	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
$LN18@play_clien:
  0018f	b9 01 00 00 00	 mov	 ecx, 1
  00194	85 c9		 test	 ecx, ecx
  00196	74 09		 je	 SHORT $LN19@play_clien
  00198	c7 45 b4 bb 00
	00 00		 mov	 DWORD PTR tv172[ebp], 187 ; 000000bbH
  0019f	eb 21		 jmp	 SHORT $LN20@play_clien
$LN19@play_clien:
  001a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z@4JA
  001a7	83 c2 1b	 add	 edx, 27			; 0000001bH
  001aa	52		 push	 edx
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001bb	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN20@play_clien:
  001c2	6a ff		 push	 -1
  001c4	8b 4d 28	 mov	 ecx, DWORD PTR _main_speech_index$[ebp]
  001c7	51		 push	 ecx
  001c8	8b 55 24	 mov	 edx, DWORD PTR _main_array_type$[ebp]
  001cb	52		 push	 edx
  001cc	51		 push	 ecx
  001cd	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _category_silence_timer$[ebp]
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	8b 45 1c	 mov	 eax, DWORD PTR _category$[ebp]
  001da	50		 push	 eax
  001db	8b 4d 18	 mov	 ecx, DWORD PTR _originator$[ebp]
  001de	51		 push	 ecx
  001df	51		 push	 ecx
  001e0	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _expire_time$[ebp]
  001e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ea	51		 push	 ecx
  001eb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _priority$[ebp]
  001f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f5	51		 push	 ecx
  001f6	0f 57 c0	 xorps	 xmm0, xmm0
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	6a 00		 push	 0
  00200	8b 55 14	 mov	 edx, DWORD PTR _sub_type$[ebp]
  00203	52		 push	 edx
  00204	68 bb 00 00 00	 push	 187			; 000000bbH
  00209	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0020c	50		 push	 eax
  0020d	69 4d b8 5c 04
	00 00		 imul	 ecx, DWORD PTR tv164[ebp], 1116
  00214	8b 55 b4	 mov	 edx, DWORD PTR tv172[ebp]
  00217	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  0021e	ff d0		 call	 eax
  00220	50		 push	 eax
  00221	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00224	51		 push	 ecx
  00225	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00228	52		 push	 edx
  00229	e8 00 00 00 00	 call	 ?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ ; play_client_server_speech
  0022e	83 c4 38	 add	 esp, 56			; 00000038H
  00231	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 1306 : 						(
; 1307 : 							en,
; 1308 : 							en,
; 1309 : 							(entity_sides) get_local_entity_int_value (en, INT_TYPE_SIDE),
; 1310 : 							sub_type,
; 1311 : 							SOUND_LOCALITY_RADIO,
; 1312 : 							0.0,
; 1313 : 							priority,
; 1314 : 							expire_time,
; 1315 : 							originator,
; 1316 : 							category,
; 1317 : 							category_silence_timer,
; 1318 : 							main_array_type,
; 1319 : 							main_speech_index,
; 1320 : 							-1
; 1321 : 						);
; 1322 : 
; 1323 : 	return result;

  00234	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]
$LN1@play_clien:

; 1324 : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 24 00	 ret	 36			; 00000024H
?play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z ENDP ; play_client_server_personal_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_speech_introduction@@YGHH@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
_val$ = 8						; size = 4
?play_speech_introduction@@YGHH@Z PROC			; play_speech_introduction, COMDAT

; 1150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1151 : 	switch (val)

  00009	8b 45 08	 mov	 eax, DWORD PTR _val$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d bc 00	 cmp	 DWORD PTR tv64[ebp], 0
  00013	74 0e		 je	 SHORT $LN4@play_speec
  00015	83 7d bc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00019	74 0c		 je	 SHORT $LN5@play_speec
  0001b	83 7d bc 02	 cmp	 DWORD PTR tv64[ebp], 2
  0001f	74 2c		 je	 SHORT $LN6@play_speec
  00021	eb 31		 jmp	 SHORT $LN2@play_speec
$LN4@play_speec:

; 1152 : 	{
; 1153 : 		case SPEECH_INTRODUCTION_NEVER:
; 1154 : 		{
; 1155 : 			return FALSE;

  00023	33 c0		 xor	 eax, eax
  00025	eb 2f		 jmp	 SHORT $LN1@play_speec
$LN5@play_speec:

; 1156 : 		}
; 1157 : 		case SPEECH_INTRODUCTION_SOMETIMES:
; 1158 : 		{
; 1159 : 			return (rand16 () & 1);

  00027	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00031	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00040	c1 f8 10	 sar	 eax, 16			; 00000010H
  00043	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  00048	83 e0 01	 and	 eax, 1
  0004b	eb 09		 jmp	 SHORT $LN1@play_speec
$LN6@play_speec:

; 1160 : 		}
; 1161 : 		case SPEECH_INTRODUCTION_ALWAYS:
; 1162 : 		{
; 1163 : 			return TRUE;

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	eb 02		 jmp	 SHORT $LN1@play_speec
$LN2@play_speec:

; 1164 : 		}
; 1165 : 	}
; 1166 : 
; 1167 : 	return FALSE;

  00054	33 c0		 xor	 eax, eax
$LN1@play_speec:

; 1168 : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?play_speech_introduction@@YGHH@Z ENDP			; play_speech_introduction
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z
_TEXT	SEGMENT
tv180 = -92						; size = 4
tv172 = -88						; size = 4
_best$ = -20						; size = 4
_item$ = -16						; size = 4
_buffer$ = -12						; size = 4
_pos$ = -8						; size = 4
_en$ = -4						; size = 4
_side$ = 8						; size = 4
_originator$ = 12					; size = 4
?play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z PROC ; play_buffered_speech, COMDAT

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 397  : 	entity
; 398  : 		*en;
; 399  : 
; 400  : 	vec3d
; 401  : 		*pos;
; 402  : 
; 403  : 	speech_system_type
; 404  : 		*buffer;
; 405  : 
; 406  : 	speech_system_queue_type
; 407  : 		*item,
; 408  : 		*best;
; 409  : 
; 410  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN4@play_buffe
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA
  00017	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@play_buffe:

; 411  : 
; 412  : 	en = NULL;

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _en$[ebp], 0

; 413  : 
; 414  : 	buffer = &speech_buffer [side][originator];

  00031	69 45 08 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00038	6b 4d 0c 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  0003c	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx]
  00043	89 55 f4	 mov	 DWORD PTR _buffer$[ebp], edx

; 415  : 
; 416  : 	ASSERT (buffer);

  00046	83 7d f4 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0004a	75 18		 jne	 SHORT $LN5@play_buffe
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA
  00051	83 c0 14	 add	 eax, 20			; 00000014H
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  0005f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@play_buffe:

; 417  : 
; 418  : 	item = buffer->queue;

  00064	8b 45 f4	 mov	 eax, DWORD PTR _buffer$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	89 4d f0	 mov	 DWORD PTR _item$[ebp], ecx

; 419  : 
; 420  : 	if (!item)

  0006c	83 7d f0 00	 cmp	 DWORD PTR _item$[ebp], 0
  00070	75 08		 jne	 SHORT $LN6@play_buffe

; 421  : 	{
; 422  : 		return en;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00075	e9 e5 01 00 00	 jmp	 $LN1@play_buffe
$LN6@play_buffe:

; 423  : 	}
; 424  : 
; 425  : 	//
; 426  : 	// find next speech to play
; 427  : 	//
; 428  : 
; 429  : 	best = NULL;

  0007a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _best$[ebp], 0
$LN22@play_buffe:

; 430  : 
; 431  : 	while (item)

  00081	83 7d f0 00	 cmp	 DWORD PTR _item$[ebp], 0
  00085	74 71		 je	 SHORT $LN3@play_buffe

; 432  : 	{
; 433  : 		if (item->delay > 0.0)

  00087	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0008a	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  0008f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00097	76 0b		 jbe	 SHORT $LN7@play_buffe

; 434  : 		{
; 435  : 			item = item->next;

  00099	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0009c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0009f	89 4d f0	 mov	 DWORD PTR _item$[ebp], ecx

; 436  : 
; 437  : 			continue;

  000a2	eb dd		 jmp	 SHORT $LN22@play_buffe
$LN7@play_buffe:

; 438  : 		}
; 439  : 
; 440  : 		if (buffer->exclude_list [item->category].timer > 0.0)

  000a4	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  000a7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000aa	8b 55 f4	 mov	 edx, DWORD PTR _buffer$[ebp]
  000ad	f3 0f 5a 44 8a
	04		 cvtss2sd xmm0, DWORD PTR [edx+ecx*4+4]
  000b3	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000bb	76 0b		 jbe	 SHORT $LN8@play_buffe

; 441  : 		{
; 442  : 			item = item->next;

  000bd	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  000c0	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c3	89 4d f0	 mov	 DWORD PTR _item$[ebp], ecx

; 443  : 
; 444  : 			continue;

  000c6	eb b9		 jmp	 SHORT $LN22@play_buffe
$LN8@play_buffe:

; 445  : 		}
; 446  : 
; 447  : 		if (!best)

  000c8	83 7d ec 00	 cmp	 DWORD PTR _best$[ebp], 0
  000cc	75 08		 jne	 SHORT $LN9@play_buffe

; 448  : 		{
; 449  : 			best = item;

  000ce	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  000d1	89 45 ec	 mov	 DWORD PTR _best$[ebp], eax

; 450  : 		}
; 451  : 		else

  000d4	eb 17		 jmp	 SHORT $LN11@play_buffe
$LN9@play_buffe:

; 452  : 		{
; 453  : 			if (item->priority > best->priority)

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  000d9	8b 4d ec	 mov	 ecx, DWORD PTR _best$[ebp]
  000dc	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  000e1	0f 2f 41 24	 comiss	 xmm0, DWORD PTR [ecx+36]
  000e5	76 06		 jbe	 SHORT $LN11@play_buffe

; 454  : 			{
; 455  : 				best = item;

  000e7	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  000ea	89 45 ec	 mov	 DWORD PTR _best$[ebp], eax
$LN11@play_buffe:

; 456  : 			}
; 457  : 		}
; 458  : 
; 459  : 		item = item->next;

  000ed	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  000f0	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000f3	89 4d f0	 mov	 DWORD PTR _item$[ebp], ecx

; 460  : 	}

  000f6	eb 89		 jmp	 SHORT $LN22@play_buffe
$LN3@play_buffe:

; 461  : 
; 462  : 	//
; 463  : 	// Found speech ?
; 464  : 	//
; 465  : 
; 466  : 	item = best;

  000f8	8b 45 ec	 mov	 eax, DWORD PTR _best$[ebp]
  000fb	89 45 f0	 mov	 DWORD PTR _item$[ebp], eax

; 467  : 
; 468  : 	if (item)

  000fe	83 7d f0 00	 cmp	 DWORD PTR _item$[ebp], 0
  00102	0f 84 54 01 00
	00		 je	 $LN12@play_buffe

; 469  : 	{
; 470  : 		if (point_inside_map_area (&(item->pos)))

  00108	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0010b	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00110	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  00117	72 3e		 jb	 SHORT $LN13@play_buffe
  00119	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0011c	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00124	0f 2f 40 14	 comiss	 xmm0, DWORD PTR [eax+20]
  00128	72 2d		 jb	 SHORT $LN13@play_buffe
  0012a	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0012d	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00132	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00139	72 1c		 jb	 SHORT $LN13@play_buffe
  0013b	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0013e	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00146	0f 2f 40 1c	 comiss	 xmm0, DWORD PTR [eax+28]
  0014a	72 0b		 jb	 SHORT $LN13@play_buffe

; 471  : 		{
; 472  : 			pos = &(item->pos);

  0014c	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0014f	83 c0 14	 add	 eax, 20			; 00000014H
  00152	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 473  : 		}
; 474  : 		else

  00155	eb 07		 jmp	 SHORT $LN14@play_buffe
$LN13@play_buffe:

; 475  : 		{
; 476  : 			pos = NULL;

  00157	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
$LN14@play_buffe:

; 477  : 		}
; 478  : 
; 479  : 		//
; 480  : 		// play speech
; 481  : 		//
; 482  : 
; 483  : 		en = create_client_server_speech_entity (item->parent, side, item->sub_type, item->channel, item->locality, pos, item->sample_count, item->sample_list);

  0015e	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  00161	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00164	51		 push	 ecx
  00165	8b 55 f0	 mov	 edx, DWORD PTR _item$[ebp]
  00168	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0016b	50		 push	 eax
  0016c	8b 4d f8	 mov	 ecx, DWORD PTR _pos$[ebp]
  0016f	51		 push	 ecx
  00170	8b 55 f0	 mov	 edx, DWORD PTR _item$[ebp]
  00173	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00176	50		 push	 eax
  00177	8b 4d f0	 mov	 ecx, DWORD PTR _item$[ebp]
  0017a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0017d	52		 push	 edx
  0017e	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  00181	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00184	51		 push	 ecx
  00185	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  00188	52		 push	 edx
  00189	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0018c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018e	51		 push	 ecx
  0018f	e8 00 00 00 00	 call	 ?create_client_server_speech_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z ; create_client_server_speech_entity
  00194	89 45 fc	 mov	 DWORD PTR _en$[ebp], eax

; 484  : 
; 485  : 		ASSERT (en);

  00197	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0019b	75 18		 jne	 SHORT $LN15@play_buffe
  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA
  001a2	83 c0 59	 add	 eax, 89			; 00000059H
  001a5	50		 push	 eax
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  001b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@play_buffe:

; 486  : 
; 487  : 		buffer->current.timer = get_local_entity_float_value (en, FLOAT_TYPE_EFFECT_LIFETIME);

  001b5	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  001b9	74 0a		 je	 SHORT $LN17@play_buffe
  001bb	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  001be	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c0	89 4d a8	 mov	 DWORD PTR tv172[ebp], ecx
  001c3	eb 21		 jmp	 SHORT $LN18@play_buffe
$LN17@play_buffe:
  001c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA
  001cb	83 c2 5b	 add	 edx, 91			; 0000005bH
  001ce	52		 push	 edx
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001df	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN18@play_buffe:
  001e6	b9 01 00 00 00	 mov	 ecx, 1
  001eb	85 c9		 test	 ecx, ecx
  001ed	74 09		 je	 SHORT $LN19@play_buffe
  001ef	c7 45 a4 20 00
	00 00		 mov	 DWORD PTR tv180[ebp], 32 ; 00000020H
  001f6	eb 21		 jmp	 SHORT $LN20@play_buffe
$LN19@play_buffe:
  001f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z@4JA
  001fe	83 c2 5b	 add	 edx, 91			; 0000005bH
  00201	52		 push	 edx
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00212	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN20@play_buffe:
  00219	6a 20		 push	 32			; 00000020H
  0021b	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  0021e	51		 push	 ecx
  0021f	69 55 a8 bc 02
	00 00		 imul	 edx, DWORD PTR tv172[ebp], 700
  00226	8b 45 a4	 mov	 eax, DWORD PTR tv180[ebp]
  00229	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00230	ff d1		 call	 ecx
  00232	8b 55 f4	 mov	 edx, DWORD PTR _buffer$[ebp]
  00235	d9 5a 58	 fstp	 DWORD PTR [edx+88]

; 488  : 
; 489  : 		buffer->exclude_list [item->category].timer = item->category_silence_timer;

  00238	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0023b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0023e	8b 55 f4	 mov	 edx, DWORD PTR _buffer$[ebp]
  00241	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  00244	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00247	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 490  : 
; 491  : 		//
; 492  : 		// remove item from list
; 493  : 		//
; 494  : 
; 495  : 		remove_speech_from_list (side, originator, item);

  0024b	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0024e	50		 push	 eax
  0024f	8b 4d 0c	 mov	 ecx, DWORD PTR _originator$[ebp]
  00252	51		 push	 ecx
  00253	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  00256	52		 push	 edx
  00257	e8 00 00 00 00	 call	 ?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z ; remove_speech_from_list
$LN12@play_buffe:

; 496  : 	}
; 497  : 
; 498  : 	return en;

  0025c	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
$LN1@play_buffe:

; 499  : }

  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	5b		 pop	 ebx
  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c2 08 00	 ret	 8
?play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z ENDP ; play_buffered_speech
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z
_TEXT	SEGMENT
_prev$ = -12						; size = 4
_next$ = -8						; size = 4
_buffer$ = -4						; size = 4
_side$ = 8						; size = 4
_originator$ = 12					; size = 4
_item$ = 16						; size = 4
?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z PROC ; remove_speech_from_list, COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 352  : 	speech_system_type
; 353  : 		*buffer;
; 354  : 
; 355  : 	speech_system_queue_type
; 356  : 		*next,
; 357  : 		*prev;
; 358  : 
; 359  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN2@remove_spe
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z@4JA
  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@remove_spe:

; 360  : 
; 361  : 	buffer = &speech_buffer [side][originator];

  0002a	69 45 08 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00031	6b 4d 0c 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  00035	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx]
  0003c	89 55 fc	 mov	 DWORD PTR _buffer$[ebp], edx

; 362  : 
; 363  : 	ASSERT (buffer);

  0003f	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00043	75 18		 jne	 SHORT $LN3@remove_spe
  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z@4JA
  0004a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00058	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@remove_spe:

; 364  : 
; 365  : 	ASSERT (item);

  0005d	83 7d 10 00	 cmp	 DWORD PTR _item$[ebp], 0
  00061	75 18		 jne	 SHORT $LN4@remove_spe
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z@4JA
  00068	83 c0 0e	 add	 eax, 14			; 0000000eH
  0006b	50		 push	 eax
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_04NHONDGDE@item@
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@remove_spe:

; 366  : 
; 367  : 	next = item->next;

  0007b	8b 45 10	 mov	 eax, DWORD PTR _item$[ebp]
  0007e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00081	89 4d f8	 mov	 DWORD PTR _next$[ebp], ecx

; 368  : 	prev = item->prev;

  00084	8b 45 10	 mov	 eax, DWORD PTR _item$[ebp]
  00087	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0008a	89 4d f4	 mov	 DWORD PTR _prev$[ebp], ecx

; 369  : 
; 370  : 	if (next)

  0008d	83 7d f8 00	 cmp	 DWORD PTR _next$[ebp], 0
  00091	74 09		 je	 SHORT $LN5@remove_spe

; 371  : 	{
; 372  : 		next->prev = prev;

  00093	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _prev$[ebp]
  00099	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
$LN5@remove_spe:

; 373  : 	}
; 374  : 
; 375  : 	if (prev)

  0009c	83 7d f4 00	 cmp	 DWORD PTR _prev$[ebp], 0
  000a0	74 0b		 je	 SHORT $LN6@remove_spe

; 376  : 	{
; 377  : 		prev->next = next;

  000a2	8b 45 f4	 mov	 eax, DWORD PTR _prev$[ebp]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _next$[ebp]
  000a8	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 378  : 	}
; 379  : 	else

  000ab	eb 08		 jmp	 SHORT $LN7@remove_spe
$LN6@remove_spe:

; 380  : 	{
; 381  : 		buffer->queue = next;

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _next$[ebp]
  000b3	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@remove_spe:

; 382  : 	}
; 383  : 
; 384  : 	ASSERT (item->sample_list);

  000b5	8b 45 10	 mov	 eax, DWORD PTR _item$[ebp]
  000b8	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  000bc	75 18		 jne	 SHORT $LN8@remove_spe
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z@4JA
  000c3	83 c0 21	 add	 eax, 33			; 00000021H
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FIJHPFJC@item?9?$DOsample_list@
  000d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@remove_spe:

; 385  : 
; 386  : 	free_mem (item->sample_list);

  000d6	8b 45 10	 mov	 eax, DWORD PTR _item$[ebp]
  000d9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 387  : 
; 388  : 	free_mem (item);

  000e2	8b 45 10	 mov	 eax, DWORD PTR _item$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 389  : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 0c 00	 ret	 12			; 0000000cH
?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z ENDP ; remove_speech_from_list
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z
_TEXT	SEGMENT
_count$ = -12						; size = 4
_new_item$ = -8						; size = 4
_queue$ = -4						; size = 4
_parent$ = 8						; size = 4
_side$ = 12						; size = 4
_originator$ = 16					; size = 4
_sub_type$ = 20						; size = 4
_category$ = 24						; size = 4
_locality$ = 28						; size = 4
_pos$ = 32						; size = 4
_delay$ = 36						; size = 4
_priority$ = 40						; size = 4
_expire_time$ = 44					; size = 4
_category_silence_timer$ = 48				; size = 4
_sample_count$ = 52					; size = 4
_sample_list$ = 56					; size = 4
?add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z PROC ; add_speech_to_list, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 255  : 	speech_system_queue_type
; 256  : 		*queue,
; 257  : 		*new_item;
; 258  : 
; 259  : 	int
; 260  : 		count;
; 261  : 
; 262  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN4@add_speech
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z@4JA
  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@add_speech:

; 263  : 
; 264  : 	ASSERT (sample_count > 0);

  0002a	83 7d 34 00	 cmp	 DWORD PTR _sample_count$[ebp], 0
  0002e	7f 18		 jg	 SHORT $LN5@add_speech
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z@4JA
  00035	83 c0 0a	 add	 eax, 10			; 0000000aH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CNAIJEEO@sample_count?5?$DO?50@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@add_speech:

; 265  : 
; 266  : 	//
; 267  : 	// Create new queue entry
; 268  : 	//
; 269  : 
; 270  : 	new_item = (speech_system_queue_type *) malloc_fast_mem (sizeof (speech_system_queue_type));

  00048	6a 40		 push	 64			; 00000040H
  0004a	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0004f	89 45 f8	 mov	 DWORD PTR _new_item$[ebp], eax

; 271  : 
; 272  : 	ASSERT (new_item);

  00052	83 7d f8 00	 cmp	 DWORD PTR _new_item$[ebp], 0
  00056	75 18		 jne	 SHORT $LN6@add_speech
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z@4JA
  0005d	83 c0 12	 add	 eax, 18			; 00000012H
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_08CPHLHFOJ@new_item@
  0006b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@add_speech:

; 273  : 
; 274  : 	new_item->parent = parent;

  00070	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _parent$[ebp]
  00076	89 08		 mov	 DWORD PTR [eax], ecx

; 275  : 
; 276  : 	new_item->sub_type = sub_type;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  0007b	8b 4d 14	 mov	 ecx, DWORD PTR _sub_type$[ebp]
  0007e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 277  : 
; 278  : 	new_item->category = category;

  00081	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  00084	8b 4d 18	 mov	 ecx, DWORD PTR _category$[ebp]
  00087	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 279  : 
; 280  : 	new_item->channel = get_speech_originator_sound_channel (originator);

  0008a	8b 45 10	 mov	 eax, DWORD PTR _originator$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?get_speech_originator_sound_channel@@YG?AW4SOUND_CHANNEL_TYPES@@W4speech_originator_types@@@Z ; get_speech_originator_sound_channel
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _new_item$[ebp]
  00096	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 281  : 
; 282  : 	new_item->locality = locality;

  00099	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  0009c	8b 4d 1c	 mov	 ecx, DWORD PTR _locality$[ebp]
  0009f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 283  : 
; 284  : 	if (pos)

  000a2	83 7d 20 00	 cmp	 DWORD PTR _pos$[ebp], 0
  000a6	74 1b		 je	 SHORT $LN7@add_speech

; 285  : 	{
; 286  : 		new_item->pos = *pos;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  000ab	83 c0 14	 add	 eax, 20			; 00000014H
  000ae	8b 4d 20	 mov	 ecx, DWORD PTR _pos$[ebp]
  000b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b3	89 10		 mov	 DWORD PTR [eax], edx
  000b5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b8	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000bb	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 287  : 	}
; 288  : 	else

  000c1	eb 30		 jmp	 SHORT $LN8@add_speech
$LN7@add_speech:

; 289  : 	{
; 290  : 		new_item->pos.x = -1;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  000c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000ce	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 291  : 		new_item->pos.y = -1;

  000d3	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000de	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 292  : 		new_item->pos.z = -1;

  000e3	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000ee	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0
$LN8@add_speech:

; 293  : 	}
; 294  : 
; 295  : 	new_item->delay = delay;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  000f6	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _delay$[ebp]
  000fb	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 296  : 	new_item->priority = priority;

  00100	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  00103	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _priority$[ebp]
  00108	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 297  : 	new_item->expire_time = expire_time;

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  00110	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _expire_time$[ebp]
  00115	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 298  : 	new_item->category_silence_timer = category_silence_timer;

  0011a	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  0011d	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _category_silence_timer$[ebp]
  00122	f3 0f 11 40 2c	 movss	 DWORD PTR [eax+44], xmm0

; 299  : 
; 300  : 	new_item->sample_count = sample_count;

  00127	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  0012a	8b 4d 34	 mov	 ecx, DWORD PTR _sample_count$[ebp]
  0012d	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 301  : 
; 302  : 	new_item->sample_list = (sound_sample_indices *) malloc_fast_mem (sizeof (sound_sample_indices) * sample_count);

  00130	8b 45 34	 mov	 eax, DWORD PTR _sample_count$[ebp]
  00133	c1 e0 02	 shl	 eax, 2
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0013c	8b 4d f8	 mov	 ecx, DWORD PTR _new_item$[ebp]
  0013f	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 303  : 
; 304  : 	memcpy (new_item->sample_list, sample_list, (sizeof (sound_sample_indices) * sample_count));

  00142	8b 45 34	 mov	 eax, DWORD PTR _sample_count$[ebp]
  00145	c1 e0 02	 shl	 eax, 2
  00148	50		 push	 eax
  00149	8b 4d 38	 mov	 ecx, DWORD PTR _sample_list$[ebp]
  0014c	51		 push	 ecx
  0014d	8b 55 f8	 mov	 edx, DWORD PTR _new_item$[ebp]
  00150	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : 
; 306  : 	//
; 307  : 	// Insert into queue
; 308  : 	//
; 309  : 
; 310  : 	new_item->next = NULL;

  0015c	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  0015f	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 311  : 
; 312  : 	queue = speech_buffer [side][originator].queue;

  00166	69 45 0c 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  0016d	6b 4d 10 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  00171	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx]
  00178	89 55 fc	 mov	 DWORD PTR _queue$[ebp], edx

; 313  : 
; 314  : 	if (queue)

  0017b	83 7d fc 00	 cmp	 DWORD PTR _queue$[ebp], 0
  0017f	74 7c		 je	 SHORT $LN9@add_speech

; 315  : 	{
; 316  : 		count = 0;

  00181	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@add_speech:

; 317  : 
; 318  : 		while (queue->next)

  00188	8b 45 fc	 mov	 eax, DWORD PTR _queue$[ebp]
  0018b	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0018f	74 14		 je	 SHORT $LN3@add_speech

; 319  : 		{
; 320  : 			count ++;

  00191	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  00194	83 c0 01	 add	 eax, 1
  00197	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 321  : 
; 322  : 			queue = queue->next;

  0019a	8b 45 fc	 mov	 eax, DWORD PTR _queue$[ebp]
  0019d	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001a0	89 4d fc	 mov	 DWORD PTR _queue$[ebp], ecx

; 323  : 		}

  001a3	eb e3		 jmp	 SHORT $LN2@add_speech
$LN3@add_speech:

; 324  : 
; 325  : 		ASSERT (queue);

  001a5	83 7d fc 00	 cmp	 DWORD PTR _queue$[ebp], 0
  001a9	75 18		 jne	 SHORT $LN11@add_speech
  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z@4JA
  001b0	83 c0 47	 add	 eax, 71			; 00000047H
  001b3	50		 push	 eax
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_05PJDJNNOP@queue@
  001be	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@add_speech:

; 326  : 
; 327  : 		if (count > 20)

  001c3	83 7d f4 14	 cmp	 DWORD PTR _count$[ebp], 20 ; 00000014H
  001c7	7e 20		 jle	 SHORT $LN12@add_speech

; 328  : 		{
; 329  : 			debug_log ("SPEECH: Warning side %s originator %d queue reached %d items", entity_side_short_names [side], originator, count);

  001c9	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  001cc	50		 push	 eax
  001cd	8b 4d 10	 mov	 ecx, DWORD PTR _originator$[ebp]
  001d0	51		 push	 ecx
  001d1	8b 55 0c	 mov	 edx, DWORD PTR _side$[ebp]
  001d4	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?entity_side_short_names@@3PAPBDA[edx*4]
  001db	50		 push	 eax
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@GNLAHDDG@SPEECH?3?5Warning?5side?5?$CFs?5origina@
  001e1	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001e6	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@add_speech:

; 330  : 		}
; 331  : 
; 332  : 		queue->next = new_item;

  001e9	8b 45 fc	 mov	 eax, DWORD PTR _queue$[ebp]
  001ec	8b 4d f8	 mov	 ecx, DWORD PTR _new_item$[ebp]
  001ef	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 333  : 
; 334  : 		new_item->prev = queue;

  001f2	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  001f5	8b 4d fc	 mov	 ecx, DWORD PTR _queue$[ebp]
  001f8	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 335  : 	}
; 336  : 	else

  001fb	eb 1f		 jmp	 SHORT $LN10@add_speech
$LN9@add_speech:

; 337  : 	{
; 338  : 		new_item->prev = NULL;

  001fd	8b 45 f8	 mov	 eax, DWORD PTR _new_item$[ebp]
  00200	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 339  : 
; 340  : 		speech_buffer [side][originator].queue = new_item;

  00207	69 45 0c 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  0020e	6b 4d 10 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  00212	8b 55 f8	 mov	 edx, DWORD PTR _new_item$[ebp]
  00215	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx], edx
$LN10@add_speech:

; 341  : 	}
; 342  : 
; 343  : 	return TRUE;

  0021c	b8 01 00 00 00	 mov	 eax, 1

; 344  : }

  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c2 34 00	 ret	 52			; 00000034H
?add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z ENDP ; add_speech_to_list
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?create_client_server_speech_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z
_TEXT	SEGMENT
_en$ = -4						; size = 4
_parent$ = 8						; size = 4
_side$ = 12						; size = 4
_sub_type$ = 16						; size = 4
_channel$ = 20						; size = 4
_locality$ = 24						; size = 4
_pos$ = 28						; size = 4
_count$ = 32						; size = 4
_sample_list$ = 36					; size = 4
?create_client_server_speech_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z PROC ; create_client_server_speech_entity, COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 204  : 	entity
; 205  : 		*en;
; 206  : 
; 207  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN2@create_cli
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_client_server_speech_entity@@YGPAUENTITY@@PAU2@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@create_cli:

; 208  : 
; 209  : 	ASSERT (parent);

  0002a	83 7d 08 00	 cmp	 DWORD PTR _parent$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@create_cli
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_client_server_speech_entity@@YGPAUENTITY@@PAU2@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z@4JA
  00035	83 c0 06	 add	 eax, 6
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06MLKDMCBD@parent@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@create_cli:

; 210  : 
; 211  : 	ASSERT (sample_list);

  00048	83 7d 24 00	 cmp	 DWORD PTR _sample_list$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@create_cli
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_client_server_speech_entity@@YGPAUENTITY@@PAU2@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z@4JA
  00053	83 c0 08	 add	 eax, 8
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DGAEELND@sample_list@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@create_cli:

; 212  : 
; 213  : 	ASSERT (count >= 1);

  00066	83 7d 20 01	 cmp	 DWORD PTR _count$[ebp], 1
  0006a	7d 18		 jge	 SHORT $LN5@create_cli
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_client_server_speech_entity@@YGPAUENTITY@@PAU2@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z@4JA
  00071	83 c0 0a	 add	 eax, 10			; 0000000aH
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PPDMEDAD@count?5?$DO?$DN?51@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@create_cli:

; 214  : 
; 215  : 	en = create_client_server_sound_effect_entity

  00084	8b 45 24	 mov	 eax, DWORD PTR _sample_list$[ebp]
  00087	50		 push	 eax
  00088	8b 4d 20	 mov	 ecx, DWORD PTR _count$[ebp]
  0008b	51		 push	 ecx
  0008c	6a 00		 push	 0
  0008e	6a 01		 push	 1
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	51		 push	 ecx
  0009f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	8b 55 1c	 mov	 edx, DWORD PTR _pos$[ebp]
  000af	52		 push	 edx
  000b0	8b 45 18	 mov	 eax, DWORD PTR _locality$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d 14	 mov	 ecx, DWORD PTR _channel$[ebp]
  000b7	51		 push	 ecx
  000b8	8b 55 10	 mov	 edx, DWORD PTR _sub_type$[ebp]
  000bb	52		 push	 edx
  000bc	8b 45 0c	 mov	 eax, DWORD PTR _side$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _parent$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ?create_client_server_sound_effect_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMHHHPAH@Z ; create_client_server_sound_effect_entity
  000c9	89 45 fc	 mov	 DWORD PTR _en$[ebp], eax

; 216  : 	(
; 217  : 		parent,
; 218  : 		side,
; 219  : 		sub_type,
; 220  : 		channel,
; 221  : 		locality,
; 222  : 		pos,
; 223  : 		1.0,
; 224  : 		1.0,
; 225  : 		TRUE,
; 226  : 		FALSE,
; 227  : 		count,
; 228  : 		sample_list
; 229  : 	);
; 230  : 
; 231  : 	return en;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]

; 232  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 20 00	 ret	 32			; 00000020H
?create_client_server_speech_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@HPAH@Z ENDP ; create_client_server_speech_entity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?get_speech_originator_sound_channel@@YG?AW4SOUND_CHANNEL_TYPES@@W4speech_originator_types@@@Z
_TEXT	SEGMENT
_originator$ = 8					; size = 4
?get_speech_originator_sound_channel@@YG?AW4SOUND_CHANNEL_TYPES@@W4speech_originator_types@@@Z PROC ; get_speech_originator_sound_channel, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 195  : 	return speech_originator_sound_channel_table [originator];

  00009	8b 45 08	 mov	 eax, DWORD PTR _originator$[ebp]
  0000c	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?speech_originator_sound_channel_table@@3QBW4SOUND_CHANNEL_TYPES@@B[eax*4]

; 196  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?get_speech_originator_sound_channel@@YG?AW4SOUND_CHANNEL_TYPES@@W4speech_originator_types@@@Z ENDP ; get_speech_originator_sound_channel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv75 = -76						; size = 4
_speed$ = -8						; size = 4
_pos$ = -4						; size = 4
_en$ = 8						; size = 4
?get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z PROC ; get_speech_atc_wind_speed, COMDAT

; 1749 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1750 : 	vec3d
; 1751 : 		*pos;
; 1752 : 
; 1753 : 	float
; 1754 : 		speed;
; 1755 : 
; 1756 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_speech
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_speech:

; 1757 : 
; 1758 : 	pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN13@get_speech
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d b4	 mov	 DWORD PTR tv75[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN14@get_speech
$LN13@get_speech:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z@4JA
  0003d	83 c2 09	 add	 edx, 9
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN14@get_speech:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN15@get_speech
  00061	c7 45 b0 08 00
	00 00		 mov	 DWORD PTR tv83[ebp], 8
  00068	eb 21		 jmp	 SHORT $LN16@get_speech
$LN15@get_speech:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z@4JA
  00070	83 c2 09	 add	 edx, 9
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN16@get_speech:
  0008b	6a 08		 push	 8
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00090	51		 push	 ecx
  00091	6b 55 b4 60	 imul	 edx, DWORD PTR tv75[ebp], 96
  00095	8b 45 b0	 mov	 eax, DWORD PTR tv83[ebp]
  00098	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0009f	ff d1		 call	 ecx
  000a1	89 45 fc	 mov	 DWORD PTR _pos$[ebp], eax

; 1759 : 
; 1760 : 	speed = get_session_wind_velocity_at_point (pos, NULL);

  000a4	6a 00		 push	 0
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _pos$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?get_session_wind_velocity_at_point@@YGMPAUVEC3D@@0@Z ; get_session_wind_velocity_at_point
  000af	d9 5d f8	 fstp	 DWORD PTR _speed$[ebp]

; 1761 : 
; 1762 : 	speed = knots (speed);

  000b2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _speed$[ebp]
  000b7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  000bf	f3 0f 11 45 f8	 movss	 DWORD PTR _speed$[ebp], xmm0

; 1763 : 
; 1764 : 	if (speed < 6.0)

  000c4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  000c9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4018000000000000
  000d1	66 0f 2f c8	 comisd	 xmm1, xmm0
  000d5	76 09		 jbe	 SHORT $LN3@get_speech

; 1765 : 	{
; 1766 : 		return SPEECH_ATC_AT_5_KNOTS;

  000d7	b8 06 00 00 00	 mov	 eax, 6
  000dc	eb 75		 jmp	 SHORT $LN1@get_speech
  000de	eb 6e		 jmp	 SHORT $LN11@get_speech
$LN3@get_speech:

; 1767 : 	}
; 1768 : 	else if (speed < 11.0)

  000e0	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  000e5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4026000000000000
  000ed	66 0f 2f c8	 comisd	 xmm1, xmm0
  000f1	76 09		 jbe	 SHORT $LN5@get_speech

; 1769 : 	{
; 1770 : 		return SPEECH_ATC_AT_10_KNOTS;

  000f3	b8 07 00 00 00	 mov	 eax, 7
  000f8	eb 59		 jmp	 SHORT $LN1@get_speech
  000fa	eb 52		 jmp	 SHORT $LN11@get_speech
$LN5@get_speech:

; 1771 : 	}
; 1772 : 	else if (speed < 16.0)

  000fc	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  00101	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4030000000000000
  00109	66 0f 2f c8	 comisd	 xmm1, xmm0
  0010d	76 09		 jbe	 SHORT $LN7@get_speech

; 1773 : 	{
; 1774 : 		return SPEECH_ATC_AT_15_KNOTS;

  0010f	b8 08 00 00 00	 mov	 eax, 8
  00114	eb 3d		 jmp	 SHORT $LN1@get_speech
  00116	eb 36		 jmp	 SHORT $LN11@get_speech
$LN7@get_speech:

; 1775 : 	}
; 1776 : 	else if (speed < 21.0)

  00118	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  0011d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4035000000000000
  00125	66 0f 2f c8	 comisd	 xmm1, xmm0
  00129	76 09		 jbe	 SHORT $LN9@get_speech

; 1777 : 	{
; 1778 : 		return SPEECH_ATC_AT_20_KNOTS;

  0012b	b8 09 00 00 00	 mov	 eax, 9
  00130	eb 21		 jmp	 SHORT $LN1@get_speech
  00132	eb 1a		 jmp	 SHORT $LN11@get_speech
$LN9@get_speech:

; 1779 : 	}
; 1780 : 	else if (speed < 26.0)

  00134	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  00139	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@403a000000000000
  00141	66 0f 2f c8	 comisd	 xmm1, xmm0
  00145	76 07		 jbe	 SHORT $LN11@get_speech

; 1781 : 	{
; 1782 : 		return SPEECH_ATC_AT_25_KNOTS;

  00147	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0014c	eb 05		 jmp	 SHORT $LN1@get_speech
$LN11@get_speech:

; 1783 : 	}
; 1784 : 
; 1785 : 	return SPEECH_ATC_AT_30_KNOTS;

  0014e	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
$LN1@get_speech:

; 1786 : }

  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 04 00	 ret	 4
?get_speech_atc_wind_speed@@YG?AW4speech_atc_message_types@@PAUENTITY@@@Z ENDP ; get_speech_atc_wind_speed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z
_TEXT	SEGMENT
tv140 = -96						; size = 4
tv88 = -96						; size = 4
tv132 = -92						; size = 4
tv80 = -92						; size = 4
_range$ = -24						; size = 4
_dz$ = -20						; size = 4
_dx$ = -16						; size = 4
_target_pos$ = -12					; size = 4
_source_pos$ = -8					; size = 4
_type$ = -4						; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z PROC ; get_speech_distance_type, COMDAT

; 1664 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1665 : 	speech_distance_types
; 1666 : 		type;
; 1667 : 
; 1668 : 	vec3d
; 1669 : 		*source_pos,
; 1670 : 		*target_pos;
; 1671 : 
; 1672 : 	float
; 1673 : 		dx,
; 1674 : 		dz,
; 1675 : 		range;
; 1676 : 
; 1677 : 	ASSERT (source);

  00009	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_speech
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA
  00014	83 c0 0d	 add	 eax, 13			; 0000000dH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_speech:

; 1678 : 	ASSERT (target);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_speech
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA
  00032	83 c0 0e	 add	 eax, 14			; 0000000eH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_speech:

; 1679 : 
; 1680 : 	source_pos = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00045	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00049	74 0a		 je	 SHORT $LN29@get_speech
  0004b	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a4	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN30@get_speech
$LN29@get_speech:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA
  0005b	83 c2 10	 add	 edx, 16			; 00000010H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN30@get_speech:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN31@get_speech
  0007f	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv88[ebp], 8
  00086	eb 21		 jmp	 SHORT $LN32@get_speech
$LN31@get_speech:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA
  0008e	83 c2 10	 add	 edx, 16			; 00000010H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN32@get_speech:
  000a9	6a 08		 push	 8
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000ae	51		 push	 ecx
  000af	6b 55 a4 60	 imul	 edx, DWORD PTR tv80[ebp], 96
  000b3	8b 45 a0	 mov	 eax, DWORD PTR tv88[ebp]
  000b6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000bd	ff d1		 call	 ecx
  000bf	89 45 f8	 mov	 DWORD PTR _source_pos$[ebp], eax

; 1681 : 	target_pos = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  000c2	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  000c6	74 0a		 je	 SHORT $LN33@get_speech
  000c8	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	89 4d a4	 mov	 DWORD PTR tv132[ebp], ecx
  000d0	eb 21		 jmp	 SHORT $LN34@get_speech
$LN33@get_speech:
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA
  000d8	83 c2 11	 add	 edx, 17			; 00000011H
  000db	52		 push	 edx
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ec	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN34@get_speech:
  000f3	b9 01 00 00 00	 mov	 ecx, 1
  000f8	85 c9		 test	 ecx, ecx
  000fa	74 09		 je	 SHORT $LN35@get_speech
  000fc	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv140[ebp], 8
  00103	eb 21		 jmp	 SHORT $LN36@get_speech
$LN35@get_speech:
  00105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z@4JA
  0010b	83 c2 11	 add	 edx, 17			; 00000011H
  0010e	52		 push	 edx
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0011f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN36@get_speech:
  00126	6a 08		 push	 8
  00128	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0012b	51		 push	 ecx
  0012c	6b 55 a4 60	 imul	 edx, DWORD PTR tv132[ebp], 96
  00130	8b 45 a0	 mov	 eax, DWORD PTR tv140[ebp]
  00133	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0013a	ff d1		 call	 ecx
  0013c	89 45 f4	 mov	 DWORD PTR _target_pos$[ebp], eax

; 1682 : 
; 1683 : 	dx = target_pos->x - source_pos->x;

  0013f	8b 45 f4	 mov	 eax, DWORD PTR _target_pos$[ebp]
  00142	8b 4d f8	 mov	 ecx, DWORD PTR _source_pos$[ebp]
  00145	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00149	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0014d	f3 0f 11 45 f0	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1684 : 	dz = target_pos->z - source_pos->z;

  00152	8b 45 f4	 mov	 eax, DWORD PTR _target_pos$[ebp]
  00155	8b 4d f8	 mov	 ecx, DWORD PTR _source_pos$[ebp]
  00158	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0015d	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00162	f3 0f 11 45 ec	 movss	 DWORD PTR _dz$[ebp], xmm0

; 1685 : 
; 1686 : 	range = sqrt ((dx * dx) + (dz * dz));

  00167	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0016c	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  00171	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _dz$[ebp]
  00176	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  0017b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0017f	51		 push	 ecx
  00180	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00185	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0018a	d9 5d e8	 fstp	 DWORD PTR _range$[ebp]

; 1687 : 
; 1688 : 	if (range < 500.0)

  0018d	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00192	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407f400000000000
  0019a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0019e	76 0c		 jbe	 SHORT $LN4@get_speech

; 1689 : 	{
; 1690 : 		type = SPEECH_DISTANCE_HALF_KILOMETRE;

  001a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0
  001a7	e9 4d 01 00 00	 jmp	 $LN27@get_speech
$LN4@get_speech:

; 1691 : 	}
; 1692 : 	else if (range < 1500.0)

  001ac	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  001b1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4097700000000000
  001b9	66 0f 2f c8	 comisd	 xmm1, xmm0
  001bd	76 0c		 jbe	 SHORT $LN6@get_speech

; 1693 : 	{
; 1694 : 		type = SPEECH_DISTANCE_ONE_KILOMETRE;

  001bf	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _type$[ebp], 1
  001c6	e9 2e 01 00 00	 jmp	 $LN27@get_speech
$LN6@get_speech:

; 1695 : 	}
; 1696 : 	else if (range < 2500.0)

  001cb	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  001d0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40a3880000000000
  001d8	66 0f 2f c8	 comisd	 xmm1, xmm0
  001dc	76 0c		 jbe	 SHORT $LN8@get_speech

; 1697 : 	{
; 1698 : 		type = SPEECH_DISTANCE_TWO_KILOMETRE;

  001de	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _type$[ebp], 2
  001e5	e9 0f 01 00 00	 jmp	 $LN27@get_speech
$LN8@get_speech:

; 1699 : 	}
; 1700 : 	else if (range < 3500.0)

  001ea	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  001ef	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40ab580000000000
  001f7	66 0f 2f c8	 comisd	 xmm1, xmm0
  001fb	76 0c		 jbe	 SHORT $LN10@get_speech

; 1701 : 	{
; 1702 : 		type = SPEECH_DISTANCE_THREE_KILOMETRE;

  001fd	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _type$[ebp], 3
  00204	e9 f0 00 00 00	 jmp	 $LN27@get_speech
$LN10@get_speech:

; 1703 : 	}
; 1704 : 	else if (range < 4500.0)

  00209	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0020e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40b1940000000000
  00216	66 0f 2f c8	 comisd	 xmm1, xmm0
  0021a	76 0c		 jbe	 SHORT $LN12@get_speech

; 1705 : 	{
; 1706 : 		type = SPEECH_DISTANCE_FOUR_KILOMETRE;

  0021c	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _type$[ebp], 4
  00223	e9 d1 00 00 00	 jmp	 $LN27@get_speech
$LN12@get_speech:

; 1707 : 	}
; 1708 : 	else if (range < 5500.0)

  00228	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0022d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40b57c0000000000
  00235	66 0f 2f c8	 comisd	 xmm1, xmm0
  00239	76 0c		 jbe	 SHORT $LN14@get_speech

; 1709 : 	{
; 1710 : 		type = SPEECH_DISTANCE_FIVE_KILOMETRE;

  0023b	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _type$[ebp], 5
  00242	e9 b2 00 00 00	 jmp	 $LN27@get_speech
$LN14@get_speech:

; 1711 : 	}
; 1712 : 	else if (range < 6500.0)

  00247	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0024c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40b9640000000000
  00254	66 0f 2f c8	 comisd	 xmm1, xmm0
  00258	76 0c		 jbe	 SHORT $LN16@get_speech

; 1713 : 	{
; 1714 : 		type = SPEECH_DISTANCE_SIX_KILOMETRE;

  0025a	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _type$[ebp], 6
  00261	e9 93 00 00 00	 jmp	 $LN27@get_speech
$LN16@get_speech:

; 1715 : 	}
; 1716 : 	else if (range < 7500.0)

  00266	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0026b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40bd4c0000000000
  00273	66 0f 2f c8	 comisd	 xmm1, xmm0
  00277	76 09		 jbe	 SHORT $LN18@get_speech

; 1717 : 	{
; 1718 : 		type = SPEECH_DISTANCE_SEVEN_KILOMETRE;

  00279	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _type$[ebp], 7
  00280	eb 77		 jmp	 SHORT $LN27@get_speech
$LN18@get_speech:

; 1719 : 	}
; 1720 : 	else if (range < 8500.0)

  00282	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00287	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40c09a0000000000
  0028f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00293	76 09		 jbe	 SHORT $LN20@get_speech

; 1721 : 	{
; 1722 : 		type = SPEECH_DISTANCE_EIGHT_KILOMETRE;

  00295	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _type$[ebp], 8
  0029c	eb 5b		 jmp	 SHORT $LN27@get_speech
$LN20@get_speech:

; 1723 : 	}
; 1724 : 	else if (range < 9500.0)

  0029e	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  002a3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40c28e0000000000
  002ab	66 0f 2f c8	 comisd	 xmm1, xmm0
  002af	76 09		 jbe	 SHORT $LN22@get_speech

; 1725 : 	{
; 1726 : 		type = SPEECH_DISTANCE_NINE_KILOMETRE;

  002b1	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _type$[ebp], 9
  002b8	eb 3f		 jmp	 SHORT $LN27@get_speech
$LN22@get_speech:

; 1727 : 	}
; 1728 : 	else if (range < 10500.0)

  002ba	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  002bf	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40c4820000000000
  002c7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002cb	76 09		 jbe	 SHORT $LN24@get_speech

; 1729 : 	{
; 1730 : 		type = SPEECH_DISTANCE_TEN_KILOMETRE;

  002cd	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _type$[ebp], 10 ; 0000000aH
  002d4	eb 23		 jmp	 SHORT $LN27@get_speech
$LN24@get_speech:

; 1731 : 	}
; 1732 : 	else if (range < 11500.0)

  002d6	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  002db	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40c6760000000000
  002e3	66 0f 2f c8	 comisd	 xmm1, xmm0
  002e7	76 09		 jbe	 SHORT $LN26@get_speech

; 1733 : 	{
; 1734 : 		type = SPEECH_DISTANCE_ELEVEN_KILOMETRE;

  002e9	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _type$[ebp], 11 ; 0000000bH

; 1735 : 	}
; 1736 : 	else

  002f0	eb 07		 jmp	 SHORT $LN27@get_speech
$LN26@get_speech:

; 1737 : 	{
; 1738 : 		type = SPEECH_DISTANCE_TWELVE_KILOMETRE;

  002f2	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _type$[ebp], 12 ; 0000000cH
$LN27@get_speech:

; 1739 : 	}
; 1740 : 
; 1741 : 	return (type);

  002f9	8b 45 fc	 mov	 eax, DWORD PTR _type$[ebp]

; 1742 : }

  002fc	5f		 pop	 edi
  002fd	5e		 pop	 esi
  002fe	5b		 pop	 ebx
  002ff	8b e5		 mov	 esp, ebp
  00301	5d		 pop	 ebp
  00302	c2 08 00	 ret	 8
?get_speech_distance_type@@YG?AW4speech_distance_types@@PAUENTITY@@0@Z ENDP ; get_speech_distance_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z
_TEXT	SEGMENT
_relative_bearing$ = -8					; size = 4
_type$ = -4						; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z PROC ; get_speech_heading_type, COMDAT

; 1586 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1587 : 	speech_heading_types
; 1588 : 		type;
; 1589 : 
; 1590 : 	float
; 1591 : 		relative_bearing;
; 1592 : 
; 1593 : 	ASSERT (source);

  00009	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_speech
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_speech:

; 1594 : 	ASSERT (target);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_speech
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z@4JA
  00032	83 c0 08	 add	 eax, 8
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_speech:

; 1595 : 
; 1596 : 	relative_bearing = get_local_entity_target_relative_bearing (source, target);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ?get_local_entity_target_relative_bearing@@YGMPAUENTITY@@0@Z ; get_local_entity_target_relative_bearing
  00052	d9 5d f8	 fstp	 DWORD PTR _relative_bearing$[ebp]

; 1597 : 
; 1598 : 	if (relative_bearing < 0.0)

  00055	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  0005a	0f 57 c9	 xorps	 xmm1, xmm1
  0005d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00061	76 16		 jbe	 SHORT $LN4@get_speech

; 1599 : 	{
; 1600 : 		relative_bearing += rad (360.0);

  00063	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  00068	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  00070	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00074	f3 0f 11 45 f8	 movss	 DWORD PTR _relative_bearing$[ebp], xmm0
$LN4@get_speech:

; 1601 : 	}
; 1602 : 
; 1603 : 	if (relative_bearing < rad (15.0))

  00079	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  0007e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fd0c15236000000
  00086	66 0f 2f c8	 comisd	 xmm1, xmm0
  0008a	76 0c		 jbe	 SHORT $LN5@get_speech

; 1604 : 	{
; 1605 : 		type = SPEECH_HEADING_TWELVE_O_CLOCK;

  0008c	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _type$[ebp], 11 ; 0000000bH
  00093	e9 4d 01 00 00	 jmp	 $LN28@get_speech
$LN5@get_speech:

; 1606 : 	}
; 1607 : 	else if (relative_bearing < rad (45.0))

  00098	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  0009d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe921fb51000000
  000a5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000a9	76 0c		 jbe	 SHORT $LN7@get_speech

; 1608 : 	{
; 1609 : 		type = SPEECH_HEADING_ONE_O_CLOCK;

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _type$[ebp], 0
  000b2	e9 2e 01 00 00	 jmp	 $LN28@get_speech
$LN7@get_speech:

; 1610 : 	}
; 1611 : 	else if (relative_bearing < rad (75.0))

  000b7	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  000bc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff4f1a6c3800000
  000c4	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c8	76 0c		 jbe	 SHORT $LN9@get_speech

; 1612 : 	{
; 1613 : 		type = SPEECH_HEADING_TWO_O_CLOCK;

  000ca	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _type$[ebp], 1
  000d1	e9 0f 01 00 00	 jmp	 $LN28@get_speech
$LN9@get_speech:

; 1614 : 	}
; 1615 : 	else if (relative_bearing < rad (105.0))

  000d6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  000db	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ffd524fde800000
  000e3	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e7	76 0c		 jbe	 SHORT $LN11@get_speech

; 1616 : 	{
; 1617 : 		type = SPEECH_HEADING_THREE_O_CLOCK;

  000e9	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _type$[ebp], 2
  000f0	e9 f0 00 00 00	 jmp	 $LN28@get_speech
$LN11@get_speech:

; 1618 : 	}
; 1619 : 	else if (relative_bearing < rad (135.0))

  000f5	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  000fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4002d97c7cc00000
  00102	66 0f 2f c8	 comisd	 xmm1, xmm0
  00106	76 0c		 jbe	 SHORT $LN13@get_speech

; 1620 : 	{
; 1621 : 		type = SPEECH_HEADING_FOUR_O_CLOCK;

  00108	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _type$[ebp], 3
  0010f	e9 d1 00 00 00	 jmp	 $LN28@get_speech
$LN13@get_speech:

; 1622 : 	}
; 1623 : 	else if (relative_bearing < rad (165.0))

  00114	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  00119	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@400709d10a400000
  00121	66 0f 2f c8	 comisd	 xmm1, xmm0
  00125	76 0c		 jbe	 SHORT $LN15@get_speech

; 1624 : 	{
; 1625 : 		type = SPEECH_HEADING_FIVE_O_CLOCK;

  00127	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _type$[ebp], 4
  0012e	e9 b2 00 00 00	 jmp	 $LN28@get_speech
$LN15@get_speech:

; 1626 : 	}
; 1627 : 	else if (relative_bearing < rad (195.0))

  00133	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  00138	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@400b3a2597c00000
  00140	66 0f 2f c8	 comisd	 xmm1, xmm0
  00144	76 0c		 jbe	 SHORT $LN17@get_speech

; 1628 : 	{
; 1629 : 		type = SPEECH_HEADING_SIX_O_CLOCK;

  00146	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _type$[ebp], 5
  0014d	e9 93 00 00 00	 jmp	 $LN28@get_speech
$LN17@get_speech:

; 1630 : 	}
; 1631 : 	else if (relative_bearing < rad (225.0))

  00152	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  00157	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@400f6a7a25400000
  0015f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00163	76 09		 jbe	 SHORT $LN19@get_speech

; 1632 : 	{
; 1633 : 		type = SPEECH_HEADING_SEVEN_O_CLOCK;

  00165	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _type$[ebp], 6
  0016c	eb 77		 jmp	 SHORT $LN28@get_speech
$LN19@get_speech:

; 1634 : 	}
; 1635 : 	else if (relative_bearing < rad (255.0))

  0016e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  00173	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4011cd6759600000
  0017b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0017f	76 09		 jbe	 SHORT $LN21@get_speech

; 1636 : 	{
; 1637 : 		type = SPEECH_HEADING_EIGHT_O_CLOCK;

  00181	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _type$[ebp], 7
  00188	eb 5b		 jmp	 SHORT $LN28@get_speech
$LN21@get_speech:

; 1638 : 	}
; 1639 : 	else if (relative_bearing < rad (285.0))

  0018a	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  0018f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4013e591a0200000
  00197	66 0f 2f c8	 comisd	 xmm1, xmm0
  0019b	76 09		 jbe	 SHORT $LN23@get_speech

; 1640 : 	{
; 1641 : 		type = SPEECH_HEADING_NINE_O_CLOCK;

  0019d	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _type$[ebp], 8
  001a4	eb 3f		 jmp	 SHORT $LN28@get_speech
$LN23@get_speech:

; 1642 : 	}
; 1643 : 	else if (relative_bearing < rad (315.0))

  001a6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  001ab	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4015fdbbe6e00000
  001b3	66 0f 2f c8	 comisd	 xmm1, xmm0
  001b7	76 09		 jbe	 SHORT $LN25@get_speech

; 1644 : 	{
; 1645 : 		type = SPEECH_HEADING_TEN_O_CLOCK;

  001b9	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _type$[ebp], 9
  001c0	eb 23		 jmp	 SHORT $LN28@get_speech
$LN25@get_speech:

; 1646 : 	}
; 1647 : 	else if (relative_bearing < rad (345.0))

  001c2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _relative_bearing$[ebp]
  001c7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@401815e62da00000
  001cf	66 0f 2f c8	 comisd	 xmm1, xmm0
  001d3	76 09		 jbe	 SHORT $LN27@get_speech

; 1648 : 	{
; 1649 : 		type = SPEECH_HEADING_ELEVEN_O_CLOCK;

  001d5	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _type$[ebp], 10 ; 0000000aH

; 1650 : 	}
; 1651 : 	else

  001dc	eb 07		 jmp	 SHORT $LN28@get_speech
$LN27@get_speech:

; 1652 : 	{
; 1653 : 		type = SPEECH_HEADING_TWELVE_O_CLOCK;

  001de	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _type$[ebp], 11 ; 0000000bH
$LN28@get_speech:

; 1654 : 	}
; 1655 : 
; 1656 : 	return (type);

  001e5	8b 45 fc	 mov	 eax, DWORD PTR _type$[ebp]

; 1657 : }

  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	5b		 pop	 ebx
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c2 08 00	 ret	 8
?get_speech_heading_type@@YG?AW4speech_heading_types@@PAUENTITY@@0@Z ENDP ; get_speech_heading_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z
_TEXT	SEGMENT
tv153 = -84						; size = 4
tv90 = -84						; size = 4
tv145 = -80						; size = 4
tv82 = -80						; size = 4
_sz$ = -12						; size = 4
_sx$ = -8						; size = 4
_sec$ = -4						; size = 4
_pos$ = 8						; size = 4
?get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z PROC	; get_speech_sector_coordinates, COMDAT

; 1536 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1537 : 	entity
; 1538 : 		*sec;
; 1539 : 
; 1540 : 	int
; 1541 : 		sx,
; 1542 : 		sz;
; 1543 : 
; 1544 : 	ASSERT (pos);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pos$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_speech
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03PCBNCGFH@pos@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_speech:

; 1545 : 
; 1546 : 	sec = get_local_sector_entity (pos);

  00027	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  00030	89 45 fc	 mov	 DWORD PTR _sec$[ebp], eax

; 1547 : 
; 1548 : 	ASSERT (sec);

  00033	83 7d fc 00	 cmp	 DWORD PTR _sec$[ebp], 0
  00037	75 18		 jne	 SHORT $LN3@get_speech
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA
  0003e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_speech:

; 1549 : 
; 1550 : 	//
; 1551 : 	// get z sector coords
; 1552 : 	//
; 1553 : 
; 1554 : 	sz = get_local_entity_int_value (sec, INT_TYPE_Z_SECTOR);

  00051	83 7d fc 00	 cmp	 DWORD PTR _sec$[ebp], 0
  00055	74 0a		 je	 SHORT $LN5@get_speech
  00057	8b 45 fc	 mov	 eax, DWORD PTR _sec$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	89 4d b0	 mov	 DWORD PTR tv82[ebp], ecx
  0005f	eb 21		 jmp	 SHORT $LN6@get_speech
$LN5@get_speech:
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA
  00067	83 c2 12	 add	 edx, 18			; 00000012H
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@get_speech:
  00082	b9 01 00 00 00	 mov	 ecx, 1
  00087	85 c9		 test	 ecx, ecx
  00089	74 09		 je	 SHORT $LN7@get_speech
  0008b	c7 45 ac 16 01
	00 00		 mov	 DWORD PTR tv90[ebp], 278 ; 00000116H
  00092	eb 21		 jmp	 SHORT $LN8@get_speech
$LN7@get_speech:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA
  0009a	83 c2 12	 add	 edx, 18			; 00000012H
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@get_speech:
  000b5	68 16 01 00 00	 push	 278			; 00000116H
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _sec$[ebp]
  000bd	51		 push	 ecx
  000be	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv82[ebp], 1116
  000c5	8b 45 ac	 mov	 eax, DWORD PTR tv90[ebp]
  000c8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000cf	ff d1		 call	 ecx
  000d1	89 45 f4	 mov	 DWORD PTR _sz$[ebp], eax

; 1555 : 
; 1556 : 	speech_sector_coordinates [5] = sz % 10;

  000d4	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  000d7	99		 cdq
  000d8	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000dd	f7 f9		 idiv	 ecx
  000df	b8 04 00 00 00	 mov	 eax, 4
  000e4	6b c8 05	 imul	 ecx, eax, 5
  000e7	89 91 00 00 00
	00		 mov	 DWORD PTR ?speech_sector_coordinates@@3PAHA[ecx], edx

; 1557 : 	sz /= 10;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  000f0	99		 cdq
  000f1	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000f6	f7 f9		 idiv	 ecx
  000f8	89 45 f4	 mov	 DWORD PTR _sz$[ebp], eax

; 1558 : 
; 1559 : 	speech_sector_coordinates [4] = sz % 10;

  000fb	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  000fe	99		 cdq
  000ff	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00104	f7 f9		 idiv	 ecx
  00106	b8 04 00 00 00	 mov	 eax, 4
  0010b	c1 e0 02	 shl	 eax, 2
  0010e	89 90 00 00 00
	00		 mov	 DWORD PTR ?speech_sector_coordinates@@3PAHA[eax], edx

; 1560 : 	sz /= 10;

  00114	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00117	99		 cdq
  00118	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0011d	f7 f9		 idiv	 ecx
  0011f	89 45 f4	 mov	 DWORD PTR _sz$[ebp], eax

; 1561 : 
; 1562 : 	speech_sector_coordinates [3] = sz % 10;

  00122	8b 45 f4	 mov	 eax, DWORD PTR _sz$[ebp]
  00125	99		 cdq
  00126	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0012b	f7 f9		 idiv	 ecx
  0012d	b8 04 00 00 00	 mov	 eax, 4
  00132	6b c8 03	 imul	 ecx, eax, 3
  00135	89 91 00 00 00
	00		 mov	 DWORD PTR ?speech_sector_coordinates@@3PAHA[ecx], edx

; 1563 : 
; 1564 : 	//
; 1565 : 	// get x sector coords
; 1566 : 	//
; 1567 : 
; 1568 : 	sx = get_local_entity_int_value (sec, INT_TYPE_X_SECTOR);

  0013b	83 7d fc 00	 cmp	 DWORD PTR _sec$[ebp], 0
  0013f	74 0a		 je	 SHORT $LN9@get_speech
  00141	8b 45 fc	 mov	 eax, DWORD PTR _sec$[ebp]
  00144	8b 08		 mov	 ecx, DWORD PTR [eax]
  00146	89 4d b0	 mov	 DWORD PTR tv145[ebp], ecx
  00149	eb 21		 jmp	 SHORT $LN10@get_speech
$LN9@get_speech:
  0014b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA
  00151	83 c2 20	 add	 edx, 32			; 00000020H
  00154	52		 push	 edx
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00165	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN10@get_speech:
  0016c	b9 01 00 00 00	 mov	 ecx, 1
  00171	85 c9		 test	 ecx, ecx
  00173	74 09		 je	 SHORT $LN11@get_speech
  00175	c7 45 ac 15 01
	00 00		 mov	 DWORD PTR tv153[ebp], 277 ; 00000115H
  0017c	eb 21		 jmp	 SHORT $LN12@get_speech
$LN11@get_speech:
  0017e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z@4JA
  00184	83 c2 20	 add	 edx, 32			; 00000020H
  00187	52		 push	 edx
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00198	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN12@get_speech:
  0019f	68 15 01 00 00	 push	 277			; 00000115H
  001a4	8b 4d fc	 mov	 ecx, DWORD PTR _sec$[ebp]
  001a7	51		 push	 ecx
  001a8	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv145[ebp], 1116
  001af	8b 45 ac	 mov	 eax, DWORD PTR tv153[ebp]
  001b2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001b9	ff d1		 call	 ecx
  001bb	89 45 f8	 mov	 DWORD PTR _sx$[ebp], eax

; 1569 : 
; 1570 : 	speech_sector_coordinates [2] = sx % 10;

  001be	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  001c1	99		 cdq
  001c2	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  001c7	f7 f9		 idiv	 ecx
  001c9	b8 04 00 00 00	 mov	 eax, 4
  001ce	d1 e0		 shl	 eax, 1
  001d0	89 90 00 00 00
	00		 mov	 DWORD PTR ?speech_sector_coordinates@@3PAHA[eax], edx

; 1571 : 	sx /= 10;

  001d6	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  001d9	99		 cdq
  001da	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  001df	f7 f9		 idiv	 ecx
  001e1	89 45 f8	 mov	 DWORD PTR _sx$[ebp], eax

; 1572 : 
; 1573 : 	speech_sector_coordinates [1] = sx % 10;

  001e4	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  001e7	99		 cdq
  001e8	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  001ed	f7 f9		 idiv	 ecx
  001ef	b8 04 00 00 00	 mov	 eax, 4
  001f4	c1 e0 00	 shl	 eax, 0
  001f7	89 90 00 00 00
	00		 mov	 DWORD PTR ?speech_sector_coordinates@@3PAHA[eax], edx

; 1574 : 	sx /= 10;

  001fd	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  00200	99		 cdq
  00201	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00206	f7 f9		 idiv	 ecx
  00208	89 45 f8	 mov	 DWORD PTR _sx$[ebp], eax

; 1575 : 
; 1576 : 	speech_sector_coordinates [0] = sx % 10;

  0020b	8b 45 f8	 mov	 eax, DWORD PTR _sx$[ebp]
  0020e	99		 cdq
  0020f	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00214	f7 f9		 idiv	 ecx
  00216	b8 04 00 00 00	 mov	 eax, 4
  0021b	6b c8 00	 imul	 ecx, eax, 0
  0021e	89 91 00 00 00
	00		 mov	 DWORD PTR ?speech_sector_coordinates@@3PAHA[ecx], edx

; 1577 : 
; 1578 : 	return speech_sector_coordinates;

  00224	b8 00 00 00 00	 mov	 eax, OFFSET ?speech_sector_coordinates@@3PAHA ; speech_sector_coordinates

; 1579 : }

  00229	5f		 pop	 edi
  0022a	5e		 pop	 esi
  0022b	5b		 pop	 ebx
  0022c	8b e5		 mov	 esp, ebp
  0022e	5d		 pop	 ebp
  0022f	c2 04 00	 ret	 4
?get_speech_sector_coordinates@@YGPAHPAUVEC3D@@@Z ENDP	; get_speech_sector_coordinates
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z
_TEXT	SEGMENT
tv145 = -72						; size = 4
tv81 = -72						; size = 4
tv137 = -68						; size = 4
tv74 = -68						; size = 4
_en$ = 8						; size = 4
_priority$ = 12						; size = 4
_expire_time$ = 16					; size = 4
_category$ = 20						; size = 4
_category_silence_timer$ = 24				; size = 4
_play_intro$ = 28					; size = 4
_main_array_type$ = 32					; size = 4
_main_speech_index$ = 36				; size = 4
?play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z PROC ; play_client_server_wingman_message, COMDAT

; 1506 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1507 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_clien
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_clien:

; 1508 :   
; 1509 :   if (get_local_entity_int_value (en, INT_TYPE_ALIVE)) 

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN6@play_clien
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 1d		 jmp	 SHORT $LN7@play_clien
$LN6@play_clien:
  00037	68 e5 05 00 00	 push	 1509			; 000005e5H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN7@play_clien:
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN8@play_clien
  0005d	c7 45 b8 07 00
	00 00		 mov	 DWORD PTR tv81[ebp], 7
  00064	eb 1d		 jmp	 SHORT $LN9@play_clien
$LN8@play_clien:
  00066	68 e5 05 00 00	 push	 1509			; 000005e5H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN9@play_clien:
  00083	6a 07		 push	 7
  00085	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00088	52		 push	 edx
  00089	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv74[ebp], 1116
  00090	8b 4d b8	 mov	 ecx, DWORD PTR tv81[ebp]
  00093	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009a	ff d2		 call	 edx
  0009c	85 c0		 test	 eax, eax
  0009e	0f 84 c9 00 00
	00		 je	 $LN3@play_clien

; 1510 : 	{
; 1511 : 		return play_client_server_radio_message

  000a4	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000a8	74 0a		 je	 SHORT $LN10@play_clien
  000aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	89 4d bc	 mov	 DWORD PTR tv137[ebp], ecx
  000b2	eb 21		 jmp	 SHORT $LN11@play_clien
$LN10@play_clien:
  000b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  000ba	83 c2 08	 add	 edx, 8
  000bd	52		 push	 edx
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ce	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN11@play_clien:
  000d5	b9 01 00 00 00	 mov	 ecx, 1
  000da	85 c9		 test	 ecx, ecx
  000dc	74 09		 je	 SHORT $LN12@play_clien
  000de	c7 45 b8 bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  000e5	eb 21		 jmp	 SHORT $LN13@play_clien
$LN12@play_clien:
  000e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  000ed	83 c2 08	 add	 edx, 8
  000f0	52		 push	 edx
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00101	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN13@play_clien:
  00108	8b 4d 24	 mov	 ecx, DWORD PTR _main_speech_index$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 20	 mov	 edx, DWORD PTR _main_array_type$[ebp]
  0010f	52		 push	 edx
  00110	8b 45 1c	 mov	 eax, DWORD PTR _play_intro$[ebp]
  00113	50		 push	 eax
  00114	51		 push	 ecx
  00115	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _category_silence_timer$[ebp]
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	8b 4d 14	 mov	 ecx, DWORD PTR _category$[ebp]
  00122	51		 push	 ecx
  00123	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 ?get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z ; get_wingman_speech_originator
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _expire_time$[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	51		 push	 ecx
  00139	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _priority$[ebp]
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	68 bb 00 00 00	 push	 187			; 000000bbH
  00148	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0014b	50		 push	 eax
  0014c	69 4d bc 5c 04
	00 00		 imul	 ecx, DWORD PTR tv137[ebp], 1116
  00153	8b 55 b8	 mov	 edx, DWORD PTR tv145[ebp]
  00156	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  0015d	ff d0		 call	 eax
  0015f	50		 push	 eax
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ?play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z ; play_client_server_radio_message
  00169	eb 04		 jmp	 SHORT $LN4@play_clien

; 1512 : 					(
; 1513 : 						en,
; 1514 : 						(entity_sides) get_local_entity_int_value (en, INT_TYPE_SIDE),
; 1515 : 						priority,
; 1516 : 						expire_time,
; 1517 : 						get_wingman_speech_originator (en),
; 1518 : 						category,
; 1519 : 						category_silence_timer,
; 1520 : 						play_intro,
; 1521 : 						main_array_type,
; 1522 : 						main_speech_index
; 1523 : 					);
; 1524 : 	}
; 1525 : 	else

  0016b	eb 02		 jmp	 SHORT $LN4@play_clien
$LN3@play_clien:

; 1526 : 	{
; 1527 : 		return FALSE;

  0016d	33 c0		 xor	 eax, eax
$LN4@play_clien:

; 1528 : 	}
; 1529 : }

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 20 00	 ret	 32			; 00000020H
?play_client_server_wingman_message@@YGHPAUENTITY@@MMW4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z ENDP ; play_client_server_wingman_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z
_TEXT	SEGMENT
tv139 = -84						; size = 4
tv78 = -84						; size = 4
tv131 = -80						; size = 4
tv92 = -80						; size = 4
tv70 = -80						; size = 4
_member_number$ = -12					; size = 4
_group_index$ = -8					; size = 4
_group$ = -4						; size = 4
_en$ = 8						; size = 4
?get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z PROC ; get_wingman_speech_originator, COMDAT

; 1463 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1464 : 	entity
; 1465 : 		*group;
; 1466 : 		
; 1467 : 	int
; 1468 : 		group_index,
; 1469 : 		member_number;
; 1470 : 
; 1471 : 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN6@get_wingma
  0000f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d b0	 mov	 DWORD PTR tv70[ebp], ecx
  00017	eb 21		 jmp	 SHORT $LN7@get_wingma
$LN6@get_wingma:
  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA
  0001f	83 c2 08	 add	 edx, 8
  00022	52		 push	 edx
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00033	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN7@get_wingma:
  0003a	b9 01 00 00 00	 mov	 ecx, 1
  0003f	85 c9		 test	 ecx, ecx
  00041	74 09		 je	 SHORT $LN8@get_wingma
  00043	c7 45 ac 19 00
	00 00		 mov	 DWORD PTR tv78[ebp], 25	; 00000019H
  0004a	eb 21		 jmp	 SHORT $LN9@get_wingma
$LN8@get_wingma:
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA
  00052	83 c2 08	 add	 edx, 8
  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00066	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN9@get_wingma:
  0006d	6a 19		 push	 25			; 00000019H
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00072	51		 push	 ecx
  00073	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 180
  0007a	8b 45 ac	 mov	 eax, DWORD PTR tv78[ebp]
  0007d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00084	ff d1		 call	 ecx
  00086	89 45 fc	 mov	 DWORD PTR _group$[ebp], eax

; 1472 : 	
; 1473 : 	ASSERT (group);

  00089	83 7d fc 00	 cmp	 DWORD PTR _group$[ebp], 0
  0008d	75 18		 jne	 SHORT $LN2@get_wingma
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA
  00094	83 c0 0a	 add	 eax, 10			; 0000000aH
  00097	50		 push	 eax
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_05MGJOOGAJ@group@
  000a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_wingma:

; 1474 : 	
; 1475 : 	group_index = get_local_entity_safe_index (group);

  000a7	83 7d fc 00	 cmp	 DWORD PTR _group$[ebp], 0
  000ab	74 11		 je	 SHORT $LN10@get_wingma
  000ad	8b 45 fc	 mov	 eax, DWORD PTR _group$[ebp]
  000b0	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  000b6	c1 f8 04	 sar	 eax, 4
  000b9	89 45 b0	 mov	 DWORD PTR tv92[ebp], eax
  000bc	eb 07		 jmp	 SHORT $LN11@get_wingma
$LN10@get_wingma:
  000be	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR tv92[ebp], -1
$LN11@get_wingma:
  000c5	8b 4d b0	 mov	 ecx, DWORD PTR tv92[ebp]
  000c8	89 4d f8	 mov	 DWORD PTR _group_index$[ebp], ecx

; 1476 : 	
; 1477 : 	member_number = get_local_entity_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  000cb	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000cf	74 0a		 je	 SHORT $LN12@get_wingma
  000d1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d6	89 4d b0	 mov	 DWORD PTR tv131[ebp], ecx
  000d9	eb 21		 jmp	 SHORT $LN13@get_wingma
$LN12@get_wingma:
  000db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA
  000e1	83 c2 0e	 add	 edx, 14			; 0000000eH
  000e4	52		 push	 edx
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN13@get_wingma:
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	85 c9		 test	 ecx, ecx
  00103	74 09		 je	 SHORT $LN14@get_wingma
  00105	c7 45 ac 4b 00
	00 00		 mov	 DWORD PTR tv139[ebp], 75 ; 0000004bH
  0010c	eb 21		 jmp	 SHORT $LN15@get_wingma
$LN14@get_wingma:
  0010e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z@4JA
  00114	83 c2 0e	 add	 edx, 14			; 0000000eH
  00117	52		 push	 edx
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00128	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN15@get_wingma:
  0012f	6a 4b		 push	 75			; 0000004bH
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00134	51		 push	 ecx
  00135	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv131[ebp], 1116
  0013c	8b 45 ac	 mov	 eax, DWORD PTR tv139[ebp]
  0013f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00146	ff d1		 call	 ecx
  00148	89 45 f4	 mov	 DWORD PTR _member_number$[ebp], eax

; 1478 : 	
; 1479 : 	if ((group_index + member_number) & 0x01)

  0014b	8b 45 f8	 mov	 eax, DWORD PTR _group_index$[ebp]
  0014e	03 45 f4	 add	 eax, DWORD PTR _member_number$[ebp]
  00151	83 e0 01	 and	 eax, 1
  00154	74 09		 je	 SHORT $LN3@get_wingma

; 1480 : 	{
; 1481 : 		return SPEECH_ORIGINATOR_WINGMAN1;

  00156	b8 02 00 00 00	 mov	 eax, 2
  0015b	eb 07		 jmp	 SHORT $LN1@get_wingma

; 1482 : 	}
; 1483 : 	else

  0015d	eb 05		 jmp	 SHORT $LN1@get_wingma
$LN3@get_wingma:

; 1484 : 	{
; 1485 : 		return SPEECH_ORIGINATOR_WINGMAN2;

  0015f	b8 03 00 00 00	 mov	 eax, 3
$LN1@get_wingma:

; 1486 : 	}
; 1487 : }

  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
?get_wingman_speech_originator@@YG?AW4speech_originator_types@@PAUENTITY@@@Z ENDP ; get_wingman_speech_originator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_client_server_warning_message@@YGHPAUENTITY@@H@Z
_TEXT	SEGMENT
_result$ = -4						; size = 4
_en$ = 8						; size = 4
_speech_index$ = 12					; size = 4
?play_client_server_warning_message@@YGHPAUENTITY@@H@Z PROC ; play_client_server_warning_message, COMDAT

; 1418 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1419 : 	int
; 1420 : 		result;
; 1421 : 
; 1422 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_clien
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_warning_message@@YGHPAUENTITY@@H@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_clien:

; 1423 : 
; 1424 : 	if (get_comms_model () == COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	75 49		 jne	 SHORT $LN3@play_clien

; 1425 : 	{
; 1426 : 		result = play_client_server_personal_message

  00030	8b 45 0c	 mov	 eax, DWORD PTR _speech_index$[ebp]
  00033	50		 push	 eax
  00034	6a 08		 push	 8
  00036	51		 push	 ecx
  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	6a 12		 push	 18			; 00000012H
  00046	6a 00		 push	 0
  00048	6a 28		 push	 40			; 00000028H
  0004a	51		 push	 ecx
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	51		 push	 ecx
  00059	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z ; play_client_server_personal_message
  0006f	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 1427 : 						(
; 1428 : 							en,
; 1429 : 							1.0,
; 1430 : 							5.0,
; 1431 : 							ENTITY_SUB_TYPE_EFFECT_SOUND_WARNING_MESSAGE,
; 1432 : 							SPEECH_ORIGINATOR_SYSTEM,
; 1433 : 							SPEECH_CATEGORY_WARNING_SYSTEM, -1.0,
; 1434 : 							SPEECH_ARRAY_SYSTEM_MESSAGES, speech_index
; 1435 : 						);
; 1436 : 
; 1437 : 		return result;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]
  00075	eb 16		 jmp	 SHORT $LN4@play_clien

; 1438 : 	}
; 1439 : 	else

  00077	eb 14		 jmp	 SHORT $LN4@play_clien
$LN3@play_clien:

; 1440 : 	{
; 1441 : 		transmit_entity_comms_message (ENTITY_COMMS_PLAY_WARNING_MESSAGE, en, speech_index);

  00079	8b 45 0c	 mov	 eax, DWORD PTR _speech_index$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00080	51		 push	 ecx
  00081	6a 24		 push	 36			; 00000024H
  00083	e8 00 00 00 00	 call	 ?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ ; transmit_entity_comms_message
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1442 : 
; 1443 : 		return FALSE;

  0008b	33 c0		 xor	 eax, eax
$LN4@play_clien:

; 1444 : 	}
; 1445 : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
?play_client_server_warning_message@@YGHPAUENTITY@@H@Z ENDP ; play_client_server_warning_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z
_TEXT	SEGMENT
tv160 = -80						; size = 4
tv81 = -80						; size = 4
tv152 = -76						; size = 4
tv74 = -76						; size = 4
_silence_timer$ = -8					; size = 4
_result$ = -4						; size = 4
_en$ = 8						; size = 4
_target_speech_index$ = 12				; size = 4
_heading_speech_index$ = 16				; size = 4
_range_speech_index$ = 20				; size = 4
?play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z PROC ; play_client_server_cpg_contact_message, COMDAT

; 1366 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1367 : 	int
; 1368 : 		result;
; 1369 : 
; 1370 : 	float
; 1371 : 		silence_timer;
; 1372 : 
; 1373 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_clien
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_clien:

; 1374 : 
; 1375 : 	if (!get_local_entity_int_value (en, INT_TYPE_ALIVE))

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN7@play_clien
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 1d		 jmp	 SHORT $LN8@play_clien
$LN7@play_clien:
  00037	68 5f 05 00 00	 push	 1375			; 0000055fH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN8@play_clien:
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN9@play_clien
  0005d	c7 45 b0 07 00
	00 00		 mov	 DWORD PTR tv81[ebp], 7
  00064	eb 1d		 jmp	 SHORT $LN10@play_clien
$LN9@play_clien:
  00066	68 5f 05 00 00	 push	 1375			; 0000055fH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN10@play_clien:
  00083	6a 07		 push	 7
  00085	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00088	52		 push	 edx
  00089	69 45 b4 5c 04
	00 00		 imul	 eax, DWORD PTR tv74[ebp], 1116
  00090	8b 4d b0	 mov	 ecx, DWORD PTR tv81[ebp]
  00093	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009a	ff d2		 call	 edx
  0009c	85 c0		 test	 eax, eax
  0009e	75 07		 jne	 SHORT $LN3@play_clien

; 1376 : 	{
; 1377 : 		return FALSE;

  000a0	33 c0		 xor	 eax, eax
  000a2	e9 58 01 00 00	 jmp	 $LN5@play_clien
$LN3@play_clien:

; 1378 : 	}
; 1379 : 
; 1380 : 	if (get_comms_model () == COMMS_MODEL_SERVER)

  000a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  000ae	0f 85 2f 01 00
	00		 jne	 $LN4@play_clien

; 1381 : 	{
; 1382 : 		silence_timer = 3.0 + (frand1 () * 4.0);

  000b4	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000be	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000c3	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000ce	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000d1	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000d7	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000db	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  000e3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  000eb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  000f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f7	f3 0f 11 45 f8	 movss	 DWORD PTR _silence_timer$[ebp], xmm0

; 1383 : 
; 1384 : 		result = play_client_server_speech

  000fc	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00100	74 0a		 je	 SHORT $LN11@play_clien
  00102	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00105	8b 08		 mov	 ecx, DWORD PTR [eax]
  00107	89 4d b4	 mov	 DWORD PTR tv152[ebp], ecx
  0010a	eb 21		 jmp	 SHORT $LN12@play_clien
$LN11@play_clien:
  0010c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z@4JA
  00112	83 c2 16	 add	 edx, 22			; 00000016H
  00115	52		 push	 edx
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00126	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN12@play_clien:
  0012d	b9 01 00 00 00	 mov	 ecx, 1
  00132	85 c9		 test	 ecx, ecx
  00134	74 09		 je	 SHORT $LN13@play_clien
  00136	c7 45 b0 bb 00
	00 00		 mov	 DWORD PTR tv160[ebp], 187 ; 000000bbH
  0013d	eb 21		 jmp	 SHORT $LN14@play_clien
$LN13@play_clien:
  0013f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z@4JA
  00145	83 c2 16	 add	 edx, 22			; 00000016H
  00148	52		 push	 edx
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00159	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN14@play_clien:
  00160	6a ff		 push	 -1
  00162	8b 4d 14	 mov	 ecx, DWORD PTR _range_speech_index$[ebp]
  00165	51		 push	 ecx
  00166	6a 02		 push	 2
  00168	8b 55 10	 mov	 edx, DWORD PTR _heading_speech_index$[ebp]
  0016b	52		 push	 edx
  0016c	6a 01		 push	 1
  0016e	8b 45 0c	 mov	 eax, DWORD PTR _target_speech_index$[ebp]
  00171	50		 push	 eax
  00172	6a 09		 push	 9
  00174	51		 push	 ecx
  00175	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _silence_timer$[ebp]
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	6a 0f		 push	 15			; 0000000fH
  00181	6a 01		 push	 1
  00183	51		 push	 ecx
  00184	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0018c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00191	51		 push	 ecx
  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	0f 57 c0	 xorps	 xmm0, xmm0
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	6a 00		 push	 0
  001aa	6a 13		 push	 19			; 00000013H
  001ac	68 bb 00 00 00	 push	 187			; 000000bbH
  001b1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001b4	51		 push	 ecx
  001b5	69 55 b4 5c 04
	00 00		 imul	 edx, DWORD PTR tv152[ebp], 1116
  001bc	8b 45 b0	 mov	 eax, DWORD PTR tv160[ebp]
  001bf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001c6	ff d1		 call	 ecx
  001c8	50		 push	 eax
  001c9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  001cc	52		 push	 edx
  001cd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 ?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ ; play_client_server_speech
  001d6	83 c4 48	 add	 esp, 72			; 00000048H
  001d9	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 1385 : 		(
; 1386 : 			en,
; 1387 : 			en,
; 1388 : 			(entity_sides) get_local_entity_int_value (en, INT_TYPE_SIDE),
; 1389 : 			ENTITY_SUB_TYPE_EFFECT_SOUND_CPG_MESSAGE,
; 1390 : 			SOUND_LOCALITY_RADIO,
; 1391 : 			0.0,
; 1392 : 			0.8,
; 1393 : 			2.0,
; 1394 : 			SPEECH_ORIGINATOR_CO_PILOT,
; 1395 : 			SPEECH_CATEGORY_TARGET_LOCK,
; 1396 : 			silence_timer,
; 1397 : 			SPEECH_ARRAY_CPG_MESSAGES, target_speech_index,
; 1398 : 			SPEECH_ARRAY_HEADINGS, heading_speech_index,
; 1399 : 			SPEECH_ARRAY_DISTANCES, range_speech_index,
; 1400 : 			-1
; 1401 : 		);
; 1402 : 
; 1403 : 		return result;

  001dc	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]
  001df	eb 1e		 jmp	 SHORT $LN5@play_clien

; 1404 : 	}
; 1405 : 	else

  001e1	eb 1c		 jmp	 SHORT $LN5@play_clien
$LN4@play_clien:

; 1406 : 	{
; 1407 : 		transmit_entity_comms_message (ENTITY_COMMS_PLAY_CPG_CONTACT_MESSAGE, en, target_speech_index, heading_speech_index, range_speech_index);

  001e3	8b 45 14	 mov	 eax, DWORD PTR _range_speech_index$[ebp]
  001e6	50		 push	 eax
  001e7	8b 4d 10	 mov	 ecx, DWORD PTR _heading_speech_index$[ebp]
  001ea	51		 push	 ecx
  001eb	8b 55 0c	 mov	 edx, DWORD PTR _target_speech_index$[ebp]
  001ee	52		 push	 edx
  001ef	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001f2	50		 push	 eax
  001f3	6a 22		 push	 34			; 00000022H
  001f5	e8 00 00 00 00	 call	 ?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ ; transmit_entity_comms_message
  001fa	83 c4 14	 add	 esp, 20			; 00000014H

; 1408 : 
; 1409 : 		return FALSE;

  001fd	33 c0		 xor	 eax, eax
$LN5@play_clien:

; 1410 : 	}
; 1411 : }

  001ff	5f		 pop	 edi
  00200	5e		 pop	 esi
  00201	5b		 pop	 ebx
  00202	8b e5		 mov	 esp, ebp
  00204	5d		 pop	 ebp
  00205	c2 10 00	 ret	 16			; 00000010H
?play_client_server_cpg_contact_message@@YGHPAUENTITY@@HHH@Z ENDP ; play_client_server_cpg_contact_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z
_TEXT	SEGMENT
_result$ = -4						; size = 4
_en$ = 8						; size = 4
_priority$ = 12						; size = 4
_expire_time$ = 16					; size = 4
_speech_category$ = 20					; size = 4
_category_silence_timer$ = 24				; size = 4
_speech_index$ = 28					; size = 4
?play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z PROC ; play_client_server_cpg_message, COMDAT

; 1331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1332 : 	int
; 1333 : 		result;
; 1334 : 
; 1335 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_clien
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_clien:

; 1336 : 
; 1337 : 	if (get_comms_model () == COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	75 42		 jne	 SHORT $LN3@play_clien

; 1338 : 	{
; 1339 : 		result = play_client_server_personal_message

  00030	8b 45 1c	 mov	 eax, DWORD PTR _speech_index$[ebp]
  00033	50		 push	 eax
  00034	6a 09		 push	 9
  00036	51		 push	 ecx
  00037	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _category_silence_timer$[ebp]
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	8b 4d 14	 mov	 ecx, DWORD PTR _speech_category$[ebp]
  00044	51		 push	 ecx
  00045	6a 01		 push	 1
  00047	6a 13		 push	 19			; 00000013H
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _expire_time$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _priority$[ebp]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?play_client_server_personal_message@@YGHPAUENTITY@@MMHW4speech_originator_types@@W4speech_category_types@@MW4speech_array_types@@H@Z ; play_client_server_personal_message
  00068	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 1340 : 						(
; 1341 : 							en,
; 1342 : 							priority,
; 1343 : 							expire_time,
; 1344 : 							ENTITY_SUB_TYPE_EFFECT_SOUND_CPG_MESSAGE,
; 1345 : 							SPEECH_ORIGINATOR_CO_PILOT,
; 1346 : 							(speech_category_types) speech_category,
; 1347 : 							category_silence_timer,
; 1348 : 							SPEECH_ARRAY_CPG_MESSAGES, speech_index
; 1349 : 						);
; 1350 : 
; 1351 : 		return result;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]
  0006e	eb 41		 jmp	 SHORT $LN4@play_clien

; 1352 : 	}
; 1353 : 	else

  00070	eb 3f		 jmp	 SHORT $LN4@play_clien
$LN3@play_clien:

; 1354 : 	{
; 1355 : 		transmit_entity_comms_message (ENTITY_COMMS_PLAY_CPG_MESSAGE, en, priority, expire_time, speech_category, category_silence_timer, speech_index);

  00072	8b 45 1c	 mov	 eax, DWORD PTR _speech_index$[ebp]
  00075	50		 push	 eax
  00076	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _category_silence_timer$[ebp]
  0007b	83 ec 08	 sub	 esp, 8
  0007e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00083	8b 4d 14	 mov	 ecx, DWORD PTR _speech_category$[ebp]
  00086	51		 push	 ecx
  00087	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _expire_time$[ebp]
  0008c	83 ec 08	 sub	 esp, 8
  0008f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00094	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _priority$[ebp]
  00099	83 ec 08	 sub	 esp, 8
  0009c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a1	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a4	52		 push	 edx
  000a5	6a 23		 push	 35			; 00000023H
  000a7	e8 00 00 00 00	 call	 ?transmit_entity_comms_message@@YAXW4ENTITY_COMMS_MESSAGES@@PAUENTITY@@ZZ ; transmit_entity_comms_message
  000ac	83 c4 28	 add	 esp, 40			; 00000028H

; 1356 : 
; 1357 : 		return FALSE;

  000af	33 c0		 xor	 eax, eax
$LN4@play_clien:

; 1358 : 	}
; 1359 : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 18 00	 ret	 24			; 00000018H
?play_client_server_cpg_message@@YGHPAUENTITY@@MMHMH@Z ENDP ; play_client_server_cpg_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z
_TEXT	SEGMENT
tv175 = -84						; size = 4
tv142 = -84						; size = 4
tv90 = -84						; size = 4
tv167 = -80						; size = 4
tv134 = -80						; size = 4
tv82 = -80						; size = 4
_member_number$ = -12					; size = 4
_result$ = -8						; size = 4
_group_en$ = -4						; size = 4
_en$ = 8						; size = 4
_side$ = 12						; size = 4
_priority$ = 16						; size = 4
_expire_time$ = 20					; size = 4
_originator$ = 24					; size = 4
_category$ = 28						; size = 4
_category_silence_timer$ = 32				; size = 4
_play_intro$ = 36					; size = 4
_main_array_type$ = 40					; size = 4
_main_speech_index$ = 44				; size = 4
?play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z PROC ; play_client_server_radio_message, COMDAT

; 1187 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1188 : 	entity
; 1189 : 		*group_en;
; 1190 : 
; 1191 : 	int
; 1192 : 		result,
; 1193 : 		member_number;
; 1194 : 
; 1195 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_clien
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_clien:

; 1196 : 
; 1197 : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 18		 je	 SHORT $LN3@play_clien
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  00035	83 c0 0a	 add	 eax, 10			; 0000000aH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@play_clien:

; 1198 : 
; 1199 : 	if ((main_speech_index == -1) || (main_array_type == -1))

  00048	83 7d 2c ff	 cmp	 DWORD PTR _main_speech_index$[ebp], -1
  0004c	74 06		 je	 SHORT $LN5@play_clien
  0004e	83 7d 28 ff	 cmp	 DWORD PTR _main_array_type$[ebp], -1
  00052	75 07		 jne	 SHORT $LN4@play_clien
$LN5@play_clien:

; 1200 : 	{
; 1201 : 		return FALSE;

  00054	33 c0		 xor	 eax, eax
  00056	e9 6d 02 00 00	 jmp	 $LN1@play_clien
$LN4@play_clien:

; 1202 : 	}
; 1203 : 
; 1204 : 	group_en = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0005b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0005f	74 0a		 je	 SHORT $LN10@play_clien
  00061	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	89 4d b0	 mov	 DWORD PTR tv82[ebp], ecx
  00069	eb 21		 jmp	 SHORT $LN11@play_clien
$LN10@play_clien:
  0006b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  00071	83 c2 11	 add	 edx, 17			; 00000011H
  00074	52		 push	 edx
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00085	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN11@play_clien:
  0008c	b9 01 00 00 00	 mov	 ecx, 1
  00091	85 c9		 test	 ecx, ecx
  00093	74 09		 je	 SHORT $LN12@play_clien
  00095	c7 45 ac 19 00
	00 00		 mov	 DWORD PTR tv90[ebp], 25	; 00000019H
  0009c	eb 21		 jmp	 SHORT $LN13@play_clien
$LN12@play_clien:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  000a4	83 c2 11	 add	 edx, 17			; 00000011H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN13@play_clien:
  000bf	6a 19		 push	 25			; 00000019H
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000c4	51		 push	 ecx
  000c5	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv82[ebp], 180
  000cc	8b 45 ac	 mov	 eax, DWORD PTR tv90[ebp]
  000cf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000d6	ff d1		 call	 ecx
  000d8	89 45 fc	 mov	 DWORD PTR _group_en$[ebp], eax

; 1205 : 
; 1206 : 	member_number = get_local_entity_int_value (en, INT_TYPE_GROUP_MEMBER_ID);

  000db	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000df	74 0a		 je	 SHORT $LN14@play_clien
  000e1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e6	89 4d b0	 mov	 DWORD PTR tv134[ebp], ecx
  000e9	eb 21		 jmp	 SHORT $LN15@play_clien
$LN14@play_clien:
  000eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  000f1	83 c2 13	 add	 edx, 19			; 00000013H
  000f4	52		 push	 edx
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00105	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$LN15@play_clien:
  0010c	b9 01 00 00 00	 mov	 ecx, 1
  00111	85 c9		 test	 ecx, ecx
  00113	74 09		 je	 SHORT $LN16@play_clien
  00115	c7 45 ac 4a 00
	00 00		 mov	 DWORD PTR tv142[ebp], 74 ; 0000004aH
  0011c	eb 21		 jmp	 SHORT $LN17@play_clien
$LN16@play_clien:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  00124	83 c2 13	 add	 edx, 19			; 00000013H
  00127	52		 push	 edx
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00138	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN17@play_clien:
  0013f	6a 4a		 push	 74			; 0000004aH
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00144	51		 push	 ecx
  00145	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv134[ebp], 1116
  0014c	8b 45 ac	 mov	 eax, DWORD PTR tv142[ebp]
  0014f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00156	ff d1		 call	 ecx
  00158	89 45 f4	 mov	 DWORD PTR _member_number$[ebp], eax

; 1207 : 
; 1208 : 	//
; 1209 : 	// TEMPORARY FIX - group member number can be 1..31, but we only have speech for numbers 0..9
; 1210 : 	// so only announce number for valid members...
; 1211 : 	//
; 1212 : 	if (member_number >= 10)

  0015b	83 7d f4 0a	 cmp	 DWORD PTR _member_number$[ebp], 10 ; 0000000aH
  0015f	7c 07		 jl	 SHORT $LN6@play_clien

; 1213 : 	{
; 1214 : 		play_intro = SPEECH_INTRODUCTION_NEVER;

  00161	c7 45 24 00 00
	00 00		 mov	 DWORD PTR _play_intro$[ebp], 0
$LN6@play_clien:

; 1215 : 	}
; 1216 : 	//
; 1217 : 	// END
; 1218 : 	//
; 1219 : 
; 1220 : 	if ((play_speech_introduction (play_intro)) && (group_en))

  00168	8b 45 24	 mov	 eax, DWORD PTR _play_intro$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?play_speech_introduction@@YGHH@Z ; play_speech_introduction
  00171	85 c0		 test	 eax, eax
  00173	0f 84 f3 00 00
	00		 je	 $LN7@play_clien
  00179	83 7d fc 00	 cmp	 DWORD PTR _group_en$[ebp], 0
  0017d	0f 84 e9 00 00
	00		 je	 $LN7@play_clien

; 1221 : 	{
; 1222 : 		result = play_client_server_speech

  00183	83 7d fc 00	 cmp	 DWORD PTR _group_en$[ebp], 0
  00187	74 0a		 je	 SHORT $LN18@play_clien
  00189	8b 45 fc	 mov	 eax, DWORD PTR _group_en$[ebp]
  0018c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018e	89 4d b0	 mov	 DWORD PTR tv167[ebp], ecx
  00191	eb 21		 jmp	 SHORT $LN19@play_clien
$LN18@play_clien:
  00193	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  00199	83 c2 31	 add	 edx, 49			; 00000031H
  0019c	52		 push	 edx
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ad	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN19@play_clien:
  001b4	b9 01 00 00 00	 mov	 ecx, 1
  001b9	85 c9		 test	 ecx, ecx
  001bb	74 09		 je	 SHORT $LN20@play_clien
  001bd	c7 45 ac 44 00
	00 00		 mov	 DWORD PTR tv175[ebp], 68 ; 00000044H
  001c4	eb 21		 jmp	 SHORT $LN21@play_clien
$LN20@play_clien:
  001c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z@4JA
  001cc	83 c2 31	 add	 edx, 49			; 00000031H
  001cf	52		 push	 edx
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e0	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv175[ebp], 0
$LN21@play_clien:
  001e7	6a ff		 push	 -1
  001e9	8b 4d 2c	 mov	 ecx, DWORD PTR _main_speech_index$[ebp]
  001ec	51		 push	 ecx
  001ed	8b 55 28	 mov	 edx, DWORD PTR _main_array_type$[ebp]
  001f0	52		 push	 edx
  001f1	8b 45 f4	 mov	 eax, DWORD PTR _member_number$[ebp]
  001f4	50		 push	 eax
  001f5	6a 00		 push	 0
  001f7	6a 01		 push	 1
  001f9	6a 00		 push	 0
  001fb	6a 44		 push	 68			; 00000044H
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR _group_en$[ebp]
  00200	51		 push	 ecx
  00201	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv167[ebp], 1116
  00208	8b 45 ac	 mov	 eax, DWORD PTR tv175[ebp]
  0020b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00212	ff d1		 call	 ecx
  00214	50		 push	 eax
  00215	6a 03		 push	 3
  00217	6a 00		 push	 0
  00219	6a 07		 push	 7
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _category_silence_timer$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	8b 55 1c	 mov	 edx, DWORD PTR _category$[ebp]
  00229	52		 push	 edx
  0022a	8b 45 18	 mov	 eax, DWORD PTR _originator$[ebp]
  0022d	50		 push	 eax
  0022e	51		 push	 ecx
  0022f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _expire_time$[ebp]
  00234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00239	51		 push	 ecx
  0023a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _priority$[ebp]
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	0f 57 c0	 xorps	 xmm0, xmm0
  00248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024d	6a 00		 push	 0
  0024f	6a 1e		 push	 30			; 0000001eH
  00251	8b 4d 0c	 mov	 ecx, DWORD PTR _side$[ebp]
  00254	51		 push	 ecx
  00255	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00258	52		 push	 edx
  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 ?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ ; play_client_server_speech
  00264	83 c4 58	 add	 esp, 88			; 00000058H
  00267	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax

; 1223 : 						(
; 1224 : 							get_session_entity (),
; 1225 : 							en,
; 1226 : 							side,
; 1227 : 							ENTITY_SUB_TYPE_EFFECT_SOUND_RADIO_MESSAGE,
; 1228 : 							SOUND_LOCALITY_RADIO,
; 1229 : 							0.0,
; 1230 : 							priority,
; 1231 : 							expire_time,
; 1232 : 							originator,
; 1233 : 							category,
; 1234 : 							category_silence_timer,
; 1235 : 							SPEECH_ARRAY_WINGMAN_MESSAGES, SPEECH_WINGMAN_INTRODUCTION,
; 1236 : 							SPEECH_ARRAY_CALLSIGNS, get_local_entity_int_value (group_en, INT_TYPE_GROUP_CALLSIGN),
; 1237 : 							SPEECH_ARRAY_NUMBERS, 1,
; 1238 : 							SPEECH_ARRAY_NUMBERS, member_number,
; 1239 : 							main_array_type, main_speech_index,
; 1240 : 							-1
; 1241 : 						);
; 1242 : 	}
; 1243 : 	else

  0026a	eb 59		 jmp	 SHORT $LN8@play_clien
$LN7@play_clien:

; 1244 : 	{
; 1245 : 		result = play_client_server_speech

  0026c	6a ff		 push	 -1
  0026e	8b 45 2c	 mov	 eax, DWORD PTR _main_speech_index$[ebp]
  00271	50		 push	 eax
  00272	8b 4d 28	 mov	 ecx, DWORD PTR _main_array_type$[ebp]
  00275	51		 push	 ecx
  00276	51		 push	 ecx
  00277	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _category_silence_timer$[ebp]
  0027c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00281	8b 55 1c	 mov	 edx, DWORD PTR _category$[ebp]
  00284	52		 push	 edx
  00285	8b 45 18	 mov	 eax, DWORD PTR _originator$[ebp]
  00288	50		 push	 eax
  00289	51		 push	 ecx
  0028a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _expire_time$[ebp]
  0028f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00294	51		 push	 ecx
  00295	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _priority$[ebp]
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	51		 push	 ecx
  002a0	0f 57 c0	 xorps	 xmm0, xmm0
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	6a 00		 push	 0
  002aa	6a 1e		 push	 30			; 0000001eH
  002ac	8b 4d 0c	 mov	 ecx, DWORD PTR _side$[ebp]
  002af	51		 push	 ecx
  002b0	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  002b3	52		 push	 edx
  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 ?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ ; play_client_server_speech
  002bf	83 c4 38	 add	 esp, 56			; 00000038H
  002c2	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax
$LN8@play_clien:

; 1246 : 						(
; 1247 : 							get_session_entity (),
; 1248 : 							en,
; 1249 : 							side,
; 1250 : 							ENTITY_SUB_TYPE_EFFECT_SOUND_RADIO_MESSAGE,
; 1251 : 							SOUND_LOCALITY_RADIO,
; 1252 : 							0.0,
; 1253 : 							priority,
; 1254 : 							expire_time,
; 1255 : 							originator,
; 1256 : 							category,
; 1257 : 							category_silence_timer,
; 1258 : 							main_array_type, main_speech_index,
; 1259 : 							-1
; 1260 : 						);
; 1261 : 	}
; 1262 : 
; 1263 : 	return result;

  002c5	8b 45 f8	 mov	 eax, DWORD PTR _result$[ebp]
$LN1@play_clien:

; 1264 : }

  002c8	5f		 pop	 edi
  002c9	5e		 pop	 esi
  002ca	5b		 pop	 ebx
  002cb	8b e5		 mov	 esp, ebp
  002cd	5d		 pop	 ebp
  002ce	c2 28 00	 ret	 40			; 00000028H
?play_client_server_radio_message@@YGHPAUENTITY@@W4ENTITY_SIDES@@MMW4speech_originator_types@@W4speech_category_types@@MW4speech_intro_types@@W4speech_array_types@@H@Z ENDP ; play_client_server_radio_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z
_TEXT	SEGMENT
_total$ = -8						; size = 4
_n$ = -4						; size = 4
_speech_list$ = 8					; size = 4
_num_choices$ = 12					; size = 4
_last_played$ = 16					; size = 4
?get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z PROC ; get_speech_random_value, COMDAT

; 1107 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1108 : 	int
; 1109 : 		n,
; 1110 : 		total;
; 1111 : 
; 1112 : 	ASSERT (num_choices > 0);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _num_choices$[ebp], 0
  0000d	7f 18		 jg	 SHORT $LN7@get_speech
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HDBEHMOA@num_choices?5?$DO?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_speech:

; 1113 : 
; 1114 : 	total = 0;

  00027	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _total$[ebp], 0

; 1115 : 
; 1116 : 	for (n = 0; n < num_choices; n ++)

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00035	eb 09		 jmp	 SHORT $LN4@get_speech
$LN2@get_speech:
  00037	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN4@get_speech:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00043	3b 45 0c	 cmp	 eax, DWORD PTR _num_choices$[ebp]
  00046	7d 15		 jge	 SHORT $LN3@get_speech

; 1117 : 	{
; 1118 : 		total += speech_list [n].frequency;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0004b	c1 e0 04	 shl	 eax, 4
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _speech_list$[ebp]
  00051	8b 55 f8	 mov	 edx, DWORD PTR _total$[ebp]
  00054	03 54 01 08	 add	 edx, DWORD PTR [ecx+eax+8]
  00058	89 55 f8	 mov	 DWORD PTR _total$[ebp], edx

; 1119 : 	}

  0005b	eb da		 jmp	 SHORT $LN2@get_speech
$LN3@get_speech:

; 1120 : 
; 1121 : 	ASSERT (total > 0);

  0005d	83 7d f8 00	 cmp	 DWORD PTR _total$[ebp], 0
  00061	7f 18		 jg	 SHORT $LN8@get_speech
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z@4JA
  00068	83 c0 0e	 add	 eax, 14			; 0000000eH
  0006b	50		 push	 eax
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_09CMNODLIB@total?5?$DO?50@
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@get_speech:

; 1122 : 
; 1123 : 	total -= speech_list [last_played].frequency;

  0007b	8b 45 10	 mov	 eax, DWORD PTR _last_played$[ebp]
  0007e	c1 e0 04	 shl	 eax, 4
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _speech_list$[ebp]
  00084	8b 55 f8	 mov	 edx, DWORD PTR _total$[ebp]
  00087	2b 54 01 08	 sub	 edx, DWORD PTR [ecx+eax+8]
  0008b	89 55 f8	 mov	 DWORD PTR _total$[ebp], edx

; 1124 : 
; 1125 : 	total *= rand16 ();

  0008e	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00098	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0009d	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000a8	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000ab	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000b1	0f af 4d f8	 imul	 ecx, DWORD PTR _total$[ebp]
  000b5	89 4d f8	 mov	 DWORD PTR _total$[ebp], ecx

; 1126 : 
; 1127 : 	total = total >> 15;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _total$[ebp]
  000bb	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  000be	89 45 f8	 mov	 DWORD PTR _total$[ebp], eax

; 1128 : 
; 1129 : 	n = last_played + 1;

  000c1	8b 45 10	 mov	 eax, DWORD PTR _last_played$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 1130 : 
; 1131 : 	if (n >= num_choices) n -= num_choices;

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000cd	3b 45 0c	 cmp	 eax, DWORD PTR _num_choices$[ebp]
  000d0	7c 09		 jl	 SHORT $LN5@get_speech
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000d5	2b 45 0c	 sub	 eax, DWORD PTR _num_choices$[ebp]
  000d8	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN5@get_speech:

; 1132 : 
; 1133 : 	while (total > speech_list [n].frequency)

  000db	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000de	c1 e0 04	 shl	 eax, 4
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _speech_list$[ebp]
  000e4	8b 55 f8	 mov	 edx, DWORD PTR _total$[ebp]
  000e7	3b 54 01 08	 cmp	 edx, DWORD PTR [ecx+eax+8]
  000eb	7e 2f		 jle	 SHORT $LN6@get_speech

; 1134 : 	{
; 1135 : 		total -= speech_list [n].frequency;

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000f0	c1 e0 04	 shl	 eax, 4
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _speech_list$[ebp]
  000f6	8b 55 f8	 mov	 edx, DWORD PTR _total$[ebp]
  000f9	2b 54 01 08	 sub	 edx, DWORD PTR [ecx+eax+8]
  000fd	89 55 f8	 mov	 DWORD PTR _total$[ebp], edx

; 1136 : 
; 1137 : 		n ++;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00103	83 c0 01	 add	 eax, 1
  00106	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 1138 : 
; 1139 : 		if (n >= num_choices) n -= num_choices;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0010c	3b 45 0c	 cmp	 eax, DWORD PTR _num_choices$[ebp]
  0010f	7c 09		 jl	 SHORT $LN10@get_speech
  00111	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00114	2b 45 0c	 sub	 eax, DWORD PTR _num_choices$[ebp]
  00117	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN10@get_speech:

; 1140 : 	}

  0011a	eb bf		 jmp	 SHORT $LN5@get_speech
$LN6@get_speech:

; 1141 : 
; 1142 : 	return n;

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]

; 1143 : }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 0c 00	 ret	 12			; 0000000cH
?get_speech_random_value@@YGHPAUSPEECH_INSTANCE_TYPE@@HH@Z ENDP ; get_speech_random_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z
_TEXT	SEGMENT
_red_force_entry$ = -8					; size = 4
_blue_force_entry$ = -4					; size = 4
_array_type$ = 8					; size = 4
_originator$ = 12					; size = 4
_speech_index$ = 16					; size = 4
_blue_force_sample_index$ = 20				; size = 4
_red_force_sample_index$ = 24				; size = 4
?initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z PROC ; initialise_speech_data, COMDAT

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 931  : 	speech_index_list_type
; 932  : 		*blue_force_entry,
; 933  : 		*red_force_entry;
; 934  : 
; 935  : 	ASSERT ((array_type >= 0) && (array_type < NUM_SPEECH_ARRAY_TYPES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _array_type$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@initialise
  0000f	83 7d 08 0a	 cmp	 DWORD PTR _array_type$[ebp], 10 ; 0000000aH
  00013	7c 18		 jl	 SHORT $LN2@initialise
$LN3@initialise:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KJLOGLGO@?$CIarray_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIarray_typ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@initialise:

; 936  : 	ASSERT ((originator >= 0) && (originator < NUM_SPEECH_ORIGINATOR_TYPES));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _originator$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@initialise
  00033	83 7d 0c 07	 cmp	 DWORD PTR _originator$[ebp], 7
  00037	7c 18		 jl	 SHORT $LN4@initialise
$LN5@initialise:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@DEGILGIK@?$CIoriginator?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIoriginato@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@initialise:

; 937  : 
; 938  : 	blue_force_entry = &(speech_index_table [array_type][originator][ENTITY_SIDE_BLUE_FORCE]);

  00051	69 45 08 a8 00
	00 00		 imul	 eax, DWORD PTR _array_type$[ebp], 168
  00058	6b 4d 0c 18	 imul	 ecx, DWORD PTR _originator$[ebp], 24
  0005c	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  00063	b8 08 00 00 00	 mov	 eax, 8
  00068	c1 e0 00	 shl	 eax, 0
  0006b	03 d0		 add	 edx, eax
  0006d	89 55 fc	 mov	 DWORD PTR _blue_force_entry$[ebp], edx

; 939  : 	red_force_entry = &(speech_index_table [array_type][originator][ENTITY_SIDE_RED_FORCE]);

  00070	69 45 08 a8 00
	00 00		 imul	 eax, DWORD PTR _array_type$[ebp], 168
  00077	6b 4d 0c 18	 imul	 ecx, DWORD PTR _originator$[ebp], 24
  0007b	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	d1 e0		 shl	 eax, 1
  00089	03 d0		 add	 edx, eax
  0008b	89 55 f8	 mov	 DWORD PTR _red_force_entry$[ebp], edx

; 940  : 
; 941  : 	ASSERT (blue_force_sample_index != red_force_sample_index);

  0008e	8b 45 14	 mov	 eax, DWORD PTR _blue_force_sample_index$[ebp]
  00091	3b 45 18	 cmp	 eax, DWORD PTR _red_force_sample_index$[ebp]
  00094	75 18		 jne	 SHORT $LN6@initialise
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA
  0009b	83 c0 0b	 add	 eax, 11			; 0000000bH
  0009e	50		 push	 eax
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@MNIFKPMM@blue_force_sample_index?5?$CB?$DN?5red_@
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@initialise:

; 942  : 
; 943  : 	ASSERT (speech_index < blue_force_entry->num_items);

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _blue_force_entry$[ebp]
  000b1	8b 4d 10	 mov	 ecx, DWORD PTR _speech_index$[ebp]
  000b4	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000b6	7c 18		 jl	 SHORT $LN7@initialise
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA
  000bd	83 c0 0d	 add	 eax, 13			; 0000000dH
  000c0	50		 push	 eax
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@HLEOOBFM@speech_index?5?$DM?5blue_force_entry@
  000cb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@initialise:

; 944  : 	ASSERT (speech_index < red_force_entry->num_items);

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _red_force_entry$[ebp]
  000d3	8b 4d 10	 mov	 ecx, DWORD PTR _speech_index$[ebp]
  000d6	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000d8	7c 18		 jl	 SHORT $LN8@initialise
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z@4JA
  000df	83 c0 0e	 add	 eax, 14			; 0000000eH
  000e2	50		 push	 eax
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BLACNEKD@speech_index?5?$DM?5red_force_entry?9@
  000ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@initialise:

; 945  : 
; 946  : 	blue_force_entry->sample_indices [speech_index] = blue_force_sample_index;

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _blue_force_entry$[ebp]
  000f5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f8	8b 55 10	 mov	 edx, DWORD PTR _speech_index$[ebp]
  000fb	8b 45 14	 mov	 eax, DWORD PTR _blue_force_sample_index$[ebp]
  000fe	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 947  : 	red_force_entry->sample_indices [speech_index] = red_force_sample_index;

  00101	8b 45 f8	 mov	 eax, DWORD PTR _red_force_entry$[ebp]
  00104	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00107	8b 55 10	 mov	 edx, DWORD PTR _speech_index$[ebp]
  0010a	8b 45 18	 mov	 eax, DWORD PTR _red_force_sample_index$[ebp]
  0010d	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 948  : }

  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 14 00	 ret	 20			; 00000014H
?initialise_speech_data@@YGXW4speech_array_types@@W4speech_originator_types@@HHH@Z ENDP ; initialise_speech_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z
_TEXT	SEGMENT
_red_force_entry$ = -8					; size = 4
_blue_force_entry$ = -4					; size = 4
_array_type$ = 8					; size = 4
_originator$ = 12					; size = 4
_max_items$ = 16					; size = 4
?initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z PROC ; initialise_sample_index_array, COMDAT

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 902  : 	speech_index_list_type
; 903  : 		*blue_force_entry,
; 904  : 		*red_force_entry;
; 905  : 
; 906  : 	ASSERT ((array_type >= 0) && (array_type < NUM_SPEECH_ARRAY_TYPES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _array_type$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@initialise
  0000f	83 7d 08 0a	 cmp	 DWORD PTR _array_type$[ebp], 10 ; 0000000aH
  00013	7c 18		 jl	 SHORT $LN2@initialise
$LN3@initialise:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KJLOGLGO@?$CIarray_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIarray_typ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@initialise:

; 907  : 	ASSERT ((originator >= 0) && (originator < NUM_SPEECH_ORIGINATOR_TYPES));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _originator$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@initialise
  00033	83 7d 0c 07	 cmp	 DWORD PTR _originator$[ebp], 7
  00037	7c 18		 jl	 SHORT $LN4@initialise
$LN5@initialise:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@DEGILGIK@?$CIoriginator?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIoriginato@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@initialise:

; 908  : 
; 909  : 	blue_force_entry = &(speech_index_table [array_type][originator][ENTITY_SIDE_BLUE_FORCE]);

  00051	69 45 08 a8 00
	00 00		 imul	 eax, DWORD PTR _array_type$[ebp], 168
  00058	6b 4d 0c 18	 imul	 ecx, DWORD PTR _originator$[ebp], 24
  0005c	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  00063	b8 08 00 00 00	 mov	 eax, 8
  00068	c1 e0 00	 shl	 eax, 0
  0006b	03 d0		 add	 edx, eax
  0006d	89 55 fc	 mov	 DWORD PTR _blue_force_entry$[ebp], edx

; 910  : 	red_force_entry = &(speech_index_table [array_type][originator][ENTITY_SIDE_RED_FORCE]);

  00070	69 45 08 a8 00
	00 00		 imul	 eax, DWORD PTR _array_type$[ebp], 168
  00077	6b 4d 0c 18	 imul	 ecx, DWORD PTR _originator$[ebp], 24
  0007b	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	d1 e0		 shl	 eax, 1
  00089	03 d0		 add	 edx, eax
  0008b	89 55 f8	 mov	 DWORD PTR _red_force_entry$[ebp], edx

; 911  : 
; 912  : 	//
; 913  : 	// clear data
; 914  : 	//
; 915  : 
; 916  : 	blue_force_entry->num_items = max_items;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _blue_force_entry$[ebp]
  00091	8b 4d 10	 mov	 ecx, DWORD PTR _max_items$[ebp]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 917  : 	blue_force_entry->sample_indices = (sound_sample_indices *) safe_malloc (sizeof (sound_sample_indices) * max_items);

  00096	8b 45 10	 mov	 eax, DWORD PTR _max_items$[ebp]
  00099	c1 e0 02	 shl	 eax, 2
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _blue_force_entry$[ebp]
  000a5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 918  : 	memset (blue_force_entry->sample_indices, 0, (sizeof (sound_sample_indices) * max_items));

  000a8	8b 45 10	 mov	 eax, DWORD PTR _max_items$[ebp]
  000ab	c1 e0 02	 shl	 eax, 2
  000ae	50		 push	 eax
  000af	6a 00		 push	 0
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _blue_force_entry$[ebp]
  000b4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 _memset
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 919  : 
; 920  : 	red_force_entry->num_items = max_items;

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _red_force_entry$[ebp]
  000c3	8b 4d 10	 mov	 ecx, DWORD PTR _max_items$[ebp]
  000c6	89 08		 mov	 DWORD PTR [eax], ecx

; 921  : 	red_force_entry->sample_indices = (sound_sample_indices *) safe_malloc (sizeof (sound_sample_indices) * max_items);

  000c8	8b 45 10	 mov	 eax, DWORD PTR _max_items$[ebp]
  000cb	c1 e0 02	 shl	 eax, 2
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _red_force_entry$[ebp]
  000d7	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 922  : 	memset (red_force_entry->sample_indices, 0, (sizeof (sound_sample_indices) * max_items));

  000da	8b 45 10	 mov	 eax, DWORD PTR _max_items$[ebp]
  000dd	c1 e0 02	 shl	 eax, 2
  000e0	50		 push	 eax
  000e1	6a 00		 push	 0
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _red_force_entry$[ebp]
  000e6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 _memset
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 0c 00	 ret	 12			; 0000000cH
?initialise_sample_index_array@@YGXW4speech_array_types@@W4speech_originator_types@@H@Z ENDP ; initialise_sample_index_array
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?deinitialise_speech_index_table@@YGXXZ
_TEXT	SEGMENT
_side_loop$ = -12					; size = 4
_originator_loop$ = -8					; size = 4
_array_loop$ = -4					; size = 4
?deinitialise_speech_index_table@@YGXXZ PROC		; deinitialise_speech_index_table, COMDAT

; 955  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 956  : 	int
; 957  : 		array_loop,
; 958  : 		originator_loop,
; 959  : 		side_loop;
; 960  : 
; 961  : 	#if DEBUG_MODULE
; 962  : 
; 963  : 	check_speech_index_table ();
; 964  : 
; 965  : 	#endif
; 966  : 
; 967  : 	for (array_loop = 0; array_loop < NUM_SPEECH_ARRAY_TYPES; array_loop ++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _array_loop$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@deinitiali
$LN2@deinitiali:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _array_loop$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _array_loop$[ebp], eax
$LN4@deinitiali:
  0001b	83 7d fc 0a	 cmp	 DWORD PTR _array_loop$[ebp], 10 ; 0000000aH
  0001f	0f 8d b7 00 00
	00		 jge	 $LN1@deinitiali

; 968  : 	{
; 969  : 		for (originator_loop = 0; originator_loop < NUM_SPEECH_ORIGINATOR_TYPES; originator_loop ++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _originator_loop$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@deinitiali
$LN5@deinitiali:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _originator_loop$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _originator_loop$[ebp], eax
$LN7@deinitiali:
  00037	83 7d f8 07	 cmp	 DWORD PTR _originator_loop$[ebp], 7
  0003b	0f 8d 96 00 00
	00		 jge	 $LN6@deinitiali

; 970  : 		{
; 971  : 			for (side_loop = 0; side_loop < NUM_ENTITY_SIDES; side_loop ++)

  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _side_loop$[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN10@deinitiali
$LN8@deinitiali:
  0004a	8b 45 f4	 mov	 eax, DWORD PTR _side_loop$[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 f4	 mov	 DWORD PTR _side_loop$[ebp], eax
$LN10@deinitiali:
  00053	83 7d f4 03	 cmp	 DWORD PTR _side_loop$[ebp], 3
  00057	7d 79		 jge	 SHORT $LN9@deinitiali

; 972  : 			{
; 973  : 				speech_index_table [array_loop][originator_loop][side_loop].num_items = 0;

  00059	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _array_loop$[ebp], 168
  00060	6b 4d f8 18	 imul	 ecx, DWORD PTR _originator_loop$[ebp], 24
  00064	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  0006b	8b 45 f4	 mov	 eax, DWORD PTR _side_loop$[ebp]
  0006e	c7 04 c2 00 00
	00 00		 mov	 DWORD PTR [edx+eax*8], 0

; 974  : 
; 975  : 				if (speech_index_table [array_loop][originator_loop][side_loop].sample_indices)

  00075	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _array_loop$[ebp], 168
  0007c	6b 4d f8 18	 imul	 ecx, DWORD PTR _originator_loop$[ebp], 24
  00080	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  00087	8b 45 f4	 mov	 eax, DWORD PTR _side_loop$[ebp]
  0008a	83 7c c2 04 00	 cmp	 DWORD PTR [edx+eax*8+4], 0
  0008f	74 3c		 je	 SHORT $LN11@deinitiali

; 976  : 				{
; 977  : 					safe_free (speech_index_table [array_loop][originator_loop][side_loop].sample_indices);

  00091	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _array_loop$[ebp], 168
  00098	6b 4d f8 18	 imul	 ecx, DWORD PTR _originator_loop$[ebp], 24
  0009c	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  000a3	8b 45 f4	 mov	 eax, DWORD PTR _side_loop$[ebp]
  000a6	8b 4c c2 04	 mov	 ecx, DWORD PTR [edx+eax*8+4]
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 978  : 
; 979  : 					speech_index_table [array_loop][originator_loop][side_loop].sample_indices = NULL;

  000b0	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _array_loop$[ebp], 168
  000b7	6b 4d f8 18	 imul	 ecx, DWORD PTR _originator_loop$[ebp], 24
  000bb	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  000c2	8b 45 f4	 mov	 eax, DWORD PTR _side_loop$[ebp]
  000c5	c7 44 c2 04 00
	00 00 00	 mov	 DWORD PTR [edx+eax*8+4], 0
$LN11@deinitiali:

; 980  : 				}
; 981  : 			}

  000cd	e9 78 ff ff ff	 jmp	 $LN8@deinitiali
$LN9@deinitiali:

; 982  : 		}

  000d2	e9 57 ff ff ff	 jmp	 $LN5@deinitiali
$LN6@deinitiali:

; 983  : 	}

  000d7	e9 36 ff ff ff	 jmp	 $LN2@deinitiali
$LN1@deinitiali:

; 984  : }

  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
?deinitialise_speech_index_table@@YGXXZ ENDP		; deinitialise_speech_index_table
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?initialise_speech_index_table@@YGXXZ
_TEXT	SEGMENT
?initialise_speech_index_table@@YGXXZ PROC		; initialise_speech_index_table, COMDAT

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 874  : 	//
; 875  : 	// clear table
; 876  : 	//
; 877  : 
; 878  : 	deinitialise_speech_index_table ();

  00009	e8 00 00 00 00	 call	 ?deinitialise_speech_index_table@@YGXXZ ; deinitialise_speech_index_table

; 879  : 
; 880  : 	//
; 881  : 	// load in the data
; 882  : 	//
; 883  : 
; 884  : 	initialise_speech_number_data ();

  0000e	e8 00 00 00 00	 call	 ?initialise_speech_number_data@@YGXXZ ; initialise_speech_number_data

; 885  : 	initialise_speech_headings_data ();

  00013	e8 00 00 00 00	 call	 ?initialise_speech_headings_data@@YGXXZ ; initialise_speech_headings_data

; 886  : 	initialise_speech_distances_data ();

  00018	e8 00 00 00 00	 call	 ?initialise_speech_distances_data@@YGXXZ ; initialise_speech_distances_data

; 887  : 	initialise_speech_callsign_data ();

  0001d	e8 00 00 00 00	 call	 ?initialise_speech_callsign_data@@YGXXZ ; initialise_speech_callsign_data

; 888  : 	initialise_speech_atc_data ();

  00022	e8 00 00 00 00	 call	 ?initialise_speech_atc_data@@YGXXZ ; initialise_speech_atc_data

; 889  : 	initialise_speech_gc_data ();

  00027	e8 00 00 00 00	 call	 ?initialise_speech_gc_data@@YGXXZ ; initialise_speech_gc_data

; 890  : 	initialise_speech_fac_data ();

  0002c	e8 00 00 00 00	 call	 ?initialise_speech_fac_data@@YGXXZ ; initialise_speech_fac_data

; 891  : 	initialise_speech_wingman_data ();

  00031	e8 00 00 00 00	 call	 ?initialise_speech_wingman_data@@YGXXZ ; initialise_speech_wingman_data

; 892  : 	initialise_speech_system_data ();

  00036	e8 00 00 00 00	 call	 ?initialise_speech_system_data@@YGXXZ ; initialise_speech_system_data

; 893  : 	initialise_speech_cpg_data ();

  0003b	e8 00 00 00 00	 call	 ?initialise_speech_cpg_data@@YGXXZ ; initialise_speech_cpg_data

; 894  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?initialise_speech_index_table@@YGXXZ ENDP		; initialise_speech_index_table
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv84 = -92						; size = 4
tv76 = -88						; size = 4
_next$ = -20						; size = 4
_item$ = -16						; size = 4
_buffer$ = -12						; size = 4
_originator$ = -8					; size = 4
_side$ = -4						; size = 4
_en$ = 8						; size = 4
?notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z PROC ; notify_speech_buffers_entity_killed, COMDAT

; 704  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 705  : 	int
; 706  : 		side,
; 707  : 		originator;
; 708  : 
; 709  : 	speech_system_type
; 710  : 		*buffer;
; 711  : 
; 712  : 	speech_system_queue_type
; 713  : 		*item,
; 714  : 		*next;
; 715  : 
; 716  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN7@notify_spe
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@notify_spe:

; 717  : 
; 718  : 	if (get_comms_model () != COMMS_MODEL_SERVER)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  0002e	74 05		 je	 SHORT $LN8@notify_spe

; 719  : 	{
; 720  : 		return;

  00030	e9 0a 01 00 00	 jmp	 $LN1@notify_spe
$LN8@notify_spe:

; 721  : 	}
; 722  : 
; 723  : 	side = get_local_entity_int_value (en, INT_TYPE_SIDE);

  00035	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00039	74 0a		 je	 SHORT $LN12@notify_spe
  0003b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	89 4d a8	 mov	 DWORD PTR tv76[ebp], ecx
  00043	eb 21		 jmp	 SHORT $LN13@notify_spe
$LN12@notify_spe:
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z@4JA
  0004b	83 c2 13	 add	 edx, 19			; 00000013H
  0004e	52		 push	 edx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005f	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN13@notify_spe:
  00066	b9 01 00 00 00	 mov	 ecx, 1
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 09		 je	 SHORT $LN14@notify_spe
  0006f	c7 45 a4 bb 00
	00 00		 mov	 DWORD PTR tv84[ebp], 187 ; 000000bbH
  00076	eb 21		 jmp	 SHORT $LN15@notify_spe
$LN14@notify_spe:
  00078	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z@4JA
  0007e	83 c2 13	 add	 edx, 19			; 00000013H
  00081	52		 push	 edx
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00092	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN15@notify_spe:
  00099	68 bb 00 00 00	 push	 187			; 000000bbH
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000a1	51		 push	 ecx
  000a2	69 55 a8 5c 04
	00 00		 imul	 edx, DWORD PTR tv76[ebp], 1116
  000a9	8b 45 a4	 mov	 eax, DWORD PTR tv84[ebp]
  000ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000b3	ff d1		 call	 ecx
  000b5	89 45 fc	 mov	 DWORD PTR _side$[ebp], eax

; 724  : 
; 725  : 	for (originator = 0; originator < NUM_SPEECH_ORIGINATOR_TYPES; originator ++)

  000b8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _originator$[ebp], 0
  000bf	eb 09		 jmp	 SHORT $LN4@notify_spe
$LN2@notify_spe:
  000c1	8b 45 f8	 mov	 eax, DWORD PTR _originator$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 f8	 mov	 DWORD PTR _originator$[ebp], eax
$LN4@notify_spe:
  000ca	83 7d f8 07	 cmp	 DWORD PTR _originator$[ebp], 7
  000ce	7d 6f		 jge	 SHORT $LN1@notify_spe

; 726  : 	{
; 727  : 		buffer = &speech_buffer [side][originator];

  000d0	69 45 fc 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  000d7	6b 4d f8 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  000db	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx]
  000e2	89 55 f4	 mov	 DWORD PTR _buffer$[ebp], edx

; 728  : 
; 729  : 		ASSERT (buffer);

  000e5	83 7d f4 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  000e9	75 18		 jne	 SHORT $LN9@notify_spe
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z@4JA
  000f0	83 c0 19	 add	 eax, 25			; 00000019H
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  000fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@notify_spe:

; 730  : 
; 731  : 		item = buffer->queue;

  00103	8b 45 f4	 mov	 eax, DWORD PTR _buffer$[ebp]
  00106	8b 08		 mov	 ecx, DWORD PTR [eax]
  00108	89 4d f0	 mov	 DWORD PTR _item$[ebp], ecx
$LN5@notify_spe:

; 732  : 
; 733  : 		while (item)

  0010b	83 7d f0 00	 cmp	 DWORD PTR _item$[ebp], 0
  0010f	74 2c		 je	 SHORT $LN6@notify_spe

; 734  : 		{
; 735  : 			next = item->next;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  00114	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00117	89 4d ec	 mov	 DWORD PTR _next$[ebp], ecx

; 736  : 
; 737  : 			if (item->parent == en)

  0011a	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0011d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011f	3b 4d 08	 cmp	 ecx, DWORD PTR _en$[ebp]
  00122	75 11		 jne	 SHORT $LN10@notify_spe

; 738  : 			{
; 739  : 				remove_speech_from_list ((entity_sides) side, (speech_originator_types) originator, item);

  00124	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  00127	50		 push	 eax
  00128	8b 4d f8	 mov	 ecx, DWORD PTR _originator$[ebp]
  0012b	51		 push	 ecx
  0012c	8b 55 fc	 mov	 edx, DWORD PTR _side$[ebp]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z ; remove_speech_from_list
$LN10@notify_spe:

; 740  : 			}
; 741  : 
; 742  : 			item = next;

  00135	8b 45 ec	 mov	 eax, DWORD PTR _next$[ebp]
  00138	89 45 f0	 mov	 DWORD PTR _item$[ebp], eax

; 743  : 		}

  0013b	eb ce		 jmp	 SHORT $LN5@notify_spe
$LN6@notify_spe:

; 744  : 	}

  0013d	eb 82		 jmp	 SHORT $LN2@notify_spe
$LN1@notify_spe:

; 745  : }

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 04 00	 ret	 4
?notify_speech_buffers_entity_killed@@YGXPAUENTITY@@@Z ENDP ; notify_speech_buffers_entity_killed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?deinitialise_speech_buffers@@YGXXZ
_TEXT	SEGMENT
_next$ = -16						; size = 4
_item$ = -12						; size = 4
_side$ = -8						; size = 4
_originator$ = -4					; size = 4
?deinitialise_speech_buffers@@YGXXZ PROC		; deinitialise_speech_buffers, COMDAT

; 661  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 662  : 	int
; 663  : 		originator,
; 664  : 		side;
; 665  : 
; 666  : 	speech_system_queue_type
; 667  : 		*item,
; 668  : 		*next;
; 669  : 
; 670  : 	for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@deinitiali
$LN2@deinitiali:
  00012	8b 45 f8	 mov	 eax, DWORD PTR _side$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f8	 mov	 DWORD PTR _side$[ebp], eax
$LN4@deinitiali:
  0001b	83 7d f8 03	 cmp	 DWORD PTR _side$[ebp], 3
  0001f	0f 8d bc 00 00
	00		 jge	 $LN3@deinitiali

; 671  : 	{
; 672  : 		for (originator = 0; originator < NUM_SPEECH_ORIGINATOR_TYPES; originator ++)

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _originator$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@deinitiali
$LN5@deinitiali:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _originator$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 fc	 mov	 DWORD PTR _originator$[ebp], eax
$LN7@deinitiali:
  00037	83 7d fc 07	 cmp	 DWORD PTR _originator$[ebp], 7
  0003b	0f 8d 9b 00 00
	00		 jge	 $LN6@deinitiali

; 673  : 		{
; 674  : 			item = speech_buffer [side][originator].queue;

  00041	69 45 f8 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00048	6b 4d fc 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  0004c	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx]
  00053	89 55 f4	 mov	 DWORD PTR _item$[ebp], edx
$LN8@deinitiali:

; 675  : 
; 676  : 			while (item)

  00056	83 7d f4 00	 cmp	 DWORD PTR _item$[ebp], 0
  0005a	74 2f		 je	 SHORT $LN9@deinitiali

; 677  : 			{
; 678  : 				next = item->next;

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  0005f	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00062	89 4d f0	 mov	 DWORD PTR _next$[ebp], ecx

; 679  : 
; 680  : 				if (item->sample_list)

  00065	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  00068	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0006c	74 0c		 je	 SHORT $LN10@deinitiali

; 681  : 				{
; 682  : 					free_mem (item->sample_list);

  0006e	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  00071	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN10@deinitiali:

; 683  : 				}
; 684  : 
; 685  : 				free_mem (item);

  0007a	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 686  : 
; 687  : 				item = next;

  00083	8b 45 f0	 mov	 eax, DWORD PTR _next$[ebp]
  00086	89 45 f4	 mov	 DWORD PTR _item$[ebp], eax

; 688  : 			}

  00089	eb cb		 jmp	 SHORT $LN8@deinitiali
$LN9@deinitiali:

; 689  : 
; 690  : 			speech_buffer [side][originator].queue = NULL;

  0008b	69 45 f8 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00092	6b 4d fc 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  00096	c7 84 08 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx], 0

; 691  : 
; 692  : 			memset (speech_buffer [side][originator].exclude_list, 0, sizeof (speech_system_exclude_type) * NUM_SPEECH_CATEGORY_TYPES);

  000a1	6a 54		 push	 84			; 00000054H
  000a3	6a 00		 push	 0
  000a5	69 45 f8 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  000ac	6b 4d fc 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  000b0	8d 94 08 04 00
	00 00		 lea	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx+4]
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 _memset
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 693  : 
; 694  : 			speech_buffer [side][originator].current.timer = 0.0;

  000c0	69 45 f8 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  000c7	6b 4d fc 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  000cb	0f 57 c0	 xorps	 xmm0, xmm0
  000ce	f3 0f 11 84 08
	58 00 00 00	 movss	 DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx+88], xmm0

; 695  : 		}

  000d7	e9 52 ff ff ff	 jmp	 $LN5@deinitiali
$LN6@deinitiali:

; 696  : 	}

  000dc	e9 31 ff ff ff	 jmp	 $LN2@deinitiali
$LN3@deinitiali:

; 697  : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
?deinitialise_speech_buffers@@YGXXZ ENDP		; deinitialise_speech_buffers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?initialise_speech_buffers@@YGXXZ
_TEXT	SEGMENT
_side$ = -8						; size = 4
_originator$ = -4					; size = 4
?initialise_speech_buffers@@YGXXZ PROC			; initialise_speech_buffers, COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  : 	int
; 640  : 		originator,
; 641  : 		side;
; 642  : 
; 643  : 	for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 f8	 mov	 eax, DWORD PTR _side$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f8	 mov	 DWORD PTR _side$[ebp], eax
$LN4@initialise:
  0001b	83 7d f8 03	 cmp	 DWORD PTR _side$[ebp], 3
  0001f	7d 68		 jge	 SHORT $LN3@initialise

; 644  : 	{
; 645  : 		for (originator = 0; originator < NUM_SPEECH_ORIGINATOR_TYPES; originator ++)

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _originator$[ebp], 0
  00028	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _originator$[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 fc	 mov	 DWORD PTR _originator$[ebp], eax
$LN7@initialise:
  00033	83 7d fc 07	 cmp	 DWORD PTR _originator$[ebp], 7
  00037	7d 4e		 jge	 SHORT $LN6@initialise

; 646  : 		{
; 647  : 			speech_buffer [side][originator].queue = NULL;

  00039	69 45 f8 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00040	6b 4d fc 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  00044	c7 84 08 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx], 0

; 648  : 
; 649  : 			memset (speech_buffer [side][originator].exclude_list, 0, sizeof (speech_system_exclude_type) * NUM_SPEECH_CATEGORY_TYPES);

  0004f	6a 54		 push	 84			; 00000054H
  00051	6a 00		 push	 0
  00053	69 45 f8 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  0005a	6b 4d fc 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  0005e	8d 94 08 04 00
	00 00		 lea	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx+4]
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 650  : 
; 651  : 			speech_buffer [side][originator].current.timer = 0.0;

  0006e	69 45 f8 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00075	6b 4d fc 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  00079	0f 57 c0	 xorps	 xmm0, xmm0
  0007c	f3 0f 11 84 08
	58 00 00 00	 movss	 DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx+88], xmm0

; 652  : 		}

  00085	eb a3		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 653  : 	}

  00087	eb 89		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 654  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?initialise_speech_buffers@@YGXXZ ENDP			; initialise_speech_buffers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z
_TEXT	SEGMENT
_next$ = -12						; size = 4
_item$ = -8						; size = 4
_buffer$ = -4						; size = 4
_side$ = 8						; size = 4
_originator$ = 12					; size = 4
_category$ = 16						; size = 4
?remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z PROC ; remove_speech_category_from_buffers, COMDAT

; 604  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 605  : 	speech_system_type
; 606  : 		*buffer;
; 607  : 
; 608  : 	speech_system_queue_type
; 609  : 		*item,
; 610  : 		*next;
; 611  : 
; 612  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 18		 je	 SHORT $LN4@remove_spe
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z@4JA
  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@remove_spe:

; 613  : 
; 614  : 	buffer = &speech_buffer [side][originator];

  0002a	69 45 08 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00031	6b 4d 0c 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  00035	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx]
  0003c	89 55 fc	 mov	 DWORD PTR _buffer$[ebp], edx

; 615  : 
; 616  : 	ASSERT (buffer);

  0003f	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00043	75 18		 jne	 SHORT $LN5@remove_spe
  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z@4JA
  0004a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00058	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@remove_spe:

; 617  : 
; 618  : 	item = buffer->queue;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	89 4d f8	 mov	 DWORD PTR _item$[ebp], ecx
$LN2@remove_spe:

; 619  : 
; 620  : 	while (item)

  00065	83 7d f8 00	 cmp	 DWORD PTR _item$[ebp], 0
  00069	74 2d		 je	 SHORT $LN1@remove_spe

; 621  : 	{
; 622  : 		next = item->next;

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _item$[ebp]
  0006e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00071	89 4d f4	 mov	 DWORD PTR _next$[ebp], ecx

; 623  : 
; 624  : 		if (item->category == category)

  00074	8b 45 f8	 mov	 eax, DWORD PTR _item$[ebp]
  00077	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007a	3b 4d 10	 cmp	 ecx, DWORD PTR _category$[ebp]
  0007d	75 11		 jne	 SHORT $LN6@remove_spe

; 625  : 		{
; 626  : 			remove_speech_from_list (side, originator, item);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _item$[ebp]
  00082	50		 push	 eax
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _originator$[ebp]
  00086	51		 push	 ecx
  00087	8b 55 08	 mov	 edx, DWORD PTR _side$[ebp]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z ; remove_speech_from_list
$LN6@remove_spe:

; 627  : 		}
; 628  : 
; 629  : 		item = next;

  00090	8b 45 f4	 mov	 eax, DWORD PTR _next$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _item$[ebp], eax

; 630  : 	}

  00096	eb cd		 jmp	 SHORT $LN2@remove_spe
$LN1@remove_spe:

; 631  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 0c 00	 ret	 12			; 0000000cH
?remove_speech_category_from_buffers@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@W4speech_category_types@@@Z ENDP ; remove_speech_category_from_buffers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?update_speech_buffers@@YGXXZ
_TEXT	SEGMENT
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
_next$ = -24						; size = 4
_item$ = -20						; size = 4
_buffer$ = -16						; size = 4
_category$ = -12					; size = 4
_originator$ = -8					; size = 4
_side$ = -4						; size = 4
?update_speech_buffers@@YGXXZ PROC			; update_speech_buffers, COMDAT

; 506  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 507  : 	int
; 508  : 		side,
; 509  : 		originator,
; 510  : 		category;
; 511  : 
; 512  : 	speech_system_type
; 513  : 		*buffer;
; 514  : 
; 515  : 	speech_system_queue_type
; 516  : 		*item,
; 517  : 		*next;
; 518  : 
; 519  : 	if (get_comms_model () != COMMS_MODEL_SERVER)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00010	74 05		 je	 SHORT $LN13@update_spe

; 520  : 	{
; 521  : 		return;

  00012	e9 22 02 00 00	 jmp	 $LN1@update_spe
$LN13@update_spe:

; 522  : 	}
; 523  : 
; 524  : 	for (side = 0; side < NUM_ENTITY_SIDES; side ++)

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@update_spe
$LN2@update_spe:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _side$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 fc	 mov	 DWORD PTR _side$[ebp], eax
$LN4@update_spe:
  00029	83 7d fc 03	 cmp	 DWORD PTR _side$[ebp], 3
  0002d	0f 8d 06 02 00
	00		 jge	 $LN3@update_spe

; 525  : 	{
; 526  : 		for (originator = 0; originator < NUM_SPEECH_ORIGINATOR_TYPES; originator ++)

  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _originator$[ebp], 0
  0003a	eb 09		 jmp	 SHORT $LN7@update_spe
$LN5@update_spe:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _originator$[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 f8	 mov	 DWORD PTR _originator$[ebp], eax
$LN7@update_spe:
  00045	83 7d f8 07	 cmp	 DWORD PTR _originator$[ebp], 7
  00049	0f 8d e5 01 00
	00		 jge	 $LN6@update_spe

; 527  : 		{
; 528  : 			buffer = &speech_buffer [side][originator];

  0004f	69 45 fc 84 02
	00 00		 imul	 eax, DWORD PTR _side$[ebp], 644
  00056	6b 4d f8 5c	 imul	 ecx, DWORD PTR _originator$[ebp], 92
  0005a	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_buffer@@3PAY06USPEECH_SYSTEM_TYPE@@A[eax+ecx]
  00061	89 55 f0	 mov	 DWORD PTR _buffer$[ebp], edx

; 529  : 
; 530  : 			ASSERT (buffer);

  00064	83 7d f0 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00068	75 18		 jne	 SHORT $LN14@update_spe
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_speech_buffers@@YGXXZ@4JA
  0006f	83 c0 18	 add	 eax, 24			; 00000018H
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  0007d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@update_spe:

; 531  : 
; 532  : 			//
; 533  : 			// Check to see if current speech finished...
; 534  : 			//
; 535  : 
; 536  : 			buffer->current.timer -= get_delta_time ();

  00082	8b 45 f0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00085	f3 0f 10 40 58	 movss	 xmm0, DWORD PTR [eax+88]
  0008a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00095	f3 0f 11 41 58	 movss	 DWORD PTR [ecx+88], xmm0

; 537  : 
; 538  : 			if (buffer->current.timer < 0.0)

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _buffer$[ebp]
  0009d	f3 0f 5a 40 58	 cvtss2sd xmm0, DWORD PTR [eax+88]
  000a2	0f 57 c9	 xorps	 xmm1, xmm1
  000a5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000a9	76 18		 jbe	 SHORT $LN15@update_spe

; 539  : 			{
; 540  : 				buffer->current.timer = 0.0;

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _buffer$[ebp]
  000ae	0f 57 c0	 xorps	 xmm0, xmm0
  000b1	f3 0f 11 40 58	 movss	 DWORD PTR [eax+88], xmm0

; 541  : 
; 542  : 				//
; 543  : 				// play next speech
; 544  : 				//
; 545  : 
; 546  : 				play_buffered_speech ((entity_sides) side, (speech_originator_types) originator);

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _originator$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _side$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ?play_buffered_speech@@YGPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@@Z ; play_buffered_speech
$LN15@update_spe:

; 547  : 			}
; 548  : 
; 549  : 			//
; 550  : 			// update queue timers
; 551  : 			//
; 552  : 
; 553  : 			item = buffer->queue;

  000c3	8b 45 f0	 mov	 eax, DWORD PTR _buffer$[ebp]
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	89 4d ec	 mov	 DWORD PTR _item$[ebp], ecx
$LN8@update_spe:

; 554  : 
; 555  : 			while (item)

  000cb	83 7d ec 00	 cmp	 DWORD PTR _item$[ebp], 0
  000cf	0f 84 f8 00 00
	00		 je	 $LN9@update_spe

; 556  : 			{
; 557  : 				next = item->next;

  000d5	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  000d8	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000db	89 4d e8	 mov	 DWORD PTR _next$[ebp], ecx

; 558  : 
; 559  : 				if (item->expire_time < buffer->exclude_list [item->category].timer)

  000de	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  000e1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e4	8b 55 f0	 mov	 edx, DWORD PTR _buffer$[ebp]
  000e7	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  000ea	f3 0f 10 44 8a
	04		 movss	 xmm0, DWORD PTR [edx+ecx*4+4]
  000f0	0f 2f 40 28	 comiss	 xmm0, DWORD PTR [eax+40]
  000f4	76 16		 jbe	 SHORT $LN16@update_spe

; 560  : 				{
; 561  : 					remove_speech_from_list ((entity_sides) side, (speech_originator_types) originator, item);

  000f6	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d f8	 mov	 ecx, DWORD PTR _originator$[ebp]
  000fd	51		 push	 ecx
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _side$[ebp]
  00101	52		 push	 edx
  00102	e8 00 00 00 00	 call	 ?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z ; remove_speech_from_list

; 562  : 				}
; 563  : 				else

  00107	e9 b6 00 00 00	 jmp	 $LN19@update_spe
$LN16@update_spe:

; 564  : 				{
; 565  : 					item->delay -= get_delta_time ();

  0010c	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  0010f	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00114	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _item$[ebp]
  0011f	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 566  : 
; 567  : 					item->delay = max (item->delay, 0.0f);

  00124	0f 57 c0	 xorps	 xmm0, xmm0
  00127	f3 0f 11 45 a4	 movss	 DWORD PTR $T4[ebp], xmm0
  0012c	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
  0012f	50		 push	 eax
  00130	8b 4d ec	 mov	 ecx, DWORD PTR _item$[ebp]
  00133	83 c1 20	 add	 ecx, 32			; 00000020H
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0013c	8b 55 ec	 mov	 edx, DWORD PTR _item$[ebp]
  0013f	8b 00		 mov	 eax, DWORD PTR [eax]
  00141	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 568  : 
; 569  : 					item->expire_time -= get_delta_time ();

  00144	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  00147	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  0014c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00154	8b 4d ec	 mov	 ecx, DWORD PTR _item$[ebp]
  00157	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0

; 570  : 
; 571  : 					if (item->category_silence_timer > 0.0)

  0015c	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  0015f	f3 0f 5a 40 2c	 cvtss2sd xmm0, DWORD PTR [eax+44]
  00164	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0016c	76 32		 jbe	 SHORT $LN18@update_spe

; 572  : 					{
; 573  : 						item->category_silence_timer = max (0.0f, item->category_silence_timer - get_delta_time ());

  0016e	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  00171	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00176	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0017e	f3 0f 11 45 a0	 movss	 DWORD PTR $T3[ebp], xmm0
  00183	0f 57 c0	 xorps	 xmm0, xmm0
  00186	f3 0f 11 45 9c	 movss	 DWORD PTR $T2[ebp], xmm0
  0018b	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  0018e	51		 push	 ecx
  0018f	8d 55 9c	 lea	 edx, DWORD PTR $T2[ebp]
  00192	52		 push	 edx
  00193	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00198	8b 4d ec	 mov	 ecx, DWORD PTR _item$[ebp]
  0019b	8b 10		 mov	 edx, DWORD PTR [eax]
  0019d	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
$LN18@update_spe:

; 574  : 					}
; 575  : 
; 576  : 					if (item->expire_time < 0.0)

  001a0	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  001a3	f3 0f 5a 40 28	 cvtss2sd xmm0, DWORD PTR [eax+40]
  001a8	0f 57 c9	 xorps	 xmm1, xmm1
  001ab	66 0f 2f c8	 comisd	 xmm1, xmm0
  001af	76 11		 jbe	 SHORT $LN19@update_spe

; 577  : 					{
; 578  : 						remove_speech_from_list ((entity_sides) side, (speech_originator_types) originator, item);

  001b1	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  001b4	50		 push	 eax
  001b5	8b 4d f8	 mov	 ecx, DWORD PTR _originator$[ebp]
  001b8	51		 push	 ecx
  001b9	8b 55 fc	 mov	 edx, DWORD PTR _side$[ebp]
  001bc	52		 push	 edx
  001bd	e8 00 00 00 00	 call	 ?remove_speech_from_list@@YGXW4ENTITY_SIDES@@W4speech_originator_types@@PAUSPEECH_SYSTEM_QUEUE_TYPE@@@Z ; remove_speech_from_list
$LN19@update_spe:

; 579  : 					}
; 580  : 				}
; 581  : 
; 582  : 				item = next;

  001c2	8b 45 e8	 mov	 eax, DWORD PTR _next$[ebp]
  001c5	89 45 ec	 mov	 DWORD PTR _item$[ebp], eax

; 583  : 			}

  001c8	e9 fe fe ff ff	 jmp	 $LN8@update_spe
$LN9@update_spe:

; 584  : 
; 585  : 			//
; 586  : 			// update exclude timers
; 587  : 			//
; 588  : 
; 589  : 			for (category = 0; category < NUM_SPEECH_CATEGORY_TYPES; category ++)

  001cd	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _category$[ebp], 0
  001d4	eb 09		 jmp	 SHORT $LN12@update_spe
$LN10@update_spe:
  001d6	8b 45 f4	 mov	 eax, DWORD PTR _category$[ebp]
  001d9	83 c0 01	 add	 eax, 1
  001dc	89 45 f4	 mov	 DWORD PTR _category$[ebp], eax
$LN12@update_spe:
  001df	83 7d f4 15	 cmp	 DWORD PTR _category$[ebp], 21 ; 00000015H
  001e3	7d 4a		 jge	 SHORT $LN11@update_spe

; 590  : 			{
; 591  : 				buffer->exclude_list [category].timer -= get_delta_time ();

  001e5	8b 45 f4	 mov	 eax, DWORD PTR _category$[ebp]
  001e8	8b 4d f0	 mov	 ecx, DWORD PTR _buffer$[ebp]
  001eb	f3 0f 10 44 81
	04		 movss	 xmm0, DWORD PTR [ecx+eax*4+4]
  001f1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  001f9	8b 55 f4	 mov	 edx, DWORD PTR _category$[ebp]
  001fc	8b 45 f0	 mov	 eax, DWORD PTR _buffer$[ebp]
  001ff	f3 0f 11 44 90
	04		 movss	 DWORD PTR [eax+edx*4+4], xmm0

; 592  : 
; 593  : 				buffer->exclude_list [category].timer = max (buffer->exclude_list [category].timer, 0.0f);

  00205	0f 57 c0	 xorps	 xmm0, xmm0
  00208	f3 0f 11 45 98	 movss	 DWORD PTR $T1[ebp], xmm0
  0020d	8d 45 98	 lea	 eax, DWORD PTR $T1[ebp]
  00210	50		 push	 eax
  00211	8b 4d f4	 mov	 ecx, DWORD PTR _category$[ebp]
  00214	8b 55 f0	 mov	 edx, DWORD PTR _buffer$[ebp]
  00217	8d 44 8a 04	 lea	 eax, DWORD PTR [edx+ecx*4+4]
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00221	8b 4d f4	 mov	 ecx, DWORD PTR _category$[ebp]
  00224	8b 55 f0	 mov	 edx, DWORD PTR _buffer$[ebp]
  00227	8b 00		 mov	 eax, DWORD PTR [eax]
  00229	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 594  : 			}

  0022d	eb a7		 jmp	 SHORT $LN10@update_spe
$LN11@update_spe:

; 595  : 		}

  0022f	e9 08 fe ff ff	 jmp	 $LN5@update_spe
$LN6@update_spe:

; 596  : 	}

  00234	e9 e7 fd ff ff	 jmp	 $LN2@update_spe
$LN3@update_spe:
$LN1@update_spe:

; 597  : }

  00239	5f		 pop	 edi
  0023a	5e		 pop	 esi
  0023b	5b		 pop	 ebx
  0023c	8b e5		 mov	 esp, ebp
  0023e	5d		 pop	 ebp
  0023f	c3		 ret	 0
?update_speech_buffers@@YGXXZ ENDP			; update_speech_buffers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\speech.c
;	COMDAT ?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ
_TEXT	SEGMENT
tv141 = -156						; size = 4
tv133 = -152						; size = 4
_array_type$ = -80					; size = 4
_sample_list$ = -76					; size = 60
_pos$ = -16						; size = 4
_speech_index$ = -12					; size = 4
_count$ = -8						; size = 4
_pargs$ = -4						; size = 4
_parent$ = 8						; size = 4
_sender$ = 12						; size = 4
_side$ = 16						; size = 4
_sub_type$ = 20						; size = 4
_locality$ = 24						; size = 4
_delay$ = 28						; size = 4
_priority$ = 32						; size = 4
_expire_time$ = 36					; size = 4
_originator$ = 40					; size = 4
_category$ = 44						; size = 4
_category_silence_timer$ = 48				; size = 4
?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ PROC ; play_client_server_speech, COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 767  : 	va_list
; 768  : 		pargs;
; 769  : 
; 770  : 	int
; 771  : 		count,
; 772  : 		speech_index;
; 773  : 
; 774  : 	vec3d
; 775  : 		*pos;
; 776  : 
; 777  : 	sound_sample_indices
; 778  : 		sample_list [MAX_SEQUENCED_SAMPLES];
; 779  : 
; 780  : 	speech_array_types
; 781  : 		array_type;
; 782  : 
; 783  : 	ASSERT (get_comms_model () == COMMS_MODEL_SERVER);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00013	74 18		 je	 SHORT $LN4@play_clien
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  0001a	83 c0 11	 add	 eax, 17			; 00000011H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DMBLBJBK@get_comms_model?5?$CI?$CJ?5?$DN?$DN?5COMMS_MOD@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@play_clien:

; 784  : 
; 785  : 	ASSERT (parent);

  0002d	83 7d 08 00	 cmp	 DWORD PTR _parent$[ebp], 0
  00031	75 18		 jne	 SHORT $LN5@play_clien
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  00038	83 c0 13	 add	 eax, 19			; 00000013H
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_06MLKDMCBD@parent@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@play_clien:

; 786  : 
; 787  : 	ASSERT (side < NUM_ENTITY_SIDES);

  0004b	83 7d 10 03	 cmp	 DWORD PTR _side$[ebp], 3
  0004f	7c 18		 jl	 SHORT $LN6@play_clien
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  00056	83 c0 15	 add	 eax, 21			; 00000015H
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PLFJLGPL@side?5?$DM?5NUM_ENTITY_SIDES@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@play_clien:

; 788  : 
; 789  : 	ASSERT (locality < NUM_SOUND_LOCALITY_TYPES);

  00069	83 7d 18 03	 cmp	 DWORD PTR _locality$[ebp], 3
  0006d	7c 18		 jl	 SHORT $LN7@play_clien
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  00074	83 c0 17	 add	 eax, 23			; 00000017H
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@EEBFMDIK@locality?5?$DM?5NUM_SOUND_LOCALITY_T@
  00082	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@play_clien:

; 790  : 
; 791  : 	ASSERT (originator < NUM_SPEECH_ORIGINATOR_TYPES);

  00087	83 7d 28 07	 cmp	 DWORD PTR _originator$[ebp], 7
  0008b	7c 18		 jl	 SHORT $LN8@play_clien
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  00092	83 c0 19	 add	 eax, 25			; 00000019H
  00095	50		 push	 eax
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HGFDECMA@originator?5?$DM?5NUM_SPEECH_ORIGINA@
  000a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@play_clien:

; 792  : 
; 793  : 	ASSERT (category < NUM_SPEECH_CATEGORY_TYPES);

  000a5	83 7d 2c 15	 cmp	 DWORD PTR _category$[ebp], 21 ; 00000015H
  000a9	7c 18		 jl	 SHORT $LN9@play_clien
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  000b0	83 c0 1b	 add	 eax, 27			; 0000001bH
  000b3	50		 push	 eax
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IKCDNKLJ@category?5?$DM?5NUM_SPEECH_CATEGORY_@
  000be	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@play_clien:

; 794  : 
; 795  : 	count = 0;

  000c3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 796  : 
; 797  : 	if (sender)

  000ca	83 7d 0c 00	 cmp	 DWORD PTR _sender$[ebp], 0
  000ce	0f 84 91 00 00
	00		 je	 $LN10@play_clien

; 798  : 	{
; 799  : 		pos = get_local_entity_vec3d_ptr (sender, VEC3D_TYPE_POSITION);

  000d4	83 7d 0c 00	 cmp	 DWORD PTR _sender$[ebp], 0
  000d8	74 0d		 je	 SHORT $LN23@play_clien
  000da	8b 45 0c	 mov	 eax, DWORD PTR _sender$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv133[ebp], ecx
  000e5	eb 24		 jmp	 SHORT $LN24@play_clien
$LN23@play_clien:
  000e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  000ed	83 c2 21	 add	 edx, 33			; 00000021H
  000f0	52		 push	 edx
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00101	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN24@play_clien:
  0010b	b9 01 00 00 00	 mov	 ecx, 1
  00110	85 c9		 test	 ecx, ecx
  00112	74 0c		 je	 SHORT $LN25@play_clien
  00114	c7 85 64 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv141[ebp], 8
  0011e	eb 24		 jmp	 SHORT $LN26@play_clien
$LN25@play_clien:
  00120	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  00126	83 c2 21	 add	 edx, 33			; 00000021H
  00129	52		 push	 edx
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0013a	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN26@play_clien:
  00144	6a 08		 push	 8
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _sender$[ebp]
  00149	51		 push	 ecx
  0014a	6b 95 68 ff ff
	ff 60		 imul	 edx, DWORD PTR tv133[ebp], 96
  00151	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  00157	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0015e	ff d1		 call	 ecx
  00160	89 45 f0	 mov	 DWORD PTR _pos$[ebp], eax

; 800  : 	}
; 801  : 	else

  00163	eb 07		 jmp	 SHORT $LN11@play_clien
$LN10@play_clien:

; 802  : 	{
; 803  : 		pos = NULL;

  00165	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
$LN11@play_clien:

; 804  : 	}
; 805  : 
; 806  : 	va_start (pargs, category_silence_timer);

  0016c	8d 45 34	 lea	 eax, DWORD PTR _category_silence_timer$[ebp+4]
  0016f	89 45 fc	 mov	 DWORD PTR _pargs$[ebp], eax

; 807  : 
; 808  : 	array_type = (speech_array_types) va_arg (pargs, int);

  00172	8b 45 fc	 mov	 eax, DWORD PTR _pargs$[ebp]
  00175	83 c0 04	 add	 eax, 4
  00178	89 45 fc	 mov	 DWORD PTR _pargs$[ebp], eax
  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _pargs$[ebp]
  0017e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00181	89 55 b0	 mov	 DWORD PTR _array_type$[ebp], edx
$LN2@play_clien:

; 809  : 
; 810  : 	while (array_type != -1)

  00184	83 7d b0 ff	 cmp	 DWORD PTR _array_type$[ebp], -1
  00188	0f 84 fb 00 00
	00		 je	 $LN3@play_clien

; 811  : 	{
; 812  : 		ASSERT (array_type < NUM_SPEECH_ARRAY_TYPES);

  0018e	83 7d b0 0a	 cmp	 DWORD PTR _array_type$[ebp], 10 ; 0000000aH
  00192	7c 18		 jl	 SHORT $LN12@play_clien
  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  00199	83 c0 2e	 add	 eax, 46			; 0000002eH
  0019c	50		 push	 eax
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NOGCAHEJ@array_type?5?$DM?5NUM_SPEECH_ARRAY_T@
  001a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@play_clien:

; 813  : 
; 814  : 		speech_index = va_arg (pargs, int);

  001ac	8b 45 fc	 mov	 eax, DWORD PTR _pargs$[ebp]
  001af	83 c0 04	 add	 eax, 4
  001b2	89 45 fc	 mov	 DWORD PTR _pargs$[ebp], eax
  001b5	8b 4d fc	 mov	 ecx, DWORD PTR _pargs$[ebp]
  001b8	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  001bb	89 55 f4	 mov	 DWORD PTR _speech_index$[ebp], edx

; 815  : 
; 816  : 		ASSERT (speech_index >= 0);

  001be	83 7d f4 00	 cmp	 DWORD PTR _speech_index$[ebp], 0
  001c2	7d 18		 jge	 SHORT $LN13@play_clien
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  001c9	83 c0 32	 add	 eax, 50			; 00000032H
  001cc	50		 push	 eax
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FJPPFFFF@speech_index?5?$DO?$DN?50@
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@play_clien:

; 817  : 
; 818  : 		ASSERT (speech_index < speech_index_table [array_type][originator][side].num_items);

  001dc	69 45 b0 a8 00
	00 00		 imul	 eax, DWORD PTR _array_type$[ebp], 168
  001e3	6b 4d 28 18	 imul	 ecx, DWORD PTR _originator$[ebp], 24
  001e7	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  001ee	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  001f1	8b 4d f4	 mov	 ecx, DWORD PTR _speech_index$[ebp]
  001f4	3b 0c c2	 cmp	 ecx, DWORD PTR [edx+eax*8]
  001f7	7c 18		 jl	 SHORT $LN14@play_clien
  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ@4JA
  001fe	83 c0 34	 add	 eax, 52			; 00000034H
  00201	50		 push	 eax
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PAKJCLOG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00207	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@KOOFKCEE@speech_index?5?$DM?5speech_index_tab@
  0020c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@play_clien:

; 819  : 
; 820  : 		sample_list [count] = speech_index_table [array_type][originator][side].sample_indices [speech_index];

  00211	69 45 b0 a8 00
	00 00		 imul	 eax, DWORD PTR _array_type$[ebp], 168
  00218	6b 4d 28 18	 imul	 ecx, DWORD PTR _originator$[ebp], 24
  0021c	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?speech_index_table@@3PAY162USPEECH_INDEX_LIST_TYPE@@A[eax+ecx]
  00223	8b 45 10	 mov	 eax, DWORD PTR _side$[ebp]
  00226	8b 4c c2 04	 mov	 ecx, DWORD PTR [edx+eax*8+4]
  0022a	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  0022d	8b 45 f4	 mov	 eax, DWORD PTR _speech_index$[ebp]
  00230	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00233	89 4c 95 b4	 mov	 DWORD PTR _sample_list$[ebp+edx*4], ecx

; 821  : 
; 822  : 		if (sample_list [count] != SOUND_SAMPLE_INDEX_NONE)

  00237	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  0023a	83 7c 85 b4 00	 cmp	 DWORD PTR _sample_list$[ebp+eax*4], 0
  0023f	74 1c		 je	 SHORT $LN16@play_clien

; 823  : 		{
; 824  : 			if (application_sound_effects [sample_list [count]].size > 0)

  00241	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00244	8b 4c 85 b4	 mov	 ecx, DWORD PTR _sample_list$[ebp+eax*4]
  00248	c1 e1 05	 shl	 ecx, 5
  0024b	83 b9 0c 00 00
	00 00		 cmp	 DWORD PTR ?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A[ecx+12], 0
  00252	7e 09		 jle	 SHORT $LN16@play_clien

; 825  : 			{
; 826  : 				count ++;

  00254	8b 45 f8	 mov	 eax, DWORD PTR _count$[ebp]
  00257	83 c0 01	 add	 eax, 1
  0025a	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN16@play_clien:

; 827  : 			}
; 828  : 		}
; 829  : 
; 830  : 		if (count >= MAX_SEQUENCED_SAMPLES)

  0025d	83 7d f8 0f	 cmp	 DWORD PTR _count$[ebp], 15 ; 0000000fH
  00261	7c 0f		 jl	 SHORT $LN17@play_clien

; 831  : 		{
; 832  : 			debug_fatal ("SPEECH : More than %d samples in speech list", MAX_SEQUENCED_SAMPLES);

  00263	6a 0f		 push	 15			; 0000000fH
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@JNCIKIDM@SPEECH?5?3?5More?5than?5?$CFd?5samples?5i@
  0026a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0026f	83 c4 08	 add	 esp, 8
$LN17@play_clien:

; 833  : 		}
; 834  : 
; 835  : 		array_type = (speech_array_types) va_arg (pargs, int);

  00272	8b 45 fc	 mov	 eax, DWORD PTR _pargs$[ebp]
  00275	83 c0 04	 add	 eax, 4
  00278	89 45 fc	 mov	 DWORD PTR _pargs$[ebp], eax
  0027b	8b 4d fc	 mov	 ecx, DWORD PTR _pargs$[ebp]
  0027e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00281	89 55 b0	 mov	 DWORD PTR _array_type$[ebp], edx

; 836  : 	}

  00284	e9 fb fe ff ff	 jmp	 $LN2@play_clien
$LN3@play_clien:

; 837  : 
; 838  : 	va_end (pargs);

  00289	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pargs$[ebp], 0

; 839  : 
; 840  : 	if (count == 0)

  00290	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00294	75 04		 jne	 SHORT $LN18@play_clien

; 841  : 	{
; 842  : 		return FALSE;

  00296	33 c0		 xor	 eax, eax
  00298	eb 71		 jmp	 SHORT $LN21@play_clien
$LN18@play_clien:

; 843  : 	}
; 844  : 
; 845  : 	//
; 846  : 	// Biggest Bodge In The Whole World Ever.....
; 847  : 	//
; 848  : 
; 849  : 	if (originator == SPEECH_ORIGINATOR_WINGMAN2)

  0029a	83 7d 28 03	 cmp	 DWORD PTR _originator$[ebp], 3
  0029e	75 07		 jne	 SHORT $LN19@play_clien

; 850  : 	{
; 851  : 		originator = SPEECH_ORIGINATOR_WINGMAN1;

  002a0	c7 45 28 02 00
	00 00		 mov	 DWORD PTR _originator$[ebp], 2
$LN19@play_clien:

; 852  : 	}
; 853  : 
; 854  : 	//
; 855  : 	// Insert into queue
; 856  : 	//
; 857  : 
; 858  : 	if (add_speech_to_list (parent, side, originator, sub_type, category, locality, pos, delay, priority, expire_time, category_silence_timer, count, sample_list))

  002a7	8d 45 b4	 lea	 eax, DWORD PTR _sample_list$[ebp]
  002aa	50		 push	 eax
  002ab	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  002ae	51		 push	 ecx
  002af	51		 push	 ecx
  002b0	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _category_silence_timer$[ebp]
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	51		 push	 ecx
  002bb	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _expire_time$[ebp]
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	51		 push	 ecx
  002c6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _priority$[ebp]
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	51		 push	 ecx
  002d1	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _delay$[ebp]
  002d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002db	8b 55 f0	 mov	 edx, DWORD PTR _pos$[ebp]
  002de	52		 push	 edx
  002df	8b 45 18	 mov	 eax, DWORD PTR _locality$[ebp]
  002e2	50		 push	 eax
  002e3	8b 4d 2c	 mov	 ecx, DWORD PTR _category$[ebp]
  002e6	51		 push	 ecx
  002e7	8b 55 14	 mov	 edx, DWORD PTR _sub_type$[ebp]
  002ea	52		 push	 edx
  002eb	8b 45 28	 mov	 eax, DWORD PTR _originator$[ebp]
  002ee	50		 push	 eax
  002ef	8b 4d 10	 mov	 ecx, DWORD PTR _side$[ebp]
  002f2	51		 push	 ecx
  002f3	8b 55 08	 mov	 edx, DWORD PTR _parent$[ebp]
  002f6	52		 push	 edx
  002f7	e8 00 00 00 00	 call	 ?add_speech_to_list@@YGHPAUENTITY@@W4ENTITY_SIDES@@W4speech_originator_types@@HW4speech_category_types@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMMMHPAH@Z ; add_speech_to_list
  002fc	85 c0		 test	 eax, eax
  002fe	74 09		 je	 SHORT $LN20@play_clien

; 859  : 	{
; 860  : 		return TRUE;

  00300	b8 01 00 00 00	 mov	 eax, 1
  00305	eb 04		 jmp	 SHORT $LN21@play_clien

; 861  : 	}
; 862  : 	else

  00307	eb 02		 jmp	 SHORT $LN21@play_clien
$LN20@play_clien:

; 863  : 	{
; 864  : 		return FALSE;

  00309	33 c0		 xor	 eax, eax
$LN21@play_clien:

; 865  : 	}
; 866  : }

  0030b	5f		 pop	 edi
  0030c	5e		 pop	 esi
  0030d	5b		 pop	 ebx
  0030e	8b e5		 mov	 esp, ebp
  00310	5d		 pop	 ebp
  00311	c3		 ret	 0
?play_client_server_speech@@YAHPAUENTITY@@0W4ENTITY_SIDES@@HW4SOUND_LOCALITY_TYPES@@MMMW4speech_originator_types@@W4speech_category_types@@MZZ ENDP ; play_client_server_speech
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
