; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\events\userdef.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?user_defined_events_strings@@3PAPADA		; user_defined_events_strings
PUBLIC	??_C@_0O@PGEPMNEN@COLLECTIVE_UP@		; `string'
PUBLIC	??_C@_0BA@PCPBNKEP@COLLECTIVE_DOWN@		; `string'
PUBLIC	??_C@_0M@KIOPILOE@CYCLIC_LEFT@			; `string'
PUBLIC	??_C@_0N@CILEOCCB@CYCLIC_RIGHT@			; `string'
PUBLIC	??_C@_09OHBGNBMC@CYCLIC_UP@			; `string'
PUBLIC	??_C@_0M@FKOLBDNN@CYCLIC_DOWN@			; `string'
PUBLIC	??_C@_0L@BHGGBOOB@PEDAL_LEFT@			; `string'
PUBLIC	??_C@_0M@FIGBJPDL@PEDAL_RIGHT@			; `string'
PUBLIC	??_C@_0M@FBNGGHHG@FIRE_WEAPON@			; `string'
PUBLIC	??_C@_0BI@GJCNPEMM@MAX_USER_DEFINED_EVENTS@	; `string'
PUBLIC	?user_defined_keys@@3PAUUSER_DEFINED_KEY_TYPE@@A ; user_defined_keys
_BSS	SEGMENT
?user_defined_keys@@3PAUUSER_DEFINED_KEY_TYPE@@A DD 01H DUP (?) ; user_defined_keys
_BSS	ENDS
;	COMDAT ??_C@_0BI@GJCNPEMM@MAX_USER_DEFINED_EVENTS@
CONST	SEGMENT
??_C@_0BI@GJCNPEMM@MAX_USER_DEFINED_EVENTS@ DB 'MAX_USER_DEFINED_EVENTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FBNGGHHG@FIRE_WEAPON@
CONST	SEGMENT
??_C@_0M@FBNGGHHG@FIRE_WEAPON@ DB 'FIRE_WEAPON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FIGBJPDL@PEDAL_RIGHT@
CONST	SEGMENT
??_C@_0M@FIGBJPDL@PEDAL_RIGHT@ DB 'PEDAL_RIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BHGGBOOB@PEDAL_LEFT@
CONST	SEGMENT
??_C@_0L@BHGGBOOB@PEDAL_LEFT@ DB 'PEDAL_LEFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKOLBDNN@CYCLIC_DOWN@
CONST	SEGMENT
??_C@_0M@FKOLBDNN@CYCLIC_DOWN@ DB 'CYCLIC_DOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OHBGNBMC@CYCLIC_UP@
CONST	SEGMENT
??_C@_09OHBGNBMC@CYCLIC_UP@ DB 'CYCLIC_UP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CILEOCCB@CYCLIC_RIGHT@
CONST	SEGMENT
??_C@_0N@CILEOCCB@CYCLIC_RIGHT@ DB 'CYCLIC_RIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIOPILOE@CYCLIC_LEFT@
CONST	SEGMENT
??_C@_0M@KIOPILOE@CYCLIC_LEFT@ DB 'CYCLIC_LEFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PCPBNKEP@COLLECTIVE_DOWN@
CONST	SEGMENT
??_C@_0BA@PCPBNKEP@COLLECTIVE_DOWN@ DB 'COLLECTIVE_DOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PGEPMNEN@COLLECTIVE_UP@
CONST	SEGMENT
??_C@_0O@PGEPMNEN@COLLECTIVE_UP@ DB 'COLLECTIVE_UP', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?user_defined_events_strings@@3PAPADA DD FLAT:??_C@_0O@PGEPMNEN@COLLECTIVE_UP@ ; user_defined_events_strings
	DD	FLAT:??_C@_0BA@PCPBNKEP@COLLECTIVE_DOWN@
	DD	FLAT:??_C@_0M@KIOPILOE@CYCLIC_LEFT@
	DD	FLAT:??_C@_0N@CILEOCCB@CYCLIC_RIGHT@
	DD	FLAT:??_C@_09OHBGNBMC@CYCLIC_UP@
	DD	FLAT:??_C@_0M@FKOLBDNN@CYCLIC_DOWN@
	DD	FLAT:??_C@_0L@BHGGBOOB@PEDAL_LEFT@
	DD	FLAT:??_C@_0M@FIGBJPDL@PEDAL_RIGHT@
	DD	FLAT:??_C@_0M@FBNGGHHG@FIRE_WEAPON@
	DD	FLAT:??_C@_0BI@GJCNPEMM@MAX_USER_DEFINED_EVENTS@
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vfscanf_l
PUBLIC	_fscanf
PUBLIC	?initialise_user_defined_events@@YGXXZ		; initialise_user_defined_events
PUBLIC	?process_user_defined_flight_events@@YGXXZ	; process_user_defined_flight_events
PUBLIC	?create_user_defined_file@@YGXXZ		; create_user_defined_file
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0M@MHCNNELG@userdef?4key@			; `string'
PUBLIC	??_C@_08EPEHIMMI@?$CFs?5?$CFs?5?$CFs@		; `string'
PUBLIC	??_C@_0BG@DJGPHEHF@USER?5DEFINED?5?$CFs?$DN?$CFs?5?$CFs@ ; `string'
PUBLIC	??_C@_0DC@PKOILDLC@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Unkn@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0BF@PNMEHLFC@COLLECTIVE_UP?5?$CFc?5?$CFc?6@ ; `string'
PUBLIC	??_C@_0BH@FEBNHJHK@COLLECTIVE_DOWN?5?$CFc?5?$CFc?6@ ; `string'
PUBLIC	??_C@_0BD@KNADODJJ@CYCLIC_LEFT?5?$CFc?5?$CFc?6@	; `string'
PUBLIC	??_C@_0BE@LOEHEFMG@CYCLIC_RIGHT?5?$CFc?5?$CFc?6@ ; `string'
PUBLIC	??_C@_0BG@GHDMAGFP@CYCLIC_FORWARD?5?$CFc?5?$CFc?6@ ; `string'
PUBLIC	??_C@_0BH@MFHOILCK@CYCLIC_BACKWARD?5?$CFc?5?$CFc?6@ ; `string'
PUBLIC	??_C@_0BC@ELHHMHOB@PEDAL_LEFT?5?$CFc?5?$CFc?6@	; `string'
PUBLIC	??_C@_0BD@OAHPMIOM@PEDAL_RIGHT?5?$CFc?5?$CFc?6@	; `string'
PUBLIC	??_C@_0BD@ODINNMKP@FIRE_WEAPON?5?$CFc?5?$CFc?6@	; `string'
PUBLIC	??_C@_0CN@BIBEELLA@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Can?8@ ; `string'
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z:PROC	; set_event
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?cyclic_left@@YGXPAUEVENT@@@Z:PROC		; cyclic_left
EXTRN	?cyclic_right@@YGXPAUEVENT@@@Z:PROC		; cyclic_right
EXTRN	?cyclic_forward@@YGXPAUEVENT@@@Z:PROC		; cyclic_forward
EXTRN	?cyclic_backward@@YGXPAUEVENT@@@Z:PROC		; cyclic_backward
EXTRN	?collective_forward@@YGXPAUEVENT@@@Z:PROC	; collective_forward
EXTRN	?collective_backward@@YGXPAUEVENT@@@Z:PROC	; collective_backward
EXTRN	?pedal_left@@YGXPAUEVENT@@@Z:PROC		; pedal_left
EXTRN	?pedal_right@@YGXPAUEVENT@@@Z:PROC		; pedal_right
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0CN@BIBEELLA@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Can?8@
CONST	SEGMENT
??_C@_0CN@BIBEELLA@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Can?8@ DB 'USER DEF'
	DB	'INED KEY : ERROR : Can''t create file', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ODINNMKP@FIRE_WEAPON?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BD@ODINNMKP@FIRE_WEAPON?5?$CFc?5?$CFc?6@ DB 'FIRE_WEAPON %c %c', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OAHPMIOM@PEDAL_RIGHT?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BD@OAHPMIOM@PEDAL_RIGHT?5?$CFc?5?$CFc?6@ DB 'PEDAL_RIGHT %c %c', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ELHHMHOB@PEDAL_LEFT?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BC@ELHHMHOB@PEDAL_LEFT?5?$CFc?5?$CFc?6@ DB 'PEDAL_LEFT %c %c', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MFHOILCK@CYCLIC_BACKWARD?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BH@MFHOILCK@CYCLIC_BACKWARD?5?$CFc?5?$CFc?6@ DB 'CYCLIC_BACKWARD %'
	DB	'c %c', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GHDMAGFP@CYCLIC_FORWARD?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BG@GHDMAGFP@CYCLIC_FORWARD?5?$CFc?5?$CFc?6@ DB 'CYCLIC_FORWARD %c '
	DB	'%c', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LOEHEFMG@CYCLIC_RIGHT?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BE@LOEHEFMG@CYCLIC_RIGHT?5?$CFc?5?$CFc?6@ DB 'CYCLIC_RIGHT %c %c', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KNADODJJ@CYCLIC_LEFT?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BD@KNADODJJ@CYCLIC_LEFT?5?$CFc?5?$CFc?6@ DB 'CYCLIC_LEFT %c %c', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FEBNHJHK@COLLECTIVE_DOWN?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BH@FEBNHJHK@COLLECTIVE_DOWN?5?$CFc?5?$CFc?6@ DB 'COLLECTIVE_DOWN %'
	DB	'c %c', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PNMEHLFC@COLLECTIVE_UP?5?$CFc?5?$CFc?6@
CONST	SEGMENT
??_C@_0BF@PNMEHLFC@COLLECTIVE_UP?5?$CFc?5?$CFc?6@ DB 'COLLECTIVE_UP %c %c'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PKOILDLC@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Unkn@
CONST	SEGMENT
??_C@_0DC@PKOILDLC@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Unkn@ DB 'USER DEFI'
	DB	'NED KEY : ERROR : Unknown key definition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DJGPHEHF@USER?5DEFINED?5?$CFs?$DN?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_0BG@DJGPHEHF@USER?5DEFINED?5?$CFs?$DN?$CFs?5?$CFs@ DB 'USER DEFINED'
	DB	' %s=%s %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPEHIMMI@?$CFs?5?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_08EPEHIMMI@?$CFs?5?$CFs?5?$CFs@ DB '%s %s %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MHCNNELG@userdef?4key@
CONST	SEGMENT
??_C@_0M@MHCNNELG@userdef?4key@ DB 'userdef.key', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\events\userdef.c
;	COMDAT ?create_user_defined_file@@YGXXZ
_TEXT	SEGMENT
_file_ptr$ = -4						; size = 4
?create_user_defined_file@@YGXXZ PROC			; create_user_defined_file, COMDAT

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 281  : 
; 282  : 	FILE
; 283  : 		*file_ptr;
; 284  : 
; 285  : 	file_ptr = fopen ("userdef.key", "w");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MHCNNELG@userdef?4key@
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00019	83 c4 08	 add	 esp, 8
  0001c	89 45 fc	 mov	 DWORD PTR _file_ptr$[ebp], eax

; 286  : 
; 287  : 	if (file_ptr)

  0001f	83 7d fc 00	 cmp	 DWORD PTR _file_ptr$[ebp], 0
  00023	0f 84 d8 00 00
	00		 je	 $LN2@create_use

; 288  : 	{
; 289  : 
; 290  : 		fprintf (file_ptr, "COLLECTIVE_UP %c %c\n", DIK_Q, MODIFIER_NONE);

  00029	6a 00		 push	 0
  0002b	6a 10		 push	 16			; 00000010H
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PNMEHLFC@COLLECTIVE_UP?5?$CFc?5?$CFc?6@
  00032	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _fprintf
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 291  : 		fprintf (file_ptr, "COLLECTIVE_DOWN %c %c\n", DIK_A, MODIFIER_NONE);

  0003e	6a 00		 push	 0
  00040	6a 1e		 push	 30			; 0000001eH
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FEBNHJHK@COLLECTIVE_DOWN?5?$CFc?5?$CFc?6@
  00047	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _fprintf
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 292  : 
; 293  : 		fprintf (file_ptr, "CYCLIC_LEFT %c %c\n", DIK_LEFT, MODIFIER_NONE);

  00053	6a 00		 push	 0
  00055	68 cb 00 00 00	 push	 203			; 000000cbH
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KNADODJJ@CYCLIC_LEFT?5?$CFc?5?$CFc?6@
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _fprintf
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 294  : 		fprintf (file_ptr, "CYCLIC_RIGHT %c %c\n", DIK_RIGHT, MODIFIER_NONE);

  0006b	6a 00		 push	 0
  0006d	68 cd 00 00 00	 push	 205			; 000000cdH
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LOEHEFMG@CYCLIC_RIGHT?5?$CFc?5?$CFc?6@
  00077	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _fprintf
  00080	83 c4 10	 add	 esp, 16			; 00000010H

; 295  : 		fprintf (file_ptr, "CYCLIC_FORWARD %c %c\n", DIK_UP, MODIFIER_NONE);

  00083	6a 00		 push	 0
  00085	68 c8 00 00 00	 push	 200			; 000000c8H
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GHDMAGFP@CYCLIC_FORWARD?5?$CFc?5?$CFc?6@
  0008f	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _fprintf
  00098	83 c4 10	 add	 esp, 16			; 00000010H

; 296  : 		fprintf (file_ptr, "CYCLIC_BACKWARD %c %c\n", DIK_DOWN, MODIFIER_NONE);

  0009b	6a 00		 push	 0
  0009d	68 d0 00 00 00	 push	 208			; 000000d0H
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MFHOILCK@CYCLIC_BACKWARD?5?$CFc?5?$CFc?6@
  000a7	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _fprintf
  000b0	83 c4 10	 add	 esp, 16			; 00000010H

; 297  : 		
; 298  : 		fprintf (file_ptr, "PEDAL_LEFT %c %c\n", DIK_Z, MODIFIER_NONE);

  000b3	6a 00		 push	 0
  000b5	6a 2c		 push	 44			; 0000002cH
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ELHHMHOB@PEDAL_LEFT?5?$CFc?5?$CFc?6@
  000bc	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _fprintf
  000c5	83 c4 10	 add	 esp, 16			; 00000010H

; 299  : 		fprintf (file_ptr, "PEDAL_RIGHT %c %c\n", DIK_X, MODIFIER_NONE);

  000c8	6a 00		 push	 0
  000ca	6a 2d		 push	 45			; 0000002dH
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OAHPMIOM@PEDAL_RIGHT?5?$CFc?5?$CFc?6@
  000d1	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _fprintf
  000da	83 c4 10	 add	 esp, 16			; 00000010H

; 300  : 		
; 301  : 		fprintf (file_ptr, "FIRE_WEAPON %c %c\n", DIK_SPACE, MODIFIER_NONE);

  000dd	6a 00		 push	 0
  000df	6a 39		 push	 57			; 00000039H
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@ODINNMKP@FIRE_WEAPON?5?$CFc?5?$CFc?6@
  000e6	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _fprintf
  000ef	83 c4 10	 add	 esp, 16			; 00000010H

; 302  : 
; 303  : 		fclose (file_ptr);

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000f5	50		 push	 eax
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000fc	83 c4 04	 add	 esp, 4

; 304  : 	}
; 305  : 	else

  000ff	eb 0d		 jmp	 SHORT $LN1@create_use
$LN2@create_use:

; 306  : 	{
; 307  : 
; 308  : 		debug_fatal ("USER DEFINED KEY : ERROR : Can't create file");

  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@BIBEELLA@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Can?8@
  00106	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0010b	83 c4 04	 add	 esp, 4
$LN1@create_use:

; 309  : 	}
; 310  : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
?create_user_defined_file@@YGXXZ ENDP			; create_user_defined_file
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\events\userdef.c
;	COMDAT ?process_user_defined_flight_events@@YGXXZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_current_key$ = -4					; size = 4
?process_user_defined_flight_events@@YGXXZ PROC		; process_user_defined_flight_events, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 170  : 
; 171  : 	user_defined_key_type
; 172  : 		*current_key;
; 173  : 
; 174  : 	current_key = user_defined_keys;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?user_defined_keys@@3PAUUSER_DEFINED_KEY_TYPE@@A ; user_defined_keys
  0000e	89 45 fc	 mov	 DWORD PTR _current_key$[ebp], eax
$LN2@process_us:

; 175  : 
; 176  : 	while (current_key)

  00011	83 7d fc 00	 cmp	 DWORD PTR _current_key$[ebp], 0
  00015	0f 84 22 01 00
	00		 je	 $LN1@process_us

; 177  : 	{
; 178  : 
; 179  : 		switch (current_key->ev)

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 4d b8	 mov	 DWORD PTR tv66[ebp], ecx
  00023	83 7d b8 08	 cmp	 DWORD PTR tv66[ebp], 8
  00027	0f 87 f5 00 00
	00		 ja	 $LN15@process_us
  0002d	8b 55 b8	 mov	 edx, DWORD PTR tv66[ebp]
  00030	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN17@process_us[edx*4]
$LN6@process_us:

; 180  : 		{
; 181  : 
; 182  : 			////////////////////////////////////////////////////////////////
; 183  : 
; 184  : 			case COLLECTIVE_UP:
; 185  : 			{
; 186  : 
; 187  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, collective_forward);

  00037	68 00 00 00 00	 push	 OFFSET ?collective_forward@@YGXPAUEVENT@@@Z ; collective_forward
  0003c	6a 03		 push	 3
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  00041	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00044	51		 push	 ecx
  00045	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  00048	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 188  : 
; 189  : 				break;

  00051	e9 d9 00 00 00	 jmp	 $LN4@process_us
$LN7@process_us:

; 190  : 			}
; 191  : 
; 192  : 			case COLLECTIVE_DOWN:
; 193  : 			{
; 194  : 
; 195  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, collective_backward);

  00056	68 00 00 00 00	 push	 OFFSET ?collective_backward@@YGXPAUEVENT@@@Z ; collective_backward
  0005b	6a 03		 push	 3
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  00060	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00063	51		 push	 ecx
  00064	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  00067	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 196  : 
; 197  : 				break;

  00070	e9 ba 00 00 00	 jmp	 $LN4@process_us
$LN8@process_us:

; 198  : 			}
; 199  : 
; 200  : 			////////////////////////////////////////////////////////////////
; 201  : 
; 202  : 			case CYCLIC_LEFT:
; 203  : 			{
; 204  : 
; 205  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, cyclic_left);

  00075	68 00 00 00 00	 push	 OFFSET ?cyclic_left@@YGXPAUEVENT@@@Z ; cyclic_left
  0007a	6a 03		 push	 3
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  0007f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00082	51		 push	 ecx
  00083	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  00086	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 206  : 
; 207  : 				break;

  0008f	e9 9b 00 00 00	 jmp	 $LN4@process_us
$LN9@process_us:

; 208  : 			}
; 209  : 
; 210  : 			case CYCLIC_RIGHT:
; 211  : 			{
; 212  : 				
; 213  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, cyclic_right);

  00094	68 00 00 00 00	 push	 OFFSET ?cyclic_right@@YGXPAUEVENT@@@Z ; cyclic_right
  00099	6a 03		 push	 3
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  0009e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a1	51		 push	 ecx
  000a2	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  000a5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 214  : 
; 215  : 				break;

  000ae	eb 7f		 jmp	 SHORT $LN4@process_us
$LN10@process_us:

; 216  : 			}
; 217  : 
; 218  : 			case CYCLIC_UP:
; 219  : 			{
; 220  : 
; 221  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, cyclic_forward);

  000b0	68 00 00 00 00	 push	 OFFSET ?cyclic_forward@@YGXPAUEVENT@@@Z ; cyclic_forward
  000b5	6a 03		 push	 3
  000b7	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  000ba	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000bd	51		 push	 ecx
  000be	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  000c1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 222  : 
; 223  : 				break;

  000ca	eb 63		 jmp	 SHORT $LN4@process_us
$LN11@process_us:

; 224  : 			}
; 225  : 
; 226  : 			case CYCLIC_DOWN:
; 227  : 			{
; 228  : 
; 229  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, cyclic_backward);

  000cc	68 00 00 00 00	 push	 OFFSET ?cyclic_backward@@YGXPAUEVENT@@@Z ; cyclic_backward
  000d1	6a 03		 push	 3
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  000d6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d9	51		 push	 ecx
  000da	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  000dd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 230  : 
; 231  : 				break;

  000e6	eb 47		 jmp	 SHORT $LN4@process_us
$LN12@process_us:

; 232  : 			}
; 233  : 
; 234  : 			////////////////////////////////////////////////////////////////
; 235  : 
; 236  : 			case PEDAL_LEFT:
; 237  : 			{
; 238  : 
; 239  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, pedal_left);

  000e8	68 00 00 00 00	 push	 OFFSET ?pedal_left@@YGXPAUEVENT@@@Z ; pedal_left
  000ed	6a 03		 push	 3
  000ef	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  000f2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f5	51		 push	 ecx
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  000f9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 240  : 
; 241  : 				break;

  00102	eb 2b		 jmp	 SHORT $LN4@process_us
$LN13@process_us:

; 242  : 			}
; 243  : 
; 244  : 			case PEDAL_RIGHT:
; 245  : 			{
; 246  : 
; 247  : 				set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, pedal_right);

  00104	68 00 00 00 00	 push	 OFFSET ?pedal_right@@YGXPAUEVENT@@@Z ; pedal_right
  00109	6a 03		 push	 3
  0010b	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  0010e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00111	51		 push	 ecx
  00112	8b 55 fc	 mov	 edx, DWORD PTR _current_key$[ebp]
  00115	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 248  : 
; 249  : 				break;

  0011e	eb 0f		 jmp	 SHORT $LN4@process_us
$LN14@process_us:

; 250  : 			}
; 251  : 
; 252  : 			////////////////////////////////////////////////////////////////
; 253  : 
; 254  : 			case FIRE_WEAPON:
; 255  : 			{
; 256  : 
; 257  : 				//set_event (current_key->dik_code, current_key->modifier_dik_code, KEY_STATE_EITHER, fire_cannon_shell_event);
; 258  : 
; 259  : 				break;

  00120	eb 0d		 jmp	 SHORT $LN4@process_us
$LN15@process_us:

; 260  : 			}
; 261  : 
; 262  : 			////////////////////////////////////////////////////////////////
; 263  : 
; 264  : 			default:
; 265  : 			{
; 266  : 
; 267  : 				debug_log ("USER DEFINED KEY : ERROR : Unknown key definition");

  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PKOILDLC@USER?5DEFINED?5KEY?5?3?5ERROR?5?3?5Unkn@
  00127	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0012c	83 c4 04	 add	 esp, 4
$LN4@process_us:

; 268  : 			}
; 269  : 		}
; 270  : 
; 271  : 		current_key = current_key->next;

  0012f	8b 45 fc	 mov	 eax, DWORD PTR _current_key$[ebp]
  00132	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00135	89 4d fc	 mov	 DWORD PTR _current_key$[ebp], ecx

; 272  : 	}

  00138	e9 d4 fe ff ff	 jmp	 $LN2@process_us
$LN1@process_us:

; 273  : }

  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
$LN17@process_us:
  00144	00 00 00 00	 DD	 $LN6@process_us
  00148	00 00 00 00	 DD	 $LN7@process_us
  0014c	00 00 00 00	 DD	 $LN8@process_us
  00150	00 00 00 00	 DD	 $LN9@process_us
  00154	00 00 00 00	 DD	 $LN10@process_us
  00158	00 00 00 00	 DD	 $LN11@process_us
  0015c	00 00 00 00	 DD	 $LN12@process_us
  00160	00 00 00 00	 DD	 $LN13@process_us
  00164	00 00 00 00	 DD	 $LN14@process_us
?process_user_defined_flight_events@@YGXXZ ENDP		; process_user_defined_flight_events
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\events\userdef.c
;	COMDAT ?initialise_user_defined_events@@YGXXZ
_TEXT	SEGMENT
_file_ptr$ = -136					; size = 4
_modifier$ = -132					; size = 10
_key$ = -120						; size = 10
_enum_event$ = -108					; size = 100
_new_user_defined_key$ = -8				; size = 4
_ev$ = -4						; size = 4
?initialise_user_defined_events@@YGXXZ PROC		; initialise_user_defined_events, COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 108  : 
; 109  : 	int
; 110  : 		ev;
; 111  : 
; 112  : 	user_defined_key_type
; 113  : 		*new_user_defined_key;
; 114  : 
; 115  : 	char
; 116  : 		enum_event [100],
; 117  : 		key [10],
; 118  : 		modifier [10];
; 119  : 
; 120  : 	FILE
; 121  : 		*file_ptr;
; 122  : 
; 123  : 	file_ptr = fopen ("userdef.key", "r");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MHCNNELG@userdef?4key@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0001c	83 c4 08	 add	 esp, 8
  0001f	89 85 78 ff ff
	ff		 mov	 DWORD PTR _file_ptr$[ebp], eax

; 124  : 
; 125  : 	if (!file_ptr)

  00025	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _file_ptr$[ebp], 0
  0002c	75 05		 jne	 SHORT $LN2@initialise

; 126  : 	{
; 127  : 
; 128  : 		return;

  0002e	e9 d9 00 00 00	 jmp	 $LN1@initialise
$LN2@initialise:

; 129  : 	}
; 130  : 
; 131  : 	while (fscanf (file_ptr, "%s %s %s", &enum_event, &key, &modifier) != EOF)

  00033	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _modifier$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d 88	 lea	 ecx, DWORD PTR _key$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 94	 lea	 edx, DWORD PTR _enum_event$[ebp]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_08EPEHIMMI@?$CFs?5?$CFs?5?$CFs@
  00047	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _fscanf
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	83 f8 ff	 cmp	 eax, -1
  00059	0f 84 ad 00 00
	00		 je	 $LN1@initialise

; 132  : 	{
; 133  : 
; 134  : 		new_user_defined_key = (user_defined_key_type *) malloc_heap_mem (sizeof (user_defined_key_type));

  0005f	6a 10		 push	 16			; 00000010H
  00061	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00066	89 45 f8	 mov	 DWORD PTR _new_user_defined_key$[ebp], eax

; 135  : 
; 136  : 		ev = COLLECTIVE_UP;

  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ev$[ebp], 0
$LN4@initialise:

; 137  : 
; 138  : 		while (ev != NUM_USER_DEFINED_EVENTS)

  00070	83 7d fc 09	 cmp	 DWORD PTR _ev$[ebp], 9
  00074	0f 84 8d 00 00
	00		 je	 $LN5@initialise

; 139  : 		{
; 140  : 
; 141  : 			if (stricmp (user_defined_events_strings [ev], enum_event) == 0)

  0007a	8d 45 94	 lea	 eax, DWORD PTR _enum_event$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _ev$[ebp]
  00081	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?user_defined_events_strings@@3PAPADA[ecx*4]
  00088	52		 push	 edx
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0008f	83 c4 08	 add	 esp, 8
  00092	85 c0		 test	 eax, eax
  00094	75 63		 jne	 SHORT $LN7@initialise

; 142  : 			{
; 143  : 		
; 144  : 				new_user_defined_key->ev = (user_defined_events) ev;

  00096	8b 45 f8	 mov	 eax, DWORD PTR _new_user_defined_key$[ebp]
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _ev$[ebp]
  0009c	89 08		 mov	 DWORD PTR [eax], ecx

; 145  : 		
; 146  : 				new_user_defined_key->dik_code = (int) key [0];

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	6b c8 00	 imul	 ecx, eax, 0
  000a6	0f b6 54 0d 88	 movzx	 edx, BYTE PTR _key$[ebp+ecx]
  000ab	8b 45 f8	 mov	 eax, DWORD PTR _new_user_defined_key$[ebp]
  000ae	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 147  : 
; 148  : 				new_user_defined_key->modifier_dik_code = (int) modifier [0];

  000b1	b8 01 00 00 00	 mov	 eax, 1
  000b6	6b c8 00	 imul	 ecx, eax, 0
  000b9	0f b6 94 0d 7c
	ff ff ff	 movzx	 edx, BYTE PTR _modifier$[ebp+ecx]
  000c1	8b 45 f8	 mov	 eax, DWORD PTR _new_user_defined_key$[ebp]
  000c4	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 149  : 
; 150  : 				new_user_defined_key->next = user_defined_keys;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _new_user_defined_key$[ebp]
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?user_defined_keys@@3PAUUSER_DEFINED_KEY_TYPE@@A ; user_defined_keys
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 151  : 
; 152  : 				user_defined_keys = new_user_defined_key;

  000d3	8b 45 f8	 mov	 eax, DWORD PTR _new_user_defined_key$[ebp]
  000d6	a3 00 00 00 00	 mov	 DWORD PTR ?user_defined_keys@@3PAUUSER_DEFINED_KEY_TYPE@@A, eax ; user_defined_keys

; 153  : 		
; 154  : 				debug_log ("USER DEFINED %s=%s %s", enum_event, key, modifier);

  000db	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _modifier$[ebp]
  000e1	50		 push	 eax
  000e2	8d 4d 88	 lea	 ecx, DWORD PTR _key$[ebp]
  000e5	51		 push	 ecx
  000e6	8d 55 94	 lea	 edx, DWORD PTR _enum_event$[ebp]
  000e9	52		 push	 edx
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DJGPHEHF@USER?5DEFINED?5?$CFs?$DN?$CFs?5?$CFs@
  000ef	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000f4	83 c4 10	 add	 esp, 16			; 00000010H

; 155  : 
; 156  : 				break;

  000f7	eb 0e		 jmp	 SHORT $LN5@initialise
$LN7@initialise:

; 157  : 			}
; 158  : 
; 159  : 			ev ++;

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _ev$[ebp]
  000fc	83 c0 01	 add	 eax, 1
  000ff	89 45 fc	 mov	 DWORD PTR _ev$[ebp], eax

; 160  : 		}

  00102	e9 69 ff ff ff	 jmp	 $LN4@initialise
$LN5@initialise:

; 161  : 	}

  00107	e9 27 ff ff ff	 jmp	 $LN2@initialise
$LN1@initialise:

; 162  : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
?initialise_user_defined_events@@YGXXZ ENDP		; initialise_user_defined_events
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fscanf	PROC						; COMDAT

; 1204 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1205 :         int _Result;
; 1206 :         va_list _ArgList;
; 1207 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1208 :         _Result = _vfscanf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1209 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1210 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1211 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1062 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1063 :         return __stdio_common_vfscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfscanf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
