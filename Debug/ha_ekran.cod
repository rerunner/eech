; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?initialise_havoc_ekran_display@@YGXXZ		; initialise_havoc_ekran_display
PUBLIC	?deinitialise_havoc_ekran_display@@YGXXZ	; deinitialise_havoc_ekran_display
PUBLIC	?update_havoc_ekran_display@@YGXXZ		; update_havoc_ekran_display
PUBLIC	?draw_havoc_ekran_display_on_cockpit@@YGXMM@Z	; draw_havoc_ekran_display_on_cockpit
PUBLIC	?draw_havoc_ekran_display_on_texture@@YGXXZ	; draw_havoc_ekran_display_on_texture
PUBLIC	?set_havoc_ekran_display_text@@YGXPAD000@Z	; set_havoc_ekran_display_text
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0O@EPPDHLBE@C?3?$CF02d?5F?3?$CF02d@	; `string'
PUBLIC	??_C@_09IJJHIJNP@FUEL?5?$CF04d@			; `string'
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@4018000000000000
PUBLIC	__real@4028000000000000
PUBLIC	__real@4032000000000000
PUBLIC	__real@4042000000000000
PUBLIC	__real@40c3878000000000
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	?set_viewport@@YGXMMMM@Z:PROC			; set_viewport
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_position@@YGXMM@Z:PROC		; set_mono_font_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?update_ekran_shared_mem@@YGXPAD000@Z:PROC	; update_ekran_shared_mem
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_shared_mem_export@@3HA:DWORD	; command_line_shared_mem_export
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A:DWORD	; havoc_damage
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?text_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)		; text_colour
?clear_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)		; clear_colour
?texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)		; texture_screen
?line1@@3PADA DB 0aH DUP (?)				; line1
	ALIGN	4

?line2@@3PADA DB 0aH DUP (?)				; line2
	ALIGN	4

?line3@@3PADA DB 0aH DUP (?)				; line3
	ALIGN	4

?line4@@3PADA DB 0aH DUP (?)				; line4
_BSS	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@4042000000000000
CONST	SEGMENT
__real@4042000000000000 DQ 04042000000000000r	; 36
CONST	ENDS
;	COMDAT __real@4032000000000000
CONST	SEGMENT
__real@4032000000000000 DQ 04032000000000000r	; 18
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT ??_C@_09IJJHIJNP@FUEL?5?$CF04d@
CONST	SEGMENT
??_C@_09IJJHIJNP@FUEL?5?$CF04d@ DB 'FUEL %04d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EPPDHLBE@C?3?$CF02d?5F?3?$CF02d@
CONST	SEGMENT
??_C@_0O@EPPDHLBE@C?3?$CF02d?5F?3?$CF02d@ DB 'C:%02d F:%02d', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
;	COMDAT ?display_messages@@YGXMM@Z
_TEXT	SEGMENT
_y_line4$ = -32						; size = 4
_y_line3$ = -28						; size = 4
_y_line2$ = -24						; size = 4
_y_line1$ = -20						; size = 4
_y_max$ = -16						; size = 4
_x_max$ = -12						; size = 4
_y_min$ = -8						; size = 4
_x_min$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
?display_messages@@YGXMM@Z PROC				; display_messages, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 101  : 	float
; 102  : 		x_min,
; 103  : 		y_min,
; 104  : 		x_max,
; 105  : 		y_max,
; 106  : 		y_line1,
; 107  : 		y_line2,
; 108  : 		y_line3,
; 109  : 		y_line4;
; 110  : 
; 111  : 	x_min = x_org;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  0000e	f3 0f 11 45 fc	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 112  : 	y_min = y_org;

  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  00018	f3 0f 11 45 f8	 movss	 DWORD PTR _y_min$[ebp], xmm0

; 113  : 	x_max = x_org + VIEWPORT_WIDTH - 0.001;

  0001d	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _x_org$[ebp]
  00022	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4042000000000000
  0002a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 f4	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 114  : 	y_max = y_org + VIEWPORT_WIDTH - 0.001;

  0003b	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  00040	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4042000000000000
  00048	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00050	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00054	f3 0f 11 45 f0	 movss	 DWORD PTR _y_max$[ebp], xmm0

; 115  : 
; 116  : 	set_viewport (x_min, y_min, x_max, y_max);

  00059	51		 push	 ecx
  0005a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	51		 push	 ecx
  00065	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	51		 push	 ecx
  00070	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	51		 push	 ecx
  0007b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	e8 00 00 00 00	 call	 ?set_viewport@@YGXMMMM@Z ; set_viewport

; 117  : 
; 118  : 	y_line1 = y_org;

  0008a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  0008f	f3 0f 11 45 ec	 movss	 DWORD PTR _y_line1$[ebp], xmm0

; 119  : 	y_line2 = y_org + 6.0;

  00094	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  00099	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4018000000000000
  000a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a5	f3 0f 11 45 e8	 movss	 DWORD PTR _y_line2$[ebp], xmm0

; 120  : 	y_line3 = y_org + 12.0;

  000aa	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  000af	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4028000000000000
  000b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bb	f3 0f 11 45 e4	 movss	 DWORD PTR _y_line3$[ebp], xmm0

; 121  : 	y_line4 = y_org + 18.0;

  000c0	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _y_org$[ebp]
  000c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4032000000000000
  000cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d1	f3 0f 11 45 e0	 movss	 DWORD PTR _y_line4$[ebp], xmm0

; 122  : 
; 123  : 	set_mono_font_type (MONO_FONT_TYPE_3X6);

  000d6	6a 00		 push	 0
  000d8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 124  : 
; 125  : 	set_mono_font_colour (text_colour);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?text_colour@@3UREAL_COLOUR@@A
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 126  : 
; 127  : 	set_mono_font_position (x_min, y_line1);

  000e8	51		 push	 ecx
  000e9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_line1$[ebp]
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  000f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fe	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 128  : 
; 129  : 	print_mono_font_string (line1);

  00103	68 00 00 00 00	 push	 OFFSET ?line1@@3PADA
  00108	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 130  : 
; 131  : 	set_mono_font_position (x_min, y_line2);

  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_line2$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	51		 push	 ecx
  00119	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 132  : 
; 133  : 	print_mono_font_string (line2);

  00128	68 00 00 00 00	 push	 OFFSET ?line2@@3PADA
  0012d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 134  : 
; 135  : 	set_mono_font_position (x_min, y_line3);

  00132	51		 push	 ecx
  00133	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y_line3$[ebp]
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	51		 push	 ecx
  0013e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 136  : 
; 137  : 	print_mono_font_string (line3);

  0014d	68 00 00 00 00	 push	 OFFSET ?line3@@3PADA
  00152	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 138  : 
; 139  : 	set_mono_font_position (x_min, y_line4);

  00157	51		 push	 ecx
  00158	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y_line4$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	51		 push	 ecx
  00163	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 140  : 
; 141  : 	print_mono_font_string (line4);

  00172	68 00 00 00 00	 push	 OFFSET ?line4@@3PADA
  00177	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 142  : }

  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
?display_messages@@YGXMM@Z ENDP				; display_messages
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
;	COMDAT ?set_havoc_ekran_display_text@@YGXPAD000@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_s3$ = 16						; size = 4
_s4$ = 20						; size = 4
?set_havoc_ekran_display_text@@YGXPAD000@Z PROC		; set_havoc_ekran_display_text, COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 252  : 	if (s1)

  00009	83 7d 08 00	 cmp	 DWORD PTR _s1$[ebp], 0
  0000d	74 23		 je	 SHORT $LN2@set_havoc_

; 253  : 	{
; 254  : 		strncpy (line1, s1, MAX_STRING_LENGTH);

  0000f	6a 09		 push	 9
  00011	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  00014	50		 push	 eax
  00015	68 00 00 00 00	 push	 OFFSET ?line1@@3PADA
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 255  : 
; 256  : 		line1[MAX_STRING_LENGTH] = '\0';

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	6b c8 09	 imul	 ecx, eax, 9
  0002b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line1@@3PADA[ecx], 0
$LN2@set_havoc_:

; 257  : 	}
; 258  : 
; 259  : 	if (s2)

  00032	83 7d 0c 00	 cmp	 DWORD PTR _s2$[ebp], 0
  00036	74 23		 je	 SHORT $LN3@set_havoc_

; 260  : 	{
; 261  : 		strncpy (line2, s2, MAX_STRING_LENGTH);

  00038	6a 09		 push	 9
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ?line2@@3PADA
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 262  : 
; 263  : 		line2[MAX_STRING_LENGTH] = '\0';

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	6b c8 09	 imul	 ecx, eax, 9
  00054	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line2@@3PADA[ecx], 0
$LN3@set_havoc_:

; 264  : 	}
; 265  : 
; 266  : 	if (s3)

  0005b	83 7d 10 00	 cmp	 DWORD PTR _s3$[ebp], 0
  0005f	74 23		 je	 SHORT $LN4@set_havoc_

; 267  : 	{
; 268  : 		strncpy (line3, s3, MAX_STRING_LENGTH);

  00061	6a 09		 push	 9
  00063	8b 45 10	 mov	 eax, DWORD PTR _s3$[ebp]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ?line3@@3PADA
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 269  : 
; 270  : 		line3[MAX_STRING_LENGTH] = '\0';

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	6b c8 09	 imul	 ecx, eax, 9
  0007d	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line3@@3PADA[ecx], 0
$LN4@set_havoc_:

; 271  : 	}
; 272  : 
; 273  : 	if (s4)

  00084	83 7d 14 00	 cmp	 DWORD PTR _s4$[ebp], 0
  00088	74 23		 je	 SHORT $LN5@set_havoc_

; 274  : 	{
; 275  : 		strncpy (line4, s4, MAX_STRING_LENGTH);

  0008a	6a 09		 push	 9
  0008c	8b 45 14	 mov	 eax, DWORD PTR _s4$[ebp]
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ?line4@@3PADA
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 276  : 
; 277  : 		line4[MAX_STRING_LENGTH] = '\0';

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	6b c8 09	 imul	 ecx, eax, 9
  000a6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line4@@3PADA[ecx], 0
$LN5@set_havoc_:

; 278  : 	}
; 279  : 
; 280  : 	if (command_line_shared_mem_export != 0)

  000ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_shared_mem_export@@3HA, 0 ; command_line_shared_mem_export
  000b4	74 15		 je	 SHORT $LN1@set_havoc_

; 281  : 		update_ekran_shared_mem(s1, s2, s3, s4); // Retro 14Aug2006

  000b6	8b 45 14	 mov	 eax, DWORD PTR _s4$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 10	 mov	 ecx, DWORD PTR _s3$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 0c	 mov	 edx, DWORD PTR _s2$[ebp]
  000c1	52		 push	 edx
  000c2	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?update_ekran_shared_mem@@YGXPAD000@Z ; update_ekran_shared_mem
$LN1@set_havoc_:

; 282  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 10 00	 ret	 16			; 00000010H
?set_havoc_ekran_display_text@@YGXPAD000@Z ENDP		; set_havoc_ekran_display_text
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
;	COMDAT ?draw_havoc_ekran_display_on_texture@@YGXXZ
_TEXT	SEGMENT
?draw_havoc_ekran_display_on_texture@@YGXXZ PROC	; draw_havoc_ekran_display_on_texture, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 226  : 	set_active_screen (texture_screen);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 227  : 
; 228  : 	if (lock_screen (texture_screen))

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0001f	85 c0		 test	 eax, eax
  00021	74 40		 je	 SHORT $LN2@draw_havoc

; 229  : 	{
; 230  : 		set_block (0, 0, 63, 63, clear_colour);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_colour@@3UREAL_COLOUR@@A
  00028	50		 push	 eax
  00029	6a 3f		 push	 63			; 0000003fH
  0002b	6a 3f		 push	 63			; 0000003fH
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 231  : 
; 232  : 		display_messages (0.0, 0.0);

  00036	51		 push	 ecx
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	0f 57 c0	 xorps	 xmm0, xmm0
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?display_messages@@YGXMM@Z ; display_messages

; 233  : 
; 234  : 		flush_screen_texture_graphics (texture_screen);

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 235  : 
; 236  : 		unlock_screen (texture_screen);

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN2@draw_havoc:

; 237  : 	}
; 238  : 
; 239  : 	set_active_screen (video_screen);

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 240  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?draw_havoc_ekran_display_on_texture@@YGXXZ ENDP	; draw_havoc_ekran_display_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
;	COMDAT ?draw_havoc_ekran_display_on_cockpit@@YGXMM@Z
_TEXT	SEGMENT
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
?draw_havoc_ekran_display_on_cockpit@@YGXMM@Z PROC	; draw_havoc_ekran_display_on_cockpit, COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 212  : 	if (lock_screen (active_screen))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00014	85 c0		 test	 eax, eax
  00016	74 26		 je	 SHORT $LN2@draw_havoc

; 213  : 	{
; 214  : 		display_messages (x_org, y_org);

  00018	51		 push	 ecx
  00019	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	51		 push	 ecx
  00024	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	e8 00 00 00 00	 call	 ?display_messages@@YGXMM@Z ; display_messages

; 215  : 
; 216  : 		unlock_screen (active_screen);

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN2@draw_havoc:

; 217  : 	}
; 218  : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?draw_havoc_ekran_display_on_cockpit@@YGXMM@Z ENDP	; draw_havoc_ekran_display_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
;	COMDAT ?update_havoc_ekran_display@@YGXXZ
_TEXT	SEGMENT
tv132 = -240						; size = 8
tv133 = -232						; size = 8
_s2$ = -160						; size = 80
_s1$ = -80						; size = 80
?update_havoc_ekran_display@@YGXXZ PROC			; update_havoc_ekran_display, COMDAT

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 177  : 	char
; 178  : 		s1[80],
; 179  : 		s2[80];
; 180  : 
; 181  : 	sprintf

  0000c	6a 44		 push	 68			; 00000044H
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  00019	50		 push	 eax
  0001a	6a 43		 push	 67			; 00000043H
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EPPDHLBE@C?3?$CF02d?5F?3?$CF02d@
  0002e	8d 55 b0	 lea	 edx, DWORD PTR _s1$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 _sprintf
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 182  : 	(
; 183  : 		s1,
; 184  : 		"C:%02d F:%02d",
; 185  : 		get_local_entity_weapon_count (get_gunship_entity (), ENTITY_SUB_TYPE_WEAPON_CHAFF),
; 186  : 		get_local_entity_weapon_count (get_gunship_entity (), ENTITY_SUB_TYPE_WEAPON_FLARE)
; 187  : 	);
; 188  : 
; 189  : 	if (havoc_damage.chaff_dispenser)

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  0003f	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00042	83 e0 01	 and	 eax, 1
  00045	74 19		 je	 SHORT $LN2@update_hav

; 190  : 	{
; 191  : 		s1[2] = 'X';

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	d1 e0		 shl	 eax, 1
  0004e	c6 44 05 b0 58	 mov	 BYTE PTR _s1$[ebp+eax], 88 ; 00000058H

; 192  : 		s1[3] = 'X';

  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	6b c8 03	 imul	 ecx, eax, 3
  0005b	c6 44 0d b0 58	 mov	 BYTE PTR _s1$[ebp+ecx], 88 ; 00000058H
$LN2@update_hav:

; 193  : 	}
; 194  : 
; 195  : 	if (havoc_damage.flare_dispenser)

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?havoc_damage@@3THAVOC_DAMAGE_FLAGS@@A ; havoc_damage
  00065	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00068	83 e0 01	 and	 eax, 1
  0006b	74 1a		 je	 SHORT $LN3@update_hav

; 196  : 	{
; 197  : 		s1[7] = 'X';

  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	6b c8 07	 imul	 ecx, eax, 7
  00075	c6 44 0d b0 58	 mov	 BYTE PTR _s1$[ebp+ecx], 88 ; 00000058H

; 198  : 		s1[8] = 'X';

  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	c1 e0 03	 shl	 eax, 3
  00082	c6 44 05 b0 58	 mov	 BYTE PTR _s1$[ebp+eax], 88 ; 00000058H
$LN3@update_hav:

; 199  : 	}
; 200  : 
; 201  : 	sprintf (s2, "FUEL %04d", (int) (bound (current_flight_dynamics->fuel_weight.value, 0.0, 9999.0)));

  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0008c	f3 0f 5a 80 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9380]
  00094	0f 57 c9	 xorps	 xmm1, xmm1
  00097	66 0f 2f c8	 comisd	 xmm1, xmm0
  0009b	76 0d		 jbe	 SHORT $LN7@update_hav
  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv133[ebp], xmm0
  000a8	eb 50		 jmp	 SHORT $LN8@update_hav
$LN7@update_hav:
  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b0	f3 0f 5a 81 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+9380]
  000b8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  000c0	76 12		 jbe	 SHORT $LN5@update_hav
  000c2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  000ca	f2 0f 11 85 10
	ff ff ff	 movsd	 QWORD PTR tv132[ebp], xmm0
  000d2	eb 16		 jmp	 SHORT $LN6@update_hav
$LN5@update_hav:
  000d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000da	f3 0f 5a 82 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [edx+9380]
  000e2	f2 0f 11 85 10
	ff ff ff	 movsd	 QWORD PTR tv132[ebp], xmm0
$LN6@update_hav:
  000ea	f2 0f 10 85 10
	ff ff ff	 movsd	 xmm0, QWORD PTR tv132[ebp]
  000f2	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv133[ebp], xmm0
$LN8@update_hav:
  000fa	f2 0f 2c 85 18
	ff ff ff	 cvttsd2si eax, QWORD PTR tv133[ebp]
  00102	50		 push	 eax
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_09IJJHIJNP@FUEL?5?$CF04d@
  00108	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _s2$[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 _sprintf
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  : 
; 203  : 	set_havoc_ekran_display_text (NULL, NULL, s1, s2);

  00117	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _s2$[ebp]
  0011d	50		 push	 eax
  0011e	8d 4d b0	 lea	 ecx, DWORD PTR _s1$[ebp]
  00121	51		 push	 ecx
  00122	6a 00		 push	 0
  00124	6a 00		 push	 0
  00126	e8 00 00 00 00	 call	 ?set_havoc_ekran_display_text@@YGXPAD000@Z ; set_havoc_ekran_display_text

; 204  : }

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
?update_havoc_ekran_display@@YGXXZ ENDP			; update_havoc_ekran_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
;	COMDAT ?deinitialise_havoc_ekran_display@@YGXXZ
_TEXT	SEGMENT
?deinitialise_havoc_ekran_display@@YGXXZ PROC		; deinitialise_havoc_ekran_display, COMDAT

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 168  : 	destroy_screen (texture_screen);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_screen@@3PAUSCREEN@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 169  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?deinitialise_havoc_ekran_display@@YGXXZ ENDP		; deinitialise_havoc_ekran_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\havoc\ha_ekran.c
;	COMDAT ?initialise_havoc_ekran_display@@YGXXZ
_TEXT	SEGMENT
?initialise_havoc_ekran_display@@YGXXZ PROC		; initialise_havoc_ekran_display, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 150  : 	texture_screen = create_system_texture_screen (64, 64, TEXTURE_INDEX_HVCKPT_DISPLAY_EKRAN, TEXTURE_TYPE_SINGLEALPHA);

  00009	6a 02		 push	 2
  0000b	68 e4 06 00 00	 push	 1764			; 000006e4H
  00010	6a 40		 push	 64			; 00000040H
  00012	6a 40		 push	 64			; 00000040H
  00014	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00019	a3 00 00 00 00	 mov	 DWORD PTR ?texture_screen@@3PAUSCREEN@@A, eax

; 151  : 
; 152  : 	line1[0] = '\0';

  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line1@@3PADA[ecx], 0

; 153  : 	line2[0] = '\0';

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	6b c8 00	 imul	 ecx, eax, 0
  00035	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line2@@3PADA[ecx], 0

; 154  : 	line3[0] = '\0';

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	6b c8 00	 imul	 ecx, eax, 0
  00044	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line3@@3PADA[ecx], 0

; 155  : 	line4[0] = '\0';

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?line4@@3PADA[ecx], 0

; 156  : 
; 157  : 	set_rgb_colour (text_colour, 255, 147, 0, 255);

  0005a	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  00061	c6 05 01 00 00
	00 93		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A+1, 147 ; 00000093H
  00068	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A, 0
  0006f	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?text_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 158  : 
; 159  : 	set_rgb_colour (clear_colour, 255, 147, 0, 0);

  00076	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  0007d	c6 05 01 00 00
	00 93		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A+1, 147 ; 00000093H
  00084	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A, 0
  0008b	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_colour@@3UREAL_COLOUR@@A+3, 0

; 160  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?initialise_havoc_ekran_display@@YGXXZ ENDP		; initialise_havoc_ekran_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
